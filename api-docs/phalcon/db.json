{"index":"<h1>Phalcon</h1> <p>Welcome to Phalcon framework. Our mission is to give you an advanced tool for developing the faster web sites and applications with PHP.</p>   <h2 id=\"table-of-contents\">Table of Contents</h2> <div class=\"toctree-wrapper compound\"> <ul> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/install\">Installation</a><ul> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/install#windows\">Windows</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/install#related-guides\">Related Guides</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/install#linux-solaris\">Linux/Solaris</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/install#requirements\">Requirements</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/install#compilation\">Compilation</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/install#mac-os-x\">Mac OS X</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/install#id1\">Requirements</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/install#freebsd\">FreeBSD</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/install#installation-notes\">Installation Notes</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/apache\">Apache Installation Notes</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/nginx\">Nginx Installation Notes</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/cherokee\">Cherokee Installation Notes</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/built-in\">Using PHP Built-in webserver</a></li> </ul> </li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/tutorial\">Tutorial 1: Let’s learn by example</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial#checking-your-installation\">Checking your installation</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/tutorial#creating-a-project\">Creating a project</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tutorial#file-structure\">File structure</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tutorial#beautiful-urls\">Beautiful URLs</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tutorial#bootstrap\">Bootstrap</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tutorial#autoloaders\">Autoloaders</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tutorial#dependency-management\">Dependency Management</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tutorial#creating-a-controller\">Creating a Controller</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tutorial#sending-output-to-a-view\">Sending output to a view</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tutorial#designing-a-sign-up-form\">Designing a sign up form</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tutorial#creating-a-model\">Creating a Model</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tutorial#setting-a-database-connection\">Setting a Database Connection</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tutorial#storing-data-using-models\">Storing data using models</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial#conclusion\">Conclusion</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/tutorial-invo\">Tutorial 2: Introducing INVO</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-invo#project-structure\">Project Structure</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-invo#routing\">Routing</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-invo#configuration\">Configuration</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-invo#autoloaders\">Autoloaders</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-invo#registering-services\">Registering services</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-invo#handling-the-request\">Handling the Request</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-invo#dependency-injection\">Dependency Injection</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/tutorial-invo-2\">Tutorial 3: Securing INVO</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-invo-2#log-into-the-application\">Log into the Application</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/tutorial-invo-2#securing-the-backend\">Securing the Backend</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tutorial-invo-2#events-management\">Events Management</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tutorial-invo-2#providing-an-acl-list\">Providing an ACL list</a></li> </ul> </li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/tutorial-invo-3\">Tutorial 4: Using CRUDs</a><ul> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/tutorial-invo-3#working-with-the-crud\">Working with the CRUD</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tutorial-invo-3#the-search-form\">The Search Form</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tutorial-invo-3#performing-a-search\">Performing a Search</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tutorial-invo-3#creating-and-updating-records\">Creating and Updating Records</a></li> </ul> </li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/tutorial-invo-4\">Tutorial 5: Customizing INVO</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-invo-4#user-components\">User Components</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-invo-4#changing-the-title-dynamically\">Changing the Title Dynamically</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/tutorial-vokuro\">Tutorial 6: Vökuró</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-vokuro#checking-your-installation\">Checking your installation</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-vokuro#project-structure\">Project Structure</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-vokuro#load-classes-and-dependencies\">Load Classes and Dependencies</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-vokuro#sign-up\">Sign Up</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/tutorial-rest\">Tutorial 7: Creating a Simple REST API</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-rest#defining-the-api\">Defining the API</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-rest#creating-the-application\">Creating the Application</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-rest#creating-a-model\">Creating a Model</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-rest#retrieving-data\">Retrieving Data</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-rest#inserting-data\">Inserting Data</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-rest#updating-data\">Updating Data</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-rest#deleting-data\">Deleting Data</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-rest#testing-our-application\">Testing our Application</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tutorial-rest#conclusion\">Conclusion</a></li> </ul> </li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"reference/samples\">List of examples</a></li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/di\">Dependency Injection/Service Location</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/di#our-approach\">Our approach</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/di#registering-services-in-the-container\">Registering services in the Container</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/di#simple-registration\">Simple Registration</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/di#complex-registration\">Complex Registration</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/di#resolving-services\">Resolving Services</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/di#events\">Events</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/di#shared-services\">Shared services</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/di#manipulating-services-individually\">Manipulating services individually</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/di#instantiating-classes-via-the-service-container\">Instantiating classes via the Service Container</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/di#automatic-injecting-of-the-di-itself\">Automatic Injecting of the DI itself</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/di#avoiding-service-resolution\">Avoiding service resolution</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/di#organizing-services-in-files\">Organizing services in files</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/di#accessing-the-di-in-a-static-way\">Accessing the DI in a static way</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/di#factory-default-di\">Factory Default DI</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/di#service-name-conventions\">Service Name Conventions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/di#implementing-your-own-di\">Implementing your own DI</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/mvc\">The MVC Architecture</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/mvc#models\">Models</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/mvc#views\">Views</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/mvc#controllers\">Controllers</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/controllers\">Using Controllers</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/controllers#dispatch-loop\">Dispatch Loop</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/controllers#initializing-controllers\">Initializing Controllers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/controllers#injecting-services\">Injecting Services</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/controllers#request-and-response\">Request and Response</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/controllers#session-data\">Session Data</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/controllers#using-services-as-controllers\">Using Services as Controllers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/controllers#creating-a-base-controller\">Creating a Base Controller</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/controllers#events-in-controllers\">Events in Controllers</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/models\">Working with Models</a><ul> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/models#creating-models\">Creating Models</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#public-properties-vs-setters-getters\">Public properties vs. Setters/Getters</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#models-in-namespaces\">Models in Namespaces</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models#understanding-records-to-objects\">Understanding Records To Objects</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/models#finding-records\">Finding Records</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#model-resultsets\">Model Resultsets</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#filtering-resultsets\">Filtering Resultsets</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#binding-parameters\">Binding Parameters</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models#initializing-preparing-fetched-records\">Initializing/Preparing fetched records</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/models#relationships-between-models\">Relationships between Models</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#unidirectional-relationships\">Unidirectional relationships</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#bidirectional-relations\">Bidirectional relations</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#defining-relationships\">Defining relationships</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#taking-advantage-of-relationships\">Taking advantage of relationships</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#aliasing-relationships\">Aliasing Relationships</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#magic-getters-vs-explicit-methods\">Magic Getters vs. Explicit methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/models#virtual-foreign-keys\">Virtual Foreign Keys</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#cascade-restrict-actions\">Cascade/Restrict actions</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models#generating-calculations\">Generating Calculations</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models#hydration-modes\">Hydration Modes</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/models#creating-updating-records\">Creating Updating/Records</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#create-update-with-confidence\">Create/Update with Confidence</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#auto-generated-identity-columns\">Auto-generated identity columns</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#storing-related-records\">Storing related records</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#validation-messages\">Validation Messages</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#events-and-events-manager\">Events and Events Manager</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#implementing-events-in-the-model-s-class\">Implementing Events in the Model’s class</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#using-a-custom-events-manager\">Using a custom Events Manager</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#implementing-a-business-rule\">Implementing a Business Rule</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#validating-data-integrity\">Validating Data Integrity</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#avoiding-sql-injections\">Avoiding SQL injections</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/models#skipping-columns\">Skipping Columns</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#dynamic-update\">Dynamic Update</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models#deleting-records\">Deleting Records</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models#validation-failed-events\">Validation Failed Events</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/models#behaviors\">Behaviors</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#timestampable\">Timestampable</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#softdelete\">SoftDelete</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#creating-your-own-behaviors\">Creating your own behaviors</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#using-traits-as-behaviors\">Using Traits as behaviors</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models#independent-column-mapping\">Independent Column Mapping</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/models#operations-over-resultsets\">Operations over Resultsets</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#updating-related-records\">Updating related records</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models#deleting-related-records\">Deleting related records</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models#record-snapshots\">Record Snapshots</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models#pointing-to-a-different-schema\">Pointing to a different schema</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models#setting-multiple-databases\">Setting multiple databases</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models#logging-low-level-sql-statements\">Logging Low-Level SQL Statements</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models#profiling-sql-statements\">Profiling SQL Statements</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models#injecting-services-into-models\">Injecting services into Models</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models#disabling-enabling-features\">Disabling/Enabling Features</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models#stand-alone-component\">Stand-Alone component</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/models-metadata\">Models Meta-Data</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models-metadata#caching-meta-data\">Caching Meta-Data</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/models-metadata#meta-data-strategies\">Meta-Data Strategies</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models-metadata#database-introspection-strategy\">Database Introspection Strategy</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/models-metadata#annotations-strategy\">Annotations Strategy</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models-metadata#manual-meta-data\">Manual Meta-Data</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/model-transactions\">Model Transactions</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/model-transactions#manual-transactions\">Manual Transactions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/model-transactions#implicit-transactions\">Implicit Transactions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/model-transactions#isolated-transactions\">Isolated Transactions</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/phql\">Phalcon Query Language (PHQL)</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/phql#usage-example\">Usage Example</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/phql#creating-phql-queries\">Creating PHQL Queries</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/phql#selecting-records\">Selecting Records</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/phql#result-types\">Result Types</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/phql#joins\">Joins</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/phql#aggregations\">Aggregations</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/phql#conditions\">Conditions</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/phql#inserting-data\">Inserting Data</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/phql#updating-data\">Updating Data</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/phql#deleting-data\">Deleting Data</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/phql#creating-queries-using-the-query-builder\">Creating queries using the Query Builder</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/phql#bound-parameters\">Bound Parameters</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/phql#disallow-literals-in-phql\">Disallow literals in PHQL</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/phql#escaping-reserved-words\">Escaping Reserved Words</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/phql#phql-lifecycle\">PHQL Lifecycle</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/phql#using-raw-sql\">Using Raw SQL</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/phql#troubleshooting\">Troubleshooting</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/models-cache\">Caching in the ORM</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models-cache#caching-resultsets\">Caching Resultsets</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models-cache#overriding-find-findfirst\">Overriding find/findFirst</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models-cache#forcing-cache\">Forcing Cache</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models-cache#caching-phql-queries\">Caching PHQL Queries</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models-cache#reusable-related-records\">Reusable Related Records</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models-cache#caching-related-records\">Caching Related Records</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models-cache#caching-related-records-recursively\">Caching Related Records Recursively</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models-cache#caching-based-on-conditions\">Caching based on Conditions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/models-cache#caching-of-phql-planning\">Caching of PHQL planning</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/odm\">ODM (Object-Document Mapper)</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/odm#creating-models\">Creating Models</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/odm#understanding-documents-to-objects\">Understanding Documents To Objects</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/odm#models-in-namespaces\">Models in Namespaces</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/odm#setting-a-connection\">Setting a Connection</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/odm#finding-documents\">Finding Documents</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/odm#aggregations\">Aggregations</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/odm#creating-updating-records\">Creating Updating/Records</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/odm#validation-messages\">Validation Messages</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/odm#validation-events-and-events-manager\">Validation Events and Events Manager</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/odm#implementing-a-business-rule\">Implementing a Business Rule</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/odm#validating-data-integrity\">Validating Data Integrity</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/odm#deleting-records\">Deleting Records</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/odm#validation-failed-events\">Validation Failed Events</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/odm#implicit-ids-vs-user-primary-keys\">Implicit Ids vs. User Primary Keys</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/odm#setting-multiple-databases\">Setting multiple databases</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/odm#injecting-services-into-models\">Injecting services into Models</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/views\">Using Views</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/views#integrating-views-with-controllers\">Integrating Views with Controllers</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/views#hierarchical-rendering\">Hierarchical Rendering</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/views#using-templates\">Using Templates</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/views#control-rendering-levels\">Control Rendering Levels</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/views#disabling-render-levels\">Disabling render levels</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/views#picking-views\">Picking Views</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/views#disabling-the-view\">Disabling the view</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/views#simple-rendering\">Simple Rendering</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/views#using-partials\">Using Partials</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/views#transfer-values-from-the-controller-to-views\">Transfer values from the controller to views</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/views#using-models-in-the-view-layer\">Using models in the view layer</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/views#caching-view-fragments\">Caching View Fragments</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/views#template-engines\">Template Engines</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/views#creating-your-own-template-engine-adapter\">Creating your own Template Engine Adapter</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/views#changing-the-template-engine\">Changing the Template Engine</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/views#injecting-services-in-view\">Injecting services in View</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/views#stand-alone-component\">Stand-Alone Component</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/views#id1\">Hierarchical Rendering</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/views#id2\">Simple Rendering</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/views#view-events\">View Events</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/tags\">View Helpers</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tags#document-type-of-content\">Document Type of Content</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tags#generating-links\">Generating Links</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tags#creating-forms\">Creating Forms</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tags#helpers-to-generate-form-elements\">Helpers to Generate Form Elements</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tags#making-select-boxes\">Making Select Boxes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tags#assigning-html-attributes\">Assigning HTML attributes</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/tags#setting-helper-values\">Setting Helper Values</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tags#from-controllers\">From Controllers</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tags#from-the-request\">From the Request</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tags#specifying-values-directly\">Specifying values directly</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tags#changing-dynamically-the-document-title\">Changing dynamically the Document Title</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/tags#static-content-helpers\">Static Content Helpers</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tags#images\">Images</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tags#stylesheets\">Stylesheets</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tags#javascript\">Javascript</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tags#html5-elements-generic-html-helper\">HTML5 elements - generic HTML helper</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tags#tag-service\">Tag Service</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tags#creating-your-own-helpers\">Creating your own helpers</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/assets\">Assets Management</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/assets#adding-resources\">Adding Resources</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/assets#local-remote-resources\">Local/Remote resources</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/assets#collections\">Collections</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/assets#url-prefixes\">URL Prefixes</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/assets#minification-filtering\">Minification/Filtering</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/assets#built-in-filters\">Built-In Filters</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/assets#custom-filters\">Custom Filters</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/assets#custom-output\">Custom Output</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/volt\">Volt: Template Engine</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/volt#introduction\">Introduction</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/volt#activating-volt\">Activating Volt</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/volt#basic-usage\">Basic Usage</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/volt#variables\">Variables</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/volt#filters\">Filters</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/volt#comments\">Comments</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/volt#list-of-control-structures\">List of Control Structures</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/volt#for\">For</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/volt#loop-controls\">Loop Controls</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/volt#if\">If</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/volt#loop-context\">Loop Context</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/volt#assignments\">Assignments</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/volt#expressions\">Expressions</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/volt#literals\">Literals</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/volt#arrays\">Arrays</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/volt#math\">Math</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/volt#comparisons\">Comparisons</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/volt#logic\">Logic</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/volt#other-operators\">Other Operators</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/volt#tests\">Tests</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/volt#macros\">Macros</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/volt#using-tag-helpers\">Using Tag Helpers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/volt#functions\">Functions</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/volt#view-integration\">View Integration</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/volt#include\">Include</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/volt#partial-vs-include\">Partial vs Include</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/volt#template-inheritance\">Template Inheritance</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/volt#multiple-inheritance\">Multiple Inheritance</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/volt#autoescape-mode\">Autoescape mode</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/volt#setting-up-the-volt-engine\">Setting up the Volt Engine</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/volt#extending-volt\">Extending Volt</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/volt#id1\">Functions</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/volt#id2\">Filters</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/volt#extensions\">Extensions</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/volt#caching-view-fragments\">Caching view fragments</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/volt#inject-services-into-a-template\">Inject Services into a Template</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/volt#stand-alone-component\">Stand-alone component</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/volt#external-resources\">External Resources</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/applications\">MVC Applications</a><ul> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/applications#single-or-multi-module-applications\">Single or Multi Module Applications</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/applications#single-module\">Single Module</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/applications#multi-module\">Multi Module</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/applications#understanding-the-default-behavior\">Understanding the default behavior</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/applications#manual-bootstrapping\">Manual bootstrapping</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/applications#application-events\">Application Events</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/applications#external-resources\">External Resources</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/routing\">Routing</a><ul> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/routing#defining-routes\">Defining Routes</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/routing#parameters-with-names\">Parameters with Names</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/routing#short-syntax\">Short Syntax</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/routing#mixing-array-and-short-syntax\">Mixing Array and Short Syntax</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/routing#routing-to-modules\">Routing to Modules</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/routing#http-method-restrictions\">HTTP Method Restrictions</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/routing#using-conversors\">Using conversors</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/routing#groups-of-routes\">Groups of Routes</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/routing#matching-routes\">Matching Routes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/routing#naming-routes\">Naming Routes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/routing#usage-examples\">Usage Examples</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/routing#default-behavior\">Default Behavior</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/routing#setting-the-default-route\">Setting the default route</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/routing#not-found-paths\">Not Found Paths</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/routing#setting-default-paths\">Setting default paths</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/routing#dealing-with-extra-trailing-slashes\">Dealing with extra/trailing slashes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/routing#match-callbacks\">Match Callbacks</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/routing#hostname-constraints\">Hostname Constraints</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/routing#uri-sources\">URI Sources</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/routing#testing-your-routes\">Testing your routes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/routing#annotations-router\">Annotations Router</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/routing#registering-router-instance\">Registering Router instance</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/routing#implementing-your-own-router\">Implementing your own Router</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/dispatching\">Dispatching Controllers</a><ul> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/dispatching#the-dispatch-loop\">The Dispatch Loop</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/dispatching#dispatch-loop-events\">Dispatch Loop Events</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/dispatching#forwarding-to-other-actions\">Forwarding to other actions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/dispatching#preparing-parameters\">Preparing Parameters</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/dispatching#getting-parameters\">Getting Parameters</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/dispatching#preparing-actions\">Preparing actions</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/dispatching#camelize-action-names\">Camelize action names</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/dispatching#remove-legacy-extensions\">Remove legacy extensions</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/dispatching#inject-model-instances\">Inject model instances</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/dispatching#handling-not-found-exceptions\">Handling Not-Found Exceptions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/dispatching#implementing-your-own-dispatcher\">Implementing your own Dispatcher</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/micro\">Micro Applications</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/micro#creating-a-micro-application\">Creating a Micro Application</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/micro#defining-routes\">Defining routes</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/micro#routes-with-parameters\">Routes with Parameters</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/micro#starting-route\">Starting Route</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/micro#rewrite-rules\">Rewrite Rules</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/micro#working-with-responses\">Working with Responses</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/micro#making-redirections\">Making redirections</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/micro#generating-urls-for-routes\">Generating URLs for Routes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/micro#interacting-with-the-dependency-injector\">Interacting with the Dependency Injector</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/micro#not-found-handler\">Not-Found Handler</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/micro#models-in-micro-applications\">Models in Micro Applications</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/micro#micro-application-events\">Micro Application Events</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/micro#middleware-events\">Middleware events</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/micro#using-controllers-as-handlers\">Using Controllers as Handlers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/micro#returning-responses\">Returning Responses</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/micro#rendering-views\">Rendering Views</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/micro#error-handling\">Error Handling</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/micro#related-sources\">Related Sources</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/namespaces\">Working with Namespaces</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/namespaces#setting-up-the-framework\">Setting up the framework</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/namespaces#controllers-in-namespaces\">Controllers in Namespaces</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/namespaces#models-in-namespaces\">Models in Namespaces</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/events\">Events Manager</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/events#usage-example\">Usage Example</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/events#creating-components-that-trigger-events\">Creating components that trigger Events</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/events#event-propagation-cancellation\">Event Propagation/Cancellation</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/events#listener-priorities\">Listener Priorities</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/events#collecting-responses\">Collecting Responses</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/events#implementing-your-own-eventsmanager\">Implementing your own EventsManager</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/request\">Request Environment</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/request#getting-values\">Getting Values</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/request#accessing-the-request-from-controllers\">Accessing the Request from Controllers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/request#uploading-files\">Uploading Files</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/request#working-with-headers\">Working with Headers</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/response\">Returning Responses</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/response#working-with-headers\">Working with Headers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/response#making-redirections\">Making Redirections</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/response#http-cache\">HTTP Cache</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/response#setting-an-expiration-time\">Setting an Expiration Time</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/response#cache-control\">Cache-Control</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/response#e-tag\">E-Tag</a></li> </ul> </li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/cookies\">Cookies Management</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/cookies#basic-usage\">Basic Usage</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/cookies#encryption-decryption-of-cookies\">Encryption/Decryption of Cookies</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/url\">Generating URLs and Paths</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/url#setting-a-base-uri\">Setting a base URI</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/url#generating-uris\">Generating URIs</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/url#producing-urls-without-mod-rewrite\">Producing URLs without mod_rewrite</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/url#producing-urls-from-volt\">Producing URLs from Volt</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/url#static-vs-dynamic-uris\">Static vs. Dynamic URIs</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/url#implementing-your-own-url-generator\">Implementing your own URL Generator</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/flash\">Flashing Messages</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/flash#adapters\">Adapters</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/flash#usage\">Usage</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/flash#printing-messages\">Printing Messages</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/flash#implicit-flush-vs-session\">Implicit Flush vs. Session</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/session\">Storing data in Session</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/session#starting-the-session\">Starting the Session</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/session#storing-retrieving-data-in-session\">Storing/Retrieving data in Session</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/session#removing-destroying-sessions\">Removing/Destroying Sessions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/session#isolating-session-data-between-applications\">Isolating Session Data between Applications</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/session#session-bags\">Session Bags</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/session#persistent-data-in-components\">Persistent Data in Components</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/session#implementing-your-own-adapters\">Implementing your own adapters</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/filter\">Filtering and Sanitizing</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/filter#sanitizing-data\">Sanitizing data</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/filter#sanitizing-from-controllers\">Sanitizing from Controllers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/filter#filtering-action-parameters\">Filtering Action Parameters</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/filter#filtering-data\">Filtering data</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/filter#types-of-built-in-filters\">Types of Built-in Filters</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/filter#creating-your-own-filters\">Creating your own Filters</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/filter#complex-sanitizing-and-filtering\">Complex Sanitizing and Filtering</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/filter#implementing-your-own-filter\">Implementing your own Filter</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/escaper\">Contextual Escaping</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/escaper#escaping-html\">Escaping HTML</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/escaper#escaping-html-attributes\">Escaping HTML Attributes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/escaper#escaping-urls\">Escaping URLs</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/escaper#escaping-css\">Escaping CSS</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/escaper#escaping-javascript\">Escaping JavaScript</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/validation\">Validation</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/validation#initializing-validation\">Initializing Validation</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/validation#validators\">Validators</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/validation#validation-messages\">Validation Messages</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/validation#filtering-of-data\">Filtering of Data</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/validation#validation-events\">Validation Events</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/validation#cancelling-validations\">Cancelling Validations</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/validation#avoid-validate-empty-values\">Avoid validate empty values</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/forms\">Forms</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/forms#initializing-forms\">Initializing forms</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/forms#validation\">Validation</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/forms#filtering\">Filtering</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/forms#setting-user-options\">Setting User Options</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/forms#forms-entities\">Forms + Entities</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/forms#form-elements\">Form Elements</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/forms#event-callbacks\">Event Callbacks</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/forms#rendering-forms\">Rendering Forms</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/forms#creating-form-elements\">Creating Form Elements</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/forms#forms-manager\">Forms Manager</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/forms#external-resources\">External Resources</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/config\">Reading Configurations</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/config#file-adapters\">File Adapters</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/config#native-arrays\">Native Arrays</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/config#reading-ini-files\">Reading INI Files</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/config#merging-configurations\">Merging Configurations</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/config#injecting-configuration-dependency\">Injecting Configuration Dependency</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/pagination\">Pagination</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/pagination#data-adapters\">Data Adapters</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/pagination#examples\">Examples</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/pagination#adapters-usage\">Adapters Usage</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/pagination#page-attributes\">Page Attributes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/pagination#implementing-your-own-adapters\">Implementing your own adapters</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/cache\">Improving Performance with Cache</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/cache#when-to-implement-cache\">When to implement cache?</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/cache#caching-behavior\">Caching Behavior</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/cache#caching-output-fragments\">Caching Output Fragments</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/cache#caching-arbitrary-data\">Caching Arbitrary Data</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/cache#file-backend-example\">File Backend Example</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/cache#memcached-backend-example\">Memcached Backend Example</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/cache#querying-the-cache\">Querying the cache</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/cache#deleting-data-from-the-cache\">Deleting data from the cache</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/cache#checking-cache-existence\">Checking cache existence</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/cache#lifetime\">Lifetime</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/cache#multi-level-cache\">Multi-Level Cache</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/cache#frontend-adapters\">Frontend Adapters</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/cache#implementing-your-own-frontend-adapters\">Implementing your own Frontend adapters</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/cache#backend-adapters\">Backend Adapters</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/cache#implementing-your-own-backend-adapters\">Implementing your own Backend adapters</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/cache#file-backend-options\">File Backend Options</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/cache#memcached-backend-options\">Memcached Backend Options</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/cache#apc-backend-options\">APC Backend Options</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/cache#mongo-backend-options\">Mongo Backend Options</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/cache#xcache-backend-options\">XCache Backend Options</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/cache#redis-backend-options\">Redis Backend Options</a></li> </ul> </li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/security\">Security</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/security#password-hashing\">Password Hashing</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/security#cross-site-request-forgery-csrf-protection\">Cross-Site Request Forgery (CSRF) protection</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/security#setting-up-the-component\">Setting up the component</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/security#random\">Random</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/security#external-resources\">External Resources</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/crypt\">Encryption/Decryption</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/crypt#basic-usage\">Basic Usage</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/crypt#encryption-options\">Encryption Options</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/crypt#base64-support\">Base64 Support</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/crypt#setting-up-an-encryption-service\">Setting up an Encryption service</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/acl\">Access Control Lists (ACL)</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/acl#creating-an-acl\">Creating an ACL</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/acl#adding-roles-to-the-acl\">Adding Roles to the ACL</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/acl#adding-resources\">Adding Resources</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/acl#defining-access-controls\">Defining Access Controls</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/acl#querying-an-acl\">Querying an ACL</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/acl#function-based-access\">Function based access</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/acl#objects-as-role-name-and-resource-name\">Objects as role name and resource name</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/acl#roles-inheritance\">Roles Inheritance</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/acl#serializing-acl-lists\">Serializing ACL lists</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/acl#acl-events\">ACL Events</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/acl#implementing-your-own-adapters\">Implementing your own adapters</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/translate\">Multi-lingual Support</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/translate#adapters\">Adapters</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/translate#component-usage\">Component Usage</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/translate#implementing-your-own-adapters\">Implementing your own adapters</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/loader\">Universal Class Loader</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/loader#registering-namespaces\">Registering Namespaces</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/loader#registering-prefixes\">Registering Prefixes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/loader#registering-directories\">Registering Directories</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/loader#registering-classes\">Registering Classes</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/loader#additional-file-extensions\">Additional file extensions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/loader#modifying-current-strategies\">Modifying current strategies</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/loader#security-layer\">Security Layer</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/loader#autoloading-events\">Autoloading Events</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/loader#troubleshooting\">Troubleshooting</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/logging\">Logging</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/logging#adapters\">Adapters</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/logging#creating-a-log\">Creating a Log</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/logging#transactions\">Transactions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/logging#logging-to-multiple-handlers\">Logging to Multiple Handlers</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/logging#message-formatting\">Message Formatting</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/logging#line-formatter\">Line Formatter</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/logging#implementing-your-own-formatters\">Implementing your own formatters</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/logging#id1\">Adapters</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/logging#stream-logger\">Stream Logger</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/logging#file-logger\">File Logger</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/logging#syslog-logger\">Syslog Logger</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/logging#firephp-logger\">FirePHP Logger</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/logging#implementing-your-own-adapters\">Implementing your own adapters</a></li> </ul> </li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/annotations\">Annotations Parser</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/annotations#reading-annotations\">Reading Annotations</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/annotations#types-of-annotations\">Types of Annotations</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/annotations#practical-usage\">Practical Usage</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/annotations#cache-enabler-with-annotations\">Cache Enabler with Annotations</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/annotations#private-public-areas-with-annotations\">Private/Public areas with Annotations</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/annotations#choose-the-template-to-render\">Choose the template to render</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/annotations#annotations-adapters\">Annotations Adapters</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/annotations#implementing-your-own-adapters\">Implementing your own adapters</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/annotations#external-resources\">External Resources</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/cli\">Command Line Applications</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/cli#structure\">Structure</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/cli#creating-a-bootstrap\">Creating a Bootstrap</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/cli#tasks\">Tasks</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/cli#processing-action-parameters\">Processing action parameters</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/cli#running-tasks-in-a-chain\">Running tasks in a chain</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/queue\">Queueing</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/queue#putting-jobs-into-the-queue\">Putting Jobs into the Queue</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/queue#retrieving-messages\">Retrieving Messages</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/db\">Database Abstraction Layer</a><ul> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/db#database-adapters\">Database Adapters</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/db#implementing-your-own-adapters\">Implementing your own adapters</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/db#database-dialects\">Database Dialects</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/db#implementing-your-own-dialects\">Implementing your own dialects</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/db#connecting-to-databases\">Connecting to Databases</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/db#setting-up-additional-pdo-options\">Setting up additional PDO options</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/db#finding-rows\">Finding Rows</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/db#binding-parameters\">Binding Parameters</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/db#inserting-updating-deleting-rows\">Inserting/Updating/Deleting Rows</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/db#transactions-and-nested-transactions\">Transactions and Nested Transactions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/db#database-events\">Database Events</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/db#profiling-sql-statements\">Profiling SQL Statements</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/db#logging-sql-statements\">Logging SQL Statements</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/db#implementing-your-own-logger\">Implementing your own Logger</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/db#describing-tables-views\">Describing Tables/Views</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/db#creating-altering-dropping-tables\">Creating/Altering/Dropping Tables</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/db#creating-tables\">Creating Tables</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/db#altering-tables\">Altering Tables</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/db#dropping-tables\">Dropping Tables</a></li> </ul> </li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/intl\">Internationalization</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/intl#find-out-best-available-locale\">Find out best available Locale</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/intl#formatting-messages-based-on-locale\">Formatting messages based on Locale</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/intl#locale-sensitive-comparison\">Locale-Sensitive comparison</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/intl#transliteration\">Transliteration</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/migrations\">Database Migrations</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/migrations#schema-dumping\">Schema Dumping</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/migrations#migration-class-anatomy\">Migration Class Anatomy</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/migrations#defining-columns\">Defining Columns</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/migrations#defining-indexes\">Defining Indexes</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/migrations#defining-references\">Defining References</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/migrations#writing-migrations\">Writing Migrations</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/migrations#running-migrations\">Running Migrations</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/debug\">Debugging Applications</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/debug#catching-exceptions\">Catching Exceptions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/debug#debug-component\">Debug component</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/debug#reflection-and-introspection\">Reflection and Introspection</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/debug#using-xdebug\">Using XDebug</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/tools\">Phalcon Developer Tools</a><ul> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/tools#download\">Download</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/tools#installation\">Installation</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tools#getting-available-commands\">Getting Available Commands</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tools#generating-a-project-skeleton\">Generating a Project Skeleton</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tools#generating-controllers\">Generating Controllers</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tools#preparing-database-settings\">Preparing Database Settings</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tools#generating-models\">Generating Models</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tools#scaffold-a-crud\">Scaffold a CRUD</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tools#web-interface-to-tools\">Web Interface to Tools</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tools#integrating-tools-with-phpstorm-ide\">Integrating Tools with PhpStorm IDE</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/tools#conclusion\">Conclusion</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/whats-next\">Increasing Performance: What’s next?</a><ul> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/whats-next#profile-on-the-server\">Profile on the Server</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/whats-next#profiling-with-xdebug\">Profiling with XDebug</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/whats-next#profiling-with-xhprof\">Profiling with Xhprof</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/whats-next#profiling-sql-statements\">Profiling SQL Statements</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/whats-next#profile-on-the-client\">Profile on the Client</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/whats-next#profile-with-chrome-firefox\">Profile with Chrome/Firefox</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"reference/whats-next#yahoo-yslow\">Yahoo! YSlow</a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"reference/whats-next#profile-with-speed-tracer\">Profile with Speed Tracer</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/whats-next#use-a-recent-php-version\">Use a recent PHP version</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/whats-next#use-a-php-bytecode-cache\">Use a PHP Bytecode Cache</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/whats-next#do-blocking-work-in-the-background\">Do blocking work in the background</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/whats-next#google-page-speed\">Google Page Speed</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reference/unit-testing\">Unit testing</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/unit-testing#integrating-phpunit-with-phalcon\">Integrating PHPunit with phalcon</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/unit-testing#the-phpunit-helper-file\">The PHPunit helper file</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/unit-testing#phpunit-xml-file\">PHPunit.xml file</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"reference/unit-testing#sample-unit-test\">Sample unit test</a></li> </ul> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://docs.phalconphp.com/en/latest/api/index.html\">API Indice</a><ul> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_acl\">Abstract class <strong>Phalcon\\Acl</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_acl#constants\">Constants</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_acl_adapter\">Abstract class <strong>Phalcon\\Acl\\Adapter</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_acl_adapter#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_acl_adapter_memory\">Class <strong>Phalcon\\Acl\\Adapter\\Memory</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_acl_adapter_memory#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_acl_exception\">Class <strong>Phalcon\\Acl\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_acl_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_acl_resource\">Class <strong>Phalcon\\Acl\\Resource</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_acl_resource#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_acl_role\">Class <strong>Phalcon\\Acl\\Role</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_acl_role#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_annotations_adapter\">Abstract class <strong>Phalcon\\Annotations\\Adapter</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_annotations_adapter#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_annotations_adapter_apc\">Class <strong>Phalcon\\Annotations\\Adapter\\Apc</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_annotations_adapter_apc#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_annotations_adapter_files\">Class <strong>Phalcon\\Annotations\\Adapter\\Files</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_annotations_adapter_files#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_annotations_adapter_memory\">Class <strong>Phalcon\\Annotations\\Adapter\\Memory</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_annotations_adapter_memory#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_annotations_adapter_xcache\">Class <strong>Phalcon\\Annotations\\Adapter\\Xcache</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_annotations_adapter_xcache#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_annotations_annotation\">Class <strong>Phalcon\\Annotations\\Annotation</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_annotations_annotation#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_annotations_collection\">Class <strong>Phalcon\\Annotations\\Collection</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_annotations_collection#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_annotations_exception\">Class <strong>Phalcon\\Annotations\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_annotations_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_annotations_reader\">Class <strong>Phalcon\\Annotations\\Reader</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_annotations_reader#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_annotations_reflection\">Class <strong>Phalcon\\Annotations\\Reflection</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_annotations_reflection#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_application\">Abstract class <strong>Phalcon\\Application</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_application#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_application_exception\">Class <strong>Phalcon\\Application\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_application_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_assets_collection\">Class <strong>Phalcon\\Assets\\Collection</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_assets_collection#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_assets_exception\">Class <strong>Phalcon\\Assets\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_assets_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_assets_filters_cssmin\">Class <strong>Phalcon\\Assets\\Filters\\Cssmin</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_assets_filters_cssmin#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_assets_filters_jsmin\">Class <strong>Phalcon\\Assets\\Filters\\Jsmin</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_assets_filters_jsmin#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_assets_filters_none\">Class <strong>Phalcon\\Assets\\Filters\\None</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_assets_filters_none#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_assets_inline\">Class <strong>Phalcon\\Assets\\Inline</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_assets_inline#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_assets_inline_css\">Class <strong>Phalcon\\Assets\\Inline\\Css</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_assets_inline_css#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_assets_inline_js\">Class <strong>Phalcon\\Assets\\Inline\\Js</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_assets_inline_js#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_assets_manager\">Class <strong>Phalcon\\Assets\\Manager</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_assets_manager#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_assets_resource\">Class <strong>Phalcon\\Assets\\Resource</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_assets_resource#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_assets_resource_css\">Class <strong>Phalcon\\Assets\\Resource\\Css</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_assets_resource_css#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_assets_resource_js\">Class <strong>Phalcon\\Assets\\Resource\\Js</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_assets_resource_js#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_backend\">Abstract class <strong>Phalcon\\Cache\\Backend</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_backend#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_backend_apc\">Class <strong>Phalcon\\Cache\\Backend\\Apc</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_backend_apc#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_backend_file\">Class <strong>Phalcon\\Cache\\Backend\\File</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_backend_file#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_backend_libmemcached\">Class <strong>Phalcon\\Cache\\Backend\\Libmemcached</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_backend_libmemcached#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_backend_memcache\">Class <strong>Phalcon\\Cache\\Backend\\Memcache</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_backend_memcache#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_backend_memory\">Class <strong>Phalcon\\Cache\\Backend\\Memory</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_backend_memory#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_backend_mongo\">Class <strong>Phalcon\\Cache\\Backend\\Mongo</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_backend_mongo#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_backend_redis\">Class <strong>Phalcon\\Cache\\Backend\\Redis</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_backend_redis#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_backend_xcache\">Class <strong>Phalcon\\Cache\\Backend\\Xcache</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_backend_xcache#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_exception\">Class <strong>Phalcon\\Cache\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_frontend_base64\">Class <strong>Phalcon\\Cache\\Frontend\\Base64</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_frontend_base64#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_frontend_data\">Class <strong>Phalcon\\Cache\\Frontend\\Data</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_frontend_data#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_frontend_igbinary\">Class <strong>Phalcon\\Cache\\Frontend\\Igbinary</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_frontend_igbinary#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_frontend_json\">Class <strong>Phalcon\\Cache\\Frontend\\Json</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_frontend_json#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_frontend_msgpack\">Class <strong>Phalcon\\Cache\\Frontend\\Msgpack</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_frontend_msgpack#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_frontend_none\">Class <strong>Phalcon\\Cache\\Frontend\\None</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_frontend_none#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_frontend_output\">Class <strong>Phalcon\\Cache\\Frontend\\Output</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_frontend_output#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_multiple\">Class <strong>Phalcon\\Cache\\Multiple</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_multiple#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cli_console\">Class <strong>Phalcon\\Cli\\Console</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cli_console#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cli_console_exception\">Class <strong>Phalcon\\Cli\\Console\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cli_console_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cli_dispatcher\">Class <strong>Phalcon\\Cli\\Dispatcher</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cli_dispatcher#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cli_dispatcher#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cli_dispatcher_exception\">Class <strong>Phalcon\\Cli\\Dispatcher\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cli_dispatcher_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cli_router\">Class <strong>Phalcon\\Cli\\Router</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cli_router#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cli_router_exception\">Class <strong>Phalcon\\Cli\\Router\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cli_router_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cli_router_route\">Class <strong>Phalcon\\Cli\\Router\\Route</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cli_router_route#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cli_router_route#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cli_task\">Class <strong>Phalcon\\Cli\\Task</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cli_task#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_config\">Class <strong>Phalcon\\Config</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_config#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_config_adapter_ini\">Class <strong>Phalcon\\Config\\Adapter\\Ini</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_config_adapter_ini#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_config_adapter_json\">Class <strong>Phalcon\\Config\\Adapter\\Json</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_config_adapter_json#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_config_adapter_php\">Class <strong>Phalcon\\Config\\Adapter\\Php</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_config_adapter_php#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_config_adapter_yaml\">Class <strong>Phalcon\\Config\\Adapter\\Yaml</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_config_adapter_yaml#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_config_exception\">Class <strong>Phalcon\\Config\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_config_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_crypt\">Class <strong>Phalcon\\Crypt</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_crypt#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_crypt#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_crypt_exception\">Class <strong>Phalcon\\Crypt\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_crypt_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db\">Abstract class <strong>Phalcon\\Db</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_adapter\">Abstract class <strong>Phalcon\\Db\\Adapter</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_adapter#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_adapter_pdo\">Abstract class <strong>Phalcon\\Db\\Adapter\\Pdo</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_adapter_pdo#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_adapter_pdo_mysql\">Class <strong>Phalcon\\Db\\Adapter\\Pdo\\Mysql</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_adapter_pdo_mysql#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_adapter_pdo_postgresql\">Class <strong>Phalcon\\Db\\Adapter\\Pdo\\Postgresql</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_adapter_pdo_postgresql#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_adapter_pdo_sqlite\">Class <strong>Phalcon\\Db\\Adapter\\Pdo\\Sqlite</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_adapter_pdo_sqlite#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_column\">Class <strong>Phalcon\\Db\\Column</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_column#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_column#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_dialect\">Abstract class <strong>Phalcon\\Db\\Dialect</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_dialect#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_dialect_postgresql\">Class <strong>Phalcon\\Db\\Dialect\\Postgresql</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_dialect_postgresql#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_dialect_sqlite\">Class <strong>Phalcon\\Db\\Dialect\\Sqlite</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_dialect_sqlite#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_exception\">Class <strong>Phalcon\\Db\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_index\">Class <strong>Phalcon\\Db\\Index</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_index#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_profiler\">Class <strong>Phalcon\\Db\\Profiler</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_profiler#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_profiler_item\">Class <strong>Phalcon\\Db\\Profiler\\Item</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_profiler_item#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_rawvalue\">Class <strong>Phalcon\\Db\\RawValue</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_rawvalue#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_reference\">Class <strong>Phalcon\\Db\\Reference</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_reference#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_result_pdo\">Class <strong>Phalcon\\Db\\Result\\Pdo</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_result_pdo#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_debug\">Class <strong>Phalcon\\Debug</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_debug#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_debug_dump\">Class <strong>Phalcon\\Debug\\Dump</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_debug_dump#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_debug_exception\">Class <strong>Phalcon\\Debug\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_debug_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_di\">Class <strong>Phalcon\\Di</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_di#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_di_exception\">Class <strong>Phalcon\\Di\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_di_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_di_factorydefault\">Class <strong>Phalcon\\Di\\FactoryDefault</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_di_factorydefault#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_di_factorydefault_cli\">Class <strong>Phalcon\\Di\\FactoryDefault\\Cli</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_di_factorydefault_cli#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_di_injectable\">Abstract class <strong>Phalcon\\Di\\Injectable</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_di_injectable#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_di_service\">Class <strong>Phalcon\\Di\\Service</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_di_service#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_di_service_builder\">Class <strong>Phalcon\\Di\\Service\\Builder</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_di_service_builder#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_dispatcher\">Abstract class <strong>Phalcon\\Dispatcher</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_dispatcher#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_dispatcher#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_escaper\">Class <strong>Phalcon\\Escaper</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_escaper#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_escaper_exception\">Class <strong>Phalcon\\Escaper\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_escaper_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_events_event\">Class <strong>Phalcon\\Events\\Event</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_events_event#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_events_exception\">Class <strong>Phalcon\\Events\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_events_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_events_manager\">Class <strong>Phalcon\\Events\\Manager</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_events_manager#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_exception\">Class <strong>Phalcon\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_filter\">Class <strong>Phalcon\\Filter</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_filter#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_filter#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_filter_exception\">Class <strong>Phalcon\\Filter\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_filter_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_flash\">Abstract class <strong>Phalcon\\Flash</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_flash#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_flash_direct\">Class <strong>Phalcon\\Flash\\Direct</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_flash_direct#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_flash_exception\">Class <strong>Phalcon\\Flash\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_flash_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_flash_session\">Class <strong>Phalcon\\Flash\\Session</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_flash_session#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_forms_element\">Abstract class <strong>Phalcon\\Forms\\Element</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_forms_element#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_forms_element_check\">Class <strong>Phalcon\\Forms\\Element\\Check</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_forms_element_check#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_forms_element_date\">Class <strong>Phalcon\\Forms\\Element\\Date</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_forms_element_date#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_forms_element_email\">Class <strong>Phalcon\\Forms\\Element\\Email</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_forms_element_email#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_forms_element_file\">Class <strong>Phalcon\\Forms\\Element\\File</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_forms_element_file#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_forms_element_hidden\">Class <strong>Phalcon\\Forms\\Element\\Hidden</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_forms_element_hidden#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_forms_element_numeric\">Class <strong>Phalcon\\Forms\\Element\\Numeric</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_forms_element_numeric#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_forms_element_password\">Class <strong>Phalcon\\Forms\\Element\\Password</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_forms_element_password#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_forms_element_radio\">Class <strong>Phalcon\\Forms\\Element\\Radio</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_forms_element_radio#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_forms_element_select\">Class <strong>Phalcon\\Forms\\Element\\Select</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_forms_element_select#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_forms_element_submit\">Class <strong>Phalcon\\Forms\\Element\\Submit</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_forms_element_submit#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_forms_element_text\">Class <strong>Phalcon\\Forms\\Element\\Text</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_forms_element_text#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_forms_element_textarea\">Class <strong>Phalcon\\Forms\\Element\\TextArea</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_forms_element_textarea#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_forms_exception\">Class <strong>Phalcon\\Forms\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_forms_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_forms_form\">Class <strong>Phalcon\\Forms\\Form</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_forms_form#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_forms_manager\">Class <strong>Phalcon\\Forms\\Manager</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_forms_manager#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_http_cookie\">Class <strong>Phalcon\\Http\\Cookie</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_http_cookie#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_http_cookie_exception\">Class <strong>Phalcon\\Http\\Cookie\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_http_cookie_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_http_request\">Class <strong>Phalcon\\Http\\Request</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_http_request#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_http_request_exception\">Class <strong>Phalcon\\Http\\Request\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_http_request_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_http_request_file\">Class <strong>Phalcon\\Http\\Request\\File</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_http_request_file#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_http_response\">Class <strong>Phalcon\\Http\\Response</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_http_response#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_http_response_cookies\">Class <strong>Phalcon\\Http\\Response\\Cookies</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_http_response_cookies#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_http_response_exception\">Class <strong>Phalcon\\Http\\Response\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_http_response_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_http_response_headers\">Class <strong>Phalcon\\Http\\Response\\Headers</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_http_response_headers#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_image\">Class <strong>Phalcon\\Image</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_image#constants\">Constants</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_image_adapter\">Abstract class <strong>Phalcon\\Image\\Adapter</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_image_adapter#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_image_adapter_gd\">Class <strong>Phalcon\\Image\\Adapter\\Gd</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_image_adapter_gd#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_image_adapter_imagick\">Class <strong>Phalcon\\Image\\Adapter\\Imagick</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_image_adapter_imagick#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_image_exception\">Class <strong>Phalcon\\Image\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_image_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_kernel\">Class <strong>Phalcon\\Kernel</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_kernel#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_loader\">Class <strong>Phalcon\\Loader</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_loader#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_loader_exception\">Class <strong>Phalcon\\Loader\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_loader_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_logger\">Abstract class <strong>Phalcon\\Logger</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_logger#constants\">Constants</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_logger_adapter\">Abstract class <strong>Phalcon\\Logger\\Adapter</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_logger_adapter#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_logger_adapter_file\">Class <strong>Phalcon\\Logger\\Adapter\\File</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_logger_adapter_file#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_logger_adapter_firephp\">Class <strong>Phalcon\\Logger\\Adapter\\Firephp</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_logger_adapter_firephp#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_logger_adapter_stream\">Class <strong>Phalcon\\Logger\\Adapter\\Stream</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_logger_adapter_stream#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_logger_adapter_syslog\">Class <strong>Phalcon\\Logger\\Adapter\\Syslog</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_logger_adapter_syslog#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_logger_exception\">Class <strong>Phalcon\\Logger\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_logger_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_logger_formatter\">Abstract class <strong>Phalcon\\Logger\\Formatter</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_logger_formatter#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_logger_formatter_firephp\">Class <strong>Phalcon\\Logger\\Formatter\\Firephp</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_logger_formatter_firephp#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_logger_formatter_json\">Class <strong>Phalcon\\Logger\\Formatter\\Json</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_logger_formatter_json#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_logger_formatter_line\">Class <strong>Phalcon\\Logger\\Formatter\\Line</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_logger_formatter_line#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_logger_formatter_syslog\">Class <strong>Phalcon\\Logger\\Formatter\\Syslog</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_logger_formatter_syslog#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_logger_item\">Class <strong>Phalcon\\Logger\\Item</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_logger_item#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_logger_multiple\">Class <strong>Phalcon\\Logger\\Multiple</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_logger_multiple#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_application\">Class <strong>Phalcon\\Mvc\\Application</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_application#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_application_exception\">Class <strong>Phalcon\\Mvc\\Application\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_application_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_collection\">Abstract class <strong>Phalcon\\Mvc\\Collection</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_collection#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_collection#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_collection_behavior\">Abstract class <strong>Phalcon\\Mvc\\Collection\\Behavior</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_collection_behavior#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_collection_behavior_softdelete\">Class <strong>Phalcon\\Mvc\\Collection\\Behavior\\SoftDelete</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_collection_behavior_softdelete#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_collection_behavior_timestampable\">Class <strong>Phalcon\\Mvc\\Collection\\Behavior\\Timestampable</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_collection_behavior_timestampable#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_collection_document\">Class <strong>Phalcon\\Mvc\\Collection\\Document</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_collection_document#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_collection_exception\">Class <strong>Phalcon\\Mvc\\Collection\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_collection_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_collection_manager\">Class <strong>Phalcon\\Mvc\\Collection\\Manager</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_collection_manager#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_controller\">Abstract class <strong>Phalcon\\Mvc\\Controller</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_controller#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_dispatcher\">Class <strong>Phalcon\\Mvc\\Dispatcher</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_dispatcher#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_dispatcher#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_dispatcher_exception\">Class <strong>Phalcon\\Mvc\\Dispatcher\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_dispatcher_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_micro\">Class <strong>Phalcon\\Mvc\\Micro</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_micro#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_micro_collection\">Class <strong>Phalcon\\Mvc\\Micro\\Collection</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_micro_collection#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_micro_exception\">Class <strong>Phalcon\\Mvc\\Micro\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_micro_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_micro_lazyloader\">Class <strong>Phalcon\\Mvc\\Micro\\LazyLoader</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_micro_lazyloader#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model\">Abstract class <strong>Phalcon\\Mvc\\Model</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_behavior\">Abstract class <strong>Phalcon\\Mvc\\Model\\Behavior</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_behavior#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_behavior_softdelete\">Class <strong>Phalcon\\Mvc\\Model\\Behavior\\SoftDelete</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_behavior_softdelete#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_behavior_timestampable\">Class <strong>Phalcon\\Mvc\\Model\\Behavior\\Timestampable</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_behavior_timestampable#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_criteria\">Class <strong>Phalcon\\Mvc\\Model\\Criteria</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_criteria#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_exception\">Class <strong>Phalcon\\Mvc\\Model\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_manager\">Class <strong>Phalcon\\Mvc\\Model\\Manager</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_manager#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_message\">Class <strong>Phalcon\\Mvc\\Model\\Message</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_message#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata\">Abstract class <strong>Phalcon\\Mvc\\Model\\MetaData</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_apc\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Apc</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_apc#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_apc#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_files\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Files</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_files#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_files#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_libmemcached\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Libmemcached</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_libmemcached#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_libmemcached#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_memcache\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Memcache</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_memcache#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_memcache#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_memory\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Memory</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_memory#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_memory#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_redis\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Redis</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_redis#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_redis#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_session\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Session</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_session#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_session#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_strategy_annotations\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Strategy\\Annotations</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_strategy_annotations#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_strategy_introspection\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Strategy\\Introspection</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_strategy_introspection#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_xcache\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Xcache</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_xcache#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_xcache#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_query\">Class <strong>Phalcon\\Mvc\\Model\\Query</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_query#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_query#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_query_builder\">Class <strong>Phalcon\\Mvc\\Model\\Query\\Builder</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_query_builder#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_query_builder#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_query_lang\">Abstract class <strong>Phalcon\\Mvc\\Model\\Query\\Lang</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_query_lang#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_query_status\">Class <strong>Phalcon\\Mvc\\Model\\Query\\Status</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_query_status#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_relation\">Class <strong>Phalcon\\Mvc\\Model\\Relation</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_relation#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_relation#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_resultset\">Abstract class <strong>Phalcon\\Mvc\\Model\\Resultset</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_resultset#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_resultset#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_resultset_complex\">Class <strong>Phalcon\\Mvc\\Model\\Resultset\\Complex</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_resultset_complex#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_resultset_complex#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_resultset_simple\">Class <strong>Phalcon\\Mvc\\Model\\Resultset\\Simple</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_resultset_simple#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_resultset_simple#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_row\">Class <strong>Phalcon\\Mvc\\Model\\Row</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_row#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_transaction\">Class <strong>Phalcon\\Mvc\\Model\\Transaction</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_transaction#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_transaction_exception\">Class <strong>Phalcon\\Mvc\\Model\\Transaction\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_transaction_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_transaction_failed\">Class <strong>Phalcon\\Mvc\\Model\\Transaction\\Failed</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_transaction_failed#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_transaction_manager\">Class <strong>Phalcon\\Mvc\\Model\\Transaction\\Manager</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_transaction_manager#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_validationfailed\">Class <strong>Phalcon\\Mvc\\Model\\ValidationFailed</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_validationfailed#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator\">Abstract class <strong>Phalcon\\Mvc\\Model\\Validator</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_email\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\Email</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_email#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_exclusionin\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\Exclusionin</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_exclusionin#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_inclusionin\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\Inclusionin</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_inclusionin#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_ip\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\Ip</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_ip#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_ip#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_numericality\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\Numericality</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_numericality#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_presenceof\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\PresenceOf</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_presenceof#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_regex\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\Regex</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_regex#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_stringlength\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\StringLength</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_stringlength#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_uniqueness\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\Uniqueness</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_uniqueness#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_url\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\Url</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_validator_url#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_router\">Class <strong>Phalcon\\Mvc\\Router</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_router#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_router#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_router_annotations\">Class <strong>Phalcon\\Mvc\\Router\\Annotations</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_router_annotations#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_router_annotations#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_router_exception\">Class <strong>Phalcon\\Mvc\\Router\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_router_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_router_group\">Class <strong>Phalcon\\Mvc\\Router\\Group</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_router_group#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_router_route\">Class <strong>Phalcon\\Mvc\\Router\\Route</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_router_route#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_url\">Class <strong>Phalcon\\Mvc\\Url</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_url#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_url_exception\">Class <strong>Phalcon\\Mvc\\Url\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_url_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_user_component\">Class <strong>Phalcon\\Mvc\\User\\Component</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_user_component#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_user_module\">Class <strong>Phalcon\\Mvc\\User\\Module</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_user_module#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_user_plugin\">Class <strong>Phalcon\\Mvc\\User\\Plugin</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_user_plugin#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_view\">Class <strong>Phalcon\\Mvc\\View</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_view#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_view#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_view_engine\">Abstract class <strong>Phalcon\\Mvc\\View\\Engine</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_view_engine#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_view_engine_php\">Class <strong>Phalcon\\Mvc\\View\\Engine\\Php</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_view_engine_php#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_view_engine_volt\">Class <strong>Phalcon\\Mvc\\View\\Engine\\Volt</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_view_engine_volt#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_view_engine_volt_compiler\">Class <strong>Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_view_engine_volt_compiler#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_view_engine_volt_exception\">Class <strong>Phalcon\\Mvc\\View\\Engine\\Volt\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_view_engine_volt_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_view_exception\">Class <strong>Phalcon\\Mvc\\View\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_view_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_view_simple\">Class <strong>Phalcon\\Mvc\\View\\Simple</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_view_simple#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_paginator_adapter\">Abstract class <strong>Phalcon\\Paginator\\Adapter</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_paginator_adapter#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_paginator_adapter_model\">Class <strong>Phalcon\\Paginator\\Adapter\\Model</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_paginator_adapter_model#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_paginator_adapter_nativearray\">Class <strong>Phalcon\\Paginator\\Adapter\\NativeArray</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_paginator_adapter_nativearray#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_paginator_adapter_querybuilder\">Class <strong>Phalcon\\Paginator\\Adapter\\QueryBuilder</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_paginator_adapter_querybuilder#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_paginator_exception\">Class <strong>Phalcon\\Paginator\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_paginator_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_queue_beanstalk\">Class <strong>Phalcon\\Queue\\Beanstalk</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_queue_beanstalk#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_queue_beanstalk#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_queue_beanstalk_exception\">Class <strong>Phalcon\\Queue\\Beanstalk\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_queue_beanstalk_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_queue_beanstalk_job\">Class <strong>Phalcon\\Queue\\Beanstalk\\Job</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_queue_beanstalk_job#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_registry\">Final class <strong>Phalcon\\Registry</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_registry#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_security\">Class <strong>Phalcon\\Security</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_security#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_security#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_security_exception\">Class <strong>Phalcon\\Security\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_security_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_security_random\">Class <strong>Phalcon\\Security\\Random</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_security_random#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_session_adapter\">Abstract class <strong>Phalcon\\Session\\Adapter</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_session_adapter#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_session_adapter#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_session_adapter_files\">Class <strong>Phalcon\\Session\\Adapter\\Files</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_session_adapter_files#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_session_adapter_files#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_session_adapter_libmemcached\">Class <strong>Phalcon\\Session\\Adapter\\Libmemcached</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_session_adapter_libmemcached#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_session_adapter_libmemcached#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_session_adapter_memcache\">Class <strong>Phalcon\\Session\\Adapter\\Memcache</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_session_adapter_memcache#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_session_adapter_memcache#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_session_adapter_redis\">Class <strong>Phalcon\\Session\\Adapter\\Redis</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_session_adapter_redis#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_session_adapter_redis#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_session_bag\">Class <strong>Phalcon\\Session\\Bag</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_session_bag#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_session_exception\">Class <strong>Phalcon\\Session\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_session_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_tag\">Class <strong>Phalcon\\Tag</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_tag#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_tag#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_tag_exception\">Class <strong>Phalcon\\Tag\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_tag_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_tag_select\">Abstract class <strong>Phalcon\\Tag\\Select</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_tag_select#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_text\">Abstract class <strong>Phalcon\\Text</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_text#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_text#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/phalcon_translate\">Abstract class <strong>Phalcon\\Translate</strong></a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_translate_adapter\">Abstract class <strong>Phalcon\\Translate\\Adapter</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_translate_adapter#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_translate_adapter_csv\">Class <strong>Phalcon\\Translate\\Adapter\\Csv</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_translate_adapter_csv#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_translate_adapter_gettext\">Class <strong>Phalcon\\Translate\\Adapter\\Gettext</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_translate_adapter_gettext#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_translate_adapter_nativearray\">Class <strong>Phalcon\\Translate\\Adapter\\NativeArray</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_translate_adapter_nativearray#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_translate_exception\">Class <strong>Phalcon\\Translate\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_translate_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_translate_interpolator_associativearray\">Class <strong>Phalcon\\Translate\\Interpolator\\AssociativeArray</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_translate_interpolator_associativearray#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_translate_interpolator_indexedarray\">Class <strong>Phalcon\\Translate\\Interpolator\\IndexedArray</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_translate_interpolator_indexedarray#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation\">Class <strong>Phalcon\\Validation</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_combinedfieldsvalidator\">Abstract class <strong>Phalcon\\Validation\\CombinedFieldsValidator</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_combinedfieldsvalidator#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_exception\">Class <strong>Phalcon\\Validation\\Exception</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_exception#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_message\">Class <strong>Phalcon\\Validation\\Message</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_message#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_message_group\">Class <strong>Phalcon\\Validation\\Message\\Group</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_message_group#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator\">Abstract class <strong>Phalcon\\Validation\\Validator</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_alnum\">Class <strong>Phalcon\\Validation\\Validator\\Alnum</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_alnum#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_alpha\">Class <strong>Phalcon\\Validation\\Validator\\Alpha</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_alpha#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_between\">Class <strong>Phalcon\\Validation\\Validator\\Between</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_between#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_confirmation\">Class <strong>Phalcon\\Validation\\Validator\\Confirmation</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_confirmation#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_creditcard\">Class <strong>Phalcon\\Validation\\Validator\\CreditCard</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_creditcard#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_date\">Class <strong>Phalcon\\Validation\\Validator\\Date</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_date#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_digit\">Class <strong>Phalcon\\Validation\\Validator\\Digit</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_digit#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_email\">Class <strong>Phalcon\\Validation\\Validator\\Email</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_email#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_exclusionin\">Class <strong>Phalcon\\Validation\\Validator\\ExclusionIn</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_exclusionin#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_file\">Class <strong>Phalcon\\Validation\\Validator\\File</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_file#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_identical\">Class <strong>Phalcon\\Validation\\Validator\\Identical</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_identical#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_inclusionin\">Class <strong>Phalcon\\Validation\\Validator\\InclusionIn</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_inclusionin#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_numericality\">Class <strong>Phalcon\\Validation\\Validator\\Numericality</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_numericality#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_presenceof\">Class <strong>Phalcon\\Validation\\Validator\\PresenceOf</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_presenceof#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_regex\">Class <strong>Phalcon\\Validation\\Validator\\Regex</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_regex#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_stringlength\">Class <strong>Phalcon\\Validation\\Validator\\StringLength</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_stringlength#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_uniqueness\">Class <strong>Phalcon\\Validation\\Validator\\Uniqueness</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_uniqueness#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validator_url\">Class <strong>Phalcon\\Validation\\Validator\\Url</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validator_url#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_version\">Class <strong>Phalcon\\Version</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_version#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_version#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_acl_adapterinterface\">Interface <strong>Phalcon\\Acl\\AdapterInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_acl_adapterinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_acl_resourceaware\">Interface <strong>Phalcon\\Acl\\ResourceAware</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_acl_resourceaware#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_acl_resourceinterface\">Interface <strong>Phalcon\\Acl\\ResourceInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_acl_resourceinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_acl_roleaware\">Interface <strong>Phalcon\\Acl\\RoleAware</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_acl_roleaware#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_acl_roleinterface\">Interface <strong>Phalcon\\Acl\\RoleInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_acl_roleinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_annotations_adapterinterface\">Interface <strong>Phalcon\\Annotations\\AdapterInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_annotations_adapterinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_annotations_readerinterface\">Interface <strong>Phalcon\\Annotations\\ReaderInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_annotations_readerinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_assets_filterinterface\">Interface <strong>Phalcon\\Assets\\FilterInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_assets_filterinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_backendinterface\">Interface <strong>Phalcon\\Cache\\BackendInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_backendinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cache_frontendinterface\">Interface <strong>Phalcon\\Cache\\FrontendInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cache_frontendinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cli_dispatcherinterface\">Interface <strong>Phalcon\\Cli\\DispatcherInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cli_dispatcherinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cli_routerinterface\">Interface <strong>Phalcon\\Cli\\RouterInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cli_routerinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cli_router_routeinterface\">Interface <strong>Phalcon\\Cli\\Router\\RouteInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cli_router_routeinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/phalcon_cli_taskinterface\">Interface <strong>Phalcon\\Cli\\TaskInterface</strong></a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_cryptinterface\">Interface <strong>Phalcon\\CryptInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_cryptinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_adapterinterface\">Interface <strong>Phalcon\\Db\\AdapterInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_adapterinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_columninterface\">Interface <strong>Phalcon\\Db\\ColumnInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_columninterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_dialectinterface\">Interface <strong>Phalcon\\Db\\DialectInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_dialectinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_indexinterface\">Interface <strong>Phalcon\\Db\\IndexInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_indexinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_referenceinterface\">Interface <strong>Phalcon\\Db\\ReferenceInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_referenceinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_db_resultinterface\">Interface <strong>Phalcon\\Db\\ResultInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_db_resultinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_diinterface\">Interface <strong>Phalcon\\DiInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_diinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_di_injectionawareinterface\">Interface <strong>Phalcon\\Di\\InjectionAwareInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_di_injectionawareinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_di_serviceinterface\">Interface <strong>Phalcon\\Di\\ServiceInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_di_serviceinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_dispatcherinterface\">Interface <strong>Phalcon\\DispatcherInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_dispatcherinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_escaperinterface\">Interface <strong>Phalcon\\EscaperInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_escaperinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_events_eventinterface\">Interface <strong>Phalcon\\Events\\EventInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_events_eventinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_events_eventsawareinterface\">Interface <strong>Phalcon\\Events\\EventsAwareInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_events_eventsawareinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_events_managerinterface\">Interface <strong>Phalcon\\Events\\ManagerInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_events_managerinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_filterinterface\">Interface <strong>Phalcon\\FilterInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_filterinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_filter_userfilterinterface\">Interface <strong>Phalcon\\Filter\\UserFilterInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_filter_userfilterinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_flashinterface\">Interface <strong>Phalcon\\FlashInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_flashinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_forms_elementinterface\">Interface <strong>Phalcon\\Forms\\ElementInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_forms_elementinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_http_cookieinterface\">Interface <strong>Phalcon\\Http\\CookieInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_http_cookieinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_http_requestinterface\">Interface <strong>Phalcon\\Http\\RequestInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_http_requestinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_http_request_fileinterface\">Interface <strong>Phalcon\\Http\\Request\\FileInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_http_request_fileinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_http_responseinterface\">Interface <strong>Phalcon\\Http\\ResponseInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_http_responseinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_http_response_cookiesinterface\">Interface <strong>Phalcon\\Http\\Response\\CookiesInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_http_response_cookiesinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_http_response_headersinterface\">Interface <strong>Phalcon\\Http\\Response\\HeadersInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_http_response_headersinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_image_adapterinterface\">Interface <strong>Phalcon\\Image\\AdapterInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_image_adapterinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_logger_adapterinterface\">Interface <strong>Phalcon\\Logger\\AdapterInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_logger_adapterinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_logger_formatterinterface\">Interface <strong>Phalcon\\Logger\\FormatterInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_logger_formatterinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_collectioninterface\">Interface <strong>Phalcon\\Mvc\\CollectionInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_collectioninterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_collection_behaviorinterface\">Interface <strong>Phalcon\\Mvc\\Collection\\BehaviorInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_collection_behaviorinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_collection_managerinterface\">Interface <strong>Phalcon\\Mvc\\Collection\\ManagerInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_collection_managerinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/phalcon_mvc_controllerinterface\">Interface <strong>Phalcon\\Mvc\\ControllerInterface</strong></a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_controller_bindmodelinterface\">Interface <strong>Phalcon\\Mvc\\Controller\\BindModelInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_controller_bindmodelinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_dispatcherinterface\">Interface <strong>Phalcon\\Mvc\\DispatcherInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_dispatcherinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_entityinterface\">Interface <strong>Phalcon\\Mvc\\EntityInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_entityinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_micro_collectioninterface\">Interface <strong>Phalcon\\Mvc\\Micro\\CollectionInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_micro_collectioninterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_micro_middlewareinterface\">Interface <strong>Phalcon\\Mvc\\Micro\\MiddlewareInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_micro_middlewareinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_modelinterface\">Interface <strong>Phalcon\\Mvc\\ModelInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_modelinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_behaviorinterface\">Interface <strong>Phalcon\\Mvc\\Model\\BehaviorInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_behaviorinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_criteriainterface\">Interface <strong>Phalcon\\Mvc\\Model\\CriteriaInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_criteriainterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_managerinterface\">Interface <strong>Phalcon\\Mvc\\Model\\ManagerInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_managerinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_messageinterface\">Interface <strong>Phalcon\\Mvc\\Model\\MessageInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_messageinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadatainterface\">Interface <strong>Phalcon\\Mvc\\Model\\MetaDataInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadatainterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_strategyinterface\">Interface <strong>Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_metadata_strategyinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_queryinterface\">Interface <strong>Phalcon\\Mvc\\Model\\QueryInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_queryinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_query_builderinterface\">Interface <strong>Phalcon\\Mvc\\Model\\Query\\BuilderInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_query_builderinterface#constants\">Constants</a></li> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_query_builderinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_query_statusinterface\">Interface <strong>Phalcon\\Mvc\\Model\\Query\\StatusInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_query_statusinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_relationinterface\">Interface <strong>Phalcon\\Mvc\\Model\\RelationInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_relationinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_resultinterface\">Interface <strong>Phalcon\\Mvc\\Model\\ResultInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_resultinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_resultsetinterface\">Interface <strong>Phalcon\\Mvc\\Model\\ResultsetInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_resultsetinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_transactioninterface\">Interface <strong>Phalcon\\Mvc\\Model\\TransactionInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_transactioninterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_transaction_managerinterface\">Interface <strong>Phalcon\\Mvc\\Model\\Transaction\\ManagerInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_transaction_managerinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_model_validatorinterface\">Interface <strong>Phalcon\\Mvc\\Model\\ValidatorInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_model_validatorinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_moduledefinitioninterface\">Interface <strong>Phalcon\\Mvc\\ModuleDefinitionInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_moduledefinitioninterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_routerinterface\">Interface <strong>Phalcon\\Mvc\\RouterInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_routerinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_router_groupinterface\">Interface <strong>Phalcon\\Mvc\\Router\\GroupInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_router_groupinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_router_routeinterface\">Interface <strong>Phalcon\\Mvc\\Router\\RouteInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_router_routeinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_urlinterface\">Interface <strong>Phalcon\\Mvc\\UrlInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_urlinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_viewbaseinterface\">Interface <strong>Phalcon\\Mvc\\ViewBaseInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_viewbaseinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_viewinterface\">Interface <strong>Phalcon\\Mvc\\ViewInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_viewinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_mvc_view_engineinterface\">Interface <strong>Phalcon\\Mvc\\View\\EngineInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_mvc_view_engineinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_paginator_adapterinterface\">Interface <strong>Phalcon\\Paginator\\AdapterInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_paginator_adapterinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_session_adapterinterface\">Interface <strong>Phalcon\\Session\\AdapterInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_session_adapterinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_session_baginterface\">Interface <strong>Phalcon\\Session\\BagInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_session_baginterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_translate_adapterinterface\">Interface <strong>Phalcon\\Translate\\AdapterInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_translate_adapterinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_translate_interpolatorinterface\">Interface <strong>Phalcon\\Translate\\InterpolatorInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_translate_interpolatorinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validationinterface\">Interface <strong>Phalcon\\ValidationInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validationinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_messageinterface\">Interface <strong>Phalcon\\Validation\\MessageInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_messageinterface#methods\">Methods</a></li> </ul> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"api/phalcon_validation_validatorinterface\">Interface <strong>Phalcon\\Validation\\ValidatorInterface</strong></a><ul> <li class=\"toctree-l3\"><a class=\"reference internal\" href=\"api/phalcon_validation_validatorinterface#methods\">Methods</a></li> </ul> </li> </ul> </li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://docs.phalconphp.com/en/latest/reference/license.html\">License</a></li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/index.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/index.html</a>\n  </p>\n</div>\n","reference/cherokee":"<h1 id=\"cherokee-installation-notes\">Cherokee Installation Notes</h1> <p><a class=\"reference external\" href=\"http://www.cherokee-project.com/\">Cherokee</a> is a high-performance web server. It is very fast, flexible and easy to configure.</p>  <h2 id=\"configuring-cherokee-for-phalcon\">Configuring Cherokee for Phalcon</h2> <p>Cherokee provides a friendly graphical interface to configure almost every setting available in the web server. Start the cherokee administrator by executing with root /path-to-cherokee/sbin/cherokee-admin</p> <div class=\"figure align-center\"> <img alt=\"../_images/cherokee-1.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/cherokee-1.jpg\"> </div> <p>Create a new virtual host by clicking on ‘vServers’, then add a new virtual server:</p> <div class=\"figure align-center\"> <img alt=\"../_images/cherokee-2.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/cherokee-2.jpg\"> </div> <p>The recently added virtual server must appear at the left bar of the screen. In the ‘Behaviors’ tab you will see a set of default behaviors for this virtual server. Click the ‘Rule Management’ button. Remove those labeled as ‘Directory /cherokee_themes’ and ‘Directory /icons’:</p> <div class=\"figure align-center\"> <img alt=\"../_images/cherokee-3.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/cherokee-3.jpg\"> </div> <p>Add the ‘PHP Language’ behavior using the wizard. This behavior allow you to run PHP applications:</p> <div class=\"figure align-center\"> <img alt=\"../_images/cherokee-4.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/cherokee-4.jpg\"> </div> <p>Normally this behavior does not require additional settings. Add another behavior, this time in the ‘Manual Configuration’ section. In ‘Rule Type’ choose ‘File Exists’, then make sure the option ‘Match any file’ is enabled:</p> <div class=\"figure align-center\"> <img alt=\"../_images/cherokee-55.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/cherokee-55.jpg\"> </div> <p>In the ‘Handler’ tab choose ‘List &amp; Send’ as handler:</p> <div class=\"figure align-center\"> <img alt=\"../_images/cherokee-7.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/cherokee-7.jpg\"> </div> <p>Edit the ‘Default’ behavior in order to enable the URL-rewrite engine. Change the handler to ‘Redirection’, then add the following regular expression to the engine ^(.*)$:</p> <div class=\"figure align-center\"> <img alt=\"../_images/cherokee-6.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/cherokee-6.jpg\"> </div> <p>Finally, make sure the behaviors have the following order:</p> <div class=\"figure align-center\"> <img alt=\"../_images/cherokee-8.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/cherokee-8.jpg\"> </div> <p>Execute the application in a browser:</p> <div class=\"figure align-center\"> <img alt=\"../_images/cherokee-9.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/cherokee-9.jpg\"> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/cherokee.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/cherokee.html</a>\n  </p>\n</div>\n","reference/built-in":"<h1 id=\"using-php-built-in-webserver\">Using PHP Built-in webserver</h1> <p>As of PHP 5.4.0, you can use PHP’s on <a class=\"reference external\" href=\"http://php.net/manual/en/features.commandline.webserver.php\">built-in</a> web server for development.</p> <p>To start the server type:</p> <pre class=\"highlight-bash\" data-language=\"bash\">php -S localhost:8000 -t /public\n</pre> <p>If you want to rewrite the URIs to the index.php file use the following router file (.htrouter.php):</p> <pre class=\"highlight-php\" data-language=\"php\">if (!file_exists(__DIR__ . '/' . $_SERVER['REQUEST_URI'])) {\n    $_GET['_url'] = $_SERVER['REQUEST_URI'];\n}\nreturn false;\n</pre> <p>and then start the server from the base project directory with:</p> <pre class=\"highlight-bash\" data-language=\"bash\">php -S localhost:8000 -t /public .htrouter.php\n</pre> <p>Then point your browser to <a class=\"reference external\" href=\"http://localhost:8000/\">http://localhost:8000/</a> to check if everything is working.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/built-in.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/built-in.html</a>\n  </p>\n</div>\n","reference/mvc":"<h1 id=\"the-mvc-architecture\">The MVC Architecture</h1> <p>Phalcon offers the object-oriented classes, necessary to implement the Model, View, Controller architecture (often referred to as <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\">MVC</a>) in your application. This design pattern is widely used by other web frameworks and desktop applications.</p> <p>MVC benefits include:</p> <ul class=\"simple\"> <li>Isolation of business logic from the user interface and the database layer</li> <li>Making it clear where different types of code belong for easier maintenance</li> </ul> <p>If you decide to use MVC, every request to your application resources will be managed by the MVC architecture. Phalcon classes are written in C language, offering a high performance approach of this pattern in a PHP based application.</p>  <h2 id=\"models\">Models</h2> <p>A model represents the information (data) of the application and the rules to manipulate that data. Models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application’s business logic will be concentrated in the models. <a class=\"reference internal\" href=\"models\"><em>Learn more</em></a></p>   <h2 id=\"views\">Views</h2> <p>Views represent the user interface of your application. Views are often HTML files with embedded PHP code that perform tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application. <a class=\"reference internal\" href=\"views\"><em>Learn more</em></a></p>   <h2 id=\"controllers\">Controllers</h2> <p>The controllers provide the “flow” between models and views. Controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation. <a class=\"reference internal\" href=\"controllers\"><em>Learn more</em></a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/mvc.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/mvc.html</a>\n  </p>\n</div>\n","reference/samples":"<h1 id=\"list-of-examples\">List of examples</h1> <p>Following examples are full applications you can use to learn more about Phalcon and use them as base for your own websites/applications:</p> <table align=\"center\" cellspacing=\"0\"> <tr> <td class=\"sample-1 sample\"> <div> <a href=\"https://github.com/phalcon/website\"> Phalcon's website </a> </div> </td> <td class=\"sample-2 sample\"> <div> <a href=\"https://blog.phalconphp.com/post/invo-a-sample-application\"> INVO: CRUD, Acl, Layouts and more </a> </div> </td> </tr> <td></td> \n<tr> <td class=\"sample-3 sample\"> <div> <a href=\"https://blog.phalconphp.com/post/sample-application-php-alternative-site\"> PHP Alternative website: Multi-Lingual, Complex Routing and more </a> </div> </td> <td class=\"sample-4 sample\"> <div> <a href=\"https://blog.phalconphp.com/post/phosphorum-the-phalcon-forum\"> Phosphorum: Phalcon's forum </a> </div> </td> </tr> <td></td> \n<tr> <td class=\"sample-5 sample\"> <div> <a href=\"https://blog.phalconphp.com/post/sample-application-album-orama\"> Album O'Rama: Large Data, Volt, PHQL and Caching and more </a> </div> </td> <td class=\"sample-6 sample\"> <div> <a href=\"https://blog.phalconphp.com/post/sample-application-vokuro\"> Vökuró: Security, Authentication, Authorization and more </a> </div> </td> </tr> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/samples.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/samples.html</a>\n  </p>\n</div>\n","reference/install":"<h1 id=\"installation\">Installation</h1> <p>PHP extensions require a slightly different installation method to a traditional PHP-based library or framework. You can either download a binary package for the system of your choice or build it from the sources.</p>  <h2 id=\"windows\">Windows</h2> <p>To use phalcon on Windows you can <a class=\"reference external\" href=\"http://phalconphp.com/en/download\">download</a> a DLL library. Edit your php.ini file and then append at the end:</p> <pre class=\"highlight-bash\" data-language=\"bash\">extension=php_phalcon.dll\n</pre> <p>Restart your webserver.</p> <p>The following screencast is a step-by-step guide to install Phalcon on Windows:</p> <div align=\"center\"><iframe src=\"https://player.vimeo.com/video/40265988\" width=\"500\" height=\"266\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div> <h3 id=\"related-guides\">Related Guides</h3> <div class=\"toctree-wrapper compound\"> <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"xampp\">Installation on XAMPP</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"wamp\">Installation on WAMP</a></li> </ul> </div>    <h2 id=\"linux-solaris\">Linux/Solaris</h2> <p>On a Linux/Solaris system you can easily compile and install the extension from the source code:</p>  <h3 id=\"requirements\">Requirements</h3> <p>Prerequisite packages are:</p> <ul class=\"simple\"> <li>PHP &gt;= 5.3 development resources</li> <li>GCC compiler (Linux/Solaris)</li> <li>Git (if not already installed in your system - unless you download the package from GitHub and upload it on your server via FTP/SFTP)</li> </ul> <p>Specific packages for common platforms:</p> <pre class=\"highlight-bash\" data-language=\"bash\"># Ubuntu\nsudo apt-get install php5-dev libpcre3-dev gcc make php5-mysql\n\n# Suse\nsudo yast -i gcc make autoconf php5-devel php5-pear php5-mysql\n\n# CentOS/RedHat/Fedora\nsudo yum install php-devel pcre-devel gcc make\n\n# Solaris\npkg install gcc-45 php-53 apache-php53\n</pre>   <h3 id=\"compilation\">Compilation</h3> <p>Creating the extension:</p> <pre class=\"highlight-bash\" data-language=\"bash\">git clone --depth=1 git://github.com/phalcon/cphalcon.git\ncd cphalcon/build\nsudo ./install\n</pre> <p>Add extension to your PHP configuration:</p> <pre class=\"highlight-bash\" data-language=\"bash\"># Suse: Add a file called phalcon.ini in /etc/php5/conf.d/ with this content:\nextension=phalcon.so\n\n# CentOS/RedHat/Fedora: Add a file called phalcon.ini in /etc/php.d/ with this content:\nextension=phalcon.so\n\n# Ubuntu/Debian with apache2: Add a file called 30-phalcon.ini in /etc/php5/apache2/conf.d/ with this content:\nextension=phalcon.so\n\n# Ubuntu/Debian with php5-fpm: Add a file called 30-phalcon.ini in /etc/php5/fpm/conf.d/ with this content:\nextension=phalcon.so\n\n# Ubuntu/Debian with php5-cli: Add a file called 30-phalcon.ini in /etc/php5/cli/conf.d/ with this content:\nextension=phalcon.so\n</pre> <p>Restart the webserver.</p> <p>If you are running Ubuntu/Debian with php5-fpm, restart it:</p> <pre class=\"highlight-bash\" data-language=\"bash\">sudo service php5-fpm restart\n</pre> <p>Phalcon automatically detects your architecture, however, you can force the compilation for a specific architecture:</p> <pre class=\"highlight-bash\" data-language=\"bash\">cd cphalcon/build\nsudo ./install 32bits\nsudo ./install 64bits\nsudo ./install safe\n</pre> <p>If the automatic installer fails try building the extension manually:</p> <pre class=\"highlight-bash\" data-language=\"bash\">cd cphalcon/build/64bits\nexport CFLAGS=\"-O2 --fvisibility=hidden\"\n./configure --enable-phalcon\nmake &amp;&amp; sudo make install\n</pre>    <h2 id=\"mac-os-x\">Mac OS X</h2> <p>On a Mac OS X system you can compile and install the extension from the source code:</p>  <h3 id=\"id1\">Requirements</h3> <p>Prerequisite packages are:</p> <ul class=\"simple\"> <li>PHP &gt;= 5.4 development resources</li> <li>XCode</li> </ul> <pre class=\"highlight-bash\" data-language=\"bash\"># brew\nbrew tap homebrew/homebrew-php\nbrew install php54-phalcon\nbrew install php55-phalcon\nbrew install php56-phalcon\n\n# MacPorts\nsudo port install php54-phalcon\nsudo port install php55-phalcon\nsudo port install php56-phalcon\n</pre> <p>Add extension to your PHP configuration.</p>    <h2 id=\"freebsd\">FreeBSD</h2> <p>A port is available for FreeBSD. Just only need these simple line commands to install it:</p> <pre class=\"highlight-bash\" data-language=\"bash\">pkg_add -r phalcon\n</pre> <p>or</p> <pre class=\"highlight-bash\" data-language=\"bash\">export CFLAGS=\"-O2 --fvisibility=hidden\"\ncd /usr/ports/www/phalcon &amp;&amp; make install clean\n</pre>   <h2 id=\"installation-notes\">Installation Notes</h2> <p>Installation notes for Web Servers:</p> <div class=\"toctree-wrapper compound\"> <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"apache\">Apache Installation Notes</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"nginx\">Nginx Installation Notes</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"cherokee\">Cherokee Installation Notes</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"built-in\">Using PHP Built-in webserver</a></li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/install.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/install.html</a>\n  </p>\n</div>\n","reference/tutorial-invo-4":"<h1 id=\"tutorial-5-customizing-invo\">Tutorial 5: Customizing INVO</h1> <p>To finish the detailed explanation of INVO we are going to explain how to customize INVO adding UI elements and changing the title according to the controller executed.</p>  <h2 id=\"user-components\">User Components</h2> <p>All the UI elements and visual style of the application has been achieved mostly through <a class=\"reference external\" href=\"http://getbootstrap.com/\">Bootstrap</a>. Some elements, such as the navigation bar changes according to the state of the application. For example, in the upper right corner, the link “Log in / Sign Up” changes to “Log out” if a user is logged into the application.</p> <p>This part of the application is implemented in the component “Elements” (app/library/Elements.php).</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\User\\Component;\n\nclass Elements extends Component\n{\n    public function getMenu()\n    {\n        // ...\n    }\n\n    public function getTabs()\n    {\n        // ...\n    }\n}\n</pre> <p>This class extends the <a class=\"reference internal\" href=\"../api/phalcon_mvc_user_component\"><em>Phalcon\\Mvc\\User\\Component</em></a>. It is not imposed to extend a component with this class, but it helps to get access more quickly to the application services. Now, we are going to register our first user component in the services container:</p> <pre class=\"highlight-php\" data-language=\"php\">// Register a user component\n$di-&gt;set('elements', function () {\n    return new Elements();\n});\n</pre> <p>As controllers, plugins or components within a view, this component also has access to the services registered in the container and by just accessing an attribute with the same name as a previously registered service:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">&lt;div class=\"navbar navbar-fixed-top\"&gt;\n    &lt;div class=\"navbar-inner\"&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;a class=\"btn btn-navbar\" data-toggle=\"collapse\" data-target=\".nav-collapse\"&gt;\n                &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;\n                &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;\n                &lt;span class=\"icon-bar\"&gt;&lt;/span&gt;\n            &lt;/a&gt;\n            &lt;a class=\"brand\" href=\"#\"&gt;INVO&lt;/a&gt;\n            {{ elements.getMenu() }}\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=\"container\"&gt;\n    {{ content() }}\n    &lt;hr&gt;\n    &lt;footer&gt;\n        &lt;p&gt;&amp;copy; Company 2015&lt;/p&gt;\n    &lt;/footer&gt;\n&lt;/div&gt;\n</pre> <p>The important part is:</p> <pre class=\"highlight-html+php\" data-language=\"html\">{{ elements.getMenu() }}\n</pre>   <h2 id=\"changing-the-title-dynamically\">Changing the Title Dynamically</h2> <p>When you browse between one option and another will see that the title changes dynamically indicating where we are currently working. This is achieved in each controller initializer:</p> <pre class=\"highlight-php\" data-language=\"php\">class ProductsController extends ControllerBase\n{\n    public function initialize()\n    {\n        // Set the document title\n        $this-&gt;tag-&gt;setTitle('Manage your product types');\n        parent::initialize();\n    }\n\n    // ...\n}\n</pre> <p>Note, that the method <code class=\"code docutils literal\"><span class=\"pre\">parent::initialize()</span></code> is also called, it adds more data to the title:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass ControllerBase extends Controller\n{\n    protected function initialize()\n    {\n        // Prepend the application name to the title\n        $this-&gt;tag-&gt;prependTitle('INVO | ');\n    }\n\n    // ...\n}\n</pre> <p>Finally, the title is printed in the main view (app/views/index.volt):</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;?php echo $this-&gt;tag-&gt;getTitle(); ?&gt;\n    &lt;/head&gt;\n    &lt;!-- ... --&gt;\n&lt;/html&gt;\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/tutorial-invo-4.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/tutorial-invo-4.html</a>\n  </p>\n</div>\n","reference/tutorial-vokuro":"<h1 id=\"tutorial-6-vokuro\">Tutorial 6: Vökuró</h1> <p>Vökuró is another sample application you can use to learn more about Phalcon. Vökuró is a small website that shows how to implement a security features and management of users and permissions. You can clone its code from <a class=\"reference external\" href=\"https://github.com/phalcon/vokuro\">Github</a>.</p>  <h2 id=\"checking-your-installation\">Checking your installation</h2> <p>We’ll assume you have Phalcon installed already. Check your phpinfo() output for a section referencing “Phalcon” or execute the code snippet below:</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php print_r(get_loaded_extensions()); ?&gt;\n</pre> <p>The Phalcon extension should appear as part of the output:</p> <pre class=\"highlight-php\" data-language=\"php\">Array\n(\n    [0] =&gt; Core\n    [1] =&gt; libxml\n    [2] =&gt; filter\n    [3] =&gt; SPL\n    [4] =&gt; standard\n    [5] =&gt; phalcon\n    [6] =&gt; pdo_mysql\n)\n</pre>   <h2 id=\"project-structure\">Project Structure</h2> <p>Once you clone the project in your document root you’ll see the following structure:</p> <pre class=\"highlight-bash\" data-language=\"bash\">vokuro/\n    app/\n        config/\n        controllers/\n        forms/\n        library/\n        models/\n        views/\n    cache/\n    public/\n        css/\n        img/\n    schemas/\n</pre> <p>This project follows a quite similar structure to INVO. Once you open the application in your browser <a class=\"reference external\" href=\"http://localhost/vokuro\">http://localhost/vokuro</a> you’ll see something like this:</p> <div class=\"figure align-center\"> <img alt=\"../_images/vokuro-1.png\" src=\"https://docs.phalconphp.com/en/latest/_images/vokuro-1.png\"> </div> <p>The application is divided into two parts, a frontend, where visitors can sign up the service and a backend where administrative users can manage registered users. Both frontend and backend are combined in a single module.</p>   <h2 id=\"load-classes-and-dependencies\">Load Classes and Dependencies</h2> <p>This project uses <a class=\"reference internal\" href=\"../api/phalcon_loader\"><em>Phalcon\\Loader</em></a> to load controllers, models, forms, etc. within the project and <a class=\"reference external\" href=\"https://getcomposer.org/\">composer</a> to load the project’s dependencies. So, the first thing you have to do before execute Vökuró is install its dependencies via <a class=\"reference external\" href=\"https://getcomposer.org/\">composer</a>. Assuming you have it correctly installed, type the following command in the console:</p> <pre class=\"highlight-bash\" data-language=\"bash\">cd vokuro\ncomposer install\n</pre> <p>Vökuró sends emails to confirm the sign up of registered users using Swift, the composer.json looks like:</p> <pre class=\"highlight-json\" data-language=\"json\">{\n    \"require\" : {\n        \"php\" : \"&gt;=5.5.0\",\n        \"ext-phalcon\" : \"&gt;=3.0.0\",\n        \"swiftmailer/swiftmailer\" : \"^5.4\",\n        \"amazonwebservices/aws-sdk-for-php\" : \"~1.0\"\n    }\n}\n</pre> <p>Now, there is a file called app/config/loader.php where all the auto-loading stuff is set up. At the end of this file you can see that the composer autoloader is included enabling the application to autoload any of the classes in the downloaded dependencies:</p> <pre class=\"highlight-php\" data-language=\"php\">// ...\n\n// Use composer autoloader to load vendor classes\nrequire_once BASE_PATH . '/vendor/autoload.php';\n</pre> <p>Moreover, Vökuró, unlike the INVO, utilizes namespaces for controllers and models which is the recommended practice to structure a project. This way the autoloader looks slightly different than the one we saw before (app/config/loader.php):</p> <pre class=\"highlight-php\" data-language=\"php\">$loader = new Phalcon\\Loader();\n\n$loader-&gt;registerNamespaces(\n    array(\n        'Vokuro\\Models'      =&gt; $config-&gt;application-&gt;modelsDir,\n        'Vokuro\\Controllers' =&gt; $config-&gt;application-&gt;controllersDir,\n        'Vokuro\\Forms'       =&gt; $config-&gt;application-&gt;formsDir,\n        'Vokuro'             =&gt; $config-&gt;application-&gt;libraryDir\n    )\n);\n\n$loader-&gt;register();\n\n// ...\n</pre> <p>Instead of using registerDirectories, we use registerNamespaces. Every namespace points to a directory defined in the configuration file (app/config/config.php). For instance the namespace Vokuro\\Controllers points to app/controllers so all the classes required by the application within this namespace requires it in its definition:</p> <pre class=\"highlight-php\" data-language=\"php\">namespace Vokuro\\Controllers;\n\nclass AboutController extends ControllerBase\n{\n    // ...\n}\n</pre>   <h2 id=\"sign-up\">Sign Up</h2> <p>First, let’s check how users are registered in Vökuró. When a user clicks the “Create an Account” button, the controller SessionController is invoked and the action “signup” is executed:</p> <pre class=\"highlight-php\" data-language=\"php\">namespace Vokuro\\Controllers;\n\nuse Vokuro\\Forms\\SignUpForm;\n\nclass RegisterController extends ControllerBase\n{\n    public function signupAction()\n    {\n        $form = new SignUpForm();\n\n        // ...\n\n        $this-&gt;view-&gt;form = $form;\n    }\n}\n</pre> <p>This action simply pass a form instance of SignUpForm to the view, which itself is rendered to allow the user enter the login details:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{{ form('class': 'form-search') }}\n\n    &lt;h2&gt;Sign Up&lt;/h2&gt;\n\n    &lt;p&gt;{{ form.label('name') }}&lt;/p&gt;\n    &lt;p&gt;\n        {{ form.render('name') }}\n        {{ form.messages('name') }}\n    &lt;/p&gt;\n\n    &lt;p&gt;{{ form.label('email') }}&lt;/p&gt;\n    &lt;p&gt;\n        {{ form.render('email') }}\n        {{ form.messages('email') }}\n    &lt;/p&gt;\n\n    &lt;p&gt;{{ form.label('password') }}&lt;/p&gt;\n    &lt;p&gt;\n        {{ form.render('password') }}\n        {{ form.messages('password') }}\n    &lt;/p&gt;\n\n    &lt;p&gt;{{ form.label('confirmPassword') }}&lt;/p&gt;\n    &lt;p&gt;\n        {{ form.render('confirmPassword') }}\n        {{ form.messages('confirmPassword') }}\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        {{ form.render('terms') }} {{ form.label('terms') }}\n        {{ form.messages('terms') }}\n    &lt;/p&gt;\n\n    &lt;p&gt;{{ form.render('Sign Up') }}&lt;/p&gt;\n\n    {{ form.render('csrf', ['value': security.getToken()]) }}\n    {{ form.messages('csrf') }}\n\n    &lt;hr&gt;\n\n&lt;/form&gt;\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/tutorial-vokuro.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/tutorial-vokuro.html</a>\n  </p>\n</div>\n","reference/tutorial-invo":"<h1 id=\"tutorial-2-introducing-invo\">Tutorial 2: Introducing INVO</h1> <p>In this second tutorial, we’ll explain a more complete application in order to deepen the development with Phalcon. INVO is one of the applications we have created as samples. INVO is a small website that allows their users to generate invoices, and do other tasks such as manage their customers and products. You can clone its code from <a class=\"reference external\" href=\"https://github.com/phalcon/invo\">Github</a>.</p> <p>Also, INVO was made with <a class=\"reference external\" href=\"http://getbootstrap.com/\">Bootstrap</a> as client-side framework. Although the application does not generate invoices, it still serves as an example to understand how the framework works.</p>  <h2 id=\"project-structure\">Project Structure</h2> <p>Once you clone the project in your document root you’ll see the following structure:</p> <pre class=\"highlight-bash\" data-language=\"bash\">invo/\n    app/\n        config/\n        controllers/\n        forms/\n        library/\n        logs/\n        models/\n        plugins/\n        views/\n    cache/\n        volt/\n    docs/\n    public/\n        css/\n        fonts/\n        js/\n    schemas/\n</pre> <p>As you know, Phalcon does not impose a particular file structure for application development. This project provides a simple MVC structure and a public document root.</p> <p>Once you open the application in your browser <a class=\"reference external\" href=\"http://localhost/invo\">http://localhost/invo</a> you’ll see something like this:</p> <div class=\"figure align-center\"> <img alt=\"../_images/invo-1.png\" src=\"https://docs.phalconphp.com/en/latest/_images/invo-1.png\"> </div> <p>The application is divided into two parts, a frontend, that is a public part where visitors can receive information about INVO and request contact information. The second part is the backend, an administrative area where a registered user can manage his/her products and customers.</p>   <h2 id=\"routing\">Routing</h2> <p>INVO uses the standard route that is built-in with the <a class=\"reference internal\" href=\"routing\"><em>Router</em></a> component. These routes match the following pattern: /:controller/:action/:params. This means that the first part of a URI is the controller, the second the action and the rest are the parameters.</p> <p>The following route <cite>/session/register</cite> executes the controller SessionController and its action registerAction.</p>   <h2 id=\"configuration\">Configuration</h2> <p>INVO has a configuration file that sets general parameters in the application. This file is located at app/config/config.ini and it’s loaded in the very first lines of the application bootstrap (public/index.php):</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Config\\Adapter\\Ini as ConfigIni;\n\n// ...\n\n// Read the configuration\n$config = new ConfigIni(APP_PATH . 'app/config/config.ini');\n</pre> <p><a class=\"reference internal\" href=\"config\"><em>Phalcon\\Config</em></a> allows us to manipulate the file in an object-oriented way. In this example, we’re using a ini file as configuration, however, there are more adapters supported for configuration files. The configuration file contains the following settings:</p> <pre class=\"highlight-ini\" data-language=\"ini\">[database]\nhost     = localhost\nusername = root\npassword = secret\nname     = invo\n\n[application]\ncontrollersDir = app/controllers/\nmodelsDir      = app/models/\nviewsDir       = app/views/\npluginsDir     = app/plugins/\nformsDir       = app/forms/\nlibraryDir     = app/library/\nbaseUri        = /invo/\n</pre> <p>Phalcon hasn’t any pre-defined convention settings. Sections help us to organize the options as appropriate. In this file there are two sections to be used later “application” and “database”.</p>   <h2 id=\"autoloaders\">Autoloaders</h2> <p>The second part that appears in the bootstrap file (public/index.php) is the autoloader:</p> <pre class=\"highlight-php\" data-language=\"php\">/**\n * Auto-loader configuration\n */\nrequire APP_PATH . 'app/config/loader.php';\n</pre> <p>The autoloader registers a set of directories in which the application will look for the classes that it eventually will need.</p> <pre class=\"highlight-php\" data-language=\"php\">$loader = new Phalcon\\Loader();\n\n// We're a registering a set of directories taken from the configuration file\n$loader-&gt;registerDirs(\n    [\n        APP_PATH . $config-&gt;application-&gt;controllersDir,\n        APP_PATH . $config-&gt;application-&gt;pluginsDir,\n        APP_PATH . $config-&gt;application-&gt;libraryDir,\n        APP_PATH . $config-&gt;application-&gt;modelsDir,\n        APP_PATH . $config-&gt;application-&gt;formsDir,\n    ]\n)-&gt;register();\n</pre> <p>Note that the above code has registered the directories that were defined in the configuration file. The only directory that is not registered is the viewsDir, because it contains HTML + PHP files but no classes. Also, note that we have using a constant called APP_PATH, this constant is defined in the bootstrap (public/index.php) to allow us have a reference to the root of our project:</p> <pre class=\"highlight-php\" data-language=\"php\">// ...\n\ndefine('APP_PATH', realpath('..') . '/');\n</pre>   <h2 id=\"registering-services\">Registering services</h2> <p>Another file that is required in the bootstrap is (app/config/services.php). This file allow us to organize the services that INVO does use.</p> <pre class=\"highlight-php\" data-language=\"php\">/**\n * Load application services\n */\nrequire APP_PATH . 'app/config/services.php';\n</pre> <p>Service registration is achieved as in the previous tutorial, making use of a closure to lazily loads the required components:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Url as UrlProvider;\n\n// ...\n\n/**\n * The URL component is used to generate all kind of URLs in the application\n */\n$di-&gt;set('url', function () use ($config) {\n    $url = new UrlProvider();\n\n    $url-&gt;setBaseUri($config-&gt;application-&gt;baseUri);\n\n    return $url;\n});\n</pre> <p>We will discuss this file in depth later.</p>   <h2 id=\"handling-the-request\">Handling the Request</h2> <p>If we skip to the end of the file (public/index.php), the request is finally handled by <a class=\"reference internal\" href=\"../api/phalcon_mvc_application\"><em>Phalcon\\Mvc\\Application</em></a> which initializes and executes all that is necessary to make the application run:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Application;\n\n// ...\n\n$application = new Application($di);\n\n$response = $application-&gt;handle();\n\n$response-&gt;send();\n</pre>   <h2 id=\"dependency-injection\">Dependency Injection</h2> <p>Look at the first line of the code block above, the Application class constructor is receiving the variable <code class=\"code docutils literal\"><span class=\"pre\">$di</span></code> as an argument. What is the purpose of that variable? Phalcon is a highly decoupled framework, so we need a component that acts as glue to make everything work together. That component is <a class=\"reference internal\" href=\"../api/phalcon_di\"><em>Phalcon\\Di</em></a>. It is a service container that also performs dependency injection and service location, instantiating all components as they are needed by the application.</p> <p>There are many ways of registering services in the container. In INVO, most services have been registered using anonymous functions/closures. Thanks to this, the objects are instantiated in a lazy way, reducing the resources needed by the application.</p> <p>For instance, in the following excerpt the session service is registered. The anonymous function will only be called when the application requires access to the session data:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Session\\Adapter\\Files as Session;\n\n// ...\n\n// Start the session the first time a component requests the session service\n$di-&gt;set('session', function () {\n    $session = new Session();\n\n    $session-&gt;start();\n\n    return $session;\n});\n</pre> <p>Here, we have the freedom to change the adapter, perform additional initialization and much more. Note that the service was registered using the name “session”. This is a convention that will allow the framework to identify the active service in the services container.</p> <p>A request can use many services and registering each service individually can be a cumbersome task. For that reason, the framework provides a variant of <a class=\"reference internal\" href=\"../api/phalcon_di\"><em>Phalcon\\Di</em></a> called <a class=\"reference internal\" href=\"../api/phalcon_di_factorydefault\"><em>Phalcon\\Di\\FactoryDefault</em></a> whose task is to register all services providing a full-stack framework.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Di\\FactoryDefault;\n\n// ...\n\n// The FactoryDefault Dependency Injector automatically registers the\n// right services providing a full-stack framework\n$di = new FactoryDefault();\n</pre> <p>It registers the majority of services with components provided by the framework as standard. If we need to override the definition of some service we could just set it again as we did above with “session” or “url”. This is the reason for the existence of the variable <code class=\"code docutils literal\"><span class=\"pre\">$di</span></code>.</p> <p>In next chapter, we will see how to authentication and authorization is implemented in INVO.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/tutorial-invo.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/tutorial-invo.html</a>\n  </p>\n</div>\n","reference/model-transactions":"<h1 id=\"model-transactions\">Model Transactions</h1> <p>When a process performs multiple database operations, it might be important that each step is completed successfully so that data integrity can be maintained. Transactions offer the ability to ensure that all database operations have been executed successfully before the data is committed to the database.</p> <p>Transactions in Phalcon allow you to commit all operations if they were executed successfully or rollback all operations if something went wrong.</p>  <h2 id=\"manual-transactions\">Manual Transactions</h2> <p>If an application only uses one connection and the transactions aren’t very complex, a transaction can be created by just moving the current connection into transaction mode and then commit or rollback the operation whether it is successful or not:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass RobotsController extends Controller\n{\n    public function saveAction()\n    {\n        // Start a transaction\n        $this-&gt;db-&gt;begin();\n\n        $robot              = new Robots();\n        $robot-&gt;name        = \"WALL·E\";\n        $robot-&gt;created_at  = date(\"Y-m-d\");\n\n        // The model failed to save, so rollback the transaction\n        if ($robot-&gt;save() == false) {\n            $this-&gt;db-&gt;rollback();\n            return;\n        }\n\n        $robotPart            = new RobotParts();\n        $robotPart-&gt;robots_id = $robot-&gt;id;\n        $robotPart-&gt;type      = \"head\";\n\n        // The model failed to save, so rollback the transaction\n        if ($robotPart-&gt;save() == false) {\n            $this-&gt;db-&gt;rollback();\n            return;\n        }\n\n        // Commit the transaction\n        $this-&gt;db-&gt;commit();\n    }\n}\n</pre>   <h2 id=\"implicit-transactions\">Implicit Transactions</h2> <p>Existing relationships can be used to store records and their related instances, this kind of operation implicitly creates a transaction to ensure that data is correctly stored:</p> <pre class=\"highlight-php\" data-language=\"php\">$robotPart          = new RobotParts();\n$robotPart-&gt;type    = \"head\";\n\n$robot              = new Robots();\n$robot-&gt;name        = \"WALL·E\";\n$robot-&gt;created_at  = date(\"Y-m-d\");\n$robot-&gt;robotPart   = $robotPart;\n\n$robot-&gt;save(); // Creates an implicit transaction to store both records\n</pre>   <h2 id=\"isolated-transactions\">Isolated Transactions</h2> <p>Isolated transactions are executed in a new connection ensuring that all the generated SQL, virtual foreign key checks and business rules are isolated from the main connection. This kind of transaction requires a transaction manager that globally manages each transaction created ensuring that they are correctly rolled back/committed before ending the request:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Transaction\\Failed as TxFailed;\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager as TxManager;\n\ntry {\n\n    // Create a transaction manager\n    $manager     = new TxManager();\n\n    // Request a transaction\n    $transaction = $manager-&gt;get();\n\n    $robot              = new Robots();\n    $robot-&gt;setTransaction($transaction);\n    $robot-&gt;name        = \"WALL·E\";\n    $robot-&gt;created_at  = date(\"Y-m-d\");\n    if ($robot-&gt;save() == false) {\n        $transaction-&gt;rollback(\"Cannot save robot\");\n    }\n\n    $robotPart              = new RobotParts();\n    $robotPart-&gt;setTransaction($transaction);\n    $robotPart-&gt;robots_id   = $robot-&gt;id;\n    $robotPart-&gt;type        = \"head\";\n    if ($robotPart-&gt;save() == false) {\n        $transaction-&gt;rollback(\"Cannot save robot part\");\n    }\n\n    // Everything's gone fine, let's commit the transaction\n    $transaction-&gt;commit();\n\n} catch (TxFailed $e) {\n    echo \"Failed, reason: \", $e-&gt;getMessage();\n}\n</pre> <p>Transactions can be used to delete many records in a consistent way:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Transaction\\Failed as TxFailed;\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager as TxManager;\n\ntry {\n\n    // Create a transaction manager\n    $manager     = new TxManager();\n\n    // Request a transaction\n    $transaction = $manager-&gt;get();\n\n    // Get the robots to be deleted\n    foreach (Robots::find(\"type = 'mechanical'\") as $robot) {\n        $robot-&gt;setTransaction($transaction);\n        if ($robot-&gt;delete() == false) {\n            // Something's gone wrong, we should rollback the transaction\n            foreach ($robot-&gt;getMessages() as $message) {\n                $transaction-&gt;rollback($message-&gt;getMessage());\n            }\n        }\n    }\n\n    // Everything's gone fine, let's commit the transaction\n    $transaction-&gt;commit();\n\n    echo \"Robots were deleted successfully!\";\n\n} catch (TxFailed $e) {\n    echo \"Failed, reason: \", $e-&gt;getMessage();\n}\n</pre> <p>Transactions are reused no matter where the transaction object is retrieved. A new transaction is generated only when a <code class=\"code docutils literal\"><span class=\"pre\">commit()</span></code> or <code class=\"code docutils literal\"><span class=\"pre\">rollback()</span></code> is performed. You can use the service container to create the global transaction manager for the entire application:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Transaction\\Manager as TransactionManager\n\n$di-&gt;setShared('transactions', function () {\n    return new TransactionManager();\n});\n</pre> <p>Then access it from a controller or view:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n    public function saveAction()\n    {\n        // Obtain the TransactionsManager from the services container\n        $manager     = $this-&gt;di-&gt;getTransactions();\n\n        // Or\n        $manager     = $this-&gt;transactions;\n\n        // Request a transaction\n        $transaction = $manager-&gt;get();\n\n        // ...\n    }\n}\n</pre> <p>While a transaction is active, the transaction manager will always return the same transaction across the application.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/model-transactions.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/model-transactions.html</a>\n  </p>\n</div>\n","reference/models-metadata":"<h1 id=\"models-meta-data\">Models Meta-Data</h1> <p>To speed up development <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> helps you to query fields and constraints from tables related to models. To achieve this, <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_metadata\"><em>Phalcon\\Mvc\\Model\\MetaData</em></a> is available to manage and cache table meta-data.</p> <p>Sometimes it is necessary to get those attributes when working with models. You can get a meta-data instance as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot      = new Robots();\n\n// Get Phalcon\\Mvc\\Model\\Metadata instance\n$metaData   = $robot-&gt;getModelsMetaData();\n\n// Get robots fields names\n$attributes = $metaData-&gt;getAttributes($robot);\nprint_r($attributes);\n\n// Get robots fields data types\n$dataTypes = $metaData-&gt;getDataTypes($robot);\nprint_r($dataTypes);\n</pre>  <h2 id=\"caching-meta-data\">Caching Meta-Data</h2> <p>Once the application is in a production stage, it is not necessary to query the meta-data of the table from the database system each time you use the table. This could be done caching the meta-data using any of the following adapters:</p> <table class=\"docutils\"> <colgroup> <col width=\"2%\"> <col width=\"77%\"> <col width=\"21%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Adapter</th> <th class=\"head\">Description</th> <th class=\"head\">API</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Memory</td> <td>This adapter is the default. The meta-data is cached only during the request. When the request is completed, the meta-data are released as part of the normal memory of the request. This adapter is perfect when the application is in development so as to refresh the meta-data in each request containing the new and/or modified fields.</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_metadata_memory\"><em>Phalcon\\Mvc\\Model\\MetaData\\Memory</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Session</td> <td>This adapter stores meta-data in the <code class=\"code docutils literal\"><span class=\"pre\">$_SESSION</span></code> superglobal. This adapter is recommended only when the application is actually using a small number of models. The meta-data are refreshed every time a new session starts. This also requires the use of <code class=\"code docutils literal\"><span class=\"pre\">session_start()</span></code> to start the session before using any models.</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_metadata_session\"><em>Phalcon\\Mvc\\Model\\MetaData\\Session</em></a></td> </tr> <tr class=\"row-even\">\n<td>Apc</td> <td>This adapter uses the <a class=\"reference external\" href=\"http://www.php.net/manual/en/book.apc.php\">Alternative PHP Cache (APC)</a> to store the table meta-data. You can specify the lifetime of the meta-data with options. This is the most recommended way to store meta-data when the application is in production stage.</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_metadata_apc\"><em>Phalcon\\Mvc\\Model\\MetaData\\Apc</em></a></td> </tr> <tr class=\"row-odd\">\n<td>XCache</td> <td>This adapter uses <a class=\"reference external\" href=\"http://xcache.lighttpd.net/\">XCache</a> to store the table meta-data. You can specify the lifetime of the meta-data with options. This is the most recommended way to store meta-data when the application is in production stage.</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_metadata_xcache\"><em>Phalcon\\Mvc\\Model\\MetaData\\Xcache</em></a></td> </tr> <tr class=\"row-even\">\n<td>Files</td> <td>This adapter uses plain files to store meta-data. By using this adapter the disk-reading is increased but the database access is reduced.</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_metadata_files\"><em>Phalcon\\Mvc\\Model\\MetaData\\Files</em></a></td> </tr> </tbody> </table> <p>As other ORM’s dependencies, the metadata manager is requested from the services container:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\MetaData\\Apc as ApcMetaData;\n\n$di['modelsMetadata'] = function () {\n\n    // Create a meta-data manager with APC\n    $metaData = new ApcMetaData(\n        array(\n            \"lifetime\" =&gt; 86400,\n            \"prefix\"   =&gt; \"my-prefix\"\n        )\n    );\n\n    return $metaData;\n};\n</pre>   <h2 id=\"meta-data-strategies\">Meta-Data Strategies</h2> <p>As mentioned above the default strategy to obtain the model’s meta-data is database introspection. In this strategy, the information schema is used to know the fields in a table, its primary key, nullable fields, data types, etc.</p> <p>You can change the default meta-data introspection in the following way:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\MetaData\\Apc as ApcMetaData;\n\n$di['modelsMetadata'] = function () {\n\n    // Instantiate a meta-data adapter\n    $metaData = new ApcMetaData(\n        array(\n            \"lifetime\" =&gt; 86400,\n            \"prefix\"   =&gt; \"my-prefix\"\n        )\n    );\n\n    // Set a custom meta-data introspection strategy\n    $metaData-&gt;setStrategy(new MyIntrospectionStrategy());\n\n    return $metaData;\n};\n</pre>  <h3 id=\"database-introspection-strategy\">Database Introspection Strategy</h3> <p>This strategy doesn’t require any customization and is implicitly used by all the meta-data adapters.</p>   <h3 id=\"annotations-strategy\">Annotations Strategy</h3> <p>This strategy makes use of <a class=\"reference internal\" href=\"annotations\"><em>annotations</em></a> to describe the columns in a model:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    /**\n     * @Primary\n     * @Identity\n     * @Column(type=\"integer\", nullable=false)\n     */\n    public $id;\n\n    /**\n     * @Column(type=\"string\", length=70, nullable=false)\n     */\n    public $name;\n\n    /**\n     * @Column(type=\"string\", length=32, nullable=false)\n     */\n    public $type;\n\n    /**\n     * @Column(type=\"integer\", nullable=false)\n     */\n    public $year;\n}\n</pre> <p>Annotations must be placed in properties that are mapped to columns in the mapped source. Properties without the @Column annotation are handled as simple class attributes.</p> <p>The following annotations are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"15%\"> <col width=\"85%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Primary</td> <td>Mark the field as part of the table’s primary key</td> </tr> <tr class=\"row-odd\">\n<td>Identity</td> <td>The field is an auto_increment/serial column</td> </tr> <tr class=\"row-even\">\n<td>Column</td> <td>This marks an attribute as a mapped column</td> </tr> </tbody> </table> <p>The annotation @Column supports the following parameters:</p> <table class=\"docutils\"> <colgroup> <col width=\"15%\"> <col width=\"85%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>type</td> <td>The column’s type (string, integer, decimal, boolean)</td> </tr> <tr class=\"row-odd\">\n<td>length</td> <td>The column’s length if any</td> </tr> <tr class=\"row-even\">\n<td>nullable</td> <td>Set whether the column accepts null values or not</td> </tr> </tbody> </table> <p>The annotations strategy could be set up this way:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\MetaData\\Apc as ApcMetaData;\nuse Phalcon\\Mvc\\Model\\MetaData\\Strategy\\Annotations as StrategyAnnotations;\n\n$di['modelsMetadata'] = function () {\n\n    // Instantiate a meta-data adapter\n    $metaData = new ApcMetaData(\n        array(\n            \"lifetime\" =&gt; 86400,\n            \"prefix\"   =&gt; \"my-prefix\"\n        )\n    );\n\n    // Set a custom meta-data database introspection\n    $metaData-&gt;setStrategy(new StrategyAnnotations());\n\n    return $metaData;\n};\n</pre>    <h2 id=\"manual-meta-data\">Manual Meta-Data</h2> <p>Phalcon can obtain the metadata for each model automatically without the developer must set them manually using any of the introspection strategies presented above.</p> <p>The developer also has the option of define the metadata manually. This strategy overrides any strategy set in the meta-data manager. New columns added/modified/removed to/from the mapped table must be added/modified/removed also for everything to work properly.</p> <p>The following example shows how to define the meta-data manually:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\nuse Phalcon\\Db\\Column;\nuse Phalcon\\Mvc\\Model\\MetaData;\n\nclass Robots extends Model\n{\n    public function metaData()\n    {\n        return array(\n            // Every column in the mapped table\n            MetaData::MODELS_ATTRIBUTES =&gt; array(\n                'id', 'name', 'type', 'year'\n            ),\n\n            // Every column part of the primary key\n            MetaData::MODELS_PRIMARY_KEY =&gt; array(\n                'id'\n            ),\n\n            // Every column that isn't part of the primary key\n            MetaData::MODELS_NON_PRIMARY_KEY =&gt; array(\n                'name', 'type', 'year'\n            ),\n\n            // Every column that doesn't allows null values\n            MetaData::MODELS_NOT_NULL =&gt; array(\n                'id', 'name', 'type'\n            ),\n\n            // Every column and their data types\n            MetaData::MODELS_DATA_TYPES =&gt; array(\n                'id'   =&gt; Column::TYPE_INTEGER,\n                'name' =&gt; Column::TYPE_VARCHAR,\n                'type' =&gt; Column::TYPE_VARCHAR,\n                'year' =&gt; Column::TYPE_INTEGER\n            ),\n\n            // The columns that have numeric data types\n            MetaData::MODELS_DATA_TYPES_NUMERIC =&gt; array(\n                'id'   =&gt; true,\n                'year' =&gt; true\n            ),\n\n            // The identity column, use boolean false if the model doesn't have\n            // an identity column\n            MetaData::MODELS_IDENTITY_COLUMN =&gt; 'id',\n\n            // How every column must be bound/casted\n            MetaData::MODELS_DATA_TYPES_BIND =&gt; array(\n                'id'   =&gt; Column::BIND_PARAM_INT,\n                'name' =&gt; Column::BIND_PARAM_STR,\n                'type' =&gt; Column::BIND_PARAM_STR,\n                'year' =&gt; Column::BIND_PARAM_INT\n            ),\n\n            // Fields that must be ignored from INSERT SQL statements\n            MetaData::MODELS_AUTOMATIC_DEFAULT_INSERT =&gt; array(\n                'year' =&gt; true\n            ),\n\n            // Fields that must be ignored from UPDATE SQL statements\n            MetaData::MODELS_AUTOMATIC_DEFAULT_UPDATE =&gt; array(\n                'year' =&gt; true\n            ),\n\n            // Default values for columns\n            MetaData::MODELS_DEFAULT_VALUES =&gt; array(\n                'year' =&gt; '2015'\n            ),\n\n            // Fields that allow empty strings\n            MetaData::MODELS_EMPTY_STRING_VALUES =&gt; array(\n                'name' =&gt; true\n            )\n        );\n    }\n}\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/models-metadata.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/models-metadata.html</a>\n  </p>\n</div>\n","reference/controllers":"<h1 id=\"using-controllers\">Using Controllers</h1> <p>The controllers provide a number of methods that are called actions. Actions are methods on a controller that handle requests. By default all public methods on a controller map to actions and are accessible by a URL. Actions are responsible for interpreting the request and creating the response. Usually responses are in the form of a rendered view, but there are other ways to create responses as well.</p> <p>For instance, when you access a URL like this: <a class=\"reference external\" href=\"http://localhost/blog/posts/show/2015/the-post-title\">http://localhost/blog/posts/show/2015/the-post-title</a> Phalcon by default will decompose each part like this:</p> <table class=\"docutils\"> <colgroup> <col width=\"59%\"> <col width=\"41%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td><strong>Phalcon Directory</strong></td> <td>blog</td> </tr> <tr class=\"row-even\">\n<td><strong>Controller</strong></td> <td>posts</td> </tr> <tr class=\"row-odd\">\n<td><strong>Action</strong></td> <td>show</td> </tr> <tr class=\"row-even\">\n<td><strong>Parameter</strong></td> <td>2015</td> </tr> <tr class=\"row-odd\">\n<td><strong>Parameter</strong></td> <td>the-post-title</td> </tr> </tbody> </table> <p>In this case, the PostsController will handle this request. There is no a special location to put controllers in an application, they could be loaded using <a class=\"reference internal\" href=\"loader\"><em>autoloaders</em></a>, so you’re free to organize your controllers as you need.</p> <p>Controllers must have the suffix “Controller” while actions the suffix “Action”. A sample of a controller is as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction($year, $postTitle)\n    {\n\n    }\n}\n</pre> <p>Additional URI parameters are defined as action parameters, so that they can be easily accessed using local variables. A controller can optionally extend <a class=\"reference internal\" href=\"../api/phalcon_mvc_controller\"><em>Phalcon\\Mvc\\Controller</em></a>. By doing this, the controller can have easy access to the application services.</p> <p>Parameters without a default value are handled as required. Setting optional values for parameters is done as usual in PHP:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction($year = 2015, $postTitle = 'some default title')\n    {\n\n    }\n}\n</pre> <p>Parameters are assigned in the same order as they were passed in the route. You can get an arbitrary parameter from its name in the following way:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction()\n    {\n        $year      = $this-&gt;dispatcher-&gt;getParam('year');\n        $postTitle = $this-&gt;dispatcher-&gt;getParam('postTitle');\n    }\n}\n</pre>  <h2 id=\"dispatch-loop\">Dispatch Loop</h2> <p>The dispatch loop will be executed within the Dispatcher until there are no actions left to be executed. In the previous example only one action was executed. Now we’ll see how “forward” can provide a more complex flow of operation in the dispatch loop, by forwarding execution to a different controller/action.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction($year, $postTitle)\n    {\n        $this-&gt;flash-&gt;error(\"You don't have permission to access this area\");\n\n        // Forward flow to another action\n        $this-&gt;dispatcher-&gt;forward(\n            array(\n                \"controller\" =&gt; \"users\",\n                \"action\"     =&gt; \"signin\"\n            )\n        );\n    }\n}\n</pre> <p>If users don’t have permissions to access a certain action then will be forwarded to the Users controller, signin action.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function signinAction()\n    {\n\n    }\n}\n</pre> <p>There is no limit on the “forwards” you can have in your application, so long as they do not result in circular references, at which point your application will halt. If there are no other actions to be dispatched by the dispatch loop, the dispatcher will automatically invoke the view layer of the MVC that is managed by <a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a>.</p>   <h2 id=\"initializing-controllers\">Initializing Controllers</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_controller\"><em>Phalcon\\Mvc\\Controller</em></a> offers the initialize method, which is executed first, before any action is executed on a controller. The use of the “__construct” method is not recommended.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public $settings;\n\n    public function initialize()\n    {\n        $this-&gt;settings = array(\n            \"mySetting\" =&gt; \"value\"\n        );\n    }\n\n    public function saveAction()\n    {\n        if ($this-&gt;settings[\"mySetting\"] == \"value\") {\n            // ...\n        }\n    }\n}\n</pre> <blockquote class=\"highlights\"> <div>Method ‘initialize’ is only called if the event ‘beforeExecuteRoute’ is executed with success. This avoid that application logic in the initializer cannot be executed without authorization.</div>\n</blockquote> <p>If you want to execute some initialization logic just after build the controller object you can implement the method ‘onConstruct’:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function onConstruct()\n    {\n        // ...\n    }\n}\n</pre> <blockquote class=\"highlights\"> <div>Be aware that method ‘onConstruct’ is executed even if the action to be executed not exists in the controller or the user does not have access to it (according to custom control access provided by developer).</div>\n</blockquote>   <h2 id=\"injecting-services\">Injecting Services</h2> <p>If a controller extends <a class=\"reference internal\" href=\"../api/phalcon_mvc_controller\"><em>Phalcon\\Mvc\\Controller</em></a> then it has easy access to the service container in application. For example, if we have registered a service like this:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Di;\n\n$di = new Di();\n\n$di-&gt;set('storage', function () {\n    return new Storage('/some/directory');\n}, true);\n</pre> <p>Then, we can access to that service in several ways:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass FilesController extends Controller\n{\n    public function saveAction()\n    {\n        // Injecting the service by just accessing the property with the same name\n        $this-&gt;storage-&gt;save('/some/file');\n\n        // Accessing the service from the DI\n        $this-&gt;di-&gt;get('storage')-&gt;save('/some/file');\n\n        // Another way to access the service using the magic getter\n        $this-&gt;di-&gt;getStorage()-&gt;save('/some/file');\n\n        // Another way to access the service using the magic getter\n        $this-&gt;getDi()-&gt;getStorage()-&gt;save('/some/file');\n\n        // Using the array-syntax\n        $this-&gt;di['storage']-&gt;save('/some/file');\n    }\n}\n</pre> <p>If you’re using Phalcon as a full-stack framework, you can read the services provided <a class=\"reference internal\" href=\"di\"><em>by default</em></a> in the framework.</p>   <h2 id=\"request-and-response\">Request and Response</h2> <p>Assuming that the framework provides a set of pre-registered services. We explain how to interact with the HTTP environment. The “request” service contains an instance of <a class=\"reference internal\" href=\"../api/phalcon_http_request\"><em>Phalcon\\Http\\Request</em></a> and the “response” contains a <a class=\"reference internal\" href=\"../api/phalcon_http_response\"><em>Phalcon\\Http\\Response</em></a> representing what is going to be sent back to the client.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Check if request has made with POST\n        if ($this-&gt;request-&gt;isPost() == true) {\n            // Access POST data\n            $customerName = $this-&gt;request-&gt;getPost(\"name\");\n            $customerBorn = $this-&gt;request-&gt;getPost(\"born\");\n        }\n    }\n}\n</pre> <p>The response object is not usually used directly, but is built up before the execution of the action, sometimes - like in an afterDispatch event - it can be useful to access the response directly:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function notFoundAction()\n    {\n        // Send a HTTP 404 response header\n        $this-&gt;response-&gt;setStatusCode(404, \"Not Found\");\n    }\n}\n</pre> <p>Learn more about the HTTP environment in their dedicated articles <a class=\"reference internal\" href=\"request\"><em>request</em></a> and <a class=\"reference internal\" href=\"response\"><em>response</em></a>.</p>   <h2 id=\"session-data\">Session Data</h2> <p>Sessions help us maintain persistent data between requests. You could access a <a class=\"reference internal\" href=\"../api/phalcon_session_bag\"><em>Phalcon\\Session\\Bag</em></a> from any controller to encapsulate data that needs to be persistent.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass UserController extends Controller\n{\n    public function indexAction()\n    {\n        $this-&gt;persistent-&gt;name = \"Michael\";\n    }\n\n    public function welcomeAction()\n    {\n        echo \"Welcome, \", $this-&gt;persistent-&gt;name;\n    }\n}\n</pre>   <h2 id=\"using-services-as-controllers\">Using Services as Controllers</h2> <p>Services may act as controllers, controllers classes are always requested from the services container. Accordingly, any other class registered with its name can easily replace a controller:</p> <pre class=\"highlight-php\" data-language=\"php\">// Register a controller as a service\n$di-&gt;set('IndexController', function () {\n    $component = new Component();\n    return $component;\n});\n\n// Register a namespaced controller as a service\n$di-&gt;set('Backend\\Controllers\\IndexController', function () {\n    $component = new Component();\n    return $component;\n});\n</pre>   <h2 id=\"creating-a-base-controller\">Creating a Base Controller</h2> <p>Some application features like access control lists, translation, cache, and template engines are often common to many controllers. In cases like these the creation of a “base controller” is encouraged to ensure your code stays <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRY</a>. A base controller is simply a class that extends the <a class=\"reference internal\" href=\"../api/phalcon_mvc_controller\"><em>Phalcon\\Mvc\\Controller</em></a> and encapsulates the common functionality that all controllers must have. In turn, your controllers extend the “base controller” and have access to the common functionality.</p> <p>This class could be located anywhere, but for organizational conventions we recommend it to be in the controllers folder, e.g. apps/controllers/ControllerBase.php. We may require this file directly in the bootstrap file or cause to be loaded using any autoloader:</p> <pre class=\"highlight-php\" data-language=\"php\">require \"../app/controllers/ControllerBase.php\";\n</pre> <p>The implementation of common components (actions, methods, properties etc.) resides in this file:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass ControllerBase extends Controller\n{\n    /**\n     * This action is available for multiple controllers\n     */\n    public function someAction()\n    {\n\n    }\n}\n</pre> <p>Any other controller now inherits from ControllerBase, automatically gaining access to the common components (discussed above):</p> <pre class=\"highlight-php\" data-language=\"php\">class UsersController extends ControllerBase\n{\n\n}\n</pre>   <h2 id=\"events-in-controllers\">Events in Controllers</h2> <p>Controllers automatically act as listeners for <a class=\"reference internal\" href=\"dispatching\"><em>dispatcher</em></a> events, implementing methods with those event names allow you to implement hook points before/after the actions are executed:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function beforeExecuteRoute($dispatcher)\n    {\n        // This is executed before every found action\n        if ($dispatcher-&gt;getActionName() == 'save') {\n\n            $this-&gt;flash-&gt;error(\"You don't have permission to save posts\");\n\n            $this-&gt;dispatcher-&gt;forward(\n                array(\n                    'controller' =&gt; 'home',\n                    'action'     =&gt; 'index'\n                )\n            );\n\n            return false;\n        }\n    }\n\n    public function afterExecuteRoute($dispatcher)\n    {\n        // Executed after every found action\n    }\n}\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/controllers.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/controllers.html</a>\n  </p>\n</div>\n","reference/apache":"<h1 id=\"apache-installation-notes\">Apache Installation Notes</h1> <p><a class=\"reference external\" href=\"http://httpd.apache.org/\">Apache</a> is a popular and well known web server available on many platforms.</p>  <h2 id=\"configuring-apache-for-phalcon\">Configuring Apache for Phalcon</h2> <p>The following are potential configurations you can use to setup Apache with Phalcon. These notes are primarily focused on the configuration of the mod_rewrite module allowing to use friendly URLs and the <a class=\"reference internal\" href=\"routing\"><em>router component</em></a>. Commonly an application has the following structure:</p> <pre class=\"highlight-php\" data-language=\"php\">test/\n  app/\n    controllers/\n    models/\n    views/\n  public/\n    css/\n    img/\n    js/\n    index.php\n</pre>  <h3 id=\"directory-under-the-main-document-root\">Directory under the main Document Root</h3> <p>This being the most common case, the application is installed in any directory under the document root. In this case, we use two .htaccess files, the first one to hide the application code forwarding all requests to the application’s document root (public/).</p> <pre class=\"highlight-apacheconf\" data-language=\"apacheconf\"># test/.htaccess\n\n&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine on\n    RewriteRule  ^$ public/    [L]\n    RewriteRule  ((?s).*) public/$1 [L]\n&lt;/IfModule&gt;\n</pre> <p>Now a second .htaccess file is located in the public/ directory, this re-writes all the URIs to the public/index.php file:</p> <pre class=\"highlight-apacheconf\" data-language=\"apacheconf\"># test/public/.htaccess\n\n&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n&lt;/IfModule&gt;\n</pre> <p>If you do not want to use .htaccess files you can move these configurations to the apache’s main configuration file:</p> <pre class=\"highlight-apacheconf\" data-language=\"apacheconf\">&lt;IfModule mod_rewrite.c&gt;\n\n    &lt;Directory \"/var/www/test\"&gt;\n        RewriteEngine on\n        RewriteRule  ^$ public/    [L]\n        RewriteRule  ((?s).*) public/$1 [L]\n    &lt;/Directory&gt;\n\n    &lt;Directory \"/var/www/test/public\"&gt;\n        RewriteEngine On\n        RewriteCond %{REQUEST_FILENAME} !-d\n        RewriteCond %{REQUEST_FILENAME} !-f\n        RewriteRule ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n    &lt;/Directory&gt;\n\n&lt;/IfModule&gt;\n</pre>   <h3 id=\"virtual-hosts\">Virtual Hosts</h3> <p>And this second configuration allows you to install a Phalcon application in a virtual host:</p> <pre class=\"highlight-apacheconf\" data-language=\"apacheconf\">&lt;VirtualHost *:80&gt;\n\n    ServerAdmin [email protected]\n    DocumentRoot \"/var/vhosts/test/public\"\n    DirectoryIndex index.php\n    ServerName example.host\n    ServerAlias www.example.host\n\n    &lt;Directory \"/var/vhosts/test/public\"&gt;\n        Options All\n        AllowOverride All\n        Allow from all\n    &lt;/Directory&gt;\n\n&lt;/VirtualHost&gt;\n</pre> <p>Or if you are using Apache 2.4 or above:</p> <pre class=\"highlight-apacheconf\" data-language=\"apacheconf\">&lt;VirtualHost *:80&gt;\n\n    ServerAdmin [email protected]\n    DocumentRoot \"/var/vhosts/test/public\"\n    DirectoryIndex index.php\n    ServerName example.host\n    ServerAlias www.example.host\n\n    &lt;Directory \"/var/vhosts/test/public\"&gt;\n        Options All\n        AllowOverride All\n        Require all granted\n    &lt;/Directory&gt;\n\n&lt;/VirtualHost&gt;\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/apache.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/apache.html</a>\n  </p>\n</div>\n","reference/tutorial-invo-2":"<h1 id=\"tutorial-3-securing-invo\">Tutorial 3: Securing INVO</h1> <p>In this chapter, we continue explaining how INVO is structured, we’ll talk about the implementation of authentication, authorization using events and plugins and an access control list (ACL) managed by Phalcon.</p>  <h2 id=\"log-into-the-application\">Log into the Application</h2> <p>A “log in” facility will allow us to work on backend controllers. The separation between backend controllers and frontend ones is only logical. All controllers are located in the same directory (app/controllers/).</p> <p>To enter the system, users must have a valid username and password. Users are stored in the table “users” in the database “invo”.</p> <p>Before we can start a session, we need to configure the connection to the database in the application. A service called “db” is set up in the service container with the connection information. As with the autoloader, we are again taking parameters from the configuration file in order to configure a service:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Adapter\\Pdo\\Mysql as DbAdapter;\n\n// ...\n\n// Database connection is created based on parameters defined in the configuration file\n$di-&gt;set('db', function () use ($config) {\n    return new DbAdapter(\n        [\n            \"host\"     =&gt; $config-&gt;database-&gt;host,\n            \"username\" =&gt; $config-&gt;database-&gt;username,\n            \"password\" =&gt; $config-&gt;database-&gt;password,\n            \"dbname\"   =&gt; $config-&gt;database-&gt;name\n        ]\n    );\n});\n</pre> <p>Here, we return an instance of the MySQL connection adapter. If needed, you could do extra actions such as adding a logger, a profiler or change the adapter, setting it up as you want.</p> <p>The following simple form (app/views/session/index.volt) requests the login information. We’ve removed some HTML code to make the example more concise:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{{ form('session/start') }}\n    &lt;fieldset&gt;\n        &lt;div&gt;\n            &lt;label for=\"email\"&gt;Username/Email&lt;/label&gt;\n            &lt;div&gt;\n                {{ text_field('email') }}\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;label for=\"password\"&gt;Password&lt;/label&gt;\n            &lt;div&gt;\n                {{ password_field('password') }}\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            {{ submit_button('Login') }}\n        &lt;/div&gt;\n    &lt;/fieldset&gt;\n&lt;/form&gt;\n</pre> <p>Instead of using raw PHP as the previous tutorial, we started to use <a class=\"reference internal\" href=\"volt\"><em>Volt</em></a>. This is a built-in template engine inspired in <a class=\"reference external\" href=\"http://jinja.pocoo.org/\">Jinja</a> providing a simpler and friendly syntax to create templates. It will not take too long before you become familiar with Volt.</p> <p>The <code class=\"code docutils literal\"><span class=\"pre\">SessionController::startAction</span></code> function (app/controllers/SessionController.php) has the task of validating the data entered in the form including checking for a valid user in the database:</p> <pre class=\"highlight-php\" data-language=\"php\">class SessionController extends ControllerBase\n{\n    // ...\n\n    private function _registerSession($user)\n    {\n        $this-&gt;session-&gt;set(\n            'auth',\n            [\n                'id'   =&gt; $user-&gt;id,\n                'name' =&gt; $user-&gt;name\n            ]\n        );\n    }\n\n    /**\n     * This action authenticate and logs a user into the application\n     */\n    public function startAction()\n    {\n        if ($this-&gt;request-&gt;isPost()) {\n\n            // Get the data from the user\n            $email    = $this-&gt;request-&gt;getPost('email');\n            $password = $this-&gt;request-&gt;getPost('password');\n\n            // Find the user in the database\n            $user = Users::findFirst(\n                [\n                    \"(email = :email: OR username = :email:) AND password = :password: AND active = 'Y'\",\n                    'bind' =&gt; [\n                        'email'    =&gt; $email,\n                        'password' =&gt; sha1($password)\n                    ]\n                ]\n            );\n\n            if ($user != false) {\n\n                $this-&gt;_registerSession($user);\n\n                $this-&gt;flash-&gt;success('Welcome ' . $user-&gt;name);\n\n                // Forward to the 'invoices' controller if the user is valid\n                return $this-&gt;dispatcher-&gt;forward(\n                    [\n                        'controller' =&gt; 'invoices',\n                        'action'     =&gt; 'index'\n                    ]\n                );\n            }\n\n            $this-&gt;flash-&gt;error('Wrong email/password');\n        }\n\n        // Forward to the login form again\n        return $this-&gt;dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'session',\n                'action'     =&gt; 'index'\n            ]\n        );\n    }\n}\n</pre> <p>For the sake of simplicity, we have used “<a class=\"reference external\" href=\"http://php.net/manual/en/function.sha1.php\">sha1</a>” to store the password hashes in the database, however, this algorithm is not recommended in real applications, use “<a class=\"reference internal\" href=\"security\"><em>bcrypt</em></a>” instead.</p> <p>Note that multiple public attributes are accessed in the controller like: <code class=\"code docutils literal\"><span class=\"pre\">$this-&gt;flash</span></code>, <code class=\"code docutils literal\"><span class=\"pre\">$this-&gt;request</span></code> or <code class=\"code docutils literal\"><span class=\"pre\">$this-&gt;session</span></code>. These are services defined in the services container from earlier (app/config/services.php). When they’re accessed the first time, they are injected as part of the controller.</p> <p>These services are “shared”, which means that we are always accessing the same instance regardless of the place where we invoke them.</p> <p>For instance, here we invoke the “session” service and then we store the user identity in the variable “auth”:</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;session-&gt;set(\n    'auth',\n    [\n        'id'   =&gt; $user-&gt;id,\n        'name' =&gt; $user-&gt;name\n    ]\n);\n</pre> <p>Another important aspect of this section is how the user is validated as a valid one, first we validate whether the request has been made using method POST:</p> <pre class=\"highlight-php\" data-language=\"php\">if ($this-&gt;request-&gt;isPost()) {\n</pre> <p>Then, we receive the parameters from the form:</p> <pre class=\"highlight-php\" data-language=\"php\">$email    = $this-&gt;request-&gt;getPost('email');\n$password = $this-&gt;request-&gt;getPost('password');\n</pre> <p>Now, we have to check if there is one user with the same username or email and password:</p> <pre class=\"highlight-php\" data-language=\"php\">$user = Users::findFirst(\n    [\n        \"(email = :email: OR username = :email:) AND password = :password: AND active = 'Y'\",\n        'bind' =&gt; [\n            'email'    =&gt; $email,\n            'password' =&gt; sha1($password)\n        ]\n    ]\n);\n</pre> <p>Note, the use of ‘bound parameters’, placeholders :email: and :password: are placed where values should be, then the values are ‘bound’ using the parameter ‘bind’. This safely replaces the values for those columns without having the risk of a SQL injection.</p> <p>If the user is valid we register it in session and forwards him/her to the dashboard:</p> <pre class=\"highlight-php\" data-language=\"php\">if ($user != false) {\n    $this-&gt;_registerSession($user);\n    $this-&gt;flash-&gt;success('Welcome ' . $user-&gt;name);\n\n    return $this-&gt;forward('invoices/index');\n}\n</pre> <p>If the user does not exist we forward the user back again to action where the form is displayed:</p> <pre class=\"highlight-php\" data-language=\"php\">return $this-&gt;forward('session/index');\n</pre>   <h2 id=\"securing-the-backend\">Securing the Backend</h2> <p>The backend is a private area where only registered users have access. Therefore, it is necessary to check that only registered users have access to these controllers. If you aren’t logged into the application and you try to access, for example, the products controller (which is private) you will see a screen like this:</p> <div class=\"figure align-center\"> <img alt=\"../_images/invo-2.png\" src=\"https://docs.phalconphp.com/en/latest/_images/invo-2.png\"> </div> <p>Every time someone attempts to access any controller/action, the application verifies that the current role (in session) has access to it, otherwise it displays a message like the above and forwards the flow to the home page.</p> <p>Now let’s find out how the application accomplishes this. The first thing to know is that there is a component called <a class=\"reference internal\" href=\"dispatching\"><em>Dispatcher</em></a>. It is informed about the route found by the <a class=\"reference internal\" href=\"routing\"><em>Routing</em></a> component. Then, it is responsible for loading the appropriate controller and execute the corresponding action method.</p> <p>Normally, the framework creates the Dispatcher automatically. In our case, we want to perform a verification before executing the required action, checking if the user has access to it or not. To achieve this, we have replaced the component by creating a function in the bootstrap:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Dispatcher;\n\n// ...\n\n/**\n * MVC dispatcher\n */\n$di-&gt;set('dispatcher', function () {\n\n    // ...\n\n    $dispatcher = new Dispatcher();\n\n    return $dispatcher;\n});\n</pre> <p>We now have total control over the Dispatcher used in the application. Many components in the framework trigger events that allow us to modify their internal flow of operation. As the Dependency Injector component acts as glue for components, a new component called <a class=\"reference internal\" href=\"events\"><em>EventsManager</em></a> allows us to intercept the events produced by a component, routing the events to listeners.</p>  <h3 id=\"events-management\">Events Management</h3> <p>An <a class=\"reference internal\" href=\"events\"><em>EventsManager</em></a> allows us to attach listeners to a particular type of event. The type that interests us now is “dispatch”. The following code filters all events produced by the Dispatcher:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di-&gt;set('dispatcher', function () {\n\n    // Create an events manager\n    $eventsManager = new EventsManager();\n\n    // Listen for events produced in the dispatcher using the Security plugin\n    $eventsManager-&gt;attach('dispatch:beforeExecuteRoute', new SecurityPlugin);\n\n    // Handle exceptions and not-found exceptions using NotFoundPlugin\n    $eventsManager-&gt;attach('dispatch:beforeException', new NotFoundPlugin);\n\n    $dispatcher = new Dispatcher();\n\n    // Assign the events manager to the dispatcher\n    $dispatcher-&gt;setEventsManager($eventsManager);\n\n    return $dispatcher;\n});\n</pre> <p>When an event called “beforeExecuteRoute” is triggered the following plugin will be notified:</p> <pre class=\"highlight-php\" data-language=\"php\">/**\n * Check if the user is allowed to access certain action using the SecurityPlugin\n */\n$eventsManager-&gt;attach('dispatch:beforeExecuteRoute', new SecurityPlugin);\n</pre> <p>When a “beforeException” is triggered then other plugin is notified:</p> <pre class=\"highlight-php\" data-language=\"php\">/**\n * Handle exceptions and not-found exceptions using NotFoundPlugin\n */\n$eventsManager-&gt;attach('dispatch:beforeException', new NotFoundPlugin);\n</pre> <p>SecurityPlugin is a class located at (app/plugins/SecurityPlugin.php). This class implements the method “beforeExecuteRoute”. This is the same name as one of the events produced in the Dispatcher:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\User\\Plugin;\nuse Phalcon\\Mvc\\Dispatcher;\n\nclass SecurityPlugin extends Plugin\n{\n    // ...\n\n    public function beforeExecuteRoute(Event $event, Dispatcher $dispatcher)\n    {\n        // ...\n    }\n}\n</pre> <p>The hook events always receive a first parameter that contains contextual information of the event produced (<code class=\"code docutils literal\"><span class=\"pre\">$event</span></code>) and a second one that is the object that produced the event itself (<code class=\"code docutils literal\"><span class=\"pre\">$dispatcher</span></code>). It is not mandatory that plugins extend the class <a class=\"reference internal\" href=\"../api/phalcon_mvc_user_plugin\"><em>Phalcon\\Mvc\\User\\Plugin</em></a>, but by doing this they gain easier access to the services available in the application.</p> <p>Now, we’re verifying the role in the current session, checking if the user has access using the ACL list. If the user does not have access we redirect to the home screen as explained before:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Acl;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\User\\Plugin;\nuse Phalcon\\Mvc\\Dispatcher;\n\nclass SecurityPlugin extends Plugin\n{\n    // ...\n\n    public function beforeExecuteRoute(Event $event, Dispatcher $dispatcher)\n    {\n        // Check whether the \"auth\" variable exists in session to define the active role\n        $auth = $this-&gt;session-&gt;get('auth');\n        if (!$auth) {\n            $role = 'Guests';\n        } else {\n            $role = 'Users';\n        }\n\n        // Take the active controller/action from the dispatcher\n        $controller = $dispatcher-&gt;getControllerName();\n        $action = $dispatcher-&gt;getActionName();\n\n        // Obtain the ACL list\n        $acl = $this-&gt;getAcl();\n\n        // Check if the Role have access to the controller (resource)\n        $allowed = $acl-&gt;isAllowed($role, $controller, $action);\n        if ($allowed != Acl::ALLOW) {\n\n            // If he doesn't have access forward him to the index controller\n            $this-&gt;flash-&gt;error(\"You don't have access to this module\");\n            $dispatcher-&gt;forward(\n                [\n                    'controller' =&gt; 'index',\n                    'action'     =&gt; 'index'\n                ]\n            );\n\n            // Returning \"false\" we tell to the dispatcher to stop the current operation\n            return false;\n        }\n    }\n}\n</pre>   <h3 id=\"providing-an-acl-list\">Providing an ACL list</h3> <p>In the above example we have obtained the ACL using the method <code class=\"code docutils literal\"><span class=\"pre\">$this-&gt;getAcl()</span></code>. This method is also implemented in the Plugin. Now we are going to explain step-by-step how we built the access control list (ACL):</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Acl;\nuse Phalcon\\Acl\\Role;\nuse Phalcon\\Acl\\Adapter\\Memory as AclList;\n\n// Create the ACL\n$acl = new AclList();\n\n// The default action is DENY access\n$acl-&gt;setDefaultAction(Acl::DENY);\n\n// Register two roles, Users is registered users\n// and guests are users without a defined identity\n$roles = [\n    'users'  =&gt; new Role('Users'),\n    'guests' =&gt; new Role('Guests')\n];\n\nforeach ($roles as $role) {\n    $acl-&gt;addRole($role);\n}\n</pre> <p>Now, we define the resources for each area respectively. Controller names are resources and their actions are accesses for the resources:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Acl\\Resource;\n\n// ...\n\n// Private area resources (backend)\n$privateResources = [\n  'companies'    =&gt; ['index', 'search', 'new', 'edit', 'save', 'create', 'delete'],\n  'products'     =&gt; ['index', 'search', 'new', 'edit', 'save', 'create', 'delete'],\n  'producttypes' =&gt; ['index', 'search', 'new', 'edit', 'save', 'create', 'delete'],\n  'invoices'     =&gt; ['index', 'profile')\n];\nforeach ($privateResources as $resource =&gt; $actions) {\n    $acl-&gt;addResource(new Resource($resource), $actions);\n}\n\n// Public area resources (frontend)\n$publicResources = [\n    'index'    =&gt; ['index'],\n    'about'    =&gt; ['index'],\n    'register' =&gt; ['index'],\n    'errors'   =&gt; ['show404', 'show500'],\n    'session'  =&gt; ['index', 'register', 'start', 'end'],\n    'contact'  =&gt; ['index', 'send']\n];\nforeach ($publicResources as $resource =&gt; $actions) {\n    $acl-&gt;addResource(new Resource($resource), $actions);\n}\n</pre> <p>The ACL now have knowledge of the existing controllers and their related actions. Role “Users” has access to all the resources of both frontend and backend. The role “Guests” only has access to the public area:</p> <pre class=\"highlight-php\" data-language=\"php\">// Grant access to public areas to both users and guests\nforeach ($roles as $role) {\n    foreach ($publicResources as $resource =&gt; $actions) {\n        $acl-&gt;allow($role-&gt;getName(), $resource, '*');\n    }\n}\n\n// Grant access to private area only to role Users\nforeach ($privateResources as $resource =&gt; $actions) {\n    foreach ($actions as $action) {\n        $acl-&gt;allow('Users', $resource, $action);\n    }\n}\n</pre> <p>Hooray!, the ACL is now complete. In next chapter, we will see how a CRUD is implemented in Phalcon and how you can customize it.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/tutorial-invo-2.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/tutorial-invo-2.html</a>\n  </p>\n</div>\n","reference/tutorial-rest":"<h1 id=\"tutorial-7-creating-a-simple-rest-api\">Tutorial 7: Creating a Simple REST API</h1> <p>In this tutorial, we will explain how to create a simple application that provides a <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\">RESTful</a> API using the different HTTP methods:</p> <ul class=\"simple\"> <li>GET to retrieve and search data</li> <li>POST to add data</li> <li>PUT to update data</li> <li>DELETE to delete data</li> </ul>  <h2 id=\"defining-the-api\">Defining the API</h2> <p>The API consists of the following methods:</p> <table class=\"docutils\"> <colgroup> <col width=\"9%\"> <col width=\"30%\"> <col width=\"62%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Method</th> <th class=\"head\">URL</th> <th class=\"head\">Action</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>GET</td> <td>/api/robots</td> <td>Retrieves all robots</td> </tr> <tr class=\"row-odd\">\n<td>GET</td> <td>/api/robots/search/Astro</td> <td>Searches for robots with ‘Astro’ in their name</td> </tr> <tr class=\"row-even\">\n<td>GET</td> <td>/api/robots/2</td> <td>Retrieves robots based on primary key</td> </tr> <tr class=\"row-odd\">\n<td>POST</td> <td>/api/robots</td> <td>Adds a new robot</td> </tr> <tr class=\"row-even\">\n<td>PUT</td> <td>/api/robots/2</td> <td>Updates robots based on primary key</td> </tr> <tr class=\"row-odd\">\n<td>DELETE</td> <td>/api/robots/2</td> <td>Deletes robots based on primary key</td> </tr> </tbody> </table>   <h2 id=\"creating-the-application\">Creating the Application</h2> <p>As the application is so simple, we will not implement any full MVC environment to develop it. In this case, we will use a <a class=\"reference internal\" href=\"micro\"><em>micro application</em></a> to meet our goal.</p> <p>The following file structure is more than enough:</p> <pre class=\"highlight-php\" data-language=\"php\">my-rest-api/\n    models/\n        Robots.php\n    index.php\n    .htaccess\n</pre> <p>First, we need an .htaccess file that contains all the rules to rewrite the URIs to the index.php file, that is our application:</p> <pre class=\"highlight-apacheconf\" data-language=\"apacheconf\">&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n&lt;/IfModule&gt;\n</pre> <p>Then, in the index.php file we create the following:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n// Define the routes here\n\n$app-&gt;handle();\n</pre> <p>Now we will create the routes as we defined above:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n// Retrieves all robots\n$app-&gt;get('/api/robots', function () {\n\n});\n\n// Searches for robots with $name in their name\n$app-&gt;get('/api/robots/search/{name}', function ($name) {\n\n});\n\n// Retrieves robots based on primary key\n$app-&gt;get('/api/robots/{id:[0-9]+}', function ($id) {\n\n});\n\n// Adds a new robot\n$app-&gt;post('/api/robots', function () {\n\n});\n\n// Updates robots based on primary key\n$app-&gt;put('/api/robots/{id:[0-9]+}', function () {\n\n});\n\n// Deletes robots based on primary key\n$app-&gt;delete('/api/robots/{id:[0-9]+}', function () {\n\n});\n\n$app-&gt;handle();\n</pre> <p>Each route is defined with a method with the same name as the HTTP method, as first parameter we pass a route pattern, followed by a handler. In this case, the handler is an anonymous function. The following route: <code class=\"code docutils literal\"><span class=\"pre\">'/api/robots/{id:[0-9]+}'</span></code>, by example, explicitly sets that the “id” parameter must have a numeric format.</p> <p>When a defined route matches the requested URI then the application executes the corresponding handler.</p>   <h2 id=\"creating-a-model\">Creating a Model</h2> <p>Our API provides information about ‘robots’, these data are stored in a database. The following model allows us to access that table in an object-oriented way. We have implemented some business rules using built-in validators and simple validations. Doing this will give us the peace of mind that saved data meet the requirements of our application:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Message;\nuse Phalcon\\Mvc\\Model\\Validator\\Uniqueness;\nuse Phalcon\\Mvc\\Model\\Validator\\InclusionIn;\n\nclass Robots extends Model\n{\n    public function validation()\n    {\n        // Type must be: droid, mechanical or virtual\n        $this-&gt;validate(\n            new InclusionIn(\n                array(\n                    \"field\"  =&gt; \"type\",\n                    \"domain\" =&gt; array(\n                        \"droid\",\n                        \"mechanical\",\n                        \"virtual\"\n                    )\n                )\n            )\n        );\n\n        // Robot name must be unique\n        $this-&gt;validate(\n            new Uniqueness(\n                array(\n                    \"field\"   =&gt; \"name\",\n                    \"message\" =&gt; \"The robot name must be unique\"\n                )\n            )\n        );\n\n        // Year cannot be less than zero\n        if ($this-&gt;year &lt; 0) {\n            $this-&gt;appendMessage(new Message(\"The year cannot be less than zero\"));\n        }\n\n        // Check if any messages have been produced\n        if ($this-&gt;validationHasFailed() == true) {\n            return false;\n        }\n    }\n}\n</pre> <p>Now, we must set up a connection to be used by this model and load it within our app:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Loader;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as PdoMysql;\n\n// Use Loader() to autoload our model\n$loader = new Loader();\n\n$loader-&gt;registerDirs(\n    array(\n        __DIR__ . '/models/'\n    )\n)-&gt;register();\n\n$di = new FactoryDefault();\n\n// Set up the database service\n$di-&gt;set('db', function () {\n    return new PdoMysql(\n        array(\n            \"host\"     =&gt; \"localhost\",\n            \"username\" =&gt; \"asimov\",\n            \"password\" =&gt; \"zeroth\",\n            \"dbname\"   =&gt; \"robotics\"\n        )\n    );\n});\n\n// Create and bind the DI to the application\n$app = new Micro($di);\n</pre>   <h2 id=\"retrieving-data\">Retrieving Data</h2> <p>The first “handler” that we will implement is which by method GET returns all available robots. Let’s use PHQL to perform this simple query returning the results as JSON:</p> <pre class=\"highlight-php\" data-language=\"php\">// Retrieves all robots\n$app-&gt;get('/api/robots', function () use ($app) {\n\n    $phql = \"SELECT * FROM Robots ORDER BY name\";\n    $robots = $app-&gt;modelsManager-&gt;executeQuery($phql);\n\n    $data = array();\n    foreach ($robots as $robot) {\n        $data[] = array(\n            'id'   =&gt; $robot-&gt;id,\n            'name' =&gt; $robot-&gt;name\n        );\n    }\n\n    echo json_encode($data);\n});\n</pre> <p><a class=\"reference internal\" href=\"phql\"><em>PHQL</em></a>, allow us to write queries using a high-level, object-oriented SQL dialect that internally translates to the right SQL statements depending on the database system we are using. The clause “use” in the anonymous function allows us to pass some variables from the global to local scope easily.</p> <p>The searching by name handler would look like:</p> <pre class=\"highlight-php\" data-language=\"php\">// Searches for robots with $name in their name\n$app-&gt;get('/api/robots/search/{name}', function ($name) use ($app) {\n\n    $phql = \"SELECT * FROM Robots WHERE name LIKE :name: ORDER BY name\";\n    $robots = $app-&gt;modelsManager-&gt;executeQuery(\n        $phql,\n        array(\n            'name' =&gt; '%' . $name . '%'\n        )\n    );\n\n    $data = array();\n    foreach ($robots as $robot) {\n        $data[] = array(\n            'id'   =&gt; $robot-&gt;id,\n            'name' =&gt; $robot-&gt;name\n        );\n    }\n\n    echo json_encode($data);\n});\n</pre> <p>Searching by the field “id” it’s quite similar, in this case, we’re also notifying if the robot was found or not:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Http\\Response;\n\n// Retrieves robots based on primary key\n$app-&gt;get('/api/robots/{id:[0-9]+}', function ($id) use ($app) {\n\n    $phql = \"SELECT * FROM Robots WHERE id = :id:\";\n    $robot = $app-&gt;modelsManager-&gt;executeQuery($phql, array(\n        'id' =&gt; $id\n    ))-&gt;getFirst();\n\n    // Create a response\n    $response = new Response();\n\n    if ($robot == false) {\n        $response-&gt;setJsonContent(\n            array(\n                'status' =&gt; 'NOT-FOUND'\n            )\n        );\n    } else {\n        $response-&gt;setJsonContent(\n            array(\n                'status' =&gt; 'FOUND',\n                'data'   =&gt; array(\n                    'id'   =&gt; $robot-&gt;id,\n                    'name' =&gt; $robot-&gt;name\n                )\n            )\n        );\n    }\n\n    return $response;\n});\n</pre>   <h2 id=\"inserting-data\">Inserting Data</h2> <p>Taking the data as a JSON string inserted in the body of the request, we also use PHQL for insertion:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Http\\Response;\n\n// Adds a new robot\n$app-&gt;post('/api/robots', function () use ($app) {\n\n    $robot = $app-&gt;request-&gt;getJsonRawBody();\n\n    $phql = \"INSERT INTO Robots (name, type, year) VALUES (:name:, :type:, :year:)\";\n\n    $status = $app-&gt;modelsManager-&gt;executeQuery($phql, array(\n        'name' =&gt; $robot-&gt;name,\n        'type' =&gt; $robot-&gt;type,\n        'year' =&gt; $robot-&gt;year\n    ));\n\n    // Create a response\n    $response = new Response();\n\n    // Check if the insertion was successful\n    if ($status-&gt;success() == true) {\n\n        // Change the HTTP status\n        $response-&gt;setStatusCode(201, \"Created\");\n\n        $robot-&gt;id = $status-&gt;getModel()-&gt;id;\n\n        $response-&gt;setJsonContent(\n            array(\n                'status' =&gt; 'OK',\n                'data'   =&gt; $robot\n            )\n        );\n\n    } else {\n\n        // Change the HTTP status\n        $response-&gt;setStatusCode(409, \"Conflict\");\n\n        // Send errors to the client\n        $errors = array();\n        foreach ($status-&gt;getMessages() as $message) {\n            $errors[] = $message-&gt;getMessage();\n        }\n\n        $response-&gt;setJsonContent(\n            array(\n                'status'   =&gt; 'ERROR',\n                'messages' =&gt; $errors\n            )\n        );\n    }\n\n    return $response;\n});\n</pre>   <h2 id=\"updating-data\">Updating Data</h2> <p>The data update is similar to insertion. The “id” passed as parameter indicates what robot must be updated:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Http\\Response;\n\n// Updates robots based on primary key\n$app-&gt;put('/api/robots/{id:[0-9]+}', function ($id) use ($app) {\n\n    $robot = $app-&gt;request-&gt;getJsonRawBody();\n\n    $phql = \"UPDATE Robots SET name = :name:, type = :type:, year = :year: WHERE id = :id:\";\n    $status = $app-&gt;modelsManager-&gt;executeQuery($phql, array(\n        'id' =&gt; $id,\n        'name' =&gt; $robot-&gt;name,\n        'type' =&gt; $robot-&gt;type,\n        'year' =&gt; $robot-&gt;year\n    ));\n\n    // Create a response\n    $response = new Response();\n\n    // Check if the insertion was successful\n    if ($status-&gt;success() == true) {\n        $response-&gt;setJsonContent(\n            array(\n                'status' =&gt; 'OK'\n            )\n        );\n    } else {\n\n        // Change the HTTP status\n        $response-&gt;setStatusCode(409, \"Conflict\");\n\n        $errors = array();\n        foreach ($status-&gt;getMessages() as $message) {\n            $errors[] = $message-&gt;getMessage();\n        }\n\n        $response-&gt;setJsonContent(\n            array(\n                'status'   =&gt; 'ERROR',\n                'messages' =&gt; $errors\n            )\n        );\n    }\n\n    return $response;\n});\n</pre>   <h2 id=\"deleting-data\">Deleting Data</h2> <p>The data delete is similar to update. The “id” passed as parameter indicates what robot must be deleted:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Http\\Response;\n\n// Deletes robots based on primary key\n$app-&gt;delete('/api/robots/{id:[0-9]+}', function ($id) use ($app) {\n\n    $phql = \"DELETE FROM Robots WHERE id = :id:\";\n    $status = $app-&gt;modelsManager-&gt;executeQuery($phql, array(\n        'id' =&gt; $id\n    ));\n\n    // Create a response\n    $response = new Response();\n\n    if ($status-&gt;success() == true) {\n        $response-&gt;setJsonContent(\n            array(\n                'status' =&gt; 'OK'\n            )\n        );\n    } else {\n\n        // Change the HTTP status\n        $response-&gt;setStatusCode(409, \"Conflict\");\n\n        $errors = array();\n        foreach ($status-&gt;getMessages() as $message) {\n            $errors[] = $message-&gt;getMessage();\n        }\n\n        $response-&gt;setJsonContent(\n            array(\n                'status'   =&gt; 'ERROR',\n                'messages' =&gt; $errors\n            )\n        );\n    }\n\n    return $response;\n});\n</pre>   <h2 id=\"testing-our-application\">Testing our Application</h2> <p>Using <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/CURL\">curl</a> we’ll test every route in our application verifying its proper operation.</p> <p>Obtain all the robots:</p> <pre class=\"highlight-bash\" data-language=\"bash\">curl -i -X GET http://localhost/my-rest-api/api/robots\n\nHTTP/1.1 200 OK\nDate: Tue, 21 Jul 2015 07:05:13 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 117\nContent-Type: text/html; charset=UTF-8\n\n[{\"id\":\"1\",\"name\":\"Robotina\"},{\"id\":\"2\",\"name\":\"Astro Boy\"},{\"id\":\"3\",\"name\":\"Terminator\"}]\n</pre> <p>Search a robot by its name:</p> <pre class=\"highlight-bash\" data-language=\"bash\">curl -i -X GET http://localhost/my-rest-api/api/robots/search/Astro\n\nHTTP/1.1 200 OK\nDate: Tue, 21 Jul 2015 07:09:23 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 31\nContent-Type: text/html; charset=UTF-8\n\n[{\"id\":\"2\",\"name\":\"Astro Boy\"}]\n</pre> <p>Obtain a robot by its id:</p> <pre class=\"highlight-bash\" data-language=\"bash\">curl -i -X GET http://localhost/my-rest-api/api/robots/3\n\nHTTP/1.1 200 OK\nDate: Tue, 21 Jul 2015 07:12:18 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 56\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"FOUND\",\"data\":{\"id\":\"3\",\"name\":\"Terminator\"}}\n</pre> <p>Insert a new robot:</p> <pre class=\"highlight-bash\" data-language=\"bash\">curl -i -X POST -d '{\"name\":\"C-3PO\",\"type\":\"droid\",\"year\":1977}'\n    http://localhost/my-rest-api/api/robots\n\nHTTP/1.1 201 Created\nDate: Tue, 21 Jul 2015 07:15:09 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 75\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"OK\",\"data\":{\"name\":\"C-3PO\",\"type\":\"droid\",\"year\":1977,\"id\":\"4\"}}\n</pre> <p>Try to insert a new robot with the name of an existing robot:</p> <pre class=\"highlight-bash\" data-language=\"bash\">curl -i -X POST -d '{\"name\":\"C-3PO\",\"type\":\"droid\",\"year\":1977}'\n    http://localhost/my-rest-api/api/robots\n\nHTTP/1.1 409 Conflict\nDate: Tue, 21 Jul 2015 07:18:28 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 63\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"ERROR\",\"messages\":[\"The robot name must be unique\"]}\n</pre> <p>Or update a robot with an unknown type:</p> <pre class=\"highlight-bash\" data-language=\"bash\">curl -i -X PUT -d '{\"name\":\"ASIMO\",\"type\":\"humanoid\",\"year\":2000}'\n    http://localhost/my-rest-api/api/robots/4\n\nHTTP/1.1 409 Conflict\nDate: Tue, 21 Jul 2015 08:48:01 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 104\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"ERROR\",\"messages\":[\"Value of field 'type' must be part of\n    list: droid, mechanical, virtual\"]}\n</pre> <p>Finally, delete a robot:</p> <pre class=\"highlight-bash\" data-language=\"bash\">curl -i -X DELETE http://localhost/my-rest-api/api/robots/4\n\nHTTP/1.1 200 OK\nDate: Tue, 21 Jul 2015 08:49:29 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 15\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"OK\"}\n</pre>   <h2 id=\"conclusion\">Conclusion</h2> <p>As we have seen, develop a RESTful API with Phalcon is easy. Later in the documentation we’ll explain in detail how to use micro applications and the <a class=\"reference internal\" href=\"phql\"><em>PHQL</em></a> language.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/tutorial-rest.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/tutorial-rest.html</a>\n  </p>\n</div>\n","reference/tutorial":"<h1 id=\"tutorial-1-let-s-learn-by-example\">Tutorial 1: Let’s learn by example</h1> <p>Throughout this first tutorial, we’ll walk you through the creation of an application with a simple registration form from the ground up. We will also explain the basic aspects of the framework’s behavior. If you are interested in automatic code generation tools for Phalcon, you can check our <a class=\"reference internal\" href=\"tools\"><em>developer tools</em></a>.</p>  <h2 id=\"checking-your-installation\">Checking your installation</h2> <p>We’ll assume you have Phalcon installed already. Check your phpinfo() output for a section referencing “Phalcon” or execute the code snippet below:</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php print_r(get_loaded_extensions()); ?&gt;\n</pre> <p>The Phalcon extension should appear as part of the output:</p> <pre class=\"highlight-php\" data-language=\"php\">Array\n(\n    [0] =&gt; Core\n    [1] =&gt; libxml\n    [2] =&gt; filter\n    [3] =&gt; SPL\n    [4] =&gt; standard\n    [5] =&gt; phalcon\n    [6] =&gt; pdo_mysql\n)\n</pre>   <h2 id=\"creating-a-project\">Creating a project</h2> <p>The best way to use this guide is to follow each step in turn. You can get the complete code <a class=\"reference external\" href=\"https://github.com/phalcon/tutorial\">here</a>.</p>  <h3 id=\"file-structure\">File structure</h3> <p>Phalcon does not impose a particular file structure for application development. Due to the fact that it is loosely coupled, you can implement Phalcon powered applications with a file structure you are most comfortable using.</p> <p>For the purposes of this tutorial and as a starting point, we suggest this very simple structure:</p> <pre class=\"highlight-php\" data-language=\"php\">tutorial/\n  app/\n    controllers/\n    models/\n    views/\n  public/\n    css/\n    img/\n    js/\n</pre> <p>Note that you don’t need any “library” directory related to Phalcon. The framework is available in memory, ready for you to use.</p>   <h3 id=\"beautiful-urls\">Beautiful URLs</h3> <p>We’ll use pretty (friendly) URLs for this tutorial. Friendly URLs are better for SEO as well as being easy for users to remember. Phalcon supports rewrite modules provided by the most popular web servers. Making your application’s URLs friendly is not a requirement and you can just as easily develop without them.</p> <p>In this example we’ll use the rewrite module for Apache. Let’s create a couple of rewrite rules in the /tutorial/.htaccess file:</p> <pre class=\"highlight-apacheconf\" data-language=\"apacheconf\">#/tutorial/.htaccess\n&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine on\n    RewriteRule  ^$ public/    [L]\n    RewriteRule  ((?s).*) public/$1 [L]\n&lt;/IfModule&gt;\n</pre> <p>All requests to the project will be rewritten to the public/ directory making it the document root. This step ensures that the internal project folders remain hidden from public viewing and thus eliminates security threats of this kind.</p> <p>The second set of rules will check if the requested file exists and, if it does, it doesn’t have to be rewritten by the web server module:</p> <pre class=\"highlight-apacheconf\" data-language=\"apacheconf\">#/tutorial/public/.htaccess\n&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n&lt;/IfModule&gt;\n</pre>   <h3 id=\"bootstrap\">Bootstrap</h3> <p>The first file you need to create is the bootstrap file. This file is very important; since it serves as the base of your application, giving you control of all aspects of it. In this file you can implement initialization of components as well as application behavior.</p> <p>The tutorial/public/index.php file should look like:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Loader;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\Url as UrlProvider;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as DbAdapter;\n\ntry {\n\n    // Register an autoloader\n    $loader = new Loader();\n    $loader-&gt;registerDirs([\n        '../app/controllers/',\n        '../app/models/'\n    ])-&gt;register();\n\n    // Create a DI\n    $di = new FactoryDefault();\n\n    // Setup the view component\n    $di-&gt;set('view', function () {\n        $view = new View();\n        $view-&gt;setViewsDir('../app/views/');\n        return $view;\n    });\n\n    // Setup a base URI so that all generated URIs include the \"tutorial\" folder\n    $di-&gt;set('url', function () {\n        $url = new UrlProvider();\n        $url-&gt;setBaseUri('/tutorial/');\n        return $url;\n    });\n\n    $application = new Application($di);\n\n    // Handle the request\n    $response = $application-&gt;handle();\n\n    $response-&gt;send();\n\n} catch (\\Exception $e) {\n     echo \"Exception: \", $e-&gt;getMessage();\n}\n</pre>   <h3 id=\"autoloaders\">Autoloaders</h3> <p>The first part that we find in the bootstrap is registering an autoloader. This will be used to load classes as controllers and models in the application. For example we may register one or more directories of controllers increasing the flexibility of the application. In our example we have used the component <a class=\"reference internal\" href=\"../api/phalcon_loader\"><em>Phalcon\\Loader</em></a>.</p> <p>With it, we can load classes using various strategies but for this example we have chosen to locate classes based on predefined directories:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Loader;\n\n// ...\n\n$loader = new Loader();\n$loader-&gt;registerDirs(\n    [\n        '../app/controllers/',\n        '../app/models/'\n    ]\n)-&gt;register();\n</pre>   <h3 id=\"dependency-management\">Dependency Management</h3> <p>A very important concept that must be understood when working with Phalcon is its <a class=\"reference internal\" href=\"di\"><em>dependency injection container</em></a>. It may sound complex but is actually very simple and practical.</p> <p>A service container is a bag where we globally store the services that our application will use to function. Each time the framework requires a component, it will ask the container using an agreed upon name for the service. Since Phalcon is a highly decoupled framework, <a class=\"reference internal\" href=\"../api/phalcon_di\"><em>Phalcon\\Di</em></a> acts as glue facilitating the integration of the different components achieving their work together in a transparent manner.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Di\\FactoryDefault;\n\n// ...\n\n// Create a DI\n$di = new FactoryDefault();\n</pre> <p><a class=\"reference internal\" href=\"../api/phalcon_di_factorydefault\"><em>Phalcon\\Di\\FactoryDefault</em></a> is a variant of <a class=\"reference internal\" href=\"../api/phalcon_di\"><em>Phalcon\\Di</em></a>. To make things easier, it has registered most of the components that come with Phalcon. Thus we should not register them one by one. Later there will be no problem in replacing a factory service.</p> <p>In the next part, we register the “view” service indicating the directory where the framework will find the views files. As the views do not correspond to classes, they cannot be charged with an autoloader.</p> <p>Services can be registered in several ways, but for our tutorial we’ll use an <a class=\"reference external\" href=\"http://php.net/manual/en/functions.anonymous.php\">anonymous function</a>:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View;\n\n// ...\n\n// Setup the view component\n$di-&gt;set('view', function () {\n    $view = new View();\n    $view-&gt;setViewsDir('../app/views/');\n    return $view;\n});\n</pre> <p>Next we register a base URI so that all URIs generated by Phalcon include the “tutorial” folder we setup earlier. This will become important later on in this tutorial when we use the class <a class=\"reference internal\" href=\"../api/phalcon_tag\"><em>Phalcon\\Tag</em></a> to generate a hyperlink.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Url as UrlProvider;\n\n// ...\n\n// Setup a base URI so that all generated URIs include the \"tutorial\" folder\n$di-&gt;set('url', function () {\n    $url = new UrlProvider();\n    $url-&gt;setBaseUri('/tutorial/');\n    return $url;\n});\n</pre> <p>In the last part of this file, we find <a class=\"reference internal\" href=\"../api/phalcon_mvc_application\"><em>Phalcon\\Mvc\\Application</em></a>. Its purpose is to initialize the request environment, route the incoming request, and then dispatch any discovered actions; it aggregates any responses and returns them when the process is complete.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Application;\n\n// ...\n\n$application = new Application($di);\n\n$response = $application-&gt;handle();\n\n$response-&gt;send();\n</pre> <p>As you can see, the bootstrap file is very short and we do not need to include any additional files. We have set ourselves a flexible MVC application in less than 30 lines of code.</p>   <h3 id=\"creating-a-controller\">Creating a Controller</h3> <p>By default Phalcon will look for a controller named “Index”. It is the starting point when no controller or action has been passed in the request. The index controller (app/controllers/IndexController.php) looks like:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n\n    public function indexAction()\n    {\n        echo \"&lt;h1&gt;Hello!&lt;/h1&gt;\";\n    }\n}\n</pre> <p>The controller classes must have the suffix “Controller” and controller actions must have the suffix “Action”. If you access the application from your browser, you should see something like this:</p> <div class=\"figure align-center\"> <img alt=\"../_images/tutorial-1.png\" src=\"https://docs.phalconphp.com/en/latest/_images/tutorial-1.png\"> </div> <p>Congratulations, you’re flying with Phalcon!</p>   <h3 id=\"sending-output-to-a-view\">Sending output to a view</h3> <p>Sending output to the screen from the controller is at times necessary but not desirable as most purists in the MVC community will attest. Everything must be passed to the view that is responsible for outputting data on screen. Phalcon will look for a view with the same name as the last executed action inside a directory named as the last executed controller. In our case (app/views/index/index.phtml):</p> <pre class=\"highlight-php\" data-language=\"php\">echo \"&lt;h1&gt;Hello!&lt;/h1&gt;\";\n</pre> <p>Our controller (app/controllers/IndexController.php) now has an empty action definition:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n\n    public function indexAction()\n    {\n\n    }\n}\n</pre> <p>The browser output should remain the same. The <a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> static component is automatically created when the action execution has ended. Learn more about <a class=\"reference internal\" href=\"views\"><em>views usage here</em></a>.</p>   <h3 id=\"designing-a-sign-up-form\">Designing a sign up form</h3> <p>Now we will change the index.phtml view file, to add a link to a new controller named “signup”. The goal is to allow users to sign up within our application.</p> <pre class=\"highlight-php\" data-language=\"php\">echo \"&lt;h1&gt;Hello!&lt;/h1&gt;\";\n\necho $this-&gt;tag-&gt;linkTo(\"signup\", \"Sign Up Here!\");\n</pre> <p>The generated HTML code displays an anchor (“a”) HTML tag linking to a new controller:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;h1&gt;Hello!&lt;/h1&gt; &lt;a href=\"/tutorial/signup\"&gt;Sign Up Here!&lt;/a&gt;\n</pre> <p>To generate the tag we use the class <a class=\"reference internal\" href=\"../api/phalcon_tag\"><em>Phalcon\\Tag</em></a>. This is a utility class that allows us to build HTML tags with framework conventions in mind. As this class is a also a service registered in the DI we use <code class=\"code docutils literal\"><span class=\"pre\">$this-&gt;tag</span></code> to access it.</p> <p>A more detailed article regarding HTML generation can be <a class=\"reference internal\" href=\"tags\"><em>found here</em></a>.</p> <div class=\"figure align-center\"> <img alt=\"../_images/tutorial-2.png\" src=\"https://docs.phalconphp.com/en/latest/_images/tutorial-2.png\"> </div> <p>Here is the Signup controller (app/controllers/SignupController.php):</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass SignupController extends Controller\n{\n\n    public function indexAction()\n    {\n\n    }\n}\n</pre> <p>The empty index action gives the clean pass to a view with the form definition (app/views/signup/index.phtml):</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;h2&gt;Sign up using this form&lt;/h2&gt;\n\n&lt;?php echo $this-&gt;tag-&gt;form(\"signup/register\"); ?&gt;\n\n &lt;p&gt;\n    &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n    &lt;?php echo $this-&gt;tag-&gt;textField(\"name\") ?&gt;\n &lt;/p&gt;\n\n &lt;p&gt;\n    &lt;label for=\"email\"&gt;E-Mail&lt;/label&gt;\n    &lt;?php echo $this-&gt;tag-&gt;textField(\"email\") ?&gt;\n &lt;/p&gt;\n\n &lt;p&gt;\n    &lt;?php echo $this-&gt;tag-&gt;submitButton(\"Register\") ?&gt;\n &lt;/p&gt;\n\n&lt;/form&gt;\n</pre> <p>Viewing the form in your browser will show something like this:</p> <div class=\"figure align-center\"> <img alt=\"../_images/tutorial-3.png\" src=\"https://docs.phalconphp.com/en/latest/_images/tutorial-3.png\"> </div> <p><a class=\"reference internal\" href=\"../api/phalcon_tag\"><em>Phalcon\\Tag</em></a> also provides useful methods to build form elements.</p> <p>The <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::form()</span></code> method receives only one parameter for instance, a relative URI to a controller/action in the application.</p> <p>By clicking the “Send” button, you will notice an exception thrown from the framework, indicating that we are missing the “register” action in the controller “signup”. Our public/index.php file throws this exception:</p> <blockquote> <div>Exception: Action “register” was not found on handler “signup”</div>\n</blockquote> <p>Implementing that method will remove the exception:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass SignupController extends Controller\n{\n\n    public function indexAction()\n    {\n\n    }\n\n    public function registerAction()\n    {\n\n    }\n}\n</pre> <p>If you click the “Send” button again, you will see a blank page. The name and email input provided by the user should be stored in a database. According to MVC guidelines, database interactions must be done through models so as to ensure clean object-oriented code.</p>   <h3 id=\"creating-a-model\">Creating a Model</h3> <p>Phalcon brings the first ORM for PHP entirely written in C-language. Instead of increasing the complexity of development, it simplifies it.</p> <p>Before creating our first model, we need to create a database table outside of Phalcon to map it to. A simple table to store registered users can be defined like this:</p> <pre class=\"highlight-sql\" data-language=\"sql\">CREATE TABLE `users` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(70) NOT NULL,\n  `email` varchar(70) NOT NULL,\n  PRIMARY KEY (`id`)\n);\n</pre> <p>A model should be located in the app/models directory (app/models/Users.php). The model maps to the “users” table:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Users extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $email;\n}\n</pre>   <h3 id=\"setting-a-database-connection\">Setting a Database Connection</h3> <p>In order to be able to use a database connection and subsequently access data through our models, we need to specify it in our bootstrap process. A database connection is just another service that our application has that can be used for several components:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Loader;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Mvc\\Url as UrlProvider;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as DbAdapter;\n\ntry {\n\n    // Register an autoloader\n    $loader = new Loader();\n    $loader-&gt;registerDirs([\n        '../app/controllers/',\n        '../app/models/'\n    ])-&gt;register();\n\n    // Create a DI\n    $di = new FactoryDefault();\n\n    // Setup the database service\n    $di-&gt;set('db', function () {\n        return new DbAdapter([\n            \"host\"     =&gt; \"localhost\",\n            \"username\" =&gt; \"root\",\n            \"password\" =&gt; \"secret\",\n            \"dbname\"   =&gt; \"test_db\"\n        ]);\n    });\n\n    // Setup the view component\n    $di-&gt;set('view', function () {\n        $view = new View();\n        $view-&gt;setViewsDir('../app/views/');\n        return $view;\n    });\n\n    // Setup a base URI so that all generated URIs include the \"tutorial\" folder\n    $di-&gt;set('url', function () {\n        $url = new UrlProvider();\n        $url-&gt;setBaseUri('/tutorial/');\n        return $url;\n    });\n\n    $application = new Application($di);\n\n    // Handle the request\n    $response = $application-&gt;handle();\n\n    $response-&gt;send();\n\n} catch (\\Exception $e) {\n     echo \"Exception: \", $e-&gt;getMessage();\n}\n</pre> <p>With the correct database parameters, our models are ready to work and interact with the rest of the application.</p>   <h3 id=\"storing-data-using-models\">Storing data using models</h3> <p>Receiving data from the form and storing them in the table is the next step.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass SignupController extends Controller\n{\n\n    public function indexAction()\n    {\n\n    }\n\n    public function registerAction()\n    {\n\n        $user = new Users();\n\n        // Store and check for errors\n        $success = $user-&gt;save($this-&gt;request-&gt;getPost(), ['name', 'email']);\n\n        if ($success) {\n            echo \"Thanks for registering!\";\n        } else {\n            echo \"Sorry, the following problems were generated: \";\n            foreach ($user-&gt;getMessages() as $message) {\n                echo $message-&gt;getMessage(), \"&lt;br/&gt;\";\n            }\n        }\n\n        $this-&gt;view-&gt;disable();\n    }\n}\n</pre> <p>We then instantiate the Users class, which corresponds to a User record. The class public properties map to the fields of the record in the users table. Setting the relevant values in the new record and calling save() will store the data in the database for that record. The save() method returns a boolean value which indicates whether the storing of the data was successful or not.</p> <p>The ORM automatically escapes the input preventing SQL injections so we only need to pass the request to the save method.</p> <p>Additional validation happens automatically on fields that are defined as not null (required). If we don’t enter any of the required fields in the sign up form our screen will look like this:</p> <div class=\"figure align-center\"> <img alt=\"../_images/tutorial-4.png\" src=\"https://docs.phalconphp.com/en/latest/_images/tutorial-4.png\"> </div>    <h2 id=\"conclusion\">Conclusion</h2> <p>This is a very simple tutorial and as you can see, it’s easy to start building an application using Phalcon. The fact that Phalcon is an extension on your web server has not interfered with the ease of development or features available. We invite you to continue reading the manual so that you can discover additional features offered by Phalcon!</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/tutorial.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/tutorial.html</a>\n  </p>\n</div>\n","reference/nginx":"<h1 id=\"nginx-installation-notes\">Nginx Installation Notes</h1> <p><a class=\"reference external\" href=\"http://wiki.nginx.org/Main\">Nginx</a> is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. Unlike traditional servers, <a class=\"reference external\" href=\"http://wiki.nginx.org/Main\">Nginx</a> doesn’t rely on threads to handle requests. Instead it uses a much more scalable event-driven (asynchronous) architecture. This architecture uses small, but more importantly, predictable amounts of memory under load.</p> <p>The <a class=\"reference external\" href=\"http://php-fpm.org/\">PHP-FPM</a> (FastCGI Process Manager) is usually used to allow <a class=\"reference external\" href=\"http://wiki.nginx.org/Main\">Nginx</a> to process PHP files. Nowadays, <a class=\"reference external\" href=\"http://php-fpm.org/\">PHP-FPM</a> is bundled with any Unix PHP distribution. Phalcon + <a class=\"reference external\" href=\"http://wiki.nginx.org/Main\">Nginx</a> + <a class=\"reference external\" href=\"http://php-fpm.org/\">PHP-FPM</a> provides a powerful set of tools that offer maximum performance for your PHP applications.</p>  <h2 id=\"configuring-nginx-for-phalcon\">Configuring Nginx for Phalcon</h2> <p>The following are potential configurations you can use to setup nginx with Phalcon:</p>  <h3 id=\"basic-configuration\">Basic configuration</h3> <p>Using <code class=\"code docutils literal\"><span class=\"pre\">$_GET['_url']</span></code> as source of URIs:</p> <pre class=\"highlight-nginx\" data-language=\"nginx\">server {\n    listen      80;\n    server_name localhost.dev;\n    root        /var/www/phalcon/public;\n    index       index.php index.html index.htm;\n\n    location / {\n        try_files $uri $uri/ /index.php?_url=$uri&amp;$args;\n    }\n\n    location ~ \\.php {\n        fastcgi_pass  unix:/run/php-fpm/php-fpm.sock;\n        fastcgi_index /index.php;\n\n        include fastcgi_params;\n        fastcgi_split_path_info       ^(.+\\.php)(/.+)$;\n        fastcgi_param PATH_INFO       $fastcgi_path_info;\n        fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n</pre> <p>Using <code class=\"code docutils literal\"><span class=\"pre\">$_SERVER['REQUEST_URI']</span></code> as source of URIs:</p> <pre class=\"highlight-nginx\" data-language=\"nginx\">server {\n    listen      80;\n    server_name localhost.dev;\n    root        /var/www/phalcon/public;\n    index       index.php index.html index.htm;\n\n    location / {\n        try_files $uri $uri/ /index.php;\n    }\n\n    location ~ \\.php$ {\n        try_files     $uri =404;\n\n        fastcgi_pass  127.0.0.1:9000;\n        fastcgi_index /index.php;\n\n        include fastcgi_params;\n        fastcgi_split_path_info       ^(.+\\.php)(/.+)$;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n</pre>   <h3 id=\"dedicated-instance\">Dedicated Instance</h3> <pre class=\"highlight-nginx\" data-language=\"nginx\">server {\n    listen      80;\n    server_name localhost;\n    root        /srv/www/htdocs/phalcon-website/public;\n    index       index.php index.html index.htm;\n    charset     utf-8;\n\n    #access_log /var/log/nginx/host.access.log main;\n\n    location / {\n        try_files $uri $uri/ /index.php?_url=$uri&amp;$args;\n    }\n\n    location ~ \\.php {\n        # try_files   $uri =404;\n\n        fastcgi_pass  127.0.0.1:9000;\n        fastcgi_index /index.php;\n\n        include fastcgi_params;\n        fastcgi_split_path_info       ^(.+\\.php)(/.+)$;\n        fastcgi_param PATH_INFO       $fastcgi_path_info;\n        fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n</pre>   <h3 id=\"configuration-by-host\">Configuration by Host</h3> <p>And this second configuration allow you to have different configurations by host:</p> <pre class=\"highlight-nginx\" data-language=\"nginx\">server {\n    listen      80;\n    server_name localhost;\n    root        /var/www/$host/public;\n    index       index.php index.html index.htm;\n\n    access_log  /var/log/nginx/$host-access.log;\n    error_log   /var/log/nginx/$host-error.log error;\n\n    location / {\n        try_files $uri $uri/ /index.php?_url=$uri&amp;$args;\n    }\n\n    location ~ \\.php {\n        # try_files   $uri =404;\n\n        fastcgi_pass  127.0.0.1:9000;\n        fastcgi_index /index.php;\n\n        include fastcgi_params;\n        fastcgi_split_path_info       ^(.+\\.php)(/.+)$;\n        fastcgi_param PATH_INFO       $fastcgi_path_info;\n        fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/nginx.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/nginx.html</a>\n  </p>\n</div>\n","reference/tutorial-invo-3":"<h1 id=\"tutorial-4-using-cruds\">Tutorial 4: Using CRUDs</h1> <p>Backends usually provides forms to allow users to manipulate data. Continuing the explanation of INVO, we now address the creation of CRUDs, a very common task that Phalcon will facilitate you using forms, validations, paginators and more.</p>  <h2 id=\"working-with-the-crud\">Working with the CRUD</h2> <p>Most options that manipulate data in INVO (companies, products and types of products), were developed using a basic and common <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Create,_read,_update_and_delete\">CRUD</a> (Create, Read, Update and Delete). Each CRUD contains the following files:</p> <pre class=\"highlight-bash\" data-language=\"bash\">invo/\n    app/\n        controllers/\n            ProductsController.php\n        models/\n            Products.php\n        forms/\n            ProductsForm.php\n        views/\n            products/\n                edit.volt\n                index.volt\n                new.volt\n                search.volt\n</pre> <p>Each controller has the following actions:</p> <pre class=\"highlight-php\" data-language=\"php\">class ProductsController extends ControllerBase\n{\n    /**\n     * The start action, it shows the \"search\" view\n     */\n    public function indexAction()\n    {\n        // ...\n    }\n\n    /**\n     * Execute the \"search\" based on the criteria sent from the \"index\"\n     * Returning a paginator for the results\n     */\n    public function searchAction()\n    {\n        // ...\n    }\n\n    /**\n     * Shows the view to create a \"new\" product\n     */\n    public function newAction()\n    {\n        // ...\n    }\n\n    /**\n     * Shows the view to \"edit\" an existing product\n     */\n    public function editAction()\n    {\n        // ...\n    }\n\n    /**\n     * Creates a product based on the data entered in the \"new\" action\n     */\n    public function createAction()\n    {\n        // ...\n    }\n\n    /**\n     * Updates a product based on the data entered in the \"edit\" action\n     */\n    public function saveAction()\n    {\n        // ...\n    }\n\n    /**\n     * Deletes an existing product\n     */\n    public function deleteAction($id)\n    {\n        // ...\n    }\n}\n</pre>  <h3 id=\"the-search-form\">The Search Form</h3> <p>Every CRUD starts with a search form. This form shows each field that has the table (products), allowing the user to create a search criteria from any field. Table “products” has a relationship to the table “products_types”. In this case, we previously queried the records in this table in order to facilitate the search by that field:</p> <pre class=\"highlight-php\" data-language=\"php\">/**\n * The start action, it shows the \"search\" view\n */\npublic function indexAction()\n{\n    $this-&gt;persistent-&gt;searchParams = null;\n    $this-&gt;view-&gt;form               = new ProductsForm;\n}\n</pre> <p>An instance of the form ProductsForm (app/forms/ProductsForm.php) is passed to the view. This form defines the fields that are visible to the user:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Hidden;\nuse Phalcon\\Forms\\Element\\Select;\nuse Phalcon\\Validation\\Validator\\Email;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\nuse Phalcon\\Validation\\Validator\\Numericality;\n\nclass ProductsForm extends Form\n{\n    /**\n     * Initialize the products form\n     */\n    public function initialize($entity = null, $options = array())\n    {\n        if (!isset($options['edit'])) {\n            $element = new Text(\"id\");\n            $this-&gt;add($element-&gt;setLabel(\"Id\"));\n        } else {\n            $this-&gt;add(new Hidden(\"id\"));\n        }\n\n        $name = new Text(\"name\");\n        $name-&gt;setLabel(\"Name\");\n        $name-&gt;setFilters(array('striptags', 'string'));\n        $name-&gt;addValidators(\n            array(\n                new PresenceOf(\n                    array(\n                        'message' =&gt; 'Name is required'\n                    )\n                )\n            )\n        );\n        $this-&gt;add($name);\n\n        $type = new Select(\n            'profilesId',\n            ProductTypes::find(),\n            array(\n                'using'      =&gt; array('id', 'name'),\n                'useEmpty'   =&gt; true,\n                'emptyText'  =&gt; '...',\n                'emptyValue' =&gt; ''\n            )\n        );\n        $this-&gt;add($type);\n\n        $price = new Text(\"price\");\n        $price-&gt;setLabel(\"Price\");\n        $price-&gt;setFilters(array('float'));\n        $price-&gt;addValidators(\n            array(\n                new PresenceOf(\n                    array(\n                        'message' =&gt; 'Price is required'\n                    )\n                ),\n                new Numericality(\n                    array(\n                        'message' =&gt; 'Price is required'\n                    )\n                )\n            )\n        );\n        $this-&gt;add($price);\n    }\n}\n</pre> <p>The form is declared using an object-oriented scheme based on the elements provided by the <a class=\"reference internal\" href=\"forms\"><em>forms</em></a> component. Every element follows almost the same structure:</p> <pre class=\"highlight-php\" data-language=\"php\">// Create the element\n$name = new Text(\"name\");\n\n// Set its label\n$name-&gt;setLabel(\"Name\");\n\n// Before validating the element apply these filters\n$name-&gt;setFilters(array('striptags', 'string'));\n\n// Apply this validators\n$name-&gt;addValidators(\n    array(\n        new PresenceOf(\n            array(\n                'message' =&gt; 'Name is required'\n            )\n        )\n    )\n);\n\n// Add the element to the form\n$this-&gt;add($name);\n</pre> <p>Other elements are also used in this form:</p> <pre class=\"highlight-php\" data-language=\"php\">// Add a hidden input to the form\n$this-&gt;add(new Hidden(\"id\"));\n\n// ...\n\n// Add a HTML Select (list) to the form\n// and fill it with data from \"product_types\"\n$type = new Select(\n    'profilesId',\n    ProductTypes::find(),\n    array(\n        'using'      =&gt; array('id', 'name'),\n        'useEmpty'   =&gt; true,\n        'emptyText'  =&gt; '...',\n        'emptyValue' =&gt; ''\n    )\n);\n</pre> <p>Note that <code class=\"code docutils literal\"><span class=\"pre\">ProductTypes::find()</span></code> contains the data necessary to fill the SELECT tag using <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::select()</span></code>. Once the form is passed to the view, it can be rendered and presented to the user:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{{ form(\"products/search\") }}\n\n&lt;h2&gt;Search products&lt;/h2&gt;\n\n&lt;fieldset&gt;\n\n    {% for element in form %}\n        &lt;div class=\"control-group\"&gt;\n            {{ element.label(['class': 'control-label']) }}\n            &lt;div class=\"controls\"&gt;{{ element }}&lt;/div&gt;\n        &lt;/div&gt;\n    {% endfor %}\n\n    &lt;div class=\"control-group\"&gt;\n        {{ submit_button(\"Search\", \"class\": \"btn btn-primary\") }}\n    &lt;/div&gt;\n\n&lt;/fieldset&gt;\n</pre> <p>This produces the following HTML:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;form action=\"/invo/products/search\" method=\"post\"&gt;\n\n&lt;h2&gt;Search products&lt;/h2&gt;\n\n&lt;fieldset&gt;\n\n    &lt;div class=\"control-group\"&gt;\n        &lt;label for=\"id\" class=\"control-label\"&gt;Id&lt;/label&gt;\n        &lt;div class=\"controls\"&gt;&lt;input type=\"text\" id=\"id\" name=\"id\" /&gt;&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"control-group\"&gt;\n        &lt;label for=\"name\" class=\"control-label\"&gt;Name&lt;/label&gt;\n        &lt;div class=\"controls\"&gt;\n            &lt;input type=\"text\" id=\"name\" name=\"name\" /&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"control-group\"&gt;\n        &lt;label for=\"profilesId\" class=\"control-label\"&gt;profilesId&lt;/label&gt;\n        &lt;div class=\"controls\"&gt;\n            &lt;select id=\"profilesId\" name=\"profilesId\"&gt;\n                &lt;option value=\"\"&gt;...&lt;/option&gt;\n                &lt;option value=\"1\"&gt;Vegetables&lt;/option&gt;\n                &lt;option value=\"2\"&gt;Fruits&lt;/option&gt;\n            &lt;/select&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"control-group\"&gt;\n        &lt;label for=\"price\" class=\"control-label\"&gt;Price&lt;/label&gt;\n        &lt;div class=\"controls\"&gt;&lt;input type=\"text\" id=\"price\" name=\"price\" /&gt;&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"control-group\"&gt;\n        &lt;input type=\"submit\" value=\"Search\" class=\"btn btn-primary\" /&gt;\n    &lt;/div&gt;\n\n&lt;/fieldset&gt;\n</pre> <p>When the form is submitted, the action “search” is executed in the controller performing the search based on the data entered by the user.</p>   <h3 id=\"performing-a-search\">Performing a Search</h3> <p>The action “search” has a dual behavior. When accessed via POST, it performs a search based on the data sent from the form. But when accessed via GET it moves the current page in the paginator. To differentiate one from another HTTP method, we check it using the <a class=\"reference internal\" href=\"request\"><em>Request</em></a> component:</p> <pre class=\"highlight-php\" data-language=\"php\">/**\n * Execute the \"search\" based on the criteria sent from the \"index\"\n * Returning a paginator for the results\n */\npublic function searchAction()\n{\n    if ($this-&gt;request-&gt;isPost()) {\n        // Create the query conditions\n    } else {\n        // Paginate using the existing conditions\n    }\n\n    // ...\n}\n</pre> <p>With the help of <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_criteria\"><em>Phalcon\\Mvc\\Model\\Criteria</em></a>, we can create the search conditions intelligently based on the data types and values sent from the form:</p> <pre class=\"highlight-php\" data-language=\"php\">$query = Criteria::fromInput($this-&gt;di, \"Products\", $this-&gt;request-&gt;getPost());\n</pre> <p>This method verifies which values are different from “” (empty string) and null and takes them into account to create the search criteria:</p> <ul class=\"simple\"> <li>If the field data type is text or similar (char, varchar, text, etc.) It uses an SQL “like” operator to filter the results.</li> <li>If the data type is not text or similar, it’ll use the operator “=”.</li> </ul> <p>Additionally, “Criteria” ignores all the <code class=\"code docutils literal\"><span class=\"pre\">$_POST</span></code> variables that do not match any field in the table. Values are automatically escaped using “bound parameters”.</p> <p>Now, we store the produced parameters in the controller’s session bag:</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;persistent-&gt;searchParams = $query-&gt;getParams();\n</pre> <p>A session bag, is a special attribute in a controller that persists between requests using the session service. When accessed, this attribute injects a <a class=\"reference internal\" href=\"../api/phalcon_session_bag\"><em>Phalcon\\Session\\Bag</em></a> instance that is independent in each controller.</p> <p>Then, based on the built params we perform the query:</p> <pre class=\"highlight-php\" data-language=\"php\">$products = Products::find($parameters);\nif (count($products) == 0) {\n    $this-&gt;flash-&gt;notice(\"The search did not found any products\");\n    return $this-&gt;forward(\"products/index\");\n}\n</pre> <p>If the search doesn’t return any product, we forward the user to the index action again. Let’s pretend the search returned results, then we create a paginator to navigate easily through them:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Paginator\\Adapter\\Model as Paginator;\n\n// ...\n\n$paginator = new Paginator(\n    array(\n        \"data\"  =&gt; $products,  // Data to paginate\n        \"limit\" =&gt; 5,          // Rows per page\n        \"page\"  =&gt; $numberPage // Active page\n    )\n);\n\n// Get active page in the paginator\n$page = $paginator-&gt;getPaginate();\n</pre> <p>Finally we pass the returned page to view:</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;view-&gt;page = $page;\n</pre> <p>In the view (app/views/products/search.volt), we traverse the results corresponding to the current page, showing every row in the current page to the user:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{% for product in page.items %}\n  {% if loop.first %}\n    &lt;table&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Id&lt;/th&gt;\n          &lt;th&gt;Product Type&lt;/th&gt;\n          &lt;th&gt;Name&lt;/th&gt;\n          &lt;th&gt;Price&lt;/th&gt;\n          &lt;th&gt;Active&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n    &lt;tbody&gt;\n  {% endif %}\n  &lt;tr&gt;\n    &lt;td&gt;{{ product.id }}&lt;/td&gt;\n    &lt;td&gt;{{ product.getProductTypes().name }}&lt;/td&gt;\n    &lt;td&gt;{{ product.name }}&lt;/td&gt;\n    &lt;td&gt;{{ \"%.2f\"|format(product.price) }}&lt;/td&gt;\n    &lt;td&gt;{{ product.getActiveDetail() }}&lt;/td&gt;\n    &lt;td width=\"7%\"&gt;{{ link_to(\"products/edit/\" ~ product.id, 'Edit') }}&lt;/td&gt;\n    &lt;td width=\"7%\"&gt;{{ link_to(\"products/delete/\" ~ product.id, 'Delete') }}&lt;/td&gt;\n  &lt;/tr&gt;\n  {% if loop.last %}\n  &lt;/tbody&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td colspan=\"7\"&gt;\n          &lt;div&gt;\n            {{ link_to(\"products/search\", 'First') }}\n            {{ link_to(\"products/search?page=\" ~ page.before, 'Previous') }}\n            {{ link_to(\"products/search?page=\" ~ page.next, 'Next') }}\n            {{ link_to(\"products/search?page=\" ~ page.last, 'Last') }}\n            &lt;span class=\"help-inline\"&gt;{{ page.current }} of {{ page.total_pages }}&lt;/span&gt;\n          &lt;/div&gt;\n        &lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n  {% endif %}\n{% else %}\n  No products are recorded\n{% endfor %}\n</pre> <p>There are many things in the above example that worth detailing. First of all, active items in the current page are traversed using a Volt’s ‘for’. Volt provides a simpler syntax for a PHP ‘foreach’.</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{% for product in page.items %}\n</pre> <p>Which in PHP is the same as:</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php foreach ($page-&gt;items as $product) { ?&gt;\n</pre> <p>The whole ‘for’ block provides the following:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{% for product in page.items %}\n  {% if loop.first %}\n    Executed before the first product in the loop\n  {% endif %}\n    Executed for every product of page.items\n  {% if loop.last %}\n    Executed after the last product is loop\n  {% endif %}\n{% else %}\n  Executed if page.items does not have any products\n{% endfor %}\n</pre> <p>Now you can go back to the view and find out what every block is doing. Every field in “product” is printed accordingly:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">&lt;tr&gt;\n  &lt;td&gt;{{ product.id }}&lt;/td&gt;\n  &lt;td&gt;{{ product.productTypes.name }}&lt;/td&gt;\n  &lt;td&gt;{{ product.name }}&lt;/td&gt;\n  &lt;td&gt;{{ \"%.2f\"|format(product.price) }}&lt;/td&gt;\n  &lt;td&gt;{{ product.getActiveDetail() }}&lt;/td&gt;\n  &lt;td width=\"7%\"&gt;{{ link_to(\"products/edit/\" ~ product.id, 'Edit') }}&lt;/td&gt;\n  &lt;td width=\"7%\"&gt;{{ link_to(\"products/delete/\" ~ product.id, 'Delete') }}&lt;/td&gt;\n&lt;/tr&gt;\n</pre> <p>As we seen before using product.id is the same as in PHP as doing: <code class=\"code docutils literal\"><span class=\"pre\">$product-&gt;id</span></code>, we made the same with product.name and so on. Other fields are rendered differently, for instance, let’s focus in product.productTypes.name. To understand this part, we have to check the model Products (app/models/Products.php):</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\n/**\n * Products\n */\nclass Products extends Model\n{\n    // ...\n\n    /**\n     * Products initializer\n     */\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'product_types_id',\n            'ProductTypes',\n            'id',\n            array(\n                'reusable' =&gt; true\n            )\n        );\n    }\n\n    // ...\n}\n</pre> <p>A model, can have a method called “initialize”, this method is called once per request and it serves the ORM to initialize a model. In this case, “Products” is initialized by defining that this model has a one-to-many relationship to another model called “ProductTypes”.</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;belongsTo(\n    'product_types_id',\n    'ProductTypes',\n    'id',\n    array(\n        'reusable' =&gt; true\n    )\n);\n</pre> <p>Which means, the local attribute “product_types_id” in “Products” has an one-to-many relation to the model “ProductTypes” in its attribute “id”. By defining this relation we can access the name of the product type by using:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">&lt;td&gt;{{ product.productTypes.name }}&lt;/td&gt;\n</pre> <p>The field “price” is printed by its formatted using a Volt filter:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">&lt;td&gt;{{ \"%.2f\"|format(product.price) }}&lt;/td&gt;\n</pre> <p>What in PHP would be:</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php echo sprintf(\"%.2f\", $product-&gt;price) ?&gt;\n</pre> <p>Printing whether the product is active or not uses a helper implemented in the model:</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;td&gt;{{ product.getActiveDetail() }}&lt;/td&gt;\n</pre> <p>This method is defined in the model.</p>   <h3 id=\"creating-and-updating-records\">Creating and Updating Records</h3> <p>Now let’s see how the CRUD creates and updates records. From the “new” and “edit” views the data entered by the user are sent to the actions “create” and “save” that perform actions of “creating” and “updating” products respectively.</p> <p>In the creation case, we recover the data submitted and assign them to a new “products” instance:</p> <pre class=\"highlight-php\" data-language=\"php\">/**\n * Creates a product based on the data entered in the \"new\" action\n */\npublic function createAction()\n{\n    if (!$this-&gt;request-&gt;isPost()) {\n        return $this-&gt;forward(\"products/index\");\n    }\n\n    $form    = new ProductsForm;\n    $product = new Products();\n\n    $product-&gt;id               = $this-&gt;request-&gt;getPost(\"id\", \"int\");\n    $product-&gt;product_types_id = $this-&gt;request-&gt;getPost(\"product_types_id\", \"int\");\n    $product-&gt;name             = $this-&gt;request-&gt;getPost(\"name\", \"striptags\");\n    $product-&gt;price            = $this-&gt;request-&gt;getPost(\"price\", \"double\");\n    $product-&gt;active           = $this-&gt;request-&gt;getPost(\"active\");\n\n    // ...\n}\n</pre> <p>Remember the filters we defined in the Products form? Data is filtered before being assigned to the object <code class=\"code docutils literal\"><span class=\"pre\">$product</span></code>. This filtering is optional, also the ORM escapes the input data and performs additional casting according to the column types:</p> <pre class=\"highlight-php\" data-language=\"php\">// ...\n\n$name = new Text(\"name\");\n$name-&gt;setLabel(\"Name\");\n\n// Filters for name\n$name-&gt;setFilters(array('striptags', 'string'));\n\n// Validators for name\n$name-&gt;addValidators(\n    array(\n        new PresenceOf(\n            array(\n                'message' =&gt; 'Name is required'\n            )\n        )\n    )\n);\n\n$this-&gt;add($name);\n</pre> <p>When saving we’ll know whether the data conforms to the business rules and validations implemented in the form ProductsForm (app/forms/ProductsForm.php):</p> <pre class=\"highlight-php\" data-language=\"php\">// ...\n\n$form    = new ProductsForm;\n$product = new Products();\n\n// Validate the input\n$data = $this-&gt;request-&gt;getPost();\nif (!$form-&gt;isValid($data, $product)) {\n    foreach ($form-&gt;getMessages() as $message) {\n        $this-&gt;flash-&gt;error($message);\n    }\n    return $this-&gt;forward('products/new');\n}\n</pre> <p>Finally, if the form does not return any validation message we can save the product instance:</p> <pre class=\"highlight-php\" data-language=\"php\">// ...\n\nif ($product-&gt;save() == false) {\n    foreach ($product-&gt;getMessages() as $message) {\n        $this-&gt;flash-&gt;error($message);\n    }\n\n    return $this-&gt;forward('products/new');\n}\n\n$form-&gt;clear();\n\n$this-&gt;flash-&gt;success(\"Product was created successfully\");\nreturn $this-&gt;forward(\"products/index\");\n</pre> <p>Now, in the case of product updating, first we must present to the user the data that is currently in the edited record:</p> <pre class=\"highlight-php\" data-language=\"php\">/**\n * Edits a product based on its id\n */\npublic function editAction($id)\n{\n    if (!$this-&gt;request-&gt;isPost()) {\n\n        $product = Products::findFirstById($id);\n        if (!$product) {\n            $this-&gt;flash-&gt;error(\"Product was not found\");\n\n            return $this-&gt;forward(\"products/index\");\n        }\n\n        $this-&gt;view-&gt;form = new ProductsForm($product, array('edit' =&gt; true));\n    }\n}\n</pre> <p>The data found is bound to the form passing the model as first parameter. Thanks to this, the user can change any value and then sent it back to the database through to the “save” action:</p> <pre class=\"highlight-php\" data-language=\"php\">/**\n * Updates a product based on the data entered in the \"edit\" action\n */\npublic function saveAction()\n{\n    if (!$this-&gt;request-&gt;isPost()) {\n        return $this-&gt;forward(\"products/index\");\n    }\n\n    $id = $this-&gt;request-&gt;getPost(\"id\", \"int\");\n\n    $product = Products::findFirstById($id);\n    if (!$product) {\n        $this-&gt;flash-&gt;error(\"Product does not exist\");\n\n        return $this-&gt;forward(\"products/index\");\n    }\n\n    $form = new ProductsForm;\n\n    $data = $this-&gt;request-&gt;getPost();\n    if (!$form-&gt;isValid($data, $product)) {\n        foreach ($form-&gt;getMessages() as $message) {\n            $this-&gt;flash-&gt;error($message);\n        }\n\n        return $this-&gt;forward('products/new');\n    }\n\n    if ($product-&gt;save() == false) {\n        foreach ($product-&gt;getMessages() as $message) {\n            $this-&gt;flash-&gt;error($message);\n        }\n\n        return $this-&gt;forward('products/new');\n    }\n\n    $form-&gt;clear();\n\n    $this-&gt;flash-&gt;success(\"Product was updated successfully\");\n    return $this-&gt;forward(\"products/index\");\n}\n</pre> <p>We have seen how Phalcon lets you create forms and bind data from a database in a structured way. In next chapter, we will see how to add custom HTML elements like a menu.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/tutorial-invo-3.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/tutorial-invo-3.html</a>\n  </p>\n</div>\n","reference/di":"<h1 id=\"dependency-injection-service-location\">Dependency Injection/Service Location</h1> <p>The following example is a bit lengthy, but it attempts to explain why Phalcon uses service location and dependency injection. First, let’s pretend we are developing a component called SomeComponent. This performs a task that is not important now. Our component has some dependency that is a connection to a database.</p> <p>In this first example, the connection is created inside the component. This approach is impractical; due to the fact we cannot change the connection parameters or the type of database system because the component only works as created.</p> <pre class=\"highlight-php\" data-language=\"php\">class SomeComponent\n{\n    /**\n     * The instantiation of the connection is hardcoded inside\n     * the component, therefore it's difficult replace it externally\n     * or change its behavior\n     */\n    public function someDbTask()\n    {\n        $connection = new Connection(\n            array(\n                \"host\"     =&gt; \"localhost\",\n                \"username\" =&gt; \"root\",\n                \"password\" =&gt; \"secret\",\n                \"dbname\"   =&gt; \"invo\"\n            )\n        );\n\n        // ...\n    }\n}\n\n$some = new SomeComponent();\n$some-&gt;someDbTask();\n</pre> <p>To solve this, we have created a setter that injects the dependency externally before using it. For now, this seems to be a good solution:</p> <pre class=\"highlight-php\" data-language=\"php\">class SomeComponent\n{\n    protected $_connection;\n\n    /**\n     * Sets the connection externally\n     */\n    public function setConnection($connection)\n    {\n        $this-&gt;_connection = $connection;\n    }\n\n    public function someDbTask()\n    {\n        $connection = $this-&gt;_connection;\n\n        // ...\n    }\n}\n\n$some = new SomeComponent();\n\n// Create the connection\n$connection = new Connection(\n    array(\n        \"host\"     =&gt; \"localhost\",\n        \"username\" =&gt; \"root\",\n        \"password\" =&gt; \"secret\",\n        \"dbname\"   =&gt; \"invo\"\n    )\n);\n\n// Inject the connection in the component\n$some-&gt;setConnection($connection);\n\n$some-&gt;someDbTask();\n</pre> <p>Now consider that we use this component in different parts of the application and then we will need to create the connection several times before passing it to the component. Using some kind of global registry where we obtain the connection instance and not have to create it again and again could solve this:</p> <pre class=\"highlight-php\" data-language=\"php\">class Registry\n{\n    /**\n     * Returns the connection\n     */\n    public static function getConnection()\n    {\n        return new Connection(\n            array(\n                \"host\"     =&gt; \"localhost\",\n                \"username\" =&gt; \"root\",\n                \"password\" =&gt; \"secret\",\n                \"dbname\"   =&gt; \"invo\"\n            )\n        );\n    }\n}\n\nclass SomeComponent\n{\n    protected $_connection;\n\n    /**\n     * Sets the connection externally\n     */\n    public function setConnection($connection)\n    {\n        $this-&gt;_connection = $connection;\n    }\n\n    public function someDbTask()\n    {\n        $connection = $this-&gt;_connection;\n\n        // ...\n    }\n}\n\n$some = new SomeComponent();\n\n// Pass the connection defined in the registry\n$some-&gt;setConnection(Registry::getConnection());\n\n$some-&gt;someDbTask();\n</pre> <p>Now, let’s imagine that we must implement two methods in the component, the first always needs to create a new connection and the second always needs to use a shared connection:</p> <pre class=\"highlight-php\" data-language=\"php\">class Registry\n{\n    protected static $_connection;\n\n    /**\n     * Creates a connection\n     */\n    protected static function _createConnection()\n    {\n        return new Connection(\n            array(\n                \"host\"     =&gt; \"localhost\",\n                \"username\" =&gt; \"root\",\n                \"password\" =&gt; \"secret\",\n                \"dbname\"   =&gt; \"invo\"\n            )\n        );\n    }\n\n    /**\n     * Creates a connection only once and returns it\n     */\n    public static function getSharedConnection()\n    {\n        if (self::$_connection===null) {\n            $connection = self::_createConnection();\n            self::$_connection = $connection;\n        }\n\n        return self::$_connection;\n    }\n\n    /**\n     * Always returns a new connection\n     */\n    public static function getNewConnection()\n    {\n        return self::_createConnection();\n    }\n}\n\nclass SomeComponent\n{\n    protected $_connection;\n\n    /**\n     * Sets the connection externally\n     */\n    public function setConnection($connection)\n    {\n        $this-&gt;_connection = $connection;\n    }\n\n    /**\n     * This method always needs the shared connection\n     */\n    public function someDbTask()\n    {\n        $connection = $this-&gt;_connection;\n\n        // ...\n    }\n\n    /**\n     * This method always needs a new connection\n     */\n    public function someOtherDbTask($connection)\n    {\n\n    }\n}\n\n$some = new SomeComponent();\n\n// This injects the shared connection\n$some-&gt;setConnection(Registry::getSharedConnection());\n\n$some-&gt;someDbTask();\n\n// Here, we always pass a new connection as parameter\n$some-&gt;someOtherDbTask(Registry::getNewConnection());\n</pre> <p>So far we have seen how dependency injection solved our problems. Passing dependencies as arguments instead of creating them internally in the code makes our application more maintainable and decoupled. However, in the long-term, this form of dependency injection has some disadvantages.</p> <p>For instance, if the component has many dependencies, we will need to create multiple setter arguments to pass the dependencies or create a constructor that pass them with many arguments, additionally creating dependencies before using the component, every time, makes our code not as maintainable as we would like:</p> <pre class=\"highlight-php\" data-language=\"php\">// Create the dependencies or retrieve them from the registry\n$connection = new Connection();\n$session    = new Session();\n$fileSystem = new FileSystem();\n$filter     = new Filter();\n$selector   = new Selector();\n\n// Pass them as constructor parameters\n$some = new SomeComponent($connection, $session, $fileSystem, $filter, $selector);\n\n// ... Or using setters\n\n$some-&gt;setConnection($connection);\n$some-&gt;setSession($session);\n$some-&gt;setFileSystem($fileSystem);\n$some-&gt;setFilter($filter);\n$some-&gt;setSelector($selector);\n</pre> <p>Think if we had to create this object in many parts of our application. In the future, if we do not require any of the dependencies, we need to go through the entire code base to remove the parameter in any constructor or setter where we injected the code. To solve this, we return again to a global registry to create the component. However, it adds a new layer of abstraction before creating the object:</p> <pre class=\"highlight-php\" data-language=\"php\">class SomeComponent\n{\n    // ...\n\n    /**\n     * Define a factory method to create SomeComponent instances injecting its dependencies\n     */\n    public static function factory()\n    {\n        $connection = new Connection();\n        $session    = new Session();\n        $fileSystem = new FileSystem();\n        $filter     = new Filter();\n        $selector   = new Selector();\n\n        return new self($connection, $session, $fileSystem, $filter, $selector);\n    }\n}\n</pre> <p>Now we find ourselves back where we started, we are again building the dependencies inside of the component! We must find a solution that keeps us from repeatedly falling into bad practices.</p> <p>A practical and elegant way to solve these problems is using a container for dependencies. The containers act as the global registry that we saw earlier. Using the container for dependencies as a bridge to obtain the dependencies allows us to reduce the complexity of our component:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Di;\n\nclass SomeComponent\n{\n    protected $_di;\n\n    public function __construct($di)\n    {\n        $this-&gt;_di = $di;\n    }\n\n    public function someDbTask()\n    {\n        // Get the connection service\n        // Always returns a new connection\n        $connection = $this-&gt;_di-&gt;get('db');\n    }\n\n    public function someOtherDbTask()\n    {\n        // Get a shared connection service,\n        // this will return the same connection every time\n        $connection = $this-&gt;_di-&gt;getShared('db');\n\n        // This method also requires an input filtering service\n        $filter = $this-&gt;_di-&gt;get('filter');\n    }\n}\n\n$di = new Di();\n\n// Register a \"db\" service in the container\n$di-&gt;set('db', function () {\n    return new Connection(\n        array(\n            \"host\"     =&gt; \"localhost\",\n            \"username\" =&gt; \"root\",\n            \"password\" =&gt; \"secret\",\n            \"dbname\"   =&gt; \"invo\"\n        )\n    );\n});\n\n// Register a \"filter\" service in the container\n$di-&gt;set('filter', function () {\n    return new Filter();\n});\n\n// Register a \"session\" service in the container\n$di-&gt;set('session', function () {\n    return new Session();\n});\n\n// Pass the service container as unique parameter\n$some = new SomeComponent($di);\n\n$some-&gt;someDbTask();\n</pre> <p>The component can now simply access the service it requires when it needs it, if it does not require a service it is not even initialized, saving resources. The component is now highly decoupled. For example, we can replace the manner in which connections are created, their behavior or any other aspect of them and that would not affect the component.</p>  <h2 id=\"our-approach\">Our approach</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_di\"><em>Phalcon\\Di</em></a> is a component implementing Dependency Injection and Location of services and it’s itself a container for them.</p> <p>Since Phalcon is highly decoupled, <a class=\"reference internal\" href=\"../api/phalcon_di\"><em>Phalcon\\Di</em></a> is essential to integrate the different components of the framework. The developer can also use this component to inject dependencies and manage global instances of the different classes used in the application.</p> <p>Basically, this component implements the <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Inversion_of_control\">Inversion of Control</a> pattern. Applying this, the objects do not receive their dependencies using setters or constructors, but requesting a service dependency injector. This reduces the overall complexity since there is only one way to get the required dependencies within a component.</p> <p>Additionally, this pattern increases testability in the code, thus making it less prone to errors.</p>   <h2 id=\"registering-services-in-the-container\">Registering services in the Container</h2> <p>The framework itself or the developer can register services. When a component A requires component B (or an instance of its class) to operate, it can request component B from the container, rather than creating a new instance component B.</p> <p>This way of working gives us many advantages:</p> <ul class=\"simple\"> <li>We can easily replace a component with one created by ourselves or a third party.</li> <li>We have full control of the object initialization, allowing us to set these objects, as needed before delivering them to components.</li> <li>We can get global instances of components in a structured and unified way.</li> </ul> <p>Services can be registered using several types of definitions:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Http\\Request;\n\n// Create the Dependency Injector Container\n$di = new Phalcon\\Di();\n\n// By its class name\n$di-&gt;set(\"request\", 'Phalcon\\Http\\Request');\n\n// Using an anonymous function, the instance will be lazy loaded\n$di-&gt;set(\"request\", function () {\n    return new Request();\n});\n\n// Registering an instance directly\n$di-&gt;set(\"request\", new Request());\n\n// Using an array definition\n$di-&gt;set(\n    \"request\",\n    array(\n        \"className\" =&gt; 'Phalcon\\Http\\Request'\n    )\n);\n</pre> <p>The array syntax is also allowed to register services:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Http\\Request;\n\n// Create the Dependency Injector Container\n$di = new Phalcon\\Di();\n\n// By its class name\n$di[\"request\"] = 'Phalcon\\Http\\Request';\n\n// Using an anonymous function, the instance will be lazy loaded\n$di[\"request\"] = function () {\n    return new Request();\n};\n\n// Registering an instance directly\n$di[\"request\"] = new Request();\n\n// Using an array definition\n$di[\"request\"] = array(\n    \"className\" =&gt; 'Phalcon\\Http\\Request'\n);\n</pre> <p>In the examples above, when the framework needs to access the request data, it will ask for the service identified as ‘request’ in the container. The container in turn will return an instance of the required service. A developer might eventually replace a component when he/she needs.</p> <p>Each of the methods (demonstrated in the examples above) used to set/register a service has advantages and disadvantages. It is up to the developer and the particular requirements that will designate which one is used.</p> <p>Setting a service by a string is simple, but lacks flexibility. Setting services using an array offers a lot more flexibility, but makes the code more complicated. The lambda function is a good balance between the two, but could lead to more maintenance than one would expect.</p> <p><a class=\"reference internal\" href=\"../api/phalcon_di\"><em>Phalcon\\Di</em></a> offers lazy loading for every service it stores. Unless the developer chooses to instantiate an object directly and store it in the container, any object stored in it (via array, string, etc.) will be lazy loaded i.e. instantiated only when requested.</p>  <h3 id=\"simple-registration\">Simple Registration</h3> <p>As seen before, there are several ways to register services. These we call simple:</p>  <h4 id=\"string\">String</h4> <p>This type expects the name of a valid class, returning an object of the specified class, if the class is not loaded it will be instantiated using an auto-loader. This type of definition does not allow to specify arguments for the class constructor or parameters:</p> <pre class=\"highlight-php\" data-language=\"php\">// Return new Phalcon\\Http\\Request();\n$di-&gt;set('request', 'Phalcon\\Http\\Request');\n</pre>   <h4 id=\"class-instances\">Class instances</h4> <p>This type expects an object. Due to the fact that object does not need to be resolved as it is already an object, one could say that it is not really a dependency injection, however it is useful if you want to force the returned dependency to always be the same object/value:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Http\\Request;\n\n// Return new Phalcon\\Http\\Request();\n$di-&gt;set('request', new Request());\n</pre>   <h4 id=\"closures-anonymous-functions\">Closures/Anonymous functions</h4> <p>This method offers greater freedom to build the dependency as desired, however, it is difficult to change some of the parameters externally without having to completely change the definition of dependency:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Adapter\\Pdo\\Mysql as PdoMysql;\n\n$di-&gt;set(\"db\", function () {\n    return new PdoMysql(\n        array(\n            \"host\"     =&gt; \"localhost\",\n            \"username\" =&gt; \"root\",\n            \"password\" =&gt; \"secret\",\n            \"dbname\"   =&gt; \"blog\"\n        )\n    );\n});\n</pre> <p>Some of the limitations can be overcome by passing additional variables to the closure’s environment:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Adapter\\Pdo\\Mysql as PdoMysql;\n\n// Using the $config variable in the current scope\n$di-&gt;set(\"db\", function () use ($config) {\n    return new PdoMysql(\n        array(\n            \"host\"     =&gt; $config-&gt;host,\n            \"username\" =&gt; $config-&gt;username,\n            \"password\" =&gt; $config-&gt;password,\n            \"dbname\"   =&gt; $config-&gt;name\n        )\n    );\n});\n</pre>    <h3 id=\"complex-registration\">Complex Registration</h3> <p>If it is required to change the definition of a service without instantiating/resolving the service, then, we need to define the services using the array syntax. Define a service using an array definition can be a little more verbose:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Logger\\Adapter\\File as LoggerFile;\n\n// Register a service 'logger' with a class name and its parameters\n$di-&gt;set('logger', array(\n    'className' =&gt; 'Phalcon\\Logger\\Adapter\\File',\n    'arguments' =&gt; array(\n        array(\n            'type'  =&gt; 'parameter',\n            'value' =&gt; '../apps/logs/error.log'\n        )\n    )\n));\n\n// Using an anonymous function\n$di-&gt;set('logger', function () {\n    return new LoggerFile('../apps/logs/error.log');\n});\n</pre> <p>Both service registrations above produce the same result. The array definition however, allows for alteration of the service parameters if needed:</p> <pre class=\"highlight-php\" data-language=\"php\">// Change the service class name\n$di-&gt;getService('logger')-&gt;setClassName('MyCustomLogger');\n\n// Change the first parameter without instantiating the logger\n$di-&gt;getService('logger')-&gt;setParameter(0, array(\n    'type'  =&gt; 'parameter',\n    'value' =&gt; '../apps/logs/error.log'\n));\n</pre> <p>In addition by using the array syntax you can use three types of dependency injection:</p>  <h4 id=\"constructor-injection\">Constructor Injection</h4> <p>This injection type passes the dependencies/arguments to the class constructor. Let’s pretend we have the following component:</p> <pre class=\"highlight-php\" data-language=\"php\">namespace SomeApp;\n\nuse Phalcon\\Http\\Response;\n\nclass SomeComponent\n{\n    protected $_response;\n\n    protected $_someFlag;\n\n    public function __construct(Response $response, $someFlag)\n    {\n        $this-&gt;_response = $response;\n        $this-&gt;_someFlag = $someFlag;\n    }\n}\n</pre> <p>The service can be registered this way:</p> <pre class=\"highlight-php\" data-language=\"php\">$di-&gt;set('response', array(\n    'className' =&gt; 'Phalcon\\Http\\Response'\n));\n\n$di-&gt;set('someComponent', array(\n    'className' =&gt; 'SomeApp\\SomeComponent',\n    'arguments' =&gt; array(\n        array('type' =&gt; 'service', 'name' =&gt; 'response'),\n        array('type' =&gt; 'parameter', 'value' =&gt; true)\n    )\n));\n</pre> <p>The service “response” (<a class=\"reference internal\" href=\"../api/phalcon_http_response\"><em>Phalcon\\Http\\Response</em></a>) is resolved to be passed as the first argument of the constructor, while the second is a boolean value (true) that is passed as it is.</p>   <h4 id=\"setter-injection\">Setter Injection</h4> <p>Classes may have setters to inject optional dependencies, our previous class can be changed to accept the dependencies with setters:</p> <pre class=\"highlight-php\" data-language=\"php\">namespace SomeApp;\n\nuse Phalcon\\Http\\Response;\n\nclass SomeComponent\n{\n    protected $_response;\n\n    protected $_someFlag;\n\n    public function setResponse(Response $response)\n    {\n        $this-&gt;_response = $response;\n    }\n\n    public function setFlag($someFlag)\n    {\n        $this-&gt;_someFlag = $someFlag;\n    }\n}\n</pre> <p>A service with setter injection can be registered as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">$di-&gt;set('response', array(\n    'className' =&gt; 'Phalcon\\Http\\Response'\n));\n\n$di-&gt;set(\n    'someComponent',\n    array(\n        'className' =&gt; 'SomeApp\\SomeComponent',\n        'calls'     =&gt; array(\n            array(\n                'method'    =&gt; 'setResponse',\n                'arguments' =&gt; array(\n                    array(\n                        'type' =&gt; 'service',\n                        'name' =&gt; 'response'\n                    )\n                )\n            ),\n            array(\n                'method'    =&gt; 'setFlag',\n                'arguments' =&gt; array(\n                    array(\n                        'type'  =&gt; 'parameter',\n                        'value' =&gt; true\n                    )\n                )\n            )\n        )\n    )\n);\n</pre>   <h4 id=\"properties-injection\">Properties Injection</h4> <p>A less common strategy is to inject dependencies or parameters directly into public attributes of the class:</p> <pre class=\"highlight-php\" data-language=\"php\">namespace SomeApp;\n\nuse Phalcon\\Http\\Response;\n\nclass SomeComponent\n{\n    public $response;\n\n    public $someFlag;\n}\n</pre> <p>A service with properties injection can be registered as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">$di-&gt;set(\n    'response',\n    array(\n        'className' =&gt; 'Phalcon\\Http\\Response'\n    )\n);\n\n$di-&gt;set(\n    'someComponent',\n    array(\n        'className'  =&gt; 'SomeApp\\SomeComponent',\n        'properties' =&gt; array(\n            array(\n                'name'  =&gt; 'response',\n                'value' =&gt; array(\n                    'type' =&gt; 'service',\n                    'name' =&gt; 'response'\n                )\n            ),\n            array(\n                'name'  =&gt; 'someFlag',\n                'value' =&gt; array(\n                    'type'  =&gt; 'parameter',\n                    'value' =&gt; true\n                )\n            )\n        )\n    )\n);\n</pre> <p>Supported parameter types include the following:</p> <table class=\"docutils\"> <colgroup> <col width=\"8%\"> <col width=\"35%\"> <col width=\"57%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Type</th> <th class=\"head\">Description</th> <th class=\"head\">Example</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>parameter</td> <td>Represents a literal value to be passed as parameter</td> <td><code class=\"code docutils literal\"><span class=\"pre\">array('type'</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">'parameter',</span> <span class=\"pre\">'value'</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">1234)</span></code></td> </tr> <tr class=\"row-odd\">\n<td>service</td> <td>Represents another service in the service container</td> <td><code class=\"code docutils literal\"><span class=\"pre\">array('type'</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">'service',</span> <span class=\"pre\">'name'</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">'request')</span></code></td> </tr> <tr class=\"row-even\">\n<td>instance</td> <td>Represents an object that must be built dynamically</td> <td><code class=\"code docutils literal\"><span class=\"pre\">array('type'</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">'instance',</span> <span class=\"pre\">'className'</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">'DateTime',</span> <span class=\"pre\">'arguments'</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">array('now'))</span></code></td> </tr> </tbody> </table> <p>Resolving a service whose definition is complex may be slightly slower than simple definitions seen previously. However, these provide a more robust approach to define and inject services.</p> <p>Mixing different types of definitions is allowed, everyone can decide what is the most appropriate way to register the services according to the application needs.</p>     <h2 id=\"resolving-services\">Resolving Services</h2> <p>Obtaining a service from the container is a matter of simply calling the “get” method. A new instance of the service will be returned:</p> <pre class=\"highlight-php\" data-language=\"php\">$request = $di-&gt;get(\"request\");\n</pre> <p>Or by calling through the magic method:</p> <pre class=\"highlight-php\" data-language=\"php\">$request = $di-&gt;getRequest();\n</pre> <p>Or using the array-access syntax:</p> <pre class=\"highlight-php\" data-language=\"php\">$request = $di['request'];\n</pre> <p>Arguments can be passed to the constructor by adding an array parameter to the method “get”:</p> <pre class=\"highlight-php\" data-language=\"php\">// new MyComponent(\"some-parameter\", \"other\")\n$component = $di-&gt;get(\"MyComponent\", array(\"some-parameter\", \"other\"));\n</pre>  <h3 id=\"events\">Events</h3> <p><a class=\"reference internal\" href=\"../api/phalcon_di\"><em>Phalcon\\Di</em></a> is able to send events to an <a class=\"reference internal\" href=\"events\"><em>EventsManager</em></a> if it is present. Events are triggered using the type “di”. Some events when returning boolean false could stop the active operation. The following events are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"11%\"> <col width=\"67%\"> <col width=\"11%\"> <col width=\"10%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Event Name</th> <th class=\"head\">Triggered</th> <th class=\"head\">Can stop operation?</th> <th class=\"head\">Triggered on</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>beforeServiceResolve</td> <td>Triggered before resolve service. Listeners receive the service name and the parameters passed to it.</td> <td>No</td> <td>Listeners</td> </tr> <tr class=\"row-odd\">\n<td>afterServiceResolve</td> <td>Triggered after resolve service. Listeners receive the service name, instance, and the parameters passed to it.</td> <td>No</td> <td>Listeners</td> </tr> </tbody> </table>    <h2 id=\"shared-services\">Shared services</h2> <p>Services can be registered as “shared” services this means that they always will act as <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Singleton_pattern\">singletons</a>. Once the service is resolved for the first time the same instance of it is returned every time a consumer retrieve the service from the container:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Session\\Adapter\\Files as SessionFiles;\n\n// Register the session service as \"always shared\"\n$di-&gt;setShared('session', function () {\n    $session = new SessionFiles();\n    $session-&gt;start();\n    return $session;\n});\n\n$session = $di-&gt;get('session'); // Locates the service for the first time\n$session = $di-&gt;getSession();   // Returns the first instantiated object\n</pre> <p>An alternative way to register shared services is to pass “true” as third parameter of “set”:</p> <pre class=\"highlight-php\" data-language=\"php\">// Register the session service as \"always shared\"\n$di-&gt;set('session', function () {\n    // ...\n}, true);\n</pre> <p>If a service isn’t registered as shared and you want to be sure that a shared instance will be accessed every time the service is obtained from the DI, you can use the ‘getShared’ method:</p> <pre class=\"highlight-php\" data-language=\"php\">$request = $di-&gt;getShared(\"request\");\n</pre>   <h2 id=\"manipulating-services-individually\">Manipulating services individually</h2> <p>Once a service is registered in the service container, you can retrieve it to manipulate it individually:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Http\\Request;\n\n// Register the \"request\" service\n$di-&gt;set('request', 'Phalcon\\Http\\Request');\n\n// Get the service\n$requestService = $di-&gt;getService('request');\n\n// Change its definition\n$requestService-&gt;setDefinition(function () {\n    return new Request();\n});\n\n// Change it to shared\n$requestService-&gt;setShared(true);\n\n// Resolve the service (return a Phalcon\\Http\\Request instance)\n$request = $requestService-&gt;resolve();\n</pre>   <h2 id=\"instantiating-classes-via-the-service-container\">Instantiating classes via the Service Container</h2> <p>When you request a service to the service container, if it can’t find out a service with the same name it’ll try to load a class with the same name. With this behavior we can replace any class by another simply by registering a service with its name:</p> <pre class=\"highlight-php\" data-language=\"php\">// Register a controller as a service\n$di-&gt;set('IndexController', function () {\n    $component = new Component();\n    return $component;\n}, true);\n\n// Register a controller as a service\n$di-&gt;set('MyOtherComponent', function () {\n    // Actually returns another component\n    $component = new AnotherComponent();\n    return $component;\n});\n\n// Create an instance via the service container\n$myComponent = $di-&gt;get('MyOtherComponent');\n</pre> <p>You can take advantage of this, always instantiating your classes via the service container (even if they aren’t registered as services). The DI will fallback to a valid autoloader to finally load the class. By doing this, you can easily replace any class in the future by implementing a definition for it.</p>   <h2 id=\"automatic-injecting-of-the-di-itself\">Automatic Injecting of the DI itself</h2> <p>If a class or component requires the DI itself to locate services, the DI can automatically inject itself to the instances it creates, to do this, you need to implement the <a class=\"reference internal\" href=\"../api/phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a> in your classes:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Di\\InjectionAwareInterface;\n\nclass MyClass implements InjectionAwareInterface\n{\n    protected $_di;\n\n    public function setDi($di)\n    {\n        $this-&gt;_di = $di;\n    }\n\n    public function getDi()\n    {\n        return $this-&gt;_di;\n    }\n}\n</pre> <p>Then once the service is resolved, the <code class=\"code docutils literal\"><span class=\"pre\">$di</span></code> will be passed to <code class=\"code docutils literal\"><span class=\"pre\">setDi()</span></code> automatically:</p> <pre class=\"highlight-php\" data-language=\"php\">// Register the service\n$di-&gt;set('myClass', 'MyClass');\n\n// Resolve the service (NOTE: $myClass-&gt;setDi($di) is automatically called)\n$myClass = $di-&gt;get('myClass');\n</pre>   <h2 id=\"avoiding-service-resolution\">Avoiding service resolution</h2> <p>Some services are used in each of the requests made to the application, eliminate the process of resolving the service could add some small improvement in performance.</p> <pre class=\"highlight-php\" data-language=\"php\">// Resolve the object externally instead of using a definition for it\n$router = new MyRouter();\n\n// Pass the resolved object to the service registration\n$di-&gt;set('router', $router);\n</pre>   <h2 id=\"organizing-services-in-files\">Organizing services in files</h2> <p>You can better organize your application by moving the service registration to individual files instead of doing everything in the application’s bootstrap:</p> <pre class=\"highlight-php\" data-language=\"php\">$di-&gt;set('router', function () {\n    return include \"../app/config/routes.php\";\n});\n</pre> <p>Then in the file (”../app/config/routes.php”) return the object resolved:</p> <pre class=\"highlight-php\" data-language=\"php\">$router = new MyRouter();\n\n$router-&gt;post('/login');\n\nreturn $router;\n</pre>   <h2 id=\"accessing-the-di-in-a-static-way\">Accessing the DI in a static way</h2> <p>If needed you can access the latest DI created in a static function in the following way:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Di;\n\nclass SomeComponent\n{\n    public static function someMethod()\n    {\n        // Get the session service\n        $session = Di::getDefault()-&gt;getSession();\n    }\n}\n</pre>   <h2 id=\"factory-default-di\">Factory Default DI</h2> <p>Although the decoupled character of Phalcon offers us great freedom and flexibility, maybe we just simply want to use it as a full-stack framework. To achieve this, the framework provides a variant of <a class=\"reference internal\" href=\"../api/phalcon_di\"><em>Phalcon\\Di</em></a> called <a class=\"reference internal\" href=\"../api/phalcon_di_factorydefault\"><em>Phalcon\\Di\\FactoryDefault</em></a>. This class automatically registers the appropriate services bundled with the framework to act as full-stack.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Di\\FactoryDefault;\n\n$di = new FactoryDefault();\n</pre>   <h2 id=\"service-name-conventions\">Service Name Conventions</h2> <p>Although you can register services with the names you want, Phalcon has a several naming conventions that allow it to get the the correct (built-in) service when you need it.</p> <table class=\"docutils\"> <colgroup> <col width=\"12%\"> <col width=\"26%\"> <col width=\"57%\"> <col width=\"5%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Service Name</th> <th class=\"head\">Description</th> <th class=\"head\">Default</th> <th class=\"head\">Shared</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>dispatcher</td> <td>Controllers Dispatching Service</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_dispatcher\"><em>Phalcon\\Mvc\\Dispatcher</em></a></td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>router</td> <td>Routing Service</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_router\"><em>Phalcon\\Mvc\\Router</em></a></td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>url</td> <td>URL Generator Service</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_url\"><em>Phalcon\\Mvc\\Url</em></a></td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>request</td> <td>HTTP Request Environment Service</td> <td><a class=\"reference internal\" href=\"../api/phalcon_http_request\"><em>Phalcon\\Http\\Request</em></a></td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>response</td> <td>HTTP Response Environment Service</td> <td><a class=\"reference internal\" href=\"../api/phalcon_http_response\"><em>Phalcon\\Http\\Response</em></a></td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>cookies</td> <td>HTTP Cookies Management Service</td> <td><a class=\"reference internal\" href=\"../api/phalcon_http_response_cookies\"><em>Phalcon\\Http\\Response\\Cookies</em></a></td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>filter</td> <td>Input Filtering Service</td> <td><a class=\"reference internal\" href=\"../api/phalcon_filter\"><em>Phalcon\\Filter</em></a></td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>flash</td> <td>Flash Messaging Service</td> <td><a class=\"reference internal\" href=\"../api/phalcon_flash_direct\"><em>Phalcon\\Flash\\Direct</em></a></td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>flashSession</td> <td>Flash Session Messaging Service</td> <td><a class=\"reference internal\" href=\"../api/phalcon_flash_session\"><em>Phalcon\\Flash\\Session</em></a></td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>session</td> <td>Session Service</td> <td><a class=\"reference internal\" href=\"../api/phalcon_session_adapter_files\"><em>Phalcon\\Session\\Adapter\\Files</em></a></td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>eventsManager</td> <td>Events Management Service</td> <td><a class=\"reference internal\" href=\"../api/phalcon_events_manager\"><em>Phalcon\\Events\\Manager</em></a></td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>db</td> <td>Low-Level Database Connection Service</td> <td><a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a></td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>security</td> <td>Security helpers</td> <td><a class=\"reference internal\" href=\"../api/phalcon_security\"><em>Phalcon\\Security</em></a></td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>crypt</td> <td>Encrypt/Decrypt data</td> <td><a class=\"reference internal\" href=\"../api/phalcon_crypt\"><em>Phalcon\\Crypt</em></a></td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>tag</td> <td>HTML generation helpers</td> <td><a class=\"reference internal\" href=\"../api/phalcon_tag\"><em>Phalcon\\Tag</em></a></td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>escaper</td> <td>Contextual Escaping</td> <td><a class=\"reference internal\" href=\"../api/phalcon_escaper\"><em>Phalcon\\Escaper</em></a></td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>annotations</td> <td>Annotations Parser</td> <td><a class=\"reference internal\" href=\"../api/phalcon_annotations_adapter_memory\"><em>Phalcon\\Annotations\\Adapter\\Memory</em></a></td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>modelsManager</td> <td>Models Management Service</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_manager\"><em>Phalcon\\Mvc\\Model\\Manager</em></a></td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>modelsMetadata</td> <td>Models Meta-Data Service</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_metadata_memory\"><em>Phalcon\\Mvc\\Model\\MetaData\\Memory</em></a></td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>transactionManager</td> <td>Models Transaction Manager Service</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_transaction_manager\"><em>Phalcon\\Mvc\\Model\\Transaction\\Manager</em></a></td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>modelsCache</td> <td>Cache backend for models cache</td> <td>None</td> <td>No</td> </tr> <tr class=\"row-odd\">\n<td>viewsCache</td> <td>Cache backend for views fragments</td> <td>None</td> <td>No</td> </tr> </tbody> </table>   <h2 id=\"implementing-your-own-di\">Implementing your own DI</h2> <p>The <a class=\"reference internal\" href=\"../api/phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> interface must be implemented to create your own DI replacing the one provided by Phalcon or extend the current one.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/di.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/di.html</a>\n  </p>\n</div>\n","reference/assets":"<h1 id=\"assets-management\">Assets Management</h1> <p><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Assets</span></code> is a component that allows you to manage static resources such as CSS stylesheets or JavaScript libraries in a web application.</p> <p><a class=\"reference internal\" href=\"../api/phalcon_assets_manager\"><em>Phalcon\\Assets\\Manager</em></a> is available in the services container, so you can add resources from any part of the application where the container is available.</p>  <h2 id=\"adding-resources\">Adding Resources</h2> <p>Assets supports two built-in resources: CSS and JavaScripts. You can create other resources if you need. The assets manager internally stores two default collections of resources - one for JavaScript and another for CSS.</p> <p>You can easily add resources to these collections like follows:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function index()\n    {\n        // Add some local CSS resources\n        $this-&gt;assets\n            -&gt;addCss('css/style.css')\n            -&gt;addCss('css/index.css');\n\n        // And some local JavaScript resources\n        $this-&gt;assets\n            -&gt;addJs('js/jquery.js')\n            -&gt;addJs('js/bootstrap.min.js');\n    }\n}\n</pre> <p>Then in a view, these resources can be printed:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Some amazing website&lt;/title&gt;\n        &lt;?php $this-&gt;assets-&gt;outputCss() ?&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;!-- ... --&gt;\n\n        &lt;?php $this-&gt;assets-&gt;outputJs() ?&gt;\n    &lt;/body&gt;\n&lt;html&gt;\n</pre> <p>Volt syntax:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Some amazing website&lt;/title&gt;\n        {{ assets.outputCss() }}\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;!-- ... --&gt;\n\n        {{ assets.outputJs() }}\n    &lt;/body&gt;\n&lt;html&gt;\n</pre> <p>For better pageload performance, it is recommended to place JavaScript at the end of the HTML instead of in the <code class=\"code docutils literal\"><span class=\"pre\">&lt;head&gt;</span></code>.</p>   <h2 id=\"local-remote-resources\">Local/Remote resources</h2> <p>Local resources are those who are provided by the same application and they’re located in the document root of the application. URLs in local resources are generated by the ‘url’ service, usually <a class=\"reference internal\" href=\"../api/phalcon_mvc_url\"><em>Phalcon\\Mvc\\Url</em></a>.</p> <p>Remote resources are those such as common libraries like jQuery, Bootstrap, etc. that are provided by a CDN.</p> <p>The second parameter of <code class=\"code docutils literal\"><span class=\"pre\">addCss()</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">addJs()</span></code> says whether the resource is local or not (<code class=\"code docutils literal\"><span class=\"pre\">true</span></code> is local, <code class=\"code docutils literal\"><span class=\"pre\">false</span></code> is remote). By default, the assets manager will assume the resource is local:</p> <pre class=\"highlight-php\" data-language=\"php\">public function indexAction()\n{\n    // Add some local CSS resources\n    $this-&gt;assets\n        -&gt;addCss('//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/css/bootstrap-combined.min.css', false)\n        -&gt;addCss('css/style.css', true)\n        -&gt;addCss('css/extra.css');\n}\n</pre>   <h2 id=\"collections\">Collections</h2> <p>Collections group resources of the same type. The assets manager implicitly creates two collections: <code class=\"code docutils literal\"><span class=\"pre\">css</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">js</span></code>. You can create additional collections to group specific resources to make it easier to place those resources in the views:</p> <pre class=\"highlight-php\" data-language=\"php\">// Javascripts in the header\n$this-&gt;assets\n    -&gt;collection('header')\n    -&gt;addJs('js/jquery.js')\n    -&gt;addJs('js/bootstrap.min.js');\n\n// Javascripts in the footer\n$this-&gt;assets\n    -&gt;collection('footer')\n    -&gt;addJs('js/jquery.js')\n    -&gt;addJs('js/bootstrap.min.js');\n</pre> <p>Then in the views:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Some amazing website&lt;/title&gt;\n        &lt;?php $this-&gt;assets-&gt;outputJs('header') ?&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;!-- ... --&gt;\n\n        &lt;?php $this-&gt;assets-&gt;outputJs('footer') ?&gt;\n    &lt;/body&gt;\n&lt;html&gt;\n</pre> <p>Volt syntax:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Some amazing website&lt;/title&gt;\n        {{ assets.outputCss('header') }}\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;!-- ... --&gt;\n\n        {{ assets.outputJs('footer') }}\n    &lt;/body&gt;\n&lt;html&gt;\n</pre>   <h2 id=\"url-prefixes\">URL Prefixes</h2> <p>Collections can be URL-prefixed, this enables you to easily change from one server to another at any moment:</p> <pre class=\"highlight-php\" data-language=\"php\">$scripts = $this-&gt;assets-&gt;collection('footer');\n\nif ($config-&gt;environment == 'development') {\n    $scripts-&gt;setPrefix('/');\n} else {\n    $scripts-&gt;setPrefix('http:://cdn.example.com/');\n}\n\n$scripts-&gt;addJs('js/jquery.js')\n        -&gt;addJs('js/bootstrap.min.js');\n</pre> <p>A chainable syntax is available too:</p> <pre class=\"highlight-php\" data-language=\"php\">$scripts = $assets\n    -&gt;collection('header')\n    -&gt;setPrefix('http://cdn.example.com/')\n    -&gt;setLocal(false)\n    -&gt;addJs('js/jquery.js')\n    -&gt;addJs('js/bootstrap.min.js');\n</pre>   <h2 id=\"minification-filtering\">Minification/Filtering</h2> <p><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Assets</span></code> provides built-in minification of JavaScript and CSS resources. You can create a collection of resources instructing the Assets Manager which ones must be filtered and which ones must be left as they are. In addition to the above, Jsmin by Douglas Crockford is part of the core extension offering minification of JavaScript files for maximum performance. In the CSS land, CSSMin by Ryan Day is also available to minify CSS files:</p> <p>The following example shows how to minify a collection of resources:</p> <pre class=\"highlight-php\" data-language=\"php\">$manager\n\n    // These JavaScripts are located in the page's bottom\n    -&gt;collection('jsFooter')\n\n    // The name of the final output\n    -&gt;setTargetPath('final.js')\n\n    // The script tag is generated with this URI\n    -&gt;setTargetUri('production/final.js')\n\n    // This is a remote resource that does not need filtering\n    -&gt;addJs('code.jquery.com/jquery-1.10.0.min.js', false, false)\n\n    // These are local resources that must be filtered\n    -&gt;addJs('common-functions.js')\n    -&gt;addJs('page-functions.js')\n\n    // Join all the resources in a single file\n    -&gt;join(true)\n\n    // Use the built-in Jsmin filter\n    -&gt;addFilter(new Phalcon\\Assets\\Filters\\Jsmin())\n\n    // Use a custom filter\n    -&gt;addFilter(new MyApp\\Assets\\Filters\\LicenseStamper());\n</pre> <p>A collection can contain JavaScript or CSS resources but not both. Some resources may be remote, that is, they’re obtained by HTTP from a remote source for further filtering. It is recommended to convert the external resources to local for better performance.</p> <p>As seen above, the <code class=\"code docutils literal\"><span class=\"pre\">addJs()</span></code> method is used to add resources to the collection, the second parameter indicates whether the resource is external or not and the third parameter indicates whether the resource should be filtered or left as is:</p> <pre class=\"highlight-php\" data-language=\"php\">// These Javascripts are located in the page's bottom\n$js = $manager-&gt;collection('jsFooter');\n\n// This a remote resource that does not need filtering\n$js-&gt;addJs('code.jquery.com/jquery-1.10.0.min.js', false, false);\n\n// These are local resources that must be filtered\n$js-&gt;addJs('common-functions.js');\n$js-&gt;addJs('page-functions.js');\n</pre> <p>Filters are registered in the collection, multiple filters are allowed, content in resources are filtered in the same order as filters were registered:</p> <pre class=\"highlight-php\" data-language=\"php\">// Use the built-in Jsmin filter\n$js-&gt;addFilter(new Phalcon\\Assets\\Filters\\Jsmin());\n\n// Use a custom filter\n$js-&gt;addFilter(new MyApp\\Assets\\Filters\\LicenseStamper());\n</pre> <p>Note that both built-in and custom filters can be transparently applied to collections. The last step is to decide if all the resources in the collection must be joined into a single file or serve each of them individually. To tell the collection that all resources must be joined you can use the <code class=\"code docutils literal\"><span class=\"pre\">join()</span></code> method.</p> <p>If resources are going to be joined, we need also to define which file will be used to store the resources and which URI will be used to show it. These settings are set up with <code class=\"code docutils literal\"><span class=\"pre\">setTargetPath()</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">setTargetUri()</span></code>:</p> <pre class=\"highlight-php\" data-language=\"php\">$js-&gt;join(true);\n\n// The name of the final file path\n$js-&gt;setTargetPath('public/production/final.js');\n\n// The script HTML tag is generated with this URI\n$js-&gt;setTargetUri('production/final.js');\n</pre>  <h3 id=\"built-in-filters\">Built-In Filters</h3> <p>Phalcon provides 2 built-in filters to minify both JavaScript and CSS, their C-backend provide the minimum overhead to perform this task:</p> <table class=\"docutils\"> <colgroup> <col width=\"42%\"> <col width=\"58%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Filter</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../api/phalcon_assets_filters_jsmin\"><em>Phalcon\\Assets\\Filters\\Jsmin</em></a></td> <td>Minifies JavaScript by removing unnecessary characters that are ignored by Javascript interpreters/compilers</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../api/phalcon_assets_filters_cssmin\"><em>Phalcon\\Assets\\Filters\\Cssmin</em></a></td> <td>Minifies CSS by removing unnecessary characters that are already ignored by browsers</td> </tr> </tbody> </table>   <h3 id=\"custom-filters\">Custom Filters</h3> <p>In addition to the built-in filters, you can create your own filters. These can take advantage of existing and more advanced tools like <a class=\"reference external\" href=\"http://yui.github.io/yuicompressor/\">YUI</a>, <a class=\"reference external\" href=\"http://sass-lang.com/\">Sass</a>, <a class=\"reference external\" href=\"https://developers.google.com/closure/compiler/?hl=fr\">Closure</a>, etc.:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Assets\\FilterInterface;\n\n/**\n * Filters CSS content using YUI\n *\n * @param string $contents\n * @return string\n */\nclass CssYUICompressor implements FilterInterface\n{\n    protected $_options;\n\n    /**\n     * CssYUICompressor constructor\n     *\n     * @param array $options\n     */\n    public function __construct($options)\n    {\n        $this-&gt;_options = $options;\n    }\n\n    /**\n     * Do the filtering\n     *\n     * @param string $contents\n     * @return string\n     */\n    public function filter($contents)\n    {\n        // Write the string contents into a temporal file\n        file_put_contents('temp/my-temp-1.css', $contents);\n\n        system(\n            $this-&gt;_options['java-bin'] .\n            ' -jar ' .\n            $this-&gt;_options['yui'] .\n            ' --type css '.\n            'temp/my-temp-file-1.css ' .\n            $this-&gt;_options['extra-options'] .\n            ' -o temp/my-temp-file-2.css'\n        );\n\n        // Return the contents of file\n        return file_get_contents(\"temp/my-temp-file-2.css\");\n    }\n}\n</pre> <p>Usage:</p> <pre class=\"highlight-php\" data-language=\"php\">// Get some CSS collection\n$css = $this-&gt;assets-&gt;get('head');\n\n// Add/Enable the YUI compressor filter in the collection\n$css-&gt;addFilter(\n    new CssYUICompressor(\n        array(\n            'java-bin'      =&gt; '/usr/local/bin/java',\n            'yui'           =&gt; '/some/path/yuicompressor-x.y.z.jar',\n            'extra-options' =&gt; '--charset utf8'\n        )\n    )\n);\n</pre> <p>In a previous example, we used a custom filter called <code class=\"code docutils literal\"><span class=\"pre\">LicenseStamper</span></code>:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Assets\\FilterInterface;\n\n/**\n * Adds a license message to the top of the file\n *\n * @param string $contents\n * @return string\n */\nclass LicenseStamper implements FilterInterface\n{\n    /**\n     * Do the filtering\n     *\n     * @param string $contents\n     * @return string\n     */\n    public function filter($contents)\n    {\n        $license = \"/* (c) 2015 Your Name Here */\";\n\n        return $license . PHP_EOL . PHP_EOL . $contents;\n    }\n}\n</pre>    <h2 id=\"custom-output\">Custom Output</h2> <p>The <code class=\"code docutils literal\"><span class=\"pre\">outputJs()</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">outputCss()</span></code> methods are available to generate the necessary HTML code according to each type of resources. You can override this method or print the resources manually in the following way:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Tag;\n\nforeach ($this-&gt;assets-&gt;collection('js') as $resource) {\n    echo Tag::javascriptInclude($resource-&gt;getPath());\n}\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/assets.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/assets.html</a>\n  </p>\n</div>\n","reference/namespaces":"<h1 id=\"working-with-namespaces\">Working with Namespaces</h1> <p><a class=\"reference external\" href=\"http://php.net/manual/en/language.namespaces.php\">Namespaces</a> can be used to avoid class name collisions; this means that if you have two controllers in an application with the same name, a namespace can be used to differentiate them. Namespaces are also useful for creating bundles or modules.</p>  <h2 id=\"setting-up-the-framework\">Setting up the framework</h2> <p>Using namespaces has some implications when loading the appropriate controller. To adjust the framework behavior to namespaces is necessary to perform one or all of the following tasks:</p> <p>Use an autoload strategy that takes into account the namespaces, for example with <a class=\"reference internal\" href=\"../api/phalcon_loader\"><em>Phalcon\\Loader</em></a>:</p> <pre class=\"highlight-php\" data-language=\"php\">$loader-&gt;registerNamespaces(\n    array(\n       \"Store\\\\Admin\\\\Controllers\" =&gt; \"../bundles/admin/controllers/\",\n       \"Store\\\\Admin\\\\Models\"      =&gt; \"../bundles/admin/models/\"\n    )\n);\n</pre> <p>Specify it in the routes as a separate parameter in the route’s paths:</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add(\n    \"/admin/users/my-profile\",\n    array(\n        \"namespace\"  =&gt; \"Store\\\\Admin\",\n        \"controller\" =&gt; \"Users\",\n        \"action\"     =&gt; \"profile\"\n    )\n);\n</pre> <p>Passing it as part of the route:</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add(\n    \"/:namespace/admin/users/my-profile\",\n    array(\n        \"namespace\"  =&gt; 1,\n        \"controller\" =&gt; \"Users\",\n        \"action\"     =&gt; \"profile\"\n    )\n);\n</pre> <p>If you are only working with the same namespace for every controller in your application, then you can define a default namespace in the Dispatcher, by doing this, you don’t need to specify a full class name in the router path:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Dispatcher;\n\n// Registering a dispatcher\n$di-&gt;set('dispatcher', function () {\n    $dispatcher = new Dispatcher();\n    $dispatcher-&gt;setDefaultNamespace(\"Store\\\\Admin\\\\Controllers\");\n    return $dispatcher;\n});\n</pre>   <h2 id=\"controllers-in-namespaces\">Controllers in Namespaces</h2> <p>The following example shows how to implement a controller that use namespaces:</p> <pre class=\"highlight-php\" data-language=\"php\">namespace Store\\Admin\\Controllers;\n\nuse Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function profileAction()\n    {\n\n    }\n}\n</pre>   <h2 id=\"models-in-namespaces\">Models in Namespaces</h2> <p>Take the following into consideration when using models in namespaces:</p> <pre class=\"highlight-php\" data-language=\"php\">namespace Store\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n\n}\n</pre> <p>If models have relationships they must include the namespace too:</p> <pre class=\"highlight-php\" data-language=\"php\">namespace Store\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;hasMany(\n            \"id\",\n            \"Store\\\\Models\\\\Parts\",\n            \"robots_id\",\n            array(\n                \"alias\" =&gt; \"parts\"\n            )\n        );\n    }\n}\n</pre> <p>In PHQL you must write the statements including namespaces:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql = 'SELECT r.* FROM Store\\Models\\Robots r JOIN Store\\Models\\Parts p';\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/namespaces.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/namespaces.html</a>\n  </p>\n</div>\n","reference/cookies":"<h1 id=\"cookies-management\">Cookies Management</h1> <p><a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/HTTP_cookie\">Cookies</a> are a very useful way to store small pieces of data on the client’s machine that can be retrieved even if the user closes his/her browser. <a class=\"reference internal\" href=\"../api/phalcon_http_response_cookies\"><em>Phalcon\\Http\\Response\\Cookies</em></a> acts as a global bag for cookies. Cookies are stored in this bag during the request execution and are sent automatically at the end of the request.</p>  <h2 id=\"basic-usage\">Basic Usage</h2> <p>You can set/get cookies by just accessing the ‘cookies’ service in any part of the application where services can be accessed:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass SessionController extends Controller\n{\n    public function loginAction()\n    {\n        // Check if the cookie has previously set\n        if ($this-&gt;cookies-&gt;has('remember-me')) {\n\n            // Get the cookie\n            $rememberMe = $this-&gt;cookies-&gt;get('remember-me');\n\n            // Get the cookie's value\n            $value      = $rememberMe-&gt;getValue();\n        }\n    }\n\n    public function startAction()\n    {\n        $this-&gt;cookies-&gt;set('remember-me', 'some value', time() + 15 * 86400);\n    }\n\n    public function logoutAction()\n    {\n        // Delete the cookie\n        $this-&gt;cookies-&gt;get('remember-me')-&gt;delete();\n    }\n}\n</pre>   <h2 id=\"encryption-decryption-of-cookies\">Encryption/Decryption of Cookies</h2> <p>By default, cookies are automatically encrypted before being sent to the client and are decrypted when retrieved from the user. This protection prevents unauthorized users to see the cookies’ contents in the client (browser). Despite this protection, sensitive data should not be stored in cookies.</p> <p>You can disable encryption in the following way:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Http\\Response\\Cookies;\n\n$di-&gt;set('cookies', function () {\n    $cookies = new Cookies();\n\n    $cookies-&gt;useEncryption(false);\n\n    return $cookies;\n});\n</pre> <p>If you wish to use encryption, a global key must be set in the ‘crypt’ service:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Crypt;\n\n$di-&gt;set('crypt', function () {\n    $crypt = new Crypt();\n\n    $crypt-&gt;setKey('#1dj8$=dp?.ak//j1V$'); // Use your own key!\n\n    return $crypt;\n});\n</pre> <blockquote class=\"highlights\"> <div>Sending cookies data without encryption to clients including complex objects structures, resultsets, service information, etc. could expose internal application details that could be used by an attacker to attack the application. If you do not want to use encryption, we highly recommend you only send very basic cookie data like numbers or small string literals.</div>\n</blockquote><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/cookies.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/cookies.html</a>\n  </p>\n</div>\n","reference/tags":"<h1 id=\"view-helpers\">View Helpers</h1> <p>Writing and maintaining HTML markup can quickly become a tedious task because of the naming conventions and numerous attributes that have to be taken into consideration. Phalcon deals with this complexity by offering <a class=\"reference internal\" href=\"../api/phalcon_tag\"><em>Phalcon\\Tag</em></a>, which in turn offers view helpers to generate HTML markup.</p> <p>This component can be used in a plain HTML+PHP view or in a <a class=\"reference internal\" href=\"volt\"><em>Volt</em></a> template.</p> <blockquote class=\"highlights\"> <div>This guide is not intended to be a complete documentation of available helpers and their arguments. Please visit the <a class=\"reference internal\" href=\"../api/phalcon_tag\"><em>Phalcon\\Tag</em></a> page in the API for a complete reference.</div>\n</blockquote>  <h2 id=\"document-type-of-content\">Document Type of Content</h2> <p>Phalcon provides <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::setDoctype()</span></code> helper to set document type of the content. Document type setting may affect HTML output produced by other tag helpers. For example, if you set XHTML document type family, helpers that return or output HTML tags will produce self-closing tags to follow valid XHTML standard.</p> <p>Available document type constants in <a class=\"reference internal\" href=\"../api/phalcon_tag\"><em>Phalcon\\Tag</em></a> namespace are:</p> <table class=\"docutils\"> <colgroup> <col width=\"48%\"> <col width=\"52%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Constant</th> <th class=\"head\">Document type</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>HTML32</td> <td>HTML 3.2</td> </tr> <tr class=\"row-odd\">\n<td>HTML401_STRICT</td> <td>HTML 4.01 Strict</td> </tr> <tr class=\"row-even\">\n<td>HTML401_TRANSITIONAL</td> <td>HTML 4.01 Transitional</td> </tr> <tr class=\"row-odd\">\n<td>HTML401_FRAMESET</td> <td>HTML 4.01 Frameset</td> </tr> <tr class=\"row-even\">\n<td>HTML5</td> <td>HTML 5</td> </tr> <tr class=\"row-odd\">\n<td>XHTML10_STRICT</td> <td>XHTML 1.0 Strict</td> </tr> <tr class=\"row-even\">\n<td>XHTML10_TRANSITIONAL</td> <td>XHTML 1.0 Transitional</td> </tr> <tr class=\"row-odd\">\n<td>XHTML10_FRAMESET</td> <td>XHTML 1.0 Frameset</td> </tr> <tr class=\"row-even\">\n<td>XHTML11</td> <td>XHTML 1.1</td> </tr> <tr class=\"row-odd\">\n<td>XHTML20</td> <td>XHTML 2.0</td> </tr> <tr class=\"row-even\">\n<td>XHTML5</td> <td>XHTML 5</td> </tr> </tbody> </table> <p>Setting document type.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Tag;\n\n$this-&gt;tag-&gt;setDoctype(Tag::HTML401_STRICT);\n\n?&gt;\n</pre> <p>Getting document type.</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;?= $this-&gt;tag-&gt;getDoctype() ?&gt;\n&lt;html&gt;\n&lt;!-- your HTML code --&gt;\n&lt;/html&gt;\n</pre> <p>The following HTML will be produced.</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n        \"http://www.w3.org/TR/html4/strict.dtd\"&gt;\n&lt;html&gt;\n&lt;!-- your HTML code --&gt;\n&lt;/html&gt;\n</pre> <p>Volt syntax:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{{ get_doctype() }}\n&lt;html&gt;\n&lt;!-- your HTML code --&gt;\n&lt;/html&gt;\n</pre>   <h2 id=\"generating-links\">Generating Links</h2> <p>A real common task in any web application or website is to produce links that allow us to navigate from one page to another. When they are internal URLs we can create them in the following manner:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;!-- for the default route --&gt;\n&lt;?= $this-&gt;tag-&gt;linkTo(\"products/search\", \"Search\") ?&gt;\n\n&lt;!-- with CSS attributes --&gt;\n&lt;?= $this-&gt;tag-&gt;linkTo(array('products/edit/10', 'Edit', 'class' =&gt; 'edit-btn')) ?&gt;\n\n&lt;!-- for a named route --&gt;\n&lt;?= $this-&gt;tag-&gt;linkTo(array(array('for' =&gt; 'show-product', 'title' =&gt; 123, 'name' =&gt; 'carrots'), 'Show')) ?&gt;\n</pre> <p>Actually, all produced URLs are generated by the component <a class=\"reference internal\" href=\"url\"><em>Phalcon\\Mvc\\Url</em></a> (or service “url” failing)</p> <p>Same links generated with Volt:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">&lt;!-- for the default route --&gt;\n{{ link_to(\"products/search\", \"Search\") }}\n\n&lt;!-- for a named route --&gt;\n{{ link_to(['for': 'show-product', 'id': 123, 'name': 'carrots'], 'Show') }}\n\n&lt;!-- for a named route with a HTML class --&gt;\n{{ link_to(['for': 'show-product', 'id': 123, 'name': 'carrots'], 'Show', 'class': 'edit-btn') }}\n</pre>   <h2 id=\"creating-forms\">Creating Forms</h2> <p>Forms in web applications play an essential part in retrieving user input. The following example shows how to implement a simple search form using view helpers:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;!-- Sending the form by method POST --&gt;\n&lt;?= $this-&gt;tag-&gt;form(\"products/search\") ?&gt;\n    &lt;label for=\"q\"&gt;Search:&lt;/label&gt;\n    &lt;?= $this-&gt;tag-&gt;textField(\"q\") ?&gt;\n    &lt;?= $this-&gt;tag-&gt;submitButton(\"Search\") ?&gt;\n&lt;?= $this-&gt;tag-&gt;endForm() ?&gt;\n\n&lt;!-- Specifying another method or attributes for the FORM tag --&gt;\n&lt;?= $this-&gt;tag-&gt;form(array(\"products/search\", \"method\" =&gt; \"get\")); ?&gt;\n    &lt;label for=\"q\"&gt;Search:&lt;/label&gt;\n    &lt;?= $this-&gt;tag-&gt;textField(\"q\"); ?&gt;\n    &lt;?= $this-&gt;tag-&gt;submitButton(\"Search\"); ?&gt;\n&lt;?= $this-&gt;tag-&gt;endForm() ?&gt;\n</pre> <p>This last code will generate the following HTML:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;form action=\"/store/products/search/\" method=\"get\"&gt;\n     &lt;label for=\"q\"&gt;Search:&lt;/label&gt;\n     &lt;input type=\"text\" id=\"q\" value=\"\" name=\"q\" /&gt;\n     &lt;input type=\"submit\" value=\"Search\" /&gt;\n&lt;/form&gt;\n</pre> <p>Same form generated in Volt:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">&lt;!-- Specifying another method or attributes for the FORM tag --&gt;\n{{ form(\"products/search\", \"method\": \"get\") }}\n    &lt;label for=\"q\"&gt;Search:&lt;/label&gt;\n    {{ text_field(\"q\") }}\n    {{ submit_button(\"Search\") }}\n{{ endForm() }}\n</pre> <p>Phalcon also provides a <a class=\"reference internal\" href=\"forms\"><em>form builder</em></a> to create forms in an object-oriented manner.</p>   <h2 id=\"helpers-to-generate-form-elements\">Helpers to Generate Form Elements</h2> <p>Phalcon provides a series of helpers to generate form elements such as text fields, buttons and more. The first parameter of each helper is always the name of the element to be generated. When the form is submitted, the name will be passed along with the form data. In a controller you can get these values using the same name by using the <code class=\"code docutils literal\"><span class=\"pre\">getPost()</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">getQuery()</span></code> methods on the request object (<code class=\"code docutils literal\"><span class=\"pre\">$this-&gt;request</span></code>).</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;?php echo $this-&gt;tag-&gt;textField(\"username\") ?&gt;\n\n&lt;?php echo $this-&gt;tag-&gt;textArea(array(\n    \"comment\",\n    \"This is the content of the text-area\",\n    \"cols\" =&gt; \"6\",\n    \"rows\" =&gt; 20\n)) ?&gt;\n\n&lt;?php echo $this-&gt;tag-&gt;passwordField(array(\n    \"password\",\n    \"size\" =&gt; 30\n)) ?&gt;\n\n&lt;?php echo $this-&gt;tag-&gt;hiddenField(array(\n    \"parent_id\",\n    \"value\"=&gt; \"5\"\n)) ?&gt;\n</pre> <p>Volt syntax:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{{ text_field(\"username\") }}\n\n{{ text_area(\"comment\", \"This is the content\", \"cols\": \"6\", \"rows\": 20) }}\n\n{{ password_field(\"password\", \"size\": 30) }}\n\n{{ hidden_field(\"parent_id\", \"value\": \"5\") }}\n</pre>   <h2 id=\"making-select-boxes\">Making Select Boxes</h2> <p>Generating select boxes (select box) is easy, especially if the related data is stored in PHP associative arrays. The helpers for select elements are <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::select()</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::selectStatic()</span></code>. <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::select()</span></code> has been was specifically designed to work with <a class=\"reference internal\" href=\"models\"><em>Phalcon\\Mvc\\Model</em></a>, while <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::selectStatic()</span></code> can with PHP arrays.</p> <pre class=\"highlight-php\" data-language=\"php\">// Using data from a resultset\necho $this-&gt;tag-&gt;select(\n    array(\n        \"productId\",\n        Products::find(\"type = 'vegetables'\"),\n        \"using\" =&gt; array(\"id\", \"name\")\n    )\n);\n\n// Using data from an array\necho $this-&gt;tag-&gt;selectStatic(\n    array(\n        \"status\",\n        array(\n            \"A\" =&gt; \"Active\",\n            \"I\" =&gt; \"Inactive\",\n        )\n    )\n);\n</pre> <p>The following HTML will generated:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;select id=\"productId\" name=\"productId\"&gt;\n    &lt;option value=\"101\"&gt;Tomato&lt;/option&gt;\n    &lt;option value=\"102\"&gt;Lettuce&lt;/option&gt;\n    &lt;option value=\"103\"&gt;Beans&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;select id=\"status\" name=\"status\"&gt;\n    &lt;option value=\"A\"&gt;Active&lt;/option&gt;\n    &lt;option value=\"I\"&gt;Inactive&lt;/option&gt;\n&lt;/select&gt;\n</pre> <p>You can add an “empty” option to the generated HTML:</p> <pre class=\"highlight-php\" data-language=\"php\">// Creating a Select Tag with an empty option\necho $this-&gt;tag-&gt;select(\n    array(\n        \"productId\",\n        Products::find(\"type = 'vegetables'\"),\n        \"using\"    =&gt; array(\"id\", \"name\"),\n        \"useEmpty\" =&gt; true\n    )\n);\n</pre> <p>Produces this HTML:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;select id=\"productId\" name=\"productId\"&gt;\n    &lt;option value=\"\"&gt;Choose..&lt;/option&gt;\n    &lt;option value=\"101\"&gt;Tomato&lt;/option&gt;\n    &lt;option value=\"102\"&gt;Lettuce&lt;/option&gt;\n    &lt;option value=\"103\"&gt;Beans&lt;/option&gt;\n&lt;/select&gt;\n</pre> <pre class=\"highlight-php\" data-language=\"php\">// Creating a Select Tag with an empty option with default text\necho $this-&gt;tag-&gt;select(\n    array(\n        'productId',\n        Products::find(\"type = 'vegetables'\"),\n        'using'      =&gt; array('id', \"name\"),\n        'useEmpty'   =&gt; true,\n        'emptyText'  =&gt; 'Please, choose one...',\n        'emptyValue' =&gt; '@'\n    )\n);\n</pre> <pre class=\"highlight-html\" data-language=\"html\">&lt;select id=\"productId\" name=\"productId\"&gt;\n    &lt;option value=\"@\"&gt;Please, choose one..&lt;/option&gt;\n    &lt;option value=\"101\"&gt;Tomato&lt;/option&gt;\n    &lt;option value=\"102\"&gt;Lettuce&lt;/option&gt;\n    &lt;option value=\"103\"&gt;Beans&lt;/option&gt;\n&lt;/select&gt;\n</pre> <p>Volt syntax for above example:</p> <pre class=\"highlight-jinja\" data-language=\"jinja\">{# Creating a Select Tag with an empty option with default text #}\n{{ select('productId', products, 'using': ['id', 'name'],\n    'useEmpty': true, 'emptyText': 'Please, choose one...', 'emptyValue': '@') }}\n</pre>   <h2 id=\"assigning-html-attributes\">Assigning HTML attributes</h2> <p>All the helpers accept an array as their first parameter which can contain additional HTML attributes for the element generated.</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;?php $this-&gt;tag-&gt;textField(\n    array(\n        \"price\",\n        \"size\"        =&gt; 20,\n        \"maxlength\"   =&gt; 30,\n        \"placeholder\" =&gt; \"Enter a price\"\n    )\n) ?&gt;\n</pre> <p>or using Volt:</p> <pre class=\"highlight-jinja\" data-language=\"jinja\">{{ text_field(\"price\", \"size\": 20, \"maxlength\": 30, \"placeholder\": \"Enter a price\") }}\n</pre> <p>The following HTML is generated:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;input type=\"text\" name=\"price\" id=\"price\" size=\"20\" maxlength=\"30\"\n    placeholder=\"Enter a price\" /&gt;\n</pre>   <h2 id=\"setting-helper-values\">Setting Helper Values</h2>  <h3 id=\"from-controllers\">From Controllers</h3> <p>It is a good programming principle for MVC frameworks to set specific values for form elements in the view. You can set those values directly from the controller using <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::setDefault()</span></code>. This helper preloads a value for any helpers present in the view. If any helper in the view has a name that matches the preloaded value, it will use it, unless a value is directly assigned on the helper in the view.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n    public function indexAction()\n    {\n        $this-&gt;tag-&gt;setDefault(\"color\", \"Blue\");\n    }\n}\n</pre> <p>At the view, a selectStatic helper matches the same index used to preset the value. In this case “color”:</p> <pre class=\"highlight-php\" data-language=\"php\">echo $this-&gt;tag-&gt;selectStatic(\n    array(\n        \"color\",\n        array(\n            \"Yellow\" =&gt; \"Yellow\",\n            \"Blue\"   =&gt; \"Blue\",\n            \"Red\"    =&gt; \"Red\"\n        )\n    )\n);\n</pre> <p>This will generate the following select tag with the value “Blue” selected:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;select id=\"color\" name=\"color\"&gt;\n    &lt;option value=\"Yellow\"&gt;Yellow&lt;/option&gt;\n    &lt;option value=\"Blue\" selected=\"selected\"&gt;Blue&lt;/option&gt;\n    &lt;option value=\"Red\"&gt;Red&lt;/option&gt;\n&lt;/select&gt;\n</pre>   <h3 id=\"from-the-request\">From the Request</h3> <p>A special feature that the <a class=\"reference internal\" href=\"../api/phalcon_tag\"><em>Phalcon\\Tag</em></a> helpers have is that they keep the values of form helpers between requests. This way you can easily show validation messages without losing entered data.</p>   <h3 id=\"specifying-values-directly\">Specifying values directly</h3> <p>Every form helper supports the parameter “value”. With it you can specify a value for the helper directly. When this parameter is present, any preset value using setDefault() or via request will be ignored.</p>    <h2 id=\"changing-dynamically-the-document-title\">Changing dynamically the Document Title</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_tag\"><em>Phalcon\\Tag</em></a> offers helpers to change dynamically the document title from the controller. The following example demonstrates just that:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function initialize()\n    {\n        $this-&gt;tag-&gt;setTitle(\"Your Website\");\n    }\n\n    public function indexAction()\n    {\n        $this-&gt;tag-&gt;prependTitle(\"Index of Posts - \");\n    }\n}\n</pre> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;html&gt;\n    &lt;head&gt;\n        &lt;?php echo $this-&gt;tag-&gt;getTitle(); ?&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>The following HTML will generated:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Index of Posts - Your Website&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre>   <h2 id=\"static-content-helpers\">Static Content Helpers</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_tag\"><em>Phalcon\\Tag</em></a> also provide helpers to generate tags such as script, link or img. They aid in quick and easy generation of the static resources of your application</p>  <h3 id=\"images\">Images</h3> <pre class=\"highlight-php\" data-language=\"php\">// Generate &lt;img src=\"/your-app/img/hello.gif\"&gt;\necho $this-&gt;tag-&gt;image(\"img/hello.gif\");\n\n// Generate &lt;img alt=\"alternative text\" src=\"/your-app/img/hello.gif\"&gt;\necho $this-&gt;tag-&gt;image(\n    array(\n       \"img/hello.gif\",\n       \"alt\" =&gt; \"alternative text\"\n    )\n);\n</pre> <p>Volt syntax:</p> <pre class=\"highlight-jinja\" data-language=\"jinja\">{# Generate &lt;img src=\"/your-app/img/hello.gif\"&gt; #}\n{{ image(\"img/hello.gif\") }}\n\n{# Generate &lt;img alt=\"alternative text\" src=\"/your-app/img/hello.gif\"&gt; #}\n{{ image(\"img/hello.gif\", \"alt\": \"alternative text\") }}\n</pre>   <h3 id=\"stylesheets\">Stylesheets</h3> <pre class=\"highlight-php\" data-language=\"php\">// Generate &lt;link rel=\"stylesheet\" href=\"http://fonts.googleapis.com/css?family=Rosario\" type=\"text/css\"&gt;\necho $this-&gt;tag-&gt;stylesheetLink(\"http://fonts.googleapis.com/css?family=Rosario\", false);\n\n// Generate &lt;link rel=\"stylesheet\" href=\"/your-app/css/styles.css\" type=\"text/css\"&gt;\necho $this-&gt;tag-&gt;stylesheetLink(\"css/styles.css\");\n</pre> <p>Volt syntax:</p> <pre class=\"highlight-jinja\" data-language=\"jinja\">{# Generate &lt;link rel=\"stylesheet\" href=\"http://fonts.googleapis.com/css?family=Rosario\" type=\"text/css\"&gt; #}\n{{ stylesheet_link(\"http://fonts.googleapis.com/css?family=Rosario\", false) }}\n\n{# Generate &lt;link rel=\"stylesheet\" href=\"/your-app/css/styles.css\" type=\"text/css\"&gt; #}\n{{ stylesheet_link(\"css/styles.css\") }}\n</pre>   <h3 id=\"javascript\">Javascript</h3> <pre class=\"highlight-php\" data-language=\"php\">// Generate &lt;script src=\"http://localhost/javascript/jquery.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\necho $this-&gt;tag-&gt;javascriptInclude(\"http://localhost/javascript/jquery.min.js\", false);\n\n// Generate &lt;script src=\"/your-app/javascript/jquery.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\necho $this-&gt;tag-&gt;javascriptInclude(\"javascript/jquery.min.js\");\n</pre> <p>Volt syntax:</p> <pre class=\"highlight-jinja\" data-language=\"jinja\">{# Generate &lt;script src=\"http://localhost/javascript/jquery.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt; #}\n{{ javascript_include(\"http://localhost/javascript/jquery.min.js\", false) }}\n\n{# Generate &lt;script src=\"/your-app/javascript/jquery.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt; #}\n{{ javascript_include(\"javascript/jquery.min.js\") }}\n</pre>   <h3 id=\"html5-elements-generic-html-helper\">HTML5 elements - generic HTML helper</h3> <p>Phalcon offers a generic HTML helper that allows the generation of any kind of HTML element. It is up to the developer to produce a valid HTML element name to the helper.</p> <pre class=\"highlight-php\" data-language=\"php\">// Generate\n// &lt;canvas id=\"canvas1\" width=\"300\" class=\"cnvclass\"&gt;\n// This is my canvas\n// &lt;/canvas&gt;\necho $this-&gt;tag-&gt;tagHtml(\"canvas\", array(\"id\" =&gt; \"canvas1\", \"width\" =&gt; \"300\", \"class\" =&gt; \"cnvclass\"), false, true, true);\necho \"This is my canvas\";\necho $this-&gt;tag-&gt;tagHtmlClose(\"canvas\");\n</pre> <p>Volt syntax:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{# Generate\n&lt;canvas id=\"canvas1\" width=\"300\" class=\"cnvclass\"&gt;\nThis is my canvas\n&lt;/canvas&gt; #}\n{{ tag_html(\"canvas\", [\"id\": \"canvas1\", width\": \"300\", \"class\": \"cnvclass\"], false, true, true) }}\n    This is my canvas\n{{ tag_html_close(\"canvas\") }}\n</pre>    <h2 id=\"tag-service\">Tag Service</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_tag\"><em>Phalcon\\Tag</em></a> is available via the ‘tag’ service, this means you can access it from any part of the application where the services container is located:</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php echo $this-&gt;tag-&gt;linkTo('pages/about', 'About') ?&gt;\n</pre> <p>You can easily add new helpers to a custom component replacing the service ‘tag’ in the services container:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Tag;\n\nclass MyTags extends Tag\n{\n    // ...\n\n    // Create a new helper\n    static public function myAmazingHelper($parameters)\n    {\n        // ...\n    }\n\n    // Override an existing method\n    static public function textField($parameters)\n    {\n        // ...\n    }\n}\n</pre> <p>Then change the definition of the service ‘tag’:</p> <pre class=\"highlight-php\" data-language=\"php\">$di['tag'] = function () {\n    return new MyTags();\n};\n</pre>   <h2 id=\"creating-your-own-helpers\">Creating your own helpers</h2> <p>You can easily create your own helpers. First, start by creating a new folder within the same directory as your controllers and models. Give it a title that is relative to what you are creating. For our example here, we can call it “customhelpers”. Next we will create a new file titled <code class=\"docutils literal\"><span class=\"pre\">MyTags.php</span></code> within this new directory. At this point, we have a structure that looks similar to : <code class=\"docutils literal\"><span class=\"pre\">/app/customhelpers/MyTags.php</span></code>. In <code class=\"docutils literal\"><span class=\"pre\">MyTags.php</span></code>, we will extend the <a class=\"reference internal\" href=\"../api/phalcon_tag\"><em>Phalcon\\Tag</em></a> and implement your own helper. Below is a simple example of a custom helper:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Tag;\n\nclass MyTags extends Tag\n{\n    /**\n     * Generates a widget to show a HTML5 audio tag\n     *\n     * @param array\n     * @return string\n     */\n    static public function audioField($parameters)\n    {\n        // Converting parameters to array if it is not\n        if (!is_array($parameters)) {\n            $parameters = array($parameters);\n        }\n\n        // Determining attributes \"id\" and \"name\"\n        if (!isset($parameters[0])) {\n            $parameters[0] = $parameters[\"id\"];\n        }\n\n        $id = $parameters[0];\n        if (!isset($parameters[\"name\"])) {\n            $parameters[\"name\"] = $id;\n        } else {\n            if (!$parameters[\"name\"]) {\n                $parameters[\"name\"] = $id;\n            }\n        }\n\n        // Determining widget value,\n        // \\Phalcon\\Tag::setDefault() allows to set the widget value\n        if (isset($parameters[\"value\"])) {\n            $value = $parameters[\"value\"];\n            unset($parameters[\"value\"]);\n        } else {\n            $value = self::getValue($id);\n        }\n\n        // Generate the tag code\n        $code = '&lt;audio id=\"'.$id.'\" value=\"'.$value.'\" ';\n        foreach ($parameters as $key =&gt; $attributeValue) {\n            if (!is_integer($key)) {\n                $code.= $key.'=\"'.$attributeValue.'\" ';\n            }\n        }\n        $code.=\" /&gt;\";\n\n        return $code;\n    }\n}\n</pre> <p>After creating our custom helper, we will autoload the new directory that contains our helper class from our “index.php” located in the public directory.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Loader;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Di\\FactoryDefault();\nuse Phalcon\\Exception as PhalconException;\n\ntry {\n\n    $loader = new Loader();\n    $loader-&gt;registerDirs(array(\n        '../app/controllers',\n        '../app/models',\n        '../app/customhelpers' // Add the new helpers folder\n    ))-&gt;register();\n\n    $di = new FactoryDefault();\n\n    // Assign our new tag a definition so we can call it\n    $di-&gt;set('MyTags', function () {\n        return new MyTags();\n    });\n\n    $application = new Application($di);\n\n    $response = $application-&gt;handle();\n\n    $response-&gt;send();\n\n} catch (PhalconException $e) {\n    echo \"PhalconException: \", $e-&gt;getMessage();\n}\n</pre> <p>Now you are ready to use your new helper within your views:</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;body&gt;\n\n    &lt;?php\n\n    echo MyTags::audioField(\n        array(\n            'name' =&gt; 'test',\n            'id'   =&gt; 'audio_test',\n            'src'  =&gt; '/path/to/audio.mp3'\n        )\n    );\n\n    ?&gt;\n\n&lt;/body&gt;\n</pre> <p>In next chapter, we’ll talk about <a class=\"reference internal\" href=\"volt\"><em>Volt</em></a> a faster template engine for PHP, where you can use a more friendly syntax for using helpers provided by <a class=\"reference internal\" href=\"../api/phalcon_tag\"><em>Phalcon\\Tag</em></a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/tags.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/tags.html</a>\n  </p>\n</div>\n","reference/request":"<h1 id=\"request-environment\">Request Environment</h1> <p>Every HTTP request (usually originated by a browser) contains additional information regarding the request such as header data, files, variables, etc. A web based application needs to parse that information so as to provide the correct response back to the requester. <a class=\"reference internal\" href=\"../api/phalcon_http_request\"><em>Phalcon\\Http\\Request</em></a> encapsulates the information of the request, allowing you to access it in an object-oriented way.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Http\\Request;\n\n// Getting a request instance\n$request = new Request();\n\n// Check whether the request was made with method POST\nif ($request-&gt;isPost()) {\n    // Check whether the request was made with Ajax\n    if ($request-&gt;isAjax()) {\n        echo \"Request was made using POST and AJAX\";\n    }\n}\n</pre>  <h2 id=\"getting-values\">Getting Values</h2> <p>PHP automatically fills the superglobal arrays <code class=\"code docutils literal\"><span class=\"pre\">$_GET</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">$_POST</span></code> depending on the type of the request. These arrays contain the values present in forms submitted or the parameters sent via the URL. The variables in the arrays are never sanitized and can contain illegal characters or even malicious code, which can lead to <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/SQL_injection\">SQL injection</a> or <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">Cross Site Scripting (XSS)</a> attacks.</p> <p><a class=\"reference internal\" href=\"../api/phalcon_http_request\"><em>Phalcon\\Http\\Request</em></a> allows you to access the values stored in the <code class=\"code docutils literal\"><span class=\"pre\">$_REQUEST</span></code>, <code class=\"code docutils literal\"><span class=\"pre\">$_GET</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">$_POST</span></code> arrays and sanitize or filter them with the ‘filter’ service, (by default <a class=\"reference internal\" href=\"filter\"><em>Phalcon\\Filter</em></a>). The following examples offer the same behavior:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Filter;\n\n// Manually applying the filter\n$filter = new Filter();\n$email  = $filter-&gt;sanitize($_POST[\"user_email\"], \"email\");\n\n// Manually applying the filter to the value\n$filter = new Filter();\n$email  = $filter-&gt;sanitize($request-&gt;getPost(\"user_email\"), \"email\");\n\n// Automatically applying the filter\n$email = $request-&gt;getPost(\"user_email\", \"email\");\n\n// Setting a default value if the param is null\n$email = $request-&gt;getPost(\"user_email\", \"email\", \"[email protected]\");\n\n// Setting a default value if the param is null without filtering\n$email = $request-&gt;getPost(\"user_email\", null, \"[email protected]\");\n</pre>   <h2 id=\"accessing-the-request-from-controllers\">Accessing the Request from Controllers</h2> <p>The most common place to access the request environment is in an action of a controller. To access the <a class=\"reference internal\" href=\"../api/phalcon_http_request\"><em>Phalcon\\Http\\Request</em></a> object from a controller you will need to use the <code class=\"code docutils literal\"><span class=\"pre\">$this-&gt;request</span></code> public property of the controller:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Check if request has made with POST\n        if ($this-&gt;request-&gt;isPost()) {\n\n            // Access POST data\n            $customerName = $this-&gt;request-&gt;getPost(\"name\");\n            $customerBorn = $this-&gt;request-&gt;getPost(\"born\");\n\n        }\n    }\n}\n</pre>   <h2 id=\"uploading-files\">Uploading Files</h2> <p>Another common task is file uploading. <a class=\"reference internal\" href=\"../api/phalcon_http_request\"><em>Phalcon\\Http\\Request</em></a> offers an object-oriented way to achieve this task:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function uploadAction()\n    {\n        // Check if the user has uploaded files\n        if ($this-&gt;request-&gt;hasFiles()) {\n\n            // Print the real file names and sizes\n            foreach ($this-&gt;request-&gt;getUploadedFiles() as $file) {\n\n                // Print file details\n                echo $file-&gt;getName(), \" \", $file-&gt;getSize(), \"\\n\";\n\n                // Move the file into the application\n                $file-&gt;moveTo('files/' . $file-&gt;getName());\n            }\n        }\n    }\n}\n</pre> <p>Each object returned by <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Http\\Request::getUploadedFiles()</span></code> is an instance of the <a class=\"reference internal\" href=\"../api/phalcon_http_request_file\"><em>Phalcon\\Http\\Request\\File</em></a> class. Using the <code class=\"code docutils literal\"><span class=\"pre\">$_FILES</span></code> superglobal array offers the same behavior. <a class=\"reference internal\" href=\"../api/phalcon_http_request_file\"><em>Phalcon\\Http\\Request\\File</em></a> encapsulates only the information related to each file uploaded with the request.</p>   <h2 id=\"working-with-headers\">Working with Headers</h2> <p>As mentioned above, request headers contain useful information that allow us to send the proper response back to the user. The following examples show usages of that information:</p> <pre class=\"highlight-php\" data-language=\"php\">// Get the Http-X-Requested-With header\n$requestedWith = $request-&gt;getHeader(\"HTTP_X_REQUESTED_WITH\");\nif ($requestedWith == \"XMLHttpRequest\") {\n    echo \"The request was made with Ajax\";\n}\n\n// Same as above\nif ($request-&gt;isAjax()) {\n    echo \"The request was made with Ajax\";\n}\n\n// Check the request layer\nif ($request-&gt;isSecureRequest()) {\n    echo \"The request was made using a secure layer\";\n}\n\n// Get the servers's IP address. ie. 192.168.0.100\n$ipAddress   = $request-&gt;getServerAddress();\n\n// Get the client's IP address ie. 201.245.53.51\n$ipAddress   = $request-&gt;getClientAddress();\n\n// Get the User Agent (HTTP_USER_AGENT)\n$userAgent   = $request-&gt;getUserAgent();\n\n// Get the best acceptable content by the browser. ie text/xml\n$contentType = $request-&gt;getAcceptableContent();\n\n// Get the best charset accepted by the browser. ie. utf-8\n$charset     = $request-&gt;getBestCharset();\n\n// Get the best language accepted configured in the browser. ie. en-us\n$language    = $request-&gt;getBestLanguage();\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/request.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/request.html</a>\n  </p>\n</div>\n","reference/phql":"<h1 id=\"phalcon-query-language-phql\">Phalcon Query Language (PHQL)</h1> <p>Phalcon Query Language, PhalconQL or simply PHQL is a high-level, object-oriented SQL dialect that allows to write queries using a standardized SQL-like language. PHQL is implemented as a parser (written in C) that translates syntax in that of the target RDBMS.</p> <p>To achieve the highest performance possible, Phalcon provides a parser that uses the same technology as <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Lemon_Parser_Generator\">SQLite</a>. This technology provides a small in-memory parser with a very low memory footprint that is also thread-safe.</p> <p>The parser first checks the syntax of the pass PHQL statement, then builds an intermediate representation of the statement and finally it converts it to the respective SQL dialect of the target RDBMS.</p> <p>In PHQL, we’ve implemented a set of features to make your access to databases more secure:</p> <ul class=\"simple\"> <li>Bound parameters are part of the PHQL language helping you to secure your code</li> <li>PHQL only allows one SQL statement to be executed per call preventing injections</li> <li>PHQL ignores all SQL comments which are often used in SQL injections</li> <li>PHQL only allows data manipulation statements, avoiding altering or dropping tables/databases by mistake or externally without authorization</li> <li>PHQL implements a high-level abstraction allowing you to handle tables as models and fields as class attributes</li> </ul>  <h2 id=\"usage-example\">Usage Example</h2> <p>To better explain how PHQL works consider the following example. We have two models “Cars” and “Brands”:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Cars extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $brand_id;\n\n    public $price;\n\n    public $year;\n\n    public $style;\n\n    /**\n     * This model is mapped to the table sample_cars\n     */\n    public function getSource()\n    {\n        return 'sample_cars';\n    }\n\n    /**\n     * A car only has a Brand, but a Brand have many Cars\n     */\n    public function initialize()\n    {\n        $this-&gt;belongsTo('brand_id', 'Brands', 'id');\n    }\n}\n</pre> <p>And every Car has a Brand, so a Brand has many Cars:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Brands extends Model\n{\n    public $id;\n\n    public $name;\n\n    /**\n     * The model Brands is mapped to the \"sample_brands\" table\n     */\n    public function getSource()\n    {\n        return 'sample_brands';\n    }\n\n    /**\n     * A Brand can have many Cars\n     */\n    public function initialize()\n    {\n        $this-&gt;hasMany('id', 'Cars', 'brand_id');\n    }\n}\n</pre>   <h2 id=\"creating-phql-queries\">Creating PHQL Queries</h2> <p>PHQL queries can be created just by instantiating the class <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_query\"><em>Phalcon\\Mvc\\Model\\Query</em></a>:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Query;\n\n// Instantiate the Query\n$query = new Query(\"SELECT * FROM Cars\", $this-&gt;getDI());\n\n// Execute the query returning a result if any\n$cars = $query-&gt;execute();\n</pre> <p>From a controller or a view, it’s easy to create/execute them using an injected <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_manager\"><em>models manager</em></a>:</p> <pre class=\"highlight-php\" data-language=\"php\">// Executing a simple query\n$query = $this-&gt;modelsManager-&gt;createQuery(\"SELECT * FROM Cars\");\n$cars  = $query-&gt;execute();\n\n// With bound parameters\n$query = $this-&gt;modelsManager-&gt;createQuery(\"SELECT * FROM Cars WHERE name = :name:\");\n$cars  = $query-&gt;execute(\n    array(\n        'name' =&gt; 'Audi'\n    )\n);\n</pre> <p>Or simply execute it:</p> <pre class=\"highlight-php\" data-language=\"php\">// Executing a simple query\n$cars = $this-&gt;modelsManager-&gt;executeQuery(\"SELECT * FROM Cars\");\n\n// Executing with bound parameters\n$cars = $this-&gt;modelsManager-&gt;executeQuery(\"SELECT * FROM Cars WHERE name = :name:\", array(\n    'name' =&gt; 'Audi'\n));\n</pre>   <h2 id=\"selecting-records\">Selecting Records</h2> <p>As the familiar SQL, PHQL allows querying of records using the SELECT statement we know, except that instead of specifying tables, we use the models classes:</p> <pre class=\"highlight-php\" data-language=\"php\">$query = $manager-&gt;createQuery(\"SELECT * FROM Cars ORDER BY Cars.name\");\n$query = $manager-&gt;createQuery(\"SELECT Cars.name FROM Cars ORDER BY Cars.name\");\n</pre> <p>Classes in namespaces are also allowed:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql  = \"SELECT * FROM Formula\\Cars ORDER BY Formula\\Cars.name\";\n$query = $manager-&gt;createQuery($phql);\n\n$phql  = \"SELECT Formula\\Cars.name FROM Formula\\Cars ORDER BY Formula\\Cars.name\";\n$query = $manager-&gt;createQuery($phql);\n\n$phql  = \"SELECT c.name FROM Formula\\Cars c ORDER BY c.name\";\n$query = $manager-&gt;createQuery($phql);\n</pre> <p>Most of the SQL standard is supported by PHQL, even nonstandard directives such as LIMIT:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql   = \"SELECT c.name FROM Cars AS c \"\n   . \"WHERE c.brand_id = 21 ORDER BY c.name LIMIT 100\";\n$query = $manager-&gt;createQuery($phql);\n</pre>  <h3 id=\"result-types\">Result Types</h3> <p>Depending on the type of columns we query, the result type will vary. If you retrieve a single whole object, then the object returned is a <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_resultset_simple\"><em>Phalcon\\Mvc\\Model\\Resultset\\Simple</em></a>. This kind of resultset is a set of complete model objects:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql = \"SELECT c.* FROM Cars AS c ORDER BY c.name\";\n$cars = $manager-&gt;executeQuery($phql);\nforeach ($cars as $car) {\n    echo \"Name: \", $car-&gt;name, \"\\n\";\n}\n</pre> <p>This is exactly the same as:</p> <pre class=\"highlight-php\" data-language=\"php\">$cars = Cars::find(\n    array(\n        \"order\" =&gt; \"name\"\n    )\n);\n\nforeach ($cars as $car) {\n    echo \"Name: \", $car-&gt;name, \"\\n\";\n}\n</pre> <p>Complete objects can be modified and re-saved in the database because they represent a complete record of the associated table. There are other types of queries that do not return complete objects, for example:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql = \"SELECT c.id, c.name FROM Cars AS c ORDER BY c.name\";\n$cars = $manager-&gt;executeQuery($phql);\nforeach ($cars as $car) {\n    echo \"Name: \", $car-&gt;name, \"\\n\";\n}\n</pre> <p>We are only requesting some fields in the table, therefore those cannot be considered an entire object, so the returned object is still a resultset of type <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_resultset_simple\"><em>Phalcon\\Mvc\\Model\\Resultset\\Simple</em></a>. However, each element is a standard object that only contain the two columns that were requested.</p> <p>These values that don’t represent complete objects are what we call scalars. PHQL allows you to query all types of scalars: fields, functions, literals, expressions, etc..:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql = \"SELECT CONCAT(c.id, ' ', c.name) AS id_name FROM Cars AS c ORDER BY c.name\";\n$cars = $manager-&gt;executeQuery($phql);\nforeach ($cars as $car) {\n    echo $car-&gt;id_name, \"\\n\";\n}\n</pre> <p>As we can query complete objects or scalars, we can also query both at once:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql   = \"SELECT c.price*0.16 AS taxes, c.* FROM Cars AS c ORDER BY c.name\";\n$result = $manager-&gt;executeQuery($phql);\n</pre> <p>The result in this case is an object <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_resultset_complex\"><em>Phalcon\\Mvc\\Model\\Resultset\\Complex</em></a>. This allows access to both complete objects and scalars at once:</p> <pre class=\"highlight-php\" data-language=\"php\">foreach ($result as $row) {\n    echo \"Name: \", $row-&gt;cars-&gt;name, \"\\n\";\n    echo \"Price: \", $row-&gt;cars-&gt;price, \"\\n\";\n    echo \"Taxes: \", $row-&gt;taxes, \"\\n\";\n}\n</pre> <p>Scalars are mapped as properties of each “row”, while complete objects are mapped as properties with the name of its related model.</p>   <h3 id=\"joins\">Joins</h3> <p>It’s easy to request records from multiple models using PHQL. Most kinds of Joins are supported. As we defined relationships in the models, PHQL adds these conditions automatically:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql = \"SELECT Cars.name AS car_name, Brands.name AS brand_name FROM Cars JOIN Brands\";\n$rows = $manager-&gt;executeQuery($phql);\nforeach ($rows as $row) {\n    echo $row-&gt;car_name, \"\\n\";\n    echo $row-&gt;brand_name, \"\\n\";\n}\n</pre> <p>By default, an INNER JOIN is assumed. You can specify the type of JOIN in the query:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql = \"SELECT Cars.*, Brands.* FROM Cars INNER JOIN Brands\";\n$rows = $manager-&gt;executeQuery($phql);\n\n$phql = \"SELECT Cars.*, Brands.* FROM Cars LEFT JOIN Brands\";\n$rows = $manager-&gt;executeQuery($phql);\n\n$phql = \"SELECT Cars.*, Brands.* FROM Cars LEFT OUTER JOIN Brands\";\n$rows = $manager-&gt;executeQuery($phql);\n\n$phql = \"SELECT Cars.*, Brands.* FROM Cars CROSS JOIN Brands\";\n$rows = $manager-&gt;executeQuery($phql);\n</pre> <p>It is also possible to manually set the conditions of the JOIN:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql = \"SELECT Cars.*, Brands.* FROM Cars INNER JOIN Brands ON Brands.id = Cars.brands_id\";\n$rows = $manager-&gt;executeQuery($phql);\n</pre> <p>Also, the joins can be created using multiple tables in the FROM clause:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql = \"SELECT Cars.*, Brands.* FROM Cars, Brands WHERE Brands.id = Cars.brands_id\";\n$rows = $manager-&gt;executeQuery($phql);\nforeach ($rows as $row) {\n    echo \"Car: \", $row-&gt;cars-&gt;name, \"\\n\";\n    echo \"Brand: \", $row-&gt;brands-&gt;name, \"\\n\";\n}\n</pre> <p>If an alias is used to rename the models in the query, those will be used to name the attributes in the every row of the result:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql = \"SELECT c.*, b.* FROM Cars c, Brands b WHERE b.id = c.brands_id\";\n$rows = $manager-&gt;executeQuery($phql);\nforeach ($rows as $row) {\n    echo \"Car: \", $row-&gt;c-&gt;name, \"\\n\";\n    echo \"Brand: \", $row-&gt;b-&gt;name, \"\\n\";\n}\n</pre> <p>When the joined model has a many-to-many relation to the ‘from’ model, the intermediate model is implicitly added to the generated query:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql = 'SELECT Artists.name, Songs.name FROM Artists ' .\n        'JOIN Songs WHERE Artists.genre = \"Trip-Hop\"';\n$result = $this-&gt;modelsManager-&gt;executeQuery($phql);\n</pre> <p>This code executes the following SQL in MySQL:</p> <pre class=\"highlight-sql\" data-language=\"sql\">SELECT `artists`.`name`, `songs`.`name` FROM `artists`\nINNER JOIN `albums` ON `albums`.`artists_id` = `artists`.`id`\nINNER JOIN `songs` ON `albums`.`songs_id` = `songs`.`id`\nWHERE `artists`.`genre` = 'Trip-Hop'\n</pre>   <h3 id=\"aggregations\">Aggregations</h3> <p>The following examples show how to use aggregations in PHQL:</p> <pre class=\"highlight-php\" data-language=\"php\">// How much are the prices of all the cars?\n$phql = \"SELECT SUM(price) AS summatory FROM Cars\";\n$row  = $manager-&gt;executeQuery($phql)-&gt;getFirst();\necho $row['summatory'];\n\n// How many cars are by each brand?\n$phql = \"SELECT Cars.brand_id, COUNT(*) FROM Cars GROUP BY Cars.brand_id\";\n$rows = $manager-&gt;executeQuery($phql);\nforeach ($rows as $row) {\n    echo $row-&gt;brand_id, ' ', $row[\"1\"], \"\\n\";\n}\n\n// How many cars are by each brand?\n$phql = \"SELECT Brands.name, COUNT(*) FROM Cars JOIN Brands GROUP BY 1\";\n$rows = $manager-&gt;executeQuery($phql);\nforeach ($rows as $row) {\n    echo $row-&gt;name, ' ', $row[\"1\"], \"\\n\";\n}\n\n$phql = \"SELECT MAX(price) AS maximum, MIN(price) AS minimum FROM Cars\";\n$rows = $manager-&gt;executeQuery($phql);\nforeach ($rows as $row) {\n    echo $row[\"maximum\"], ' ', $row[\"minimum\"], \"\\n\";\n}\n\n// Count distinct used brands\n$phql = \"SELECT COUNT(DISTINCT brand_id) AS brandId FROM Cars\";\n$rows = $manager-&gt;executeQuery($phql);\nforeach ($rows as $row) {\n    echo $row-&gt;brandId, \"\\n\";\n}\n</pre>   <h3 id=\"conditions\">Conditions</h3> <p>Conditions allow us to filter the set of records we want to query. The WHERE clause allows to do that:</p> <pre class=\"highlight-php\" data-language=\"php\">// Simple conditions\n$phql = \"SELECT * FROM Cars WHERE Cars.name = 'Lamborghini Espada'\";\n$cars = $manager-&gt;executeQuery($phql);\n\n$phql = \"SELECT * FROM Cars WHERE Cars.price &gt; 10000\";\n$cars = $manager-&gt;executeQuery($phql);\n\n$phql = \"SELECT * FROM Cars WHERE TRIM(Cars.name) = 'Audi R8'\";\n$cars = $manager-&gt;executeQuery($phql);\n\n$phql = \"SELECT * FROM Cars WHERE Cars.name LIKE 'Ferrari%'\";\n$cars = $manager-&gt;executeQuery($phql);\n\n$phql = \"SELECT * FROM Cars WHERE Cars.name NOT LIKE 'Ferrari%'\";\n$cars = $manager-&gt;executeQuery($phql);\n\n$phql = \"SELECT * FROM Cars WHERE Cars.price IS NULL\";\n$cars = $manager-&gt;executeQuery($phql);\n\n$phql = \"SELECT * FROM Cars WHERE Cars.id IN (120, 121, 122)\";\n$cars = $manager-&gt;executeQuery($phql);\n\n$phql = \"SELECT * FROM Cars WHERE Cars.id NOT IN (430, 431)\";\n$cars = $manager-&gt;executeQuery($phql);\n\n$phql = \"SELECT * FROM Cars WHERE Cars.id BETWEEN 1 AND 100\";\n$cars = $manager-&gt;executeQuery($phql);\n</pre> <p>Also, as part of PHQL, prepared parameters automatically escape the input data, introducing more security:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql = \"SELECT * FROM Cars WHERE Cars.name = :name:\";\n$cars = $manager-&gt;executeQuery($phql, array(\"name\" =&gt; 'Lamborghini Espada'));\n\n$phql = \"SELECT * FROM Cars WHERE Cars.name = ?0\";\n$cars = $manager-&gt;executeQuery($phql, array(0 =&gt; 'Lamborghini Espada'));\n</pre>    <h2 id=\"inserting-data\">Inserting Data</h2> <p>With PHQL it’s possible to insert data using the familiar INSERT statement:</p> <pre class=\"highlight-php\" data-language=\"php\">// Inserting without columns\n$phql = \"INSERT INTO Cars VALUES (NULL, 'Lamborghini Espada', \"\n      . \"7, 10000.00, 1969, 'Grand Tourer')\";\n$manager-&gt;executeQuery($phql);\n\n// Specifying columns to insert\n$phql = \"INSERT INTO Cars (name, brand_id, year, style) \"\n      . \"VALUES ('Lamborghini Espada', 7, 1969, 'Grand Tourer')\";\n$manager-&gt;executeQuery($phql);\n\n// Inserting using placeholders\n$phql = \"INSERT INTO Cars (name, brand_id, year, style) \"\n      . \"VALUES (:name:, :brand_id:, :year:, :style)\";\n$manager-&gt;executeQuery(\n    $phql,\n    array(\n        'name'     =&gt; 'Lamborghini Espada',\n        'brand_id' =&gt; 7,\n        'year'     =&gt; 1969,\n        'style'    =&gt; 'Grand Tourer',\n    )\n);\n</pre> <p>Phalcon doesn’t only transform the PHQL statements into SQL. All events and business rules defined in the model are executed as if we created individual objects manually. Let’s add a business rule on the model cars. A car cannot cost less than $ 10,000:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Message;\n\nclass Cars extends Model\n{\n    public function beforeCreate()\n    {\n        if ($this-&gt;price &lt; 10000) {\n            $this-&gt;appendMessage(new Message(\"A car cannot cost less than $ 10,000\"));\n            return false;\n        }\n    }\n}\n</pre> <p>If we made the following INSERT in the models Cars, the operation will not be successful because the price does not meet the business rule that we implemented. By checking the status of the insertion we can print any validation messages generated internally:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql   = \"INSERT INTO Cars VALUES (NULL, 'Nissan Versa', 7, 9999.00, 2015, 'Sedan')\";\n$result = $manager-&gt;executeQuery($phql);\nif ($result-&gt;success() == false) {\n    foreach ($result-&gt;getMessages() as $message) {\n        echo $message-&gt;getMessage();\n    }\n}\n</pre>   <h2 id=\"updating-data\">Updating Data</h2> <p>Updating rows is very similar than inserting rows. As you may know, the instruction to update records is UPDATE. When a record is updated the events related to the update operation will be executed for each row.</p> <pre class=\"highlight-php\" data-language=\"php\">// Updating a single column\n$phql = \"UPDATE Cars SET price = 15000.00 WHERE id = 101\";\n$manager-&gt;executeQuery($phql);\n\n// Updating multiples columns\n$phql = \"UPDATE Cars SET price = 15000.00, type = 'Sedan' WHERE id = 101\";\n$manager-&gt;executeQuery($phql);\n\n// Updating multiples rows\n$phql = \"UPDATE Cars SET price = 7000.00, type = 'Sedan' WHERE brands_id &gt; 5\";\n$manager-&gt;executeQuery($phql);\n\n// Using placeholders\n$phql = \"UPDATE Cars SET price = ?0, type = ?1 WHERE brands_id &gt; ?2\";\n$manager-&gt;executeQuery(\n    $phql,\n    array(\n        0 =&gt; 7000.00,\n        1 =&gt; 'Sedan',\n        2 =&gt; 5\n    )\n);\n</pre> <p>An UPDATE statement performs the update in two phases:</p> <ul class=\"simple\"> <li>First, if the UPDATE has a WHERE clause it retrieves all the objects that match these criteria,</li> <li>Second, based on the queried objects it updates/changes the requested attributes storing them to the relational database</li> </ul> <p>This way of operation allows that events, virtual foreign keys and validations take part of the updating process. In summary, the following code:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql   = \"UPDATE Cars SET price = 15000.00 WHERE id &gt; 101\";\n$result = $manager-&gt;executeQuery($phql);\nif ($result-&gt;success() == false) {\n    foreach ($result-&gt;getMessages() as $message) {\n        echo $message-&gt;getMessage();\n    }\n}\n</pre> <p>is somewhat equivalent to:</p> <pre class=\"highlight-php\" data-language=\"php\">$messages = null;\n\n$process  = function () use (&amp;$messages) {\n    foreach (Cars::find(\"id &gt; 101\") as $car) {\n        $car-&gt;price = 15000;\n        if ($car-&gt;save() == false) {\n            $messages = $car-&gt;getMessages();\n            return false;\n        }\n    }\n    return true;\n};\n\n$success = $process();\n</pre>   <h2 id=\"deleting-data\">Deleting Data</h2> <p>When a record is deleted the events related to the delete operation will be executed for each row:</p> <pre class=\"highlight-php\" data-language=\"php\">// Deleting a single row\n$phql = \"DELETE FROM Cars WHERE id = 101\";\n$manager-&gt;executeQuery($phql);\n\n// Deleting multiple rows\n$phql = \"DELETE FROM Cars WHERE id &gt; 100\";\n$manager-&gt;executeQuery($phql);\n\n// Using placeholders\n$phql = \"DELETE FROM Cars WHERE id BETWEEN :initial: AND :final:\";\n$manager-&gt;executeQuery(\n    $phql,\n    array(\n        'initial' =&gt; 1,\n        'final'   =&gt; 100\n    )\n);\n</pre> <p>DELETE operations are also executed in two phases like UPDATEs. To check if the deletion produces any validation messages you should check the status code returned:</p> <pre class=\"highlight-php\" data-language=\"php\">// Deleting multiple rows\n$phql = \"DELETE FROM Cars WHERE id &gt; 100\";\n$result = $manager-&gt;executeQuery($phql);\nif ($result-&gt;success() == false) {\n    foreach ($result-&gt;getMessages() as $message) {\n        echo $message-&gt;getMessage();\n    }\n}\n</pre>   <h2 id=\"creating-queries-using-the-query-builder\">Creating queries using the Query Builder</h2> <p>A builder is available to create PHQL queries without the need to write PHQL statements, also providing IDE facilities:</p> <pre class=\"highlight-php\" data-language=\"php\">// Getting a whole set\n$robots = $this-&gt;modelsManager-&gt;createBuilder()\n    -&gt;from('Robots')\n    -&gt;join('RobotsParts')\n    -&gt;orderBy('Robots.name')\n    -&gt;getQuery()\n    -&gt;execute();\n\n// Getting the first row\n$robots = $this-&gt;modelsManager-&gt;createBuilder()\n    -&gt;from('Robots')\n    -&gt;join('RobotsParts')\n    -&gt;orderBy('Robots.name')\n    -&gt;getQuery()\n    -&gt;getSingleResult();\n</pre> <p>That is the same as:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql   = \"SELECT Robots.* FROM Robots JOIN RobotsParts p\n    ORDER BY Robots.name LIMIT 20\";\n$result = $manager-&gt;executeQuery($phql);\n</pre> <p>More examples of the builder:</p> <pre class=\"highlight-php\" data-language=\"php\">// 'SELECT Robots.* FROM Robots';\n$builder-&gt;from('Robots');\n\n// 'SELECT Robots.*, RobotsParts.* FROM Robots, RobotsParts';\n$builder-&gt;from(\n    array(\n        'Robots',\n        'RobotsParts'\n    )\n);\n\n// 'SELECT * FROM Robots';\n$phql = $builder-&gt;columns('*')\n                -&gt;from('Robots');\n\n// 'SELECT id FROM Robots';\n$builder-&gt;columns('id')\n        -&gt;from('Robots');\n\n// 'SELECT id, name FROM Robots';\n$builder-&gt;columns(array('id', 'name'))\n        -&gt;from('Robots');\n\n// 'SELECT Robots.* FROM Robots WHERE Robots.name = \"Voltron\"';\n$builder-&gt;from('Robots')\n        -&gt;where('Robots.name = \"Voltron\"');\n\n// 'SELECT Robots.* FROM Robots WHERE Robots.id = 100';\n$builder-&gt;from('Robots')\n        -&gt;where(100);\n\n// 'SELECT Robots.* FROM Robots WHERE Robots.type = \"virtual\" AND Robots.id &gt; 50';\n$builder-&gt;from('Robots')\n        -&gt;where('type = \"virtual\"')\n        -&gt;andWhere('id &gt; 50');\n\n// 'SELECT Robots.* FROM Robots WHERE Robots.type = \"virtual\" OR Robots.id &gt; 50';\n$builder-&gt;from('Robots')\n        -&gt;where('type = \"virtual\"')\n        -&gt;orWhere('id &gt; 50');\n\n// 'SELECT Robots.* FROM Robots GROUP BY Robots.name';\n$builder-&gt;from('Robots')\n        -&gt;groupBy('Robots.name');\n\n// 'SELECT Robots.* FROM Robots GROUP BY Robots.name, Robots.id';\n$builder-&gt;from('Robots')\n        -&gt;groupBy(array('Robots.name', 'Robots.id'));\n\n// 'SELECT Robots.name, SUM(Robots.price) FROM Robots GROUP BY Robots.name';\n$builder-&gt;columns(array('Robots.name', 'SUM(Robots.price)'))\n    -&gt;from('Robots')\n    -&gt;groupBy('Robots.name');\n\n// 'SELECT Robots.name, SUM(Robots.price) FROM Robots GROUP BY Robots.name HAVING SUM(Robots.price) &gt; 1000';\n$builder-&gt;columns(array('Robots.name', 'SUM(Robots.price)'))\n    -&gt;from('Robots')\n    -&gt;groupBy('Robots.name')\n    -&gt;having('SUM(Robots.price) &gt; 1000');\n\n// 'SELECT Robots.* FROM Robots JOIN RobotsParts';\n$builder-&gt;from('Robots')\n    -&gt;join('RobotsParts');\n\n// 'SELECT Robots.* FROM Robots JOIN RobotsParts AS p';\n$builder-&gt;from('Robots')\n    -&gt;join('RobotsParts', null, 'p');\n\n// 'SELECT Robots.* FROM Robots JOIN RobotsParts ON Robots.id = RobotsParts.robots_id AS p';\n$builder-&gt;from('Robots')\n    -&gt;join('RobotsParts', 'Robots.id = RobotsParts.robots_id', 'p');\n\n// 'SELECT Robots.* FROM Robots\n// JOIN RobotsParts ON Robots.id = RobotsParts.robots_id AS p\n// JOIN Parts ON Parts.id = RobotsParts.parts_id AS t';\n$builder-&gt;from('Robots')\n    -&gt;join('RobotsParts', 'Robots.id = RobotsParts.robots_id', 'p')\n    -&gt;join('Parts', 'Parts.id = RobotsParts.parts_id', 't');\n\n// 'SELECT r.* FROM Robots AS r';\n$builder-&gt;addFrom('Robots', 'r');\n\n// 'SELECT Robots.*, p.* FROM Robots, Parts AS p';\n$builder-&gt;from('Robots')\n    -&gt;addFrom('Parts', 'p');\n\n// 'SELECT r.*, p.* FROM Robots AS r, Parts AS p';\n$builder-&gt;from(array('r' =&gt; 'Robots'))\n        -&gt;addFrom('Parts', 'p');\n\n// 'SELECT r.*, p.* FROM Robots AS r, Parts AS p';\n$builder-&gt;from(array('r' =&gt; 'Robots', 'p' =&gt; 'Parts'));\n\n// 'SELECT Robots.* FROM Robots LIMIT 10';\n$builder-&gt;from('Robots')\n    -&gt;limit(10);\n\n// 'SELECT Robots.* FROM Robots LIMIT 10 OFFSET 5';\n$builder-&gt;from('Robots')\n        -&gt;limit(10, 5);\n\n// 'SELECT Robots.* FROM Robots WHERE id BETWEEN 1 AND 100';\n$builder-&gt;from('Robots')\n        -&gt;betweenWhere('id', 1, 100);\n\n// 'SELECT Robots.* FROM Robots WHERE id IN (1, 2, 3)';\n$builder-&gt;from('Robots')\n        -&gt;inWhere('id', array(1, 2, 3));\n\n// 'SELECT Robots.* FROM Robots WHERE id NOT IN (1, 2, 3)';\n$builder-&gt;from('Robots')\n        -&gt;notInWhere('id', array(1, 2, 3));\n\n// 'SELECT Robots.* FROM Robots WHERE name LIKE '%Art%';\n$builder-&gt;from('Robots')\n        -&gt;where('name LIKE :name:', array('name' =&gt; '%' . $name . '%'));\n\n// 'SELECT r.* FROM Store\\Robots WHERE r.name LIKE '%Art%';\n$builder-&gt;from(['r' =&gt; 'Store\\Robots'])\n        -&gt;where('r.name LIKE :name:', array('name' =&gt; '%' . $name . '%'));\n</pre>  <h3 id=\"bound-parameters\">Bound Parameters</h3> <p>Bound parameters in the query builder can be set as the query is constructed or past all at once when executing:</p> <pre class=\"highlight-php\" data-language=\"php\">// Passing parameters in the query construction\n$robots = $this-&gt;modelsManager-&gt;createBuilder()\n    -&gt;from('Robots')\n    -&gt;where('name = :name:', array('name' =&gt; $name))\n    -&gt;andWhere('type = :type:', array('type' =&gt; $type))\n    -&gt;getQuery()\n    -&gt;execute();\n\n// Passing parameters in query execution\n$robots = $this-&gt;modelsManager-&gt;createBuilder()\n    -&gt;from('Robots')\n    -&gt;where('name = :name:')\n    -&gt;andWhere('type = :type:')\n    -&gt;getQuery()\n    -&gt;execute(array('name' =&gt; $name, 'type' =&gt; $type));\n</pre>    <h2 id=\"disallow-literals-in-phql\">Disallow literals in PHQL</h2> <p>Literals can be disabled in PHQL, this means that directly using strings, numbers and boolean values in PHQL strings will be disallowed. If PHQL statements are created embedding external data on them, this could open the application to potential SQL injections:</p> <pre class=\"highlight-php\" data-language=\"php\">$login  = 'voltron';\n$phql   = \"SELECT * FROM Models\\Users WHERE login = '$login'\";\n$result = $manager-&gt;executeQuery($phql);\n</pre> <p>If <code class=\"code docutils literal\"><span class=\"pre\">$login</span></code> is changed to <code class=\"code docutils literal\"><span class=\"pre\">'</span> <span class=\"pre\">OR</span> <span class=\"pre\">''</span> <span class=\"pre\">=</span> <span class=\"pre\">'</span></code>, the produced PHQL is:</p> <pre class=\"highlight-sql\" data-language=\"sql\">SELECT * FROM Models\\Users WHERE login = '' OR '' = ''\n</pre> <p>Which is always true no matter what the login stored in the database is.</p> <p>If literals are disallowed strings can be used as part of a PHQL statement, thus an exception will be thrown forcing the developer to use bound parameters. The same query can be written in a secure way like this:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql   = \"SELECT Robots.* FROM Robots WHERE Robots.name = :name:\";\n$result = $manager-&gt;executeQuery($phql, array('name' =&gt; $name));\n</pre> <p>You can disallow literals in the following way:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nModel::setup(\n    array(\n        'phqlLiterals' =&gt; false\n    )\n);\n</pre> <p>Bound parameters can be used even if literals are allowed or not. Disallowing them is just another security decision a developer could take in web applications.</p>   <h2 id=\"escaping-reserved-words\">Escaping Reserved Words</h2> <p>PHQL has a few reserved words, if you want to use any of them as attributes or models names, you need to escape those words using the cross-database escaping delimiters ‘[‘ and ‘]’:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql   = \"SELECT * FROM [Update]\";\n$result = $manager-&gt;executeQuery($phql);\n\n$phql   = \"SELECT id, [Like] FROM Posts\";\n$result = $manager-&gt;executeQuery($phql);\n</pre> <p>The delimiters are dynamically translated to valid delimiters depending on the database system where the application is currently running on.</p>   <h2 id=\"phql-lifecycle\">PHQL Lifecycle</h2> <p>Being a high-level language, PHQL gives developers the ability to personalize and customize different aspects in order to suit their needs. The following is the life cycle of each PHQL statement executed:</p> <ul class=\"simple\"> <li>The PHQL is parsed and converted into an Intermediate Representation (IR) which is independent of the SQL implemented by database system</li> <li>The IR is converted to valid SQL according to the database system associated to the model</li> <li>PHQL statements are parsed once and cached in memory. Further executions of the same statement result in a slightly faster execution</li> </ul>   <h2 id=\"using-raw-sql\">Using Raw SQL</h2> <p>A database system could offer specific SQL extensions that aren’t supported by PHQL, in this case, a raw SQL can be appropriate:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Resultset\\Simple as Resultset;\n\nclass Robots extends Model\n{\n    public static function findByCreateInterval()\n    {\n        // A raw SQL statement\n        $sql   = \"SELECT * FROM robots WHERE id &gt; 0\";\n\n        // Base model\n        $robot = new Robots();\n\n        // Execute the query\n        return new Resultset(null, $robot, $robot-&gt;getReadConnection()-&gt;query($sql));\n    }\n}\n</pre> <p>If Raw SQL queries are common in your application a generic method could be added to your model:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Resultset\\Simple as Resultset;\n\nclass Robots extends Model\n{\n    public static function findByRawSql($conditions, $params = null)\n    {\n        // A raw SQL statement\n        $sql   = \"SELECT * FROM robots WHERE $conditions\";\n\n        // Base model\n        $robot = new Robots();\n\n        // Execute the query\n        return new Resultset(null, $robot, $robot-&gt;getReadConnection()-&gt;query($sql, $params));\n    }\n}\n</pre> <p>The above findByRawSql could be used as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">$robots = Robots::findByRawSql('id &gt; ?', array(10));\n</pre>   <h2 id=\"troubleshooting\">Troubleshooting</h2> <p>Some things to keep in mind when using PHQL:</p> <ul class=\"simple\"> <li>Classes are case-sensitive, if a class is not defined with the same name as it was created this could lead to an unexpected behavior in operating systems with case-sensitive file systems such as Linux.</li> <li>Correct charset must be defined in the connection to bind parameters with success.</li> <li>Aliased classes aren’t replaced by full namespaced classes since this only occurs in PHP code and not inside strings.</li> <li>If column renaming is enabled avoid using column aliases with the same name as columns to be renamed, this may confuse the query resolver.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/phql.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/phql.html</a>\n  </p>\n</div>\n","reference/url":"<h1 id=\"generating-urls-and-paths\">Generating URLs and Paths</h1> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_url\"><em>Phalcon\\Mvc\\Url</em></a> is the component responsible of generate URLs in a Phalcon application. It’s capable of produce independent URLs based on routes.</p>  <h2 id=\"setting-a-base-uri\">Setting a base URI</h2> <p>Depending of which directory of your document root your application is installed, it may have a base URI or not.</p> <p>For example, if your document root is /var/www/htdocs and your application is installed in /var/www/htdocs/invo then your baseUri will be /invo/. If you are using a VirtualHost or your application is installed on the document root, then your baseUri is /. Execute the following code to know the base URI detected by Phalcon:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Url;\n\n$url = new Url();\necho $url-&gt;getBaseUri();\n</pre> <p>By default, Phalcon automatically may detect your baseUri, but if you want to increase the performance of your application is recommended setting up it manually:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Url;\n\n$url = new Url();\n\n// Setting a relative base URI\n$url-&gt;setBaseUri('/invo/');\n\n// Setting a full domain as base URI\n$url-&gt;setBaseUri('//my.domain.com/');\n\n// Setting a full domain as base URI\n$url-&gt;setBaseUri('http://my.domain.com/my-app/');\n</pre> <p>Usually, this component must be registered in the Dependency Injector container, so you can set up it there:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Url;\n\n$di-&gt;set('url', function () {\n    $url = new Url();\n    $url-&gt;setBaseUri('/invo/');\n    return $url;\n});\n</pre>   <h2 id=\"generating-uris\">Generating URIs</h2> <p>If you are using the <a class=\"reference internal\" href=\"routing\"><em>Router</em></a> with its default behavior. Your application is able to match routes based on the following pattern: /:controller/:action/:params. Accordingly it is easy to create routes that satisfy that pattern (or any other pattern defined in the router) passing a string to the method “get”:</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php echo $url-&gt;get(\"products/save\"); ?&gt;\n</pre> <p>Note that isn’t necessary to prepend the base URI. If you have named routes you can easily change it creating it dynamically. For Example if you have the following route:</p> <pre class=\"highlight-php\" data-language=\"php\">$route-&gt;add(\n    \"/blog/{year}/{month}/{title}\",\n    array(\n        'controller' =&gt; 'posts',\n        'action'     =&gt; 'show'\n    )\n)-&gt;setName('show-post');\n</pre> <p>A URL can be generated in the following way:</p> <pre class=\"highlight-php\" data-language=\"php\">// This produces: /blog/2015/01/some-blog-post\n$url-&gt;get(\n    array(\n        'for'   =&gt; 'show-post',\n        'year'  =&gt; 2015,\n        'month' =&gt; '01',\n        'title' =&gt; 'some-blog-post'\n    )\n);\n</pre>   <h2 id=\"producing-urls-without-mod-rewrite\">Producing URLs without mod_rewrite</h2> <p>You can use this component also to create URLs without mod_rewrite:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Url;\n\n$url = new Url();\n\n// Pass the URI in $_GET[\"_url\"]\n$url-&gt;setBaseUri('/invo/index.php?_url=/');\n\n// This produce: /invo/index.php?_url=/products/save\necho $url-&gt;get(\"products/save\");\n</pre> <p>You can also use <code class=\"code docutils literal\"><span class=\"pre\">$_SERVER[\"REQUEST_URI\"]</span></code>:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Url;\n\n$url = new Url();\n\n// Pass the URI in $_GET[\"_url\"]\n$url-&gt;setBaseUri('/invo/index.php?_url=/');\n\n// Pass the URI using $_SERVER[\"REQUEST_URI\"]\n$url-&gt;setBaseUri('/invo/index.php/');\n</pre> <p>In this case, it’s necessary to manually handle the required URI in the Router:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n// ... Define routes\n\n$uri = str_replace($_SERVER[\"SCRIPT_NAME\"], '', $_SERVER[\"REQUEST_URI\"]);\n$router-&gt;handle($uri);\n</pre> <p>The produced routes would look like:</p> <pre class=\"highlight-php\" data-language=\"php\">// This produce: /invo/index.php/products/save\necho $url-&gt;get(\"products/save\");\n</pre>   <h2 id=\"producing-urls-from-volt\">Producing URLs from Volt</h2> <p>The function “url” is available in volt to generate URLs using this component:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">&lt;a href=\"{{ url(\"posts/edit/1002\") }}\"&gt;Edit&lt;/a&gt;\n</pre> <p>Generate static routes:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">&lt;link rel=\"stylesheet\" href=\"{{ static_url(\"css/style.css\") }}\" type=\"text/css\" /&gt;\n</pre>   <h2 id=\"static-vs-dynamic-uris\">Static vs. Dynamic URIs</h2> <p>This component allow you to set up a different base URI for static resources in the application:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Url;\n\n$url = new Url();\n\n// Dynamic URIs are\n$url-&gt;setBaseUri('/');\n\n// Static resources go through a CDN\n$url-&gt;setStaticBaseUri('http://static.mywebsite.com/');\n</pre> <p><a class=\"reference internal\" href=\"tags\"><em>Phalcon\\Tag</em></a> will request both dynamical and static URIs using this component.</p>   <h2 id=\"implementing-your-own-url-generator\">Implementing your own URL Generator</h2> <p>The <a class=\"reference internal\" href=\"../api/phalcon_mvc_urlinterface\"><em>Phalcon\\Mvc\\UrlInterface</em></a> interface must be implemented to create your own URL generator replacing the one provided by Phalcon.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/url.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/url.html</a>\n  </p>\n</div>\n","reference/dispatching":"<h1 id=\"dispatching-controllers\">Dispatching Controllers</h1> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_dispatcher\"><em>Phalcon\\Mvc\\Dispatcher</em></a> is the component responsible for instantiating controllers and executing the required actions on them in an MVC application. Understanding its operation and capabilities helps us get more out of the services provided by the framework.</p>  <h2 id=\"the-dispatch-loop\">The Dispatch Loop</h2> <p>This is an important process that has much to do with the MVC flow itself, especially with the controller part. The work occurs within the controller dispatcher. The controller files are read, loaded, and instantiated. Then the required actions are executed. If an action forwards the flow to another controller/action, the controller dispatcher starts again. To better illustrate this, the following example shows approximately the process performed within <a class=\"reference internal\" href=\"../api/phalcon_mvc_dispatcher\"><em>Phalcon\\Mvc\\Dispatcher</em></a>:</p> <pre class=\"highlight-php\" data-language=\"php\">// Dispatch loop\nwhile (!$finished) {\n\n    $finished = true;\n\n    $controllerClass = $controllerName . \"Controller\";\n\n    // Instantiating the controller class via autoloaders\n    $controller = new $controllerClass();\n\n    // Execute the action\n    call_user_func_array(array($controller, $actionName . \"Action\"), $params);\n\n    // '$finished' should be reloaded to check if the flow was forwarded to another controller\n    $finished = true;\n}\n</pre> <p>The code above lacks validations, filters and additional checks, but it demonstrates the normal flow of operation in the dispatcher.</p>  <h3 id=\"dispatch-loop-events\">Dispatch Loop Events</h3> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_dispatcher\"><em>Phalcon\\Mvc\\Dispatcher</em></a> is able to send events to an <a class=\"reference internal\" href=\"events\"><em>EventsManager</em></a> if it is present. Events are triggered using the type “dispatch”. Some events when returning boolean false could stop the active operation. The following events are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"8%\"> <col width=\"76%\"> <col width=\"8%\"> <col width=\"8%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Event Name</th> <th class=\"head\">Triggered</th> <th class=\"head\">Can stop operation?</th> <th class=\"head\">Triggered on</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>beforeDispatchLoop</td> <td>Triggered before entering in the dispatch loop. At this point the dispatcher don’t know if the controller or the actions to be executed exist. The Dispatcher only knows the information passed by the Router.</td> <td>Yes</td> <td>Listeners</td> </tr> <tr class=\"row-odd\">\n<td>beforeDispatch</td> <td>Triggered after entering in the dispatch loop. At this point the dispatcher don’t know if the controller or the actions to be executed exist. The Dispatcher only knows the information passed by the Router.</td> <td>Yes</td> <td>Listeners</td> </tr> <tr class=\"row-even\">\n<td>beforeExecuteRoute</td> <td>Triggered before executing the controller/action method. At this point the dispatcher has been initialized the controller and know if the action exist.</td> <td>Yes</td> <td>Listeners/Controllers</td> </tr> <tr class=\"row-odd\">\n<td>initialize</td> <td>Allow to globally initialize the controller in the request</td> <td>No</td> <td>Controllers</td> </tr> <tr class=\"row-even\">\n<td>afterExecuteRoute</td> <td>Triggered after executing the controller/action method. As operation cannot be stopped, only use this event to make clean up after execute the action</td> <td>No</td> <td>Listeners/Controllers</td> </tr> <tr class=\"row-odd\">\n<td>beforeNotFoundAction</td> <td>Triggered when the action was not found in the controller</td> <td>Yes</td> <td>Listeners</td> </tr> <tr class=\"row-even\">\n<td>beforeException</td> <td>Triggered before the dispatcher throws any exception</td> <td>Yes</td> <td>Listeners</td> </tr> <tr class=\"row-odd\">\n<td>afterDispatch</td> <td>Triggered after executing the controller/action method. As operation cannot be stopped, only use this event to make clean up after execute the action</td> <td>Yes</td> <td>Listeners</td> </tr> <tr class=\"row-even\">\n<td>afterDispatchLoop</td> <td>Triggered after exiting the dispatch loop</td> <td>No</td> <td>Listeners</td> </tr> </tbody> </table> <p>The <a class=\"reference internal\" href=\"tutorial-invo\"><em>INVO</em></a> tutorial shows how to take advantage of dispatching events implementing a security filter with <a class=\"reference internal\" href=\"acl\"><em>Acl</em></a></p> <p>The following example demonstrates how to attach listeners to this component:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di-&gt;set('dispatcher', function () {\n\n    // Create an event manager\n    $eventsManager = new EventsManager();\n\n    // Attach a listener for type \"dispatch\"\n    $eventsManager-&gt;attach(\"dispatch\", function (Event $event, $dispatcher) {\n        // ...\n    });\n\n    $dispatcher = new MvcDispatcher();\n\n    // Bind the eventsManager to the view component\n    $dispatcher-&gt;setEventsManager($eventsManager);\n\n    return $dispatcher;\n\n}, true);\n</pre> <p>An instantiated controller automatically acts as a listener for dispatch events, so you can implement methods as callbacks:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Dispatcher;\n\nclass PostsController extends Controller\n{\n    public function beforeExecuteRoute(Dispatcher $dispatcher)\n    {\n        // Executed before every found action\n    }\n\n    public function afterExecuteRoute(Dispatcher $dispatcher)\n    {\n        // Executed after every found action\n    }\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Methods on event listeners accept an <a class=\"reference internal\" href=\"../api/phalcon_events_event\"><em>Phalcon\\Events\\Event</em></a> object as their first parameter - methods in controllers do not.</p> </div>    <h2 id=\"forwarding-to-other-actions\">Forwarding to other actions</h2> <p>The dispatch loop allows us to forward the execution flow to another controller/action. This is very useful to check if the user can access to certain options, redirect users to other screens or simply reuse code.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction($year, $postTitle)\n    {\n        // ... Store some product and forward the user\n\n        // Forward flow to the index action\n        $this-&gt;dispatcher-&gt;forward(\n            array(\n                \"controller\" =&gt; \"posts\",\n                \"action\"     =&gt; \"index\"\n            )\n        );\n    }\n}\n</pre> <p>Keep in mind that making a “forward” is not the same as making a HTTP redirect. Although they apparently got the same result. The “forward” doesn’t reload the current page, all the redirection occurs in a single request, while the HTTP redirect needs two requests to complete the process.</p> <p>More forwarding examples:</p> <pre class=\"highlight-php\" data-language=\"php\">// Forward flow to another action in the current controller\n$this-&gt;dispatcher-&gt;forward(\n    array(\n        \"action\" =&gt; \"search\"\n    )\n);\n\n// Forward flow to another action in the current controller\n// passing parameters\n$this-&gt;dispatcher-&gt;forward(\n    array(\n        \"action\" =&gt; \"search\",\n        \"params\" =&gt; array(1, 2, 3)\n    )\n);\n</pre> <p>A forward action accepts the following parameters:</p> <table class=\"docutils\"> <colgroup> <col width=\"22%\"> <col width=\"78%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Parameter</th> <th class=\"head\">Triggered</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>controller</td> <td>A valid controller name to forward to.</td> </tr> <tr class=\"row-odd\">\n<td>action</td> <td>A valid action name to forward to.</td> </tr> <tr class=\"row-even\">\n<td>params</td> <td>An array of parameters for the action</td> </tr> <tr class=\"row-odd\">\n<td>namespace</td> <td>A valid namespace name where the controller is part of</td> </tr> </tbody> </table>   <h2 id=\"preparing-parameters\">Preparing Parameters</h2> <p>Thanks to the hooks points provided by <a class=\"reference internal\" href=\"../api/phalcon_mvc_dispatcher\"><em>Phalcon\\Mvc\\Dispatcher</em></a> you can easily adapt your application to any URL schema:</p> <p>For example, you want your URLs look like: <a class=\"reference external\" href=\"http://example.com/controller/key1/value1/key2/value\">http://example.com/controller/key1/value1/key2/value</a></p> <p>Parameters by default are passed as they come in the URL to actions, you can transform them to the desired schema:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Dispatcher;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di-&gt;set('dispatcher', function () {\n\n    // Create an EventsManager\n    $eventsManager = new EventsManager();\n\n    // Attach a listener\n    $eventsManager-&gt;attach(\"dispatch:beforeDispatchLoop\", function ($event, $dispatcher) {\n\n        $keyParams = array();\n        $params    = $dispatcher-&gt;getParams();\n\n        // Use odd parameters as keys and even as values\n        foreach ($params as $number =&gt; $value) {\n            if ($number &amp; 1) {\n                $keyParams[$params[$number - 1]] = $value;\n            }\n        }\n\n        // Override parameters\n        $dispatcher-&gt;setParams($keyParams);\n    });\n\n    $dispatcher = new MvcDispatcher();\n    $dispatcher-&gt;setEventsManager($eventsManager);\n\n    return $dispatcher;\n});\n</pre> <p>If the desired schema is: <a class=\"reference external\" href=\"http://example.com/controller/key1:value1/key2:value\">http://example.com/controller/key1:value1/key2:value</a>, the following code is required:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Dispatcher;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di-&gt;set('dispatcher', function () {\n\n    // Create an EventsManager\n    $eventsManager = new EventsManager();\n\n    // Attach a listener\n    $eventsManager-&gt;attach(\"dispatch:beforeDispatchLoop\", function ($event, $dispatcher) {\n\n        $keyParams = array();\n        $params    = $dispatcher-&gt;getParams();\n\n        // Explode each parameter as key,value pairs\n        foreach ($params as $number =&gt; $value) {\n            $parts                = explode(':', $value);\n            $keyParams[$parts[0]] = $parts[1];\n        }\n\n        // Override parameters\n        $dispatcher-&gt;setParams($keyParams);\n    });\n\n    $dispatcher = new MvcDispatcher();\n    $dispatcher-&gt;setEventsManager($eventsManager);\n\n    return $dispatcher;\n});\n</pre>   <h2 id=\"getting-parameters\">Getting Parameters</h2> <p>When a route provides named parameters you can receive them in a controller, a view or any other component that extends <a class=\"reference internal\" href=\"../api/phalcon_di_injectable\"><em>Phalcon\\Di\\Injectable</em></a>.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Get the post's title passed in the URL as parameter\n        // or prepared in an event\n        $title = $this-&gt;dispatcher-&gt;getParam(\"title\");\n\n        // Get the post's year passed in the URL as parameter\n        // or prepared in an event also filtering it\n        $year = $this-&gt;dispatcher-&gt;getParam(\"year\", \"int\");\n\n        // ...\n    }\n}\n</pre>   <h2 id=\"preparing-actions\">Preparing actions</h2> <p>You can also define an arbitrary schema for actions before be dispatched.</p>  <h3 id=\"camelize-action-names\">Camelize action names</h3> <p>If the original URL is: <a class=\"reference external\" href=\"http://example.com/admin/products/show-latest-products\">http://example.com/admin/products/show-latest-products</a>, and for example you want to camelize ‘show-latest-products’ to ‘ShowLatestProducts’, the following code is required:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Text;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di-&gt;set('dispatcher', function () {\n\n    // Create an EventsManager\n    $eventsManager = new EventsManager();\n\n    // Camelize actions\n    $eventsManager-&gt;attach(\"dispatch:beforeDispatchLoop\", function ($event, $dispatcher) {\n        $dispatcher-&gt;setActionName(Text::camelize($dispatcher-&gt;getActionName()));\n    });\n\n    $dispatcher = new MvcDispatcher();\n    $dispatcher-&gt;setEventsManager($eventsManager);\n\n    return $dispatcher;\n});\n</pre>   <h3 id=\"remove-legacy-extensions\">Remove legacy extensions</h3> <p>If the original URL always contains a ‘.php’ extension:</p> <p><a class=\"reference external\" href=\"http://example.com/admin/products/show-latest-products.php\">http://example.com/admin/products/show-latest-products.php</a> <a class=\"reference external\" href=\"http://example.com/admin/products/index.php\">http://example.com/admin/products/index.php</a></p> <p>You can remove it before dispatch the controller/action combination:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di-&gt;set('dispatcher', function () {\n\n    // Create an EventsManager\n    $eventsManager = new EventsManager();\n\n    // Remove extension before dispatch\n    $eventsManager-&gt;attach(\"dispatch:beforeDispatchLoop\", function ($event, $dispatcher) {\n\n        // Remove extension\n        $action = preg_replace('/\\.php$/', '', $dispatcher-&gt;getActionName());\n\n        // Override action\n        $dispatcher-&gt;setActionName($action);\n    });\n\n    $dispatcher = new MvcDispatcher();\n    $dispatcher-&gt;setEventsManager($eventsManager);\n\n    return $dispatcher;\n});\n</pre>   <h3 id=\"inject-model-instances\">Inject model instances</h3> <p>In this example, the developer wants to inspect the parameters that an action will receive in order to dynamically inject model instances.</p> <p>The controller looks like:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    /**\n     * Shows posts\n     *\n     * @param \\Posts $post\n     */\n    public function showAction(Posts $post)\n    {\n        $this-&gt;view-&gt;post = $post;\n    }\n}\n</pre> <p>Method ‘showAction’ receives an instance of the model Posts, the developer could inspect this before dispatch the action preparing the parameter accordingly:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di-&gt;set('dispatcher', function () {\n\n    // Create an EventsManager\n    $eventsManager = new EventsManager();\n\n    $eventsManager-&gt;attach(\"dispatch:beforeDispatchLoop\", function ($event, $dispatcher) {\n\n        // Possible controller class name\n        $controllerName = $dispatcher-&gt;getControllerClass();\n\n        // Possible method name\n        $actionName = $dispatcher-&gt;getActiveMethod();\n\n        try {\n\n            // Get the reflection for the method to be executed\n            $reflection = new \\ReflectionMethod($controllerName, $actionName);\n\n            // Check parameters\n            foreach ($reflection-&gt;getParameters() as $parameter) {\n\n                // Get the expected model name\n                $className = $parameter-&gt;getClass()-&gt;name;\n\n                // Check if the parameter expects a model instance\n                if (is_subclass_of($className, Model::class)) {\n\n                    $model = $className::findFirstById($dispatcher-&gt;getParams()[0]);\n\n                    // Override the parameters by the model instance\n                    $dispatcher-&gt;setParams(array($model));\n                }\n            }\n\n        } catch (\\Exception $e) {\n            // An exception has occurred, maybe the class or action does not exist?\n        }\n\n    });\n\n    $dispatcher = new MvcDispatcher();\n    $dispatcher-&gt;setEventsManager($eventsManager);\n\n    return $dispatcher;\n});\n</pre> <p>The above example has been simplified for academic purposes. A developer can improve it to inject any kind of dependency or model in actions before be executed.</p> <p>From 2.1.x onwards the dispatcher also comes with an option to handle this internally for all models passed into a controller action.</p> <pre class=\"highlight-php\" data-language=\"php\">$dispatcher = new Phalcon\\Mvc\\Dispatcher();\n$dispatcher-&gt;setModelBinding(true);\n\nreturn $dispatcher;\n</pre> <p>It also introduces a new interface <a class=\"reference internal\" href=\"../api/phalcon_mvc_controller_bindmodelinterface\"><em>Phalcon\\Mvc\\Controller\\BindModelInterface</em></a> which allows you to define the controllers associated model to allow model binding in base controllers.</p> <p>For example, you have a base CrudController which your PostsController extends from. Your CrudController looks something like this:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Model;\n\nclass CrudController extends Controller\n{\n    /**\n     * Show action\n     *\n     * @param Model $model\n     */\n    public function showAction(Model $model)\n    {\n        $this-&gt;view-&gt;model = $model;\n    }\n}\n</pre> <p>In your PostsController you need to define which model the controller is associated with. This is done by implementing the <a class=\"reference internal\" href=\"../api/phalcon_mvc_controller_bindmodelinterface\"><em>Phalcon\\Mvc\\Controller\\BindModelInterface</em></a> which will add the getModelName() method from which you can return the model name.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller\\BindModelInterface;\nuse Models\\Posts;\n\nclass PostsController extends CrudController implements BindModelInterface\n{\n    static function getModelName()\n    {\n        return Posts::class;\n    }\n}\n</pre> <p>By declaring the model associated with the PostsController the dispatcher can check the controller for the getModelName() method before passing the defined model into the parent show action.</p> <p>If your project structure does not use any parent controller you can of course still bind the model directly into the controller action:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\nuse Models\\Posts;\n\nclass PostsController extends Controller\n{\n    /**\n     * Shows posts\n     *\n     * @param Posts $post\n     */\n    public function showAction(Posts $post)\n    {\n        $this-&gt;view-&gt;post = $post;\n    }\n}\n</pre> <blockquote class=\"highlights\"> <div>Currently the dispatchers internal model binding will only use the models primary key to perform a findFirst() on. An example route for the above would be /posts/show/{1}</div>\n</blockquote>    <h2 id=\"handling-not-found-exceptions\">Handling Not-Found Exceptions</h2> <p>Using the <a class=\"reference internal\" href=\"events\"><em>EventsManager</em></a> it’s possible to insert a hook point before the dispatcher throws an exception when the controller/action combination wasn’t found:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Dispatcher;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Mvc\\Dispatcher\\Exception as DispatchException;\n\n$di-&gt;setShared('dispatcher', function () {\n\n    // Create an EventsManager\n    $eventsManager = new EventsManager();\n\n    // Attach a listener\n    $eventsManager-&gt;attach(\"dispatch:beforeException\", function ($event, $dispatcher, $exception) {\n\n        // Handle 404 exceptions\n        if ($exception instanceof DispatchException) {\n            $dispatcher-&gt;forward(\n                array(\n                    'controller' =&gt; 'index',\n                    'action'     =&gt; 'show404'\n                )\n            );\n\n            return false;\n        }\n\n        // Alternative way, controller or action doesn't exist\n        switch ($exception-&gt;getCode()) {\n            case Dispatcher::EXCEPTION_HANDLER_NOT_FOUND:\n            case Dispatcher::EXCEPTION_ACTION_NOT_FOUND:\n                $dispatcher-&gt;forward(\n                    array(\n                        'controller' =&gt; 'index',\n                        'action'     =&gt; 'show404'\n                    )\n                );\n\n                return false;\n        }\n    });\n\n    $dispatcher = new MvcDispatcher();\n\n    // Bind the EventsManager to the dispatcher\n    $dispatcher-&gt;setEventsManager($eventsManager);\n\n    return $dispatcher;\n\n}, true);\n</pre> <p>Of course, this method can be moved onto independent plugin classes, allowing more than one class take actions when an exception is produced in the dispatch loop:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\Dispatcher\\Exception as DispatchException;\n\nclass ExceptionsPlugin\n{\n    public function beforeException(Event $event, Dispatcher $dispatcher, $exception)\n    {\n        // Handle 404 exceptions\n        if ($exception instanceof DispatchException) {\n            $dispatcher-&gt;forward(array(\n                'controller' =&gt; 'index',\n                'action'     =&gt; 'show404'\n            ));\n            return false;\n        }\n\n        // Handle other exceptions\n        $dispatcher-&gt;forward(array(\n            'controller' =&gt; 'index',\n            'action'     =&gt; 'show503'\n        ));\n\n        return false;\n    }\n}\n</pre> <blockquote class=\"highlights\"> <div>Only exceptions produced by the dispatcher and exceptions produced in the executed action are notified in the ‘beforeException’ events. Exceptions produced in listeners or controller events are redirected to the latest try/catch.</div>\n</blockquote>   <h2 id=\"implementing-your-own-dispatcher\">Implementing your own Dispatcher</h2> <p>The <a class=\"reference internal\" href=\"../api/phalcon_mvc_dispatcherinterface\"><em>Phalcon\\Mvc\\DispatcherInterface</em></a> interface must be implemented to create your own dispatcher replacing the one provided by Phalcon.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/dispatching.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/dispatching.html</a>\n  </p>\n</div>\n","reference/response":"<h1 id=\"returning-responses\">Returning Responses</h1> <p>Part of the HTTP cycle is returning responses to clients. <a class=\"reference internal\" href=\"../api/phalcon_http_response\"><em>Phalcon\\Http\\Response</em></a> is the Phalcon component designed to achieve this task. HTTP responses are usually composed by headers and body. The following is an example of basic usage:</p> <pre class=\"highlight-php\" data-language=\"php\">// Getting a response instance\n$response = new \\Phalcon\\Http\\Response();\n\n// Set status code\n$response-&gt;setStatusCode(404, \"Not Found\");\n\n// Set the content of the response\n$response-&gt;setContent(\"Sorry, the page doesn't exist\");\n\n// Send response to the client\n$response-&gt;send();\n</pre> <p>If you are using the full MVC stack there is no need to create responses manually. However, if you need to return a response directly from a controller’s action follow this example:</p> <pre class=\"highlight-php\" data-language=\"php\">class FeedController extends Phalcon\\Mvc\\Controller\n{\n    public function getAction()\n    {\n        // Getting a response instance\n        $response = new \\Phalcon\\Http\\Response();\n\n        $feed     = // ... Load here the feed\n\n        // Set the content of the response\n        $response-&gt;setContent($feed-&gt;asString());\n\n        // Return the response\n        return $response;\n    }\n}\n</pre>  <h2 id=\"working-with-headers\">Working with Headers</h2> <p>Headers are an important part of the HTTP response. It contains useful information about the response state like the HTTP status, type of response and much more.</p> <p>You can set headers in the following way:</p> <pre class=\"highlight-php\" data-language=\"php\">// Setting a header by its name\n$response-&gt;setHeader(\"Content-Type\", \"application/pdf\");\n$response-&gt;setHeader(\"Content-Disposition\", 'attachment; filename=\"downloaded.pdf\"');\n\n// Setting a raw header\n$response-&gt;setRawHeader(\"HTTP/1.1 200 OK\");\n</pre> <p>A <a class=\"reference internal\" href=\"../api/phalcon_http_response_headers\"><em>Phalcon\\Http\\Response\\Headers</em></a> bag internally manages headers. This class retrieves the headers before sending it to client:</p> <pre class=\"highlight-php\" data-language=\"php\">// Get the headers bag\n$headers = $response-&gt;getHeaders();\n\n// Get a header by its name\n$contentType = $response-&gt;getHeaders()-&gt;get(\"Content-Type\");\n</pre>   <h2 id=\"making-redirections\">Making Redirections</h2> <p>With <a class=\"reference internal\" href=\"../api/phalcon_http_response\"><em>Phalcon\\Http\\Response</em></a> you can also execute HTTP redirections:</p> <pre class=\"highlight-php\" data-language=\"php\">// Redirect to the default URI\n$response-&gt;redirect();\n\n// Redirect to the local base URI\n$response-&gt;redirect(\"posts/index\");\n\n// Redirect to an external URL\n$response-&gt;redirect(\"http://en.wikipedia.org\", true);\n\n// Redirect specifying the HTTP status code\n$response-&gt;redirect(\"http://www.example.com/new-location\", true, 301);\n</pre> <p>All internal URIs are generated using the ‘url’ service (by default <a class=\"reference internal\" href=\"url\"><em>Phalcon\\Mvc\\Url</em></a>). This example demonstrates how you can redirect using a route you have defined in your application:</p> <pre class=\"highlight-php\" data-language=\"php\">// Redirect based on a named route\nreturn $response-&gt;redirect(\n    array(\n        \"for\"        =&gt; \"index-lang\",\n        \"lang\"       =&gt; \"jp\",\n        \"controller\" =&gt; \"index\"\n    )\n);\n</pre> <p>Note that a redirection doesn’t disable the view component, so if there is a view associated with the current action it will be executed anyway. You can disable the view from a controller by executing <code class=\"code docutils literal\"><span class=\"pre\">$this-&gt;view-&gt;disable()</span></code>;</p>   <h2 id=\"http-cache\">HTTP Cache</h2> <p>One of the easiest ways to improve the performance in your applications and reduce the traffic is using HTTP Cache. Most modern browsers support HTTP caching and is one of the reasons why many websites are currently fast.</p> <p>HTTP Cache can be altered in the following header values sent by the application when serving a page for the first time:</p> <ul class=\"simple\"> <li>\n<em>Expires:</em> With this header the application can set a date in the future or the past telling the browser when the page must expire.</li> <li>\n<em>Cache-Control:</em> This header allows to specify how much time a page should be considered fresh in the browser.</li> <li>\n<em>Last-Modified:</em> This header tells the browser which was the last time the site was updated avoiding page re-loads</li> <li>\n<em>ETag:</em> An etag is a unique identifier that must be created including the modification timestamp of the current page</li> </ul>  <h3 id=\"setting-an-expiration-time\">Setting an Expiration Time</h3> <p>The expiration date is one of the easiest and most effective ways to cache a page in the client (browser). Starting from the current date we add the amount of time the page will be stored in the browser cache. Until this date expires no new content will be requested from the server:</p> <pre class=\"highlight-php\" data-language=\"php\">$expireDate = new DateTime();\n$expireDate-&gt;modify('+2 months');\n\n$response-&gt;setExpires($expireDate);\n</pre> <p>The Response component automatically shows the date in GMT timezone as expected in an Expires header.</p> <p>If we set this value to a date in the past the browser will always refresh the requested page:</p> <pre class=\"highlight-php\" data-language=\"php\">$expireDate = new DateTime();\n$expireDate-&gt;modify('-10 minutes');\n\n$response-&gt;setExpires($expireDate);\n</pre> <p>Browsers rely on the client’s clock to assess if this date has passed or not. The client clock can be modified to make pages expire and this may represent a limitation for this cache mechanism.</p>   <h3 id=\"cache-control\">Cache-Control</h3> <p>This header provides a safer way to cache the pages served. We simply must specify a time in seconds telling the browser how long it must keep the page in its cache:</p> <pre class=\"highlight-php\" data-language=\"php\">// Starting from now, cache the page for one day\n$response-&gt;setHeader('Cache-Control', 'max-age=86400');\n</pre> <p>The opposite effect (avoid page caching) is achieved in this way:</p> <pre class=\"highlight-php\" data-language=\"php\">// Never cache the served page\n$response-&gt;setHeader('Cache-Control', 'private, max-age=0, must-revalidate');\n</pre>   <h3 id=\"e-tag\">E-Tag</h3> <p>An “entity-tag” or “E-tag” is a unique identifier that helps the browser realize if the page has changed or not between two requests. The identifier must be calculated taking into account that this must change if the previously served content has changed:</p> <pre class=\"highlight-php\" data-language=\"php\">// Calculate the E-Tag based on the modification time of the latest news\n$recentDate = News::maximum(array('column' =&gt; 'created_at'));\n$eTag       = md5($recentDate);\n\n// Send an E-Tag header\n$response-&gt;setHeader('E-Tag', $eTag);\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/response.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/response.html</a>\n  </p>\n</div>\n","reference/micro":"<h1 id=\"micro-applications\">Micro Applications</h1> <p>With Phalcon you can create “Micro-Framework like” applications. By doing this, you only need to write a minimal amount of code to create a PHP application. Micro applications are suitable to implement small applications, APIs and prototypes in a practical way.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n$app-&gt;get('/say/welcome/{name}', function ($name) {\n    echo \"&lt;h1&gt;Welcome $name!&lt;/h1&gt;\";\n});\n\n$app-&gt;handle();\n</pre>  <h2 id=\"creating-a-micro-application\">Creating a Micro Application</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_micro\"><em>Phalcon\\Mvc\\Micro</em></a> is the class responsible for implementing a micro application.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n</pre>   <h2 id=\"defining-routes\">Defining routes</h2> <p>After instantiating the object, you will need to add some routes. <a class=\"reference internal\" href=\"../api/phalcon_mvc_router\"><em>Phalcon\\Mvc\\Router</em></a> manages routing internally. Routes must always start with /. A HTTP method constraint is optionally required when defining routes, so as to instruct the router to match only if the request also matches the HTTP methods. The following example shows how to define a route for the method GET:</p> <pre class=\"highlight-php\" data-language=\"php\">$app-&gt;get('/say/hello/{name}', function ($name) {\n    echo \"&lt;h1&gt;Hello! $name&lt;/h1&gt;\";\n});\n</pre> <p>The “get” method indicates that the associated HTTP method is GET. The route <code class=\"code docutils literal\"><span class=\"pre\">/say/hello/{name}</span></code> also has a parameter <code class=\"code docutils literal\"><span class=\"pre\">{$name}</span></code> that is passed directly to the route handler (the anonymous function). Handlers are executed when a route is matched. A handler could be any callable item in the PHP userland. The following example shows how to define different types of handlers:</p> <pre class=\"highlight-php\" data-language=\"php\">// With a function\nfunction say_hello($name) {\n    echo \"&lt;h1&gt;Hello! $name&lt;/h1&gt;\";\n}\n\n$app-&gt;get('/say/hello/{name}', \"say_hello\");\n\n// With a static method\n$app-&gt;get('/say/hello/{name}', \"SomeClass::someSayMethod\");\n\n// With a method in an object\n$myController = new MyController();\n$app-&gt;get('/say/hello/{name}', array($myController, \"someAction\"));\n\n// Anonymous function\n$app-&gt;get('/say/hello/{name}', function ($name) {\n    echo \"&lt;h1&gt;Hello! $name&lt;/h1&gt;\";\n});\n</pre> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_micro\"><em>Phalcon\\Mvc\\Micro</em></a> provides a set of methods to define the HTTP method (or methods) which the route is constrained for:</p> <pre class=\"highlight-php\" data-language=\"php\">// Matches if the HTTP method is GET\n$app-&gt;get('/api/products', \"get_products\");\n\n// Matches if the HTTP method is POST\n$app-&gt;post('/api/products/add', \"add_product\");\n\n// Matches if the HTTP method is PUT\n$app-&gt;put('/api/products/update/{id}', \"update_product\");\n\n// Matches if the HTTP method is DELETE\n$app-&gt;delete('/api/products/remove/{id}', \"delete_product\");\n\n// Matches if the HTTP method is OPTIONS\n$app-&gt;options('/api/products/info/{id}', \"info_product\");\n\n// Matches if the HTTP method is PATCH\n$app-&gt;patch('/api/products/update/{id}', \"info_product\");\n\n// Matches if the HTTP method is GET or POST\n$app-&gt;map('/repos/store/refs', \"action_product\")-&gt;via(array('GET', 'POST'));\n</pre> <p>To access the HTTP method data <code class=\"code docutils literal\"><span class=\"pre\">$app</span></code> needs to be passed into the closure:</p> <pre class=\"highlight-php\" data-language=\"php\">// Matches if the HTTP method is POST\n$app-&gt;post('/api/products/add', function () use ($app) {\n    echo $app-&gt;request-&gt;getPost(\"productID\");\n});\n</pre>  <h3 id=\"routes-with-parameters\">Routes with Parameters</h3> <p>Defining parameters in routes is very easy as demonstrated above. The name of the parameter has to be enclosed in brackets. Parameter formatting is also available using regular expressions to ensure consistency of data. This is demonstrated in the example below:</p> <pre class=\"highlight-php\" data-language=\"php\">// This route have two parameters and each of them have a format\n$app-&gt;get('/posts/{year:[0-9]+}/{title:[a-zA-Z\\-]+}', function ($year, $title) {\n    echo \"&lt;h1&gt;Title: $title&lt;/h1&gt;\";\n    echo \"&lt;h2&gt;Year: $year&lt;/h2&gt;\";\n});\n</pre>   <h3 id=\"starting-route\">Starting Route</h3> <p>Normally, the starting route in an application is the route /, and it will more frequent to be accessed by the method GET. This scenario is coded as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">// This is the start route\n$app-&gt;get('/', function () {\n    echo \"&lt;h1&gt;Welcome!&lt;/h1&gt;\";\n});\n</pre>   <h3 id=\"rewrite-rules\">Rewrite Rules</h3> <p>The following rules can be used together with Apache to rewrite the URis:</p> <pre class=\"highlight-apacheconf\" data-language=\"apacheconf\">&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n&lt;/IfModule&gt;\n</pre>    <h2 id=\"working-with-responses\">Working with Responses</h2> <p>You are free to produce any kind of response in a handler: directly make an output, use a template engine, include a view, return a json, etc.:</p> <pre class=\"highlight-php\" data-language=\"php\">// Direct output\n$app-&gt;get('/say/hello', function () {\n    echo \"&lt;h1&gt;Hello! $name&lt;/h1&gt;\";\n});\n\n// Requiring another file\n$app-&gt;get('/show/results', function () {\n    require 'views/results.php';\n});\n\n// Returning JSON\n$app-&gt;get('/get/some-json', function () {\n    echo json_encode(\n        array(\n            \"some\",\n            \"important\",\n            \"data\"\n        )\n    );\n});\n</pre> <p>In addition to that, you have access to the service <a class=\"reference internal\" href=\"response\"><em>“response”</em></a>, with which you can manipulate better the response:</p> <pre class=\"highlight-php\" data-language=\"php\">$app-&gt;get('/show/data', function () use ($app) {\n\n    // Set the Content-Type header\n    $app-&gt;response-&gt;setContentType('text/plain')-&gt;sendHeaders();\n\n    // Print a file\n    readfile(\"data.txt\");\n});\n</pre> <p>Or create a response object and return it from the handler:</p> <pre class=\"highlight-php\" data-language=\"php\">$app-&gt;get('/show/data', function () {\n\n    // Create a response\n    $response = new Phalcon\\Http\\Response();\n\n    // Set the Content-Type header\n    $response-&gt;setContentType('text/plain');\n\n    // Pass the content of a file\n    $response-&gt;setContent(file_get_contents(\"data.txt\"));\n\n    // Return the response\n    return $response;\n});\n</pre>   <h2 id=\"making-redirections\">Making redirections</h2> <p>Redirections could be performed to forward the execution flow to another route:</p> <pre class=\"highlight-php\" data-language=\"php\">// This route makes a redirection to another route\n$app-&gt;post('/old/welcome', function () use ($app) {\n    $app-&gt;response-&gt;redirect(\"new/welcome\")-&gt;sendHeaders();\n});\n\n$app-&gt;post('/new/welcome', function () use ($app) {\n    echo 'This is the new Welcome';\n});\n</pre>   <h2 id=\"generating-urls-for-routes\">Generating URLs for Routes</h2> <p><a class=\"reference internal\" href=\"url\"><em>Phalcon\\Mvc\\Url</em></a> can be used to produce URLs based on the defined routes. You need to set up a name for the route; by this way the “url” service can produce the corresponding URL:</p> <pre class=\"highlight-php\" data-language=\"php\">// Set a route with the name \"show-post\"\n$app-&gt;get('/blog/{year}/{title}', function ($year, $title) use ($app) {\n\n    // ... Show the post here\n\n})-&gt;setName('show-post');\n\n// Produce a URL somewhere\n$app-&gt;get('/', function () use ($app) {\n\n    echo '&lt;a href=\"', $app-&gt;url-&gt;get(\n        array(\n            'for'   =&gt; 'show-post',\n            'title' =&gt; 'php-is-a-great-framework',\n            'year'  =&gt; 2015\n        )\n    ), '\"&gt;Show the post&lt;/a&gt;';\n\n});\n</pre>   <h2 id=\"interacting-with-the-dependency-injector\">Interacting with the Dependency Injector</h2> <p>In the micro application, a <a class=\"reference internal\" href=\"di\"><em>Phalcon\\Di\\FactoryDefault</em></a> services container is created implicitly; additionally you can create outside the application a container to manipulate its services:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Micro;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Config\\Adapter\\Ini as IniConfig;\n\n$di = new FactoryDefault();\n\n$di-&gt;set('config', function () {\n    return new IniConfig(\"config.ini\");\n});\n\n$app = new Micro();\n\n$app-&gt;setDI($di);\n\n$app-&gt;get('/', function () use ($app) {\n    // Read a setting from the config\n    echo $app-&gt;config-&gt;app_name;\n});\n\n$app-&gt;post('/contact', function () use ($app) {\n    $app-&gt;flash-&gt;success('Yes!, the contact was made!');\n});\n</pre> <p>The array-syntax is allowed to easily set/get services in the internal services container:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Micro;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as MysqlAdapter;\n\n$app = new Micro();\n\n// Setup the database service\n$app['db'] = function () {\n    return new MysqlAdapter(\n        array(\n            \"host\"     =&gt; \"localhost\",\n            \"username\" =&gt; \"root\",\n            \"password\" =&gt; \"secret\",\n            \"dbname\"   =&gt; \"test_db\"\n        )\n    );\n};\n\n$app-&gt;get('/blog', function () use ($app) {\n    $news = $app['db']-&gt;query('SELECT * FROM news');\n    foreach ($news as $new) {\n        echo $new-&gt;title;\n    }\n});\n</pre>   <h2 id=\"not-found-handler\">Not-Found Handler</h2> <p>When a user tries to access a route that is not defined, the micro application will try to execute the “Not-Found” handler. An example of that behavior is below:</p> <pre class=\"highlight-php\" data-language=\"php\">$app-&gt;notFound(function () use ($app) {\n    $app-&gt;response-&gt;setStatusCode(404, \"Not Found\")-&gt;sendHeaders();\n    echo 'This is crazy, but this page was not found!';\n});\n</pre>   <h2 id=\"models-in-micro-applications\">Models in Micro Applications</h2> <p><a class=\"reference internal\" href=\"models\"><em>Models</em></a> can be used transparently in Micro Applications, only is required an autoloader to load models:</p> <pre class=\"highlight-php\" data-language=\"php\">$loader = new \\Phalcon\\Loader();\n\n$loader-&gt;registerDirs(\n    array(\n        __DIR__ . '/models/'\n    )\n)-&gt;register();\n\n$app = new \\Phalcon\\Mvc\\Micro();\n\n$app-&gt;get('/products/find', function () {\n\n    foreach (Products::find() as $product) {\n        echo $product-&gt;name, '&lt;br&gt;';\n    }\n\n});\n\n$app-&gt;handle();\n</pre>   <h2 id=\"micro-application-events\">Micro Application Events</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_micro\"><em>Phalcon\\Mvc\\Micro</em></a> is able to send events to the <a class=\"reference internal\" href=\"events\"><em>EventsManager</em></a> (if it is present). Events are triggered using the type “micro”. The following events are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"74%\"> <col width=\"13%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Event Name</th> <th class=\"head\">Triggered</th> <th class=\"head\">Can stop operation?</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>beforeHandleRoute</td> <td>The main method is just called, at this point the application doesn’t know if there is some matched route</td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>beforeExecuteRoute</td> <td>A route has been matched and it contains a valid handler, at this point the handler has not been executed</td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>afterExecuteRoute</td> <td>Triggered after running the handler</td> <td>No</td> </tr> <tr class=\"row-odd\">\n<td>beforeNotFound</td> <td>Triggered when any of the defined routes match the requested URI</td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>afterHandleRoute</td> <td>Triggered after completing the whole process in a successful way</td> <td>Yes</td> </tr> </tbody> </table> <p>In the following example, we explain how to control the application security using events:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Micro,\n    Phalcon\\Events\\Manager as EventsManager;\n\n// Create a events manager\n$eventsManager = new EventsManager();\n\n// Listen all the application events\n$eventsManager-&gt;attach('micro', function ($event, $app) {\n\n    if ($event-&gt;getType() == 'beforeExecuteRoute') {\n        if ($app-&gt;session-&gt;get('auth') == false) {\n\n            $app-&gt;flashSession-&gt;error(\"The user isn't authenticated\");\n            $app-&gt;response-&gt;redirect(\"/\")-&gt;sendHeaders();\n\n            // Return (false) stop the operation\n            return false;\n        }\n    }\n});\n\n$app = new Micro();\n\n// Bind the events manager to the app\n$app-&gt;setEventsManager($eventsManager);\n</pre>   <h2 id=\"middleware-events\">Middleware events</h2> <p>In addition to the events manager, events can be added using the methods ‘before’, ‘after’ and ‘finish’:</p> <pre class=\"highlight-php\" data-language=\"php\">$app = new Phalcon\\Mvc\\Micro();\n\n// Executed before every route is executed\n// Return false cancels the route execution\n$app-&gt;before(function () use ($app) {\n    if ($app['session']-&gt;get('auth') == false) {\n\n        $app['flashSession']-&gt;error(\"The user isn't authenticated\");\n        $app['response']-&gt;redirect(\"/error\");\n\n        // Return false stops the normal execution\n        return false;\n    }\n\n    return true;\n});\n\n$app-&gt;map('/api/robots', function () {\n    return array(\n        'status' =&gt; 'OK'\n    );\n});\n\n$app-&gt;after(function () use ($app) {\n    // This is executed after the route is executed\n    echo json_encode($app-&gt;getReturnedValue());\n});\n\n$app-&gt;finish(function () use ($app) {\n    // This is executed when the request has been served\n});\n</pre> <p>You can call the methods several times to add more events of the same type:</p> <pre class=\"highlight-php\" data-language=\"php\">$app-&gt;finish(function () use ($app) {\n    // First 'finish' middleware\n});\n\n$app-&gt;finish(function () use ($app) {\n    // Second 'finish' middleware\n});\n</pre> <p>Code for middlewares can be reused using separate classes:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Micro\\MiddlewareInterface;\n\n/**\n * CacheMiddleware\n *\n * Caches pages to reduce processing\n */\nclass CacheMiddleware implements MiddlewareInterface\n{\n    public function call($application)\n    {\n        $cache  = $application['cache'];\n        $router = $application['router'];\n\n        $key    = preg_replace('/^[a-zA-Z0-9]/', '', $router-&gt;getRewriteUri());\n\n        // Check if the request is cached\n        if ($cache-&gt;exists($key)) {\n            echo $cache-&gt;get($key);\n\n            return false;\n        }\n\n        return true;\n    }\n}\n</pre> <p>Then add the instance to the application:</p> <pre class=\"highlight-php\" data-language=\"php\">$app-&gt;before(new CacheMiddleware());\n</pre> <p>The following middleware events are available:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"74%\"> <col width=\"13%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Event Name</th> <th class=\"head\">Triggered</th> <th class=\"head\">Can stop operation?</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>before</td> <td>Before executing the handler. It can be used to control the access to the application</td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>after</td> <td>Executed after the handler is executed. It can be used to prepare the response</td> <td>No</td> </tr> <tr class=\"row-even\">\n<td>finish</td> <td>Executed after sending the response. It can be used to perform clean-up</td> <td>No</td> </tr> </tbody> </table>   <h2 id=\"using-controllers-as-handlers\">Using Controllers as Handlers</h2> <p>Medium applications using the <code class=\"code docutils literal\"><span class=\"pre\">Mvc\\Micro</span></code> approach may require organize handlers in controllers. You can use <a class=\"reference internal\" href=\"../api/phalcon_mvc_micro_collection\"><em>Phalcon\\Mvc\\Micro\\Collection</em></a> to group handlers that belongs to controllers:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Micro\\Collection as MicroCollection;\n\n$posts = new MicroCollection();\n\n// Set the main handler. ie. a controller instance\n$posts-&gt;setHandler(new PostsController());\n\n// Set a common prefix for all routes\n$posts-&gt;setPrefix('/posts');\n\n// Use the method 'index' in PostsController\n$posts-&gt;get('/', 'index');\n\n// Use the method 'show' in PostsController\n$posts-&gt;get('/show/{slug}', 'show');\n\n$app-&gt;mount($posts);\n</pre> <p>The controller ‘PostsController’ might look like this:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function index()\n    {\n        // ...\n    }\n\n    public function show($slug)\n    {\n        // ...\n    }\n}\n</pre> <p>In the above example the controller is directly instantiated, Collection also have the ability to lazy-load controllers, this option provide better performance loading controllers only if the related routes are matched:</p> <pre class=\"highlight-php\" data-language=\"php\">$posts-&gt;setHandler('PostsController', true);\n$posts-&gt;setHandler('Blog\\Controllers\\PostsController', true);\n</pre>   <h2 id=\"returning-responses\">Returning Responses</h2> <p>Handlers may return raw responses using <a class=\"reference internal\" href=\"response\"><em>Phalcon\\Http\\Response</em></a> or a component that implements the relevant interface. When responses are returned by handlers they are automatically sent by the application.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Micro;\nuse Phalcon\\Http\\Response;\n\n$app = new Micro();\n\n// Return a response\n$app-&gt;get('/welcome/index', function () {\n\n    $response = new Response();\n\n    $response-&gt;setStatusCode(401, \"Unauthorized\");\n\n    $response-&gt;setContent(\"Access is not authorized\");\n\n    return $response;\n});\n</pre>   <h2 id=\"rendering-views\">Rendering Views</h2> <p><a class=\"reference internal\" href=\"views\"><em>Phalcon\\Mvc\\View\\Simple</em></a> can be used to render views, the following example shows how to do that:</p> <pre class=\"highlight-php\" data-language=\"php\">$app = new Phalcon\\Mvc\\Micro();\n\n$app['view'] = function () {\n    $view = new \\Phalcon\\Mvc\\View\\Simple();\n    $view-&gt;setViewsDir('app/views/');\n    return $view;\n};\n\n// Return a rendered view\n$app-&gt;get('/products/show', function () use ($app) {\n\n    // Render app/views/products/show.phtml passing some variables\n    echo $app['view']-&gt;render('products/show', array(\n        'id'   =&gt; 100,\n        'name' =&gt; 'Artichoke'\n    ));\n\n});\n</pre> <p>Please note that this code block uses <a class=\"reference internal\" href=\"../api/phalcon_mvc_view_simple\"><em>Phalcon\\Mvc\\View\\Simple</em></a> which uses relative paths instead of controllers and actions. If you would like to use <a class=\"reference internal\" href=\"../api/phalcon_mvc_view_simple\"><em>Phalcon\\Mvc\\View\\Simple</em></a> instead, you will need to change the parameters of the <code class=\"code docutils literal\"><span class=\"pre\">render()</span></code> method:</p> <pre class=\"highlight-php\" data-language=\"php\">$app = new Phalcon\\Mvc\\Micro();\n\n$app['view'] = function () {\n    $view = new \\Phalcon\\Mvc\\View();\n    $view-&gt;setViewsDir('app/views/');\n    return $view;\n};\n\n// Return a rendered view\n$app-&gt;get('/products/show', function () use ($app) {\n\n    // Render app/views/products/show.phtml passing some variables\n    echo $app['view']-&gt;render('products', 'show', array(\n        'id'   =&gt; 100,\n        'name' =&gt; 'Artichoke'\n    ));\n\n});\n</pre>   <h2 id=\"error-handling\">Error Handling</h2> <p>A proper response can be generated if an exception is raised in a micro handler:</p> <pre class=\"highlight-php\" data-language=\"php\">$app = new Phalcon\\Mvc\\Micro();\n\n$app-&gt;get('/', function () {\n    throw new \\Exception(\"An error\");\n});\n\n$app-&gt;error(\n    function ($exception) {\n        echo \"An error has occurred\";\n    }\n);\n</pre> <p>If the handler returns “false” the exception is stopped.</p>   <h2 id=\"related-sources\">Related Sources</h2> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"tutorial-rest\"><em>Creating a Simple REST API</em></a> is a tutorial that explains how to create a micro application to implement a RESTful web service.</li> <li>\n<a class=\"reference external\" href=\"http://store.phalconphp.com\">Stickers Store</a> is a very simple micro-application making use of the micro-mvc approach [<a class=\"reference external\" href=\"https://github.com/phalcon/store\">Github</a>].</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/micro.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/micro.html</a>\n  </p>\n</div>\n","reference/odm":"<h1 id=\"odm-object-document-mapper\">ODM (Object-Document Mapper)</h1> <p>In addition to its ability to <a class=\"reference internal\" href=\"models\"><em>map tables</em></a> in relational databases, Phalcon can map documents from NoSQL databases. The ODM offers a CRUD functionality, events, validations among other services.</p> <p>Due to the absence of SQL queries and planners, NoSQL databases can see real improvements in performance using the Phalcon approach. Additionally, there are no SQL building reducing the possibility of SQL injections.</p> <p>The following NoSQL databases are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"15%\"> <col width=\"85%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference external\" href=\"http://www.mongodb.org/\">MongoDB</a></td> <td>MongoDB is a scalable, high-performance, open source NoSQL database.</td> </tr> </tbody> </table>  <h2 id=\"creating-models\">Creating Models</h2> <p>A model is a class that extends from <a class=\"reference internal\" href=\"../api/phalcon_mvc_collection\"><em>Phalcon\\Mvc\\Collection</em></a>. It must be placed in the models directory. A model file must contain a single class; its class name should be in camel case notation:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n\n}\n</pre> <blockquote class=\"highlights\"> <div>If you’re using PHP 5.4/5.5 is recommended declare each column that makes part of the model in order to save memory and reduce the memory allocation.</div>\n</blockquote> <p>By default model “Robots” will refer to the collection “robots”. If you want to manually specify another name for the mapping collection, you can use the <code class=\"code docutils literal\"><span class=\"pre\">getSource()</span></code> method:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function getSource()\n    {\n        return \"the_robots\";\n    }\n}\n</pre>   <h2 id=\"understanding-documents-to-objects\">Understanding Documents To Objects</h2> <p>Every instance of a model represents a document in the collection. You can easily access collection data by reading object properties. For example, for a collection “robots” with the documents:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ mongo test\nMongoDB shell version: 1.8.2\nconnecting to: test\n&gt; db.robots.find()\n{ \"_id\" : ObjectId(\"508735512d42b8c3d15ec4e1\"), \"name\" : \"Astro Boy\", \"year\" : 1952,\n    \"type\" : \"mechanical\" }\n{ \"_id\" : ObjectId(\"5087358f2d42b8c3d15ec4e2\"), \"name\" : \"Bender\", \"year\" : 1999,\n    \"type\" : \"mechanical\" }\n{ \"_id\" : ObjectId(\"508735d32d42b8c3d15ec4e3\"), \"name\" : \"Wall-E\", \"year\" : 2008 }\n&gt;\n</pre>   <h2 id=\"models-in-namespaces\">Models in Namespaces</h2> <p>Namespaces can be used to avoid class name collision. In this case it is necessary to indicate the name of the related collection using getSource:</p> <pre class=\"highlight-php\" data-language=\"php\">namespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function getSource()\n    {\n        return \"robots\";\n    }\n}\n</pre> <p>You could find a certain document by its ID and then print its name:</p> <pre class=\"highlight-php\" data-language=\"php\">// Find record with _id = \"5087358f2d42b8c3d15ec4e2\"\n$robot = Robots::findById(\"5087358f2d42b8c3d15ec4e2\");\n\n// Prints \"Bender\"\necho $robot-&gt;name;\n</pre> <p>Once the record is in memory, you can make modifications to its data and then save changes:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = Robots::findFirst(\n    array(\n        array(\n            'name' =&gt; 'Astro Boy'\n        )\n    )\n);\n$robot-&gt;name = \"Voltron\";\n$robot-&gt;save();\n</pre>   <h2 id=\"setting-a-connection\">Setting a Connection</h2> <p>Connections are retrieved from the services container. By default, Phalcon tries to find the connection in a service called “mongo”:</p> <pre class=\"highlight-php\" data-language=\"php\">// Simple database connection to localhost\n$di-&gt;set('mongo', function () {\n    $mongo = new MongoClient();\n    return $mongo-&gt;selectDB(\"store\");\n}, true);\n\n// Connecting to a domain socket, falling back to localhost connection\n$di-&gt;set('mongo', function () {\n    $mongo = new MongoClient(\"mongodb:///tmp/mongodb-27017.sock,localhost:27017\");\n    return $mongo-&gt;selectDB(\"store\");\n}, true);\n</pre>   <h2 id=\"finding-documents\">Finding Documents</h2> <p>As <a class=\"reference internal\" href=\"../api/phalcon_mvc_collection\"><em>Phalcon\\Mvc\\Collection</em></a> relies on the Mongo PHP extension you have the same facilities to query documents and convert them transparently to model instances:</p> <pre class=\"highlight-php\" data-language=\"php\">// How many robots are there?\n$robots = Robots::find();\necho \"There are \", count($robots), \"\\n\";\n\n// How many mechanical robots are there?\n$robots = Robots::find(\n    array(\n        array(\n            \"type\" =&gt; \"mechanical\"\n        )\n    )\n);\necho \"There are \", count($robots), \"\\n\";\n\n// Get and print mechanical robots ordered by name upward\n$robots = Robots::find(\n    array(\n        array(\n            \"type\" =&gt; \"mechanical\"\n        ),\n        \"sort\" =&gt; array(\n            \"name\" =&gt; 1\n        )\n    )\n);\n\nforeach ($robots as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n\n// Get first 100 mechanical robots ordered by name\n$robots = Robots::find(\n    array(\n        array(\n            \"type\" =&gt; \"mechanical\"\n        ),\n        \"sort\"  =&gt; array(\n            \"name\" =&gt; 1\n        ),\n        \"limit\" =&gt; 100\n    )\n);\n\nforeach ($robots as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n</pre> <p>You could also use the <code class=\"code docutils literal\"><span class=\"pre\">findFirst()</span></code> method to get only the first record matching the given criteria:</p> <pre class=\"highlight-php\" data-language=\"php\">// What's the first robot in robots collection?\n$robot = Robots::findFirst();\necho \"The robot name is \", $robot-&gt;name, \"\\n\";\n\n// What's the first mechanical robot in robots collection?\n$robot = Robots::findFirst(\n    array(\n        array(\n            \"type\" =&gt; \"mechanical\"\n        )\n    )\n);\necho \"The first mechanical robot name is \", $robot-&gt;name, \"\\n\";\n</pre> <p>Both <code class=\"code docutils literal\"><span class=\"pre\">find()</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">findFirst()</span></code> methods accept an associative array specifying the search criteria:</p> <pre class=\"highlight-php\" data-language=\"php\">// First robot where type = \"mechanical\" and year = \"1999\"\n$robot = Robots::findFirst(\n    array(\n        \"conditions\" =&gt; array(\n            \"type\" =&gt; \"mechanical\",\n            \"year\" =&gt; \"1999\"\n        )\n    )\n);\n\n// All virtual robots ordered by name downward\n$robots = Robots::find(\n    array(\n        \"conditions\" =&gt; array(\"type\" =&gt; \"virtual\"),\n        \"sort\"       =&gt; array(\"name\" =&gt; -1)\n    )\n);\n</pre> <p>The available query options are:</p> <table class=\"docutils\"> <colgroup> <col width=\"8%\"> <col width=\"72%\"> <col width=\"20%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Parameter</th> <th class=\"head\">Description</th> <th class=\"head\">Example</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">conditions</span></code></td> <td>Search conditions for the find operation. Is used to extract only those records that fulfill a specified criterion. By default Phalcon_model assumes the first parameter are the conditions.</td> <td><code class=\"code docutils literal\"><span class=\"pre\">\"conditions\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">array('$gt'</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">1990)</span></code></td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">fields</span></code></td> <td>Returns specific columns instead of the full fields in the collection. When using this option an incomplete object is returned</td> <td><code class=\"code docutils literal\"><span class=\"pre\">\"fields\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">array('name'</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">true)</span></code></td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">sort</span></code></td> <td>It’s used to sort the resultset. Use one or more fields as each element in the array, 1 means ordering upwards, -1 downward</td> <td><code class=\"code docutils literal\"><span class=\"pre\">\"sort\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">array(\"name\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">-1,</span> <span class=\"pre\">\"status\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">1)</span></code></td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">limit</span></code></td> <td>Limit the results of the query to results to certain range</td> <td><code class=\"code docutils literal\"><span class=\"pre\">\"limit\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">10</span></code></td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">skip</span></code></td> <td>Skips a number of results</td> <td><code class=\"code docutils literal\"><span class=\"pre\">\"skip\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">50</span></code></td> </tr> </tbody> </table> <p>If you have experience with SQL databases, you may want to check the <a class=\"reference external\" href=\"http://www.php.net/manual/en/mongo.sqltomongo.php\">SQL to Mongo Mapping Chart</a>.</p>   <h2 id=\"aggregations\">Aggregations</h2> <p>A model can return calculations using <a class=\"reference external\" href=\"http://docs.mongodb.org/manual/applications/aggregation/\">aggregation framework</a> provided by Mongo. The aggregated values are calculate without having to use MapReduce. With this option is easy perform tasks such as totaling or averaging field values:</p> <pre class=\"highlight-php\" data-language=\"php\">$data = Article::aggregate(\n    array(\n        array(\n            '$project' =&gt; array('category' =&gt; 1)\n        ),\n        array(\n            '$group' =&gt; array(\n                '_id' =&gt; array('category' =&gt; '$category'),\n                'id'  =&gt; array('$max' =&gt; '$_id')\n            )\n        )\n    )\n);\n</pre>   <h2 id=\"creating-updating-records\">Creating Updating/Records</h2> <p>The <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Mvc\\Collection::save()</span></code> method allows you to create/update documents according to whether they already exist in the collection associated with a model. The <code class=\"code docutils literal\"><span class=\"pre\">save()</span></code> method is called internally by the create and update methods of <a class=\"reference internal\" href=\"../api/phalcon_mvc_collection\"><em>Phalcon\\Mvc\\Collection</em></a>.</p> <p>Also the method executes associated validators and events that are defined in the model:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot       = new Robots();\n$robot-&gt;type = \"mechanical\";\n$robot-&gt;name = \"Astro Boy\";\n$robot-&gt;year = 1952;\nif ($robot-&gt;save() == false) {\n    echo \"Umh, We can't store robots right now: \\n\";\n    foreach ($robot-&gt;getMessages() as $message) {\n        echo $message, \"\\n\";\n    }\n} else {\n    echo \"Great, a new robot was saved successfully!\";\n}\n</pre> <p>The “_id” property is automatically updated with the <a class=\"reference external\" href=\"http://www.php.net/manual/en/class.mongoid.php\">MongoId</a> object created by the driver:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot-&gt;save();\necho \"The generated id is: \", $robot-&gt;getId();\n</pre>  <h3 id=\"validation-messages\">Validation Messages</h3> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_collection\"><em>Phalcon\\Mvc\\Collection</em></a> has a messaging subsystem that provides a flexible way to output or store the validation messages generated during the insert/update processes.</p> <p>Each message consists of an instance of the class <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_message\"><em>Phalcon\\Mvc\\Model\\Message</em></a>. The set of messages generated can be retrieved with the method getMessages(). Each message provides extended information like the field name that generated the message or the message type:</p> <pre class=\"highlight-php\" data-language=\"php\">if ($robot-&gt;save() == false) {\n    foreach ($robot-&gt;getMessages() as $message) {\n        echo \"Message: \", $message-&gt;getMessage();\n        echo \"Field: \", $message-&gt;getField();\n        echo \"Type: \", $message-&gt;getType();\n    }\n}\n</pre>   <h3 id=\"validation-events-and-events-manager\">Validation Events and Events Manager</h3> <p>Models allow you to implement events that will be thrown when performing an insert or update. They help define business rules for a certain model. The following are the events supported by <a class=\"reference internal\" href=\"../api/phalcon_mvc_collection\"><em>Phalcon\\Mvc\\Collection</em></a> and their order of execution:</p> <table class=\"docutils\"> <colgroup> <col width=\"10%\"> <col width=\"18%\"> <col width=\"12%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operation</th> <th class=\"head\">Name</th> <th class=\"head\">Can stop operation?</th> <th class=\"head\">Explanation</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Inserting/Updating</td> <td><code class=\"code docutils literal\"><span class=\"pre\">beforeValidation</span></code></td> <td>YES</td> <td>Is executed before the validation process and the final insert/update to the database</td> </tr> <tr class=\"row-odd\">\n<td>Inserting</td> <td><code class=\"code docutils literal\"><span class=\"pre\">beforeValidationOnCreate</span></code></td> <td>YES</td> <td>Is executed before the validation process only when an insertion operation is being made</td> </tr> <tr class=\"row-even\">\n<td>Updating</td> <td><code class=\"code docutils literal\"><span class=\"pre\">beforeValidationOnUpdate</span></code></td> <td>YES</td> <td>Is executed before the fields are validated for not nulls or foreign keys when an updating operation is being made</td> </tr> <tr class=\"row-odd\">\n<td>Inserting/Updating</td> <td><code class=\"code docutils literal\"><span class=\"pre\">onValidationFails</span></code></td> <td>YES (already stopped)</td> <td>Is executed before the validation process only when an insertion operation is being made</td> </tr> <tr class=\"row-even\">\n<td>Inserting</td> <td><code class=\"code docutils literal\"><span class=\"pre\">afterValidationOnCreate</span></code></td> <td>YES</td> <td>Is executed after the validation process when an insertion operation is being made</td> </tr> <tr class=\"row-odd\">\n<td>Updating</td> <td><code class=\"code docutils literal\"><span class=\"pre\">afterValidationOnUpdate</span></code></td> <td>YES</td> <td>Is executed after the validation process when an updating operation is being made</td> </tr> <tr class=\"row-even\">\n<td>Inserting/Updating</td> <td><code class=\"code docutils literal\"><span class=\"pre\">afterValidation</span></code></td> <td>YES</td> <td>Is executed after the validation process</td> </tr> <tr class=\"row-odd\">\n<td>Inserting/Updating</td> <td><code class=\"code docutils literal\"><span class=\"pre\">beforeSave</span></code></td> <td>YES</td> <td>Runs before the required operation over the database system</td> </tr> <tr class=\"row-even\">\n<td>Updating</td> <td><code class=\"code docutils literal\"><span class=\"pre\">beforeUpdate</span></code></td> <td>YES</td> <td>Runs before the required operation over the database system only when an updating operation is being made</td> </tr> <tr class=\"row-odd\">\n<td>Inserting</td> <td><code class=\"code docutils literal\"><span class=\"pre\">beforeCreate</span></code></td> <td>YES</td> <td>Runs before the required operation over the database system only when an inserting operation is being made</td> </tr> <tr class=\"row-even\">\n<td>Updating</td> <td><code class=\"code docutils literal\"><span class=\"pre\">afterUpdate</span></code></td> <td>NO</td> <td>Runs after the required operation over the database system only when an updating operation is being made</td> </tr> <tr class=\"row-odd\">\n<td>Inserting</td> <td><code class=\"code docutils literal\"><span class=\"pre\">afterCreate</span></code></td> <td>NO</td> <td>Runs after the required operation over the database system only when an inserting operation is being made</td> </tr> <tr class=\"row-even\">\n<td>Inserting/Updating</td> <td><code class=\"code docutils literal\"><span class=\"pre\">afterSave</span></code></td> <td>NO</td> <td>Runs after the required operation over the database system</td> </tr> </tbody> </table> <p>To make a model to react to an event, we must to implement a method with the same name of the event:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function beforeValidationOnCreate()\n    {\n        echo \"This is executed before creating a Robot!\";\n    }\n}\n</pre> <p>Events can be useful to assign values before performing an operation, for example:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Collection;\n\nclass Products extends Collection\n{\n    public function beforeCreate()\n    {\n        // Set the creation date\n        $this-&gt;created_at = date('Y-m-d H:i:s');\n    }\n\n    public function beforeUpdate()\n    {\n        // Set the modification date\n        $this-&gt;modified_in = date('Y-m-d H:i:s');\n    }\n}\n</pre> <p>Additionally, this component is integrated with <a class=\"reference internal\" href=\"events\"><em>Phalcon\\Events\\Manager</em></a>, this means we can create listeners that run when an event is triggered.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Events\\Manager as EventsManager;\n\n$eventsManager = new EventsManager();\n\n// Attach an anonymous function as a listener for \"model\" events\n$eventsManager-&gt;attach('collection', function ($event, $robot) {\n    if ($event-&gt;getType() == 'beforeSave') {\n        if ($robot-&gt;name == 'Scooby Doo') {\n            echo \"Scooby Doo isn't a robot!\";\n\n            return false;\n        }\n    }\n\n    return true;\n});\n\n$robot       = new Robots();\n$robot-&gt;setEventsManager($eventsManager);\n$robot-&gt;name = 'Scooby Doo';\n$robot-&gt;year = 1969;\n$robot-&gt;save();\n</pre> <p>In the example given above the EventsManager only acted as a bridge between an object and a listener (the anonymous function). If we want all objects created in our application use the same EventsManager, then we need to assign this to the Models Manager:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Mvc\\Collection\\Manager as CollectionManager;\n\n// Registering the collectionManager service\n$di-&gt;set(\n    'collectionManager',\n    function () {\n\n        $eventsManager = new EventsManager();\n\n        // Attach an anonymous function as a listener for \"model\" events\n        $eventsManager-&gt;attach(\n            'collection',\n            function ($event, $model) {\n                if (get_class($model) == 'Robots') {\n                    if ($event-&gt;getType() == 'beforeSave') {\n                        if ($model-&gt;name == 'Scooby Doo') {\n                            echo \"Scooby Doo isn't a robot!\";\n\n                            return false;\n                        }\n                    }\n                }\n\n                return true;\n            }\n        );\n\n        // Setting a default EventsManager\n        $modelsManager = new CollectionManager();\n\n        $modelsManager-&gt;setEventsManager($eventsManager);\n\n        return $modelsManager;\n    },\n    true\n);\n</pre>   <h3 id=\"implementing-a-business-rule\">Implementing a Business Rule</h3> <p>When an insert, update or delete is executed, the model verifies if there are any methods with the names of the events listed in the table above.</p> <p>We recommend that validation methods are declared protected to prevent that business logic implementation from being exposed publicly.</p> <p>The following example implements an event that validates the year cannot be smaller than 0 on update or insert:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function beforeSave()\n    {\n        if ($this-&gt;year &lt; 0) {\n            echo \"Year cannot be smaller than zero!\";\n\n            return false;\n        }\n    }\n}\n</pre> <p>Some events return false as an indication to stop the current operation. If an event doesn’t return anything, <a class=\"reference internal\" href=\"../api/phalcon_mvc_collection\"><em>Phalcon\\Mvc\\Collection</em></a> will assume a true value.</p>   <h3 id=\"validating-data-integrity\">Validating Data Integrity</h3> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_collection\"><em>Phalcon\\Mvc\\Collection</em></a> provides several events to validate data and implement business rules. The special “validation” event allows us to call built-in validators over the record. Phalcon exposes a few built-in validators that can be used at this stage of validation.</p> <p>The following example shows how to use it:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Collection;\nuse Phalcon\\Mvc\\Model\\Validator\\InclusionIn;\nuse Phalcon\\Mvc\\Model\\Validator\\Numericality;\n\nclass Robots extends Collection\n{\n    public function validation()\n    {\n        $this-&gt;validate(\n            new InclusionIn(\n                array(\n                    \"field\"   =&gt; \"type\",\n                    \"message\" =&gt; \"Type must be: mechanical or virtual\",\n                    \"domain\"  =&gt; array(\"Mechanical\", \"Virtual\")\n                )\n            )\n        );\n\n        $this-&gt;validate(\n            new Numericality(\n                array(\n                    \"field\"   =&gt; \"price\",\n                    \"message\" =&gt; \"Price must be numeric\"\n                )\n            )\n        );\n\n        return $this-&gt;validationHasFailed() != true;\n    }\n}\n</pre> <p>The example given above performs a validation using the built-in validator “InclusionIn”. It checks the value of the field “type” in a domain list. If the value is not included in the method, then the validator will fail and return false. The following built-in validators are available:</p> <table class=\"docutils\"> <colgroup> <col width=\"10%\"> <col width=\"45%\"> <col width=\"46%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\">Explanation</th> <th class=\"head\">Example</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Email</td> <td>Validates that field contains a valid email format</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_validator_email\"><em>Example</em></a></td> </tr> <tr class=\"row-odd\">\n<td>ExclusionIn</td> <td>Validates that a value is not within a list of possible values</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_validator_exclusionin\"><em>Example</em></a></td> </tr> <tr class=\"row-even\">\n<td>InclusionIn</td> <td>Validates that a value is within a list of possible values</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_validator_inclusionin\"><em>Example</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Numericality</td> <td>Validates that a field has a numeric format</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_validator_numericality\"><em>Example</em></a></td> </tr> <tr class=\"row-even\">\n<td>Regex</td> <td>Validates that the value of a field matches a regular expression</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_validator_regex\"><em>Example</em></a></td> </tr> <tr class=\"row-odd\">\n<td>StringLength</td> <td>Validates the length of a string</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_validator_stringlength\"><em>Example</em></a></td> </tr> </tbody> </table> <p>In addition to the built-in validators, you can create your own validators:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Validator as CollectionValidator;\n\nclass UrlValidator extends CollectionValidator\n{\n    public function validate($model)\n    {\n        $field = $this-&gt;getOption('field');\n\n        $value    = $model-&gt;$field;\n        $filtered = filter_var($value, FILTER_VALIDATE_URL);\n        if (!$filtered) {\n            $this-&gt;appendMessage(\"The URL is invalid\", $field, \"UrlValidator\");\n\n            return false;\n        }\n\n        return true;\n    }\n}\n</pre> <p>Adding the validator to a model:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Collection;\n\nclass Customers extends Collection\n{\n    public function validation()\n    {\n        $this-&gt;validate(\n            new UrlValidator(\n                array(\n                    \"field\"  =&gt; \"url\",\n                )\n            )\n        );\n\n        if ($this-&gt;validationHasFailed() == true) {\n            return false;\n        }\n    }\n}\n</pre> <p>The idea of creating validators is to make them reusable across several models. A validator can also be as simple as:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Collection;\nuse Phalcon\\Mvc\\Model\\Message as ModelMessage;\n\nclass Robots extends Collection\n{\n    public function validation()\n    {\n        if ($this-&gt;type == \"Old\") {\n            $message = new ModelMessage(\n                \"Sorry, old robots are not allowed anymore\",\n                \"type\",\n                \"MyType\"\n            );\n\n            $this-&gt;appendMessage($message);\n\n            return false;\n        }\n\n        return true;\n    }\n}\n</pre>    <h2 id=\"deleting-records\">Deleting Records</h2> <p>The <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Mvc\\Collection::delete()</span></code> method allows you to delete a document. You can use it as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = Robots::findFirst();\nif ($robot != false) {\n    if ($robot-&gt;delete() == false) {\n        echo \"Sorry, we can't delete the robot right now: \\n\";\n        foreach ($robot-&gt;getMessages() as $message) {\n            echo $message, \"\\n\";\n        }\n    } else {\n        echo \"The robot was deleted successfully!\";\n    }\n}\n</pre> <p>You can also delete many documents by traversing a resultset with a <code class=\"code docutils literal\"><span class=\"pre\">foreach</span></code> loop:</p> <pre class=\"highlight-php\" data-language=\"php\">$robots = Robots::find(\n    array(\n        array(\n            \"type\" =&gt; \"mechanical\"\n        )\n    )\n);\n\nforeach ($robots as $robot) {\n    if ($robot-&gt;delete() == false) {\n        echo \"Sorry, we can't delete the robot right now: \\n\";\n        foreach ($robot-&gt;getMessages() as $message) {\n            echo $message, \"\\n\";\n        }\n    } else {\n        echo \"The robot was deleted successfully!\";\n    }\n}\n</pre> <p>The following events are available to define custom business rules that can be executed when a delete operation is performed:</p> <table class=\"docutils\"> <colgroup> <col width=\"11%\"> <col width=\"23%\"> <col width=\"22%\"> <col width=\"44%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operation</th> <th class=\"head\">Name</th> <th class=\"head\">Can stop operation?</th> <th class=\"head\">Explanation</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Deleting</td> <td><code class=\"code docutils literal\"><span class=\"pre\">beforeDelete</span></code></td> <td>YES</td> <td>Runs before the delete operation is made</td> </tr> <tr class=\"row-odd\">\n<td>Deleting</td> <td><code class=\"code docutils literal\"><span class=\"pre\">afterDelete</span></code></td> <td>NO</td> <td>Runs after the delete operation was made</td> </tr> </tbody> </table>   <h2 id=\"validation-failed-events\">Validation Failed Events</h2> <p>Another type of events is available when the data validation process finds any inconsistency:</p> <table class=\"docutils\"> <colgroup> <col width=\"21%\"> <col width=\"22%\"> <col width=\"56%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operation</th> <th class=\"head\">Name</th> <th class=\"head\">Explanation</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Insert or Update</td> <td><code class=\"code docutils literal\"><span class=\"pre\">notSave</span></code></td> <td>Triggered when the insert/update operation fails for any reason</td> </tr> <tr class=\"row-odd\">\n<td>Insert, Delete or Update</td> <td><code class=\"code docutils literal\"><span class=\"pre\">onValidationFails</span></code></td> <td>Triggered when any data manipulation operation fails</td> </tr> </tbody> </table>   <h2 id=\"implicit-ids-vs-user-primary-keys\">Implicit Ids vs. User Primary Keys</h2> <p>By default <a class=\"reference internal\" href=\"../api/phalcon_mvc_collection\"><em>Phalcon\\Mvc\\Collection</em></a> assumes that the <code class=\"code docutils literal\"><span class=\"pre\">_id</span></code> attribute is automatically generated using <a class=\"reference external\" href=\"http://www.php.net/manual/en/class.mongoid.php\">MongoIds</a>. If a model uses custom primary keys this behavior can be overridden:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function initialize()\n    {\n        $this-&gt;useImplicitObjectIds(false);\n    }\n}\n</pre>   <h2 id=\"setting-multiple-databases\">Setting multiple databases</h2> <p>In Phalcon, all models can belong to the same database connection or have an individual one. Actually, when <a class=\"reference internal\" href=\"../api/phalcon_mvc_collection\"><em>Phalcon\\Mvc\\Collection</em></a> needs to connect to the database it requests the “mongo” service in the application’s services container. You can overwrite this service setting it in the initialize method:</p> <pre class=\"highlight-php\" data-language=\"php\">// This service returns a mongo database at 192.168.1.100\n$di-&gt;set(\n    'mongo1',\n    function () {\n        $mongo = new MongoClient(\"mongodb://scott:[email protected]\");\n\n        return $mongo-&gt;selectDB(\"management\");\n    },\n    true\n);\n\n// This service returns a mongo database at localhost\n$di-&gt;set(\n    'mongo2',\n    function () {\n        $mongo = new MongoClient(\"mongodb://localhost\");\n\n        return $mongo-&gt;selectDB(\"invoicing\");\n    },\n    true\n);\n</pre> <p>Then, in the <code class=\"code docutils literal\"><span class=\"pre\">initialize()</span></code> method, we define the connection service for the model:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function initialize()\n    {\n        $this-&gt;setConnectionService('mongo1');\n    }\n}\n</pre>   <h2 id=\"injecting-services-into-models\">Injecting services into Models</h2> <p>You may be required to access the application services within a model, the following example explains how to do that:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function notSave()\n    {\n        // Obtain the flash service from the DI container\n        $flash = $this-&gt;getDI()-&gt;getShared('flash');\n\n        // Show validation messages\n        foreach ($this-&gt;getMessages() as $message) {\n            $flash-&gt;error((string) $message);\n        }\n    }\n}\n</pre> <p>The “notSave” event is triggered whenever a “creating” or “updating” action fails. We’re flashing the validation messages obtaining the “flash” service from the DI container. By doing this, we don’t have to print messages after each saving.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/odm.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/odm.html</a>\n  </p>\n</div>\n","reference/models-cache":"<h1 id=\"caching-in-the-orm\">Caching in the ORM</h1> <p>Every application is different, we could have models whose data change frequently and others that rarely change. Accessing database systems is often one of the most common bottlenecks in terms of performance. This is due to the complex connection/communication processes that PHP must do in each request to obtain data from the database. Therefore, if we want to achieve good performance we need to add some layers of caching where the application requires it.</p> <p>This chapter explains the possible points where it is possible to implement caching to improve performance. The framework gives you the tools to implement the cache where you demand of it according to the architecture of your application.</p>  <h2 id=\"caching-resultsets\">Caching Resultsets</h2> <p>A well established technique to avoid the continuous access to the database is to cache resultsets that don’t change frequently using a system with faster access (usually memory).</p> <p>When <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> requires a service to cache resultsets, it will request it to the Dependency Injector Container with the convention name “modelsCache”.</p> <p>As Phalcon provides a component to <a class=\"reference internal\" href=\"cache\"><em>cache</em></a> any kind of data, we’ll explain how to integrate it with Models. First, you must register it as a service in the services container:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Cache\\Frontend\\Data as FrontendData;\nuse Phalcon\\Cache\\Backend\\Memcache as BackendMemcache;\n\n// Set the models cache service\n$di-&gt;set('modelsCache', function () {\n\n    // Cache data for one day by default\n    $frontCache = new FrontendData(\n        array(\n            \"lifetime\" =&gt; 86400\n        )\n    );\n\n    // Memcached connection settings\n    $cache = new BackendMemcache(\n        $frontCache,\n        array(\n            \"host\" =&gt; \"localhost\",\n            \"port\" =&gt; \"11211\"\n        )\n    );\n\n    return $cache;\n});\n</pre> <p>You have complete control in creating and customizing the cache before being used by registering the service as an anonymous function. Once the cache setup is properly defined you could cache resultsets as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">// Get products without caching\n$products = Products::find();\n\n// Just cache the resultset. The cache will expire in 1 hour (3600 seconds)\n$products = Products::find(\n    array(\n        \"cache\" =&gt; array(\n            \"key\" =&gt; \"my-cache\"\n        )\n    )\n);\n\n// Cache the resultset for only for 5 minutes\n$products = Products::find(\n    array(\n        \"cache\" =&gt; array(\n            \"key\"      =&gt; \"my-cache\",\n            \"lifetime\" =&gt; 300\n        )\n    )\n);\n\n// Using a custom cache\n$products = Products::find(\n    array(\n        \"cache\" =&gt; $myCache\n    )\n);\n</pre> <p>Caching could be also applied to resultsets generated using relationships:</p> <pre class=\"highlight-php\" data-language=\"php\">// Query some post\n$post     = Post::findFirst();\n\n// Get comments related to a post, also cache it\n$comments = $post-&gt;getComments(\n    array(\n        \"cache\" =&gt; array(\n            \"key\" =&gt; \"my-key\"\n        )\n    )\n);\n\n// Get comments related to a post, setting lifetime\n$comments = $post-&gt;getComments(\n    array(\n        \"cache\" =&gt; array(\n            \"key\"      =&gt; \"my-key\",\n            \"lifetime\" =&gt; 3600\n        )\n    )\n);\n</pre> <p>When a cached resultset needs to be invalidated, you can simply delete it from the cache using the previously specified key.</p> <p>Note that not all resultsets must be cached. Results that change very frequently should not be cached since they are invalidated very quickly and caching in that case impacts performance. Additionally, large datasets that do not change frequently could be cached, but that is a decision that the developer has to make based on the available caching mechanism and whether the performance impact to simply retrieve that data in the first place is acceptable.</p>   <h2 id=\"overriding-find-findfirst\">Overriding find/findFirst</h2> <p>As seen above, these methods are available in models that inherit <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a>:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public static function find($parameters = null)\n    {\n        return parent::find($parameters);\n    }\n\n    public static function findFirst($parameters = null)\n    {\n        return parent::findFirst($parameters);\n    }\n}\n</pre> <p>By doing this, you’re intercepting all the calls to these methods, this way, you can add a cache layer or run the query if there is no cache. For example, a very basic cache implementation, uses a static property to avoid that a record would be queried several times in a same request:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    protected static $_cache = array();\n\n    /**\n     * Implement a method that returns a string key based\n     * on the query parameters\n     */\n    protected static function _createKey($parameters)\n    {\n        $uniqueKey = array();\n\n        foreach ($parameters as $key =&gt; $value) {\n            if (is_scalar($value)) {\n                $uniqueKey[] = $key . ':' . $value;\n            } else {\n                if (is_array($value)) {\n                    $uniqueKey[] = $key . ':[' . self::_createKey($value) .']';\n                }\n            }\n        }\n\n        return join(',', $uniqueKey);\n    }\n\n    public static function find($parameters = null)\n    {\n        // Create an unique key based on the parameters\n        $key = self::_createKey($parameters);\n\n        if (!isset(self::$_cache[$key])) {\n            // Store the result in the memory cache\n            self::$_cache[$key] = parent::find($parameters);\n        }\n\n        // Return the result in the cache\n        return self::$_cache[$key];\n    }\n\n    public static function findFirst($parameters = null)\n    {\n        // ...\n    }\n}\n</pre> <p>Access the database is several times slower than calculate a cache key, you’re free in implement the key generation strategy you find better for your needs. Note that a good key avoids collisions as much as possible, this means that different keys returns unrelated records to the find parameters.</p> <p>In the above example, we used a cache in memory, it is useful as a first level cache. Once we have the memory cache, we can implement a second level cache layer like APC/XCache or a NoSQL database:</p> <pre class=\"highlight-php\" data-language=\"php\">public static function find($parameters = null)\n{\n    // Create an unique key based on the parameters\n    $key = self::_createKey($parameters);\n\n    if (!isset(self::$_cache[$key])) {\n\n        // We're using APC as second cache\n        if (apc_exists($key)) {\n\n            $data = apc_fetch($key);\n\n            // Store the result in the memory cache\n            self::$_cache[$key] = $data;\n\n            return $data;\n        }\n\n        // There are no memory or apc cache\n        $data = parent::find($parameters);\n\n        // Store the result in the memory cache\n        self::$_cache[$key] = $data;\n\n        // Store the result in APC\n        apc_store($key, $data);\n\n        return $data;\n    }\n\n    // Return the result in the cache\n    return self::$_cache[$key];\n}\n</pre> <p>This gives you full control on how the caches must be implemented for each model, if this strategy is common to several models you can create a base class for all of them:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass CacheableModel extends Model\n{\n    protected static function _createKey($parameters)\n    {\n        // ... Create a cache key based on the parameters\n    }\n\n    public static function find($parameters = null)\n    {\n        // ... Custom caching strategy\n    }\n\n    public static function findFirst($parameters = null)\n    {\n        // ... Custom caching strategy\n    }\n}\n</pre> <p>Then use this class as base class for each ‘Cacheable’ model:</p> <pre class=\"highlight-php\" data-language=\"php\">class Robots extends CacheableModel\n{\n\n}\n</pre>   <h2 id=\"forcing-cache\">Forcing Cache</h2> <p>Earlier we saw how <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> has a built-in integration with the caching component provided by the framework. To make a record/resultset cacheable we pass the key ‘cache’ in the array of parameters:</p> <pre class=\"highlight-php\" data-language=\"php\">// Cache the resultset for only for 5 minutes\n$products = Products::find(\n    array(\n        \"cache\" =&gt; array(\n            \"key\"      =&gt; \"my-cache\",\n            \"lifetime\" =&gt; 300\n        )\n    )\n);\n</pre> <p>This gives us the freedom to cache specific queries, however if we want to cache globally every query performed over the model, we can override the find/findFirst method to force every query to be cached:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    protected static function _createKey($parameters)\n    {\n        // ... Create a cache key based on the parameters\n    }\n\n    public static function find($parameters = null)\n    {\n        // Convert the parameters to an array\n        if (!is_array($parameters)) {\n            $parameters = array($parameters);\n        }\n\n        // Check if a cache key wasn't passed\n        // and create the cache parameters\n        if (!isset($parameters['cache'])) {\n            $parameters['cache'] = array(\n                \"key\"      =&gt; self::_createKey($parameters),\n                \"lifetime\" =&gt; 300\n            );\n        }\n\n        return parent::find($parameters);\n    }\n\n    public static function findFirst($parameters = null)\n    {\n        // ...\n    }\n\n}\n</pre>   <h2 id=\"caching-phql-queries\">Caching PHQL Queries</h2> <p>All queries in the ORM, no matter how high level syntax we used to create them are handled internally using PHQL. This language gives you much more freedom to create all kinds of queries. Of course these queries can be cached:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql = \"SELECT * FROM Cars WHERE name = :name:\";\n\n$query = $this-&gt;modelsManager-&gt;createQuery($phql);\n\n$query-&gt;cache(\n    array(\n        \"key\"      =&gt; \"cars-by-name\",\n        \"lifetime\" =&gt; 300\n    )\n);\n\n$cars = $query-&gt;execute(\n    array(\n        'name' =&gt; 'Audi'\n    )\n);\n</pre> <p>If you don’t want to use the implicit cache just save the resultset into your favorite cache backend:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql = \"SELECT * FROM Cars WHERE name = :name:\";\n\n$cars = $this-&gt;modelsManager-&gt;executeQuery(\n    $phql,\n    array(\n        'name' =&gt; 'Audi'\n    )\n);\n\napc_store('my-cars', $cars);\n</pre>   <h2 id=\"reusable-related-records\">Reusable Related Records</h2> <p>Some models may have relationships to other models. This allows us to easily check the records that relate to instances in memory:</p> <pre class=\"highlight-php\" data-language=\"php\">// Get some invoice\n$invoice  = Invoices::findFirst();\n\n// Get the customer related to the invoice\n$customer = $invoice-&gt;customer;\n\n// Print his/her name\necho $customer-&gt;name, \"\\n\";\n</pre> <p>This example is very simple, a customer is queried and can be used as required, for example, to show its name. This also applies if we retrieve a set of invoices to show customers that correspond to these invoices:</p> <pre class=\"highlight-php\" data-language=\"php\">// Get a set of invoices\n// SELECT * FROM invoices;\nforeach (Invoices::find() as $invoice) {\n\n    // Get the customer related to the invoice\n    // SELECT * FROM customers WHERE id = ?;\n    $customer = $invoice-&gt;customer;\n\n    // Print his/her name\n    echo $customer-&gt;name, \"\\n\";\n}\n</pre> <p>A customer may have one or more bills, this means that the customer may be unnecessarily more than once. To avoid this, we could mark the relationship as reusable, this way, we tell the ORM to automatically reuse the records instead of re-querying them again and again:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            \"customers_id\",\n            \"Customer\",\n            \"id\",\n            array(\n                'reusable' =&gt; true\n            )\n        );\n    }\n}\n</pre> <p>This cache works in memory only, this means that cached data are released when the request is terminated. You can add a more sophisticated cache for this scenario overriding the models manager:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Manager as ModelManager;\n\nclass CustomModelsManager extends ModelManager\n{\n    /**\n     * Returns a reusable object from the cache\n     *\n     * @param string $modelName\n     * @param string $key\n     * @return object\n     */\n    public function getReusableRecords($modelName, $key)\n    {\n        // If the model is Products use the APC cache\n        if ($modelName == 'Products') {\n            return apc_fetch($key);\n        }\n\n        // For the rest, use the memory cache\n        return parent::getReusableRecords($modelName, $key);\n    }\n\n    /**\n     * Stores a reusable record in the cache\n     *\n     * @param string $modelName\n     * @param string $key\n     * @param mixed $records\n     */\n    public function setReusableRecords($modelName, $key, $records)\n    {\n        // If the model is Products use the APC cache\n        if ($modelName == 'Products') {\n            apc_store($key, $records);\n            return;\n        }\n\n        // For the rest, use the memory cache\n        parent::setReusableRecords($modelName, $key, $records);\n    }\n}\n</pre> <p>Do not forget to register the custom models manager in the DI:</p> <pre class=\"highlight-php\" data-language=\"php\">$di-&gt;setShared('modelsManager', function () {\n    return new CustomModelsManager();\n});\n</pre>   <h2 id=\"caching-related-records\">Caching Related Records</h2> <p>When a related record is queried, the ORM internally builds the appropriate condition and gets the required records using find/findFirst in the target model according to the following table:</p> <table class=\"docutils\"> <colgroup> <col width=\"16%\"> <col width=\"84%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Type</th> <th class=\"head\">Description | Implicit Method</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Belongs-To</td> <td>Returns a model instance of the related record directly | findFirst</td> </tr> <tr class=\"row-odd\">\n<td>Has-One</td> <td>Returns a model instance of the related record directly | findFirst</td> </tr> <tr class=\"row-even\">\n<td>Has-Many</td> <td>Returns a collection of model instances of the referenced model | find</td> </tr> </tbody> </table> <p>This means that when you get a related record you could intercept how these data are obtained by implementing the corresponding method:</p> <pre class=\"highlight-php\" data-language=\"php\">// Get some invoice\n$invoice  = Invoices::findFirst();\n\n// Get the customer related to the invoice\n$customer = $invoice-&gt;customer; // Invoices::findFirst('...');\n\n// Same as above\n$customer = $invoice-&gt;getCustomer(); // Invoices::findFirst('...');\n</pre> <p>Accordingly, we could replace the findFirst method in the model Invoices and implement the cache we consider most appropriate:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public static function findFirst($parameters = null)\n    {\n        // .. custom caching strategy\n    }\n}\n</pre>   <h2 id=\"caching-related-records-recursively\">Caching Related Records Recursively</h2> <p>In this scenario, we assume that everytime we query a result we also retrieve their associated records. If we store the records found together with their related entities perhaps we could reduce a bit the overhead required to obtain all entities:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    protected static function _createKey($parameters)\n    {\n        // ... Create a cache key based on the parameters\n    }\n\n    protected static function _getCache($key)\n    {\n        // Returns data from a cache\n    }\n\n    protected static function _setCache($key)\n    {\n        // Stores data in the cache\n    }\n\n    public static function find($parameters = null)\n    {\n        // Create a unique key\n        $key     = self::_createKey($parameters);\n\n        // Check if there are data in the cache\n        $results = self::_getCache($key);\n\n        // Valid data is an object\n        if (is_object($results)) {\n            return $results;\n        }\n\n        $results = array();\n\n        $invoices = parent::find($parameters);\n        foreach ($invoices as $invoice) {\n\n            // Query the related customer\n            $customer = $invoice-&gt;customer;\n\n            // Assign it to the record\n            $invoice-&gt;customer = $customer;\n\n            $results[] = $invoice;\n        }\n\n        // Store the invoices in the cache + their customers\n        self::_setCache($key, $results);\n\n        return $results;\n    }\n\n    public function initialize()\n    {\n        // Add relations and initialize other stuff\n    }\n}\n</pre> <p>Getting the invoices from the cache already obtains the customer data in just one hit, reducing the overall overhead of the operation. Note that this process can also be performed with PHQL following an alternative solution:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        // Add relations and initialize other stuff\n    }\n\n    protected static function _createKey($conditions, $params)\n    {\n        // ... Create a cache key based on the parameters\n    }\n\n    public function getInvoicesCustomers($conditions, $params = null)\n    {\n        $phql  = \"SELECT Invoices.*, Customers.*\n        FROM Invoices JOIN Customers WHERE \" . $conditions;\n\n        $query = $this-&gt;getModelsManager()-&gt;executeQuery($phql);\n\n        $query-&gt;cache(\n            array(\n                \"key\"      =&gt; self::_createKey($conditions, $params),\n                \"lifetime\" =&gt; 300\n            )\n        );\n\n        return $query-&gt;execute($params);\n    }\n\n}\n</pre>   <h2 id=\"caching-based-on-conditions\">Caching based on Conditions</h2> <p>In this scenario, the cache is implemented conditionally according to current conditions received. According to the range where the primary key is located we choose a different cache backend:</p> <table class=\"docutils\"> <colgroup> <col width=\"51%\"> <col width=\"49%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Type</th> <th class=\"head\">Cache Backend</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>1 - 10000</td> <td>mongo1</td> </tr> <tr class=\"row-odd\">\n<td>10000 - 20000</td> <td>mongo2</td> </tr> <tr class=\"row-even\">\n<td>&gt; 20000</td> <td>mongo3</td> </tr> </tbody> </table> <p>The easiest way is adding a static method to the model that chooses the right cache to be used:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public static function queryCache($initial, $final)\n    {\n        if ($initial &gt;= 1 &amp;&amp; $final &lt; 10000) {\n            return self::find(\n                array(\n                    'id &gt;= ' . $initial . ' AND id &lt;= '.$final,\n                    'cache' =&gt; array(\n                        'service' =&gt; 'mongo1'\n                    )\n                )\n            );\n        }\n\n        if ($initial &gt;= 10000 &amp;&amp; $final &lt;= 20000) {\n            return self::find(\n                array(\n                    'id &gt;= ' . $initial . ' AND id &lt;= '.$final,\n                    'cache' =&gt; array(\n                        'service' =&gt; 'mongo2'\n                    )\n                )\n            );\n        }\n\n        if ($initial &gt; 20000) {\n            return self::find(\n                array(\n                    'id &gt;= ' . $initial,\n                    'cache' =&gt; array(\n                        'service' =&gt; 'mongo3'\n                    )\n                )\n            );\n        }\n    }\n}\n</pre> <p>This approach solves the problem, however, if we want to add other parameters such orders or conditions we would have to create a more complicated method. Additionally, this method does not work if the data is obtained using related records or a find/findFirst:</p> <pre class=\"highlight-php\" data-language=\"php\">$robots = Robots::find('id &lt; 1000');\n$robots = Robots::find('id &gt; 100 AND type = \"A\"');\n$robots = Robots::find('(id &gt; 100 AND type = \"A\") AND id &lt; 2000');\n\n$robots = Robots::find(\n    array(\n        '(id &gt; ?0 AND type = \"A\") AND id &lt; ?1',\n        'bind'  =&gt; array(100, 2000),\n        'order' =&gt; 'type'\n    )\n);\n</pre> <p>To achieve this we need to intercept the intermediate representation (IR) generated by the PHQL parser and thus customize the cache everything possible:</p> <p>The first is create a custom builder, so we can generate a totally customized query:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Query\\Builder as QueryBuilder;\n\nclass CustomQueryBuilder extends QueryBuilder\n{\n    public function getQuery()\n    {\n        $query = new CustomQuery($this-&gt;getPhql());\n        $query-&gt;setDI($this-&gt;getDI());\n        return $query;\n    }\n}\n</pre> <p>Instead of directly returning a <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_query\"><em>Phalcon\\Mvc\\Model\\Query</em></a>, our custom builder returns a CustomQuery instance, this class looks like:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Query as ModelQuery;\n\nclass CustomQuery extends ModelQuery\n{\n    /**\n     * The execute method is overridden\n     */\n    public function execute($params = null, $types = null)\n    {\n        // Parse the intermediate representation for the SELECT\n        $ir = $this-&gt;parse();\n\n        // Check if the query has conditions\n        if (isset($ir['where'])) {\n\n            // The fields in the conditions can have any order\n            // We need to recursively check the conditions tree\n            // to find the info we're looking for\n            $visitor = new CustomNodeVisitor();\n\n            // Recursively visits the nodes\n            $visitor-&gt;visit($ir['where']);\n\n            $initial = $visitor-&gt;getInitial();\n            $final   = $visitor-&gt;getFinal();\n\n            // Select the cache according to the range\n            // ...\n\n            // Check if the cache has data\n            // ...\n        }\n\n        // Execute the query\n        $result = $this-&gt;_executeSelect($ir, $params, $types);\n\n        // Cache the result\n        // ...\n\n        return $result;\n    }\n}\n</pre> <p>Implementing a helper (CustomNodeVisitor) that recursively checks the conditions looking for fields that tell us the possible range to be used in the cache:</p> <pre class=\"highlight-php\" data-language=\"php\">class CustomNodeVisitor\n{\n    protected $_initial = 0;\n\n    protected $_final = 25000;\n\n    public function visit($node)\n    {\n        switch ($node['type']) {\n\n            case 'binary-op':\n\n                $left  = $this-&gt;visit($node['left']);\n                $right = $this-&gt;visit($node['right']);\n                if (!$left || !$right) {\n                    return false;\n                }\n\n                if ($left=='id') {\n                    if ($node['op'] == '&gt;') {\n                        $this-&gt;_initial = $right;\n                    }\n                    if ($node['op'] == '=') {\n                        $this-&gt;_initial = $right;\n                    }\n                    if ($node['op'] == '&gt;=')    {\n                        $this-&gt;_initial = $right;\n                    }\n                    if ($node['op'] == '&lt;') {\n                        $this-&gt;_final = $right;\n                    }\n                    if ($node['op'] == '&lt;=')    {\n                        $this-&gt;_final = $right;\n                    }\n                }\n                break;\n\n            case 'qualified':\n                if ($node['name'] == 'id') {\n                    return 'id';\n                }\n                break;\n\n            case 'literal':\n                return $node['value'];\n\n            default:\n                return false;\n        }\n    }\n\n    public function getInitial()\n    {\n        return $this-&gt;_initial;\n    }\n\n    public function getFinal()\n    {\n        return $this-&gt;_final;\n    }\n}\n</pre> <p>Finally, we can replace the find method in the Robots model to use the custom classes we’ve created:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public static function find($parameters = null)\n    {\n        if (!is_array($parameters)) {\n            $parameters = array($parameters);\n        }\n\n        $builder = new CustomQueryBuilder($parameters);\n        $builder-&gt;from(get_called_class());\n\n        if (isset($parameters['bind'])) {\n            return $builder-&gt;getQuery()-&gt;execute($parameters['bind']);\n        } else {\n            return $builder-&gt;getQuery()-&gt;execute();\n        }\n    }\n}\n</pre>   <h2 id=\"caching-of-phql-planning\">Caching of PHQL planning</h2> <p>As well as most moderns database systems PHQL internally caches the execution plan, if the same statement is executed several times PHQL reuses the previously generated plan improving performance, for a developer to take better advantage of this is highly recommended build all your SQL statements passing variable parameters as bound parameters:</p> <pre class=\"highlight-php\" data-language=\"php\">for ($i = 1; $i &lt;= 10; $i++) {\n\n    $phql   = \"SELECT * FROM Store\\Robots WHERE id = \" . $i;\n    $robots = $this-&gt;modelsManager-&gt;executeQuery($phql);\n\n    // ...\n}\n</pre> <p>In the above example, ten plans were generated increasing the memory usage and processing in the application. Rewriting the code to take advantage of bound parameters reduces the processing by both ORM and database system:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql = \"SELECT * FROM Store\\Robots WHERE id = ?0\";\n\nfor ($i = 1; $i &lt;= 10; $i++) {\n\n    $robots = $this-&gt;modelsManager-&gt;executeQuery($phql, array($i));\n\n    // ...\n}\n</pre> <p>Performance can be also improved reusing the PHQL query:</p> <pre class=\"highlight-php\" data-language=\"php\">$phql  = \"SELECT * FROM Store\\Robots WHERE id = ?0\";\n$query = $this-&gt;modelsManager-&gt;createQuery($phql);\n\nfor ($i = 1; $i &lt;= 10; $i++) {\n\n    $robots = $query-&gt;execute($phql, array($i));\n\n    // ...\n}\n</pre> <p>Execution plans for queries involving <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Prepared_statement\">prepared statements</a> are also cached by most database systems reducing the overall execution time, also protecting your application against <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/SQL_injection\">SQL Injections</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/models-cache.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/models-cache.html</a>\n  </p>\n</div>\n","reference/views":"<h1 id=\"using-views\">Using Views</h1> <p>Views represent the user interface of your application. Views are often HTML files with embedded PHP code that perform tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application.</p> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> and <a class=\"reference internal\" href=\"../api/phalcon_mvc_view_simple\"><em>Phalcon\\Mvc\\View\\Simple</em></a> are responsible for the managing the view layer of your MVC application.</p>  <h2 id=\"integrating-views-with-controllers\">Integrating Views with Controllers</h2> <p>Phalcon automatically passes the execution to the view component as soon as a particular controller has completed its cycle. The view component will look in the views folder for a folder named as the same name of the last controller executed and then for a file named as the last action executed. For instance, if a request is made to the URL <em>http://127.0.0.1/blog/posts/show/301</em>, Phalcon will parse the URL as follows:</p> <table class=\"docutils\"> <colgroup> <col width=\"63%\"> <col width=\"37%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td>Server Address</td> <td>127.0.0.1</td> </tr> <tr class=\"row-even\">\n<td>Phalcon Directory</td> <td>blog</td> </tr> <tr class=\"row-odd\">\n<td>Controller</td> <td>posts</td> </tr> <tr class=\"row-even\">\n<td>Action</td> <td>show</td> </tr> <tr class=\"row-odd\">\n<td>Parameter</td> <td>301</td> </tr> </tbody> </table> <p>The dispatcher will look for a “PostsController” and its action “showAction”. A simple controller file for this example:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction($postId)\n    {\n        // Pass the $postId parameter to the view\n        $this-&gt;view-&gt;postId = $postId;\n    }\n}\n</pre> <p>The setVar allows us to create view variables on demand so that they can be used in the view template. The example above demonstrates how to pass the <code class=\"code docutils literal\"><span class=\"pre\">$postId</span></code> parameter to the respective view template.</p>   <h2 id=\"hierarchical-rendering\">Hierarchical Rendering</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> supports a hierarchy of files and is the default component for view rendering in Phalcon. This hierarchy allows for common layout points (commonly used views), as well as controller named folders defining respective view templates.</p> <p>This component uses by default PHP itself as the template engine, therefore views should have the .phtml extension. If the views directory is <em>app/views</em> then view component will find automatically for these 3 view files.</p> <table class=\"docutils\"> <colgroup> <col width=\"7%\"> <col width=\"12%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\">File</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Action View</td> <td>app/views/posts/show.phtml</td> <td>This is the view related to the action. It only will be shown when the “show” action was executed.</td> </tr> <tr class=\"row-odd\">\n<td>Controller Layout</td> <td>app/views/layouts/posts.phtml</td> <td>This is the view related to the controller. It only will be shown for every action executed within the controller “posts”. All the code implemented in the layout will be reused for all the actions in this controller.</td> </tr> <tr class=\"row-even\">\n<td>Main Layout</td> <td>app/views/index.phtml</td> <td>This is main action it will be shown for every controller or action executed within the application.</td> </tr> </tbody> </table> <p>You are not required to implement all of the files mentioned above. <a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> will simply move to the next view level in the hierarchy of files. If all three view files are implemented, they will be processed as follows:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;!-- app/views/posts/show.phtml --&gt;\n\n&lt;h3&gt;This is show view!&lt;/h3&gt;\n\n&lt;p&gt;I have received the parameter &lt;?php echo $postId; ?&gt;&lt;/p&gt;\n</pre> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;!-- app/views/layouts/posts.phtml --&gt;\n\n&lt;h2&gt;This is the \"posts\" controller layout!&lt;/h2&gt;\n\n&lt;?php echo $this-&gt;getContent(); ?&gt;\n</pre> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;!-- app/views/index.phtml --&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Example&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;h1&gt;This is main layout!&lt;/h1&gt;\n\n        &lt;?php echo $this-&gt;getContent(); ?&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>Note the lines where the method <code class=\"code docutils literal\"><span class=\"pre\">$this-&gt;getContent()</span></code> was called. This method instructs <a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> on where to inject the contents of the previous view executed in the hierarchy. For the example above, the output will be:</p> <div class=\"figure align-center\"> <img alt=\"../_images/views-1.png\" src=\"https://docs.phalconphp.com/en/latest/_images/views-1.png\"> </div> <p>The generated HTML by the request will be:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;!-- app/views/index.phtml --&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Example&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;h1&gt;This is main layout!&lt;/h1&gt;\n\n        &lt;!-- app/views/layouts/posts.phtml --&gt;\n\n        &lt;h2&gt;This is the \"posts\" controller layout!&lt;/h2&gt;\n\n        &lt;!-- app/views/posts/show.phtml --&gt;\n\n        &lt;h3&gt;This is show view!&lt;/h3&gt;\n\n        &lt;p&gt;I have received the parameter 101&lt;/p&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre>  <h3 id=\"using-templates\">Using Templates</h3> <p>Templates are views that can be used to share common view code. They act as controller layouts, so you need to place them in the layouts directory.</p> <p>Templates can be rendered before the layout (using <code class=\"code docutils literal\"><span class=\"pre\">$this-&gt;view-&gt;setTemplateBefore()</span></code>) or they can be rendered after the layout (using <code class=\"code docutils literal\"><span class=\"pre\">this-&gt;view-&gt;setTemplateAfter()</span></code>). In the following example the template (layouts/common.phtml) is rendered after the main layout (layouts/posts.phtml):</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function initialize()\n    {\n        $this-&gt;view-&gt;setTemplateAfter('common');\n    }\n\n    public function lastAction()\n    {\n        $this-&gt;flash-&gt;notice(\"These are the latest posts\");\n    }\n}\n</pre> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;!-- app/views/index.phtml --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Blog's title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;?php echo $this-&gt;getContent(); ?&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;!-- app/views/layouts/common.phtml --&gt;\n\n&lt;ul class=\"menu\"&gt;\n    &lt;li&gt;&lt;a href=\"/\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"/articles\"&gt;Articles&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"/contact\"&gt;Contact us&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;div class=\"content\"&gt;&lt;?php echo $this-&gt;getContent(); ?&gt;&lt;/div&gt;\n</pre> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;!-- app/views/layouts/posts.phtml --&gt;\n\n&lt;h1&gt;Blog Title&lt;/h1&gt;\n\n&lt;?php echo $this-&gt;getContent(); ?&gt;\n</pre> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;!-- app/views/posts/last.phtml --&gt;\n\n&lt;article&gt;\n    &lt;h2&gt;This is a title&lt;/h2&gt;\n    &lt;p&gt;This is the post content&lt;/p&gt;\n&lt;/article&gt;\n\n&lt;article&gt;\n    &lt;h2&gt;This is another title&lt;/h2&gt;\n    &lt;p&gt;This is another post content&lt;/p&gt;\n&lt;/article&gt;\n</pre> <p>The final output will be the following:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;!-- app/views/index.phtml --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Blog's title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;!-- app/views/layouts/common.phtml --&gt;\n\n        &lt;ul class=\"menu\"&gt;\n            &lt;li&gt;&lt;a href=\"/\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"/articles\"&gt;Articles&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"/contact\"&gt;Contact us&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n\n        &lt;div class=\"content\"&gt;\n\n            &lt;!-- app/views/layouts/posts.phtml --&gt;\n\n            &lt;h1&gt;Blog Title&lt;/h1&gt;\n\n            &lt;!-- app/views/posts/last.phtml --&gt;\n\n            &lt;article&gt;\n                &lt;h2&gt;This is a title&lt;/h2&gt;\n                &lt;p&gt;This is the post content&lt;/p&gt;\n            &lt;/article&gt;\n\n            &lt;article&gt;\n                &lt;h2&gt;This is another title&lt;/h2&gt;\n                &lt;p&gt;This is another post content&lt;/p&gt;\n            &lt;/article&gt;\n\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>If we had used <code class=\"code docutils literal\"><span class=\"pre\">$this-&gt;view-&gt;setTemplateBefore('common')</span></code>, this would be the final output:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;!-- app/views/index.phtml --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Blog's title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;!-- app/views/layouts/posts.phtml --&gt;\n\n        &lt;h1&gt;Blog Title&lt;/h1&gt;\n\n        &lt;!-- app/views/layouts/common.phtml --&gt;\n\n        &lt;ul class=\"menu\"&gt;\n            &lt;li&gt;&lt;a href=\"/\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"/articles\"&gt;Articles&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"/contact\"&gt;Contact us&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n\n        &lt;div class=\"content\"&gt;\n\n            &lt;!-- app/views/posts/last.phtml --&gt;\n\n            &lt;article&gt;\n                &lt;h2&gt;This is a title&lt;/h2&gt;\n                &lt;p&gt;This is the post content&lt;/p&gt;\n            &lt;/article&gt;\n\n            &lt;article&gt;\n                &lt;h2&gt;This is another title&lt;/h2&gt;\n                &lt;p&gt;This is another post content&lt;/p&gt;\n            &lt;/article&gt;\n\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre>   <h3 id=\"control-rendering-levels\">Control Rendering Levels</h3> <p>As seen above, <a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> supports a view hierarchy. You might need to control the level of rendering produced by the view component. The method <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Mvc\\View::setRenderLevel()</span></code> offers this functionality.</p> <p>This method can be invoked from the controller or from a superior view layer to interfere with the rendering process.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function findAction()\n    {\n        // This is an Ajax response so it doesn't generate any kind of view\n        $this-&gt;view-&gt;setRenderLevel(View::LEVEL_NO_RENDER);\n\n        // ...\n    }\n\n    public function showAction($postId)\n    {\n        // Shows only the view related to the action\n        $this-&gt;view-&gt;setRenderLevel(View::LEVEL_ACTION_VIEW);\n    }\n}\n</pre> <p>The available render levels are:</p> <table class=\"docutils\"> <colgroup> <col width=\"22%\"> <col width=\"71%\"> <col width=\"7%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Class Constant</th> <th class=\"head\">Description</th> <th class=\"head\">Order</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>LEVEL_NO_RENDER</td> <td>Indicates to avoid generating any kind of presentation.</td> <td> </td> </tr> <tr class=\"row-odd\">\n<td>LEVEL_ACTION_VIEW</td> <td>Generates the presentation to the view associated to the action.</td> <td>1</td> </tr> <tr class=\"row-even\">\n<td>LEVEL_BEFORE_TEMPLATE</td> <td>Generates presentation templates prior to the controller layout.</td> <td>2</td> </tr> <tr class=\"row-odd\">\n<td>LEVEL_LAYOUT</td> <td>Generates the presentation to the controller layout.</td> <td>3</td> </tr> <tr class=\"row-even\">\n<td>LEVEL_AFTER_TEMPLATE</td> <td>Generates the presentation to the templates after the controller layout.</td> <td>4</td> </tr> <tr class=\"row-odd\">\n<td>LEVEL_MAIN_LAYOUT</td> <td>Generates the presentation to the main layout. File views/index.phtml</td> <td>5</td> </tr> </tbody> </table>   <h3 id=\"disabling-render-levels\">Disabling render levels</h3> <p>You can permanently or temporarily disable render levels. A level could be permanently disabled if it isn’t used at all in the whole application:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View;\n\n$di-&gt;set('view', function () {\n\n    $view = new View();\n\n    // Disable several levels\n    $view-&gt;disableLevel(\n        array(\n            View::LEVEL_LAYOUT      =&gt; true,\n            View::LEVEL_MAIN_LAYOUT =&gt; true\n        )\n    );\n\n    return $view;\n}, true);\n</pre> <p>Or disable temporarily in some part of the application:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function findAction()\n    {\n        $this-&gt;view-&gt;disableLevel(View::LEVEL_MAIN_LAYOUT);\n    }\n}\n</pre>   <h3 id=\"picking-views\">Picking Views</h3> <p>As mentioned above, when <a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> is managed by <a class=\"reference internal\" href=\"../api/phalcon_mvc_application\"><em>Phalcon\\Mvc\\Application</em></a> the view rendered is the one related with the last controller and action executed. You could override this by using the <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Mvc\\View::pick()</span></code> method:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n    public function listAction()\n    {\n        // Pick \"views-dir/products/search\" as view to render\n        $this-&gt;view-&gt;pick(\"products/search\");\n\n        // Pick \"views-dir/books/list\" as view to render\n        $this-&gt;view-&gt;pick(array('books'));\n\n        // Pick \"views-dir/products/search\" as view to render\n        $this-&gt;view-&gt;pick(array(1 =&gt; 'search'));\n    }\n}\n</pre>   <h3 id=\"disabling-the-view\">Disabling the view</h3> <p>If your controller doesn’t produce any output in the view (or not even have one) you may disable the view component avoiding unnecessary processing:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function closeSessionAction()\n    {\n        // Close session\n        // ...\n\n        // A HTTP Redirect\n        $this-&gt;response-&gt;redirect('index/index');\n\n        // Disable the view to avoid rendering\n        $this-&gt;view-&gt;disable();\n    }\n}\n</pre> <p>You can return a ‘response’ object to avoid disable the view manually:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function closeSessionAction()\n    {\n        // Close session\n        // ...\n\n        // A HTTP Redirect\n        return $this-&gt;response-&gt;redirect('index/index');\n    }\n}\n</pre>    <h2 id=\"simple-rendering\">Simple Rendering</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_view_simple\"><em>Phalcon\\Mvc\\View\\Simple</em></a> is an alternative component to <a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a>. It keeps most of the philosophy of <a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> but lacks of a hierarchy of files which is, in fact, the main feature of its counterpart.</p> <p>This component allows the developer to have control of when a view is rendered and its location. In addition, this component can leverage of view inheritance available in template engines such as <a class=\"reference internal\" href=\"volt\"><em>Volt</em></a> and others.</p> <p>The default component must be replaced in the service container:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View\\Simple as SimpleView;\n\n$di-&gt;set('view', function () {\n\n    $view = new SimpleView();\n\n    $view-&gt;setViewsDir('../app/views/');\n\n    return $view;\n}, true);\n</pre> <p>Automatic rendering must be disabled in <a class=\"reference internal\" href=\"applications\"><em>Phalcon\\Mvc\\Application</em></a> (if needed):</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Application;\n\ntry {\n\n    $application = new Application($di);\n\n    $application-&gt;useImplicitView(false);\n\n    $response = $application-&gt;handle();\n\n    $response-&gt;send();\n\n} catch (\\Exception $e) {\n    echo $e-&gt;getMessage();\n}\n</pre> <p>To render a view it’s necessary to call the render method explicitly indicating the relative path to the view you want to display:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends \\Controller\n{\n    public function indexAction()\n    {\n        // Render 'views-dir/index.phtml'\n        echo $this-&gt;view-&gt;render('index');\n\n        // Render 'views-dir/posts/show.phtml'\n        echo $this-&gt;view-&gt;render('posts/show');\n\n        // Render 'views-dir/index.phtml' passing variables\n        echo $this-&gt;view-&gt;render('index', array('posts' =&gt; Posts::find()));\n\n        // Render 'views-dir/posts/show.phtml' passing variables\n        echo $this-&gt;view-&gt;render('posts/show', array('posts' =&gt; Posts::find()));\n    }\n}\n</pre> <p>This is different to <a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> who’s <code class=\"code docutils literal\"><span class=\"pre\">render()</span></code> method uses controllers and actions as parameters:</p> <pre class=\"highlight-php\" data-language=\"php\">$params = array('posts' =&gt; Posts::find());\n\n// Phalcon\\Mvc\\View\n$view = new \\Phalcon\\Mvc\\View();\necho $view-&gt;render('posts', 'show', $params);\n\n// Phalcon\\Mvc\\View\\Simple\n$simpleView = new \\Phalcon\\Mvc\\View\\Simple();\necho $simpleView-&gt;render('posts/show', $params);\n</pre>   <h2 id=\"using-partials\">Using Partials</h2> <p>Partial templates are another way of breaking the rendering process into simpler more manageable chunks that can be reused by different parts of the application. With a partial, you can move the code for rendering a particular piece of a response to its own file.</p> <p>One way to use partials is to treat them as the equivalent of subroutines: as a way to move details out of a view so that your code can be more easily understood. For example, you might have a view that looks like this:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;div class=\"top\"&gt;&lt;?php $this-&gt;partial(\"shared/ad_banner\"); ?&gt;&lt;/div&gt;\n\n&lt;div class=\"content\"&gt;\n    &lt;h1&gt;Robots&lt;/h1&gt;\n\n    &lt;p&gt;Check out our specials for robots:&lt;/p&gt;\n    ...\n&lt;/div&gt;\n\n&lt;div class=\"footer\"&gt;&lt;?php $this-&gt;partial(\"shared/footer\"); ?&gt;&lt;/div&gt;\n</pre> <p>Method partial() does accept a second parameter as an array of variables/parameters that only will exists in the scope of the partial:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;?php $this-&gt;partial(\"shared/ad_banner\", array('id' =&gt; $site-&gt;id, 'size' =&gt; 'big')); ?&gt;\n</pre>   <h2 id=\"transfer-values-from-the-controller-to-views\">Transfer values from the controller to views</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> is available in each controller using the view variable (<code class=\"code docutils literal\"><span class=\"pre\">$this-&gt;view</span></code>). You can use that object to set variables directly to the view from a controller action by using the <code class=\"code docutils literal\"><span class=\"pre\">setVar()</span></code> method.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction()\n    {\n        // Pass all the posts to the views\n        $this-&gt;view-&gt;setVar(\n            \"posts\",\n            Posts::find()\n        );\n\n        // Using the magic setter\n        $this-&gt;view-&gt;posts = Posts::find();\n\n        // Passing more than one variable at the same time\n        $this-&gt;view-&gt;setVars(\n            array(\n                'title'   =&gt; $post-&gt;title,\n                'content' =&gt; $post-&gt;content\n            )\n        );\n    }\n}\n</pre> <p>A variable with the name of the first parameter of setVar() will be created in the view, ready to be used. The variable can be of any type, from a simple string, integer etc. variable to a more complex structure such as array, collection etc.</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;div class=\"post\"&gt;\n&lt;?php\n\n    foreach ($posts as $post) {\n        echo \"&lt;h1&gt;\", $post-&gt;title, \"&lt;/h1&gt;\";\n    }\n\n?&gt;\n&lt;/div&gt;\n</pre>   <h2 id=\"using-models-in-the-view-layer\">Using models in the view layer</h2> <p>Application models are always available at the view layer. The <a class=\"reference internal\" href=\"../api/phalcon_loader\"><em>Phalcon\\Loader</em></a> will instantiate them at runtime automatically:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;div class=\"categories\"&gt;\n&lt;?php\n\n    foreach (Categories::find(\"status = 1\") as $category) {\n        echo \"&lt;span class='category'&gt;\", $category-&gt;name, \"&lt;/span&gt;\";\n    }\n\n?&gt;\n&lt;/div&gt;\n</pre> <p>Although you may perform model manipulation operations such as insert() or update() in the view layer, it is not recommended since it is not possible to forward the execution flow to another controller in the case of an error or an exception.</p>   <h2 id=\"caching-view-fragments\">Caching View Fragments</h2> <p>Sometimes when you develop dynamic websites and some areas of them are not updated very often, the output is exactly the same between requests. <a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> offers caching a part or the whole rendered output to increase performance.</p> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> integrates with <a class=\"reference internal\" href=\"cache\"><em>Phalcon\\Cache</em></a> to provide an easier way to cache output fragments. You could manually set the cache handler or set a global handler:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function showAction()\n    {\n        // Cache the view using the default settings\n        $this-&gt;view-&gt;cache(true);\n    }\n\n    public function showArticleAction()\n    {\n        // Cache this view for 1 hour\n        $this-&gt;view-&gt;cache(\n            array(\n                \"lifetime\" =&gt; 3600\n            )\n        );\n    }\n\n    public function resumeAction()\n    {\n        // Cache this view for 1 day with the key \"resume-cache\"\n        $this-&gt;view-&gt;cache(\n            array(\n                \"lifetime\" =&gt; 86400,\n                \"key\"      =&gt; \"resume-cache\"\n            )\n        );\n    }\n\n    public function downloadAction()\n    {\n        // Passing a custom service\n        $this-&gt;view-&gt;cache(\n            array(\n                \"service\"  =&gt; \"myCache\",\n                \"lifetime\" =&gt; 86400,\n                \"key\"      =&gt; \"resume-cache\"\n            )\n        );\n    }\n}\n</pre> <p>When we do not define a key to the cache, the component automatically creates one using an <a class=\"reference external\" href=\"http://php.net/manual/en/function.md5.php\">MD5</a> hash of the name of the controller and view currently being rendered in the format of “controller/view”. It is a good practice to define a key for each action so you can easily identify the cache associated with each view.</p> <p>When the View component needs to cache something it will request a cache service from the services container. The service name convention for this service is “viewCache”:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Cache\\Frontend\\Output as OutputFrontend;\nuse Phalcon\\Cache\\Backend\\Memcache as MemcacheBackend;\n\n// Set the views cache service\n$di-&gt;set('viewCache', function () {\n\n    // Cache data for one day by default\n    $frontCache = new OutputFrontend(\n        array(\n            \"lifetime\" =&gt; 86400\n        )\n    );\n\n    // Memcached connection settings\n    $cache = new MemcacheBackend(\n        $frontCache,\n        array(\n            \"host\" =&gt; \"localhost\",\n            \"port\" =&gt; \"11211\"\n        )\n    );\n\n    return $cache;\n});\n</pre> <blockquote class=\"highlights\"> <div>The frontend must always be <a class=\"reference internal\" href=\"../api/phalcon_cache_frontend_output\"><em>Phalcon\\Cache\\Frontend\\Output</em></a> and the service ‘viewCache’ must be registered as always open (not shared) in the services container (DI).</div>\n</blockquote> <p>When using views, caching can be used to prevent controllers from needing to generate view data on each request.</p> <p>To achieve this we must identify uniquely each cache with a key. First we verify that the cache does not exist or has expired to make the calculations/queries to display data in the view:</p> <pre class=\"highlight-html+php\" data-language=\"html\">use Phalcon\\Mvc\\Controller;\n\nclass DownloadController extends Controller\n{\n    public function indexAction()\n    {\n        // Check whether the cache with key \"downloads\" exists or has expired\n        if ($this-&gt;view-&gt;getCache()-&gt;exists('downloads')) {\n\n            // Query the latest downloads\n            $latest = Downloads::find(\n                array(\n                    'order' =&gt; 'created_at DESC'\n                )\n            );\n\n            $this-&gt;view-&gt;latest = $latest;\n        }\n\n        // Enable the cache with the same key \"downloads\"\n        $this-&gt;view-&gt;cache(\n            array(\n                'key' =&gt; 'downloads'\n            )\n        );\n    }\n}\n</pre> <p>The <a class=\"reference external\" href=\"https://github.com/phalcon/php-site\">PHP alternative site</a> is an example of implementing the caching of fragments.</p>   <h2 id=\"template-engines\">Template Engines</h2> <p>Template Engines help designers to create views without the use of a complicated syntax. Phalcon includes a powerful and fast templating engine called <a class=\"reference internal\" href=\"volt\"><em>Volt</em></a>.</p> <p>Additionally, <a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> allows you to use other template engines instead of plain PHP or Volt.</p> <p>Using a different template engine, usually requires complex text parsing using external PHP libraries in order to generate the final output for the user. This usually increases the number of resources that your application will use.</p> <p>If an external template engine is used, <a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> provides exactly the same view hierarchy and it’s still possible to access the API inside these templates with a little more effort.</p> <p>This component uses adapters, these help Phalcon to speak with those external template engines in a unified way, let’s see how to do that integration.</p>  <h3 id=\"creating-your-own-template-engine-adapter\">Creating your own Template Engine Adapter</h3> <p>There are many template engines, which you might want to integrate or create one of your own. The first step to start using an external template engine is create an adapter for it.</p> <p>A template engine adapter is a class that acts as bridge between <a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> and the template engine itself. Usually it only needs two methods implemented: <code class=\"code docutils literal\"><span class=\"pre\">__construct()</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">render()</span></code>. The first one receives the <a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> instance that creates the engine adapter and the DI container used by the application.</p> <p>The method <code class=\"code docutils literal\"><span class=\"pre\">render()</span></code> accepts an absolute path to the view file and the view parameters set using <code class=\"code docutils literal\"><span class=\"pre\">$this-&gt;view-&gt;setVar()</span></code>. You could read or require it when it’s necessary.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Engine;\n\nclass MyTemplateAdapter extends Engine\n{\n    /**\n     * Adapter constructor\n     *\n     * @param \\Phalcon\\Mvc\\View $view\n     * @param \\Phalcon\\Di $di\n     */\n    public function __construct($view, $di)\n    {\n        // Initialize here the adapter\n        parent::__construct($view, $di);\n    }\n\n    /**\n     * Renders a view using the template engine\n     *\n     * @param string $path\n     * @param array $params\n     */\n    public function render($path, $params)\n    {\n        // Access view\n        $view    = $this-&gt;_view;\n\n        // Access options\n        $options = $this-&gt;_options;\n\n        // Render the view\n        // ...\n    }\n}\n</pre>   <h3 id=\"changing-the-template-engine\">Changing the Template Engine</h3> <p>You can replace or add more a template engine from the controller as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n        // Set the engine\n        $this-&gt;view-&gt;registerEngines(\n            array(\n                \".my-html\" =&gt; \"MyTemplateAdapter\"\n            )\n        );\n    }\n\n    public function showAction()\n    {\n        // Using more than one template engine\n        $this-&gt;view-&gt;registerEngines(\n            array(\n                \".my-html\" =&gt; 'MyTemplateAdapter',\n                \".phtml\"   =&gt; 'Phalcon\\Mvc\\View\\Engine\\Php'\n            )\n        );\n    }\n}\n</pre> <p>You can replace the template engine completely or use more than one template engine at the same time. The method <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Mvc\\View::registerEngines()</span></code> accepts an array containing data that define the template engines. The key of each engine is an extension that aids in distinguishing one from another. Template files related to the particular engine must have those extensions.</p> <p>The order that the template engines are defined with <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Mvc\\View::registerEngines()</span></code> defines the relevance of execution. If <a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> finds two views with the same name but different extensions, it will only render the first one.</p> <p>If you want to register a template engine or a set of them for each request in the application. You could register it when the view service is created:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View;\n\n// Setting up the view component\n$di-&gt;set('view', function () {\n\n    $view = new View();\n\n    // A trailing directory separator is required\n    $view-&gt;setViewsDir('../app/views/');\n\n    $view-&gt;registerEngines(\n        array(\n            \".my-html\" =&gt; 'MyTemplateAdapter'\n        )\n    );\n\n    return $view;\n}, true);\n</pre> <p>There are adapters available for several template engines on the <a class=\"reference external\" href=\"https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Mvc/View/Engine\">Phalcon Incubator</a></p>    <h2 id=\"injecting-services-in-view\">Injecting services in View</h2> <p>Every view executed is included inside a <a class=\"reference internal\" href=\"../api/phalcon_di_injectable\"><em>Phalcon\\Di\\Injectable</em></a> instance, providing easy access to the application’s service container.</p> <p>The following example shows how to write a jQuery <a class=\"reference external\" href=\"http://api.jquery.com/jQuery.ajax/\">ajax request</a> using a URL with the framework conventions. The service “url” (usually <a class=\"reference internal\" href=\"url\"><em>Phalcon\\Mvc\\Url</em></a>) is injected in the view by accessing a property with the same name:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;script type=\"text/javascript\"&gt;\n\n$.ajax({\n    url: \"&lt;?php echo $this-&gt;url-&gt;get(\"cities/get\"); ?&gt;\"\n})\n.done(function () {\n    alert(\"Done!\");\n});\n\n&lt;/script&gt;\n</pre>   <h2 id=\"stand-alone-component\">Stand-Alone Component</h2> <p>All the components in Phalcon can be used as <em>glue</em> components individually because they are loosely coupled to each other:</p>  <h3 id=\"id1\">Hierarchical Rendering</h3> <p>Using <a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> in a stand-alone mode can be demonstrated below:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View;\n\n$view = new View();\n\n// A trailing directory separator is required\n$view-&gt;setViewsDir(\"../app/views/\");\n\n// Passing variables to the views, these will be created as local variables\n$view-&gt;setVar(\"someProducts\", $products);\n$view-&gt;setVar(\"someFeatureEnabled\", true);\n\n// Start the output buffering\n$view-&gt;start();\n\n// Render all the view hierarchy related to the view products/list.phtml\n$view-&gt;render(\"products\", \"list\");\n\n// Finish the output buffering\n$view-&gt;finish();\n\necho $view-&gt;getContent();\n</pre> <p>A short syntax is also available:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View;\n\n$view = new View();\n\necho $view-&gt;getRender('products', 'list',\n    array(\n        \"someProducts\"       =&gt; $products,\n        \"someFeatureEnabled\" =&gt; true\n    ),\n    function ($view) {\n        // Set any extra options here\n        $view-&gt;setViewsDir(\"../app/views/\");\n        $view-&gt;setRenderLevel(View::LEVEL_LAYOUT);\n    }\n);\n</pre>   <h3 id=\"id2\">Simple Rendering</h3> <p>Using <a class=\"reference internal\" href=\"../api/phalcon_mvc_view_simple\"><em>Phalcon\\Mvc\\View\\Simple</em></a> in a stand-alone mode can be demonstrated below:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View\\Simple as SimpleView;\n\n$view = new SimpleView();\n\n// A trailing directory separator is required\n$view-&gt;setViewsDir(\"../app/views/\");\n\n// Render a view and return its contents as a string\necho $view-&gt;render(\"templates/welcomeMail\");\n\n// Render a view passing parameters\necho $view-&gt;render(\n    \"templates/welcomeMail\",\n    array(\n        'email'   =&gt; $email,\n        'content' =&gt; $content\n    )\n);\n</pre>    <h2 id=\"view-events\">View Events</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> and <a class=\"reference internal\" href=\"../api/phalcon_mvc_view_simple\"><em>Phalcon\\Mvc\\View\\Simple</em></a> are able to send events to an <a class=\"reference internal\" href=\"events\"><em>EventsManager</em></a> if it is present. Events are triggered using the type “view”. Some events when returning boolean false could stop the active operation. The following events are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"21%\"> <col width=\"58%\"> <col width=\"20%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Event Name</th> <th class=\"head\">Triggered</th> <th class=\"head\">Can stop operation?</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>beforeRender</td> <td>Triggered before starting the render process</td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>beforeRenderView</td> <td>Triggered before rendering an existing view</td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>afterRenderView</td> <td>Triggered after rendering an existing view</td> <td>No</td> </tr> <tr class=\"row-odd\">\n<td>afterRender</td> <td>Triggered after completing the render process</td> <td>No</td> </tr> <tr class=\"row-even\">\n<td>notFoundView</td> <td>Triggered when a view was not found</td> <td>No</td> </tr> </tbody> </table> <p>The following example demonstrates how to attach listeners to this component:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di-&gt;set('view', function () {\n\n    // Create an events manager\n    $eventsManager = new EventsManager();\n\n    // Attach a listener for type \"view\"\n    $eventsManager-&gt;attach(\"view\", function ($event, $view) {\n        echo $event-&gt;getType(), ' - ', $view-&gt;getActiveRenderPath(), PHP_EOL;\n    });\n\n    $view = new View();\n    $view-&gt;setViewsDir(\"../app/views/\");\n\n    // Bind the eventsManager to the view component\n    $view-&gt;setEventsManager($eventsManager);\n\n    return $view;\n\n}, true);\n</pre> <p>The following example shows how to create a plugin that clean/repair the HTML produced by the render process using <a class=\"reference external\" href=\"http://www.php.net/manual/en/book.tidy.php\">Tidy</a>:</p> <pre class=\"highlight-php\" data-language=\"php\">class TidyPlugin\n{\n    public function afterRender($event, $view)\n    {\n        $tidyConfig = array(\n            'clean'          =&gt; true,\n            'output-xhtml'   =&gt; true,\n            'show-body-only' =&gt; true,\n            'wrap'           =&gt; 0\n        );\n\n        $tidy = tidy_parse_string($view-&gt;getContent(), $tidyConfig, 'UTF8');\n        $tidy-&gt;cleanRepair();\n\n        $view-&gt;setContent((string) $tidy);\n    }\n}\n\n// Attach the plugin as a listener\n$eventsManager-&gt;attach(\"view:afterRender\", new TidyPlugin());\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/views.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/views.html</a>\n  </p>\n</div>\n","reference/filter":"<h1 id=\"filtering-and-sanitizing\">Filtering and Sanitizing</h1> <p>Sanitizing user input is a critical part of software development. Trusting or neglecting to sanitize user input could lead to unauthorized access to the content of your application, mainly user data, or even the server your application is hosted on.</p> <div class=\"figure align-center\"> <img alt=\"../_images/sql.png\" src=\"https://docs.phalconphp.com/en/latest/_images/sql.png\"> </div> <p><a class=\"reference external\" href=\"http://xkcd.com/327/\">Full image (from xkcd)</a></p> <p>The <a class=\"reference internal\" href=\"../api/phalcon_filter\"><em>Phalcon\\Filter</em></a> component provides a set of commonly used filters and data sanitizing helpers. It provides object-oriented wrappers around the PHP filter extension.</p>  <h2 id=\"sanitizing-data\">Sanitizing data</h2> <p>Sanitizing is the process which removes specific characters from a value, that are not required or desired by the user or application. By sanitizing input we ensure that application integrity will be intact.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Filter;\n\n$filter = new Filter();\n\n// Returns \"[email protected]\"\n$filter-&gt;sanitize(\"some(one)@exa\\mple.com\", \"email\");\n\n// Returns \"hello\"\n$filter-&gt;sanitize(\"hello&lt;&lt;\", \"string\");\n\n// Returns \"100019\"\n$filter-&gt;sanitize(\"!100a019\", \"int\");\n\n// Returns \"100019.01\"\n$filter-&gt;sanitize(\"!100a019.01a\", \"float\");\n</pre>   <h2 id=\"sanitizing-from-controllers\">Sanitizing from Controllers</h2> <p>You can access a <a class=\"reference internal\" href=\"../api/phalcon_filter\"><em>Phalcon\\Filter</em></a> object from your controllers when accessing GET or POST input data (through the request object). The first parameter is the name of the variable to be obtained; the second is the filter to be applied on it.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Sanitizing price from input\n        $price = $this-&gt;request-&gt;getPost(\"price\", \"double\");\n\n        // Sanitizing email from input\n        $email = $this-&gt;request-&gt;getPost(\"customerEmail\", \"email\");\n    }\n}\n</pre>   <h2 id=\"filtering-action-parameters\">Filtering Action Parameters</h2> <p>The next example shows you how to sanitize the action parameters within a controller action:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction($productId)\n    {\n        $productId = $this-&gt;filter-&gt;sanitize($productId, \"int\");\n    }\n}\n</pre>   <h2 id=\"filtering-data\">Filtering data</h2> <p>In addition to sanitizing, <a class=\"reference internal\" href=\"../api/phalcon_filter\"><em>Phalcon\\Filter</em></a> also provides filtering by removing or modifying input data to the format we expect.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Filter;\n\n$filter = new Filter();\n\n// Returns \"Hello\"\n$filter-&gt;sanitize(\"&lt;h1&gt;Hello&lt;/h1&gt;\", \"striptags\");\n\n// Returns \"Hello\"\n$filter-&gt;sanitize(\"  Hello   \", \"trim\");\n</pre>   <h2 id=\"types-of-built-in-filters\">Types of Built-in Filters</h2> <p>The following are the built-in filters provided by this component:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"87%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>string</td> <td>Strip tags and escapes HTML entities, including single and double quotes.</td> </tr> <tr class=\"row-odd\">\n<td>email</td> <td>Remove all characters except letters, digits and !#$%&amp;*+-/=?^_`{|}~@.[].</td> </tr> <tr class=\"row-even\">\n<td>int</td> <td>Remove all characters except digits, plus and minus sign.</td> </tr> <tr class=\"row-odd\">\n<td>float</td> <td>Remove all characters except digits, dot, plus and minus sign.</td> </tr> <tr class=\"row-even\">\n<td>alphanum</td> <td>Remove all characters except [a-zA-Z0-9]</td> </tr> <tr class=\"row-odd\">\n<td>striptags</td> <td>Applies the <a class=\"reference external\" href=\"http://www.php.net/manual/en/function.strip-tags.php\">strip_tags</a> function</td> </tr> <tr class=\"row-even\">\n<td>trim</td> <td>Applies the <a class=\"reference external\" href=\"http://www.php.net/manual/en/function.trim.php\">trim</a> function</td> </tr> <tr class=\"row-odd\">\n<td>lower</td> <td>Applies the <a class=\"reference external\" href=\"http://www.php.net/manual/en/function.strtolower.php\">strtolower</a> function</td> </tr> <tr class=\"row-even\">\n<td>upper</td> <td>Applies the <a class=\"reference external\" href=\"http://www.php.net/manual/en/function.strtoupper.php\">strtoupper</a> function</td> </tr> </tbody> </table>   <h2 id=\"creating-your-own-filters\">Creating your own Filters</h2> <p>You can add your own filters to <a class=\"reference internal\" href=\"../api/phalcon_filter\"><em>Phalcon\\Filter</em></a>. The filter function could be an anonymous function:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Filter;\n\n$filter = new Filter();\n\n// Using an anonymous function\n$filter-&gt;add('md5', function ($value) {\n    return preg_replace('/[^0-9a-f]/', '', $value);\n});\n\n// Sanitize with the \"md5\" filter\n$filtered = $filter-&gt;sanitize($possibleMd5, \"md5\");\n</pre> <p>Or, if you prefer, you can implement the filter in a class:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Filter;\n\nclass IPv4Filter\n{\n    public function filter($value)\n    {\n        return filter_var($value, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4);\n    }\n}\n\n$filter = new Filter();\n\n// Using an object\n$filter-&gt;add('ipv4', new IPv4Filter());\n\n// Sanitize with the \"ipv4\" filter\n$filteredIp = $filter-&gt;sanitize(\"127.0.0.1\", \"ipv4\");\n</pre>   <h2 id=\"complex-sanitizing-and-filtering\">Complex Sanitizing and Filtering</h2> <p>PHP itself provides an excellent filter extension you can use. Check out its documentation: <a class=\"reference external\" href=\"http://www.php.net/manual/en/book.filter.php\">Data Filtering at PHP Documentation</a></p>   <h2 id=\"implementing-your-own-filter\">Implementing your own Filter</h2> <p>The <a class=\"reference internal\" href=\"../api/phalcon_filterinterface\"><em>Phalcon\\FilterInterface</em></a> interface must be implemented to create your own filtering service replacing the one provided by Phalcon.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/filter.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/filter.html</a>\n  </p>\n</div>\n","reference/events":"<h1 id=\"events-manager\">Events Manager</h1> <p>The purpose of this component is to intercept the execution of most of the other components of the framework by creating “hook points”. These hook points allow the developer to obtain status information, manipulate data or change the flow of execution during the process of a component.</p>  <h2 id=\"usage-example\">Usage Example</h2> <p>In the following example, we use the EventsManager to listen for events produced in a MySQL connection managed by <a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a>. First, we need a listener object to do this. We created a class whose methods are the events we want to listen:</p> <pre class=\"highlight-php\" data-language=\"php\">class MyDbListener\n{\n    public function afterConnect()\n    {\n\n    }\n\n    public function beforeQuery()\n    {\n\n    }\n\n    public function afterQuery()\n    {\n\n    }\n}\n</pre> <p>This new class can be as verbose as we need it to. The EventsManager will interface between the component and our listener class, offering hook points based on the methods we defined in our listener class:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as DbAdapter;\n\n$eventsManager = new EventsManager();\n\n// Create a database listener\n$dbListener    = new MyDbListener();\n\n// Listen all the database events\n$eventsManager-&gt;attach('db', $dbListener);\n\n$connection    = new DbAdapter(\n    array(\n        \"host\"     =&gt; \"localhost\",\n        \"username\" =&gt; \"root\",\n        \"password\" =&gt; \"secret\",\n        \"dbname\"   =&gt; \"invo\"\n    )\n);\n\n// Assign the eventsManager to the db adapter instance\n$connection-&gt;setEventsManager($eventsManager);\n\n// Send a SQL command to the database server\n$connection-&gt;query(\"SELECT * FROM products p WHERE p.status = 1\");\n</pre> <p>In order to log all the SQL statements executed by our application, we need to use the event “afterQuery”. The first parameter passed to the event listener contains contextual information about the event that is running, the second is the connection itself.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Logger\\Adapter\\File as Logger;\n\nclass MyDbListener\n{\n    protected $_logger;\n\n    public function __construct()\n    {\n        $this-&gt;_logger = new Logger(\"../apps/logs/db.log\");\n    }\n\n    public function afterQuery($event, $connection)\n    {\n        $this-&gt;_logger-&gt;log($connection-&gt;getSQLStatement(), \\Phalcon\\Logger::INFO);\n    }\n}\n</pre> <p>As part of this example, we will also implement the <a class=\"reference internal\" href=\"../api/phalcon_db_profiler\"><em>Phalcon\\Db\\Profiler</em></a> to detect the SQL statements that are taking longer to execute than expected:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Profiler;\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\File;\n\nclass MyDbListener\n{\n    protected $_profiler;\n\n    protected $_logger;\n\n    /**\n     * Creates the profiler and starts the logging\n     */\n    public function __construct()\n    {\n        $this-&gt;_profiler = new Profiler();\n        $this-&gt;_logger   = new Logger(\"../apps/logs/db.log\");\n    }\n\n    /**\n     * This is executed if the event triggered is 'beforeQuery'\n     */\n    public function beforeQuery($event, $connection)\n    {\n        $this-&gt;_profiler-&gt;startProfile($connection-&gt;getSQLStatement());\n    }\n\n    /**\n     * This is executed if the event triggered is 'afterQuery'\n     */\n    public function afterQuery($event, $connection)\n    {\n        $this-&gt;_logger-&gt;log($connection-&gt;getSQLStatement(), Logger::INFO);\n        $this-&gt;_profiler-&gt;stopProfile();\n    }\n\n    public function getProfiler()\n    {\n        return $this-&gt;_profiler;\n    }\n}\n</pre> <p>The resulting profile data can be obtained from the listener:</p> <pre class=\"highlight-php\" data-language=\"php\">// Send a SQL command to the database server\n$connection-&gt;execute(\"SELECT * FROM products p WHERE p.status = 1\");\n\nforeach ($dbListener-&gt;getProfiler()-&gt;getProfiles() as $profile) {\n    echo \"SQL Statement: \", $profile-&gt;getSQLStatement(), \"\\n\";\n    echo \"Start Time: \", $profile-&gt;getInitialTime(), \"\\n\";\n    echo \"Final Time: \", $profile-&gt;getFinalTime(), \"\\n\";\n    echo \"Total Elapsed Time: \", $profile-&gt;getTotalElapsedSeconds(), \"\\n\";\n}\n</pre> <p>In a similar manner we can register a lambda function to perform the task instead of a separate listener class (as seen above):</p> <pre class=\"highlight-php\" data-language=\"php\">// Listen all the database events\n$eventsManager-&gt;attach('db', function ($event, $connection) {\n    if ($event-&gt;getType() == 'afterQuery') {\n        echo $connection-&gt;getSQLStatement();\n    }\n});\n</pre>   <h2 id=\"creating-components-that-trigger-events\">Creating components that trigger Events</h2> <p>You can create components in your application that trigger events to an EventsManager. As a consequence, there may exist listeners that react to these events when generated. In the following example we’re creating a component called “MyComponent”. This component is EventsManager aware (it implements <a class=\"reference internal\" href=\"../api/phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>); when its <code class=\"code docutils literal\"><span class=\"pre\">someTask()</span></code> method is executed it triggers two events to any listener in the EventsManager:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Events\\EventsAwareInterface;\n\nclass MyComponent implements EventsAwareInterface\n{\n    protected $_eventsManager;\n\n    public function setEventsManager($eventsManager)\n    {\n        $this-&gt;_eventsManager = $eventsManager;\n    }\n\n    public function getEventsManager()\n    {\n        return $this-&gt;_eventsManager;\n    }\n\n    public function someTask()\n    {\n        $this-&gt;_eventsManager-&gt;fire(\"my-component:beforeSomeTask\", $this);\n\n        // Do some task\n        echo \"Here, someTask\\n\";\n\n        $this-&gt;_eventsManager-&gt;fire(\"my-component:afterSomeTask\", $this);\n    }\n}\n</pre> <p>Note that events produced by this component are prefixed with “my-component”. This is a unique word that helps us identify events that are generated from certain component. You can even generate events outside the component with the same name. Now let’s create a listener to this component:</p> <pre class=\"highlight-php\" data-language=\"php\">class SomeListener\n{\n    public function beforeSomeTask($event, $myComponent)\n    {\n        echo \"Here, beforeSomeTask\\n\";\n    }\n\n    public function afterSomeTask($event, $myComponent)\n    {\n        echo \"Here, afterSomeTask\\n\";\n    }\n}\n</pre> <p>A listener is simply a class that implements any of all the events triggered by the component. Now let’s make everything work together:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Events\\Manager as EventsManager;\n\n// Create an Events Manager\n$eventsManager = new EventsManager();\n\n// Create the MyComponent instance\n$myComponent   = new MyComponent();\n\n// Bind the eventsManager to the instance\n$myComponent-&gt;setEventsManager($eventsManager);\n\n// Attach the listener to the EventsManager\n$eventsManager-&gt;attach('my-component', new SomeListener());\n\n// Execute methods in the component\n$myComponent-&gt;someTask();\n</pre> <p>As <code class=\"code docutils literal\"><span class=\"pre\">someTask()</span></code> is executed, the two methods in the listener will be executed, producing the following output:</p> <pre class=\"highlight-php\" data-language=\"php\">Here, beforeSomeTask\nHere, someTask\nHere, afterSomeTask\n</pre> <p>Additional data may also passed when triggering an event using the third parameter of <code class=\"code docutils literal\"><span class=\"pre\">fire()</span></code>:</p> <pre class=\"highlight-php\" data-language=\"php\">$eventsManager-&gt;fire(\"my-component:afterSomeTask\", $this, $extraData);\n</pre> <p>In a listener the third parameter also receives this data:</p> <pre class=\"highlight-php\" data-language=\"php\">// Receiving the data in the third parameter\n$eventsManager-&gt;attach('my-component', function ($event, $component, $data) {\n    print_r($data);\n});\n\n// Receiving the data from the event context\n$eventsManager-&gt;attach('my-component', function ($event, $component) {\n    print_r($event-&gt;getData());\n});\n</pre> <p>If a listener it is only interested in listening to a specific type of event you can attach a listener directly:</p> <pre class=\"highlight-php\" data-language=\"php\">// The handler will only be executed if the event triggered is \"beforeSomeTask\"\n$eventsManager-&gt;attach('my-component:beforeSomeTask', function ($event, $component) {\n    // ...\n});\n</pre>   <h2 id=\"event-propagation-cancellation\">Event Propagation/Cancellation</h2> <p>Many listeners may be added to the same event manager. This means that for the same type of event many listeners can be notified. The listeners are notified in the order they were registered in the EventsManager. Some events are cancelable, indicating that these may be stopped preventing other listeners are notified about the event:</p> <pre class=\"highlight-php\" data-language=\"php\">$eventsManager-&gt;attach('db', function ($event, $connection) {\n\n    // We stop the event if it is cancelable\n    if ($event-&gt;isCancelable()) {\n        // Stop the event, so other listeners will not be notified about this\n        $event-&gt;stop();\n    }\n\n    // ...\n\n});\n</pre> <p>By default events are cancelable, even most of events produced by the framework are cancelables. You can fire a not-cancelable event by passing <code class=\"code docutils literal\"><span class=\"pre\">false</span></code> in the fourth parameter of <code class=\"code docutils literal\"><span class=\"pre\">fire()</span></code>:</p> <pre class=\"highlight-php\" data-language=\"php\">$eventsManager-&gt;fire(\"my-component:afterSomeTask\", $this, $extraData, false);\n</pre>   <h2 id=\"listener-priorities\">Listener Priorities</h2> <p>When attaching listeners you can set a specific priority. With this feature you can attach listeners indicating the order in which they must be called:</p> <pre class=\"highlight-php\" data-language=\"php\">$eventsManager-&gt;enablePriorities(true);\n\n$eventsManager-&gt;attach('db', new DbListener(), 150); // More priority\n$eventsManager-&gt;attach('db', new DbListener(), 100); // Normal priority\n$eventsManager-&gt;attach('db', new DbListener(), 50);  // Less priority\n</pre>   <h2 id=\"collecting-responses\">Collecting Responses</h2> <p>The events manager can collect every response returned by every notified listener. This example explains how it works:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Events\\Manager as EventsManager;\n\n$eventsManager = new EventsManager();\n\n// Set up the events manager to collect responses\n$eventsManager-&gt;collectResponses(true);\n\n// Attach a listener\n$eventsManager-&gt;attach('custom:custom', function () {\n    return 'first response';\n});\n\n// Attach a listener\n$eventsManager-&gt;attach('custom:custom', function () {\n    return 'second response';\n});\n\n// Fire the event\n$eventsManager-&gt;fire('custom:custom', null);\n\n// Get all the collected responses\nprint_r($eventsManager-&gt;getResponses());\n</pre> <p>The above example produces:</p> <pre class=\"highlight-html\" data-language=\"html\">Array ( [0] =&gt; first response [1] =&gt; second response )\n</pre>   <h2 id=\"implementing-your-own-eventsmanager\">Implementing your own EventsManager</h2> <p>The <a class=\"reference internal\" href=\"../api/phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> interface must be implemented to create your own EventsManager replacing the one provided by Phalcon.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/events.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/events.html</a>\n  </p>\n</div>\n","reference/flash":"<h1 id=\"flashing-messages\">Flashing Messages</h1> <p>Flash messages are used to notify the user about the state of actions he/she made or simply show information to the users. These kinds of messages can be generated using this component.</p>  <h2 id=\"adapters\">Adapters</h2> <p>This component makes use of adapters to define the behavior of the messages after being passed to the Flasher:</p> <table class=\"docutils\"> <colgroup> <col width=\"5%\"> <col width=\"53%\"> <col width=\"42%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Adapter</th> <th class=\"head\">Description</th> <th class=\"head\">API</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Direct</td> <td>Directly outputs the messages passed to the flasher</td> <td><a class=\"reference internal\" href=\"../api/phalcon_flash_direct\"><em>Phalcon\\Flash\\Direct</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Session</td> <td>Temporarily stores the messages in session, then messages can be printed in the next request</td> <td><a class=\"reference internal\" href=\"../api/phalcon_flash_session\"><em>Phalcon\\Flash\\Session</em></a></td> </tr> </tbody> </table>   <h2 id=\"usage\">Usage</h2> <p>Usually the Flash Messaging service is requested from the services container, if you’re using <a class=\"reference internal\" href=\"../api/phalcon_di_factorydefault\"><em>Phalcon\\Di\\FactoryDefault</em></a> then <a class=\"reference internal\" href=\"../api/phalcon_flash_direct\"><em>Phalcon\\Flash\\Direct</em></a> is automatically registered as “flash” service:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Flash\\Direct as FlashDirect;\n\n// Set up the flash service\n$di-&gt;set('flash', function () {\n    return new FlashDirect();\n});\n</pre> <p>This way, you can use it in controllers or views by injecting the service in the required scope:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        $this-&gt;flash-&gt;success(\"The post was correctly saved!\");\n    }\n}\n</pre> <p>There are four built-in message types supported:</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;flash-&gt;error(\"too bad! the form had errors\");\n$this-&gt;flash-&gt;success(\"yes!, everything went very smoothly\");\n$this-&gt;flash-&gt;notice(\"this a very important information\");\n$this-&gt;flash-&gt;warning(\"best check yo self, you're not looking too good.\");\n</pre> <p>You can add messages with your own types:</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;flash-&gt;message(\"debug\", \"this is debug message, you don't say\");\n</pre>   <h2 id=\"printing-messages\">Printing Messages</h2> <p>Messages sent to the flash service are automatically formatted with HTML:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;div class=\"errorMessage\"&gt;too bad! the form had errors&lt;/div&gt;\n&lt;div class=\"successMessage\"&gt;yes!, everything went very smoothly&lt;/div&gt;\n&lt;div class=\"noticeMessage\"&gt;this a very important information&lt;/div&gt;\n&lt;div class=\"warningMessage\"&gt;best check yo self, you're not looking too good.&lt;/div&gt;\n</pre> <p>As you can see, CSS classes are added automatically to the DIVs. These classes allow you to define the graphical presentation of the messages in the browser. The CSS classes can be overridden, for example, if you’re using Twitter bootstrap, classes can be configured as:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Flash\\Direct as FlashDirect;\n\n// Register the flash service with custom CSS classes\n$di-&gt;set('flash', function () {\n    $flash = new FlashDirect(\n        array(\n            'error'   =&gt; 'alert alert-danger',\n            'success' =&gt; 'alert alert-success',\n            'notice'  =&gt; 'alert alert-info',\n            'warning' =&gt; 'alert alert-warning'\n        )\n    );\n\n    return $flash;\n});\n</pre> <p>Then the messages would be printed as follows:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;div class=\"alert alert-danger\"&gt;too bad! the form had errors&lt;/div&gt;\n&lt;div class=\"alert alert-success\"&gt;yes!, everything went very smoothly&lt;/div&gt;\n&lt;div class=\"alert alert-info\"&gt;this a very important information&lt;/div&gt;\n&lt;div class=\"alert alert-warning\"&gt;best check yo self, you're not looking too good.&lt;/div&gt;\n</pre>   <h2 id=\"implicit-flush-vs-session\">Implicit Flush vs. Session</h2> <p>Depending on the adapter used to send the messages, it could be producing output directly, or be temporarily storing the messages in session to be shown later. When should you use each? That usually depends on the type of redirection you do after sending the messages. For example, if you make a “forward” is not necessary to store the messages in session, but if you do a HTTP redirect then, they need to be stored in session:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass ContactController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Store the post\n\n        // Using direct flash\n        $this-&gt;flash-&gt;success(\"Your information was stored correctly!\");\n\n        // Forward to the index action\n        return $this-&gt;dispatcher-&gt;forward(\n            array(\n                \"action\" =&gt; \"index\"\n            )\n        );\n    }\n}\n</pre> <p>Or using a HTTP redirection:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass ContactController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Store the post\n\n        // Using session flash\n        $this-&gt;flashSession-&gt;success(\"Your information was stored correctly!\");\n\n        // Make a full HTTP redirection\n        return $this-&gt;response-&gt;redirect(\"contact/index\");\n    }\n}\n</pre> <p>In this case you need to manually print the messages in the corresponding view:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;!-- app/views/contact/index.phtml --&gt;\n\n&lt;p&gt;&lt;?php $this-&gt;flashSession-&gt;output() ?&gt;&lt;/p&gt;\n</pre> <p>The attribute ‘flashSession’ is how the flash was previously set into the dependency injection container. You need to start the <a class=\"reference internal\" href=\"session\"><em>session</em></a> first to successfully use the flashSession messenger.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/flash.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/flash.html</a>\n  </p>\n</div>\n","reference/applications":"<h1 id=\"mvc-applications\">MVC Applications</h1> <p>All the hard work behind orchestrating the operation of MVC in Phalcon is normally done by <a class=\"reference internal\" href=\"../api/phalcon_mvc_application\"><em>Phalcon\\Mvc\\Application</em></a>. This component encapsulates all the complex operations required in the background, instantiating every component needed and integrating it with the project, to allow the MVC pattern to operate as desired.</p>  <h2 id=\"single-or-multi-module-applications\">Single or Multi Module Applications</h2> <p>With this component you can run various types of MVC structures:</p>  <h3 id=\"single-module\">Single Module</h3> <p>Single MVC applications consist of one module only. Namespaces can be used but are not necessary. An application like this would have the following file structure:</p> <pre class=\"highlight-php\" data-language=\"php\">single/\n    app/\n        controllers/\n        models/\n        views/\n    public/\n        css/\n        img/\n        js/\n</pre> <p>If namespaces are not used, the following bootstrap file could be used to orchestrate the MVC flow:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Loader;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Di\\FactoryDefault;\n\n$loader = new Loader();\n\n$loader-&gt;registerDirs(\n    array(\n        '../apps/controllers/',\n        '../apps/models/'\n    )\n)-&gt;register();\n\n$di = new FactoryDefault();\n\n// Registering the view component\n$di-&gt;set('view', function () {\n    $view = new View();\n    $view-&gt;setViewsDir('../apps/views/');\n    return $view;\n});\n\ntry {\n\n    $application = new Application($di);\n\n    $response = $application-&gt;handle();\n\n    $response-&gt;send();\n\n} catch (\\Exception $e) {\n    echo $e-&gt;getMessage();\n}\n</pre> <p>If namespaces are used, the following bootstrap can be used:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Loader;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Di\\FactoryDefault;\n\n$loader = new Loader();\n\n// Use autoloading with namespaces prefixes\n$loader-&gt;registerNamespaces(\n    array(\n        'Single\\Controllers' =&gt; '../apps/controllers/',\n        'Single\\Models'      =&gt; '../apps/models/',\n    )\n)-&gt;register();\n\n$di = new FactoryDefault();\n\n// Register the default dispatcher's namespace for controllers\n$di-&gt;set('dispatcher', function () {\n    $dispatcher = new Dispatcher();\n    $dispatcher-&gt;setDefaultNamespace('Single\\Controllers');\n    return $dispatcher;\n});\n\n// Register the view component\n$di-&gt;set('view', function () {\n    $view = new View();\n    $view-&gt;setViewsDir('../apps/views/');\n    return $view;\n});\n\ntry {\n\n    $application = new Application($di);\n\n    $response = $application-&gt;handle();\n\n    $response-&gt;send();\n\n} catch (\\Exception $e) {\n    echo $e-&gt;getMessage();\n}\n</pre>   <h3 id=\"multi-module\">Multi Module</h3> <p>A multi-module application uses the same document root for more than one module. In this case the following file structure can be used:</p> <pre class=\"highlight-php\" data-language=\"php\">multiple/\n  apps/\n    frontend/\n       controllers/\n       models/\n       views/\n       Module.php\n    backend/\n       controllers/\n       models/\n       views/\n       Module.php\n  public/\n    css/\n    img/\n    js/\n</pre> <p>Each directory in apps/ have its own MVC structure. A Module.php is present to configure specific settings of each module like autoloaders or custom services:</p> <pre class=\"highlight-php\" data-language=\"php\">namespace Multiple\\Backend;\n\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\DiInterface;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\ModuleDefinitionInterface;\n\nclass Module implements ModuleDefinitionInterface\n{\n    /**\n     * Register a specific autoloader for the module\n     */\n    public function registerAutoloaders(DiInterface $di = null)\n    {\n        $loader = new Loader();\n\n        $loader-&gt;registerNamespaces(\n            array(\n                'Multiple\\Backend\\Controllers' =&gt; '../apps/backend/controllers/',\n                'Multiple\\Backend\\Models'      =&gt; '../apps/backend/models/',\n            )\n        );\n\n        $loader-&gt;register();\n    }\n\n    /**\n     * Register specific services for the module\n     */\n    public function registerServices(DiInterface $di)\n    {\n        // Registering a dispatcher\n        $di-&gt;set('dispatcher', function () {\n            $dispatcher = new Dispatcher();\n            $dispatcher-&gt;setDefaultNamespace(\"Multiple\\Backend\\Controllers\");\n            return $dispatcher;\n        });\n\n        // Registering the view component\n        $di-&gt;set('view', function () {\n            $view = new View();\n            $view-&gt;setViewsDir('../apps/backend/views/');\n            return $view;\n        });\n    }\n}\n</pre> <p>A special bootstrap file is required to load a multi-module MVC architecture:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Di\\FactoryDefault;\n\n$di = new FactoryDefault();\n\n// Specify routes for modules\n// More information how to set the router up https://docs.phalconphp.com/en/latest/reference/routing.html\n$di-&gt;set('router', function () {\n\n    $router = new Router();\n\n    $router-&gt;setDefaultModule(\"frontend\");\n\n    $router-&gt;add(\n        \"/login\",\n        array(\n            'module'     =&gt; 'backend',\n            'controller' =&gt; 'login',\n            'action'     =&gt; 'index'\n        )\n    );\n\n    $router-&gt;add(\n        \"/admin/products/:action\",\n        array(\n            'module'     =&gt; 'backend',\n            'controller' =&gt; 'products',\n            'action'     =&gt; 1\n        )\n    );\n\n    $router-&gt;add(\n        \"/products/:action\",\n        array(\n            'controller' =&gt; 'products',\n            'action'     =&gt; 1\n        )\n    );\n\n    return $router;\n});\n\ntry {\n\n    // Create an application\n    $application = new Application($di);\n\n    // Register the installed modules\n    $application-&gt;registerModules(\n        array(\n            'frontend' =&gt; array(\n                'className' =&gt; 'Multiple\\Frontend\\Module',\n                'path'      =&gt; '../apps/frontend/Module.php',\n            ),\n            'backend'  =&gt; array(\n                'className' =&gt; 'Multiple\\Backend\\Module',\n                'path'      =&gt; '../apps/backend/Module.php',\n            )\n        )\n    );\n\n    // Handle the request\n    $response = $application-&gt;handle();\n\n    $response-&gt;send();\n\n} catch (\\Exception $e) {\n    echo $e-&gt;getMessage();\n}\n</pre> <p>If you want to maintain the module configuration in the bootstrap file you can use an anonymous function to register the module:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View;\n\n// Creating a view component\n$view = new View();\n\n// Set options to view component\n// ...\n\n// Register the installed modules\n$application-&gt;registerModules(\n    array(\n        'frontend' =&gt; function ($di) use ($view) {\n            $di-&gt;setShared('view', function () use ($view) {\n                $view-&gt;setViewsDir('../apps/frontend/views/');\n                return $view;\n            });\n        },\n        'backend' =&gt; function ($di) use ($view) {\n            $di-&gt;setShared('view', function () use ($view) {\n                $view-&gt;setViewsDir('../apps/backend/views/');\n                return $view;\n            });\n        }\n    )\n);\n</pre> <p>When <a class=\"reference internal\" href=\"../api/phalcon_mvc_application\"><em>Phalcon\\Mvc\\Application</em></a> have modules registered, always is necessary that every matched route returns a valid module. Each registered module has an associated class offering functions to set the module itself up. Each module class definition must implement two methods: registerAutoloaders() and registerServices(), they will be called by <a class=\"reference internal\" href=\"../api/phalcon_mvc_application\"><em>Phalcon\\Mvc\\Application</em></a> according to the module to be executed.</p>    <h2 id=\"understanding-the-default-behavior\">Understanding the default behavior</h2> <p>If you’ve been following the <a class=\"reference internal\" href=\"tutorial\"><em>tutorial</em></a> or have generated the code using <a class=\"reference internal\" href=\"tools\"><em>Phalcon Devtools</em></a>, you may recognize the following bootstrap file:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Application;\n\ntry {\n\n    // Register autoloaders\n    // ...\n\n    // Register services\n    // ...\n\n    // Handle the request\n    $application = new Application($di);\n\n    $response = $application-&gt;handle();\n\n    $response-&gt;send();\n\n} catch (\\Exception $e) {\n    echo \"Exception: \", $e-&gt;getMessage();\n}\n</pre> <p>The core of all the work of the controller occurs when handle() is invoked:</p> <pre class=\"highlight-php\" data-language=\"php\">$response = $application-&gt;handle();\n</pre>   <h2 id=\"manual-bootstrapping\">Manual bootstrapping</h2> <p>If you do not wish to use <a class=\"reference internal\" href=\"../api/phalcon_mvc_application\"><em>Phalcon\\Mvc\\Application</em></a>, the code above can be changed as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">// Get the 'router' service\n$router = $di['router'];\n\n$router-&gt;handle();\n\n$view = $di['view'];\n\n$dispatcher = $di['dispatcher'];\n\n// Pass the processed router parameters to the dispatcher\n$dispatcher-&gt;setControllerName($router-&gt;getControllerName());\n$dispatcher-&gt;setActionName($router-&gt;getActionName());\n$dispatcher-&gt;setParams($router-&gt;getParams());\n\n// Start the view\n$view-&gt;start();\n\n// Dispatch the request\n$dispatcher-&gt;dispatch();\n\n// Render the related views\n$view-&gt;render(\n    $dispatcher-&gt;getControllerName(),\n    $dispatcher-&gt;getActionName(),\n    $dispatcher-&gt;getParams()\n);\n\n// Finish the view\n$view-&gt;finish();\n\n$response = $di['response'];\n\n// Pass the output of the view to the response\n$response-&gt;setContent($view-&gt;getContent());\n\n// Send the response headers\n$response-&gt;sendHeaders();\n\n// Print the response\necho $response-&gt;getContent();\n</pre> <p>The following replacement of <a class=\"reference internal\" href=\"../api/phalcon_mvc_application\"><em>Phalcon\\Mvc\\Application</em></a> lacks of a view component making it suitable for Rest APIs:</p> <pre class=\"highlight-php\" data-language=\"php\">// Get the 'router' service\n$router = $di['router'];\n\n$router-&gt;handle();\n\n$dispatcher = $di['dispatcher'];\n\n// Pass the processed router parameters to the dispatcher\n$dispatcher-&gt;setControllerName($router-&gt;getControllerName());\n$dispatcher-&gt;setActionName($router-&gt;getActionName());\n$dispatcher-&gt;setParams($router-&gt;getParams());\n\n// Dispatch the request\n$dispatcher-&gt;dispatch();\n\n// Get the returned value by the last executed action\n$response = $dispatcher-&gt;getReturnedValue();\n\n// Check if the action returned is a 'response' object\nif ($response instanceof Phalcon\\Http\\ResponseInterface) {\n\n    // Send the response\n    $response-&gt;send();\n}\n</pre> <p>Yet another alternative that catch exceptions produced in the dispatcher forwarding to other actions consequently:</p> <pre class=\"highlight-php\" data-language=\"php\">// Get the 'router' service\n$router = $di['router'];\n\n$router-&gt;handle();\n\n$dispatcher = $di['dispatcher'];\n\n// Pass the processed router parameters to the dispatcher\n$dispatcher-&gt;setControllerName($router-&gt;getControllerName());\n$dispatcher-&gt;setActionName($router-&gt;getActionName());\n$dispatcher-&gt;setParams($router-&gt;getParams());\n\ntry {\n\n    // Dispatch the request\n    $dispatcher-&gt;dispatch();\n\n} catch (Exception $e) {\n\n    // An exception has occurred, dispatch some controller/action aimed for that\n\n    // Pass the processed router parameters to the dispatcher\n    $dispatcher-&gt;setControllerName('errors');\n    $dispatcher-&gt;setActionName('action503');\n\n    // Dispatch the request\n    $dispatcher-&gt;dispatch();\n}\n\n// Get the returned value by the last executed action\n$response = $dispatcher-&gt;getReturnedValue();\n\n// Check if the action returned is a 'response' object\nif ($response instanceof Phalcon\\Http\\ResponseInterface) {\n\n    // Send the response\n    $response-&gt;send();\n}\n</pre> <p>Although the above implementations are a lot more verbose than the code needed while using <a class=\"reference internal\" href=\"../api/phalcon_mvc_application\"><em>Phalcon\\Mvc\\Application</em></a>, it offers an alternative in bootstrapping your application. Depending on your needs, you might want to have full control of what should be instantiated or not, or replace certain components with those of your own to extend the default functionality.</p>   <h2 id=\"application-events\">Application Events</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_application\"><em>Phalcon\\Mvc\\Application</em></a> is able to send events to the <a class=\"reference internal\" href=\"events\"><em>EventsManager</em></a> (if it is present). Events are triggered using the type “application”. The following events are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Event Name</th> <th class=\"head\">Triggered</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>boot</td> <td>Executed when the application handles its first request</td> </tr> <tr class=\"row-odd\">\n<td>beforeStartModule</td> <td>Before initialize a module, only when modules are registered</td> </tr> <tr class=\"row-even\">\n<td>afterStartModule</td> <td>After initialize a module, only when modules are registered</td> </tr> <tr class=\"row-odd\">\n<td>beforeHandleRequest</td> <td>Before execute the dispatch loop</td> </tr> <tr class=\"row-even\">\n<td>afterHandleRequest</td> <td>After execute the dispatch loop</td> </tr> </tbody> </table> <p>The following example demonstrates how to attach listeners to this component:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Events\\Manager as EventsManager;\n\n$eventsManager = new EventsManager();\n\n$application-&gt;setEventsManager($eventsManager);\n\n$eventsManager-&gt;attach(\n    \"application\",\n    function ($event, $application) {\n        // ...\n    }\n);\n</pre>   <h2 id=\"external-resources\">External Resources</h2> <ul class=\"simple\"> <li><a class=\"reference external\" href=\"https://github.com/phalcon/mvc\">MVC examples on Github</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/applications.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/applications.html</a>\n  </p>\n</div>\n","reference/session":"<h1 id=\"storing-data-in-session\">Storing data in Session</h1> <p>The <a class=\"reference internal\" href=\"../api/phalcon_session\"><em>Phalcon\\Session</em></a> provides object-oriented wrappers to access session data.</p> <p>Reasons to use this component instead of raw-sessions:</p> <ul class=\"simple\"> <li>You can easily isolate session data across applications on the same domain</li> <li>Intercept where session data is set/get in your application</li> <li>Change the session adapter according to the application needs</li> </ul>  <h2 id=\"starting-the-session\">Starting the Session</h2> <p>Some applications are session-intensive, almost any action that performs requires access to session data. There are others who access session data casually. Thanks to the service container, we can ensure that the session is accessed only when it’s clearly needed:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Session\\Adapter\\Files as Session;\n\n// Start the session the first time when some component request the session service\n$di-&gt;setShared('session', function () {\n    $session = new Session();\n    $session-&gt;start();\n    return $session;\n});\n</pre>   <h2 id=\"storing-retrieving-data-in-session\">Storing/Retrieving data in Session</h2> <p>From a controller, a view or any other component that extends <a class=\"reference internal\" href=\"../api/phalcon_di_injectable\"><em>Phalcon\\Di\\Injectable</em></a> you can access the session service and store items and retrieve them in the following way:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass UserController extends Controller\n{\n    public function indexAction()\n    {\n        // Set a session variable\n        $this-&gt;session-&gt;set(\"user-name\", \"Michael\");\n    }\n\n    public function welcomeAction()\n    {\n        // Check if the variable is defined\n        if ($this-&gt;session-&gt;has(\"user-name\")) {\n\n            // Retrieve its value\n            $name = $this-&gt;session-&gt;get(\"user-name\");\n        }\n    }\n\n}\n</pre>   <h2 id=\"removing-destroying-sessions\">Removing/Destroying Sessions</h2> <p>It’s also possible remove specific variables or destroy the whole session:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass UserController extends Controller\n{\n    public function removeAction()\n    {\n        // Remove a session variable\n        $this-&gt;session-&gt;remove(\"user-name\");\n    }\n\n    public function logoutAction()\n    {\n        // Destroy the whole session\n        $this-&gt;session-&gt;destroy();\n    }\n}\n</pre>   <h2 id=\"isolating-session-data-between-applications\">Isolating Session Data between Applications</h2> <p>Sometimes a user can use the same application twice, on the same server, in the same session. Surely, if we use variables in session, we want that every application have separate session data (even though the same code and same variable names). To solve this, you can add a prefix for every session variable created in a certain application:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Session\\Adapter\\Files as Session;\n\n// Isolating the session data\n$di-&gt;set('session', function () {\n\n    // All variables created will prefixed with \"my-app-1\"\n    $session = new Session(\n        array(\n            'uniqueId' =&gt; 'my-app-1'\n        )\n    );\n\n    $session-&gt;start();\n\n    return $session;\n});\n</pre> <p>Adding a unique ID is not necessary.</p>   <h2 id=\"session-bags\">Session Bags</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_session_bag\"><em>Phalcon\\Session\\Bag</em></a> is a component that helps separating session data into “namespaces”. Working by this way you can easily create groups of session variables into the application. By only setting the variables in the “bag”, it’s automatically stored in session:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Session\\Bag as SessionBag;\n\n$user       = new SessionBag('user');\n$user-&gt;setDI($di);\n$user-&gt;name = \"Kimbra Johnson\";\n$user-&gt;age  = 22;\n</pre>   <h2 id=\"persistent-data-in-components\">Persistent Data in Components</h2> <p>Controller, components and classes that extends <a class=\"reference internal\" href=\"../api/phalcon_di_injectable\"><em>Phalcon\\Di\\Injectable</em></a> may inject a <a class=\"reference internal\" href=\"../api/phalcon_session_bag\"><em>Phalcon\\Session\\Bag</em></a>. This class isolates variables for every class. Thanks to this you can persist data between requests in every class in an independent way.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass UserController extends Controller\n{\n    public function indexAction()\n    {\n        // Create a persistent variable \"name\"\n        $this-&gt;persistent-&gt;name = \"Laura\";\n    }\n\n    public function welcomeAction()\n    {\n        if (isset($this-&gt;persistent-&gt;name)) {\n            echo \"Welcome, \", $this-&gt;persistent-&gt;name;\n        }\n    }\n}\n</pre> <p>In a component:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass Security extends Component\n{\n    public function auth()\n    {\n        // Create a persistent variable \"name\"\n        $this-&gt;persistent-&gt;name = \"Laura\";\n    }\n\n    public function getAuthName()\n    {\n        return $this-&gt;persistent-&gt;name;\n    }\n}\n</pre> <p>The data added to the session (<code class=\"code docutils literal\"><span class=\"pre\">$this-&gt;session</span></code>) are available throughout the application, while persistent (<code class=\"code docutils literal\"><span class=\"pre\">$this-&gt;persistent</span></code>) can only be accessed in the scope of the current class.</p>   <h2 id=\"implementing-your-own-adapters\">Implementing your own adapters</h2> <p>The <a class=\"reference internal\" href=\"../api/phalcon_session_adapterinterface\"><em>Phalcon\\Session\\AdapterInterface</em></a> interface must be implemented in order to create your own session adapters or extend the existing ones.</p> <p>There are more adapters available for this components in the <a class=\"reference external\" href=\"https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Session/Adapter\">Phalcon Incubator</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/session.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/session.html</a>\n  </p>\n</div>\n","reference/routing":"<h1 id=\"routing\">Routing</h1> <p>The router component allows you to define routes that are mapped to controllers or handlers that should receive the request. A router simply parses a URI to determine this information. The router has two modes: MVC mode and match-only mode. The first mode is ideal for working with MVC applications.</p>  <h2 id=\"defining-routes\">Defining Routes</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_router\"><em>Phalcon\\Mvc\\Router</em></a> provides advanced routing capabilities. In MVC mode, you can define routes and map them to controllers/actions that you require. A route is defined as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router;\n\n// Create the router\n$router = new Router();\n\n// Define a route\n$router-&gt;add(\n    \"/admin/users/my-profile\",\n    array(\n        \"controller\" =&gt; \"users\",\n        \"action\"     =&gt; \"profile\"\n    )\n);\n\n// Another route\n$router-&gt;add(\n    \"/admin/users/change-password\",\n    array(\n        \"controller\" =&gt; \"users\",\n        \"action\"     =&gt; \"changePassword\"\n    )\n);\n\n$router-&gt;handle();\n</pre> <p>The first parameter of the <code class=\"code docutils literal\"><span class=\"pre\">add()</span></code> method is the pattern you want to match and, optionally, the second parameter is a set of paths. In this case, if the URI is /admin/users/my-profile, then the “users” controller with its action “profile” will be executed. It’s important to remember that the router does not execute the controller and action, it only collects this information to inform the correct component (ie. <a class=\"reference internal\" href=\"../api/phalcon_mvc_dispatcher\"><em>Phalcon\\Mvc\\Dispatcher</em></a>) that this is the controller/action it should execute.</p> <p>An application can have many paths and defining routes one by one can be a cumbersome task. In these cases we can create more flexible routes:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router;\n\n// Create the router\n$router = new Router();\n\n// Define a route\n$router-&gt;add(\n    \"/admin/:controller/a/:action/:params\",\n    array(\n        \"controller\" =&gt; 1,\n        \"action\"     =&gt; 2,\n        \"params\"     =&gt; 3\n    )\n);\n</pre> <p>In the example above, we’re using wildcards to make a route valid for many URIs. For example, by accessing the following URL (/admin/users/a/delete/dave/301) would produce:</p> <table class=\"docutils\"> <colgroup> <col width=\"44%\"> <col width=\"56%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td>Controller</td> <td>users</td> </tr> <tr class=\"row-even\">\n<td>Action</td> <td>delete</td> </tr> <tr class=\"row-odd\">\n<td>Parameter</td> <td>dave</td> </tr> <tr class=\"row-even\">\n<td>Parameter</td> <td>301</td> </tr> </tbody> </table> <p>The <code class=\"code docutils literal\"><span class=\"pre\">add()</span></code> method receives a pattern that can optionally have predefined placeholders and regular expression modifiers. All the routing patterns must start with a forward slash character (/). The regular expression syntax used is the same as the <a class=\"reference external\" href=\"http://www.php.net/manual/en/book.pcre.php\">PCRE regular expressions</a>. Note that, it is not necessary to add regular expression delimiters. All route patterns are case-insensitive.</p> <p>The second parameter defines how the matched parts should bind to the controller/action/parameters. Matching parts are placeholders or subpatterns delimited by parentheses (round brackets). In the example given above, the first subpattern matched (<code class=\"code docutils literal\"><span class=\"pre\">:controller</span></code>) is the controller part of the route, the second the action and so on.</p> <p>These placeholders help writing regular expressions that are more readable for developers and easier to understand. The following placeholders are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"14%\"> <col width=\"19%\"> <col width=\"67%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Placeholder</th> <th class=\"head\">Regular Expression</th> <th class=\"head\">Usage</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">/:module</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">/([a-zA-Z0-9\\_\\-]+)</span></code></td> <td>Matches a valid module name with alpha-numeric characters only</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">/:controller</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">/([a-zA-Z0-9\\_\\-]+)</span></code></td> <td>Matches a valid controller name with alpha-numeric characters only</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">/:action</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">/([a-zA-Z0-9\\_]+)</span></code></td> <td>Matches a valid action name with alpha-numeric characters only</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">/:params</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">(/.*)*</span></code></td> <td>Matches a list of optional words separated by slashes. Only use this placeholder at the end of a route</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">/:namespace</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">/([a-zA-Z0-9\\_\\-]+)</span></code></td> <td>Matches a single level namespace name</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">/:int</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">/([0-9]+)</span></code></td> <td>Matches an integer parameter</td> </tr> </tbody> </table> <p>Controller names are camelized, this means that characters (<code class=\"code docutils literal\"><span class=\"pre\">-</span></code>) and (<code class=\"code docutils literal\"><span class=\"pre\">_</span></code>) are removed and the next character is uppercased. For instance, some_controller is converted to SomeController.</p> <p>Since you can add many routes as you need using the <code class=\"code docutils literal\"><span class=\"pre\">add()</span></code> method, the order in which routes are added indicate their relevance, latest routes added have more relevance than first added. Internally, all defined routes are traversed in reverse order until <a class=\"reference internal\" href=\"../api/phalcon_mvc_router\"><em>Phalcon\\Mvc\\Router</em></a> finds the one that matches the given URI and processes it, while ignoring the rest.</p>  <h3 id=\"parameters-with-names\">Parameters with Names</h3> <p>The example below demonstrates how to define names to route parameters:</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add(\n    \"/news/([0-9]{4})/([0-9]{2})/([0-9]{2})/:params\",\n    array(\n        \"controller\" =&gt; \"posts\",\n        \"action\"     =&gt; \"show\",\n        \"year\"       =&gt; 1, // ([0-9]{4})\n        \"month\"      =&gt; 2, // ([0-9]{2})\n        \"day\"        =&gt; 3, // ([0-9]{2})\n        \"params\"     =&gt; 4  // :params\n    )\n);\n</pre> <p>In the above example, the route doesn’t define a “controller” or “action” part. These parts are replaced with fixed values (“posts” and “show”). The user will not know the controller that is really dispatched by the request. Inside the controller, those named parameters can be accessed as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction()\n    {\n        // Get \"year\" parameter\n        $year = $this-&gt;dispatcher-&gt;getParam(\"year\");\n\n        // Get \"month\" parameter\n        $month = $this-&gt;dispatcher-&gt;getParam(\"month\");\n\n        // Get \"day\" parameter\n        $day = $this-&gt;dispatcher-&gt;getParam(\"day\");\n\n        // ...\n    }\n}\n</pre> <p>Note that the values of the parameters are obtained from the dispatcher. This happens because it is the component that finally interacts with the drivers of your application. Moreover, there is also another way to create named parameters as part of the pattern:</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add(\n    \"/documentation/{chapter}/{name}.{type:[a-z]+}\",\n    array(\n        \"controller\" =&gt; \"documentation\",\n        \"action\"     =&gt; \"show\"\n    )\n);\n</pre> <p>You can access their values in the same way as before:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass DocumentationController extends Controller\n{\n    public function showAction()\n    {\n        // Get \"name\" parameter\n        $name = $this-&gt;dispatcher-&gt;getParam(\"name\");\n\n        // Get \"type\" parameter\n        $type = $this-&gt;dispatcher-&gt;getParam(\"type\");\n\n        // ...\n    }\n}\n</pre>   <h3 id=\"short-syntax\">Short Syntax</h3> <p>If you don’t like using an array to define the route paths, an alternative syntax is also available. The following examples produce the same result:</p> <pre class=\"highlight-php\" data-language=\"php\">// Short form\n$router-&gt;add(\"/posts/{year:[0-9]+}/{title:[a-z\\-]+}\", \"Posts::show\");\n\n// Array form\n$router-&gt;add(\n    \"/posts/([0-9]+)/([a-z\\-]+)\",\n    array(\n       \"controller\" =&gt; \"posts\",\n       \"action\"     =&gt; \"show\",\n       \"year\"       =&gt; 1,\n       \"title\"      =&gt; 2\n    )\n);\n</pre>   <h3 id=\"mixing-array-and-short-syntax\">Mixing Array and Short Syntax</h3> <p>Array and short syntax can be mixed to define a route, in this case note that named parameters automatically are added to the route paths according to the position on which they were defined:</p> <pre class=\"highlight-php\" data-language=\"php\">// First position must be skipped because it is used for\n// the named parameter 'country'\n$router-&gt;add('/news/{country:[a-z]{2}}/([a-z+])/([a-z\\-+])',\n    array(\n        'section' =&gt; 2, // Positions start with 2\n        'article' =&gt; 3\n    )\n);\n</pre>   <h3 id=\"routing-to-modules\">Routing to Modules</h3> <p>You can define routes whose paths include modules. This is specially suitable to multi-module applications. It’s possible define a default route that includes a module wildcard:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router;\n\n$router = new Router(false);\n\n$router-&gt;add(\n    '/:module/:controller/:action/:params',\n    array(\n        'module'     =&gt; 1,\n        'controller' =&gt; 2,\n        'action'     =&gt; 3,\n        'params'     =&gt; 4\n    )\n);\n</pre> <p>In this case, the route always must have the module name as part of the URL. For example, the following URL: /admin/users/edit/sonny, will be processed as:</p> <table class=\"docutils\"> <colgroup> <col width=\"44%\"> <col width=\"56%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td>Module</td> <td>admin</td> </tr> <tr class=\"row-even\">\n<td>Controller</td> <td>users</td> </tr> <tr class=\"row-odd\">\n<td>Action</td> <td>edit</td> </tr> <tr class=\"row-even\">\n<td>Parameter</td> <td>sonny</td> </tr> </tbody> </table> <p>Or you can bind specific routes to specific modules:</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add(\n    \"/login\",\n    array(\n        'module'     =&gt; 'backend',\n        'controller' =&gt; 'login',\n        'action'     =&gt; 'index'\n    )\n);\n\n$router-&gt;add(\n    \"/products/:action\",\n    array(\n        'module'     =&gt; 'frontend',\n        'controller' =&gt; 'products',\n        'action'     =&gt; 1\n    )\n);\n</pre> <p>Or bind them to specific namespaces:</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add(\n    \"/:namespace/login\",\n    array(\n        'namespace'  =&gt; 1,\n        'controller' =&gt; 'login',\n        'action'     =&gt; 'index'\n    )\n);\n</pre> <p>Namespaces/class names must be passed separated:</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add(\n    \"/login\",\n    array(\n        'namespace'  =&gt; 'Backend\\Controllers',\n        'controller' =&gt; 'login',\n        'action'     =&gt; 'index'\n    )\n);\n</pre>   <h3 id=\"http-method-restrictions\">HTTP Method Restrictions</h3> <p>When you add a route using simply <code class=\"code docutils literal\"><span class=\"pre\">add()</span></code>, the route will be enabled for any HTTP method. Sometimes we can restrict a route to a specific method, this is especially useful when creating RESTful applications:</p> <pre class=\"highlight-php\" data-language=\"php\">// This route only will be matched if the HTTP method is GET\n$router-&gt;addGet(\"/products/edit/{id}\", \"Products::edit\");\n\n// This route only will be matched if the HTTP method is POST\n$router-&gt;addPost(\"/products/save\", \"Products::save\");\n\n// This route will be matched if the HTTP method is POST or PUT\n$router-&gt;add(\"/products/update\", \"Products::update\")-&gt;via(array(\"POST\", \"PUT\"));\n</pre>   <h3 id=\"using-conversors\">Using conversors</h3> <p>Conversors allow you to freely transform the route’s parameters before passing them to the dispatcher. The following examples show how to use them:</p> <pre class=\"highlight-php\" data-language=\"php\">// The action name allows dashes, an action can be: /products/new-ipod-nano-4-generation\n$router\n    -&gt;add('/products/{slug:[a-z\\-]+}', array(\n        'controller' =&gt; 'products',\n        'action'     =&gt; 'show'\n    ))\n    -&gt;convert('slug', function ($slug) {\n        // Transform the slug removing the dashes\n        return str_replace('-', '', $slug);\n    });\n</pre> <p>Another use case for conversors is binding a model into a route. This allows the model to be passed into the defined action directly:</p> <pre class=\"highlight-php\" data-language=\"php\">// This example works off the assumption that the ID is being used as parameter in the url: /products/4\n$router\n    -&gt;add('/products/{id}', array(\n        'controller' =&gt; 'products',\n        'action'     =&gt; 'show'\n    ))\n    -&gt;convert('id', function ($id) {\n        // Fetch the model\n        return Product::findFirstById($id);\n    });\n</pre>   <h3 id=\"groups-of-routes\">Groups of Routes</h3> <p>If a set of routes have common paths they can be grouped to easily maintain them:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router;\nuse Phalcon\\Mvc\\Router\\Group as RouterGroup;\n\n$router = new Router();\n\n// Create a group with a common module and controller\n$blog = new RouterGroup(\n    array(\n        'module'     =&gt; 'blog',\n        'controller' =&gt; 'index'\n    )\n);\n\n// All the routes start with /blog\n$blog-&gt;setPrefix('/blog');\n\n// Add a route to the group\n$blog-&gt;add(\n    '/save',\n    array(\n        'action' =&gt; 'save'\n    )\n);\n\n// Add another route to the group\n$blog-&gt;add(\n    '/edit/{id}',\n    array(\n        'action' =&gt; 'edit'\n    )\n);\n\n// This route maps to a controller different than the default\n$blog-&gt;add(\n    '/blog',\n    array(\n        'controller' =&gt; 'blog',\n        'action'     =&gt; 'index'\n    )\n);\n\n// Add the group to the router\n$router-&gt;mount($blog);\n</pre> <p>You can move groups of routes to separate files in order to improve the organization and code reusing in the application:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router\\Group as RouterGroup;\n\nclass BlogRoutes extends RouterGroup\n{\n    public function initialize()\n    {\n        // Default paths\n        $this-&gt;setPaths(\n            array(\n                'module'    =&gt; 'blog',\n                'namespace' =&gt; 'Blog\\Controllers'\n            )\n        );\n\n        // All the routes start with /blog\n        $this-&gt;setPrefix('/blog');\n\n        // Add a route to the group\n        $this-&gt;add(\n            '/save',\n            array(\n                'action' =&gt; 'save'\n            )\n        );\n\n        // Add another route to the group\n        $this-&gt;add(\n            '/edit/{id}',\n            array(\n                'action' =&gt; 'edit'\n            )\n        );\n\n        // This route maps to a controller different than the default\n        $this-&gt;add(\n            '/blog',\n            array(\n                'controller' =&gt; 'blog',\n                'action'     =&gt; 'index'\n            )\n        );\n    }\n}\n</pre> <p>Then mount the group in the router:</p> <pre class=\"highlight-php\" data-language=\"php\">// Add the group to the router\n$router-&gt;mount(new BlogRoutes());\n</pre>    <h2 id=\"matching-routes\">Matching Routes</h2> <p>A valid URI must be passed to the Router so that it can process it and find a matching route. By default, the routing URI is taken from the <code class=\"code docutils literal\"><span class=\"pre\">$_GET['_url']</span></code> variable that is created by the rewrite engine module. A couple of rewrite rules that work very well with Phalcon are:</p> <pre class=\"highlight-apacheconf\" data-language=\"apacheconf\">RewriteEngine On\nRewriteCond   %{REQUEST_FILENAME} !-d\nRewriteCond   %{REQUEST_FILENAME} !-f\nRewriteRule   ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n</pre> <p>In this configuration, any requests to files or folders that don’t exist will be sent to index.php.</p> <p>The following example shows how to use this component in stand-alone mode:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router;\n\n// Creating a router\n$router = new Router();\n\n// Define routes here if any\n// ...\n\n// Taking URI from $_GET[\"_url\"]\n$router-&gt;handle();\n\n// Or Setting the URI value directly\n$router-&gt;handle(\"/employees/edit/17\");\n\n// Getting the processed controller\necho $router-&gt;getControllerName();\n\n// Getting the processed action\necho $router-&gt;getActionName();\n\n// Get the matched route\n$route = $router-&gt;getMatchedRoute();\n</pre>   <h2 id=\"naming-routes\">Naming Routes</h2> <p>Each route that is added to the router is stored internally as a <a class=\"reference internal\" href=\"../api/phalcon_mvc_router_route\"><em>Phalcon\\Mvc\\Router\\Route</em></a> object. That class encapsulates all the details of each route. For instance, we can give a name to a path to identify it uniquely in our application. This is especially useful if you want to create URLs from it.</p> <pre class=\"highlight-php\" data-language=\"php\">$route = $router-&gt;add(\"/posts/{year}/{title}\", \"Posts::show\");\n\n$route-&gt;setName(\"show-posts\");\n\n// Or just\n\n$router-&gt;add(\"/posts/{year}/{title}\", \"Posts::show\")-&gt;setName(\"show-posts\");\n</pre> <p>Then, using for example the component <a class=\"reference internal\" href=\"../api/phalcon_mvc_url\"><em>Phalcon\\Mvc\\Url</em></a> we can build routes from its name:</p> <pre class=\"highlight-php\" data-language=\"php\">// Returns /posts/2012/phalcon-1-0-released\necho $url-&gt;get(\n    array(\n        \"for\"   =&gt; \"show-posts\",\n        \"year\"  =&gt; \"2012\",\n        \"title\" =&gt; \"phalcon-1-0-released\"\n    )\n);\n</pre>   <h2 id=\"usage-examples\">Usage Examples</h2> <p>The following are examples of custom routes:</p> <pre class=\"highlight-php\" data-language=\"php\">// Matches \"/system/admin/a/edit/7001\"\n$router-&gt;add(\n    \"/system/:controller/a/:action/:params\",\n    array(\n        \"controller\" =&gt; 1,\n        \"action\"     =&gt; 2,\n        \"params\"     =&gt; 3\n    )\n);\n\n// Matches \"/es/news\"\n$router-&gt;add(\n    \"/([a-z]{2})/:controller\",\n    array(\n        \"controller\" =&gt; 2,\n        \"action\"     =&gt; \"index\",\n        \"language\"   =&gt; 1\n    )\n);\n\n// Matches \"/es/news\"\n$router-&gt;add(\n    \"/{language:[a-z]{2}}/:controller\",\n    array(\n        \"controller\" =&gt; 2,\n        \"action\"     =&gt; \"index\"\n    )\n);\n\n// Matches \"/admin/posts/edit/100\"\n$router-&gt;add(\n    \"/admin/:controller/:action/:int\",\n    array(\n        \"controller\" =&gt; 1,\n        \"action\"     =&gt; 2,\n        \"id\"         =&gt; 3\n    )\n);\n\n// Matches \"/posts/2015/02/some-cool-content\"\n$router-&gt;add(\n    \"/posts/([0-9]{4})/([0-9]{2})/([a-z\\-]+)\",\n    array(\n        \"controller\" =&gt; \"posts\",\n        \"action\"     =&gt; \"show\",\n        \"year\"       =&gt; 1,\n        \"month\"      =&gt; 2,\n        \"title\"      =&gt; 4\n    )\n);\n\n// Matches \"/manual/en/translate.adapter.html\"\n$router-&gt;add(\n    \"/manual/([a-z]{2})/([a-z\\.]+)\\.html\",\n    array(\n        \"controller\" =&gt; \"manual\",\n        \"action\"     =&gt; \"show\",\n        \"language\"   =&gt; 1,\n        \"file\"       =&gt; 2\n    )\n);\n\n// Matches /feed/fr/le-robots-hot-news.atom\n$router-&gt;add(\n    \"/feed/{lang:[a-z]+}/{blog:[a-z\\-]+}\\.{type:[a-z\\-]+}\",\n    \"Feed::get\"\n);\n\n// Matches /api/v1/users/peter.json\n$router-&gt;add(\n    '/api/(v1|v2)/{method:[a-z]+}/{param:[a-z]+}\\.(json|xml)',\n    array(\n        'controller' =&gt; 'api',\n        'version'    =&gt; 1,\n        'format'     =&gt; 4\n    )\n);\n</pre> <blockquote class=\"highlights\"> <div>Beware of characters allowed in regular expression for controllers and namespaces. As these become class names and in turn they’re passed through the file system could be used by attackers to read unauthorized files. A safe regular expression is: <code class=\"code docutils literal\"><span class=\"pre\">/([a-zA-Z0-9\\_\\-]+)</span></code>\n</div>\n</blockquote>   <h2 id=\"default-behavior\">Default Behavior</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_router\"><em>Phalcon\\Mvc\\Router</em></a> has a default behavior that provides a very simple routing that always expects a URI that matches the following pattern: /:controller/:action/:params</p> <p>For example, for a URL like this <em>http://phalconphp.com/documentation/show/about.html</em>, this router will translate it as follows:</p> <table class=\"docutils\"> <colgroup> <col width=\"44%\"> <col width=\"56%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td>Controller</td> <td>documentation</td> </tr> <tr class=\"row-even\">\n<td>Action</td> <td>show</td> </tr> <tr class=\"row-odd\">\n<td>Parameter</td> <td>about.html</td> </tr> </tbody> </table> <p>If you don’t want the router to have this behavior, you must create the router passing <code class=\"code docutils literal\"><span class=\"pre\">false</span></code> as the first parameter:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router;\n\n// Create the router without default routes\n$router = new Router(false);\n</pre>   <h2 id=\"setting-the-default-route\">Setting the default route</h2> <p>When your application is accessed without any route, the ‘/’ route is used to determine what paths must be used to show the initial page in your website/application:</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add(\n    \"/\",\n    array(\n        'controller' =&gt; 'index',\n        'action'     =&gt; 'index'\n    )\n);\n</pre>   <h2 id=\"not-found-paths\">Not Found Paths</h2> <p>If none of the routes specified in the router are matched, you can define a group of paths to be used in this scenario:</p> <pre class=\"highlight-php\" data-language=\"php\">// Set 404 paths\n$router-&gt;notFound(\n    array(\n        \"controller\" =&gt; \"index\",\n        \"action\"     =&gt; \"route404\"\n    )\n);\n</pre> <p>This is typically for an Error 404 page.</p>   <h2 id=\"setting-default-paths\">Setting default paths</h2> <p>It’s possible to define default values for the module, controller or action. When a route is missing any of those paths they can be automatically filled by the router:</p> <pre class=\"highlight-php\" data-language=\"php\">// Setting a specific default\n$router-&gt;setDefaultModule('backend');\n$router-&gt;setDefaultNamespace('Backend\\Controllers');\n$router-&gt;setDefaultController('index');\n$router-&gt;setDefaultAction('index');\n\n// Using an array\n$router-&gt;setDefaults(\n    array(\n        'controller' =&gt; 'index',\n        'action'     =&gt; 'index'\n    )\n);\n</pre>   <h2 id=\"dealing-with-extra-trailing-slashes\">Dealing with extra/trailing slashes</h2> <p>Sometimes a route could be accessed with extra/trailing slashes. Those extra slashes would lead to produce a not-found status in the dispatcher. You can set up the router to automatically remove the slashes from the end of handled route:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n// Remove trailing slashes automatically\n$router-&gt;removeExtraSlashes(true);\n</pre> <p>Or, you can modify specific routes to optionally accept trailing slashes:</p> <pre class=\"highlight-php\" data-language=\"php\">// The [/]{0,1} allows this route to have optionally have a trailing slash\n$router-&gt;add(\n    '/{language:[a-z]{2}}/:controller[/]{0,1}',\n    array(\n        'controller' =&gt; 2,\n        'action'     =&gt; 'index'\n    )\n);\n</pre>   <h2 id=\"match-callbacks\">Match Callbacks</h2> <p>Sometimes, routes should only be matched if they meet specific conditions. You can add arbitrary conditions to routes using the <code class=\"code docutils literal\"><span class=\"pre\">beforeMatch()</span></code> callback. If this function return <code class=\"code docutils literal\"><span class=\"pre\">false</span></code>, the route will be treated as non-matched:</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add('/login', array(\n    'module'     =&gt; 'admin',\n    'controller' =&gt; 'session'\n))-&gt;beforeMatch(function ($uri, $route) {\n    // Check if the request was made with Ajax\n    if (isset($_SERVER['HTTP_X_REQUESTED_WITH'])\n        &amp;&amp; $_SERVER['HTTP_X_REQUESTED_WITH'] == 'XMLHttpRequest') {\n        return false;\n    }\n    return true;\n});\n</pre> <p>You can re-use these extra conditions in classes:</p> <pre class=\"highlight-php\" data-language=\"php\">class AjaxFilter\n{\n    public function check()\n    {\n        return $_SERVER['HTTP_X_REQUESTED_WITH'] == 'XMLHttpRequest';\n    }\n}\n</pre> <p>And use this class instead of the anonymous function:</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add('/get/info/{id}', [\n    'controller' =&gt; 'products',\n    'action'     =&gt; 'info'\n])-&gt;beforeMatch([new AjaxFilter(), 'check']);\n</pre> <p>Since Phalcon 2.1.0 beta 1, there is another way to check this:</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add('/login', [\n    'module'     =&gt; 'admin',\n    'controller' =&gt; 'session'\n])-&gt;beforeMatch(function ($uri, $route) {\n    /**\n     * @var string $uri\n     * @var \\Phalcon\\Mvc\\Router\\Route $route\n     * @var \\Phalcon\\DiInterface $this\n     * @var \\Phalcon\\Http\\Request $request\n     */\n    $request = $this-&gt;getShared('request');\n\n    // Check if the request was made with Ajax\n    return $request-&gt;isAjax();\n});\n</pre>   <h2 id=\"hostname-constraints\">Hostname Constraints</h2> <p>The router allows you to set hostname constraints, this means that specific routes or a group of routes can be restricted to only match if the route also meets the hostname constraint:</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add('/login', array(\n    'module'     =&gt; 'admin',\n    'controller' =&gt; 'session',\n    'action'     =&gt; 'login'\n))-&gt;setHostName('admin.company.com');\n</pre> <p>The hostname can also be passed as a regular expressions:</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add('/login', array(\n    'module'     =&gt; 'admin',\n    'controller' =&gt; 'session',\n    'action'     =&gt; 'login'\n))-&gt;setHostName('([a-z]+).company.com');\n</pre> <p>In groups of routes you can set up a hostname constraint that apply for every route in the group:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router\\Group as RouterGroup;\n\n// Create a group with a common module and controller\n$blog = new RouterGroup(\n    array(\n        'module'     =&gt; 'blog',\n        'controller' =&gt; 'posts'\n    )\n);\n\n// Hostname restriction\n$blog-&gt;setHostName('blog.mycompany.com');\n\n// All the routes start with /blog\n$blog-&gt;setPrefix('/blog');\n\n// Default route\n$blog-&gt;add(\n    '/',\n    array(\n        'action' =&gt; 'index'\n    )\n);\n\n// Add a route to the group\n$blog-&gt;add(\n    '/save',\n    array(\n        'action' =&gt; 'save'\n    )\n);\n\n// Add another route to the group\n$blog-&gt;add(\n    '/edit/{id}',\n    array(\n        'action' =&gt; 'edit'\n    )\n);\n\n// Add the group to the router\n$router-&gt;mount($blog);\n</pre>   <h2 id=\"uri-sources\">URI Sources</h2> <p>By default the URI information is obtained from the <code class=\"code docutils literal\"><span class=\"pre\">$_GET['_url']</span></code> variable, this is passed by the Rewrite-Engine to Phalcon, you can also use <code class=\"code docutils literal\"><span class=\"pre\">$_SERVER['REQUEST_URI']</span></code> if required:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router;\n\n// ...\n\n$router-&gt;setUriSource(Router::URI_SOURCE_GET_URL); // Use $_GET['_url'] (default)\n$router-&gt;setUriSource(Router::URI_SOURCE_SERVER_REQUEST_URI); // Use $_SERVER['REQUEST_URI']\n</pre> <p>Or you can manually pass a URI to the <code class=\"code docutils literal\"><span class=\"pre\">handle()</span></code> method:</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;handle('/some/route/to/handle');\n</pre>   <h2 id=\"testing-your-routes\">Testing your routes</h2> <p>Since this component has no dependencies, you can create a file as shown below to test your routes:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router;\n\n// These routes simulate real URIs\n$testRoutes = array(\n    '/',\n    '/index',\n    '/index/index',\n    '/index/test',\n    '/products',\n    '/products/index/',\n    '/products/show/101',\n);\n\n$router = new Router();\n\n// Add here your custom routes\n// ...\n\n// Testing each route\nforeach ($testRoutes as $testRoute) {\n\n    // Handle the route\n    $router-&gt;handle($testRoute);\n\n    echo 'Testing ', $testRoute, '&lt;br&gt;';\n\n    // Check if some route was matched\n    if ($router-&gt;wasMatched()) {\n        echo 'Controller: ', $router-&gt;getControllerName(), '&lt;br&gt;';\n        echo 'Action: ', $router-&gt;getActionName(), '&lt;br&gt;';\n    } else {\n        echo 'The route wasn\\'t matched by any route&lt;br&gt;';\n    }\n\n    echo '&lt;br&gt;';\n}\n</pre>   <h2 id=\"annotations-router\">Annotations Router</h2> <p>This component provides a variant that’s integrated with the <a class=\"reference internal\" href=\"annotations\"><em>annotations</em></a> service. Using this strategy you can write the routes directly in the controllers instead of adding them in the service registration:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router\\Annotations as RouterAnnotations;\n\n$di['router'] = function () {\n\n    // Use the annotations router. We're passing false as we don't want the router to add its default patterns\n    $router = new RouterAnnotations(false);\n\n    // Read the annotations from ProductsController if the URI starts with /api/products\n    $router-&gt;addResource('Products', '/api/products');\n\n    return $router;\n};\n</pre> <p>The annotations can be defined in the following way:</p> <pre class=\"highlight-php\" data-language=\"php\">/**\n * @RoutePrefix(\"/api/products\")\n */\nclass ProductsController\n{\n    /**\n     * @Get(\"/\")\n     */\n    public function indexAction()\n    {\n\n    }\n\n    /**\n     * @Get(\"/edit/{id:[0-9]+}\", name=\"edit-robot\")\n     */\n    public function editAction($id)\n    {\n\n    }\n\n    /**\n     * @Route(\"/save\", methods={\"POST\", \"PUT\"}, name=\"save-robot\")\n     */\n    public function saveAction()\n    {\n\n    }\n\n    /**\n     * @Route(\"/delete/{id:[0-9]+}\", methods=\"DELETE\",\n     *      conversors={id=\"MyConversors::checkId\"})\n     */\n    public function deleteAction($id)\n    {\n\n    }\n\n    public function infoAction($id)\n    {\n\n    }\n}\n</pre> <p>Only methods marked with valid annotations are used as routes. List of annotations supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"7%\"> <col width=\"52%\"> <col width=\"40%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\">Description</th> <th class=\"head\">Usage</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>RoutePrefix</td> <td>A prefix to be prepended to each route URI. This annotation must be placed at the class’ docblock</td> <td><code class=\"code docutils literal\"><span class=\"pre\">@RoutePrefix(\"/api/products\")</span></code></td> </tr> <tr class=\"row-odd\">\n<td>Route</td> <td>This annotation marks a method as a route. This annotation must be placed in a method docblock</td> <td><code class=\"code docutils literal\"><span class=\"pre\">@Route(\"/api/products/show\")</span></code></td> </tr> <tr class=\"row-even\">\n<td>Get</td> <td>This annotation marks a method as a route restricting the HTTP method to GET</td> <td><code class=\"code docutils literal\"><span class=\"pre\">@Get(\"/api/products/search\")</span></code></td> </tr> <tr class=\"row-odd\">\n<td>Post</td> <td>This annotation marks a method as a route restricting the HTTP method to POST</td> <td><code class=\"code docutils literal\"><span class=\"pre\">@Post(\"/api/products/save\")</span></code></td> </tr> <tr class=\"row-even\">\n<td>Put</td> <td>This annotation marks a method as a route restricting the HTTP method to PUT</td> <td><code class=\"code docutils literal\"><span class=\"pre\">@Put(\"/api/products/save\")</span></code></td> </tr> <tr class=\"row-odd\">\n<td>Delete</td> <td>This annotation marks a method as a route restricting the HTTP method to DELETE</td> <td><code class=\"code docutils literal\"><span class=\"pre\">@Delete(\"/api/products/delete/{id}\")</span></code></td> </tr> <tr class=\"row-even\">\n<td>Options</td> <td>This annotation marks a method as a route restricting the HTTP method to OPTIONS</td> <td><code class=\"code docutils literal\"><span class=\"pre\">@Option(\"/api/products/info\")</span></code></td> </tr> </tbody> </table> <p>For annotations that add routes, the following parameters are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"7%\"> <col width=\"52%\"> <col width=\"40%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\">Description</th> <th class=\"head\">Usage</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>methods</td> <td>Define one or more HTTP method that route must meet with</td> <td><code class=\"code docutils literal\"><span class=\"pre\">@Route(\"/api/products\",</span> <span class=\"pre\">methods={\"GET\",</span> <span class=\"pre\">\"POST\"})</span></code></td> </tr> <tr class=\"row-odd\">\n<td>name</td> <td>Define a name for the route</td> <td><code class=\"code docutils literal\"><span class=\"pre\">@Route(\"/api/products\",</span> <span class=\"pre\">name=\"get-products\")</span></code></td> </tr> <tr class=\"row-even\">\n<td>paths</td> <td>An array of paths like the one passed to <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Mvc\\Router::add()</span></code>\n</td> <td><code class=\"code docutils literal\"><span class=\"pre\">@Route(\"/posts/{id}/{slug}\",</span> <span class=\"pre\">paths={module=\"backend\"})</span></code></td> </tr> <tr class=\"row-odd\">\n<td>conversors</td> <td>A hash of conversors to be applied to the parameters</td> <td><code class=\"code docutils literal\"><span class=\"pre\">@Route(\"/posts/{id}/{slug}\",</span> <span class=\"pre\">conversors={id=\"MyConversor::getId\"})</span></code></td> </tr> </tbody> </table> <p>If you’re using modules in your application, it is better use the <code class=\"code docutils literal\"><span class=\"pre\">addModuleResource()</span></code> method:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router\\Annotations as RouterAnnotations;\n\n$di['router'] = function () {\n\n    // Use the annotations router\n    $router = new RouterAnnotations(false);\n\n    // Read the annotations from Backend\\Controllers\\ProductsController if the URI starts with /api/products\n    $router-&gt;addModuleResource('backend', 'Products', '/api/products');\n\n    return $router;\n};\n</pre>   <h2 id=\"registering-router-instance\">Registering Router instance</h2> <p>You can register router during service registration with Phalcon dependency injector to make it available inside the controllers.</p> <p>You need to add code below in your bootstrap file (for example index.php or app/config/services.php if you use <a class=\"reference external\" href=\"http://phalconphp.com/en/download/tools\">Phalcon Developer Tools</a>)</p> <pre class=\"highlight-php\" data-language=\"php\">/**\n * Add routing capabilities\n */\n$di-&gt;set(\n    'router',\n    function () {\n        require __DIR__.'/../app/config/routes.php';\n\n        return $router;\n    }\n);\n</pre> <p>You need to create app/config/routes.php and add router initialization code, for example:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n$router-&gt;add(\n    \"/login\",\n    array(\n        'controller' =&gt; 'login',\n        'action'     =&gt; 'index'\n    )\n);\n\n$router-&gt;add(\n    \"/products/:action\",\n    array(\n        'controller' =&gt; 'products',\n        'action'     =&gt; 1\n    )\n);\n\nreturn $router;\n</pre>   <h2 id=\"implementing-your-own-router\">Implementing your own Router</h2> <p>The <a class=\"reference internal\" href=\"../api/phalcon_mvc_routerinterface\"><em>Phalcon\\Mvc\\RouterInterface</em></a> interface must be implemented to create your own router replacing the one provided by Phalcon.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/routing.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/routing.html</a>\n  </p>\n</div>\n","reference/validation":"<h1 id=\"validation\">Validation</h1> <p><a class=\"reference internal\" href=\"../api/phalcon_validation\"><em>Phalcon\\Validation</em></a> is an independent validation component that validates an arbitrary set of data. This component can be used to implement validation rules on data objects that do not belong to a model or collection.</p> <p>The following example shows its basic usage:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Email;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\n\n$validation = new Validation();\n\n$validation-&gt;add(\n    'name',\n    new PresenceOf(\n        array(\n            'message' =&gt; 'The name is required'\n        )\n    )\n);\n\n$validation-&gt;add(\n    'email',\n    new PresenceOf(\n        array(\n            'message' =&gt; 'The e-mail is required'\n        )\n    )\n);\n\n$validation-&gt;add(\n    'email',\n    new Email(\n        array(\n            'message' =&gt; 'The e-mail is not valid'\n        )\n    )\n);\n\n$messages = $validation-&gt;validate($_POST);\nif (count($messages)) {\n    foreach ($messages as $message) {\n        echo $message, '&lt;br&gt;';\n    }\n}\n</pre> <p>The loosely-coupled design of this component allows you to create your own validators along with the ones provided by the framework.</p>  <h2 id=\"initializing-validation\">Initializing Validation</h2> <p>Validation chains can be initialized in a direct manner by just adding validators to the <a class=\"reference internal\" href=\"../api/phalcon_validation\"><em>Phalcon\\Validation</em></a> object. You can put your validations in a separate file for better re-use code and organization:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Email;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\n\nclass MyValidation extends Validation\n{\n    public function initialize()\n    {\n        $this-&gt;add(\n            'name',\n            new PresenceOf(\n                array(\n                    'message' =&gt; 'The name is required'\n                )\n            )\n        );\n\n        $this-&gt;add(\n            'email',\n            new PresenceOf(\n                array(\n                    'message' =&gt; 'The e-mail is required'\n                )\n            )\n        );\n\n        $this-&gt;add(\n            'email',\n            new Email(\n                array(\n                    'message' =&gt; 'The e-mail is not valid'\n                )\n            )\n        );\n    }\n}\n</pre> <p>Then initialize and use your own validator:</p> <pre class=\"highlight-php\" data-language=\"php\">$validation = new MyValidation();\n\n$messages = $validation-&gt;validate($_POST);\nif (count($messages)) {\n    foreach ($messages as $message) {\n        echo $message, '&lt;br&gt;';\n    }\n}\n</pre>   <h2 id=\"validators\">Validators</h2> <p>Phalcon exposes a set of built-in validators for this component:</p> <table class=\"docutils\"> <colgroup> <col width=\"6%\"> <col width=\"18%\"> <col width=\"49%\"> <col width=\"28%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\" colspan=\"2\">Explanation</th> <th class=\"head\">Example</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>PresenceOf</td> <td colspan=\"2\">Validates that a field’s value is not null or empty string.</td> <td><a class=\"reference internal\" href=\"../api/phalcon_validation_validator_presenceof\"><em>Example</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Identical</td> <td colspan=\"2\">Validates that a field’s value is the same as a specified value</td> <td><a class=\"reference internal\" href=\"../api/phalcon_validation_validator_identical\"><em>Example</em></a></td> </tr> <tr class=\"row-even\">\n<td>Email</td> <td colspan=\"2\">Validates that field contains a valid email format</td> <td><a class=\"reference internal\" href=\"../api/phalcon_validation_validator_email\"><em>Example</em></a></td> </tr> <tr class=\"row-odd\">\n<td>ExclusionIn</td> <td colspan=\"2\">Validates that a value is not within a list of possible values</td> <td><a class=\"reference internal\" href=\"../api/phalcon_validation_validator_exclusionin\"><em>Example</em></a></td> </tr> <tr class=\"row-even\">\n<td>InclusionIn</td> <td colspan=\"2\">Validates that a value is within a list of possible values</td> <td><a class=\"reference internal\" href=\"../api/phalcon_validation_validator_inclusionin\"><em>Example</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Regex</td> <td colspan=\"2\">Validates that the value of a field matches a regular expression</td> <td><a class=\"reference internal\" href=\"../api/phalcon_validation_validator_regex\"><em>Example</em></a></td> </tr> <tr class=\"row-even\">\n<td>StringLength</td> <td colspan=\"2\">Validates the length of a string</td> <td><a class=\"reference internal\" href=\"../api/phalcon_validation_validator_stringlength\"><em>Example</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Between</td> <td colspan=\"2\">Validates that a value is between two values</td> <td><a class=\"reference internal\" href=\"../api/phalcon_validation_validator_between\"><em>Example</em></a></td> </tr> <tr class=\"row-even\">\n<td>Confirmation</td> <td colspan=\"2\">Validates that a value is the same as another present in the data</td> <td><a class=\"reference internal\" href=\"../api/phalcon_validation_validator_confirmation\"><em>Example</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Url</td> <td colspan=\"2\">Validates that field contains a valid URL</td> <td><a class=\"reference internal\" href=\"../api/phalcon_validation_validator_url\"><em>Example</em></a></td> </tr> <tr class=\"row-even\">\n<td>CreditCard</td> <td colspan=\"2\">Validates a credit card number</td> <td><a class=\"reference internal\" href=\"../api/phalcon_validation_validator_creditcard\"><em>Example</em></a></td> </tr> </tbody> </table> <p>The following example explains how to create additional validators for this component:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation;\nuse Phalcon\\Validation\\Message;\nuse Phalcon\\Validation\\Validator;\n\nclass IpValidator extends Validator\n{\n    /**\n     * Executes the validation\n     *\n     * @param Phalcon\\Validation $validator\n     * @param string $attribute\n     * @return boolean\n     */\n    public function validate(Validation $validator, $attribute)\n    {\n        $value = $validator-&gt;getValue($attribute);\n\n        if (!filter_var($value, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 | FILTER_FLAG_IPV6)) {\n\n            $message = $this-&gt;getOption('message');\n            if (!$message) {\n                $message = 'The IP is not valid';\n            }\n\n            $validator-&gt;appendMessage(new Message($message, $attribute, 'Ip'));\n\n            return false;\n        }\n\n        return true;\n    }\n}\n</pre> <p>It is important that validators return a valid boolean value indicating if the validation was successful or not.</p>   <h2 id=\"validation-messages\">Validation Messages</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_validation\"><em>Phalcon\\Validation</em></a> has a messaging subsystem that provides a flexible way to output or store the validation messages generated during the validation processes.</p> <p>Each message consists of an instance of the class <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_message\"><em>Phalcon\\Validation\\Message</em></a>. The set of messages generated can be retrieved with the getMessages() method. Each message provides extended information like the attribute that generated the message or the message type:</p> <pre class=\"highlight-php\" data-language=\"php\">$messages = $validation-&gt;validate();\nif (count($messages)) {\n    foreach ($validation-&gt;getMessages() as $message) {\n        echo \"Message: \", $message-&gt;getMessage(), \"\\n\";\n        echo \"Field: \", $message-&gt;getField(), \"\\n\";\n        echo \"Type: \", $message-&gt;getType(), \"\\n\";\n    }\n}\n</pre> <p>The getMessages() method can be overridden in a validation class to replace/translate the default messages generated by the validators:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation;\n\nclass MyValidation extends Validation\n{\n    public function initialize()\n    {\n        // ...\n    }\n\n    public function getMessages()\n    {\n        $messages = array();\n        foreach (parent::getMessages() as $message) {\n            switch ($message-&gt;getType()) {\n                case 'PresenceOf':\n                    $messages[] = 'The field ' . $message-&gt;getField() . ' is mandatory';\n                    break;\n            }\n        }\n\n        return $messages;\n    }\n}\n</pre> <p>Or you can pass a ‘message’ parameter to change the default message in each validator:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\Email;\n\n$validation-&gt;add(\n    'email',\n    new Email(\n        array(\n            'message' =&gt; 'The e-mail is not valid'\n        )\n    )\n);\n</pre> <p>By default, ‘getMessages’ returns all the messages generated during validation. You can filter messages for a specific field using the ‘filter’ method:</p> <pre class=\"highlight-php\" data-language=\"php\">$messages = $validation-&gt;validate();\nif (count($messages)) {\n    // Filter only the messages generated for the field 'name'\n    foreach ($validation-&gt;getMessages()-&gt;filter('name') as $message) {\n        echo $message;\n    }\n}\n</pre>   <h2 id=\"filtering-of-data\">Filtering of Data</h2> <p>Data can be filtered prior to the validation ensuring that malicious or incorrect data is not validated.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation;\n\n$validation = new Validation();\n\n$validation\n    -&gt;add('name', new PresenceOf(array(\n        'message' =&gt; 'The name is required'\n    )))\n    -&gt;add('email', new PresenceOf(array(\n        'message' =&gt; 'The email is required'\n    )));\n\n// Filter any extra space\n$validation-&gt;setFilters('name', 'trim');\n$validation-&gt;setFilters('email', 'trim');\n</pre> <p>Filtering and sanitizing is performed using the <a class=\"reference internal\" href=\"filter\"><em>filter</em></a>: component. You can add more filters to this component or use the built-in ones.</p>   <h2 id=\"validation-events\">Validation Events</h2> <p>When validations are organized in classes, you can implement the ‘beforeValidation’ and ‘afterValidation’ methods to perform additional checks, filters, clean-up, etc. If the ‘beforeValidation’ method returns false the validation is automatically cancelled:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation;\n\nclass LoginValidation extends Validation\n{\n    public function initialize()\n    {\n        // ...\n    }\n\n    /**\n     * Executed before validation\n     *\n     * @param array $data\n     * @param object $entity\n     * @param Phalcon\\Validation\\Message\\Group $messages\n     * @return bool\n     */\n    public function beforeValidation($data, $entity, $messages)\n    {\n        if ($this-&gt;request-&gt;getHttpHost() != 'admin.mydomain.com') {\n            $messages-&gt;appendMessage(new Message('Only users can log on in the administration domain'));\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Executed after validation\n     *\n     * @param array $data\n     * @param object $entity\n     * @param Phalcon\\Validation\\Message\\Group $messages\n     */\n    public function afterValidation($data, $entity, $messages)\n    {\n        // ... Add additional messages or perform more validations\n    }\n}\n</pre>   <h2 id=\"cancelling-validations\">Cancelling Validations</h2> <p>By default all validators assigned to a field are tested regardless if one of them have failed or not. You can change this behavior by telling the validation component which validator may stop the validation:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Regex;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\n\n$validation = new Validation();\n\n$validation\n    -&gt;add('telephone', new PresenceOf(array(\n        'message'      =&gt; 'The telephone is required',\n        'cancelOnFail' =&gt; true\n    )))\n    -&gt;add('telephone', new Regex(array(\n        'message' =&gt; 'The telephone is required',\n        'pattern' =&gt; '/\\+44 [0-9]+/'\n    )))\n    -&gt;add('telephone', new StringLength(array(\n        'messageMinimum' =&gt; 'The telephone is too short',\n        'min'            =&gt; 2\n    )));\n</pre> <p>The first validator has the option ‘cancelOnFail’ with a value of true, therefore if that validator fails the remaining validators in the chain are not executed.</p> <p>If you are creating custom validators you can dynamically stop the validation chain by setting the ‘cancelOnFail’ option:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation;\nuse Phalcon\\Validation\\Message;\nuse Phalcon\\Validation\\Validator;\n\nclass MyValidator extends Validator\n{\n    /**\n     * Executes the validation\n     *\n     * @param Phalcon\\Validation $validator\n     * @param string $attribute\n     * @return boolean\n     */\n    public function validate(Validation $validator, $attribute)\n    {\n        // If the attribute value is name we must stop the chain\n        if ($attribute == 'name') {\n            $validator-&gt;setOption('cancelOnFail', true);\n        }\n\n        // ...\n    }\n}\n</pre>   <h2 id=\"avoid-validate-empty-values\">Avoid validate empty values</h2> <p>You can pass the option ‘allowEmpty’ to all the built-in validators to avoid the validation to be performed if an empty value is passed:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Regex;\n\n$validation = new Validation();\n\n$validation\n    -&gt;add('telephone', new Regex(array(\n        'message'    =&gt; 'The telephone is required',\n        'pattern'    =&gt; '/\\+44 [0-9]+/',\n        'allowEmpty' =&gt; true\n    )));\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/validation.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/validation.html</a>\n  </p>\n</div>\n","reference/escaper":"<h1 id=\"contextual-escaping\">Contextual Escaping</h1> <p>Websites and web applications are vulnerable to <a class=\"reference external\" href=\"https://www.owasp.org/index.php/XSS\">XSS</a> attacks and although PHP provides escaping functionality, in some contexts it is not sufficient/appropriate. <a class=\"reference internal\" href=\"../api/phalcon_escaper\"><em>Phalcon\\Escaper</em></a> provides contextual escaping and is written in Zephir, providing the minimal overhead when escaping different kinds of texts.</p> <p>We designed this component based on the <a class=\"reference external\" href=\"https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\">XSS (Cross Site Scripting) Prevention Cheat Sheet</a> created by the <a class=\"reference external\" href=\"https://www.owasp.org\">OWASP</a>.</p> <p>Additionally, this component relies on <a class=\"reference external\" href=\"http://php.net/manual/en/book.mbstring.php\">mbstring</a> to support almost any charset.</p> <p>To illustrate how this component works and why it is important, consider the following example:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;?php\n\n    // Document title with malicious extra HTML tags\n    $maliciousTitle = '&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;';\n\n    // Malicious CSS class name\n    $className      = ';`(';\n\n    // Malicious CSS font name\n    $fontName       = 'Verdana\"&lt;/style&gt;';\n\n    // Malicious Javascript text\n    $javascriptText = \"';&lt;/script&gt;Hello\";\n\n    // Create an escaper\n    $e              = new Phalcon\\Escaper();\n\n?&gt;\n\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\n\n    &lt;title&gt;&lt;?php echo $e-&gt;escapeHtml($maliciousTitle); ?&gt;&lt;/title&gt;\n\n    &lt;style type=\"text/css\"&gt;\n    .&lt;?php echo $e-&gt;escapeCss($className); ?&gt; {\n        font-family: \"&lt;?php echo $e-&gt;escapeCss($fontName); ?&gt;\";\n        color: red;\n    }\n    &lt;/style&gt;\n\n&lt;/head&gt;\n\n&lt;body&gt;\n\n    &lt;div class='&lt;?php echo $e-&gt;escapeHtmlAttr($className); ?&gt;'&gt;hello&lt;/div&gt;\n\n    &lt;script&gt;var some = '&lt;?php echo $e-&gt;escapeJs($javascriptText); ?&gt;'&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>Which produces the following:</p> <div class=\"figure align-center\"> <img alt=\"../_images/escape.jpeg\" src=\"https://docs.phalconphp.com/en/latest/_images/escape.jpeg\"> </div> <p>Every text was escaped according to its context. Use the appropriate context is important to avoid XSS attacks.</p>  <h2 id=\"escaping-html\">Escaping HTML</h2> <p>The most common situation when inserting unsafe data is between HTML tags:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;div class=\"comments\"&gt;&lt;!-- Escape untrusted data here! --&gt;&lt;/div&gt;\n</pre> <p>You can escape those data using the <code class=\"code docutils literal\"><span class=\"pre\">escapeHtml</span></code> method:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;div class=\"comments\"&gt;&lt;?php echo $e-&gt;escapeHtml('&gt;&lt;/div&gt;&lt;h1&gt;myattack&lt;/h1&gt;'); ?&gt;&lt;/div&gt;\n</pre> <p>Which produces:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;div class=\"comments\"&gt;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h1&amp;gt;myattack&amp;lt;/h1&amp;gt;&lt;/div&gt;\n</pre>   <h2 id=\"escaping-html-attributes\">Escaping HTML Attributes</h2> <p>Escaping HTML attributes is different from escaping HTML content. The escaper works by changing every non-alphanumeric character to the form. This kind of escaping is intended to most simpler attributes excluding complex ones like ‘href’ or ‘url’:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;table width=\"Escape untrusted data here!\"&gt;&lt;tr&gt;&lt;td&gt;Hello&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\n</pre> <p>You can escape a HTML attribute by using the <code class=\"code docutils literal\"><span class=\"pre\">escapeHtmlAttr</span></code> method:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;table width=\"&lt;?php echo $e-&gt;escapeHtmlAttr('\"&gt;&lt;h1&gt;Hello&lt;/table'); ?&gt;\"&gt;&lt;tr&gt;&lt;td&gt;Hello&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\n</pre> <p>Which produces:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;table width=\"&amp;#x22;&amp;#x3e;&amp;#x3c;h1&amp;#x3e;Hello&amp;#x3c;&amp;#x2f;table\"&gt;&lt;tr&gt;&lt;td&gt;Hello&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\n</pre>   <h2 id=\"escaping-urls\">Escaping URLs</h2> <p>Some HTML attributes like ‘href’ or ‘url’ need to be escaped differently:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;a href=\"Escape untrusted data here!\"&gt;Some link&lt;/a&gt;\n</pre> <p>You can escape a HTML attribute by using the <code class=\"code docutils literal\"><span class=\"pre\">escapeUrl</span></code> method:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;a href=\"&lt;?php echo $e-&gt;escapeUrl('\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;a href=\"#'); ?&gt;\"&gt;Some link&lt;/a&gt;\n</pre> <p>Which produces:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;a href=\"%22%3E%3Cscript%3Ealert%281%29%3C%2Fscript%3E%3Ca%20href%3D%22%23\"&gt;Some link&lt;/a&gt;\n</pre>   <h2 id=\"escaping-css\">Escaping CSS</h2> <p>CSS identifiers/values can be escaped too:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;a style=\"color: Escape untrusted data here\"&gt;Some link&lt;/a&gt;\n</pre> <p>You can escape a CSS identifiers/value by using the <code class=\"code docutils literal\"><span class=\"pre\">escapeCss</span></code> method:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;a style=\"color: &lt;?php echo $e-&gt;escapeCss('\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;a href=\"#'); ?&gt;\"&gt;Some link&lt;/a&gt;\n</pre> <p>Which produces:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;a style=\"color: \\22 \\3e \\3c script\\3e alert\\28 1\\29 \\3c \\2f script\\3e \\3c a\\20 href\\3d \\22 \\23 \"&gt;Some link&lt;/a&gt;\n</pre>   <h2 id=\"escaping-javascript\">Escaping JavaScript</h2> <p>Strings to be inserted into JavaScript code also must be properly escaped:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;script&gt;document.title = 'Escape untrusted data here'&lt;/script&gt;\n</pre> <p>You can escape JavaScript code by using the <code class=\"code docutils literal\"><span class=\"pre\">escapeJs</span></code> method:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;script&gt;document.title = '&lt;?php echo $e-&gt;escapeJs(\"'; alert(100); var x='\"); ?&gt;'&lt;/script&gt;\n</pre> <pre class=\"highlight-html\" data-language=\"html\">&lt;script&gt;document.title = '\\x27; alert(100); var x\\x3d\\x27'&lt;/script&gt;\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/escaper.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/escaper.html</a>\n  </p>\n</div>\n","reference/config":"<h1 id=\"reading-configurations\">Reading Configurations</h1> <p><a class=\"reference internal\" href=\"../api/phalcon_config\"><em>Phalcon\\Config</em></a> is a component used to read configuration files of various formats (using adapters) into PHP objects for use in an application.</p>  <h2 id=\"file-adapters\">File Adapters</h2> <p>The adapters available are:</p> <table class=\"docutils\"> <colgroup> <col width=\"10%\"> <col width=\"90%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">File Type</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Ini</td> <td>Uses INI files to store settings. Internally the adapter uses the PHP function parse_ini_file.</td> </tr> <tr class=\"row-odd\">\n<td>Array</td> <td>Uses PHP multidimensional arrays to store settings. This adapter offers the best performance.</td> </tr> </tbody> </table>   <h2 id=\"native-arrays\">Native Arrays</h2> <p>The next example shows how to convert native arrays into <a class=\"reference internal\" href=\"../api/phalcon_config\"><em>Phalcon\\Config</em></a> objects. This option offers the best performance since no files are read during this request.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Config;\n\n$settings = array(\n    \"database\" =&gt; array(\n        \"adapter\"  =&gt; \"Mysql\",\n        \"host\"     =&gt; \"localhost\",\n        \"username\" =&gt; \"scott\",\n        \"password\" =&gt; \"cheetah\",\n        \"dbname\"   =&gt; \"test_db\"\n    ),\n     \"app\" =&gt; array(\n        \"controllersDir\" =&gt; \"../app/controllers/\",\n        \"modelsDir\"      =&gt; \"../app/models/\",\n        \"viewsDir\"       =&gt; \"../app/views/\"\n    ),\n    \"mysetting\" =&gt; \"the-value\"\n);\n\n$config = new Config($settings);\n\necho $config-&gt;app-&gt;controllersDir, \"\\n\";\necho $config-&gt;database-&gt;username, \"\\n\";\necho $config-&gt;mysetting, \"\\n\";\n</pre> <p>If you want to better organize your project you can save the array in another file and then read it.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Config;\n\nrequire \"config/config.php\";\n$config = new Config($settings);\n</pre>   <h2 id=\"reading-ini-files\">Reading INI Files</h2> <p>Ini files are a common way to store settings. <a class=\"reference internal\" href=\"../api/phalcon_config\"><em>Phalcon\\Config</em></a> uses the optimized PHP function parse_ini_file to read these files. Files sections are parsed into sub-settings for easy access.</p> <pre class=\"highlight-ini\" data-language=\"ini\">[database]\nadapter  = Mysql\nhost     = localhost\nusername = scott\npassword = cheetah\ndbname   = test_db\n\n[phalcon]\ncontrollersDir = \"../app/controllers/\"\nmodelsDir      = \"../app/models/\"\nviewsDir       = \"../app/views/\"\n\n[models]\nmetadata.adapter  = \"Memory\"\n</pre> <p>You can read the file as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Config\\Adapter\\Ini as ConfigIni;\n\n$config = new ConfigIni(\"path/config.ini\");\n\necho $config-&gt;phalcon-&gt;controllersDir, \"\\n\";\necho $config-&gt;database-&gt;username, \"\\n\";\necho $config-&gt;models-&gt;metadata-&gt;adapter, \"\\n\";\n</pre>   <h2 id=\"merging-configurations\">Merging Configurations</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_config\"><em>Phalcon\\Config</em></a> can recursively merge the properties of one configuration object into another. New properties are added and existing properties are updated.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Config;\n\n$config = new Config(\n    array(\n        'database' =&gt; array(\n            'host'   =&gt; 'localhost',\n            'dbname' =&gt; 'test_db'\n        ),\n        'debug' =&gt; 1\n    )\n);\n\n$config2 = new Config(\n    array(\n        'database' =&gt; array(\n            'dbname'   =&gt; 'production_db',\n            'username' =&gt; 'scott',\n            'password' =&gt; 'secret'\n        ),\n        'logging' =&gt; 1\n    )\n);\n\n$config-&gt;merge($config2);\n\nprint_r($config);\n</pre> <p>The above code produces the following:</p> <pre class=\"highlight-html\" data-language=\"html\">Phalcon\\Config Object\n(\n    [database] =&gt; Phalcon\\Config Object\n        (\n            [host] =&gt; localhost\n            [dbname]   =&gt; production_db\n            [username] =&gt; scott\n            [password] =&gt; secret\n        )\n    [debug] =&gt; 1\n    [logging] =&gt; 1\n)\n</pre> <p>There are more adapters available for this components in the <a class=\"reference external\" href=\"https://github.com/phalcon/incubator\">Phalcon Incubator</a></p>   <h2 id=\"injecting-configuration-dependency\">Injecting Configuration Dependency</h2> <p>You can inject configuration dependency to controller allowing us to use <a class=\"reference internal\" href=\"../api/phalcon_config\"><em>Phalcon\\Config</em></a> inside <a class=\"reference internal\" href=\"../api/phalcon_mvc_controller\"><em>Phalcon\\Mvc\\Controller</em></a>. To be able to do that, add following code inside your dependency injector script.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Config;\n\n// Create a DI\n$di = new FactoryDefault();\n\n$di-&gt;set('config', function () {\n    $configData = require 'config/config.php';\n    return new Config($configData);\n});\n</pre> <p>Now in your controller you can access your configuration by using dependency injection feature using name <cite>config</cite> like following code:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass MyController extends Controller\n{\n    private function getDatabaseName()\n    {\n         return $this-&gt;config-&gt;database-&gt;dbname;\n    }\n}\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/config.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/config.html</a>\n  </p>\n</div>\n","reference/pagination":"<h1 id=\"pagination\">Pagination</h1> <p>The process of pagination takes place when we need to present big groups of arbitrary data gradually. <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Paginator</span></code> offers a fast and convenient way to split these sets of data into browsable pages.</p>  <h2 id=\"data-adapters\">Data Adapters</h2> <p>This component makes use of adapters to encapsulate different sources of data:</p> <table class=\"docutils\"> <colgroup> <col width=\"24%\"> <col width=\"76%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Adapter</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../api/phalcon_paginator_adapter_nativearray\"><em>NativeArray</em></a></td> <td>Use a PHP array as source data</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"../api/phalcon_paginator_adapter_model\"><em>Model</em></a></td> <td>Use a <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_resultset\"><em>Phalcon\\Mvc\\Model\\Resultset</em></a> object as source data. Since PDO doesn’t support scrollable cursors this adapter shouldn’t be used to paginate a large number of records</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"../api/phalcon_paginator_adapter_querybuilder\"><em>QueryBuilder</em></a></td> <td>Use a <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_query_builder\"><em>Phalcon\\Mvc\\Model\\Query\\Builder</em></a> object as source data</td> </tr> </tbody> </table>   <h2 id=\"examples\">Examples</h2> <p>In the example below, the paginator will use the result of a query from a model as its source data, and limit the displayed data to 10 records per page:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Paginator\\Adapter\\Model as PaginatorModel;\n\n// Current page to show\n// In a controller this can be:\n// $this-&gt;request-&gt;getQuery('page', 'int'); // GET\n// $this-&gt;request-&gt;getPost('page', 'int'); // POST\n$currentPage = (int) $_GET[\"page\"];\n\n// The data set to paginate\n$robots      = Robots::find();\n\n// Create a Model paginator, show 10 rows by page starting from $currentPage\n$paginator   = new PaginatorModel(\n    array(\n        \"data\"  =&gt; $robots,\n        \"limit\" =&gt; 10,\n        \"page\"  =&gt; $currentPage\n    )\n);\n\n// Get the paginated results\n$page = $paginator-&gt;getPaginate();\n</pre> <p>The <code class=\"code docutils literal\"><span class=\"pre\">$currentPage</span></code> variable controls the page to be displayed. The <code class=\"code docutils literal\"><span class=\"pre\">$paginator-&gt;getPaginate()</span></code> returns a <code class=\"code docutils literal\"><span class=\"pre\">$page</span></code> object that contains the paginated data. It can be used for generating the pagination:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;Id&lt;/th&gt;\n        &lt;th&gt;Name&lt;/th&gt;\n        &lt;th&gt;Type&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;?php foreach ($page-&gt;items as $item) { ?&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;?php echo $item-&gt;id; ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo $item-&gt;name; ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo $item-&gt;type; ?&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;?php } ?&gt;\n&lt;/table&gt;\n</pre> <p>The <code class=\"code docutils literal\"><span class=\"pre\">$page</span></code> object also contains navigation data:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;a href=\"/robots/search\"&gt;First&lt;/a&gt;\n&lt;a href=\"/robots/search?page=&lt;?= $page-&gt;before; ?&gt;\"&gt;Previous&lt;/a&gt;\n&lt;a href=\"/robots/search?page=&lt;?= $page-&gt;next; ?&gt;\"&gt;Next&lt;/a&gt;\n&lt;a href=\"/robots/search?page=&lt;?= $page-&gt;last; ?&gt;\"&gt;Last&lt;/a&gt;\n\n&lt;?php echo \"You are in page \", $page-&gt;current, \" of \", $page-&gt;total_pages; ?&gt;\n</pre>   <h2 id=\"adapters-usage\">Adapters Usage</h2> <p>An example of the source data that must be used for each adapter:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Paginator\\Adapter\\Model as PaginatorModel;\nuse Phalcon\\Paginator\\Adapter\\NativeArray as PaginatorArray;\nuse Phalcon\\Paginator\\Adapter\\QueryBuilder as PaginatorQueryBuilder;\n\n// Passing a resultset as data\n$paginator = new PaginatorModel(\n    array(\n        \"data\"  =&gt; Products::find(),\n        \"limit\" =&gt; 10,\n        \"page\"  =&gt; $currentPage\n    )\n);\n\n// Passing an array as data\n$paginator = new PaginatorArray(\n    array(\n        \"data\"  =&gt; array(\n            array('id' =&gt; 1, 'name' =&gt; 'Artichoke'),\n            array('id' =&gt; 2, 'name' =&gt; 'Carrots'),\n            array('id' =&gt; 3, 'name' =&gt; 'Beet'),\n            array('id' =&gt; 4, 'name' =&gt; 'Lettuce'),\n            array('id' =&gt; 5, 'name' =&gt; '')\n        ),\n        \"limit\" =&gt; 2,\n        \"page\"  =&gt; $currentPage\n    )\n);\n\n// Passing a QueryBuilder as data\n\n$builder = $this-&gt;modelsManager-&gt;createBuilder()\n    -&gt;columns('id, name')\n    -&gt;from('Robots')\n    -&gt;orderBy('name');\n\n$paginator = new PaginatorQueryBuilder(\n    array(\n        \"builder\" =&gt; $builder,\n        \"limit\"   =&gt; 20,\n        \"page\"    =&gt; 1\n    )\n);\n</pre>   <h2 id=\"page-attributes\">Page Attributes</h2> <p>The <code class=\"code docutils literal\"><span class=\"pre\">$page</span></code> object has the following attributes:</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Attribute</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>items</td> <td>The set of records to be displayed at the current page</td> </tr> <tr class=\"row-odd\">\n<td>current</td> <td>The current page</td> </tr> <tr class=\"row-even\">\n<td>before</td> <td>The previous page to the current one</td> </tr> <tr class=\"row-odd\">\n<td>next</td> <td>The next page to the current one</td> </tr> <tr class=\"row-even\">\n<td>last</td> <td>The last page in the set of records</td> </tr> <tr class=\"row-odd\">\n<td>total_pages</td> <td>The number of pages</td> </tr> <tr class=\"row-even\">\n<td>total_items</td> <td>The number of items in the source data</td> </tr> </tbody> </table>   <h2 id=\"implementing-your-own-adapters\">Implementing your own adapters</h2> <p>The <a class=\"reference internal\" href=\"../api/phalcon_paginator_adapterinterface\"><em>Phalcon\\Paginator\\AdapterInterface</em></a> interface must be implemented in order to create your own paginator adapters or extend the existing ones:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Paginator\\AdapterInterface as PaginatorInterface;\n\nclass MyPaginator implements PaginatorInterface\n{\n    /**\n     * Adapter constructor\n     *\n     * @param array $config\n     */\n    public function __construct($config);\n\n    /**\n     * Set the current page number\n     *\n     * @param int $page\n     */\n    public function setCurrentPage($page);\n\n    /**\n     * Returns a slice of the resultset to show in the pagination\n     *\n     * @return stdClass\n     */\n    public function getPaginate();\n}\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/pagination.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/pagination.html</a>\n  </p>\n</div>\n","reference/crypt":"<h1 id=\"encryption-decryption\">Encryption/Decryption</h1> <p>Phalcon provides encryption facilities via the <a class=\"reference internal\" href=\"../api/phalcon_crypt\"><em>Phalcon\\Crypt</em></a> component. This class offers simple object-oriented wrappers to the <a class=\"reference external\" href=\"http://www.php.net/manual/en/book.openssl.php\">openssl</a> PHP’s encryption library.</p> <p>By default, this component provides secure encryption using AES-256-CFB.</p> <blockquote class=\"highlights\"> <div>You must use a key length corresponding to the current algorithm. For the algorithm used by default it is 32 bytes.</div>\n</blockquote>  <h2 id=\"basic-usage\">Basic Usage</h2> <p>This component is designed to provide a very simple usage:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Crypt;\n\n// Create an instance\n$crypt     = new Crypt();\n\n$key       = 'This is a secret key (32 bytes).';\n$text      = 'This is the text that you want to encrypt.';\n\n$encrypted = $crypt-&gt;encrypt($text, $key);\n\necho $crypt-&gt;decrypt($encrypted, $key);\n</pre> <p>You can use the same instance to encrypt/decrypt several times:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Crypt;\n\n// Create an instance\n$crypt = new Crypt();\n\n$texts = array(\n    'my-key'    =&gt; 'This is a secret text',\n    'other-key' =&gt; 'This is a very secret'\n);\n\nforeach ($texts as $key =&gt; $text) {\n\n    // Perform the encryption\n    $encrypted = $crypt-&gt;encrypt($text, $key);\n\n    // Now decrypt\n    echo $crypt-&gt;decrypt($encrypted, $key);\n}\n</pre>   <h2 id=\"encryption-options\">Encryption Options</h2> <p>The following options are available to change the encryption behavior:</p> <table class=\"docutils\"> <colgroup> <col width=\"11%\"> <col width=\"89%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Cipher</td> <td>The cipher is one of the encryption algorithms supported by openssl. You can see a list <a class=\"reference external\" href=\"http://www.php.net/manual/en/function.openssl-get-cipher-methods.php\">here</a>\n</td> </tr> </tbody> </table> <p>Example:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Crypt;\n\n// Create an instance\n$crypt = new Crypt();\n\n// Use blowfish\n$crypt-&gt;setCipher('bf-cbc');\n\n$key   = 'le password';\n$text  = 'This is a secret text';\n\necho $crypt-&gt;encrypt($text, $key);\n</pre>   <h2 id=\"base64-support\">Base64 Support</h2> <p>In order for encryption to be properly transmitted (emails) or displayed (browsers) <a class=\"reference external\" href=\"http://www.php.net/manual/en/function.base64-encode.php\">base64</a> encoding is usually applied to encrypted texts:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Crypt;\n\n// Create an instance\n$crypt   = new Crypt();\n\n$key     = 'le password';\n$text    = 'This is a secret text';\n\n$encrypt = $crypt-&gt;encryptBase64($text, $key);\n\necho $crypt-&gt;decryptBase64($encrypt, $key);\n</pre>   <h2 id=\"setting-up-an-encryption-service\">Setting up an Encryption service</h2> <p>You can set up the encryption component in the services container in order to use it from any part of the application:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Crypt;\n\n$di-&gt;set('crypt', function () {\n\n    $crypt = new Crypt();\n\n    // Set a global encryption key\n    $crypt-&gt;setKey('%31.1e$i86e$f!8jz');\n\n    return $crypt;\n}, true);\n</pre> <p>Then, for example, in a controller you can use it as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass SecretsController extends Controller\n{\n    public function saveAction()\n    {\n        $secret = new Secrets();\n\n        $text = $this-&gt;request-&gt;getPost('text');\n\n        $secret-&gt;content = $this-&gt;crypt-&gt;encrypt($text);\n\n        if ($secret-&gt;save()) {\n            $this-&gt;flash-&gt;success('Secret was successfully created!');\n        }\n    }\n}\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/crypt.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/crypt.html</a>\n  </p>\n</div>\n","reference/models":"<h1 id=\"working-with-models\">Working with Models</h1> <p>A model represents the information (data) of the application and the rules to manipulate that data. Models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application’s business logic will be concentrated in the models.</p> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> is the base for all models in a Phalcon application. It provides database independence, basic CRUD functionality, advanced finding capabilities, and the ability to relate models to one another, among other services. <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> avoids the need of having to use SQL statements because it translates methods dynamically to the respective database engine operations.</p> <blockquote class=\"highlights\"> <div>Models are intended to work on a database high layer of abstraction. If you need to work with databases at a lower level check out the <a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a> component documentation.</div>\n</blockquote>  <h2 id=\"creating-models\">Creating Models</h2> <p>A model is a class that extends from <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a>. It must be placed in the models directory. A model file must contain a single class; its class name should be in camel case notation:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n\n}\n</pre> <p>The above example shows the implementation of the “Robots” model. Note that the class Robots inherits from <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a>. This component provides a great deal of functionality to models that inherit it, including basic database CRUD (Create, Read, Update, Delete) operations, data validation, as well as sophisticated search support and the ability to relate multiple models with each other.</p> <blockquote class=\"highlights\"> <div>If you’re using PHP 5.4/5.5 it is recommended you declare each column that makes part of the model in order to save memory and reduce the memory allocation.</div>\n</blockquote> <p>By default, the model “Robots” will refer to the table “robots”. If you want to manually specify another name for the mapping table, you can use the <code class=\"code docutils literal\"><span class=\"pre\">getSource()</span></code> method:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function getSource()\n    {\n        return \"the_robots\";\n    }\n}\n</pre> <p>The model Robots now maps to “the_robots” table. The <code class=\"code docutils literal\"><span class=\"pre\">initialize()</span></code> method aids in setting up the model with a custom behavior i.e. a different table. The <code class=\"code docutils literal\"><span class=\"pre\">initialize()</span></code> method is only called once during the request.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;setSource(\"the_robots\");\n    }\n}\n</pre> <p>The <code class=\"code docutils literal\"><span class=\"pre\">initialize()</span></code> method is only called once during the request, it’s intended to perform initializations that apply for all instances of the model created within the application. If you want to perform initialization tasks for every instance created you can ‘onConstruct’:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function onConstruct()\n    {\n        // ...\n    }\n}\n</pre>  <h3 id=\"public-properties-vs-setters-getters\">Public properties vs. Setters/Getters</h3> <p>Models can be implemented with properties of public scope, meaning that each property can be read/updated from any part of the code that has instantiated that model class without any restrictions:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $price;\n}\n</pre> <p>By using getters and setters you can control which properties are visible publicly perform various transformations to the data (which would be impossible otherwise) and also add validation rules to the data stored in the object:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    protected $id;\n\n    protected $name;\n\n    protected $price;\n\n    public function getId()\n    {\n        return $this-&gt;id;\n    }\n\n    public function setName($name)\n    {\n        // The name is too short?\n        if (strlen($name) &lt; 10) {\n            throw new \\InvalidArgumentException('The name is too short');\n        }\n        $this-&gt;name = $name;\n    }\n\n    public function getName()\n    {\n        return $this-&gt;name;\n    }\n\n    public function setPrice($price)\n    {\n        // Negative prices aren't allowed\n        if ($price &lt; 0) {\n            throw new \\InvalidArgumentException('Price can\\'t be negative');\n        }\n        $this-&gt;price = $price;\n    }\n\n    public function getPrice()\n    {\n        // Convert the value to double before be used\n        return (double) $this-&gt;price;\n    }\n}\n</pre> <p>Public properties provide less complexity in development. However getters/setters can heavily increase the testability, extensibility and maintainability of applications. Developers can decide which strategy is more appropriate for the application they are creating. The ORM is compatible with both schemes of defining properties.</p> <blockquote class=\"highlights\"> <div>Underscores in property names can be problematic when using getters and setters.</div>\n</blockquote> <p>If you use underscores in your property names, you must still use camel case in your getter/setter declarations for use with magic methods. (e.g. $model-&gt;getPropertyName instead of $model-&gt;getProperty_name, $model-&gt;findByPropertyName instead of $model-&gt;findByProperty_name, etc.). As much of the system expects camel case, and underscores are commonly removed, it is recommended to name your properties in the manner shown throughout the documentation. You can use a column map (as described above) to ensure proper mapping of your properties to their database counterparts.</p>   <h3 id=\"models-in-namespaces\">Models in Namespaces</h3> <p>Namespaces can be used to avoid class name collision. The mapped table is taken from the class name, in this case ‘Robots’:</p> <pre class=\"highlight-php\" data-language=\"php\">namespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    // ...\n}\n</pre> <p>Namespaces make part of model names when they are within strings:</p> <pre class=\"highlight-php\" data-language=\"php\">namespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public function initialize()\n    {\n        $this-&gt;hasMany('id', 'Store\\Toys\\RobotsParts', 'robots_id');\n    }\n}\n</pre>    <h2 id=\"understanding-records-to-objects\">Understanding Records To Objects</h2> <p>Every instance of a model represents a row in the table. You can easily access record data by reading object properties. For example, for a table “robots” with the records:</p> <pre class=\"highlight-bash\" data-language=\"bash\">mysql&gt; select * from robots;\n+----+------------+------------+------+\n| id | name       | type       | year |\n+----+------------+------------+------+\n|  1 | Robotina   | mechanical | 1972 |\n|  2 | Astro Boy  | mechanical | 1952 |\n|  3 | Terminator | cyborg     | 2029 |\n+----+------------+------------+------+\n3 rows in set (0.00 sec)\n</pre> <p>You could find a certain record by its primary key and then print its name:</p> <pre class=\"highlight-php\" data-language=\"php\">// Find record with id = 3\n$robot = Robots::findFirst(3);\n\n// Prints \"Terminator\"\necho $robot-&gt;name;\n</pre> <p>Once the record is in memory, you can make modifications to its data and then save changes:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot       = Robots::findFirst(3);\n$robot-&gt;name = \"RoboCop\";\n$robot-&gt;save();\n</pre> <p>As you can see, there is no need to use raw SQL statements. <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> provides high database abstraction for web applications.</p>   <h2 id=\"finding-records\">Finding Records</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> also offers several methods for querying records. The following examples will show you how to query one or more records from a model:</p> <pre class=\"highlight-php\" data-language=\"php\">// How many robots are there?\n$robots = Robots::find();\necho \"There are \", count($robots), \"\\n\";\n\n// How many mechanical robots are there?\n$robots = Robots::find(\"type = 'mechanical'\");\necho \"There are \", count($robots), \"\\n\";\n\n// Get and print virtual robots ordered by name\n$robots = Robots::find(\n    array(\n        \"type = 'virtual'\",\n        \"order\" =&gt; \"name\"\n    )\n);\nforeach ($robots as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n\n// Get first 100 virtual robots ordered by name\n$robots = Robots::find(\n    array(\n        \"type = 'virtual'\",\n        \"order\" =&gt; \"name\",\n        \"limit\" =&gt; 100\n    )\n);\nforeach ($robots as $robot) {\n   echo $robot-&gt;name, \"\\n\";\n}\n</pre> <blockquote class=\"highlights\"> <div>If you want find record by external data (such as user input) or variable data you must use <a class=\"reference internal\" href=\"#binding-parameters\">Binding Parameters</a>.</div>\n</blockquote> <p>You could also use the <code class=\"code docutils literal\"><span class=\"pre\">findFirst()</span></code> method to get only the first record matching the given criteria:</p> <pre class=\"highlight-php\" data-language=\"php\">// What's the first robot in robots table?\n$robot = Robots::findFirst();\necho \"The robot name is \", $robot-&gt;name, \"\\n\";\n\n// What's the first mechanical robot in robots table?\n$robot = Robots::findFirst(\"type = 'mechanical'\");\necho \"The first mechanical robot name is \", $robot-&gt;name, \"\\n\";\n\n// Get first virtual robot ordered by name\n$robot = Robots::findFirst(\n    array(\n        \"type = 'virtual'\",\n        \"order\" =&gt; \"name\"\n    )\n);\necho \"The first virtual robot name is \", $robot-&gt;name, \"\\n\";\n</pre> <p>Both <code class=\"code docutils literal\"><span class=\"pre\">find()</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">findFirst()</span></code> methods accept an associative array specifying the search criteria:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = Robots::findFirst(\n    array(\n        \"type = 'virtual'\",\n        \"order\" =&gt; \"name DESC\",\n        \"limit\" =&gt; 30\n    )\n);\n\n$robots = Robots::find(\n    array(\n        \"conditions\" =&gt; \"type = ?1\",\n        \"bind\"       =&gt; array(1 =&gt; \"virtual\")\n    )\n);\n</pre> <p>The available query options are:</p> <table class=\"docutils\"> <colgroup> <col width=\"4%\"> <col width=\"71%\"> <col width=\"25%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Parameter</th> <th class=\"head\">Description</th> <th class=\"head\">Example</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>conditions</td> <td>Search conditions for the find operation. Is used to extract only those records that fulfill a specified criterion. By default <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> assumes the first parameter are the conditions.</td> <td><code class=\"code docutils literal\"><span class=\"pre\">\"conditions\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">\"name</span> <span class=\"pre\">LIKE</span> <span class=\"pre\">'steve%'\"</span></code></td> </tr> <tr class=\"row-odd\">\n<td>columns</td> <td>Return specific columns instead of the full columns in the model. When using this option an incomplete object is returned</td> <td><code class=\"code docutils literal\"><span class=\"pre\">\"columns\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">\"id,</span> <span class=\"pre\">name\"</span></code></td> </tr> <tr class=\"row-even\">\n<td>bind</td> <td>Bind is used together with options, by replacing placeholders and escaping values thus increasing security</td> <td><code class=\"code docutils literal\"><span class=\"pre\">\"bind\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">array(\"status\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">\"A\",</span> <span class=\"pre\">\"type\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">\"some-time\")</span></code></td> </tr> <tr class=\"row-odd\">\n<td>bindTypes</td> <td>When binding parameters, you can use this parameter to define additional casting to the bound parameters increasing even more the security</td> <td><code class=\"code docutils literal\"><span class=\"pre\">\"bindTypes\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">array(Column::BIND_PARAM_STR,</span> <span class=\"pre\">Column::BIND_PARAM_INT)</span></code></td> </tr> <tr class=\"row-even\">\n<td>order</td> <td>Is used to sort the resultset. Use one or more fields separated by commas.</td> <td><code class=\"code docutils literal\"><span class=\"pre\">\"order\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">\"name</span> <span class=\"pre\">DESC,</span> <span class=\"pre\">status\"</span></code></td> </tr> <tr class=\"row-odd\">\n<td>limit</td> <td>Limit the results of the query to results to certain range</td> <td><code class=\"code docutils literal\"><span class=\"pre\">\"limit\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">10</span></code></td> </tr> <tr class=\"row-even\">\n<td>offset</td> <td>Offset the results of the query by a certain amount</td> <td><code class=\"code docutils literal\"><span class=\"pre\">\"offset\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">5</span></code></td> </tr> <tr class=\"row-odd\">\n<td>group</td> <td>Allows to collect data across multiple records and group the results by one or more columns</td> <td><code class=\"code docutils literal\"><span class=\"pre\">\"group\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">\"name,</span> <span class=\"pre\">status\"</span></code></td> </tr> <tr class=\"row-even\">\n<td>for_update</td> <td>With this option, <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> reads the latest available data, setting exclusive locks on each row it reads</td> <td><code class=\"code docutils literal\"><span class=\"pre\">\"for_update\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">true</span></code></td> </tr> <tr class=\"row-odd\">\n<td>shared_lock</td> <td>With this option, <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> reads the latest available data, setting shared locks on each row it reads</td> <td><code class=\"code docutils literal\"><span class=\"pre\">\"shared_lock\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">true</span></code></td> </tr> <tr class=\"row-even\">\n<td>cache</td> <td>Cache the resultset, reducing the continuous access to the relational system</td> <td><code class=\"code docutils literal\"><span class=\"pre\">\"cache\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">array(\"lifetime\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">3600,</span> <span class=\"pre\">\"key\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">\"my-find-key\")</span></code></td> </tr> <tr class=\"row-odd\">\n<td>hydration</td> <td>Sets the hydration strategy to represent each returned record in the result</td> <td><code class=\"code docutils literal\"><span class=\"pre\">\"hydration\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">Resultset::HYDRATE_OBJECTS</span></code></td> </tr> </tbody> </table> <p>If you prefer, there is also available a way to create queries in an object-oriented way, instead of using an array of parameters:</p> <pre class=\"highlight-php\" data-language=\"php\">$robots = Robots::query()\n    -&gt;where(\"type = :type:\")\n    -&gt;andWhere(\"year &lt; 2000\")\n    -&gt;bind(array(\"type\" =&gt; \"mechanical\"))\n    -&gt;order(\"name\")\n    -&gt;execute();\n</pre> <p>The static method <code class=\"code docutils literal\"><span class=\"pre\">query()</span></code> returns a <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_criteria\"><em>Phalcon\\Mvc\\Model\\Criteria</em></a> object that is friendly with IDE autocompleters.</p> <p>All the queries are internally handled as <a class=\"reference internal\" href=\"phql\"><em>PHQL</em></a> queries. PHQL is a high-level, object-oriented and SQL-like language. This language provide you more features to perform queries like joining other models, define groupings, add aggregations etc.</p> <p>Lastly, there is the <code class=\"code docutils literal\"><span class=\"pre\">findFirstBy&lt;property-name&gt;()</span></code> method. This method expands on the <code class=\"code docutils literal\"><span class=\"pre\">findFirst()</span></code> method mentioned earlier. It allows you to quickly perform a retrieval from a table by using the property name in the method itself and passing it a parameter that contains the data you want to search for in that column. An example is in order, so taking our Robots model mentioned earlier:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $price;\n}\n</pre> <p>We have three properties to work with here. <code class=\"code docutils literal\"><span class=\"pre\">$id</span></code>, <code class=\"code docutils literal\"><span class=\"pre\">$name</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">$price</span></code>. So, let’s say you want to retrieve the first record in the table with the name ‘Terminator’. This could be written like:</p> <pre class=\"highlight-php\" data-language=\"php\">$name  = \"Terminator\";\n$robot = Robots::findFirstByName($name);\n\nif ($robot) {\n    echo \"The first robot with the name \" . $name . \" cost \" . $robot-&gt;price . \".\";\n} else {\n    echo \"There were no robots found in our table with the name \" . $name . \".\";\n}\n</pre> <p>Notice that we used ‘Name’ in the method call and passed the variable <code class=\"code docutils literal\"><span class=\"pre\">$name</span></code> to it, which contains the name we are looking for in our table. Notice also that when we find a match with our query, all the other properties are available to us as well.</p>  <h3 id=\"model-resultsets\">Model Resultsets</h3> <p>While <code class=\"code docutils literal\"><span class=\"pre\">findFirst()</span></code> returns directly an instance of the called class (when there is data to be returned), the <code class=\"code docutils literal\"><span class=\"pre\">find()</span></code> method returns a <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_resultset_simple\"><em>Phalcon\\Mvc\\Model\\Resultset\\Simple</em></a>. This is an object that encapsulates all the functionality a resultset has like traversing, seeking specific records, counting, etc.</p> <p>These objects are more powerful than standard arrays. One of the greatest features of the <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_resultset\"><em>Phalcon\\Mvc\\Model\\Resultset</em></a> is that at any time there is only one record in memory. This greatly helps in memory management especially when working with large amounts of data.</p> <pre class=\"highlight-php\" data-language=\"php\">// Get all robots\n$robots = Robots::find();\n\n// Traversing with a foreach\nforeach ($robots as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n\n// Traversing with a while\n$robots-&gt;rewind();\nwhile ($robots-&gt;valid()) {\n    $robot = $robots-&gt;current();\n    echo $robot-&gt;name, \"\\n\";\n    $robots-&gt;next();\n}\n\n// Count the resultset\necho count($robots);\n\n// Alternative way to count the resultset\necho $robots-&gt;count();\n\n// Move the internal cursor to the third robot\n$robots-&gt;seek(2);\n$robot = $robots-&gt;current();\n\n// Access a robot by its position in the resultset\n$robot = $robots[5];\n\n// Check if there is a record in certain position\nif (isset($robots[3])) {\n   $robot = $robots[3];\n}\n\n// Get the first record in the resultset\n$robot = $robots-&gt;getFirst();\n\n// Get the last record\n$robot = $robots-&gt;getLast();\n</pre> <p>Phalcon’s resultsets emulate scrollable cursors, you can get any row just by accessing its position, or seeking the internal pointer to a specific position. Note that some database systems don’t support scrollable cursors, this forces to re-execute the query in order to rewind the cursor to the beginning and obtain the record at the requested position. Similarly, if a resultset is traversed several times, the query must be executed the same number of times.</p> <p>Storing large query results in memory could consume many resources, because of this, resultsets are obtained from the database in chunks of 32 rows reducing the need for re-execute the request in several cases also saving memory.</p> <p>Note that resultsets can be serialized and stored in a cache backend. <a class=\"reference internal\" href=\"cache\"><em>Phalcon\\Cache</em></a> can help with that task. However, serializing data causes <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> to retrieve all the data from the database in an array, thus consuming more memory while this process takes place.</p> <pre class=\"highlight-php\" data-language=\"php\">// Query all records from model parts\n$parts = Parts::find();\n\n// Store the resultset into a file\nfile_put_contents(\"cache.txt\", serialize($parts));\n\n// Get parts from file\n$parts = unserialize(file_get_contents(\"cache.txt\"));\n\n// Traverse the parts\nforeach ($parts as $part) {\n    echo $part-&gt;id;\n}\n</pre>   <h3 id=\"filtering-resultsets\">Filtering Resultsets</h3> <p>The most efficient way to filter data is setting some search criteria, databases will use indexes set on tables to return data faster. Phalcon additionally allows you to filter the data using PHP using any resource that is not available in the database:</p> <pre class=\"highlight-php\" data-language=\"php\">$customers = Customers::find()-&gt;filter(\n    function ($customer) {\n\n        // Return only customers with a valid e-mail\n        if (filter_var($customer-&gt;email, FILTER_VALIDATE_EMAIL)) {\n            return $customer;\n        }\n    }\n);\n</pre>   <h3 id=\"binding-parameters\">Binding Parameters</h3> <p>Bound parameters are also supported in <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a>. You are encouraged to use this methodology so as to eliminate the possibility of your code being subject to SQL injection attacks. Both string and integer placeholders are supported. Binding parameters can simply be achieved as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">// Query robots binding parameters with string placeholders\n$conditions = \"name = :name: AND type = :type:\";\n\n// Parameters whose keys are the same as placeholders\n$parameters = array(\n    \"name\" =&gt; \"Robotina\",\n    \"type\" =&gt; \"maid\"\n);\n\n// Perform the query\n$robots = Robots::find(\n    array(\n        $conditions,\n        \"bind\" =&gt; $parameters\n    )\n);\n\n// Query robots binding parameters with integer placeholders\n$conditions = \"name = ?1 AND type = ?2\";\n$parameters = array(1 =&gt; \"Robotina\", 2 =&gt; \"maid\");\n$robots     = Robots::find(\n    array(\n        $conditions,\n        \"bind\" =&gt; $parameters\n    )\n);\n\n// Query robots binding parameters with both string and integer placeholders\n$conditions = \"name = :name: AND type = ?1\";\n\n// Parameters whose keys are the same as placeholders\n$parameters = array(\n    \"name\" =&gt; \"Robotina\",\n    1      =&gt; \"maid\"\n);\n\n// Perform the query\n$robots = Robots::find(\n    array(\n        $conditions,\n        \"bind\" =&gt; $parameters\n    )\n);\n</pre> <p>When using numeric placeholders, you will need to define them as integers i.e. 1 or 2. In this case “1” or “2” are considered strings and not numbers, so the placeholder could not be successfully replaced.</p> <p>Strings are automatically escaped using <a class=\"reference external\" href=\"http://php.net/manual/en/pdo.prepared-statements.php\">PDO</a>. This function takes into account the connection charset, so its recommended to define the correct charset in the connection parameters or in the database configuration, as a wrong charset will produce undesired effects when storing or retrieving data.</p> <p>Additionally you can set the parameter “bindTypes”, this allows defining how the parameters should be bound according to its data type:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Column;\n\n// Bind parameters\n$parameters = array(\n    \"name\" =&gt; \"Robotina\",\n    \"year\" =&gt; 2008\n);\n\n// Casting Types\n$types = array(\n    \"name\" =&gt; Column::BIND_PARAM_STR,\n    \"year\" =&gt; Column::BIND_PARAM_INT\n);\n\n// Query robots binding parameters with string placeholders\n$robots = Robots::find(\n    array(\n        \"name = :name: AND year = :year:\",\n        \"bind\"      =&gt; $parameters,\n        \"bindTypes\" =&gt; $types\n    )\n);\n</pre> <blockquote class=\"highlights\"> <div>Since the default bind-type is <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::BIND_PARAM_STR</span></code>, there is no need to specify the “bindTypes” parameter if all of the columns are of that type.</div>\n</blockquote> <p>If you bind arrays in bound parameters, keep in mind, that keys must be numbered from zero:</p> <pre class=\"highlight-php\" data-language=\"php\">$array = [\"a\",\"b\",\"c\"]; // $array: [[0] =&gt; \"a\", [1] =&gt; \"b\", [2] =&gt; \"c\"]\n\nunset($array[1]); // $array: [[0] =&gt; \"a\", [2] =&gt; \"c\"]\n\n// Now we have to renumber the keys\n$array = array_values($array); // $array: [[0] =&gt; \"a\", [1] =&gt; \"c\"]\n\n$robots = Robots::find(\n    array(\n        'letter IN ({letter:array})',\n        'bind' =&gt; array(\n            'letter' =&gt; $array\n        )\n    )\n);\n</pre> <blockquote class=\"highlights\"> <div>Bound parameters are available for all query methods such as <code class=\"code docutils literal\"><span class=\"pre\">find()</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">findFirst()</span></code> but also the calculation methods like <code class=\"code docutils literal\"><span class=\"pre\">count()</span></code>, <code class=\"code docutils literal\"><span class=\"pre\">sum()</span></code>, <code class=\"code docutils literal\"><span class=\"pre\">average()</span></code> etc.</div>\n</blockquote> <p>If you’re using “finders”, bound parameters are automatically used for you:</p> <pre class=\"highlight-php\" data-language=\"php\">// Explicit query using bound parameters\n$robots = Robots::find(\n    array(\n        \"name = ?0\",\n        \"bind\" =&gt; [\"Ultron\"],\n    )\n);\n\n// Implicit query using bound parameters\n$robots = Robots::findByName(\"Ultron\");\n</pre>    <h2 id=\"initializing-preparing-fetched-records\">Initializing/Preparing fetched records</h2> <p>May be the case that after obtaining a record from the database is necessary to initialise the data before being used by the rest of the application. You can implement the method ‘afterFetch’ in a model, this event will be executed just after create the instance and assign the data to it:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $status;\n\n    public function beforeSave()\n    {\n        // Convert the array into a string\n        $this-&gt;status = join(',', $this-&gt;status);\n    }\n\n    public function afterFetch()\n    {\n        // Convert the string to an array\n        $this-&gt;status = explode(',', $this-&gt;status);\n    }\n\n    public function afterSave()\n    {\n        // Convert the string to an array\n        $this-&gt;status = explode(',', $this-&gt;status);\n    }\n}\n</pre> <p>If you use getters/setters instead of/or together with public properties, you can initialize the field once it is accessed:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $status;\n\n    public function getStatus()\n    {\n        return explode(',', $this-&gt;status);\n    }\n}\n</pre>   <h2 id=\"relationships-between-models\">Relationships between Models</h2> <p>There are four types of relationships: one-on-one, one-to-many, many-to-one and many-to-many. The relationship may be unidirectional or bidirectional, and each can be simple (a one to one model) or more complex (a combination of models). The model manager manages foreign key constraints for these relationships, the definition of these helps referential integrity as well as easy and fast access of related records to a model. Through the implementation of relations, it is easy to access data in related models from each record in a uniform way.</p>  <h3 id=\"unidirectional-relationships\">Unidirectional relationships</h3> <p>Unidirectional relations are those that are generated in relation to one another but not vice versa.</p>   <h3 id=\"bidirectional-relations\">Bidirectional relations</h3> <p>The bidirectional relations build relationships in both models and each model defines the inverse relationship of the other.</p>   <h3 id=\"defining-relationships\">Defining relationships</h3> <p>In Phalcon, relationships must be defined in the <code class=\"code docutils literal\"><span class=\"pre\">initialize()</span></code> method of a model. The methods <code class=\"code docutils literal\"><span class=\"pre\">belongsTo()</span></code>, <code class=\"code docutils literal\"><span class=\"pre\">hasOne()</span></code>, <code class=\"code docutils literal\"><span class=\"pre\">hasMany()</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">hasManyToMany()</span></code> define the relationship between one or more fields from the current model to fields in another model. Each of these methods requires 3 parameters: local fields, referenced model, referenced fields.</p> <table class=\"docutils\"> <colgroup> <col width=\"35%\"> <col width=\"65%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Method</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>hasMany</td> <td>Defines a 1-n relationship</td> </tr> <tr class=\"row-odd\">\n<td>hasOne</td> <td>Defines a 1-1 relationship</td> </tr> <tr class=\"row-even\">\n<td>belongsTo</td> <td>Defines a n-1 relationship</td> </tr> <tr class=\"row-odd\">\n<td>hasManyToMany</td> <td>Defines a n-n relationship</td> </tr> </tbody> </table> <p>The following schema shows 3 tables whose relations will serve us as an example regarding relationships:</p> <pre class=\"highlight-sql\" data-language=\"sql\">CREATE TABLE `robots` (\n    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n    `name` varchar(70) NOT NULL,\n    `type` varchar(32) NOT NULL,\n    `year` int(11) NOT NULL,\n    PRIMARY KEY (`id`)\n);\n\nCREATE TABLE `robots_parts` (\n    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n    `robots_id` int(10) NOT NULL,\n    `parts_id` int(10) NOT NULL,\n    `created_at` DATE NOT NULL,\n    PRIMARY KEY (`id`),\n    KEY `robots_id` (`robots_id`),\n    KEY `parts_id` (`parts_id`)\n);\n\nCREATE TABLE `parts` (\n    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n    `name` varchar(70) NOT NULL,\n    PRIMARY KEY (`id`)\n);\n</pre> <ul class=\"simple\"> <li>The model “Robots” has many “RobotsParts”.</li> <li>The model “Parts” has many “RobotsParts”.</li> <li>The model “RobotsParts” belongs to both “Robots” and “Parts” models as a many-to-one relation.</li> <li>The model “Robots” has a relation many-to-many to “Parts” through “RobotsParts”.</li> </ul> <p>Check the EER diagram to understand better the relations:</p> <div class=\"figure align-center\"> <img alt=\"../_images/eer-1.png\" src=\"https://docs.phalconphp.com/en/latest/_images/eer-1.png\"> </div> <p>The models with their relations could be implemented as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public function initialize()\n    {\n        $this-&gt;hasMany(\"id\", \"RobotsParts\", \"robots_id\");\n    }\n}\n</pre> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Parts extends Model\n{\n    public $id;\n\n    public $name;\n\n    public function initialize()\n    {\n        $this-&gt;hasMany(\"id\", \"RobotsParts\", \"parts_id\");\n    }\n}\n</pre> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass RobotsParts extends Model\n{\n    public $id;\n\n    public $robots_id;\n\n    public $parts_id;\n\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\"robots_id\", \"Robots\", \"id\");\n        $this-&gt;belongsTo(\"parts_id\", \"Parts\", \"id\");\n    }\n}\n</pre> <p>The first parameter indicates the field of the local model used in the relationship; the second indicates the name of the referenced model and the third the field name in the referenced model. You could also use arrays to define multiple fields in the relationship.</p> <p>Many to many relationships require 3 models and define the attributes involved in the relationship:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public function initialize()\n    {\n        $this-&gt;hasManyToMany(\n            \"id\",\n            \"RobotsParts\",\n            \"robots_id\", \"parts_id\",\n            \"Parts\",\n            \"id\"\n        );\n    }\n}\n</pre>   <h3 id=\"taking-advantage-of-relationships\">Taking advantage of relationships</h3> <p>When explicitly defining the relationships between models, it is easy to find related records for a particular record.</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = Robots::findFirst(2);\nforeach ($robot-&gt;robotsParts as $robotPart) {\n    echo $robotPart-&gt;parts-&gt;name, \"\\n\";\n}\n</pre> <p>Phalcon uses the magic methods <code class=\"code docutils literal\"><span class=\"pre\">__set</span></code>/<code class=\"code docutils literal\"><span class=\"pre\">__get</span></code>/<code class=\"code docutils literal\"><span class=\"pre\">__call</span></code> to store or retrieve related data using relationships.</p> <p>By accessing an attribute with the same name as the relationship will retrieve all its related record(s).</p> <pre class=\"highlight-php\" data-language=\"php\">$robot       = Robots::findFirst();\n$robotsParts = $robot-&gt;robotsParts; // All the related records in RobotsParts\n</pre> <p>Also, you can use a magic getter:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot       = Robots::findFirst();\n$robotsParts = $robot-&gt;getRobotsParts(); // All the related records in RobotsParts\n$robotsParts = $robot-&gt;getRobotsParts(array('limit' =&gt; 5)); // Passing parameters\n</pre> <p>If the called method has a “get” prefix <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> will return a <code class=\"code docutils literal\"><span class=\"pre\">findFirst()</span></code>/<code class=\"code docutils literal\"><span class=\"pre\">find()</span></code> result. The following example compares retrieving related results with using magic methods and without:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot       = Robots::findFirst(2);\n\n// Robots model has a 1-n (hasMany)\n// relationship to RobotsParts then\n$robotsParts = $robot-&gt;robotsParts;\n\n// Only parts that match conditions\n$robotsParts = $robot-&gt;getRobotsParts(\"created_at = '2015-03-15'\");\n\n// Or using bound parameters\n$robotsParts = $robot-&gt;getRobotsParts(\n    array(\n        \"created_at = :date:\",\n        \"bind\" =&gt; array(\n            \"date\" =&gt; \"2015-03-15\"\n        )\n    )\n);\n\n$robotPart   = RobotsParts::findFirst(1);\n\n// RobotsParts model has a n-1 (belongsTo)\n// relationship to RobotsParts then\n$robot = $robotPart-&gt;robots;\n</pre> <p>Getting related records manually:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot       = Robots::findFirst(2);\n\n// Robots model has a 1-n (hasMany)\n// relationship to RobotsParts, then\n$robotsParts = RobotsParts::find(\"robots_id = '\" . $robot-&gt;id . \"'\");\n\n// Only parts that match conditions\n$robotsParts = RobotsParts::find(\n    \"robots_id = '\" . $robot-&gt;id . \"' AND created_at = '2015-03-15'\"\n);\n\n$robotPart   = RobotsParts::findFirst(1);\n\n// RobotsParts model has a n-1 (belongsTo)\n// relationship to RobotsParts then\n$robot = Robots::findFirst(\"id = '\" . $robotPart-&gt;robots_id . \"'\");\n</pre> <p>The prefix “get” is used to <code class=\"code docutils literal\"><span class=\"pre\">find()</span></code>/<code class=\"code docutils literal\"><span class=\"pre\">findFirst()</span></code> related records. Depending on the type of relation it will use ‘find’ or ‘findFirst’:</p> <table class=\"docutils\"> <colgroup> <col width=\"12%\"> <col width=\"73%\"> <col width=\"14%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Type</th> <th class=\"head\">Description</th> <th class=\"head\">Implicit Method</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Belongs-To</td> <td>Returns a model instance of the related record directly</td> <td>findFirst</td> </tr> <tr class=\"row-odd\">\n<td>Has-One</td> <td>Returns a model instance of the related record directly</td> <td>findFirst</td> </tr> <tr class=\"row-even\">\n<td>Has-Many</td> <td>Returns a collection of model instances of the referenced model</td> <td>find</td> </tr> <tr class=\"row-odd\">\n<td>Has-Many-to-Many</td> <td>Returns a collection of model instances of the referenced model, it implicitly does ‘inner joins’ with the involved models</td> <td>(complex query)</td> </tr> </tbody> </table> <p>You can also use “count” prefix to return an integer denoting the count of the related records:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = Robots::findFirst(2);\necho \"The robot has \", $robot-&gt;countRobotsParts(), \" parts\\n\";\n</pre>   <h3 id=\"aliasing-relationships\">Aliasing Relationships</h3> <p>To explain better how aliases work, let’s check the following example:</p> <p>The “robots_similar” table has the function to define what robots are similar to others:</p> <pre class=\"highlight-bash\" data-language=\"bash\">mysql&gt; desc robots_similar;\n+-------------------+------------------+------+-----+---------+----------------+\n| Field             | Type             | Null | Key | Default | Extra          |\n+-------------------+------------------+------+-----+---------+----------------+\n| id                | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| robots_id         | int(10) unsigned | NO   | MUL | NULL    |                |\n| similar_robots_id | int(10) unsigned | NO   |     | NULL    |                |\n+-------------------+------------------+------+-----+---------+----------------+\n3 rows in set (0.00 sec)\n</pre> <p>Both “robots_id” and “similar_robots_id” have a relation to the model Robots:</p> <div class=\"figure align-center\"> <img alt=\"../_images/eer-2.png\" src=\"https://docs.phalconphp.com/en/latest/_images/eer-2.png\"> </div> <p>A model that maps this table and its relationships is the following:</p> <pre class=\"highlight-php\" data-language=\"php\">class RobotsSimilar extends Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;belongsTo('robots_id', 'Robots', 'id');\n        $this-&gt;belongsTo('similar_robots_id', 'Robots', 'id');\n    }\n}\n</pre> <p>Since both relations point to the same model (Robots), obtain the records related to the relationship could not be clear:</p> <pre class=\"highlight-php\" data-language=\"php\">$robotsSimilar = RobotsSimilar::findFirst();\n\n// Returns the related record based on the column (robots_id)\n// Also as is a belongsTo it's only returning one record\n// but the name 'getRobots' seems to imply that return more than one\n$robot = $robotsSimilar-&gt;getRobots();\n\n// but, how to get the related record based on the column (similar_robots_id)\n// if both relationships have the same name?\n</pre> <p>The aliases allow us to rename both relationships to solve these problems:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass RobotsSimilar extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'robots_id',\n            'Robots',\n            'id',\n            array(\n                'alias' =&gt; 'Robot'\n            )\n        );\n\n        $this-&gt;belongsTo(\n            'similar_robots_id',\n            'Robots',\n            'id',\n            array(\n                'alias' =&gt; 'SimilarRobot'\n            )\n        );\n    }\n}\n</pre> <p>With the aliasing we can get the related records easily:</p> <pre class=\"highlight-php\" data-language=\"php\">$robotsSimilar = RobotsSimilar::findFirst();\n\n// Returns the related record based on the column (robots_id)\n$robot = $robotsSimilar-&gt;getRobot();\n$robot = $robotsSimilar-&gt;robot;\n\n// Returns the related record based on the column (similar_robots_id)\n$similarRobot = $robotsSimilar-&gt;getSimilarRobot();\n$similarRobot = $robotsSimilar-&gt;similarRobot;\n</pre>   <h3 id=\"magic-getters-vs-explicit-methods\">Magic Getters vs. Explicit methods</h3> <p>Most IDEs and editors with auto-completion capabilities can not infer the correct types when using magic getters, instead of use the magic getters you can optionally define those methods explicitly with the corresponding docblocks helping the IDE to produce a better auto-completion:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public function initialize()\n    {\n        $this-&gt;hasMany(\"id\", \"RobotsParts\", \"robots_id\");\n    }\n\n    /**\n     * Return the related \"robots parts\"\n     *\n     * @return \\RobotsParts[]\n     */\n    public function getRobotsParts($parameters = null)\n    {\n        return $this-&gt;getRelated('RobotsParts', $parameters);\n    }\n}\n</pre>    <h2 id=\"virtual-foreign-keys\">Virtual Foreign Keys</h2> <p>By default, relationships do not act like database foreign keys, that is, if you try to insert/update a value without having a valid value in the referenced model, Phalcon will not produce a validation message. You can modify this behavior by adding a fourth parameter when defining a relationship.</p> <p>The RobotsPart model can be changed to demonstrate this feature:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass RobotsParts extends Model\n{\n    public $id;\n\n    public $robots_id;\n\n    public $parts_id;\n\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            \"robots_id\",\n            \"Robots\",\n            \"id\",\n            array(\n                \"foreignKey\" =&gt; true\n            )\n        );\n\n        $this-&gt;belongsTo(\n            \"parts_id\",\n            \"Parts\",\n            \"id\",\n            array(\n                \"foreignKey\" =&gt; array(\n                    \"message\" =&gt; \"The part_id does not exist on the Parts model\"\n                )\n            )\n        );\n    }\n}\n</pre> <p>If you alter a <code class=\"code docutils literal\"><span class=\"pre\">belongsTo()</span></code> relationship to act as foreign key, it will validate that the values inserted/updated on those fields have a valid value on the referenced model. Similarly, if a <code class=\"code docutils literal\"><span class=\"pre\">hasMany()</span></code>/<code class=\"code docutils literal\"><span class=\"pre\">hasOne()</span></code> is altered it will validate that the records cannot be deleted if that record is used on a referenced model.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Parts extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;hasMany(\n            \"id\",\n            \"RobotsParts\",\n            \"parts_id\",\n            array(\n                \"foreignKey\" =&gt; array(\n                    \"message\" =&gt; \"The part cannot be deleted because other robots are using it\"\n                )\n            )\n        );\n    }\n}\n</pre> <p>A virtual foreign key can be set up to allow null values as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass RobotsParts extends Model\n{\n    public $id;\n\n    public $robots_id;\n\n    public $parts_id;\n\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            \"parts_id\",\n            \"Parts\",\n            \"id\",\n            array(\n                \"foreignKey\" =&gt; array(\n                    \"allowNulls\" =&gt; true,\n                    \"message\"    =&gt; \"The part_id does not exist on the Parts model\"\n                )\n            )\n        );\n    }\n}\n</pre>  <h3 id=\"cascade-restrict-actions\">Cascade/Restrict actions</h3> <p>Relationships that act as virtual foreign keys by default restrict the creation/update/deletion of records to maintain the integrity of data:</p> <pre class=\"highlight-php\" data-language=\"php\">namespace Store\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Relation;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public function initialize()\n    {\n        $this-&gt;hasMany(\n            'id',\n            'Store\\\\Models\\\\Parts',\n            'robots_id',\n            array(\n                'foreignKey' =&gt; array(\n                    'action' =&gt; Relation::ACTION_CASCADE\n                )\n            )\n        );\n    }\n}\n</pre> <p>The above code set up to delete all the referenced records (parts) if the master record (robot) is deleted.</p>    <h2 id=\"generating-calculations\">Generating Calculations</h2> <p>Calculations (or aggregations) are helpers for commonly used functions of database systems such as COUNT, SUM, MAX, MIN or AVG. <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> allows to use these functions directly from the exposed methods.</p> <p>Count examples:</p> <pre class=\"highlight-php\" data-language=\"php\">// How many employees are?\n$rowcount = Employees::count();\n\n// How many different areas are assigned to employees?\n$rowcount = Employees::count(\n    array(\n        \"distinct\" =&gt; \"area\"\n    )\n);\n\n// How many employees are in the Testing area?\n$rowcount = Employees::count(\n    \"area = 'Testing'\"\n);\n\n// Count employees grouping results by their area\n$group = Employees::count(\n    array(\n        \"group\" =&gt; \"area\"\n    )\n);\nforeach ($group as $row) {\n   echo \"There are \", $row-&gt;rowcount, \" in \", $row-&gt;area;\n}\n\n// Count employees grouping by their area and ordering the result by count\n$group = Employees::count(\n    array(\n        \"group\" =&gt; \"area\",\n        \"order\" =&gt; \"rowcount\"\n    )\n);\n\n// Avoid SQL injections using bound parameters\n$group = Employees::count(\n    array(\n        \"type &gt; ?0\",\n        \"bind\" =&gt; array($type)\n    )\n);\n</pre> <p>Sum examples:</p> <pre class=\"highlight-php\" data-language=\"php\">// How much are the salaries of all employees?\n$total = Employees::sum(\n    array(\n        \"column\" =&gt; \"salary\"\n    )\n);\n\n// How much are the salaries of all employees in the Sales area?\n$total = Employees::sum(\n    array(\n        \"column\"     =&gt; \"salary\",\n        \"conditions\" =&gt; \"area = 'Sales'\"\n    )\n);\n\n// Generate a grouping of the salaries of each area\n$group = Employees::sum(\n    array(\n        \"column\" =&gt; \"salary\",\n        \"group\"  =&gt; \"area\"\n    )\n);\nforeach ($group as $row) {\n   echo \"The sum of salaries of the \", $row-&gt;area, \" is \", $row-&gt;sumatory;\n}\n\n// Generate a grouping of the salaries of each area ordering\n// salaries from higher to lower\n$group = Employees::sum(\n    array(\n        \"column\" =&gt; \"salary\",\n        \"group\"  =&gt; \"area\",\n        \"order\"  =&gt; \"sumatory DESC\"\n    )\n);\n\n// Avoid SQL injections using bound parameters\n$group = Employees::sum(\n    array(\n        \"conditions\" =&gt; \"area &gt; ?0\",\n        \"bind\"       =&gt; array($area)\n    )\n);\n</pre> <p>Average examples:</p> <pre class=\"highlight-php\" data-language=\"php\">// What is the average salary for all employees?\n$average = Employees::average(\n    array(\n        \"column\" =&gt; \"salary\"\n    )\n);\n\n// What is the average salary for the Sales's area employees?\n$average = Employees::average(\n    array(\n        \"column\"     =&gt; \"salary\",\n        \"conditions\" =&gt; \"area = 'Sales'\"\n    )\n);\n\n// Avoid SQL injections using bound parameters\n$average = Employees::average(\n    array(\n        \"column\"     =&gt; \"age\",\n        \"conditions\" =&gt; \"area &gt; ?0\",\n        \"bind\"       =&gt; array($area)\n    )\n);\n</pre> <p>Max/Min examples:</p> <pre class=\"highlight-php\" data-language=\"php\">// What is the oldest age of all employees?\n$age = Employees::maximum(\n    array(\n        \"column\" =&gt; \"age\"\n    )\n);\n\n// What is the oldest of employees from the Sales area?\n$age = Employees::maximum(\n    array(\n        \"column\"     =&gt; \"age\",\n        \"conditions\" =&gt; \"area = 'Sales'\"\n    )\n);\n\n// What is the lowest salary of all employees?\n$salary = Employees::minimum(\n    array(\n        \"column\" =&gt; \"salary\"\n    )\n);\n</pre>   <h2 id=\"hydration-modes\">Hydration Modes</h2> <p>As mentioned above, resultsets are collections of complete objects, this means that every returned result is an object representing a row in the database. These objects can be modified and saved again to persistence:</p> <pre class=\"highlight-php\" data-language=\"php\">// Manipulating a resultset of complete objects\nforeach (Robots::find() as $robot) {\n    $robot-&gt;year = 2000;\n    $robot-&gt;save();\n}\n</pre> <p>Sometimes records are obtained only to be presented to a user in read-only mode, in these cases it may be useful to change the way in which records are represented to facilitate their handling. The strategy used to represent objects returned in a resultset is called ‘hydration mode’:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Resultset;\n\n$robots = Robots::find();\n\n// Return every robot as an array\n$robots-&gt;setHydrateMode(Resultset::HYDRATE_ARRAYS);\n\nforeach ($robots as $robot) {\n    echo $robot['year'], PHP_EOL;\n}\n\n// Return every robot as a stdClass\n$robots-&gt;setHydrateMode(Resultset::HYDRATE_OBJECTS);\n\nforeach ($robots as $robot) {\n    echo $robot-&gt;year, PHP_EOL;\n}\n\n// Return every robot as a Robots instance\n$robots-&gt;setHydrateMode(Resultset::HYDRATE_RECORDS);\n\nforeach ($robots as $robot) {\n    echo $robot-&gt;year, PHP_EOL;\n}\n</pre> <p>Hydration mode can also be passed as a parameter of ‘find’:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Resultset;\n\n$robots = Robots::find(\n    array(\n        'hydration' =&gt; Resultset::HYDRATE_ARRAYS\n    )\n);\n\nforeach ($robots as $robot) {\n    echo $robot['year'], PHP_EOL;\n}\n</pre>   <h2 id=\"creating-updating-records\">Creating Updating/Records</h2> <p>The method <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Mvc\\Model::save()</span></code> allows you to create/update records according to whether they already exist in the table associated with a model. The save method is called internally by the create and update methods of <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a>. For this to work as expected it is necessary to have properly defined a primary key in the entity to determine whether a record should be updated or created.</p> <p>Also the method executes associated validators, virtual foreign keys and events that are defined in the model:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot       = new Robots();\n$robot-&gt;type = \"mechanical\";\n$robot-&gt;name = \"Astro Boy\";\n$robot-&gt;year = 1952;\n\nif ($robot-&gt;save() == false) {\n    echo \"Umh, We can't store robots right now: \\n\";\n    foreach ($robot-&gt;getMessages() as $message) {\n        echo $message, \"\\n\";\n    }\n} else {\n    echo \"Great, a new robot was saved successfully!\";\n}\n</pre> <p>An array could be passed to “save” to avoid assign every column manually. <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> will check if there are setters implemented for the columns passed in the array giving priority to them instead of assign directly the values of the attributes:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = new Robots();\n\n$robot-&gt;save(\n    array(\n        \"type\" =&gt; \"mechanical\",\n        \"name\" =&gt; \"Astro Boy\",\n        \"year\" =&gt; 1952\n    )\n);\n</pre> <p>Values assigned directly or via the array of attributes are escaped/sanitized according to the related attribute data type. So you can pass an insecure array without worrying about possible SQL injections:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = new Robots();\n$robot-&gt;save($_POST);\n</pre> <blockquote class=\"highlights\"> <div>Without precautions mass assignment could allow attackers to set any database column’s value. Only use this feature if you want to permit a user to insert/update every column in the model, even if those fields are not in the submitted form.</div>\n</blockquote> <p>You can set an additional parameter in ‘save’ to set a whitelist of fields that only must taken into account when doing the mass assignment:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = new Robots();\n\n$robot-&gt;save(\n    $_POST,\n    array(\n        'name',\n        'type'\n    )\n);\n</pre>  <h3 id=\"create-update-with-confidence\">Create/Update with Confidence</h3> <p>When an application has a lot of competition, we could be expecting create a record but it is actually updated. This could happen if we use <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Mvc\\Model::save()</span></code> to persist the records in the database. If we want to be absolutely sure that a record is created or updated, we can change the <code class=\"code docutils literal\"><span class=\"pre\">save()</span></code> call with <code class=\"code docutils literal\"><span class=\"pre\">create()</span></code> or <code class=\"code docutils literal\"><span class=\"pre\">update()</span></code>:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot       = new Robots();\n$robot-&gt;type = \"mechanical\";\n$robot-&gt;name = \"Astro Boy\";\n$robot-&gt;year = 1952;\n\n// This record only must be created\nif ($robot-&gt;create() == false) {\n    echo \"Umh, We can't store robots right now: \\n\";\n    foreach ($robot-&gt;getMessages() as $message) {\n        echo $message, \"\\n\";\n    }\n} else {\n    echo \"Great, a new robot was created successfully!\";\n}\n</pre> <p>These methods “create” and “update” also accept an array of values as parameter.</p>   <h3 id=\"auto-generated-identity-columns\">Auto-generated identity columns</h3> <p>Some models may have identity columns. These columns usually are the primary key of the mapped table. <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> can recognize the identity column omitting it in the generated SQL INSERT, so the database system can generate an auto-generated value for it. Always after creating a record, the identity field will be registered with the value generated in the database system for it:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot-&gt;save();\n\necho \"The generated id is: \", $robot-&gt;id;\n</pre> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> is able to recognize the identity column. Depending on the database system, those columns may be serial columns like in PostgreSQL or auto_increment columns in the case of MySQL.</p> <p>PostgreSQL uses sequences to generate auto-numeric values, by default, Phalcon tries to obtain the generated value from the sequence “table_field_seq”, for example: robots_id_seq, if that sequence has a different name, the method “getSequenceName” needs to be implemented:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function getSequenceName()\n    {\n        return \"robots_sequence_name\";\n    }\n}\n</pre>   <h3 id=\"storing-related-records\">Storing related records</h3> <p>Magic properties can be used to store a records and its related properties:</p> <pre class=\"highlight-php\" data-language=\"php\">// Create an artist\n$artist          = new Artists();\n$artist-&gt;name    = 'Shinichi Osawa';\n$artist-&gt;country = 'Japan';\n\n// Create an album\n$album         = new Albums();\n$album-&gt;name   = 'The One';\n$album-&gt;artist = $artist; // Assign the artist\n$album-&gt;year   = 2008;\n\n// Save both records\n$album-&gt;save();\n</pre> <p>Saving a record and its related records in a has-many relation:</p> <pre class=\"highlight-php\" data-language=\"php\">// Get an existing artist\n$artist = Artists::findFirst('name = \"Shinichi Osawa\"');\n\n// Create an album\n$album         = new Albums();\n$album-&gt;name   = 'The One';\n$album-&gt;artist = $artist;\n\n$songs = array();\n\n// Create a first song\n$songs[0]           = new Songs();\n$songs[0]-&gt;name     = 'Star Guitar';\n$songs[0]-&gt;duration = '5:54';\n\n// Create a second song\n$songs[1]           = new Songs();\n$songs[1]-&gt;name     = 'Last Days';\n$songs[1]-&gt;duration = '4:29';\n\n// Assign the songs array\n$album-&gt;songs = $songs;\n\n// Save the album + its songs\n$album-&gt;save();\n</pre> <p>Saving the album and the artist at the same time implicitly makes use of a transaction so if anything goes wrong with saving the related records, the parent will not be saved either. Messages are passed back to the user for information regarding any errors.</p> <p>Note: Adding related entities by overloading the following methods is not possible:</p> <blockquote> <div>\n<ul class=\"simple\"> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Mvc\\Model::beforeSave()</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Mvc\\Model::beforeCreate()</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Mvc\\Model::beforeUpdate()</span></code></li> </ul> </div>\n</blockquote> <p>You need to overload <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Mvc\\Model::save()</span></code> for this to work from within a model.</p>   <h3 id=\"validation-messages\">Validation Messages</h3> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> has a messaging subsystem that provides a flexible way to output or store the validation messages generated during the insert/update processes.</p> <p>Each message consists of an instance of the class <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_message\"><em>Phalcon\\Mvc\\Model\\Message</em></a>. The set of messages generated can be retrieved with the method <code class=\"code docutils literal\"><span class=\"pre\">getMessages()</span></code>. Each message provides extended information like the field name that generated the message or the message type:</p> <pre class=\"highlight-php\" data-language=\"php\">if ($robot-&gt;save() == false) {\n    foreach ($robot-&gt;getMessages() as $message) {\n        echo \"Message: \", $message-&gt;getMessage();\n        echo \"Field: \", $message-&gt;getField();\n        echo \"Type: \", $message-&gt;getType();\n    }\n}\n</pre> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> can generate the following types of validation messages:</p> <table class=\"docutils\"> <colgroup> <col width=\"14%\"> <col width=\"86%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Type</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>PresenceOf</td> <td>Generated when a field with a non-null attribute on the database is trying to insert/update a null value</td> </tr> <tr class=\"row-odd\">\n<td>ConstraintViolation</td> <td>Generated when a field part of a virtual foreign key is trying to insert/update a value that doesn’t exist in the referenced model</td> </tr> <tr class=\"row-even\">\n<td>InvalidValue</td> <td>Generated when a validator failed because of an invalid value</td> </tr> <tr class=\"row-odd\">\n<td>InvalidCreateAttempt</td> <td>Produced when a record is attempted to be created but it already exists</td> </tr> <tr class=\"row-even\">\n<td>InvalidUpdateAttempt</td> <td>Produced when a record is attempted to be updated but it doesn’t exist</td> </tr> </tbody> </table> <p>The method <code class=\"code docutils literal\"><span class=\"pre\">getMessages()</span></code> can be overridden in a model to replace/translate the default messages generated automatically by the ORM:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function getMessages()\n    {\n        $messages = array();\n        foreach (parent::getMessages() as $message) {\n            switch ($message-&gt;getType()) {\n                case 'InvalidCreateAttempt':\n                    $messages[] = 'The record cannot be created because it already exists';\n                    break;\n                case 'InvalidUpdateAttempt':\n                    $messages[] = 'The record cannot be updated because it doesn\\'t exist';\n                    break;\n                case 'PresenceOf':\n                    $messages[] = 'The field ' . $message-&gt;getField() . ' is mandatory';\n                    break;\n            }\n        }\n\n        return $messages;\n    }\n}\n</pre>   <h3 id=\"events-and-events-manager\">Events and Events Manager</h3> <p>Models allow you to implement events that will be thrown when performing an insert/update/delete. They help define business rules for a certain model. The following are the events supported by <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> and their order of execution:</p> <table class=\"docutils\"> <colgroup> <col width=\"10%\"> <col width=\"13%\"> <col width=\"12%\"> <col width=\"66%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operation</th> <th class=\"head\">Name</th> <th class=\"head\">Can stop operation?</th> <th class=\"head\">Explanation</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Inserting/Updating</td> <td>beforeValidation</td> <td>YES</td> <td>Is executed before the fields are validated for not nulls/empty strings or foreign keys</td> </tr> <tr class=\"row-odd\">\n<td>Inserting</td> <td>beforeValidationOnCreate</td> <td>YES</td> <td>Is executed before the fields are validated for not nulls/empty strings or foreign keys when an insertion operation is being made</td> </tr> <tr class=\"row-even\">\n<td>Updating</td> <td>beforeValidationOnUpdate</td> <td>YES</td> <td>Is executed before the fields are validated for not nulls/empty strings or foreign keys when an updating operation is being made</td> </tr> <tr class=\"row-odd\">\n<td>Inserting/Updating</td> <td>onValidationFails</td> <td>YES (already stopped)</td> <td>Is executed after an integrity validator fails</td> </tr> <tr class=\"row-even\">\n<td>Inserting</td> <td>afterValidationOnCreate</td> <td>YES</td> <td>Is executed after the fields are validated for not nulls/empty strings or foreign keys when an insertion operation is being made</td> </tr> <tr class=\"row-odd\">\n<td>Updating</td> <td>afterValidationOnUpdate</td> <td>YES</td> <td>Is executed after the fields are validated for not nulls/empty strings or foreign keys when an updating operation is being made</td> </tr> <tr class=\"row-even\">\n<td>Inserting/Updating</td> <td>afterValidation</td> <td>YES</td> <td>Is executed after the fields are validated for not nulls/empty strings or foreign keys</td> </tr> <tr class=\"row-odd\">\n<td>Inserting/Updating</td> <td>beforeSave</td> <td>YES</td> <td>Runs before the required operation over the database system</td> </tr> <tr class=\"row-even\">\n<td>Updating</td> <td>beforeUpdate</td> <td>YES</td> <td>Runs before the required operation over the database system only when an updating operation is being made</td> </tr> <tr class=\"row-odd\">\n<td>Inserting</td> <td>beforeCreate</td> <td>YES</td> <td>Runs before the required operation over the database system only when an inserting operation is being made</td> </tr> <tr class=\"row-even\">\n<td>Updating</td> <td>afterUpdate</td> <td>NO</td> <td>Runs after the required operation over the database system only when an updating operation is being made</td> </tr> <tr class=\"row-odd\">\n<td>Inserting</td> <td>afterCreate</td> <td>NO</td> <td>Runs after the required operation over the database system only when an inserting operation is being made</td> </tr> <tr class=\"row-even\">\n<td>Inserting/Updating</td> <td>afterSave</td> <td>NO</td> <td>Runs after the required operation over the database system</td> </tr> </tbody> </table>   <h3 id=\"implementing-events-in-the-model-s-class\">Implementing Events in the Model’s class</h3> <p>The easier way to make a model react to events is implement a method with the same name of the event in the model’s class:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function beforeValidationOnCreate()\n    {\n        echo \"This is executed before creating a Robot!\";\n    }\n}\n</pre> <p>Events can be useful to assign values before performing an operation, for example:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Products extends Model\n{\n    public function beforeCreate()\n    {\n        // Set the creation date\n        $this-&gt;created_at = date('Y-m-d H:i:s');\n    }\n\n    public function beforeUpdate()\n    {\n        // Set the modification date\n        $this-&gt;modified_in = date('Y-m-d H:i:s');\n    }\n}\n</pre>   <h3 id=\"using-a-custom-events-manager\">Using a custom Events Manager</h3> <p>Additionally, this component is integrated with <a class=\"reference internal\" href=\"../api/phalcon_events_manager\"><em>Phalcon\\Events\\Manager</em></a>, this means we can create listeners that run when an event is triggered.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\nuse Phalcon\\Events\\Manager as EventsManager;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $eventsManager = new EventsManager();\n\n        // Attach an anonymous function as a listener for \"model\" events\n        $eventsManager-&gt;attach('model', function ($event, $robot) {\n            if ($event-&gt;getType() == 'beforeSave') {\n                if ($robot-&gt;name == 'Scooby Doo') {\n                    echo \"Scooby Doo isn't a robot!\";\n                    return false;\n                }\n            }\n\n            return true;\n        });\n\n        // Attach the events manager to the event\n        $this-&gt;setEventsManager($eventsManager);\n    }\n}\n</pre> <p>In the example given above, the Events Manager only acts as a bridge between an object and a listener (the anonymous function). Events will be fired to the listener when ‘robots’ are saved:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot       = new Robots();\n$robot-&gt;name = 'Scooby Doo';\n$robot-&gt;year = 1969;\n\n$robot-&gt;save();\n</pre> <p>If we want all objects created in our application use the same EventsManager, then we need to assign it to the Models Manager:</p> <pre class=\"highlight-php\" data-language=\"php\">// Registering the modelsManager service\n$di-&gt;setShared('modelsManager', function () {\n\n    $eventsManager = new \\Phalcon\\Events\\Manager();\n\n    // Attach an anonymous function as a listener for \"model\" events\n    $eventsManager-&gt;attach('model', function ($event, $model) {\n\n        // Catch events produced by the Robots model\n        if (get_class($model) == 'Robots') {\n\n            if ($event-&gt;getType() == 'beforeSave') {\n                if ($model-&gt;name == 'Scooby Doo') {\n                    echo \"Scooby Doo isn't a robot!\";\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    });\n\n    // Setting a default EventsManager\n    $modelsManager = new ModelsManager();\n    $modelsManager-&gt;setEventsManager($eventsManager);\n\n    return $modelsManager;\n});\n</pre> <p>If a listener returns false that will stop the operation that is executing currently.</p>   <h3 id=\"implementing-a-business-rule\">Implementing a Business Rule</h3> <p>When an insert, update or delete is executed, the model verifies if there are any methods with the names of the events listed in the table above.</p> <p>We recommend that validation methods are declared protected to prevent that business logic implementation from being exposed publicly.</p> <p>The following example implements an event that validates the year cannot be smaller than 0 on update or insert:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function beforeSave()\n    {\n        if ($this-&gt;year &lt; 0) {\n            echo \"Year cannot be smaller than zero!\";\n            return false;\n        }\n    }\n}\n</pre> <p>Some events return false as an indication to stop the current operation. If an event doesn’t return anything, <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> will assume a true value.</p>   <h3 id=\"validating-data-integrity\">Validating Data Integrity</h3> <p><a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> provides several events to validate data and implement business rules. The special “validation” event allows us to call built-in validators over the record. Phalcon exposes a few built-in validators that can be used at this stage of validation.</p> <p>The following example shows how to use it:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Validator\\Uniqueness;\nuse Phalcon\\Mvc\\Model\\Validator\\InclusionIn;\n\nclass Robots extends Model\n{\n    public function validation()\n    {\n        $this-&gt;validate(\n            new InclusionIn(\n                array(\n                    \"field\"  =&gt; \"type\",\n                    \"domain\" =&gt; array(\"Mechanical\", \"Virtual\")\n                )\n            )\n        );\n\n        $this-&gt;validate(\n            new Uniqueness(\n                array(\n                    \"field\"   =&gt; \"name\",\n                    \"message\" =&gt; \"The robot name must be unique\"\n                )\n            )\n        );\n\n        return $this-&gt;validationHasFailed() != true;\n    }\n}\n</pre> <p>The above example performs a validation using the built-in validator “InclusionIn”. It checks the value of the field “type” in a domain list. If the value is not included in the method then the validator will fail and return false. The following built-in validators are available:</p> <table class=\"docutils\"> <colgroup> <col width=\"6%\"> <col width=\"67%\"> <col width=\"27%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\">Explanation</th> <th class=\"head\">Example</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>PresenceOf</td> <td>Validates that a field’s value isn’t null or empty string. This validator is automatically added based on the attributes marked as not null on the mapped table</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_validator_presenceof\"><em>Example</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Email</td> <td>Validates that field contains a valid email format</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_validator_email\"><em>Example</em></a></td> </tr> <tr class=\"row-even\">\n<td>ExclusionIn</td> <td>Validates that a value is not within a list of possible values</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_validator_exclusionin\"><em>Example</em></a></td> </tr> <tr class=\"row-odd\">\n<td>InclusionIn</td> <td>Validates that a value is within a list of possible values</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_validator_inclusionin\"><em>Example</em></a></td> </tr> <tr class=\"row-even\">\n<td>Numericality</td> <td>Validates that a field has a numeric format</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_validator_numericality\"><em>Example</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Regex</td> <td>Validates that the value of a field matches a regular expression</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_validator_regex\"><em>Example</em></a></td> </tr> <tr class=\"row-even\">\n<td>Uniqueness</td> <td>Validates that a field or a combination of a set of fields are not present more than once in the existing records of the related table</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_validator_uniqueness\"><em>Example</em></a></td> </tr> <tr class=\"row-odd\">\n<td>StringLength</td> <td>Validates the length of a string</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_validator_stringlength\"><em>Example</em></a></td> </tr> <tr class=\"row-even\">\n<td>Url</td> <td>Validates that a value has a valid URL format</td> <td><a class=\"reference internal\" href=\"../api/phalcon_mvc_model_validator_url\"><em>Example</em></a></td> </tr> </tbody> </table> <p>In addition to the built-in validators, you can create your own validators:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Validator;\nuse Phalcon\\Mvc\\Model\\ValidatorInterface;\nuse Phalcon\\Mvc\\EntityInterface;\n\nclass MaxMinValidator extends Validator implements ValidatorInterface\n{\n    public function validate(EntityInterface $model)\n    {\n        $field = $this-&gt;getOption('field');\n\n        $min   = $this-&gt;getOption('min');\n        $max   = $this-&gt;getOption('max');\n\n        $value = $model-&gt;$field;\n\n        if ($min &lt;= $value &amp;&amp; $value &lt;= $max) {\n            $this-&gt;appendMessage(\n                \"The field doesn't have the right range of values\",\n                $field,\n                \"MaxMinValidator\"\n            );\n\n            return false;\n        }\n\n        return true;\n    }\n}\n</pre> <blockquote class=\"highlights\"> <div>\n<em>NOTE</em> Up to version 2.0.4 <code class=\"code docutils literal\"><span class=\"pre\">$model</span></code> must be <a class=\"reference internal\" href=\"../api/phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> instance (<code class=\"code docutils literal\"><span class=\"pre\">public</span> <span class=\"pre\">function</span> <span class=\"pre\">validate(Phalcon\\Mvc\\ModelInterface</span> <span class=\"pre\">$model)</span></code>).</div>\n</blockquote> <p>Adding the validator to a model:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Customers extends Model\n{\n    public function validation()\n    {\n        $this-&gt;validate(\n            new MaxMinValidator(\n                array(\n                    \"field\" =&gt; \"price\",\n                    \"min\"   =&gt; 10,\n                    \"max\"   =&gt; 100\n                )\n            )\n        );\n\n        if ($this-&gt;validationHasFailed() == true) {\n            return false;\n        }\n    }\n}\n</pre> <p>The idea of creating validators is make them reusable between several models. A validator can also be as simple as:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Message;\n\nclass Robots extends Model\n{\n    public function validation()\n    {\n        if ($this-&gt;type == \"Old\") {\n            $message = new Message(\n                \"Sorry, old robots are not allowed anymore\",\n                \"type\",\n                \"MyType\"\n            );\n\n            $this-&gt;appendMessage($message);\n\n            return false;\n        }\n\n        return true;\n    }\n}\n</pre>   <h3 id=\"avoiding-sql-injections\">Avoiding SQL injections</h3> <p>Every value assigned to a model attribute is escaped depending of its data type. A developer doesn’t need to escape manually each value before storing it on the database. Phalcon uses internally the <a class=\"reference external\" href=\"http://php.net/manual/en/pdostatement.bindparam.php\">bound parameters</a> capability provided by PDO to automatically escape every value to be stored in the database.</p> <pre class=\"highlight-bash\" data-language=\"bash\">mysql&gt; desc products;\n+------------------+------------------+------+-----+---------+----------------+\n| Field            | Type             | Null | Key | Default | Extra          |\n+------------------+------------------+------+-----+---------+----------------+\n| id               | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| product_types_id | int(10) unsigned | NO   | MUL | NULL    |                |\n| name             | varchar(70)      | NO   |     | NULL    |                |\n| price            | decimal(16,2)    | NO   |     | NULL    |                |\n| active           | char(1)          | YES  |     | NULL    |                |\n+------------------+------------------+------+-----+---------+----------------+\n5 rows in set (0.00 sec)\n</pre> <p>If we use just PDO to store a record in a secure way, we need to write the following code:</p> <pre class=\"highlight-php\" data-language=\"php\">$name           = 'Artichoke';\n$price          = 10.5;\n$active         = 'Y';\n$productTypesId = 1;\n\n$sql = 'INSERT INTO products VALUES (null, :productTypesId, :name, :price, :active)';\n$sth = $dbh-&gt;prepare($sql);\n\n$sth-&gt;bindParam(':productTypesId', $productTypesId, PDO::PARAM_INT);\n$sth-&gt;bindParam(':name', $name, PDO::PARAM_STR, 70);\n$sth-&gt;bindParam(':price', doubleval($price));\n$sth-&gt;bindParam(':active', $active, PDO::PARAM_STR, 1);\n\n$sth-&gt;execute();\n</pre> <p>The good news is that Phalcon do this for you automatically:</p> <pre class=\"highlight-php\" data-language=\"php\">$product                   = new Products();\n$product-&gt;product_types_id = 1;\n$product-&gt;name             = 'Artichoke';\n$product-&gt;price            = 10.5;\n$product-&gt;active           = 'Y';\n\n$product-&gt;create();\n</pre>    <h2 id=\"skipping-columns\">Skipping Columns</h2> <p>To tell <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> that always omits some fields in the creation and/or update of records in order to delegate the database system the assignation of the values by a trigger or a default:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        // Skips fields/columns on both INSERT/UPDATE operations\n        $this-&gt;skipAttributes(\n            array(\n                'year',\n                'price'\n            )\n        );\n\n        // Skips only when inserting\n        $this-&gt;skipAttributesOnCreate(\n            array(\n                'created_at'\n            )\n        );\n\n        // Skips only when updating\n        $this-&gt;skipAttributesOnUpdate(\n            array(\n                'modified_in'\n            )\n        );\n    }\n}\n</pre> <p>This will ignore globally these fields on each INSERT/UPDATE operation on the whole application. If you want to ignore different attributes on different INSERT/UPDATE operations, you can specify the second parameter (boolean) - true for replacement. Forcing a default value can be done in the following way:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\RawValue;\n\n$robot             = new Robots();\n$robot-&gt;name       = 'Bender';\n$robot-&gt;year       = 1999;\n$robot-&gt;created_at = new RawValue('default');\n\n$robot-&gt;create();\n</pre> <p>A callback also can be used to create a conditional assignment of automatic default values:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\nuse Phalcon\\Db\\RawValue;\n\nclass Robots extends Model\n{\n    public function beforeCreate()\n    {\n        if ($this-&gt;price &gt; 10000) {\n            $this-&gt;type = new RawValue('default');\n        }\n    }\n}\n</pre> <blockquote class=\"highlights\"> <div>Never use a <a class=\"reference internal\" href=\"../api/phalcon_db_rawvalue\"><em>Phalcon\\Db\\RawValue</em></a> to assign external data (such as user input) or variable data. The value of these fields is ignored when binding parameters to the query. So it could be used to attack the application injecting SQL.</div>\n</blockquote>  <h3 id=\"dynamic-update\">Dynamic Update</h3> <p>SQL UPDATE statements are by default created with every column defined in the model (full all-field SQL update). You can change specific models to make dynamic updates, in this case, just the fields that had changed are used to create the final SQL statement.</p> <p>In some cases this could improve the performance by reducing the traffic between the application and the database server, this specially helps when the table has blob/text fields:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;useDynamicUpdate(true);\n    }\n}\n</pre>    <h2 id=\"deleting-records\">Deleting Records</h2> <p>The method <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Mvc\\Model::delete()</span></code> allows to delete a record. You can use it as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = Robots::findFirst(11);\n\nif ($robot != false) {\n    if ($robot-&gt;delete() == false) {\n        echo \"Sorry, we can't delete the robot right now: \\n\";\n\n        foreach ($robot-&gt;getMessages() as $message) {\n            echo $message, \"\\n\";\n        }\n    } else {\n        echo \"The robot was deleted successfully!\";\n    }\n}\n</pre> <p>You can also delete many records by traversing a resultset with a foreach:</p> <pre class=\"highlight-php\" data-language=\"php\">foreach (Robots::find(\"type='mechanical'\") as $robot) {\n    if ($robot-&gt;delete() == false) {\n        echo \"Sorry, we can't delete the robot right now: \\n\";\n\n        foreach ($robot-&gt;getMessages() as $message) {\n            echo $message, \"\\n\";\n        }\n    } else {\n        echo \"The robot was deleted successfully!\";\n    }\n}\n</pre> <p>The following events are available to define custom business rules that can be executed when a delete operation is performed:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"16%\"> <col width=\"24%\"> <col width=\"48%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operation</th> <th class=\"head\">Name</th> <th class=\"head\">Can stop operation?</th> <th class=\"head\">Explanation</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Deleting</td> <td>beforeDelete</td> <td>YES</td> <td>Runs before the delete operation is made</td> </tr> <tr class=\"row-odd\">\n<td>Deleting</td> <td>afterDelete</td> <td>NO</td> <td>Runs after the delete operation was made</td> </tr> </tbody> </table> <p>With the above events can also define business rules in the models:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function beforeDelete()\n    {\n        if ($this-&gt;status == 'A') {\n            echo \"The robot is active, it can't be deleted\";\n\n            return false;\n        }\n\n        return true;\n    }\n}\n</pre>   <h2 id=\"validation-failed-events\">Validation Failed Events</h2> <p>Another type of events are available when the data validation process finds any inconsistency:</p> <table class=\"docutils\"> <colgroup> <col width=\"23%\"> <col width=\"18%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operation</th> <th class=\"head\">Name</th> <th class=\"head\">Explanation</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Insert or Update</td> <td>notSaved</td> <td>Triggered when the INSERT or UPDATE operation fails for any reason</td> </tr> <tr class=\"row-odd\">\n<td>Insert, Delete or Update</td> <td>onValidationFails</td> <td>Triggered when any data manipulation operation fails</td> </tr> </tbody> </table>   <h2 id=\"behaviors\">Behaviors</h2> <p>Behaviors are shared conducts that several models may adopt in order to re-use code, the ORM provides an API to implement behaviors in your models. Also, you can use the events and callbacks as seen before as an alternative to implement Behaviors with more freedom.</p> <p>A behavior must be added in the model initializer, a model can have zero or more behaviors:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\nclass Users extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $created_at;\n\n    public function initialize()\n    {\n        $this-&gt;addBehavior(\n            new Timestampable(\n                array(\n                    'beforeCreate' =&gt; array(\n                        'field'  =&gt; 'created_at',\n                        'format' =&gt; 'Y-m-d'\n                    )\n                )\n            )\n        );\n    }\n}\n</pre> <p>The following built-in behaviors are provided by the framework:</p> <table class=\"docutils\"> <colgroup> <col width=\"11%\"> <col width=\"89%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Timestampable</td> <td>Allows to automatically update a model’s attribute saving the datetime when a record is created or updated</td> </tr> <tr class=\"row-odd\">\n<td>SoftDelete</td> <td>Instead of permanently delete a record it marks the record as deleted changing the value of a flag column</td> </tr> </tbody> </table>  <h3 id=\"timestampable\">Timestampable</h3> <p>This behavior receives an array of options, the first level key must be an event name indicating when the column must be assigned:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\npublic function initialize()\n{\n    $this-&gt;addBehavior(\n        new Timestampable(\n            array(\n                'beforeCreate' =&gt; array(\n                    'field'  =&gt; 'created_at',\n                    'format' =&gt; 'Y-m-d'\n                )\n            )\n        )\n    );\n}\n</pre> <p>Each event can have its own options, ‘field’ is the name of the column that must be updated, if ‘format’ is a string it will be used as format of the PHP’s function <a class=\"reference external\" href=\"http://php.net/manual/en/function.date.php\">date</a>, format can also be an anonymous function providing you the free to generate any kind timestamp:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\npublic function initialize()\n{\n    $this-&gt;addBehavior(\n        new Timestampable(\n            array(\n                'beforeCreate' =&gt; array(\n                    'field'  =&gt; 'created_at',\n                    'format' =&gt; function () {\n                        $datetime = new Datetime(new DateTimeZone('Europe/Stockholm'));\n                        return $datetime-&gt;format('Y-m-d H:i:sP');\n                    }\n                )\n            )\n        )\n    );\n}\n</pre> <p>If the option ‘format’ is omitted a timestamp using the PHP’s function <a class=\"reference external\" href=\"http://php.net/manual/en/function.time.php\">time</a>, will be used.</p>   <h3 id=\"softdelete\">SoftDelete</h3> <p>This behavior can be used in the following way:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Behavior\\SoftDelete;\n\nclass Users extends Model\n{\n    const DELETED = 'D';\n\n    const NOT_DELETED = 'N';\n\n    public $id;\n\n    public $name;\n\n    public $status;\n\n    public function initialize()\n    {\n        $this-&gt;addBehavior(\n            new SoftDelete(\n                array(\n                    'field' =&gt; 'status',\n                    'value' =&gt; Users::DELETED\n                )\n            )\n        );\n    }\n}\n</pre> <p>This behavior accepts two options: ‘field’ and ‘value’, ‘field’ determines what field must be updated and ‘value’ the value to be deleted. Let’s pretend the table ‘users’ has the following data:</p> <pre class=\"highlight-bash\" data-language=\"bash\">mysql&gt; select * from users;\n+----+---------+--------+\n| id | name    | status |\n+----+---------+--------+\n|  1 | Lana    | N      |\n|  2 | Brandon | N      |\n+----+---------+--------+\n2 rows in set (0.00 sec)\n</pre> <p>If we delete any of the two records the status will be updated instead of delete the record:</p> <pre class=\"highlight-php\" data-language=\"php\">Users::findFirst(2)-&gt;delete();\n</pre> <p>The operation will result in the following data in the table:</p> <pre class=\"highlight-bash\" data-language=\"bash\">mysql&gt; select * from users;\n+----+---------+--------+\n| id | name    | status |\n+----+---------+--------+\n|  1 | Lana    | N      |\n|  2 | Brandon | D      |\n+----+---------+--------+\n2 rows in set (0.01 sec)\n</pre> <p>Note that you need to specify the deleted condition in your queries to effectively ignore them as deleted records, this behavior doesn’t support that.</p>   <h3 id=\"creating-your-own-behaviors\">Creating your own behaviors</h3> <p>The ORM provides an API to create your own behaviors. A behavior must be a class implementing the <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_behaviorinterface\"><em>Phalcon\\Mvc\\Model\\BehaviorInterface</em></a>. Also, <a class=\"reference internal\" href=\"../api/phalcon_mvc_model_behavior\"><em>Phalcon\\Mvc\\Model\\Behavior</em></a> provides most of the methods needed to ease the implementation of behaviors.</p> <p>The following behavior is an example, it implements the Blameable behavior which helps identify the user that is performed operations over a model:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Behavior;\nuse Phalcon\\Mvc\\Model\\BehaviorInterface;\n\nclass Blameable extends Behavior implements BehaviorInterface\n{\n    public function notify($eventType, $model)\n    {\n        switch ($eventType) {\n\n            case 'afterCreate':\n            case 'afterDelete':\n            case 'afterUpdate':\n\n                $userName = // ... get the current user from session\n\n                // Store in a log the username, event type and primary key\n                file_put_contents(\n                    'logs/blamable-log.txt',\n                    $userName . ' ' . $eventType . ' ' . $model-&gt;id\n                );\n\n                break;\n\n            default:\n                /* ignore the rest of events */\n        }\n    }\n}\n</pre> <p>The former is a very simple behavior, but it illustrates how to create a behavior, now let’s add this behavior to a model:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Profiles extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;addBehavior(new Blameable());\n    }\n}\n</pre> <p>A behavior is also capable of intercepting missing methods on your models:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Tag;\nuse Phalcon\\Mvc\\Model\\Behavior;\nuse Phalcon\\Mvc\\Model\\BehaviorInterface;\n\nclass Sluggable extends Behavior implements BehaviorInterface\n{\n    public function missingMethod($model, $method, $arguments = array())\n    {\n        // If the method is 'getSlug' convert the title\n        if ($method == 'getSlug') {\n            return Tag::friendlyTitle($model-&gt;title);\n        }\n    }\n}\n</pre> <p>Call that method on a model that implements Sluggable returns a SEO friendly title:</p> <pre class=\"highlight-php\" data-language=\"php\">$title = $post-&gt;getSlug();\n</pre>   <h3 id=\"using-traits-as-behaviors\">Using Traits as behaviors</h3> <p>Starting from PHP 5.4 you can use <a class=\"reference external\" href=\"http://php.net/manual/en/language.oop5.traits.php\">Traits</a> to re-use code in your classes, this is another way to implement custom behaviors. The following trait implements a simple version of the Timestampable behavior:</p> <pre class=\"highlight-php\" data-language=\"php\">trait MyTimestampable\n{\n    public function beforeCreate()\n    {\n        $this-&gt;created_at = date('r');\n    }\n\n    public function beforeUpdate()\n    {\n        $this-&gt;updated_at = date('r');\n    }\n}\n</pre> <p>Then you can use it in your model as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Products extends Model\n{\n    use MyTimestampable;\n}\n</pre>    <h2 id=\"independent-column-mapping\">Independent Column Mapping</h2> <p>The ORM supports an independent column map, which allows the developer to use different column names in the model to the ones in the table. Phalcon will recognize the new column names and will rename them accordingly to match the respective columns in the database. This is a great feature when one needs to rename fields in the database without having to worry about all the queries in the code. A change in the column map in the model will take care of the rest. For example:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $code;\n\n    public $theName;\n\n    public $theType;\n\n    public $theYear;\n\n    public function columnMap()\n    {\n        // Keys are the real names in the table and\n        // the values their names in the application\n        return array(\n            'id'       =&gt; 'code',\n            'the_name' =&gt; 'theName',\n            'the_type' =&gt; 'theType',\n            'the_year' =&gt; 'theYear'\n        );\n    }\n}\n</pre> <p>Then you can use the new names naturally in your code:</p> <pre class=\"highlight-php\" data-language=\"php\">// Find a robot by its name\n$robot = Robots::findFirst(\"theName = 'Voltron'\");\necho $robot-&gt;theName, \"\\n\";\n\n// Get robots ordered by type\n$robot = Robots::find(\n    array(\n        'order' =&gt; 'theType DESC'\n    )\n);\nforeach ($robots as $robot) {\n    echo 'Code: ', $robot-&gt;code, \"\\n\";\n}\n\n// Create a robot\n$robot          = new Robots();\n$robot-&gt;code    = '10101';\n$robot-&gt;theName = 'Bender';\n$robot-&gt;theType = 'Industrial';\n$robot-&gt;theYear = 2999;\n\n$robot-&gt;save();\n</pre> <p>Take into consideration the following the next when renaming your columns:</p> <ul class=\"simple\"> <li>References to attributes in relationships/validators must use the new names</li> <li>Refer the real column names will result in an exception by the ORM</li> </ul> <p>The independent column map allow you to:</p> <ul class=\"simple\"> <li>Write applications using your own conventions</li> <li>Eliminate vendor prefixes/suffixes in your code</li> <li>Change column names without change your application code</li> </ul>   <h2 id=\"operations-over-resultsets\">Operations over Resultsets</h2> <p>If a resultset is composed of complete objects, the resultset is in the ability to perform operations on the records obtained in a simple manner:</p>  <h3 id=\"updating-related-records\">Updating related records</h3> <p>Instead of doing this:</p> <pre class=\"highlight-php\" data-language=\"php\">foreach ($robots-&gt;getParts() as $part) {\n    $part-&gt;stock      = 100;\n    $part-&gt;updated_at = time();\n\n    if ($part-&gt;update() == false) {\n        foreach ($part-&gt;getMessages() as $message) {\n            echo $message;\n        }\n\n        break;\n    }\n}\n</pre> <p>you can do this:</p> <pre class=\"highlight-php\" data-language=\"php\">$robots-&gt;getParts()-&gt;update(\n    array(\n        'stock'      =&gt; 100,\n        'updated_at' =&gt; time()\n    )\n);\n</pre> <p>‘update’ also accepts an anonymous function to filter what records must be updated:</p> <pre class=\"highlight-php\" data-language=\"php\">$data = array(\n    'stock'      =&gt; 100,\n    'updated_at' =&gt; time()\n);\n\n// Update all the parts except those whose type is basic\n$robots-&gt;getParts()-&gt;update($data, function ($part) {\n    if ($part-&gt;type == Part::TYPE_BASIC) {\n        return false;\n    }\n\n    return true;\n});\n</pre>   <h3 id=\"deleting-related-records\">Deleting related records</h3> <p>Instead of doing this:</p> <pre class=\"highlight-php\" data-language=\"php\">foreach ($robots-&gt;getParts() as $part) {\n    if ($part-&gt;delete() == false) {\n        foreach ($part-&gt;getMessages() as $message) {\n            echo $message;\n        }\n\n        break;\n    }\n}\n</pre> <p>you can do this:</p> <pre class=\"highlight-php\" data-language=\"php\">$robots-&gt;getParts()-&gt;delete();\n</pre> <p>‘delete’ also accepts an anonymous function to filter what records must be deleted:</p> <pre class=\"highlight-php\" data-language=\"php\">// Delete only whose stock is greater or equal than zero\n$robots-&gt;getParts()-&gt;delete(function ($part) {\n    if ($part-&gt;stock &lt; 0) {\n        return false;\n    }\n\n    return true;\n});\n</pre>    <h2 id=\"record-snapshots\">Record Snapshots</h2> <p>Specific models could be set to maintain a record snapshot when they’re queried. You can use this feature to implement auditing or just to know what fields are changed according to the data queried from the persistence:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;keepSnapshots(true);\n    }\n}\n</pre> <p>When activating this feature the application consumes a bit more of memory to keep track of the original values obtained from the persistence. In models that have this feature activated you can check what fields changed:</p> <pre class=\"highlight-php\" data-language=\"php\">// Get a record from the database\n$robot = Robots::findFirst();\n\n// Change a column\n$robot-&gt;name = 'Other name';\n\nvar_dump($robot-&gt;getChangedFields()); // ['name']\nvar_dump($robot-&gt;hasChanged('name')); // true\nvar_dump($robot-&gt;hasChanged('type')); // false\n</pre>   <h2 id=\"pointing-to-a-different-schema\">Pointing to a different schema</h2> <p>If a model is mapped to a table that is in a different schemas/databases than the default. You can use the getSchema method to define that:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function getSchema()\n    {\n        return \"toys\";\n    }\n}\n</pre>   <h2 id=\"setting-multiple-databases\">Setting multiple databases</h2> <p>In Phalcon, all models can belong to the same database connection or have an individual one. Actually, when <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> needs to connect to the database it requests the “db” service in the application’s services container. You can overwrite this service setting it in the initialize method:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Adapter\\Pdo\\Mysql as MysqlPdo;\nuse Phalcon\\Db\\Adapter\\Pdo\\PostgreSQL as PostgreSQLPdo;\n\n// This service returns a MySQL database\n$di-&gt;set('dbMysql', function () {\n    return new MysqlPdo(\n        array(\n            \"host\"     =&gt; \"localhost\",\n            \"username\" =&gt; \"root\",\n            \"password\" =&gt; \"secret\",\n            \"dbname\"   =&gt; \"invo\"\n        )\n    );\n});\n\n// This service returns a PostgreSQL database\n$di-&gt;set('dbPostgres', function () {\n    return new PostgreSQLPdo(\n        array(\n            \"host\"     =&gt; \"localhost\",\n            \"username\" =&gt; \"postgres\",\n            \"password\" =&gt; \"\",\n            \"dbname\"   =&gt; \"invo\"\n        )\n    );\n});\n</pre> <p>Then, in the initialize method, we define the connection service for the model:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;setConnectionService('dbPostgres');\n    }\n}\n</pre> <p>But Phalcon offers you more flexibility, you can define the connection that must be used to ‘read’ and for ‘write’. This is specially useful to balance the load to your databases implementing a master-slave architecture:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;setReadConnectionService('dbSlave');\n        $this-&gt;setWriteConnectionService('dbMaster');\n    }\n}\n</pre> <p>The ORM also provides Horizontal Sharding facilities, by allowing you to implement a ‘shard’ selection according to the current query conditions:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    /**\n     * Dynamically selects a shard\n     *\n     * @param array $intermediate\n     * @param array $bindParams\n     * @param array $bindTypes\n     */\n    public function selectReadConnection($intermediate, $bindParams, $bindTypes)\n    {\n        // Check if there is a 'where' clause in the select\n        if (isset($intermediate['where'])) {\n\n            $conditions = $intermediate['where'];\n\n            // Choose the possible shard according to the conditions\n            if ($conditions['left']['name'] == 'id') {\n                $id = $conditions['right']['value'];\n\n                if ($id &gt; 0 &amp;&amp; $id &lt; 10000) {\n                    return $this-&gt;getDI()-&gt;get('dbShard1');\n                }\n\n                if ($id &gt; 10000) {\n                    return $this-&gt;getDI()-&gt;get('dbShard2');\n                }\n            }\n        }\n\n        // Use a default shard\n        return $this-&gt;getDI()-&gt;get('dbShard0');\n    }\n}\n</pre> <p>The method ‘selectReadConnection’ is called to choose the right connection, this method intercepts any new query executed:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = Robots::findFirst('id = 101');\n</pre>   <h2 id=\"logging-low-level-sql-statements\">Logging Low-Level SQL Statements</h2> <p>When using high-level abstraction components such as <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> to access a database, it is difficult to understand which statements are finally sent to the database system. <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> is supported internally by <a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a>. <a class=\"reference internal\" href=\"../api/phalcon_logger\"><em>Phalcon\\Logger</em></a> interacts with <a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a>, providing logging capabilities on the database abstraction layer, thus allowing us to log SQL statements as they happen.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Logger;\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Logger\\Adapter\\File as FileLogger;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as Connection;\n\n$di-&gt;set('db', function () {\n\n    $eventsManager = new EventsManager();\n\n    $logger = new FileLogger(\"app/logs/debug.log\");\n\n    // Listen all the database events\n    $eventsManager-&gt;attach('db', function ($event, $connection) use ($logger) {\n        if ($event-&gt;getType() == 'beforeQuery') {\n            $logger-&gt;log($connection-&gt;getSQLStatement(), Logger::INFO);\n        }\n    });\n\n    $connection = new Connection(\n        array(\n            \"host\"     =&gt; \"localhost\",\n            \"username\" =&gt; \"root\",\n            \"password\" =&gt; \"secret\",\n            \"dbname\"   =&gt; \"invo\"\n        )\n    );\n\n    // Assign the eventsManager to the db adapter instance\n    $connection-&gt;setEventsManager($eventsManager);\n\n    return $connection;\n});\n</pre> <p>As models access the default database connection, all SQL statements that are sent to the database system will be logged in the file:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot             = new Robots();\n$robot-&gt;name       = \"Robby the Robot\";\n$robot-&gt;created_at = \"1956-07-21\";\n\nif ($robot-&gt;save() == false) {\n    echo \"Cannot save robot\";\n}\n</pre> <p>As above, the file <em>app/logs/db.log</em> will contain something like this:</p> <pre class=\"highlight-irc\" data-language=\"irc\">[Mon, 30 Apr 12 13:47:18 -0500][DEBUG][Resource Id #77] INSERT INTO robots\n(name, created_at) VALUES ('Robby the Robot', '1956-07-21')\n</pre>   <h2 id=\"profiling-sql-statements\">Profiling SQL Statements</h2> <p>Thanks to <a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a>, the underlying component of <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a>, it’s possible to profile the SQL statements generated by the ORM in order to analyze the performance of database operations. With this you can diagnose performance problems and to discover bottlenecks.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Profiler as ProfilerDb;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as MysqlPdo;\n\n$di-&gt;set('profiler', function () {\n    return new ProfilerDb();\n}, true);\n\n$di-&gt;set('db', function () use ($di) {\n\n    $eventsManager = new EventsManager();\n\n    // Get a shared instance of the DbProfiler\n    $profiler      = $di-&gt;getProfiler();\n\n    // Listen all the database events\n    $eventsManager-&gt;attach('db', function ($event, $connection) use ($profiler) {\n        if ($event-&gt;getType() == 'beforeQuery') {\n            $profiler-&gt;startProfile($connection-&gt;getSQLStatement());\n        }\n\n        if ($event-&gt;getType() == 'afterQuery') {\n            $profiler-&gt;stopProfile();\n        }\n    });\n\n    $connection = new MysqlPdo(\n        array(\n            \"host\"     =&gt; \"localhost\",\n            \"username\" =&gt; \"root\",\n            \"password\" =&gt; \"secret\",\n            \"dbname\"   =&gt; \"invo\"\n        )\n    );\n\n    // Assign the eventsManager to the db adapter instance\n    $connection-&gt;setEventsManager($eventsManager);\n\n    return $connection;\n});\n</pre> <p>Profiling some queries:</p> <pre class=\"highlight-php\" data-language=\"php\">// Send some SQL statements to the database\nRobots::find();\nRobots::find(\n    array(\n        \"order\" =&gt; \"name\"\n    )\n);\nRobots::find(\n    array(\n        \"limit\" =&gt; 30\n    )\n);\n\n// Get the generated profiles from the profiler\n$profiles = $di-&gt;get('profiler')-&gt;getProfiles();\n\nforeach ($profiles as $profile) {\n   echo \"SQL Statement: \", $profile-&gt;getSQLStatement(), \"\\n\";\n   echo \"Start Time: \", $profile-&gt;getInitialTime(), \"\\n\";\n   echo \"Final Time: \", $profile-&gt;getFinalTime(), \"\\n\";\n   echo \"Total Elapsed Time: \", $profile-&gt;getTotalElapsedSeconds(), \"\\n\";\n}\n</pre> <p>Each generated profile contains the duration in milliseconds that each instruction takes to complete as well as the generated SQL statement.</p>   <h2 id=\"injecting-services-into-models\">Injecting services into Models</h2> <p>You may be required to access the application services within a model, the following example explains how to do that:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function notSaved()\n    {\n        // Obtain the flash service from the DI container\n        $flash = $this-&gt;getDI()-&gt;getFlash();\n\n        // Show validation messages\n        foreach ($this-&gt;getMessages() as $message) {\n            $flash-&gt;error($message);\n        }\n    }\n}\n</pre> <p>The “notSaved” event is triggered every time that a “create” or “update” action fails. So we’re flashing the validation messages obtaining the “flash” service from the DI container. By doing this, we don’t have to print messages after each save.</p>   <h2 id=\"disabling-enabling-features\">Disabling/Enabling Features</h2> <p>In the ORM we have implemented a mechanism that allow you to enable/disable specific features or options globally on the fly. According to how you use the ORM you can disable that you aren’t using. These options can also be temporarily disabled if required:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n\nModel::setup(\n    array(\n        'events'         =&gt; false,\n        'columnRenaming' =&gt; false\n    )\n);\n</pre> <p>The available options are:</p> <table class=\"docutils\"> <colgroup> <col width=\"17%\"> <col width=\"71%\"> <col width=\"12%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option</th> <th class=\"head\">Description</th> <th class=\"head\">Default</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>events</td> <td>Enables/Disables callbacks, hooks and event notifications from all the models</td> <td><code class=\"code docutils literal\"><span class=\"pre\">true</span></code></td> </tr> <tr class=\"row-odd\">\n<td>columnRenaming</td> <td>Enables/Disables the column renaming</td> <td><code class=\"code docutils literal\"><span class=\"pre\">true</span></code></td> </tr> <tr class=\"row-even\">\n<td>notNullValidations</td> <td>The ORM automatically validate the not null columns present in the mapped table</td> <td><code class=\"code docutils literal\"><span class=\"pre\">true</span></code></td> </tr> <tr class=\"row-odd\">\n<td>virtualForeignKeys</td> <td>Enables/Disables the virtual foreign keys</td> <td><code class=\"code docutils literal\"><span class=\"pre\">true</span></code></td> </tr> <tr class=\"row-even\">\n<td>phqlLiterals</td> <td>Enables/Disables literals in the PHQL parser</td> <td><code class=\"code docutils literal\"><span class=\"pre\">true</span></code></td> </tr> <tr class=\"row-odd\">\n<td>lateStateBinding</td> <td>Enables/Disables late state binding of the method <code class=\"code docutils literal\"><span class=\"pre\">Mvc\\Model::cloneResultMap()</span></code>\n</td> <td><code class=\"code docutils literal\"><span class=\"pre\">false</span></code></td> </tr> </tbody> </table>   <h2 id=\"stand-alone-component\">Stand-Alone component</h2> <p>Using <a class=\"reference internal\" href=\"models\"><em>Phalcon\\Mvc\\Model</em></a> in a stand-alone mode can be demonstrated below:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Di;\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Manager as ModelsManager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Sqlite as Connection;\nuse Phalcon\\Mvc\\Model\\Metadata\\Memory as MetaData;\n\n$di = new Di();\n\n// Setup a connection\n$di-&gt;set(\n    'db',\n    new Connection(\n        array(\n            \"dbname\" =&gt; \"sample.db\"\n        )\n    )\n);\n\n// Set a models manager\n$di-&gt;set('modelsManager', new ModelsManager());\n\n// Use the memory meta-data adapter or other\n$di-&gt;set('modelsMetadata', new MetaData());\n\n// Create a model\nclass Robots extends Model\n{\n\n}\n\n// Use the model\necho Robots::count();\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/models.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/models.html</a>\n  </p>\n</div>\n","reference/security":"<h1 id=\"security\">Security</h1> <p>This component aids the developer in common security tasks such as password hashing and Cross-Site Request Forgery protection (CSRF).</p>  <h2 id=\"password-hashing\">Password Hashing</h2> <p>Storing passwords in plain text is a bad security practice. Anyone with access to the database will immediately have access to all user accounts thus being able to engage in unauthorized activities. To combat that, many applications use the familiar one way hashing methods “<a class=\"reference external\" href=\"http://php.net/manual/en/function.md5.php\">md5</a>” and “<a class=\"reference external\" href=\"http://php.net/manual/en/function.sha1.php\">sha1</a>”. However, hardware evolves each day, and becomes faster, these algorithms are becoming vulnerable to brute force attacks. These attacks are also known as <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Rainbow_table\">rainbow tables</a>.</p> <p>To solve this problem we can use hash algorithms as <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Bcrypt\">bcrypt</a>. Why bcrypt? Thanks to its “<a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Bcrypt#Algorithm\">Eksblowfish</a>” key setup algorithm we can make the password encryption as “slow” as we want. Slow algorithms make the process to calculate the real password behind a hash extremely difficult if not impossible. This will protect your for a long time from a possible attack using rainbow tables.</p> <p>This component gives you the ability to use this algorithm in a simple way:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function registerAction()\n    {\n        $user = new Users();\n\n        $login    = $this-&gt;request-&gt;getPost('login');\n        $password = $this-&gt;request-&gt;getPost('password');\n\n        $user-&gt;login = $login;\n\n        // Store the password hashed\n        $user-&gt;password = $this-&gt;security-&gt;hash($password);\n\n        $user-&gt;save();\n    }\n}\n</pre> <p>We saved the password hashed with a default work factor. A higher work factor will make the password less vulnerable as its encryption will be slow. We can check if the password is correct as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass SessionController extends Controller\n{\n    public function loginAction()\n    {\n        $login    = $this-&gt;request-&gt;getPost('login');\n        $password = $this-&gt;request-&gt;getPost('password');\n\n        $user = Users::findFirstByLogin($login);\n        if ($user) {\n            if ($this-&gt;security-&gt;checkHash($password, $user-&gt;password)) {\n                // The password is valid\n            }\n        } else {\n            // To protect against timing attacks. Regardless of whether a user exists or not, the script will take roughly the same amount as it will always be computing a hash.\n            $this-&gt;security-&gt;hash(rand());\n        }\n\n        // The validation has failed\n    }\n}\n</pre> <p>The salt is generated using pseudo-random bytes with the PHP’s function <a class=\"reference external\" href=\"http://php.net/manual/en/function.openssl-random-pseudo-bytes.php\">openssl_random_pseudo_bytes</a> so is required to have the <a class=\"reference external\" href=\"http://php.net/manual/en/book.openssl.php\">openssl</a> extension loaded.</p>   <h2 id=\"cross-site-request-forgery-csrf-protection\">Cross-Site Request Forgery (CSRF) protection</h2> <p>This is another common attack against web sites and applications. Forms designed to perform tasks such as user registration or adding comments are vulnerable to this attack.</p> <p>The idea is to prevent the form values from being sent outside our application. To fix this, we generate a <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Cryptographic_nonce\">random nonce</a> (token) in each form, add the token in the session and then validate the token once the form posts data back to our application by comparing the stored token in the session to the one submitted by the form:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;?php echo Tag::form('session/login') ?&gt;\n\n    &lt;!-- Login and password inputs ... --&gt;\n\n    &lt;input type=\"hidden\" name=\"&lt;?php echo $this-&gt;security-&gt;getTokenKey() ?&gt;\"\n        value=\"&lt;?php echo $this-&gt;security-&gt;getToken() ?&gt;\"/&gt;\n\n&lt;/form&gt;\n</pre> <p>Then in the controller’s action you can check if the CSRF token is valid:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass SessionController extends Controller\n{\n    public function loginAction()\n    {\n        if ($this-&gt;request-&gt;isPost()) {\n            if ($this-&gt;security-&gt;checkToken()) {\n                // The token is OK\n            }\n        }\n    }\n}\n</pre> <p>Remember to add a session adapter to your Dependency Injector, otherwise the token check won’t work:</p> <pre class=\"highlight-php\" data-language=\"php\">$di-&gt;setShared('session', function () {\n    $session = new Phalcon\\Session\\Adapter\\Files();\n    $session-&gt;start();\n    return $session;\n});\n</pre> <p>Adding a <a class=\"reference external\" href=\"http://www.google.com/recaptcha\">captcha</a> to the form is also recommended to completely avoid the risks of this attack.</p>   <h2 id=\"setting-up-the-component\">Setting up the component</h2> <p>This component is automatically registered in the services container as ‘security’, you can re-register it to setup its options:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Security;\n\n$di-&gt;set('security', function () {\n\n    $security = new Security();\n\n    // Set the password hashing factor to 12 rounds\n    $security-&gt;setWorkFactor(12);\n\n    return $security;\n}, true);\n</pre>   <h2 id=\"random\">Random</h2> <p>The <a class=\"reference internal\" href=\"../api/phalcon_security_random\"><em>Phalcon\\Security\\Random</em></a> class makes it really easy to generate lots of types of random data.</p> <pre class=\"highlight-php\" data-language=\"php\">$random = new \\Phalcon\\Security\\Random();\n\n// ...\n$bytes      = $random-&gt;bytes();\n\n// Generate a random hex string of length $len.\n$hex        = $random-&gt;hex($len);\n\n// Generate a random base64 string of length $len.\n$base64     = $random-&gt;base64($len);\n\n// Generate a random URL-safe base64 string of length $len.\n$base64Safe = $random-&gt;base64Safe($len);\n\n// Generate a UUID (version 4). See https://en.wikipedia.org/wiki/Universally_unique_identifier\n$uuid       = $random-&gt;uuid();\n\n// Generate a random integer between 0 and $n.\n$number     = $random-&gt;number($n);\n</pre>   <h2 id=\"external-resources\">External Resources</h2> <ul class=\"simple\"> <li>\n<a class=\"reference external\" href=\"http://vokuro.phalconphp.com\">Vökuró</a>, is a sample application that uses the Security component for avoid CSRF and password hashing, [<a class=\"reference external\" href=\"https://github.com/phalcon/vokuro\">Github</a>]</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/security.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/security.html</a>\n  </p>\n</div>\n","reference/translate":"<h1 id=\"multi-lingual-support\">Multi-lingual Support</h1> <p>The component <a class=\"reference internal\" href=\"../api/phalcon_translate\"><em>Phalcon\\Translate</em></a> aids in creating multilingual applications. Applications using this component, display content in different languages, based on the user’s chosen language supported by the application.</p>  <h2 id=\"adapters\">Adapters</h2> <p>This component makes use of adapters to read translation messages from different sources in a unified way.</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"87%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Adapter</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>NativeArray</td> <td>Uses PHP arrays to store the messages. This is the best option in terms of performance.</td> </tr> </tbody> </table>   <h2 id=\"component-usage\">Component Usage</h2> <p>Translation strings are stored in files. The structure of these files could vary depending of the adapter used. Phalcon gives you the freedom to organize your translation strings. A simple structure could be:</p> <pre class=\"highlight-bash\" data-language=\"bash\">app/messages/en.php\napp/messages/es.php\napp/messages/fr.php\napp/messages/zh.php\n</pre> <p>Each file contains an array of the translations in a key/value manner. For each translation file, keys are unique. The same array is used in different files, where keys remain the same and values contain the translated strings depending on each language.</p> <pre class=\"highlight-php\" data-language=\"php\">// app/messages/es.php\n$messages = array(\n    \"hi\"      =&gt; \"Hello\",\n    \"bye\"     =&gt; \"Good Bye\",\n    \"hi-name\" =&gt; \"Hello %name%\",\n    \"song\"    =&gt; \"This song is %song%\"\n);\n</pre> <pre class=\"highlight-php\" data-language=\"php\">// app/messages/fr.php\n$messages = array(\n    \"hi\"      =&gt; \"Bonjour\",\n    \"bye\"     =&gt; \"Au revoir\",\n    \"hi-name\" =&gt; \"Bonjour %name%\",\n    \"song\"    =&gt; \"La chanson est %song%\"\n);\n</pre> <p>Implementing the translation mechanism in your application is trivial but depends on how you wish to implement it. You can use an automatic detection of the language from the user’s browser or you can provide a settings page where the user can select their language.</p> <p>A simple way of detecting the user’s language is to parse the <code class=\"code docutils literal\"><span class=\"pre\">$_SERVER['HTTP_ACCEPT_LANGUAGE']</span></code> contents, or if you wish, access it directly by calling <code class=\"code docutils literal\"><span class=\"pre\">$this-&gt;request-&gt;getBestLanguage()</span></code> from an action/controller:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\nuse Phalcon\\Translate\\Adapter\\NativeArray;\n\nclass UserController extends Controller\n{\n    protected function getTranslation()\n    {\n        // Ask browser what is the best language\n        $language = $this-&gt;request-&gt;getBestLanguage();\n\n        // Check if we have a translation file for that lang\n        if (file_exists(\"app/messages/\" . $language . \".php\")) {\n            require \"app/messages/\" . $language . \".php\";\n        } else {\n            // Fallback to some default\n            require \"app/messages/en.php\";\n        }\n\n        // Return a translation object\n        return new NativeArray(\n            array(\n                \"content\" =&gt; $messages\n            )\n        );\n    }\n\n    public function indexAction()\n    {\n        $this-&gt;view-&gt;name = \"Mike\";\n        $this-&gt;view-&gt;t    = $this-&gt;getTranslation();\n    }\n}\n</pre> <p>The <code class=\"code docutils literal\"><span class=\"pre\">_getTranslation()</span></code> method is available for all actions that require translations. The <code class=\"code docutils literal\"><span class=\"pre\">$t</span></code> variable is passed to the views, and with it, we can translate strings in that layer:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;!-- welcome --&gt;\n&lt;!-- String: hi =&gt; 'Hello' --&gt;\n&lt;p&gt;&lt;?php echo $t-&gt;_(\"hi\"), \" \", $name; ?&gt;&lt;/p&gt;\n</pre> <p>The <code class=\"code docutils literal\"><span class=\"pre\">_()</span></code> method is returning the translated string based on the index passed. Some strings need to incorporate placeholders for calculated data i.e. Hello %name%. These placeholders can be replaced with passed parameters in the <code class=\"code docutils literal\"><span class=\"pre\">_()</span></code> method. The passed parameters are in the form of a key/value array, where the key matches the placeholder name and the value is the actual data to be replaced:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;!-- welcome --&gt;\n&lt;!-- String: hi-name =&gt; 'Hello %name%' --&gt;\n&lt;p&gt;&lt;?php echo $t-&gt;_(\"hi-name\", array(\"name\" =&gt; $name)); ?&gt;&lt;/p&gt;\n</pre> <p>Some applications implement multilingual on the URL such as <a class=\"reference external\" href=\"http://www.mozilla.org/\">http://www.mozilla.org/</a><strong>es-ES</strong>/firefox/. Phalcon can implement this by using a <a class=\"reference internal\" href=\"routing\"><em>Router</em></a>.</p>   <h2 id=\"implementing-your-own-adapters\">Implementing your own adapters</h2> <p>The <a class=\"reference internal\" href=\"../api/phalcon_translate_adapterinterface\"><em>Phalcon\\Translate\\AdapterInterface</em></a> interface must be implemented in order to create your own translate adapters or extend the existing ones:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Translate\\AdapterInterface;\n\nclass MyTranslateAdapter implements AdapterInterface\n{\n    /**\n     * Adapter constructor\n     *\n     * @param array $data\n     */\n    public function __construct($options);\n\n    /**\n     * Returns the translation string of the given key\n     *\n     * @param   string $translateKey\n     * @param   array $placeholders\n     * @return  string\n     */\n    public function _($translateKey, $placeholders = null);\n\n    /**\n     * Returns the translation related to the given key\n     *\n     * @param   string $index\n     * @param   array $placeholders\n     * @return  string\n     */\n    public function query($index, $placeholders = null);\n\n    /**\n     * Check whether is defined a translation key in the internal array\n     *\n     * @param   string $index\n     * @return  bool\n     */\n    public function exists($index);\n}\n</pre> <p>There are more adapters available for this components in the <a class=\"reference external\" href=\"https://github.com/phalcon/incubator/tree/master/Library/Phalcon/Translate/Adapter\">Phalcon Incubator</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/translate.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/translate.html</a>\n  </p>\n</div>\n","reference/forms":"<h1 id=\"forms\">Forms</h1> <p><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Forms</span></code> is a component that aids you in the creation and maintenance of forms in web applications.</p> <p>The following example shows its basic usage:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Select;\n\n$form = new Form();\n\n$form-&gt;add(new Text(\"name\"));\n\n$form-&gt;add(new Text(\"telephone\"));\n\n$form-&gt;add(\n    new Select(\n        \"telephoneType\",\n        array(\n            'H' =&gt; 'Home',\n            'C' =&gt; 'Cell'\n        )\n    )\n);\n</pre> <p>Forms can be rendered based on the form definition:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;h1&gt;Contacts&lt;/h1&gt;\n\n&lt;form method=\"post\"&gt;\n\n    &lt;p&gt;\n        &lt;label&gt;Name&lt;/label&gt;\n        &lt;?php echo $form-&gt;render(\"name\"); ?&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;label&gt;Telephone&lt;/label&gt;\n        &lt;?php echo $form-&gt;render(\"telephone\"); ?&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;label&gt;Type&lt;/label&gt;\n        &lt;?php echo $form-&gt;render(\"telephoneType\"); ?&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;input type=\"submit\" value=\"Save\" /&gt;\n    &lt;/p&gt;\n\n&lt;/form&gt;\n</pre> <p>Each element in the form can be rendered as required by the developer. Internally, <a class=\"reference internal\" href=\"../api/phalcon_tag\"><em>Phalcon\\Tag</em></a> is used to produce the correct HTML for each element and you can pass additional HTML attributes as the second parameter of <code class=\"code docutils literal\"><span class=\"pre\">render()</span></code>:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;p&gt;\n    &lt;label&gt;Name&lt;/label&gt;\n    &lt;?php echo $form-&gt;render(\"name\", array('maxlength' =&gt; 30, 'placeholder' =&gt; 'Type your name')); ?&gt;\n&lt;/p&gt;\n</pre> <p>HTML attributes also can be set in the element’s definition:</p> <pre class=\"highlight-php\" data-language=\"php\">$form-&gt;add(\n    new Text(\n        \"name\",\n        array(\n            'maxlength'   =&gt; 30,\n            'placeholder' =&gt; 'Type your name'\n        )\n    )\n);\n</pre>  <h2 id=\"initializing-forms\">Initializing forms</h2> <p>As seen before, forms can be initialized outside the form class by adding elements to it. You can re-use code or organize your form classes implementing the form in a separated file:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Select;\n\nclass ContactForm extends Form\n{\n    public function initialize()\n    {\n        $this-&gt;add(new Text(\"name\"));\n\n        $this-&gt;add(new Text(\"telephone\"));\n\n        $this-&gt;add(\n            new Select(\n                \"telephoneType\",\n                TelephoneTypes::find(),\n                array(\n                    'using' =&gt; array(\n                        'id',\n                        'name'\n                    )\n                )\n            )\n        );\n    }\n}\n</pre> <p><a class=\"reference internal\" href=\"../api/phalcon_forms_form\"><em>Phalcon\\Forms\\Form</em></a> extends <a class=\"reference internal\" href=\"../api/phalcon_di_injectable\"><em>Phalcon\\Di\\Injectable</em></a> so you have access to the application services if needed:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Hidden;\n\nclass ContactForm extends Form\n{\n    /**\n     * This method returns the default value for field 'csrf'\n     */\n    public function getCsrf()\n    {\n        return $this-&gt;security-&gt;getToken();\n    }\n\n    public function initialize()\n    {\n        // Set the same form as entity\n        $this-&gt;setEntity($this);\n\n        // Add a text element to capture the 'email'\n        $this-&gt;add(new Text(\"email\"));\n\n        // Add a text element to put a hidden CSRF\n        $this-&gt;add(new Hidden(\"csrf\"));\n    }\n}\n</pre> <p>The associated entity added to the form in the initialization and custom user options are passed to the form constructor:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Hidden;\n\nclass UsersForm extends Form\n{\n    /**\n     * Forms initializer\n     *\n     * @param Users $user\n     * @param array $options\n     */\n    public function initialize(Users $user, $options)\n    {\n        if ($options['edit']) {\n            $this-&gt;add(new Hidden('id'));\n        } else {\n            $this-&gt;add(new Text('id'));\n        }\n\n        $this-&gt;add(new Text('name'));\n    }\n}\n</pre> <p>In the form’s instantiation you must use:</p> <pre class=\"highlight-php\" data-language=\"php\">$form = new UsersForm(\n    new Users(),\n    array(\n        'edit' =&gt; true\n    )\n);\n</pre>   <h2 id=\"validation\">Validation</h2> <p>Phalcon forms are integrated with the <a class=\"reference internal\" href=\"validation\"><em>validation</em></a> component to offer instant validation. Built-in or custom validators could be set to each element:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\nuse Phalcon\\Validation\\Validator\\StringLength;\n\n$name = new Text(\"name\");\n\n$name-&gt;addValidator(\n    new PresenceOf(\n        array(\n            'message' =&gt; 'The name is required'\n        )\n    )\n);\n\n$name-&gt;addValidator(\n    new StringLength(\n        array(\n            'min'            =&gt; 10,\n            'messageMinimum' =&gt; 'The name is too short'\n        )\n    )\n);\n\n$form-&gt;add($name);\n</pre> <p>Then you can validate the form according to the input entered by the user:</p> <pre class=\"highlight-php\" data-language=\"php\">if (!$form-&gt;isValid($_POST)) {\n    foreach ($form-&gt;getMessages() as $message) {\n        echo $message, '&lt;br&gt;';\n    }\n}\n</pre> <p>Validators are executed in the same order as they were registered.</p> <p>By default messages generated by all the elements in the form are joined so they can be traversed using a single foreach, you can change this behavior to get the messages separated by the field:</p> <pre class=\"highlight-php\" data-language=\"php\">foreach ($form-&gt;getMessages(false) as $attribute =&gt; $messages) {\n    echo 'Messages generated by ', $attribute, ':', \"\\n\";\n\n    foreach ($messages as $message) {\n        echo $message, '&lt;br&gt;';\n    }\n}\n</pre> <p>Or get specific messages for an element:</p> <pre class=\"highlight-php\" data-language=\"php\">foreach ($form-&gt;getMessagesFor('name') as $message) {\n    echo $message, '&lt;br&gt;';\n}\n</pre>   <h2 id=\"filtering\">Filtering</h2> <p>A form is also able to filter data before it is validated. You can set filters in each element:</p>   <h2 id=\"setting-user-options\">Setting User Options</h2>   <h2 id=\"forms-entities\">Forms + Entities</h2> <p>An entity such as a model/collection/plain instance or just a plain PHP class can be linked to the form in order to set default values in the form’s elements or assign the values from the form to the entity easily:</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = Robots::findFirst();\n\n$form = new Form($robot);\n\n$form-&gt;add(new Text(\"name\"));\n\n$form-&gt;add(new Text(\"year\"));\n</pre> <p>Once the form is rendered if there is no default values assigned to the elements it will use the ones provided by the entity:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;?php echo $form-&gt;render('name'); ?&gt;\n</pre> <p>You can validate the form and assign the values from the user input in the following way:</p> <pre class=\"highlight-php\" data-language=\"php\">$form-&gt;bind($_POST, $robot);\n\n// Check if the form is valid\nif ($form-&gt;isValid()) {\n\n    // Save the entity\n    $robot-&gt;save();\n}\n</pre> <p>Setting up a plain class as entity also is possible:</p> <pre class=\"highlight-php\" data-language=\"php\">class Preferences\n{\n    public $timezone = 'Europe/Amsterdam';\n\n    public $receiveEmails = 'No';\n}\n</pre> <p>Using this class as entity, allows the form to take the default values from it:</p> <pre class=\"highlight-php\" data-language=\"php\">$form = new Form(new Preferences());\n\n$form-&gt;add(\n    new Select(\n        \"timezone\",\n        array(\n            'America/New_York'  =&gt; 'New York',\n            'Europe/Amsterdam'  =&gt; 'Amsterdam',\n            'America/Sao_Paulo' =&gt; 'Sao Paulo',\n            'Asia/Tokyo'        =&gt; 'Tokyo'\n        )\n    )\n);\n\n$form-&gt;add(\n    new Select(\n        \"receiveEmails\",\n        array(\n            'Yes' =&gt; 'Yes, please!',\n            'No'  =&gt; 'No, thanks'\n        )\n    )\n);\n</pre> <p>Entities can implement getters, which have a higher precedence than public properties. These methods give you more freedom to produce values:</p> <pre class=\"highlight-php\" data-language=\"php\">class Preferences\n{\n    public $timezone;\n\n    public $receiveEmails;\n\n    public function getTimezone()\n    {\n        return 'Europe/Amsterdam';\n    }\n\n    public function getReceiveEmails()\n    {\n        return 'No';\n    }\n}\n</pre>   <h2 id=\"form-elements\">Form Elements</h2> <p>Phalcon provides a set of built-in elements to use in your forms, all these elements are located in the <a class=\"reference internal\" href=\"../api/phalcon_forms_element\"><em>Phalcon\\Forms\\Element</em></a> namespace:</p> <table class=\"docutils\"> <colgroup> <col width=\"6%\"> <col width=\"67%\"> <col width=\"28%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\">Description</th> <th class=\"head\">Example</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Text</td> <td>Generate INPUT[type=text] elements</td> <td><a class=\"reference internal\" href=\"../api/phalcon_forms_element_text\"><em>Example</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Password</td> <td>Generate INPUT[type=password] elements</td> <td><a class=\"reference internal\" href=\"../api/phalcon_forms_element_password\"><em>Example</em></a></td> </tr> <tr class=\"row-even\">\n<td>Select</td> <td>Generate SELECT tag (combo lists) elements based on choices</td> <td><a class=\"reference internal\" href=\"../api/phalcon_forms_element_select\"><em>Example</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Check</td> <td>Generate INPUT[type=check] elements</td> <td><a class=\"reference internal\" href=\"../api/phalcon_forms_element_check\"><em>Example</em></a></td> </tr> <tr class=\"row-even\">\n<td>Textarea</td> <td>Generate TEXTAREA elements</td> <td><a class=\"reference internal\" href=\"../api/phalcon_forms_element_textarea\"><em>Example</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Hidden</td> <td>Generate INPUT[type=hidden] elements</td> <td><a class=\"reference internal\" href=\"../api/phalcon_forms_element_hidden\"><em>Example</em></a></td> </tr> <tr class=\"row-even\">\n<td>File</td> <td>Generate INPUT[type=file] elements</td> <td><a class=\"reference internal\" href=\"../api/phalcon_forms_element_file\"><em>Example</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Date</td> <td>Generate INPUT[type=date] elements</td> <td><a class=\"reference internal\" href=\"../api/phalcon_forms_element_date\"><em>Example</em></a></td> </tr> <tr class=\"row-even\">\n<td>Numeric</td> <td>Generate INPUT[type=number] elements</td> <td><a class=\"reference internal\" href=\"../api/phalcon_forms_element_numeric\"><em>Example</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Submit</td> <td>Generate INPUT[type=submit] elements</td> <td><a class=\"reference internal\" href=\"../api/phalcon_forms_element_submit\"><em>Example</em></a></td> </tr> </tbody> </table>   <h2 id=\"event-callbacks\">Event Callbacks</h2> <p>Whenever forms are implemented as classes, the callbacks: <code class=\"code docutils literal\"><span class=\"pre\">beforeValidation()</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">afterValidation()</span></code> can be implemented in the form’s class to perform pre-validations and post-validations:</p> <pre class=\"highlight-html+php\" data-language=\"html\">use Phalcon\\Forms\\Form;\n\nclass ContactForm extends Form\n{\n    public function beforeValidation()\n    {\n\n    }\n}\n</pre>   <h2 id=\"rendering-forms\">Rendering Forms</h2> <p>You can render the form with total flexibility, the following example shows how to render each element using a standard procedure:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;?php\n\n&lt;form method=\"post\"&gt;\n    &lt;?php\n        // Traverse the form\n        foreach ($form as $element) {\n\n            // Get any generated messages for the current element\n            $messages = $form-&gt;getMessagesFor($element-&gt;getName());\n\n            if (count($messages)) {\n                // Print each element\n                echo '&lt;div class=\"messages\"&gt;';\n                foreach ($messages as $message) {\n                    echo $message;\n                }\n                echo '&lt;/div&gt;';\n            }\n\n            echo '&lt;p&gt;';\n            echo '&lt;label for=\"', $element-&gt;getName(), '\"&gt;', $element-&gt;getLabel(), '&lt;/label&gt;';\n            echo $element;\n            echo '&lt;/p&gt;';\n\n        }\n    ?&gt;\n    &lt;input type=\"submit\" value=\"Send\"/&gt;\n&lt;/form&gt;\n</pre> <p>Or reuse the logic in your form class:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Forms\\Form;\n\nclass ContactForm extends Form\n{\n    public function initialize()\n    {\n        // ...\n    }\n\n    public function renderDecorated($name)\n    {\n        $element  = $this-&gt;get($name);\n\n        // Get any generated messages for the current element\n        $messages = $this-&gt;getMessagesFor($element-&gt;getName());\n\n        if (count($messages)) {\n            // Print each element\n            echo '&lt;div class=\"messages\"&gt;';\n            foreach ($messages as $message) {\n                echo $this-&gt;flash-&gt;error($message);\n            }\n            echo '&lt;/div&gt;';\n        }\n\n        echo '&lt;p&gt;';\n        echo '&lt;label for=\"', $element-&gt;getName(), '\"&gt;', $element-&gt;getLabel(), '&lt;/label&gt;';\n        echo $element;\n        echo '&lt;/p&gt;';\n    }\n}\n</pre> <p>In the view:</p> <pre class=\"highlight-php\" data-language=\"php\">echo $element-&gt;renderDecorated('name');\n\necho $element-&gt;renderDecorated('telephone');\n</pre>   <h2 id=\"creating-form-elements\">Creating Form Elements</h2> <p>In addition to the form elements provided by Phalcon you can create your own custom elements:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Forms\\Element;\n\nclass MyElement extends Element\n{\n    public function render($attributes = null)\n    {\n        $html = // ... Produce some HTML\n        return $html;\n    }\n}\n</pre>   <h2 id=\"forms-manager\">Forms Manager</h2> <p>This component provides a forms manager that can be used by the developer to register forms and access them via the service locator:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Forms\\Manager as FormsManager;\n\n$di['forms'] = function () {\n    return new FormsManager();\n};\n</pre> <p>Forms are added to the forms manager and referenced by a unique name:</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;forms-&gt;set('login', new LoginForm());\n</pre> <p>Using the unique name, forms can be accessed in any part of the application:</p> <pre class=\"highlight-php\" data-language=\"php\">echo $this-&gt;forms-&gt;get('login')-&gt;render();\n</pre>   <h2 id=\"external-resources\">External Resources</h2> <ul class=\"simple\"> <li>\n<a class=\"reference external\" href=\"http://vokuro.phalconphp.com\">Vökuró</a>, is a sample application that uses the forms builder to create and manage forms, [<a class=\"reference external\" href=\"https://github.com/phalcon/vokuro\">Github</a>]</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/forms.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/forms.html</a>\n  </p>\n</div>\n","reference/loader":"<h1 id=\"universal-class-loader\">Universal Class Loader</h1> <p><a class=\"reference internal\" href=\"../api/phalcon_loader\"><em>Phalcon\\Loader</em></a> is a component that allows you to load project classes automatically, based on some predefined rules. Since this component is written in C, it provides the lowest overhead in reading and interpreting external PHP files.</p> <p>The behavior of this component is based on the PHP’s capability of <a class=\"reference external\" href=\"http://www.php.net/manual/en/language.oop5.autoload.php\">autoloading classes</a>. If a class that does not exist is used in any part of the code, a special handler will try to load it. <a class=\"reference internal\" href=\"../api/phalcon_loader\"><em>Phalcon\\Loader</em></a> serves as the special handler for this operation. By loading classes on a need to load basis, the overall performance is increased since the only file reads that occur are for the files needed. This technique is called <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Lazy_initialization\">lazy initialization</a>.</p> <p>With this component you can load files from other projects or vendors, this autoloader is <a class=\"reference external\" href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md\">PSR-0</a> and <a class=\"reference external\" href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4.md\">PSR-4</a> compliant.</p> <p><a class=\"reference internal\" href=\"../api/phalcon_loader\"><em>Phalcon\\Loader</em></a> offers four options to autoload classes. You can use them one at a time or combine them.</p>  <h2 id=\"registering-namespaces\">Registering Namespaces</h2> <p>If you’re organizing your code using namespaces, or external libraries do so, the registerNamespaces() provides the autoloading mechanism. It takes an associative array, which keys are namespace prefixes and their values are directories where the classes are located in. The namespace separator will be replaced by the directory separator when the loader try to find the classes. Remember always to add a trailing slash at the end of the paths.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Loader;\n\n// Creates the autoloader\n$loader = new Loader();\n\n// Register some namespaces\n$loader-&gt;registerNamespaces(\n    array(\n       \"Example\\Base\"    =&gt; \"vendor/example/base/\",\n       \"Example\\Adapter\" =&gt; \"vendor/example/adapter/\",\n       \"Example\"         =&gt; \"vendor/example/\"\n    )\n);\n\n// Register autoloader\n$loader-&gt;register();\n\n// The required class will automatically include the\n// file vendor/example/adapter/Some.php\n$some = new Example\\Adapter\\Some();\n</pre>   <h2 id=\"registering-prefixes\">Registering Prefixes</h2> <p>This strategy is similar to the namespaces strategy. It takes an associative array, which keys are prefixes and their values are directories where the classes are located in. The namespace separator and the “_” underscore character will be replaced by the directory separator when the loader try to find the classes. Remember always to add a trailing slash at the end of the paths.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Loader;\n\n// Creates the autoloader\n$loader = new Loader();\n\n// Register some prefixes\n$loader-&gt;registerPrefixes(\n    array(\n        \"Example_Base\"    =&gt; \"vendor/example/base/\",\n        \"Example_Adapter\" =&gt; \"vendor/example/adapter/\",\n        \"Example_\"        =&gt; \"vendor/example/\"\n    )\n);\n\n// Register autoloader\n$loader-&gt;register();\n\n// The required class will automatically include the\n// file vendor/example/adapter/Some.php\n$some = new Example_Adapter_Some();\n</pre>   <h2 id=\"registering-directories\">Registering Directories</h2> <p>The third option is to register directories, in which classes could be found. This option is not recommended in terms of performance, since Phalcon will need to perform a significant number of file stats on each folder, looking for the file with the same name as the class. It’s important to register the directories in relevance order. Remember always add a trailing slash at the end of the paths.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Loader;\n\n// Creates the autoloader\n$loader = new Loader();\n\n// Register some directories\n$loader-&gt;registerDirs(\n    array(\n        \"library/MyComponent/\",\n        \"library/OtherComponent/Other/\",\n        \"vendor/example/adapters/\",\n        \"vendor/example/\"\n    )\n);\n\n// Register autoloader\n$loader-&gt;register();\n\n// The required class will automatically include the file from\n// the first directory where it has been located\n// i.e. library/OtherComponent/Other/Some.php\n$some = new Some();\n</pre>   <h2 id=\"registering-classes\">Registering Classes</h2> <p>The last option is to register the class name and its path. This autoloader can be very useful when the folder convention of the project does not allow for easy retrieval of the file using the path and the class name. This is the fastest method of autoloading. However the more your application grows, the more classes/files need to be added to this autoloader, which will effectively make maintenance of the class list very cumbersome and it is not recommended.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Loader;\n\n// Creates the autoloader\n$loader = new Loader();\n\n// Register some classes\n$loader-&gt;registerClasses(\n    array(\n        \"Some\"         =&gt; \"library/OtherComponent/Other/Some.php\",\n        \"Example\\Base\" =&gt; \"vendor/example/adapters/Example/BaseClass.php\"\n    )\n);\n\n// Register autoloader\n$loader-&gt;register();\n\n// Requiring a class will automatically include the file it references\n// in the associative array\n// i.e. library/OtherComponent/Other/Some.php\n$some = new Some();\n</pre>   <h2 id=\"additional-file-extensions\">Additional file extensions</h2> <p>Some autoloading strategies such as “prefixes”, “namespaces” or “directories” automatically append the “php” extension at the end of the checked file. If you are using additional extensions you could set it with the method “setExtensions”. Files are checked in the order as it were defined:</p> <pre class=\"highlight-php\" data-language=\"php\">// Creates the autoloader\n$loader = new \\Phalcon\\Loader();\n\n// Set file extensions to check\n$loader-&gt;setExtensions(array(\"php\", \"inc\", \"phb\"));\n</pre>   <h2 id=\"modifying-current-strategies\">Modifying current strategies</h2> <p>Additional auto-loading data can be added to existing values in the following way:</p> <pre class=\"highlight-php\" data-language=\"php\">// Adding more directories\n$loader-&gt;registerDirs(\n    array(\n        \"../app/library/\",\n        \"../app/plugins/\"\n    ),\n    true\n);\n</pre> <p>Passing “true” as second parameter will merge the current values with new ones in any strategy.</p>   <h2 id=\"security-layer\">Security Layer</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_loader\"><em>Phalcon\\Loader</em></a> offers a security layer sanitizing by default class names avoiding possible inclusion of unauthorized files. Consider the following example:</p> <pre class=\"highlight-php\" data-language=\"php\">// Basic autoloader\nspl_autoload_register(function ($className) {\n    if (file_exists($className . '.php')) {\n        require $className . '.php';\n    }\n});\n</pre> <p>The above auto-loader lacks of any security check, if by mistake in a function that launch the auto-loader, a malicious prepared string is used as parameter this would allow to execute any file accessible by the application:</p> <pre class=\"highlight-php\" data-language=\"php\">// This variable is not filtered and comes from an insecure source\n$className = '../processes/important-process';\n\n// Check if the class exists triggering the auto-loader\nif (class_exists($className)) {\n    // ...\n}\n</pre> <p>If ‘../processes/important-process.php’ is a valid file, an external user could execute the file without authorization.</p> <p>To avoid these or most sophisticated attacks, <a class=\"reference internal\" href=\"../api/phalcon_loader\"><em>Phalcon\\Loader</em></a> removes any invalid character from the class name reducing the possibility of being attacked.</p>   <h2 id=\"autoloading-events\">Autoloading Events</h2> <p>In the following example, the EventsManager is working with the class loader, allowing us to obtain debugging information regarding the flow of operation:</p> <pre class=\"highlight-php\" data-language=\"php\">$eventsManager = new \\Phalcon\\Events\\Manager();\n\n$loader = new \\Phalcon\\Loader();\n\n$loader-&gt;registerNamespaces(\n    array(\n        'Example\\\\Base'    =&gt; 'vendor/example/base/',\n        'Example\\\\Adapter' =&gt; 'vendor/example/adapter/',\n        'Example'          =&gt; 'vendor/example/'\n    )\n);\n\n// Listen all the loader events\n$eventsManager-&gt;attach('loader', function ($event, $loader) {\n    if ($event-&gt;getType() == 'beforeCheckPath') {\n        echo $loader-&gt;getCheckedPath();\n    }\n});\n\n$loader-&gt;setEventsManager($eventsManager);\n\n$loader-&gt;register();\n</pre> <p>Some events when returning boolean false could stop the active operation. The following events are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"12%\"> <col width=\"38%\"> <col width=\"37%\"> <col width=\"14%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Event Name</th> <th class=\"head\" colspan=\"2\">Triggered</th> <th class=\"head\">Can stop operation?</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>beforeCheckClass</td> <td colspan=\"2\">Triggered before starting the autoloading process</td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>pathFound</td> <td colspan=\"2\">Triggered when the loader locate a class</td> <td>No</td> </tr> <tr class=\"row-even\">\n<td>afterCheckClass</td> <td colspan=\"2\">Triggered after finish the autoloading process. If this event is launched the autoloader didn’t find the class file</td> <td>No</td> </tr> </tbody> </table>   <h2 id=\"troubleshooting\">Troubleshooting</h2> <p>Some things to keep in mind when using the universal autoloader:</p> <ul class=\"simple\"> <li>Auto-loading process is case-sensitive, the class will be loaded as it is written in the code</li> <li>Strategies based on namespaces/prefixes are faster than the directories strategy</li> <li>If a cache bytecode like <a class=\"reference external\" href=\"http://php.net/manual/en/book.apc.php\">APC</a> is installed this will used to retrieve the requested file (an implicit caching of the file is performed)</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/loader.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/loader.html</a>\n  </p>\n</div>\n","reference/queue":"<h1 id=\"queueing\">Queueing</h1> <p>Activities like processing videos, resizing images or sending emails aren’t suitable to be executed online or in real time because it may slow the loading time of pages and severely impact the user experience.</p> <p>The best solution here is to implement background jobs. The web application puts jobs into a queue and which will be processed separately.</p> <p>While you can find more sophisticated PHP extensions to address queueing in your applications like <a class=\"reference external\" href=\"http://pecl.php.net/package/amqp\">RabbitMQ</a>; Phalcon provides a client for <a class=\"reference external\" href=\"http://www.igvita.com/2010/05/20/scalable-work-queues-with-beanstalk/\">Beanstalk</a>, a job queueing backend inspired by <a class=\"reference external\" href=\"http://memcached.org/\">Memcache</a>. It’s simple, lightweight, and completely specialized for job queueing.</p>  <h2 id=\"putting-jobs-into-the-queue\">Putting Jobs into the Queue</h2> <p>After connecting to Beanstalk you can insert as many jobs as required. You can define the message structure according to the needs of the application:</p> <pre class=\"highlight-php\" data-language=\"php\">// Connect to the queue\n$queue = new Phalcon\\Queue\\Beanstalk(\n    array(\n        'host' =&gt; '192.168.0.21',\n        'port' =&gt; '11300'\n    )\n);\n\n// Insert the job in the queue\n$queue-&gt;put(\n    array(\n        'processVideo' =&gt; 4871\n    )\n);\n</pre> <p>Available connection options are:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"73%\"> <col width=\"14%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option</th> <th class=\"head\">Description</th> <th class=\"head\">Default</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>host</td> <td>IP where the beanstalk server is located</td> <td>127.0.0.1</td> </tr> <tr class=\"row-odd\">\n<td>port</td> <td>Connection port</td> <td>11300</td> </tr> </tbody> </table> <p>In the above example we stored a message which will allow a background job to process a video. The message is stored in the queue immediately and does not have a certain time to live.</p> <p>Additional options as time to run, priority and delay can be passed as second parameter:</p> <pre class=\"highlight-php\" data-language=\"php\">// Insert the job in the queue with options\n$queue-&gt;put(\n    array(\n        'processVideo' =&gt; 4871\n    ),\n    array(\n        'priority' =&gt; 250,\n        'delay'    =&gt; 10,\n        'ttr'      =&gt; 3600\n    )\n);\n</pre> <p>The following options are available:</p> <table class=\"docutils\"> <colgroup> <col width=\"5%\"> <col width=\"95%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>priority</td> <td>It’s an integer &lt; 2**32. Jobs with smaller priority values will be scheduled before jobs with larger priorities. The most urgent priority is 0; the least urgent priority is 4,294,967,295.</td> </tr> <tr class=\"row-odd\">\n<td>delay</td> <td>It’s an integer number of seconds to wait before putting the job in the ready queue. The job will be in the “delayed” state during this time.</td> </tr> <tr class=\"row-even\">\n<td>ttr</td> <td>Time to run – is an integer number of seconds to allow a worker to run this job. This time is counted from the moment a worker reserves this job.</td> </tr> </tbody> </table> <p>Every job put into the queue returns a “job id” which you can use to track the status of the job:</p> <pre class=\"highlight-php\" data-language=\"php\">$jobId = $queue-&gt;put(\n    array(\n        'processVideo' =&gt; 4871\n    )\n);\n</pre>   <h2 id=\"retrieving-messages\">Retrieving Messages</h2> <p>Once a job is placed into the queue, those messages can be consumed by a background worker which will have enough time to complete the task:</p> <pre class=\"highlight-php\" data-language=\"php\">while (($job = $queue-&gt;peekReady()) !== false) {\n\n    $message = $job-&gt;getBody();\n\n    var_dump($message);\n\n    $job-&gt;delete();\n}\n</pre> <p>Jobs must be removed from the queue to avoid double processing. If multiple background jobs workers are implemented, jobs must be “reserved” so other workers don’t re-process them while other workers have them reserved:</p> <pre class=\"highlight-php\" data-language=\"php\">while (($job = $queue-&gt;reserve())) {\n\n    $message = $job-&gt;getBody();\n\n    var_dump($message);\n\n    $job-&gt;delete();\n}\n</pre> <p>Our client implement a basic set of the features provided by Beanstalkd but enough to allow you to build applications implementing queues.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/queue.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/queue.html</a>\n  </p>\n</div>\n","reference/intl":"<h1 id=\"internationalization\">Internationalization</h1> <p>Phalcon is written in C as an extension for PHP. There is a <a class=\"reference external\" href=\"http://pecl.php.net/package/intl\">PECL</a> extension that offers internationalization functions to PHP applications called <a class=\"reference external\" href=\"http://pecl.php.net/package/intl\">intl</a>. Starting from PHP 5.4/5.5 this extension is bundled with PHP. Its documentation can be found in the pages of the official <a class=\"reference external\" href=\"http://www.php.net/manual/en/intro.intl.php\">PHP manual</a>.</p> <p>Phalcon does not offer this functionality, since creating such a component would be replicating existing code.</p> <p>In the examples below, we will show you how to implement the <a class=\"reference external\" href=\"http://pecl.php.net/package/intl\">intl</a> extension’s functionality into Phalcon powered applications.</p> <blockquote class=\"highlights\"> <div>This guide is not intended to be a complete documentation of the <a class=\"reference external\" href=\"http://pecl.php.net/package/intl\">intl</a> extension. Please visit its the <a class=\"reference external\" href=\"http://www.php.net/manual/en/book.intl.php\">documentation</a> of the extension for a reference.</div>\n</blockquote>  <h2 id=\"find-out-best-available-locale\">Find out best available Locale</h2> <p>There are several ways to find out the best available locale using <a class=\"reference external\" href=\"http://pecl.php.net/package/intl\">intl</a>. One of them is to check the HTTP “Accept-Language” header:</p> <pre class=\"highlight-php\" data-language=\"php\">$locale = Locale::acceptFromHttp($_SERVER[\"HTTP_ACCEPT_LANGUAGE\"]);\n\n// Locale could be something like \"en_GB\" or \"en\"\necho $locale;\n</pre> <p>Below method returns a locale identified. It is used to get language, culture, or regionally-specific behavior from the Locale API.</p> <p>Examples of identifiers include:</p> <ul class=\"simple\"> <li>en-US (English, United States)</li> <li>ru-RU (Russian, Russia)</li> <li>zh-Hant-TW (Chinese, Traditional Script, Taiwan)</li> <li>fr-CA, fr-FR (French for Canada and France respectively)</li> </ul>   <h2 id=\"formatting-messages-based-on-locale\">Formatting messages based on Locale</h2> <p>Part of creating a localized application is to produce concatenated, language-neutral messages. The <a class=\"reference external\" href=\"http://www.php.net/manual/en/class.messageformatter.php\">MessageFormatter</a> allows for the production of those messages.</p> <p>Printing numbers formatted based on some locale:</p> <pre class=\"highlight-php\" data-language=\"php\">// Prints € 4 560\n$formatter = new MessageFormatter(\"fr_FR\", \"€ {0, number, integer}\");\necho $formatter-&gt;format(array(4560));\n\n// Prints USD$ 4,560.5\n$formatter = new MessageFormatter(\"en_US\", \"USD$ {0, number}\");\necho $formatter-&gt;format(array(4560.50));\n\n// Prints ARS$ 1.250,25\n$formatter = new MessageFormatter(\"es_AR\", \"ARS$ {0, number}\");\necho $formatter-&gt;format(array(1250.25));\n</pre> <p>Message formatting using time and date patterns:</p> <pre class=\"highlight-php\" data-language=\"php\">// Setting parameters\n$time   = time();\n$values = array(7, $time, $time);\n\n// Prints \"At 3:50:31 PM on Apr 19, 2015, there was a disturbance on planet 7.\"\n$pattern   = \"At {1, time} on {1, date}, there was a disturbance on planet {0, number}.\";\n$formatter = new MessageFormatter(\"en_US\", $pattern);\necho $formatter-&gt;format($values);\n\n// Prints \"À 15:53:01 le 19 avr. 2015, il y avait une perturbation sur la planète 7.\"\n$pattern   = \"À {1, time} le {1, date}, il y avait une perturbation sur la planète {0, number}.\";\n$formatter = new MessageFormatter(\"fr_FR\", $pattern);\necho $formatter-&gt;format($values);\n</pre>   <h2 id=\"locale-sensitive-comparison\">Locale-Sensitive comparison</h2> <p>The <a class=\"reference external\" href=\"http://www.php.net/manual/en/class.collator.php\">Collator</a> class provides string comparison capability with support for appropriate locale-sensitive sort orderings. Check the examples below on the usage of this class:</p> <pre class=\"highlight-php\" data-language=\"php\">// Create a collator using Spanish locale\n$collator = new Collator(\"es\");\n\n// Returns that the strings are equal, in spite of the emphasis on the \"o\"\n$collator-&gt;setStrength(Collator::PRIMARY);\nvar_dump($collator-&gt;compare(\"una canción\", \"una cancion\"));\n\n// Returns that the strings are not equal\n$collator-&gt;setStrength(Collator::DEFAULT_VALUE);\nvar_dump($collator-&gt;compare(\"una canción\", \"una cancion\"));\n</pre>   <h2 id=\"transliteration\">Transliteration</h2> <p><a class=\"reference external\" href=\"http://www.php.net/manual/en/class.transliterator.php\">Transliterator</a> provides transliteration of strings:</p> <pre class=\"highlight-php\" data-language=\"php\">$id = \"Any-Latin; NFD; [:Nonspacing Mark:] Remove; NFC; [:Punctuation:] Remove; Lower();\";\n$transliterator = Transliterator::create($id);\n\n$string = \"garçon-étudiant-où-L'école\";\necho $transliterator-&gt;transliterate($string); // garconetudiantoulecole\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/intl.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/intl.html</a>\n  </p>\n</div>\n","api/phalcon_acl":"<h1 id=\"abstract-class-phalcon-acl\">Abstract class <strong>Phalcon\\Acl</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/acl.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"constants\">Constants</h2> <h3 id=\"allow\" class=\"method-signature\">\n<em>integer</em> <strong>ALLOW</strong>\n</h3> <h3 id=\"deny\" class=\"method-signature\">\n<em>integer</em> <strong>DENY</strong>\n</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Acl.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Acl.html</a>\n  </p>\n</div>\n","reference/cli":"<h1 id=\"command-line-applications\">Command Line Applications</h1> <p>CLI applications are executed from the command line. They are useful to create cron jobs, scripts, command utilities and more.</p>  <h2 id=\"structure\">Structure</h2> <p>A minimal structure of a CLI application will look like this:</p> <ul class=\"simple\"> <li>app/config/config.php</li> <li>app/tasks/MainTask.php</li> <li>app/cli.php &lt;– main bootstrap file</li> </ul>   <h2 id=\"creating-a-bootstrap\">Creating a Bootstrap</h2> <p>As in regular MVC applications, a bootstrap file is used to bootstrap the application. Instead of the index.php bootstrapper in web applications, we use a cli.php file for bootstrapping the application.</p> <p>Below is a sample bootstrap that is being used for this example.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Di\\FactoryDefault\\Cli as CliDI,\n    Phalcon\\Cli\\Console as ConsoleApp;\n\ndefine('VERSION', '1.0.0');\n\n// Using the CLI factory default services container\n$di = new CliDI();\n\n// Define path to application directory\ndefined('APPLICATION_PATH')\n|| define('APPLICATION_PATH', realpath(dirname(__FILE__)));\n\n/**\n * Register the autoloader and tell it to register the tasks directory\n */\n$loader = new \\Phalcon\\Loader();\n$loader-&gt;registerDirs(\n    array(\n        APPLICATION_PATH . '/tasks'\n    )\n);\n$loader-&gt;register();\n\n// Load the configuration file (if any)\nif (is_readable(APPLICATION_PATH . '/config/config.php')) {\n    $config = include APPLICATION_PATH . '/config/config.php';\n    $di-&gt;set('config', $config);\n}\n\n// Create a console application\n$console = new ConsoleApp();\n$console-&gt;setDI($di);\n\n/**\n * Process the console arguments\n */\n$arguments = array();\nforeach ($argv as $k =&gt; $arg) {\n    if ($k == 1) {\n        $arguments['task'] = $arg;\n    } elseif ($k == 2) {\n        $arguments['action'] = $arg;\n    } elseif ($k &gt;= 3) {\n        $arguments['params'][] = $arg;\n    }\n}\n\n// Define global constants for the current task and action\ndefine('CURRENT_TASK',   (isset($argv[1]) ? $argv[1] : null));\ndefine('CURRENT_ACTION', (isset($argv[2]) ? $argv[2] : null));\n\ntry {\n    // Handle incoming arguments\n    $console-&gt;handle($arguments);\n} catch (\\Phalcon\\Exception $e) {\n    echo $e-&gt;getMessage();\n    exit(255);\n}\n</pre> <p>This piece of code can be run using:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ php app/cli.php\n\nThis is the default task and the default action\n</pre>   <h2 id=\"tasks\">Tasks</h2> <p>Tasks work similar to controllers. Any CLI application needs at least a MainTask and a mainAction and every task needs to have a mainAction which will run if no action is given explicitly.</p> <p>Below is an example of the app/tasks/MainTask.php file:</p> <pre class=\"highlight-php\" data-language=\"php\">class MainTask extends \\Phalcon\\Cli\\Task\n{\n    public function mainAction()\n    {\n        echo \"\\nThis is the default task and the default action \\n\";\n    }\n}\n</pre>   <h2 id=\"processing-action-parameters\">Processing action parameters</h2> <p>It’s possible to pass parameters to actions, the code for this is already present in the sample bootstrap.</p> <p>If you run the application with the following parameters and action:</p> <pre class=\"highlight-php\" data-language=\"php\">class MainTask extends \\Phalcon\\Cli\\Task\n{\n    public function mainAction()\n    {\n        echo \"\\nThis is the default task and the default action \\n\";\n    }\n\n    /**\n     * @param array $params\n     */\n    public function testAction(array $params)\n    {\n        echo sprintf('hello %s', $params[0]) . PHP_EOL;\n        echo sprintf('best regards, %s', $params[1]) . PHP_EOL;\n    }\n}\n</pre> <p>We can then run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ php app/cli.php main test world universe\n\nhello world\nbest regards, universe\n</pre>   <h2 id=\"running-tasks-in-a-chain\">Running tasks in a chain</h2> <p>It’s also possible to run tasks in a chain if it’s required. To accomplish this you must add the console itself to the DI:</p> <pre class=\"highlight-php\" data-language=\"php\">$di-&gt;setShared('console', $console);\n\ntry {\n    // Handle incoming arguments\n    $console-&gt;handle($arguments);\n} catch (\\Phalcon\\Exception $e) {\n    echo $e-&gt;getMessage();\n    exit(255);\n}\n</pre> <p>Then you can use the console inside of any task. Below is an example of a modified MainTask.php:</p> <pre class=\"highlight-php\" data-language=\"php\">class MainTask extends \\Phalcon\\Cli\\Task\n{\n    public function mainAction()\n    {\n        echo \"\\nThis is the default task and the default action \\n\";\n\n        $this-&gt;console-&gt;handle(\n            array(\n                'task'   =&gt; 'main',\n                'action' =&gt; 'test'\n            )\n        );\n    }\n\n    public function testAction()\n    {\n        echo \"\\nI will get printed too!\\n\";\n    }\n}\n</pre> <p>However, it’s a better idea to extend <a class=\"reference internal\" href=\"../api/phalcon_cli_task\"><em>Phalcon\\Cli\\Task</em></a> and implement this kind of logic there.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/cli.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/cli.html</a>\n  </p>\n</div>\n","reference/volt":"<h1 id=\"volt-template-engine\">Volt: Template Engine</h1> <p>Volt is an ultra-fast and designer friendly templating language written in C for PHP. It provides you a set of helpers to write views in an easy way. Volt is highly integrated with other components of Phalcon, just as you can use it as a stand-alone component in your applications.</p> <div class=\"figure align-center\"> <img alt=\"../_images/volt.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/volt.jpg\"> </div> <p>Volt is inspired by <a class=\"reference external\" href=\"http://jinja.pocoo.org/\">Jinja</a>, originally created by <a class=\"reference external\" href=\"https://github.com/mitsuhiko\">Armin Ronacher</a>. Therefore many developers will be in familiar territory using the same syntax they have been using with similar template engines. Volt’s syntax and features have been enhanced with more elements and of course with the performance that developers have been accustomed to while working with Phalcon.</p>  <h2 id=\"introduction\">Introduction</h2> <p>Volt views are compiled to pure PHP code, so basically they save the effort of writing PHP code manually:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{# app/views/products/show.volt #}\n\n{% block last_products %}\n\n{% for product in products %}\n    * Name: {{ product.name|e }}\n    {% if product.status == \"Active\" %}\n       Price: {{ product.price + product.taxes/100 }}\n    {% endif  %}\n{% endfor  %}\n\n{% endblock %}\n</pre>   <h2 id=\"activating-volt\">Activating Volt</h2> <p>As with other templating engines, you may register Volt in the view component, using a new extension or reusing the standard .phtml:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View;\n\n// Registering Volt as template engine\n$di-&gt;set(\n    'view',\n    function () {\n\n        $view = new View();\n\n        $view-&gt;setViewsDir('../app/views/');\n\n        $view-&gt;registerEngines(\n            array(\n                \".volt\" =&gt; 'Phalcon\\Mvc\\View\\Engine\\Volt'\n            )\n        );\n\n        return $view;\n    }\n);\n</pre> <p>Use the standard ”.phtml” extension:</p> <pre class=\"highlight-php\" data-language=\"php\">$view-&gt;registerEngines(\n    array(\n        \".phtml\" =&gt; 'Phalcon\\Mvc\\View\\Engine\\Volt'\n    )\n);\n</pre>   <h2 id=\"basic-usage\">Basic Usage</h2> <p>A view consists of Volt code, PHP and HTML. A set of special delimiters is available to enter into Volt mode. <code class=\"code docutils literal\"><span class=\"pre\">{%</span> <span class=\"pre\">...</span> <span class=\"pre\">%}</span></code> is used to execute statements such as for-loops or assign values and <code class=\"code docutils literal\"><span class=\"pre\">{{</span> <span class=\"pre\">...</span> <span class=\"pre\">}}</span></code>, prints the result of an expression to the template.</p> <p>Below is a minimal template that illustrates a few basics:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{# app/views/posts/show.phtml #}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;{{ title }} - An example blog&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        {% if show_navigation %}\n            &lt;ul id=\"navigation\"&gt;\n                {% for item in menu %}\n                    &lt;li&gt;\n                        &lt;a href=\"{{ item.href }}\"&gt;\n                            {{ item.caption }}\n                        &lt;/a&gt;\n                    &lt;/li&gt;\n                {% endfor %}\n            &lt;/ul&gt;\n        {% endif %}\n\n        &lt;h1&gt;{{ post.title }}&lt;/h1&gt;\n\n        &lt;div class=\"content\"&gt;\n            {{ post.content }}\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>Using <a class=\"reference internal\" href=\"../api/phalcon_mvc_view\"><em>Phalcon\\Mvc\\View</em></a> you can pass variables from the controller to the views. In the above example, three variables were passed to the view: <code class=\"code docutils literal\"><span class=\"pre\">title</span></code>, <code class=\"code docutils literal\"><span class=\"pre\">menu</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">post</span></code>:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function showAction()\n    {\n        $post = Post::findFirst();\n        $menu = Menu::findFirst();\n\n        $this-&gt;view-&gt;title           = $post-&gt;title;\n        $this-&gt;view-&gt;post            = $post;\n        $this-&gt;view-&gt;menu            = $menu;\n        $this-&gt;view-&gt;show_navigation = true;\n\n        // Or...\n\n        $this-&gt;view-&gt;setVar(\"title\",           $post-&gt;title);\n        $this-&gt;view-&gt;setVar(\"post\",            $post);\n        $this-&gt;view-&gt;setVar(\"menu\",            $menu);\n        $this-&gt;view-&gt;setVar(\"show_navigation\", true);\n    }\n}\n</pre>   <h2 id=\"variables\">Variables</h2> <p>Object variables may have attributes which can be accessed using the syntax: <code class=\"code docutils literal\"><span class=\"pre\">foo.bar</span></code>. If you are passing arrays, you have to use the square bracket syntax: <code class=\"code docutils literal\"><span class=\"pre\">foo['bar']</span></code></p> <pre class=\"highlight-jinja\" data-language=\"jinja\">{{ post.title }} {# for $post-&gt;title #}\n{{ post['title'] }} {# for $post['title'] #}\n</pre>   <h2 id=\"filters\">Filters</h2> <p>Variables can be formatted or modified using filters. The pipe operator <code class=\"code docutils literal\"><span class=\"pre\">|</span></code> is used to apply filters to variables:</p> <pre class=\"highlight-jinja\" data-language=\"jinja\">{{ post.title|e }}\n{{ post.content|striptags }}\n{{ name|capitalize|trim }}\n</pre> <p>The following is the list of available built-in filters in Volt:</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Filter</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">e</span></code></td> <td>Applies <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Escaper-&gt;escapeHtml()</span></code> to the value</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">escape</span></code></td> <td>Applies <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Escaper-&gt;escapeHtml()</span></code> to the value</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">escape_css</span></code></td> <td>Applies <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Escaper-&gt;escapeCss()</span></code> to the value</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">escape_js</span></code></td> <td>Applies <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Escaper-&gt;escapeJs()</span></code> to the value</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">escape_attr</span></code></td> <td>Applies <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Escaper-&gt;escapeHtmlAttr()</span></code> to the value</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">trim</span></code></td> <td>Applies the <a class=\"reference external\" href=\"http://php.net/manual/en/function.trim.php\">trim</a> PHP function to the value. Removing extra spaces</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">left_trim</span></code></td> <td>Applies the <a class=\"reference external\" href=\"http://php.net/manual/en/function.ltrim.php\">ltrim</a> PHP function to the value. Removing extra spaces</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">right_trim</span></code></td> <td>Applies the <a class=\"reference external\" href=\"http://php.net/manual/en/function.rtrim.php\">rtrim</a> PHP function to the value. Removing extra spaces</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">striptags</span></code></td> <td>Applies the <a class=\"reference external\" href=\"http://php.net/manual/en/function.striptags.php\">striptags</a> PHP function to the value. Removing HTML tags</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">slashes</span></code></td> <td>Applies the <a class=\"reference external\" href=\"http://php.net/manual/en/function.slashes.php\">slashes</a> PHP function to the value. Escaping values</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">stripslashes</span></code></td> <td>Applies the <a class=\"reference external\" href=\"http://php.net/manual/en/function.stripslashes.php\">stripslashes</a> PHP function to the value. Removing escaped quotes</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">capitalize</span></code></td> <td>Capitalizes a string by applying the <a class=\"reference external\" href=\"http://php.net/manual/en/function.ucwords.php\">ucwords</a> PHP function to the value</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">lower</span></code></td> <td>Change the case of a string to lowercase</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">upper</span></code></td> <td>Change the case of a string to uppercase</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">length</span></code></td> <td>Counts the string length or how many items are in an array or object</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">nl2br</span></code></td> <td>Changes newlines \\n by line breaks (&lt;br /&gt;). Uses the PHP function <a class=\"reference external\" href=\"http://php.net/manual/en/function.nl2br.php\">nl2br</a>\n</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">sort</span></code></td> <td>Sorts an array using the PHP function <a class=\"reference external\" href=\"http://php.net/manual/en/function.asort.php\">asort</a>\n</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">keys</span></code></td> <td>Returns the array keys using <a class=\"reference external\" href=\"http://php.net/manual/en/function.array-keys.php\">array_keys</a>\n</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">join</span></code></td> <td>Joins the array parts using a separator <a class=\"reference external\" href=\"http://php.net/manual/en/function.join.php\">join</a>\n</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">format</span></code></td> <td>Formats a string using <a class=\"reference external\" href=\"http://php.net/manual/en/function.sprintf.php\">sprintf</a>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">json_encode</span></code></td> <td>Converts a value into its <a class=\"reference external\" href=\"http://php.net/manual/en/function.json-encode.php\">JSON</a> representation</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">json_decode</span></code></td> <td>Converts a value from its <a class=\"reference external\" href=\"http://php.net/manual/en/function.json-encode.php\">JSON</a> representation to a PHP representation</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">abs</span></code></td> <td>Applies the <a class=\"reference external\" href=\"http://php.net/manual/en/function.abs.php\">abs</a> PHP function to a value.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">url_encode</span></code></td> <td>Applies the <a class=\"reference external\" href=\"http://php.net/manual/en/function.urlencode.php\">urlencode</a> PHP function to the value</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">default</span></code></td> <td>Sets a default value in case that the evaluated expression is empty (is not set or evaluates to a falsy value)</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">convert_encoding</span></code></td> <td>Converts a string from one charset to another</td> </tr> </tbody> </table> <p>Examples:</p> <pre class=\"highlight-jinja\" data-language=\"jinja\">{# e or escape filter #}\n{{ \"&lt;h1&gt;Hello&lt;h1&gt;\"|e }}\n{{ \"&lt;h1&gt;Hello&lt;h1&gt;\"|escape }}\n\n{# trim filter #}\n{{ \"   hello   \"|trim }}\n\n{# striptags filter #}\n{{ \"&lt;h1&gt;Hello&lt;h1&gt;\"|striptags }}\n\n{# slashes filter #}\n{{ \"'this is a string'\"|slashes }}\n\n{# stripslashes filter #}\n{{ \"\\'this is a string\\'\"|stripslashes }}\n\n{# capitalize filter #}\n{{ \"hello\"|capitalize }}\n\n{# lower filter #}\n{{ \"HELLO\"|lower }}\n\n{# upper filter #}\n{{ \"hello\"|upper }}\n\n{# length filter #}\n{{ \"robots\"|length }}\n{{ [1, 2, 3]|length }}\n\n{# nl2br filter #}\n{{ \"some\\ntext\"|nl2br }}\n\n{# sort filter #}\n{% set sorted = [3, 1, 2]|sort %}\n\n{# keys filter #}\n{% set keys = ['first': 1, 'second': 2, 'third': 3]|keys %}\n\n{# join filter #}\n{% set joined = \"a\"..\"z\"|join(\",\") %}\n\n{# format filter #}\n{{ \"My real name is %s\"|format(name) }}\n\n{# json_encode filter #}\n{% set encoded = robots|json_encode %}\n\n{# json_decode filter #}\n{% set decoded = '{\"one\":1,\"two\":2,\"three\":3}'|json_decode %}\n\n{# url_encode filter #}\n{{ post.permanent_link|url_encode }}\n\n{# convert_encoding filter #}\n{{ \"désolé\"|convert_encoding('utf8', 'latin1') }}\n</pre>   <h2 id=\"comments\">Comments</h2> <p>Comments may also be added to a template using the <code class=\"code docutils literal\"><span class=\"pre\">{#</span> <span class=\"pre\">...</span> <span class=\"pre\">#}</span></code> delimiters. All text inside them is just ignored in the final output:</p> <pre class=\"highlight-jinja\" data-language=\"jinja\">{# note: this is a comment\n    {% set price = 100; %}\n#}\n</pre>   <h2 id=\"list-of-control-structures\">List of Control Structures</h2> <p>Volt provides a set of basic but powerful control structures for use in templates:</p>  <h3 id=\"for\">For</h3> <p>Loop over each item in a sequence. The following example shows how to traverse a set of “robots” and print his/her name:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">&lt;h1&gt;Robots&lt;/h1&gt;\n&lt;ul&gt;\n    {% for robot in robots %}\n        &lt;li&gt;\n            {{ robot.name|e }}\n        &lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n</pre> <p>for-loops can also be nested:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">&lt;h1&gt;Robots&lt;/h1&gt;\n{% for robot in robots %}\n    {% for part in robot.parts %}\n        Robot: {{ robot.name|e }} Part: {{ part.name|e }} &lt;br /&gt;\n    {% endfor %}\n{% endfor %}\n</pre> <p>You can get the element “keys” as in the PHP counterpart using the following syntax:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{% set numbers = ['one': 1, 'two': 2, 'three': 3] %}\n\n{% for name, value in numbers %}\n    Name: {{ name }} Value: {{ value }}\n{% endfor %}\n</pre> <p>An “if” evaluation can be optionally set:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{% set numbers = ['one': 1, 'two': 2, 'three': 3] %}\n\n{% for value in numbers if value &lt; 2 %}\n    Value: {{ value }}\n{% endfor %}\n\n{% for name, value in numbers if name != 'two' %}\n    Name: {{ name }} Value: {{ value }}\n{% endfor %}\n</pre> <p>If an ‘else’ is defined inside the ‘for’, it will be executed if the expression in the iterator result in zero iterations:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">&lt;h1&gt;Robots&lt;/h1&gt;\n{% for robot in robots %}\n    Robot: {{ robot.name|e }} Part: {{ part.name|e }} &lt;br /&gt;\n{% else %}\n    There are no robots to show\n{% endfor %}\n</pre> <p>Alternative syntax:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">&lt;h1&gt;Robots&lt;/h1&gt;\n{% for robot in robots %}\n    Robot: {{ robot.name|e }} Part: {{ part.name|e }} &lt;br /&gt;\n{% elsefor %}\n    There are no robots to show\n{% endfor %}\n</pre>   <h3 id=\"loop-controls\">Loop Controls</h3> <p>The ‘break’ and ‘continue’ statements can be used to exit from a loop or force an iteration in the current block:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{# skip the even robots #}\n{% for index, robot in robots %}\n    {% if index is even %}\n        {% continue %}\n    {% endif %}\n    ...\n{% endfor %}\n</pre> <pre class=\"highlight-html+jinja\" data-language=\"html\">{# exit the foreach on the first even robot #}\n{% for index, robot in robots %}\n    {% if index is even %}\n        {% break %}\n    {% endif %}\n    ...\n{% endfor %}\n</pre>   <h3 id=\"if\">If</h3> <p>As PHP, an “if” statement checks if an expression is evaluated as true or false:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">&lt;h1&gt;Cyborg Robots&lt;/h1&gt;\n&lt;ul&gt;\n    {% for robot in robots %}\n        {% if robot.type == \"cyborg\" %}\n            &lt;li&gt;{{ robot.name|e }}&lt;/li&gt;\n        {% endif %}\n    {% endfor %}\n&lt;/ul&gt;\n</pre> <p>The else clause is also supported:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">&lt;h1&gt;Robots&lt;/h1&gt;\n&lt;ul&gt;\n    {% for robot in robots %}\n        {% if robot.type == \"cyborg\" %}\n            &lt;li&gt;{{ robot.name|e }}&lt;/li&gt;\n        {% else %}\n            &lt;li&gt;{{ robot.name|e }} (not a cyborg)&lt;/li&gt;\n        {% endif %}\n    {% endfor %}\n&lt;/ul&gt;\n</pre> <p>The ‘elseif’ control flow structure can be used together with if to emulate a ‘switch’ block:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{% if robot.type == \"cyborg\" %}\n    Robot is a cyborg\n{% elseif robot.type == \"virtual\" %}\n    Robot is virtual\n{% elseif robot.type == \"mechanical\" %}\n    Robot is mechanical\n{% endif %}\n</pre>   <h3 id=\"loop-context\">Loop Context</h3> <p>A special variable is available inside ‘for’ loops providing you information about</p> <table class=\"docutils\"> <colgroup> <col width=\"28%\"> <col width=\"72%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Variable</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">loop.index</span></code></td> <td>The current iteration of the loop. (1 indexed)</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">loop.index0</span></code></td> <td>The current iteration of the loop. (0 indexed)</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">loop.revindex</span></code></td> <td>The number of iterations from the end of the loop (1 indexed)</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">loop.revindex0</span></code></td> <td>The number of iterations from the end of the loop (0 indexed)</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">loop.first</span></code></td> <td>True if in the first iteration.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">loop.last</span></code></td> <td>True if in the last iteration.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">loop.length</span></code></td> <td>The number of items to iterate</td> </tr> </tbody> </table> <pre class=\"highlight-html+jinja\" data-language=\"html\">{% for robot in robots %}\n    {% if loop.first %}\n        &lt;table&gt;\n            &lt;tr&gt;\n                &lt;th&gt;#&lt;/th&gt;\n                &lt;th&gt;Id&lt;/th&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n            &lt;/tr&gt;\n    {% endif %}\n            &lt;tr&gt;\n                &lt;td&gt;{{ loop.index }}&lt;/td&gt;\n                &lt;td&gt;{{ robot.id }}&lt;/td&gt;\n                &lt;td&gt;{{ robot.name }}&lt;/td&gt;\n            &lt;/tr&gt;\n    {% if loop.last %}\n        &lt;/table&gt;\n    {% endif %}\n{% endfor %}\n</pre>    <h2 id=\"assignments\">Assignments</h2> <p>Variables may be changed in a template using the instruction “set”:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{% set fruits = ['Apple', 'Banana', 'Orange'] %}\n{% set name = robot.name %}\n</pre> <p>Multiple assignments are allowed in the same instruction:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{% set fruits = ['Apple', 'Banana', 'Orange'], name = robot.name, active = true %}\n</pre> <p>Additionally, you can use compound assignment operators:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{% set price += 100.00 %}\n{% set age *= 5 %}\n</pre> <p>The following operators are available:</p> <table class=\"docutils\"> <colgroup> <col width=\"22%\"> <col width=\"78%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operator</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>=</td> <td>Standard Assignment</td> </tr> <tr class=\"row-odd\">\n<td>+=</td> <td>Addition assignment</td> </tr> <tr class=\"row-even\">\n<td>-=</td> <td>Subtraction assignment</td> </tr> <tr class=\"row-odd\">\n<td>*=</td> <td>Multiplication assignment</td> </tr> <tr class=\"row-even\">\n<td>/=</td> <td>Division assignment</td> </tr> </tbody> </table>   <h2 id=\"expressions\">Expressions</h2> <p>Volt provides a basic set of expression support, including literals and common operators.</p> <p>A expression can be evaluated and printed using the ‘{{‘ and ‘}}’ delimiters:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{{ (1 + 1) * 2 }}\n</pre> <p>If an expression needs to be evaluated without be printed the ‘do’ statement can be used:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{% do (1 + 1) * 2 %}\n</pre>  <h3 id=\"literals\">Literals</h3> <p>The following literals are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"22%\"> <col width=\"78%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Filter</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>“this is a string”</td> <td>Text between double quotes or single quotes are handled as strings</td> </tr> <tr class=\"row-odd\">\n<td>100.25</td> <td>Numbers with a decimal part are handled as doubles/floats</td> </tr> <tr class=\"row-even\">\n<td>100</td> <td>Numbers without a decimal part are handled as integers</td> </tr> <tr class=\"row-odd\">\n<td>false</td> <td>Constant “false” is the boolean false value</td> </tr> <tr class=\"row-even\">\n<td>true</td> <td>Constant “true” is the boolean true value</td> </tr> <tr class=\"row-odd\">\n<td>null</td> <td>Constant “null” is the Null value</td> </tr> </tbody> </table>   <h3 id=\"arrays\">Arrays</h3> <p>Whether you’re using PHP 5.3 or &gt;= 5.4 you can create arrays by enclosing a list of values in square brackets:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{# Simple array #}\n{{ ['Apple', 'Banana', 'Orange'] }}\n\n{# Other simple array #}\n{{ ['Apple', 1, 2.5, false, null] }}\n\n{# Multi-Dimensional array #}\n{{ [[1, 2], [3, 4], [5, 6]] }}\n\n{# Hash-style array #}\n{{ ['first': 1, 'second': 4/2, 'third': '3'] }}\n</pre> <p>Curly braces also can be used to define arrays or hashes:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{% set myArray = {'Apple', 'Banana', 'Orange'} %}\n{% set myHash  = {'first': 1, 'second': 4/2, 'third': '3'} %}\n</pre>   <h3 id=\"math\">Math</h3> <p>You may make calculations in templates using the following operators:</p> <table class=\"docutils\"> <colgroup> <col width=\"12%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operator</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">+</span></code></td> <td>Perform an adding operation. <code class=\"code docutils literal\"><span class=\"pre\">{{</span> <span class=\"pre\">2</span> <span class=\"pre\">+</span> <span class=\"pre\">3</span> <span class=\"pre\">}}</span></code> returns 5</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">-</span></code></td> <td>Perform a substraction operation <code class=\"code docutils literal\"><span class=\"pre\">{{</span> <span class=\"pre\">2</span> <span class=\"pre\">-</span> <span class=\"pre\">3</span> <span class=\"pre\">}}</span></code> returns -1</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">*</span></code></td> <td>Perform a multiplication operation <code class=\"code docutils literal\"><span class=\"pre\">{{</span> <span class=\"pre\">2</span> <span class=\"pre\">*</span> <span class=\"pre\">3</span> <span class=\"pre\">}}</span></code> returns 6</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">/</span></code></td> <td>Perform a division operation <code class=\"code docutils literal\"><span class=\"pre\">{{</span> <span class=\"pre\">10</span> <span class=\"pre\">/</span> <span class=\"pre\">2</span> <span class=\"pre\">}}</span></code> returns 5</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">%</span></code></td> <td>Calculate the remainder of an integer division <code class=\"code docutils literal\"><span class=\"pre\">{{</span> <span class=\"pre\">10</span> <span class=\"pre\">%</span> <span class=\"pre\">3</span> <span class=\"pre\">}}</span></code> returns 1</td> </tr> </tbody> </table>   <h3 id=\"comparisons\">Comparisons</h3> <p>The following comparison operators are available:</p> <table class=\"docutils\"> <colgroup> <col width=\"16%\"> <col width=\"84%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operator</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">==</span></code></td> <td>Check whether both operands are equal</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">!=</span></code></td> <td>Check whether both operands aren’t equal</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">&lt;&gt;</span></code></td> <td>Check whether both operands aren’t equal</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">&gt;</span></code></td> <td>Check whether left operand is greater than right operand</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">&lt;</span></code></td> <td>Check whether left operand is less than right operand</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">&lt;=</span></code></td> <td>Check whether left operand is less or equal than right operand</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">&gt;=</span></code></td> <td>Check whether left operand is greater or equal than right operand</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">===</span></code></td> <td>Check whether both operands are identical</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">!==</span></code></td> <td>Check whether both operands aren’t identical</td> </tr> </tbody> </table>   <h3 id=\"logic\">Logic</h3> <p>Logic operators are useful in the “if” expression evaluation to combine multiple tests:</p> <table class=\"docutils\"> <colgroup> <col width=\"21%\"> <col width=\"79%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operator</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">or</span></code></td> <td>Return true if the left or right operand is evaluated as true</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">and</span></code></td> <td>Return true if both left and right operands are evaluated as true</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">not</span></code></td> <td>Negates an expression</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">(</span> <span class=\"pre\">expr</span> <span class=\"pre\">)</span></code></td> <td>Parenthesis groups expressions</td> </tr> </tbody> </table>   <h3 id=\"other-operators\">Other Operators</h3> <p>Additional operators seen the following operators are available:</p> <table class=\"docutils\"> <colgroup> <col width=\"22%\"> <col width=\"78%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operator</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">~</span></code></td> <td>Concatenates both operands <code class=\"code docutils literal\"><span class=\"pre\">{{</span> <span class=\"pre\">\"hello</span> <span class=\"pre\">\"</span> <span class=\"pre\">~</span> <span class=\"pre\">\"world\"</span> <span class=\"pre\">}}</span></code>\n</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">|</span></code></td> <td>Applies a filter in the right operand to the left <code class=\"code docutils literal\"><span class=\"pre\">{{</span> <span class=\"pre\">\"hello\"|uppercase</span> <span class=\"pre\">}}</span></code>\n</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">..</span></code></td> <td>Creates a range <code class=\"code docutils literal\"><span class=\"pre\">{{</span> <span class=\"pre\">'a'..'z'</span> <span class=\"pre\">}}</span></code> <code class=\"code docutils literal\"><span class=\"pre\">{{</span> <span class=\"pre\">1..10</span> <span class=\"pre\">}}</span></code>\n</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">is</span></code></td> <td>Same as == (equals), also performs tests</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">in</span></code></td> <td>To check if an expression is contained into other expressions <code class=\"code docutils literal\"><span class=\"pre\">if</span> <span class=\"pre\">\"a\"</span> <span class=\"pre\">in</span> <span class=\"pre\">\"abc\"</span></code>\n</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">is</span> <span class=\"pre\">not</span></code></td> <td>Same as != (not equals)</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">'a'</span> <span class=\"pre\">?</span> <span class=\"pre\">'b'</span> <span class=\"pre\">:</span> <span class=\"pre\">'c'</span></code></td> <td>Ternary operator. The same as the PHP ternary operator</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">++</span></code></td> <td>Increments a value</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">--</span></code></td> <td>Decrements a value</td> </tr> </tbody> </table> <p>The following example shows how to use operators:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{% set robots = ['Voltron', 'Astro Boy', 'Terminator', 'C3PO'] %}\n\n{% for index in 0..robots|length %}\n    {% if robots[index] is defined %}\n        {{ \"Name: \" ~ robots[index] }}\n    {% endif %}\n{% endfor %}\n</pre>    <h2 id=\"tests\">Tests</h2> <p>Tests can be used to test if a variable has a valid expected value. The operator “is” is used to perform the tests:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{% set robots = ['1': 'Voltron', '2': 'Astro Boy', '3': 'Terminator', '4': 'C3PO'] %}\n\n{% for position, name in robots %}\n    {% if position is odd %}\n        {{ name }}\n    {% endif %}\n{% endfor %}\n</pre> <p>The following built-in tests are available in Volt:</p> <table class=\"docutils\"> <colgroup> <col width=\"23%\"> <col width=\"77%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Test</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">defined</span></code></td> <td>Checks if a variable is defined (<code class=\"code docutils literal\"><span class=\"pre\">isset()</span></code>)</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">empty</span></code></td> <td>Checks if a variable is empty</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">even</span></code></td> <td>Checks if a numeric value is even</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">odd</span></code></td> <td>Checks if a numeric value is odd</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">numeric</span></code></td> <td>Checks if value is numeric</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">scalar</span></code></td> <td>Checks if value is scalar (not an array or object)</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">iterable</span></code></td> <td>Checks if a value is iterable. Can be traversed by a “for” statement</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">divisibleby</span></code></td> <td>Checks if a value is divisible by other value</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">sameas</span></code></td> <td>Checks if a value is identical to other value</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">type</span></code></td> <td>Checks if a value is of the specified type</td> </tr> </tbody> </table> <p>More examples:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{% if robot is defined %}\n    The robot variable is defined\n{% endif %}\n\n{% if robot is empty %}\n    The robot is null or isn't defined\n{% endif %}\n\n{% for key, name in [1: 'Voltron', 2: 'Astroy Boy', 3: 'Bender'] %}\n    {% if key is even %}\n        {{ name }}\n    {% endif %}\n{% endfor %}\n\n{% for key, name in [1: 'Voltron', 2: 'Astroy Boy', 3: 'Bender'] %}\n    {% if key is odd %}\n        {{ name }}\n    {% endif %}\n{% endfor %}\n\n{% for key, name in [1: 'Voltron', 2: 'Astroy Boy', 'third': 'Bender'] %}\n    {% if key is numeric %}\n        {{ name }}\n    {% endif %}\n{% endfor %}\n\n{% set robots = [1: 'Voltron', 2: 'Astroy Boy'] %}\n{% if robots is iterable %}\n    {% for robot in robots %}\n        ...\n    {% endfor %}\n{% endif %}\n\n{% set world = \"hello\" %}\n{% if world is sameas(\"hello\") %}\n    {{ \"it's hello\" }}\n{% endif %}\n\n{% set external = false %}\n{% if external is type('boolean') %}\n    {{ \"external is false or true\" }}\n{% endif %}\n</pre>   <h2 id=\"macros\">Macros</h2> <p>Macros can be used to reuse logic in a template, they act as PHP functions, can receive parameters and return values:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{# Macro \"display a list of links to related topics\" #}\n{%- macro related_bar(related_links) %}\n    &lt;ul&gt;\n        {%- for link in related_links %}\n            &lt;li&gt;\n                &lt;a href=\"{{ url(link.url) }}\" title=\"{{ link.title|striptags }}\"&gt;\n                    {{ link.text }}\n                &lt;/a&gt;\n            &lt;/li&gt;\n        {%- endfor %}\n    &lt;/ul&gt;\n{%- endmacro %}\n\n{# Print related links #}\n{{ related_bar(links) }}\n\n&lt;div&gt;This is the content&lt;/div&gt;\n\n{# Print related links again #}\n{{ related_bar(links) }}\n</pre> <p>When calling macros, parameters can be passed by name:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{%- macro error_messages(message, field, type) %}\n    &lt;div&gt;\n        &lt;span class=\"error-type\"&gt;{{ type }}&lt;/span&gt;\n        &lt;span class=\"error-field\"&gt;{{ field }}&lt;/span&gt;\n        &lt;span class=\"error-message\"&gt;{{ message }}&lt;/span&gt;\n    &lt;/div&gt;\n{%- endmacro %}\n\n{# Call the macro #}\n{{ error_messages('type': 'Invalid', 'message': 'The name is invalid', 'field': 'name') }}\n</pre> <p>Macros can return values:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{%- macro my_input(name, class) %}\n    {% return text_field(name, 'class': class) %}\n{%- endmacro %}\n\n{# Call the macro #}\n{{ '&lt;p&gt;' ~ my_input('name', 'input-text') ~ '&lt;/p&gt;' }}\n</pre> <p>And receive optional parameters:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{%- macro my_input(name, class=\"input-text\") %}\n    {% return text_field(name, 'class': class) %}\n{%- endmacro %}\n\n{# Call the macro #}\n{{ '&lt;p&gt;' ~ my_input('name') ~ '&lt;/p&gt;' }}\n{{ '&lt;p&gt;' ~ my_input('name', 'input-text') ~ '&lt;/p&gt;' }}\n</pre>   <h2 id=\"using-tag-helpers\">Using Tag Helpers</h2> <p>Volt is highly integrated with <a class=\"reference internal\" href=\"tags\"><em>Phalcon\\Tag</em></a>, so it’s easy to use the helpers provided by that component in a Volt template:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{{ javascript_include(\"js/jquery.js\") }}\n\n{{ form('products/save', 'method': 'post') }}\n\n    &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n    {{ text_field(\"name\", \"size\": 32) }}\n\n    &lt;label for=\"type\"&gt;Type&lt;/label&gt;\n    {{ select(\"type\", productTypes, 'using': ['id', 'name']) }}\n\n    {{ submit_button('Send') }}\n\n{{ end_form() }}\n</pre> <p>The following PHP is generated:</p> <pre class=\"highlight-html+php\" data-language=\"html\">&lt;?php echo Phalcon\\Tag::javascriptInclude(\"js/jquery.js\") ?&gt;\n\n&lt;?php echo Phalcon\\Tag::form(array('products/save', 'method' =&gt; 'post')); ?&gt;\n\n    &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n    &lt;?php echo Phalcon\\Tag::textField(array('name', 'size' =&gt; 32)); ?&gt;\n\n    &lt;label for=\"type\"&gt;Type&lt;/label&gt;\n    &lt;?php echo Phalcon\\Tag::select(array('type', $productTypes, 'using' =&gt; array('id', 'name'))); ?&gt;\n\n    &lt;?php echo Phalcon\\Tag::submitButton('Send'); ?&gt;\n\n{{ end_form() }}\n</pre> <p>To call a <a class=\"reference internal\" href=\"../api/phalcon_tag\"><em>Phalcon\\Tag</em></a> helper, you only need to call an uncamelized version of the method:</p> <table class=\"docutils\"> <colgroup> <col width=\"59%\"> <col width=\"41%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Method</th> <th class=\"head\">Volt function</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::linkTo</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">link_to</span></code></td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::textField</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">text_field</span></code></td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::passwordField</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">password_field</span></code></td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::hiddenField</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">hidden_field</span></code></td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::fileField</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">file_field</span></code></td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::checkField</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">check_field</span></code></td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::radioField</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">radio_field</span></code></td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::dateField</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">date_field</span></code></td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::emailField</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">email_field</span></code></td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::numericField</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">numeric_field</span></code></td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::submitButton</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">submit_button</span></code></td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::selectStatic</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">select_static</span></code></td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::select</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">select</span></code></td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::textArea</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">text_area</span></code></td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::form</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">form</span></code></td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::endForm</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">end_form</span></code></td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::getTitle</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">get_title</span></code></td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::stylesheetLink</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">stylesheet_link</span></code></td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::javascriptInclude</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">javascript_include</span></code></td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::image</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">image</span></code></td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::friendlyTitle</span></code></td> <td><code class=\"code docutils literal\"><span class=\"pre\">friendly_title</span></code></td> </tr> </tbody> </table>   <h2 id=\"functions\">Functions</h2> <p>The following built-in functions are available in Volt:</p> <table class=\"docutils\"> <colgroup> <col width=\"26%\"> <col width=\"74%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">content</span></code></td> <td>Includes the content produced in a previous rendering stage</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">get_content</span></code></td> <td>Same as <code class=\"code docutils literal\"><span class=\"pre\">content</span></code>\n</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">partial</span></code></td> <td>Dynamically loads a partial view in the current template</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">super</span></code></td> <td>Render the contents of the parent block</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">time</span></code></td> <td>Calls the PHP function with the same name</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">date</span></code></td> <td>Calls the PHP function with the same name</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">dump</span></code></td> <td>Calls the PHP function <code class=\"code docutils literal\"><span class=\"pre\">var_dump()</span></code>\n</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">version</span></code></td> <td>Returns the current version of the framework</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">constant</span></code></td> <td>Reads a PHP constant</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">url</span></code></td> <td>Generate a URL using the ‘url’ service</td> </tr> </tbody> </table>   <h2 id=\"view-integration\">View Integration</h2> <p>Also, Volt is integrated with <a class=\"reference internal\" href=\"views\"><em>Phalcon\\Mvc\\View</em></a>, you can play with the view hierarchy and include partials as well:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{{ content() }}\n\n&lt;!-- Simple include of a partial --&gt;\n&lt;div id=\"footer\"&gt;{{ partial(\"partials/footer\") }}&lt;/div&gt;\n\n&lt;!-- Passing extra variables --&gt;\n&lt;div id=\"footer\"&gt;{{ partial(\"partials/footer\", ['links': links]) }}&lt;/div&gt;\n</pre> <p>A partial is included in runtime, Volt also provides “include”, this compiles the content of a view and returns its contents as part of the view which was included:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{# Simple include of a partial #}\n&lt;div id=\"footer\"&gt;\n    {% include \"partials/footer\" %}\n&lt;/div&gt;\n\n{# Passing extra variables #}\n&lt;div id=\"footer\"&gt;\n    {% include \"partials/footer\" with ['links': links] %}\n&lt;/div&gt;\n</pre>  <h3 id=\"include\">Include</h3> <p>‘include’ has a special behavior that will help us improve performance a bit when using Volt, if you specify the extension when including the file and it exists when the template is compiled, Volt can inline the contents of the template in the parent template where it’s included. Templates aren’t inlined if the ‘include’ have variables passed with ‘with’:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{# The contents of 'partials/footer.volt' is compiled and inlined #}\n&lt;div id=\"footer\"&gt;\n    {% include \"partials/footer.volt\" %}\n&lt;/div&gt;\n</pre>   <h3 id=\"partial-vs-include\">Partial vs Include</h3> <p>Keep the following points in mind when choosing to use the “partial” function or “include”:</p> <ul class=\"simple\"> <li>‘Partial’ allows you to include templates made in Volt and in other template engines as well</li> <li>‘Partial’ allows you to pass an expression like a variable allowing to include the content of other view dynamically</li> <li>‘Partial’ is better if the content that you have to include changes frequently</li> <li>‘Include’ copies the compiled content into the view which improves the performance</li> <li>‘Include’ only allows to include templates made with Volt</li> <li>‘Include’ requires an existing template at compile time</li> </ul>    <h2 id=\"template-inheritance\">Template Inheritance</h2> <p>With template inheritance you can create base templates that can be extended by others templates allowing to reuse code. A base template define <em>blocks</em> than can be overridden by a child template. Let’s pretend that we have the following base template:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{# templates/base.volt #}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        {% block head %}\n            &lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n        {% endblock %}\n        &lt;title&gt;{% block title %}{% endblock %} - My Webpage&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"content\"&gt;{% block content %}{% endblock %}&lt;/div&gt;\n\n        &lt;div id=\"footer\"&gt;\n            {% block footer %}&amp;copy; Copyright 2015, All rights reserved.{% endblock %}\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>From other template we could extend the base template replacing the blocks:</p> <pre class=\"highlight-jinja\" data-language=\"jinja\">{% extends \"templates/base.volt\" %}\n\n{% block title %}Index{% endblock %}\n\n{% block head %}&lt;style type=\"text/css\"&gt;.important { color: #336699; }&lt;/style&gt;{% endblock %}\n\n{% block content %}\n    &lt;h1&gt;Index&lt;/h1&gt;\n    &lt;p class=\"important\"&gt;Welcome on my awesome homepage.&lt;/p&gt;\n{% endblock %}\n</pre> <p>Not all blocks must be replaced at a child template, only those that are needed. The final output produced will be the following:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;style type=\"text/css\"&gt;.important { color: #336699; }&lt;/style&gt;\n        &lt;title&gt;Index - My Webpage&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"content\"&gt;\n            &lt;h1&gt;Index&lt;/h1&gt;\n            &lt;p class=\"important\"&gt;Welcome on my awesome homepage.&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;div id=\"footer\"&gt;\n            &amp;copy; Copyright 2015, All rights reserved.\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre>  <h3 id=\"multiple-inheritance\">Multiple Inheritance</h3> <p>Extended templates can extend other templates. The following example illustrates this:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{# main.volt #}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        {% block content %}{% endblock %}\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>Template “layout.volt” extends “main.volt”</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{# layout.volt #}\n{% extends \"main.volt\" %}\n\n{% block content %}\n\n    &lt;h1&gt;Table of contents&lt;/h1&gt;\n\n{% endblock %}\n</pre> <p>Finally a view that extends “layout.volt”:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{# index.volt #}\n{% extends \"layout.volt\" %}\n\n{% block content %}\n\n    {{ super() }}\n\n    &lt;ul&gt;\n        &lt;li&gt;Some option&lt;/li&gt;\n        &lt;li&gt;Some other option&lt;/li&gt;\n    &lt;/ul&gt;\n\n{% endblock %}\n</pre> <p>Rendering “index.volt” produces:</p> <pre class=\"highlight-html\" data-language=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;h1&gt;Table of contents&lt;/h1&gt;\n\n        &lt;ul&gt;\n            &lt;li&gt;Some option&lt;/li&gt;\n            &lt;li&gt;Some other option&lt;/li&gt;\n        &lt;/ul&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>Note the call to the function <code class=\"code docutils literal\"><span class=\"pre\">super()</span></code>. With that function it’s possible to render the contents of the parent block.</p> <p>As partials, the path set to “extends” is a relative path under the current views directory (i.e. app/views/).</p> <blockquote class=\"highlights\"> <div>By default, and for performance reasons, Volt only checks for changes in the children templates to know when to re-compile to plain PHP again, so it is recommended initialize Volt with the option <code class=\"code docutils literal\"><span class=\"pre\">'compileAlways'</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">true</span></code>. Thus, the templates are compiled always taking into account changes in the parent templates.</div>\n</blockquote>    <h2 id=\"autoescape-mode\">Autoescape mode</h2> <p>You can enable auto-escaping of all variables printed in a block using the autoescape mode:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">Manually escaped: {{ robot.name|e }}\n\n{% autoescape true %}\n    Autoescaped: {{ robot.name }}\n    {% autoescape false %}\n        No Autoescaped: {{ robot.name }}\n    {% endautoescape %}\n{% endautoescape %}\n</pre>   <h2 id=\"setting-up-the-volt-engine\">Setting up the Volt Engine</h2> <p>Volt can be configured to alter its default behavior, the following example explain how to do that:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\View\\Engine\\Volt;\n\n// Register Volt as a service\n$di-&gt;set(\n    'voltService',\n    function ($view, $di) {\n\n        $volt = new Volt($view, $di);\n\n        $volt-&gt;setOptions(\n            array(\n                \"compiledPath\"      =&gt; \"../app/compiled-templates/\",\n                \"compiledExtension\" =&gt; \".compiled\"\n            )\n        );\n\n        return $volt;\n    }\n);\n\n// Register Volt as template engine\n$di-&gt;set(\n    'view',\n    function () {\n\n        $view = new View();\n\n        $view-&gt;setViewsDir('../app/views/');\n\n        $view-&gt;registerEngines(\n            array(\n                \".volt\" =&gt; 'voltService'\n            )\n        );\n\n        return $view;\n    }\n);\n</pre> <p>If you do not want to reuse Volt as a service you can pass an anonymous function to register the engine instead of a service name:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\View\\Engine\\Volt;\n\n// Register Volt as template engine with an anonymous function\n$di-&gt;set(\n    'view',\n    function () {\n\n        $view = new \\Phalcon\\Mvc\\View();\n\n        $view-&gt;setViewsDir('../app/views/');\n\n        $view-&gt;registerEngines(\n            array(\n                \".volt\" =&gt; function ($view, $di) {\n                    $volt = new Volt($view, $di);\n\n                    // Set some options here\n\n                    return $volt;\n                }\n            )\n        );\n\n        return $view;\n    }\n);\n</pre> <p>The following options are available in Volt:</p> <table class=\"docutils\"> <colgroup> <col width=\"17%\"> <col width=\"78%\"> <col width=\"6%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option</th> <th class=\"head\">Description</th> <th class=\"head\">Default</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">compiledPath</span></code></td> <td>A writable path where the compiled PHP templates will be placed</td> <td>./</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">compiledExtension</span></code></td> <td>An additional extension appended to the compiled PHP file</td> <td>.php</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">compiledSeparator</span></code></td> <td>Volt replaces the directory separators / and \\ by this separator in order to create a single file in the compiled directory</td> <td>%%</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">stat</span></code></td> <td>Whether Phalcon must check if exists differences between the template file and its compiled path</td> <td>true</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">compileAlways</span></code></td> <td>Tell Volt if the templates must be compiled in each request or only when they change</td> <td>false</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">prefix</span></code></td> <td>Allows to prepend a prefix to the templates in the compilation path</td> <td>null</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">autoescape</span></code></td> <td>Enables globally autoescape of HTML</td> <td>false</td> </tr> </tbody> </table> <p>The compilation path is generated according to the above options, if the developer wants total freedom defining the compilation path, an anonymous function can be used to generate it, this function receives the relative path to the template in the views directory. The following examples show how to change the compilation path dynamically:</p> <pre class=\"highlight-php\" data-language=\"php\">// Just append the .php extension to the template path\n// leaving the compiled templates in the same directory\n$volt-&gt;setOptions(\n    array(\n        'compiledPath' =&gt; function ($templatePath) {\n            return $templatePath . '.php';\n        }\n    )\n);\n\n// Recursively create the same structure in another directory\n$volt-&gt;setOptions(\n    array(\n        'compiledPath' =&gt; function ($templatePath) {\n            $dirName = dirname($templatePath);\n\n            if (!is_dir('cache/' . $dirName)) {\n                mkdir('cache/' . $dirName);\n            }\n\n            return 'cache/' . $dirName . '/'. $templatePath . '.php';\n        }\n    )\n);\n</pre>   <h2 id=\"extending-volt\">Extending Volt</h2> <p>Unlike other template engines, Volt itself is not required to run the compiled templates. Once the templates are compiled there is no dependence on Volt. With performance independence in mind, Volt only acts as a compiler for PHP templates.</p> <p>The Volt compiler allow you to extend it adding more functions, tests or filters to the existing ones.</p>  <h3 id=\"id1\">Functions</h3> <p>Functions act as normal PHP functions, a valid string name is required as function name. Functions can be added using two strategies, returning a simple string or using an anonymous function. Always is required that the chosen strategy returns a valid PHP string expression:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View\\Engine\\Volt;\n\n$volt = new Volt($view, $di);\n\n$compiler = $volt-&gt;getCompiler();\n\n// This binds the function name 'shuffle' in Volt to the PHP function 'str_shuffle'\n$compiler-&gt;addFunction('shuffle', 'str_shuffle');\n</pre> <p>Register the function with an anonymous function. This case we use <code class=\"code docutils literal\"><span class=\"pre\">$resolvedArgs</span></code> to pass the arguments exactly as were passed in the arguments:</p> <pre class=\"highlight-php\" data-language=\"php\">$compiler-&gt;addFunction(\n    'widget',\n    function ($resolvedArgs, $exprArgs) {\n        return 'MyLibrary\\Widgets::get(' . $resolvedArgs . ')';\n    }\n);\n</pre> <p>Treat the arguments independently and unresolved:</p> <pre class=\"highlight-php\" data-language=\"php\">$compiler-&gt;addFunction(\n    'repeat',\n    function ($resolvedArgs, $exprArgs) use ($compiler) {\n\n        // Resolve the first argument\n        $firstArgument = $compiler-&gt;expression($exprArgs[0]['expr']);\n\n        // Checks if the second argument was passed\n        if (isset($exprArgs[1])) {\n            $secondArgument = $compiler-&gt;expression($exprArgs[1]['expr']);\n        } else {\n            // Use '10' as default\n            $secondArgument = '10';\n        }\n\n        return 'str_repeat(' . $firstArgument . ', ' . $secondArgument . ')';\n    }\n);\n</pre> <p>Generate the code based on some function availability:</p> <pre class=\"highlight-php\" data-language=\"php\">$compiler-&gt;addFunction(\n    'contains_text',\n    function ($resolvedArgs, $exprArgs) {\n        if (function_exists('mb_stripos')) {\n            return 'mb_stripos(' . $resolvedArgs . ')';\n        } else {\n            return 'stripos(' . $resolvedArgs . ')';\n        }\n    }\n);\n</pre> <p>Built-in functions can be overridden adding a function with its name:</p> <pre class=\"highlight-php\" data-language=\"php\">// Replace built-in function dump\n$compiler-&gt;addFunction('dump', 'print_r');\n</pre>   <h3 id=\"id2\">Filters</h3> <p>A filter has the following form in a template: leftExpr|name(optional-args). Adding new filters is similar as seen with the functions:</p> <pre class=\"highlight-php\" data-language=\"php\">// This creates a filter 'hash' that uses the PHP function 'md5'\n$compiler-&gt;addFilter('hash', 'md5');\n</pre> <pre class=\"highlight-php\" data-language=\"php\">$compiler-&gt;addFilter(\n    'int',\n    function ($resolvedArgs, $exprArgs) {\n        return 'intval(' . $resolvedArgs . ')';\n    }\n);\n</pre> <p>Built-in filters can be overridden adding a function with its name:</p> <pre class=\"highlight-php\" data-language=\"php\">// Replace built-in filter 'capitalize'\n$compiler-&gt;addFilter('capitalize', 'lcfirst');\n</pre>   <h3 id=\"extensions\">Extensions</h3> <p>With extensions the developer has more flexibility to extend the template engine, and override the compilation of a specific instruction, change the behavior of an expression or operator, add functions/filters, and more.</p> <p>An extension is a class that implements the events triggered by Volt as a method of itself.</p> <p>For example, the class below allows to use any PHP function in Volt:</p> <pre class=\"highlight-php\" data-language=\"php\">class PhpFunctionExtension\n{\n    /**\n     * This method is called on any attempt to compile a function call\n     */\n    public function compileFunction($name, $arguments)\n    {\n        if (function_exists($name)) {\n            return $name . '('. $arguments . ')';\n        }\n    }\n}\n</pre> <p>The above class implements the method ‘compileFunction’ which is invoked before any attempt to compile a function call in any template. The purpose of the extension is to verify if a function to be compiled is a PHP function allowing to call it from the template. Events in extensions must return valid PHP code, this will be used as result of the compilation instead of the one generated by Volt. If an event doesn’t return an string the compilation is done using the default behavior provided by the engine.</p> <p>The following compilation events are available to be implemented in extensions:</p> <table class=\"docutils\"> <colgroup> <col width=\"21%\"> <col width=\"79%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Event/Method</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">compileFunction</span></code></td> <td>Triggered before trying to compile any function call in a template</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">compileFilter</span></code></td> <td>Triggered before trying to compile any filter call in a template</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">resolveExpression</span></code></td> <td>Triggered before trying to compile any expression. This allows the developer to override operators</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">compileStatement</span></code></td> <td>Triggered before trying to compile any expression. This allows the developer to override any statement</td> </tr> </tbody> </table> <p>Volt extensions must be in registered in the compiler making them available in compile time:</p> <pre class=\"highlight-php\" data-language=\"php\">// Register the extension in the compiler\n$compiler-&gt;addExtension(new PhpFunctionExtension());\n</pre>    <h2 id=\"caching-view-fragments\">Caching view fragments</h2> <p>With Volt it’s easy cache view fragments. This caching improves performance preventing that the contents of a block from being executed by PHP each time the view is displayed:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{% cache \"sidebar\" %}\n    &lt;!-- generate this content is slow so we are going to cache it --&gt;\n{% endcache %}\n</pre> <p>Setting a specific number of seconds:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{# cache the sidebar by 1 hour #}\n{% cache \"sidebar\" 3600 %}\n    &lt;!-- generate this content is slow so we are going to cache it --&gt;\n{% endcache %}\n</pre> <p>Any valid expression can be used as cache key:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{% cache (\"article-\" ~ post.id) 3600 %}\n\n    &lt;h1&gt;{{ post.title }}&lt;/h1&gt;\n\n    &lt;p&gt;{{ post.content }}&lt;/p&gt;\n\n{% endcache %}\n</pre> <p>The caching is done by the <a class=\"reference internal\" href=\"cache\"><em>Phalcon\\Cache</em></a> component via the view component. Learn more about how this integration works in the section <a class=\"reference internal\" href=\"views\"><em>“Caching View Fragments”</em></a>.</p>   <h2 id=\"inject-services-into-a-template\">Inject Services into a Template</h2> <p>If a service container (DI) is available for Volt, you can use the services by only accessing the name of the service in the template:</p> <pre class=\"highlight-html+jinja\" data-language=\"html\">{# Inject the 'flash' service #}\n&lt;div id=\"messages\"&gt;{{ flash.output() }}&lt;/div&gt;\n\n{# Inject the 'security' service #}\n&lt;input type=\"hidden\" name=\"token\" value=\"{{ security.getToken() }}\"&gt;\n</pre>   <h2 id=\"stand-alone-component\">Stand-alone component</h2> <p>Using Volt in a stand-alone mode can be demonstrated below:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler as VoltCompiler;\n\n// Create a compiler\n$compiler = new VoltCompiler();\n\n// Optionally add some options\n$compiler-&gt;setOptions(\n    array(\n        // ...\n    )\n);\n\n// Compile a template string returning PHP code\necho $compiler-&gt;compileString('{{ \"hello\" }}');\n\n// Compile a template in a file specifying the destination file\n$compiler-&gt;compileFile('layouts/main.volt', 'cache/layouts/main.volt.php');\n\n// Compile a template in a file based on the options passed to the compiler\n$compiler-&gt;compile('layouts/main.volt');\n\n// Require the compiled templated (optional)\nrequire $compiler-&gt;getCompiledTemplatePath();\n</pre>   <h2 id=\"external-resources\">External Resources</h2> <ul class=\"simple\"> <li>A bundle for Sublime/Textmate is available <a class=\"reference external\" href=\"https://github.com/phalcon/volt-sublime-textmate\">here</a>\n</li> <li>\n<a class=\"reference external\" href=\"http://album-o-rama.phalconphp.com\">Album-O-Rama</a> is a sample application using Volt as template engine, [<a class=\"reference external\" href=\"https://github.com/phalcon/album-o-rama\">Album-O-Rama on Github</a>]</li> <li>\n<a class=\"reference external\" href=\"http://phalconphp.com\">Our website</a> is running using Volt as template engine, [<a class=\"reference external\" href=\"https://github.com/phalcon/website\">Our website on Github</a>]</li> <li>\n<a class=\"reference external\" href=\"http://forum.phalconphp.com\">Phosphorum</a>, the Phalcon’s forum, also uses Volt, [<a class=\"reference external\" href=\"https://github.com/phalcon/forum\">Phosphorum on Github</a>]</li> <li>\n<a class=\"reference external\" href=\"http://vokuro.phalconphp.com\">Vökuró</a>, is another sample application that use Volt, [<a class=\"reference external\" href=\"https://github.com/phalcon/vokuro\">Vökuró on Github</a>]</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/volt.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/volt.html</a>\n  </p>\n</div>\n","reference/logging":"<h1 id=\"logging\">Logging</h1> <p><a class=\"reference internal\" href=\"../api/phalcon_logger\"><em>Phalcon\\Logger</em></a> is a component whose purpose is to provide logging services for applications. It offers logging to different backends using different adapters. It also offers transaction logging, configuration options, different formats and filters. You can use the <a class=\"reference internal\" href=\"../api/phalcon_logger\"><em>Phalcon\\Logger</em></a> for every logging need your application has, from debugging processes to tracing application flow.</p>  <h2 id=\"adapters\">Adapters</h2> <p>This component makes use of adapters to store the logged messages. The use of adapters allows for a common logging interface which provides the ability to easily switch backends if necessary. The adapters supported are:</p> <table class=\"docutils\"> <colgroup> <col width=\"8%\"> <col width=\"23%\"> <col width=\"69%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Adapter</th> <th class=\"head\">Description</th> <th class=\"head\">API</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>File</td> <td>Logs to a plain text file</td> <td><a class=\"reference internal\" href=\"../api/phalcon_logger_adapter_file\"><em>Phalcon\\Logger\\Adapter\\File</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Stream</td> <td>Logs to a PHP Streams</td> <td><a class=\"reference internal\" href=\"../api/phalcon_logger_adapter_stream\"><em>Phalcon\\Logger\\Adapter\\Stream</em></a></td> </tr> <tr class=\"row-even\">\n<td>Syslog</td> <td>Logs to the system logger</td> <td><a class=\"reference internal\" href=\"../api/phalcon_logger_adapter_syslog\"><em>Phalcon\\Logger\\Adapter\\Syslog</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Firephp</td> <td>Logs to the FirePHP</td> <td><a class=\"reference internal\" href=\"../api/phalcon_logger_adapter_firephp\"><em>Phalcon\\Logger\\Adapter\\FirePHP</em></a></td> </tr> </tbody> </table>   <h2 id=\"creating-a-log\">Creating a Log</h2> <p>The example below shows how to create a log and add messages to it:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\File as FileAdapter;\n\n$logger = new FileAdapter(\"app/logs/test.log\");\n\n// These are the different log levels available:\n$logger-&gt;critical(\"This is a critical message\");\n$logger-&gt;emergency(\"This is an emergency message\");\n$logger-&gt;debug(\"This is a debug message\");\n$logger-&gt;error(\"This is an error message\");\n$logger-&gt;info(\"This is an info message\");\n$logger-&gt;notice(\"This is a notice message\");\n$logger-&gt;warning(\"This is a warning message\");\n$logger-&gt;alert(\"This is an alert message\");\n\n// You can also use the log() method with a Logger constant:\n$logger-&gt;log(\"This is another error message\", Logger::ERROR);\n\n// If no constant is given, DEBUG is assumed.\n$logger-&gt;log(\"This is a message\");\n</pre> <p>The log generated is below:</p> <pre class=\"highlight-none\" data-language=\"none\">[Tue, 28 Jul 15 22:09:02 -0500][CRITICAL] This is a critical message\n[Tue, 28 Jul 15 22:09:02 -0500][EMERGENCY] This is an emergency message\n[Tue, 28 Jul 15 22:09:02 -0500][DEBUG] This is a debug message\n[Tue, 28 Jul 15 22:09:02 -0500][ERROR] This is an error message\n[Tue, 28 Jul 15 22:09:02 -0500][INFO] This is an info message\n[Tue, 28 Jul 15 22:09:02 -0500][NOTICE] This is a notice message\n[Tue, 28 Jul 15 22:09:02 -0500][WARNING] This is a warning message\n[Tue, 28 Jul 15 22:09:02 -0500][ALERT] This is an alert message\n[Tue, 28 Jul 15 22:09:02 -0500][ERROR] This is another error message\n[Tue, 28 Jul 15 22:09:02 -0500][DEBUG] This is a message\n</pre> <p>You can also set a log level using the <code class=\"code docutils literal\"><span class=\"pre\">setLogLevel()</span></code> method. This method takes a Logger constant and will only save log messages that are as important or more important than the constant:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\File as FileAdapter;\n\n$logger = new FileAdapter(\"app/logs/test.log\");\n\n$logger-&gt;setLogLevel(Logger::CRITICAL);\n</pre> <p>In the example above, only critical and emergency messages will get saved to the log. By default, everything is saved.</p>   <h2 id=\"transactions\">Transactions</h2> <p>Logging data to an adapter i.e. File (file system) is always an expensive operation in terms of performance. To combat that, you can take advantage of logging transactions. Transactions store log data temporarily in memory and later on write the data to the relevant adapter (File in this case) in a single atomic operation.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Logger\\Adapter\\File as FileAdapter;\n\n// Create the logger\n$logger = new FileAdapter(\"app/logs/test.log\");\n\n// Start a transaction\n$logger-&gt;begin();\n\n// Add messages\n$logger-&gt;alert(\"This is an alert\");\n$logger-&gt;error(\"This is another error\");\n\n// Commit messages to file\n$logger-&gt;commit();\n</pre>   <h2 id=\"logging-to-multiple-handlers\">Logging to Multiple Handlers</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_logger\"><em>Phalcon\\Logger</em></a> can send messages to multiple handlers with a just single call:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Logger;\nuse Phalcon\\Logger\\Multiple as MultipleStream;\nuse Phalcon\\Logger\\Adapter\\File as FileAdapter;\nuse Phalcon\\Logger\\Adapter\\Stream as StreamAdapter;\n\n$logger = new MultipleStream();\n\n$logger-&gt;push(new FileAdapter('test.log'));\n$logger-&gt;push(new StreamAdapter('php://stdout'));\n\n$logger-&gt;log(\"This is a message\");\n$logger-&gt;log(\"This is an error\", Logger::ERROR);\n$logger-&gt;error(\"This is another error\");\n</pre> <p>The messages are sent to the handlers in the order they were registered.</p>   <h2 id=\"message-formatting\">Message Formatting</h2> <p>This component makes use of ‘formatters’ to format messages before sending them to the backend. The formatters available are:</p> <table class=\"docutils\"> <colgroup> <col width=\"6%\"> <col width=\"38%\"> <col width=\"56%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Adapter</th> <th class=\"head\">Description</th> <th class=\"head\">API</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Line</td> <td>Formats the messages using a one-line string</td> <td><a class=\"reference internal\" href=\"../api/phalcon_logger_formatter_line\"><em>Phalcon\\Logger\\Formatter\\Line</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Firephp</td> <td>Formats the messages so that they can be sent to FirePHP</td> <td><a class=\"reference internal\" href=\"../api/phalcon_logger_formatter_firephp\"><em>Phalcon\\Logger\\Formatter\\Firephp</em></a></td> </tr> <tr class=\"row-even\">\n<td>Json</td> <td>Prepares a message to be encoded with JSON</td> <td><a class=\"reference internal\" href=\"../api/phalcon_logger_formatter_json\"><em>Phalcon\\Logger\\Formatter\\Json</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Syslog</td> <td>Prepares a message to be sent to syslog</td> <td><a class=\"reference internal\" href=\"../api/phalcon_logger_formatter_syslog\"><em>Phalcon\\Logger\\Formatter\\Syslog</em></a></td> </tr> </tbody> </table>  <h3 id=\"line-formatter\">Line Formatter</h3> <p>Formats the messages using a one-line string. The default logging format is:</p> <pre class=\"highlight-none\" data-language=\"none\">[%date%][%type%] %message%\n</pre> <p>You can change the default format using <code class=\"code docutils literal\"><span class=\"pre\">setFormat()</span></code>, this allows you to change the format of the logged messages by defining your own. The log format variables allowed are:</p> <table class=\"docutils\"> <colgroup> <col width=\"21%\"> <col width=\"79%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Variable</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>%message%</td> <td>The message itself expected to be logged</td> </tr> <tr class=\"row-odd\">\n<td>%date%</td> <td>Date the message was added</td> </tr> <tr class=\"row-even\">\n<td>%type%</td> <td>Uppercase string with message type</td> </tr> </tbody> </table> <p>The example below shows how to change the log format:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Logger\\Formatter\\Line as LineFormatter;\n\n// Changing the logger format\n$formatter = new LineFormatter(\"%date% - %message%\");\n$logger-&gt;setFormatter($formatter);\n</pre>   <h3 id=\"implementing-your-own-formatters\">Implementing your own formatters</h3> <p>The <a class=\"reference internal\" href=\"../api/phalcon_logger_formatterinterface\"><em>Phalcon\\Logger\\FormatterInterface</em></a> interface must be implemented in order to create your own logger formatter or extend the existing ones.</p>    <h2 id=\"id1\">Adapters</h2> <p>The following examples show the basic use of each adapter:</p>  <h3 id=\"stream-logger\">Stream Logger</h3> <p>The stream logger writes messages to a valid registered stream in PHP. A list of streams is available <a class=\"reference external\" href=\"http://php.net/manual/en/wrappers.php\">here</a>:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Logger\\Adapter\\Stream as StreamAdapter;\n\n// Opens a stream using zlib compression\n$logger = new StreamAdapter(\"compress.zlib://week.log.gz\");\n\n// Writes the logs to stderr\n$logger = new StreamAdapter(\"php://stderr\");\n</pre>   <h3 id=\"file-logger\">File Logger</h3> <p>This logger uses plain files to log any kind of data. By default all logger files are opened using append mode which opens the files for writing only; placing the file pointer at the end of the file. If the file does not exist, an attempt will be made to create it. You can change this mode by passing additional options to the constructor:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Logger\\Adapter\\File as FileAdapter;\n\n// Create the file logger in 'w' mode\n$logger = new FileAdapter(\n    \"app/logs/test.log\",\n    array(\n        'mode' =&gt; 'w'\n    )\n);\n</pre>   <h3 id=\"syslog-logger\">Syslog Logger</h3> <p>This logger sends messages to the system logger. The syslog behavior may vary from one operating system to another.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Logger\\Adapter\\Syslog as SyslogAdapter;\n\n// Basic Usage\n$logger = new SyslogAdapter(null);\n\n// Setting ident/mode/facility\n$logger = new SyslogAdapter(\n    \"ident-name\",\n    array(\n        'option'   =&gt; LOG_NDELAY,\n        'facility' =&gt; LOG_MAIL\n    )\n);\n</pre>   <h3 id=\"firephp-logger\">FirePHP Logger</h3> <p>This logger sends messages in HTTP response headers that are displayed by <a class=\"reference external\" href=\"http://www.firephp.org/\">FirePHP</a>, a <a class=\"reference external\" href=\"http://getfirebug.com/\">Firebug</a> extension for Firefox.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Firephp as Firephp;\n\n$logger = new Firephp(\"\");\n$logger-&gt;log(\"This is a message\");\n$logger-&gt;log(\"This is an error\", Logger::ERROR);\n$logger-&gt;error(\"This is another error\");\n</pre>   <h3 id=\"implementing-your-own-adapters\">Implementing your own adapters</h3> <p>The <a class=\"reference internal\" href=\"../api/phalcon_logger_adapterinterface\"><em>Phalcon\\Logger\\AdapterInterface</em></a> interface must be implemented in order to create your own logger adapters or extend the existing ones.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/logging.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/logging.html</a>\n  </p>\n</div>\n","reference/cache":"<h1 id=\"improving-performance-with-cache\">Improving Performance with Cache</h1> <p>Phalcon provides the <a class=\"reference internal\" href=\"cache\"><em>Phalcon\\Cache</em></a> class allowing faster access to frequently used or already processed data. <a class=\"reference internal\" href=\"cache\"><em>Phalcon\\Cache</em></a> is written in C, achieving higher performance and reducing the overhead when getting items from the backends. This class uses an internal structure of frontend and backend components. Front-end components act as input sources or interfaces, while backend components offer storage options to the class.</p>  <h2 id=\"when-to-implement-cache\">When to implement cache?</h2> <p>Although this component is very fast, implementing it in cases that are not needed could lead to a loss of performance rather than gain. We recommend you check this cases before using a cache:</p> <ul class=\"simple\"> <li>You are making complex calculations that every time return the same result (changing infrequently)</li> <li>You are using a lot of helpers and the output generated is almost always the same</li> <li>You are accessing database data constantly and these data rarely change</li> </ul> <blockquote class=\"highlights\"> <div>\n<em>NOTE</em> Even after implementing the cache, you should check the hit ratio of your cache over a period of time. This can easily be done, especially in the case of Memcache or Apc, with the relevant tools that the backends provide.</div>\n</blockquote>   <h2 id=\"caching-behavior\">Caching Behavior</h2> <p>The caching process is divided into 2 parts:</p> <ul class=\"simple\"> <li>\n<strong>Frontend</strong>: This part is responsible for checking if a key has expired and perform additional transformations to the data before storing and after retrieving them from the backend-</li> <li>\n<strong>Backend</strong>: This part is responsible for communicating, writing/reading the data required by the frontend.</li> </ul>   <h2 id=\"caching-output-fragments\">Caching Output Fragments</h2> <p>An output fragment is a piece of HTML or text that is cached as is and returned as is. The output is automatically captured from the ob_* functions or the PHP output so that it can be saved in the cache. The following example demonstrates such usage. It receives the output generated by PHP and stores it into a file. The contents of the file are refreshed every 172800 seconds (2 days).</p> <p>The implementation of this caching mechanism allows us to gain performance by not executing the helper <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Tag::linkTo()</span></code> call whenever this piece of code is called.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Tag;\nuse Phalcon\\Cache\\Backend\\File as BackFile;\nuse Phalcon\\Cache\\Frontend\\Output as FrontOutput;\n\n// Create an Output frontend. Cache the files for 2 days\n$frontCache = new FrontOutput(\n    array(\n        \"lifetime\" =&gt; 172800\n    )\n);\n\n// Create the component that will cache from the \"Output\" to a \"File\" backend\n// Set the cache file directory - it's important to keep the \"/\" at the end of\n// the value for the folder\n$cache = new BackFile(\n    $frontCache,\n    array(\n        \"cacheDir\" =&gt; \"../app/cache/\"\n    )\n);\n\n// Get/Set the cache file to ../app/cache/my-cache.html\n$content = $cache-&gt;start(\"my-cache.html\");\n\n// If $content is null then the content will be generated for the cache\nif ($content === null) {\n\n    // Print date and time\n    echo date(\"r\");\n\n    // Generate a link to the sign-up action\n    echo Tag::linkTo(\n        array(\n            \"user/signup\",\n            \"Sign Up\",\n            \"class\" =&gt; \"signup-button\"\n        )\n    );\n\n    // Store the output into the cache file\n    $cache-&gt;save();\n\n} else {\n\n    // Echo the cached output\n    echo $content;\n}\n</pre> <p><em>NOTE</em> In the example above, our code remains the same, echoing output to the user as it has been doing before. Our cache component transparently captures that output and stores it in the cache file (when the cache is generated) or it sends it back to the user pre-compiled from a previous call, thus avoiding expensive operations.</p>   <h2 id=\"caching-arbitrary-data\">Caching Arbitrary Data</h2> <p>Caching just data is equally important for your application. Caching can reduce database load by reusing commonly used (but not updated) data, thus speeding up your application.</p>  <h3 id=\"file-backend-example\">File Backend Example</h3> <p>One of the caching adapters is ‘File’. The only key area for this adapter is the location of where the cache files will be stored. This is controlled by the cacheDir option which <em>must</em> have a backslash at the end of it.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Cache\\Backend\\File as BackFile;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Cache the files for 2 days using a Data frontend\n$frontCache = new FrontData(\n    array(\n        \"lifetime\" =&gt; 172800\n    )\n);\n\n// Create the component that will cache \"Data\" to a \"File\" backend\n// Set the cache file directory - important to keep the \"/\" at the end of\n// the value for the folder\n$cache = new BackFile(\n    $frontCache,\n    array(\n        \"cacheDir\" =&gt; \"../app/cache/\"\n    )\n);\n\n// Try to get cached records\n$cacheKey = 'robots_order_id.cache';\n$robots   = $cache-&gt;get($cacheKey);\nif ($robots === null) {\n\n    // $robots is null because of cache expiration or data does not exist\n    // Make the database call and populate the variable\n    $robots = Robots::find(\n        array(\n            \"order\" =&gt; \"id\"\n        )\n    );\n\n    // Store it in the cache\n    $cache-&gt;save($cacheKey, $robots);\n}\n\n// Use $robots :)\nforeach ($robots as $robot) {\n   echo $robot-&gt;name, \"\\n\";\n}\n</pre>   <h3 id=\"memcached-backend-example\">Memcached Backend Example</h3> <p>The above example changes slightly (especially in terms of configuration) when we are using a Memcached backend.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Cache\\Frontend\\Data as FrontData;\nuse Phalcon\\Cache\\Backend\\Libmemcached as BackMemCached;\n\n// Cache data for one hour\n$frontCache = new FrontData(\n    array(\n        \"lifetime\" =&gt; 3600\n    )\n);\n\n// Create the component that will cache \"Data\" to a \"Memcached\" backend\n// Memcached connection settings\n$cache = new BackMemCached(\n    $frontCache,\n    array(\n        \"servers\" =&gt; array(\n            array(\n                \"host\"   =&gt; \"127.0.0.1\",\n                \"port\"   =&gt; \"11211\",\n                \"weight\" =&gt; \"1\"\n            )\n        )\n    )\n);\n\n// Try to get cached records\n$cacheKey = 'robots_order_id.cache';\n$robots   = $cache-&gt;get($cacheKey);\nif ($robots === null) {\n\n    // $robots is null because of cache expiration or data does not exist\n    // Make the database call and populate the variable\n    $robots = Robots::find(\n        array(\n            \"order\" =&gt; \"id\"\n        )\n    );\n\n    // Store it in the cache\n    $cache-&gt;save($cacheKey, $robots);\n}\n\n// Use $robots :)\nforeach ($robots as $robot) {\n   echo $robot-&gt;name, \"\\n\";\n}\n</pre>    <h2 id=\"querying-the-cache\">Querying the cache</h2> <p>The elements added to the cache are uniquely identified by a key. In the case of the File backend, the key is the actual filename. To retrieve data from the cache, we just have to call it using the unique key. If the key does not exist, the get method will return null.</p> <pre class=\"highlight-php\" data-language=\"php\">// Retrieve products by key \"myProducts\"\n$products = $cache-&gt;get(\"myProducts\");\n</pre> <p>If you want to know which keys are stored in the cache you could call the queryKeys method:</p> <pre class=\"highlight-php\" data-language=\"php\">// Query all keys used in the cache\n$keys = $cache-&gt;queryKeys();\nforeach ($keys as $key) {\n    $data = $cache-&gt;get($key);\n    echo \"Key=\", $key, \" Data=\", $data;\n}\n\n// Query keys in the cache that begins with \"my-prefix\"\n$keys = $cache-&gt;queryKeys(\"my-prefix\");\n</pre>   <h2 id=\"deleting-data-from-the-cache\">Deleting data from the cache</h2> <p>There are times where you will need to forcibly invalidate a cache entry (due to an update in the cached data). The only requirement is to know the key that the data have been stored with.</p> <pre class=\"highlight-php\" data-language=\"php\">// Delete an item with a specific key\n$cache-&gt;delete(\"someKey\");\n\n// Delete all items from the cache\n$keys = $cache-&gt;queryKeys();\nforeach ($keys as $key) {\n    $cache-&gt;delete($key);\n}\n</pre>   <h2 id=\"checking-cache-existence\">Checking cache existence</h2> <p>It is possible to check if a cache already exists with a given key:</p> <pre class=\"highlight-php\" data-language=\"php\">if ($cache-&gt;exists(\"someKey\")) {\n    echo $cache-&gt;get(\"someKey\");\n} else {\n    echo \"Cache does not exists!\";\n}\n</pre>   <h2 id=\"lifetime\">Lifetime</h2> <p>A “lifetime” is a time in seconds that a cache could live without expire. By default, all the created caches use the lifetime set in the frontend creation. You can set a specific lifetime in the creation or retrieving of the data from the cache:</p> <p>Setting the lifetime when retrieving:</p> <pre class=\"highlight-php\" data-language=\"php\">$cacheKey = 'my.cache';\n\n// Setting the cache when getting a result\n$robots = $cache-&gt;get($cacheKey, 3600);\nif ($robots === null) {\n\n    $robots = \"some robots\";\n\n    // Store it in the cache\n    $cache-&gt;save($cacheKey, $robots);\n}\n</pre> <p>Setting the lifetime when saving:</p> <pre class=\"highlight-php\" data-language=\"php\">$cacheKey = 'my.cache';\n\n$robots = $cache-&gt;get($cacheKey);\nif ($robots === null) {\n\n    $robots = \"some robots\";\n\n    // Setting the cache when saving data\n    $cache-&gt;save($cacheKey, $robots, 3600);\n}\n</pre>   <h2 id=\"multi-level-cache\">Multi-Level Cache</h2> <p>This feature of the cache component, allows the developer to implement a multi-level cache. This new feature is very useful because you can save the same data in several cache locations with different lifetimes, reading first from the one with the faster adapter and ending with the slowest one until the data expires:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Cache\\Multiple;\nuse Phalcon\\Cache\\Backend\\Apc as ApcCache;\nuse Phalcon\\Cache\\Backend\\File as FileCache;\nuse Phalcon\\Cache\\Frontend\\Data as DataFrontend;\nuse Phalcon\\Cache\\Backend\\Memcache as MemcacheCache;\n\n$ultraFastFrontend = new DataFrontend(\n    array(\n        \"lifetime\" =&gt; 3600\n    )\n);\n\n$fastFrontend = new DataFrontend(\n    array(\n        \"lifetime\" =&gt; 86400\n    )\n);\n\n$slowFrontend = new DataFrontend(\n    array(\n        \"lifetime\" =&gt; 604800\n    )\n);\n\n// Backends are registered from the fastest to the slower\n$cache = new Multiple(\n    array(\n        new ApcCache(\n            $ultraFastFrontend,\n            array(\n                \"prefix\" =&gt; 'cache',\n            )\n        ),\n        new MemcacheCache(\n            $fastFrontend,\n            array(\n                \"prefix\" =&gt; 'cache',\n                \"host\"   =&gt; \"localhost\",\n                \"port\"   =&gt; \"11211\"\n            )\n        ),\n        new FileCache(\n            $slowFrontend,\n            array(\n                \"prefix\"   =&gt; 'cache',\n                \"cacheDir\" =&gt; \"../app/cache/\"\n            )\n        )\n    )\n);\n\n// Save, saves in every backend\n$cache-&gt;save('my-key', $data);\n</pre>   <h2 id=\"frontend-adapters\">Frontend Adapters</h2> <p>The available frontend adapters that are used as interfaces or input sources to the cache are:</p> <table class=\"docutils\"> <colgroup> <col width=\"4%\"> <col width=\"64%\"> <col width=\"32%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Adapter</th> <th class=\"head\">Description</th> <th class=\"head\">Example</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Output</td> <td>Read input data from standard PHP output</td> <td><a class=\"reference internal\" href=\"../api/phalcon_cache_frontend_output\"><em>Phalcon\\Cache\\Frontend\\Output</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Data</td> <td>It’s used to cache any kind of PHP data (big arrays, objects, text, etc). Data is serialized before stored in the backend.</td> <td><a class=\"reference internal\" href=\"../api/phalcon_cache_frontend_data\"><em>Phalcon\\Cache\\Frontend\\Data</em></a></td> </tr> <tr class=\"row-even\">\n<td>Base64</td> <td>It’s used to cache binary data. The data is serialized using base64_encode before be stored in the backend.</td> <td><a class=\"reference internal\" href=\"../api/phalcon_cache_frontend_base64\"><em>Phalcon\\Cache\\Frontend\\Base64</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Json</td> <td>Data is encoded in JSON before be stored in the backend. Decoded after be retrieved. This frontend is useful to share data with other languages or frameworks.</td> <td><a class=\"reference internal\" href=\"../api/phalcon_cache_frontend_json\"><em>Phalcon\\Cache\\Frontend\\Json</em></a></td> </tr> <tr class=\"row-even\">\n<td>IgBinary</td> <td>It’s used to cache any kind of PHP data (big arrays, objects, text, etc). Data is serialized using IgBinary before be stored in the backend.</td> <td><a class=\"reference internal\" href=\"../api/phalcon_cache_frontend_igbinary\"><em>Phalcon\\Cache\\Frontend\\Igbinary</em></a></td> </tr> <tr class=\"row-odd\">\n<td>None</td> <td>It’s used to cache any kind of PHP data without serializing them.</td> <td><a class=\"reference internal\" href=\"../api/phalcon_cache_frontend_none\"><em>Phalcon\\Cache\\Frontend\\None</em></a></td> </tr> </tbody> </table>  <h3 id=\"implementing-your-own-frontend-adapters\">Implementing your own Frontend adapters</h3> <p>The <a class=\"reference internal\" href=\"../api/phalcon_cache_frontendinterface\"><em>Phalcon\\Cache\\FrontendInterface</em></a> interface must be implemented in order to create your own frontend adapters or extend the existing ones.</p>    <h2 id=\"backend-adapters\">Backend Adapters</h2> <p>The backend adapters available to store cache data are:</p> <table class=\"docutils\"> <colgroup> <col width=\"6%\"> <col width=\"27%\"> <col width=\"7%\"> <col width=\"12%\"> <col width=\"47%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Adapter</th> <th class=\"head\">Description</th> <th class=\"head\">Info</th> <th class=\"head\">Required Extensions</th> <th class=\"head\">Example</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>File</td> <td>Stores data to local plain files</td> <td> </td> <td> </td> <td><a class=\"reference internal\" href=\"../api/phalcon_cache_backend_file\"><em>Phalcon\\Cache\\Backend\\File</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Memcached</td> <td>Stores data to a memcached server</td> <td><a class=\"reference external\" href=\"http://www.php.net/memcache\">Memcached</a></td> <td><a class=\"reference external\" href=\"http://pecl.php.net/package/memcache\">memcache</a></td> <td><a class=\"reference internal\" href=\"../api/phalcon_cache_backend_memcache\"><em>Phalcon\\Cache\\Backend\\Memcache</em></a></td> </tr> <tr class=\"row-even\">\n<td>APC</td> <td>Stores data to the Alternative PHP Cache (APC)</td> <td><a class=\"reference external\" href=\"http://php.net/apc\">APC</a></td> <td><a class=\"reference external\" href=\"http://pecl.php.net/package/APC\">APC extension</a></td> <td><a class=\"reference internal\" href=\"../api/phalcon_cache_backend_apc\"><em>Phalcon\\Cache\\Backend\\Apc</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Mongo</td> <td>Stores data to Mongo Database</td> <td><a class=\"reference external\" href=\"http://mongodb.org/\">MongoDb</a></td> <td><a class=\"reference external\" href=\"http://pecl.php.net/package/mongo\">Mongo</a></td> <td><a class=\"reference internal\" href=\"../api/phalcon_cache_backend_mongo\"><em>Phalcon\\Cache\\Backend\\Mongo</em></a></td> </tr> <tr class=\"row-even\">\n<td>XCache</td> <td>Stores data in XCache</td> <td><a class=\"reference external\" href=\"http://xcache.lighttpd.net/\">XCache</a></td> <td><a class=\"reference external\" href=\"http://pecl.php.net/package/xcache\">xcache extension</a></td> <td><a class=\"reference internal\" href=\"../api/phalcon_cache_backend_xcache\"><em>Phalcon\\Cache\\Backend\\Xcache</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Redis</td> <td>Stores data in Redis</td> <td><a class=\"reference external\" href=\"http://redis.io/\">Redis</a></td> <td><a class=\"reference external\" href=\"http://pecl.php.net/package/redis\">redis extension</a></td> <td><a class=\"reference internal\" href=\"../api/phalcon_cache_backend_redis\"><em>Phalcon\\Cache\\Backend\\Redis</em></a></td> </tr> </tbody> </table>  <h3 id=\"implementing-your-own-backend-adapters\">Implementing your own Backend adapters</h3> <p>The <a class=\"reference internal\" href=\"../api/phalcon_cache_backendinterface\"><em>Phalcon\\Cache\\BackendInterface</em></a> interface must be implemented in order to create your own backend adapters or extend the existing ones.</p>   <h3 id=\"file-backend-options\">File Backend Options</h3> <p>This backend will store cached content into files in the local server. The available options for this backend are:</p> <table class=\"docutils\"> <colgroup> <col width=\"14%\"> <col width=\"86%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>prefix</td> <td>A prefix that is automatically prepended to the cache keys</td> </tr> <tr class=\"row-odd\">\n<td>cacheDir</td> <td>A writable directory on which cached files will be placed</td> </tr> </tbody> </table>   <h3 id=\"memcached-backend-options\">Memcached Backend Options</h3> <p>This backend will store cached content on a memcached server. The available options for this backend are:</p> <table class=\"docutils\"> <colgroup> <col width=\"16%\"> <col width=\"84%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>prefix</td> <td>A prefix that is automatically prepended to the cache keys</td> </tr> <tr class=\"row-odd\">\n<td>host</td> <td>memcached host</td> </tr> <tr class=\"row-even\">\n<td>port</td> <td>memcached port</td> </tr> <tr class=\"row-odd\">\n<td>persistent</td> <td>create a persistent connection to memcached?</td> </tr> </tbody> </table>   <h3 id=\"apc-backend-options\">APC Backend Options</h3> <p>This backend will store cached content on Alternative PHP Cache (<a class=\"reference external\" href=\"http://php.net/apc\">APC</a>). The available options for this backend are:</p> <table class=\"docutils\"> <colgroup> <col width=\"16%\"> <col width=\"84%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>prefix</td> <td>A prefix that is automatically prepended to the cache keys</td> </tr> </tbody> </table>   <h3 id=\"mongo-backend-options\">Mongo Backend Options</h3> <p>This backend will store cached content on a MongoDB server. The available options for this backend are:</p> <table class=\"docutils\"> <colgroup> <col width=\"16%\"> <col width=\"84%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>prefix</td> <td>A prefix that is automatically prepended to the cache keys</td> </tr> <tr class=\"row-odd\">\n<td>server</td> <td>A MongoDB connection string</td> </tr> <tr class=\"row-even\">\n<td>db</td> <td>Mongo database name</td> </tr> <tr class=\"row-odd\">\n<td>collection</td> <td>Mongo collection in the database</td> </tr> </tbody> </table>   <h3 id=\"xcache-backend-options\">XCache Backend Options</h3> <p>This backend will store cached content on XCache (<a class=\"reference external\" href=\"http://xcache.lighttpd.net/\">XCache</a>). The available options for this backend are:</p> <table class=\"docutils\"> <colgroup> <col width=\"16%\"> <col width=\"84%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>prefix</td> <td>A prefix that is automatically prepended to the cache keys</td> </tr> </tbody> </table>   <h3 id=\"redis-backend-options\">Redis Backend Options</h3> <p>This backend will store cached content on a Redis server (<a class=\"reference external\" href=\"http://redis.io/\">Redis</a>). The available options for this backend are:</p> <table class=\"docutils\"> <colgroup> <col width=\"16%\"> <col width=\"84%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>prefix</td> <td>A prefix that is automatically prepended to the cache keys</td> </tr> <tr class=\"row-odd\">\n<td>host</td> <td>Redis host</td> </tr> <tr class=\"row-even\">\n<td>port</td> <td>Redis port</td> </tr> <tr class=\"row-odd\">\n<td>auth</td> <td>Password to authenticate to a password-protected Redis server</td> </tr> <tr class=\"row-even\">\n<td>persistent</td> <td>Create a persistent connection to Redis</td> </tr> <tr class=\"row-odd\">\n<td>index</td> <td>The index of the Redis database to use</td> </tr> </tbody> </table> <p>There are more adapters available for this components in the <a class=\"reference external\" href=\"https://github.com/phalcon/incubator\">Phalcon Incubator</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/cache.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/cache.html</a>\n  </p>\n</div>\n","reference/whats-next":"<h1 id=\"increasing-performance-what-s-next\">Increasing Performance: What’s next?</h1> <p>Get faster applications requires refine many aspects: server, client, network, database, web server, static sources, etc. In this chapter we highlight scenarios where you can improve performance and how detect what is really slow in your application.</p>  <h2 id=\"profile-on-the-server\">Profile on the Server</h2> <p>Each application is different, the permanent profiling is important to understand where performance can be increased. Profiling gives us a real picture on what is really slow and what does not. Profiles can vary between a request and another, so it is important to make enough measurements to make conclusions.</p>  <h3 id=\"profiling-with-xdebug\">Profiling with XDebug</h3> <p><a class=\"reference external\" href=\"http://xdebug.org/docs\">Xdebug</a> provides an easier way to profile PHP applications, just install the extension and enable profiling in the php.ini:</p> <pre class=\"highlight-ini\" data-language=\"ini\">xdebug.profiler_enable = On\n</pre> <p>Using a tool like <a class=\"reference external\" href=\"https://github.com/jokkedk/webgrind/\">Webgrind</a> you can see which functions/methods are slower than others:</p> <div class=\"figure align-center\"> <img alt=\"../_images/webgrind.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/webgrind.jpg\"> </div>   <h3 id=\"profiling-with-xhprof\">Profiling with Xhprof</h3> <p><a class=\"reference external\" href=\"https://github.com/facebook/xhprof\">Xhprof</a> is another interesting extension to profile PHP applications. Add the following line to the start of the bootstrap file:</p> <pre class=\"highlight-php\" data-language=\"php\">xhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);\n</pre> <p>Then at the end of the file save the profiled data:</p> <pre class=\"highlight-php\" data-language=\"php\">$xhprof_data = xhprof_disable('/tmp');\n\n$XHPROF_ROOT = \"/var/www/xhprof/\";\ninclude_once $XHPROF_ROOT . \"/xhprof_lib/utils/xhprof_lib.php\";\ninclude_once $XHPROF_ROOT . \"/xhprof_lib/utils/xhprof_runs.php\";\n\n$xhprof_runs = new XHProfRuns_Default();\n$run_id = $xhprof_runs-&gt;save_run($xhprof_data, \"xhprof_testing\");\n\necho \"http://localhost/xhprof/xhprof_html/index.php?run={$run_id}&amp;source=xhprof_testing\\n\";\n</pre> <p>Xhprof provides a built-in HTML viewer to analyze the profiled data:</p> <div class=\"figure align-center\"> <img alt=\"../_images/xhprof-2.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/xhprof-2.jpg\"> </div> <div class=\"figure align-center\"> <img alt=\"../_images/xhprof-1.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/xhprof-1.jpg\"> </div>   <h3 id=\"profiling-sql-statements\">Profiling SQL Statements</h3> <p>Most database systems provide tools to identify slow SQL statements. Detecting and fixing slow queries is very important in order to increase performance in the server side. In the Mysql case, you can use the slow query log to know what SQL queries are taking more time than expected:</p> <pre class=\"highlight-ini\" data-language=\"ini\">log-slow-queries = /var/log/slow-queries.log\nlong_query_time = 1.5\n</pre>    <h2 id=\"profile-on-the-client\">Profile on the Client</h2> <p>Sometimes we may need to improve the loading of static elements such as images, javascript and css to improve performance. The following tools are useful to detect common bottlenecks in the client side:</p>  <h3 id=\"profile-with-chrome-firefox\">Profile with Chrome/Firefox</h3> <p>Most modern browsers have tools to profile the page loading time. In Chrome you can use the web inspector to know how much time is taking the loading of the different resources required by a single page:</p> <div class=\"figure align-center\"> <img alt=\"../_images/chrome-1.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/chrome-1.jpg\"> </div> <p><a class=\"reference external\" href=\"http://getfirebug.com/\">Firebug</a> provides a similar functionality:</p> <div class=\"figure align-center\"> <img alt=\"../_images/firefox-1.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/firefox-1.jpg\"> </div>    <h2 id=\"yahoo-yslow\">Yahoo! YSlow</h2> <p><a class=\"reference external\" href=\"http://developer.yahoo.com/yslow/\">YSlow</a> analyzes web pages and suggests ways to improve their performance based on a set of <a class=\"reference external\" href=\"http://developer.yahoo.com/performance/rules.html\">rules for high performance web pages</a></p> <div class=\"figure align-center\"> <img alt=\"../_images/yslow-1.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/yslow-1.jpg\"> </div>  <h3 id=\"profile-with-speed-tracer\">Profile with Speed Tracer</h3> <p><a class=\"reference external\" href=\"https://developers.google.com/web-toolkit/speedtracer/\">Speed Tracer</a> is a tool to help you identify and fix performance problems in your web applications. It visualizes metrics that are taken from low level instrumentation points inside of the browser and analyzes them as your application runs. Speed Tracer is available as a Chrome extension and works on all platforms where extensions are currently supported (Windows and Linux).</p> <div class=\"figure align-center\"> <img alt=\"../_images/speed-tracer.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/speed-tracer.jpg\"> </div> <p>This tool is very useful because it help you to get the real time used to render the whole page including HTML parsing, Javascript evaluation and CSS styling.</p>    <h2 id=\"use-a-recent-php-version\">Use a recent PHP version</h2> <p>PHP is faster every day, using the latest version improves the performance of your applications and also of Phalcon.</p>   <h2 id=\"use-a-php-bytecode-cache\">Use a PHP Bytecode Cache</h2> <p><a class=\"reference external\" href=\"http://php.net/manual/en/book.apc.php\">APC</a> as many other bytecode caches help an application to reduce the overhead of read, tokenize and parse PHP files in each request. Once the extension is installed use the following setting to enable APC:</p> <pre class=\"highlight-ini\" data-language=\"ini\">apc.enabled = On\n</pre> <p>PHP 5.5 includes a built-in bytecode cache called ZendOptimizer+, this extension is also available for 5.3 and 5.4.</p>   <h2 id=\"do-blocking-work-in-the-background\">Do blocking work in the background</h2> <p>Process a video, send e-mails, compress a file or an image, etc., are slow tasks that must be processed in background jobs. There are a variety of tools that provide queuing or messaging systems that work well with PHP:</p> <ul class=\"simple\"> <li><a class=\"reference external\" href=\"http://kr.github.io/beanstalkd/\">Beanstalkd</a></li> <li><a class=\"reference external\" href=\"http://redis.io/\">Redis</a></li> <li><a class=\"reference external\" href=\"http://www.rabbitmq.com/\">RabbitMQ</a></li> <li><a class=\"reference external\" href=\"https://github.com/chrisboulton/php-resque\">Resque</a></li> <li><a class=\"reference external\" href=\"http://gearman.org/\">Gearman</a></li> <li><a class=\"reference external\" href=\"http://www.zeromq.org/\">ZeroMQ</a></li> </ul>   <h2 id=\"google-page-speed\">Google Page Speed</h2> <p><a class=\"reference external\" href=\"https://developers.google.com/speed/pagespeed/mod\">mod_pagespeed</a> speeds up your site and reduces page load time. This open-source Apache HTTP server module (also available for nginx as <a class=\"reference external\" href=\"https://developers.google.com/speed/pagespeed/ngx\">ngx_pagespeed</a>) automatically applies web performance best practices to pages, and associated assets (CSS, JavaScript, images) without requiring that you modify your existing content or workflow.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/whats-next.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/whats-next.html</a>\n  </p>\n</div>\n","reference/annotations":"<h1 id=\"annotations-parser\">Annotations Parser</h1> <p>It is the first time that an annotations parser component is written in C for the PHP world. <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Annotations</span></code> is a general purpose component that provides ease of parsing and caching annotations in PHP classes to be used in applications.</p> <p>Annotations are read from docblocks in classes, methods and properties. An annotation can be placed at any position in the docblock:</p> <pre class=\"highlight-php\" data-language=\"php\">/**\n * This is the class description\n *\n * @AmazingClass(true)\n */\nclass Example\n{\n    /**\n     * This a property with a special feature\n     *\n     * @SpecialFeature\n     */\n    protected $someProperty;\n\n    /**\n     * This is a method\n     *\n     * @SpecialFeature\n     */\n    public function someMethod()\n    {\n        // ...\n    }\n}\n</pre> <p>An annotation has the following syntax:</p> <pre class=\"highlight-php\" data-language=\"php\">/**\n * @Annotation-Name\n * @Annotation-Name(param1, param2, ...)\n */\n</pre> <p>Also, an annotation can be placed at any part of a docblock:</p> <pre class=\"highlight-php\" data-language=\"php\">/**\n * This a property with a special feature\n *\n * @SpecialFeature\n *\n * More comments\n *\n * @AnotherSpecialFeature(true)\n */\n</pre> <p>The parser is highly flexible, the following docblock is valid:</p> <pre class=\"highlight-php\" data-language=\"php\">/**\n * This a property with a special feature @SpecialFeature({\nsomeParameter=\"the value\", false\n\n })  More comments @AnotherSpecialFeature(true) @MoreAnnotations\n **/\n</pre> <p>However, to make the code more maintainable and understandable it is recommended to place annotations at the end of the docblock:</p> <pre class=\"highlight-php\" data-language=\"php\">/**\n * This a property with a special feature\n * More comments\n *\n * @SpecialFeature({someParameter=\"the value\", false})\n * @AnotherSpecialFeature(true)\n */\n</pre>  <h2 id=\"reading-annotations\">Reading Annotations</h2> <p>A reflector is implemented to easily get the annotations defined on a class using an object-oriented interface:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Annotations\\Adapter\\Memory as MemoryAdapter;\n\n$reader = new MemoryAdapter();\n\n// Reflect the annotations in the class Example\n$reflector = $reader-&gt;get('Example');\n\n// Read the annotations in the class' docblock\n$annotations = $reflector-&gt;getClassAnnotations();\n\n// Traverse the annotations\nforeach ($annotations as $annotation) {\n\n    // Print the annotation name\n    echo $annotation-&gt;getName(), PHP_EOL;\n\n    // Print the number of arguments\n    echo $annotation-&gt;numberArguments(), PHP_EOL;\n\n    // Print the arguments\n    print_r($annotation-&gt;getArguments());\n}\n</pre> <p>The annotation reading process is very fast, however, for performance reasons it is recommended to store the parsed annotations using an adapter. Adapters cache the processed annotations avoiding the need of parse the annotations again and again.</p> <p><a class=\"reference internal\" href=\"../api/phalcon_annotations_adapter_memory\"><em>Phalcon\\Annotations\\Adapter\\Memory</em></a> was used in the above example. This adapter only caches the annotations while the request is running and for this reason the adapter is more suitable for development. There are other adapters to swap out when the application is in production stage.</p>   <h2 id=\"types-of-annotations\">Types of Annotations</h2> <p>Annotations may have parameters or not. A parameter could be a simple literal (strings, number, boolean, null), an array, a hashed list or other annotation:</p> <pre class=\"highlight-php\" data-language=\"php\">/**\n * Simple Annotation\n *\n * @SomeAnnotation\n */\n\n/**\n * Annotation with parameters\n *\n * @SomeAnnotation(\"hello\", \"world\", 1, 2, 3, false, true)\n */\n\n/**\n * Annotation with named parameters\n *\n * @SomeAnnotation(first=\"hello\", second=\"world\", third=1)\n * @SomeAnnotation(first: \"hello\", second: \"world\", third: 1)\n */\n\n/**\n * Passing an array\n *\n * @SomeAnnotation([1, 2, 3, 4])\n * @SomeAnnotation({1, 2, 3, 4})\n */\n\n/**\n * Passing a hash as parameter\n *\n * @SomeAnnotation({first=1, second=2, third=3})\n * @SomeAnnotation({'first'=1, 'second'=2, 'third'=3})\n * @SomeAnnotation({'first': 1, 'second': 2, 'third': 3})\n * @SomeAnnotation(['first': 1, 'second': 2, 'third': 3])\n */\n\n/**\n * Nested arrays/hashes\n *\n * @SomeAnnotation({\"name\"=\"SomeName\", \"other\"={\n *     \"foo1\": \"bar1\", \"foo2\": \"bar2\", {1, 2, 3},\n * }})\n */\n\n/**\n * Nested Annotations\n *\n * @SomeAnnotation([email protected](1, 2, 3))\n */\n</pre>   <h2 id=\"practical-usage\">Practical Usage</h2> <p>Next we will explain some practical examples of annotations in PHP applications:</p>  <h3 id=\"cache-enabler-with-annotations\">Cache Enabler with Annotations</h3> <p>Let’s pretend we’ve created the following controller and you want to create a plugin that automatically starts the cache if the last action executed is marked as cacheable. First off all, we register a plugin in the Dispatcher service to be notified when a route is executed:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di['dispatcher'] = function () {\n\n    $eventsManager = new EventsManager();\n\n    // Attach the plugin to 'dispatch' events\n    $eventsManager-&gt;attach('dispatch', new CacheEnablerPlugin());\n\n    $dispatcher = new MvcDispatcher();\n\n    $dispatcher-&gt;setEventsManager($eventsManager);\n\n    return $dispatcher;\n};\n</pre> <p>CacheEnablerPlugin is a plugin that intercepts every action executed in the dispatcher enabling the cache if needed:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\User\\Plugin;\n\n/**\n * Enables the cache for a view if the latest\n * executed action has the annotation @Cache\n */\nclass CacheEnablerPlugin extends Plugin\n{\n    /**\n     * This event is executed before every route is executed in the dispatcher\n     */\n    public function beforeExecuteRoute(Event $event, Dispatcher $dispatcher)\n    {\n        // Parse the annotations in the method currently executed\n        $annotations = $this-&gt;annotations-&gt;getMethod(\n            $dispatcher-&gt;getControllerClass(),\n            $dispatcher-&gt;getActiveMethod()\n        );\n\n        // Check if the method has an annotation 'Cache'\n        if ($annotations-&gt;has('Cache')) {\n\n            // The method has the annotation 'Cache'\n            $annotation = $annotations-&gt;get('Cache');\n\n            // Get the lifetime\n            $lifetime = $annotation-&gt;getNamedParameter('lifetime');\n\n            $options = array('lifetime' =&gt; $lifetime);\n\n            // Check if there is a user defined cache key\n            if ($annotation-&gt;hasNamedParameter('key')) {\n                $options['key'] = $annotation-&gt;getNamedParameter('key');\n            }\n\n            // Enable the cache for the current method\n            $this-&gt;view-&gt;cache($options);\n        }\n    }\n}\n</pre> <p>Now, we can use the annotation in a controller:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass NewsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    /**\n     * This is a comment\n     *\n     * @Cache(lifetime=86400)\n     */\n    public function showAllAction()\n    {\n        $this-&gt;view-&gt;article = Articles::find();\n    }\n\n    /**\n     * This is a comment\n     *\n     * @Cache(key=\"my-key\", lifetime=86400)\n     */\n    public function showAction($slug)\n    {\n        $this-&gt;view-&gt;article = Articles::findFirstByTitle($slug);\n    }\n}\n</pre>   <h3 id=\"private-public-areas-with-annotations\">Private/Public areas with Annotations</h3> <p>You can use annotations to tell the ACL which controllers belong to the administrative areas:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Acl;\nuse Phalcon\\Acl\\Role;\nuse Phalcon\\Acl\\Resource;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\User\\Plugin;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Acl\\Adapter\\Memory as AclList;\n\n/**\n * SecurityAnnotationsPlugin\n *\n * This is the security plugin which controls that users only have access to the modules they're assigned to\n */\nclass SecurityAnnotationsPlugin extends Plugin\n{\n    /**\n     * This action is executed before execute any action in the application\n     *\n     * @param Event $event\n     * @param Dispatcher $dispatcher\n     */\n    public function beforeDispatch(Event $event, Dispatcher $dispatcher)\n    {\n        // Possible controller class name\n        $controllerName = $dispatcher-&gt;getControllerClass();\n\n        // Possible method name\n        $actionName = $dispatcher-&gt;getActiveMethod();\n\n        // Get annotations in the controller class\n        $annotations = $this-&gt;annotations-&gt;get($controllerName);\n\n        // The controller is private?\n        if ($annotations-&gt;getClassAnnotations()-&gt;has('Private')) {\n\n            // Check if the session variable is active?\n            if (!$this-&gt;session-&gt;get('auth')) {\n\n                // The user is no logged redirect to login\n                $dispatcher-&gt;forward(\n                    array(\n                        'controller' =&gt; 'session',\n                        'action'     =&gt; 'login'\n                    )\n                );\n\n                return false;\n            }\n        }\n\n        // Continue normally\n        return true;\n    }\n}\n</pre>   <h3 id=\"choose-the-template-to-render\">Choose the template to render</h3> <p>In this example we’re going to use annotations to tell <a class=\"reference internal\" href=\"views\"><em>Phalcon\\Mvc\\View\\Simple</em></a> what template must be rendered once the action has been executed:</p>    <h2 id=\"annotations-adapters\">Annotations Adapters</h2> <p>This component makes use of adapters to cache or no cache the parsed and processed annotations thus improving the performance or providing facilities to development/testing:</p> <table class=\"docutils\"> <colgroup> <col width=\"4%\"> <col width=\"69%\"> <col width=\"27%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\">Description</th> <th class=\"head\">API</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Memory</td> <td>The annotations are cached only in memory. When the request ends the cache is cleaned reloading the annotations in each request. This adapter is suitable for a development stage</td> <td><a class=\"reference internal\" href=\"../api/phalcon_annotations_adapter_memory\"><em>Phalcon\\Annotations\\Adapter\\Memory</em></a></td> </tr> <tr class=\"row-odd\">\n<td>Files</td> <td>Parsed and processed annotations are stored permanently in PHP files improving performance. This adapter must be used together with a bytecode cache.</td> <td><a class=\"reference internal\" href=\"../api/phalcon_annotations_adapter_files\"><em>Phalcon\\Annotations\\Adapter\\Files</em></a></td> </tr> <tr class=\"row-even\">\n<td>APC</td> <td>Parsed and processed annotations are stored permanently in the APC cache improving performance. This is the faster adapter</td> <td><a class=\"reference internal\" href=\"../api/phalcon_annotations_adapter_apc\"><em>Phalcon\\Annotations\\Adapter\\Apc</em></a></td> </tr> <tr class=\"row-odd\">\n<td>XCache</td> <td>Parsed and processed annotations are stored permanently in the XCache cache improving performance. This is a fast adapter too</td> <td><a class=\"reference internal\" href=\"../api/phalcon_annotations_adapter_xcache\"><em>Phalcon\\Annotations\\Adapter\\Xcache</em></a></td> </tr> </tbody> </table>  <h3 id=\"implementing-your-own-adapters\">Implementing your own adapters</h3> <p>The <a class=\"reference internal\" href=\"../api/phalcon_annotations_adapterinterface\"><em>Phalcon\\Annotations\\AdapterInterface</em></a> interface must be implemented in order to create your own annotations adapters or extend the existing ones.</p>    <h2 id=\"external-resources\">External Resources</h2> <ul class=\"simple\"> <li><a class=\"reference external\" href=\"https://blog.phalconphp.com/post/tutorial-creating-a-custom-models-initializer\">Tutorial: Creating a custom model’s initializer with Annotations</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/annotations.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/annotations.html</a>\n  </p>\n</div>\n","api/phalcon_acl_resource":"<h1 id=\"class-phalcon-acl-resource\">Class <strong>Phalcon\\Acl\\Resource</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_acl_resourceinterface\"><em>Phalcon\\Acl\\ResourceInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/resource.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class defines resource entity and its description</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> ()</h3> <p>Resource name</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> ()</h3> <p>Resource name</p> <h3 id=\"getdescription\" class=\"method-signature\">public <strong>getDescription</strong> ()</h3> <p>Resource description</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $name, [<em>mixed</em> $description])</h3> <p>Phalcon\\Acl\\Resource constructor</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Resource.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Resource.html</a>\n  </p>\n</div>\n","reference/acl":"<h1 id=\"access-control-lists-acl\">Access Control Lists (ACL)</h1> <p><a class=\"reference internal\" href=\"../api/phalcon_acl\"><em>Phalcon\\Acl</em></a> provides an easy and lightweight management of ACLs as well as the permissions attached to them. <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Access_control_list\">Access Control Lists</a> (ACL) allow an application to control access to its areas and the underlying objects from requests. You are encouraged to read more about the ACL methodology so as to be familiar with its concepts.</p> <p>In summary, ACLs have roles and resources. Resources are objects which abide by the permissions defined to them by the ACLs. Roles are objects that request access to resources and can be allowed or denied access by the ACL mechanism.</p>  <h2 id=\"creating-an-acl\">Creating an ACL</h2> <p>This component is designed to initially work in memory. This provides ease of use and speed in accessing every aspect of the list. The <a class=\"reference internal\" href=\"../api/phalcon_acl\"><em>Phalcon\\Acl</em></a> constructor takes as its first parameter an adapter used to retrieve the information related to the control list. An example using the memory adapter is below:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Acl\\Adapter\\Memory as AclList;\n\n$acl = new AclList();\n</pre> <p>By default <a class=\"reference internal\" href=\"../api/phalcon_acl\"><em>Phalcon\\Acl</em></a> allows access to action on resources that have not yet been defined. To increase the security level of the access list we can define a “deny” level as a default access level.</p> <pre class=\"highlight-php\" data-language=\"php\">// Default action is deny access\n$acl-&gt;setDefaultAction(Phalcon\\Acl::DENY);\n</pre>   <h2 id=\"adding-roles-to-the-acl\">Adding Roles to the ACL</h2> <p>A role is an object that can or cannot access certain resources in the access list. As an example, we will define roles as groups of people in an organization. The <a class=\"reference internal\" href=\"../api/phalcon_acl_role\"><em>Phalcon\\Acl\\Role</em></a> class is available to create roles in a more structured way. Let’s add some roles to our recently created list:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Acl\\Role;\n\n// Create some roles.\n// The first parameter is the name, the second parameter is an optional description.\n$roleAdmins = new Role(\"Administrators\", \"Super-User role\");\n$roleGuests = new Role(\"Guests\");\n\n// Add \"Guests\" role to ACL\n$acl-&gt;addRole($roleGuests);\n\n// Add \"Designers\" role to ACL without a Phalcon\\Acl\\Role\n$acl-&gt;addRole(\"Designers\");\n</pre> <p>As you can see, roles are defined directly without using an instance.</p>   <h2 id=\"adding-resources\">Adding Resources</h2> <p>Resources are objects where access is controlled. Normally in MVC applications resources refer to controllers. Although this is not mandatory, the <a class=\"reference internal\" href=\"../api/phalcon_acl_resource\"><em>Phalcon\\Acl\\Resource</em></a> class can be used in defining resources. It’s important to add related actions or operations to a resource so that the ACL can understand what it should to control.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Acl\\Resource;\n\n// Define the \"Customers\" resource\n$customersResource = new Resource(\"Customers\");\n\n// Add \"customers\" resource with a couple of operations\n$acl-&gt;addResource($customersResource, \"search\");\n$acl-&gt;addResource($customersResource, array(\"create\", \"update\"));\n</pre>   <h2 id=\"defining-access-controls\">Defining Access Controls</h2> <p>Now that we have roles and resources, it’s time to define the ACL (i.e. which roles can access which resources). This part is very important especially taking into consideration your default access level “allow” or “deny”.</p> <pre class=\"highlight-php\" data-language=\"php\">// Set access level for roles into resources\n$acl-&gt;allow(\"Guests\", \"Customers\", \"search\");\n$acl-&gt;allow(\"Guests\", \"Customers\", \"create\");\n$acl-&gt;deny(\"Guests\", \"Customers\", \"update\");\n</pre> <p>The <code class=\"code docutils literal\"><span class=\"pre\">allow()</span></code> method designates that a particular role has granted access to a particular resource. The <code class=\"code docutils literal\"><span class=\"pre\">deny()</span></code> method does the opposite.</p>   <h2 id=\"querying-an-acl\">Querying an ACL</h2> <p>Once the list has been completely defined. We can query it to check if a role has a given permission or not.</p> <pre class=\"highlight-php\" data-language=\"php\">// Check whether role has access to the operations\n$acl-&gt;isAllowed(\"Guests\", \"Customers\", \"edit\");   // Returns 0\n$acl-&gt;isAllowed(\"Guests\", \"Customers\", \"search\"); // Returns 1\n$acl-&gt;isAllowed(\"Guests\", \"Customers\", \"create\"); // Returns 1\n</pre>   <h2 id=\"function-based-access\">Function based access</h2> <p>Also you can add as 4th parameter your custom function which must return boolean value. It will be called when you use <code class=\"code docutils literal\"><span class=\"pre\">isAllowed()</span></code> method. You can pass parameters as associative array to <code class=\"code docutils literal\"><span class=\"pre\">isAllowed()</span></code> method as 4th argument where key is parameter name in our defined function.</p> <pre class=\"highlight-php\" data-language=\"php\">// Set access level for role into resources with custom function\n$acl-&gt;allow(\"Guests\", \"Customers\", \"search\",function($a){\n    return $a % 2 == 0;\n});\n\n// Check whether role has access to the operation with custom function\n$acl-&gt;isAllowed(\"Guests\",\"Customers\",\"search\",['a'=&gt;4]); // Returns true\n$acl-&gt;isAllowed(\"Guests\",\"Customers\",\"search\",['a'=&gt;3]); // Returns false\n</pre> <p>Also if you don’t provide any parameters in <code class=\"code docutils literal\"><span class=\"pre\">isAllowed()</span></code> method then default behaviour will be <code class=\"code docutils literal\"><span class=\"pre\">Acl::ALLOW</span></code>. You can change it by using method <code class=\"code docutils literal\"><span class=\"pre\">setNoArgumentsDefaultAction()</span></code>.</p> <pre class=\"highlight-php\" data-language=\"php\">// Set access level for role into resources with custom function\n$acl-&gt;allow(\"Guests\", \"Customers\", \"search\",function($a){\n    return $a % 2 == 0;\n});\n\n// Check whether role has access to the operation with custom function\n$acl-&gt;isAllowed(\"Guests\",\"Customers\",\"search\"); // Returns true\n// Change no arguments default action\n$acl-&gt;setNoArgumentsDefaultAction(Acl::DENY);\n$acl-&gt;isAllowed(\"Guests\",\"Customers\",\"search\"); // Returns false\n</pre>   <h2 id=\"objects-as-role-name-and-resource-name\">Objects as role name and resource name</h2> <p>You can pass objects as <code class=\"code docutils literal\"><span class=\"pre\">roleName</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">resourceName</span></code>. Your classes must implement <a class=\"reference internal\" href=\"../api/phalcon_acl_roleaware\"><em>Phalcon\\Acl\\RoleAware</em></a> for <code class=\"code docutils literal\"><span class=\"pre\">roleName</span></code> and <a class=\"reference internal\" href=\"../api/phalcon_acl_resourceaware\"><em>Phalcon\\Acl\\ResourceAware</em></a> for <code class=\"code docutils literal\"><span class=\"pre\">resourceName</span></code>.</p> <p>Our <code class=\"code docutils literal\"><span class=\"pre\">UserRole</span></code> class</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Acl\\RoleAware;\n\n// Create our class which will be used as roleName\nclass UserRole implements RoleAware\n{\n    protected $id;\n    protected $roleName;\n\n    public function __construct($id,$roleName)\n    {\n        $this-&gt;id=$id;\n        $this-&gt;roleName=$roleName;\n    }\n\n    public function getId()\n    {\n        return $this-&gt;id;\n    }\n\n    // Implemented function from RoleAware Interface\n    public function getRoleName()\n    {\n        return $this-&gt;roleName;\n    }\n}\n</pre> <p>And our <code class=\"code docutils literal\"><span class=\"pre\">ModelResource</span></code> class</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Acl\\ResourceAware;\n\n// Create our class which will be used as resourceName\nclass ModelResource implements ResourceAware\n{\n    protected $id;\n    protected $resourceName;\n    protected $userId;\n\n    public function __construct($id,$resourceName,$userId)\n    {\n        $this-&gt;id=$id;\n        $this-&gt;resourceName=$resourceName;\n        $this-&gt;userId=$userId;\n    }\n\n    public function getId()\n    {\n        return $this-&gt;id;\n    }\n\n    public function getUserId()\n    {\n        return $this-&gt;userId;\n    }\n\n    // Implemented function from ResourceAware Interface\n    public function getResourceName()\n    {\n        return $this-&gt;resourceName;\n    }\n}\n</pre> <p>Then you can use them in <code class=\"code docutils literal\"><span class=\"pre\">isAllowed()</span></code> method.</p> <pre class=\"highlight-php\" data-language=\"php\">use UserRole;\nuse ModelResource;\n\n// Set access level for role into resources\n$acl-&gt;allow(\"Guests\", \"Customers\", \"search\");\n$acl-&gt;allow(\"Guests\", \"Customers\", \"create\");\n$acl-&gt;deny(\"Guests\", \"Customers\", \"update\");\n\n// Create our objects providing roleName and resourceName\n$customer = new ModelResource(1,\"Customers\",2);\n$designer = new UserRole(1,\"Designers\");\n$guest = new UserRole(2,\"Guests\");\n$anotherGuest = new UserRole(3,\"Guests\");\n\n// Check whether our user objects have access to the operation on model object\n$acl-&gt;isAllowed($designer,$customer,\"search\") // Returns false\n$acl-&gt;isAllowed($guest,$customer,\"search\") // Returns true\n$acl-&gt;isAllowed($anotherGuest,$customer,\"search\") // Returns true\n</pre> <p>Also you can access those objects in your custom function in <code class=\"code docutils literal\"><span class=\"pre\">allow()</span></code> or <code class=\"code docutils literal\"><span class=\"pre\">deny()</span></code>. They are automatically bind to parameters by type in function.</p> <pre class=\"highlight-php\" data-language=\"php\">use UserRole;\nuse ModelResource;\n\n// Set access level for role into resources with custom function\n$acl-&gt;allow(\"Guests\", \"Customers\", \"search\",function(UserRole $user,ModelResource $model){ // User and Model classes are necessary\n    return $user-&gt;getId == $model-&gt;getUserId();\n});\n$acl-&gt;allow(\"Guests\", \"Customers\", \"create\");\n$acl-&gt;deny(\"Guests\", \"Customers\", \"update\");\n\n// Create our objects providing roleName and resourceName\n$customer = new ModelResource(1,\"Customers\",2);\n$designer = new UserRole(1,\"Designers\");\n$guest = new UserRole(2,\"Guests\");\n$anotherGuest = new UserRole(3,\"Guests\");\n\n// Check whether our user objects have access to the operation on model object\n$acl-&gt;isAllowed($designer,$customer,\"search\") // Returns false\n$acl-&gt;isAllowed($guest,$customer,\"search\") // Returns true\n$acl-&gt;isAllowed($anotherGuest,$customer,\"search\") // Returns false\n</pre> <p>You can still add any custom parameters to function and pass associative array in <code class=\"code docutils literal\"><span class=\"pre\">isAllowed()</span></code> method. Also order doesn’t matter.</p>   <h2 id=\"roles-inheritance\">Roles Inheritance</h2> <p>You can build complex role structures using the inheritance that <a class=\"reference internal\" href=\"../api/phalcon_acl_role\"><em>Phalcon\\Acl\\Role</em></a> provides. Roles can inherit from other roles, thus allowing access to supersets or subsets of resources. To use role inheritance, you need to pass the inherited role as the second parameter of the method call, when adding that role in the list.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Acl\\Role;\n\n// ...\n\n// Create some roles\n$roleAdmins = new Role(\"Administrators\", \"Super-User role\");\n$roleGuests = new Role(\"Guests\");\n\n// Add \"Guests\" role to ACL\n$acl-&gt;addRole($roleGuests);\n\n// Add \"Administrators\" role inheriting from \"Guests\" its accesses\n$acl-&gt;addRole($roleAdmins, $roleGuests);\n</pre>   <h2 id=\"serializing-acl-lists\">Serializing ACL lists</h2> <p>To improve performance <a class=\"reference internal\" href=\"../api/phalcon_acl\"><em>Phalcon\\Acl</em></a> instances can be serialized and stored in APC, session, text files or a database table so that they can be loaded at will without having to redefine the whole list. You can do that as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Acl\\Adapter\\Memory as AclList;\n\n// ...\n\n// Check whether ACL data already exist\nif (!is_file(\"app/security/acl.data\")) {\n\n    $acl = new AclList();\n\n    // ... Define roles, resources, access, etc\n\n    // Store serialized list into plain file\n    file_put_contents(\"app/security/acl.data\", serialize($acl));\n} else {\n\n     // Restore ACL object from serialized file\n     $acl = unserialize(file_get_contents(\"app/security/acl.data\"));\n}\n\n// Use ACL list as needed\nif ($acl-&gt;isAllowed(\"Guests\", \"Customers\", \"edit\")) {\n    echo \"Access granted!\";\n} else {\n    echo \"Access denied :(\";\n}\n</pre> <p>It’s recommended to use the Memory adapter during development and use one of the other adapters in production.</p>   <h2 id=\"acl-events\">ACL Events</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_acl\"><em>Phalcon\\Acl</em></a> is able to send events to a <a class=\"reference internal\" href=\"events\"><em>EventsManager</em></a> if it’s present. Events are triggered using the type “acl”. Some events when returning boolean false could stop the active operation. The following events are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"59%\"> <col width=\"22%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Event Name</th> <th class=\"head\">Triggered</th> <th class=\"head\">Can stop operation?</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>beforeCheckAccess</td> <td>Triggered before checking if a role/resource has access</td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>afterCheckAccess</td> <td>Triggered after checking if a role/resource has access</td> <td>No</td> </tr> </tbody> </table> <p>The following example demonstrates how to attach listeners to this component:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Acl\\Adapter\\Memory as AclList;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n// ...\n\n// Create an event manager\n$eventsManager = new EventsManager();\n\n// Attach a listener for type \"acl\"\n$eventsManager-&gt;attach(\"acl\", function ($event, $acl) {\n    if ($event-&gt;getType() == \"beforeCheckAccess\") {\n         echo   $acl-&gt;getActiveRole(),\n                $acl-&gt;getActiveResource(),\n                $acl-&gt;getActiveAccess();\n    }\n});\n\n$acl = new AclList();\n\n// Setup the $acl\n// ...\n\n// Bind the eventsManager to the ACL component\n$acl-&gt;setEventsManager($eventManagers);\n</pre>   <h2 id=\"implementing-your-own-adapters\">Implementing your own adapters</h2> <p>The <a class=\"reference internal\" href=\"../api/phalcon_acl_adapterinterface\"><em>Phalcon\\Acl\\AdapterInterface</em></a> interface must be implemented in order to create your own ACL adapters or extend the existing ones.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/acl.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/acl.html</a>\n  </p>\n</div>\n","reference/unit-testing":"<h1 id=\"unit-testing\">Unit testing</h1> <p>Writing proper tests can assist in writing better software. If you set up proper test cases you can eliminate most functional bugs and better maintain your software.</p>  <h2 id=\"integrating-phpunit-with-phalcon\">Integrating PHPunit with phalcon</h2> <p>If you don’t already have phpunit installed, you can do it by using the following composer command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">composer require phpunit/phpunit\n</pre> <p>or by manually adding it to composer.json:</p> <pre class=\"highlight-json\" data-language=\"json\">{\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"~4.5\"\n    }\n}\n</pre> <p>Once phpunit is installed create a directory called ‘tests’ in your root directory:</p> <pre class=\"highlight-bash\" data-language=\"bash\">app/\npublic/\ntests/\n</pre> <p>Next, we need a ‘helper’ file to bootstrap the application for unit testing.</p>   <h2 id=\"the-phpunit-helper-file\">The PHPunit helper file</h2> <p>A helper file is required to bootstrap the application for running the tests. We have prepared a sample file. Put the file in your tests/ directory as TestHelper.php.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Di;\nuse Phalcon\\Di\\FactoryDefault;\n\nini_set('display_errors',1);\nerror_reporting(E_ALL);\n\ndefine('ROOT_PATH', __DIR__);\ndefine('PATH_LIBRARY', __DIR__ . '/../app/library/');\ndefine('PATH_SERVICES', __DIR__ . '/../app/services/');\ndefine('PATH_RESOURCES', __DIR__ . '/../app/resources/');\n\nset_include_path(\n    ROOT_PATH . PATH_SEPARATOR . get_include_path()\n);\n\n// Required for phalcon/incubator\ninclude __DIR__ . \"/../vendor/autoload.php\";\n\n// Use the application autoloader to autoload the classes\n// Autoload the dependencies found in composer\n$loader = new \\Phalcon\\Loader();\n\n$loader-&gt;registerDirs(\n    array(\n        ROOT_PATH\n    )\n);\n\n$loader-&gt;register();\n\n$di = new FactoryDefault();\nDi::reset();\n\n// Add any needed services to the DI here\n\nDi::setDefault($di);\n</pre> <p>Should you need to test any components from your own library, add them to the autoloader or use the autoloader from your main application.</p> <p>To help you build the unit tests, we made a few abstract classes you can use to bootstrap the unit tests themselves. These files exist in the Phalcon incubator @ <a class=\"reference external\" href=\"https://github.com/phalcon/incubator\">https://github.com/phalcon/incubator</a>.</p> <p>You can use the incubator library by adding it as a dependency:</p> <pre class=\"highlight-bash\" data-language=\"bash\">composer require phalcon/incubator\n</pre> <p>or by manually adding it to composer.json:</p> <pre class=\"highlight-json\" data-language=\"json\">{\n    \"require\": {\n        \"phalcon/incubator\": \"dev-master\"\n    }\n}\n</pre> <p>You can also clone the repository using the repo link above.</p>   <h2 id=\"phpunit-xml-file\">PHPunit.xml file</h2> <p>Now, create a phpunit file:</p> <pre class=\"highlight-xml\" data-language=\"xml\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;phpunit bootstrap=\"./TestHelper.php\"\n         backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         verbose=\"true\"\n         colors=\"false\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         syntaxCheck=\"true\"&gt;\n    &lt;testsuite name=\"Phalcon - Testsuite\"&gt;\n        &lt;directory&gt;./&lt;/directory&gt;\n    &lt;/testsuite&gt;\n&lt;/phpunit&gt;\n</pre> <p>Modify the phpunit.xml to fit your needs and save it in tests/.</p> <p>This will run any tests under the tests/ directory.</p>   <h2 id=\"sample-unit-test\">Sample unit test</h2> <p>To run any unit tests you need to define them. The autoloader will make sure the proper files are loaded so all you need to do is create the files and phpunit will run the tests for you.</p> <p>This example does not contain a config file, most test cases however, do need one. You can add it to the DI to get the UnitTestCase file.</p> <p>First create a base unit test called UnitTestCase.php in your /tests directory:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Di;\nuse Phalcon\\Test\\UnitTestCase as PhalconTestCase;\n\nabstract class UnitTestCase extends PhalconTestCase\n{\n    /**\n     * @var \\Voice\\Cache\n     */\n    protected $_cache;\n\n    /**\n     * @var \\Phalcon\\Config\n     */\n    protected $_config;\n\n    /**\n     * @var bool\n     */\n    private $_loaded = false;\n\n    public function setUp()\n    {\n        parent::setUp();\n\n        // Load any additional services that might be required during testing\n        $di = Di::getDefault();\n\n        // Get any DI components here. If you have a config, be sure to pass it to the parent\n\n        $this-&gt;setDi($di);\n\n        $this-&gt;_loaded = true;\n    }\n\n    /**\n     * Check if the test case is setup properly\n     *\n     * @throws \\PHPUnit_Framework_IncompleteTestError;\n     */\n    public function __destruct()\n    {\n        if (!$this-&gt;_loaded) {\n            throw new \\PHPUnit_Framework_IncompleteTestError('Please run parent::setUp().');\n        }\n    }\n}\n</pre> <p>It’s always a good idea to separate your Unit tests in namespaces. For this test we will create the namespace ‘Test’. So create a file called testsTestUnitTest.php:</p> <pre class=\"highlight-php\" data-language=\"php\">namespace Test;\n\n/**\n * Class UnitTest\n */\nclass UnitTest extends \\UnitTestCase\n{\n    public function testTestCase()\n    {\n        $this-&gt;assertEquals('works',\n            'works',\n            'This is OK'\n        );\n\n        $this-&gt;assertEquals('works',\n            'works1',\n            'This will fail'\n        );\n    }\n}\n</pre> <p>Now when you execute ‘phpunit’ in your command-line from the tests directory you will get the following output:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ phpunit\nPHPUnit 3.7.23 by Sebastian Bergmann.\n\nConfiguration read from /private/var/www/tests/phpunit.xml\n\nTime: 3 ms, Memory: 3.25Mb\n\nThere was 1 failure:\n\n1) Test\\UnitTest::testTestCase\nThis will fail\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'works'\n+'works1'\n\n/private/var/www/tests/Test/UnitTest.php:25\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n</pre> <p>Now you can start building your unit tests. You can view a good guide here (we also recommend reading the PHPunit documentation if you’re not familiar with PHPunit):</p> <p><a class=\"reference external\" href=\"http://blog.stevensanderson.com/2009/08/24/writing-great-unit-tests-best-and-worst-practises/\">http://blog.stevensanderson.com/2009/08/24/writing-great-unit-tests-best-and-worst-practises/</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/unit-testing.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/unit-testing.html</a>\n  </p>\n</div>\n","api/phalcon_acl_adapter":"<h1 id=\"abstract-class-phalcon-acl-adapter\">Abstract class <strong>Phalcon\\Acl\\Adapter</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_acl_adapterinterface\"><em>Phalcon\\Acl\\AdapterInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/adapter.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Adapter for Phalcon\\Acl adapters</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getactiverole\" class=\"method-signature\">public <strong>getActiveRole</strong> ()</h3> <p>Role which the list is checking if it’s allowed to certain resource/access</p> <h3 id=\"getactiveresource\" class=\"method-signature\">public <strong>getActiveResource</strong> ()</h3> <p>Resource which the list is checking if some role can access it</p> <h3 id=\"getactiveaccess\" class=\"method-signature\">public <strong>getActiveAccess</strong> ()</h3> <p>Active access which the list is checking if some role can access it</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager)</h3> <p>Sets the events manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> ()</h3> <p>Returns the internal event manager</p> <h3 id=\"setdefaultaction\" class=\"method-signature\">public <strong>setDefaultAction</strong> (<em>mixed</em> $defaultAccess)</h3> <p>Sets the default access level (Phalcon\\Acl::ALLOW or Phalcon\\Acl::DENY)</p> <h3 id=\"getdefaultaction\" class=\"method-signature\">public <strong>getDefaultAction</strong> ()</h3> <p>Returns the default ACL access level</p> <h3 id=\"setnoargumentsdefaultaction\" class=\"method-signature\">abstract public <strong>setNoArgumentsDefaultAction</strong> (<em>mixed</em> $defaultAccess) <small>inherited from Phalcon\\Acl\\AdapterInterface</small>\n</h3> <p>...</p> <h3 id=\"getnoargumentsdefaultaction\" class=\"method-signature\">abstract public <strong>getNoArgumentsDefaultAction</strong> () <small>inherited from Phalcon\\Acl\\AdapterInterface</small>\n</h3> <p>...</p> <h3 id=\"addrole\" class=\"method-signature\">abstract public <strong>addRole</strong> (<em>mixed</em> $role, [<em>mixed</em> $accessInherits]) <small>inherited from Phalcon\\Acl\\AdapterInterface</small>\n</h3> <p>...</p> <h3 id=\"addinherit\" class=\"method-signature\">abstract public <strong>addInherit</strong> (<em>mixed</em> $roleName, <em>mixed</em> $roleToInherit) <small>inherited from Phalcon\\Acl\\AdapterInterface</small>\n</h3> <p>...</p> <h3 id=\"isrole\" class=\"method-signature\">abstract public <strong>isRole</strong> (<em>mixed</em> $roleName) <small>inherited from Phalcon\\Acl\\AdapterInterface</small>\n</h3> <p>...</p> <h3 id=\"isresource\" class=\"method-signature\">abstract public <strong>isResource</strong> (<em>mixed</em> $resourceName) <small>inherited from Phalcon\\Acl\\AdapterInterface</small>\n</h3> <p>...</p> <h3 id=\"addresource\" class=\"method-signature\">abstract public <strong>addResource</strong> (<em>mixed</em> $resourceObject, <em>mixed</em> $accessList) <small>inherited from Phalcon\\Acl\\AdapterInterface</small>\n</h3> <p>...</p> <h3 id=\"addresourceaccess\" class=\"method-signature\">abstract public <strong>addResourceAccess</strong> (<em>mixed</em> $resourceName, <em>mixed</em> $accessList) <small>inherited from Phalcon\\Acl\\AdapterInterface</small>\n</h3> <p>...</p> <h3 id=\"dropresourceaccess\" class=\"method-signature\">abstract public <strong>dropResourceAccess</strong> (<em>mixed</em> $resourceName, <em>mixed</em> $accessList) <small>inherited from Phalcon\\Acl\\AdapterInterface</small>\n</h3> <p>...</p> <h3 id=\"allow\" class=\"method-signature\">abstract public <strong>allow</strong> (<em>mixed</em> $roleName, <em>mixed</em> $resourceName, <em>mixed</em> $access, [<em>mixed</em> $func]) <small>inherited from Phalcon\\Acl\\AdapterInterface</small>\n</h3> <p>...</p> <h3 id=\"deny\" class=\"method-signature\">abstract public <strong>deny</strong> (<em>mixed</em> $roleName, <em>mixed</em> $resourceName, <em>mixed</em> $access, [<em>mixed</em> $func]) <small>inherited from Phalcon\\Acl\\AdapterInterface</small>\n</h3> <p>...</p> <h3 id=\"isallowed\" class=\"method-signature\">abstract public <strong>isAllowed</strong> (<em>mixed</em> $roleName, <em>mixed</em> $resourceName, <em>mixed</em> $access, [<em>array</em> $parameters]) <small>inherited from Phalcon\\Acl\\AdapterInterface</small>\n</h3> <p>...</p> <h3 id=\"getroles\" class=\"method-signature\">abstract public <strong>getRoles</strong> () <small>inherited from Phalcon\\Acl\\AdapterInterface</small>\n</h3> <p>...</p> <h3 id=\"getresources\" class=\"method-signature\">abstract public <strong>getResources</strong> () <small>inherited from Phalcon\\Acl\\AdapterInterface</small>\n</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Adapter.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Adapter.html</a>\n  </p>\n</div>\n","api/phalcon_acl_role":"<h1 id=\"class-phalcon-acl-role\">Class <strong>Phalcon\\Acl\\Role</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_acl_roleinterface\"><em>Phalcon\\Acl\\RoleInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/role.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class defines role entity and its description</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> ()</h3> <p>Role name</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> ()</h3> <p>Role name</p> <h3 id=\"getdescription\" class=\"method-signature\">public <strong>getDescription</strong> ()</h3> <p>Role description</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $name, [<em>mixed</em> $description])</h3> <p>Phalcon\\Acl\\Role constructor</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Role.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Role.html</a>\n  </p>\n</div>\n","api/phalcon_acl_exception":"<h1 id=\"class-phalcon-acl-exception\">Class <strong>Phalcon\\Acl\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Exception.html</a>\n  </p>\n</div>\n","reference/debug":"<h1 id=\"debugging-applications\">Debugging Applications</h1> <div class=\"figure align-center\"> <img alt=\"../_images/xdebug-1.jpg\" src=\"https://docs.phalconphp.com/en/latest/_images/xdebug-1.jpg\"> </div> <p>PHP offers tools to debug applications with notices, warnings, errors and exceptions. The <a class=\"reference external\" href=\"http://www.php.net/manual/en/language.exceptions.php\">Exception class</a> offers information such as the file, line, message, numeric code, backtrace etc. on where an error occurred. OOP frameworks like Phalcon mainly use this class to encapsulate this functionality and provide information back to the developer or user.</p> <p>Despite being written in C, Phalcon executes methods in the PHP userland, providing the debug capability that any other application or framework written in PHP has.</p>  <h2 id=\"catching-exceptions\">Catching Exceptions</h2> <p>Throughout the tutorials and examples of the Phalcon documentation, there is a common element that is catching exceptions. This is a try/catch block:</p> <pre class=\"highlight-php\" data-language=\"php\">try {\n\n    // ... Some Phalcon/PHP code\n\n} catch (\\Exception $e) {\n\n}\n</pre> <p>Any exception thrown within the block is captured in the variable <code class=\"code docutils literal\"><span class=\"pre\">$e</span></code>. A <a class=\"reference internal\" href=\"../api/phalcon_exception\"><em>Phalcon\\Exception</em></a> extends the PHP <a class=\"reference external\" href=\"http://www.php.net/manual/en/language.exceptions.php\">Exception class</a> and is used to understand whether the exception came from Phalcon or PHP itself.</p> <p>All exceptions generated by PHP are based on the <a class=\"reference external\" href=\"http://www.php.net/manual/en/language.exceptions.php\">Exception class</a>, and have at least the following elements:</p> <pre class=\"highlight-php\" data-language=\"php\">class Exception\n{\n\n    /* Properties */\n    protected string $message;\n    protected int $code;\n    protected string $file;\n    protected int $line;\n\n    /* Methods */\n    public __construct ([ string $message = \"\" [, int $code = 0 [, Exception $previous = NULL ]]])\n    final public string getMessage ( void )\n    final public Exception getPrevious ( void )\n    final public mixed getCode ( void )\n    final public string getFile ( void )\n    final public int getLine ( void )\n    final public array getTrace ( void )\n    final public string getTraceAsString ( void )\n    public string __toString ( void )\n    final private void __clone ( void )\n}\n</pre> <p>Retrieving information from <a class=\"reference internal\" href=\"../api/phalcon_exception\"><em>Phalcon\\Exception</em></a> is the same as PHP’s <a class=\"reference external\" href=\"http://www.php.net/manual/en/language.exceptions.php\">Exception class</a>:</p> <pre class=\"highlight-php\" data-language=\"php\">try {\n\n    // ... App code ...\n\n} catch (\\Exception $e) {\n    echo get_class($e), \": \", $e-&gt;getMessage(), \"\\n\";\n    echo \" File=\", $e-&gt;getFile(), \"\\n\";\n    echo \" Line=\", $e-&gt;getLine(), \"\\n\";\n    echo $e-&gt;getTraceAsString();\n}\n</pre> <p>It’s therefore easy to find which file and line of the application’s code generated the exception, as well as the components involved in generating the exception:</p> <pre class=\"highlight-html\" data-language=\"html\">PDOException: SQLSTATE[28000] [1045] Access denied for user 'root'@'localhost'\n    (using password: NO)\n File=/Applications/MAMP/htdocs/invo/public/index.php\n Line=74\n#0 [internal function]: PDO-&gt;__construct('mysql:host=loca...', 'root', '', Array)\n#1 [internal function]: Phalcon\\Db\\Adapter\\Pdo-&gt;connect(Array)\n#2 /Applications/MAMP/htdocs/invo/public/index.php(74):\n    Phalcon\\Db\\Adapter\\Pdo-&gt;__construct(Array)\n#3 [internal function]: {closure}()\n#4 [internal function]: call_user_func_array(Object(Closure), Array)\n#5 [internal function]: Phalcon\\Di-&gt;_factory(Object(Closure), Array)\n#6 [internal function]: Phalcon\\Di-&gt;get('db', Array)\n#7 [internal function]: Phalcon\\Di-&gt;getShared('db')\n#8 [internal function]: Phalcon\\Mvc\\Model-&gt;getConnection()\n#9 [internal function]: Phalcon\\Mvc\\Model::_getOrCreateResultset('Users', Array, true)\n#10 /Applications/MAMP/htdocs/invo/app/controllers/SessionController.php(83):\n    Phalcon\\Mvc\\Model::findFirst('email='[email protected]..')\n#11 [internal function]: SessionController-&gt;startAction()\n#12 [internal function]: call_user_func_array(Array, Array)\n#13 [internal function]: Phalcon\\Mvc\\Dispatcher-&gt;dispatch()\n#14 /Applications/MAMP/htdocs/invo/public/index.php(114): Phalcon\\Mvc\\Application-&gt;handle()\n#15 {main}\n</pre> <p>As you can see from the above output the Phalcon’s classes and methods are displayed just like any other component, and even showing the parameters that were invoked in every call. The method <a class=\"reference external\" href=\"http://www.php.net/manual/en/exception.gettrace.php\">Exception::getTrace</a> provides additional information if needed.</p>   <h2 id=\"debug-component\">Debug component</h2> <p>Phalcon provides a debug component that allows the developer to easily find errors produced in an application created with the framework.</p> <p>The following screencast explains how it works:</p> <div align=\"center\"> <iframe src=\"https://player.vimeo.com/video/68893840\" width=\"500\" height=\"313\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe> </div>\n<p>To enable it, add the following to your bootstrap:</p> <pre class=\"highlight-php\" data-language=\"php\">$debug = new \\Phalcon\\Debug();\n$debug-&gt;listen();\n</pre> <p>Any Try/Catch blocks must be removed or disabled to make this component work properly.</p>   <h2 id=\"reflection-and-introspection\">Reflection and Introspection</h2> <p>Any instance of a Phalcon class offers exactly the same behavior than a PHP normal one. It’s possible to use the <a class=\"reference external\" href=\"http://php.net/manual/en/book.reflection.php\">Reflection API</a> or simply print any object to show how is its internal state:</p> <pre class=\"highlight-php\" data-language=\"php\">$router = new Phalcon\\Mvc\\Router();\nprint_r($router);\n</pre> <p>It’s easy to know the internal state of any object. The above example prints the following:</p> <pre class=\"highlight-html\" data-language=\"html\">Phalcon\\Mvc\\Router Object\n(\n    [_dependencyInjector:protected] =&gt;\n    [_module:protected] =&gt;\n    [_controller:protected] =&gt;\n    [_action:protected] =&gt;\n    [_params:protected] =&gt; Array\n        (\n        )\n    [_routes:protected] =&gt; Array\n        (\n            [0] =&gt; Phalcon\\Mvc\\Router\\Route Object\n                (\n                    [_pattern:protected] =&gt; #^/([a-zA-Z0-9\\_]+)[/]{0,1}$#\n                    [_compiledPattern:protected] =&gt; #^/([a-zA-Z0-9\\_]+)[/]{0,1}$#\n                    [_paths:protected] =&gt; Array\n                        (\n                            [controller] =&gt; 1\n                        )\n\n                    [_methods:protected] =&gt;\n                    [_id:protected] =&gt; 0\n                    [_name:protected] =&gt;\n                )\n\n            [1] =&gt; Phalcon\\Mvc\\Router\\Route Object\n                (\n                    [_pattern:protected] =&gt; #^/([a-zA-Z0-9\\_]+)/([a-zA-Z0-9\\_]+)(/.*)*$#\n                    [_compiledPattern:protected] =&gt; #^/([a-zA-Z0-9\\_]+)/([a-zA-Z0-9\\_]+)(/.*)*$#\n                    [_paths:protected] =&gt; Array\n                        (\n                            [controller] =&gt; 1\n                            [action] =&gt; 2\n                            [params] =&gt; 3\n                        )\n                    [_methods:protected] =&gt;\n                    [_id:protected] =&gt; 1\n                    [_name:protected] =&gt;\n                )\n        )\n    [_matchedRoute:protected] =&gt;\n    [_matches:protected] =&gt;\n    [_wasMatched:protected] =&gt;\n    [_defaultModule:protected] =&gt;\n    [_defaultController:protected] =&gt;\n    [_defaultAction:protected] =&gt;\n    [_defaultParams:protected] =&gt; Array\n        (\n        )\n)\n</pre>   <h2 id=\"using-xdebug\">Using XDebug</h2> <p><a class=\"reference external\" href=\"http://xdebug.org\">XDebug</a> is an amazing tool that complements the debugging of PHP applications. It is also a C extension for PHP, and you can use it together with Phalcon without additional configuration or side effects.</p> <p>The following screencast shows a Xdebug session with Phalcon:</p> <div align=\"center\"> <iframe src=\"https://player.vimeo.com/video/69867342\" width=\"500\" height=\"313\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe> </div>\n<p>Once you have xdebug installed, you can use its API to get a more detailed information about exceptions and messages.</p> <blockquote class=\"highlights\"> <div>We highly recommend use at least XDebug 2.2.3 for a better compatibility with Phalcon</div>\n</blockquote> <p>The following example implements <a class=\"reference external\" href=\"http://xdebug.org/docs/stack_trace\">xdebug_print_function_stack</a> to stop the execution and generate a backtrace:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass SignupController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function registerAction()\n    {\n        // Request variables from HTML form\n        $name  = $this-&gt;request-&gt;getPost(\"name\", \"string\");\n        $email = $this-&gt;request-&gt;getPost(\"email\", \"email\");\n\n        // Stop execution and show a backtrace\n        return xdebug_print_function_stack(\"stop here!\");\n\n        $user        = new Users();\n        $user-&gt;name  = $name;\n        $user-&gt;email = $email;\n\n        // Store and check for errors\n        $user-&gt;save();\n    }\n}\n</pre> <p>In this instance, Xdebug will also show us the variables in the local scope, and a backtrace as well:</p> <pre class=\"highlight-html\" data-language=\"html\">Xdebug: stop here! in /Applications/MAMP/htdocs/tutorial/app/controllers/SignupController.php\n    on line 19\n\nCall Stack:\n    0.0383     654600   1. {main}() /Applications/MAMP/htdocs/tutorial/public/index.php:0\n    0.0392     663864   2. Phalcon\\Mvc\\Application-&gt;handle()\n        /Applications/MAMP/htdocs/tutorial/public/index.php:37\n    0.0418     738848   3. SignupController-&gt;registerAction()\n        /Applications/MAMP/htdocs/tutorial/public/index.php:0\n    0.0419     740144   4. xdebug_print_function_stack()\n        /Applications/MAMP/htdocs/tutorial/app/controllers/SignupController.php:19\n</pre> <p>Xdebug provides several ways to get debug and trace information regarding the execution of your application using Phalcon. You can check the <a class=\"reference external\" href=\"http://xdebug.org/docs\">XDebug documentation</a> for more information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/debug.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/debug.html</a>\n  </p>\n</div>\n","api/phalcon_annotations_adapter_apc":"<h1 id=\"class-phalcon-annotations-adapter-apc\">Class <strong>Phalcon\\Annotations\\Adapter\\Apc</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_annotations_adapter\"><em>Phalcon\\Annotations\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_annotations_adapterinterface\"><em>Phalcon\\Annotations\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/adapter/apc.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Stores the parsed annotations in APC. This adapter is suitable for production</p> <pre class=\"highlight-php\" data-language=\"php\">$annotations = new \\Phalcon\\Annotations\\Adapter\\Apc();\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <p>Phalcon\\Annotations\\Adapter\\Apc constructor</p> <h3 id=\"read\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_annotations_reflection\"><em>Phalcon\\Annotations\\Reflection</em></a> <strong>read</strong> (<em>string</em> $key)</h3> <p>Reads parsed annotations from APC</p> <h3 id=\"write\" class=\"method-signature\">public <strong>write</strong> (<em>mixed</em> $key, <a class=\"reference internal\" href=\"phalcon_annotations_reflection\"><em>Phalcon\\Annotations\\Reflection</em></a> $data)</h3> <p>Writes parsed annotations to APC</p> <h3 id=\"setreader\" class=\"method-signature\">public <strong>setReader</strong> (<a class=\"reference internal\" href=\"phalcon_annotations_readerinterface\"><em>Phalcon\\Annotations\\ReaderInterface</em></a> $reader) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Sets the annotations parser</p> <h3 id=\"getreader\" class=\"method-signature\">public <strong>getReader</strong> () <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotation reader</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>string|object</em> $className) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Parses or retrieves all the annotations found in a class</p> <h3 id=\"getmethods\" class=\"method-signature\">public <strong>getMethods</strong> (<em>mixed</em> $className) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotations found in all the class’ methods</p> <h3 id=\"getmethod\" class=\"method-signature\">public <strong>getMethod</strong> (<em>mixed</em> $className, <em>mixed</em> $methodName) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotations found in a specific method</p> <h3 id=\"getproperties\" class=\"method-signature\">public <strong>getProperties</strong> (<em>mixed</em> $className) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotations found in all the class’ methods</p> <h3 id=\"getproperty\" class=\"method-signature\">public <strong>getProperty</strong> (<em>mixed</em> $className, <em>mixed</em> $propertyName) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotations found in a specific property</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Apc.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Apc.html</a>\n  </p>\n</div>\n","api/phalcon_annotations_adapter":"<h1 id=\"abstract-class-phalcon-annotations-adapter\">Abstract class <strong>Phalcon\\Annotations\\Adapter</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_annotations_adapterinterface\"><em>Phalcon\\Annotations\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/adapter.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This is the base class for Phalcon\\Annotations adapters</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setreader\" class=\"method-signature\">public <strong>setReader</strong> (<a class=\"reference internal\" href=\"phalcon_annotations_readerinterface\"><em>Phalcon\\Annotations\\ReaderInterface</em></a> $reader)</h3> <p>Sets the annotations parser</p> <h3 id=\"getreader\" class=\"method-signature\">public <strong>getReader</strong> ()</h3> <p>Returns the annotation reader</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>string|object</em> $className)</h3> <p>Parses or retrieves all the annotations found in a class</p> <h3 id=\"getmethods\" class=\"method-signature\">public <strong>getMethods</strong> (<em>mixed</em> $className)</h3> <p>Returns the annotations found in all the class’ methods</p> <h3 id=\"getmethod\" class=\"method-signature\">public <strong>getMethod</strong> (<em>mixed</em> $className, <em>mixed</em> $methodName)</h3> <p>Returns the annotations found in a specific method</p> <h3 id=\"getproperties\" class=\"method-signature\">public <strong>getProperties</strong> (<em>mixed</em> $className)</h3> <p>Returns the annotations found in all the class’ methods</p> <h3 id=\"getproperty\" class=\"method-signature\">public <strong>getProperty</strong> (<em>mixed</em> $className, <em>mixed</em> $propertyName)</h3> <p>Returns the annotations found in a specific property</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter.html</a>\n  </p>\n</div>\n","reference/tools":"<h1 id=\"phalcon-developer-tools\">Phalcon Developer Tools</h1> <p>These tools are a collection of useful scripts to generate skeleton code. Core components of your application can be generated with a simple command, allowing you to easily develop applications using Phalcon.</p> <blockquote class=\"highlights\"> <div>\n<strong>Important:</strong> Phalcon Framework version 0.5.0 or greater is needed to use developer tools. It is highly recommended to use PHP 5.4 or greater. If you prefer to use the web version instead of the console, this <a class=\"reference external\" href=\"https://blog.phalconphp.com/post/dont-like-command-line-and-consoles-no-problem\">blog post</a> offers more information.</div>\n</blockquote>  <h2 id=\"download\">Download</h2> <p>You can download or clone a cross platform package containing the developer tools from <a class=\"reference external\" href=\"https://github.com/phalcon/phalcon-devtools\">Github</a>.</p>  <h3 id=\"installation\">Installation</h3> <p>These are detailed instructions on how to install the developer tools on different platforms:</p> <div class=\"toctree-wrapper compound\"> <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"wintools\">Phalcon Developer Tools on Windows</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"mactools\">Phalcon Developer Tools on Mac OS X</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"linuxtools\">Phalcon Developer Tools on Linux</a></li> </ul> </div>    <h2 id=\"getting-available-commands\">Getting Available Commands</h2> <p>You can get a list of available commands in Phalcon tools by typing: <code class=\"code docutils literal\"><span class=\"pre\">phalcon</span> <span class=\"pre\">commands</span></code></p> <pre class=\"highlight-sh\" data-language=\"sh\">$ phalcon commands\n\nPhalcon DevTools (2.0.8)\n\nAvailable commands:\n  commands         (alias of: list, enumerate)\n  controller       (alias of: create-controller)\n  model            (alias of: create-model)\n  all-models       (alias of: create-all-models)\n  project          (alias of: create-project)\n  scaffold         (alias of: create-scaffold)\n  migration        (alias of: create-migration)\n  webtools         (alias of: create-webtools)\n</pre>   <h2 id=\"generating-a-project-skeleton\">Generating a Project Skeleton</h2> <p>You can use Phalcon tools to generate pre-defined project skeletons for your applications with Phalcon framework. By default the project skeleton generator will use mod_rewrite for Apache. Type the following command on your web server document root:</p> <pre class=\"highlight-sh\" data-language=\"sh\">$ pwd\n\n/Applications/MAMP/htdocs\n\n$ phalcon create-project store\n</pre> <p>The above recommended project structure was generated:</p> <div class=\"figure align-center\"> <img alt=\"../_images/tools-2.png\" src=\"https://docs.phalconphp.com/en/latest/_images/tools-2.png\"> </div> <p>You could add the parameter <em>–help</em> to get help on the usage of a certain script:</p> <pre class=\"highlight-sh\" data-language=\"sh\">$ phalcon project --help\n\nPhalcon DevTools (2.0.8)\n\nHelp:\n  Creates a project\n\nUsage:\n  project [name] [type] [directory] [enable-webtools]\n\nArguments:\n  help    Shows this help text\n\nExample\n  phalcon project store simple\n\nOptions:\n --name               Name of the new project\n --enable-webtools    Determines if webtools should be enabled [optional]\n --directory=s        Base path on which project will be created [optional]\n --type=s             Type of the application to be generated (cli, micro, simple, modules)\n --template-path=s    Specify a template path [optional]\n --use-config-ini     Use a ini file as configuration file [optional]\n --trace              Shows the trace of the framework in case of exception. [optional]\n --help               Shows this help\n</pre> <p>Accessing the project from the web server will show you:</p> <div class=\"figure align-center\"> <img alt=\"../_images/tools-6.png\" src=\"https://docs.phalconphp.com/en/latest/_images/tools-6.png\"> </div>   <h2 id=\"generating-controllers\">Generating Controllers</h2> <p>The command “create-controller” generates controller skeleton structures. It’s important to invoke this command inside a directory that already has a Phalcon project.</p> <pre class=\"highlight-sh\" data-language=\"sh\">$ phalcon create-controller --name test\n</pre> <p>The following code is generated by the script:</p> <pre class=\"highlight-php\" data-language=\"php\">class TestController extends Phalcon\\Mvc\\Controller\n{\n    public function indexAction()\n    {\n\n    }\n}\n</pre>   <h2 id=\"preparing-database-settings\">Preparing Database Settings</h2> <p>When a project is generated using developer tools. A configuration file can be found in <em>app/config/config.ini</em> To generate models or scaffold, you will need to change the settings used to connect to your database.</p> <p>Change the database section in your config.ini file:</p> <pre class=\"highlight-ini\" data-language=\"ini\">[database]\nadapter  = Mysql\nhost     = \"127.0.0.1\"\nusername = \"root\"\npassword = \"secret\"\ndbname   = \"store_db\"\n\n[phalcon]\ncontrollersDir = \"../app/controllers/\"\nmodelsDir      = \"../app/models/\"\nviewsDir       = \"../app/views/\"\nbaseUri        = \"/store/\"\n</pre>   <h2 id=\"generating-models\">Generating Models</h2> <p>There are several ways to create models. You can create all models from the default database connection or some selectively. Models can have public attributes for the field representations or setters/getters can be used.</p> <dl class=\"docutils\"> <dt>Options:</dt> <dd>\n<table class=\"first last docutils option-list\" frame=\"void\" rules=\"none\"> <col class=\"option\"> <col class=\"description\"> <tbody valign=\"top\"> <tr>\n<td class=\"option-group\"> <kbd><span class=\"option\">--name=<var>s</var></span></kbd>\n</td> <td>Table name</td>\n</tr> <tr>\n<td class=\"option-group\"> <kbd><span class=\"option\">--schema=<var>s</var></span></kbd>\n</td> <td>Name of the schema. [optional]</td>\n</tr> <tr>\n<td class=\"option-group\"> <kbd><span class=\"option\">--namespace=<var>s</var></span></kbd>\n</td> <td>Model’s namespace [optional]</td>\n</tr> <tr>\n<td class=\"option-group\"> <kbd><span class=\"option\">--get-set</span></kbd>\n</td> <td>Attributes will be protected and have setters/getters. [optional]</td>\n</tr> <tr>\n<td class=\"option-group\"> <kbd><span class=\"option\">--extends=<var>s</var></span></kbd>\n</td> <td>Model extends the class name supplied [optional]</td>\n</tr> <tr>\n<td class=\"option-group\" colspan=\"2\"> <kbd><span class=\"option\">--excludefields=<var>l</var></span></kbd>\n</td> </tr> <tr>\n<td> </td>\n<td>Excludes fields defined in a comma separated list [optional]</td>\n</tr> <tr>\n<td class=\"option-group\"> <kbd><span class=\"option\">--doc</span></kbd>\n</td> <td>Helps to improve code completion on IDEs [optional]</td>\n</tr> <tr>\n<td class=\"option-group\"> <kbd><span class=\"option\">--directory=<var>s</var></span></kbd>\n</td> <td>Base path on which project will be created [optional]</td>\n</tr> <tr>\n<td class=\"option-group\"> <kbd><span class=\"option\">--force</span></kbd>\n</td> <td>Rewrite the model. [optional]</td>\n</tr> <tr>\n<td class=\"option-group\"> <kbd><span class=\"option\">--trace</span></kbd>\n</td> <td>Shows the trace of the framework in case of exception. [optional]</td>\n</tr> <tr>\n<td class=\"option-group\"> <kbd><span class=\"option\">--mapcolumn</span></kbd>\n</td> <td>Get some code for map columns. [optional]</td>\n</tr> <tr>\n<td class=\"option-group\"> <kbd><span class=\"option\">--abstract</span></kbd>\n</td> <td>Abstract Model [optional]</td>\n</tr> </tbody> </table> </dd> </dl> <p>The simplest way to generate a model is:</p> <pre class=\"highlight-sh\" data-language=\"sh\">$ phalcon model products\n</pre> <pre class=\"highlight-sh\" data-language=\"sh\">$ phalcon model --name tablename\n</pre> <p>All table fields are declared public for direct access.</p> <pre class=\"highlight-php\" data-language=\"php\">class Products extends \\Phalcon\\Mvc\\Model\n{\n    /**\n     * @var integer\n     */\n    public $id;\n\n    /**\n     * @var integer\n     */\n    public $types_id;\n\n    /**\n     * @var string\n     */\n    public $name;\n\n    /**\n     * @var string\n     */\n    public $price;\n\n    /**\n     * @var integer\n     */\n    public $quantity;\n\n    /**\n     * @var string\n     */\n    public $status;\n}\n</pre> <p>By adding the <em>–get-set</em> you can generate the fields with protected variables and public setter/getter methods. Those methods can help in business logic implementation within the setter/getter methods.</p> <pre class=\"highlight-php\" data-language=\"php\">class Products extends \\Phalcon\\Mvc\\Model\n{\n    /**\n     * @var integer\n     */\n    protected $id;\n\n    /**\n     * @var integer\n     */\n    protected $types_id;\n\n    /**\n     * @var string\n     */\n    protected $name;\n\n    /**\n     * @var string\n     */\n    protected $price;\n\n    /**\n     * @var integer\n     */\n    protected $quantity;\n\n    /**\n     * @var string\n     */\n    protected $status;\n\n\n    /**\n     * Method to set the value of field id\n     * @param integer $id\n     */\n    public function setId($id)\n    {\n        $this-&gt;id = $id;\n    }\n\n    /**\n     * Method to set the value of field types_id\n     * @param integer $types_id\n     */\n    public function setTypesId($types_id)\n    {\n        $this-&gt;types_id = $types_id;\n    }\n\n    // ...\n\n    /**\n     * Returns the value of field status\n     * @return string\n     */\n    public function getStatus()\n    {\n        return $this-&gt;status;\n    }\n}\n</pre> <p>A nice feature of the model generator is that it keeps changes made by the developer between code generations. This allows the addition or removal of fields and properties, without worrying about losing changes made to the model itself. The following screencast shows you how it works:</p> <div align=\"center\"><iframe src=\"https://player.vimeo.com/video/39213020\" width=\"500\" height=\"266\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div>  <h2 id=\"scaffold-a-crud\">Scaffold a CRUD</h2> <p>Scaffolding is a quick way to generate some of the major pieces of an application. If you want to create the models, views, and controllers for a new resource in a single operation, scaffolding is the tool for the job.</p> <p>Once the code is generated, it will have to be customized to meet your needs. Many developers avoid scaffolding entirely, opting to write all or most of their source code from scratch. The generated code can serve as a guide to better understand of how the framework works or develop prototypes. The code below shows a scaffold based on the table “products”:</p> <pre class=\"highlight-sh\" data-language=\"sh\">$ phalcon scaffold --table-name products\n</pre> <p>The scaffold generator will build several files in your application, along with some folders. Here’s a quick overview of what will be generated:</p> <table class=\"docutils\"> <colgroup> <col width=\"56%\"> <col width=\"44%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">File</th> <th class=\"head\">Purpose</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>app/controllers/ProductsController.php</td> <td>The Products controller</td> </tr> <tr class=\"row-odd\">\n<td>app/models/Products.php</td> <td>The Products model</td> </tr> <tr class=\"row-even\">\n<td>app/views/layout/products.phtml</td> <td>Controller layout for Products</td> </tr> <tr class=\"row-odd\">\n<td>app/views/products/new.phtml</td> <td>View for the action “new”</td> </tr> <tr class=\"row-even\">\n<td>app/views/products/edit.phtml</td> <td>View for the action “edit”</td> </tr> <tr class=\"row-odd\">\n<td>app/views/products/search.phtml</td> <td>View for the action “search”</td> </tr> </tbody> </table> <p>When browsing the recently generated controller, you will see a search form and a link to create a new Product:</p> <div class=\"figure align-center\"> <img alt=\"../_images/tools-10.png\" src=\"https://docs.phalconphp.com/en/latest/_images/tools-10.png\"> </div> <p>The “create page” allows you to create products applying validations on the Products model. Phalcon will automatically validate not null fields producing warnings if any of them is required.</p> <div class=\"figure align-center\"> <img alt=\"../_images/tools-11.png\" src=\"https://docs.phalconphp.com/en/latest/_images/tools-11.png\"> </div> <p>After performing a search, a pager component is available to show paged results. Use the “Edit” or “Delete” links in front of each result to perform such actions.</p> <div class=\"figure align-center\"> <img alt=\"../_images/tools-12.png\" src=\"https://docs.phalconphp.com/en/latest/_images/tools-12.png\"> </div>   <h2 id=\"web-interface-to-tools\">Web Interface to Tools</h2> <p>Also, if you prefer, it’s possible to use Phalcon Developer Tools from a web interface. Check out the following screencast to figure out how it works:</p> <div align=\"center\"><iframe src=\"https://player.vimeo.com/video/42367665\" width=\"500\" height=\"266\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div>  <h2 id=\"integrating-tools-with-phpstorm-ide\">Integrating Tools with PhpStorm IDE</h2> <p>The screencast below shows how to integrate developer tools with the <a class=\"reference external\" href=\"http://www.jetbrains.com/phpstorm/\">PhpStorm IDE</a>. The configuration steps could be easily adapted to other IDEs for PHP.</p> <div align=\"center\"><iframe src=\"https://player.vimeo.com/video/43455647\" width=\"500\" height=\"266\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div>  <h2 id=\"conclusion\">Conclusion</h2> <p>Phalcon Developer Tools provides an easy way to generate code for your application, reducing development time and potential coding errors.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/tools.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/tools.html</a>\n  </p>\n</div>\n","api/phalcon_annotations_adapter_files":"<h1 id=\"class-phalcon-annotations-adapter-files\">Class <strong>Phalcon\\Annotations\\Adapter\\Files</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_annotations_adapter\"><em>Phalcon\\Annotations\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_annotations_adapterinterface\"><em>Phalcon\\Annotations\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/adapter/files.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Stores the parsed annotations in files. This adapter is suitable for production</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Annotations\\Adapter\\Files;\n\n $annotations = new Files(['annotationsDir' =&gt; 'app/cache/annotations/']);\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <p>Phalcon\\Annotations\\Adapter\\Files constructor</p> <h3 id=\"read\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_annotations_reflection\"><em>Phalcon\\Annotations\\Reflection</em></a> <strong>read</strong> (<em>string</em> $key)</h3> <p>Reads parsed annotations from files</p> <h3 id=\"write\" class=\"method-signature\">public <strong>write</strong> (<em>mixed</em> $key, <a class=\"reference internal\" href=\"phalcon_annotations_reflection\"><em>Phalcon\\Annotations\\Reflection</em></a> $data)</h3> <p>Writes parsed annotations to files</p> <h3 id=\"setreader\" class=\"method-signature\">public <strong>setReader</strong> (<a class=\"reference internal\" href=\"phalcon_annotations_readerinterface\"><em>Phalcon\\Annotations\\ReaderInterface</em></a> $reader) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Sets the annotations parser</p> <h3 id=\"getreader\" class=\"method-signature\">public <strong>getReader</strong> () <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotation reader</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>string|object</em> $className) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Parses or retrieves all the annotations found in a class</p> <h3 id=\"getmethods\" class=\"method-signature\">public <strong>getMethods</strong> (<em>mixed</em> $className) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotations found in all the class’ methods</p> <h3 id=\"getmethod\" class=\"method-signature\">public <strong>getMethod</strong> (<em>mixed</em> $className, <em>mixed</em> $methodName) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotations found in a specific method</p> <h3 id=\"getproperties\" class=\"method-signature\">public <strong>getProperties</strong> (<em>mixed</em> $className) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotations found in all the class’ methods</p> <h3 id=\"getproperty\" class=\"method-signature\">public <strong>getProperty</strong> (<em>mixed</em> $className, <em>mixed</em> $propertyName) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotations found in a specific property</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Files.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Files.html</a>\n  </p>\n</div>\n","api/phalcon_annotations_adapter_memory":"<h1 id=\"class-phalcon-annotations-adapter-memory\">Class <strong>Phalcon\\Annotations\\Adapter\\Memory</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_annotations_adapter\"><em>Phalcon\\Annotations\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_annotations_adapterinterface\"><em>Phalcon\\Annotations\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/adapter/memory.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Stores the parsed annotations in memory. This adapter is the suitable development/testing</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"read\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_annotations_reflection\"><em>Phalcon\\Annotations\\Reflection</em></a> <strong>read</strong> (<em>string</em> $key)</h3> <p>Reads parsed annotations from memory</p> <h3 id=\"write\" class=\"method-signature\">public <strong>write</strong> (<em>mixed</em> $key, <a class=\"reference internal\" href=\"phalcon_annotations_reflection\"><em>Phalcon\\Annotations\\Reflection</em></a> $data)</h3> <p>Writes parsed annotations to memory</p> <h3 id=\"setreader\" class=\"method-signature\">public <strong>setReader</strong> (<a class=\"reference internal\" href=\"phalcon_annotations_readerinterface\"><em>Phalcon\\Annotations\\ReaderInterface</em></a> $reader) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Sets the annotations parser</p> <h3 id=\"getreader\" class=\"method-signature\">public <strong>getReader</strong> () <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotation reader</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>string|object</em> $className) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Parses or retrieves all the annotations found in a class</p> <h3 id=\"getmethods\" class=\"method-signature\">public <strong>getMethods</strong> (<em>mixed</em> $className) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotations found in all the class’ methods</p> <h3 id=\"getmethod\" class=\"method-signature\">public <strong>getMethod</strong> (<em>mixed</em> $className, <em>mixed</em> $methodName) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotations found in a specific method</p> <h3 id=\"getproperties\" class=\"method-signature\">public <strong>getProperties</strong> (<em>mixed</em> $className) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotations found in all the class’ methods</p> <h3 id=\"getproperty\" class=\"method-signature\">public <strong>getProperty</strong> (<em>mixed</em> $className, <em>mixed</em> $propertyName) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotations found in a specific property</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Memory.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Memory.html</a>\n  </p>\n</div>\n","reference/migrations":"<h1 id=\"database-migrations\">Database Migrations</h1> <p>Migrations are a convenient way for you to alter your database in a structured and organized manner.</p> <blockquote class=\"highlights\"> <div>\n<strong>Important:</strong> Migrations are available in <a class=\"reference internal\" href=\"tools\"><em>Phalcon Developer Tools</em></a> You need at least Phalcon Framework version 0.5.0 to use developer tools. Also, it is recommended to have PHP 5.4 or greater installed.</div>\n</blockquote> <p>Often in development we need to update changes in production environments. Some of these changes could be database modifications like new fields, new tables, removing indexes, etc.</p> <p>When a migration is generated a set of classes are created to describe how your database is structured at that particular moment. These classes can be used to synchronize the schema structure on remote databases setting your database ready to work with the new changes that your application implements. Migrations describe these transformations using plain PHP.</p> <div align=\"center\"> <iframe src=\"https://player.vimeo.com/video/41381817\" width=\"500\" height=\"281\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe> </div> <h2 id=\"schema-dumping\">Schema Dumping</h2> <p>The <a class=\"reference internal\" href=\"tools\"><em>Phalcon Developer Tools</em></a> provides scripts to manage migrations (generation, running and rollback).</p> <p>The available options for generating migrations are:</p> <div class=\"figure align-center\"> <img alt=\"../_images/migrations-1.png\" src=\"https://docs.phalconphp.com/en/latest/_images/migrations-1.png\"> </div> <p>Running this script without any parameters will simply dump every object (tables and views) from your database into migration classes.</p> <p>Each migration has a version identifier associated with it. The version number allows us to identify if the migration is newer or older than the current ‘version’ of our database. Versions will also inform Phalcon of the running order when executing a migration.</p> <div class=\"figure align-center\"> <img alt=\"../_images/migrations-2.png\" src=\"https://docs.phalconphp.com/en/latest/_images/migrations-2.png\"> </div> <p>When a migration is generated, instructions are displayed on the console to describe the different steps of the migration and the execution time of those statements. At the end, a migration version is generated.</p> <p>By default <a class=\"reference internal\" href=\"tools\"><em>Phalcon Developer Tools</em></a> uses the <em>app/migrations</em> directory to dump the migration files. You can change the location by setting one of the parameters on the generation script. Each table in the database has its respective class generated in a separated file under a directory referring its version:</p> <div class=\"figure align-center\"> <img alt=\"../_images/migrations-3.png\" src=\"https://docs.phalconphp.com/en/latest/_images/migrations-3.png\"> </div>   <h2 id=\"migration-class-anatomy\">Migration Class Anatomy</h2> <p>Each file contains a unique class that extends the <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Mvc\\Model\\Migration</span></code> class. These classes normally have two methods: <code class=\"code docutils literal\"><span class=\"pre\">up()</span></code> and <code class=\"code docutils literal\"><span class=\"pre\">down()</span></code>. <code class=\"code docutils literal\"><span class=\"pre\">up()</span></code> performs the migration, while <code class=\"code docutils literal\"><span class=\"pre\">down()</span></code> rolls it back.</p> <p><code class=\"code docutils literal\"><span class=\"pre\">up()</span></code> also contains the <em>magic</em> method <code class=\"code docutils literal\"><span class=\"pre\">morphTable()</span></code>. The magic comes when it recognizes the changes needed to synchronize the actual table in the database to the description given.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Column as Column;\nuse Phalcon\\Db\\Index as Index;\nuse Phalcon\\Db\\Reference as Reference;\n\nclass ProductsMigration_100 extends \\Phalcon\\Mvc\\Model\\Migration\n{\n    public function up()\n    {\n        $this-&gt;morphTable(\n            \"products\",\n            array(\n                \"columns\" =&gt; array(\n                    new Column(\n                        \"id\",\n                        array(\n                            \"type\"          =&gt; Column::TYPE_INTEGER,\n                            \"size\"          =&gt; 10,\n                            \"unsigned\"      =&gt; true,\n                            \"notNull\"       =&gt; true,\n                            \"autoIncrement\" =&gt; true,\n                            \"first\"         =&gt; true\n                        )\n                    ),\n                    new Column(\n                        \"product_types_id\",\n                        array(\n                            \"type\"     =&gt; Column::TYPE_INTEGER,\n                            \"size\"     =&gt; 10,\n                            \"unsigned\" =&gt; true,\n                            \"notNull\"  =&gt; true,\n                            \"after\"    =&gt; \"id\"\n                        )\n                    ),\n                    new Column(\n                        \"name\",\n                        array(\n                            \"type\"    =&gt; Column::TYPE_VARCHAR,\n                            \"size\"    =&gt; 70,\n                            \"notNull\" =&gt; true,\n                            \"after\"   =&gt; \"product_types_id\"\n                        )\n                    ),\n                    new Column(\n                        \"price\",\n                        array(\n                            \"type\"    =&gt; Column::TYPE_DECIMAL,\n                            \"size\"    =&gt; 16,\n                            \"scale\"   =&gt; 2,\n                            \"notNull\" =&gt; true,\n                            \"after\"   =&gt; \"name\"\n                        )\n                    ),\n                ),\n                \"indexes\" =&gt; array(\n                    new Index(\n                        \"PRIMARY\",\n                        array(\"id\")\n                    ),\n                    new Index(\n                        \"product_types_id\",\n                        array(\"product_types_id\")\n                    )\n                ),\n                \"references\" =&gt; array(\n                    new Reference(\n                        \"products_ibfk_1\",\n                        array(\n                            \"referencedSchema\"  =&gt; \"invo\",\n                            \"referencedTable\"   =&gt; \"product_types\",\n                            \"columns\"           =&gt; array(\"product_types_id\"),\n                            \"referencedColumns\" =&gt; array(\"id\")\n                        )\n                    )\n                ),\n                \"options\" =&gt; array(\n                    \"TABLE_TYPE\"      =&gt; \"BASE TABLE\",\n                    \"ENGINE\"          =&gt; \"InnoDB\",\n                    \"TABLE_COLLATION\" =&gt; \"utf8_general_ci\"\n                )\n            )\n        );\n    }\n}\n</pre> <p>The class is called “ProductsMigration_100”. Suffix 100 refers to the version 1.0.0. <code class=\"code docutils literal\"><span class=\"pre\">morphTable()</span></code> receives an associative array with 4 possible sections:</p> <table class=\"docutils\"> <colgroup> <col width=\"8%\"> <col width=\"85%\"> <col width=\"6%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Index</th> <th class=\"head\">Description</th> <th class=\"head\">Optional</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>“columns”</td> <td>An array with a set of table columns</td> <td>No</td> </tr> <tr class=\"row-odd\">\n<td>“indexes”</td> <td>An array with a set of table indexes.</td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>“references”</td> <td>An array with a set of table references (foreign keys).</td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>“options”</td> <td>An array with a set of table creation options. These options are often related to the database system in which the migration was generated.</td> <td>Yes</td> </tr> </tbody> </table>  <h3 id=\"defining-columns\">Defining Columns</h3> <p><a class=\"reference internal\" href=\"../api/phalcon_db_column\"><em>Phalcon\\Db\\Column</em></a> is used to define table columns. It encapsulates a wide variety of column related features. Its constructor receives as first parameter the column name and an array describing the column. The following options are available when describing columns:</p> <table class=\"docutils\"> <colgroup> <col width=\"10%\"> <col width=\"84%\"> <col width=\"6%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option</th> <th class=\"head\">Description</th> <th class=\"head\">Optional</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>“type”</td> <td>Column type. Must be a <a class=\"reference internal\" href=\"../api/phalcon_db_column\"><em>Phalcon_Db_Column</em></a> constant (see below)</td> <td>No</td> </tr> <tr class=\"row-odd\">\n<td>“size”</td> <td>Some type of columns like VARCHAR or INTEGER may have a specific size</td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>“scale”</td> <td>DECIMAL or NUMBER columns may be have a scale to specify how much decimals it must store</td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>“unsigned”</td> <td>INTEGER columns may be signed or unsigned. This option does not apply to other types of columns</td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>“notNull”</td> <td>Column can store null values?</td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>“autoIncrement”</td> <td>With this attribute column will filled automatically with an auto-increment integer. Only one column in the table can have this attribute.</td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>“first”</td> <td>Column must be placed at first position in the column order</td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>“after”</td> <td>Column must be placed after indicated column</td> <td>Yes</td> </tr> </tbody> </table> <p>Database migrations support the following database column types:</p> <ul class=\"simple\"> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_INTEGER</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_VARCHAR</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_CHAR</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_DATE</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_DATETIME</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_TIMESTAMP</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_DECIMAL</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_TEXT</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_BOOLEAN</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_FLOAT</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_DOUBLE</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_TINYBLOB</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_BLOB</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_MEDIUMBLOB</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_LONGBLOB</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_JSON</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_JSONB</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_BIGINTEGER</span></code></li> </ul>   <h3 id=\"defining-indexes\">Defining Indexes</h3> <p><a class=\"reference internal\" href=\"../api/phalcon_db_index\"><em>Phalcon\\Db\\Index</em></a> defines table indexes. An index only requires that you define a name for it and a list of its columns. Note that if any index has the name PRIMARY, Phalcon will create a primary key index for that table.</p>   <h3 id=\"defining-references\">Defining References</h3> <p><a class=\"reference internal\" href=\"../api/phalcon_db_reference\"><em>Phalcon\\Db\\Reference</em></a> defines table references (also called foreign keys). The following options can be used to define a reference:</p> <table class=\"docutils\"> <colgroup> <col width=\"14%\"> <col width=\"67%\"> <col width=\"7%\"> <col width=\"12%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Index</th> <th class=\"head\">Description</th> <th class=\"head\">Optional</th> <th class=\"head\">Implemented in</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>“referencedTable”</td> <td>It’s auto-descriptive. It refers to the name of the referenced table.</td> <td>No</td> <td>All</td> </tr> <tr class=\"row-odd\">\n<td>“columns”</td> <td>An array with the name of the columns at the table that have the reference</td> <td>No</td> <td>All</td> </tr> <tr class=\"row-even\">\n<td>“referencedColumns”</td> <td>An array with the name of the columns at the referenced table</td> <td>No</td> <td>All</td> </tr> <tr class=\"row-odd\">\n<td>“referencedSchema”</td> <td>The referenced table maybe is on another schema or database. This option allows you to define that.</td> <td>Yes</td> <td>All</td> </tr> <tr class=\"row-even\">\n<td>“onDelete”</td> <td>If the foreign record is removed, perform this action on the local record(s).</td> <td>Yes</td> <td>MySQL PostgreSQL</td> </tr> <tr class=\"row-odd\">\n<td>“onUpdate”</td> <td>If the foreign record is updated, perform this action on the local record(s).</td> <td>Yes</td> <td>MySQL PostgreSQL</td> </tr> </tbody> </table>    <h2 id=\"writing-migrations\">Writing Migrations</h2> <p>Migrations aren’t only designed to “morph” table. A migration is just a regular PHP class so you’re not limited to these functions. For example after adding a column you could write code to set the value of that column for existing records. For more details and examples of individual methods, check the <a class=\"reference internal\" href=\"db\"><em>database component</em></a>.</p> <pre class=\"highlight-php\" data-language=\"php\">class ProductsMigration_100 extends \\Phalcon\\Mvc\\Model\\Migration\n{\n    public function up()\n    {\n        // ...\n\n        self::$_connection-&gt;insert(\n            \"products\",\n            array(\"Malabar spinach\", 14.50),\n            array(\"name\", \"price\")\n        );\n    }\n}\n</pre>   <h2 id=\"running-migrations\">Running Migrations</h2> <p>Once the generated migrations are uploaded on the target server, you can easily run them as shown in the following example:</p> <div class=\"figure align-center\"> <img alt=\"../_images/migrations-4.png\" src=\"https://docs.phalconphp.com/en/latest/_images/migrations-4.png\"> </div> <div class=\"figure align-center\"> <img alt=\"../_images/migrations-5.png\" src=\"https://docs.phalconphp.com/en/latest/_images/migrations-5.png\"> </div> <p>Depending on how outdated is the database with respect to migrations, Phalcon may run multiple migration versions in the same migration process. If you specify a target version, Phalcon will run the required migrations until it reaches the specified version.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/migrations.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/migrations.html</a>\n  </p>\n</div>\n","api/phalcon_annotations_annotation":"<h1 id=\"class-phalcon-annotations-annotation\">Class <strong>Phalcon\\Annotations\\Annotation</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/annotation.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Represents a single annotation in an annotations collection</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $reflectionData)</h3> <p>Phalcon\\Annotations\\Annotation constructor</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> ()</h3> <p>Returns the annotation’s name</p> <h3 id=\"getexpression\" class=\"method-signature\">public <em>mixed</em> <strong>getExpression</strong> (<em>array</em> $expr)</h3> <p>Resolves an annotation expression</p> <h3 id=\"getexprarguments\" class=\"method-signature\">public <em>array</em> <strong>getExprArguments</strong> ()</h3> <p>Returns the expression arguments without resolving</p> <h3 id=\"getarguments\" class=\"method-signature\">public <em>array</em> <strong>getArguments</strong> ()</h3> <p>Returns the expression arguments</p> <h3 id=\"numberarguments\" class=\"method-signature\">public <strong>numberArguments</strong> ()</h3> <p>Returns the number of arguments that the annotation has</p> <h3 id=\"getargument\" class=\"method-signature\">public <em>mixed</em> <strong>getArgument</strong> (<em>int|string</em> $position)</h3> <p>Returns an argument in a specific position</p> <h3 id=\"hasargument\" class=\"method-signature\">public <em>boolean</em> <strong>hasArgument</strong> (<em>int|string</em> $position)</h3> <p>Returns an argument in a specific position</p> <h3 id=\"getnamedargument\" class=\"method-signature\">public <em>mixed</em> <strong>getNamedArgument</strong> (<em>mixed</em> $name)</h3> <p>Returns a named argument</p> <h3 id=\"getnamedparameter\" class=\"method-signature\">public <em>mixed</em> <strong>getNamedParameter</strong> (<em>mixed</em> $name)</h3> <p>Returns a named parameter</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Annotation.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Annotation.html</a>\n  </p>\n</div>\n","api/phalcon_annotations_adapter_xcache":"<h1 id=\"class-phalcon-annotations-adapter-xcache\">Class <strong>Phalcon\\Annotations\\Adapter\\Xcache</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_annotations_adapter\"><em>Phalcon\\Annotations\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_annotations_adapterinterface\"><em>Phalcon\\Annotations\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/adapter/xcache.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Stores the parsed annotations to XCache. This adapter is suitable for production</p> <pre class=\"highlight-php\" data-language=\"php\">$annotations = new \\Phalcon\\Annotations\\Adapter\\Xcache();\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"read\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_annotations_reflection\"><em>Phalcon\\Annotations\\Reflection</em></a> <strong>read</strong> (<em>string</em> $key)</h3> <p>Reads parsed annotations from XCache</p> <h3 id=\"write\" class=\"method-signature\">public <strong>write</strong> (<em>mixed</em> $key, <a class=\"reference internal\" href=\"phalcon_annotations_reflection\"><em>Phalcon\\Annotations\\Reflection</em></a> $data)</h3> <p>Writes parsed annotations to XCache</p> <h3 id=\"setreader\" class=\"method-signature\">public <strong>setReader</strong> (<a class=\"reference internal\" href=\"phalcon_annotations_readerinterface\"><em>Phalcon\\Annotations\\ReaderInterface</em></a> $reader) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Sets the annotations parser</p> <h3 id=\"getreader\" class=\"method-signature\">public <strong>getReader</strong> () <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotation reader</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>string|object</em> $className) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Parses or retrieves all the annotations found in a class</p> <h3 id=\"getmethods\" class=\"method-signature\">public <strong>getMethods</strong> (<em>mixed</em> $className) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotations found in all the class’ methods</p> <h3 id=\"getmethod\" class=\"method-signature\">public <strong>getMethod</strong> (<em>mixed</em> $className, <em>mixed</em> $methodName) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotations found in a specific method</p> <h3 id=\"getproperties\" class=\"method-signature\">public <strong>getProperties</strong> (<em>mixed</em> $className) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotations found in all the class’ methods</p> <h3 id=\"getproperty\" class=\"method-signature\">public <strong>getProperty</strong> (<em>mixed</em> $className, <em>mixed</em> $propertyName) <small>inherited from Phalcon\\Annotations\\Adapter</small>\n</h3> <p>Returns the annotations found in a specific property</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Xcache.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Adapter_Xcache.html</a>\n  </p>\n</div>\n","api/phalcon_annotations_reader":"<h1 id=\"class-phalcon-annotations-reader\">Class <strong>Phalcon\\Annotations\\Reader</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_annotations_readerinterface\"><em>Phalcon\\Annotations\\ReaderInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/reader.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Parses docblocks returning an array with the found annotations</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"parse\" class=\"method-signature\">public <strong>parse</strong> (<em>mixed</em> $className)</h3> <p>Reads annotations from the class dockblocks, its methods and/or properties</p> <h3 id=\"parsedocblock\" class=\"method-signature\">public static <strong>parseDocBlock</strong> (<em>mixed</em> $docBlock, [<em>mixed</em> $file], [<em>mixed</em> $line])</h3> <p>Parses a raw doc block returning the annotations found</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Reader.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Reader.html</a>\n  </p>\n</div>\n","api/phalcon_annotations_collection":"<h1 id=\"class-phalcon-annotations-collection\">Class <strong>Phalcon\\Annotations\\Collection</strong>\n</h1> <p><em>implements</em> Iterator, Traversable, Countable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/collection.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Represents a collection of annotations. This class allows to traverse a group of annotations easily</p> <pre class=\"highlight-php\" data-language=\"php\">//Traverse annotations\n foreach ($classAnnotations as $annotation) {\n     echo 'Name=', $annotation-&gt;getName(), PHP_EOL;\n }\n\n //Check if the annotations has a specific\n var_dump($classAnnotations-&gt;has('Cacheable'));\n\n //Get an specific annotation in the collection\n $annotation = $classAnnotations-&gt;get('Cacheable');\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $reflectionData])</h3> <p>Phalcon\\Annotations\\Collection constructor</p> <h3 id=\"count\" class=\"method-signature\">public <strong>count</strong> ()</h3> <p>Returns the number of annotations in the collection</p> <h3 id=\"rewind\" class=\"method-signature\">public <strong>rewind</strong> ()</h3> <p>Rewinds the internal iterator</p> <h3 id=\"current\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_annotations_annotation\"><em>Phalcon\\Annotations\\Annotation</em></a> <strong>current</strong> ()</h3> <p>Returns the current annotation in the iterator</p> <h3 id=\"key\" class=\"method-signature\">public <strong>key</strong> ()</h3> <p>Returns the current position/key in the iterator</p> <h3 id=\"next\" class=\"method-signature\">public <strong>next</strong> ()</h3> <p>Moves the internal iteration pointer to the next position</p> <h3 id=\"valid\" class=\"method-signature\">public <strong>valid</strong> ()</h3> <p>Check if the current annotation in the iterator is valid</p> <h3 id=\"getannotations\" class=\"method-signature\">public <strong>getAnnotations</strong> ()</h3> <p>Returns the internal annotations as an array</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $name)</h3> <p>Returns the first annotation that match a name</p> <h3 id=\"getall\" class=\"method-signature\">public <strong>getAll</strong> (<em>mixed</em> $name)</h3> <p>Returns all the annotations that match a name</p> <h3 id=\"has\" class=\"method-signature\">public <strong>has</strong> (<em>mixed</em> $name)</h3> <p>Check if an annotation exists in a collection</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Collection.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Collection.html</a>\n  </p>\n</div>\n","api/phalcon_annotations_exception":"<h1 id=\"class-phalcon-annotations-exception\">Class <strong>Phalcon\\Annotations\\Exception</strong>\n</h1> <p><em>extends</em> Exception</p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_annotations_reflection":"<h1 id=\"class-phalcon-annotations-reflection\">Class <strong>Phalcon\\Annotations\\Reflection</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/reflection.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to manipulate the annotations reflection in an OO manner</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Annotations\\Reader;\n use Phalcon\\Annotations\\Reflection;\n\n // Parse the annotations in a class\n $reader = new Reader();\n $parsing = reader-&gt;parse('MyComponent');\n\n // Create the reflection\n $reflection = new Reflection($parsing);\n\n // Get the annotations in the class docblock\n $classAnnotations = reflection-&gt;getClassAnnotations();\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $reflectionData])</h3> <p>Phalcon\\Annotations\\Reflection constructor</p> <h3 id=\"getclassannotations\" class=\"method-signature\">public <strong>getClassAnnotations</strong> ()</h3> <p>Returns the annotations found in the class docblock</p> <h3 id=\"getmethodsannotations\" class=\"method-signature\">public <strong>getMethodsAnnotations</strong> ()</h3> <p>Returns the annotations found in the methods’ docblocks</p> <h3 id=\"getpropertiesannotations\" class=\"method-signature\">public <strong>getPropertiesAnnotations</strong> ()</h3> <p>Returns the annotations found in the properties’ docblocks</p> <h3 id=\"getreflectiondata\" class=\"method-signature\">public <em>array</em> <strong>getReflectionData</strong> ()</h3> <p>Returns the raw parsing intermediate definitions used to construct the reflection</p> <h3 id=\"__set_state\" class=\"method-signature\">public static <em>array data</em> <strong>__set_state</strong> (<em>mixed</em> $data)</h3> <p>Restores the state of a Phalcon\\Annotations\\Reflection variable export</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Reflection.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_Reflection.html</a>\n  </p>\n</div>\n","api/phalcon_acl_adapter_memory":"<h1 id=\"class-phalcon-acl-adapter-memory\">Class <strong>Phalcon\\Acl\\Adapter\\Memory</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_acl_adapter\"><em>Phalcon\\Acl\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_acl_adapterinterface\"><em>Phalcon\\Acl\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/adapter/memory.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Manages ACL lists in memory</p> <pre class=\"highlight-php\" data-language=\"php\">$acl = new \\Phalcon\\Acl\\Adapter\\Memory();\n\n$acl-&gt;setDefaultAction(Phalcon\\Acl::DENY);\n\n//Register roles\n$roles = array(\n    'users' =&gt; new \\Phalcon\\Acl\\Role('Users'),\n    'guests' =&gt; new \\Phalcon\\Acl\\Role('Guests')\n);\nforeach ($roles as $role) {\n    $acl-&gt;addRole($role);\n}\n\n//Private area resources\n$privateResources = array(\n    'companies' =&gt; array('index', 'search', 'new', 'edit', 'save', 'create', 'delete'),\n    'products' =&gt; array('index', 'search', 'new', 'edit', 'save', 'create', 'delete'),\n    'invoices' =&gt; array('index', 'profile')\n);\nforeach ($privateResources as $resource =&gt; $actions) {\n    $acl-&gt;addResource(new Phalcon\\Acl\\Resource($resource), $actions);\n}\n\n//Public area resources\n$publicResources = array(\n    'index' =&gt; array('index'),\n    'about' =&gt; array('index'),\n    'session' =&gt; array('index', 'register', 'start', 'end'),\n    'contact' =&gt; array('index', 'send')\n);\nforeach ($publicResources as $resource =&gt; $actions) {\n    $acl-&gt;addResource(new Phalcon\\Acl\\Resource($resource), $actions);\n}\n\n//Grant access to public areas to both users and guests\nforeach ($roles as $role){\n    foreach ($publicResources as $resource =&gt; $actions) {\n            $acl-&gt;allow($role-&gt;getName(), $resource, '*');\n    }\n}\n\n//Grant access to private area to role Users\nforeach ($privateResources as $resource =&gt; $actions) {\n            foreach ($actions as $action) {\n            $acl-&gt;allow('Users', $resource, $action);\n    }\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ()</h3> <p>Phalcon\\Acl\\Adapter\\Memory constructor</p> <h3 id=\"addrole\" class=\"method-signature\">public <strong>addRole</strong> (<em>RoleInterface|string</em> $role, [<em>array|string</em> $accessInherits])</h3> <p>Adds a role to the ACL list. Second parameter allows inheriting access data from other existing role Example:</p> <pre class=\"highlight-php\" data-language=\"php\">$acl-&gt;addRole(new Phalcon\\Acl\\Role('administrator'), 'consultant');\n    $acl-&gt;addRole('administrator', 'consultant');\n</pre> <h3 id=\"addinherit\" class=\"method-signature\">public <strong>addInherit</strong> (<em>mixed</em> $roleName, <em>mixed</em> $roleToInherit)</h3> <p>Do a role inherit from another existing role</p> <h3 id=\"isrole\" class=\"method-signature\">public <strong>isRole</strong> (<em>mixed</em> $roleName)</h3> <p>Check whether role exist in the roles list</p> <h3 id=\"isresource\" class=\"method-signature\">public <strong>isResource</strong> (<em>mixed</em> $resourceName)</h3> <p>Check whether resource exist in the resources list</p> <h3 id=\"addresource\" class=\"method-signature\">public <strong>addResource</strong> (<em>Phalcon\\Acl\\Resource|string</em> $resourceValue, <em>array|string</em> $accessList)</h3> <p>Adds a resource to the ACL list Access names can be a particular action, by example search, update, delete, etc or a list of them Example:</p> <pre class=\"highlight-php\" data-language=\"php\">//Add a resource to the the list allowing access to an action\n $acl-&gt;addResource(new Phalcon\\Acl\\Resource('customers'), 'search');\n $acl-&gt;addResource('customers', 'search');\n\n //Add a resource  with an access list\n $acl-&gt;addResource(new Phalcon\\Acl\\Resource('customers'), array('create', 'search'));\n $acl-&gt;addResource('customers', array('create', 'search'));\n</pre> <h3 id=\"addresourceaccess\" class=\"method-signature\">public <strong>addResourceAccess</strong> (<em>mixed</em> $resourceName, <em>array|string</em> $accessList)</h3> <p>Adds access to resources</p> <h3 id=\"dropresourceaccess\" class=\"method-signature\">public <strong>dropResourceAccess</strong> (<em>mixed</em> $resourceName, <em>array|string</em> $accessList)</h3> <p>Removes an access from a resource</p> <h3 id=\"_allowordeny\" class=\"method-signature\">protected <strong>_allowOrDeny</strong> (<em>mixed</em> $roleName, <em>mixed</em> $resourceName, <em>mixed</em> $access, <em>mixed</em> $action, [<em>mixed</em> $func])</h3> <p>Checks if a role has access to a resource</p> <h3 id=\"allow\" class=\"method-signature\">public <strong>allow</strong> (<em>mixed</em> $roleName, <em>mixed</em> $resourceName, <em>mixed</em> $access, [<em>mixed</em> $func])</h3> <p>Allow access to a role on a resource You can use ‘*’ as wildcard Example:</p> <pre class=\"highlight-php\" data-language=\"php\">//Allow access to guests to search on customers\n $acl-&gt;allow('guests', 'customers', 'search');\n\n //Allow access to guests to search or create on customers\n $acl-&gt;allow('guests', 'customers', array('search', 'create'));\n\n //Allow access to any role to browse on products\n $acl-&gt;allow('*', 'products', 'browse');\n\n //Allow access to any role to browse on any resource\n $acl-&gt;allow('*', '*', 'browse');\n</pre> <h3 id=\"deny\" class=\"method-signature\">public <strong>deny</strong> (<em>mixed</em> $roleName, <em>mixed</em> $resourceName, <em>mixed</em> $access, [<em>mixed</em> $func])</h3> <p>Deny access to a role on a resource You can use ‘*’ as wildcard Example:</p> <pre class=\"highlight-php\" data-language=\"php\">//Deny access to guests to search on customers\n $acl-&gt;deny('guests', 'customers', 'search');\n\n //Deny access to guests to search or create on customers\n $acl-&gt;deny('guests', 'customers', array('search', 'create'));\n\n //Deny access to any role to browse on products\n $acl-&gt;deny('*', 'products', 'browse');\n\n //Deny access to any role to browse on any resource\n $acl-&gt;deny('*', '*', 'browse');\n</pre> <h3 id=\"isallowed\" class=\"method-signature\">public <strong>isAllowed</strong> (<em>mixed</em> $roleName, <em>mixed</em> $resourceName, <em>mixed</em> $access, [<em>array</em> $parameters])</h3> <p>Check whether a role is allowed to access an action from a resource</p> <pre class=\"highlight-php\" data-language=\"php\">//Does andres have access to the customers resource to create?\n $acl-&gt;isAllowed('andres', 'Products', 'create');\n\n //Do guests have access to any resource to edit?\n $acl-&gt;isAllowed('guests', '*', 'edit');\n</pre> <h3 id=\"setnoargumentsdefaultaction\" class=\"method-signature\">public <strong>setNoArgumentsDefaultAction</strong> (<em>mixed</em> $defaultAccess)</h3> <p>Sets the default access level (Phalcon\\Acl::ALLOW or Phalcon\\Acl::DENY) for no arguments provided in isAllowed action if there exists func for accessKey</p> <h3 id=\"getnoargumentsdefaultaction\" class=\"method-signature\">public <strong>getNoArgumentsDefaultAction</strong> ()</h3> <p>Returns the default ACL access level for no arguments provided in isAllowed action if there exists func for accessKey</p> <h3 id=\"getroles\" class=\"method-signature\">public <strong>getRoles</strong> ()</h3> <p>Return an array with every role registered in the list</p> <h3 id=\"getresources\" class=\"method-signature\">public <strong>getResources</strong> ()</h3> <p>Return an array with every resource registered in the list</p> <h3 id=\"getactiverole\" class=\"method-signature\">public <strong>getActiveRole</strong> () <small>inherited from Phalcon\\Acl\\Adapter</small>\n</h3> <p>Role which the list is checking if it’s allowed to certain resource/access</p> <h3 id=\"getactiveresource\" class=\"method-signature\">public <strong>getActiveResource</strong> () <small>inherited from Phalcon\\Acl\\Adapter</small>\n</h3> <p>Resource which the list is checking if some role can access it</p> <h3 id=\"getactiveaccess\" class=\"method-signature\">public <strong>getActiveAccess</strong> () <small>inherited from Phalcon\\Acl\\Adapter</small>\n</h3> <p>Active access which the list is checking if some role can access it</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Acl\\Adapter</small>\n</h3> <p>Sets the events manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Acl\\Adapter</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"setdefaultaction\" class=\"method-signature\">public <strong>setDefaultAction</strong> (<em>mixed</em> $defaultAccess) <small>inherited from Phalcon\\Acl\\Adapter</small>\n</h3> <p>Sets the default access level (Phalcon\\Acl::ALLOW or Phalcon\\Acl::DENY)</p> <h3 id=\"getdefaultaction\" class=\"method-signature\">public <strong>getDefaultAction</strong> () <small>inherited from Phalcon\\Acl\\Adapter</small>\n</h3> <p>Returns the default ACL access level</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Adapter_Memory.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_Adapter_Memory.html</a>\n  </p>\n</div>\n","api/phalcon_application_exception":"<h1 id=\"class-phalcon-application-exception\">Class <strong>Phalcon\\Application\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/application/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Application_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Application_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_assets_exception":"<h1 id=\"class-phalcon-assets-exception\">Class <strong>Phalcon\\Assets\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Exception.html</a>\n  </p>\n</div>\n","reference/db":"<h1 id=\"database-abstraction-layer\">Database Abstraction Layer</h1> <p><a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a> is the component behind <a class=\"reference internal\" href=\"../api/phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> that powers the model layer in the framework. It consists of an independent high-level abstraction layer for database systems completely written in C.</p> <p>This component allows for a lower level database manipulation than using traditional models.</p> <blockquote class=\"highlights\"> <div>This guide is not intended to be a complete documentation of available methods and their arguments. Please visit the <a class=\"reference internal\" href=\"https://docs.phalconphp.com/en/latest/api/index.html\"><em>API</em></a> for a complete reference.</div>\n</blockquote>  <h2 id=\"database-adapters\">Database Adapters</h2> <p>This component makes use of adapters to encapsulate specific database system details. Phalcon uses <a class=\"reference external\" href=\"http://www.php.net/manual/en/book.pdo.php\">PDO</a> to connect to databases. The following database engines are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"4%\"> <col width=\"69%\"> <col width=\"27%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\">Description</th> <th class=\"head\">API</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>MySQL</td> <td>Is the world’s most used relational database management system (RDBMS) that runs as a server providing multi-user access to a number of databases</td> <td><a class=\"reference internal\" href=\"../api/phalcon_db_adapter_pdo_mysql\"><em>Phalcon\\Db\\Adapter\\Pdo\\Mysql</em></a></td> </tr> <tr class=\"row-odd\">\n<td>PostgreSQL</td> <td>PostgreSQL is a powerful, open source relational database system. It has more than 15 years of active development and a proven architecture that has earned it a strong reputation for reliability, data integrity, and correctness.</td> <td><a class=\"reference internal\" href=\"../api/phalcon_db_adapter_pdo_postgresql\"><em>Phalcon\\Db\\Adapter\\Pdo\\Postgresql</em></a></td> </tr> <tr class=\"row-even\">\n<td>SQLite</td> <td>SQLite is a software library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine</td> <td><a class=\"reference internal\" href=\"../api/phalcon_db_adapter_pdo_sqlite\"><em>Phalcon\\Db\\Adapter\\Pdo\\Sqlite</em></a></td> </tr> </tbody> </table>  <h3 id=\"implementing-your-own-adapters\">Implementing your own adapters</h3> <p>The <a class=\"reference internal\" href=\"../api/phalcon_db_adapterinterface\"><em>Phalcon\\Db\\AdapterInterface</em></a> interface must be implemented in order to create your own database adapters or extend the existing ones.</p>    <h2 id=\"database-dialects\">Database Dialects</h2> <p>Phalcon encapsulates the specific details of each database engine in dialects. Those provide common functions and SQL generator to the adapters.</p> <table class=\"docutils\"> <colgroup> <col width=\"8%\"> <col width=\"37%\"> <col width=\"55%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\">Description</th> <th class=\"head\">API</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>MySQL</td> <td>SQL specific dialect for MySQL database system</td> <td><a class=\"reference internal\" href=\"../api/phalcon_db_dialect_mysql\"><em>Phalcon\\Db\\Dialect\\Mysql</em></a></td> </tr> <tr class=\"row-odd\">\n<td>PostgreSQL</td> <td>SQL specific dialect for PostgreSQL database system</td> <td><a class=\"reference internal\" href=\"../api/phalcon_db_dialect_postgresql\"><em>Phalcon\\Db\\Dialect\\Postgresql</em></a></td> </tr> <tr class=\"row-even\">\n<td>SQLite</td> <td>SQL specific dialect for SQLite database system</td> <td><a class=\"reference internal\" href=\"../api/phalcon_db_dialect_sqlite\"><em>Phalcon\\Db\\Dialect\\Sqlite</em></a></td> </tr> </tbody> </table>  <h3 id=\"implementing-your-own-dialects\">Implementing your own dialects</h3> <p>The <a class=\"reference internal\" href=\"../api/phalcon_db_dialectinterface\"><em>Phalcon\\Db\\DialectInterface</em></a> interface must be implemented in order to create your own database dialects or extend the existing ones.</p>    <h2 id=\"connecting-to-databases\">Connecting to Databases</h2> <p>To create a connection it’s necessary instantiate the adapter class. It only requires an array with the connection parameters. The example below shows how to create a connection passing both required and optional parameters:</p> <pre class=\"highlight-php\" data-language=\"php\">// Required\n$config = array(\n    \"host\"     =&gt; \"127.0.0.1\",\n    \"username\" =&gt; \"mike\",\n    \"password\" =&gt; \"sigma\",\n    \"dbname\"   =&gt; \"test_db\"\n);\n\n// Optional\n$config[\"persistent\"] = false;\n\n// Create a connection\n$connection = new \\Phalcon\\Db\\Adapter\\Pdo\\Mysql($config);\n</pre> <pre class=\"highlight-php\" data-language=\"php\">// Required\n$config = array(\n    \"host\"     =&gt; \"localhost\",\n    \"username\" =&gt; \"postgres\",\n    \"password\" =&gt; \"secret1\",\n    \"dbname\"   =&gt; \"template\"\n);\n\n// Optional\n$config[\"schema\"] = \"public\";\n\n// Create a connection\n$connection = new \\Phalcon\\Db\\Adapter\\Pdo\\Postgresql($config);\n</pre> <pre class=\"highlight-php\" data-language=\"php\">// Required\n$config = array(\n    \"dbname\" =&gt; \"/path/to/database.db\"\n);\n\n// Create a connection\n$connection = new \\Phalcon\\Db\\Adapter\\Pdo\\Sqlite($config);\n</pre>   <h2 id=\"setting-up-additional-pdo-options\">Setting up additional PDO options</h2> <p>You can set PDO options at connection time by passing the parameters ‘options’:</p> <pre class=\"highlight-php\" data-language=\"php\">// Create a connection with PDO options\n$connection = new \\Phalcon\\Db\\Adapter\\Pdo\\Mysql(\n    array(\n        \"host\"     =&gt; \"localhost\",\n        \"username\" =&gt; \"root\",\n        \"password\" =&gt; \"sigma\",\n        \"dbname\"   =&gt; \"test_db\",\n        \"options\"  =&gt; array(\n            PDO::MYSQL_ATTR_INIT_COMMAND =&gt; \"SET NAMES \\'UTF8\\'\",\n            PDO::ATTR_CASE               =&gt; PDO::CASE_LOWER\n        )\n    )\n);\n</pre>   <h2 id=\"finding-rows\">Finding Rows</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a> provides several methods to query rows from tables. The specific SQL syntax of the target database engine is required in this case:</p> <pre class=\"highlight-php\" data-language=\"php\">$sql = \"SELECT id, name FROM robots ORDER BY name\";\n\n// Send a SQL statement to the database system\n$result = $connection-&gt;query($sql);\n\n// Print each robot name\nwhile ($robot = $result-&gt;fetch()) {\n   echo $robot[\"name\"];\n}\n\n// Get all rows in an array\n$robots = $connection-&gt;fetchAll($sql);\nforeach ($robots as $robot) {\n   echo $robot[\"name\"];\n}\n\n// Get only the first row\n$robot = $connection-&gt;fetchOne($sql);\n</pre> <p>By default these calls create arrays with both associative and numeric indexes. You can change this behavior by using <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Result::setFetchMode()</span></code>. This method receives a constant, defining which kind of index is required.</p> <table class=\"docutils\"> <colgroup> <col width=\"36%\"> <col width=\"64%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Constant</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db::FETCH_NUM</span></code></td> <td>Return an array with numeric indexes</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db::FETCH_ASSOC</span></code></td> <td>Return an array with associative indexes</td> </tr> <tr class=\"row-even\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db::FETCH_BOTH</span></code></td> <td>Return an array with both associative and numeric indexes</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db::FETCH_OBJ</span></code></td> <td>Return an object instead of an array</td> </tr> </tbody> </table> <pre class=\"highlight-php\" data-language=\"php\">$sql = \"SELECT id, name FROM robots ORDER BY name\";\n$result = $connection-&gt;query($sql);\n\n$result-&gt;setFetchMode(Phalcon\\Db::FETCH_NUM);\nwhile ($robot = $result-&gt;fetch()) {\n   echo $robot[0];\n}\n</pre> <p>The <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db::query()</span></code> returns an instance of <a class=\"reference internal\" href=\"../api/phalcon_db_result_pdo\"><em>Phalcon\\Db\\Result\\Pdo</em></a>. These objects encapsulate all the functionality related to the returned resultset i.e. traversing, seeking specific records, count etc.</p> <pre class=\"highlight-php\" data-language=\"php\">$sql = \"SELECT id, name FROM robots\";\n$result = $connection-&gt;query($sql);\n\n// Traverse the resultset\nwhile ($robot = $result-&gt;fetch()) {\n   echo $robot[\"name\"];\n}\n\n// Seek to the third row\n$result-&gt;seek(2);\n$robot = $result-&gt;fetch();\n\n// Count the resultset\necho $result-&gt;numRows();\n</pre>   <h2 id=\"binding-parameters\">Binding Parameters</h2> <p>Bound parameters is also supported in <a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a>. Although there is a minimal performance impact by using bound parameters, you are encouraged to use this methodology so as to eliminate the possibility of your code being subject to SQL injection attacks. Both string and positional placeholders are supported. Binding parameters can simply be achieved as follows:</p> <pre class=\"highlight-php\" data-language=\"php\">// Binding with numeric placeholders\n$sql    = \"SELECT * FROM robots WHERE name = ? ORDER BY name\";\n$result = $connection-&gt;query($sql, array(\"Wall-E\"));\n\n// Binding with named placeholders\n$sql     = \"INSERT INTO `robots`(name`, year) VALUES (:name, :year)\";\n$success = $connection-&gt;query($sql, array(\"name\" =&gt; \"Astro Boy\", \"year\" =&gt; 1952));\n</pre> <p>When using numeric placeholders, you will need to define them as integers i.e. 1 or 2. In this case “1” or “2” are considered strings and not numbers, so the placeholder could not be successfully replaced. With any adapter data are automatically escaped using <a class=\"reference external\" href=\"http://www.php.net/manual/en/pdo.quote.php\">PDO Quote</a>.</p> <p>This function takes into account the connection charset, so its recommended to define the correct charset in the connection parameters or in your database server configuration, as a wrong charset will produce undesired effects when storing or retrieving data.</p> <p>Also, you can pass your parameters directly to the execute/query methods. In this case bound parameters are directly passed to PDO:</p> <pre class=\"highlight-php\" data-language=\"php\">// Binding with PDO placeholders\n$sql    = \"SELECT * FROM robots WHERE name = ? ORDER BY name\";\n$result = $connection-&gt;query($sql, array(1 =&gt; \"Wall-E\"));\n</pre>   <h2 id=\"inserting-updating-deleting-rows\">Inserting/Updating/Deleting Rows</h2> <p>To insert, update or delete rows, you can use raw SQL or use the preset functions provided by the class:</p> <pre class=\"highlight-php\" data-language=\"php\">// Inserting data with a raw SQL statement\n$sql     = \"INSERT INTO `robots`(`name`, `year`) VALUES ('Astro Boy', 1952)\";\n$success = $connection-&gt;execute($sql);\n\n// With placeholders\n$sql     = \"INSERT INTO `robots`(`name`, `year`) VALUES (?, ?)\";\n$success = $connection-&gt;execute($sql, array('Astro Boy', 1952));\n\n// Generating dynamically the necessary SQL\n$success = $connection-&gt;insert(\n   \"robots\",\n   array(\"Astro Boy\", 1952),\n   array(\"name\", \"year\")\n);\n\n// Generating dynamically the necessary SQL (another syntax)\n$success = $connection-&gt;insertAsDict(\n   \"robots\",\n   array(\n      \"name\" =&gt; \"Astro Boy\",\n      \"year\" =&gt; 1952\n   )\n);\n\n// Updating data with a raw SQL statement\n$sql     = \"UPDATE `robots` SET `name` = 'Astro boy' WHERE `id` = 101\";\n$success = $connection-&gt;execute($sql);\n\n// With placeholders\n$sql     = \"UPDATE `robots` SET `name` = ? WHERE `id` = ?\";\n$success = $connection-&gt;execute($sql, array('Astro Boy', 101));\n\n// Generating dynamically the necessary SQL\n$success = $connection-&gt;update(\n   \"robots\",\n   array(\"name\"),\n   array(\"New Astro Boy\"),\n   \"id = 101\" // Warning! In this case values are not escaped\n);\n\n// Generating dynamically the necessary SQL (another syntax)\n$success = $connection-&gt;updateAsDict(\n   \"robots\",\n   array(\n      \"name\" =&gt; \"New Astro Boy\"\n   ),\n   \"id = 101\" // Warning! In this case values are not escaped\n);\n\n// With escaping conditions\n$success = $connection-&gt;update(\n   \"robots\",\n   array(\"name\"),\n   array(\"New Astro Boy\"),\n   array(\n      'conditions' =&gt; 'id = ?',\n      'bind' =&gt; array(101),\n      'bindTypes' =&gt; array(PDO::PARAM_INT) // Optional parameter\n   )\n);\n$success = $connection-&gt;updateAsDict(\n   \"robots\",\n   array(\n      \"name\" =&gt; \"New Astro Boy\"\n   ),\n   array(\n      'conditions' =&gt; 'id = ?',\n      'bind' =&gt; array(101),\n      'bindTypes' =&gt; array(PDO::PARAM_INT) // Optional parameter\n   )\n);\n\n// Deleting data with a raw SQL statement\n$sql     = \"DELETE `robots` WHERE `id` = 101\";\n$success = $connection-&gt;execute($sql);\n\n// With placeholders\n$sql     = \"DELETE `robots` WHERE `id` = ?\";\n$success = $connection-&gt;execute($sql, array(101));\n\n// Generating dynamically the necessary SQL\n$success = $connection-&gt;delete(\"robots\", \"id = ?\", array(101));\n</pre>   <h2 id=\"transactions-and-nested-transactions\">Transactions and Nested Transactions</h2> <p>Working with transactions is supported as it is with PDO. Perform data manipulation inside transactions often increase the performance on most database systems:</p> <pre class=\"highlight-php\" data-language=\"php\">try {\n\n    // Start a transaction\n    $connection-&gt;begin();\n\n    // Execute some SQL statements\n    $connection-&gt;execute(\"DELETE `robots` WHERE `id` = 101\");\n    $connection-&gt;execute(\"DELETE `robots` WHERE `id` = 102\");\n    $connection-&gt;execute(\"DELETE `robots` WHERE `id` = 103\");\n\n    // Commit if everything goes well\n    $connection-&gt;commit();\n\n} catch (Exception $e) {\n    // An exception has occurred rollback the transaction\n    $connection-&gt;rollback();\n}\n</pre> <p>In addition to standard transactions, <a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a> provides built-in support for <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Nested_transaction\">nested transactions</a> (if the database system used supports them). When you call begin() for a second time a nested transaction is created:</p> <pre class=\"highlight-php\" data-language=\"php\">try {\n\n    // Start a transaction\n    $connection-&gt;begin();\n\n    // Execute some SQL statements\n    $connection-&gt;execute(\"DELETE `robots` WHERE `id` = 101\");\n\n    try {\n\n        // Start a nested transaction\n        $connection-&gt;begin();\n\n        // Execute these SQL statements into the nested transaction\n        $connection-&gt;execute(\"DELETE `robots` WHERE `id` = 102\");\n        $connection-&gt;execute(\"DELETE `robots` WHERE `id` = 103\");\n\n        // Create a save point\n        $connection-&gt;commit();\n\n    } catch (Exception $e) {\n        // An error has occurred, release the nested transaction\n        $connection-&gt;rollback();\n    }\n\n    // Continue, executing more SQL statements\n    $connection-&gt;execute(\"DELETE `robots` WHERE `id` = 104\");\n\n    // Commit if everything goes well\n    $connection-&gt;commit();\n\n} catch (Exception $e) {\n    // An exception has occurred rollback the transaction\n    $connection-&gt;rollback();\n}\n</pre>   <h2 id=\"database-events\">Database Events</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a> is able to send events to a <a class=\"reference internal\" href=\"events\"><em>EventsManager</em></a> if it’s present. Some events when returning boolean false could stop the active operation. The following events are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"21%\"> <col width=\"58%\"> <col width=\"21%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Event Name</th> <th class=\"head\">Triggered</th> <th class=\"head\">Can stop operation?</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>afterConnect</td> <td>After a successfully connection to a database system</td> <td>No</td> </tr> <tr class=\"row-odd\">\n<td>beforeQuery</td> <td>Before send a SQL statement to the database system</td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>afterQuery</td> <td>After send a SQL statement to database system</td> <td>No</td> </tr> <tr class=\"row-odd\">\n<td>beforeDisconnect</td> <td>Before close a temporal database connection</td> <td>No</td> </tr> <tr class=\"row-even\">\n<td>beginTransaction</td> <td>Before a transaction is going to be started</td> <td>No</td> </tr> <tr class=\"row-odd\">\n<td>rollbackTransaction</td> <td>Before a transaction is rollbacked</td> <td>No</td> </tr> <tr class=\"row-even\">\n<td>commitTransaction</td> <td>Before a transaction is committed</td> <td>No</td> </tr> </tbody> </table> <p>Bind an EventsManager to a connection is simple, <a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a> will trigger the events with the type “db”:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as Connection;\n\n$eventsManager = new EventsManager();\n\n// Listen all the database events\n$eventsManager-&gt;attach('db', $dbListener);\n\n$connection = new Connection(\n    array(\n        \"host\"     =&gt; \"localhost\",\n        \"username\" =&gt; \"root\",\n        \"password\" =&gt; \"secret\",\n        \"dbname\"   =&gt; \"invo\"\n    )\n);\n\n// Assign the eventsManager to the db adapter instance\n$connection-&gt;setEventsManager($eventsManager);\n</pre> <p>Stop SQL operations are very useful if for example you want to implement some last-resource SQL injector checker:</p> <pre class=\"highlight-php\" data-language=\"php\">$eventsManager-&gt;attach('db:beforeQuery', function ($event, $connection) {\n\n    // Check for malicious words in SQL statements\n    if (preg_match('/DROP|ALTER/i', $connection-&gt;getSQLStatement())) {\n        // DROP/ALTER operations aren't allowed in the application,\n        // this must be a SQL injection!\n        return false;\n    }\n\n    // It's OK\n    return true;\n});\n</pre>   <h2 id=\"profiling-sql-statements\">Profiling SQL Statements</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a> includes a profiling component called <a class=\"reference internal\" href=\"../api/phalcon_db_profiler\"><em>Phalcon\\Db\\Profiler</em></a>, that is used to analyze the performance of database operations so as to diagnose performance problems and discover bottlenecks.</p> <p>Database profiling is really easy With <a class=\"reference internal\" href=\"../api/phalcon_db_profiler\"><em>Phalcon\\Db\\Profiler</em></a>:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Profiler as DbProfiler;\n\n$eventsManager = new EventsManager();\n\n$profiler = new DbProfiler();\n\n// Listen all the database events\n$eventsManager-&gt;attach('db', function ($event, $connection) use ($profiler) {\n    if ($event-&gt;getType() == 'beforeQuery') {\n        // Start a profile with the active connection\n        $profiler-&gt;startProfile($connection-&gt;getSQLStatement());\n    }\n    if ($event-&gt;getType() == 'afterQuery') {\n        // Stop the active profile\n        $profiler-&gt;stopProfile();\n    }\n});\n\n// Assign the events manager to the connection\n$connection-&gt;setEventsManager($eventsManager);\n\n$sql = \"SELECT buyer_name, quantity, product_name \"\n     . \"FROM buyers \"\n     . \"LEFT JOIN products ON buyers.pid = products.id\";\n\n// Execute a SQL statement\n$connection-&gt;query($sql);\n\n// Get the last profile in the profiler\n$profile = $profiler-&gt;getLastProfile();\n\necho \"SQL Statement: \", $profile-&gt;getSQLStatement(), \"\\n\";\necho \"Start Time: \", $profile-&gt;getInitialTime(), \"\\n\";\necho \"Final Time: \", $profile-&gt;getFinalTime(), \"\\n\";\necho \"Total Elapsed Time: \", $profile-&gt;getTotalElapsedSeconds(), \"\\n\";\n</pre> <p>You can also create your own profile class based on <a class=\"reference internal\" href=\"../api/phalcon_db_profiler\"><em>Phalcon\\Db\\Profiler</em></a> to record real time statistics of the statements sent to the database system:</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Profiler as Profiler;\nuse Phalcon\\Db\\Profiler\\Item as Item;\n\nclass DbProfiler extends Profiler\n{\n    /**\n     * Executed before the SQL statement will sent to the db server\n     */\n    public function beforeStartProfile(Item $profile)\n    {\n        echo $profile-&gt;getSQLStatement();\n    }\n\n    /**\n     * Executed after the SQL statement was sent to the db server\n     */\n    public function afterEndProfile(Item $profile)\n    {\n        echo $profile-&gt;getTotalElapsedSeconds();\n    }\n}\n\n// Create an Events Manager\n$eventsManager = new EventsManager();\n\n// Create a listener\n$dbProfiler = new DbProfiler();\n\n// Attach the listener listening for all database events\n$eventsManager-&gt;attach('db', $dbProfiler);\n</pre>   <h2 id=\"logging-sql-statements\">Logging SQL Statements</h2> <p>Using high-level abstraction components such as <a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a> to access a database, it is difficult to understand which statements are sent to the database system. <a class=\"reference internal\" href=\"../api/phalcon_logger\"><em>Phalcon\\Logger</em></a> interacts with <a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a>, providing logging capabilities on the database abstraction layer.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Logger;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Logger\\Adapter\\File as FileLogger;\n\n$eventsManager = new EventsManager();\n\n$logger = new FileLogger(\"app/logs/db.log\");\n\n// Listen all the database events\n$eventsManager-&gt;attach('db', function ($event, $connection) use ($logger) {\n    if ($event-&gt;getType() == 'beforeQuery') {\n        $logger-&gt;log($connection-&gt;getSQLStatement(), Logger::INFO);\n    }\n});\n\n// Assign the eventsManager to the db adapter instance\n$connection-&gt;setEventsManager($eventsManager);\n\n// Execute some SQL statement\n$connection-&gt;insert(\n    \"products\",\n    array(\"Hot pepper\", 3.50),\n    array(\"name\", \"price\")\n);\n</pre> <p>As above, the file <em>app/logs/db.log</em> will contain something like this:</p> <pre class=\"highlight-php\" data-language=\"php\">[Sun, 29 Apr 12 22:35:26 -0500][DEBUG][Resource Id #77] INSERT INTO products\n(name, price) VALUES ('Hot pepper', 3.50)\n</pre>  <h3 id=\"implementing-your-own-logger\">Implementing your own Logger</h3> <p>You can implement your own logger class for database queries, by creating a class that implements a single method called “log”. The method needs to accept a string as the first argument. You can then pass your logging object to <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db::setLogger()</span></code>, and from then on any SQL statement executed will call that method to log the results.</p>    <h2 id=\"describing-tables-views\">Describing Tables/Views</h2> <p><a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a> also provides methods to retrieve detailed information about tables and views:</p> <pre class=\"highlight-php\" data-language=\"php\">// Get tables on the test_db database\n$tables = $connection-&gt;listTables(\"test_db\");\n\n// Is there a table 'robots' in the database?\n$exists = $connection-&gt;tableExists(\"robots\");\n\n// Get name, data types and special features of 'robots' fields\n$fields = $connection-&gt;describeColumns(\"robots\");\nforeach ($fields as $field) {\n    echo \"Column Type: \", $field[\"Type\"];\n}\n\n// Get indexes on the 'robots' table\n$indexes = $connection-&gt;describeIndexes(\"robots\");\nforeach ($indexes as $index) {\n    print_r($index-&gt;getColumns());\n}\n\n// Get foreign keys on the 'robots' table\n$references = $connection-&gt;describeReferences(\"robots\");\nforeach ($references as $reference) {\n    // Print referenced columns\n    print_r($reference-&gt;getReferencedColumns());\n}\n</pre> <p>A table description is very similar to the MySQL describe command, it contains the following information:</p> <table class=\"docutils\"> <colgroup> <col width=\"12%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Index</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Field</td> <td>Field’s name</td> </tr> <tr class=\"row-odd\">\n<td>Type</td> <td>Column Type</td> </tr> <tr class=\"row-even\">\n<td>Key</td> <td>Is the column part of the primary key or an index?</td> </tr> <tr class=\"row-odd\">\n<td>Null</td> <td>Does the column allow null values?</td> </tr> </tbody> </table> <p>Methods to get information about views are also implemented for every supported database system:</p> <pre class=\"highlight-php\" data-language=\"php\">// Get views on the test_db database\n$tables = $connection-&gt;listViews(\"test_db\");\n\n// Is there a view 'robots' in the database?\n$exists = $connection-&gt;viewExists(\"robots\");\n</pre>   <h2 id=\"creating-altering-dropping-tables\">Creating/Altering/Dropping Tables</h2> <p>Different database systems (MySQL, Postgresql etc.) offer the ability to create, alter or drop tables with the use of commands such as CREATE, ALTER or DROP. The SQL syntax differs based on which database system is used. <a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a> offers a unified interface to alter tables, without the need to differentiate the SQL syntax based on the target storage system.</p>  <h3 id=\"creating-tables\">Creating Tables</h3> <p>The following example shows how to create a table:</p> <pre class=\"highlight-php\" data-language=\"php\">use \\Phalcon\\Db\\Column as Column;\n\n$connection-&gt;createTable(\n    \"robots\",\n    null,\n    array(\n       \"columns\" =&gt; array(\n            new Column(\n                \"id\",\n                array(\n                    \"type\"          =&gt; Column::TYPE_INTEGER,\n                    \"size\"          =&gt; 10,\n                    \"notNull\"       =&gt; true,\n                    \"autoIncrement\" =&gt; true,\n                    \"primary\"       =&gt; true,\n                )\n            ),\n            new Column(\n                \"name\",\n                array(\n                    \"type\"    =&gt; Column::TYPE_VARCHAR,\n                    \"size\"    =&gt; 70,\n                    \"notNull\" =&gt; true,\n                )\n            ),\n            new Column(\n                \"year\",\n                array(\n                    \"type\"    =&gt; Column::TYPE_INTEGER,\n                    \"size\"    =&gt; 11,\n                    \"notNull\" =&gt; true,\n                )\n            )\n        )\n    )\n);\n</pre> <p><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db::createTable()</span></code> accepts an associative array describing the table. Columns are defined with the class <a class=\"reference internal\" href=\"../api/phalcon_db_column\"><em>Phalcon\\Db\\Column</em></a>. The table below shows the options available to define a column:</p> <table class=\"docutils\"> <colgroup> <col width=\"10%\"> <col width=\"84%\"> <col width=\"6%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option</th> <th class=\"head\">Description</th> <th class=\"head\">Optional</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>“type”</td> <td>Column type. Must be a <a class=\"reference internal\" href=\"../api/phalcon_db_column\"><em>Phalcon\\Db\\Column</em></a> constant (see below for a list)</td> <td>No</td> </tr> <tr class=\"row-odd\">\n<td>“primary”</td> <td>True if the column is part of the table’s primary key</td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>“size”</td> <td>Some type of columns like VARCHAR or INTEGER may have a specific size</td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>“scale”</td> <td>DECIMAL or NUMBER columns may be have a scale to specify how many decimals should be stored</td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>“unsigned”</td> <td>INTEGER columns may be signed or unsigned. This option does not apply to other types of columns</td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>“notNull”</td> <td>Column can store null values?</td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>“default”</td> <td>Default value (when used with <code class=\"code docutils literal\"><span class=\"pre\">\"notNull\"</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">true</span></code>).</td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>“autoIncrement”</td> <td>With this attribute column will filled automatically with an auto-increment integer. Only one column in the table can have this attribute.</td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>“bind”</td> <td>One of the BIND_TYPE_* constants telling how the column must be binded before save it</td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>“first”</td> <td>Column must be placed at first position in the column order</td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>“after”</td> <td>Column must be placed after indicated column</td> <td>Yes</td> </tr> </tbody> </table> <p><a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a> supports the following database column types:</p> <ul class=\"simple\"> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_INTEGER</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_DATE</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_VARCHAR</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_DECIMAL</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_DATETIME</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_CHAR</span></code></li> <li><code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db\\Column::TYPE_TEXT</span></code></li> </ul> <p>The associative array passed in <code class=\"code docutils literal\"><span class=\"pre\">Phalcon\\Db::createTable()</span></code> can have the possible keys:</p> <table class=\"docutils\"> <colgroup> <col width=\"9%\"> <col width=\"85%\"> <col width=\"6%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Index</th> <th class=\"head\">Description</th> <th class=\"head\">Optional</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>“columns”</td> <td>An array with a set of table columns defined with <a class=\"reference internal\" href=\"../api/phalcon_db_column\"><em>Phalcon\\Db\\Column</em></a>\n</td> <td>No</td> </tr> <tr class=\"row-odd\">\n<td>“indexes”</td> <td>An array with a set of table indexes defined with <a class=\"reference internal\" href=\"../api/phalcon_db_index\"><em>Phalcon\\Db\\Index</em></a>\n</td> <td>Yes</td> </tr> <tr class=\"row-even\">\n<td>“references”</td> <td>An array with a set of table references (foreign keys) defined with <a class=\"reference internal\" href=\"../api/phalcon_db_reference\"><em>Phalcon\\Db\\Reference</em></a>\n</td> <td>Yes</td> </tr> <tr class=\"row-odd\">\n<td>“options”</td> <td>An array with a set of table creation options. These options often relate to the database system in which the migration was generated.</td> <td>Yes</td> </tr> </tbody> </table>   <h3 id=\"altering-tables\">Altering Tables</h3> <p>As your application grows, you might need to alter your database, as part of a refactoring or adding new features. Not all database systems allow to modify existing columns or add columns between two existing ones. <a class=\"reference internal\" href=\"../api/phalcon_db\"><em>Phalcon\\Db</em></a> is limited by these constraints.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Column as Column;\n\n// Adding a new column\n$connection-&gt;addColumn(\n    \"robots\",\n    null,\n    new Column(\n        \"robot_type\",\n        array(\n            \"type\"    =&gt; Column::TYPE_VARCHAR,\n            \"size\"    =&gt; 32,\n            \"notNull\" =&gt; true,\n            \"after\"   =&gt; \"name\"\n        )\n    )\n);\n\n// Modifying an existing column\n$connection-&gt;modifyColumn(\n    \"robots\",\n    null,\n    new Column(\n        \"name\",\n        array(\n            \"type\"    =&gt; Column::TYPE_VARCHAR,\n            \"size\"    =&gt; 40,\n            \"notNull\" =&gt; true\n        )\n    )\n);\n\n// Deleting the column \"name\"\n$connection-&gt;dropColumn(\n    \"robots\",\n    null,\n    \"name\"\n);\n</pre>   <h3 id=\"dropping-tables\">Dropping Tables</h3> <p>Examples on dropping tables:</p> <pre class=\"highlight-php\" data-language=\"php\">// Drop table robot from active database\n$connection-&gt;dropTable(\"robots\");\n\n// Drop table robot from database \"machines\"\n$connection-&gt;dropTable(\"robots\", \"machines\");\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/db.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/db.html</a>\n  </p>\n</div>\n","api/phalcon_application":"<h1 id=\"abstract-class-phalcon-application\">Abstract class <strong>Phalcon\\Application</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_di_injectable\"><em>Phalcon\\Di\\Injectable</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/application.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Base class for Phalcon\\Cli\\Console and Phalcon\\Mvc\\Application.</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector])</h3> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager)</h3> <p>Sets the events manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> ()</h3> <p>Returns the internal event manager</p> <h3 id=\"registermodules\" class=\"method-signature\">public <strong>registerModules</strong> (<em>array</em> $modules, [<em>mixed</em> $merge])</h3> <p>Register an array of modules present in the application</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;registerModules(\n    [\n            'frontend' =&gt; [\n                    'className' =&gt; 'Multiple\\Frontend\\Module',\n                    'path'      =&gt; '../apps/frontend/Module.php'\n            ],\n            'backend' =&gt; [\n                    'className' =&gt; 'Multiple\\Backend\\Module',\n                    'path'      =&gt; '../apps/backend/Module.php'\n            ]\n    ]\n );\n</pre> <h3 id=\"getmodules\" class=\"method-signature\">public <strong>getModules</strong> ()</h3> <p>Return the modules registered in the application</p> <h3 id=\"getmodule\" class=\"method-signature\">public <strong>getModule</strong> (<em>mixed</em> $name)</h3> <p>Gets the module definition registered in the application via module name</p> <h3 id=\"setdefaultmodule\" class=\"method-signature\">public <strong>setDefaultModule</strong> (<em>mixed</em> $defaultModule)</h3> <p>Sets the module name to be used if the router doesn’t return a valid module</p> <h3 id=\"getdefaultmodule\" class=\"method-signature\">public <strong>getDefaultModule</strong> ()</h3> <p>Returns the default module name</p> <h3 id=\"handle\" class=\"method-signature\">abstract public <strong>handle</strong> ()</h3> <p>Handles a request</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $propertyName) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Magic method __get</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Application.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Application.html</a>\n  </p>\n</div>\n","api/phalcon_assets_filters_cssmin":"<h1 id=\"class-phalcon-assets-filters-cssmin\">Class <strong>Phalcon\\Assets\\Filters\\Cssmin</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_assets_filterinterface\"><em>Phalcon\\Assets\\FilterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/filters/cssmin.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Minify the css - removes comments removes newlines and line feeds keeping removes last semicolon from last property</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"filter\" class=\"method-signature\">public <strong>filter</strong> (<em>mixed</em> $content)</h3> <p>Filters the content using CSSMIN</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_Cssmin.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_Cssmin.html</a>\n  </p>\n</div>\n","api/phalcon_assets_filters_jsmin":"<h1 id=\"class-phalcon-assets-filters-jsmin\">Class <strong>Phalcon\\Assets\\Filters\\Jsmin</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_assets_filterinterface\"><em>Phalcon\\Assets\\FilterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/filters/jsmin.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Deletes the characters which are insignificant to JavaScript. Comments will be removed. Tabs will be replaced with spaces. Carriage returns will be replaced with linefeeds. Most spaces and linefeeds will be removed.</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"filter\" class=\"method-signature\">public <strong>filter</strong> (<em>mixed</em> $content)</h3> <p>Filters the content using JSMIN</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_Jsmin.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_Jsmin.html</a>\n  </p>\n</div>\n","api/phalcon_assets_collection":"<h1 id=\"class-phalcon-assets-collection\">Class <strong>Phalcon\\Assets\\Collection</strong>\n</h1> <p><em>implements</em> Countable, Iterator, Traversable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/collection.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Represents a collection of resources</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getprefix\" class=\"method-signature\">public <strong>getPrefix</strong> ()</h3> <p>...</p> <h3 id=\"getlocal\" class=\"method-signature\">public <strong>getLocal</strong> ()</h3> <p>...</p> <h3 id=\"getresources\" class=\"method-signature\">public <strong>getResources</strong> ()</h3> <p>...</p> <h3 id=\"getcodes\" class=\"method-signature\">public <strong>getCodes</strong> ()</h3> <p>...</p> <h3 id=\"getposition\" class=\"method-signature\">public <strong>getPosition</strong> ()</h3> <p>...</p> <h3 id=\"getfilters\" class=\"method-signature\">public <strong>getFilters</strong> ()</h3> <p>...</p> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> ()</h3> <p>...</p> <h3 id=\"getjoin\" class=\"method-signature\">public <strong>getJoin</strong> ()</h3> <p>...</p> <h3 id=\"gettargeturi\" class=\"method-signature\">public <strong>getTargetUri</strong> ()</h3> <p>...</p> <h3 id=\"gettargetpath\" class=\"method-signature\">public <strong>getTargetPath</strong> ()</h3> <p>...</p> <h3 id=\"gettargetlocal\" class=\"method-signature\">public <strong>getTargetLocal</strong> ()</h3> <p>...</p> <h3 id=\"getsourcepath\" class=\"method-signature\">public <strong>getSourcePath</strong> ()</h3> <p>...</p> <h3 id=\"add\" class=\"method-signature\">public <strong>add</strong> (<a class=\"reference internal\" href=\"phalcon_assets_resource\"><em>Phalcon\\Assets\\Resource</em></a> $resource)</h3> <p>Adds a resource to the collection</p> <h3 id=\"addinline\" class=\"method-signature\">public <strong>addInline</strong> (<a class=\"reference internal\" href=\"phalcon_assets_inline\"><em>Phalcon\\Assets\\Inline</em></a> $code)</h3> <p>Adds an inline code to the collection</p> <h3 id=\"addcss\" class=\"method-signature\">public <strong>addCss</strong> (<em>mixed</em> $path, [<em>mixed</em> $local], [<em>mixed</em> $filter], [<em>mixed</em> $attributes])</h3> <p>Adds a CSS resource to the collection</p> <h3 id=\"addinlinecss\" class=\"method-signature\">public <strong>addInlineCss</strong> (<em>mixed</em> $content, [<em>mixed</em> $filter], [<em>mixed</em> $attributes])</h3> <p>Adds an inline CSS to the collection</p> <h3 id=\"addjs\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_assets_collection\"><em>Phalcon\\Assets\\Collection</em></a> <strong>addJs</strong> (<em>string</em> $path, [<em>boolean</em> $local], [<em>boolean</em> $filter], [<em>array</em> $attributes])</h3> <p>Adds a javascript resource to the collection</p> <h3 id=\"addinlinejs\" class=\"method-signature\">public <strong>addInlineJs</strong> (<em>mixed</em> $content, [<em>mixed</em> $filter], [<em>mixed</em> $attributes])</h3> <p>Adds an inline javascript to the collection</p> <h3 id=\"count\" class=\"method-signature\">public <strong>count</strong> ()</h3> <p>Returns the number of elements in the form</p> <h3 id=\"rewind\" class=\"method-signature\">public <strong>rewind</strong> ()</h3> <p>Rewinds the internal iterator</p> <h3 id=\"current\" class=\"method-signature\">public <strong>current</strong> ()</h3> <p>Returns the current resource in the iterator</p> <h3 id=\"key\" class=\"method-signature\">public <em>int</em> <strong>key</strong> ()</h3> <p>Returns the current position/key in the iterator</p> <h3 id=\"next\" class=\"method-signature\">public <strong>next</strong> ()</h3> <p>Moves the internal iteration pointer to the next position</p> <h3 id=\"valid\" class=\"method-signature\">public <strong>valid</strong> ()</h3> <p>Check if the current element in the iterator is valid</p> <h3 id=\"settargetpath\" class=\"method-signature\">public <strong>setTargetPath</strong> (<em>mixed</em> $targetPath)</h3> <p>Sets the target path of the file for the filtered/join output</p> <h3 id=\"setsourcepath\" class=\"method-signature\">public <strong>setSourcePath</strong> (<em>mixed</em> $sourcePath)</h3> <p>Sets a base source path for all the resources in this collection</p> <h3 id=\"settargeturi\" class=\"method-signature\">public <strong>setTargetUri</strong> (<em>mixed</em> $targetUri)</h3> <p>Sets a target uri for the generated HTML</p> <h3 id=\"setprefix\" class=\"method-signature\">public <strong>setPrefix</strong> (<em>mixed</em> $prefix)</h3> <p>Sets a common prefix for all the resources</p> <h3 id=\"setlocal\" class=\"method-signature\">public <strong>setLocal</strong> (<em>mixed</em> $local)</h3> <p>Sets if the collection uses local resources by default</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes)</h3> <p>Sets extra HTML attributes</p> <h3 id=\"setfilters\" class=\"method-signature\">public <strong>setFilters</strong> (<em>array</em> $filters)</h3> <p>Sets an array of filters in the collection</p> <h3 id=\"settargetlocal\" class=\"method-signature\">public <strong>setTargetLocal</strong> (<em>mixed</em> $targetLocal)</h3> <p>Sets the target local</p> <h3 id=\"join\" class=\"method-signature\">public <strong>join</strong> (<em>mixed</em> $join)</h3> <p>Sets if all filtered resources in the collection must be joined in a single result file</p> <h3 id=\"getrealtargetpath\" class=\"method-signature\">public <strong>getRealTargetPath</strong> (<em>mixed</em> $basePath)</h3> <p>Returns the complete location where the joined/filtered collection must be written</p> <h3 id=\"addfilter\" class=\"method-signature\">public <strong>addFilter</strong> (<a class=\"reference internal\" href=\"phalcon_assets_filterinterface\"><em>Phalcon\\Assets\\FilterInterface</em></a> $filter)</h3> <p>Adds a filter to the collection</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Collection.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Collection.html</a>\n  </p>\n</div>\n","api/phalcon_assets_filters_none":"<h1 id=\"class-phalcon-assets-filters-none\">Class <strong>Phalcon\\Assets\\Filters\\None</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_assets_filterinterface\"><em>Phalcon\\Assets\\FilterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/filters/none.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Returns the content without make any modification to the original source</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"filter\" class=\"method-signature\">public <strong>filter</strong> (<em>mixed</em> $content)</h3> <p>Returns the content without be touched</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_None.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Filters_None.html</a>\n  </p>\n</div>\n","api/phalcon_assets_inline_js":"<h1 id=\"class-phalcon-assets-inline-js\">Class <strong>Phalcon\\Assets\\Inline\\Js</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_assets_inline\"><em>Phalcon\\Assets\\Inline</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/inline/js.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Represents an inline Javascript</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $content, [<em>boolean</em> $filter], [<em>array</em> $attributes])</h3> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> () <small>inherited from Phalcon\\Assets\\Inline</small>\n</h3> <p>...</p> <h3 id=\"getcontent\" class=\"method-signature\">public <strong>getContent</strong> () <small>inherited from Phalcon\\Assets\\Inline</small>\n</h3> <p>...</p> <h3 id=\"getfilter\" class=\"method-signature\">public <strong>getFilter</strong> () <small>inherited from Phalcon\\Assets\\Inline</small>\n</h3> <p>...</p> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> () <small>inherited from Phalcon\\Assets\\Inline</small>\n</h3> <p>...</p> <h3 id=\"settype\" class=\"method-signature\">public <strong>setType</strong> (<em>mixed</em> $type) <small>inherited from Phalcon\\Assets\\Inline</small>\n</h3> <p>Sets the inline’s type</p> <h3 id=\"setfilter\" class=\"method-signature\">public <strong>setFilter</strong> (<em>mixed</em> $filter) <small>inherited from Phalcon\\Assets\\Inline</small>\n</h3> <p>Sets if the resource must be filtered or not</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes) <small>inherited from Phalcon\\Assets\\Inline</small>\n</h3> <p>Sets extra HTML attributes</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Inline_Js.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Inline_Js.html</a>\n  </p>\n</div>\n","api/phalcon_assets_inline":"<h1 id=\"class-phalcon-assets-inline\">Class <strong>Phalcon\\Assets\\Inline</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/inline.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Represents an inline asset</p> <pre class=\"highlight-php\" data-language=\"php\">$inline = new \\Phalcon\\Assets\\Inline('js', 'alert(\"hello world\");');\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> ()</h3> <p>...</p> <h3 id=\"getcontent\" class=\"method-signature\">public <strong>getContent</strong> ()</h3> <p>...</p> <h3 id=\"getfilter\" class=\"method-signature\">public <strong>getFilter</strong> ()</h3> <p>...</p> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> ()</h3> <p>...</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $type, <em>string</em> $content, [<em>boolean</em> $filter], [<em>array</em> $attributes])</h3> <p>Phalcon\\Assets\\Inline constructor</p> <h3 id=\"settype\" class=\"method-signature\">public <strong>setType</strong> (<em>mixed</em> $type)</h3> <p>Sets the inline’s type</p> <h3 id=\"setfilter\" class=\"method-signature\">public <strong>setFilter</strong> (<em>mixed</em> $filter)</h3> <p>Sets if the resource must be filtered or not</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes)</h3> <p>Sets extra HTML attributes</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Inline.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Inline.html</a>\n  </p>\n</div>\n","api/phalcon_assets_manager":"<h1 id=\"class-phalcon-assets-manager\">Class <strong>Phalcon\\Assets\\Manager</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/manager.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Manages collections of CSS/Javascript assets</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>array</em> $options)</h3> <p>Sets the manager options</p> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> ()</h3> <p>Returns the manager options</p> <h3 id=\"useimplicitoutput\" class=\"method-signature\">public <strong>useImplicitOutput</strong> (<em>mixed</em> $implicitOutput)</h3> <p>Sets if the HTML generated must be directly printed or returned</p> <h3 id=\"addcss\" class=\"method-signature\">public <strong>addCss</strong> (<em>mixed</em> $path, [<em>mixed</em> $local], [<em>mixed</em> $filter], [<em>mixed</em> $attributes])</h3> <p>Adds a Css resource to the ‘css’ collection</p> <pre class=\"highlight-php\" data-language=\"php\">$assets-&gt;addCss('css/bootstrap.css');\n$assets-&gt;addCss('http://bootstrap.my-cdn.com/style.css', false);\n</pre> <h3 id=\"addinlinecss\" class=\"method-signature\">public <strong>addInlineCss</strong> (<em>mixed</em> $content, [<em>mixed</em> $filter], [<em>mixed</em> $attributes])</h3> <p>Adds an inline Css to the ‘css’ collection</p> <h3 id=\"addjs\" class=\"method-signature\">public <strong>addJs</strong> (<em>mixed</em> $path, [<em>mixed</em> $local], [<em>mixed</em> $filter], [<em>mixed</em> $attributes])</h3> <p>Adds a javascript resource to the ‘js’ collection</p> <pre class=\"highlight-php\" data-language=\"php\">$assets-&gt;addJs('scripts/jquery.js');\n$assets-&gt;addJs('http://jquery.my-cdn.com/jquery.js', false);\n</pre> <h3 id=\"addinlinejs\" class=\"method-signature\">public <strong>addInlineJs</strong> (<em>mixed</em> $content, [<em>mixed</em> $filter], [<em>mixed</em> $attributes])</h3> <p>Adds an inline javascript to the ‘js’ collection</p> <h3 id=\"addresourcebytype\" class=\"method-signature\">public <strong>addResourceByType</strong> (<em>mixed</em> $type, <a class=\"reference internal\" href=\"phalcon_assets_resource\"><em>Phalcon\\Assets\\Resource</em></a> $resource)</h3> <p>Adds a resource by its type</p> <pre class=\"highlight-php\" data-language=\"php\">$assets-&gt;addResourceByType('css', new \\Phalcon\\Assets\\Resource\\Css('css/style.css'));\n</pre> <h3 id=\"addinlinecodebytype\" class=\"method-signature\">public <strong>addInlineCodeByType</strong> (<em>mixed</em> $type, <a class=\"reference internal\" href=\"phalcon_assets_inline\"><em>Phalcon\\Assets\\Inline</em></a> $code)</h3> <p>Adds an inline code by its type</p> <h3 id=\"addresource\" class=\"method-signature\">public <strong>addResource</strong> (<a class=\"reference internal\" href=\"phalcon_assets_resource\"><em>Phalcon\\Assets\\Resource</em></a> $resource)</h3> <p>Adds a raw resource to the manager</p> <pre class=\"highlight-php\" data-language=\"php\">$assets-&gt;addResource(new Phalcon\\Assets\\Resource('css', 'css/style.css'));\n</pre> <h3 id=\"addinlinecode\" class=\"method-signature\">public <strong>addInlineCode</strong> (<a class=\"reference internal\" href=\"phalcon_assets_inline\"><em>Phalcon\\Assets\\Inline</em></a> $code)</h3> <p>Adds a raw inline code to the manager</p> <h3 id=\"set\" class=\"method-signature\">public <strong>set</strong> (<em>mixed</em> $id, <a class=\"reference internal\" href=\"phalcon_assets_collection\"><em>Phalcon\\Assets\\Collection</em></a> $collection)</h3> <p>Sets a collection in the Assets Manager</p> <pre class=\"highlight-php\" data-language=\"php\">$assets-&gt;set('js', $collection);\n</pre> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $id)</h3> <p>Returns a collection by its id</p> <pre class=\"highlight-php\" data-language=\"php\">$scripts = $assets-&gt;get('js');\n</pre> <h3 id=\"getcss\" class=\"method-signature\">public <strong>getCss</strong> ()</h3> <p>Returns the CSS collection of assets</p> <h3 id=\"getjs\" class=\"method-signature\">public <strong>getJs</strong> ()</h3> <p>Returns the CSS collection of assets</p> <h3 id=\"collection\" class=\"method-signature\">public <strong>collection</strong> (<em>mixed</em> $name)</h3> <p>Creates/Returns a collection of resources</p> <h3 id=\"output\" class=\"method-signature\">public <strong>output</strong> (<a class=\"reference internal\" href=\"phalcon_assets_collection\"><em>Phalcon\\Assets\\Collection</em></a> $collection, <em>callback</em> $callback, <em>string</em> $type)</h3> <p>Traverses a collection calling the callback to generate its HTML</p> <h3 id=\"outputinline\" class=\"method-signature\">public <strong>outputInline</strong> (<a class=\"reference internal\" href=\"phalcon_assets_collection\"><em>Phalcon\\Assets\\Collection</em></a> $collection, <em>string</em> $type)</h3> <p>Traverses a collection and generate its HTML</p> <h3 id=\"outputcss\" class=\"method-signature\">public <strong>outputCss</strong> ([<em>string</em> $collectionName])</h3> <p>Prints the HTML for CSS resources</p> <h3 id=\"outputinlinecss\" class=\"method-signature\">public <strong>outputInlineCss</strong> ([<em>string</em> $collectionName])</h3> <p>Prints the HTML for inline CSS</p> <h3 id=\"outputjs\" class=\"method-signature\">public <strong>outputJs</strong> ([<em>string</em> $collectionName])</h3> <p>Prints the HTML for JS resources</p> <h3 id=\"outputinlinejs\" class=\"method-signature\">public <strong>outputInlineJs</strong> ([<em>string</em> $collectionName])</h3> <p>Prints the HTML for inline JS</p> <h3 id=\"getcollections\" class=\"method-signature\">public <strong>getCollections</strong> ()</h3> <p>Returns existing collections in the manager</p> <h3 id=\"exists\" class=\"method-signature\">public <strong>exists</strong> (<em>mixed</em> $id)</h3> <p>Returns true or false if collection exists</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Manager.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Manager.html</a>\n  </p>\n</div>\n","api/phalcon_assets_inline_css":"<h1 id=\"class-phalcon-assets-inline-css\">Class <strong>Phalcon\\Assets\\Inline\\Css</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_assets_inline\"><em>Phalcon\\Assets\\Inline</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/inline/css.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Represents an inlined CSS</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $content, [<em>boolean</em> $filter], [<em>array</em> $attributes])</h3> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> () <small>inherited from Phalcon\\Assets\\Inline</small>\n</h3> <p>...</p> <h3 id=\"getcontent\" class=\"method-signature\">public <strong>getContent</strong> () <small>inherited from Phalcon\\Assets\\Inline</small>\n</h3> <p>...</p> <h3 id=\"getfilter\" class=\"method-signature\">public <strong>getFilter</strong> () <small>inherited from Phalcon\\Assets\\Inline</small>\n</h3> <p>...</p> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> () <small>inherited from Phalcon\\Assets\\Inline</small>\n</h3> <p>...</p> <h3 id=\"settype\" class=\"method-signature\">public <strong>setType</strong> (<em>mixed</em> $type) <small>inherited from Phalcon\\Assets\\Inline</small>\n</h3> <p>Sets the inline’s type</p> <h3 id=\"setfilter\" class=\"method-signature\">public <strong>setFilter</strong> (<em>mixed</em> $filter) <small>inherited from Phalcon\\Assets\\Inline</small>\n</h3> <p>Sets if the resource must be filtered or not</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes) <small>inherited from Phalcon\\Assets\\Inline</small>\n</h3> <p>Sets extra HTML attributes</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Inline_Css.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Inline_Css.html</a>\n  </p>\n</div>\n","api/phalcon_assets_resource":"<h1 id=\"class-phalcon-assets-resource\">Class <strong>Phalcon\\Assets\\Resource</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/resource.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Represents an asset resource</p> <pre class=\"highlight-php\" data-language=\"php\">$resource = new \\Phalcon\\Assets\\Resource('js', 'javascripts/jquery.js');\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> ()</h3> <h3 id=\"getpath\" class=\"method-signature\">public <strong>getPath</strong> ()</h3> <h3 id=\"getlocal\" class=\"method-signature\">public <strong>getLocal</strong> ()</h3> <h3 id=\"getfilter\" class=\"method-signature\">public <strong>getFilter</strong> ()</h3> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> ()</h3> <h3 id=\"getsourcepath\" class=\"method-signature\">public <strong>getSourcePath</strong> ()</h3> <p>...</p> <h3 id=\"gettargetpath\" class=\"method-signature\">public <strong>getTargetPath</strong> ()</h3> <p>...</p> <h3 id=\"gettargeturi\" class=\"method-signature\">public <strong>getTargetUri</strong> ()</h3> <p>...</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $type, <em>string</em> $path, [<em>boolean</em> $local], [<em>boolean</em> $filter], [<em>array</em> $attributes])</h3> <p>Phalcon\\Assets\\Resource constructor</p> <h3 id=\"settype\" class=\"method-signature\">public <strong>setType</strong> (<em>mixed</em> $type)</h3> <p>Sets the resource’s type</p> <h3 id=\"setpath\" class=\"method-signature\">public <strong>setPath</strong> (<em>mixed</em> $path)</h3> <p>Sets the resource’s path</p> <h3 id=\"setlocal\" class=\"method-signature\">public <strong>setLocal</strong> (<em>mixed</em> $local)</h3> <p>Sets if the resource is local or external</p> <h3 id=\"setfilter\" class=\"method-signature\">public <strong>setFilter</strong> (<em>mixed</em> $filter)</h3> <p>Sets if the resource must be filtered or not</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes)</h3> <p>Sets extra HTML attributes</p> <h3 id=\"settargeturi\" class=\"method-signature\">public <strong>setTargetUri</strong> (<em>mixed</em> $targetUri)</h3> <p>Sets a target uri for the generated HTML</p> <h3 id=\"setsourcepath\" class=\"method-signature\">public <strong>setSourcePath</strong> (<em>mixed</em> $sourcePath)</h3> <p>Sets the resource’s source path</p> <h3 id=\"settargetpath\" class=\"method-signature\">public <strong>setTargetPath</strong> (<em>mixed</em> $targetPath)</h3> <p>Sets the resource’s target path</p> <h3 id=\"getcontent\" class=\"method-signature\">public <strong>getContent</strong> ([<em>mixed</em> $basePath])</h3> <p>Returns the content of the resource as an string Optionally a base path where the resource is located can be set</p> <h3 id=\"getrealtargeturi\" class=\"method-signature\">public <strong>getRealTargetUri</strong> ()</h3> <p>Returns the real target uri for the generated HTML</p> <h3 id=\"getrealsourcepath\" class=\"method-signature\">public <strong>getRealSourcePath</strong> ([<em>mixed</em> $basePath])</h3> <p>Returns the complete location where the resource is located</p> <h3 id=\"getrealtargetpath\" class=\"method-signature\">public <strong>getRealTargetPath</strong> ([<em>mixed</em> $basePath])</h3> <p>Returns the complete location where the resource must be written</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Resource.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Resource.html</a>\n  </p>\n</div>\n","api/phalcon_assets_resource_css":"<h1 id=\"class-phalcon-assets-resource-css\">Class <strong>Phalcon\\Assets\\Resource\\Css</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_assets_resource\"><em>Phalcon\\Assets\\Resource</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/resource/css.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Represents CSS resources</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $path, [<em>boolean</em> $local], [<em>boolean</em> $filter], [<em>array</em> $attributes])</h3> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <h3 id=\"getpath\" class=\"method-signature\">public <strong>getPath</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <h3 id=\"getlocal\" class=\"method-signature\">public <strong>getLocal</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <h3 id=\"getfilter\" class=\"method-signature\">public <strong>getFilter</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <h3 id=\"getsourcepath\" class=\"method-signature\">public <strong>getSourcePath</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>...</p> <h3 id=\"gettargetpath\" class=\"method-signature\">public <strong>getTargetPath</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>...</p> <h3 id=\"gettargeturi\" class=\"method-signature\">public <strong>getTargetUri</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>...</p> <h3 id=\"settype\" class=\"method-signature\">public <strong>setType</strong> (<em>mixed</em> $type) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Sets the resource’s type</p> <h3 id=\"setpath\" class=\"method-signature\">public <strong>setPath</strong> (<em>mixed</em> $path) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Sets the resource’s path</p> <h3 id=\"setlocal\" class=\"method-signature\">public <strong>setLocal</strong> (<em>mixed</em> $local) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Sets if the resource is local or external</p> <h3 id=\"setfilter\" class=\"method-signature\">public <strong>setFilter</strong> (<em>mixed</em> $filter) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Sets if the resource must be filtered or not</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Sets extra HTML attributes</p> <h3 id=\"settargeturi\" class=\"method-signature\">public <strong>setTargetUri</strong> (<em>mixed</em> $targetUri) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Sets a target uri for the generated HTML</p> <h3 id=\"setsourcepath\" class=\"method-signature\">public <strong>setSourcePath</strong> (<em>mixed</em> $sourcePath) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Sets the resource’s source path</p> <h3 id=\"settargetpath\" class=\"method-signature\">public <strong>setTargetPath</strong> (<em>mixed</em> $targetPath) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Sets the resource’s target path</p> <h3 id=\"getcontent\" class=\"method-signature\">public <strong>getContent</strong> ([<em>mixed</em> $basePath]) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Returns the content of the resource as an string Optionally a base path where the resource is located can be set</p> <h3 id=\"getrealtargeturi\" class=\"method-signature\">public <strong>getRealTargetUri</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Returns the real target uri for the generated HTML</p> <h3 id=\"getrealsourcepath\" class=\"method-signature\">public <strong>getRealSourcePath</strong> ([<em>mixed</em> $basePath]) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Returns the complete location where the resource is located</p> <h3 id=\"getrealtargetpath\" class=\"method-signature\">public <strong>getRealTargetPath</strong> ([<em>mixed</em> $basePath]) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Returns the complete location where the resource must be written</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Resource_Css.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Resource_Css.html</a>\n  </p>\n</div>\n","api/phalcon_cache_backend":"<h1 id=\"abstract-class-phalcon-cache-backend\">Abstract class <strong>Phalcon\\Cache\\Backend</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class implements common functionality for backend adapters. A backend cache adapter may extend this class</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getfrontend\" class=\"method-signature\">public <strong>getFrontend</strong> ()</h3> <p>...</p> <h3 id=\"setfrontend\" class=\"method-signature\">public <strong>setFrontend</strong> (<em>mixed</em> $frontend)</h3> <p>...</p> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> ()</h3> <p>...</p> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>mixed</em> $options)</h3> <p>...</p> <h3 id=\"getlastkey\" class=\"method-signature\">public <strong>getLastKey</strong> ()</h3> <p>...</p> <h3 id=\"setlastkey\" class=\"method-signature\">public <strong>setLastKey</strong> (<em>mixed</em> $lastKey)</h3> <p>...</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<a class=\"reference internal\" href=\"phalcon_cache_frontendinterface\"><em>Phalcon\\Cache\\FrontendInterface</em></a> $frontend, [<em>array</em> $options])</h3> <p>Phalcon\\Cache\\Backend constructor</p> <h3 id=\"start\" class=\"method-signature\">public <em>mixed</em> <strong>start</strong> (<em>int|string</em> $keyName, [<em>int</em> $lifetime])</h3> <p>Starts a cache. The keyname allows to identify the created fragment</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ([<em>mixed</em> $stopBuffer])</h3> <p>Stops the frontend without store any cached content</p> <h3 id=\"isfresh\" class=\"method-signature\">public <strong>isFresh</strong> ()</h3> <p>Checks whether the last cache is fresh or cached</p> <h3 id=\"isstarted\" class=\"method-signature\">public <strong>isStarted</strong> ()</h3> <p>Checks whether the cache has starting buffering or not</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <em>int</em> <strong>getLifetime</strong> ()</h3> <p>Gets the last lifetime set</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend.html</a>\n  </p>\n</div>\n","api/phalcon_assets_resource_js":"<h1 id=\"class-phalcon-assets-resource-js\">Class <strong>Phalcon\\Assets\\Resource\\Js</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_assets_resource\"><em>Phalcon\\Assets\\Resource</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/resource/js.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Represents Javascript resources</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $path, [<em>boolean</em> $local], [<em>boolean</em> $filter], [<em>array</em> $attributes])</h3> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <h3 id=\"getpath\" class=\"method-signature\">public <strong>getPath</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <h3 id=\"getlocal\" class=\"method-signature\">public <strong>getLocal</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <h3 id=\"getfilter\" class=\"method-signature\">public <strong>getFilter</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <h3 id=\"getsourcepath\" class=\"method-signature\">public <strong>getSourcePath</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>...</p> <h3 id=\"gettargetpath\" class=\"method-signature\">public <strong>getTargetPath</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>...</p> <h3 id=\"gettargeturi\" class=\"method-signature\">public <strong>getTargetUri</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>...</p> <h3 id=\"settype\" class=\"method-signature\">public <strong>setType</strong> (<em>mixed</em> $type) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Sets the resource’s type</p> <h3 id=\"setpath\" class=\"method-signature\">public <strong>setPath</strong> (<em>mixed</em> $path) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Sets the resource’s path</p> <h3 id=\"setlocal\" class=\"method-signature\">public <strong>setLocal</strong> (<em>mixed</em> $local) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Sets if the resource is local or external</p> <h3 id=\"setfilter\" class=\"method-signature\">public <strong>setFilter</strong> (<em>mixed</em> $filter) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Sets if the resource must be filtered or not</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Sets extra HTML attributes</p> <h3 id=\"settargeturi\" class=\"method-signature\">public <strong>setTargetUri</strong> (<em>mixed</em> $targetUri) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Sets a target uri for the generated HTML</p> <h3 id=\"setsourcepath\" class=\"method-signature\">public <strong>setSourcePath</strong> (<em>mixed</em> $sourcePath) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Sets the resource’s source path</p> <h3 id=\"settargetpath\" class=\"method-signature\">public <strong>setTargetPath</strong> (<em>mixed</em> $targetPath) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Sets the resource’s target path</p> <h3 id=\"getcontent\" class=\"method-signature\">public <strong>getContent</strong> ([<em>mixed</em> $basePath]) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Returns the content of the resource as an string Optionally a base path where the resource is located can be set</p> <h3 id=\"getrealtargeturi\" class=\"method-signature\">public <strong>getRealTargetUri</strong> () <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Returns the real target uri for the generated HTML</p> <h3 id=\"getrealsourcepath\" class=\"method-signature\">public <strong>getRealSourcePath</strong> ([<em>mixed</em> $basePath]) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Returns the complete location where the resource is located</p> <h3 id=\"getrealtargetpath\" class=\"method-signature\">public <strong>getRealTargetPath</strong> ([<em>mixed</em> $basePath]) <small>inherited from Phalcon\\Assets\\Resource</small>\n</h3> <p>Returns the complete location where the resource must be written</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Resource_Js.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_Resource_Js.html</a>\n  </p>\n</div>\n","api/phalcon_cache_backend_memory":"<h1 id=\"class-phalcon-cache-backend-memory\">Class <strong>Phalcon\\Cache\\Backend\\Memory</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_cache_backend\"><em>Phalcon\\Cache\\Backend</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_cache_backendinterface\"><em>Phalcon\\Cache\\BackendInterface</em></a>, Serializable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend/memory.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Stores content in memory. Data is lost when the request is finished</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Cache\\Backend\\Memory;\n use Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n // Cache data\n $frontCache = new FrontData();\n\n $cache = new Memory($frontCache);\n\n // Cache arbitrary data\n $cache-&gt;save('my-data', [1, 2, 3, 4, 5]);\n\n // Get data\n $data = $cache-&gt;get('my-data');\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $keyName, [<em>mixed</em> $lifetime])</h3> <p>Returns a cached content</p> <h3 id=\"save\" class=\"method-signature\">public <strong>save</strong> ([<em>string</em> $keyName], [<em>string</em> $content], [<em>long</em> $lifetime], [<em>boolean</em> $stopBuffer])</h3> <p>Stores cached content into the backend and stops the frontend</p> <h3 id=\"delete\" class=\"method-signature\">public <em>boolean</em> <strong>delete</strong> (<em>string</em> $keyName)</h3> <p>Deletes a value from the cache by its key</p> <h3 id=\"querykeys\" class=\"method-signature\">public <em>array</em> <strong>queryKeys</strong> ([<em>string|int</em> $prefix])</h3> <p>Query the existing cached keys</p> <h3 id=\"exists\" class=\"method-signature\">public <em>boolean</em> <strong>exists</strong> ([<em>string|int</em> $keyName], [<em>long</em> $lifetime])</h3> <p>Checks if cache exists and it hasn’t expired</p> <h3 id=\"increment\" class=\"method-signature\">public <em>long</em> <strong>increment</strong> ([<em>string</em> $keyName], [<em>mixed</em> $value])</h3> <p>Increment of given $keyName by $value</p> <h3 id=\"decrement\" class=\"method-signature\">public <em>long</em> <strong>decrement</strong> ([<em>string</em> $keyName], [<em>long</em> $value])</h3> <p>Decrement of $keyName by given $value</p> <h3 id=\"flush\" class=\"method-signature\">public <strong>flush</strong> ()</h3> <p>Immediately invalidates all existing items.</p> <h3 id=\"serialize\" class=\"method-signature\">public <strong>serialize</strong> ()</h3> <p>Required for interface \\Serializable</p> <h3 id=\"unserialize\" class=\"method-signature\">public <strong>unserialize</strong> (<em>mixed</em> $data)</h3> <p>Required for interface \\Serializable</p> <h3 id=\"getfrontend\" class=\"method-signature\">public <strong>getFrontend</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setfrontend\" class=\"method-signature\">public <strong>setFrontend</strong> (<em>mixed</em> $frontend) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>mixed</em> $options) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"getlastkey\" class=\"method-signature\">public <strong>getLastKey</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setlastkey\" class=\"method-signature\">public <strong>setLastKey</strong> (<em>mixed</em> $lastKey) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<a class=\"reference internal\" href=\"phalcon_cache_frontendinterface\"><em>Phalcon\\Cache\\FrontendInterface</em></a> $frontend, [<em>array</em> $options]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Phalcon\\Cache\\Backend constructor</p> <h3 id=\"start\" class=\"method-signature\">public <em>mixed</em> <strong>start</strong> (<em>int|string</em> $keyName, [<em>int</em> $lifetime]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Starts a cache. The keyname allows to identify the created fragment</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ([<em>mixed</em> $stopBuffer]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Stops the frontend without store any cached content</p> <h3 id=\"isfresh\" class=\"method-signature\">public <strong>isFresh</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Checks whether the last cache is fresh or cached</p> <h3 id=\"isstarted\" class=\"method-signature\">public <strong>isStarted</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Checks whether the cache has starting buffering or not</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <em>int</em> <strong>getLifetime</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Gets the last lifetime set</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Memory.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Memory.html</a>\n  </p>\n</div>\n","api/phalcon_cache_backend_apc":"<h1 id=\"class-phalcon-cache-backend-apc\">Class <strong>Phalcon\\Cache\\Backend\\Apc</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_cache_backend\"><em>Phalcon\\Cache\\Backend</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_cache_backendinterface\"><em>Phalcon\\Cache\\BackendInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend/apc.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to cache output fragments, PHP data and raw data using an APC backend</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Cache\\Backend\\Apc;\n use Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n // Cache data for 2 days\n $frontCache = new FrontData([\n     'lifetime' =&gt; 172800\n ]);\n\n $cache = new Apc($frontCache, [\n     'prefix' =&gt; 'app-data'\n ]);\n\n // Cache arbitrary data\n $cache-&gt;save('my-data', [1, 2, 3, 4, 5]);\n\n // Get data\n $data = $cache-&gt;get('my-data');\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $keyName, [<em>mixed</em> $lifetime])</h3> <p>Returns a cached content</p> <h3 id=\"save\" class=\"method-signature\">public <strong>save</strong> ([<em>string|long</em> $keyName], [<em>string</em> $content], [<em>long</em> $lifetime], [<em>boolean</em> $stopBuffer])</h3> <p>Stores cached content into the APC backend and stops the frontend</p> <h3 id=\"increment\" class=\"method-signature\">public <em>mixed</em> <strong>increment</strong> ([<em>string</em> $keyName], [<em>long</em> $value])</h3> <p>Increment of a given key, by number $value</p> <h3 id=\"decrement\" class=\"method-signature\">public <em>mixed</em> <strong>decrement</strong> ([<em>string</em> $keyName], [<em>long</em> $value])</h3> <p>Decrement of a given key, by number $value</p> <h3 id=\"delete\" class=\"method-signature\">public <strong>delete</strong> (<em>mixed</em> $keyName)</h3> <p>Deletes a value from the cache by its key</p> <h3 id=\"querykeys\" class=\"method-signature\">public <em>array</em> <strong>queryKeys</strong> ([<em>string</em> $prefix])</h3> <p>Query the existing cached keys</p> <h3 id=\"exists\" class=\"method-signature\">public <em>boolean</em> <strong>exists</strong> ([<em>string|long</em> $keyName], [<em>long</em> $lifetime])</h3> <p>Checks if cache exists and it hasn’t expired</p> <h3 id=\"flush\" class=\"method-signature\">public <strong>flush</strong> ()</h3> <p>Immediately invalidates all existing items.</p> <h3 id=\"getfrontend\" class=\"method-signature\">public <strong>getFrontend</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setfrontend\" class=\"method-signature\">public <strong>setFrontend</strong> (<em>mixed</em> $frontend) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>mixed</em> $options) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"getlastkey\" class=\"method-signature\">public <strong>getLastKey</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setlastkey\" class=\"method-signature\">public <strong>setLastKey</strong> (<em>mixed</em> $lastKey) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<a class=\"reference internal\" href=\"phalcon_cache_frontendinterface\"><em>Phalcon\\Cache\\FrontendInterface</em></a> $frontend, [<em>array</em> $options]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Phalcon\\Cache\\Backend constructor</p> <h3 id=\"start\" class=\"method-signature\">public <em>mixed</em> <strong>start</strong> (<em>int|string</em> $keyName, [<em>int</em> $lifetime]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Starts a cache. The keyname allows to identify the created fragment</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ([<em>mixed</em> $stopBuffer]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Stops the frontend without store any cached content</p> <h3 id=\"isfresh\" class=\"method-signature\">public <strong>isFresh</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Checks whether the last cache is fresh or cached</p> <h3 id=\"isstarted\" class=\"method-signature\">public <strong>isStarted</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Checks whether the cache has starting buffering or not</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <em>int</em> <strong>getLifetime</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Gets the last lifetime set</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Apc.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Apc.html</a>\n  </p>\n</div>\n","api/phalcon_cache_backend_file":"<h1 id=\"class-phalcon-cache-backend-file\">Class <strong>Phalcon\\Cache\\Backend\\File</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_cache_backend\"><em>Phalcon\\Cache\\Backend</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_cache_backendinterface\"><em>Phalcon\\Cache\\BackendInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend/file.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to cache output fragments using a file backend</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Cache\\Backend\\File;\n use Phalcon\\Cache\\Frontend\\Output as FrontOutput;\n\n // Cache the file for 2 days\n $frontendOptions = [\n     'lifetime' =&gt; 172800\n ];\n\n // Create an output cache\n $frontCache = FrontOutput($frontOptions);\n\n // Set the cache directory\n $backendOptions = [\n     'cacheDir' =&gt; '../app/cache/'\n ];\n\n // Create the File backend\n $cache = new File($frontCache, $backendOptions);\n\n $content = $cache-&gt;start('my-cache');\n if ($content === null) {\n     echo '&lt;h1&gt;', time(), '&lt;/h1&gt;';\n     $cache-&gt;save();\n } else {\n     echo $content;\n }\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<a class=\"reference internal\" href=\"phalcon_cache_frontendinterface\"><em>Phalcon\\Cache\\FrontendInterface</em></a> $frontend, <em>array</em> $options)</h3> <p>Phalcon\\Cache\\Backend\\File constructor</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $keyName, [<em>mixed</em> $lifetime])</h3> <p>Returns a cached content</p> <h3 id=\"save\" class=\"method-signature\">public <strong>save</strong> ([<em>int|string</em> $keyName], [<em>string</em> $content], [<em>int</em> $lifetime], [<em>boolean</em> $stopBuffer])</h3> <p>Stores cached content into the file backend and stops the frontend</p> <h3 id=\"delete\" class=\"method-signature\">public <em>boolean</em> <strong>delete</strong> (<em>int|string</em> $keyName)</h3> <p>Deletes a value from the cache by its key</p> <h3 id=\"querykeys\" class=\"method-signature\">public <em>array</em> <strong>queryKeys</strong> ([<em>string|int</em> $prefix])</h3> <p>Query the existing cached keys</p> <h3 id=\"exists\" class=\"method-signature\">public <em>boolean</em> <strong>exists</strong> ([<em>string|int</em> $keyName], [<em>int</em> $lifetime])</h3> <p>Checks if cache exists and it isn’t expired</p> <h3 id=\"increment\" class=\"method-signature\">public <em>mixed</em> <strong>increment</strong> ([<em>string|int</em> $keyName], [<em>int</em> $value])</h3> <p>Increment of a given key, by number $value</p> <h3 id=\"decrement\" class=\"method-signature\">public <em>mixed</em> <strong>decrement</strong> ([<em>string|int</em> $keyName], [<em>int</em> $value])</h3> <p>Decrement of a given key, by number $value</p> <h3 id=\"flush\" class=\"method-signature\">public <strong>flush</strong> ()</h3> <p>Immediately invalidates all existing items.</p> <h3 id=\"getkey\" class=\"method-signature\">public <strong>getKey</strong> (<em>mixed</em> $key)</h3> <p>Return a file-system safe identifier for a given key</p> <h3 id=\"usesafekey\" class=\"method-signature\">public <strong>useSafeKey</strong> (<em>mixed</em> $useSafeKey)</h3> <p>Set whether to use the safekey or not</p> <h3 id=\"getfrontend\" class=\"method-signature\">public <strong>getFrontend</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setfrontend\" class=\"method-signature\">public <strong>setFrontend</strong> (<em>mixed</em> $frontend) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>mixed</em> $options) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"getlastkey\" class=\"method-signature\">public <strong>getLastKey</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setlastkey\" class=\"method-signature\">public <strong>setLastKey</strong> (<em>mixed</em> $lastKey) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"start\" class=\"method-signature\">public <em>mixed</em> <strong>start</strong> (<em>int|string</em> $keyName, [<em>int</em> $lifetime]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Starts a cache. The keyname allows to identify the created fragment</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ([<em>mixed</em> $stopBuffer]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Stops the frontend without store any cached content</p> <h3 id=\"isfresh\" class=\"method-signature\">public <strong>isFresh</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Checks whether the last cache is fresh or cached</p> <h3 id=\"isstarted\" class=\"method-signature\">public <strong>isStarted</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Checks whether the cache has starting buffering or not</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <em>int</em> <strong>getLifetime</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Gets the last lifetime set</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_File.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_File.html</a>\n  </p>\n</div>\n","api/phalcon_cache_backend_memcache":"<h1 id=\"class-phalcon-cache-backend-memcache\">Class <strong>Phalcon\\Cache\\Backend\\Memcache</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_cache_backend\"><em>Phalcon\\Cache\\Backend</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_cache_backendinterface\"><em>Phalcon\\Cache\\BackendInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend/memcache.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to cache output fragments, PHP data or raw data to a memcache backend This adapter uses the special memcached key “_PHCM” to store all the keys internally used by the adapter</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Cache\\Backend\\Memcache;\n use Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n // Cache data for 2 days\n $frontCache = new FrontData([\n     'lifetime' =&gt; 172800\n ]);\n\n // Create the Cache setting memcached connection options\n $cache = new Memcache($frontCache, [\n     'host' =&gt; 'localhost',\n     'port' =&gt; 11211,\n     'persistent' =&gt; false\n ]);\n\n // Cache arbitrary data\n $cache-&gt;save('my-data', [1, 2, 3, 4, 5]);\n\n // Get data\n $data = $cache-&gt;get('my-data');\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<a class=\"reference internal\" href=\"phalcon_cache_frontendinterface\"><em>Phalcon\\Cache\\FrontendInterface</em></a> $frontend, [<em>array</em> $options])</h3> <p>Phalcon\\Cache\\Backend\\Memcache constructor</p> <h3 id=\"_connect\" class=\"method-signature\">public <strong>_connect</strong> ()</h3> <p>Create internal connection to memcached</p> <h3 id=\"addservers\" class=\"method-signature\">public <strong>addServers</strong> (<em>mixed</em> $host, <em>mixed</em> $port, [<em>mixed</em> $persistent])</h3> <p>Add servers to memcache pool</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $keyName, [<em>mixed</em> $lifetime])</h3> <p>Returns a cached content</p> <h3 id=\"save\" class=\"method-signature\">public <strong>save</strong> ([<em>int|string</em> $keyName], [<em>string</em> $content], [<em>long</em> $lifetime], [<em>boolean</em> $stopBuffer])</h3> <p>Stores cached content into the file backend and stops the frontend</p> <h3 id=\"delete\" class=\"method-signature\">public <em>boolean</em> <strong>delete</strong> (<em>int|string</em> $keyName)</h3> <p>Deletes a value from the cache by its key</p> <h3 id=\"querykeys\" class=\"method-signature\">public <em>array</em> <strong>queryKeys</strong> ([<em>string</em> $prefix])</h3> <p>Query the existing cached keys</p> <h3 id=\"exists\" class=\"method-signature\">public <em>boolean</em> <strong>exists</strong> ([<em>string</em> $keyName], [<em>long</em> $lifetime])</h3> <p>Checks if cache exists and it isn’t expired</p> <h3 id=\"increment\" class=\"method-signature\">public <em>long</em> <strong>increment</strong> ([<em>string</em> $keyName], [<em>long</em> $value])</h3> <p>Increment of given $keyName by $value</p> <h3 id=\"decrement\" class=\"method-signature\">public <em>long</em> <strong>decrement</strong> ([<em>string</em> $keyName], [<em>long</em> $value])</h3> <p>Decrement of $keyName by given $value</p> <h3 id=\"flush\" class=\"method-signature\">public <strong>flush</strong> ()</h3> <p>Immediately invalidates all existing items.</p> <h3 id=\"getfrontend\" class=\"method-signature\">public <strong>getFrontend</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setfrontend\" class=\"method-signature\">public <strong>setFrontend</strong> (<em>mixed</em> $frontend) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>mixed</em> $options) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"getlastkey\" class=\"method-signature\">public <strong>getLastKey</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setlastkey\" class=\"method-signature\">public <strong>setLastKey</strong> (<em>mixed</em> $lastKey) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"start\" class=\"method-signature\">public <em>mixed</em> <strong>start</strong> (<em>int|string</em> $keyName, [<em>int</em> $lifetime]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Starts a cache. The keyname allows to identify the created fragment</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ([<em>mixed</em> $stopBuffer]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Stops the frontend without store any cached content</p> <h3 id=\"isfresh\" class=\"method-signature\">public <strong>isFresh</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Checks whether the last cache is fresh or cached</p> <h3 id=\"isstarted\" class=\"method-signature\">public <strong>isStarted</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Checks whether the cache has starting buffering or not</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <em>int</em> <strong>getLifetime</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Gets the last lifetime set</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Memcache.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Memcache.html</a>\n  </p>\n</div>\n","api/phalcon_cache_backend_mongo":"<h1 id=\"class-phalcon-cache-backend-mongo\">Class <strong>Phalcon\\Cache\\Backend\\Mongo</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_cache_backend\"><em>Phalcon\\Cache\\Backend</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_cache_backendinterface\"><em>Phalcon\\Cache\\BackendInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend/mongo.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to cache output fragments, PHP data or raw data to a MongoDb backend</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Cache\\Backend\\Mongo;\n use Phalcon\\Cache\\Frontend\\Base64;\n\n // Cache data for 2 days\n $frontCache = new Base64([\n     'lifetime' =&gt; 172800\n ]);\n\n // Create a MongoDB cache\n $cache = new Mongo($frontCache, [\n     'server' =&gt; \"mongodb://localhost\",\n     'db' =&gt; 'caches',\n     'collection' =&gt; 'images'\n ]);\n\n // Cache arbitrary data\n $cache-&gt;save('my-data', file_get_contents('some-image.jpg'));\n\n // Get data\n $data = $cache-&gt;get('my-data');\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<a class=\"reference internal\" href=\"phalcon_cache_frontendinterface\"><em>Phalcon\\Cache\\FrontendInterface</em></a> $frontend, [<em>array</em> $options])</h3> <p>Phalcon\\Cache\\Backend\\Mongo constructor</p> <h3 id=\"_getcollection\" class=\"method-signature\">final protected <em>MongoCollection</em> <strong>_getCollection</strong> ()</h3> <p>Returns a MongoDb collection based on the backend parameters</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $keyName, [<em>mixed</em> $lifetime])</h3> <p>Returns a cached content</p> <h3 id=\"save\" class=\"method-signature\">public <strong>save</strong> ([<em>int|string</em> $keyName], [<em>string</em> $content], [<em>long</em> $lifetime], [<em>boolean</em> $stopBuffer])</h3> <p>Stores cached content into the file backend and stops the frontend</p> <h3 id=\"delete\" class=\"method-signature\">public <em>boolean</em> <strong>delete</strong> (<em>int|string</em> $keyName)</h3> <p>Deletes a value from the cache by its key</p> <h3 id=\"querykeys\" class=\"method-signature\">public <em>array</em> <strong>queryKeys</strong> ([<em>string</em> $prefix])</h3> <p>Query the existing cached keys</p> <h3 id=\"exists\" class=\"method-signature\">public <em>boolean</em> <strong>exists</strong> ([<em>string</em> $keyName], [<em>long</em> $lifetime])</h3> <p>Checks if cache exists and it isn’t expired</p> <h3 id=\"gc\" class=\"method-signature\">public <em>collection-&gt;remove(...)</em> <strong>gc</strong> ()</h3> <p>gc</p> <h3 id=\"increment\" class=\"method-signature\">public <em>mixed</em> <strong>increment</strong> (<em>int|string</em> $keyName, [<em>long</em> $value])</h3> <p>Increment of a given key by $value</p> <h3 id=\"decrement\" class=\"method-signature\">public <em>mixed</em> <strong>decrement</strong> (<em>int|string</em> $keyName, [<em>long</em> $value])</h3> <p>Decrement of a given key by $value</p> <h3 id=\"flush\" class=\"method-signature\">public <strong>flush</strong> ()</h3> <p>Immediately invalidates all existing items.</p> <h3 id=\"getfrontend\" class=\"method-signature\">public <strong>getFrontend</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setfrontend\" class=\"method-signature\">public <strong>setFrontend</strong> (<em>mixed</em> $frontend) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>mixed</em> $options) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"getlastkey\" class=\"method-signature\">public <strong>getLastKey</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setlastkey\" class=\"method-signature\">public <strong>setLastKey</strong> (<em>mixed</em> $lastKey) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"start\" class=\"method-signature\">public <em>mixed</em> <strong>start</strong> (<em>int|string</em> $keyName, [<em>int</em> $lifetime]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Starts a cache. The keyname allows to identify the created fragment</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ([<em>mixed</em> $stopBuffer]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Stops the frontend without store any cached content</p> <h3 id=\"isfresh\" class=\"method-signature\">public <strong>isFresh</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Checks whether the last cache is fresh or cached</p> <h3 id=\"isstarted\" class=\"method-signature\">public <strong>isStarted</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Checks whether the cache has starting buffering or not</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <em>int</em> <strong>getLifetime</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Gets the last lifetime set</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Mongo.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Mongo.html</a>\n  </p>\n</div>\n","api/phalcon_cache_backend_libmemcached":"<h1 id=\"class-phalcon-cache-backend-libmemcached\">Class <strong>Phalcon\\Cache\\Backend\\Libmemcached</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_cache_backend\"><em>Phalcon\\Cache\\Backend</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_cache_backendinterface\"><em>Phalcon\\Cache\\BackendInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend/libmemcached.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to cache output fragments, PHP data or raw data to a libmemcached backend. Per default persistent memcached connection pools are used.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Cache\\Backend\\Libmemcached;\n use Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n // Cache data for 2 days\n $frontCache = new FrontData([\n     'lifetime' =&gt; 172800\n ]);\n\n // Create the Cache setting memcached connection options\n $cache = new Libmemcached($frontCache, [\n     'servers' =&gt; [\n         [\n             'host' =&gt; 'localhost',\n             'port' =&gt; 11211,\n             'weight' =&gt; 1\n         ],\n     ],\n     'client' =&gt; [\n         \\Memcached::OPT_HASH =&gt; Memcached::HASH_MD5,\n         \\Memcached::OPT_PREFIX_KEY =&gt; 'prefix.',\n     ]\n ]);\n\n // Cache arbitrary data\n $cache-&gt;save('my-data', [1, 2, 3, 4, 5]);\n\n // Get data\n $data = $cache-&gt;get('my-data');\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<a class=\"reference internal\" href=\"phalcon_cache_frontendinterface\"><em>Phalcon\\Cache\\FrontendInterface</em></a> $frontend, [<em>array</em> $options])</h3> <p>Phalcon\\Cache\\Backend\\Memcache constructor</p> <h3 id=\"_connect\" class=\"method-signature\">public <strong>_connect</strong> ()</h3> <p>Create internal connection to memcached</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $keyName, [<em>mixed</em> $lifetime])</h3> <p>Returns a cached content</p> <h3 id=\"save\" class=\"method-signature\">public <strong>save</strong> ([<em>int|string</em> $keyName], [<em>string</em> $content], [<em>long</em> $lifetime], [<em>boolean</em> $stopBuffer])</h3> <p>Stores cached content into the file backend and stops the frontend</p> <h3 id=\"delete\" class=\"method-signature\">public <em>boolean</em> <strong>delete</strong> (<em>int|string</em> $keyName)</h3> <p>Deletes a value from the cache by its key</p> <h3 id=\"querykeys\" class=\"method-signature\">public <em>array</em> <strong>queryKeys</strong> ([<em>string</em> $prefix])</h3> <p>Query the existing cached keys</p> <h3 id=\"exists\" class=\"method-signature\">public <em>boolean</em> <strong>exists</strong> ([<em>string</em> $keyName], [<em>long</em> $lifetime])</h3> <p>Checks if cache exists and it isn’t expired</p> <h3 id=\"increment\" class=\"method-signature\">public <em>long</em> <strong>increment</strong> ([<em>string</em> $keyName], [<em>mixed</em> $value])</h3> <p>Increment of given $keyName by $value</p> <h3 id=\"decrement\" class=\"method-signature\">public <em>long</em> <strong>decrement</strong> ([<em>string</em> $keyName], [<em>long</em> $value])</h3> <p>Decrement of $keyName by given $value</p> <h3 id=\"flush\" class=\"method-signature\">public <strong>flush</strong> ()</h3> <p>Immediately invalidates all existing items. Memcached does not support flush() per default. If you require flush() support, set $config[“statsKey”]. All modified keys are stored in “statsKey”. Note: statsKey has a negative performance impact.</p> <pre class=\"highlight-php\" data-language=\"php\">$cache = new \\Phalcon\\Cache\\Backend\\Libmemcached($frontCache, [\"statsKey\" =&gt; \"_PHCM\"]);\n $cache-&gt;save('my-data', array(1, 2, 3, 4, 5));\n\n //'my-data' and all other used keys are deleted\n $cache-&gt;flush();\n</pre> <h3 id=\"getfrontend\" class=\"method-signature\">public <strong>getFrontend</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setfrontend\" class=\"method-signature\">public <strong>setFrontend</strong> (<em>mixed</em> $frontend) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>mixed</em> $options) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"getlastkey\" class=\"method-signature\">public <strong>getLastKey</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setlastkey\" class=\"method-signature\">public <strong>setLastKey</strong> (<em>mixed</em> $lastKey) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"start\" class=\"method-signature\">public <em>mixed</em> <strong>start</strong> (<em>int|string</em> $keyName, [<em>int</em> $lifetime]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Starts a cache. The keyname allows to identify the created fragment</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ([<em>mixed</em> $stopBuffer]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Stops the frontend without store any cached content</p> <h3 id=\"isfresh\" class=\"method-signature\">public <strong>isFresh</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Checks whether the last cache is fresh or cached</p> <h3 id=\"isstarted\" class=\"method-signature\">public <strong>isStarted</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Checks whether the cache has starting buffering or not</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <em>int</em> <strong>getLifetime</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Gets the last lifetime set</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Libmemcached.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Libmemcached.html</a>\n  </p>\n</div>\n","api/phalcon_cache_exception":"<h1 id=\"class-phalcon-cache-exception\">Class <strong>Phalcon\\Cache\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_cache_frontend_base64":"<h1 id=\"class-phalcon-cache-frontend-base64\">Class <strong>Phalcon\\Cache\\Frontend\\Base64</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_cache_frontendinterface\"><em>Phalcon\\Cache\\FrontendInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/frontend/base64.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to cache data converting/deconverting them to base64. This adapter uses the base64_encode/base64_decode PHP’s functions</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php\n\n // Cache the files for 2 days using a Base64 frontend\n $frontCache = new \\Phalcon\\Cache\\Frontend\\Base64(array(\n    \"lifetime\" =&gt; 172800\n ));\n\n //Create a MongoDB cache\n $cache = new \\Phalcon\\Cache\\Backend\\Mongo($frontCache, array(\n    'server' =&gt; \"mongodb://localhost\",\n      'db' =&gt; 'caches',\n    'collection' =&gt; 'images'\n ));\n\n // Try to get cached image\n $cacheKey = 'some-image.jpg.cache';\n $image    = $cache-&gt;get($cacheKey);\n if ($image === null) {\n\n     // Store the image in the cache\n     $cache-&gt;save($cacheKey, file_get_contents('tmp-dir/some-image.jpg'));\n }\n\n header('Content-Type: image/jpeg');\n echo $image;\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $frontendOptions])</h3> <p>Phalcon\\Cache\\Frontend\\Base64 constructor</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <strong>getLifetime</strong> ()</h3> <p>Returns the cache lifetime</p> <h3 id=\"isbuffering\" class=\"method-signature\">public <strong>isBuffering</strong> ()</h3> <p>Check whether if frontend is buffering output</p> <h3 id=\"start\" class=\"method-signature\">public <strong>start</strong> ()</h3> <p>Starts output frontend. Actually, does nothing in this adapter</p> <h3 id=\"getcontent\" class=\"method-signature\">public <em>string</em> <strong>getContent</strong> ()</h3> <p>Returns output cached content</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ()</h3> <p>Stops output frontend</p> <h3 id=\"beforestore\" class=\"method-signature\">public <em>string</em> <strong>beforeStore</strong> (<em>mixed</em> $data)</h3> <p>Serializes data before storing them</p> <h3 id=\"afterretrieve\" class=\"method-signature\">public <em>mixed</em> <strong>afterRetrieve</strong> (<em>mixed</em> $data)</h3> <p>Unserializes data after retrieval</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Base64.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Base64.html</a>\n  </p>\n</div>\n","api/phalcon_cache_frontend_json":"<h1 id=\"class-phalcon-cache-frontend-json\">Class <strong>Phalcon\\Cache\\Frontend\\Json</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_cache_frontendinterface\"><em>Phalcon\\Cache\\FrontendInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/frontend/json.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to cache data converting/deconverting them to JSON. This adapter uses the json_encode/json_decode PHP’s functions As the data is encoded in JSON other systems accessing the same backend could process them</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php\n\n // Cache the data for 2 days\n $frontCache = new \\Phalcon\\Cache\\Frontend\\Json(array(\n    \"lifetime\" =&gt; 172800\n ));\n\n //Create the Cache setting memcached connection options\n $cache = new \\Phalcon\\Cache\\Backend\\Memcache($frontCache, array(\n    'host' =&gt; 'localhost',\n    'port' =&gt; 11211,\n    'persistent' =&gt; false\n ));\n\n //Cache arbitrary data\n $cache-&gt;save('my-data', array(1, 2, 3, 4, 5));\n\n //Get data\n $data = $cache-&gt;get('my-data');\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $frontendOptions])</h3> <p>Phalcon\\Cache\\Frontend\\Base64 constructor</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <strong>getLifetime</strong> ()</h3> <p>Returns the cache lifetime</p> <h3 id=\"isbuffering\" class=\"method-signature\">public <strong>isBuffering</strong> ()</h3> <p>Check whether if frontend is buffering output</p> <h3 id=\"start\" class=\"method-signature\">public <strong>start</strong> ()</h3> <p>Starts output frontend. Actually, does nothing</p> <h3 id=\"getcontent\" class=\"method-signature\">public <em>string</em> <strong>getContent</strong> ()</h3> <p>Returns output cached content</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ()</h3> <p>Stops output frontend</p> <h3 id=\"beforestore\" class=\"method-signature\">public <em>string</em> <strong>beforeStore</strong> (<em>mixed</em> $data)</h3> <p>Serializes data before storing them</p> <h3 id=\"afterretrieve\" class=\"method-signature\">public <em>mixed</em> <strong>afterRetrieve</strong> (<em>mixed</em> $data)</h3> <p>Unserializes data after retrieval</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Json.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Json.html</a>\n  </p>\n</div>\n","api/phalcon_cache_frontend_msgpack":"<h1 id=\"class-phalcon-cache-frontend-msgpack\">Class <strong>Phalcon\\Cache\\Frontend\\Msgpack</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_cache_frontend_data\"><em>Phalcon\\Cache\\Frontend\\Data</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_cache_frontendinterface\"><em>Phalcon\\Cache\\FrontendInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/frontend/msgpack.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to cache native PHP data in a serialized form using msgpack extension This adapter uses a Msgpack frontend to store the cached content and requires msgpack extension.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Cache\\Backend\\File;\n use Phalcon\\Cache\\Frontend\\Msgpack;\n\n // Cache the files for 2 days using Msgpack frontend\n $frontCache = new Msgpack([\n     'lifetime' =&gt; 172800\n ]);\n\n // Create the component that will cache \"Msgpack\" to a \"File\" backend\n // Set the cache file directory - important to keep the \"/\" at the end of\n // of the value for the folder\n $cache = new File($frontCache, [\n     'cacheDir' =&gt; '../app/cache/'\n ]);\n\n // Try to get cached records\n $cacheKey = 'robots_order_id.cache';\n $robots   = $cache-&gt;get($cacheKey);\n if ($robots === null) {\n     // $robots is null due to cache expiration or data do not exist\n     // Make the database call and populate the variable\n     $robots = Robots::find(['order' =&gt; 'id']);\n\n     // Store it in the cache\n     $cache-&gt;save($cacheKey, $robots);\n }\n\n // Use $robots\n foreach ($robots as $robot) {\n     echo $robot-&gt;name, \"\\n\";\n }\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $frontendOptions])</h3> <p>Phalcon\\Cache\\Frontend\\Msgpack constructor</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <strong>getLifetime</strong> ()</h3> <p>Returns the cache lifetime</p> <h3 id=\"isbuffering\" class=\"method-signature\">public <strong>isBuffering</strong> ()</h3> <p>Check whether if frontend is buffering output</p> <h3 id=\"start\" class=\"method-signature\">public <strong>start</strong> ()</h3> <p>Starts output frontend. Actually, does nothing</p> <h3 id=\"getcontent\" class=\"method-signature\">public <strong>getContent</strong> ()</h3> <p>Returns output cached content</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ()</h3> <p>Stops output frontend</p> <h3 id=\"beforestore\" class=\"method-signature\">public <strong>beforeStore</strong> (<em>mixed</em> $data)</h3> <p>Serializes data before storing them</p> <h3 id=\"afterretrieve\" class=\"method-signature\">public <strong>afterRetrieve</strong> (<em>mixed</em> $data)</h3> <p>Unserializes data after retrieval</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Msgpack.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Msgpack.html</a>\n  </p>\n</div>\n","api/phalcon_cache_frontend_data":"<h1 id=\"class-phalcon-cache-frontend-data\">Class <strong>Phalcon\\Cache\\Frontend\\Data</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_cache_frontendinterface\"><em>Phalcon\\Cache\\FrontendInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/frontend/data.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to cache native PHP data in a serialized form</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Cache\\Backend\\File;\n  use Phalcon\\Cache\\Frontend\\Data;\n\n  // Cache the files for 2 days using a Data frontend\n  $frontCache = new Data(['lifetime' =&gt; 172800]);\n\n  // Create the component that will cache \"Data\" to a 'File' backend\n  // Set the cache file directory - important to keep the '/' at the end of\n  // of the value for the folder\n  $cache = new File($frontCache, ['cacheDir' =&gt; '../app/cache/']);\n\n  // Try to get cached records\n  $cacheKey = 'robots_order_id.cache';\n  $robots   = $cache-&gt;get($cacheKey);\n\n  if ($robots === null) {\n      // $robots is null due to cache expiration or data does not exist\n      // Make the database call and populate the variable\n      $robots = Robots::find(['order' =&gt; 'id']);\n\n      // Store it in the cache\n      $cache-&gt;save($cacheKey, $robots);\n  }\n\n  // Use $robots :)\n  foreach ($robots as $robot) {\n      echo $robot-&gt;name, \"\\n\";\n  }\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $frontendOptions])</h3> <p>Phalcon\\Cache\\Frontend\\Data constructor</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <strong>getLifetime</strong> ()</h3> <p>Returns the cache lifetime</p> <h3 id=\"isbuffering\" class=\"method-signature\">public <strong>isBuffering</strong> ()</h3> <p>Check whether if frontend is buffering output</p> <h3 id=\"start\" class=\"method-signature\">public <strong>start</strong> ()</h3> <p>Starts output frontend. Actually, does nothing</p> <h3 id=\"getcontent\" class=\"method-signature\">public <em>string</em> <strong>getContent</strong> ()</h3> <p>Returns output cached content</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ()</h3> <p>Stops output frontend</p> <h3 id=\"beforestore\" class=\"method-signature\">public <strong>beforeStore</strong> (<em>mixed</em> $data)</h3> <p>Serializes data before storing them</p> <h3 id=\"afterretrieve\" class=\"method-signature\">public <strong>afterRetrieve</strong> (<em>mixed</em> $data)</h3> <p>Unserializes data after retrieval</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Data.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Data.html</a>\n  </p>\n</div>\n","api/phalcon_cache_frontend_igbinary":"<h1 id=\"class-phalcon-cache-frontend-igbinary\">Class <strong>Phalcon\\Cache\\Frontend\\Igbinary</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_cache_frontend_data\"><em>Phalcon\\Cache\\Frontend\\Data</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_cache_frontendinterface\"><em>Phalcon\\Cache\\FrontendInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/frontend/igbinary.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to cache native PHP data in a serialized form using igbinary extension</p> <pre class=\"highlight-php\" data-language=\"php\">// Cache the files for 2 days using Igbinary frontend\n$frontCache = new \\Phalcon\\Cache\\Frontend\\Igbinary(array(\n    \"lifetime\" =&gt; 172800\n));\n\n// Create the component that will cache \"Igbinary\" to a \"File\" backend\n// Set the cache file directory - important to keep the \"/\" at the end of\n// of the value for the folder\n$cache = new \\Phalcon\\Cache\\Backend\\File($frontCache, array(\n    \"cacheDir\" =&gt; \"../app/cache/\"\n));\n\n// Try to get cached records\n$cacheKey  = 'robots_order_id.cache';\n$robots    = $cache-&gt;get($cacheKey);\nif ($robots === null) {\n\n    // $robots is null due to cache expiration or data do not exist\n    // Make the database call and populate the variable\n    $robots = Robots::find(array(\"order\" =&gt; \"id\"));\n\n    // Store it in the cache\n    $cache-&gt;save($cacheKey, $robots);\n}\n\n// Use $robots :)\nforeach ($robots as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $frontendOptions])</h3> <p>Phalcon\\Cache\\Frontend\\Data constructor</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <strong>getLifetime</strong> ()</h3> <p>Returns the cache lifetime</p> <h3 id=\"isbuffering\" class=\"method-signature\">public <strong>isBuffering</strong> ()</h3> <p>Check whether if frontend is buffering output</p> <h3 id=\"start\" class=\"method-signature\">public <strong>start</strong> ()</h3> <p>Starts output frontend. Actually, does nothing</p> <h3 id=\"getcontent\" class=\"method-signature\">public <em>string</em> <strong>getContent</strong> ()</h3> <p>Returns output cached content</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ()</h3> <p>Stops output frontend</p> <h3 id=\"beforestore\" class=\"method-signature\">public <em>string</em> <strong>beforeStore</strong> (<em>mixed</em> $data)</h3> <p>Serializes data before storing them</p> <h3 id=\"afterretrieve\" class=\"method-signature\">public <em>mixed</em> <strong>afterRetrieve</strong> (<em>mixed</em> $data)</h3> <p>Unserializes data after retrieval</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Igbinary.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Igbinary.html</a>\n  </p>\n</div>\n","api/phalcon_cache_backend_redis":"<h1 id=\"class-phalcon-cache-backend-redis\">Class <strong>Phalcon\\Cache\\Backend\\Redis</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_cache_backend\"><em>Phalcon\\Cache\\Backend</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_cache_backendinterface\"><em>Phalcon\\Cache\\BackendInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend/redis.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to cache output fragments, PHP data or raw data to a redis backend This adapter uses the special redis key “_PHCR” to store all the keys internally used by the adapter</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Cache\\Backend\\Redis;\n use Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n // Cache data for 2 days\n $frontCache = new FrontData([\n     'lifetime' =&gt; 172800\n ]);\n\n // Create the Cache setting redis connection options\n $cache = new Redis($frontCache, [\n     'host' =&gt; 'localhost',\n     'port' =&gt; 6379,\n     'auth' =&gt; 'foobared',\n     'persistent' =&gt; false\n     'index' =&gt; 0,\n ]);\n\n // Cache arbitrary data\n $cache-&gt;save('my-data', [1, 2, 3, 4, 5]);\n\n // Get data\n $data = $cache-&gt;get('my-data');\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<a class=\"reference internal\" href=\"phalcon_cache_frontendinterface\"><em>Phalcon\\Cache\\FrontendInterface</em></a> $frontend, [<em>array</em> $options])</h3> <p>Phalcon\\Cache\\Backend\\Redis constructor</p> <h3 id=\"_connect\" class=\"method-signature\">public <strong>_connect</strong> ()</h3> <p>Create internal connection to redis</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $keyName, [<em>mixed</em> $lifetime])</h3> <p>Returns a cached content</p> <h3 id=\"save\" class=\"method-signature\">public <strong>save</strong> ([<em>int|string</em> $keyName], [<em>string</em> $content], [<em>long</em> $lifetime], [<em>boolean</em> $stopBuffer])</h3> <p>Stores cached content into the file backend and stops the frontend</p> <h3 id=\"delete\" class=\"method-signature\">public <strong>delete</strong> (<em>int|string</em> $keyName)</h3> <p>Deletes a value from the cache by its key</p> <h3 id=\"querykeys\" class=\"method-signature\">public <strong>queryKeys</strong> ([<em>string</em> $prefix])</h3> <p>Query the existing cached keys</p> <h3 id=\"exists\" class=\"method-signature\">public <em>boolean</em> <strong>exists</strong> ([<em>string</em> $keyName], [<em>long</em> $lifetime])</h3> <p>Checks if cache exists and it isn’t expired</p> <h3 id=\"increment\" class=\"method-signature\">public <strong>increment</strong> ([<em>string</em> $keyName], [<em>long</em> $value])</h3> <p>Increment of given $keyName by $value</p> <h3 id=\"decrement\" class=\"method-signature\">public <strong>decrement</strong> ([<em>string</em> $keyName], [<em>long</em> $value])</h3> <p>Decrement of $keyName by given $value</p> <h3 id=\"flush\" class=\"method-signature\">public <strong>flush</strong> ()</h3> <p>Immediately invalidates all existing items.</p> <h3 id=\"getfrontend\" class=\"method-signature\">public <strong>getFrontend</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setfrontend\" class=\"method-signature\">public <strong>setFrontend</strong> (<em>mixed</em> $frontend) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>mixed</em> $options) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"getlastkey\" class=\"method-signature\">public <strong>getLastKey</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setlastkey\" class=\"method-signature\">public <strong>setLastKey</strong> (<em>mixed</em> $lastKey) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"start\" class=\"method-signature\">public <em>mixed</em> <strong>start</strong> (<em>int|string</em> $keyName, [<em>int</em> $lifetime]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Starts a cache. The keyname allows to identify the created fragment</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ([<em>mixed</em> $stopBuffer]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Stops the frontend without store any cached content</p> <h3 id=\"isfresh\" class=\"method-signature\">public <strong>isFresh</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Checks whether the last cache is fresh or cached</p> <h3 id=\"isstarted\" class=\"method-signature\">public <strong>isStarted</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Checks whether the cache has starting buffering or not</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <em>int</em> <strong>getLifetime</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Gets the last lifetime set</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Redis.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Redis.html</a>\n  </p>\n</div>\n","api/phalcon_cache_backend_xcache":"<h1 id=\"class-phalcon-cache-backend-xcache\">Class <strong>Phalcon\\Cache\\Backend\\Xcache</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_cache_backend\"><em>Phalcon\\Cache\\Backend</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_cache_backendinterface\"><em>Phalcon\\Cache\\BackendInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backend/xcache.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to cache output fragments, PHP data and raw data using an XCache backend</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Cache\\Backend\\Xcache;\n use Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n // Cache data for 2 days\n $frontCache = new FrontData([\n     'lifetime' =&gt; 172800\n ]);\n\n $cache = new Xcache($frontCache, [\n     'prefix' =&gt; 'app-data'\n ]);\n\n // Cache arbitrary data\n $cache-&gt;save('my-data', [1, 2, 3, 4, 5]);\n\n // Get data\n $data = $cache-&gt;get('my-data');\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<a class=\"reference internal\" href=\"phalcon_cache_frontendinterface\"><em>Phalcon\\Cache\\FrontendInterface</em></a> $frontend, [<em>array</em> $options])</h3> <p>Phalcon\\Cache\\Backend\\Xcache constructor</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $keyName, [<em>mixed</em> $lifetime])</h3> <p>Returns a cached content</p> <h3 id=\"save\" class=\"method-signature\">public <strong>save</strong> ([<em>int|string</em> $keyName], [<em>string</em> $content], [<em>long</em> $lifetime], [<em>boolean</em> $stopBuffer])</h3> <p>Stores cached content into the file backend and stops the frontend</p> <h3 id=\"delete\" class=\"method-signature\">public <em>boolean</em> <strong>delete</strong> (<em>int|string</em> $keyName)</h3> <p>Deletes a value from the cache by its key</p> <h3 id=\"querykeys\" class=\"method-signature\">public <em>array</em> <strong>queryKeys</strong> ([<em>string</em> $prefix])</h3> <p>Query the existing cached keys</p> <h3 id=\"exists\" class=\"method-signature\">public <em>boolean</em> <strong>exists</strong> ([<em>string</em> $keyName], [<em>long</em> $lifetime])</h3> <p>Checks if cache exists and it isn’t expired</p> <h3 id=\"increment\" class=\"method-signature\">public <em>mixed</em> <strong>increment</strong> (<em>string</em> $keyName, [<em>long</em> $value])</h3> <p>Atomic increment of a given key, by number $value</p> <h3 id=\"decrement\" class=\"method-signature\">public <em>mixed</em> <strong>decrement</strong> (<em>string</em> $keyName, [<em>long</em> $value])</h3> <p>Atomic decrement of a given key, by number $value</p> <h3 id=\"flush\" class=\"method-signature\">public <strong>flush</strong> ()</h3> <p>Immediately invalidates all existing items.</p> <h3 id=\"getfrontend\" class=\"method-signature\">public <strong>getFrontend</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setfrontend\" class=\"method-signature\">public <strong>setFrontend</strong> (<em>mixed</em> $frontend) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>mixed</em> $options) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"getlastkey\" class=\"method-signature\">public <strong>getLastKey</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"setlastkey\" class=\"method-signature\">public <strong>setLastKey</strong> (<em>mixed</em> $lastKey) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>...</p> <h3 id=\"start\" class=\"method-signature\">public <em>mixed</em> <strong>start</strong> (<em>int|string</em> $keyName, [<em>int</em> $lifetime]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Starts a cache. The keyname allows to identify the created fragment</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ([<em>mixed</em> $stopBuffer]) <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Stops the frontend without store any cached content</p> <h3 id=\"isfresh\" class=\"method-signature\">public <strong>isFresh</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Checks whether the last cache is fresh or cached</p> <h3 id=\"isstarted\" class=\"method-signature\">public <strong>isStarted</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Checks whether the cache has starting buffering or not</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <em>int</em> <strong>getLifetime</strong> () <small>inherited from Phalcon\\Cache\\Backend</small>\n</h3> <p>Gets the last lifetime set</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Xcache.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Backend_Xcache.html</a>\n  </p>\n</div>\n","api/phalcon_cache_frontend_output":"<h1 id=\"class-phalcon-cache-frontend-output\">Class <strong>Phalcon\\Cache\\Frontend\\Output</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_cache_frontendinterface\"><em>Phalcon\\Cache\\FrontendInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/frontend/output.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to cache output fragments captured with ob_* functions</p> <pre class=\"highlight-php\" data-language=\"php\">*\n* use Phalcon\\Tag;\n* use Phalcon\\Cache\\Backend\\File;\n* use Phalcon\\Cache\\Frontend\\Output;\n*\n* // Create an Output frontend. Cache the files for 2 days\n* $frontCache = new Output(['lifetime' =&gt; 172800]));\n*\n* // Create the component that will cache from the \"Output\" to a \"File\" backend\n* // Set the cache file directory - it's important to keep the \"/\" at the end of\n* // the value for the folder\n* $cache = new File($frontCache, ['cacheDir' =&gt; '../app/cache/']);\n*\n* // Get/Set the cache file to ../app/cache/my-cache.html\n* $content = $cache-&gt;start('my-cache.html');\n*\n* // If $content is null then the content will be generated for the cache\n* if (null === $content) {\n*     // Print date and time\n*     echo date('r');\n*\n*     // Generate a link to the sign-up action\n*     echo Tag::linkTo(\n*         [\n*             'user/signup',\n*             'Sign Up',\n*             'class' =&gt; 'signup-button'\n*         ]\n*     );\n*\n*     // Store the output into the cache file\n*     $cache-&gt;save();\n* } else {\n*     // Echo the cached output\n*     echo $content;\n* }\n</pre> <ul class=\"simple\"> <li> </ul>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $frontendOptions])</h3> <p>Phalcon\\Cache\\Frontend\\Output constructor</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <strong>getLifetime</strong> ()</h3> <p>Returns the cache lifetime</p> <h3 id=\"isbuffering\" class=\"method-signature\">public <strong>isBuffering</strong> ()</h3> <p>Check whether if frontend is buffering output</p> <h3 id=\"start\" class=\"method-signature\">public <strong>start</strong> ()</h3> <p>Starts output frontend. Currently, does nothing</p> <h3 id=\"getcontent\" class=\"method-signature\">public <em>string</em> <strong>getContent</strong> ()</h3> <p>Returns output cached content</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ()</h3> <p>Stops output frontend</p> <h3 id=\"beforestore\" class=\"method-signature\">public <em>string</em> <strong>beforeStore</strong> (<em>mixed</em> $data)</h3> <p>Serializes data before storing them</p> <h3 id=\"afterretrieve\" class=\"method-signature\">public <em>mixed</em> <strong>afterRetrieve</strong> (<em>mixed</em> $data)</h3> <p>Unserializes data after retrieval</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Output.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_Output.html</a>\n  </p>\n</div>\n","api/phalcon_cli_console":"<h1 id=\"class-phalcon-cli-console\">Class <strong>Phalcon\\Cli\\Console</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_application\"><em>Phalcon\\Application</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/console.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This component allows to create CLI applications using Phalcon</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"addmodules\" class=\"method-signature\">public <strong>addModules</strong> (<em>array</em> $modules)</h3> <p>Merge modules with the existing ones</p> <pre class=\"highlight-php\" data-language=\"php\">application-&gt;addModules(array(\n    'admin' =&gt; array(\n            'className' =&gt; 'Multiple\\Admin\\Module',\n            'path' =&gt; '../apps/admin/Module.php'\n    )\n));\n</pre> <h3 id=\"handle\" class=\"method-signature\">public <strong>handle</strong> ([<em>array</em> $arguments])</h3> <p>Handle the whole command-line tasks</p> <h3 id=\"setargument\" class=\"method-signature\">public <strong>setArgument</strong> ([<em>array</em> $arguments], [<em>mixed</em> $str], [<em>mixed</em> $shift])</h3> <p>Set an specific argument</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector]) <small>inherited from Phalcon\\Application</small>\n</h3> <p>Phalcon\\Application</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Application</small>\n</h3> <p>Sets the events manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Application</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"registermodules\" class=\"method-signature\">public <strong>registerModules</strong> (<em>array</em> $modules, [<em>mixed</em> $merge]) <small>inherited from Phalcon\\Application</small>\n</h3> <p>Register an array of modules present in the application</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;registerModules(\n    [\n            'frontend' =&gt; [\n                    'className' =&gt; 'Multiple\\Frontend\\Module',\n                    'path'      =&gt; '../apps/frontend/Module.php'\n            ],\n            'backend' =&gt; [\n                    'className' =&gt; 'Multiple\\Backend\\Module',\n                    'path'      =&gt; '../apps/backend/Module.php'\n            ]\n    ]\n );\n</pre> <h3 id=\"getmodules\" class=\"method-signature\">public <strong>getModules</strong> () <small>inherited from Phalcon\\Application</small>\n</h3> <p>Return the modules registered in the application</p> <h3 id=\"getmodule\" class=\"method-signature\">public <strong>getModule</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Application</small>\n</h3> <p>Gets the module definition registered in the application via module name</p> <h3 id=\"setdefaultmodule\" class=\"method-signature\">public <strong>setDefaultModule</strong> (<em>mixed</em> $defaultModule) <small>inherited from Phalcon\\Application</small>\n</h3> <p>Sets the module name to be used if the router doesn’t return a valid module</p> <h3 id=\"getdefaultmodule\" class=\"method-signature\">public <strong>getDefaultModule</strong> () <small>inherited from Phalcon\\Application</small>\n</h3> <p>Returns the default module name</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $propertyName) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Magic method __get</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Console.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Console.html</a>\n  </p>\n</div>\n","api/phalcon_cache_multiple":"<h1 id=\"class-phalcon-cache-multiple\">Class <strong>Phalcon\\Cache\\Multiple</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/multiple.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to read to chained backend adapters writing to multiple backends</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Cache\\Frontend\\Data as DataFrontend,\n       Phalcon\\Cache\\Multiple,\n       Phalcon\\Cache\\Backend\\Apc as ApcCache,\n       Phalcon\\Cache\\Backend\\Memcache as MemcacheCache,\n       Phalcon\\Cache\\Backend\\File as FileCache;\n\n   $ultraFastFrontend = new DataFrontend(array(\n       \"lifetime\" =&gt; 3600\n   ));\n\n   $fastFrontend = new DataFrontend(array(\n       \"lifetime\" =&gt; 86400\n   ));\n\n   $slowFrontend = new DataFrontend(array(\n       \"lifetime\" =&gt; 604800\n   ));\n\n   //Backends are registered from the fastest to the slower\n   $cache = new Multiple(array(\n       new ApcCache($ultraFastFrontend, array(\n           \"prefix\" =&gt; 'cache',\n       )),\n       new MemcacheCache($fastFrontend, array(\n           \"prefix\" =&gt; 'cache',\n           \"host\" =&gt; \"localhost\",\n           \"port\" =&gt; \"11211\"\n       )),\n       new FileCache($slowFrontend, array(\n           \"prefix\" =&gt; 'cache',\n           \"cacheDir\" =&gt; \"../app/cache/\"\n       ))\n   ));\n\n   //Save, saves in every backend\n   $cache-&gt;save('my-key', $data);\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>Phalcon\\Cache\\BackendInterface[]</em> $backends])</h3> <p>Phalcon\\Cache\\Multiple constructor</p> <h3 id=\"push\" class=\"method-signature\">public <strong>push</strong> (<a class=\"reference internal\" href=\"phalcon_cache_backendinterface\"><em>Phalcon\\Cache\\BackendInterface</em></a> $backend)</h3> <p>Adds a backend</p> <h3 id=\"get\" class=\"method-signature\">public <em>mixed</em> <strong>get</strong> (<em>string|int</em> $keyName, [<em>long</em> $lifetime])</h3> <p>Returns a cached content reading the internal backends</p> <h3 id=\"start\" class=\"method-signature\">public <strong>start</strong> (<em>string|int</em> $keyName, [<em>long</em> $lifetime])</h3> <p>Starts every backend</p> <h3 id=\"save\" class=\"method-signature\">public <strong>save</strong> ([<em>string</em> $keyName], [<em>string</em> $content], [<em>long</em> $lifetime], [<em>boolean</em> $stopBuffer])</h3> <p>Stores cached content into all backends and stops the frontend</p> <h3 id=\"delete\" class=\"method-signature\">public <em>boolean</em> <strong>delete</strong> (<em>string|int</em> $keyName)</h3> <p>Deletes a value from each backend</p> <h3 id=\"exists\" class=\"method-signature\">public <em>boolean</em> <strong>exists</strong> ([<em>string|int</em> $keyName], [<em>long</em> $lifetime])</h3> <p>Checks if cache exists in at least one backend</p> <h3 id=\"flush\" class=\"method-signature\">public <strong>flush</strong> ()</h3> <p>Flush all backend(s)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Multiple.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Multiple.html</a>\n  </p>\n</div>\n","api/phalcon_cli_console_exception":"<h1 id=\"class-phalcon-cli-console-exception\">Class <strong>Phalcon\\Cli\\Console\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_application_exception\"><em>Phalcon\\Application\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/console/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Console_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Console_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_cli_dispatcher_exception":"<h1 id=\"class-phalcon-cli-dispatcher-exception\">Class <strong>Phalcon\\Cli\\Dispatcher\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/dispatcher/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Dispatcher_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Dispatcher_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_cache_frontend_none":"<h1 id=\"class-phalcon-cache-frontend-none\">Class <strong>Phalcon\\Cache\\Frontend\\None</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_cache_frontendinterface\"><em>Phalcon\\Cache\\FrontendInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/frontend/none.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Discards any kind of frontend data input. This frontend does not have expiration time or any other options</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php\n\n//Create a None Cache\n$frontCache = new \\Phalcon\\Cache\\Frontend\\None();\n\n// Create the component that will cache \"Data\" to a \"Memcached\" backend\n// Memcached connection settings\n$cache = new \\Phalcon\\Cache\\Backend\\Memcache($frontCache, array(\n    \"host\" =&gt; \"localhost\",\n    \"port\" =&gt; \"11211\"\n));\n\n// This Frontend always return the data as it's returned by the backend\n$cacheKey = 'robots_order_id.cache';\n$robots    = $cache-&gt;get($cacheKey);\nif ($robots === null) {\n\n    // This cache doesn't perform any expiration checking, so the data is always expired\n    // Make the database call and populate the variable\n    $robots = Robots::find(array(\"order\" =&gt; \"id\"));\n\n    $cache-&gt;save($cacheKey, $robots);\n}\n\n// Use $robots :)\nforeach ($robots as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getlifetime\" class=\"method-signature\">public <strong>getLifetime</strong> ()</h3> <p>Returns cache lifetime, always one second expiring content</p> <h3 id=\"isbuffering\" class=\"method-signature\">public <strong>isBuffering</strong> ()</h3> <p>Check whether if frontend is buffering output, always false</p> <h3 id=\"start\" class=\"method-signature\">public <strong>start</strong> ()</h3> <p>Starts output frontend</p> <h3 id=\"getcontent\" class=\"method-signature\">public <em>string</em> <strong>getContent</strong> ()</h3> <p>Returns output cached content</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ()</h3> <p>Stops output frontend</p> <h3 id=\"beforestore\" class=\"method-signature\">public <strong>beforeStore</strong> (<em>mixed</em> $data)</h3> <p>Prepare data to be stored</p> <h3 id=\"afterretrieve\" class=\"method-signature\">public <strong>afterRetrieve</strong> (<em>mixed</em> $data)</h3> <p>Prepares data to be retrieved to user</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_None.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_Frontend_None.html</a>\n  </p>\n</div>\n","api/phalcon_cli_router_route":"<h1 id=\"class-phalcon-cli-router-route\">Class <strong>Phalcon\\Cli\\Router\\Route</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/router/route.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class represents every route added to the router</p>  <h2 id=\"constants\">Constants</h2> <h3 id=\"default_delimiter\" class=\"method-signature\">\n<em>string</em> <strong>DEFAULT_DELIMITER</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $pattern, [<em>array</em> $paths])</h3> <p>Phalcon\\Cli\\Router\\Route constructor</p> <h3 id=\"compilepattern\" class=\"method-signature\">public <strong>compilePattern</strong> (<em>mixed</em> $pattern)</h3> <p>Replaces placeholders from pattern returning a valid PCRE regular expression</p> <h3 id=\"extractnamedparams\" class=\"method-signature\">public <em>array|boolean</em> <strong>extractNamedParams</strong> (<em>string</em> $pattern)</h3> <p>Extracts parameters from a string</p> <h3 id=\"reconfigure\" class=\"method-signature\">public <strong>reConfigure</strong> (<em>string</em> $pattern, [<em>array</em> $paths])</h3> <p>Reconfigure the route adding a new pattern and a set of paths</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> ()</h3> <p>Returns the route’s name</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name)</h3> <p>Sets the route’s name</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add('/about', array(\n     'controller' =&gt; 'about'\n ))-&gt;setName('about');\n</pre> <h3 id=\"beforematch\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_cli_router_route\"><em>Phalcon\\Cli\\Router\\Route</em></a> <strong>beforeMatch</strong> (<em>callback</em> $callback)</h3> <p>Sets a callback that is called if the route is matched. The developer can implement any arbitrary conditions here If the callback returns false the route is treated as not matched</p> <h3 id=\"getbeforematch\" class=\"method-signature\">public <em>mixed</em> <strong>getBeforeMatch</strong> ()</h3> <p>Returns the ‘before match’ callback if any</p> <h3 id=\"getrouteid\" class=\"method-signature\">public <strong>getRouteId</strong> ()</h3> <p>Returns the route’s id</p> <h3 id=\"getpattern\" class=\"method-signature\">public <strong>getPattern</strong> ()</h3> <p>Returns the route’s pattern</p> <h3 id=\"getcompiledpattern\" class=\"method-signature\">public <strong>getCompiledPattern</strong> ()</h3> <p>Returns the route’s compiled pattern</p> <h3 id=\"getpaths\" class=\"method-signature\">public <strong>getPaths</strong> ()</h3> <p>Returns the paths</p> <h3 id=\"getreversedpaths\" class=\"method-signature\">public <strong>getReversedPaths</strong> ()</h3> <p>Returns the paths using positions as keys and names as values</p> <h3 id=\"convert\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_cli_router_route\"><em>Phalcon\\Cli\\Router\\Route</em></a> <strong>convert</strong> (<em>string</em> $name, <em>callable</em> $converter)</h3> <p>Adds a converter to perform an additional transformation for certain parameter</p> <h3 id=\"getconverters\" class=\"method-signature\">public <strong>getConverters</strong> ()</h3> <p>Returns the router converter</p> <h3 id=\"reset\" class=\"method-signature\">public static <strong>reset</strong> ()</h3> <p>Resets the internal route id generator</p> <h3 id=\"delimiter\" class=\"method-signature\">public static <strong>delimiter</strong> ([<em>mixed</em> $delimiter])</h3> <p>Set the routing delimiter</p> <h3 id=\"getdelimiter\" class=\"method-signature\">public static <strong>getDelimiter</strong> ()</h3> <p>Get routing delimiter</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router_Route.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router_Route.html</a>\n  </p>\n</div>\n","api/phalcon_cli_dispatcher":"<h1 id=\"class-phalcon-cli-dispatcher\">Class <strong>Phalcon\\Cli\\Dispatcher</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_dispatcher\"><em>Phalcon\\Dispatcher</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_dispatcherinterface\"><em>Phalcon\\DispatcherInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_cli_dispatcherinterface\"><em>Phalcon\\Cli\\DispatcherInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/dispatcher.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Dispatching is the process of taking the command-line arguments, extracting the module name, task name, action name, and optional parameters contained in it, and then instantiating a task and calling an action on it.</p> <pre class=\"highlight-php\" data-language=\"php\">$di = new \\Phalcon\\Di();\n\n$dispatcher = new \\Phalcon\\Cli\\Dispatcher();\n\n  $dispatcher-&gt;setDi(di);\n\n$dispatcher-&gt;setTaskName('posts');\n$dispatcher-&gt;setActionName('index');\n$dispatcher-&gt;setParams(array());\n\n$handle = dispatcher-&gt;dispatch();\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"exception_no_di\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_NO_DI</strong>\n</h3> <h3 id=\"exception_cyclic_routing\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_CYCLIC_ROUTING</strong>\n</h3> <h3 id=\"exception_handler_not_found\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_HANDLER_NOT_FOUND</strong>\n</h3> <h3 id=\"exception_invalid_handler\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_INVALID_HANDLER</strong>\n</h3> <h3 id=\"exception_invalid_params\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_INVALID_PARAMS</strong>\n</h3> <h3 id=\"exception_action_not_found\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_ACTION_NOT_FOUND</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"settasksuffix\" class=\"method-signature\">public <strong>setTaskSuffix</strong> (<em>mixed</em> $taskSuffix)</h3> <p>Sets the default task suffix</p> <h3 id=\"setdefaulttask\" class=\"method-signature\">public <strong>setDefaultTask</strong> (<em>mixed</em> $taskName)</h3> <p>Sets the default task name</p> <h3 id=\"settaskname\" class=\"method-signature\">public <strong>setTaskName</strong> (<em>mixed</em> $taskName)</h3> <p>Sets the task name to be dispatched</p> <h3 id=\"gettaskname\" class=\"method-signature\">public <strong>getTaskName</strong> ()</h3> <p>Gets last dispatched task name</p> <h3 id=\"_throwdispatchexception\" class=\"method-signature\">protected <strong>_throwDispatchException</strong> (<em>mixed</em> $message, [<em>mixed</em> $exceptionCode])</h3> <p>Throws an internal exception</p> <h3 id=\"_handleexception\" class=\"method-signature\">protected <strong>_handleException</strong> (<em>Exception</em> $exception)</h3> <p>Handles a user exception</p> <h3 id=\"getlasttask\" class=\"method-signature\">public <strong>getLastTask</strong> ()</h3> <p>Returns the lastest dispatched controller</p> <h3 id=\"getactivetask\" class=\"method-signature\">public <strong>getActiveTask</strong> ()</h3> <p>Returns the active task in the dispatcher</p> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>array</em> $options)</h3> <p>Set the options to be dispatched</p> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> ()</h3> <p>Get dispatched options</p> <h3 id=\"callactionmethod\" class=\"method-signature\">public <strong>callActionMethod</strong> (<em>mixed</em> $handler, <em>mixed</em> $actionMethod, [<em>array</em> $params])</h3> <p>...</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the events manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"setactionsuffix\" class=\"method-signature\">public <strong>setActionSuffix</strong> (<em>mixed</em> $actionSuffix) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the default action suffix</p> <h3 id=\"getactionsuffix\" class=\"method-signature\">public <strong>getActionSuffix</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Gets the default action suffix</p> <h3 id=\"setmodulename\" class=\"method-signature\">public <strong>setModuleName</strong> (<em>mixed</em> $moduleName) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the module where the controller is (only informative)</p> <h3 id=\"getmodulename\" class=\"method-signature\">public <strong>getModuleName</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Gets the module where the controller class is</p> <h3 id=\"setnamespacename\" class=\"method-signature\">public <strong>setNamespaceName</strong> (<em>mixed</em> $namespaceName) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the namespace where the controller class is</p> <h3 id=\"getnamespacename\" class=\"method-signature\">public <strong>getNamespaceName</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Gets a namespace to be prepended to the current handler name</p> <h3 id=\"setdefaultnamespace\" class=\"method-signature\">public <strong>setDefaultNamespace</strong> (<em>mixed</em> $namespaceName) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the default namespace</p> <h3 id=\"getdefaultnamespace\" class=\"method-signature\">public <strong>getDefaultNamespace</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Returns the default namespace</p> <h3 id=\"setdefaultaction\" class=\"method-signature\">public <strong>setDefaultAction</strong> (<em>mixed</em> $actionName) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the default action name</p> <h3 id=\"setactionname\" class=\"method-signature\">public <strong>setActionName</strong> (<em>mixed</em> $actionName) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the action name to be dispatched</p> <h3 id=\"getactionname\" class=\"method-signature\">public <strong>getActionName</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Gets the latest dispatched action name</p> <h3 id=\"setparams\" class=\"method-signature\">public <strong>setParams</strong> (<em>array</em> $params) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets action params to be dispatched</p> <h3 id=\"getparams\" class=\"method-signature\">public <strong>getParams</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Gets action params</p> <h3 id=\"setparam\" class=\"method-signature\">public <strong>setParam</strong> (<em>mixed</em> $param, <em>mixed</em> $value) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Set a param by its name or numeric index</p> <h3 id=\"getparam\" class=\"method-signature\">public <em>mixed</em> <strong>getParam</strong> (<em>mixed</em> $param, [<em>string|array</em> $filters], [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Gets a param by its name or numeric index</p> <h3 id=\"hasparam\" class=\"method-signature\">public <em>boolean</em> <strong>hasParam</strong> (<em>mixed</em> $param) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Check if a param exists</p> <h3 id=\"getactivemethod\" class=\"method-signature\">public <strong>getActiveMethod</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Returns the current method to be/executed in the dispatcher</p> <h3 id=\"isfinished\" class=\"method-signature\">public <strong>isFinished</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Checks if the dispatch loop is finished or has more pendent controllers/tasks to dispatch</p> <h3 id=\"setreturnedvalue\" class=\"method-signature\">public <strong>setReturnedValue</strong> (<em>mixed</em> $value) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the latest returned value by an action manually</p> <h3 id=\"getreturnedvalue\" class=\"method-signature\">public <em>mixed</em> <strong>getReturnedValue</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Returns value returned by the latest dispatched action</p> <h3 id=\"setmodelbinding\" class=\"method-signature\">public <strong>setModelBinding</strong> (<em>boolean</em> $value) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Enable/Disable model binding during dispatch</p> <h3 id=\"dispatch\" class=\"method-signature\">public <em>object</em> <strong>dispatch</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Dispatches a handle action taking into account the routing parameters</p> <h3 id=\"_dispatch\" class=\"method-signature\">protected <em>object</em> <strong>_dispatch</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Dispatches a handle action taking into account the routing parameters</p> <h3 id=\"forward\" class=\"method-signature\">public <strong>forward</strong> (<em>array</em> $forward) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Forwards the execution flow to another controller/action Dispatchers are unique per module. Forwarding between modules is not allowed</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;dispatcher-&gt;forward(array(\"controller\" =&gt; \"posts\", \"action\" =&gt; \"index\"));\n</pre> <h3 id=\"wasforwarded\" class=\"method-signature\">public <strong>wasForwarded</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Check if the current executed action was forwarded by another one</p> <h3 id=\"gethandlerclass\" class=\"method-signature\">public <strong>getHandlerClass</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Possible class name that will be located to dispatch the request</p> <h3 id=\"_resolveemptyproperties\" class=\"method-signature\">protected <strong>_resolveEmptyProperties</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Set empty properties to their defaults (where defaults are available)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Dispatcher.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Dispatcher.html</a>\n  </p>\n</div>\n","api/phalcon_cli_router_exception":"<h1 id=\"class-phalcon-cli-router-exception\">Class <strong>Phalcon\\Cli\\Router\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/router/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_cli_router":"<h1 id=\"class-phalcon-cli-router\">Class <strong>Phalcon\\Cli\\Router</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/router.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Phalcon\\Cli\\Router is the standard framework router. Routing is the process of taking a command-line arguments and decomposing it into parameters to determine which module, task, and action of that task should receive the request</p> <pre class=\"highlight-php\" data-language=\"php\">$router = new \\Phalcon\\Cli\\Router();\n$router-&gt;handle(array(\n    'module' =&gt; 'main',\n    'task' =&gt; 'videos',\n    'action' =&gt; 'process'\n));\necho $router-&gt;getTaskName();\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>mixed</em> $defaultRoutes])</h3> <p>Phalcon\\Cli\\Router constructor</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the internal dependency injector</p> <h3 id=\"setdefaultmodule\" class=\"method-signature\">public <strong>setDefaultModule</strong> (<em>mixed</em> $moduleName)</h3> <p>Sets the name of the default module</p> <h3 id=\"setdefaulttask\" class=\"method-signature\">public <strong>setDefaultTask</strong> (<em>mixed</em> $taskName)</h3> <p>Sets the default controller name</p> <h3 id=\"setdefaultaction\" class=\"method-signature\">public <strong>setDefaultAction</strong> (<em>mixed</em> $actionName)</h3> <p>Sets the default action name</p> <h3 id=\"setdefaults\" class=\"method-signature\">public <strong>setDefaults</strong> (<em>array</em> $defaults)</h3> <p>Sets an array of default paths. If a route is missing a path the router will use the defined here This method must not be used to set a 404 route</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;setDefaults(array(\n    'module' =&gt; 'common',\n    'action' =&gt; 'index'\n ));\n</pre> <h3 id=\"handle\" class=\"method-signature\">public <strong>handle</strong> ([<em>array</em> $arguments])</h3> <p>Handles routing information received from command-line arguments</p> <h3 id=\"add\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_cli_router_route\"><em>Phalcon\\Cli\\Router\\Route</em></a> <strong>add</strong> (<em>string</em> $pattern, [<em>string/array</em> $paths])</h3> <p>Adds a route to the router</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add('/about', 'About::main');\n</pre> <h3 id=\"getmodulename\" class=\"method-signature\">public <strong>getModuleName</strong> ()</h3> <p>Returns proccesed module name</p> <h3 id=\"gettaskname\" class=\"method-signature\">public <strong>getTaskName</strong> ()</h3> <p>Returns proccesed task name</p> <h3 id=\"getactionname\" class=\"method-signature\">public <strong>getActionName</strong> ()</h3> <p>Returns processed action name</p> <h3 id=\"getparams\" class=\"method-signature\">public <em>array</em> <strong>getParams</strong> ()</h3> <p>Returns processed extra params</p> <h3 id=\"getmatchedroute\" class=\"method-signature\">public <strong>getMatchedRoute</strong> ()</h3> <p>Returns the route that matches the handled URI</p> <h3 id=\"getmatches\" class=\"method-signature\">public <em>array</em> <strong>getMatches</strong> ()</h3> <p>Returns the sub expressions in the regular expression matched</p> <h3 id=\"wasmatched\" class=\"method-signature\">public <strong>wasMatched</strong> ()</h3> <p>Checks if the router matches any of the defined routes</p> <h3 id=\"getroutes\" class=\"method-signature\">public <strong>getRoutes</strong> ()</h3> <p>Returns all the routes defined in the router</p> <h3 id=\"getroutebyid\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_cli_router_route\"><em>Phalcon\\Cli\\Router\\Route</em></a> <strong>getRouteById</strong> (<em>int</em> $id)</h3> <p>Returns a route object by its id</p> <h3 id=\"getroutebyname\" class=\"method-signature\">public <strong>getRouteByName</strong> (<em>mixed</em> $name)</h3> <p>Returns a route object by its name</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router.html</a>\n  </p>\n</div>\n","api/phalcon_config_adapter_ini":"<h1 id=\"class-phalcon-config-adapter-ini\">Class <strong>Phalcon\\Config\\Adapter\\Ini</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_config\"><em>Phalcon\\Config</em></a></p> <p><em>implements</em> Countable, ArrayAccess</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/config/adapter/ini.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Reads ini files and converts them to Phalcon\\Config objects. Given the next configuration file:</p> <pre class=\"highlight-ini\" data-language=\"ini\">[database]\n   adapter = Mysql\n   host = localhost\n   username = scott\n   password = cheetah\n   dbname = test_db\n\n   [phalcon]\n   controllersDir = \"../app/controllers/\"\n   modelsDir = \"../app/models/\"\n   viewsDir = \"../app/views/\"\n\nYou can read it as follows:\n</pre> <pre class=\"highlight-php\" data-language=\"php\">$config = new Phalcon\\Config\\Adapter\\Ini(\"path/config.ini\");\n   echo $config-&gt;phalcon-&gt;controllersDir;\n   echo $config-&gt;database-&gt;username;\n\nPHP constants may also be parsed in the ini file, so if you define a constant as an ini value before calling the constructor, the constant's value will be integrated into the results. To use it this way you must specify the optional second parameter as INI_SCANNER_NORMAL when calling the constructor:\n</pre> <pre class=\"highlight-php\" data-language=\"php\">$config = new Phalcon\\Config\\Adapter\\Ini(\"path/config-with-constants.ini\", INI_SCANNER_NORMAL);\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $filePath, [<em>mixed</em> $mode])</h3> <p>Phalcon\\Config\\Adapter\\Ini constructor</p> <h3 id=\"_parseinistring\" class=\"method-signature\">protected <strong>_parseIniString</strong> (<em>mixed</em> $path, <em>mixed</em> $value)</h3> <p>Build multidimensional array from string</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;_parseIniString('path.hello.world', 'value for last key');\n\n // result\n [\n      'path' =&gt; [\n          'hello' =&gt; [\n              'world' =&gt; 'value for last key',\n          ],\n      ],\n ];\n</pre> <h3 id=\"_cast\" class=\"method-signature\">private <strong>_cast</strong> (<em>mixed</em> $ini)</h3> <p>We have to cast values manually because parse_ini_file() has a poor implementation.</p> <h3 id=\"offsetexists\" class=\"method-signature\">public <strong>offsetExists</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Allows to check whether an attribute is defined using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump(isset($config['database']));\n</pre> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $index, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Gets an attribute from the configuration, if the attribute isn’t defined returns null If the value is exactly null or is not defined the default value will be used instead</p> <pre class=\"highlight-php\" data-language=\"php\">echo $config-&gt;get('controllersDir', '../app/controllers/');\n</pre> <h3 id=\"offsetget\" class=\"method-signature\">public <strong>offsetGet</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Gets an attribute using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($config['database']);\n</pre> <h3 id=\"offsetset\" class=\"method-signature\">public <strong>offsetSet</strong> (<em>mixed</em> $index, <em>mixed</em> $value) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Sets an attribute using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">$config['database'] = array('type' =&gt; 'Sqlite');\n</pre> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Unsets an attribute using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">unset($config['database']);\n</pre> <h3 id=\"merge\" class=\"method-signature\">public <strong>merge</strong> (<a class=\"reference internal\" href=\"phalcon_config\"><em>Phalcon\\Config</em></a> $config) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Merges a configuration into the current one</p> <pre class=\"highlight-php\" data-language=\"php\">$appConfig = new \\Phalcon\\Config(array('database' =&gt; array('host' =&gt; 'localhost')));\n $globalConfig-&gt;merge($config2);\n</pre> <h3 id=\"toarray\" class=\"method-signature\">public <strong>toArray</strong> () <small>inherited from Phalcon\\Config</small>\n</h3> <p>Converts recursively the object to an array</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($config-&gt;toArray());\n</pre> <h3 id=\"count\" class=\"method-signature\">public <strong>count</strong> () <small>inherited from Phalcon\\Config</small>\n</h3> <p>Returns the count of properties set in the config</p> <pre class=\"highlight-php\" data-language=\"php\">print count($config);\n</pre> <p>or</p> <pre class=\"highlight-php\" data-language=\"php\">print $config-&gt;count();\n</pre> <h3 id=\"__set_state\" class=\"method-signature\">public static <strong>__set_state</strong> (<em>array</em> $data) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Restores the state of a Phalcon\\Config object</p> <h3 id=\"_merge\" class=\"method-signature\">final protected <em>Config merged config</em> <strong>_merge</strong> (<em>Config</em> $config, [<em>mixed</em> $instance]) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Helper method for merge configs (forwarding nested config instance)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Adapter_Ini.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Adapter_Ini.html</a>\n  </p>\n</div>\n","api/phalcon_cli_task":"<h1 id=\"class-phalcon-cli-task\">Class <strong>Phalcon\\Cli\\Task</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_di_injectable\"><em>Phalcon\\Di\\Injectable</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_cli_taskinterface\"><em>Phalcon\\Cli\\TaskInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/task.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Every command-line task should extend this class that encapsulates all the task functionality A task can be used to run “tasks” such as migrations, cronjobs, unit-tests, or anything that you want. The Task class should at least have a “mainAction” method</p> <pre class=\"highlight-php\" data-language=\"php\">class HelloTask extends \\Phalcon\\Cli\\Task\n{\n\n  // This action will be executed by default\n  public function mainAction()\n  {\n\n  }\n\n  public function findAction()\n  {\n\n  }\n\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">final public <strong>__construct</strong> ()</h3> <p>Phalcon\\Cli\\Task constructor</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $propertyName) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Magic method __get</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Task.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Task.html</a>\n  </p>\n</div>\n","api/phalcon_config_exception":"<h1 id=\"class-phalcon-config-exception\">Class <strong>Phalcon\\Config\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/config/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_config":"<h1 id=\"class-phalcon-config\">Class <strong>Phalcon\\Config</strong>\n</h1> <p><em>implements</em> ArrayAccess, Countable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/config.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Phalcon\\Config is designed to simplify the access to, and the use of, configuration data within applications. It provides a nested object property based user interface for accessing this configuration data within application code.</p> <pre class=\"highlight-php\" data-language=\"php\">$config = new \\Phalcon\\Config(array(\n    \"database\" =&gt; array(\n            \"adapter\" =&gt; \"Mysql\",\n            \"host\" =&gt; \"localhost\",\n            \"username\" =&gt; \"scott\",\n            \"password\" =&gt; \"cheetah\",\n            \"dbname\" =&gt; \"test_db\"\n    ),\n    \"phalcon\" =&gt; array(\n            \"controllersDir\" =&gt; \"../app/controllers/\",\n            \"modelsDir\" =&gt; \"../app/models/\",\n            \"viewsDir\" =&gt; \"../app/views/\"\n    )\n ));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $arrayConfig])</h3> <p>Phalcon\\Config constructor</p> <h3 id=\"offsetexists\" class=\"method-signature\">public <strong>offsetExists</strong> (<em>mixed</em> $index)</h3> <p>Allows to check whether an attribute is defined using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump(isset($config['database']));\n</pre> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $index, [<em>mixed</em> $defaultValue])</h3> <p>Gets an attribute from the configuration, if the attribute isn’t defined returns null If the value is exactly null or is not defined the default value will be used instead</p> <pre class=\"highlight-php\" data-language=\"php\">echo $config-&gt;get('controllersDir', '../app/controllers/');\n</pre> <h3 id=\"offsetget\" class=\"method-signature\">public <strong>offsetGet</strong> (<em>mixed</em> $index)</h3> <p>Gets an attribute using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($config['database']);\n</pre> <h3 id=\"offsetset\" class=\"method-signature\">public <strong>offsetSet</strong> (<em>mixed</em> $index, <em>mixed</em> $value)</h3> <p>Sets an attribute using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">$config['database'] = array('type' =&gt; 'Sqlite');\n</pre> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>mixed</em> $index)</h3> <p>Unsets an attribute using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">unset($config['database']);\n</pre> <h3 id=\"merge\" class=\"method-signature\">public <strong>merge</strong> (<a class=\"reference internal\" href=\"phalcon_config\"><em>Phalcon\\Config</em></a> $config)</h3> <p>Merges a configuration into the current one</p> <pre class=\"highlight-php\" data-language=\"php\">$appConfig = new \\Phalcon\\Config(array('database' =&gt; array('host' =&gt; 'localhost')));\n $globalConfig-&gt;merge($config2);\n</pre> <h3 id=\"toarray\" class=\"method-signature\">public <strong>toArray</strong> ()</h3> <p>Converts recursively the object to an array</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($config-&gt;toArray());\n</pre> <h3 id=\"count\" class=\"method-signature\">public <strong>count</strong> ()</h3> <p>Returns the count of properties set in the config</p> <pre class=\"highlight-php\" data-language=\"php\">print count($config);\n</pre> <p>or</p> <pre class=\"highlight-php\" data-language=\"php\">print $config-&gt;count();\n</pre> <h3 id=\"__set_state\" class=\"method-signature\">public static <strong>__set_state</strong> (<em>array</em> $data)</h3> <p>Restores the state of a Phalcon\\Config object</p> <h3 id=\"_merge\" class=\"method-signature\">final protected <em>Config merged config</em> <strong>_merge</strong> (<em>Config</em> $config, [<em>mixed</em> $instance])</h3> <p>Helper method for merge configs (forwarding nested config instance)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Config.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Config.html</a>\n  </p>\n</div>\n","api/phalcon_crypt_exception":"<h1 id=\"class-phalcon-crypt-exception\">Class <strong>Phalcon\\Crypt\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/crypt/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Crypt_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Crypt_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_config_adapter_json":"<h1 id=\"class-phalcon-config-adapter-json\">Class <strong>Phalcon\\Config\\Adapter\\Json</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_config\"><em>Phalcon\\Config</em></a></p> <p><em>implements</em> Countable, ArrayAccess</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/config/adapter/json.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Reads JSON files and converts them to Phalcon\\Config objects. Given the following configuration file:</p> <pre class=\"highlight-php\" data-language=\"php\">{\"phalcon\":{\"baseuri\":\"\\/phalcon\\/\"},\"models\":{\"metadata\":\"memory\"}}\n\nYou can read it as follows:\n</pre> <pre class=\"highlight-php\" data-language=\"php\">$config = new Phalcon\\Config\\Adapter\\Json(\"path/config.json\");\n echo $config-&gt;phalcon-&gt;baseuri;\n echo $config-&gt;models-&gt;metadata;\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $filePath)</h3> <p>Phalcon\\Config\\Adapter\\Json constructor</p> <h3 id=\"offsetexists\" class=\"method-signature\">public <strong>offsetExists</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Allows to check whether an attribute is defined using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump(isset($config['database']));\n</pre> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $index, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Gets an attribute from the configuration, if the attribute isn’t defined returns null If the value is exactly null or is not defined the default value will be used instead</p> <pre class=\"highlight-php\" data-language=\"php\">echo $config-&gt;get('controllersDir', '../app/controllers/');\n</pre> <h3 id=\"offsetget\" class=\"method-signature\">public <strong>offsetGet</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Gets an attribute using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($config['database']);\n</pre> <h3 id=\"offsetset\" class=\"method-signature\">public <strong>offsetSet</strong> (<em>mixed</em> $index, <em>mixed</em> $value) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Sets an attribute using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">$config['database'] = array('type' =&gt; 'Sqlite');\n</pre> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Unsets an attribute using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">unset($config['database']);\n</pre> <h3 id=\"merge\" class=\"method-signature\">public <strong>merge</strong> (<a class=\"reference internal\" href=\"phalcon_config\"><em>Phalcon\\Config</em></a> $config) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Merges a configuration into the current one</p> <pre class=\"highlight-php\" data-language=\"php\">$appConfig = new \\Phalcon\\Config(array('database' =&gt; array('host' =&gt; 'localhost')));\n $globalConfig-&gt;merge($config2);\n</pre> <h3 id=\"toarray\" class=\"method-signature\">public <strong>toArray</strong> () <small>inherited from Phalcon\\Config</small>\n</h3> <p>Converts recursively the object to an array</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($config-&gt;toArray());\n</pre> <h3 id=\"count\" class=\"method-signature\">public <strong>count</strong> () <small>inherited from Phalcon\\Config</small>\n</h3> <p>Returns the count of properties set in the config</p> <pre class=\"highlight-php\" data-language=\"php\">print count($config);\n</pre> <p>or</p> <pre class=\"highlight-php\" data-language=\"php\">print $config-&gt;count();\n</pre> <h3 id=\"__set_state\" class=\"method-signature\">public static <strong>__set_state</strong> (<em>array</em> $data) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Restores the state of a Phalcon\\Config object</p> <h3 id=\"_merge\" class=\"method-signature\">final protected <em>Config merged config</em> <strong>_merge</strong> (<em>Config</em> $config, [<em>mixed</em> $instance]) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Helper method for merge configs (forwarding nested config instance)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Adapter_Json.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Adapter_Json.html</a>\n  </p>\n</div>\n","api/phalcon_crypt":"<h1 id=\"class-phalcon-crypt\">Class <strong>Phalcon\\Crypt</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_cryptinterface\"><em>Phalcon\\CryptInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/crypt.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Provides encryption facilities to phalcon applications</p> <pre class=\"highlight-php\" data-language=\"php\">$crypt = new \\Phalcon\\Crypt();\n\n$key = 'le password';\n$text = 'This is a secret text';\n\n$encrypted = $crypt-&gt;encrypt($text, $key);\n\necho $crypt-&gt;decrypt($encrypted, $key);\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"padding_default\" class=\"method-signature\">\n<em>integer</em> <strong>PADDING_DEFAULT</strong>\n</h3> <h3 id=\"padding_ansi_x_923\" class=\"method-signature\">\n<em>integer</em> <strong>PADDING_ANSI_X_923</strong>\n</h3> <h3 id=\"padding_pkcs7\" class=\"method-signature\">\n<em>integer</em> <strong>PADDING_PKCS7</strong>\n</h3> <h3 id=\"padding_iso_10126\" class=\"method-signature\">\n<em>integer</em> <strong>PADDING_ISO_10126</strong>\n</h3> <h3 id=\"padding_iso_iec_7816_4\" class=\"method-signature\">\n<em>integer</em> <strong>PADDING_ISO_IEC_7816_4</strong>\n</h3> <h3 id=\"padding_zero\" class=\"method-signature\">\n<em>integer</em> <strong>PADDING_ZERO</strong>\n</h3> <h3 id=\"padding_space\" class=\"method-signature\">\n<em>integer</em> <strong>PADDING_SPACE</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"setpadding\" class=\"method-signature\">public <strong>setPadding</strong> (<em>mixed</em> $scheme)</h3> <p>Changes the padding scheme used</p> <h3 id=\"setcipher\" class=\"method-signature\">public <strong>setCipher</strong> (<em>mixed</em> $cipher)</h3> <p>Sets the cipher algorithm</p> <h3 id=\"getcipher\" class=\"method-signature\">public <strong>getCipher</strong> ()</h3> <p>Returns the current cipher</p> <h3 id=\"setkey\" class=\"method-signature\">public <strong>setKey</strong> (<em>mixed</em> $key)</h3> <p>Sets the encryption key</p> <h3 id=\"getkey\" class=\"method-signature\">public <strong>getKey</strong> ()</h3> <p>Returns the encryption key</p> <h3 id=\"_cryptpadtext\" class=\"method-signature\">protected <strong>_cryptPadText</strong> (<em>mixed</em> $text, <em>mixed</em> $mode, <em>mixed</em> $blockSize, <em>mixed</em> $paddingType)</h3> <p>Pads texts before encryption</p> <h3 id=\"_cryptunpadtext\" class=\"method-signature\">protected <strong>_cryptUnpadText</strong> (<em>mixed</em> $text, <em>mixed</em> $mode, <em>mixed</em> $blockSize, <em>mixed</em> $paddingType)</h3> <p>If the function detects that the text was not padded, it will return it unmodified</p> <h3 id=\"encrypt\" class=\"method-signature\">public <strong>encrypt</strong> (<em>mixed</em> $text, [<em>mixed</em> $key])</h3> <p>Encrypts a text</p> <pre class=\"highlight-php\" data-language=\"php\">$encrypted = $crypt-&gt;encrypt(\"Ultra-secret text\", \"encrypt password\");\n</pre> <h3 id=\"decrypt\" class=\"method-signature\">public <strong>decrypt</strong> (<em>mixed</em> $text, [<em>mixed</em> $key])</h3> <p>Decrypts an encrypted text</p> <pre class=\"highlight-php\" data-language=\"php\">echo $crypt-&gt;decrypt($encrypted, \"decrypt password\");\n</pre> <h3 id=\"encryptbase64\" class=\"method-signature\">public <strong>encryptBase64</strong> (<em>mixed</em> $text, [<em>mixed</em> $key], [<em>mixed</em> $safe])</h3> <p>Encrypts a text returning the result as a base64 string</p> <h3 id=\"decryptbase64\" class=\"method-signature\">public <strong>decryptBase64</strong> (<em>mixed</em> $text, [<em>mixed</em> $key], [<em>mixed</em> $safe])</h3> <p>Decrypt a text that is coded as a base64 string</p> <h3 id=\"getavailableciphers\" class=\"method-signature\">public <strong>getAvailableCiphers</strong> ()</h3> <p>Returns a list of available ciphers</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Crypt.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Crypt.html</a>\n  </p>\n</div>\n","api/phalcon_config_adapter_php":"<h1 id=\"class-phalcon-config-adapter-php\">Class <strong>Phalcon\\Config\\Adapter\\Php</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_config\"><em>Phalcon\\Config</em></a></p> <p><em>implements</em> Countable, ArrayAccess</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/config/adapter/php.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Reads php files and converts them to Phalcon\\Config objects. Given the next configuration file:</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php\n  return array(\n   'database' =&gt; array(\n       'adapter' =&gt; 'Mysql',\n       'host' =&gt; 'localhost',\n       'username' =&gt; 'scott',\n       'password' =&gt; 'cheetah',\n       'dbname' =&gt; 'test_db'\n   ),\n\n   'phalcon' =&gt; array(\n      'controllersDir' =&gt; '../app/controllers/',\n      'modelsDir' =&gt; '../app/models/',\n      'viewsDir' =&gt; '../app/views/'\n  ));\n\nYou can read it as follows:\n</pre> <pre class=\"highlight-php\" data-language=\"php\">$config = new Phalcon\\Config\\Adapter\\Php(\"path/config.php\");\n echo $config-&gt;phalcon-&gt;controllersDir;\n echo $config-&gt;database-&gt;username;\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $filePath)</h3> <p>Phalcon\\Config\\Adapter\\Php constructor</p> <h3 id=\"offsetexists\" class=\"method-signature\">public <strong>offsetExists</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Allows to check whether an attribute is defined using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump(isset($config['database']));\n</pre> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $index, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Gets an attribute from the configuration, if the attribute isn’t defined returns null If the value is exactly null or is not defined the default value will be used instead</p> <pre class=\"highlight-php\" data-language=\"php\">echo $config-&gt;get('controllersDir', '../app/controllers/');\n</pre> <h3 id=\"offsetget\" class=\"method-signature\">public <strong>offsetGet</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Gets an attribute using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($config['database']);\n</pre> <h3 id=\"offsetset\" class=\"method-signature\">public <strong>offsetSet</strong> (<em>mixed</em> $index, <em>mixed</em> $value) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Sets an attribute using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">$config['database'] = array('type' =&gt; 'Sqlite');\n</pre> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Unsets an attribute using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">unset($config['database']);\n</pre> <h3 id=\"merge\" class=\"method-signature\">public <strong>merge</strong> (<a class=\"reference internal\" href=\"phalcon_config\"><em>Phalcon\\Config</em></a> $config) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Merges a configuration into the current one</p> <pre class=\"highlight-php\" data-language=\"php\">$appConfig = new \\Phalcon\\Config(array('database' =&gt; array('host' =&gt; 'localhost')));\n $globalConfig-&gt;merge($config2);\n</pre> <h3 id=\"toarray\" class=\"method-signature\">public <strong>toArray</strong> () <small>inherited from Phalcon\\Config</small>\n</h3> <p>Converts recursively the object to an array</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($config-&gt;toArray());\n</pre> <h3 id=\"count\" class=\"method-signature\">public <strong>count</strong> () <small>inherited from Phalcon\\Config</small>\n</h3> <p>Returns the count of properties set in the config</p> <pre class=\"highlight-php\" data-language=\"php\">print count($config);\n</pre> <p>or</p> <pre class=\"highlight-php\" data-language=\"php\">print $config-&gt;count();\n</pre> <h3 id=\"__set_state\" class=\"method-signature\">public static <strong>__set_state</strong> (<em>array</em> $data) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Restores the state of a Phalcon\\Config object</p> <h3 id=\"_merge\" class=\"method-signature\">final protected <em>Config merged config</em> <strong>_merge</strong> (<em>Config</em> $config, [<em>mixed</em> $instance]) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Helper method for merge configs (forwarding nested config instance)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Adapter_Php.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Adapter_Php.html</a>\n  </p>\n</div>\n","api/phalcon_db_adapter":"<h1 id=\"abstract-class-phalcon-db-adapter\">Abstract class <strong>Phalcon\\Db\\Adapter</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/adapter.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Base class for Phalcon\\Db adapters</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getdialecttype\" class=\"method-signature\">public <strong>getDialectType</strong> ()</h3> <p>Name of the dialect used</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> ()</h3> <p>Type of database system the adapter is used for</p> <h3 id=\"getsqlvariables\" class=\"method-signature\">public <strong>getSqlVariables</strong> ()</h3> <p>Active SQL bound parameter variables</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $descriptor)</h3> <p>Phalcon\\Db\\Adapter constructor</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager)</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> ()</h3> <p>Returns the internal event manager</p> <h3 id=\"setdialect\" class=\"method-signature\">public <strong>setDialect</strong> (<a class=\"reference internal\" href=\"phalcon_db_dialectinterface\"><em>Phalcon\\Db\\DialectInterface</em></a> $dialect)</h3> <p>Sets the dialect used to produce the SQL</p> <h3 id=\"getdialect\" class=\"method-signature\">public <strong>getDialect</strong> ()</h3> <p>Returns internal dialect instance</p> <h3 id=\"fetchone\" class=\"method-signature\">public <strong>fetchOne</strong> (<em>mixed</em> $sqlQuery, [<em>mixed</em> $fetchMode], [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes])</h3> <p>Returns the first row in a SQL query result</p> <pre class=\"highlight-php\" data-language=\"php\">//Getting first robot\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n//Getting first robot with associative indexes only\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\", Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n</pre> <h3 id=\"fetchall\" class=\"method-signature\">public <em>array</em> <strong>fetchAll</strong> (<em>string</em> $sqlQuery, [<em>int</em> $fetchMode], [<em>array</em> $bindParams], [<em>array</em> $bindTypes])</h3> <p>Dumps the complete result of a query into an array</p> <pre class=\"highlight-php\" data-language=\"php\">//Getting all robots with associative indexes only\n$robots = $connection-&gt;fetchAll(\"SELECT * FROM robots\", Phalcon\\Db::FETCH_ASSOC);\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n  //Getting all robots that contains word \"robot\" withing the name\n  $robots = $connection-&gt;fetchAll(\"SELECT * FROM robots WHERE name LIKE :name\",\n    Phalcon\\Db::FETCH_ASSOC,\n    array('name' =&gt; '%robot%')\n  );\nforeach($robots as $robot){\n    print_r($robot);\n}\n</pre> <h3 id=\"fetchcolumn\" class=\"method-signature\">public <em>string|</em> <strong>fetchColumn</strong> (<em>string</em> $sqlQuery, [<em>array</em> $placeholders], [<em>int|string</em> $column])</h3> <p>Returns the n’th field of first row in a SQL query result</p> <pre class=\"highlight-php\" data-language=\"php\">//Getting count of robots\n$robotsCount = $connection-&gt;fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n//Getting name of last edited robot\n$robot = $connection-&gt;fetchColumn(\"SELECT id, name FROM robots order by modified desc\", 1);\nprint_r($robot);\n</pre> <h3 id=\"insert\" class=\"method-signature\">public <em>boolean</em> <strong>insert</strong> (<em>string|array</em> $table, <em>array</em> $values, [<em>array</em> $fields], [<em>array</em> $dataTypes])</h3> <p>Inserts data into a table using custom RDBMS SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">// Inserting a new robot\n $success = $connection-&gt;insert(\n \"robots\",\n array(\"Astro Boy\", 1952),\n array(\"name\", \"year\")\n );\n\n // Next SQL sentence is sent to the database system\n INSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</pre> <h3 id=\"insertasdict\" class=\"method-signature\">public <em>boolean</em> <strong>insertAsDict</strong> (<em>string</em> $table, <em>array</em> $data, [<em>array</em> $dataTypes])</h3> <p>Inserts data into a table using custom RBDM SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot\n $success = $connection-&gt;insertAsDict(\n \"robots\",\n array(\n      \"name\" =&gt; \"Astro Boy\",\n      \"year\" =&gt; 1952\n  )\n );\n\n //Next SQL sentence is sent to the database system\n INSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</pre> <h3 id=\"update\" class=\"method-signature\">public <em>boolean</em> <strong>update</strong> (<em>string|array</em> $table, <em>array</em> $fields, <em>array</em> $values, [<em>string|array</em> $whereCondition], [<em>array</em> $dataTypes])</h3> <p>Updates data on a table using custom RBDM SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Updating existing robot\n $success = $connection-&gt;update(\n \"robots\",\n array(\"name\"),\n array(\"New Astro Boy\"),\n \"id = 101\"\n );\n\n //Next SQL sentence is sent to the database system\n UPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n //Updating existing robot with array condition and $dataTypes\n $success = $connection-&gt;update(\n \"robots\",\n array(\"name\"),\n array(\"New Astro Boy\"),\n array(\n     'conditions' =&gt; \"id = ?\",\n     'bind' =&gt; array($some_unsafe_id),\n     'bindTypes' =&gt; array(PDO::PARAM_INT) //use only if you use $dataTypes param\n ),\n array(PDO::PARAM_STR)\n );\n</pre> <p>Warning! If $whereCondition is string it not escaped.</p> <h3 id=\"updateasdict\" class=\"method-signature\">public <em>boolean</em> <strong>updateAsDict</strong> (<em>string</em> $table, <em>array</em> $data, [<em>string</em> $whereCondition], [<em>array</em> $dataTypes])</h3> <p>Updates data on a table using custom RBDM SQL syntax Another, more convenient syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Updating existing robot\n $success = $connection-&gt;updateAsDict(\n \"robots\",\n array(\n      \"name\" =&gt; \"New Astro Boy\"\n  ),\n \"id = 101\"\n );\n\n //Next SQL sentence is sent to the database system\n UPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n</pre> <h3 id=\"delete\" class=\"method-signature\">public <em>boolean</em> <strong>delete</strong> (<em>string|array</em> $table, [<em>string</em> $whereCondition], [<em>array</em> $placeholders], [<em>array</em> $dataTypes])</h3> <p>Deletes data from a table using custom RBDM SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Deleting existing robot\n $success = $connection-&gt;delete(\n \"robots\",\n \"id = 101\"\n );\n\n //Next SQL sentence is generated\n DELETE FROM `robots` WHERE `id` = 101\n</pre> <h3 id=\"getcolumnlist\" class=\"method-signature\">public <em>string</em> <strong>getColumnList</strong> (<em>array</em> $columnList)</h3> <p>Gets a list of columns</p> <h3 id=\"limit\" class=\"method-signature\">public <strong>limit</strong> (<em>mixed</em> $sqlQuery, <em>mixed</em> $number)</h3> <p>Appends a LIMIT clause to $sqlQuery argument</p> <pre class=\"highlight-php\" data-language=\"php\">echo $connection-&gt;limit(\"SELECT * FROM robots\", 5);\n</pre> <h3 id=\"tableexists\" class=\"method-signature\">public <strong>tableExists</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName])</h3> <p>Generates SQL checking for the existence of a schema.table</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($connection-&gt;tableExists(\"blog\", \"posts\"));\n</pre> <h3 id=\"viewexists\" class=\"method-signature\">public <strong>viewExists</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName])</h3> <p>Generates SQL checking for the existence of a schema.view</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($connection-&gt;viewExists(\"active_users\", \"posts\"));\n</pre> <h3 id=\"forupdate\" class=\"method-signature\">public <strong>forUpdate</strong> (<em>mixed</em> $sqlQuery)</h3> <p>Returns a SQL modified with a FOR UPDATE clause</p> <h3 id=\"sharedlock\" class=\"method-signature\">public <strong>sharedLock</strong> (<em>mixed</em> $sqlQuery)</h3> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <h3 id=\"createtable\" class=\"method-signature\">public <strong>createTable</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>array</em> $definition)</h3> <p>Creates a table</p> <h3 id=\"droptable\" class=\"method-signature\">public <strong>dropTable</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists])</h3> <p>Drops a table from a schema/database</p> <h3 id=\"createview\" class=\"method-signature\">public <strong>createView</strong> (<em>mixed</em> $viewName, <em>array</em> $definition, [<em>mixed</em> $schemaName])</h3> <p>Creates a view</p> <h3 id=\"dropview\" class=\"method-signature\">public <strong>dropView</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists])</h3> <p>Drops a view</p> <h3 id=\"addcolumn\" class=\"method-signature\">public <strong>addColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column)</h3> <p>Adds a column to a table</p> <h3 id=\"modifycolumn\" class=\"method-signature\">public <strong>modifyColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column, [<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $currentColumn])</h3> <p>Modifies a table column based on a definition</p> <h3 id=\"dropcolumn\" class=\"method-signature\">public <strong>dropColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $columnName)</h3> <p>Drops a column from a table</p> <h3 id=\"addindex\" class=\"method-signature\">public <strong>addIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index)</h3> <p>Adds an index to a table</p> <h3 id=\"dropindex\" class=\"method-signature\">public <strong>dropIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $indexName)</h3> <p>Drop an index from a table</p> <h3 id=\"addprimarykey\" class=\"method-signature\">public <strong>addPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index)</h3> <p>Adds a primary key to a table</p> <h3 id=\"dropprimarykey\" class=\"method-signature\">public <strong>dropPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName)</h3> <p>Drops a table’s primary key</p> <h3 id=\"addforeignkey\" class=\"method-signature\">public <strong>addForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_referenceinterface\"><em>Phalcon\\Db\\ReferenceInterface</em></a> $reference)</h3> <p>Adds a foreign key to a table</p> <h3 id=\"dropforeignkey\" class=\"method-signature\">public <strong>dropForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $referenceName)</h3> <p>Drops a foreign key from a table</p> <h3 id=\"getcolumndefinition\" class=\"method-signature\">public <strong>getColumnDefinition</strong> (<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column)</h3> <p>Returns the SQL column definition from a column</p> <h3 id=\"listtables\" class=\"method-signature\">public <strong>listTables</strong> ([<em>mixed</em> $schemaName])</h3> <p>List all tables on a database</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;listTables(\"blog\"));\n</pre> <h3 id=\"listviews\" class=\"method-signature\">public <strong>listViews</strong> ([<em>mixed</em> $schemaName])</h3> <p>List all views on a database</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;listViews(\"blog\"));\n</pre> <h3 id=\"describeindexes\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_db_index\"><em>Phalcon\\Db\\Index</em></a> [] <strong>describeIndexes</strong> (<em>string</em> $table, [<em>string</em> $schema])</h3> <p>Lists table indexes</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;describeIndexes('robots_parts'));\n</pre> <h3 id=\"describereferences\" class=\"method-signature\">public <strong>describeReferences</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>Lists table references</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;describeReferences('robots_parts'));\n</pre> <h3 id=\"tableoptions\" class=\"method-signature\">public <strong>tableOptions</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName])</h3> <p>Gets creation options from a table</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;tableOptions('robots'));\n</pre> <h3 id=\"createsavepoint\" class=\"method-signature\">public <strong>createSavepoint</strong> (<em>mixed</em> $name)</h3> <p>Creates a new savepoint</p> <h3 id=\"releasesavepoint\" class=\"method-signature\">public <strong>releaseSavepoint</strong> (<em>mixed</em> $name)</h3> <p>Releases given savepoint</p> <h3 id=\"rollbacksavepoint\" class=\"method-signature\">public <strong>rollbackSavepoint</strong> (<em>mixed</em> $name)</h3> <p>Rollbacks given savepoint</p> <h3 id=\"setnestedtransactionswithsavepoints\" class=\"method-signature\">public <strong>setNestedTransactionsWithSavepoints</strong> (<em>mixed</em> $nestedTransactionsWithSavepoints)</h3> <p>Set if nested transactions should use savepoints</p> <h3 id=\"isnestedtransactionswithsavepoints\" class=\"method-signature\">public <strong>isNestedTransactionsWithSavepoints</strong> ()</h3> <p>Returns if nested transactions should use savepoints</p> <h3 id=\"getnestedtransactionsavepointname\" class=\"method-signature\">public <strong>getNestedTransactionSavepointName</strong> ()</h3> <p>Returns the savepoint name to use for nested transactions</p> <h3 id=\"getdefaultidvalue\" class=\"method-signature\">public <strong>getDefaultIdValue</strong> ()</h3> <p>Returns the default identity value to be inserted in an identity column</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot with a valid default value for the column 'id'\n $success = $connection-&gt;insert(\n \"robots\",\n array($connection-&gt;getDefaultIdValue(), \"Astro Boy\", 1952),\n array(\"id\", \"name\", \"year\")\n );\n</pre> <h3 id=\"getdefaultvalue\" class=\"method-signature\">public <strong>getDefaultValue</strong> ()</h3> <p>Returns the default value to make the RBDM use the default value declared in the table definition</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot with a valid default value for the column 'year'\n $success = $connection-&gt;insert(\n \"robots\",\n array(\"Astro Boy\", $connection-&gt;getDefaultValue()),\n array(\"name\", \"year\")\n );\n</pre> <h3 id=\"supportsequences\" class=\"method-signature\">public <strong>supportSequences</strong> ()</h3> <p>Check whether the database system requires a sequence to produce auto-numeric values</p> <h3 id=\"useexplicitidvalue\" class=\"method-signature\">public <strong>useExplicitIdValue</strong> ()</h3> <p>Check whether the database system requires an explicit value for identity columns</p> <h3 id=\"getdescriptor\" class=\"method-signature\">public <strong>getDescriptor</strong> ()</h3> <p>Return descriptor used to connect to the active database</p> <h3 id=\"getconnectionid\" class=\"method-signature\">public <em>string</em> <strong>getConnectionId</strong> ()</h3> <p>Gets the active connection unique identifier</p> <h3 id=\"getsqlstatement\" class=\"method-signature\">public <strong>getSQLStatement</strong> ()</h3> <p>Active SQL statement in the object</p> <h3 id=\"getrealsqlstatement\" class=\"method-signature\">public <strong>getRealSQLStatement</strong> ()</h3> <p>Active SQL statement in the object without replace bound paramters</p> <h3 id=\"getsqlbindtypes\" class=\"method-signature\">public <em>array</em> <strong>getSQLBindTypes</strong> ()</h3> <p>Active SQL statement in the object</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter.html</a>\n  </p>\n</div>\n","api/phalcon_config_adapter_yaml":"<h1 id=\"class-phalcon-config-adapter-yaml\">Class <strong>Phalcon\\Config\\Adapter\\Yaml</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_config\"><em>Phalcon\\Config</em></a></p> <p><em>implements</em> Countable, ArrayAccess</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/config/adapter/yaml.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Reads YAML files and converts them to Phalcon\\Config objects. Given the following configuration file:</p> <pre class=\"highlight-php\" data-language=\"php\">phalcon:\n     baseuri:        /phalcon/\n     controllersDir: !approot  /app/controllers/\n   models:\n     metadata: memory\n\nYou can read it as follows:\n</pre> <pre class=\"highlight-php\" data-language=\"php\">define('APPROOT', dirname(__DIR__));\n\n $config = new Phalcon\\Config\\Adapter\\Yaml(\"path/config.yaml\", [\n     '!approot' =&gt; function($value) {\n         return APPROOT . $value;\n     }\n ]);\n\n echo $config-&gt;phalcon-&gt;controllersDir;\n echo $config-&gt;phalcon-&gt;baseuri;\n echo $config-&gt;models-&gt;metadata;\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $filePath, [<em>array</em> $callbacks])</h3> <p>Phalcon\\Config\\Adapter\\Yaml constructor</p> <h3 id=\"offsetexists\" class=\"method-signature\">public <strong>offsetExists</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Allows to check whether an attribute is defined using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump(isset($config['database']));\n</pre> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $index, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Gets an attribute from the configuration, if the attribute isn’t defined returns null If the value is exactly null or is not defined the default value will be used instead</p> <pre class=\"highlight-php\" data-language=\"php\">echo $config-&gt;get('controllersDir', '../app/controllers/');\n</pre> <h3 id=\"offsetget\" class=\"method-signature\">public <strong>offsetGet</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Gets an attribute using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($config['database']);\n</pre> <h3 id=\"offsetset\" class=\"method-signature\">public <strong>offsetSet</strong> (<em>mixed</em> $index, <em>mixed</em> $value) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Sets an attribute using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">$config['database'] = array('type' =&gt; 'Sqlite');\n</pre> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Unsets an attribute using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">unset($config['database']);\n</pre> <h3 id=\"merge\" class=\"method-signature\">public <strong>merge</strong> (<a class=\"reference internal\" href=\"phalcon_config\"><em>Phalcon\\Config</em></a> $config) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Merges a configuration into the current one</p> <pre class=\"highlight-php\" data-language=\"php\">$appConfig = new \\Phalcon\\Config(array('database' =&gt; array('host' =&gt; 'localhost')));\n $globalConfig-&gt;merge($config2);\n</pre> <h3 id=\"toarray\" class=\"method-signature\">public <strong>toArray</strong> () <small>inherited from Phalcon\\Config</small>\n</h3> <p>Converts recursively the object to an array</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($config-&gt;toArray());\n</pre> <h3 id=\"count\" class=\"method-signature\">public <strong>count</strong> () <small>inherited from Phalcon\\Config</small>\n</h3> <p>Returns the count of properties set in the config</p> <pre class=\"highlight-php\" data-language=\"php\">print count($config);\n</pre> <p>or</p> <pre class=\"highlight-php\" data-language=\"php\">print $config-&gt;count();\n</pre> <h3 id=\"__set_state\" class=\"method-signature\">public static <strong>__set_state</strong> (<em>array</em> $data) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Restores the state of a Phalcon\\Config object</p> <h3 id=\"_merge\" class=\"method-signature\">final protected <em>Config merged config</em> <strong>_merge</strong> (<em>Config</em> $config, [<em>mixed</em> $instance]) <small>inherited from Phalcon\\Config</small>\n</h3> <p>Helper method for merge configs (forwarding nested config instance)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Adapter_Yaml.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Config_Adapter_Yaml.html</a>\n  </p>\n</div>\n","api/phalcon_db":"<h1 id=\"abstract-class-phalcon-db\">Abstract class <strong>Phalcon\\Db</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Phalcon\\Db and its related classes provide a simple SQL database interface for Phalcon Framework. The Phalcon\\Db is the basic class you use to connect your PHP application to an RDBMS. There is a different adapter class for each brand of RDBMS. This component is intended to lower level database operations. If you want to interact with databases using higher level of abstraction use Phalcon\\Mvc\\Model. Phalcon\\Db is an abstract class. You only can use it with a database adapter like Phalcon\\Db\\Adapter\\Pdo</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db;\nuse Phalcon\\Db\\Exception;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as MysqlConnection;\n\ntry {\n\n  $connection = new MysqlConnection(array(\n     'host' =&gt; '192.168.0.11',\n     'username' =&gt; 'sigma',\n     'password' =&gt; 'secret',\n     'dbname' =&gt; 'blog',\n     'port' =&gt; '3306',\n  ));\n\n  $result = $connection-&gt;query(\"SELECT * FROM robots LIMIT 5\");\n  $result-&gt;setFetchMode(Db::FETCH_NUM);\n  while ($robot = $result-&gt;fetch()) {\n    print_r($robot);\n  }\n\n} catch (Exception $e) {\necho $e-&gt;getMessage(), PHP_EOL;\n}\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"fetch_lazy\" class=\"method-signature\">\n<em>integer</em> <strong>FETCH_LAZY</strong>\n</h3> <h3 id=\"fetch_assoc\" class=\"method-signature\">\n<em>integer</em> <strong>FETCH_ASSOC</strong>\n</h3> <h3 id=\"fetch_named\" class=\"method-signature\">\n<em>integer</em> <strong>FETCH_NAMED</strong>\n</h3> <h3 id=\"fetch_num\" class=\"method-signature\">\n<em>integer</em> <strong>FETCH_NUM</strong>\n</h3> <h3 id=\"fetch_both\" class=\"method-signature\">\n<em>integer</em> <strong>FETCH_BOTH</strong>\n</h3> <h3 id=\"fetch_obj\" class=\"method-signature\">\n<em>integer</em> <strong>FETCH_OBJ</strong>\n</h3> <h3 id=\"fetch_bound\" class=\"method-signature\">\n<em>integer</em> <strong>FETCH_BOUND</strong>\n</h3> <h3 id=\"fetch_column\" class=\"method-signature\">\n<em>integer</em> <strong>FETCH_COLUMN</strong>\n</h3> <h3 id=\"fetch_class\" class=\"method-signature\">\n<em>integer</em> <strong>FETCH_CLASS</strong>\n</h3> <h3 id=\"fetch_into\" class=\"method-signature\">\n<em>integer</em> <strong>FETCH_INTO</strong>\n</h3> <h3 id=\"fetch_func\" class=\"method-signature\">\n<em>integer</em> <strong>FETCH_FUNC</strong>\n</h3> <h3 id=\"fetch_group\" class=\"method-signature\">\n<em>integer</em> <strong>FETCH_GROUP</strong>\n</h3> <h3 id=\"fetch_unique\" class=\"method-signature\">\n<em>integer</em> <strong>FETCH_UNIQUE</strong>\n</h3> <h3 id=\"fetch_key_pair\" class=\"method-signature\">\n<em>integer</em> <strong>FETCH_KEY_PAIR</strong>\n</h3> <h3 id=\"fetch_classtype\" class=\"method-signature\">\n<em>integer</em> <strong>FETCH_CLASSTYPE</strong>\n</h3> <h3 id=\"fetch_serialize\" class=\"method-signature\">\n<em>integer</em> <strong>FETCH_SERIALIZE</strong>\n</h3> <h3 id=\"fetch_props_late\" class=\"method-signature\">\n<em>integer</em> <strong>FETCH_PROPS_LATE</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"setup\" class=\"method-signature\">public static <strong>setup</strong> (<em>array</em> $options)</h3> <p>Enables/disables options in the Database component</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db.html</a>\n  </p>\n</div>\n","api/phalcon_db_column":"<h1 id=\"class-phalcon-db-column\">Class <strong>Phalcon\\Db\\Column</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/column.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to define columns to be used on create or alter table operations</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Column as Column;\n\n //column definition\n $column = new Column(\"id\", array(\n   \"type\" =&gt; Column::TYPE_INTEGER,\n   \"size\" =&gt; 10,\n   \"unsigned\" =&gt; true,\n   \"notNull\" =&gt; true,\n   \"autoIncrement\" =&gt; true,\n   \"first\" =&gt; true\n ));\n\n //add column to existing table\n $connection-&gt;addColumn(\"robots\", null, $column);\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"type_integer\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_INTEGER</strong>\n</h3> <h3 id=\"type_date\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_DATE</strong>\n</h3> <h3 id=\"type_varchar\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_VARCHAR</strong>\n</h3> <h3 id=\"type_decimal\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_DECIMAL</strong>\n</h3> <h3 id=\"type_datetime\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_DATETIME</strong>\n</h3> <h3 id=\"type_char\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_CHAR</strong>\n</h3> <h3 id=\"type_text\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_TEXT</strong>\n</h3> <h3 id=\"type_float\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_FLOAT</strong>\n</h3> <h3 id=\"type_boolean\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_BOOLEAN</strong>\n</h3> <h3 id=\"type_double\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_DOUBLE</strong>\n</h3> <h3 id=\"type_tinyblob\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_TINYBLOB</strong>\n</h3> <h3 id=\"type_blob\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_BLOB</strong>\n</h3> <h3 id=\"type_mediumblob\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_MEDIUMBLOB</strong>\n</h3> <h3 id=\"type_longblob\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_LONGBLOB</strong>\n</h3> <h3 id=\"type_biginteger\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_BIGINTEGER</strong>\n</h3> <h3 id=\"type_json\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_JSON</strong>\n</h3> <h3 id=\"type_jsonb\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_JSONB</strong>\n</h3> <h3 id=\"type_timestamp\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_TIMESTAMP</strong>\n</h3> <h3 id=\"bind_param_null\" class=\"method-signature\">\n<em>integer</em> <strong>BIND_PARAM_NULL</strong>\n</h3> <h3 id=\"bind_param_int\" class=\"method-signature\">\n<em>integer</em> <strong>BIND_PARAM_INT</strong>\n</h3> <h3 id=\"bind_param_str\" class=\"method-signature\">\n<em>integer</em> <strong>BIND_PARAM_STR</strong>\n</h3> <h3 id=\"bind_param_blob\" class=\"method-signature\">\n<em>integer</em> <strong>BIND_PARAM_BLOB</strong>\n</h3> <h3 id=\"bind_param_bool\" class=\"method-signature\">\n<em>integer</em> <strong>BIND_PARAM_BOOL</strong>\n</h3> <h3 id=\"bind_param_decimal\" class=\"method-signature\">\n<em>integer</em> <strong>BIND_PARAM_DECIMAL</strong>\n</h3> <h3 id=\"bind_skip\" class=\"method-signature\">\n<em>integer</em> <strong>BIND_SKIP</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> ()</h3> <p>Column’s name</p> <h3 id=\"getschemaname\" class=\"method-signature\">public <strong>getSchemaName</strong> ()</h3> <p>Schema which table related is</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> ()</h3> <p>Column data type</p> <h3 id=\"gettypereference\" class=\"method-signature\">public <strong>getTypeReference</strong> ()</h3> <p>Column data type reference</p> <h3 id=\"gettypevalues\" class=\"method-signature\">public <strong>getTypeValues</strong> ()</h3> <p>Column data type values</p> <h3 id=\"getsize\" class=\"method-signature\">public <strong>getSize</strong> ()</h3> <p>Integer column size</p> <h3 id=\"getscale\" class=\"method-signature\">public <strong>getScale</strong> ()</h3> <p>Integer column number scale</p> <h3 id=\"getdefault\" class=\"method-signature\">public <strong>getDefault</strong> ()</h3> <p>Default column value</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $name, <em>array</em> $definition)</h3> <p>Phalcon\\Db\\Column constructor</p> <h3 id=\"isunsigned\" class=\"method-signature\">public <strong>isUnsigned</strong> ()</h3> <p>Returns true if number column is unsigned</p> <h3 id=\"isnotnull\" class=\"method-signature\">public <strong>isNotNull</strong> ()</h3> <p>Not null</p> <h3 id=\"isprimary\" class=\"method-signature\">public <strong>isPrimary</strong> ()</h3> <p>Column is part of the primary key?</p> <h3 id=\"isautoincrement\" class=\"method-signature\">public <strong>isAutoIncrement</strong> ()</h3> <p>Auto-Increment</p> <h3 id=\"isnumeric\" class=\"method-signature\">public <strong>isNumeric</strong> ()</h3> <p>Check whether column have an numeric type</p> <h3 id=\"isfirst\" class=\"method-signature\">public <strong>isFirst</strong> ()</h3> <p>Check whether column have first position in table</p> <h3 id=\"getafterposition\" class=\"method-signature\">public <em>string</em> <strong>getAfterPosition</strong> ()</h3> <p>Check whether field absolute to position in table</p> <h3 id=\"getbindtype\" class=\"method-signature\">public <strong>getBindType</strong> ()</h3> <p>Returns the type of bind handling</p> <h3 id=\"__set_state\" class=\"method-signature\">public static <strong>__set_state</strong> (<em>array</em> $data)</h3> <p>Restores the internal state of a Phalcon\\Db\\Column object</p> <h3 id=\"hasdefault\" class=\"method-signature\">public <strong>hasDefault</strong> ()</h3> <p>Check whether column has default value</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Column.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Column.html</a>\n  </p>\n</div>\n","api/phalcon_debug_dump":"<h1 id=\"class-phalcon-debug-dump\">Class <strong>Phalcon\\Debug\\Dump</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/debug/dump.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Dumps information about a variable(s)</p> <pre class=\"highlight-php\" data-language=\"php\">$foo = 123;\n    echo (new \\Phalcon\\Debug\\Dump())-&gt;variable($foo, \"foo\");\n</pre> <pre class=\"highlight-php\" data-language=\"php\">$foo = \"string\";\n    $bar = [\"key\" =&gt; \"value\"];\n    $baz = new stdClass();\n    echo (new \\Phalcon\\Debug\\Dump())-&gt;variables($foo, $bar, $baz);\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getdetailed\" class=\"method-signature\">public <strong>getDetailed</strong> ()</h3> <p>...</p> <h3 id=\"setdetailed\" class=\"method-signature\">public <strong>setDetailed</strong> (<em>mixed</em> $detailed)</h3> <p>...</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $styles], [<em>mixed</em> $detailed])</h3> <p>Phalcon\\Debug\\Dump constructor</p> <h3 id=\"all\" class=\"method-signature\">public <strong>all</strong> ()</h3> <p>Alias of variables() method</p> <h3 id=\"getstyle\" class=\"method-signature\">protected <strong>getStyle</strong> (<em>mixed</em> $type)</h3> <p>Get style for type</p> <h3 id=\"setstyles\" class=\"method-signature\">public <strong>setStyles</strong> ([<em>mixed</em> $styles])</h3> <p>Set styles for vars type</p> <h3 id=\"one\" class=\"method-signature\">public <strong>one</strong> (<em>mixed</em> $variable, [<em>mixed</em> $name])</h3> <p>Alias of variable() method</p> <h3 id=\"output\" class=\"method-signature\">protected <strong>output</strong> (<em>mixed</em> $variable, [<em>mixed</em> $name], [<em>mixed</em> $tab])</h3> <p>Prepare an HTML string of information about a single variable.</p> <h3 id=\"variable\" class=\"method-signature\">public <strong>variable</strong> (<em>mixed</em> $variable, [<em>mixed</em> $name])</h3> <p>Returns an HTML string of information about a single variable.</p> <pre class=\"highlight-php\" data-language=\"php\">echo (new \\Phalcon\\Debug\\Dump())-&gt;variable($foo, \"foo\");\n</pre> <h3 id=\"variables\" class=\"method-signature\">public <strong>variables</strong> ()</h3> <p>Returns an HTML string of debugging information about any number of variables, each wrapped in a “pre” tag.</p> <pre class=\"highlight-php\" data-language=\"php\">$foo = \"string\";\n    $bar = [\"key\" =&gt; \"value\"];\n    $baz = new stdClass();\n    echo (new \\Phalcon\\Debug\\Dump())-&gt;variables($foo, $bar, $baz);\n</pre> <h3 id=\"tojson\" class=\"method-signature\">public <strong>toJson</strong> (<em>mixed</em> $variable)</h3> <p>Returns an JSON string of information about a single variable.</p> <pre class=\"highlight-php\" data-language=\"php\">$foo = [\"key\" =&gt; \"value\"];\n    echo (new \\Phalcon\\Debug\\Dump())-&gt;toJson($foo);\n    $foo = new stdClass();\n    $foo-&gt;bar = 'buz';\n    echo (new \\Phalcon\\Debug\\Dump())-&gt;toJson($foo);\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Debug_Dump.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Debug_Dump.html</a>\n  </p>\n</div>\n","api/phalcon_db_index":"<h1 id=\"class-phalcon-db-index\">Class <strong>Phalcon\\Db\\Index</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/index.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to define indexes to be used on tables. Indexes are a common way to enhance database performance. An index allows the database server to find and retrieve specific rows much faster than it could do without an index</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> ()</h3> <p>Index name</p> <h3 id=\"getcolumns\" class=\"method-signature\">public <strong>getColumns</strong> ()</h3> <p>Index columns</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> ()</h3> <p>Index type</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $name, <em>array</em> $columns, [<em>mixed</em> $type])</h3> <p>Phalcon\\Db\\Index constructor</p> <h3 id=\"__set_state\" class=\"method-signature\">public static <strong>__set_state</strong> (<em>array</em> $data)</h3> <p>Restore a Phalcon\\Db\\Index object from export</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Index.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Index.html</a>\n  </p>\n</div>\n","api/phalcon_db_exception":"<h1 id=\"class-phalcon-db-exception\">Class <strong>Phalcon\\Db\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_db_profiler_item":"<h1 id=\"class-phalcon-db-profiler-item\">Class <strong>Phalcon\\Db\\Profiler\\Item</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/profiler/item.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class identifies each profile in a Phalcon\\Db\\Profiler</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setsqlstatement\" class=\"method-signature\">public <strong>setSqlStatement</strong> (<em>mixed</em> $sqlStatement)</h3> <p>SQL statement related to the profile</p> <h3 id=\"getsqlstatement\" class=\"method-signature\">public <strong>getSqlStatement</strong> ()</h3> <p>SQL statement related to the profile</p> <h3 id=\"setsqlvariables\" class=\"method-signature\">public <strong>setSqlVariables</strong> (<em>array</em> $sqlVariables)</h3> <p>SQL variables related to the profile</p> <h3 id=\"getsqlvariables\" class=\"method-signature\">public <strong>getSqlVariables</strong> ()</h3> <p>SQL variables related to the profile</p> <h3 id=\"setsqlbindtypes\" class=\"method-signature\">public <strong>setSqlBindTypes</strong> (<em>array</em> $sqlBindTypes)</h3> <p>SQL bind types related to the profile</p> <h3 id=\"getsqlbindtypes\" class=\"method-signature\">public <strong>getSqlBindTypes</strong> ()</h3> <p>SQL bind types related to the profile</p> <h3 id=\"setinitialtime\" class=\"method-signature\">public <strong>setInitialTime</strong> (<em>mixed</em> $initialTime)</h3> <p>Timestamp when the profile started</p> <h3 id=\"getinitialtime\" class=\"method-signature\">public <strong>getInitialTime</strong> ()</h3> <p>Timestamp when the profile started</p> <h3 id=\"setfinaltime\" class=\"method-signature\">public <strong>setFinalTime</strong> (<em>mixed</em> $finalTime)</h3> <p>Timestamp when the profile ended</p> <h3 id=\"getfinaltime\" class=\"method-signature\">public <strong>getFinalTime</strong> ()</h3> <p>Timestamp when the profile ended</p> <h3 id=\"gettotalelapsedseconds\" class=\"method-signature\">public <strong>getTotalElapsedSeconds</strong> ()</h3> <p>Returns the total time in seconds spent by the profile</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Profiler_Item.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Profiler_Item.html</a>\n  </p>\n</div>\n","api/phalcon_db_rawvalue":"<h1 id=\"class-phalcon-db-rawvalue\">Class <strong>Phalcon\\Db\\RawValue</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/rawvalue.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class allows to insert/update raw data without quoting or formatting. The next example shows how to use the MySQL now() function as a field value.</p> <pre class=\"highlight-php\" data-language=\"php\">$subscriber = new Subscribers();\n$subscriber-&gt;email = '[email protected]';\n$subscriber-&gt;createdAt = new \\Phalcon\\Db\\RawValue('now()');\n$subscriber-&gt;save();\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getvalue\" class=\"method-signature\">public <strong>getValue</strong> ()</h3> <p>Raw value without quoting or formatting</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> ()</h3> <p>Raw value without quoting or formatting</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $value)</h3> <p>Phalcon\\Db\\RawValue constructor</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_RawValue.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_RawValue.html</a>\n  </p>\n</div>\n","api/phalcon_db_dialect":"<h1 id=\"abstract-class-phalcon-db-dialect\">Abstract class <strong>Phalcon\\Db\\Dialect</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_db_dialectinterface\"><em>Phalcon\\Db\\DialectInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/dialect.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This is the base class to each database dialect. This implements common methods to transform intermediate code into its RDBMS related syntax</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"registercustomfunction\" class=\"method-signature\">public <strong>registerCustomFunction</strong> (<em>mixed</em> $name, <em>mixed</em> $customFunction)</h3> <p>Registers custom SQL functions</p> <h3 id=\"getcustomfunctions\" class=\"method-signature\">public <strong>getCustomFunctions</strong> ()</h3> <p>Returns registered functions</p> <h3 id=\"escapeschema\" class=\"method-signature\">final public <strong>escapeSchema</strong> (<em>mixed</em> $str, [<em>mixed</em> $escapeChar])</h3> <p>Escape Schema</p> <h3 id=\"escape\" class=\"method-signature\">final public <strong>escape</strong> (<em>mixed</em> $str, [<em>mixed</em> $escapeChar])</h3> <p>Escape identifiers</p> <h3 id=\"limit\" class=\"method-signature\">public <strong>limit</strong> (<em>mixed</em> $sqlQuery, <em>mixed</em> $number)</h3> <p>Generates the SQL for LIMIT clause</p> <pre class=\"highlight-php\" data-language=\"php\">$sql = $dialect-&gt;limit('SELECT * FROM robots', 10);\n    echo $sql; // SELECT * FROM robots LIMIT 10\n\n    $sql = $dialect-&gt;limit('SELECT * FROM robots', [10, 50]);\n    echo $sql; // SELECT * FROM robots LIMIT 10 OFFSET 50\n</pre> <h3 id=\"forupdate\" class=\"method-signature\">public <strong>forUpdate</strong> (<em>mixed</em> $sqlQuery)</h3> <p>Returns a SQL modified with a FOR UPDATE clause</p> <pre class=\"highlight-php\" data-language=\"php\">$sql = $dialect-&gt;forUpdate('SELECT * FROM robots');\n echo $sql; // SELECT * FROM robots FOR UPDATE\n</pre> <h3 id=\"sharedlock\" class=\"method-signature\">public <strong>sharedLock</strong> (<em>mixed</em> $sqlQuery)</h3> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <pre class=\"highlight-php\" data-language=\"php\">$sql = $dialect-&gt;sharedLock('SELECT * FROM robots');\n echo $sql; // SELECT * FROM robots LOCK IN SHARE MODE\n</pre> <h3 id=\"getcolumnlist\" class=\"method-signature\">final public <strong>getColumnList</strong> (<em>array</em> $columnList, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts])</h3> <p>Gets a list of columns with escaped identifiers</p> <pre class=\"highlight-php\" data-language=\"php\">echo $dialect-&gt;getColumnList(array('column1', 'column'));\n</pre> <h3 id=\"getsqlcolumn\" class=\"method-signature\">final public <strong>getSqlColumn</strong> (<em>mixed</em> $column, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts])</h3> <p>Resolve Column expressions</p> <h3 id=\"getsqlexpression\" class=\"method-signature\">public <strong>getSqlExpression</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts])</h3> <p>Transforms an intermediate representation for an expression into a database system valid expression</p> <h3 id=\"getsqltable\" class=\"method-signature\">final public <strong>getSqlTable</strong> (<em>mixed</em> $table, [<em>mixed</em> $escapeChar])</h3> <p>Transform an intermediate representation of a schema/table into a database system valid expression</p> <h3 id=\"select\" class=\"method-signature\">public <strong>select</strong> (<em>array</em> $definition)</h3> <p>Builds a SELECT statement</p> <h3 id=\"supportssavepoints\" class=\"method-signature\">public <strong>supportsSavepoints</strong> ()</h3> <p>Checks whether the platform supports savepoints</p> <h3 id=\"supportsreleasesavepoints\" class=\"method-signature\">public <strong>supportsReleaseSavepoints</strong> ()</h3> <p>Checks whether the platform supports releasing savepoints.</p> <h3 id=\"createsavepoint\" class=\"method-signature\">public <strong>createSavepoint</strong> (<em>mixed</em> $name)</h3> <p>Generate SQL to create a new savepoint</p> <h3 id=\"releasesavepoint\" class=\"method-signature\">public <strong>releaseSavepoint</strong> (<em>mixed</em> $name)</h3> <p>Generate SQL to release a savepoint</p> <h3 id=\"rollbacksavepoint\" class=\"method-signature\">public <strong>rollbackSavepoint</strong> (<em>mixed</em> $name)</h3> <p>Generate SQL to rollback a savepoint</p> <h3 id=\"getsqlexpressionscalar\" class=\"method-signature\">final protected <strong>getSqlExpressionScalar</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts])</h3> <p>Resolve Column expressions</p> <h3 id=\"getsqlexpressionobject\" class=\"method-signature\">final protected <strong>getSqlExpressionObject</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts])</h3> <p>Resolve object expressions</p> <h3 id=\"getsqlexpressionqualified\" class=\"method-signature\">final protected <strong>getSqlExpressionQualified</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar])</h3> <p>Resolve qualified expressions</p> <h3 id=\"getsqlexpressionbinaryoperations\" class=\"method-signature\">final protected <strong>getSqlExpressionBinaryOperations</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts])</h3> <p>Resolve binary operations expressions</p> <h3 id=\"getsqlexpressionunaryoperations\" class=\"method-signature\">final protected <strong>getSqlExpressionUnaryOperations</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts])</h3> <p>Resolve unary operations expressions</p> <h3 id=\"getsqlexpressionfunctioncall\" class=\"method-signature\">final protected <strong>getSqlExpressionFunctionCall</strong> (<em>array</em> $expression, <em>mixed</em> $escapeChar, [<em>mixed</em> $bindCounts])</h3> <p>Resolve function calls</p> <h3 id=\"getsqlexpressionlist\" class=\"method-signature\">final protected <strong>getSqlExpressionList</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts])</h3> <p>Resolve Lists</p> <h3 id=\"getsqlexpressionall\" class=\"method-signature\">final protected <strong>getSqlExpressionAll</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar])</h3> <p>Resolve *</p> <h3 id=\"getsqlexpressioncastvalue\" class=\"method-signature\">final protected <strong>getSqlExpressionCastValue</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts])</h3> <p>Resolve CAST of values</p> <h3 id=\"getsqlexpressionconvertvalue\" class=\"method-signature\">final protected <strong>getSqlExpressionConvertValue</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts])</h3> <p>Resolve CONVERT of values encodings</p> <h3 id=\"getsqlexpressioncase\" class=\"method-signature\">final protected <strong>getSqlExpressionCase</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts])</h3> <p>Resolve CASE expressions</p> <h3 id=\"getsqlexpressionfrom\" class=\"method-signature\">final protected <strong>getSqlExpressionFrom</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar])</h3> <p>Resolve a FROM clause</p> <h3 id=\"getsqlexpressionjoins\" class=\"method-signature\">final protected <strong>getSqlExpressionJoins</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts])</h3> <p>Resolve a JOINs clause</p> <h3 id=\"getsqlexpressionwhere\" class=\"method-signature\">final protected <strong>getSqlExpressionWhere</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts])</h3> <p>Resolve a WHERE clause</p> <h3 id=\"getsqlexpressiongroupby\" class=\"method-signature\">final protected <strong>getSqlExpressionGroupBy</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts])</h3> <p>Resolve a GROUP BY clause</p> <h3 id=\"getsqlexpressionhaving\" class=\"method-signature\">final protected <strong>getSqlExpressionHaving</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts])</h3> <p>Resolve a HAVING clause</p> <h3 id=\"getsqlexpressionorderby\" class=\"method-signature\">final protected <strong>getSqlExpressionOrderBy</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts])</h3> <p>Resolve an ORDER BY clause</p> <h3 id=\"getsqlexpressionlimit\" class=\"method-signature\">final protected <strong>getSqlExpressionLimit</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts])</h3> <p>Resolve a LIMIT clause</p> <h3 id=\"preparecolumnalias\" class=\"method-signature\">protected <strong>prepareColumnAlias</strong> (<em>mixed</em> $qualified, [<em>mixed</em> $alias], [<em>mixed</em> $escapeChar])</h3> <p>Prepares column for this RDBMS</p> <h3 id=\"preparetable\" class=\"method-signature\">protected <strong>prepareTable</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema], [<em>mixed</em> $alias], [<em>mixed</em> $escapeChar])</h3> <p>Prepares table for this RDBMS</p> <h3 id=\"preparequalified\" class=\"method-signature\">protected <strong>prepareQualified</strong> (<em>mixed</em> $column, [<em>mixed</em> $domain], [<em>mixed</em> $escapeChar])</h3> <p>Prepares qualified for this RDBMS</p> <h3 id=\"getcolumndefinition\" class=\"method-signature\">abstract public <strong>getColumnDefinition</strong> (<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"addcolumn\" class=\"method-signature\">abstract public <strong>addColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"modifycolumn\" class=\"method-signature\">abstract public <strong>modifyColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column, [<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $currentColumn]) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"dropcolumn\" class=\"method-signature\">abstract public <strong>dropColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $columnName) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"addindex\" class=\"method-signature\">abstract public <strong>addIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"dropindex\" class=\"method-signature\">abstract public <strong>dropIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $indexName) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"addprimarykey\" class=\"method-signature\">abstract public <strong>addPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"dropprimarykey\" class=\"method-signature\">abstract public <strong>dropPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"addforeignkey\" class=\"method-signature\">abstract public <strong>addForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_referenceinterface\"><em>Phalcon\\Db\\ReferenceInterface</em></a> $reference) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"dropforeignkey\" class=\"method-signature\">abstract public <strong>dropForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $referenceName) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"createtable\" class=\"method-signature\">abstract public <strong>createTable</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>array</em> $definition) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"createview\" class=\"method-signature\">abstract public <strong>createView</strong> (<em>mixed</em> $viewName, <em>array</em> $definition, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"droptable\" class=\"method-signature\">abstract public <strong>dropTable</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"dropview\" class=\"method-signature\">abstract public <strong>dropView</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists]) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"tableexists\" class=\"method-signature\">abstract public <strong>tableExists</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"viewexists\" class=\"method-signature\">abstract public <strong>viewExists</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"describecolumns\" class=\"method-signature\">abstract public <strong>describeColumns</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema]) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"listtables\" class=\"method-signature\">abstract public <strong>listTables</strong> ([<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"describeindexes\" class=\"method-signature\">abstract public <strong>describeIndexes</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema]) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"describereferences\" class=\"method-signature\">abstract public <strong>describeReferences</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema]) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p> <h3 id=\"tableoptions\" class=\"method-signature\">abstract public <strong>tableOptions</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema]) <small>inherited from Phalcon\\Db\\DialectInterface</small>\n</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect.html</a>\n  </p>\n</div>\n","api/phalcon_db_profiler":"<h1 id=\"class-phalcon-db-profiler\">Class <strong>Phalcon\\Db\\Profiler</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/profiler.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Instances of Phalcon\\Db can generate execution profiles on SQL statements sent to the relational database. Profiled information includes execution time in milliseconds. This helps you to identify bottlenecks in your applications.</p> <pre class=\"highlight-php\" data-language=\"php\">$profiler = new \\Phalcon\\Db\\Profiler();\n\n//Set the connection profiler\n$connection-&gt;setProfiler($profiler);\n\n$sql = \"SELECT buyer_name, quantity, product_name\nFROM buyers LEFT JOIN products ON\nbuyers.pid=products.id\";\n\n//Execute a SQL statement\n$connection-&gt;query($sql);\n\n//Get the last profile in the profiler\n$profile = $profiler-&gt;getLastProfile();\n\necho \"SQL Statement: \", $profile-&gt;getSQLStatement(), \"\\n\";\necho \"Start Time: \", $profile-&gt;getInitialTime(), \"\\n\";\necho \"Final Time: \", $profile-&gt;getFinalTime(), \"\\n\";\necho \"Total Elapsed Time: \", $profile-&gt;getTotalElapsedSeconds(), \"\\n\";\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"startprofile\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_db_profiler\"><em>Phalcon\\Db\\Profiler</em></a> <strong>startProfile</strong> (<em>string</em> $sqlStatement, [<em>mixed</em> $sqlVariables], [<em>mixed</em> $sqlBindTypes])</h3> <p>Starts the profile of a SQL sentence</p> <h3 id=\"stopprofile\" class=\"method-signature\">public <strong>stopProfile</strong> ()</h3> <p>Stops the active profile</p> <h3 id=\"getnumbertotalstatements\" class=\"method-signature\">public <strong>getNumberTotalStatements</strong> ()</h3> <p>Returns the total number of SQL statements processed</p> <h3 id=\"gettotalelapsedseconds\" class=\"method-signature\">public <strong>getTotalElapsedSeconds</strong> ()</h3> <p>Returns the total time in seconds spent by the profiles</p> <h3 id=\"getprofiles\" class=\"method-signature\">public <strong>getProfiles</strong> ()</h3> <p>Returns all the processed profiles</p> <h3 id=\"reset\" class=\"method-signature\">public <strong>reset</strong> ()</h3> <p>Resets the profiler, cleaning up all the profiles</p> <h3 id=\"getlastprofile\" class=\"method-signature\">public <strong>getLastProfile</strong> ()</h3> <p>Returns the last profile executed in the profiler</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Profiler.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Profiler.html</a>\n  </p>\n</div>\n","api/phalcon_db_dialect_sqlite":"<h1 id=\"class-phalcon-db-dialect-sqlite\">Class <strong>Phalcon\\Db\\Dialect\\Sqlite</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_db_dialect\"><em>Phalcon\\Db\\Dialect</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_db_dialectinterface\"><em>Phalcon\\Db\\DialectInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/dialect/sqlite.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Generates database specific SQL for the Sqlite RDBMS</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getcolumndefinition\" class=\"method-signature\">public <strong>getColumnDefinition</strong> (<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column)</h3> <p>Gets the column name in SQLite</p> <h3 id=\"addcolumn\" class=\"method-signature\">public <strong>addColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column)</h3> <p>Generates SQL to add a column to a table</p> <h3 id=\"modifycolumn\" class=\"method-signature\">public <strong>modifyColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column, [<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $currentColumn])</h3> <p>Generates SQL to modify a column in a table</p> <h3 id=\"dropcolumn\" class=\"method-signature\">public <strong>dropColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $columnName)</h3> <p>Generates SQL to delete a column from a table</p> <h3 id=\"addindex\" class=\"method-signature\">public <strong>addIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index)</h3> <p>Generates SQL to add an index to a table</p> <h3 id=\"dropindex\" class=\"method-signature\">public <strong>dropIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $indexName)</h3> <p>Generates SQL to delete an index from a table</p> <h3 id=\"addprimarykey\" class=\"method-signature\">public <strong>addPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index)</h3> <p>Generates SQL to add the primary key to a table</p> <h3 id=\"dropprimarykey\" class=\"method-signature\">public <strong>dropPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName)</h3> <p>Generates SQL to delete primary key from a table</p> <h3 id=\"addforeignkey\" class=\"method-signature\">public <strong>addForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_referenceinterface\"><em>Phalcon\\Db\\ReferenceInterface</em></a> $reference)</h3> <p>Generates SQL to add an index to a table</p> <h3 id=\"dropforeignkey\" class=\"method-signature\">public <strong>dropForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $referenceName)</h3> <p>Generates SQL to delete a foreign key from a table</p> <h3 id=\"createtable\" class=\"method-signature\">public <strong>createTable</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>array</em> $definition)</h3> <p>Generates SQL to create a table</p> <h3 id=\"droptable\" class=\"method-signature\">public <strong>dropTable</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists])</h3> <p>Generates SQL to drop a table</p> <h3 id=\"createview\" class=\"method-signature\">public <strong>createView</strong> (<em>mixed</em> $viewName, <em>array</em> $definition, [<em>mixed</em> $schemaName])</h3> <p>Generates SQL to create a view</p> <h3 id=\"dropview\" class=\"method-signature\">public <strong>dropView</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists])</h3> <p>Generates SQL to drop a view</p> <h3 id=\"tableexists\" class=\"method-signature\">public <strong>tableExists</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName])</h3> <p>Generates SQL checking for the existence of a schema.table</p> <pre class=\"highlight-php\" data-language=\"php\">echo $dialect-&gt;tableExists(\"posts\", \"blog\");\n    echo $dialect-&gt;tableExists(\"posts\");\n</pre> <h3 id=\"viewexists\" class=\"method-signature\">public <strong>viewExists</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName])</h3> <p>Generates SQL checking for the existence of a schema.view</p> <h3 id=\"describecolumns\" class=\"method-signature\">public <strong>describeColumns</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>Generates SQL describing a table</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($dialect-&gt;describeColumns(\"posts\"));\n</pre> <h3 id=\"listtables\" class=\"method-signature\">public <strong>listTables</strong> ([<em>mixed</em> $schemaName])</h3> <p>List all tables in database</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($dialect-&gt;listTables(\"blog\"))\n</pre> <h3 id=\"listviews\" class=\"method-signature\">public <strong>listViews</strong> ([<em>mixed</em> $schemaName])</h3> <p>Generates the SQL to list all views of a schema or user</p> <h3 id=\"listindexessql\" class=\"method-signature\">public <strong>listIndexesSql</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema], [<em>mixed</em> $keyName])</h3> <p>Generates the SQL to get query list of indexes</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($dialect-&gt;listIndexesSql(\"blog\"))\n</pre> <h3 id=\"describeindexes\" class=\"method-signature\">public <strong>describeIndexes</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>Generates SQL to query indexes on a table</p> <h3 id=\"describeindex\" class=\"method-signature\">public <strong>describeIndex</strong> (<em>mixed</em> $index)</h3> <p>Generates SQL to query indexes detail on a table</p> <h3 id=\"describereferences\" class=\"method-signature\">public <strong>describeReferences</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>Generates SQL to query foreign keys on a table</p> <h3 id=\"tableoptions\" class=\"method-signature\">public <strong>tableOptions</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>Generates the SQL to describe the table creation options</p> <h3 id=\"registercustomfunction\" class=\"method-signature\">public <strong>registerCustomFunction</strong> (<em>mixed</em> $name, <em>mixed</em> $customFunction) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Registers custom SQL functions</p> <h3 id=\"getcustomfunctions\" class=\"method-signature\">public <strong>getCustomFunctions</strong> () <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Returns registered functions</p> <h3 id=\"escapeschema\" class=\"method-signature\">final public <strong>escapeSchema</strong> (<em>mixed</em> $str, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Escape Schema</p> <h3 id=\"escape\" class=\"method-signature\">final public <strong>escape</strong> (<em>mixed</em> $str, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Escape identifiers</p> <h3 id=\"limit\" class=\"method-signature\">public <strong>limit</strong> (<em>mixed</em> $sqlQuery, <em>mixed</em> $number) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Generates the SQL for LIMIT clause</p> <pre class=\"highlight-php\" data-language=\"php\">$sql = $dialect-&gt;limit('SELECT * FROM robots', 10);\n    echo $sql; // SELECT * FROM robots LIMIT 10\n\n    $sql = $dialect-&gt;limit('SELECT * FROM robots', [10, 50]);\n    echo $sql; // SELECT * FROM robots LIMIT 10 OFFSET 50\n</pre> <h3 id=\"forupdate\" class=\"method-signature\">public <strong>forUpdate</strong> (<em>mixed</em> $sqlQuery) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Returns a SQL modified with a FOR UPDATE clause</p> <pre class=\"highlight-php\" data-language=\"php\">$sql = $dialect-&gt;forUpdate('SELECT * FROM robots');\n echo $sql; // SELECT * FROM robots FOR UPDATE\n</pre> <h3 id=\"sharedlock\" class=\"method-signature\">public <strong>sharedLock</strong> (<em>mixed</em> $sqlQuery) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <pre class=\"highlight-php\" data-language=\"php\">$sql = $dialect-&gt;sharedLock('SELECT * FROM robots');\n echo $sql; // SELECT * FROM robots LOCK IN SHARE MODE\n</pre> <h3 id=\"getcolumnlist\" class=\"method-signature\">final public <strong>getColumnList</strong> (<em>array</em> $columnList, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Gets a list of columns with escaped identifiers</p> <pre class=\"highlight-php\" data-language=\"php\">echo $dialect-&gt;getColumnList(array('column1', 'column'));\n</pre> <h3 id=\"getsqlcolumn\" class=\"method-signature\">final public <strong>getSqlColumn</strong> (<em>mixed</em> $column, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve Column expressions</p> <h3 id=\"getsqlexpression\" class=\"method-signature\">public <strong>getSqlExpression</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Transforms an intermediate representation for an expression into a database system valid expression</p> <h3 id=\"getsqltable\" class=\"method-signature\">final public <strong>getSqlTable</strong> (<em>mixed</em> $table, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Transform an intermediate representation of a schema/table into a database system valid expression</p> <h3 id=\"select\" class=\"method-signature\">public <strong>select</strong> (<em>array</em> $definition) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Builds a SELECT statement</p> <h3 id=\"supportssavepoints\" class=\"method-signature\">public <strong>supportsSavepoints</strong> () <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Checks whether the platform supports savepoints</p> <h3 id=\"supportsreleasesavepoints\" class=\"method-signature\">public <strong>supportsReleaseSavepoints</strong> () <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Checks whether the platform supports releasing savepoints.</p> <h3 id=\"createsavepoint\" class=\"method-signature\">public <strong>createSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Generate SQL to create a new savepoint</p> <h3 id=\"releasesavepoint\" class=\"method-signature\">public <strong>releaseSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Generate SQL to release a savepoint</p> <h3 id=\"rollbacksavepoint\" class=\"method-signature\">public <strong>rollbackSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Generate SQL to rollback a savepoint</p> <h3 id=\"getsqlexpressionscalar\" class=\"method-signature\">final protected <strong>getSqlExpressionScalar</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve Column expressions</p> <h3 id=\"getsqlexpressionobject\" class=\"method-signature\">final protected <strong>getSqlExpressionObject</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve object expressions</p> <h3 id=\"getsqlexpressionqualified\" class=\"method-signature\">final protected <strong>getSqlExpressionQualified</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve qualified expressions</p> <h3 id=\"getsqlexpressionbinaryoperations\" class=\"method-signature\">final protected <strong>getSqlExpressionBinaryOperations</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve binary operations expressions</p> <h3 id=\"getsqlexpressionunaryoperations\" class=\"method-signature\">final protected <strong>getSqlExpressionUnaryOperations</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve unary operations expressions</p> <h3 id=\"getsqlexpressionfunctioncall\" class=\"method-signature\">final protected <strong>getSqlExpressionFunctionCall</strong> (<em>array</em> $expression, <em>mixed</em> $escapeChar, [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve function calls</p> <h3 id=\"getsqlexpressionlist\" class=\"method-signature\">final protected <strong>getSqlExpressionList</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve Lists</p> <h3 id=\"getsqlexpressionall\" class=\"method-signature\">final protected <strong>getSqlExpressionAll</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve *</p> <h3 id=\"getsqlexpressioncastvalue\" class=\"method-signature\">final protected <strong>getSqlExpressionCastValue</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve CAST of values</p> <h3 id=\"getsqlexpressionconvertvalue\" class=\"method-signature\">final protected <strong>getSqlExpressionConvertValue</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve CONVERT of values encodings</p> <h3 id=\"getsqlexpressioncase\" class=\"method-signature\">final protected <strong>getSqlExpressionCase</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve CASE expressions</p> <h3 id=\"getsqlexpressionfrom\" class=\"method-signature\">final protected <strong>getSqlExpressionFrom</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a FROM clause</p> <h3 id=\"getsqlexpressionjoins\" class=\"method-signature\">final protected <strong>getSqlExpressionJoins</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a JOINs clause</p> <h3 id=\"getsqlexpressionwhere\" class=\"method-signature\">final protected <strong>getSqlExpressionWhere</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a WHERE clause</p> <h3 id=\"getsqlexpressiongroupby\" class=\"method-signature\">final protected <strong>getSqlExpressionGroupBy</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a GROUP BY clause</p> <h3 id=\"getsqlexpressionhaving\" class=\"method-signature\">final protected <strong>getSqlExpressionHaving</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a HAVING clause</p> <h3 id=\"getsqlexpressionorderby\" class=\"method-signature\">final protected <strong>getSqlExpressionOrderBy</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve an ORDER BY clause</p> <h3 id=\"getsqlexpressionlimit\" class=\"method-signature\">final protected <strong>getSqlExpressionLimit</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a LIMIT clause</p> <h3 id=\"preparecolumnalias\" class=\"method-signature\">protected <strong>prepareColumnAlias</strong> (<em>mixed</em> $qualified, [<em>mixed</em> $alias], [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Prepares column for this RDBMS</p> <h3 id=\"preparetable\" class=\"method-signature\">protected <strong>prepareTable</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema], [<em>mixed</em> $alias], [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Prepares table for this RDBMS</p> <h3 id=\"preparequalified\" class=\"method-signature\">protected <strong>prepareQualified</strong> (<em>mixed</em> $column, [<em>mixed</em> $domain], [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Prepares qualified for this RDBMS</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_Sqlite.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_Sqlite.html</a>\n  </p>\n</div>\n","api/phalcon_debug":"<h1 id=\"class-phalcon-debug\">Class <strong>Phalcon\\Debug</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/debug.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Provides debug capabilities to Phalcon applications</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"seturi\" class=\"method-signature\">public <strong>setUri</strong> (<em>mixed</em> $uri)</h3> <p>Change the base URI for static resources</p> <h3 id=\"setshowbacktrace\" class=\"method-signature\">public <strong>setShowBackTrace</strong> (<em>mixed</em> $showBackTrace)</h3> <p>Sets if files the exception’s backtrace must be showed</p> <h3 id=\"setshowfiles\" class=\"method-signature\">public <strong>setShowFiles</strong> (<em>mixed</em> $showFiles)</h3> <p>Set if files part of the backtrace must be shown in the output</p> <h3 id=\"setshowfilefragment\" class=\"method-signature\">public <strong>setShowFileFragment</strong> (<em>mixed</em> $showFileFragment)</h3> <p>Sets if files must be completely opened and showed in the output or just the fragment related to the exception</p> <h3 id=\"listen\" class=\"method-signature\">public <strong>listen</strong> ([<em>mixed</em> $exceptions], [<em>mixed</em> $lowSeverity])</h3> <p>Listen for uncaught exceptions and unsilent notices or warnings</p> <h3 id=\"listenexceptions\" class=\"method-signature\">public <strong>listenExceptions</strong> ()</h3> <p>Listen for uncaught exceptions</p> <h3 id=\"listenlowseverity\" class=\"method-signature\">public <strong>listenLowSeverity</strong> ()</h3> <p>Listen for unsilent notices or warnings</p> <h3 id=\"halt\" class=\"method-signature\">public <strong>halt</strong> ()</h3> <p>Halts the request showing a backtrace</p> <h3 id=\"debugvar\" class=\"method-signature\">public <strong>debugVar</strong> (<em>mixed</em> $varz, [<em>mixed</em> $key])</h3> <p>Adds a variable to the debug output</p> <h3 id=\"clearvars\" class=\"method-signature\">public <strong>clearVars</strong> ()</h3> <p>Clears are variables added previously</p> <h3 id=\"_escapestring\" class=\"method-signature\">protected <strong>_escapeString</strong> (<em>mixed</em> $value)</h3> <p>Escapes a string with htmlentities</p> <h3 id=\"_getarraydump\" class=\"method-signature\">protected <strong>_getArrayDump</strong> (<em>array</em> $argument, [<em>mixed</em> $n])</h3> <p>Produces a recursive representation of an array</p> <h3 id=\"_getvardump\" class=\"method-signature\">protected <strong>_getVarDump</strong> (<em>mixed</em> $variable)</h3> <p>Produces an string representation of a variable</p> <h3 id=\"getmajorversion\" class=\"method-signature\">public <strong>getMajorVersion</strong> ()</h3> <p>Returns the major framework’s version</p> <h3 id=\"getversion\" class=\"method-signature\">public <strong>getVersion</strong> ()</h3> <p>Generates a link to the current version documentation</p> <h3 id=\"getcsssources\" class=\"method-signature\">public <strong>getCssSources</strong> ()</h3> <p>Returns the css sources</p> <h3 id=\"getjssources\" class=\"method-signature\">public <strong>getJsSources</strong> ()</h3> <p>Returns the javascript sources</p> <h3 id=\"showtraceitem\" class=\"method-signature\">final protected <strong>showTraceItem</strong> (<em>mixed</em> $n, <em>array</em> $trace)</h3> <p>Shows a backtrace item</p> <h3 id=\"onuncaughtlowseverity\" class=\"method-signature\">public <strong>onUncaughtLowSeverity</strong> (<em>mixed</em> $severity, <em>mixed</em> $message, <em>mixed</em> $file, <em>mixed</em> $line, <em>mixed</em> $context)</h3> <p>Throws an exception when a notice or warning is raised</p> <h3 id=\"onuncaughtexception\" class=\"method-signature\">public <strong>onUncaughtException</strong> (<em>Exception</em> $exception)</h3> <p>Handles uncaught exceptions</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Debug.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Debug.html</a>\n  </p>\n</div>\n","api/phalcon_db_dialect_postgresql":"<h1 id=\"class-phalcon-db-dialect-postgresql\">Class <strong>Phalcon\\Db\\Dialect\\Postgresql</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_db_dialect\"><em>Phalcon\\Db\\Dialect</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_db_dialectinterface\"><em>Phalcon\\Db\\DialectInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/dialect/postgresql.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Generates database specific SQL for the PostgreSQL RDBMS</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getcolumndefinition\" class=\"method-signature\">public <strong>getColumnDefinition</strong> (<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column)</h3> <p>Gets the column name in PostgreSQL</p> <h3 id=\"addcolumn\" class=\"method-signature\">public <strong>addColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column)</h3> <p>Generates SQL to add a column to a table</p> <h3 id=\"modifycolumn\" class=\"method-signature\">public <strong>modifyColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column, [<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $currentColumn])</h3> <p>Generates SQL to modify a column in a table</p> <h3 id=\"dropcolumn\" class=\"method-signature\">public <strong>dropColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $columnName)</h3> <p>Generates SQL to delete a column from a table</p> <h3 id=\"addindex\" class=\"method-signature\">public <strong>addIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index)</h3> <p>Generates SQL to add an index to a table</p> <h3 id=\"dropindex\" class=\"method-signature\">public <strong>dropIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $indexName)</h3> <p>Generates SQL to delete an index from a table</p> <h3 id=\"addprimarykey\" class=\"method-signature\">public <strong>addPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index)</h3> <p>Generates SQL to add the primary key to a table</p> <h3 id=\"dropprimarykey\" class=\"method-signature\">public <strong>dropPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName)</h3> <p>Generates SQL to delete primary key from a table</p> <h3 id=\"addforeignkey\" class=\"method-signature\">public <strong>addForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_referenceinterface\"><em>Phalcon\\Db\\ReferenceInterface</em></a> $reference)</h3> <p>Generates SQL to add an index to a table</p> <h3 id=\"dropforeignkey\" class=\"method-signature\">public <strong>dropForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $referenceName)</h3> <p>Generates SQL to delete a foreign key from a table</p> <h3 id=\"createtable\" class=\"method-signature\">public <strong>createTable</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>array</em> $definition)</h3> <p>Generates SQL to create a table</p> <h3 id=\"droptable\" class=\"method-signature\">public <strong>dropTable</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists])</h3> <p>Generates SQL to drop a view</p> <h3 id=\"createview\" class=\"method-signature\">public <strong>createView</strong> (<em>mixed</em> $viewName, <em>array</em> $definition, [<em>mixed</em> $schemaName])</h3> <p>Generates SQL to create a view</p> <h3 id=\"dropview\" class=\"method-signature\">public <strong>dropView</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists])</h3> <p>Generates SQL to drop a view</p> <h3 id=\"tableexists\" class=\"method-signature\">public <strong>tableExists</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName])</h3> <p>Generates SQL checking for the existence of a schema.table</p> <pre class=\"highlight-php\" data-language=\"php\">echo $dialect-&gt;tableExists(\"posts\", \"blog\");\n    echo $dialect-&gt;tableExists(\"posts\");\n</pre> <h3 id=\"viewexists\" class=\"method-signature\">public <strong>viewExists</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName])</h3> <p>Generates SQL checking for the existence of a schema.view</p> <h3 id=\"describecolumns\" class=\"method-signature\">public <strong>describeColumns</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>Generates SQL describing a table</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($dialect-&gt;describeColumns(\"posts\"));\n</pre> <h3 id=\"listtables\" class=\"method-signature\">public <strong>listTables</strong> ([<em>mixed</em> $schemaName])</h3> <p>List all tables in database</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($dialect-&gt;listTables(\"blog\"))\n</pre> <h3 id=\"listviews\" class=\"method-signature\">public <em>string</em> <strong>listViews</strong> ([<em>string</em> $schemaName])</h3> <p>Generates the SQL to list all views of a schema or user</p> <h3 id=\"describeindexes\" class=\"method-signature\">public <strong>describeIndexes</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>Generates SQL to query indexes on a table</p> <h3 id=\"describereferences\" class=\"method-signature\">public <strong>describeReferences</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>Generates SQL to query foreign keys on a table</p> <h3 id=\"tableoptions\" class=\"method-signature\">public <strong>tableOptions</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>Generates the SQL to describe the table creation options</p> <h3 id=\"_gettableoptions\" class=\"method-signature\">protected <strong>_getTableOptions</strong> (<em>array</em> $definition)</h3> <p>...</p> <h3 id=\"registercustomfunction\" class=\"method-signature\">public <strong>registerCustomFunction</strong> (<em>mixed</em> $name, <em>mixed</em> $customFunction) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Registers custom SQL functions</p> <h3 id=\"getcustomfunctions\" class=\"method-signature\">public <strong>getCustomFunctions</strong> () <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Returns registered functions</p> <h3 id=\"escapeschema\" class=\"method-signature\">final public <strong>escapeSchema</strong> (<em>mixed</em> $str, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Escape Schema</p> <h3 id=\"escape\" class=\"method-signature\">final public <strong>escape</strong> (<em>mixed</em> $str, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Escape identifiers</p> <h3 id=\"limit\" class=\"method-signature\">public <strong>limit</strong> (<em>mixed</em> $sqlQuery, <em>mixed</em> $number) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Generates the SQL for LIMIT clause</p> <pre class=\"highlight-php\" data-language=\"php\">$sql = $dialect-&gt;limit('SELECT * FROM robots', 10);\n    echo $sql; // SELECT * FROM robots LIMIT 10\n\n    $sql = $dialect-&gt;limit('SELECT * FROM robots', [10, 50]);\n    echo $sql; // SELECT * FROM robots LIMIT 10 OFFSET 50\n</pre> <h3 id=\"forupdate\" class=\"method-signature\">public <strong>forUpdate</strong> (<em>mixed</em> $sqlQuery) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Returns a SQL modified with a FOR UPDATE clause</p> <pre class=\"highlight-php\" data-language=\"php\">$sql = $dialect-&gt;forUpdate('SELECT * FROM robots');\n echo $sql; // SELECT * FROM robots FOR UPDATE\n</pre> <h3 id=\"sharedlock\" class=\"method-signature\">public <strong>sharedLock</strong> (<em>mixed</em> $sqlQuery) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <pre class=\"highlight-php\" data-language=\"php\">$sql = $dialect-&gt;sharedLock('SELECT * FROM robots');\n echo $sql; // SELECT * FROM robots LOCK IN SHARE MODE\n</pre> <h3 id=\"getcolumnlist\" class=\"method-signature\">final public <strong>getColumnList</strong> (<em>array</em> $columnList, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Gets a list of columns with escaped identifiers</p> <pre class=\"highlight-php\" data-language=\"php\">echo $dialect-&gt;getColumnList(array('column1', 'column'));\n</pre> <h3 id=\"getsqlcolumn\" class=\"method-signature\">final public <strong>getSqlColumn</strong> (<em>mixed</em> $column, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve Column expressions</p> <h3 id=\"getsqlexpression\" class=\"method-signature\">public <strong>getSqlExpression</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Transforms an intermediate representation for an expression into a database system valid expression</p> <h3 id=\"getsqltable\" class=\"method-signature\">final public <strong>getSqlTable</strong> (<em>mixed</em> $table, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Transform an intermediate representation of a schema/table into a database system valid expression</p> <h3 id=\"select\" class=\"method-signature\">public <strong>select</strong> (<em>array</em> $definition) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Builds a SELECT statement</p> <h3 id=\"supportssavepoints\" class=\"method-signature\">public <strong>supportsSavepoints</strong> () <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Checks whether the platform supports savepoints</p> <h3 id=\"supportsreleasesavepoints\" class=\"method-signature\">public <strong>supportsReleaseSavepoints</strong> () <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Checks whether the platform supports releasing savepoints.</p> <h3 id=\"createsavepoint\" class=\"method-signature\">public <strong>createSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Generate SQL to create a new savepoint</p> <h3 id=\"releasesavepoint\" class=\"method-signature\">public <strong>releaseSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Generate SQL to release a savepoint</p> <h3 id=\"rollbacksavepoint\" class=\"method-signature\">public <strong>rollbackSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Generate SQL to rollback a savepoint</p> <h3 id=\"getsqlexpressionscalar\" class=\"method-signature\">final protected <strong>getSqlExpressionScalar</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve Column expressions</p> <h3 id=\"getsqlexpressionobject\" class=\"method-signature\">final protected <strong>getSqlExpressionObject</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve object expressions</p> <h3 id=\"getsqlexpressionqualified\" class=\"method-signature\">final protected <strong>getSqlExpressionQualified</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve qualified expressions</p> <h3 id=\"getsqlexpressionbinaryoperations\" class=\"method-signature\">final protected <strong>getSqlExpressionBinaryOperations</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve binary operations expressions</p> <h3 id=\"getsqlexpressionunaryoperations\" class=\"method-signature\">final protected <strong>getSqlExpressionUnaryOperations</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve unary operations expressions</p> <h3 id=\"getsqlexpressionfunctioncall\" class=\"method-signature\">final protected <strong>getSqlExpressionFunctionCall</strong> (<em>array</em> $expression, <em>mixed</em> $escapeChar, [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve function calls</p> <h3 id=\"getsqlexpressionlist\" class=\"method-signature\">final protected <strong>getSqlExpressionList</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve Lists</p> <h3 id=\"getsqlexpressionall\" class=\"method-signature\">final protected <strong>getSqlExpressionAll</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve *</p> <h3 id=\"getsqlexpressioncastvalue\" class=\"method-signature\">final protected <strong>getSqlExpressionCastValue</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve CAST of values</p> <h3 id=\"getsqlexpressionconvertvalue\" class=\"method-signature\">final protected <strong>getSqlExpressionConvertValue</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve CONVERT of values encodings</p> <h3 id=\"getsqlexpressioncase\" class=\"method-signature\">final protected <strong>getSqlExpressionCase</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve CASE expressions</p> <h3 id=\"getsqlexpressionfrom\" class=\"method-signature\">final protected <strong>getSqlExpressionFrom</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a FROM clause</p> <h3 id=\"getsqlexpressionjoins\" class=\"method-signature\">final protected <strong>getSqlExpressionJoins</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a JOINs clause</p> <h3 id=\"getsqlexpressionwhere\" class=\"method-signature\">final protected <strong>getSqlExpressionWhere</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a WHERE clause</p> <h3 id=\"getsqlexpressiongroupby\" class=\"method-signature\">final protected <strong>getSqlExpressionGroupBy</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a GROUP BY clause</p> <h3 id=\"getsqlexpressionhaving\" class=\"method-signature\">final protected <strong>getSqlExpressionHaving</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a HAVING clause</p> <h3 id=\"getsqlexpressionorderby\" class=\"method-signature\">final protected <strong>getSqlExpressionOrderBy</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve an ORDER BY clause</p> <h3 id=\"getsqlexpressionlimit\" class=\"method-signature\">final protected <strong>getSqlExpressionLimit</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a LIMIT clause</p> <h3 id=\"preparecolumnalias\" class=\"method-signature\">protected <strong>prepareColumnAlias</strong> (<em>mixed</em> $qualified, [<em>mixed</em> $alias], [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Prepares column for this RDBMS</p> <h3 id=\"preparetable\" class=\"method-signature\">protected <strong>prepareTable</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema], [<em>mixed</em> $alias], [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Prepares table for this RDBMS</p> <h3 id=\"preparequalified\" class=\"method-signature\">protected <strong>prepareQualified</strong> (<em>mixed</em> $column, [<em>mixed</em> $domain], [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Prepares qualified for this RDBMS</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_Postgresql.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_Postgresql.html</a>\n  </p>\n</div>\n","api/phalcon_db_reference":"<h1 id=\"class-phalcon-db-reference\">Class <strong>Phalcon\\Db\\Reference</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_db_referenceinterface\"><em>Phalcon\\Db\\ReferenceInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/reference.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to define reference constraints on tables</p> <pre class=\"highlight-php\" data-language=\"php\">$reference = new \\Phalcon\\Db\\Reference(\"field_fk\", array(\n    'referencedSchema' =&gt; \"invoicing\",\n    'referencedTable' =&gt; \"products\",\n    'columns' =&gt; array(\"product_type\", \"product_code\"),\n    'referencedColumns' =&gt; array(\"type\", \"code\")\n));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> ()</h3> <p>Constraint name</p> <h3 id=\"getschemaname\" class=\"method-signature\">public <strong>getSchemaName</strong> ()</h3> <p>...</p> <h3 id=\"getreferencedschema\" class=\"method-signature\">public <strong>getReferencedSchema</strong> ()</h3> <p>...</p> <h3 id=\"getreferencedtable\" class=\"method-signature\">public <strong>getReferencedTable</strong> ()</h3> <p>Referenced Table</p> <h3 id=\"getcolumns\" class=\"method-signature\">public <strong>getColumns</strong> ()</h3> <p>Local reference columns</p> <h3 id=\"getreferencedcolumns\" class=\"method-signature\">public <strong>getReferencedColumns</strong> ()</h3> <p>Referenced Columns</p> <h3 id=\"getondelete\" class=\"method-signature\">public <strong>getOnDelete</strong> ()</h3> <p>ON DELETE</p> <h3 id=\"getonupdate\" class=\"method-signature\">public <strong>getOnUpdate</strong> ()</h3> <p>ON UPDATE</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $name, <em>array</em> $definition)</h3> <p>Phalcon\\Db\\Reference constructor</p> <h3 id=\"__set_state\" class=\"method-signature\">public static <strong>__set_state</strong> (<em>array</em> $data)</h3> <p>Restore a Phalcon\\Db\\Reference object from export</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Reference.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Reference.html</a>\n  </p>\n</div>\n","api/phalcon_db_result_pdo":"<h1 id=\"class-phalcon-db-result-pdo\">Class <strong>Phalcon\\Db\\Result\\Pdo</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_db_resultinterface\"><em>Phalcon\\Db\\ResultInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/result/pdo.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Encapsulates the resultset internals</p> <pre class=\"highlight-php\" data-language=\"php\">$result = $connection-&gt;query(\"SELECT * FROM robots ORDER BY name\");\n$result-&gt;setFetchMode(Phalcon\\Db::FETCH_NUM);\nwhile ($robot = $result-&gt;fetchArray()) {\n    print_r($robot);\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<a class=\"reference internal\" href=\"phalcon_db_adapterinterface\"><em>Phalcon\\Db\\AdapterInterface</em></a> $connection, <em>PDOStatement</em> $result, [<em>string</em> $sqlStatement], [<em>array</em> $bindParams], [<em>array</em> $bindTypes])</h3> <p>Phalcon\\Db\\Result\\Pdo constructor</p> <h3 id=\"execute\" class=\"method-signature\">public <strong>execute</strong> ()</h3> <p>Allows to execute the statement again. Some database systems don’t support scrollable cursors, So, as cursors are forward only, we need to execute the cursor again to fetch rows from the begining</p> <h3 id=\"fetch\" class=\"method-signature\">public <strong>fetch</strong> ([<em>mixed</em> $fetchStyle], [<em>mixed</em> $cursorOrientation], [<em>mixed</em> $cursorOffset])</h3> <p>Fetches an array/object of strings that corresponds to the fetched row, or FALSE if there are no more rows. This method is affected by the active fetch flag set using Phalcon\\Db\\Result\\Pdo::setFetchMode</p> <pre class=\"highlight-php\" data-language=\"php\">$result = $connection-&gt;query(\"SELECT * FROM robots ORDER BY name\");\n$result-&gt;setFetchMode(Phalcon\\Db::FETCH_OBJ);\nwhile ($robot = $result-&gt;fetch()) {\n    echo $robot-&gt;name;\n}\n</pre> <h3 id=\"fetcharray\" class=\"method-signature\">public <strong>fetchArray</strong> ()</h3> <p>Returns an array of strings that corresponds to the fetched row, or FALSE if there are no more rows. This method is affected by the active fetch flag set using Phalcon\\Db\\Result\\Pdo::setFetchMode</p> <pre class=\"highlight-php\" data-language=\"php\">$result = $connection-&gt;query(\"SELECT * FROM robots ORDER BY name\");\n$result-&gt;setFetchMode(Phalcon\\Db::FETCH_NUM);\nwhile ($robot = result-&gt;fetchArray()) {\n    print_r($robot);\n}\n</pre> <h3 id=\"fetchall\" class=\"method-signature\">public <strong>fetchAll</strong> ([<em>mixed</em> $fetchStyle], [<em>mixed</em> $fetchArgument], [<em>mixed</em> $ctorArgs])</h3> <p>Returns an array of arrays containing all the records in the result This method is affected by the active fetch flag set using Phalcon\\Db\\Result\\Pdo::setFetchMode</p> <pre class=\"highlight-php\" data-language=\"php\">$result = $connection-&gt;query(\"SELECT * FROM robots ORDER BY name\");\n$robots = $result-&gt;fetchAll();\n</pre> <h3 id=\"numrows\" class=\"method-signature\">public <strong>numRows</strong> ()</h3> <p>Gets number of rows returned by a resultset</p> <pre class=\"highlight-php\" data-language=\"php\">$result = $connection-&gt;query(\"SELECT * FROM robots ORDER BY name\");\necho 'There are ', $result-&gt;numRows(), ' rows in the resultset';\n</pre> <h3 id=\"dataseek\" class=\"method-signature\">public <strong>dataSeek</strong> (<em>mixed</em> $number)</h3> <p>Moves internal resultset cursor to another position letting us to fetch a certain row</p> <pre class=\"highlight-php\" data-language=\"php\">$result = $connection-&gt;query(\"SELECT * FROM robots ORDER BY name\");\n$result-&gt;dataSeek(2); // Move to third row on result\n$row = $result-&gt;fetch(); // Fetch third row\n</pre> <h3 id=\"setfetchmode\" class=\"method-signature\">public <strong>setFetchMode</strong> (<em>mixed</em> $fetchMode, [<em>mixed</em> $colNoOrClassNameOrObject], [<em>mixed</em> $ctorargs])</h3> <p>Changes the fetching mode affecting Phalcon\\Db\\Result\\Pdo::fetch()</p> <pre class=\"highlight-php\" data-language=\"php\">//Return array with integer indexes\n$result-&gt;setFetchMode(\\Phalcon\\Db::FETCH_NUM);\n\n//Return associative array without integer indexes\n$result-&gt;setFetchMode(\\Phalcon\\Db::FETCH_ASSOC);\n\n//Return associative array together with integer indexes\n$result-&gt;setFetchMode(\\Phalcon\\Db::FETCH_BOTH);\n\n//Return an object\n$result-&gt;setFetchMode(\\Phalcon\\Db::FETCH_OBJ);\n</pre> <h3 id=\"getinternalresult\" class=\"method-signature\">public <strong>getInternalResult</strong> ()</h3> <p>Gets the internal PDO result object</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Result_Pdo.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Result_Pdo.html</a>\n  </p>\n</div>\n","api/phalcon_di_factorydefault_cli":"<h1 id=\"class-phalcon-di-factorydefault-cli\">Class <strong>Phalcon\\Di\\FactoryDefault\\Cli</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_di_factorydefault\"><em>Phalcon\\Di\\FactoryDefault</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a>, ArrayAccess</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/di/factorydefault/cli.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This is a variant of the standard Phalcon\\Di. By default it automatically registers all the services provided by the framework. Thanks to this, the developer does not need to register each service individually. This class is specially suitable for CLI applications</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ()</h3> <p>Phalcon\\Di\\FactoryDefault\\Cli constructor</p> <h3 id=\"setinternaleventsmanager\" class=\"method-signature\">public <strong>setInternalEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Sets the internal event manager</p> <h3 id=\"getinternaleventsmanager\" class=\"method-signature\">public <strong>getInternalEventsManager</strong> () <small>inherited from Phalcon\\Di</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"set\" class=\"method-signature\">public <strong>set</strong> (<em>mixed</em> $name, <em>mixed</em> $definition, [<em>mixed</em> $shared]) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Registers a service in the services container</p> <h3 id=\"setshared\" class=\"method-signature\">public <strong>setShared</strong> (<em>mixed</em> $name, <em>mixed</em> $definition) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Registers an “always shared” service in the services container</p> <h3 id=\"remove\" class=\"method-signature\">public <strong>remove</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Removes a service in the services container It also removes any shared instance created for the service</p> <h3 id=\"attempt\" class=\"method-signature\">public <strong>attempt</strong> (<em>mixed</em> $name, <em>mixed</em> $definition, [<em>mixed</em> $shared]) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Attempts to register a service in the services container Only is successful if a service hasn’t been registered previously with the same name</p> <h3 id=\"setraw\" class=\"method-signature\">public <strong>setRaw</strong> (<em>mixed</em> $name, <a class=\"reference internal\" href=\"phalcon_di_serviceinterface\"><em>Phalcon\\Di\\ServiceInterface</em></a> $rawDefinition) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Sets a service using a raw Phalcon\\Di\\Service definition</p> <h3 id=\"getraw\" class=\"method-signature\">public <strong>getRaw</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Returns a service definition without resolving</p> <h3 id=\"getservice\" class=\"method-signature\">public <strong>getService</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Returns a Phalcon\\Di\\Service instance</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $name, [<em>mixed</em> $parameters]) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Resolves the service based on its configuration</p> <h3 id=\"getshared\" class=\"method-signature\">public <em>mixed</em> <strong>getShared</strong> (<em>string</em> $name, [<em>array</em> $parameters]) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Resolves a service, the resolved service is stored in the DI, subsequent requests for this service will return the same instance</p> <h3 id=\"has\" class=\"method-signature\">public <strong>has</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Check whether the DI contains a service by a name</p> <h3 id=\"wasfreshinstance\" class=\"method-signature\">public <strong>wasFreshInstance</strong> () <small>inherited from Phalcon\\Di</small>\n</h3> <p>Check whether the last service obtained via getShared produced a fresh instance or an existing one</p> <h3 id=\"getservices\" class=\"method-signature\">public <strong>getServices</strong> () <small>inherited from Phalcon\\Di</small>\n</h3> <p>Return the services registered in the DI</p> <h3 id=\"offsetexists\" class=\"method-signature\">public <strong>offsetExists</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Check if a service is registered using the array syntax</p> <h3 id=\"offsetset\" class=\"method-signature\">public <em>boolean</em> <strong>offsetSet</strong> (<em>string</em> $name, <em>mixed</em> $definition) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Allows to register a shared service using the array syntax</p> <pre class=\"highlight-php\" data-language=\"php\">$di[\"request\"] = new \\Phalcon\\Http\\Request();\n</pre> <h3 id=\"offsetget\" class=\"method-signature\">public <strong>offsetGet</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Allows to obtain a shared service using the array syntax</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($di[\"request\"]);\n</pre> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Removes a service from the services container using the array syntax</p> <h3 id=\"__call\" class=\"method-signature\">public <strong>__call</strong> (<em>string</em> $method, [<em>array</em> $arguments]) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Magic method to get or set services using setters/getters</p> <h3 id=\"setdefault\" class=\"method-signature\">public static <strong>setDefault</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Set a default dependency injection container to be obtained into static methods</p> <h3 id=\"getdefault\" class=\"method-signature\">public static <strong>getDefault</strong> () <small>inherited from Phalcon\\Di</small>\n</h3> <p>Return the latest DI created</p> <h3 id=\"reset\" class=\"method-signature\">public static <strong>reset</strong> () <small>inherited from Phalcon\\Di</small>\n</h3> <p>Resets the internal default DI</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Di_FactoryDefault_Cli.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Di_FactoryDefault_Cli.html</a>\n  </p>\n</div>\n","api/phalcon_di_exception":"<h1 id=\"class-phalcon-di-exception\">Class <strong>Phalcon\\Di\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/di/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_debug_exception":"<h1 id=\"class-phalcon-debug-exception\">Class <strong>Phalcon\\Debug\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/debug/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Debug_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Debug_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_di_injectable":"<h1 id=\"abstract-class-phalcon-di-injectable\">Abstract class <strong>Phalcon\\Di\\Injectable</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/di/injectable.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class allows to access services in the services container by just only accessing a public property with the same name of a registered service</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager)</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> ()</h3> <p>Returns the internal event manager</p> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $propertyName)</h3> <p>Magic method __get</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Injectable.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Injectable.html</a>\n  </p>\n</div>\n","api/phalcon_di_service_builder":"<h1 id=\"class-phalcon-di-service-builder\">Class <strong>Phalcon\\Di\\Service\\Builder</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/di/service/builder.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class builds instances based on complex definitions</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"_buildparameter\" class=\"method-signature\">private <em>mixed</em> <strong>_buildParameter</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector, <em>int</em> $position, <em>array</em> $argument)</h3> <p>Resolves a constructor/call parameter</p> <h3 id=\"_buildparameters\" class=\"method-signature\">private <strong>_buildParameters</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector, <em>array</em> $arguments)</h3> <p>Resolves an array of parameters</p> <h3 id=\"build\" class=\"method-signature\">public <em>mixed</em> <strong>build</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector, <em>array</em> $definition, [<em>array</em> $parameters])</h3> <p>Builds a service using a complex service definition</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Service_Builder.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Service_Builder.html</a>\n  </p>\n</div>\n","api/phalcon_di_service":"<h1 id=\"class-phalcon-di-service\">Class <strong>Phalcon\\Di\\Service</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_di_serviceinterface\"><em>Phalcon\\Di\\ServiceInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/di/service.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Represents individually a service in the services container</p> <pre class=\"highlight-php\" data-language=\"php\">$service = new \\Phalcon\\Di\\Service('request', 'Phalcon\\Http\\Request');\n $request = service-&gt;resolve();\n</pre>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">final public <strong>__construct</strong> (<em>string</em> $name, <em>mixed</em> $definition, [<em>boolean</em> $shared])</h3> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> ()</h3> <p>Returns the service’s name</p> <h3 id=\"setshared\" class=\"method-signature\">public <strong>setShared</strong> (<em>mixed</em> $shared)</h3> <p>Sets if the service is shared or not</p> <h3 id=\"isshared\" class=\"method-signature\">public <strong>isShared</strong> ()</h3> <p>Check whether the service is shared or not</p> <h3 id=\"setsharedinstance\" class=\"method-signature\">public <strong>setSharedInstance</strong> (<em>mixed</em> $sharedInstance)</h3> <p>Sets/Resets the shared instance related to the service</p> <h3 id=\"setdefinition\" class=\"method-signature\">public <strong>setDefinition</strong> (<em>mixed</em> $definition)</h3> <p>Set the service definition</p> <h3 id=\"getdefinition\" class=\"method-signature\">public <em>mixed</em> <strong>getDefinition</strong> ()</h3> <p>Returns the service definition</p> <h3 id=\"resolve\" class=\"method-signature\">public <em>mixed</em> <strong>resolve</strong> ([<em>array</em> $parameters], [<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector])</h3> <p>Resolves the service</p> <h3 id=\"setparameter\" class=\"method-signature\">public <strong>setParameter</strong> (<em>mixed</em> $position, <em>array</em> $parameter)</h3> <p>Changes a parameter in the definition without resolve the service</p> <h3 id=\"getparameter\" class=\"method-signature\">public <em>array</em> <strong>getParameter</strong> (<em>int</em> $position)</h3> <p>Returns a parameter in a specific position</p> <h3 id=\"isresolved\" class=\"method-signature\">public <strong>isResolved</strong> ()</h3> <p>Returns true if the service was resolved</p> <h3 id=\"__set_state\" class=\"method-signature\">public static <strong>__set_state</strong> (<em>array</em> $attributes)</h3> <p>Restore the internal state of a service</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Service.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Di_Service.html</a>\n  </p>\n</div>\n","api/phalcon_di_factorydefault":"<h1 id=\"class-phalcon-di-factorydefault\">Class <strong>Phalcon\\Di\\FactoryDefault</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_di\"><em>Phalcon\\Di</em></a></p> <p><em>implements</em> ArrayAccess, <a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/di/factorydefault.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This is a variant of the standard Phalcon\\Di. By default it automatically registers all the services provided by the framework. Thanks to this, the developer does not need to register each service individually providing a full stack framework</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ()</h3> <p>Phalcon\\Di\\FactoryDefault constructor</p> <h3 id=\"setinternaleventsmanager\" class=\"method-signature\">public <strong>setInternalEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Sets the internal event manager</p> <h3 id=\"getinternaleventsmanager\" class=\"method-signature\">public <strong>getInternalEventsManager</strong> () <small>inherited from Phalcon\\Di</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"set\" class=\"method-signature\">public <strong>set</strong> (<em>mixed</em> $name, <em>mixed</em> $definition, [<em>mixed</em> $shared]) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Registers a service in the services container</p> <h3 id=\"setshared\" class=\"method-signature\">public <strong>setShared</strong> (<em>mixed</em> $name, <em>mixed</em> $definition) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Registers an “always shared” service in the services container</p> <h3 id=\"remove\" class=\"method-signature\">public <strong>remove</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Removes a service in the services container It also removes any shared instance created for the service</p> <h3 id=\"attempt\" class=\"method-signature\">public <strong>attempt</strong> (<em>mixed</em> $name, <em>mixed</em> $definition, [<em>mixed</em> $shared]) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Attempts to register a service in the services container Only is successful if a service hasn’t been registered previously with the same name</p> <h3 id=\"setraw\" class=\"method-signature\">public <strong>setRaw</strong> (<em>mixed</em> $name, <a class=\"reference internal\" href=\"phalcon_di_serviceinterface\"><em>Phalcon\\Di\\ServiceInterface</em></a> $rawDefinition) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Sets a service using a raw Phalcon\\Di\\Service definition</p> <h3 id=\"getraw\" class=\"method-signature\">public <strong>getRaw</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Returns a service definition without resolving</p> <h3 id=\"getservice\" class=\"method-signature\">public <strong>getService</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Returns a Phalcon\\Di\\Service instance</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $name, [<em>mixed</em> $parameters]) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Resolves the service based on its configuration</p> <h3 id=\"getshared\" class=\"method-signature\">public <em>mixed</em> <strong>getShared</strong> (<em>string</em> $name, [<em>array</em> $parameters]) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Resolves a service, the resolved service is stored in the DI, subsequent requests for this service will return the same instance</p> <h3 id=\"has\" class=\"method-signature\">public <strong>has</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Check whether the DI contains a service by a name</p> <h3 id=\"wasfreshinstance\" class=\"method-signature\">public <strong>wasFreshInstance</strong> () <small>inherited from Phalcon\\Di</small>\n</h3> <p>Check whether the last service obtained via getShared produced a fresh instance or an existing one</p> <h3 id=\"getservices\" class=\"method-signature\">public <strong>getServices</strong> () <small>inherited from Phalcon\\Di</small>\n</h3> <p>Return the services registered in the DI</p> <h3 id=\"offsetexists\" class=\"method-signature\">public <strong>offsetExists</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Check if a service is registered using the array syntax</p> <h3 id=\"offsetset\" class=\"method-signature\">public <em>boolean</em> <strong>offsetSet</strong> (<em>string</em> $name, <em>mixed</em> $definition) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Allows to register a shared service using the array syntax</p> <pre class=\"highlight-php\" data-language=\"php\">$di[\"request\"] = new \\Phalcon\\Http\\Request();\n</pre> <h3 id=\"offsetget\" class=\"method-signature\">public <strong>offsetGet</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Allows to obtain a shared service using the array syntax</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($di[\"request\"]);\n</pre> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Removes a service from the services container using the array syntax</p> <h3 id=\"__call\" class=\"method-signature\">public <strong>__call</strong> (<em>string</em> $method, [<em>array</em> $arguments]) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Magic method to get or set services using setters/getters</p> <h3 id=\"setdefault\" class=\"method-signature\">public static <strong>setDefault</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Di</small>\n</h3> <p>Set a default dependency injection container to be obtained into static methods</p> <h3 id=\"getdefault\" class=\"method-signature\">public static <strong>getDefault</strong> () <small>inherited from Phalcon\\Di</small>\n</h3> <p>Return the latest DI created</p> <h3 id=\"reset\" class=\"method-signature\">public static <strong>reset</strong> () <small>inherited from Phalcon\\Di</small>\n</h3> <p>Resets the internal default DI</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Di_FactoryDefault.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Di_FactoryDefault.html</a>\n  </p>\n</div>\n","api/phalcon_events_event":"<h1 id=\"class-phalcon-events-event\">Class <strong>Phalcon\\Events\\Event</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventinterface\"><em>Phalcon\\Events\\EventInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/events/event.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class offers contextual information of a fired event in the EventsManager</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> ()</h3> <p>Event type</p> <h3 id=\"getsource\" class=\"method-signature\">public <strong>getSource</strong> ()</h3> <p>Event source</p> <h3 id=\"getdata\" class=\"method-signature\">public <strong>getData</strong> ()</h3> <p>Event data</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $type, <em>object</em> $source, [<em>mixed</em> $data], [<em>boolean</em> $cancelable])</h3> <p>Phalcon\\Events\\Event constructor</p> <h3 id=\"setdata\" class=\"method-signature\">public <strong>setData</strong> ([<em>mixed</em> $data])</h3> <p>Sets event data</p> <h3 id=\"settype\" class=\"method-signature\">public <strong>setType</strong> (<em>mixed</em> $type)</h3> <p>Sets event type</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ()</h3> <p>Stops the event preventing propagation</p> <h3 id=\"isstopped\" class=\"method-signature\">public <strong>isStopped</strong> ()</h3> <p>Check whether the event is currently stopped</p> <h3 id=\"iscancelable\" class=\"method-signature\">public <strong>isCancelable</strong> ()</h3> <p>Check whether the event is cancelable</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Events_Event.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Events_Event.html</a>\n  </p>\n</div>\n","api/phalcon_events_exception":"<h1 id=\"class-phalcon-events-exception\">Class <strong>Phalcon\\Events\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/events/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Events_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Events_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_db_adapter_pdo":"<h1 id=\"abstract-class-phalcon-db-adapter-pdo\">Abstract class <strong>Phalcon\\Db\\Adapter\\Pdo</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_db_adapter\"><em>Phalcon\\Db\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/adapter/pdo.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Phalcon\\Db\\Adapter\\Pdo is the Phalcon\\Db that internally uses PDO to connect to a database</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n $config = [\n   'host'     =&gt; 'localhost',\n   'dbname'   =&gt; 'blog',\n   'port'     =&gt; 3306,\n   'username' =&gt; 'sigma',\n   'password' =&gt; 'secret'\n ];\n\n $connection = new Mysql($config);\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $descriptor)</h3> <p>Constructor for Phalcon\\Db\\Adapter\\Pdo</p> <h3 id=\"connect\" class=\"method-signature\">public <strong>connect</strong> ([<em>array</em> $descriptor])</h3> <p>This method is automatically called in \\Phalcon\\Db\\Adapter\\Pdo constructor. Call it when you need to restore a database connection.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n // Make a connection\n $connection = new Mysql([\n  'host'     =&gt; 'localhost',\n  'username' =&gt; 'sigma',\n  'password' =&gt; 'secret',\n  'dbname'   =&gt; 'blog',\n  'port'     =&gt; 3306,\n ]);\n\n // Reconnect\n $connection-&gt;connect();\n</pre> <h3 id=\"prepare\" class=\"method-signature\">public <strong>prepare</strong> (<em>mixed</em> $sqlStatement)</h3> <p>Returns a PDO prepared statement to be executed with ‘executePrepared’</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Column;\n\n $statement = $db-&gt;prepare('SELECT * FROM robots WHERE name = :name');\n $result = $connection-&gt;executePrepared($statement, ['name' =&gt; 'Voltron'], ['name' =&gt; Column::BIND_PARAM_INT]);\n</pre> <h3 id=\"executeprepared\" class=\"method-signature\">public <em>PDOStatement</em> <strong>executePrepared</strong> (<em>PDOStatement</em> $statement, <em>array</em> $placeholders, <em>array</em> $dataTypes)</h3> <p>Executes a prepared statement binding. This function uses integer indexes starting from zero</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Column;\n\n $statement = $db-&gt;prepare('SELECT * FROM robots WHERE name = :name');\n $result = $connection-&gt;executePrepared($statement, ['name' =&gt; 'Voltron'], ['name' =&gt; Column::BIND_PARAM_INT]);\n</pre> <h3 id=\"query\" class=\"method-signature\">public <strong>query</strong> (<em>mixed</em> $sqlStatement, [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes])</h3> <p>Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server is returning rows</p> <pre class=\"highlight-php\" data-language=\"php\">//Querying data\n$resultset = $connection-&gt;query(\"SELECT * FROM robots WHERE type='mechanical'\");\n$resultset = $connection-&gt;query(\"SELECT * FROM robots WHERE type=?\", array(\"mechanical\"));\n</pre> <h3 id=\"execute\" class=\"method-signature\">public <strong>execute</strong> (<em>mixed</em> $sqlStatement, [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes])</h3> <p>Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn’t return any rows</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting data\n$success = $connection-&gt;execute(\"INSERT INTO robots VALUES (1, 'Astro Boy')\");\n$success = $connection-&gt;execute(\"INSERT INTO robots VALUES (?, ?)\", array(1, 'Astro Boy'));\n</pre> <h3 id=\"affectedrows\" class=\"method-signature\">public <strong>affectedRows</strong> ()</h3> <p>Returns the number of affected rows by the lastest INSERT/UPDATE/DELETE executed in the database system</p> <pre class=\"highlight-php\" data-language=\"php\">$connection-&gt;execute(\"DELETE FROM robots\");\necho $connection-&gt;affectedRows(), ' were deleted';\n</pre> <h3 id=\"close\" class=\"method-signature\">public <strong>close</strong> ()</h3> <p>Closes the active connection returning success. Phalcon automatically closes and destroys active connections when the request ends</p> <h3 id=\"escapeidentifier\" class=\"method-signature\">public <em>string</em> <strong>escapeIdentifier</strong> (<em>string</em> $identifier)</h3> <p>Escapes a column/table/schema name</p> <pre class=\"highlight-php\" data-language=\"php\">$escapedTable = $connection-&gt;escapeIdentifier('robots');\n$escapedTable = $connection-&gt;escapeIdentifier(['store', 'robots']);\n</pre> <h3 id=\"escapestring\" class=\"method-signature\">public <strong>escapeString</strong> (<em>mixed</em> $str)</h3> <p>Escapes a value to avoid SQL injections according to the active charset in the connection</p> <pre class=\"highlight-php\" data-language=\"php\">$escapedStr = $connection-&gt;escapeString('some dangerous value');\n</pre> <h3 id=\"convertboundparams\" class=\"method-signature\">public <strong>convertBoundParams</strong> (<em>mixed</em> $sql, [<em>array</em> $params])</h3> <p>Converts bound parameters such as :name: or ?1 into PDO bind params ?</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;convertBoundParams('SELECT * FROM robots WHERE name = :name:', array('Bender')));\n</pre> <h3 id=\"lastinsertid\" class=\"method-signature\">public <em>int|boolean</em> <strong>lastInsertId</strong> ([<em>string</em> $sequenceName])</h3> <p>Returns the insert id for the auto_increment/serial column inserted in the lastest executed SQL statement</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot\n $success = $connection-&gt;insert(\n     \"robots\",\n     array(\"Astro Boy\", 1952),\n     array(\"name\", \"year\")\n );\n\n //Getting the generated id\n $id = $connection-&gt;lastInsertId();\n</pre> <h3 id=\"begin\" class=\"method-signature\">public <strong>begin</strong> ([<em>mixed</em> $nesting])</h3> <p>Starts a transaction in the connection</p> <h3 id=\"rollback\" class=\"method-signature\">public <strong>rollback</strong> ([<em>mixed</em> $nesting])</h3> <p>Rollbacks the active transaction in the connection</p> <h3 id=\"commit\" class=\"method-signature\">public <strong>commit</strong> ([<em>mixed</em> $nesting])</h3> <p>Commits the active transaction in the connection</p> <h3 id=\"gettransactionlevel\" class=\"method-signature\">public <strong>getTransactionLevel</strong> ()</h3> <p>Returns the current transaction nesting level</p> <h3 id=\"isundertransaction\" class=\"method-signature\">public <strong>isUnderTransaction</strong> ()</h3> <p>Checks whether the connection is under a transaction</p> <pre class=\"highlight-php\" data-language=\"php\">$connection-&gt;begin();\nvar_dump($connection-&gt;isUnderTransaction()); //true\n</pre> <h3 id=\"getinternalhandler\" class=\"method-signature\">public <strong>getInternalHandler</strong> ()</h3> <p>Return internal PDO handler</p> <h3 id=\"geterrorinfo\" class=\"method-signature\">public <em>array</em> <strong>getErrorInfo</strong> ()</h3> <p>Return the error info, if any</p> <h3 id=\"getdialecttype\" class=\"method-signature\">public <strong>getDialectType</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Name of the dialect used</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Type of database system the adapter is used for</p> <h3 id=\"getsqlvariables\" class=\"method-signature\">public <strong>getSqlVariables</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Active SQL bound parameter variables</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"setdialect\" class=\"method-signature\">public <strong>setDialect</strong> (<a class=\"reference internal\" href=\"phalcon_db_dialectinterface\"><em>Phalcon\\Db\\DialectInterface</em></a> $dialect) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Sets the dialect used to produce the SQL</p> <h3 id=\"getdialect\" class=\"method-signature\">public <strong>getDialect</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns internal dialect instance</p> <h3 id=\"fetchone\" class=\"method-signature\">public <strong>fetchOne</strong> (<em>mixed</em> $sqlQuery, [<em>mixed</em> $fetchMode], [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the first row in a SQL query result</p> <pre class=\"highlight-php\" data-language=\"php\">//Getting first robot\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n//Getting first robot with associative indexes only\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\", Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n</pre> <h3 id=\"fetchall\" class=\"method-signature\">public <em>array</em> <strong>fetchAll</strong> (<em>string</em> $sqlQuery, [<em>int</em> $fetchMode], [<em>array</em> $bindParams], [<em>array</em> $bindTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Dumps the complete result of a query into an array</p> <pre class=\"highlight-php\" data-language=\"php\">//Getting all robots with associative indexes only\n$robots = $connection-&gt;fetchAll(\"SELECT * FROM robots\", Phalcon\\Db::FETCH_ASSOC);\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n  //Getting all robots that contains word \"robot\" withing the name\n  $robots = $connection-&gt;fetchAll(\"SELECT * FROM robots WHERE name LIKE :name\",\n    Phalcon\\Db::FETCH_ASSOC,\n    array('name' =&gt; '%robot%')\n  );\nforeach($robots as $robot){\n    print_r($robot);\n}\n</pre> <h3 id=\"fetchcolumn\" class=\"method-signature\">public <em>string|</em> <strong>fetchColumn</strong> (<em>string</em> $sqlQuery, [<em>array</em> $placeholders], [<em>int|string</em> $column]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the n’th field of first row in a SQL query result</p> <pre class=\"highlight-php\" data-language=\"php\">//Getting count of robots\n$robotsCount = $connection-&gt;fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n//Getting name of last edited robot\n$robot = $connection-&gt;fetchColumn(\"SELECT id, name FROM robots order by modified desc\", 1);\nprint_r($robot);\n</pre> <h3 id=\"insert\" class=\"method-signature\">public <em>boolean</em> <strong>insert</strong> (<em>string|array</em> $table, <em>array</em> $values, [<em>array</em> $fields], [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Inserts data into a table using custom RDBMS SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">// Inserting a new robot\n $success = $connection-&gt;insert(\n \"robots\",\n array(\"Astro Boy\", 1952),\n array(\"name\", \"year\")\n );\n\n // Next SQL sentence is sent to the database system\n INSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</pre> <h3 id=\"insertasdict\" class=\"method-signature\">public <em>boolean</em> <strong>insertAsDict</strong> (<em>string</em> $table, <em>array</em> $data, [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Inserts data into a table using custom RBDM SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot\n $success = $connection-&gt;insertAsDict(\n \"robots\",\n array(\n      \"name\" =&gt; \"Astro Boy\",\n      \"year\" =&gt; 1952\n  )\n );\n\n //Next SQL sentence is sent to the database system\n INSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</pre> <h3 id=\"update\" class=\"method-signature\">public <em>boolean</em> <strong>update</strong> (<em>string|array</em> $table, <em>array</em> $fields, <em>array</em> $values, [<em>string|array</em> $whereCondition], [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Updates data on a table using custom RBDM SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Updating existing robot\n $success = $connection-&gt;update(\n \"robots\",\n array(\"name\"),\n array(\"New Astro Boy\"),\n \"id = 101\"\n );\n\n //Next SQL sentence is sent to the database system\n UPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n //Updating existing robot with array condition and $dataTypes\n $success = $connection-&gt;update(\n \"robots\",\n array(\"name\"),\n array(\"New Astro Boy\"),\n array(\n     'conditions' =&gt; \"id = ?\",\n     'bind' =&gt; array($some_unsafe_id),\n     'bindTypes' =&gt; array(PDO::PARAM_INT) //use only if you use $dataTypes param\n ),\n array(PDO::PARAM_STR)\n );\n</pre> <p>Warning! If $whereCondition is string it not escaped.</p> <h3 id=\"updateasdict\" class=\"method-signature\">public <em>boolean</em> <strong>updateAsDict</strong> (<em>string</em> $table, <em>array</em> $data, [<em>string</em> $whereCondition], [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Updates data on a table using custom RBDM SQL syntax Another, more convenient syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Updating existing robot\n $success = $connection-&gt;updateAsDict(\n \"robots\",\n array(\n      \"name\" =&gt; \"New Astro Boy\"\n  ),\n \"id = 101\"\n );\n\n //Next SQL sentence is sent to the database system\n UPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n</pre> <h3 id=\"delete\" class=\"method-signature\">public <em>boolean</em> <strong>delete</strong> (<em>string|array</em> $table, [<em>string</em> $whereCondition], [<em>array</em> $placeholders], [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Deletes data from a table using custom RBDM SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Deleting existing robot\n $success = $connection-&gt;delete(\n \"robots\",\n \"id = 101\"\n );\n\n //Next SQL sentence is generated\n DELETE FROM `robots` WHERE `id` = 101\n</pre> <h3 id=\"getcolumnlist\" class=\"method-signature\">public <em>string</em> <strong>getColumnList</strong> (<em>array</em> $columnList) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Gets a list of columns</p> <h3 id=\"limit\" class=\"method-signature\">public <strong>limit</strong> (<em>mixed</em> $sqlQuery, <em>mixed</em> $number) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Appends a LIMIT clause to $sqlQuery argument</p> <pre class=\"highlight-php\" data-language=\"php\">echo $connection-&gt;limit(\"SELECT * FROM robots\", 5);\n</pre> <h3 id=\"tableexists\" class=\"method-signature\">public <strong>tableExists</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Generates SQL checking for the existence of a schema.table</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($connection-&gt;tableExists(\"blog\", \"posts\"));\n</pre> <h3 id=\"viewexists\" class=\"method-signature\">public <strong>viewExists</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Generates SQL checking for the existence of a schema.view</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($connection-&gt;viewExists(\"active_users\", \"posts\"));\n</pre> <h3 id=\"forupdate\" class=\"method-signature\">public <strong>forUpdate</strong> (<em>mixed</em> $sqlQuery) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns a SQL modified with a FOR UPDATE clause</p> <h3 id=\"sharedlock\" class=\"method-signature\">public <strong>sharedLock</strong> (<em>mixed</em> $sqlQuery) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <h3 id=\"createtable\" class=\"method-signature\">public <strong>createTable</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>array</em> $definition) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Creates a table</p> <h3 id=\"droptable\" class=\"method-signature\">public <strong>dropTable</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a table from a schema/database</p> <h3 id=\"createview\" class=\"method-signature\">public <strong>createView</strong> (<em>mixed</em> $viewName, <em>array</em> $definition, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Creates a view</p> <h3 id=\"dropview\" class=\"method-signature\">public <strong>dropView</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a view</p> <h3 id=\"addcolumn\" class=\"method-signature\">public <strong>addColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Adds a column to a table</p> <h3 id=\"modifycolumn\" class=\"method-signature\">public <strong>modifyColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column, [<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $currentColumn]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Modifies a table column based on a definition</p> <h3 id=\"dropcolumn\" class=\"method-signature\">public <strong>dropColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $columnName) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a column from a table</p> <h3 id=\"addindex\" class=\"method-signature\">public <strong>addIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Adds an index to a table</p> <h3 id=\"dropindex\" class=\"method-signature\">public <strong>dropIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $indexName) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drop an index from a table</p> <h3 id=\"addprimarykey\" class=\"method-signature\">public <strong>addPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Adds a primary key to a table</p> <h3 id=\"dropprimarykey\" class=\"method-signature\">public <strong>dropPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a table’s primary key</p> <h3 id=\"addforeignkey\" class=\"method-signature\">public <strong>addForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_referenceinterface\"><em>Phalcon\\Db\\ReferenceInterface</em></a> $reference) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Adds a foreign key to a table</p> <h3 id=\"dropforeignkey\" class=\"method-signature\">public <strong>dropForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $referenceName) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a foreign key from a table</p> <h3 id=\"getcolumndefinition\" class=\"method-signature\">public <strong>getColumnDefinition</strong> (<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the SQL column definition from a column</p> <h3 id=\"listtables\" class=\"method-signature\">public <strong>listTables</strong> ([<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>List all tables on a database</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;listTables(\"blog\"));\n</pre> <h3 id=\"listviews\" class=\"method-signature\">public <strong>listViews</strong> ([<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>List all views on a database</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;listViews(\"blog\"));\n</pre> <h3 id=\"describeindexes\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_db_index\"><em>Phalcon\\Db\\Index</em></a> [] <strong>describeIndexes</strong> (<em>string</em> $table, [<em>string</em> $schema]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Lists table indexes</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;describeIndexes('robots_parts'));\n</pre> <h3 id=\"describereferences\" class=\"method-signature\">public <strong>describeReferences</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Lists table references</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;describeReferences('robots_parts'));\n</pre> <h3 id=\"tableoptions\" class=\"method-signature\">public <strong>tableOptions</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Gets creation options from a table</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;tableOptions('robots'));\n</pre> <h3 id=\"createsavepoint\" class=\"method-signature\">public <strong>createSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Creates a new savepoint</p> <h3 id=\"releasesavepoint\" class=\"method-signature\">public <strong>releaseSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Releases given savepoint</p> <h3 id=\"rollbacksavepoint\" class=\"method-signature\">public <strong>rollbackSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Rollbacks given savepoint</p> <h3 id=\"setnestedtransactionswithsavepoints\" class=\"method-signature\">public <strong>setNestedTransactionsWithSavepoints</strong> (<em>mixed</em> $nestedTransactionsWithSavepoints) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Set if nested transactions should use savepoints</p> <h3 id=\"isnestedtransactionswithsavepoints\" class=\"method-signature\">public <strong>isNestedTransactionsWithSavepoints</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns if nested transactions should use savepoints</p> <h3 id=\"getnestedtransactionsavepointname\" class=\"method-signature\">public <strong>getNestedTransactionSavepointName</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the savepoint name to use for nested transactions</p> <h3 id=\"getdefaultidvalue\" class=\"method-signature\">public <strong>getDefaultIdValue</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the default identity value to be inserted in an identity column</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot with a valid default value for the column 'id'\n $success = $connection-&gt;insert(\n \"robots\",\n array($connection-&gt;getDefaultIdValue(), \"Astro Boy\", 1952),\n array(\"id\", \"name\", \"year\")\n );\n</pre> <h3 id=\"getdefaultvalue\" class=\"method-signature\">public <strong>getDefaultValue</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the default value to make the RBDM use the default value declared in the table definition</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot with a valid default value for the column 'year'\n $success = $connection-&gt;insert(\n \"robots\",\n array(\"Astro Boy\", $connection-&gt;getDefaultValue()),\n array(\"name\", \"year\")\n );\n</pre> <h3 id=\"supportsequences\" class=\"method-signature\">public <strong>supportSequences</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Check whether the database system requires a sequence to produce auto-numeric values</p> <h3 id=\"useexplicitidvalue\" class=\"method-signature\">public <strong>useExplicitIdValue</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Check whether the database system requires an explicit value for identity columns</p> <h3 id=\"getdescriptor\" class=\"method-signature\">public <strong>getDescriptor</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Return descriptor used to connect to the active database</p> <h3 id=\"getconnectionid\" class=\"method-signature\">public <em>string</em> <strong>getConnectionId</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Gets the active connection unique identifier</p> <h3 id=\"getsqlstatement\" class=\"method-signature\">public <strong>getSQLStatement</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Active SQL statement in the object</p> <h3 id=\"getrealsqlstatement\" class=\"method-signature\">public <strong>getRealSQLStatement</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Active SQL statement in the object without replace bound paramters</p> <h3 id=\"getsqlbindtypes\" class=\"method-signature\">public <em>array</em> <strong>getSQLBindTypes</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Active SQL statement in the object</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo.html</a>\n  </p>\n</div>\n","api/phalcon_db_adapter_pdo_mysql":"<h1 id=\"class-phalcon-db-adapter-pdo-mysql\">Class <strong>Phalcon\\Db\\Adapter\\Pdo\\Mysql</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_db_adapter_pdo\"><em>Phalcon\\Db\\Adapter\\Pdo</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_db_adapterinterface\"><em>Phalcon\\Db\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/adapter/pdo/mysql.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Specific functions for the Mysql database system</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n $config = [\n   'host'     =&gt; 'localhost',\n   'dbname'   =&gt; 'blog',\n   'port'     =&gt; 3306,\n   'username' =&gt; 'sigma',\n   'password' =&gt; 'secret'\n ];\n\n $connection = new Mysql($config);\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"escapeidentifier\" class=\"method-signature\">public <strong>escapeIdentifier</strong> (<em>mixed</em> $identifier)</h3> <p>Escapes a column/table/schema name</p> <pre class=\"highlight-php\" data-language=\"php\">echo $connection-&gt;escapeIdentifier('my_table'); // `my_table`\n echo $connection-&gt;escapeIdentifier(['companies', 'name']); // `companies`.`name`\n</pre> <pre class=\"highlight-php\" data-language=\"php\">@param string|array identifier\n</pre> <h3 id=\"describecolumns\" class=\"method-signature\">public <strong>describeColumns</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>Returns an array of Phalcon\\Db\\Column objects describing a table</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;describeColumns(\"posts\"));\n</pre> <h3 id=\"describeindexes\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> [] <strong>describeIndexes</strong> (<em>string</em> $table, [<em>string</em> $schema])</h3> <p>Lists table indexes</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;describeIndexes('robots_parts'));\n</pre> <h3 id=\"describereferences\" class=\"method-signature\">public <strong>describeReferences</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>Lists table references</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;describeReferences('robots_parts'));\n</pre> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $descriptor) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Constructor for Phalcon\\Db\\Adapter\\Pdo</p> <h3 id=\"connect\" class=\"method-signature\">public <strong>connect</strong> ([<em>array</em> $descriptor]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>This method is automatically called in \\Phalcon\\Db\\Adapter\\Pdo constructor. Call it when you need to restore a database connection.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n // Make a connection\n $connection = new Mysql([\n  'host'     =&gt; 'localhost',\n  'username' =&gt; 'sigma',\n  'password' =&gt; 'secret',\n  'dbname'   =&gt; 'blog',\n  'port'     =&gt; 3306,\n ]);\n\n // Reconnect\n $connection-&gt;connect();\n</pre> <h3 id=\"prepare\" class=\"method-signature\">public <strong>prepare</strong> (<em>mixed</em> $sqlStatement) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Returns a PDO prepared statement to be executed with ‘executePrepared’</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Column;\n\n $statement = $db-&gt;prepare('SELECT * FROM robots WHERE name = :name');\n $result = $connection-&gt;executePrepared($statement, ['name' =&gt; 'Voltron'], ['name' =&gt; Column::BIND_PARAM_INT]);\n</pre> <h3 id=\"executeprepared\" class=\"method-signature\">public <em>PDOStatement</em> <strong>executePrepared</strong> (<em>PDOStatement</em> $statement, <em>array</em> $placeholders, <em>array</em> $dataTypes) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Executes a prepared statement binding. This function uses integer indexes starting from zero</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Column;\n\n $statement = $db-&gt;prepare('SELECT * FROM robots WHERE name = :name');\n $result = $connection-&gt;executePrepared($statement, ['name' =&gt; 'Voltron'], ['name' =&gt; Column::BIND_PARAM_INT]);\n</pre> <h3 id=\"query\" class=\"method-signature\">public <strong>query</strong> (<em>mixed</em> $sqlStatement, [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server is returning rows</p> <pre class=\"highlight-php\" data-language=\"php\">//Querying data\n$resultset = $connection-&gt;query(\"SELECT * FROM robots WHERE type='mechanical'\");\n$resultset = $connection-&gt;query(\"SELECT * FROM robots WHERE type=?\", array(\"mechanical\"));\n</pre> <h3 id=\"execute\" class=\"method-signature\">public <strong>execute</strong> (<em>mixed</em> $sqlStatement, [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn’t return any rows</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting data\n$success = $connection-&gt;execute(\"INSERT INTO robots VALUES (1, 'Astro Boy')\");\n$success = $connection-&gt;execute(\"INSERT INTO robots VALUES (?, ?)\", array(1, 'Astro Boy'));\n</pre> <h3 id=\"affectedrows\" class=\"method-signature\">public <strong>affectedRows</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Returns the number of affected rows by the lastest INSERT/UPDATE/DELETE executed in the database system</p> <pre class=\"highlight-php\" data-language=\"php\">$connection-&gt;execute(\"DELETE FROM robots\");\necho $connection-&gt;affectedRows(), ' were deleted';\n</pre> <h3 id=\"close\" class=\"method-signature\">public <strong>close</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Closes the active connection returning success. Phalcon automatically closes and destroys active connections when the request ends</p> <h3 id=\"escapestring\" class=\"method-signature\">public <strong>escapeString</strong> (<em>mixed</em> $str) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Escapes a value to avoid SQL injections according to the active charset in the connection</p> <pre class=\"highlight-php\" data-language=\"php\">$escapedStr = $connection-&gt;escapeString('some dangerous value');\n</pre> <h3 id=\"convertboundparams\" class=\"method-signature\">public <strong>convertBoundParams</strong> (<em>mixed</em> $sql, [<em>array</em> $params]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Converts bound parameters such as :name: or ?1 into PDO bind params ?</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;convertBoundParams('SELECT * FROM robots WHERE name = :name:', array('Bender')));\n</pre> <h3 id=\"lastinsertid\" class=\"method-signature\">public <em>int|boolean</em> <strong>lastInsertId</strong> ([<em>string</em> $sequenceName]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Returns the insert id for the auto_increment/serial column inserted in the lastest executed SQL statement</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot\n $success = $connection-&gt;insert(\n     \"robots\",\n     array(\"Astro Boy\", 1952),\n     array(\"name\", \"year\")\n );\n\n //Getting the generated id\n $id = $connection-&gt;lastInsertId();\n</pre> <h3 id=\"begin\" class=\"method-signature\">public <strong>begin</strong> ([<em>mixed</em> $nesting]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Starts a transaction in the connection</p> <h3 id=\"rollback\" class=\"method-signature\">public <strong>rollback</strong> ([<em>mixed</em> $nesting]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Rollbacks the active transaction in the connection</p> <h3 id=\"commit\" class=\"method-signature\">public <strong>commit</strong> ([<em>mixed</em> $nesting]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Commits the active transaction in the connection</p> <h3 id=\"gettransactionlevel\" class=\"method-signature\">public <strong>getTransactionLevel</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Returns the current transaction nesting level</p> <h3 id=\"isundertransaction\" class=\"method-signature\">public <strong>isUnderTransaction</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Checks whether the connection is under a transaction</p> <pre class=\"highlight-php\" data-language=\"php\">$connection-&gt;begin();\nvar_dump($connection-&gt;isUnderTransaction()); //true\n</pre> <h3 id=\"getinternalhandler\" class=\"method-signature\">public <strong>getInternalHandler</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Return internal PDO handler</p> <h3 id=\"geterrorinfo\" class=\"method-signature\">public <em>array</em> <strong>getErrorInfo</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Return the error info, if any</p> <h3 id=\"getdialecttype\" class=\"method-signature\">public <strong>getDialectType</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Name of the dialect used</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Type of database system the adapter is used for</p> <h3 id=\"getsqlvariables\" class=\"method-signature\">public <strong>getSqlVariables</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Active SQL bound parameter variables</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"setdialect\" class=\"method-signature\">public <strong>setDialect</strong> (<a class=\"reference internal\" href=\"phalcon_db_dialectinterface\"><em>Phalcon\\Db\\DialectInterface</em></a> $dialect) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Sets the dialect used to produce the SQL</p> <h3 id=\"getdialect\" class=\"method-signature\">public <strong>getDialect</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns internal dialect instance</p> <h3 id=\"fetchone\" class=\"method-signature\">public <strong>fetchOne</strong> (<em>mixed</em> $sqlQuery, [<em>mixed</em> $fetchMode], [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the first row in a SQL query result</p> <pre class=\"highlight-php\" data-language=\"php\">//Getting first robot\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n//Getting first robot with associative indexes only\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\", Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n</pre> <h3 id=\"fetchall\" class=\"method-signature\">public <em>array</em> <strong>fetchAll</strong> (<em>string</em> $sqlQuery, [<em>int</em> $fetchMode], [<em>array</em> $bindParams], [<em>array</em> $bindTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Dumps the complete result of a query into an array</p> <pre class=\"highlight-php\" data-language=\"php\">//Getting all robots with associative indexes only\n$robots = $connection-&gt;fetchAll(\"SELECT * FROM robots\", Phalcon\\Db::FETCH_ASSOC);\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n  //Getting all robots that contains word \"robot\" withing the name\n  $robots = $connection-&gt;fetchAll(\"SELECT * FROM robots WHERE name LIKE :name\",\n    Phalcon\\Db::FETCH_ASSOC,\n    array('name' =&gt; '%robot%')\n  );\nforeach($robots as $robot){\n    print_r($robot);\n}\n</pre> <h3 id=\"fetchcolumn\" class=\"method-signature\">public <em>string|</em> <strong>fetchColumn</strong> (<em>string</em> $sqlQuery, [<em>array</em> $placeholders], [<em>int|string</em> $column]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the n’th field of first row in a SQL query result</p> <pre class=\"highlight-php\" data-language=\"php\">//Getting count of robots\n$robotsCount = $connection-&gt;fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n//Getting name of last edited robot\n$robot = $connection-&gt;fetchColumn(\"SELECT id, name FROM robots order by modified desc\", 1);\nprint_r($robot);\n</pre> <h3 id=\"insert\" class=\"method-signature\">public <em>boolean</em> <strong>insert</strong> (<em>string|array</em> $table, <em>array</em> $values, [<em>array</em> $fields], [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Inserts data into a table using custom RDBMS SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">// Inserting a new robot\n $success = $connection-&gt;insert(\n \"robots\",\n array(\"Astro Boy\", 1952),\n array(\"name\", \"year\")\n );\n\n // Next SQL sentence is sent to the database system\n INSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</pre> <h3 id=\"insertasdict\" class=\"method-signature\">public <em>boolean</em> <strong>insertAsDict</strong> (<em>string</em> $table, <em>array</em> $data, [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Inserts data into a table using custom RBDM SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot\n $success = $connection-&gt;insertAsDict(\n \"robots\",\n array(\n      \"name\" =&gt; \"Astro Boy\",\n      \"year\" =&gt; 1952\n  )\n );\n\n //Next SQL sentence is sent to the database system\n INSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</pre> <h3 id=\"update\" class=\"method-signature\">public <em>boolean</em> <strong>update</strong> (<em>string|array</em> $table, <em>array</em> $fields, <em>array</em> $values, [<em>string|array</em> $whereCondition], [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Updates data on a table using custom RBDM SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Updating existing robot\n $success = $connection-&gt;update(\n \"robots\",\n array(\"name\"),\n array(\"New Astro Boy\"),\n \"id = 101\"\n );\n\n //Next SQL sentence is sent to the database system\n UPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n //Updating existing robot with array condition and $dataTypes\n $success = $connection-&gt;update(\n \"robots\",\n array(\"name\"),\n array(\"New Astro Boy\"),\n array(\n     'conditions' =&gt; \"id = ?\",\n     'bind' =&gt; array($some_unsafe_id),\n     'bindTypes' =&gt; array(PDO::PARAM_INT) //use only if you use $dataTypes param\n ),\n array(PDO::PARAM_STR)\n );\n</pre> <p>Warning! If $whereCondition is string it not escaped.</p> <h3 id=\"updateasdict\" class=\"method-signature\">public <em>boolean</em> <strong>updateAsDict</strong> (<em>string</em> $table, <em>array</em> $data, [<em>string</em> $whereCondition], [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Updates data on a table using custom RBDM SQL syntax Another, more convenient syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Updating existing robot\n $success = $connection-&gt;updateAsDict(\n \"robots\",\n array(\n      \"name\" =&gt; \"New Astro Boy\"\n  ),\n \"id = 101\"\n );\n\n //Next SQL sentence is sent to the database system\n UPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n</pre> <h3 id=\"delete\" class=\"method-signature\">public <em>boolean</em> <strong>delete</strong> (<em>string|array</em> $table, [<em>string</em> $whereCondition], [<em>array</em> $placeholders], [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Deletes data from a table using custom RBDM SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Deleting existing robot\n $success = $connection-&gt;delete(\n \"robots\",\n \"id = 101\"\n );\n\n //Next SQL sentence is generated\n DELETE FROM `robots` WHERE `id` = 101\n</pre> <h3 id=\"getcolumnlist\" class=\"method-signature\">public <em>string</em> <strong>getColumnList</strong> (<em>array</em> $columnList) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Gets a list of columns</p> <h3 id=\"limit\" class=\"method-signature\">public <strong>limit</strong> (<em>mixed</em> $sqlQuery, <em>mixed</em> $number) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Appends a LIMIT clause to $sqlQuery argument</p> <pre class=\"highlight-php\" data-language=\"php\">echo $connection-&gt;limit(\"SELECT * FROM robots\", 5);\n</pre> <h3 id=\"tableexists\" class=\"method-signature\">public <strong>tableExists</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Generates SQL checking for the existence of a schema.table</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($connection-&gt;tableExists(\"blog\", \"posts\"));\n</pre> <h3 id=\"viewexists\" class=\"method-signature\">public <strong>viewExists</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Generates SQL checking for the existence of a schema.view</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($connection-&gt;viewExists(\"active_users\", \"posts\"));\n</pre> <h3 id=\"forupdate\" class=\"method-signature\">public <strong>forUpdate</strong> (<em>mixed</em> $sqlQuery) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns a SQL modified with a FOR UPDATE clause</p> <h3 id=\"sharedlock\" class=\"method-signature\">public <strong>sharedLock</strong> (<em>mixed</em> $sqlQuery) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <h3 id=\"createtable\" class=\"method-signature\">public <strong>createTable</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>array</em> $definition) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Creates a table</p> <h3 id=\"droptable\" class=\"method-signature\">public <strong>dropTable</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a table from a schema/database</p> <h3 id=\"createview\" class=\"method-signature\">public <strong>createView</strong> (<em>mixed</em> $viewName, <em>array</em> $definition, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Creates a view</p> <h3 id=\"dropview\" class=\"method-signature\">public <strong>dropView</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a view</p> <h3 id=\"addcolumn\" class=\"method-signature\">public <strong>addColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Adds a column to a table</p> <h3 id=\"modifycolumn\" class=\"method-signature\">public <strong>modifyColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column, [<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $currentColumn]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Modifies a table column based on a definition</p> <h3 id=\"dropcolumn\" class=\"method-signature\">public <strong>dropColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $columnName) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a column from a table</p> <h3 id=\"addindex\" class=\"method-signature\">public <strong>addIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Adds an index to a table</p> <h3 id=\"dropindex\" class=\"method-signature\">public <strong>dropIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $indexName) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drop an index from a table</p> <h3 id=\"addprimarykey\" class=\"method-signature\">public <strong>addPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Adds a primary key to a table</p> <h3 id=\"dropprimarykey\" class=\"method-signature\">public <strong>dropPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a table’s primary key</p> <h3 id=\"addforeignkey\" class=\"method-signature\">public <strong>addForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_referenceinterface\"><em>Phalcon\\Db\\ReferenceInterface</em></a> $reference) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Adds a foreign key to a table</p> <h3 id=\"dropforeignkey\" class=\"method-signature\">public <strong>dropForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $referenceName) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a foreign key from a table</p> <h3 id=\"getcolumndefinition\" class=\"method-signature\">public <strong>getColumnDefinition</strong> (<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the SQL column definition from a column</p> <h3 id=\"listtables\" class=\"method-signature\">public <strong>listTables</strong> ([<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>List all tables on a database</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;listTables(\"blog\"));\n</pre> <h3 id=\"listviews\" class=\"method-signature\">public <strong>listViews</strong> ([<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>List all views on a database</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;listViews(\"blog\"));\n</pre> <h3 id=\"tableoptions\" class=\"method-signature\">public <strong>tableOptions</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Gets creation options from a table</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;tableOptions('robots'));\n</pre> <h3 id=\"createsavepoint\" class=\"method-signature\">public <strong>createSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Creates a new savepoint</p> <h3 id=\"releasesavepoint\" class=\"method-signature\">public <strong>releaseSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Releases given savepoint</p> <h3 id=\"rollbacksavepoint\" class=\"method-signature\">public <strong>rollbackSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Rollbacks given savepoint</p> <h3 id=\"setnestedtransactionswithsavepoints\" class=\"method-signature\">public <strong>setNestedTransactionsWithSavepoints</strong> (<em>mixed</em> $nestedTransactionsWithSavepoints) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Set if nested transactions should use savepoints</p> <h3 id=\"isnestedtransactionswithsavepoints\" class=\"method-signature\">public <strong>isNestedTransactionsWithSavepoints</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns if nested transactions should use savepoints</p> <h3 id=\"getnestedtransactionsavepointname\" class=\"method-signature\">public <strong>getNestedTransactionSavepointName</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the savepoint name to use for nested transactions</p> <h3 id=\"getdefaultidvalue\" class=\"method-signature\">public <strong>getDefaultIdValue</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the default identity value to be inserted in an identity column</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot with a valid default value for the column 'id'\n $success = $connection-&gt;insert(\n \"robots\",\n array($connection-&gt;getDefaultIdValue(), \"Astro Boy\", 1952),\n array(\"id\", \"name\", \"year\")\n );\n</pre> <h3 id=\"getdefaultvalue\" class=\"method-signature\">public <strong>getDefaultValue</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the default value to make the RBDM use the default value declared in the table definition</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot with a valid default value for the column 'year'\n $success = $connection-&gt;insert(\n \"robots\",\n array(\"Astro Boy\", $connection-&gt;getDefaultValue()),\n array(\"name\", \"year\")\n );\n</pre> <h3 id=\"supportsequences\" class=\"method-signature\">public <strong>supportSequences</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Check whether the database system requires a sequence to produce auto-numeric values</p> <h3 id=\"useexplicitidvalue\" class=\"method-signature\">public <strong>useExplicitIdValue</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Check whether the database system requires an explicit value for identity columns</p> <h3 id=\"getdescriptor\" class=\"method-signature\">public <strong>getDescriptor</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Return descriptor used to connect to the active database</p> <h3 id=\"getconnectionid\" class=\"method-signature\">public <em>string</em> <strong>getConnectionId</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Gets the active connection unique identifier</p> <h3 id=\"getsqlstatement\" class=\"method-signature\">public <strong>getSQLStatement</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Active SQL statement in the object</p> <h3 id=\"getrealsqlstatement\" class=\"method-signature\">public <strong>getRealSQLStatement</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Active SQL statement in the object without replace bound paramters</p> <h3 id=\"getsqlbindtypes\" class=\"method-signature\">public <em>array</em> <strong>getSQLBindTypes</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Active SQL statement in the object</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Mysql.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Mysql.html</a>\n  </p>\n</div>\n","api/phalcon_db_adapter_pdo_postgresql":"<h1 id=\"class-phalcon-db-adapter-pdo-postgresql\">Class <strong>Phalcon\\Db\\Adapter\\Pdo\\Postgresql</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_db_adapter_pdo\"><em>Phalcon\\Db\\Adapter\\Pdo</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_db_adapterinterface\"><em>Phalcon\\Db\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/adapter/pdo/postgresql.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Specific functions for the Postgresql database system</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Adapter\\Pdo\\Postgresql;\n\n $config = [\n   'host'     =&gt; 'localhost',\n   'dbname'   =&gt; 'blog',\n   'port'     =&gt; 5432,\n   'username' =&gt; 'postgres',\n   'password' =&gt; 'secret'\n ];\n\n $connection = new Postgresql($config);\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"connect\" class=\"method-signature\">public <strong>connect</strong> ([<em>array</em> $descriptor])</h3> <p>This method is automatically called in Phalcon\\Db\\Adapter\\Pdo constructor. Call it when you need to restore a database connection.</p> <h3 id=\"describecolumns\" class=\"method-signature\">public <strong>describeColumns</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>Returns an array of Phalcon\\Db\\Column objects describing a table</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;describeColumns(\"posts\"));\n</pre> <h3 id=\"createtable\" class=\"method-signature\">public <strong>createTable</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>array</em> $definition)</h3> <p>Creates a table</p> <h3 id=\"modifycolumn\" class=\"method-signature\">public <strong>modifyColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column, [<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $currentColumn])</h3> <p>Modifies a table column based on a definition</p> <h3 id=\"useexplicitidvalue\" class=\"method-signature\">public <strong>useExplicitIdValue</strong> ()</h3> <p>Check whether the database system requires an explicit value for identity columns</p> <h3 id=\"getdefaultidvalue\" class=\"method-signature\">public <strong>getDefaultIdValue</strong> ()</h3> <p>Returns the default identity value to be inserted in an identity column</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot with a valid default value for the column 'id'\n $success = $connection-&gt;insert(\n     \"robots\",\n     array($connection-&gt;getDefaultIdValue(), \"Astro Boy\", 1952),\n     array(\"id\", \"name\", \"year\")\n );\n</pre> <h3 id=\"supportsequences\" class=\"method-signature\">public <strong>supportSequences</strong> ()</h3> <p>Check whether the database system requires a sequence to produce auto-numeric values</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $descriptor) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Constructor for Phalcon\\Db\\Adapter\\Pdo</p> <h3 id=\"prepare\" class=\"method-signature\">public <strong>prepare</strong> (<em>mixed</em> $sqlStatement) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Returns a PDO prepared statement to be executed with ‘executePrepared’</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Column;\n\n $statement = $db-&gt;prepare('SELECT * FROM robots WHERE name = :name');\n $result = $connection-&gt;executePrepared($statement, ['name' =&gt; 'Voltron'], ['name' =&gt; Column::BIND_PARAM_INT]);\n</pre> <h3 id=\"executeprepared\" class=\"method-signature\">public <em>PDOStatement</em> <strong>executePrepared</strong> (<em>PDOStatement</em> $statement, <em>array</em> $placeholders, <em>array</em> $dataTypes) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Executes a prepared statement binding. This function uses integer indexes starting from zero</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Column;\n\n $statement = $db-&gt;prepare('SELECT * FROM robots WHERE name = :name');\n $result = $connection-&gt;executePrepared($statement, ['name' =&gt; 'Voltron'], ['name' =&gt; Column::BIND_PARAM_INT]);\n</pre> <h3 id=\"query\" class=\"method-signature\">public <strong>query</strong> (<em>mixed</em> $sqlStatement, [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server is returning rows</p> <pre class=\"highlight-php\" data-language=\"php\">//Querying data\n$resultset = $connection-&gt;query(\"SELECT * FROM robots WHERE type='mechanical'\");\n$resultset = $connection-&gt;query(\"SELECT * FROM robots WHERE type=?\", array(\"mechanical\"));\n</pre> <h3 id=\"execute\" class=\"method-signature\">public <strong>execute</strong> (<em>mixed</em> $sqlStatement, [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn’t return any rows</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting data\n$success = $connection-&gt;execute(\"INSERT INTO robots VALUES (1, 'Astro Boy')\");\n$success = $connection-&gt;execute(\"INSERT INTO robots VALUES (?, ?)\", array(1, 'Astro Boy'));\n</pre> <h3 id=\"affectedrows\" class=\"method-signature\">public <strong>affectedRows</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Returns the number of affected rows by the lastest INSERT/UPDATE/DELETE executed in the database system</p> <pre class=\"highlight-php\" data-language=\"php\">$connection-&gt;execute(\"DELETE FROM robots\");\necho $connection-&gt;affectedRows(), ' were deleted';\n</pre> <h3 id=\"close\" class=\"method-signature\">public <strong>close</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Closes the active connection returning success. Phalcon automatically closes and destroys active connections when the request ends</p> <h3 id=\"escapeidentifier\" class=\"method-signature\">public <em>string</em> <strong>escapeIdentifier</strong> (<em>string</em> $identifier) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Escapes a column/table/schema name</p> <pre class=\"highlight-php\" data-language=\"php\">$escapedTable = $connection-&gt;escapeIdentifier('robots');\n$escapedTable = $connection-&gt;escapeIdentifier(['store', 'robots']);\n</pre> <h3 id=\"escapestring\" class=\"method-signature\">public <strong>escapeString</strong> (<em>mixed</em> $str) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Escapes a value to avoid SQL injections according to the active charset in the connection</p> <pre class=\"highlight-php\" data-language=\"php\">$escapedStr = $connection-&gt;escapeString('some dangerous value');\n</pre> <h3 id=\"convertboundparams\" class=\"method-signature\">public <strong>convertBoundParams</strong> (<em>mixed</em> $sql, [<em>array</em> $params]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Converts bound parameters such as :name: or ?1 into PDO bind params ?</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;convertBoundParams('SELECT * FROM robots WHERE name = :name:', array('Bender')));\n</pre> <h3 id=\"lastinsertid\" class=\"method-signature\">public <em>int|boolean</em> <strong>lastInsertId</strong> ([<em>string</em> $sequenceName]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Returns the insert id for the auto_increment/serial column inserted in the lastest executed SQL statement</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot\n $success = $connection-&gt;insert(\n     \"robots\",\n     array(\"Astro Boy\", 1952),\n     array(\"name\", \"year\")\n );\n\n //Getting the generated id\n $id = $connection-&gt;lastInsertId();\n</pre> <h3 id=\"begin\" class=\"method-signature\">public <strong>begin</strong> ([<em>mixed</em> $nesting]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Starts a transaction in the connection</p> <h3 id=\"rollback\" class=\"method-signature\">public <strong>rollback</strong> ([<em>mixed</em> $nesting]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Rollbacks the active transaction in the connection</p> <h3 id=\"commit\" class=\"method-signature\">public <strong>commit</strong> ([<em>mixed</em> $nesting]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Commits the active transaction in the connection</p> <h3 id=\"gettransactionlevel\" class=\"method-signature\">public <strong>getTransactionLevel</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Returns the current transaction nesting level</p> <h3 id=\"isundertransaction\" class=\"method-signature\">public <strong>isUnderTransaction</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Checks whether the connection is under a transaction</p> <pre class=\"highlight-php\" data-language=\"php\">$connection-&gt;begin();\nvar_dump($connection-&gt;isUnderTransaction()); //true\n</pre> <h3 id=\"getinternalhandler\" class=\"method-signature\">public <strong>getInternalHandler</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Return internal PDO handler</p> <h3 id=\"geterrorinfo\" class=\"method-signature\">public <em>array</em> <strong>getErrorInfo</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Return the error info, if any</p> <h3 id=\"getdialecttype\" class=\"method-signature\">public <strong>getDialectType</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Name of the dialect used</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Type of database system the adapter is used for</p> <h3 id=\"getsqlvariables\" class=\"method-signature\">public <strong>getSqlVariables</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Active SQL bound parameter variables</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"setdialect\" class=\"method-signature\">public <strong>setDialect</strong> (<a class=\"reference internal\" href=\"phalcon_db_dialectinterface\"><em>Phalcon\\Db\\DialectInterface</em></a> $dialect) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Sets the dialect used to produce the SQL</p> <h3 id=\"getdialect\" class=\"method-signature\">public <strong>getDialect</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns internal dialect instance</p> <h3 id=\"fetchone\" class=\"method-signature\">public <strong>fetchOne</strong> (<em>mixed</em> $sqlQuery, [<em>mixed</em> $fetchMode], [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the first row in a SQL query result</p> <pre class=\"highlight-php\" data-language=\"php\">//Getting first robot\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n//Getting first robot with associative indexes only\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\", Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n</pre> <h3 id=\"fetchall\" class=\"method-signature\">public <em>array</em> <strong>fetchAll</strong> (<em>string</em> $sqlQuery, [<em>int</em> $fetchMode], [<em>array</em> $bindParams], [<em>array</em> $bindTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Dumps the complete result of a query into an array</p> <pre class=\"highlight-php\" data-language=\"php\">//Getting all robots with associative indexes only\n$robots = $connection-&gt;fetchAll(\"SELECT * FROM robots\", Phalcon\\Db::FETCH_ASSOC);\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n  //Getting all robots that contains word \"robot\" withing the name\n  $robots = $connection-&gt;fetchAll(\"SELECT * FROM robots WHERE name LIKE :name\",\n    Phalcon\\Db::FETCH_ASSOC,\n    array('name' =&gt; '%robot%')\n  );\nforeach($robots as $robot){\n    print_r($robot);\n}\n</pre> <h3 id=\"fetchcolumn\" class=\"method-signature\">public <em>string|</em> <strong>fetchColumn</strong> (<em>string</em> $sqlQuery, [<em>array</em> $placeholders], [<em>int|string</em> $column]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the n’th field of first row in a SQL query result</p> <pre class=\"highlight-php\" data-language=\"php\">//Getting count of robots\n$robotsCount = $connection-&gt;fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n//Getting name of last edited robot\n$robot = $connection-&gt;fetchColumn(\"SELECT id, name FROM robots order by modified desc\", 1);\nprint_r($robot);\n</pre> <h3 id=\"insert\" class=\"method-signature\">public <em>boolean</em> <strong>insert</strong> (<em>string|array</em> $table, <em>array</em> $values, [<em>array</em> $fields], [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Inserts data into a table using custom RDBMS SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">// Inserting a new robot\n $success = $connection-&gt;insert(\n \"robots\",\n array(\"Astro Boy\", 1952),\n array(\"name\", \"year\")\n );\n\n // Next SQL sentence is sent to the database system\n INSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</pre> <h3 id=\"insertasdict\" class=\"method-signature\">public <em>boolean</em> <strong>insertAsDict</strong> (<em>string</em> $table, <em>array</em> $data, [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Inserts data into a table using custom RBDM SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot\n $success = $connection-&gt;insertAsDict(\n \"robots\",\n array(\n      \"name\" =&gt; \"Astro Boy\",\n      \"year\" =&gt; 1952\n  )\n );\n\n //Next SQL sentence is sent to the database system\n INSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</pre> <h3 id=\"update\" class=\"method-signature\">public <em>boolean</em> <strong>update</strong> (<em>string|array</em> $table, <em>array</em> $fields, <em>array</em> $values, [<em>string|array</em> $whereCondition], [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Updates data on a table using custom RBDM SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Updating existing robot\n $success = $connection-&gt;update(\n \"robots\",\n array(\"name\"),\n array(\"New Astro Boy\"),\n \"id = 101\"\n );\n\n //Next SQL sentence is sent to the database system\n UPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n //Updating existing robot with array condition and $dataTypes\n $success = $connection-&gt;update(\n \"robots\",\n array(\"name\"),\n array(\"New Astro Boy\"),\n array(\n     'conditions' =&gt; \"id = ?\",\n     'bind' =&gt; array($some_unsafe_id),\n     'bindTypes' =&gt; array(PDO::PARAM_INT) //use only if you use $dataTypes param\n ),\n array(PDO::PARAM_STR)\n );\n</pre> <p>Warning! If $whereCondition is string it not escaped.</p> <h3 id=\"updateasdict\" class=\"method-signature\">public <em>boolean</em> <strong>updateAsDict</strong> (<em>string</em> $table, <em>array</em> $data, [<em>string</em> $whereCondition], [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Updates data on a table using custom RBDM SQL syntax Another, more convenient syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Updating existing robot\n $success = $connection-&gt;updateAsDict(\n \"robots\",\n array(\n      \"name\" =&gt; \"New Astro Boy\"\n  ),\n \"id = 101\"\n );\n\n //Next SQL sentence is sent to the database system\n UPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n</pre> <h3 id=\"delete\" class=\"method-signature\">public <em>boolean</em> <strong>delete</strong> (<em>string|array</em> $table, [<em>string</em> $whereCondition], [<em>array</em> $placeholders], [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Deletes data from a table using custom RBDM SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Deleting existing robot\n $success = $connection-&gt;delete(\n \"robots\",\n \"id = 101\"\n );\n\n //Next SQL sentence is generated\n DELETE FROM `robots` WHERE `id` = 101\n</pre> <h3 id=\"getcolumnlist\" class=\"method-signature\">public <em>string</em> <strong>getColumnList</strong> (<em>array</em> $columnList) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Gets a list of columns</p> <h3 id=\"limit\" class=\"method-signature\">public <strong>limit</strong> (<em>mixed</em> $sqlQuery, <em>mixed</em> $number) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Appends a LIMIT clause to $sqlQuery argument</p> <pre class=\"highlight-php\" data-language=\"php\">echo $connection-&gt;limit(\"SELECT * FROM robots\", 5);\n</pre> <h3 id=\"tableexists\" class=\"method-signature\">public <strong>tableExists</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Generates SQL checking for the existence of a schema.table</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($connection-&gt;tableExists(\"blog\", \"posts\"));\n</pre> <h3 id=\"viewexists\" class=\"method-signature\">public <strong>viewExists</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Generates SQL checking for the existence of a schema.view</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($connection-&gt;viewExists(\"active_users\", \"posts\"));\n</pre> <h3 id=\"forupdate\" class=\"method-signature\">public <strong>forUpdate</strong> (<em>mixed</em> $sqlQuery) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns a SQL modified with a FOR UPDATE clause</p> <h3 id=\"sharedlock\" class=\"method-signature\">public <strong>sharedLock</strong> (<em>mixed</em> $sqlQuery) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <h3 id=\"droptable\" class=\"method-signature\">public <strong>dropTable</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a table from a schema/database</p> <h3 id=\"createview\" class=\"method-signature\">public <strong>createView</strong> (<em>mixed</em> $viewName, <em>array</em> $definition, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Creates a view</p> <h3 id=\"dropview\" class=\"method-signature\">public <strong>dropView</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a view</p> <h3 id=\"addcolumn\" class=\"method-signature\">public <strong>addColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Adds a column to a table</p> <h3 id=\"dropcolumn\" class=\"method-signature\">public <strong>dropColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $columnName) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a column from a table</p> <h3 id=\"addindex\" class=\"method-signature\">public <strong>addIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Adds an index to a table</p> <h3 id=\"dropindex\" class=\"method-signature\">public <strong>dropIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $indexName) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drop an index from a table</p> <h3 id=\"addprimarykey\" class=\"method-signature\">public <strong>addPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Adds a primary key to a table</p> <h3 id=\"dropprimarykey\" class=\"method-signature\">public <strong>dropPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a table’s primary key</p> <h3 id=\"addforeignkey\" class=\"method-signature\">public <strong>addForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_referenceinterface\"><em>Phalcon\\Db\\ReferenceInterface</em></a> $reference) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Adds a foreign key to a table</p> <h3 id=\"dropforeignkey\" class=\"method-signature\">public <strong>dropForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $referenceName) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a foreign key from a table</p> <h3 id=\"getcolumndefinition\" class=\"method-signature\">public <strong>getColumnDefinition</strong> (<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the SQL column definition from a column</p> <h3 id=\"listtables\" class=\"method-signature\">public <strong>listTables</strong> ([<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>List all tables on a database</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;listTables(\"blog\"));\n</pre> <h3 id=\"listviews\" class=\"method-signature\">public <strong>listViews</strong> ([<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>List all views on a database</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;listViews(\"blog\"));\n</pre> <h3 id=\"describeindexes\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_db_index\"><em>Phalcon\\Db\\Index</em></a> [] <strong>describeIndexes</strong> (<em>string</em> $table, [<em>string</em> $schema]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Lists table indexes</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;describeIndexes('robots_parts'));\n</pre> <h3 id=\"describereferences\" class=\"method-signature\">public <strong>describeReferences</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Lists table references</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;describeReferences('robots_parts'));\n</pre> <h3 id=\"tableoptions\" class=\"method-signature\">public <strong>tableOptions</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Gets creation options from a table</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;tableOptions('robots'));\n</pre> <h3 id=\"createsavepoint\" class=\"method-signature\">public <strong>createSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Creates a new savepoint</p> <h3 id=\"releasesavepoint\" class=\"method-signature\">public <strong>releaseSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Releases given savepoint</p> <h3 id=\"rollbacksavepoint\" class=\"method-signature\">public <strong>rollbackSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Rollbacks given savepoint</p> <h3 id=\"setnestedtransactionswithsavepoints\" class=\"method-signature\">public <strong>setNestedTransactionsWithSavepoints</strong> (<em>mixed</em> $nestedTransactionsWithSavepoints) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Set if nested transactions should use savepoints</p> <h3 id=\"isnestedtransactionswithsavepoints\" class=\"method-signature\">public <strong>isNestedTransactionsWithSavepoints</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns if nested transactions should use savepoints</p> <h3 id=\"getnestedtransactionsavepointname\" class=\"method-signature\">public <strong>getNestedTransactionSavepointName</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the savepoint name to use for nested transactions</p> <h3 id=\"getdefaultvalue\" class=\"method-signature\">public <strong>getDefaultValue</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the default value to make the RBDM use the default value declared in the table definition</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot with a valid default value for the column 'year'\n $success = $connection-&gt;insert(\n \"robots\",\n array(\"Astro Boy\", $connection-&gt;getDefaultValue()),\n array(\"name\", \"year\")\n );\n</pre> <h3 id=\"getdescriptor\" class=\"method-signature\">public <strong>getDescriptor</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Return descriptor used to connect to the active database</p> <h3 id=\"getconnectionid\" class=\"method-signature\">public <em>string</em> <strong>getConnectionId</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Gets the active connection unique identifier</p> <h3 id=\"getsqlstatement\" class=\"method-signature\">public <strong>getSQLStatement</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Active SQL statement in the object</p> <h3 id=\"getrealsqlstatement\" class=\"method-signature\">public <strong>getRealSQLStatement</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Active SQL statement in the object without replace bound paramters</p> <h3 id=\"getsqlbindtypes\" class=\"method-signature\">public <em>array</em> <strong>getSQLBindTypes</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Active SQL statement in the object</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Postgresql.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Postgresql.html</a>\n  </p>\n</div>\n","api/phalcon_db_adapter_pdo_sqlite":"<h1 id=\"class-phalcon-db-adapter-pdo-sqlite\">Class <strong>Phalcon\\Db\\Adapter\\Pdo\\Sqlite</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_db_adapter_pdo\"><em>Phalcon\\Db\\Adapter\\Pdo</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_db_adapterinterface\"><em>Phalcon\\Db\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/adapter/pdo/sqlite.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Specific functions for the Sqlite database system</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Adapter\\Pdo\\Sqlite;\n\n $connection = new Sqlite(['dbname' =&gt; '/tmp/test.sqlite']);\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"connect\" class=\"method-signature\">public <strong>connect</strong> ([<em>array</em> $descriptor])</h3> <p>This method is automatically called in Phalcon\\Db\\Adapter\\Pdo constructor. Call it when you need to restore a database connection.</p> <h3 id=\"describecolumns\" class=\"method-signature\">public <strong>describeColumns</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>Returns an array of Phalcon\\Db\\Column objects describing a table</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;describeColumns(\"posts\"));\n</pre> <h3 id=\"describeindexes\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> [] <strong>describeIndexes</strong> (<em>string</em> $table, [<em>string</em> $schema])</h3> <p>Lists table indexes</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;describeIndexes('robots_parts'));\n</pre> <h3 id=\"describereferences\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_db_referenceinterface\"><em>Phalcon\\Db\\ReferenceInterface</em></a> [] <strong>describeReferences</strong> (<em>string</em> $table, [<em>string</em> $schema])</h3> <p>Lists table references</p> <h3 id=\"useexplicitidvalue\" class=\"method-signature\">public <strong>useExplicitIdValue</strong> ()</h3> <p>Check whether the database system requires an explicit value for identity columns</p> <h3 id=\"getdefaultvalue\" class=\"method-signature\">public <strong>getDefaultValue</strong> ()</h3> <p>Returns the default value to make the RBDM use the default value declared in the table definition</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot with a valid default value for the column 'year'\n $success = $connection-&gt;insert(\n \"robots\",\n array(\"Astro Boy\", $connection-&gt;getDefaultValue()),\n array(\"name\", \"year\")\n );\n</pre> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $descriptor) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Constructor for Phalcon\\Db\\Adapter\\Pdo</p> <h3 id=\"prepare\" class=\"method-signature\">public <strong>prepare</strong> (<em>mixed</em> $sqlStatement) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Returns a PDO prepared statement to be executed with ‘executePrepared’</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Column;\n\n $statement = $db-&gt;prepare('SELECT * FROM robots WHERE name = :name');\n $result = $connection-&gt;executePrepared($statement, ['name' =&gt; 'Voltron'], ['name' =&gt; Column::BIND_PARAM_INT]);\n</pre> <h3 id=\"executeprepared\" class=\"method-signature\">public <em>PDOStatement</em> <strong>executePrepared</strong> (<em>PDOStatement</em> $statement, <em>array</em> $placeholders, <em>array</em> $dataTypes) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Executes a prepared statement binding. This function uses integer indexes starting from zero</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Db\\Column;\n\n $statement = $db-&gt;prepare('SELECT * FROM robots WHERE name = :name');\n $result = $connection-&gt;executePrepared($statement, ['name' =&gt; 'Voltron'], ['name' =&gt; Column::BIND_PARAM_INT]);\n</pre> <h3 id=\"query\" class=\"method-signature\">public <strong>query</strong> (<em>mixed</em> $sqlStatement, [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server is returning rows</p> <pre class=\"highlight-php\" data-language=\"php\">//Querying data\n$resultset = $connection-&gt;query(\"SELECT * FROM robots WHERE type='mechanical'\");\n$resultset = $connection-&gt;query(\"SELECT * FROM robots WHERE type=?\", array(\"mechanical\"));\n</pre> <h3 id=\"execute\" class=\"method-signature\">public <strong>execute</strong> (<em>mixed</em> $sqlStatement, [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn’t return any rows</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting data\n$success = $connection-&gt;execute(\"INSERT INTO robots VALUES (1, 'Astro Boy')\");\n$success = $connection-&gt;execute(\"INSERT INTO robots VALUES (?, ?)\", array(1, 'Astro Boy'));\n</pre> <h3 id=\"affectedrows\" class=\"method-signature\">public <strong>affectedRows</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Returns the number of affected rows by the lastest INSERT/UPDATE/DELETE executed in the database system</p> <pre class=\"highlight-php\" data-language=\"php\">$connection-&gt;execute(\"DELETE FROM robots\");\necho $connection-&gt;affectedRows(), ' were deleted';\n</pre> <h3 id=\"close\" class=\"method-signature\">public <strong>close</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Closes the active connection returning success. Phalcon automatically closes and destroys active connections when the request ends</p> <h3 id=\"escapeidentifier\" class=\"method-signature\">public <em>string</em> <strong>escapeIdentifier</strong> (<em>string</em> $identifier) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Escapes a column/table/schema name</p> <pre class=\"highlight-php\" data-language=\"php\">$escapedTable = $connection-&gt;escapeIdentifier('robots');\n$escapedTable = $connection-&gt;escapeIdentifier(['store', 'robots']);\n</pre> <h3 id=\"escapestring\" class=\"method-signature\">public <strong>escapeString</strong> (<em>mixed</em> $str) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Escapes a value to avoid SQL injections according to the active charset in the connection</p> <pre class=\"highlight-php\" data-language=\"php\">$escapedStr = $connection-&gt;escapeString('some dangerous value');\n</pre> <h3 id=\"convertboundparams\" class=\"method-signature\">public <strong>convertBoundParams</strong> (<em>mixed</em> $sql, [<em>array</em> $params]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Converts bound parameters such as :name: or ?1 into PDO bind params ?</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;convertBoundParams('SELECT * FROM robots WHERE name = :name:', array('Bender')));\n</pre> <h3 id=\"lastinsertid\" class=\"method-signature\">public <em>int|boolean</em> <strong>lastInsertId</strong> ([<em>string</em> $sequenceName]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Returns the insert id for the auto_increment/serial column inserted in the lastest executed SQL statement</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot\n $success = $connection-&gt;insert(\n     \"robots\",\n     array(\"Astro Boy\", 1952),\n     array(\"name\", \"year\")\n );\n\n //Getting the generated id\n $id = $connection-&gt;lastInsertId();\n</pre> <h3 id=\"begin\" class=\"method-signature\">public <strong>begin</strong> ([<em>mixed</em> $nesting]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Starts a transaction in the connection</p> <h3 id=\"rollback\" class=\"method-signature\">public <strong>rollback</strong> ([<em>mixed</em> $nesting]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Rollbacks the active transaction in the connection</p> <h3 id=\"commit\" class=\"method-signature\">public <strong>commit</strong> ([<em>mixed</em> $nesting]) <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Commits the active transaction in the connection</p> <h3 id=\"gettransactionlevel\" class=\"method-signature\">public <strong>getTransactionLevel</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Returns the current transaction nesting level</p> <h3 id=\"isundertransaction\" class=\"method-signature\">public <strong>isUnderTransaction</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Checks whether the connection is under a transaction</p> <pre class=\"highlight-php\" data-language=\"php\">$connection-&gt;begin();\nvar_dump($connection-&gt;isUnderTransaction()); //true\n</pre> <h3 id=\"getinternalhandler\" class=\"method-signature\">public <strong>getInternalHandler</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Return internal PDO handler</p> <h3 id=\"geterrorinfo\" class=\"method-signature\">public <em>array</em> <strong>getErrorInfo</strong> () <small>inherited from Phalcon\\Db\\Adapter\\Pdo</small>\n</h3> <p>Return the error info, if any</p> <h3 id=\"getdialecttype\" class=\"method-signature\">public <strong>getDialectType</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Name of the dialect used</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Type of database system the adapter is used for</p> <h3 id=\"getsqlvariables\" class=\"method-signature\">public <strong>getSqlVariables</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Active SQL bound parameter variables</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"setdialect\" class=\"method-signature\">public <strong>setDialect</strong> (<a class=\"reference internal\" href=\"phalcon_db_dialectinterface\"><em>Phalcon\\Db\\DialectInterface</em></a> $dialect) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Sets the dialect used to produce the SQL</p> <h3 id=\"getdialect\" class=\"method-signature\">public <strong>getDialect</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns internal dialect instance</p> <h3 id=\"fetchone\" class=\"method-signature\">public <strong>fetchOne</strong> (<em>mixed</em> $sqlQuery, [<em>mixed</em> $fetchMode], [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the first row in a SQL query result</p> <pre class=\"highlight-php\" data-language=\"php\">//Getting first robot\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n//Getting first robot with associative indexes only\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\", Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n</pre> <h3 id=\"fetchall\" class=\"method-signature\">public <em>array</em> <strong>fetchAll</strong> (<em>string</em> $sqlQuery, [<em>int</em> $fetchMode], [<em>array</em> $bindParams], [<em>array</em> $bindTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Dumps the complete result of a query into an array</p> <pre class=\"highlight-php\" data-language=\"php\">//Getting all robots with associative indexes only\n$robots = $connection-&gt;fetchAll(\"SELECT * FROM robots\", Phalcon\\Db::FETCH_ASSOC);\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n  //Getting all robots that contains word \"robot\" withing the name\n  $robots = $connection-&gt;fetchAll(\"SELECT * FROM robots WHERE name LIKE :name\",\n    Phalcon\\Db::FETCH_ASSOC,\n    array('name' =&gt; '%robot%')\n  );\nforeach($robots as $robot){\n    print_r($robot);\n}\n</pre> <h3 id=\"fetchcolumn\" class=\"method-signature\">public <em>string|</em> <strong>fetchColumn</strong> (<em>string</em> $sqlQuery, [<em>array</em> $placeholders], [<em>int|string</em> $column]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the n’th field of first row in a SQL query result</p> <pre class=\"highlight-php\" data-language=\"php\">//Getting count of robots\n$robotsCount = $connection-&gt;fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n//Getting name of last edited robot\n$robot = $connection-&gt;fetchColumn(\"SELECT id, name FROM robots order by modified desc\", 1);\nprint_r($robot);\n</pre> <h3 id=\"insert\" class=\"method-signature\">public <em>boolean</em> <strong>insert</strong> (<em>string|array</em> $table, <em>array</em> $values, [<em>array</em> $fields], [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Inserts data into a table using custom RDBMS SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">// Inserting a new robot\n $success = $connection-&gt;insert(\n \"robots\",\n array(\"Astro Boy\", 1952),\n array(\"name\", \"year\")\n );\n\n // Next SQL sentence is sent to the database system\n INSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</pre> <h3 id=\"insertasdict\" class=\"method-signature\">public <em>boolean</em> <strong>insertAsDict</strong> (<em>string</em> $table, <em>array</em> $data, [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Inserts data into a table using custom RBDM SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot\n $success = $connection-&gt;insertAsDict(\n \"robots\",\n array(\n      \"name\" =&gt; \"Astro Boy\",\n      \"year\" =&gt; 1952\n  )\n );\n\n //Next SQL sentence is sent to the database system\n INSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</pre> <h3 id=\"update\" class=\"method-signature\">public <em>boolean</em> <strong>update</strong> (<em>string|array</em> $table, <em>array</em> $fields, <em>array</em> $values, [<em>string|array</em> $whereCondition], [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Updates data on a table using custom RBDM SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Updating existing robot\n $success = $connection-&gt;update(\n \"robots\",\n array(\"name\"),\n array(\"New Astro Boy\"),\n \"id = 101\"\n );\n\n //Next SQL sentence is sent to the database system\n UPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n //Updating existing robot with array condition and $dataTypes\n $success = $connection-&gt;update(\n \"robots\",\n array(\"name\"),\n array(\"New Astro Boy\"),\n array(\n     'conditions' =&gt; \"id = ?\",\n     'bind' =&gt; array($some_unsafe_id),\n     'bindTypes' =&gt; array(PDO::PARAM_INT) //use only if you use $dataTypes param\n ),\n array(PDO::PARAM_STR)\n );\n</pre> <p>Warning! If $whereCondition is string it not escaped.</p> <h3 id=\"updateasdict\" class=\"method-signature\">public <em>boolean</em> <strong>updateAsDict</strong> (<em>string</em> $table, <em>array</em> $data, [<em>string</em> $whereCondition], [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Updates data on a table using custom RBDM SQL syntax Another, more convenient syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Updating existing robot\n $success = $connection-&gt;updateAsDict(\n \"robots\",\n array(\n      \"name\" =&gt; \"New Astro Boy\"\n  ),\n \"id = 101\"\n );\n\n //Next SQL sentence is sent to the database system\n UPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n</pre> <h3 id=\"delete\" class=\"method-signature\">public <em>boolean</em> <strong>delete</strong> (<em>string|array</em> $table, [<em>string</em> $whereCondition], [<em>array</em> $placeholders], [<em>array</em> $dataTypes]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Deletes data from a table using custom RBDM SQL syntax</p> <pre class=\"highlight-php\" data-language=\"php\">//Deleting existing robot\n $success = $connection-&gt;delete(\n \"robots\",\n \"id = 101\"\n );\n\n //Next SQL sentence is generated\n DELETE FROM `robots` WHERE `id` = 101\n</pre> <h3 id=\"getcolumnlist\" class=\"method-signature\">public <em>string</em> <strong>getColumnList</strong> (<em>array</em> $columnList) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Gets a list of columns</p> <h3 id=\"limit\" class=\"method-signature\">public <strong>limit</strong> (<em>mixed</em> $sqlQuery, <em>mixed</em> $number) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Appends a LIMIT clause to $sqlQuery argument</p> <pre class=\"highlight-php\" data-language=\"php\">echo $connection-&gt;limit(\"SELECT * FROM robots\", 5);\n</pre> <h3 id=\"tableexists\" class=\"method-signature\">public <strong>tableExists</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Generates SQL checking for the existence of a schema.table</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($connection-&gt;tableExists(\"blog\", \"posts\"));\n</pre> <h3 id=\"viewexists\" class=\"method-signature\">public <strong>viewExists</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Generates SQL checking for the existence of a schema.view</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($connection-&gt;viewExists(\"active_users\", \"posts\"));\n</pre> <h3 id=\"forupdate\" class=\"method-signature\">public <strong>forUpdate</strong> (<em>mixed</em> $sqlQuery) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns a SQL modified with a FOR UPDATE clause</p> <h3 id=\"sharedlock\" class=\"method-signature\">public <strong>sharedLock</strong> (<em>mixed</em> $sqlQuery) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <h3 id=\"createtable\" class=\"method-signature\">public <strong>createTable</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>array</em> $definition) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Creates a table</p> <h3 id=\"droptable\" class=\"method-signature\">public <strong>dropTable</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a table from a schema/database</p> <h3 id=\"createview\" class=\"method-signature\">public <strong>createView</strong> (<em>mixed</em> $viewName, <em>array</em> $definition, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Creates a view</p> <h3 id=\"dropview\" class=\"method-signature\">public <strong>dropView</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a view</p> <h3 id=\"addcolumn\" class=\"method-signature\">public <strong>addColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Adds a column to a table</p> <h3 id=\"modifycolumn\" class=\"method-signature\">public <strong>modifyColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column, [<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $currentColumn]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Modifies a table column based on a definition</p> <h3 id=\"dropcolumn\" class=\"method-signature\">public <strong>dropColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $columnName) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a column from a table</p> <h3 id=\"addindex\" class=\"method-signature\">public <strong>addIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Adds an index to a table</p> <h3 id=\"dropindex\" class=\"method-signature\">public <strong>dropIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $indexName) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drop an index from a table</p> <h3 id=\"addprimarykey\" class=\"method-signature\">public <strong>addPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Adds a primary key to a table</p> <h3 id=\"dropprimarykey\" class=\"method-signature\">public <strong>dropPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a table’s primary key</p> <h3 id=\"addforeignkey\" class=\"method-signature\">public <strong>addForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_referenceinterface\"><em>Phalcon\\Db\\ReferenceInterface</em></a> $reference) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Adds a foreign key to a table</p> <h3 id=\"dropforeignkey\" class=\"method-signature\">public <strong>dropForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $referenceName) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Drops a foreign key from a table</p> <h3 id=\"getcolumndefinition\" class=\"method-signature\">public <strong>getColumnDefinition</strong> (<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the SQL column definition from a column</p> <h3 id=\"listtables\" class=\"method-signature\">public <strong>listTables</strong> ([<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>List all tables on a database</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;listTables(\"blog\"));\n</pre> <h3 id=\"listviews\" class=\"method-signature\">public <strong>listViews</strong> ([<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>List all views on a database</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;listViews(\"blog\"));\n</pre> <h3 id=\"tableoptions\" class=\"method-signature\">public <strong>tableOptions</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName]) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Gets creation options from a table</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($connection-&gt;tableOptions('robots'));\n</pre> <h3 id=\"createsavepoint\" class=\"method-signature\">public <strong>createSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Creates a new savepoint</p> <h3 id=\"releasesavepoint\" class=\"method-signature\">public <strong>releaseSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Releases given savepoint</p> <h3 id=\"rollbacksavepoint\" class=\"method-signature\">public <strong>rollbackSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Rollbacks given savepoint</p> <h3 id=\"setnestedtransactionswithsavepoints\" class=\"method-signature\">public <strong>setNestedTransactionsWithSavepoints</strong> (<em>mixed</em> $nestedTransactionsWithSavepoints) <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Set if nested transactions should use savepoints</p> <h3 id=\"isnestedtransactionswithsavepoints\" class=\"method-signature\">public <strong>isNestedTransactionsWithSavepoints</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns if nested transactions should use savepoints</p> <h3 id=\"getnestedtransactionsavepointname\" class=\"method-signature\">public <strong>getNestedTransactionSavepointName</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the savepoint name to use for nested transactions</p> <h3 id=\"getdefaultidvalue\" class=\"method-signature\">public <strong>getDefaultIdValue</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Returns the default identity value to be inserted in an identity column</p> <pre class=\"highlight-php\" data-language=\"php\">//Inserting a new robot with a valid default value for the column 'id'\n $success = $connection-&gt;insert(\n \"robots\",\n array($connection-&gt;getDefaultIdValue(), \"Astro Boy\", 1952),\n array(\"id\", \"name\", \"year\")\n );\n</pre> <h3 id=\"supportsequences\" class=\"method-signature\">public <strong>supportSequences</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Check whether the database system requires a sequence to produce auto-numeric values</p> <h3 id=\"getdescriptor\" class=\"method-signature\">public <strong>getDescriptor</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Return descriptor used to connect to the active database</p> <h3 id=\"getconnectionid\" class=\"method-signature\">public <em>string</em> <strong>getConnectionId</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Gets the active connection unique identifier</p> <h3 id=\"getsqlstatement\" class=\"method-signature\">public <strong>getSQLStatement</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Active SQL statement in the object</p> <h3 id=\"getrealsqlstatement\" class=\"method-signature\">public <strong>getRealSQLStatement</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Active SQL statement in the object without replace bound paramters</p> <h3 id=\"getsqlbindtypes\" class=\"method-signature\">public <em>array</em> <strong>getSQLBindTypes</strong> () <small>inherited from Phalcon\\Db\\Adapter</small>\n</h3> <p>Active SQL statement in the object</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Sqlite.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Adapter_Pdo_Sqlite.html</a>\n  </p>\n</div>\n","api/phalcon_di":"<h1 id=\"class-phalcon-di\">Class <strong>Phalcon\\Di</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a>, ArrayAccess</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/di.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Phalcon\\Di is a component that implements Dependency Injection/Service Location of services and it’s itself a container for them. Since Phalcon is highly decoupled, Phalcon\\Di is essential to integrate the different components of the framework. The developer can also use this component to inject dependencies and manage global instances of the different classes used in the application. Basically, this component implements the <cite>Inversion of Control</cite> pattern. Applying this, the objects do not receive their dependencies using setters or constructors, but requesting a service dependency injector. This reduces the overall complexity, since there is only one way to get the required dependencies within a component. Additionally, this pattern increases testability in the code, thus making it less prone to errors.</p> <pre class=\"highlight-php\" data-language=\"php\">$di = new \\Phalcon\\Di();\n\n //Using a string definition\n $di-&gt;set(\"request\", \"Phalcon\\Http\\Request\", true);\n\n //Using an anonymous function\n $di-&gt;set(\"request\", function(){\n  return new \\Phalcon\\Http\\Request();\n }, true);\n\n $request = $di-&gt;getRequest();\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ()</h3> <p>Phalcon\\Di constructor</p> <h3 id=\"setinternaleventsmanager\" class=\"method-signature\">public <strong>setInternalEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager)</h3> <p>Sets the internal event manager</p> <h3 id=\"getinternaleventsmanager\" class=\"method-signature\">public <strong>getInternalEventsManager</strong> ()</h3> <p>Returns the internal event manager</p> <h3 id=\"set\" class=\"method-signature\">public <strong>set</strong> (<em>mixed</em> $name, <em>mixed</em> $definition, [<em>mixed</em> $shared])</h3> <p>Registers a service in the services container</p> <h3 id=\"setshared\" class=\"method-signature\">public <strong>setShared</strong> (<em>mixed</em> $name, <em>mixed</em> $definition)</h3> <p>Registers an “always shared” service in the services container</p> <h3 id=\"remove\" class=\"method-signature\">public <strong>remove</strong> (<em>mixed</em> $name)</h3> <p>Removes a service in the services container It also removes any shared instance created for the service</p> <h3 id=\"attempt\" class=\"method-signature\">public <strong>attempt</strong> (<em>mixed</em> $name, <em>mixed</em> $definition, [<em>mixed</em> $shared])</h3> <p>Attempts to register a service in the services container Only is successful if a service hasn’t been registered previously with the same name</p> <h3 id=\"setraw\" class=\"method-signature\">public <strong>setRaw</strong> (<em>mixed</em> $name, <a class=\"reference internal\" href=\"phalcon_di_serviceinterface\"><em>Phalcon\\Di\\ServiceInterface</em></a> $rawDefinition)</h3> <p>Sets a service using a raw Phalcon\\Di\\Service definition</p> <h3 id=\"getraw\" class=\"method-signature\">public <strong>getRaw</strong> (<em>mixed</em> $name)</h3> <p>Returns a service definition without resolving</p> <h3 id=\"getservice\" class=\"method-signature\">public <strong>getService</strong> (<em>mixed</em> $name)</h3> <p>Returns a Phalcon\\Di\\Service instance</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $name, [<em>mixed</em> $parameters])</h3> <p>Resolves the service based on its configuration</p> <h3 id=\"getshared\" class=\"method-signature\">public <em>mixed</em> <strong>getShared</strong> (<em>string</em> $name, [<em>array</em> $parameters])</h3> <p>Resolves a service, the resolved service is stored in the DI, subsequent requests for this service will return the same instance</p> <h3 id=\"has\" class=\"method-signature\">public <strong>has</strong> (<em>mixed</em> $name)</h3> <p>Check whether the DI contains a service by a name</p> <h3 id=\"wasfreshinstance\" class=\"method-signature\">public <strong>wasFreshInstance</strong> ()</h3> <p>Check whether the last service obtained via getShared produced a fresh instance or an existing one</p> <h3 id=\"getservices\" class=\"method-signature\">public <strong>getServices</strong> ()</h3> <p>Return the services registered in the DI</p> <h3 id=\"offsetexists\" class=\"method-signature\">public <strong>offsetExists</strong> (<em>mixed</em> $name)</h3> <p>Check if a service is registered using the array syntax</p> <h3 id=\"offsetset\" class=\"method-signature\">public <em>boolean</em> <strong>offsetSet</strong> (<em>string</em> $name, <em>mixed</em> $definition)</h3> <p>Allows to register a shared service using the array syntax</p> <pre class=\"highlight-php\" data-language=\"php\">$di[\"request\"] = new \\Phalcon\\Http\\Request();\n</pre> <h3 id=\"offsetget\" class=\"method-signature\">public <strong>offsetGet</strong> (<em>mixed</em> $name)</h3> <p>Allows to obtain a shared service using the array syntax</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($di[\"request\"]);\n</pre> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>mixed</em> $name)</h3> <p>Removes a service from the services container using the array syntax</p> <h3 id=\"__call\" class=\"method-signature\">public <strong>__call</strong> (<em>string</em> $method, [<em>array</em> $arguments])</h3> <p>Magic method to get or set services using setters/getters</p> <h3 id=\"setdefault\" class=\"method-signature\">public static <strong>setDefault</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Set a default dependency injection container to be obtained into static methods</p> <h3 id=\"getdefault\" class=\"method-signature\">public static <strong>getDefault</strong> ()</h3> <p>Return the latest DI created</p> <h3 id=\"reset\" class=\"method-signature\">public static <strong>reset</strong> ()</h3> <p>Resets the internal default DI</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Di.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Di.html</a>\n  </p>\n</div>\n","api/phalcon_escaper_exception":"<h1 id=\"class-phalcon-escaper-exception\">Class <strong>Phalcon\\Escaper\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/escaper/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Escaper_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Escaper_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_dispatcher":"<h1 id=\"abstract-class-phalcon-dispatcher\">Abstract class <strong>Phalcon\\Dispatcher</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_dispatcherinterface\"><em>Phalcon\\DispatcherInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/dispatcher.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This is the base class for Phalcon\\Mvc\\Dispatcher and Phalcon\\Cli\\Dispatcher. This class can’t be instantiated directly, you can use it to create your own dispatchers.</p>  <h2 id=\"constants\">Constants</h2> <h3 id=\"exception_no_di\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_NO_DI</strong>\n</h3> <h3 id=\"exception_cyclic_routing\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_CYCLIC_ROUTING</strong>\n</h3> <h3 id=\"exception_handler_not_found\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_HANDLER_NOT_FOUND</strong>\n</h3> <h3 id=\"exception_invalid_handler\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_INVALID_HANDLER</strong>\n</h3> <h3 id=\"exception_invalid_params\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_INVALID_PARAMS</strong>\n</h3> <h3 id=\"exception_action_not_found\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_ACTION_NOT_FOUND</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager)</h3> <p>Sets the events manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> ()</h3> <p>Returns the internal event manager</p> <h3 id=\"setactionsuffix\" class=\"method-signature\">public <strong>setActionSuffix</strong> (<em>mixed</em> $actionSuffix)</h3> <p>Sets the default action suffix</p> <h3 id=\"getactionsuffix\" class=\"method-signature\">public <strong>getActionSuffix</strong> ()</h3> <p>Gets the default action suffix</p> <h3 id=\"setmodulename\" class=\"method-signature\">public <strong>setModuleName</strong> (<em>mixed</em> $moduleName)</h3> <p>Sets the module where the controller is (only informative)</p> <h3 id=\"getmodulename\" class=\"method-signature\">public <strong>getModuleName</strong> ()</h3> <p>Gets the module where the controller class is</p> <h3 id=\"setnamespacename\" class=\"method-signature\">public <strong>setNamespaceName</strong> (<em>mixed</em> $namespaceName)</h3> <p>Sets the namespace where the controller class is</p> <h3 id=\"getnamespacename\" class=\"method-signature\">public <strong>getNamespaceName</strong> ()</h3> <p>Gets a namespace to be prepended to the current handler name</p> <h3 id=\"setdefaultnamespace\" class=\"method-signature\">public <strong>setDefaultNamespace</strong> (<em>mixed</em> $namespaceName)</h3> <p>Sets the default namespace</p> <h3 id=\"getdefaultnamespace\" class=\"method-signature\">public <strong>getDefaultNamespace</strong> ()</h3> <p>Returns the default namespace</p> <h3 id=\"setdefaultaction\" class=\"method-signature\">public <strong>setDefaultAction</strong> (<em>mixed</em> $actionName)</h3> <p>Sets the default action name</p> <h3 id=\"setactionname\" class=\"method-signature\">public <strong>setActionName</strong> (<em>mixed</em> $actionName)</h3> <p>Sets the action name to be dispatched</p> <h3 id=\"getactionname\" class=\"method-signature\">public <strong>getActionName</strong> ()</h3> <p>Gets the latest dispatched action name</p> <h3 id=\"setparams\" class=\"method-signature\">public <strong>setParams</strong> (<em>array</em> $params)</h3> <p>Sets action params to be dispatched</p> <h3 id=\"getparams\" class=\"method-signature\">public <strong>getParams</strong> ()</h3> <p>Gets action params</p> <h3 id=\"setparam\" class=\"method-signature\">public <strong>setParam</strong> (<em>mixed</em> $param, <em>mixed</em> $value)</h3> <p>Set a param by its name or numeric index</p> <h3 id=\"getparam\" class=\"method-signature\">public <em>mixed</em> <strong>getParam</strong> (<em>mixed</em> $param, [<em>string|array</em> $filters], [<em>mixed</em> $defaultValue])</h3> <p>Gets a param by its name or numeric index</p> <h3 id=\"hasparam\" class=\"method-signature\">public <em>boolean</em> <strong>hasParam</strong> (<em>mixed</em> $param)</h3> <p>Check if a param exists</p> <h3 id=\"getactivemethod\" class=\"method-signature\">public <strong>getActiveMethod</strong> ()</h3> <p>Returns the current method to be/executed in the dispatcher</p> <h3 id=\"isfinished\" class=\"method-signature\">public <strong>isFinished</strong> ()</h3> <p>Checks if the dispatch loop is finished or has more pendent controllers/tasks to dispatch</p> <h3 id=\"setreturnedvalue\" class=\"method-signature\">public <strong>setReturnedValue</strong> (<em>mixed</em> $value)</h3> <p>Sets the latest returned value by an action manually</p> <h3 id=\"getreturnedvalue\" class=\"method-signature\">public <em>mixed</em> <strong>getReturnedValue</strong> ()</h3> <p>Returns value returned by the latest dispatched action</p> <h3 id=\"setmodelbinding\" class=\"method-signature\">public <strong>setModelBinding</strong> (<em>boolean</em> $value)</h3> <p>Enable/Disable model binding during dispatch</p> <h3 id=\"dispatch\" class=\"method-signature\">public <em>object</em> <strong>dispatch</strong> ()</h3> <p>Dispatches a handle action taking into account the routing parameters</p> <h3 id=\"_dispatch\" class=\"method-signature\">protected <em>object</em> <strong>_dispatch</strong> ()</h3> <p>Dispatches a handle action taking into account the routing parameters</p> <h3 id=\"forward\" class=\"method-signature\">public <strong>forward</strong> (<em>array</em> $forward)</h3> <p>Forwards the execution flow to another controller/action Dispatchers are unique per module. Forwarding between modules is not allowed</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;dispatcher-&gt;forward(array(\"controller\" =&gt; \"posts\", \"action\" =&gt; \"index\"));\n</pre> <h3 id=\"wasforwarded\" class=\"method-signature\">public <strong>wasForwarded</strong> ()</h3> <p>Check if the current executed action was forwarded by another one</p> <h3 id=\"gethandlerclass\" class=\"method-signature\">public <strong>getHandlerClass</strong> ()</h3> <p>Possible class name that will be located to dispatch the request</p> <h3 id=\"callactionmethod\" class=\"method-signature\">public <strong>callActionMethod</strong> (<em>mixed</em> $handler, <em>mixed</em> $actionMethod, [<em>array</em> $params])</h3> <p>...</p> <h3 id=\"_resolveemptyproperties\" class=\"method-signature\">protected <strong>_resolveEmptyProperties</strong> ()</h3> <p>Set empty properties to their defaults (where defaults are available)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Dispatcher.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Dispatcher.html</a>\n  </p>\n</div>\n","api/phalcon_escaper":"<h1 id=\"class-phalcon-escaper\">Class <strong>Phalcon\\Escaper</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_escaperinterface\"><em>Phalcon\\EscaperInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/escaper.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Escapes different kinds of text securing them. By using this component you may prevent XSS attacks. This component only works with UTF-8. The PREG extension needs to be compiled with UTF-8 support.</p> <pre class=\"highlight-php\" data-language=\"php\">$escaper = new \\Phalcon\\Escaper();\n$escaped = $escaper-&gt;escapeCss(\"font-family: &lt;Verdana&gt;\");\necho $escaped; // font\\2D family\\3A \\20 \\3C Verdana\\3E\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setencoding\" class=\"method-signature\">public <strong>setEncoding</strong> (<em>mixed</em> $encoding)</h3> <p>Sets the encoding to be used by the escaper</p> <pre class=\"highlight-php\" data-language=\"php\">$escaper-&gt;setEncoding('utf-8');\n</pre> <h3 id=\"getencoding\" class=\"method-signature\">public <strong>getEncoding</strong> ()</h3> <p>Returns the internal encoding used by the escaper</p> <h3 id=\"sethtmlquotetype\" class=\"method-signature\">public <strong>setHtmlQuoteType</strong> (<em>mixed</em> $quoteType)</h3> <p>Sets the HTML quoting type for htmlspecialchars</p> <pre class=\"highlight-php\" data-language=\"php\">$escaper-&gt;setHtmlQuoteType(ENT_XHTML);\n</pre> <h3 id=\"setdoubleencode\" class=\"method-signature\">public <strong>setDoubleEncode</strong> (<em>mixed</em> $doubleEncode)</h3> <p>Sets the double_encode to be used by the escaper</p> <pre class=\"highlight-php\" data-language=\"php\">$escaper-&gt;setDoubleEncode(false);\n</pre> <h3 id=\"detectencoding\" class=\"method-signature\">final public <strong>detectEncoding</strong> (<em>mixed</em> $str)</h3> <p>Detect the character encoding of a string to be handled by an encoder Special-handling for chr(172) and chr(128) to chr(159) which fail to be detected by mb_detect_encoding()</p> <h3 id=\"normalizeencoding\" class=\"method-signature\">final public <strong>normalizeEncoding</strong> (<em>mixed</em> $str)</h3> <p>Utility to normalize a string’s encoding to UTF-32.</p> <h3 id=\"escapehtml\" class=\"method-signature\">public <strong>escapeHtml</strong> (<em>mixed</em> $text)</h3> <p>Escapes a HTML string. Internally uses htmlspecialchars</p> <h3 id=\"escapehtmlattr\" class=\"method-signature\">public <strong>escapeHtmlAttr</strong> (<em>mixed</em> $attribute)</h3> <p>Escapes a HTML attribute string</p> <h3 id=\"escapecss\" class=\"method-signature\">public <strong>escapeCss</strong> (<em>mixed</em> $css)</h3> <p>Escape CSS strings by replacing non-alphanumeric chars by their hexadecimal escaped representation</p> <h3 id=\"escapejs\" class=\"method-signature\">public <strong>escapeJs</strong> (<em>mixed</em> $js)</h3> <p>Escape javascript strings by replacing non-alphanumeric chars by their hexadecimal escaped representation</p> <h3 id=\"escapeurl\" class=\"method-signature\">public <strong>escapeUrl</strong> (<em>mixed</em> $url)</h3> <p>Escapes a URL. Internally uses rawurlencode</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Escaper.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Escaper.html</a>\n  </p>\n</div>\n","api/phalcon_filter_exception":"<h1 id=\"class-phalcon-filter-exception\">Class <strong>Phalcon\\Filter\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/filter/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Filter_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Filter_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_events_manager":"<h1 id=\"class-phalcon-events-manager\">Class <strong>Phalcon\\Events\\Manager</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/events/manager.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Phalcon Events Manager, offers an easy way to intercept and manipulate, if needed, the normal flow of operation. With the EventsManager the developer can create hooks or plugins that will offer monitoring of data, manipulation, conditional execution and much more.</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"attach\" class=\"method-signature\">public <strong>attach</strong> (<em>string</em> $eventType, <em>object|callable</em> $handler, [<em>int</em> $priority])</h3> <p>Attach a listener to the events manager</p> <h3 id=\"detach\" class=\"method-signature\">public <strong>detach</strong> (<em>string</em> $eventType, <em>object</em> $handler)</h3> <p>Detach the listener from the events manager</p> <h3 id=\"enablepriorities\" class=\"method-signature\">public <strong>enablePriorities</strong> (<em>mixed</em> $enablePriorities)</h3> <p>Set if priorities are enabled in the EventsManager</p> <h3 id=\"areprioritiesenabled\" class=\"method-signature\">public <strong>arePrioritiesEnabled</strong> ()</h3> <p>Returns if priorities are enabled</p> <h3 id=\"collectresponses\" class=\"method-signature\">public <strong>collectResponses</strong> (<em>mixed</em> $collect)</h3> <p>Tells the event manager if it needs to collect all the responses returned by every registered listener in a single fire</p> <h3 id=\"iscollecting\" class=\"method-signature\">public <strong>isCollecting</strong> ()</h3> <p>Check if the events manager is collecting all all the responses returned by every registered listener in a single fire</p> <h3 id=\"getresponses\" class=\"method-signature\">public <em>array</em> <strong>getResponses</strong> ()</h3> <p>Returns all the responses returned by every handler executed by the last ‘fire’ executed</p> <h3 id=\"detachall\" class=\"method-signature\">public <strong>detachAll</strong> ([<em>mixed</em> $type])</h3> <p>Removes all events from the EventsManager</p> <h3 id=\"firequeue\" class=\"method-signature\">final public <em>mixed</em> <strong>fireQueue</strong> (<em>SplPriorityQueue|array</em> $queue, <a class=\"reference internal\" href=\"phalcon_events_event\"><em>Phalcon\\Events\\Event</em></a> $event)</h3> <p>Internal handler to call a queue of events</p> <h3 id=\"fire\" class=\"method-signature\">public <em>mixed</em> <strong>fire</strong> (<em>string</em> $eventType, <em>object</em> $source, [<em>mixed</em> $data], [<em>boolean</em> $cancelable])</h3> <p>Fires an event in the events manager causing the active listeners to be notified about it</p> <pre class=\"highlight-php\" data-language=\"php\">$eventsManager-&gt;fire('db', $connection);\n</pre> <h3 id=\"haslisteners\" class=\"method-signature\">public <strong>hasListeners</strong> (<em>mixed</em> $type)</h3> <p>Check whether certain type of event has listeners</p> <h3 id=\"getlisteners\" class=\"method-signature\">public <em>array</em> <strong>getListeners</strong> (<em>string</em> $type)</h3> <p>Returns all the attached listeners of a certain type</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Events_Manager.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Events_Manager.html</a>\n  </p>\n</div>\n","api/phalcon_exception":"<h1 id=\"class-phalcon-exception\">Class <strong>Phalcon\\Exception</strong>\n</h1> <p><em>extends</em> Exception</p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_flash":"<h1 id=\"abstract-class-phalcon-flash\">Abstract class <strong>Phalcon\\Flash</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/flash.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Shows HTML notifications related to different circumstances. Classes can be stylized using CSS</p> <pre class=\"highlight-php\" data-language=\"php\">$flash-&gt;success(\"The record was successfully deleted\");\n $flash-&gt;error(\"Cannot open the file\");\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>mixed</em> $cssClasses])</h3> <p>Phalcon\\Flash constructor</p> <h3 id=\"getautoescape\" class=\"method-signature\">public <strong>getAutoescape</strong> ()</h3> <p>Returns the autoescape mode in generated html</p> <h3 id=\"setautoescape\" class=\"method-signature\">public <strong>setAutoescape</strong> (<em>mixed</em> $autoescape)</h3> <p>Set the autoescape mode in generated html</p> <h3 id=\"getescaperservice\" class=\"method-signature\">public <strong>getEscaperService</strong> ()</h3> <p>Returns the Escaper Service</p> <h3 id=\"setescaperservice\" class=\"method-signature\">public <strong>setEscaperService</strong> (<a class=\"reference internal\" href=\"phalcon_escaperinterface\"><em>Phalcon\\EscaperInterface</em></a> $escaperService)</h3> <p>Sets the Escaper Service</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the internal dependency injector</p> <h3 id=\"setimplicitflush\" class=\"method-signature\">public <strong>setImplicitFlush</strong> (<em>mixed</em> $implicitFlush)</h3> <p>Set whether the output must be implicitly flushed to the output or returned as string</p> <h3 id=\"setautomatichtml\" class=\"method-signature\">public <strong>setAutomaticHtml</strong> (<em>mixed</em> $automaticHtml)</h3> <p>Set if the output must be implicitly formatted with HTML</p> <h3 id=\"setcssclasses\" class=\"method-signature\">public <strong>setCssClasses</strong> (<em>array</em> $cssClasses)</h3> <p>Set an array with CSS classes to format the messages</p> <h3 id=\"error\" class=\"method-signature\">public <strong>error</strong> (<em>mixed</em> $message)</h3> <p>Shows a HTML error message</p> <pre class=\"highlight-php\" data-language=\"php\">$flash-&gt;error('This is an error');\n</pre> <h3 id=\"notice\" class=\"method-signature\">public <strong>notice</strong> (<em>mixed</em> $message)</h3> <p>Shows a HTML notice/information message</p> <pre class=\"highlight-php\" data-language=\"php\">$flash-&gt;notice('This is an information');\n</pre> <h3 id=\"success\" class=\"method-signature\">public <strong>success</strong> (<em>mixed</em> $message)</h3> <p>Shows a HTML success message</p> <pre class=\"highlight-php\" data-language=\"php\">$flash-&gt;success('The process was finished successfully');\n</pre> <h3 id=\"warning\" class=\"method-signature\">public <strong>warning</strong> (<em>mixed</em> $message)</h3> <p>Shows a HTML warning message</p> <pre class=\"highlight-php\" data-language=\"php\">$flash-&gt;warning('Hey, this is important');\n</pre> <h3 id=\"outputmessage\" class=\"method-signature\">public <em>string|void</em> <strong>outputMessage</strong> (<em>mixed</em> $type, <em>string|array</em> $message)</h3> <p>Outputs a message formatting it with HTML</p> <pre class=\"highlight-php\" data-language=\"php\">$flash-&gt;outputMessage('error', message);\n</pre> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> ()</h3> <p>Clears accumulated messages when implicit flush is disabled</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Flash.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Flash.html</a>\n  </p>\n</div>\n","api/phalcon_filter":"<h1 id=\"class-phalcon-filter\">Class <strong>Phalcon\\Filter</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_filterinterface\"><em>Phalcon\\FilterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/filter.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>The Phalcon\\Filter component provides a set of commonly needed data filters. It provides object oriented wrappers to the php filter extension. Also allows the developer to define his/her own filters</p> <pre class=\"highlight-php\" data-language=\"php\">$filter = new \\Phalcon\\Filter();\n$filter-&gt;sanitize(\"some(one)@exa\\\\mple.com\", \"email\"); // returns \"[email protected]\"\n$filter-&gt;sanitize(\"hello&lt;&lt;\", \"string\"); // returns \"hello\"\n$filter-&gt;sanitize(\"!100a019\", \"int\"); // returns \"100019\"\n$filter-&gt;sanitize(\"!100a019.01a\", \"float\"); // returns \"100019.01\"\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"filter_email\" class=\"method-signature\">\n<em>string</em> <strong>FILTER_EMAIL</strong>\n</h3> <h3 id=\"filter_absint\" class=\"method-signature\">\n<em>string</em> <strong>FILTER_ABSINT</strong>\n</h3> <h3 id=\"filter_int\" class=\"method-signature\">\n<em>string</em> <strong>FILTER_INT</strong>\n</h3> <h3 id=\"filter_int_cast\" class=\"method-signature\">\n<em>string</em> <strong>FILTER_INT_CAST</strong>\n</h3> <h3 id=\"filter_string\" class=\"method-signature\">\n<em>string</em> <strong>FILTER_STRING</strong>\n</h3> <h3 id=\"filter_float\" class=\"method-signature\">\n<em>string</em> <strong>FILTER_FLOAT</strong>\n</h3> <h3 id=\"filter_float_cast\" class=\"method-signature\">\n<em>string</em> <strong>FILTER_FLOAT_CAST</strong>\n</h3> <h3 id=\"filter_alphanum\" class=\"method-signature\">\n<em>string</em> <strong>FILTER_ALPHANUM</strong>\n</h3> <h3 id=\"filter_trim\" class=\"method-signature\">\n<em>string</em> <strong>FILTER_TRIM</strong>\n</h3> <h3 id=\"filter_striptags\" class=\"method-signature\">\n<em>string</em> <strong>FILTER_STRIPTAGS</strong>\n</h3> <h3 id=\"filter_lower\" class=\"method-signature\">\n<em>string</em> <strong>FILTER_LOWER</strong>\n</h3> <h3 id=\"filter_upper\" class=\"method-signature\">\n<em>string</em> <strong>FILTER_UPPER</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"add\" class=\"method-signature\">public <strong>add</strong> (<em>mixed</em> $name, <em>mixed</em> $handler)</h3> <p>Adds a user-defined filter</p> <h3 id=\"sanitize\" class=\"method-signature\">public <strong>sanitize</strong> (<em>mixed</em> $value, <em>mixed</em> $filters, [<em>mixed</em> $noRecursive])</h3> <p>Sanitizes a value with a specified single or set of filters</p> <h3 id=\"_sanitize\" class=\"method-signature\">protected <strong>_sanitize</strong> (<em>mixed</em> $value, <em>mixed</em> $filter)</h3> <p>Internal sanitize wrapper to filter_var</p> <h3 id=\"getfilters\" class=\"method-signature\">public <strong>getFilters</strong> ()</h3> <p>Return the user-defined filters in the instance</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Filter.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Filter.html</a>\n  </p>\n</div>\n","api/phalcon_flash_exception":"<h1 id=\"class-phalcon-flash-exception\">Class <strong>Phalcon\\Flash\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/flash/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Flash_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Flash_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_flash_direct":"<h1 id=\"class-phalcon-flash-direct\">Class <strong>Phalcon\\Flash\\Direct</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_flash\"><em>Phalcon\\Flash</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_flashinterface\"><em>Phalcon\\FlashInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/flash/direct.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This is a variant of the Phalcon\\Flash that immediately outputs any message passed to it</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"message\" class=\"method-signature\">public <strong>message</strong> (<em>mixed</em> $type, <em>mixed</em> $message)</h3> <p>Outputs a message</p> <h3 id=\"output\" class=\"method-signature\">public <strong>output</strong> ([<em>mixed</em> $remove])</h3> <p>Prints the messages accumulated in the flasher</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>mixed</em> $cssClasses]) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Phalcon\\Flash constructor</p> <h3 id=\"getautoescape\" class=\"method-signature\">public <strong>getAutoescape</strong> () <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Returns the autoescape mode in generated html</p> <h3 id=\"setautoescape\" class=\"method-signature\">public <strong>setAutoescape</strong> (<em>mixed</em> $autoescape) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Set the autoescape mode in generated html</p> <h3 id=\"getescaperservice\" class=\"method-signature\">public <strong>getEscaperService</strong> () <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Returns the Escaper Service</p> <h3 id=\"setescaperservice\" class=\"method-signature\">public <strong>setEscaperService</strong> (<a class=\"reference internal\" href=\"phalcon_escaperinterface\"><em>Phalcon\\EscaperInterface</em></a> $escaperService) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Sets the Escaper Service</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"setimplicitflush\" class=\"method-signature\">public <strong>setImplicitFlush</strong> (<em>mixed</em> $implicitFlush) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Set whether the output must be implicitly flushed to the output or returned as string</p> <h3 id=\"setautomatichtml\" class=\"method-signature\">public <strong>setAutomaticHtml</strong> (<em>mixed</em> $automaticHtml) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Set if the output must be implicitly formatted with HTML</p> <h3 id=\"setcssclasses\" class=\"method-signature\">public <strong>setCssClasses</strong> (<em>array</em> $cssClasses) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Set an array with CSS classes to format the messages</p> <h3 id=\"error\" class=\"method-signature\">public <strong>error</strong> (<em>mixed</em> $message) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Shows a HTML error message</p> <pre class=\"highlight-php\" data-language=\"php\">$flash-&gt;error('This is an error');\n</pre> <h3 id=\"notice\" class=\"method-signature\">public <strong>notice</strong> (<em>mixed</em> $message) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Shows a HTML notice/information message</p> <pre class=\"highlight-php\" data-language=\"php\">$flash-&gt;notice('This is an information');\n</pre> <h3 id=\"success\" class=\"method-signature\">public <strong>success</strong> (<em>mixed</em> $message) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Shows a HTML success message</p> <pre class=\"highlight-php\" data-language=\"php\">$flash-&gt;success('The process was finished successfully');\n</pre> <h3 id=\"warning\" class=\"method-signature\">public <strong>warning</strong> (<em>mixed</em> $message) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Shows a HTML warning message</p> <pre class=\"highlight-php\" data-language=\"php\">$flash-&gt;warning('Hey, this is important');\n</pre> <h3 id=\"outputmessage\" class=\"method-signature\">public <em>string|void</em> <strong>outputMessage</strong> (<em>mixed</em> $type, <em>string|array</em> $message) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Outputs a message formatting it with HTML</p> <pre class=\"highlight-php\" data-language=\"php\">$flash-&gt;outputMessage('error', message);\n</pre> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> () <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Clears accumulated messages when implicit flush is disabled</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Flash_Direct.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Flash_Direct.html</a>\n  </p>\n</div>\n","api/phalcon_flash_session":"<h1 id=\"class-phalcon-flash-session\">Class <strong>Phalcon\\Flash\\Session</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_flash\"><em>Phalcon\\Flash</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_flashinterface\"><em>Phalcon\\FlashInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/flash/session.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Temporarily stores the messages in session, then messages can be printed in the next request</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"_getsessionmessages\" class=\"method-signature\">protected <strong>_getSessionMessages</strong> (<em>mixed</em> $remove, [<em>mixed</em> $type])</h3> <p>Returns the messages stored in session</p> <h3 id=\"_setsessionmessages\" class=\"method-signature\">protected <strong>_setSessionMessages</strong> (<em>array</em> $messages)</h3> <p>Stores the messages in session</p> <h3 id=\"message\" class=\"method-signature\">public <strong>message</strong> (<em>mixed</em> $type, <em>mixed</em> $message)</h3> <p>Adds a message to the session flasher</p> <h3 id=\"has\" class=\"method-signature\">public <strong>has</strong> ([<em>mixed</em> $type])</h3> <p>Checks whether there are messages</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> ([<em>mixed</em> $type], [<em>mixed</em> $remove])</h3> <p>Returns the messages in the session flasher</p> <h3 id=\"output\" class=\"method-signature\">public <strong>output</strong> ([<em>mixed</em> $remove])</h3> <p>Prints the messages in the session flasher</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> ()</h3> <p>Clear messages in the session messenger</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>mixed</em> $cssClasses]) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Phalcon\\Flash constructor</p> <h3 id=\"getautoescape\" class=\"method-signature\">public <strong>getAutoescape</strong> () <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Returns the autoescape mode in generated html</p> <h3 id=\"setautoescape\" class=\"method-signature\">public <strong>setAutoescape</strong> (<em>mixed</em> $autoescape) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Set the autoescape mode in generated html</p> <h3 id=\"getescaperservice\" class=\"method-signature\">public <strong>getEscaperService</strong> () <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Returns the Escaper Service</p> <h3 id=\"setescaperservice\" class=\"method-signature\">public <strong>setEscaperService</strong> (<a class=\"reference internal\" href=\"phalcon_escaperinterface\"><em>Phalcon\\EscaperInterface</em></a> $escaperService) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Sets the Escaper Service</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"setimplicitflush\" class=\"method-signature\">public <strong>setImplicitFlush</strong> (<em>mixed</em> $implicitFlush) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Set whether the output must be implicitly flushed to the output or returned as string</p> <h3 id=\"setautomatichtml\" class=\"method-signature\">public <strong>setAutomaticHtml</strong> (<em>mixed</em> $automaticHtml) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Set if the output must be implicitly formatted with HTML</p> <h3 id=\"setcssclasses\" class=\"method-signature\">public <strong>setCssClasses</strong> (<em>array</em> $cssClasses) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Set an array with CSS classes to format the messages</p> <h3 id=\"error\" class=\"method-signature\">public <strong>error</strong> (<em>mixed</em> $message) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Shows a HTML error message</p> <pre class=\"highlight-php\" data-language=\"php\">$flash-&gt;error('This is an error');\n</pre> <h3 id=\"notice\" class=\"method-signature\">public <strong>notice</strong> (<em>mixed</em> $message) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Shows a HTML notice/information message</p> <pre class=\"highlight-php\" data-language=\"php\">$flash-&gt;notice('This is an information');\n</pre> <h3 id=\"success\" class=\"method-signature\">public <strong>success</strong> (<em>mixed</em> $message) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Shows a HTML success message</p> <pre class=\"highlight-php\" data-language=\"php\">$flash-&gt;success('The process was finished successfully');\n</pre> <h3 id=\"warning\" class=\"method-signature\">public <strong>warning</strong> (<em>mixed</em> $message) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Shows a HTML warning message</p> <pre class=\"highlight-php\" data-language=\"php\">$flash-&gt;warning('Hey, this is important');\n</pre> <h3 id=\"outputmessage\" class=\"method-signature\">public <em>string|void</em> <strong>outputMessage</strong> (<em>mixed</em> $type, <em>string|array</em> $message) <small>inherited from Phalcon\\Flash</small>\n</h3> <p>Outputs a message formatting it with HTML</p> <pre class=\"highlight-php\" data-language=\"php\">$flash-&gt;outputMessage('error', message);\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Flash_Session.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Flash_Session.html</a>\n  </p>\n</div>\n","api/phalcon_forms_element":"<h1 id=\"abstract-class-phalcon-forms-element\">Abstract class <strong>Phalcon\\Forms\\Element</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This is a base class for form elements</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $name, [<em>array</em> $attributes])</h3> <p>Phalcon\\Forms\\Element constructor</p> <h3 id=\"setform\" class=\"method-signature\">public <strong>setForm</strong> (<a class=\"reference internal\" href=\"phalcon_forms_form\"><em>Phalcon\\Forms\\Form</em></a> $form)</h3> <p>Sets the parent form to the element</p> <h3 id=\"getform\" class=\"method-signature\">public <strong>getForm</strong> ()</h3> <p>Returns the parent form to the element</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name)</h3> <p>Sets the element name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> ()</h3> <p>Returns the element name</p> <h3 id=\"setfilters\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setFilters</strong> (<em>array|string</em> $filters)</h3> <p>Sets the element filters</p> <h3 id=\"addfilter\" class=\"method-signature\">public <strong>addFilter</strong> (<em>mixed</em> $filter)</h3> <p>Adds a filter to current list of filters</p> <h3 id=\"getfilters\" class=\"method-signature\">public <em>mixed</em> <strong>getFilters</strong> ()</h3> <p>Returns the element filters</p> <h3 id=\"addvalidators\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>addValidators</strong> (<em>array</em> $validators, [<em>mixed</em> $merge])</h3> <p>Adds a group of validators</p> <h3 id=\"addvalidator\" class=\"method-signature\">public <strong>addValidator</strong> (<a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator)</h3> <p>Adds a validator to the element</p> <h3 id=\"getvalidators\" class=\"method-signature\">public <strong>getValidators</strong> ()</h3> <p>Returns the validators registered for the element</p> <h3 id=\"prepareattributes\" class=\"method-signature\">public <strong>prepareAttributes</strong> ([<em>array</em> $attributes], [<em>mixed</em> $useChecked])</h3> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <h3 id=\"setattribute\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setAttribute</strong> (<em>string</em> $attribute, <em>mixed</em> $value)</h3> <p>Sets a default attribute for the element</p> <h3 id=\"getattribute\" class=\"method-signature\">public <em>mixed</em> <strong>getAttribute</strong> (<em>string</em> $attribute, [<em>mixed</em> $defaultValue])</h3> <p>Returns the value of an attribute if present</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes)</h3> <p>Sets default attributes for the element</p> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> ()</h3> <p>Returns the default attributes for the element</p> <h3 id=\"setuseroption\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setUserOption</strong> (<em>string</em> $option, <em>mixed</em> $value)</h3> <p>Sets an option for the element</p> <h3 id=\"getuseroption\" class=\"method-signature\">public <em>mixed</em> <strong>getUserOption</strong> (<em>string</em> $option, [<em>mixed</em> $defaultValue])</h3> <p>Returns the value of an option if present</p> <h3 id=\"setuseroptions\" class=\"method-signature\">public <strong>setUserOptions</strong> (<em>array</em> $options)</h3> <p>Sets options for the element</p> <h3 id=\"getuseroptions\" class=\"method-signature\">public <strong>getUserOptions</strong> ()</h3> <p>Returns the options for the element</p> <h3 id=\"setlabel\" class=\"method-signature\">public <strong>setLabel</strong> (<em>mixed</em> $label)</h3> <p>Sets the element label</p> <h3 id=\"getlabel\" class=\"method-signature\">public <strong>getLabel</strong> ()</h3> <p>Returns the element label</p> <h3 id=\"label\" class=\"method-signature\">public <strong>label</strong> ([<em>array</em> $attributes])</h3> <p>Generate the HTML to label the element</p> <h3 id=\"setdefault\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setDefault</strong> (<em>mixed</em> $value)</h3> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <h3 id=\"getdefault\" class=\"method-signature\">public <strong>getDefault</strong> ()</h3> <p>Returns the default value assigned to the element</p> <h3 id=\"getvalue\" class=\"method-signature\">public <strong>getValue</strong> ()</h3> <p>Returns the element value</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> ()</h3> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <h3 id=\"hasmessages\" class=\"method-signature\">public <strong>hasMessages</strong> ()</h3> <p>Checks whether there are messages attached to the element</p> <h3 id=\"setmessages\" class=\"method-signature\">public <strong>setMessages</strong> (<a class=\"reference internal\" href=\"phalcon_validation_message_group\"><em>Phalcon\\Validation\\Message\\Group</em></a> $group)</h3> <p>Sets the validation messages related to the element</p> <h3 id=\"appendmessage\" class=\"method-signature\">public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a> $message)</h3> <p>Appends a message to the internal message list</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> ()</h3> <p>Clears every element in the form to its default value</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> ()</h3> <p>Magic method __toString renders the widget without attributes</p> <h3 id=\"render\" class=\"method-signature\">abstract public <strong>render</strong> ([<em>mixed</em> $attributes]) <small>inherited from Phalcon\\Forms\\ElementInterface</small>\n</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element.html</a>\n  </p>\n</div>\n","api/phalcon_forms_element_email":"<h1 id=\"class-phalcon-forms-element-email\">Class <strong>Phalcon\\Forms\\Element\\Email</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_forms_element\"><em>Phalcon\\Forms\\Element</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/email.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Component INPUT[type=email] for forms</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> ([<em>array</em> $attributes])</h3> <p>Renders the element widget returning html</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $name, [<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Phalcon\\Forms\\Element constructor</p> <h3 id=\"setform\" class=\"method-signature\">public <strong>setForm</strong> (<a class=\"reference internal\" href=\"phalcon_forms_form\"><em>Phalcon\\Forms\\Form</em></a> $form) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the parent form to the element</p> <h3 id=\"getform\" class=\"method-signature\">public <strong>getForm</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the parent form to the element</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element name</p> <h3 id=\"setfilters\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setFilters</strong> (<em>array|string</em> $filters) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element filters</p> <h3 id=\"addfilter\" class=\"method-signature\">public <strong>addFilter</strong> (<em>mixed</em> $filter) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a filter to current list of filters</p> <h3 id=\"getfilters\" class=\"method-signature\">public <em>mixed</em> <strong>getFilters</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element filters</p> <h3 id=\"addvalidators\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>addValidators</strong> (<em>array</em> $validators, [<em>mixed</em> $merge]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a group of validators</p> <h3 id=\"addvalidator\" class=\"method-signature\">public <strong>addValidator</strong> (<a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a validator to the element</p> <h3 id=\"getvalidators\" class=\"method-signature\">public <strong>getValidators</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the validators registered for the element</p> <h3 id=\"prepareattributes\" class=\"method-signature\">public <strong>prepareAttributes</strong> ([<em>array</em> $attributes], [<em>mixed</em> $useChecked]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <h3 id=\"setattribute\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setAttribute</strong> (<em>string</em> $attribute, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default attribute for the element</p> <h3 id=\"getattribute\" class=\"method-signature\">public <em>mixed</em> <strong>getAttribute</strong> (<em>string</em> $attribute, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an attribute if present</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets default attributes for the element</p> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default attributes for the element</p> <h3 id=\"setuseroption\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setUserOption</strong> (<em>string</em> $option, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets an option for the element</p> <h3 id=\"getuseroption\" class=\"method-signature\">public <em>mixed</em> <strong>getUserOption</strong> (<em>string</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an option if present</p> <h3 id=\"setuseroptions\" class=\"method-signature\">public <strong>setUserOptions</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets options for the element</p> <h3 id=\"getuseroptions\" class=\"method-signature\">public <strong>getUserOptions</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the options for the element</p> <h3 id=\"setlabel\" class=\"method-signature\">public <strong>setLabel</strong> (<em>mixed</em> $label) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element label</p> <h3 id=\"getlabel\" class=\"method-signature\">public <strong>getLabel</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element label</p> <h3 id=\"label\" class=\"method-signature\">public <strong>label</strong> ([<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Generate the HTML to label the element</p> <h3 id=\"setdefault\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setDefault</strong> (<em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <h3 id=\"getdefault\" class=\"method-signature\">public <strong>getDefault</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default value assigned to the element</p> <h3 id=\"getvalue\" class=\"method-signature\">public <strong>getValue</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element value</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <h3 id=\"hasmessages\" class=\"method-signature\">public <strong>hasMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Checks whether there are messages attached to the element</p> <h3 id=\"setmessages\" class=\"method-signature\">public <strong>setMessages</strong> (<a class=\"reference internal\" href=\"phalcon_validation_message_group\"><em>Phalcon\\Validation\\Message\\Group</em></a> $group) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the validation messages related to the element</p> <h3 id=\"appendmessage\" class=\"method-signature\">public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a> $message) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Appends a message to the internal message list</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Clears every element in the form to its default value</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Magic method __toString renders the widget without attributes</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Email.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Email.html</a>\n  </p>\n</div>\n","api/phalcon_forms_element_date":"<h1 id=\"class-phalcon-forms-element-date\">Class <strong>Phalcon\\Forms\\Element\\Date</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_forms_element\"><em>Phalcon\\Forms\\Element</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/date.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Component INPUT[type=date] for forms</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> ([<em>array</em> $attributes])</h3> <p>Renders the element widget returning html</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $name, [<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Phalcon\\Forms\\Element constructor</p> <h3 id=\"setform\" class=\"method-signature\">public <strong>setForm</strong> (<a class=\"reference internal\" href=\"phalcon_forms_form\"><em>Phalcon\\Forms\\Form</em></a> $form) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the parent form to the element</p> <h3 id=\"getform\" class=\"method-signature\">public <strong>getForm</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the parent form to the element</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element name</p> <h3 id=\"setfilters\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setFilters</strong> (<em>array|string</em> $filters) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element filters</p> <h3 id=\"addfilter\" class=\"method-signature\">public <strong>addFilter</strong> (<em>mixed</em> $filter) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a filter to current list of filters</p> <h3 id=\"getfilters\" class=\"method-signature\">public <em>mixed</em> <strong>getFilters</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element filters</p> <h3 id=\"addvalidators\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>addValidators</strong> (<em>array</em> $validators, [<em>mixed</em> $merge]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a group of validators</p> <h3 id=\"addvalidator\" class=\"method-signature\">public <strong>addValidator</strong> (<a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a validator to the element</p> <h3 id=\"getvalidators\" class=\"method-signature\">public <strong>getValidators</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the validators registered for the element</p> <h3 id=\"prepareattributes\" class=\"method-signature\">public <strong>prepareAttributes</strong> ([<em>array</em> $attributes], [<em>mixed</em> $useChecked]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <h3 id=\"setattribute\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setAttribute</strong> (<em>string</em> $attribute, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default attribute for the element</p> <h3 id=\"getattribute\" class=\"method-signature\">public <em>mixed</em> <strong>getAttribute</strong> (<em>string</em> $attribute, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an attribute if present</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets default attributes for the element</p> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default attributes for the element</p> <h3 id=\"setuseroption\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setUserOption</strong> (<em>string</em> $option, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets an option for the element</p> <h3 id=\"getuseroption\" class=\"method-signature\">public <em>mixed</em> <strong>getUserOption</strong> (<em>string</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an option if present</p> <h3 id=\"setuseroptions\" class=\"method-signature\">public <strong>setUserOptions</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets options for the element</p> <h3 id=\"getuseroptions\" class=\"method-signature\">public <strong>getUserOptions</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the options for the element</p> <h3 id=\"setlabel\" class=\"method-signature\">public <strong>setLabel</strong> (<em>mixed</em> $label) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element label</p> <h3 id=\"getlabel\" class=\"method-signature\">public <strong>getLabel</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element label</p> <h3 id=\"label\" class=\"method-signature\">public <strong>label</strong> ([<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Generate the HTML to label the element</p> <h3 id=\"setdefault\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setDefault</strong> (<em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <h3 id=\"getdefault\" class=\"method-signature\">public <strong>getDefault</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default value assigned to the element</p> <h3 id=\"getvalue\" class=\"method-signature\">public <strong>getValue</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element value</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <h3 id=\"hasmessages\" class=\"method-signature\">public <strong>hasMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Checks whether there are messages attached to the element</p> <h3 id=\"setmessages\" class=\"method-signature\">public <strong>setMessages</strong> (<a class=\"reference internal\" href=\"phalcon_validation_message_group\"><em>Phalcon\\Validation\\Message\\Group</em></a> $group) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the validation messages related to the element</p> <h3 id=\"appendmessage\" class=\"method-signature\">public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a> $message) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Appends a message to the internal message list</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Clears every element in the form to its default value</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Magic method __toString renders the widget without attributes</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Date.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Date.html</a>\n  </p>\n</div>\n","api/phalcon_forms_element_check":"<h1 id=\"class-phalcon-forms-element-check\">Class <strong>Phalcon\\Forms\\Element\\Check</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_forms_element\"><em>Phalcon\\Forms\\Element</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/check.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Component INPUT[type=check] for forms</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> ([<em>array</em> $attributes])</h3> <p>Renders the element widget returning html</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $name, [<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Phalcon\\Forms\\Element constructor</p> <h3 id=\"setform\" class=\"method-signature\">public <strong>setForm</strong> (<a class=\"reference internal\" href=\"phalcon_forms_form\"><em>Phalcon\\Forms\\Form</em></a> $form) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the parent form to the element</p> <h3 id=\"getform\" class=\"method-signature\">public <strong>getForm</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the parent form to the element</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element name</p> <h3 id=\"setfilters\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setFilters</strong> (<em>array|string</em> $filters) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element filters</p> <h3 id=\"addfilter\" class=\"method-signature\">public <strong>addFilter</strong> (<em>mixed</em> $filter) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a filter to current list of filters</p> <h3 id=\"getfilters\" class=\"method-signature\">public <em>mixed</em> <strong>getFilters</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element filters</p> <h3 id=\"addvalidators\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>addValidators</strong> (<em>array</em> $validators, [<em>mixed</em> $merge]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a group of validators</p> <h3 id=\"addvalidator\" class=\"method-signature\">public <strong>addValidator</strong> (<a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a validator to the element</p> <h3 id=\"getvalidators\" class=\"method-signature\">public <strong>getValidators</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the validators registered for the element</p> <h3 id=\"prepareattributes\" class=\"method-signature\">public <strong>prepareAttributes</strong> ([<em>array</em> $attributes], [<em>mixed</em> $useChecked]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <h3 id=\"setattribute\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setAttribute</strong> (<em>string</em> $attribute, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default attribute for the element</p> <h3 id=\"getattribute\" class=\"method-signature\">public <em>mixed</em> <strong>getAttribute</strong> (<em>string</em> $attribute, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an attribute if present</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets default attributes for the element</p> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default attributes for the element</p> <h3 id=\"setuseroption\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setUserOption</strong> (<em>string</em> $option, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets an option for the element</p> <h3 id=\"getuseroption\" class=\"method-signature\">public <em>mixed</em> <strong>getUserOption</strong> (<em>string</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an option if present</p> <h3 id=\"setuseroptions\" class=\"method-signature\">public <strong>setUserOptions</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets options for the element</p> <h3 id=\"getuseroptions\" class=\"method-signature\">public <strong>getUserOptions</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the options for the element</p> <h3 id=\"setlabel\" class=\"method-signature\">public <strong>setLabel</strong> (<em>mixed</em> $label) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element label</p> <h3 id=\"getlabel\" class=\"method-signature\">public <strong>getLabel</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element label</p> <h3 id=\"label\" class=\"method-signature\">public <strong>label</strong> ([<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Generate the HTML to label the element</p> <h3 id=\"setdefault\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setDefault</strong> (<em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <h3 id=\"getdefault\" class=\"method-signature\">public <strong>getDefault</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default value assigned to the element</p> <h3 id=\"getvalue\" class=\"method-signature\">public <strong>getValue</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element value</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <h3 id=\"hasmessages\" class=\"method-signature\">public <strong>hasMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Checks whether there are messages attached to the element</p> <h3 id=\"setmessages\" class=\"method-signature\">public <strong>setMessages</strong> (<a class=\"reference internal\" href=\"phalcon_validation_message_group\"><em>Phalcon\\Validation\\Message\\Group</em></a> $group) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the validation messages related to the element</p> <h3 id=\"appendmessage\" class=\"method-signature\">public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a> $message) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Appends a message to the internal message list</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Clears every element in the form to its default value</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Magic method __toString renders the widget without attributes</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Check.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Check.html</a>\n  </p>\n</div>\n","api/phalcon_forms_element_radio":"<h1 id=\"class-phalcon-forms-element-radio\">Class <strong>Phalcon\\Forms\\Element\\Radio</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_forms_element\"><em>Phalcon\\Forms\\Element</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/radio.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Component INPUT[type=radio] for forms</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> ([<em>array</em> $attributes])</h3> <p>Renders the element widget returning html</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $name, [<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Phalcon\\Forms\\Element constructor</p> <h3 id=\"setform\" class=\"method-signature\">public <strong>setForm</strong> (<a class=\"reference internal\" href=\"phalcon_forms_form\"><em>Phalcon\\Forms\\Form</em></a> $form) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the parent form to the element</p> <h3 id=\"getform\" class=\"method-signature\">public <strong>getForm</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the parent form to the element</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element name</p> <h3 id=\"setfilters\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setFilters</strong> (<em>array|string</em> $filters) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element filters</p> <h3 id=\"addfilter\" class=\"method-signature\">public <strong>addFilter</strong> (<em>mixed</em> $filter) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a filter to current list of filters</p> <h3 id=\"getfilters\" class=\"method-signature\">public <em>mixed</em> <strong>getFilters</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element filters</p> <h3 id=\"addvalidators\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>addValidators</strong> (<em>array</em> $validators, [<em>mixed</em> $merge]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a group of validators</p> <h3 id=\"addvalidator\" class=\"method-signature\">public <strong>addValidator</strong> (<a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a validator to the element</p> <h3 id=\"getvalidators\" class=\"method-signature\">public <strong>getValidators</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the validators registered for the element</p> <h3 id=\"prepareattributes\" class=\"method-signature\">public <strong>prepareAttributes</strong> ([<em>array</em> $attributes], [<em>mixed</em> $useChecked]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <h3 id=\"setattribute\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setAttribute</strong> (<em>string</em> $attribute, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default attribute for the element</p> <h3 id=\"getattribute\" class=\"method-signature\">public <em>mixed</em> <strong>getAttribute</strong> (<em>string</em> $attribute, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an attribute if present</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets default attributes for the element</p> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default attributes for the element</p> <h3 id=\"setuseroption\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setUserOption</strong> (<em>string</em> $option, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets an option for the element</p> <h3 id=\"getuseroption\" class=\"method-signature\">public <em>mixed</em> <strong>getUserOption</strong> (<em>string</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an option if present</p> <h3 id=\"setuseroptions\" class=\"method-signature\">public <strong>setUserOptions</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets options for the element</p> <h3 id=\"getuseroptions\" class=\"method-signature\">public <strong>getUserOptions</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the options for the element</p> <h3 id=\"setlabel\" class=\"method-signature\">public <strong>setLabel</strong> (<em>mixed</em> $label) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element label</p> <h3 id=\"getlabel\" class=\"method-signature\">public <strong>getLabel</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element label</p> <h3 id=\"label\" class=\"method-signature\">public <strong>label</strong> ([<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Generate the HTML to label the element</p> <h3 id=\"setdefault\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setDefault</strong> (<em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <h3 id=\"getdefault\" class=\"method-signature\">public <strong>getDefault</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default value assigned to the element</p> <h3 id=\"getvalue\" class=\"method-signature\">public <strong>getValue</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element value</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <h3 id=\"hasmessages\" class=\"method-signature\">public <strong>hasMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Checks whether there are messages attached to the element</p> <h3 id=\"setmessages\" class=\"method-signature\">public <strong>setMessages</strong> (<a class=\"reference internal\" href=\"phalcon_validation_message_group\"><em>Phalcon\\Validation\\Message\\Group</em></a> $group) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the validation messages related to the element</p> <h3 id=\"appendmessage\" class=\"method-signature\">public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a> $message) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Appends a message to the internal message list</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Clears every element in the form to its default value</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Magic method __toString renders the widget without attributes</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Radio.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Radio.html</a>\n  </p>\n</div>\n","api/phalcon_forms_element_file":"<h1 id=\"class-phalcon-forms-element-file\">Class <strong>Phalcon\\Forms\\Element\\File</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_forms_element\"><em>Phalcon\\Forms\\Element</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/file.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Component INPUT[type=file] for forms</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> ([<em>array</em> $attributes])</h3> <p>Renders the element widget returning html</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $name, [<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Phalcon\\Forms\\Element constructor</p> <h3 id=\"setform\" class=\"method-signature\">public <strong>setForm</strong> (<a class=\"reference internal\" href=\"phalcon_forms_form\"><em>Phalcon\\Forms\\Form</em></a> $form) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the parent form to the element</p> <h3 id=\"getform\" class=\"method-signature\">public <strong>getForm</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the parent form to the element</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element name</p> <h3 id=\"setfilters\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setFilters</strong> (<em>array|string</em> $filters) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element filters</p> <h3 id=\"addfilter\" class=\"method-signature\">public <strong>addFilter</strong> (<em>mixed</em> $filter) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a filter to current list of filters</p> <h3 id=\"getfilters\" class=\"method-signature\">public <em>mixed</em> <strong>getFilters</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element filters</p> <h3 id=\"addvalidators\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>addValidators</strong> (<em>array</em> $validators, [<em>mixed</em> $merge]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a group of validators</p> <h3 id=\"addvalidator\" class=\"method-signature\">public <strong>addValidator</strong> (<a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a validator to the element</p> <h3 id=\"getvalidators\" class=\"method-signature\">public <strong>getValidators</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the validators registered for the element</p> <h3 id=\"prepareattributes\" class=\"method-signature\">public <strong>prepareAttributes</strong> ([<em>array</em> $attributes], [<em>mixed</em> $useChecked]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <h3 id=\"setattribute\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setAttribute</strong> (<em>string</em> $attribute, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default attribute for the element</p> <h3 id=\"getattribute\" class=\"method-signature\">public <em>mixed</em> <strong>getAttribute</strong> (<em>string</em> $attribute, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an attribute if present</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets default attributes for the element</p> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default attributes for the element</p> <h3 id=\"setuseroption\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setUserOption</strong> (<em>string</em> $option, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets an option for the element</p> <h3 id=\"getuseroption\" class=\"method-signature\">public <em>mixed</em> <strong>getUserOption</strong> (<em>string</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an option if present</p> <h3 id=\"setuseroptions\" class=\"method-signature\">public <strong>setUserOptions</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets options for the element</p> <h3 id=\"getuseroptions\" class=\"method-signature\">public <strong>getUserOptions</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the options for the element</p> <h3 id=\"setlabel\" class=\"method-signature\">public <strong>setLabel</strong> (<em>mixed</em> $label) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element label</p> <h3 id=\"getlabel\" class=\"method-signature\">public <strong>getLabel</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element label</p> <h3 id=\"label\" class=\"method-signature\">public <strong>label</strong> ([<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Generate the HTML to label the element</p> <h3 id=\"setdefault\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setDefault</strong> (<em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <h3 id=\"getdefault\" class=\"method-signature\">public <strong>getDefault</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default value assigned to the element</p> <h3 id=\"getvalue\" class=\"method-signature\">public <strong>getValue</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element value</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <h3 id=\"hasmessages\" class=\"method-signature\">public <strong>hasMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Checks whether there are messages attached to the element</p> <h3 id=\"setmessages\" class=\"method-signature\">public <strong>setMessages</strong> (<a class=\"reference internal\" href=\"phalcon_validation_message_group\"><em>Phalcon\\Validation\\Message\\Group</em></a> $group) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the validation messages related to the element</p> <h3 id=\"appendmessage\" class=\"method-signature\">public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a> $message) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Appends a message to the internal message list</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Clears every element in the form to its default value</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Magic method __toString renders the widget without attributes</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_File.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_File.html</a>\n  </p>\n</div>\n","api/phalcon_forms_element_numeric":"<h1 id=\"class-phalcon-forms-element-numeric\">Class <strong>Phalcon\\Forms\\Element\\Numeric</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_forms_element\"><em>Phalcon\\Forms\\Element</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/numeric.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Component INPUT[type=number] for forms</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> ([<em>array</em> $attributes])</h3> <p>Renders the element widget returning html</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $name, [<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Phalcon\\Forms\\Element constructor</p> <h3 id=\"setform\" class=\"method-signature\">public <strong>setForm</strong> (<a class=\"reference internal\" href=\"phalcon_forms_form\"><em>Phalcon\\Forms\\Form</em></a> $form) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the parent form to the element</p> <h3 id=\"getform\" class=\"method-signature\">public <strong>getForm</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the parent form to the element</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element name</p> <h3 id=\"setfilters\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setFilters</strong> (<em>array|string</em> $filters) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element filters</p> <h3 id=\"addfilter\" class=\"method-signature\">public <strong>addFilter</strong> (<em>mixed</em> $filter) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a filter to current list of filters</p> <h3 id=\"getfilters\" class=\"method-signature\">public <em>mixed</em> <strong>getFilters</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element filters</p> <h3 id=\"addvalidators\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>addValidators</strong> (<em>array</em> $validators, [<em>mixed</em> $merge]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a group of validators</p> <h3 id=\"addvalidator\" class=\"method-signature\">public <strong>addValidator</strong> (<a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a validator to the element</p> <h3 id=\"getvalidators\" class=\"method-signature\">public <strong>getValidators</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the validators registered for the element</p> <h3 id=\"prepareattributes\" class=\"method-signature\">public <strong>prepareAttributes</strong> ([<em>array</em> $attributes], [<em>mixed</em> $useChecked]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <h3 id=\"setattribute\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setAttribute</strong> (<em>string</em> $attribute, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default attribute for the element</p> <h3 id=\"getattribute\" class=\"method-signature\">public <em>mixed</em> <strong>getAttribute</strong> (<em>string</em> $attribute, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an attribute if present</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets default attributes for the element</p> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default attributes for the element</p> <h3 id=\"setuseroption\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setUserOption</strong> (<em>string</em> $option, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets an option for the element</p> <h3 id=\"getuseroption\" class=\"method-signature\">public <em>mixed</em> <strong>getUserOption</strong> (<em>string</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an option if present</p> <h3 id=\"setuseroptions\" class=\"method-signature\">public <strong>setUserOptions</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets options for the element</p> <h3 id=\"getuseroptions\" class=\"method-signature\">public <strong>getUserOptions</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the options for the element</p> <h3 id=\"setlabel\" class=\"method-signature\">public <strong>setLabel</strong> (<em>mixed</em> $label) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element label</p> <h3 id=\"getlabel\" class=\"method-signature\">public <strong>getLabel</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element label</p> <h3 id=\"label\" class=\"method-signature\">public <strong>label</strong> ([<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Generate the HTML to label the element</p> <h3 id=\"setdefault\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setDefault</strong> (<em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <h3 id=\"getdefault\" class=\"method-signature\">public <strong>getDefault</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default value assigned to the element</p> <h3 id=\"getvalue\" class=\"method-signature\">public <strong>getValue</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element value</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <h3 id=\"hasmessages\" class=\"method-signature\">public <strong>hasMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Checks whether there are messages attached to the element</p> <h3 id=\"setmessages\" class=\"method-signature\">public <strong>setMessages</strong> (<a class=\"reference internal\" href=\"phalcon_validation_message_group\"><em>Phalcon\\Validation\\Message\\Group</em></a> $group) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the validation messages related to the element</p> <h3 id=\"appendmessage\" class=\"method-signature\">public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a> $message) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Appends a message to the internal message list</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Clears every element in the form to its default value</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Magic method __toString renders the widget without attributes</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Numeric.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Numeric.html</a>\n  </p>\n</div>\n","api/phalcon_forms_element_password":"<h1 id=\"class-phalcon-forms-element-password\">Class <strong>Phalcon\\Forms\\Element\\Password</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_forms_element\"><em>Phalcon\\Forms\\Element</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/password.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Component INPUT[type=password] for forms</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> ([<em>array</em> $attributes])</h3> <p>Renders the element widget returning html</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $name, [<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Phalcon\\Forms\\Element constructor</p> <h3 id=\"setform\" class=\"method-signature\">public <strong>setForm</strong> (<a class=\"reference internal\" href=\"phalcon_forms_form\"><em>Phalcon\\Forms\\Form</em></a> $form) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the parent form to the element</p> <h3 id=\"getform\" class=\"method-signature\">public <strong>getForm</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the parent form to the element</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element name</p> <h3 id=\"setfilters\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setFilters</strong> (<em>array|string</em> $filters) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element filters</p> <h3 id=\"addfilter\" class=\"method-signature\">public <strong>addFilter</strong> (<em>mixed</em> $filter) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a filter to current list of filters</p> <h3 id=\"getfilters\" class=\"method-signature\">public <em>mixed</em> <strong>getFilters</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element filters</p> <h3 id=\"addvalidators\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>addValidators</strong> (<em>array</em> $validators, [<em>mixed</em> $merge]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a group of validators</p> <h3 id=\"addvalidator\" class=\"method-signature\">public <strong>addValidator</strong> (<a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a validator to the element</p> <h3 id=\"getvalidators\" class=\"method-signature\">public <strong>getValidators</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the validators registered for the element</p> <h3 id=\"prepareattributes\" class=\"method-signature\">public <strong>prepareAttributes</strong> ([<em>array</em> $attributes], [<em>mixed</em> $useChecked]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <h3 id=\"setattribute\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setAttribute</strong> (<em>string</em> $attribute, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default attribute for the element</p> <h3 id=\"getattribute\" class=\"method-signature\">public <em>mixed</em> <strong>getAttribute</strong> (<em>string</em> $attribute, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an attribute if present</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets default attributes for the element</p> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default attributes for the element</p> <h3 id=\"setuseroption\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setUserOption</strong> (<em>string</em> $option, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets an option for the element</p> <h3 id=\"getuseroption\" class=\"method-signature\">public <em>mixed</em> <strong>getUserOption</strong> (<em>string</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an option if present</p> <h3 id=\"setuseroptions\" class=\"method-signature\">public <strong>setUserOptions</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets options for the element</p> <h3 id=\"getuseroptions\" class=\"method-signature\">public <strong>getUserOptions</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the options for the element</p> <h3 id=\"setlabel\" class=\"method-signature\">public <strong>setLabel</strong> (<em>mixed</em> $label) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element label</p> <h3 id=\"getlabel\" class=\"method-signature\">public <strong>getLabel</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element label</p> <h3 id=\"label\" class=\"method-signature\">public <strong>label</strong> ([<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Generate the HTML to label the element</p> <h3 id=\"setdefault\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setDefault</strong> (<em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <h3 id=\"getdefault\" class=\"method-signature\">public <strong>getDefault</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default value assigned to the element</p> <h3 id=\"getvalue\" class=\"method-signature\">public <strong>getValue</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element value</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <h3 id=\"hasmessages\" class=\"method-signature\">public <strong>hasMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Checks whether there are messages attached to the element</p> <h3 id=\"setmessages\" class=\"method-signature\">public <strong>setMessages</strong> (<a class=\"reference internal\" href=\"phalcon_validation_message_group\"><em>Phalcon\\Validation\\Message\\Group</em></a> $group) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the validation messages related to the element</p> <h3 id=\"appendmessage\" class=\"method-signature\">public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a> $message) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Appends a message to the internal message list</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Clears every element in the form to its default value</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Magic method __toString renders the widget without attributes</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Password.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Password.html</a>\n  </p>\n</div>\n","api/phalcon_forms_element_select":"<h1 id=\"class-phalcon-forms-element-select\">Class <strong>Phalcon\\Forms\\Element\\Select</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_forms_element\"><em>Phalcon\\Forms\\Element</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/select.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Component SELECT (choice) for forms</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $name, [<em>object|array</em> $options], [<em>array</em> $attributes])</h3> <p>Phalcon\\Forms\\Element constructor</p> <h3 id=\"setoptions\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_element\"><em>Phalcon\\Forms\\Element</em></a> <strong>setOptions</strong> (<em>array|object</em> $options)</h3> <p>Set the choice’s options</p> <h3 id=\"getoptions\" class=\"method-signature\">public <em>array|object</em> <strong>getOptions</strong> ()</h3> <p>Returns the choices’ options</p> <h3 id=\"addoption\" class=\"method-signature\">public <em>this</em> <strong>addOption</strong> (<em>array</em> $option)</h3> <p>Adds an option to the current options</p> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> ([<em>array</em> $attributes])</h3> <p>Renders the element widget returning html</p> <h3 id=\"setform\" class=\"method-signature\">public <strong>setForm</strong> (<a class=\"reference internal\" href=\"phalcon_forms_form\"><em>Phalcon\\Forms\\Form</em></a> $form) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the parent form to the element</p> <h3 id=\"getform\" class=\"method-signature\">public <strong>getForm</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the parent form to the element</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element name</p> <h3 id=\"setfilters\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setFilters</strong> (<em>array|string</em> $filters) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element filters</p> <h3 id=\"addfilter\" class=\"method-signature\">public <strong>addFilter</strong> (<em>mixed</em> $filter) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a filter to current list of filters</p> <h3 id=\"getfilters\" class=\"method-signature\">public <em>mixed</em> <strong>getFilters</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element filters</p> <h3 id=\"addvalidators\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>addValidators</strong> (<em>array</em> $validators, [<em>mixed</em> $merge]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a group of validators</p> <h3 id=\"addvalidator\" class=\"method-signature\">public <strong>addValidator</strong> (<a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a validator to the element</p> <h3 id=\"getvalidators\" class=\"method-signature\">public <strong>getValidators</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the validators registered for the element</p> <h3 id=\"prepareattributes\" class=\"method-signature\">public <strong>prepareAttributes</strong> ([<em>array</em> $attributes], [<em>mixed</em> $useChecked]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <h3 id=\"setattribute\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setAttribute</strong> (<em>string</em> $attribute, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default attribute for the element</p> <h3 id=\"getattribute\" class=\"method-signature\">public <em>mixed</em> <strong>getAttribute</strong> (<em>string</em> $attribute, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an attribute if present</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets default attributes for the element</p> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default attributes for the element</p> <h3 id=\"setuseroption\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setUserOption</strong> (<em>string</em> $option, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets an option for the element</p> <h3 id=\"getuseroption\" class=\"method-signature\">public <em>mixed</em> <strong>getUserOption</strong> (<em>string</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an option if present</p> <h3 id=\"setuseroptions\" class=\"method-signature\">public <strong>setUserOptions</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets options for the element</p> <h3 id=\"getuseroptions\" class=\"method-signature\">public <strong>getUserOptions</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the options for the element</p> <h3 id=\"setlabel\" class=\"method-signature\">public <strong>setLabel</strong> (<em>mixed</em> $label) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element label</p> <h3 id=\"getlabel\" class=\"method-signature\">public <strong>getLabel</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element label</p> <h3 id=\"label\" class=\"method-signature\">public <strong>label</strong> ([<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Generate the HTML to label the element</p> <h3 id=\"setdefault\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setDefault</strong> (<em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <h3 id=\"getdefault\" class=\"method-signature\">public <strong>getDefault</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default value assigned to the element</p> <h3 id=\"getvalue\" class=\"method-signature\">public <strong>getValue</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element value</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <h3 id=\"hasmessages\" class=\"method-signature\">public <strong>hasMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Checks whether there are messages attached to the element</p> <h3 id=\"setmessages\" class=\"method-signature\">public <strong>setMessages</strong> (<a class=\"reference internal\" href=\"phalcon_validation_message_group\"><em>Phalcon\\Validation\\Message\\Group</em></a> $group) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the validation messages related to the element</p> <h3 id=\"appendmessage\" class=\"method-signature\">public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a> $message) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Appends a message to the internal message list</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Clears every element in the form to its default value</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Magic method __toString renders the widget without attributes</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Select.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Select.html</a>\n  </p>\n</div>\n","api/phalcon_forms_element_hidden":"<h1 id=\"class-phalcon-forms-element-hidden\">Class <strong>Phalcon\\Forms\\Element\\Hidden</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_forms_element\"><em>Phalcon\\Forms\\Element</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/hidden.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Component INPUT[type=hidden] for forms</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> ([<em>array</em> $attributes])</h3> <p>Renders the element widget returning html</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $name, [<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Phalcon\\Forms\\Element constructor</p> <h3 id=\"setform\" class=\"method-signature\">public <strong>setForm</strong> (<a class=\"reference internal\" href=\"phalcon_forms_form\"><em>Phalcon\\Forms\\Form</em></a> $form) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the parent form to the element</p> <h3 id=\"getform\" class=\"method-signature\">public <strong>getForm</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the parent form to the element</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element name</p> <h3 id=\"setfilters\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setFilters</strong> (<em>array|string</em> $filters) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element filters</p> <h3 id=\"addfilter\" class=\"method-signature\">public <strong>addFilter</strong> (<em>mixed</em> $filter) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a filter to current list of filters</p> <h3 id=\"getfilters\" class=\"method-signature\">public <em>mixed</em> <strong>getFilters</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element filters</p> <h3 id=\"addvalidators\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>addValidators</strong> (<em>array</em> $validators, [<em>mixed</em> $merge]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a group of validators</p> <h3 id=\"addvalidator\" class=\"method-signature\">public <strong>addValidator</strong> (<a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a validator to the element</p> <h3 id=\"getvalidators\" class=\"method-signature\">public <strong>getValidators</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the validators registered for the element</p> <h3 id=\"prepareattributes\" class=\"method-signature\">public <strong>prepareAttributes</strong> ([<em>array</em> $attributes], [<em>mixed</em> $useChecked]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <h3 id=\"setattribute\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setAttribute</strong> (<em>string</em> $attribute, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default attribute for the element</p> <h3 id=\"getattribute\" class=\"method-signature\">public <em>mixed</em> <strong>getAttribute</strong> (<em>string</em> $attribute, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an attribute if present</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets default attributes for the element</p> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default attributes for the element</p> <h3 id=\"setuseroption\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setUserOption</strong> (<em>string</em> $option, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets an option for the element</p> <h3 id=\"getuseroption\" class=\"method-signature\">public <em>mixed</em> <strong>getUserOption</strong> (<em>string</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an option if present</p> <h3 id=\"setuseroptions\" class=\"method-signature\">public <strong>setUserOptions</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets options for the element</p> <h3 id=\"getuseroptions\" class=\"method-signature\">public <strong>getUserOptions</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the options for the element</p> <h3 id=\"setlabel\" class=\"method-signature\">public <strong>setLabel</strong> (<em>mixed</em> $label) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element label</p> <h3 id=\"getlabel\" class=\"method-signature\">public <strong>getLabel</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element label</p> <h3 id=\"label\" class=\"method-signature\">public <strong>label</strong> ([<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Generate the HTML to label the element</p> <h3 id=\"setdefault\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setDefault</strong> (<em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <h3 id=\"getdefault\" class=\"method-signature\">public <strong>getDefault</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default value assigned to the element</p> <h3 id=\"getvalue\" class=\"method-signature\">public <strong>getValue</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element value</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <h3 id=\"hasmessages\" class=\"method-signature\">public <strong>hasMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Checks whether there are messages attached to the element</p> <h3 id=\"setmessages\" class=\"method-signature\">public <strong>setMessages</strong> (<a class=\"reference internal\" href=\"phalcon_validation_message_group\"><em>Phalcon\\Validation\\Message\\Group</em></a> $group) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the validation messages related to the element</p> <h3 id=\"appendmessage\" class=\"method-signature\">public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a> $message) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Appends a message to the internal message list</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Clears every element in the form to its default value</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Magic method __toString renders the widget without attributes</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Hidden.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Hidden.html</a>\n  </p>\n</div>\n","api/phalcon_forms_manager":"<h1 id=\"class-phalcon-forms-manager\">Class <strong>Phalcon\\Forms\\Manager</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/manager.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"create\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_form\"><em>Phalcon\\Forms\\Form</em></a> <strong>create</strong> ([<em>string</em> $name], [<em>object</em> $entity])</h3> <p>Creates a form registering it in the forms manager</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $name)</h3> <p>Returns a form by its name</p> <h3 id=\"has\" class=\"method-signature\">public <strong>has</strong> (<em>mixed</em> $name)</h3> <p>Checks if a form is registered in the forms manager</p> <h3 id=\"set\" class=\"method-signature\">public <strong>set</strong> (<em>mixed</em> $name, <a class=\"reference internal\" href=\"phalcon_forms_form\"><em>Phalcon\\Forms\\Form</em></a> $form)</h3> <p>Registers a form in the Forms Manager</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Manager.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Manager.html</a>\n  </p>\n</div>\n","api/phalcon_forms_exception":"<h1 id=\"class-phalcon-forms-exception\">Class <strong>Phalcon\\Forms\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_http_cookie_exception":"<h1 id=\"class-phalcon-http-cookie-exception\">Class <strong>Phalcon\\Http\\Cookie\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/http/cookie/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Cookie_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Cookie_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_http_cookie":"<h1 id=\"class-phalcon-http-cookie\">Class <strong>Phalcon\\Http\\Cookie</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_http_cookieinterface\"><em>Phalcon\\Http\\CookieInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/http/cookie.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Provide OO wrappers to manage a HTTP cookie</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $name, [<em>mixed</em> $value], [<em>int</em> $expire], [<em>string</em> $path], [<em>boolean</em> $secure], [<em>string</em> $domain], [<em>boolean</em> $httpOnly])</h3> <p>Phalcon\\Http\\Cookie constructor</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the internal dependency injector</p> <h3 id=\"setvalue\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_http_cookie\"><em>Phalcon\\Http\\Cookie</em></a> <strong>setValue</strong> (<em>string</em> $value)</h3> <p>Sets the cookie’s value</p> <h3 id=\"getvalue\" class=\"method-signature\">public <em>mixed</em> <strong>getValue</strong> ([<em>string|array</em> $filters], [<em>string</em> $defaultValue])</h3> <p>Returns the cookie’s value</p> <h3 id=\"send\" class=\"method-signature\">public <strong>send</strong> ()</h3> <p>Sends the cookie to the HTTP client Stores the cookie definition in session</p> <h3 id=\"restore\" class=\"method-signature\">public <strong>restore</strong> ()</h3> <p>Reads the cookie-related info from the SESSION to restore the cookie as it was set This method is automatically called internally so normally you don’t need to call it</p> <h3 id=\"delete\" class=\"method-signature\">public <strong>delete</strong> ()</h3> <p>Deletes the cookie by setting an expire time in the past</p> <h3 id=\"useencryption\" class=\"method-signature\">public <strong>useEncryption</strong> (<em>mixed</em> $useEncryption)</h3> <p>Sets if the cookie must be encrypted/decrypted automatically</p> <h3 id=\"isusingencryption\" class=\"method-signature\">public <strong>isUsingEncryption</strong> ()</h3> <p>Check if the cookie is using implicit encryption</p> <h3 id=\"setexpiration\" class=\"method-signature\">public <strong>setExpiration</strong> (<em>mixed</em> $expire)</h3> <p>Sets the cookie’s expiration time</p> <h3 id=\"getexpiration\" class=\"method-signature\">public <strong>getExpiration</strong> ()</h3> <p>Returns the current expiration time</p> <h3 id=\"setpath\" class=\"method-signature\">public <strong>setPath</strong> (<em>mixed</em> $path)</h3> <p>Sets the cookie’s expiration time</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> ()</h3> <p>Returns the current cookie’s name</p> <h3 id=\"getpath\" class=\"method-signature\">public <strong>getPath</strong> ()</h3> <p>Returns the current cookie’s path</p> <h3 id=\"setdomain\" class=\"method-signature\">public <strong>setDomain</strong> (<em>mixed</em> $domain)</h3> <p>Sets the domain that the cookie is available to</p> <h3 id=\"getdomain\" class=\"method-signature\">public <strong>getDomain</strong> ()</h3> <p>Returns the domain that the cookie is available to</p> <h3 id=\"setsecure\" class=\"method-signature\">public <strong>setSecure</strong> (<em>mixed</em> $secure)</h3> <p>Sets if the cookie must only be sent when the connection is secure (HTTPS)</p> <h3 id=\"getsecure\" class=\"method-signature\">public <strong>getSecure</strong> ()</h3> <p>Returns whether the cookie must only be sent when the connection is secure (HTTPS)</p> <h3 id=\"sethttponly\" class=\"method-signature\">public <strong>setHttpOnly</strong> (<em>mixed</em> $httpOnly)</h3> <p>Sets if the cookie is accessible only through the HTTP protocol</p> <h3 id=\"gethttponly\" class=\"method-signature\">public <strong>getHttpOnly</strong> ()</h3> <p>Returns if the cookie is accessible only through the HTTP protocol</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> ()</h3> <p>Magic __toString method converts the cookie’s value to string</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Cookie.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Cookie.html</a>\n  </p>\n</div>\n","api/phalcon_forms_element_submit":"<h1 id=\"class-phalcon-forms-element-submit\">Class <strong>Phalcon\\Forms\\Element\\Submit</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_forms_element\"><em>Phalcon\\Forms\\Element</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/submit.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Component INPUT[type=submit] for forms</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> ([<em>array</em> $attributes])</h3> <p>Renders the element widget</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $name, [<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Phalcon\\Forms\\Element constructor</p> <h3 id=\"setform\" class=\"method-signature\">public <strong>setForm</strong> (<a class=\"reference internal\" href=\"phalcon_forms_form\"><em>Phalcon\\Forms\\Form</em></a> $form) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the parent form to the element</p> <h3 id=\"getform\" class=\"method-signature\">public <strong>getForm</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the parent form to the element</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element name</p> <h3 id=\"setfilters\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setFilters</strong> (<em>array|string</em> $filters) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element filters</p> <h3 id=\"addfilter\" class=\"method-signature\">public <strong>addFilter</strong> (<em>mixed</em> $filter) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a filter to current list of filters</p> <h3 id=\"getfilters\" class=\"method-signature\">public <em>mixed</em> <strong>getFilters</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element filters</p> <h3 id=\"addvalidators\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>addValidators</strong> (<em>array</em> $validators, [<em>mixed</em> $merge]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a group of validators</p> <h3 id=\"addvalidator\" class=\"method-signature\">public <strong>addValidator</strong> (<a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a validator to the element</p> <h3 id=\"getvalidators\" class=\"method-signature\">public <strong>getValidators</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the validators registered for the element</p> <h3 id=\"prepareattributes\" class=\"method-signature\">public <strong>prepareAttributes</strong> ([<em>array</em> $attributes], [<em>mixed</em> $useChecked]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <h3 id=\"setattribute\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setAttribute</strong> (<em>string</em> $attribute, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default attribute for the element</p> <h3 id=\"getattribute\" class=\"method-signature\">public <em>mixed</em> <strong>getAttribute</strong> (<em>string</em> $attribute, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an attribute if present</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets default attributes for the element</p> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default attributes for the element</p> <h3 id=\"setuseroption\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setUserOption</strong> (<em>string</em> $option, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets an option for the element</p> <h3 id=\"getuseroption\" class=\"method-signature\">public <em>mixed</em> <strong>getUserOption</strong> (<em>string</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an option if present</p> <h3 id=\"setuseroptions\" class=\"method-signature\">public <strong>setUserOptions</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets options for the element</p> <h3 id=\"getuseroptions\" class=\"method-signature\">public <strong>getUserOptions</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the options for the element</p> <h3 id=\"setlabel\" class=\"method-signature\">public <strong>setLabel</strong> (<em>mixed</em> $label) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element label</p> <h3 id=\"getlabel\" class=\"method-signature\">public <strong>getLabel</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element label</p> <h3 id=\"label\" class=\"method-signature\">public <strong>label</strong> ([<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Generate the HTML to label the element</p> <h3 id=\"setdefault\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setDefault</strong> (<em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <h3 id=\"getdefault\" class=\"method-signature\">public <strong>getDefault</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default value assigned to the element</p> <h3 id=\"getvalue\" class=\"method-signature\">public <strong>getValue</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element value</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <h3 id=\"hasmessages\" class=\"method-signature\">public <strong>hasMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Checks whether there are messages attached to the element</p> <h3 id=\"setmessages\" class=\"method-signature\">public <strong>setMessages</strong> (<a class=\"reference internal\" href=\"phalcon_validation_message_group\"><em>Phalcon\\Validation\\Message\\Group</em></a> $group) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the validation messages related to the element</p> <h3 id=\"appendmessage\" class=\"method-signature\">public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a> $message) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Appends a message to the internal message list</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Clears every element in the form to its default value</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Magic method __toString renders the widget without attributes</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Submit.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Submit.html</a>\n  </p>\n</div>\n","api/phalcon_forms_form":"<h1 id=\"class-phalcon-forms-form\">Class <strong>Phalcon\\Forms\\Form</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_di_injectable\"><em>Phalcon\\Di\\Injectable</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, Countable, Iterator, Traversable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/form.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This component allows to build forms using an object-oriented interface</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setvalidation\" class=\"method-signature\">public <strong>setValidation</strong> (<em>mixed</em> $validation)</h3> <p>...</p> <h3 id=\"getvalidation\" class=\"method-signature\">public <strong>getValidation</strong> ()</h3> <p>...</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>object</em> $entity], [<em>array</em> $userOptions])</h3> <p>Phalcon\\Forms\\Form constructor</p> <h3 id=\"setaction\" class=\"method-signature\">public <strong>setAction</strong> (<em>mixed</em> $action)</h3> <p>Sets the form’s action</p> <h3 id=\"getaction\" class=\"method-signature\">public <strong>getAction</strong> ()</h3> <p>Returns the form’s action</p> <h3 id=\"setuseroption\" class=\"method-signature\">public <strong>setUserOption</strong> (<em>string</em> $option, <em>mixed</em> $value)</h3> <p>Sets an option for the form</p> <h3 id=\"getuseroption\" class=\"method-signature\">public <strong>getUserOption</strong> (<em>string</em> $option, [<em>mixed</em> $defaultValue])</h3> <p>Returns the value of an option if present</p> <h3 id=\"setuseroptions\" class=\"method-signature\">public <strong>setUserOptions</strong> (<em>array</em> $options)</h3> <p>Sets options for the element</p> <h3 id=\"getuseroptions\" class=\"method-signature\">public <strong>getUserOptions</strong> ()</h3> <p>Returns the options for the element</p> <h3 id=\"setentity\" class=\"method-signature\">public <strong>setEntity</strong> (<em>object</em> $entity)</h3> <p>Sets the entity related to the model</p> <h3 id=\"getentity\" class=\"method-signature\">public <em>object</em> <strong>getEntity</strong> ()</h3> <p>Returns the entity related to the model</p> <h3 id=\"getelements\" class=\"method-signature\">public <strong>getElements</strong> ()</h3> <p>Returns the form elements added to the form</p> <h3 id=\"bind\" class=\"method-signature\">public <strong>bind</strong> (<em>array</em> $data, <em>object</em> $entity, [<em>array</em> $whitelist])</h3> <p>Binds data to the entity</p> <h3 id=\"isvalid\" class=\"method-signature\">public <strong>isValid</strong> ([<em>array</em> $data], [<em>object</em> $entity])</h3> <p>Validates the form</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> ([<em>mixed</em> $byItemName])</h3> <p>Returns the messages generated in the validation</p> <h3 id=\"getmessagesfor\" class=\"method-signature\">public <strong>getMessagesFor</strong> (<em>mixed</em> $name)</h3> <p>Returns the messages generated for a specific element</p> <h3 id=\"hasmessagesfor\" class=\"method-signature\">public <strong>hasMessagesFor</strong> (<em>mixed</em> $name)</h3> <p>Check if messages were generated for a specific element</p> <h3 id=\"add\" class=\"method-signature\">public <strong>add</strong> (<a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> $element, [<em>mixed</em> $position], [<em>mixed</em> $type])</h3> <p>Adds an element to the form</p> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> (<em>string</em> $name, [<em>array</em> $attributes])</h3> <p>Renders a specific item in the form</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $name)</h3> <p>Returns an element added to the form by its name</p> <h3 id=\"label\" class=\"method-signature\">public <strong>label</strong> (<em>mixed</em> $name, [<em>array</em> $attributes])</h3> <p>Generate the label of an element added to the form including HTML</p> <h3 id=\"getlabel\" class=\"method-signature\">public <strong>getLabel</strong> (<em>mixed</em> $name)</h3> <p>Returns a label for an element</p> <h3 id=\"getvalue\" class=\"method-signature\">public <strong>getValue</strong> (<em>mixed</em> $name)</h3> <p>Gets a value from the internal related entity or from the default value</p> <h3 id=\"has\" class=\"method-signature\">public <strong>has</strong> (<em>mixed</em> $name)</h3> <p>Check if the form contains an element</p> <h3 id=\"remove\" class=\"method-signature\">public <strong>remove</strong> (<em>mixed</em> $name)</h3> <p>Removes an element from the form</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> ([<em>array</em> $fields])</h3> <p>Clears every element in the form to its default value</p> <h3 id=\"count\" class=\"method-signature\">public <strong>count</strong> ()</h3> <p>Returns the number of elements in the form</p> <h3 id=\"rewind\" class=\"method-signature\">public <strong>rewind</strong> ()</h3> <p>Rewinds the internal iterator</p> <h3 id=\"current\" class=\"method-signature\">public <strong>current</strong> ()</h3> <p>Returns the current element in the iterator</p> <h3 id=\"key\" class=\"method-signature\">public <strong>key</strong> ()</h3> <p>Returns the current position/key in the iterator</p> <h3 id=\"next\" class=\"method-signature\">public <strong>next</strong> ()</h3> <p>Moves the internal iteration pointer to the next position</p> <h3 id=\"valid\" class=\"method-signature\">public <strong>valid</strong> ()</h3> <p>Check if the current element in the iterator is valid</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $propertyName) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Magic method __get</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Form.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Form.html</a>\n  </p>\n</div>\n","api/phalcon_forms_element_text":"<h1 id=\"class-phalcon-forms-element-text\">Class <strong>Phalcon\\Forms\\Element\\Text</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_forms_element\"><em>Phalcon\\Forms\\Element</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/text.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Component INPUT[type=text] for forms</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> ([<em>array</em> $attributes])</h3> <p>Renders the element widget</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $name, [<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Phalcon\\Forms\\Element constructor</p> <h3 id=\"setform\" class=\"method-signature\">public <strong>setForm</strong> (<a class=\"reference internal\" href=\"phalcon_forms_form\"><em>Phalcon\\Forms\\Form</em></a> $form) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the parent form to the element</p> <h3 id=\"getform\" class=\"method-signature\">public <strong>getForm</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the parent form to the element</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element name</p> <h3 id=\"setfilters\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setFilters</strong> (<em>array|string</em> $filters) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element filters</p> <h3 id=\"addfilter\" class=\"method-signature\">public <strong>addFilter</strong> (<em>mixed</em> $filter) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a filter to current list of filters</p> <h3 id=\"getfilters\" class=\"method-signature\">public <em>mixed</em> <strong>getFilters</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element filters</p> <h3 id=\"addvalidators\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>addValidators</strong> (<em>array</em> $validators, [<em>mixed</em> $merge]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a group of validators</p> <h3 id=\"addvalidator\" class=\"method-signature\">public <strong>addValidator</strong> (<a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a validator to the element</p> <h3 id=\"getvalidators\" class=\"method-signature\">public <strong>getValidators</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the validators registered for the element</p> <h3 id=\"prepareattributes\" class=\"method-signature\">public <strong>prepareAttributes</strong> ([<em>array</em> $attributes], [<em>mixed</em> $useChecked]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <h3 id=\"setattribute\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setAttribute</strong> (<em>string</em> $attribute, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default attribute for the element</p> <h3 id=\"getattribute\" class=\"method-signature\">public <em>mixed</em> <strong>getAttribute</strong> (<em>string</em> $attribute, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an attribute if present</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets default attributes for the element</p> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default attributes for the element</p> <h3 id=\"setuseroption\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setUserOption</strong> (<em>string</em> $option, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets an option for the element</p> <h3 id=\"getuseroption\" class=\"method-signature\">public <em>mixed</em> <strong>getUserOption</strong> (<em>string</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an option if present</p> <h3 id=\"setuseroptions\" class=\"method-signature\">public <strong>setUserOptions</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets options for the element</p> <h3 id=\"getuseroptions\" class=\"method-signature\">public <strong>getUserOptions</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the options for the element</p> <h3 id=\"setlabel\" class=\"method-signature\">public <strong>setLabel</strong> (<em>mixed</em> $label) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element label</p> <h3 id=\"getlabel\" class=\"method-signature\">public <strong>getLabel</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element label</p> <h3 id=\"label\" class=\"method-signature\">public <strong>label</strong> ([<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Generate the HTML to label the element</p> <h3 id=\"setdefault\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setDefault</strong> (<em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <h3 id=\"getdefault\" class=\"method-signature\">public <strong>getDefault</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default value assigned to the element</p> <h3 id=\"getvalue\" class=\"method-signature\">public <strong>getValue</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element value</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <h3 id=\"hasmessages\" class=\"method-signature\">public <strong>hasMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Checks whether there are messages attached to the element</p> <h3 id=\"setmessages\" class=\"method-signature\">public <strong>setMessages</strong> (<a class=\"reference internal\" href=\"phalcon_validation_message_group\"><em>Phalcon\\Validation\\Message\\Group</em></a> $group) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the validation messages related to the element</p> <h3 id=\"appendmessage\" class=\"method-signature\">public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a> $message) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Appends a message to the internal message list</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Clears every element in the form to its default value</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Magic method __toString renders the widget without attributes</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Text.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_Text.html</a>\n  </p>\n</div>\n","api/phalcon_forms_element_textarea":"<h1 id=\"class-phalcon-forms-element-textarea\">Class <strong>Phalcon\\Forms\\Element\\TextArea</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_forms_element\"><em>Phalcon\\Forms\\Element</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/element/textarea.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Component TEXTAREA for forms</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> ([<em>array</em> $attributes])</h3> <p>Renders the element widget</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $name, [<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Phalcon\\Forms\\Element constructor</p> <h3 id=\"setform\" class=\"method-signature\">public <strong>setForm</strong> (<a class=\"reference internal\" href=\"phalcon_forms_form\"><em>Phalcon\\Forms\\Form</em></a> $form) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the parent form to the element</p> <h3 id=\"getform\" class=\"method-signature\">public <strong>getForm</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the parent form to the element</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element name</p> <h3 id=\"setfilters\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setFilters</strong> (<em>array|string</em> $filters) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element filters</p> <h3 id=\"addfilter\" class=\"method-signature\">public <strong>addFilter</strong> (<em>mixed</em> $filter) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a filter to current list of filters</p> <h3 id=\"getfilters\" class=\"method-signature\">public <em>mixed</em> <strong>getFilters</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element filters</p> <h3 id=\"addvalidators\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>addValidators</strong> (<em>array</em> $validators, [<em>mixed</em> $merge]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a group of validators</p> <h3 id=\"addvalidator\" class=\"method-signature\">public <strong>addValidator</strong> (<a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Adds a validator to the element</p> <h3 id=\"getvalidators\" class=\"method-signature\">public <strong>getValidators</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the validators registered for the element</p> <h3 id=\"prepareattributes\" class=\"method-signature\">public <strong>prepareAttributes</strong> ([<em>array</em> $attributes], [<em>mixed</em> $useChecked]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <h3 id=\"setattribute\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setAttribute</strong> (<em>string</em> $attribute, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default attribute for the element</p> <h3 id=\"getattribute\" class=\"method-signature\">public <em>mixed</em> <strong>getAttribute</strong> (<em>string</em> $attribute, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an attribute if present</p> <h3 id=\"setattributes\" class=\"method-signature\">public <strong>setAttributes</strong> (<em>array</em> $attributes) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets default attributes for the element</p> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default attributes for the element</p> <h3 id=\"setuseroption\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setUserOption</strong> (<em>string</em> $option, <em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets an option for the element</p> <h3 id=\"getuseroption\" class=\"method-signature\">public <em>mixed</em> <strong>getUserOption</strong> (<em>string</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the value of an option if present</p> <h3 id=\"setuseroptions\" class=\"method-signature\">public <strong>setUserOptions</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets options for the element</p> <h3 id=\"getuseroptions\" class=\"method-signature\">public <strong>getUserOptions</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the options for the element</p> <h3 id=\"setlabel\" class=\"method-signature\">public <strong>setLabel</strong> (<em>mixed</em> $label) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the element label</p> <h3 id=\"getlabel\" class=\"method-signature\">public <strong>getLabel</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element label</p> <h3 id=\"label\" class=\"method-signature\">public <strong>label</strong> ([<em>array</em> $attributes]) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Generate the HTML to label the element</p> <h3 id=\"setdefault\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_forms_elementinterface\"><em>Phalcon\\Forms\\ElementInterface</em></a> <strong>setDefault</strong> (<em>mixed</em> $value) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <h3 id=\"getdefault\" class=\"method-signature\">public <strong>getDefault</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the default value assigned to the element</p> <h3 id=\"getvalue\" class=\"method-signature\">public <strong>getValue</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the element value</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <h3 id=\"hasmessages\" class=\"method-signature\">public <strong>hasMessages</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Checks whether there are messages attached to the element</p> <h3 id=\"setmessages\" class=\"method-signature\">public <strong>setMessages</strong> (<a class=\"reference internal\" href=\"phalcon_validation_message_group\"><em>Phalcon\\Validation\\Message\\Group</em></a> $group) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Sets the validation messages related to the element</p> <h3 id=\"appendmessage\" class=\"method-signature\">public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a> $message) <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Appends a message to the internal message list</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Clears every element in the form to its default value</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> () <small>inherited from Phalcon\\Forms\\Element</small>\n</h3> <p>Magic method __toString renders the widget without attributes</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_TextArea.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_Element_TextArea.html</a>\n  </p>\n</div>\n","api/phalcon_http_request_file":"<h1 id=\"class-phalcon-http-request-file\">Class <strong>Phalcon\\Http\\Request\\File</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_http_request_fileinterface\"><em>Phalcon\\Http\\Request\\FileInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/http/request/file.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Provides OO wrappers to the $_FILES superglobal</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n\n   public function uploadAction()\n   {\n      // Check if the user has uploaded files\n      if ($this-&gt;request-&gt;hasFiles() == true) {\n        // Print the real file names and their sizes\n        foreach ($this-&gt;request-&gt;getUploadedFiles() as $file) {\n            echo $file-&gt;getName(), \" \", $file-&gt;getSize(), \"\\n\";\n        }\n    }\n   }\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"geterror\" class=\"method-signature\">public <strong>getError</strong> ()</h3> <h3 id=\"getkey\" class=\"method-signature\">public <strong>getKey</strong> ()</h3> <h3 id=\"getextension\" class=\"method-signature\">public <strong>getExtension</strong> ()</h3> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $file, [<em>mixed</em> $key])</h3> <p>Phalcon\\Http\\Request\\File constructor</p> <h3 id=\"getsize\" class=\"method-signature\">public <strong>getSize</strong> ()</h3> <p>Returns the file size of the uploaded file</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> ()</h3> <p>Returns the real name of the uploaded file</p> <h3 id=\"gettempname\" class=\"method-signature\">public <strong>getTempName</strong> ()</h3> <p>Returns the temporary name of the uploaded file</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> ()</h3> <p>Returns the mime type reported by the browser This mime type is not completely secure, use getRealType() instead</p> <h3 id=\"getrealtype\" class=\"method-signature\">public <strong>getRealType</strong> ()</h3> <p>Gets the real mime type of the upload file using finfo</p> <h3 id=\"isuploadedfile\" class=\"method-signature\">public <strong>isUploadedFile</strong> ()</h3> <p>Checks whether the file has been uploaded via Post.</p> <h3 id=\"moveto\" class=\"method-signature\">public <strong>moveTo</strong> (<em>mixed</em> $destination)</h3> <p>Moves the temporary file to a destination within the application</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request_File.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request_File.html</a>\n  </p>\n</div>\n","api/phalcon_http_request_exception":"<h1 id=\"class-phalcon-http-request-exception\">Class <strong>Phalcon\\Http\\Request\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/http/request/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_http_response_cookies":"<h1 id=\"class-phalcon-http-response-cookies\">Class <strong>Phalcon\\Http\\Response\\Cookies</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_http_response_cookiesinterface\"><em>Phalcon\\Http\\Response\\CookiesInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/http/response/cookies.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class is a bag to manage the cookies A cookies bag is automatically registered as part of the ‘response’ service in the DI</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the internal dependency injector</p> <h3 id=\"useencryption\" class=\"method-signature\">public <strong>useEncryption</strong> (<em>mixed</em> $useEncryption)</h3> <p>Set if cookies in the bag must be automatically encrypted/decrypted</p> <h3 id=\"isusingencryption\" class=\"method-signature\">public <strong>isUsingEncryption</strong> ()</h3> <p>Returns if the bag is automatically encrypting/decrypting cookies</p> <h3 id=\"set\" class=\"method-signature\">public <strong>set</strong> (<em>mixed</em> $name, [<em>mixed</em> $value], [<em>mixed</em> $expire], [<em>mixed</em> $path], [<em>mixed</em> $secure], [<em>mixed</em> $domain], [<em>mixed</em> $httpOnly])</h3> <p>Sets a cookie to be sent at the end of the request This method overrides any cookie set before with the same name</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $name)</h3> <p>Gets a cookie from the bag</p> <h3 id=\"has\" class=\"method-signature\">public <strong>has</strong> (<em>mixed</em> $name)</h3> <p>Check if a cookie is defined in the bag or exists in the _COOKIE superglobal</p> <h3 id=\"delete\" class=\"method-signature\">public <strong>delete</strong> (<em>mixed</em> $name)</h3> <p>Deletes a cookie by its name This method does not removes cookies from the _COOKIE superglobal</p> <h3 id=\"send\" class=\"method-signature\">public <strong>send</strong> ()</h3> <p>Sends the cookies to the client Cookies aren’t sent if headers are sent in the current request</p> <h3 id=\"reset\" class=\"method-signature\">public <strong>reset</strong> ()</h3> <p>Reset set cookies</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_Cookies.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_Cookies.html</a>\n  </p>\n</div>\n","api/phalcon_http_response_exception":"<h1 id=\"class-phalcon-http-response-exception\">Class <strong>Phalcon\\Http\\Response\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/http/response/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_http_response_headers":"<h1 id=\"class-phalcon-http-response-headers\">Class <strong>Phalcon\\Http\\Response\\Headers</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_http_response_headersinterface\"><em>Phalcon\\Http\\Response\\HeadersInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/http/response/headers.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class is a bag to manage the response headers</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"set\" class=\"method-signature\">public <strong>set</strong> (<em>mixed</em> $name, <em>mixed</em> $value)</h3> <p>Sets a header to be sent at the end of the request</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $name)</h3> <p>Gets a header value from the internal bag</p> <h3 id=\"setraw\" class=\"method-signature\">public <strong>setRaw</strong> (<em>mixed</em> $header)</h3> <p>Sets a raw header to be sent at the end of the request</p> <h3 id=\"remove\" class=\"method-signature\">public <strong>remove</strong> (<em>mixed</em> $header)</h3> <p>Removes a header to be sent at the end of the request</p> <h3 id=\"send\" class=\"method-signature\">public <strong>send</strong> ()</h3> <p>Sends the headers to the client</p> <h3 id=\"reset\" class=\"method-signature\">public <strong>reset</strong> ()</h3> <p>Reset set headers</p> <h3 id=\"toarray\" class=\"method-signature\">public <strong>toArray</strong> ()</h3> <p>Returns the current headers as an array</p> <h3 id=\"__set_state\" class=\"method-signature\">public static <strong>__set_state</strong> (<em>array</em> $data)</h3> <p>Restore a \\Phalcon\\Http\\Response\\Headers object</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_Headers.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_Headers.html</a>\n  </p>\n</div>\n","api/phalcon_http_response":"<h1 id=\"class-phalcon-http-response\">Class <strong>Phalcon\\Http\\Response</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_http_responseinterface\"><em>Phalcon\\Http\\ResponseInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/http/response.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Part of the HTTP cycle is return responses to the clients. Phalcon\\HTTP\\Response is the Phalcon component responsible to achieve this task. HTTP responses are usually composed by headers and body.</p> <pre class=\"highlight-php\" data-language=\"php\">$response = new \\Phalcon\\Http\\Response();\n$response-&gt;setStatusCode(200, \"OK\");\n$response-&gt;setContent(\"&lt;html&gt;&lt;body&gt;Hello&lt;/body&gt;&lt;/html&gt;\");\n$response-&gt;send();\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>mixed</em> $content], [<em>mixed</em> $code], [<em>mixed</em> $status])</h3> <p>Phalcon\\Http\\Response constructor</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the internal dependency injector</p> <h3 id=\"setstatuscode\" class=\"method-signature\">public <strong>setStatusCode</strong> (<em>mixed</em> $code, [<em>mixed</em> $message])</h3> <p>Sets the HTTP response code</p> <pre class=\"highlight-php\" data-language=\"php\">$response-&gt;setStatusCode(404, \"Not Found\");\n</pre> <h3 id=\"getstatuscode\" class=\"method-signature\">public <strong>getStatusCode</strong> ()</h3> <p>Returns the status code</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($response-&gt;getStatusCode());\n</pre> <h3 id=\"setheaders\" class=\"method-signature\">public <strong>setHeaders</strong> (<a class=\"reference internal\" href=\"phalcon_http_response_headersinterface\"><em>Phalcon\\Http\\Response\\HeadersInterface</em></a> $headers)</h3> <p>Sets a headers bag for the response externally</p> <h3 id=\"getheaders\" class=\"method-signature\">public <strong>getHeaders</strong> ()</h3> <p>Returns headers set by the user</p> <h3 id=\"setcookies\" class=\"method-signature\">public <strong>setCookies</strong> (<a class=\"reference internal\" href=\"phalcon_http_response_cookiesinterface\"><em>Phalcon\\Http\\Response\\CookiesInterface</em></a> $cookies)</h3> <p>Sets a cookies bag for the response externally</p> <h3 id=\"getcookies\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_http_response_cookiesinterface\"><em>Phalcon\\Http\\Response\\CookiesInterface</em></a> <strong>getCookies</strong> ()</h3> <p>Returns coookies set by the user</p> <h3 id=\"setheader\" class=\"method-signature\">public <strong>setHeader</strong> (<em>mixed</em> $name, <em>mixed</em> $value)</h3> <p>Overwrites a header in the response</p> <pre class=\"highlight-php\" data-language=\"php\">$response-&gt;setHeader(\"Content-Type\", \"text/plain\");\n</pre> <h3 id=\"setrawheader\" class=\"method-signature\">public <strong>setRawHeader</strong> (<em>mixed</em> $header)</h3> <p>Send a raw header to the response</p> <pre class=\"highlight-php\" data-language=\"php\">$response-&gt;setRawHeader(\"HTTP/1.1 404 Not Found\");\n</pre> <h3 id=\"resetheaders\" class=\"method-signature\">public <strong>resetHeaders</strong> ()</h3> <p>Resets all the stablished headers</p> <h3 id=\"setexpires\" class=\"method-signature\">public <strong>setExpires</strong> (<em>DateTime</em> $datetime)</h3> <p>Sets an Expires header in the response that allows to use the HTTP cache</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;response-&gt;setExpires(new DateTime());\n</pre> <h3 id=\"setlastmodified\" class=\"method-signature\">public <strong>setLastModified</strong> (<em>DateTime</em> $datetime)</h3> <p>Sets Last-Modified header</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;response-&gt;setLastModified(new DateTime());\n</pre> <h3 id=\"setcache\" class=\"method-signature\">public <strong>setCache</strong> (<em>mixed</em> $minutes)</h3> <p>Sets Cache headers to use HTTP cache</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;response-&gt;setCache(60);\n</pre> <h3 id=\"setnotmodified\" class=\"method-signature\">public <strong>setNotModified</strong> ()</h3> <p>Sends a Not-Modified response</p> <h3 id=\"setcontenttype\" class=\"method-signature\">public <strong>setContentType</strong> (<em>mixed</em> $contentType, [<em>mixed</em> $charset])</h3> <p>Sets the response content-type mime, optionally the charset</p> <pre class=\"highlight-php\" data-language=\"php\">$response-&gt;setContentType('application/pdf');\n$response-&gt;setContentType('text/plain', 'UTF-8');\n</pre> <h3 id=\"setcontentlength\" class=\"method-signature\">public <strong>setContentLength</strong> (<em>mixed</em> $contentLength)</h3> <p>Sets the response content-length</p> <pre class=\"highlight-php\" data-language=\"php\">$response-&gt;setContentLength(2048);\n</pre> <h3 id=\"setetag\" class=\"method-signature\">public <strong>setEtag</strong> (<em>mixed</em> $etag)</h3> <p>Set a custom ETag</p> <pre class=\"highlight-php\" data-language=\"php\">$response-&gt;setEtag(md5(time()));\n</pre> <h3 id=\"redirect\" class=\"method-signature\">public <strong>redirect</strong> ([<em>mixed</em> $location], [<em>mixed</em> $externalRedirect], [<em>mixed</em> $statusCode])</h3> <p>Redirect by HTTP to another action or URL</p> <pre class=\"highlight-php\" data-language=\"php\">//Using a string redirect (internal/external)\n$response-&gt;redirect(\"posts/index\");\n$response-&gt;redirect(\"http://en.wikipedia.org\", true);\n$response-&gt;redirect(\"http://www.example.com/new-location\", true, 301);\n\n//Making a redirection based on a named route\n$response-&gt;redirect(array(\n    \"for\" =&gt; \"index-lang\",\n    \"lang\" =&gt; \"jp\",\n    \"controller\" =&gt; \"index\"\n));\n</pre> <h3 id=\"setcontent\" class=\"method-signature\">public <strong>setContent</strong> (<em>mixed</em> $content)</h3> <p>Sets HTTP response body</p> <pre class=\"highlight-php\" data-language=\"php\">response-&gt;setContent(\"&lt;h1&gt;Hello!&lt;/h1&gt;\");\n</pre> <h3 id=\"setjsoncontent\" class=\"method-signature\">public <strong>setJsonContent</strong> (<em>mixed</em> $content, [<em>mixed</em> $jsonOptions], [<em>mixed</em> $depth])</h3> <p>Sets HTTP response body. The parameter is automatically converted to JSON and also sets default header: Content-Type: “application/json; charset=UTF-8”</p> <pre class=\"highlight-php\" data-language=\"php\">$response-&gt;setJsonContent(array(\"status\" =&gt; \"OK\"));\n</pre> <h3 id=\"appendcontent\" class=\"method-signature\">public <strong>appendContent</strong> (<em>mixed</em> $content)</h3> <p>Appends a string to the HTTP response body</p> <h3 id=\"getcontent\" class=\"method-signature\">public <strong>getContent</strong> ()</h3> <p>Gets the HTTP response body</p> <h3 id=\"issent\" class=\"method-signature\">public <strong>isSent</strong> ()</h3> <p>Check if the response is already sent</p> <h3 id=\"sendheaders\" class=\"method-signature\">public <strong>sendHeaders</strong> ()</h3> <p>Sends headers to the client</p> <h3 id=\"sendcookies\" class=\"method-signature\">public <strong>sendCookies</strong> ()</h3> <p>Sends cookies to the client</p> <h3 id=\"send\" class=\"method-signature\">public <strong>send</strong> ()</h3> <p>Prints out HTTP response to the client</p> <h3 id=\"setfiletosend\" class=\"method-signature\">public <strong>setFileToSend</strong> (<em>mixed</em> $filePath, [<em>mixed</em> $attachmentName], [<em>mixed</em> $attachment])</h3> <p>Sets an attached file to be sent at the end of the request</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response.html</a>\n  </p>\n</div>\n","api/phalcon_kernel":"<h1 id=\"class-phalcon-kernel\">Class <strong>Phalcon\\Kernel</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/kernel.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"precomputehashkey\" class=\"method-signature\">public static <strong>preComputeHashKey</strong> (<em>mixed</em> $key)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Kernel.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Kernel.html</a>\n  </p>\n</div>\n","api/phalcon_image":"<h1 id=\"class-phalcon-image\">Class <strong>Phalcon\\Image</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/image.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"constants\">Constants</h2> <h3 id=\"none\" class=\"method-signature\">\n<em>integer</em> <strong>NONE</strong>\n</h3> <h3 id=\"width\" class=\"method-signature\">\n<em>integer</em> <strong>WIDTH</strong>\n</h3> <h3 id=\"height\" class=\"method-signature\">\n<em>integer</em> <strong>HEIGHT</strong>\n</h3> <h3 id=\"auto\" class=\"method-signature\">\n<em>integer</em> <strong>AUTO</strong>\n</h3> <h3 id=\"inverse\" class=\"method-signature\">\n<em>integer</em> <strong>INVERSE</strong>\n</h3> <h3 id=\"precise\" class=\"method-signature\">\n<em>integer</em> <strong>PRECISE</strong>\n</h3> <h3 id=\"tensile\" class=\"method-signature\">\n<em>integer</em> <strong>TENSILE</strong>\n</h3> <h3 id=\"horizontal\" class=\"method-signature\">\n<em>integer</em> <strong>HORIZONTAL</strong>\n</h3> <h3 id=\"vertical\" class=\"method-signature\">\n<em>integer</em> <strong>VERTICAL</strong>\n</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Image.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Image.html</a>\n  </p>\n</div>\n","api/phalcon_image_exception":"<h1 id=\"class-phalcon-image-exception\">Class <strong>Phalcon\\Image\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/image/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_http_request":"<h1 id=\"class-phalcon-http-request\">Class <strong>Phalcon\\Http\\Request</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_http_requestinterface\"><em>Phalcon\\Http\\RequestInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/http/request.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Encapsulates request information for easy and secure access from application controllers. The request object is a simple value object that is passed between the dispatcher and controller classes. It packages the HTTP request environment.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Http\\Request;\n\n $request = new Request();\n\n if ($request-&gt;isPost()) {\n     if ($request-&gt;isAjax()) {\n         echo 'Request was made using POST and AJAX';\n     }\n }\n\n $request-&gt;getServer('HTTP_HOST'); // retrieve SERVER variables\n $request-&gt;getMethod();            // GET, POST, PUT, DELETE, HEAD, OPTIONS, PATCH, PURGE, TRACE, CONNECT\n $request-&gt;getLanguages();         // an array of languages the client accepts\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"gethttpmethodparameteroverride\" class=\"method-signature\">public <strong>getHttpMethodParameterOverride</strong> ()</h3> <p>...</p> <h3 id=\"sethttpmethodparameteroverride\" class=\"method-signature\">public <strong>setHttpMethodParameterOverride</strong> (<em>mixed</em> $httpMethodParameterOverride)</h3> <p>...</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the internal dependency injector</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> ([<em>mixed</em> $name], [<em>mixed</em> $filters], [<em>mixed</em> $defaultValue], [<em>mixed</em> $notAllowEmpty], [<em>mixed</em> $noRecursive])</h3> <p>Gets a variable from the $_REQUEST superglobal applying filters if needed. If no parameters are given the $_REQUEST superglobal is returned</p> <pre class=\"highlight-php\" data-language=\"php\">//Returns value from $_REQUEST[\"user_email\"] without sanitizing\n$userEmail = $request-&gt;get(\"user_email\");\n\n//Returns value from $_REQUEST[\"user_email\"] with sanitizing\n$userEmail = $request-&gt;get(\"user_email\", \"email\");\n</pre> <h3 id=\"getpost\" class=\"method-signature\">public <strong>getPost</strong> ([<em>mixed</em> $name], [<em>mixed</em> $filters], [<em>mixed</em> $defaultValue], [<em>mixed</em> $notAllowEmpty], [<em>mixed</em> $noRecursive])</h3> <p>Gets a variable from the $_POST superglobal applying filters if needed If no parameters are given the $_POST superglobal is returned</p> <pre class=\"highlight-php\" data-language=\"php\">//Returns value from $_POST[\"user_email\"] without sanitizing\n$userEmail = $request-&gt;getPost(\"user_email\");\n\n//Returns value from $_POST[\"user_email\"] with sanitizing\n$userEmail = $request-&gt;getPost(\"user_email\", \"email\");\n</pre> <h3 id=\"getput\" class=\"method-signature\">public <strong>getPut</strong> ([<em>mixed</em> $name], [<em>mixed</em> $filters], [<em>mixed</em> $defaultValue], [<em>mixed</em> $notAllowEmpty], [<em>mixed</em> $noRecursive])</h3> <p>Gets a variable from put request</p> <pre class=\"highlight-php\" data-language=\"php\">//Returns value from $_PUT[\"user_email\"] without sanitizing\n$userEmail = $request-&gt;getPut(\"user_email\");\n\n//Returns value from $_PUT[\"user_email\"] with sanitizing\n$userEmail = $request-&gt;getPut(\"user_email\", \"email\");\n</pre> <h3 id=\"getquery\" class=\"method-signature\">public <strong>getQuery</strong> ([<em>mixed</em> $name], [<em>mixed</em> $filters], [<em>mixed</em> $defaultValue], [<em>mixed</em> $notAllowEmpty], [<em>mixed</em> $noRecursive])</h3> <p>Gets variable from $_GET superglobal applying filters if needed If no parameters are given the $_GET superglobal is returned</p> <pre class=\"highlight-php\" data-language=\"php\">// Returns value from $_GET['id'] without sanitizing\n$id = $request-&gt;getQuery('id');\n\n// Returns value from $_GET['id'] with sanitizing\n$id = $request-&gt;getQuery('id', 'int');\n\n// Returns value from $_GET['id'] with a default value\n$id = $request-&gt;getQuery('id', null, 150);\n</pre> <h3 id=\"gethelper\" class=\"method-signature\">final protected <strong>getHelper</strong> (<em>array</em> $source, [<em>mixed</em> $name], [<em>mixed</em> $filters], [<em>mixed</em> $defaultValue], [<em>mixed</em> $notAllowEmpty], [<em>mixed</em> $noRecursive])</h3> <p>Helper to get data from superglobals, applying filters if needed. If no parameters are given the superglobal is returned.</p> <h3 id=\"getserver\" class=\"method-signature\">public <strong>getServer</strong> (<em>mixed</em> $name)</h3> <p>Gets variable from $_SERVER superglobal</p> <h3 id=\"has\" class=\"method-signature\">public <strong>has</strong> (<em>mixed</em> $name)</h3> <p>Checks whether $_REQUEST superglobal has certain index</p> <h3 id=\"haspost\" class=\"method-signature\">public <strong>hasPost</strong> (<em>mixed</em> $name)</h3> <p>Checks whether $_POST superglobal has certain index</p> <h3 id=\"hasput\" class=\"method-signature\">public <strong>hasPut</strong> (<em>mixed</em> $name)</h3> <p>Checks whether the PUT data has certain index</p> <h3 id=\"hasquery\" class=\"method-signature\">public <strong>hasQuery</strong> (<em>mixed</em> $name)</h3> <p>Checks whether $_GET superglobal has certain index</p> <h3 id=\"hasserver\" class=\"method-signature\">final public <strong>hasServer</strong> (<em>mixed</em> $name)</h3> <p>Checks whether $_SERVER superglobal has certain index</p> <h3 id=\"getheader\" class=\"method-signature\">final public <strong>getHeader</strong> (<em>mixed</em> $header)</h3> <p>Gets HTTP header from request data</p> <h3 id=\"getscheme\" class=\"method-signature\">public <strong>getScheme</strong> ()</h3> <p>Gets HTTP schema (http/https)</p> <h3 id=\"isajax\" class=\"method-signature\">public <strong>isAjax</strong> ()</h3> <p>Checks whether request has been made using ajax</p> <h3 id=\"issoap\" class=\"method-signature\">public <strong>isSoap</strong> ()</h3> <p>Checks whether request has been made using SOAP</p> <h3 id=\"issoaprequested\" class=\"method-signature\">public <strong>isSoapRequested</strong> ()</h3> <p>Alias of isSoap(). It will be deprecated in future versions</p> <h3 id=\"issecure\" class=\"method-signature\">public <strong>isSecure</strong> ()</h3> <p>Checks whether request has been made using any secure layer</p> <h3 id=\"issecurerequest\" class=\"method-signature\">public <strong>isSecureRequest</strong> ()</h3> <p>Alias of isSecure(). It will be deprecated in future versions</p> <h3 id=\"getrawbody\" class=\"method-signature\">public <strong>getRawBody</strong> ()</h3> <p>Gets HTTP raw request body</p> <h3 id=\"getjsonrawbody\" class=\"method-signature\">public <strong>getJsonRawBody</strong> ([<em>mixed</em> $associative])</h3> <p>Gets decoded JSON HTTP raw request body</p> <h3 id=\"getserveraddress\" class=\"method-signature\">public <strong>getServerAddress</strong> ()</h3> <p>Gets active server address IP</p> <h3 id=\"getservername\" class=\"method-signature\">public <strong>getServerName</strong> ()</h3> <p>Gets active server name</p> <h3 id=\"gethttphost\" class=\"method-signature\">public <strong>getHttpHost</strong> ()</h3> <p>Gets host name used by the request. <cite>Request::getHttpHost</cite> trying to find host name in following order: - <cite>$_SERVER[‘HTTP_HOST’]</cite> - <cite>$_SERVER[‘SERVER_NAME’]</cite> - <cite>$_SERVER[‘SERVER_ADDR’]</cite> Optionally <cite>Request::getHttpHost</cite> validates and clean host name. The <cite>Request::$_strictHostCheck</cite> can be used to validate host name. Note: validation and cleaning have a negative performance impact because they use regular expressions.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Http\\Request;\n\n $request = new Request;\n\n $_SERVER['HTTP_HOST'] = 'example.com';\n $request-&gt;getHttpHost(); // example.com\n\n $_SERVER['HTTP_HOST'] = 'example.com:8080';\n $request-&gt;getHttpHost(); // example.com:8080\n\n $request-&gt;setStrictHostCheck(true);\n $_SERVER['HTTP_HOST'] = 'ex=am~ple.com';\n $request-&gt;getHttpHost(); // UnexpectedValueException\n\n $_SERVER['HTTP_HOST'] = 'ExAmPlE.com';\n $request-&gt;getHttpHost(); // example.com\n</pre> <h3 id=\"setstricthostcheck\" class=\"method-signature\">public <strong>setStrictHostCheck</strong> ([<em>mixed</em> $flag])</h3> <p>Sets if the <cite>Request::getHttpHost</cite> method must be use strict validation of host name or not</p> <h3 id=\"isstricthostcheck\" class=\"method-signature\">public <strong>isStrictHostCheck</strong> ()</h3> <p>Checks if the <cite>Request::getHttpHost</cite> method will be use strict validation of host name or not</p> <h3 id=\"getport\" class=\"method-signature\">public <strong>getPort</strong> ()</h3> <p>Gets information about the port on which the request is made.</p> <h3 id=\"geturi\" class=\"method-signature\">final public <strong>getURI</strong> ()</h3> <p>Gets HTTP URI which request has been made</p> <h3 id=\"getclientaddress\" class=\"method-signature\">public <strong>getClientAddress</strong> ([<em>mixed</em> $trustForwardedHeader])</h3> <p>Gets most possible client IPv4 Address. This method search in _SERVER[‘REMOTE_ADDR’] and optionally in _SERVER[‘HTTP_X_FORWARDED_FOR’]</p> <h3 id=\"getmethod\" class=\"method-signature\">final public <strong>getMethod</strong> ()</h3> <p>Gets HTTP method which request has been made If the X-HTTP-Method-Override header is set, and if the method is a POST, then it is used to determine the “real” intended HTTP method. The _method request parameter can also be used to determine the HTTP method, but only if setHttpMethodParameterOverride(true) has been called. The method is always an uppercased string.</p> <h3 id=\"getuseragent\" class=\"method-signature\">public <strong>getUserAgent</strong> ()</h3> <p>Gets HTTP user agent used to made the request</p> <h3 id=\"isvalidhttpmethod\" class=\"method-signature\">public <strong>isValidHttpMethod</strong> (<em>mixed</em> $method)</h3> <p>Checks if a method is a valid HTTP method</p> <h3 id=\"ismethod\" class=\"method-signature\">public <strong>isMethod</strong> (<em>mixed</em> $methods, [<em>mixed</em> $strict])</h3> <p>Check if HTTP method match any of the passed methods When strict is true it checks if validated methods are real HTTP methods</p> <h3 id=\"ispost\" class=\"method-signature\">public <strong>isPost</strong> ()</h3> <p>Checks whether HTTP method is POST. if _SERVER[“REQUEST_METHOD”]===”POST”</p> <h3 id=\"isget\" class=\"method-signature\">public <strong>isGet</strong> ()</h3> <p>Checks whether HTTP method is GET. if _SERVER[“REQUEST_METHOD”]===”GET”</p> <h3 id=\"isput\" class=\"method-signature\">public <strong>isPut</strong> ()</h3> <p>Checks whether HTTP method is PUT. if _SERVER[“REQUEST_METHOD”]===”PUT”</p> <h3 id=\"ispatch\" class=\"method-signature\">public <strong>isPatch</strong> ()</h3> <p>Checks whether HTTP method is PATCH. if _SERVER[“REQUEST_METHOD”]===”PATCH”</p> <h3 id=\"ishead\" class=\"method-signature\">public <strong>isHead</strong> ()</h3> <p>Checks whether HTTP method is HEAD. if _SERVER[“REQUEST_METHOD”]===”HEAD”</p> <h3 id=\"isdelete\" class=\"method-signature\">public <strong>isDelete</strong> ()</h3> <p>Checks whether HTTP method is DELETE. if _SERVER[“REQUEST_METHOD”]===”DELETE”</p> <h3 id=\"isoptions\" class=\"method-signature\">public <strong>isOptions</strong> ()</h3> <p>Checks whether HTTP method is OPTIONS. if _SERVER[“REQUEST_METHOD”]===”OPTIONS”</p> <h3 id=\"ispurge\" class=\"method-signature\">public <strong>isPurge</strong> ()</h3> <p>Checks whether HTTP method is PURGE (Squid and Varnish support). if _SERVER[“REQUEST_METHOD”]===”PURGE”</p> <h3 id=\"istrace\" class=\"method-signature\">public <strong>isTrace</strong> ()</h3> <p>Checks whether HTTP method is TRACE. if _SERVER[“REQUEST_METHOD”]===”TRACE”</p> <h3 id=\"isconnect\" class=\"method-signature\">public <strong>isConnect</strong> ()</h3> <p>Checks whether HTTP method is CONNECT. if _SERVER[“REQUEST_METHOD”]===”CONNECT”</p> <h3 id=\"hasfiles\" class=\"method-signature\">public <strong>hasFiles</strong> ([<em>mixed</em> $onlySuccessful])</h3> <p>Checks whether request include attached files</p> <h3 id=\"hasfilehelper\" class=\"method-signature\">final protected <strong>hasFileHelper</strong> (<em>mixed</em> $data, <em>mixed</em> $onlySuccessful)</h3> <p>Recursively counts file in an array of files</p> <h3 id=\"getuploadedfiles\" class=\"method-signature\">public <strong>getUploadedFiles</strong> ([<em>mixed</em> $onlySuccessful])</h3> <p>Gets attached files as Phalcon\\Http\\Request\\File instances</p> <h3 id=\"smoothfiles\" class=\"method-signature\">final protected <strong>smoothFiles</strong> (<em>array</em> $names, <em>array</em> $types, <em>array</em> $tmp_names, <em>array</em> $sizes, <em>array</em> $errors, <em>mixed</em> $prefix)</h3> <p>Smooth out $_FILES to have plain array with all files uploaded</p> <h3 id=\"getheaders\" class=\"method-signature\">public <strong>getHeaders</strong> ()</h3> <p>Returns the available headers in the request</p> <h3 id=\"gethttpreferer\" class=\"method-signature\">public <strong>getHTTPReferer</strong> ()</h3> <p>Gets web page that refers active request. ie: <a class=\"reference external\" href=\"http://www.google.com\">http://www.google.com</a></p> <h3 id=\"_getqualityheader\" class=\"method-signature\">final protected <strong>_getQualityHeader</strong> (<em>mixed</em> $serverIndex, <em>mixed</em> $name)</h3> <p>Process a request header and return an array of values with their qualities</p> <h3 id=\"_getbestquality\" class=\"method-signature\">final protected <strong>_getBestQuality</strong> (<em>array</em> $qualityParts, <em>mixed</em> $name)</h3> <p>Process a request header and return the one with best quality</p> <h3 id=\"getcontenttype\" class=\"method-signature\">public <strong>getContentType</strong> ()</h3> <p>Gets content type which request has been made</p> <h3 id=\"getacceptablecontent\" class=\"method-signature\">public <strong>getAcceptableContent</strong> ()</h3> <p>Gets an array with mime/types and their quality accepted by the browser/client from _SERVER[“HTTP_ACCEPT”]</p> <h3 id=\"getbestaccept\" class=\"method-signature\">public <strong>getBestAccept</strong> ()</h3> <p>Gets best mime/type accepted by the browser/client from _SERVER[“HTTP_ACCEPT”]</p> <h3 id=\"getclientcharsets\" class=\"method-signature\">public <strong>getClientCharsets</strong> ()</h3> <p>Gets a charsets array and their quality accepted by the browser/client from _SERVER[“HTTP_ACCEPT_CHARSET”]</p> <h3 id=\"getbestcharset\" class=\"method-signature\">public <strong>getBestCharset</strong> ()</h3> <p>Gets best charset accepted by the browser/client from _SERVER[“HTTP_ACCEPT_CHARSET”]</p> <h3 id=\"getlanguages\" class=\"method-signature\">public <strong>getLanguages</strong> ()</h3> <p>Gets languages array and their quality accepted by the browser/client from _SERVER[“HTTP_ACCEPT_LANGUAGE”]</p> <h3 id=\"getbestlanguage\" class=\"method-signature\">public <strong>getBestLanguage</strong> ()</h3> <p>Gets best language accepted by the browser/client from _SERVER[“HTTP_ACCEPT_LANGUAGE”]</p> <h3 id=\"getbasicauth\" class=\"method-signature\">public <strong>getBasicAuth</strong> ()</h3> <p>Gets auth info accepted by the browser/client from $_SERVER[‘PHP_AUTH_USER’]</p> <h3 id=\"getdigestauth\" class=\"method-signature\">public <strong>getDigestAuth</strong> ()</h3> <p>Gets auth info accepted by the browser/client from $_SERVER[‘PHP_AUTH_DIGEST’]</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request.html</a>\n  </p>\n</div>\n","api/phalcon_loader_exception":"<h1 id=\"class-phalcon-loader-exception\">Class <strong>Phalcon\\Loader\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/loader/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Loader_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Loader_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_logger":"<h1 id=\"abstract-class-phalcon-logger\">Abstract class <strong>Phalcon\\Logger</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/logger.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"constants\">Constants</h2> <h3 id=\"special\" class=\"method-signature\">\n<em>integer</em> <strong>SPECIAL</strong>\n</h3> <h3 id=\"custom\" class=\"method-signature\">\n<em>integer</em> <strong>CUSTOM</strong>\n</h3> <h3 id=\"debug\" class=\"method-signature\">\n<em>integer</em> <strong>DEBUG</strong>\n</h3> <h3 id=\"info\" class=\"method-signature\">\n<em>integer</em> <strong>INFO</strong>\n</h3> <h3 id=\"notice\" class=\"method-signature\">\n<em>integer</em> <strong>NOTICE</strong>\n</h3> <h3 id=\"warning\" class=\"method-signature\">\n<em>integer</em> <strong>WARNING</strong>\n</h3> <h3 id=\"error\" class=\"method-signature\">\n<em>integer</em> <strong>ERROR</strong>\n</h3> <h3 id=\"alert\" class=\"method-signature\">\n<em>integer</em> <strong>ALERT</strong>\n</h3> <h3 id=\"critical\" class=\"method-signature\">\n<em>integer</em> <strong>CRITICAL</strong>\n</h3> <h3 id=\"emergence\" class=\"method-signature\">\n<em>integer</em> <strong>EMERGENCE</strong>\n</h3> <h3 id=\"emergency\" class=\"method-signature\">\n<em>integer</em> <strong>EMERGENCY</strong>\n</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Logger.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Logger.html</a>\n  </p>\n</div>\n","api/phalcon_image_adapter":"<h1 id=\"abstract-class-phalcon-image-adapter\">Abstract class <strong>Phalcon\\Image\\Adapter</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/image/adapter.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>All image adapters must use this class</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getimage\" class=\"method-signature\">public <strong>getImage</strong> ()</h3> <p>...</p> <h3 id=\"getrealpath\" class=\"method-signature\">public <strong>getRealpath</strong> ()</h3> <p>...</p> <h3 id=\"getwidth\" class=\"method-signature\">public <strong>getWidth</strong> ()</h3> <p>Image width</p> <h3 id=\"getheight\" class=\"method-signature\">public <strong>getHeight</strong> ()</h3> <p>Image height</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> ()</h3> <p>Image type Driver dependent</p> <h3 id=\"getmime\" class=\"method-signature\">public <strong>getMime</strong> ()</h3> <p>Image mime type</p> <h3 id=\"resize\" class=\"method-signature\">public <strong>resize</strong> ([<em>mixed</em> $width], [<em>mixed</em> $height], [<em>mixed</em> $master])</h3> <p>Resize the image to the given size</p> <h3 id=\"liquidrescale\" class=\"method-signature\">public <strong>liquidRescale</strong> (<em>mixed</em> $width, <em>mixed</em> $height, [<em>mixed</em> $deltaX], [<em>mixed</em> $rigidity])</h3> <p>This method scales the images using liquid rescaling method. Only support Imagick</p> <h3 id=\"crop\" class=\"method-signature\">public <strong>crop</strong> (<em>mixed</em> $width, <em>mixed</em> $height, [<em>mixed</em> $offsetX], [<em>mixed</em> $offsetY])</h3> <p>Crop an image to the given size</p> <h3 id=\"rotate\" class=\"method-signature\">public <strong>rotate</strong> (<em>mixed</em> $degrees)</h3> <p>Rotate the image by a given amount</p> <h3 id=\"flip\" class=\"method-signature\">public <strong>flip</strong> (<em>mixed</em> $direction)</h3> <p>Flip the image along the horizontal or vertical axis</p> <h3 id=\"sharpen\" class=\"method-signature\">public <strong>sharpen</strong> (<em>mixed</em> $amount)</h3> <p>Sharpen the image by a given amount</p> <h3 id=\"reflection\" class=\"method-signature\">public <strong>reflection</strong> (<em>mixed</em> $height, [<em>mixed</em> $opacity], [<em>mixed</em> $fadeIn])</h3> <p>Add a reflection to an image</p> <h3 id=\"watermark\" class=\"method-signature\">public <strong>watermark</strong> (<a class=\"reference internal\" href=\"phalcon_image_adapter\"><em>Phalcon\\Image\\Adapter</em></a> $watermark, [<em>mixed</em> $offsetX], [<em>mixed</em> $offsetY], [<em>mixed</em> $opacity])</h3> <p>Add a watermark to an image with the specified opacity</p> <h3 id=\"text\" class=\"method-signature\">public <strong>text</strong> (<em>mixed</em> $text, [<em>mixed</em> $offsetX], [<em>mixed</em> $offsetY], [<em>mixed</em> $opacity], [<em>mixed</em> $color], [<em>mixed</em> $size], [<em>mixed</em> $fontfile])</h3> <p>Add a text to an image with a specified opacity</p> <h3 id=\"mask\" class=\"method-signature\">public <strong>mask</strong> (<a class=\"reference internal\" href=\"phalcon_image_adapter\"><em>Phalcon\\Image\\Adapter</em></a> $watermark)</h3> <p>Composite one image onto another</p> <h3 id=\"background\" class=\"method-signature\">public <strong>background</strong> (<em>mixed</em> $color, [<em>mixed</em> $opacity])</h3> <p>Set the background color of an image</p> <h3 id=\"blur\" class=\"method-signature\">public <strong>blur</strong> (<em>mixed</em> $radius)</h3> <p>Blur image</p> <h3 id=\"pixelate\" class=\"method-signature\">public <strong>pixelate</strong> (<em>mixed</em> $amount)</h3> <p>Pixelate image</p> <h3 id=\"save\" class=\"method-signature\">public <strong>save</strong> ([<em>mixed</em> $file], [<em>mixed</em> $quality])</h3> <p>Save the image</p> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> ([<em>mixed</em> $ext], [<em>mixed</em> $quality])</h3> <p>Render the image and return the binary string</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter.html</a>\n  </p>\n</div>\n","api/phalcon_logger_adapter":"<h1 id=\"abstract-class-phalcon-logger-adapter\">Abstract class <strong>Phalcon\\Logger\\Adapter</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/adapter.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Base class for Phalcon\\Logger adapters</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setloglevel\" class=\"method-signature\">public <strong>setLogLevel</strong> (<em>mixed</em> $level)</h3> <p>Filters the logs sent to the handlers that are less or equal than a specific level</p> <h3 id=\"getloglevel\" class=\"method-signature\">public <strong>getLogLevel</strong> ()</h3> <p>Returns the current log level</p> <h3 id=\"setformatter\" class=\"method-signature\">public <strong>setFormatter</strong> (<a class=\"reference internal\" href=\"phalcon_logger_formatterinterface\"><em>Phalcon\\Logger\\FormatterInterface</em></a> $formatter)</h3> <p>Sets the message formatter</p> <h3 id=\"begin\" class=\"method-signature\">public <strong>begin</strong> ()</h3> <p>Starts a transaction</p> <h3 id=\"commit\" class=\"method-signature\">public <strong>commit</strong> ()</h3> <p>Commits the internal transaction</p> <h3 id=\"rollback\" class=\"method-signature\">public <strong>rollback</strong> ()</h3> <p>Rollbacks the internal transaction</p> <h3 id=\"istransaction\" class=\"method-signature\">public <strong>isTransaction</strong> ()</h3> <p>Returns the whether the logger is currently in an active transaction or not</p> <h3 id=\"critical\" class=\"method-signature\">public <strong>critical</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>Sends/Writes a critical message to the log</p> <h3 id=\"emergency\" class=\"method-signature\">public <strong>emergency</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>Sends/Writes an emergency message to the log</p> <h3 id=\"debug\" class=\"method-signature\">public <strong>debug</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>Sends/Writes a debug message to the log</p> <h3 id=\"error\" class=\"method-signature\">public <strong>error</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>Sends/Writes an error message to the log</p> <h3 id=\"info\" class=\"method-signature\">public <strong>info</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>Sends/Writes an info message to the log</p> <h3 id=\"notice\" class=\"method-signature\">public <strong>notice</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>Sends/Writes a notice message to the log</p> <h3 id=\"warning\" class=\"method-signature\">public <strong>warning</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>Sends/Writes a warning message to the log</p> <h3 id=\"alert\" class=\"method-signature\">public <strong>alert</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>Sends/Writes an alert message to the log</p> <h3 id=\"log\" class=\"method-signature\">public <strong>log</strong> (<em>mixed</em> $type, [<em>mixed</em> $message], [<em>array</em> $context])</h3> <p>Logs messages to the internal logger. Appends logs to the logger</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter.html</a>\n  </p>\n</div>\n","api/phalcon_loader":"<h1 id=\"class-phalcon-loader\">Class <strong>Phalcon\\Loader</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/loader.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This component helps to load your project classes automatically based on some conventions</p> <pre class=\"highlight-php\" data-language=\"php\">//Creates the autoloader\n $loader = new Loader();\n\n //Register some namespaces\n $loader-&gt;registerNamespaces(array(\n   'Example\\Base' =&gt; 'vendor/example/base/',\n   'Example\\Adapter' =&gt; 'vendor/example/adapter/',\n   'Example' =&gt; 'vendor/example/'\n ));\n\n //register autoloader\n $loader-&gt;register();\n\n //Requiring this class will automatically include file vendor/example/adapter/Some.php\n $adapter = Example\\Adapter\\Some();\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager)</h3> <p>Sets the events manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> ()</h3> <p>Returns the internal event manager</p> <h3 id=\"setextensions\" class=\"method-signature\">public <strong>setExtensions</strong> (<em>array</em> $extensions)</h3> <p>Sets an array of file extensions that the loader must try in each attempt to locate the file</p> <h3 id=\"getextensions\" class=\"method-signature\">public <strong>getExtensions</strong> ()</h3> <p>Returns the file extensions registered in the loader</p> <h3 id=\"registernamespaces\" class=\"method-signature\">public <strong>registerNamespaces</strong> (<em>array</em> $namespaces, [<em>mixed</em> $merge])</h3> <p>Register namespaces and their related directories</p> <h3 id=\"preparenamespace\" class=\"method-signature\">protected <strong>prepareNamespace</strong> (<em>array</em> $namespace)</h3> <p>...</p> <h3 id=\"getnamespaces\" class=\"method-signature\">public <strong>getNamespaces</strong> ()</h3> <p>Returns the namespaces currently registered in the autoloader</p> <h3 id=\"registerdirs\" class=\"method-signature\">public <strong>registerDirs</strong> (<em>array</em> $directories, [<em>mixed</em> $merge])</h3> <p>Register directories in which “not found” classes could be found</p> <h3 id=\"getdirs\" class=\"method-signature\">public <strong>getDirs</strong> ()</h3> <p>Returns the directories currently registered in the autoloader</p> <h3 id=\"registerfiles\" class=\"method-signature\">public <strong>registerFiles</strong> (<em>array</em> $files, [<em>mixed</em> $merge])</h3> <p>Registers files that are “non-classes” hence need a “require”. This is very useful for including files that only have functions</p> <h3 id=\"getfiles\" class=\"method-signature\">public <strong>getFiles</strong> ()</h3> <p>Returns the files currently registered in the autoloader</p> <h3 id=\"registerclasses\" class=\"method-signature\">public <strong>registerClasses</strong> (<em>array</em> $classes, [<em>mixed</em> $merge])</h3> <p>Register classes and their locations</p> <h3 id=\"getclasses\" class=\"method-signature\">public <strong>getClasses</strong> ()</h3> <p>Returns the class-map currently registered in the autoloader</p> <h3 id=\"register\" class=\"method-signature\">public <strong>register</strong> ()</h3> <p>Register the autoload method</p> <h3 id=\"unregister\" class=\"method-signature\">public <strong>unregister</strong> ()</h3> <p>Unregister the autoload method</p> <h3 id=\"loadfiles\" class=\"method-signature\">public <strong>loadFiles</strong> ()</h3> <p>Checks if a file exists and then adds the file by doing virtual require</p> <h3 id=\"autoload\" class=\"method-signature\">public <strong>autoLoad</strong> (<em>mixed</em> $className)</h3> <p>Autoloads the registered classes</p> <h3 id=\"getfoundpath\" class=\"method-signature\">public <strong>getFoundPath</strong> ()</h3> <p>Get the path when a class was found</p> <h3 id=\"getcheckedpath\" class=\"method-signature\">public <strong>getCheckedPath</strong> ()</h3> <p>Get the path the loader is checking for a path</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Loader.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Loader.html</a>\n  </p>\n</div>\n","api/phalcon_image_adapter_gd":"<h1 id=\"class-phalcon-image-adapter-gd\">Class <strong>Phalcon\\Image\\Adapter\\Gd</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_image_adapter\"><em>Phalcon\\Image\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_image_adapterinterface\"><em>Phalcon\\Image\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/image/adapter/gd.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"check\" class=\"method-signature\">public static <strong>check</strong> ()</h3> <p>...</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $file, [<em>mixed</em> $width], [<em>mixed</em> $height])</h3> <p>...</p> <h3 id=\"_resize\" class=\"method-signature\">protected <strong>_resize</strong> (<em>mixed</em> $width, <em>mixed</em> $height)</h3> <p>...</p> <h3 id=\"_crop\" class=\"method-signature\">protected <strong>_crop</strong> (<em>mixed</em> $width, <em>mixed</em> $height, <em>mixed</em> $offsetX, <em>mixed</em> $offsetY)</h3> <p>...</p> <h3 id=\"_rotate\" class=\"method-signature\">protected <strong>_rotate</strong> (<em>mixed</em> $degrees)</h3> <p>...</p> <h3 id=\"_flip\" class=\"method-signature\">protected <strong>_flip</strong> (<em>mixed</em> $direction)</h3> <p>...</p> <h3 id=\"_sharpen\" class=\"method-signature\">protected <strong>_sharpen</strong> (<em>mixed</em> $amount)</h3> <p>...</p> <h3 id=\"_reflection\" class=\"method-signature\">protected <strong>_reflection</strong> (<em>mixed</em> $height, <em>mixed</em> $opacity, <em>mixed</em> $fadeIn)</h3> <p>...</p> <h3 id=\"_watermark\" class=\"method-signature\">protected <strong>_watermark</strong> (<a class=\"reference internal\" href=\"phalcon_image_adapter\"><em>Phalcon\\Image\\Adapter</em></a> $watermark, <em>mixed</em> $offsetX, <em>mixed</em> $offsetY, <em>mixed</em> $opacity)</h3> <p>...</p> <h3 id=\"_text\" class=\"method-signature\">protected <strong>_text</strong> (<em>mixed</em> $text, <em>mixed</em> $offsetX, <em>mixed</em> $offsetY, <em>mixed</em> $opacity, <em>mixed</em> $r, <em>mixed</em> $g, <em>mixed</em> $b, <em>mixed</em> $size, <em>mixed</em> $fontfile)</h3> <p>...</p> <h3 id=\"_mask\" class=\"method-signature\">protected <strong>_mask</strong> (<a class=\"reference internal\" href=\"phalcon_image_adapter\"><em>Phalcon\\Image\\Adapter</em></a> $mask)</h3> <p>...</p> <h3 id=\"_background\" class=\"method-signature\">protected <strong>_background</strong> (<em>mixed</em> $r, <em>mixed</em> $g, <em>mixed</em> $b, <em>mixed</em> $opacity)</h3> <p>...</p> <h3 id=\"_blur\" class=\"method-signature\">protected <strong>_blur</strong> (<em>mixed</em> $radius)</h3> <p>...</p> <h3 id=\"_pixelate\" class=\"method-signature\">protected <strong>_pixelate</strong> (<em>mixed</em> $amount)</h3> <p>...</p> <h3 id=\"_save\" class=\"method-signature\">protected <strong>_save</strong> (<em>mixed</em> $file, <em>mixed</em> $quality)</h3> <p>...</p> <h3 id=\"_render\" class=\"method-signature\">protected <strong>_render</strong> (<em>mixed</em> $ext, <em>mixed</em> $quality)</h3> <p>...</p> <h3 id=\"_create\" class=\"method-signature\">protected <strong>_create</strong> (<em>mixed</em> $width, <em>mixed</em> $height)</h3> <p>...</p> <h3 id=\"__destruct\" class=\"method-signature\">public <strong>__destruct</strong> ()</h3> <p>...</p> <h3 id=\"getimage\" class=\"method-signature\">public <strong>getImage</strong> () <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>...</p> <h3 id=\"getrealpath\" class=\"method-signature\">public <strong>getRealpath</strong> () <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>...</p> <h3 id=\"getwidth\" class=\"method-signature\">public <strong>getWidth</strong> () <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Image width</p> <h3 id=\"getheight\" class=\"method-signature\">public <strong>getHeight</strong> () <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Image height</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> () <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Image type Driver dependent</p> <h3 id=\"getmime\" class=\"method-signature\">public <strong>getMime</strong> () <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Image mime type</p> <h3 id=\"resize\" class=\"method-signature\">public <strong>resize</strong> ([<em>mixed</em> $width], [<em>mixed</em> $height], [<em>mixed</em> $master]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Resize the image to the given size</p> <h3 id=\"liquidrescale\" class=\"method-signature\">public <strong>liquidRescale</strong> (<em>mixed</em> $width, <em>mixed</em> $height, [<em>mixed</em> $deltaX], [<em>mixed</em> $rigidity]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>This method scales the images using liquid rescaling method. Only support Imagick</p> <h3 id=\"crop\" class=\"method-signature\">public <strong>crop</strong> (<em>mixed</em> $width, <em>mixed</em> $height, [<em>mixed</em> $offsetX], [<em>mixed</em> $offsetY]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Crop an image to the given size</p> <h3 id=\"rotate\" class=\"method-signature\">public <strong>rotate</strong> (<em>mixed</em> $degrees) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Rotate the image by a given amount</p> <h3 id=\"flip\" class=\"method-signature\">public <strong>flip</strong> (<em>mixed</em> $direction) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Flip the image along the horizontal or vertical axis</p> <h3 id=\"sharpen\" class=\"method-signature\">public <strong>sharpen</strong> (<em>mixed</em> $amount) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Sharpen the image by a given amount</p> <h3 id=\"reflection\" class=\"method-signature\">public <strong>reflection</strong> (<em>mixed</em> $height, [<em>mixed</em> $opacity], [<em>mixed</em> $fadeIn]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Add a reflection to an image</p> <h3 id=\"watermark\" class=\"method-signature\">public <strong>watermark</strong> (<a class=\"reference internal\" href=\"phalcon_image_adapter\"><em>Phalcon\\Image\\Adapter</em></a> $watermark, [<em>mixed</em> $offsetX], [<em>mixed</em> $offsetY], [<em>mixed</em> $opacity]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Add a watermark to an image with the specified opacity</p> <h3 id=\"text\" class=\"method-signature\">public <strong>text</strong> (<em>mixed</em> $text, [<em>mixed</em> $offsetX], [<em>mixed</em> $offsetY], [<em>mixed</em> $opacity], [<em>mixed</em> $color], [<em>mixed</em> $size], [<em>mixed</em> $fontfile]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Add a text to an image with a specified opacity</p> <h3 id=\"mask\" class=\"method-signature\">public <strong>mask</strong> (<a class=\"reference internal\" href=\"phalcon_image_adapter\"><em>Phalcon\\Image\\Adapter</em></a> $watermark) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Composite one image onto another</p> <h3 id=\"background\" class=\"method-signature\">public <strong>background</strong> (<em>mixed</em> $color, [<em>mixed</em> $opacity]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Set the background color of an image</p> <h3 id=\"blur\" class=\"method-signature\">public <strong>blur</strong> (<em>mixed</em> $radius) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Blur image</p> <h3 id=\"pixelate\" class=\"method-signature\">public <strong>pixelate</strong> (<em>mixed</em> $amount) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Pixelate image</p> <h3 id=\"save\" class=\"method-signature\">public <strong>save</strong> ([<em>mixed</em> $file], [<em>mixed</em> $quality]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Save the image</p> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> ([<em>mixed</em> $ext], [<em>mixed</em> $quality]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Render the image and return the binary string</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter_Gd.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter_Gd.html</a>\n  </p>\n</div>\n","api/phalcon_logger_adapter_file":"<h1 id=\"class-phalcon-logger-adapter-file\">Class <strong>Phalcon\\Logger\\Adapter\\File</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_logger_adapter\"><em>Phalcon\\Logger\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_logger_adapterinterface\"><em>Phalcon\\Logger\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/adapter/file.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Adapter to store logs in plain text files</p> <pre class=\"highlight-php\" data-language=\"php\">$logger = new \\Phalcon\\Logger\\Adapter\\File(\"app/logs/test.log\");\n$logger-&gt;log(\"This is a message\");\n$logger-&gt;log(\\Phalcon\\Logger::ERROR, \"This is an error\");\n$logger-&gt;error(\"This is another error\");\n$logger-&gt;close();\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getpath\" class=\"method-signature\">public <strong>getPath</strong> ()</h3> <p>File Path</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $name, [<em>array</em> $options])</h3> <p>Phalcon\\Logger\\Adapter\\File constructor</p> <h3 id=\"getformatter\" class=\"method-signature\">public <strong>getFormatter</strong> ()</h3> <p>Returns the internal formatter</p> <h3 id=\"loginternal\" class=\"method-signature\">public <strong>logInternal</strong> (<em>mixed</em> $message, <em>mixed</em> $type, <em>mixed</em> $time, <em>array</em> $context)</h3> <p>Writes the log to the file itself</p> <h3 id=\"close\" class=\"method-signature\">public <strong>close</strong> ()</h3> <p>Closes the logger</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> ()</h3> <p>Opens the internal file handler after unserialization</p> <h3 id=\"setloglevel\" class=\"method-signature\">public <strong>setLogLevel</strong> (<em>mixed</em> $level) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Filters the logs sent to the handlers that are less or equal than a specific level</p> <h3 id=\"getloglevel\" class=\"method-signature\">public <strong>getLogLevel</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Returns the current log level</p> <h3 id=\"setformatter\" class=\"method-signature\">public <strong>setFormatter</strong> (<a class=\"reference internal\" href=\"phalcon_logger_formatterinterface\"><em>Phalcon\\Logger\\FormatterInterface</em></a> $formatter) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sets the message formatter</p> <h3 id=\"begin\" class=\"method-signature\">public <strong>begin</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Starts a transaction</p> <h3 id=\"commit\" class=\"method-signature\">public <strong>commit</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Commits the internal transaction</p> <h3 id=\"rollback\" class=\"method-signature\">public <strong>rollback</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Rollbacks the internal transaction</p> <h3 id=\"istransaction\" class=\"method-signature\">public <strong>isTransaction</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Returns the whether the logger is currently in an active transaction or not</p> <h3 id=\"critical\" class=\"method-signature\">public <strong>critical</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes a critical message to the log</p> <h3 id=\"emergency\" class=\"method-signature\">public <strong>emergency</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes an emergency message to the log</p> <h3 id=\"debug\" class=\"method-signature\">public <strong>debug</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes a debug message to the log</p> <h3 id=\"error\" class=\"method-signature\">public <strong>error</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes an error message to the log</p> <h3 id=\"info\" class=\"method-signature\">public <strong>info</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes an info message to the log</p> <h3 id=\"notice\" class=\"method-signature\">public <strong>notice</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes a notice message to the log</p> <h3 id=\"warning\" class=\"method-signature\">public <strong>warning</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes a warning message to the log</p> <h3 id=\"alert\" class=\"method-signature\">public <strong>alert</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes an alert message to the log</p> <h3 id=\"log\" class=\"method-signature\">public <strong>log</strong> (<em>mixed</em> $type, [<em>mixed</em> $message], [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Logs messages to the internal logger. Appends logs to the logger</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_File.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_File.html</a>\n  </p>\n</div>\n","api/phalcon_image_adapter_imagick":"<h1 id=\"class-phalcon-image-adapter-imagick\">Class <strong>Phalcon\\Image\\Adapter\\Imagick</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_image_adapter\"><em>Phalcon\\Image\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_image_adapterinterface\"><em>Phalcon\\Image\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/image/adapter/imagick.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Image manipulation support. Allows images to be resized, cropped, etc.</p> <pre class=\"highlight-php\" data-language=\"php\">$image = new Phalcon\\Image\\Adapter\\Imagick(\"upload/test.jpg\");\n $image-&gt;resize(200, 200)-&gt;rotate(90)-&gt;crop(100, 100);\n if ($image-&gt;save()) {\n     echo 'success';\n }\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"check\" class=\"method-signature\">public static <strong>check</strong> ()</h3> <p>Checks if Imagick is enabled</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $file, [<em>mixed</em> $width], [<em>mixed</em> $height])</h3> <p>\\Phalcon\\Image\\Adapter\\Imagick constructor</p> <h3 id=\"_resize\" class=\"method-signature\">protected <strong>_resize</strong> (<em>mixed</em> $width, <em>mixed</em> $height)</h3> <p>Execute a resize.</p> <h3 id=\"_liquidrescale\" class=\"method-signature\">protected <strong>_liquidRescale</strong> (<em>mixed</em> $width, <em>mixed</em> $height, <em>mixed</em> $deltaX, <em>mixed</em> $rigidity)</h3> <p>This method scales the images using liquid rescaling method. Only support Imagick</p> <h3 id=\"_crop\" class=\"method-signature\">protected <strong>_crop</strong> (<em>mixed</em> $width, <em>mixed</em> $height, <em>mixed</em> $offsetX, <em>mixed</em> $offsetY)</h3> <p>Execute a crop.</p> <h3 id=\"_rotate\" class=\"method-signature\">protected <strong>_rotate</strong> (<em>mixed</em> $degrees)</h3> <p>Execute a rotation.</p> <h3 id=\"_flip\" class=\"method-signature\">protected <strong>_flip</strong> (<em>mixed</em> $direction)</h3> <p>Execute a flip.</p> <h3 id=\"_sharpen\" class=\"method-signature\">protected <strong>_sharpen</strong> (<em>mixed</em> $amount)</h3> <p>Execute a sharpen.</p> <h3 id=\"_reflection\" class=\"method-signature\">protected <strong>_reflection</strong> (<em>mixed</em> $height, <em>mixed</em> $opacity, <em>mixed</em> $fadeIn)</h3> <p>Execute a reflection.</p> <h3 id=\"_watermark\" class=\"method-signature\">protected <strong>_watermark</strong> (<a class=\"reference internal\" href=\"phalcon_image_adapter\"><em>Phalcon\\Image\\Adapter</em></a> $image, <em>mixed</em> $offsetX, <em>mixed</em> $offsetY, <em>mixed</em> $opacity)</h3> <p>Execute a watermarking.</p> <h3 id=\"_text\" class=\"method-signature\">protected <strong>_text</strong> (<em>mixed</em> $text, <em>mixed</em> $offsetX, <em>mixed</em> $offsetY, <em>mixed</em> $opacity, <em>mixed</em> $r, <em>mixed</em> $g, <em>mixed</em> $b, <em>mixed</em> $size, <em>mixed</em> $fontfile)</h3> <p>Execute a text</p> <h3 id=\"_mask\" class=\"method-signature\">protected <strong>_mask</strong> (<a class=\"reference internal\" href=\"phalcon_image_adapter\"><em>Phalcon\\Image\\Adapter</em></a> $image)</h3> <p>Composite one image onto another</p> <h3 id=\"_background\" class=\"method-signature\">protected <strong>_background</strong> (<em>mixed</em> $r, <em>mixed</em> $g, <em>mixed</em> $b, <em>mixed</em> $opacity)</h3> <p>Execute a background.</p> <h3 id=\"_blur\" class=\"method-signature\">protected <strong>_blur</strong> (<em>mixed</em> $radius)</h3> <p>Blur image</p> <h3 id=\"_pixelate\" class=\"method-signature\">protected <strong>_pixelate</strong> (<em>mixed</em> $amount)</h3> <p>Pixelate image</p> <h3 id=\"_save\" class=\"method-signature\">protected <strong>_save</strong> (<em>mixed</em> $file, <em>mixed</em> $quality)</h3> <p>Execute a save.</p> <h3 id=\"_render\" class=\"method-signature\">protected <strong>_render</strong> (<em>mixed</em> $extension, <em>mixed</em> $quality)</h3> <p>Execute a render.</p> <h3 id=\"__destruct\" class=\"method-signature\">public <strong>__destruct</strong> ()</h3> <p>Destroys the loaded image to free up resources.</p> <h3 id=\"getinternaliminstance\" class=\"method-signature\">public <strong>getInternalImInstance</strong> ()</h3> <p>Get instance</p> <h3 id=\"setresourcelimit\" class=\"method-signature\">public <strong>setResourceLimit</strong> (<em>mixed</em> $type, <em>mixed</em> $limit)</h3> <p>Sets the limit for a particular resource in megabytes</p> <h3 id=\"getimage\" class=\"method-signature\">public <strong>getImage</strong> () <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>...</p> <h3 id=\"getrealpath\" class=\"method-signature\">public <strong>getRealpath</strong> () <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>...</p> <h3 id=\"getwidth\" class=\"method-signature\">public <strong>getWidth</strong> () <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Image width</p> <h3 id=\"getheight\" class=\"method-signature\">public <strong>getHeight</strong> () <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Image height</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> () <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Image type Driver dependent</p> <h3 id=\"getmime\" class=\"method-signature\">public <strong>getMime</strong> () <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Image mime type</p> <h3 id=\"resize\" class=\"method-signature\">public <strong>resize</strong> ([<em>mixed</em> $width], [<em>mixed</em> $height], [<em>mixed</em> $master]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Resize the image to the given size</p> <h3 id=\"liquidrescale\" class=\"method-signature\">public <strong>liquidRescale</strong> (<em>mixed</em> $width, <em>mixed</em> $height, [<em>mixed</em> $deltaX], [<em>mixed</em> $rigidity]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>This method scales the images using liquid rescaling method. Only support Imagick</p> <h3 id=\"crop\" class=\"method-signature\">public <strong>crop</strong> (<em>mixed</em> $width, <em>mixed</em> $height, [<em>mixed</em> $offsetX], [<em>mixed</em> $offsetY]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Crop an image to the given size</p> <h3 id=\"rotate\" class=\"method-signature\">public <strong>rotate</strong> (<em>mixed</em> $degrees) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Rotate the image by a given amount</p> <h3 id=\"flip\" class=\"method-signature\">public <strong>flip</strong> (<em>mixed</em> $direction) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Flip the image along the horizontal or vertical axis</p> <h3 id=\"sharpen\" class=\"method-signature\">public <strong>sharpen</strong> (<em>mixed</em> $amount) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Sharpen the image by a given amount</p> <h3 id=\"reflection\" class=\"method-signature\">public <strong>reflection</strong> (<em>mixed</em> $height, [<em>mixed</em> $opacity], [<em>mixed</em> $fadeIn]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Add a reflection to an image</p> <h3 id=\"watermark\" class=\"method-signature\">public <strong>watermark</strong> (<a class=\"reference internal\" href=\"phalcon_image_adapter\"><em>Phalcon\\Image\\Adapter</em></a> $watermark, [<em>mixed</em> $offsetX], [<em>mixed</em> $offsetY], [<em>mixed</em> $opacity]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Add a watermark to an image with the specified opacity</p> <h3 id=\"text\" class=\"method-signature\">public <strong>text</strong> (<em>mixed</em> $text, [<em>mixed</em> $offsetX], [<em>mixed</em> $offsetY], [<em>mixed</em> $opacity], [<em>mixed</em> $color], [<em>mixed</em> $size], [<em>mixed</em> $fontfile]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Add a text to an image with a specified opacity</p> <h3 id=\"mask\" class=\"method-signature\">public <strong>mask</strong> (<a class=\"reference internal\" href=\"phalcon_image_adapter\"><em>Phalcon\\Image\\Adapter</em></a> $watermark) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Composite one image onto another</p> <h3 id=\"background\" class=\"method-signature\">public <strong>background</strong> (<em>mixed</em> $color, [<em>mixed</em> $opacity]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Set the background color of an image</p> <h3 id=\"blur\" class=\"method-signature\">public <strong>blur</strong> (<em>mixed</em> $radius) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Blur image</p> <h3 id=\"pixelate\" class=\"method-signature\">public <strong>pixelate</strong> (<em>mixed</em> $amount) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Pixelate image</p> <h3 id=\"save\" class=\"method-signature\">public <strong>save</strong> ([<em>mixed</em> $file], [<em>mixed</em> $quality]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Save the image</p> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> ([<em>mixed</em> $ext], [<em>mixed</em> $quality]) <small>inherited from Phalcon\\Image\\Adapter</small>\n</h3> <p>Render the image and return the binary string</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter_Imagick.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Image_Adapter_Imagick.html</a>\n  </p>\n</div>\n","api/phalcon_logger_formatter_firephp":"<h1 id=\"class-phalcon-logger-formatter-firephp\">Class <strong>Phalcon\\Logger\\Formatter\\Firephp</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_logger_formatter\"><em>Phalcon\\Logger\\Formatter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_logger_formatterinterface\"><em>Phalcon\\Logger\\FormatterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/formatter/firephp.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Formats messages so that they can be sent to FirePHP</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"gettypestring\" class=\"method-signature\">public <strong>getTypeString</strong> (<em>mixed</em> $type)</h3> <p>Returns the string meaning of a logger constant</p> <h3 id=\"setshowbacktrace\" class=\"method-signature\">public <strong>setShowBacktrace</strong> ([<em>mixed</em> $isShow])</h3> <p>Returns the string meaning of a logger constant</p> <h3 id=\"getshowbacktrace\" class=\"method-signature\">public <strong>getShowBacktrace</strong> ()</h3> <p>Returns the string meaning of a logger constant</p> <h3 id=\"enablelabels\" class=\"method-signature\">public <strong>enableLabels</strong> ([<em>mixed</em> $isEnable])</h3> <p>Returns the string meaning of a logger constant</p> <h3 id=\"labelsenabled\" class=\"method-signature\">public <strong>labelsEnabled</strong> ()</h3> <p>Returns the labels enabled</p> <h3 id=\"format\" class=\"method-signature\">public <em>string</em> <strong>format</strong> (<em>string</em> $message, <em>int</em> $type, <em>int</em> $timestamp, [<em>array</em> $context])</h3> <p>Applies a format to a message before sending it to the log</p> <h3 id=\"interpolate\" class=\"method-signature\">public <strong>interpolate</strong> (<em>string</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Formatter</small>\n</h3> <p>Interpolates context values into the message placeholders</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Firephp.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Firephp.html</a>\n  </p>\n</div>\n","api/phalcon_logger_formatter_json":"<h1 id=\"class-phalcon-logger-formatter-json\">Class <strong>Phalcon\\Logger\\Formatter\\Json</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_logger_formatter\"><em>Phalcon\\Logger\\Formatter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_logger_formatterinterface\"><em>Phalcon\\Logger\\FormatterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/formatter/json.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Formats messages using JSON encoding</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"format\" class=\"method-signature\">public <em>string</em> <strong>format</strong> (<em>string</em> $message, <em>int</em> $type, <em>int</em> $timestamp, [<em>array</em> $context])</h3> <p>Applies a format to a message before sent it to the internal log</p> <h3 id=\"gettypestring\" class=\"method-signature\">public <strong>getTypeString</strong> (<em>mixed</em> $type) <small>inherited from Phalcon\\Logger\\Formatter</small>\n</h3> <p>Returns the string meaning of a logger constant</p> <h3 id=\"interpolate\" class=\"method-signature\">public <strong>interpolate</strong> (<em>string</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Formatter</small>\n</h3> <p>Interpolates context values into the message placeholders</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Json.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Json.html</a>\n  </p>\n</div>\n","api/phalcon_logger_adapter_firephp":"<h1 id=\"class-phalcon-logger-adapter-firephp\">Class <strong>Phalcon\\Logger\\Adapter\\Firephp</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_logger_adapter\"><em>Phalcon\\Logger\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_logger_adapterinterface\"><em>Phalcon\\Logger\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/adapter/firephp.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Sends logs to FirePHP</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Logger\\Adapter\\Firephp;\n use Phalcon\\Logger;\n\n $logger = new Firephp();\n $logger-&gt;log(Logger::ERROR, 'This is an error');\n $logger-&gt;error('This is another error');\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getformatter\" class=\"method-signature\">public <strong>getFormatter</strong> ()</h3> <p>Returns the internal formatter</p> <h3 id=\"loginternal\" class=\"method-signature\">public <strong>logInternal</strong> (<em>mixed</em> $message, <em>mixed</em> $type, <em>mixed</em> $time, <em>array</em> $context)</h3> <p>Writes the log to the stream itself</p> <h3 id=\"close\" class=\"method-signature\">public <strong>close</strong> ()</h3> <p>Closes the logger</p> <h3 id=\"setloglevel\" class=\"method-signature\">public <strong>setLogLevel</strong> (<em>mixed</em> $level) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Filters the logs sent to the handlers that are less or equal than a specific level</p> <h3 id=\"getloglevel\" class=\"method-signature\">public <strong>getLogLevel</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Returns the current log level</p> <h3 id=\"setformatter\" class=\"method-signature\">public <strong>setFormatter</strong> (<a class=\"reference internal\" href=\"phalcon_logger_formatterinterface\"><em>Phalcon\\Logger\\FormatterInterface</em></a> $formatter) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sets the message formatter</p> <h3 id=\"begin\" class=\"method-signature\">public <strong>begin</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Starts a transaction</p> <h3 id=\"commit\" class=\"method-signature\">public <strong>commit</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Commits the internal transaction</p> <h3 id=\"rollback\" class=\"method-signature\">public <strong>rollback</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Rollbacks the internal transaction</p> <h3 id=\"istransaction\" class=\"method-signature\">public <strong>isTransaction</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Returns the whether the logger is currently in an active transaction or not</p> <h3 id=\"critical\" class=\"method-signature\">public <strong>critical</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes a critical message to the log</p> <h3 id=\"emergency\" class=\"method-signature\">public <strong>emergency</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes an emergency message to the log</p> <h3 id=\"debug\" class=\"method-signature\">public <strong>debug</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes a debug message to the log</p> <h3 id=\"error\" class=\"method-signature\">public <strong>error</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes an error message to the log</p> <h3 id=\"info\" class=\"method-signature\">public <strong>info</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes an info message to the log</p> <h3 id=\"notice\" class=\"method-signature\">public <strong>notice</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes a notice message to the log</p> <h3 id=\"warning\" class=\"method-signature\">public <strong>warning</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes a warning message to the log</p> <h3 id=\"alert\" class=\"method-signature\">public <strong>alert</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes an alert message to the log</p> <h3 id=\"log\" class=\"method-signature\">public <strong>log</strong> (<em>mixed</em> $type, [<em>mixed</em> $message], [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Logs messages to the internal logger. Appends logs to the logger</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Firephp.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Firephp.html</a>\n  </p>\n</div>\n","api/phalcon_logger_formatter":"<h1 id=\"abstract-class-phalcon-logger-formatter\">Abstract class <strong>Phalcon\\Logger\\Formatter</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_logger_formatterinterface\"><em>Phalcon\\Logger\\FormatterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/formatter.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This is a base class for logger formatters</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"gettypestring\" class=\"method-signature\">public <strong>getTypeString</strong> (<em>mixed</em> $type)</h3> <p>Returns the string meaning of a logger constant</p> <h3 id=\"interpolate\" class=\"method-signature\">public <strong>interpolate</strong> (<em>string</em> $message, [<em>array</em> $context])</h3> <p>Interpolates context values into the message placeholders</p> <h3 id=\"format\" class=\"method-signature\">abstract public <strong>format</strong> (<em>mixed</em> $message, <em>mixed</em> $type, <em>mixed</em> $timestamp, [<em>mixed</em> $context]) <small>inherited from Phalcon\\Logger\\FormatterInterface</small>\n</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter.html</a>\n  </p>\n</div>\n","api/phalcon_logger_item":"<h1 id=\"class-phalcon-logger-item\">Class <strong>Phalcon\\Logger\\Item</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/item.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Represents each item in a logging transaction</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> ()</h3> <p>Log type</p> <h3 id=\"getmessage\" class=\"method-signature\">public <strong>getMessage</strong> ()</h3> <p>Log message</p> <h3 id=\"gettime\" class=\"method-signature\">public <strong>getTime</strong> ()</h3> <p>Log timestamp</p> <h3 id=\"getcontext\" class=\"method-signature\">public <strong>getContext</strong> ()</h3> <p>...</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $message, <em>integer</em> $type, [<em>integer</em> $time], [<em>array</em> $context])</h3> <p>Phalcon\\Logger\\Item constructor</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Item.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Item.html</a>\n  </p>\n</div>\n","api/phalcon_logger_formatter_syslog":"<h1 id=\"class-phalcon-logger-formatter-syslog\">Class <strong>Phalcon\\Logger\\Formatter\\Syslog</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_logger_formatter\"><em>Phalcon\\Logger\\Formatter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_logger_formatterinterface\"><em>Phalcon\\Logger\\FormatterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/formatter/syslog.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Prepares a message to be used in a Syslog backend</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"format\" class=\"method-signature\">public <em>array</em> <strong>format</strong> (<em>string</em> $message, <em>int</em> $type, <em>int</em> $timestamp, [<em>array</em> $context])</h3> <p>Applies a format to a message before sent it to the internal log</p> <h3 id=\"gettypestring\" class=\"method-signature\">public <strong>getTypeString</strong> (<em>mixed</em> $type) <small>inherited from Phalcon\\Logger\\Formatter</small>\n</h3> <p>Returns the string meaning of a logger constant</p> <h3 id=\"interpolate\" class=\"method-signature\">public <strong>interpolate</strong> (<em>string</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Formatter</small>\n</h3> <p>Interpolates context values into the message placeholders</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Syslog.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Syslog.html</a>\n  </p>\n</div>\n","api/phalcon_logger_multiple":"<h1 id=\"class-phalcon-logger-multiple\">Class <strong>Phalcon\\Logger\\Multiple</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/multiple.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Handles multiples logger handlers</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getloggers\" class=\"method-signature\">public <strong>getLoggers</strong> ()</h3> <p>...</p> <h3 id=\"getformatter\" class=\"method-signature\">public <strong>getFormatter</strong> ()</h3> <p>...</p> <h3 id=\"getloglevel\" class=\"method-signature\">public <strong>getLogLevel</strong> ()</h3> <p>...</p> <h3 id=\"push\" class=\"method-signature\">public <strong>push</strong> (<a class=\"reference internal\" href=\"phalcon_logger_adapterinterface\"><em>Phalcon\\Logger\\AdapterInterface</em></a> $logger)</h3> <p>Pushes a logger to the logger tail</p> <h3 id=\"setformatter\" class=\"method-signature\">public <strong>setFormatter</strong> (<a class=\"reference internal\" href=\"phalcon_logger_formatterinterface\"><em>Phalcon\\Logger\\FormatterInterface</em></a> $formatter)</h3> <p>Sets a global formatter</p> <h3 id=\"setloglevel\" class=\"method-signature\">public <strong>setLogLevel</strong> (<em>mixed</em> $level)</h3> <p>Sets a global level</p> <h3 id=\"log\" class=\"method-signature\">public <strong>log</strong> (<em>mixed</em> $type, [<em>mixed</em> $message], [<em>array</em> $context])</h3> <p>Sends a message to each registered logger</p> <h3 id=\"critical\" class=\"method-signature\">public <strong>critical</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>Sends/Writes an critical message to the log</p> <h3 id=\"emergency\" class=\"method-signature\">public <strong>emergency</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>Sends/Writes an emergency message to the log</p> <h3 id=\"debug\" class=\"method-signature\">public <strong>debug</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>Sends/Writes a debug message to the log</p> <h3 id=\"error\" class=\"method-signature\">public <strong>error</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>Sends/Writes an error message to the log</p> <h3 id=\"info\" class=\"method-signature\">public <strong>info</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>Sends/Writes an info message to the log</p> <h3 id=\"notice\" class=\"method-signature\">public <strong>notice</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>Sends/Writes a notice message to the log</p> <h3 id=\"warning\" class=\"method-signature\">public <strong>warning</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>Sends/Writes a warning message to the log</p> <h3 id=\"alert\" class=\"method-signature\">public <strong>alert</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>Sends/Writes an alert message to the log</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Multiple.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Multiple.html</a>\n  </p>\n</div>\n","api/phalcon_logger_adapter_stream":"<h1 id=\"class-phalcon-logger-adapter-stream\">Class <strong>Phalcon\\Logger\\Adapter\\Stream</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_logger_adapter\"><em>Phalcon\\Logger\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_logger_adapterinterface\"><em>Phalcon\\Logger\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/adapter/stream.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Sends logs to a valid PHP stream</p> <pre class=\"highlight-php\" data-language=\"php\">$logger = new \\Phalcon\\Logger\\Adapter\\Stream(\"php://stderr\");\n$logger-&gt;log(\"This is a message\");\n$logger-&gt;log(\\Phalcon\\Logger::ERROR, \"This is an error\");\n$logger-&gt;error(\"This is another error\");\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $name, [<em>array</em> $options])</h3> <p>Phalcon\\Logger\\Adapter\\Stream constructor</p> <h3 id=\"getformatter\" class=\"method-signature\">public <strong>getFormatter</strong> ()</h3> <p>Returns the internal formatter</p> <h3 id=\"loginternal\" class=\"method-signature\">public <strong>logInternal</strong> (<em>mixed</em> $message, <em>mixed</em> $type, <em>mixed</em> $time, <em>array</em> $context)</h3> <p>Writes the log to the stream itself</p> <h3 id=\"close\" class=\"method-signature\">public <strong>close</strong> ()</h3> <p>Closes the logger</p> <h3 id=\"setloglevel\" class=\"method-signature\">public <strong>setLogLevel</strong> (<em>mixed</em> $level) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Filters the logs sent to the handlers that are less or equal than a specific level</p> <h3 id=\"getloglevel\" class=\"method-signature\">public <strong>getLogLevel</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Returns the current log level</p> <h3 id=\"setformatter\" class=\"method-signature\">public <strong>setFormatter</strong> (<a class=\"reference internal\" href=\"phalcon_logger_formatterinterface\"><em>Phalcon\\Logger\\FormatterInterface</em></a> $formatter) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sets the message formatter</p> <h3 id=\"begin\" class=\"method-signature\">public <strong>begin</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Starts a transaction</p> <h3 id=\"commit\" class=\"method-signature\">public <strong>commit</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Commits the internal transaction</p> <h3 id=\"rollback\" class=\"method-signature\">public <strong>rollback</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Rollbacks the internal transaction</p> <h3 id=\"istransaction\" class=\"method-signature\">public <strong>isTransaction</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Returns the whether the logger is currently in an active transaction or not</p> <h3 id=\"critical\" class=\"method-signature\">public <strong>critical</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes a critical message to the log</p> <h3 id=\"emergency\" class=\"method-signature\">public <strong>emergency</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes an emergency message to the log</p> <h3 id=\"debug\" class=\"method-signature\">public <strong>debug</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes a debug message to the log</p> <h3 id=\"error\" class=\"method-signature\">public <strong>error</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes an error message to the log</p> <h3 id=\"info\" class=\"method-signature\">public <strong>info</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes an info message to the log</p> <h3 id=\"notice\" class=\"method-signature\">public <strong>notice</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes a notice message to the log</p> <h3 id=\"warning\" class=\"method-signature\">public <strong>warning</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes a warning message to the log</p> <h3 id=\"alert\" class=\"method-signature\">public <strong>alert</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes an alert message to the log</p> <h3 id=\"log\" class=\"method-signature\">public <strong>log</strong> (<em>mixed</em> $type, [<em>mixed</em> $message], [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Logs messages to the internal logger. Appends logs to the logger</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Stream.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Stream.html</a>\n  </p>\n</div>\n","api/phalcon_logger_adapter_syslog":"<h1 id=\"class-phalcon-logger-adapter-syslog\">Class <strong>Phalcon\\Logger\\Adapter\\Syslog</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_logger_adapter\"><em>Phalcon\\Logger\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_logger_adapterinterface\"><em>Phalcon\\Logger\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/adapter/syslog.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Sends logs to the system logger</p> <pre class=\"highlight-php\" data-language=\"php\">$logger = new \\Phalcon\\Logger\\Adapter\\Syslog(\"ident\", array(\n    'option' =&gt; LOG_NDELAY,\n    'facility' =&gt; LOG_MAIL\n));\n$logger-&gt;log(\"This is a message\");\n$logger-&gt;log(\\Phalcon\\Logger::ERROR, \"This is an error\");\n$logger-&gt;error(\"This is another error\");\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $name, [<em>array</em> $options])</h3> <p>Phalcon\\Logger\\Adapter\\Syslog constructor</p> <h3 id=\"getformatter\" class=\"method-signature\">public <strong>getFormatter</strong> ()</h3> <p>Returns the internal formatter</p> <h3 id=\"loginternal\" class=\"method-signature\">public <strong>logInternal</strong> (<em>string</em> $message, <em>int</em> $type, <em>int</em> $time, <em>array</em> $context)</h3> <p>Writes the log to the stream itself</p> <h3 id=\"close\" class=\"method-signature\">public <strong>close</strong> ()</h3> <p>Closes the logger</p> <h3 id=\"setloglevel\" class=\"method-signature\">public <strong>setLogLevel</strong> (<em>mixed</em> $level) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Filters the logs sent to the handlers that are less or equal than a specific level</p> <h3 id=\"getloglevel\" class=\"method-signature\">public <strong>getLogLevel</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Returns the current log level</p> <h3 id=\"setformatter\" class=\"method-signature\">public <strong>setFormatter</strong> (<a class=\"reference internal\" href=\"phalcon_logger_formatterinterface\"><em>Phalcon\\Logger\\FormatterInterface</em></a> $formatter) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sets the message formatter</p> <h3 id=\"begin\" class=\"method-signature\">public <strong>begin</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Starts a transaction</p> <h3 id=\"commit\" class=\"method-signature\">public <strong>commit</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Commits the internal transaction</p> <h3 id=\"rollback\" class=\"method-signature\">public <strong>rollback</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Rollbacks the internal transaction</p> <h3 id=\"istransaction\" class=\"method-signature\">public <strong>isTransaction</strong> () <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Returns the whether the logger is currently in an active transaction or not</p> <h3 id=\"critical\" class=\"method-signature\">public <strong>critical</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes a critical message to the log</p> <h3 id=\"emergency\" class=\"method-signature\">public <strong>emergency</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes an emergency message to the log</p> <h3 id=\"debug\" class=\"method-signature\">public <strong>debug</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes a debug message to the log</p> <h3 id=\"error\" class=\"method-signature\">public <strong>error</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes an error message to the log</p> <h3 id=\"info\" class=\"method-signature\">public <strong>info</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes an info message to the log</p> <h3 id=\"notice\" class=\"method-signature\">public <strong>notice</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes a notice message to the log</p> <h3 id=\"warning\" class=\"method-signature\">public <strong>warning</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes a warning message to the log</p> <h3 id=\"alert\" class=\"method-signature\">public <strong>alert</strong> (<em>mixed</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Sends/Writes an alert message to the log</p> <h3 id=\"log\" class=\"method-signature\">public <strong>log</strong> (<em>mixed</em> $type, [<em>mixed</em> $message], [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Adapter</small>\n</h3> <p>Logs messages to the internal logger. Appends logs to the logger</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Syslog.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Adapter_Syslog.html</a>\n  </p>\n</div>\n","api/phalcon_logger_formatter_line":"<h1 id=\"class-phalcon-logger-formatter-line\">Class <strong>Phalcon\\Logger\\Formatter\\Line</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_logger_formatter\"><em>Phalcon\\Logger\\Formatter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_logger_formatterinterface\"><em>Phalcon\\Logger\\FormatterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/formatter/line.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Formats messages using an one-line string</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getdateformat\" class=\"method-signature\">public <strong>getDateFormat</strong> ()</h3> <p>Default date format</p> <h3 id=\"setdateformat\" class=\"method-signature\">public <strong>setDateFormat</strong> (<em>mixed</em> $dateFormat)</h3> <p>Default date format</p> <h3 id=\"getformat\" class=\"method-signature\">public <strong>getFormat</strong> ()</h3> <p>Format applied to each message</p> <h3 id=\"setformat\" class=\"method-signature\">public <strong>setFormat</strong> (<em>mixed</em> $format)</h3> <p>Format applied to each message</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $format], [<em>string</em> $dateFormat])</h3> <p>Phalcon\\Logger\\Formatter\\Line construct</p> <h3 id=\"format\" class=\"method-signature\">public <em>string</em> <strong>format</strong> (<em>string</em> $message, <em>int</em> $type, <em>int</em> $timestamp, [<em>array</em> $context])</h3> <p>Applies a format to a message before sent it to the internal log</p> <h3 id=\"gettypestring\" class=\"method-signature\">public <strong>getTypeString</strong> (<em>mixed</em> $type) <small>inherited from Phalcon\\Logger\\Formatter</small>\n</h3> <p>Returns the string meaning of a logger constant</p> <h3 id=\"interpolate\" class=\"method-signature\">public <strong>interpolate</strong> (<em>string</em> $message, [<em>array</em> $context]) <small>inherited from Phalcon\\Logger\\Formatter</small>\n</h3> <p>Interpolates context values into the message placeholders</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Line.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Formatter_Line.html</a>\n  </p>\n</div>\n","api/phalcon_logger_exception":"<h1 id=\"class-phalcon-logger-exception\">Class <strong>Phalcon\\Logger\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_application_exception":"<h1 id=\"class-phalcon-mvc-application-exception\">Class <strong>Phalcon\\Mvc\\Application\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_application_exception\"><em>Phalcon\\Application\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/application/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Application_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Application_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_collection_behavior":"<h1 id=\"abstract-class-phalcon-mvc-collection-behavior\">Abstract class <strong>Phalcon\\Mvc\\Collection\\Behavior</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection/behavior.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This is an optional base class for ORM behaviors</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <h3 id=\"musttakeaction\" class=\"method-signature\">protected <strong>mustTakeAction</strong> (<em>mixed</em> $eventName)</h3> <p>Checks whether the behavior must take action on certain event</p> <h3 id=\"getoptions\" class=\"method-signature\">protected <em>array</em> <strong>getOptions</strong> ([<em>string</em> $eventName])</h3> <p>Returns the behavior options related to an event</p> <h3 id=\"notify\" class=\"method-signature\">public <strong>notify</strong> (<em>mixed</em> $type, <a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model)</h3> <p>This method receives the notifications from the EventsManager</p> <h3 id=\"missingmethod\" class=\"method-signature\">public <strong>missingMethod</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model, <em>mixed</em> $method, [<em>mixed</em> $arguments])</h3> <p>Acts as fallbacks when a missing method is called on the collection</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_collection_behavior_softdelete":"<h1 id=\"class-phalcon-mvc-collection-behavior-softdelete\">Class <strong>Phalcon\\Mvc\\Collection\\Behavior\\SoftDelete</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_collection_behavior\"><em>Phalcon\\Mvc\\Collection\\Behavior</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_collection_behaviorinterface\"><em>Phalcon\\Mvc\\Collection\\BehaviorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection/behavior/softdelete.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Instead of permanently delete a record it marks the record as deleted changing the value of a flag column</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"notify\" class=\"method-signature\">public <strong>notify</strong> (<em>mixed</em> $type, <a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model)</h3> <p>Listens for notifications from the models manager</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Mvc\\Collection\\Behavior</small>\n</h3> <p>Phalcon\\Mvc\\Collection\\Behavior</p> <h3 id=\"musttakeaction\" class=\"method-signature\">protected <strong>mustTakeAction</strong> (<em>mixed</em> $eventName) <small>inherited from Phalcon\\Mvc\\Collection\\Behavior</small>\n</h3> <p>Checks whether the behavior must take action on certain event</p> <h3 id=\"getoptions\" class=\"method-signature\">protected <em>array</em> <strong>getOptions</strong> ([<em>string</em> $eventName]) <small>inherited from Phalcon\\Mvc\\Collection\\Behavior</small>\n</h3> <p>Returns the behavior options related to an event</p> <h3 id=\"missingmethod\" class=\"method-signature\">public <strong>missingMethod</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model, <em>mixed</em> $method, [<em>mixed</em> $arguments]) <small>inherited from Phalcon\\Mvc\\Collection\\Behavior</small>\n</h3> <p>Acts as fallbacks when a missing method is called on the collection</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior_SoftDelete.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior_SoftDelete.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_collection_behavior_timestampable":"<h1 id=\"class-phalcon-mvc-collection-behavior-timestampable\">Class <strong>Phalcon\\Mvc\\Collection\\Behavior\\Timestampable</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_collection_behavior\"><em>Phalcon\\Mvc\\Collection\\Behavior</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_collection_behaviorinterface\"><em>Phalcon\\Mvc\\Collection\\BehaviorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection/behavior/timestampable.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to automatically update a model’s attribute saving the datetime when a record is created or updated</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"notify\" class=\"method-signature\">public <strong>notify</strong> (<em>mixed</em> $type, <a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model)</h3> <p>Listens for notifications from the models manager</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Mvc\\Collection\\Behavior</small>\n</h3> <p>Phalcon\\Mvc\\Collection\\Behavior</p> <h3 id=\"musttakeaction\" class=\"method-signature\">protected <strong>mustTakeAction</strong> (<em>mixed</em> $eventName) <small>inherited from Phalcon\\Mvc\\Collection\\Behavior</small>\n</h3> <p>Checks whether the behavior must take action on certain event</p> <h3 id=\"getoptions\" class=\"method-signature\">protected <em>array</em> <strong>getOptions</strong> ([<em>string</em> $eventName]) <small>inherited from Phalcon\\Mvc\\Collection\\Behavior</small>\n</h3> <p>Returns the behavior options related to an event</p> <h3 id=\"missingmethod\" class=\"method-signature\">public <strong>missingMethod</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model, <em>mixed</em> $method, [<em>mixed</em> $arguments]) <small>inherited from Phalcon\\Mvc\\Collection\\Behavior</small>\n</h3> <p>Acts as fallbacks when a missing method is called on the collection</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior_Timestampable.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Behavior_Timestampable.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_collection_document":"<h1 id=\"class-phalcon-mvc-collection-document\">Class <strong>Phalcon\\Mvc\\Collection\\Document</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_entityinterface\"><em>Phalcon\\Mvc\\EntityInterface</em></a>, ArrayAccess</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection/document.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This component allows Phalcon\\Mvc\\Collection to return rows without an associated entity. This objects implements the ArrayAccess interface to allow access the object as object-&gt;x or array[x].</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"offsetexists\" class=\"method-signature\">public <em>boolean</em> <strong>offsetExists</strong> (<em>int</em> $index)</h3> <p>Checks whether an offset exists in the document</p> <h3 id=\"offsetget\" class=\"method-signature\">public <strong>offsetGet</strong> (<em>mixed</em> $index)</h3> <p>Returns the value of a field using the ArrayAccess interfase</p> <h3 id=\"offsetset\" class=\"method-signature\">public <strong>offsetSet</strong> (<em>mixed</em> $index, <em>mixed</em> $value)</h3> <p>Change a value using the ArrayAccess interface</p> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>string</em> $offset)</h3> <p>Rows cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <h3 id=\"readattribute\" class=\"method-signature\">public <em>mixed</em> <strong>readAttribute</strong> (<em>string</em> $attribute)</h3> <p>Reads an attribute value by its name</p> <pre class=\"highlight-php\" data-language=\"php\">echo $robot-&gt;readAttribute('name');\n</pre> <h3 id=\"writeattribute\" class=\"method-signature\">public <strong>writeAttribute</strong> (<em>string</em> $attribute, <em>mixed</em> $value)</h3> <p>Writes an attribute value by its name</p> <pre class=\"highlight-php\" data-language=\"php\">$robot-&gt;writeAttribute('name', 'Rosey');\n</pre> <h3 id=\"toarray\" class=\"method-signature\">public <em>array</em> <strong>toArray</strong> ()</h3> <p>Returns the instance as an array representation</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Document.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Document.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_dispatcher_exception":"<h1 id=\"class-phalcon-mvc-dispatcher-exception\">Class <strong>Phalcon\\Mvc\\Dispatcher\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/dispatcher/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Dispatcher_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Dispatcher_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_controller":"<h1 id=\"abstract-class-phalcon-mvc-controller\">Abstract class <strong>Phalcon\\Mvc\\Controller</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_di_injectable\"><em>Phalcon\\Di\\Injectable</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_mvc_controllerinterface\"><em>Phalcon\\Mvc\\ControllerInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/controller.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Every application controller should extend this class that encapsulates all the controller functionality The controllers provide the “flow” between models and views. Controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation.</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php\n\nclass PeopleController extends \\Phalcon\\Mvc\\Controller\n{\n\n  //This action will be executed by default\n  public function indexAction()\n  {\n\n  }\n\n  public function findAction()\n  {\n\n  }\n\n  public function saveAction()\n  {\n   //Forwards flow to the index action\n   return $this-&gt;dispatcher-&gt;forward(array('controller' =&gt; 'people', 'action' =&gt; 'index'));\n  }\n\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">final public <strong>__construct</strong> ()</h3> <p>Phalcon\\Mvc\\Controller constructor</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $propertyName) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Magic method __get</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Controller.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Controller.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_application":"<h1 id=\"class-phalcon-mvc-application\">Class <strong>Phalcon\\Mvc\\Application</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_application\"><em>Phalcon\\Application</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/application.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This component encapsulates all the complex operations behind instantiating every component needed and integrating it with the rest to allow the MVC pattern to operate as desired.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Application;\n\n class MyApp extends Application\n {\n\n    /**\n     * Register the services here to make them general or register\n     * in the ModuleDefinition to make them module-specific\n     */\n    protected function registerServices()\n    {\n\n    }\n\n    /**\n     * This method registers all the modules in the application\n     */\n    public function main()\n    {\n            $this-&gt;registerModules(array(\n                    'frontend' =&gt; array(\n                            'className' =&gt; 'Multiple\\Frontend\\Module',\n                            'path' =&gt; '../apps/frontend/Module.php'\n                    ),\n                    'backend' =&gt; array(\n                            'className' =&gt; 'Multiple\\Backend\\Module',\n                            'path' =&gt; '../apps/backend/Module.php'\n                    )\n            ));\n    }\n}\n\n$application = new MyApp();\n$application-&gt;main();\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"useimplicitview\" class=\"method-signature\">public <strong>useImplicitView</strong> (<em>mixed</em> $implicitView)</h3> <p>By default. The view is implicitly buffering all the output You can full disable the view component using this method</p> <h3 id=\"handle\" class=\"method-signature\">public <strong>handle</strong> ([<em>mixed</em> $uri])</h3> <p>Handles a MVC request</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector]) <small>inherited from Phalcon\\Application</small>\n</h3> <p>Phalcon\\Application</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Application</small>\n</h3> <p>Sets the events manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Application</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"registermodules\" class=\"method-signature\">public <strong>registerModules</strong> (<em>array</em> $modules, [<em>mixed</em> $merge]) <small>inherited from Phalcon\\Application</small>\n</h3> <p>Register an array of modules present in the application</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;registerModules(\n    [\n            'frontend' =&gt; [\n                    'className' =&gt; 'Multiple\\Frontend\\Module',\n                    'path'      =&gt; '../apps/frontend/Module.php'\n            ],\n            'backend' =&gt; [\n                    'className' =&gt; 'Multiple\\Backend\\Module',\n                    'path'      =&gt; '../apps/backend/Module.php'\n            ]\n    ]\n );\n</pre> <h3 id=\"getmodules\" class=\"method-signature\">public <strong>getModules</strong> () <small>inherited from Phalcon\\Application</small>\n</h3> <p>Return the modules registered in the application</p> <h3 id=\"getmodule\" class=\"method-signature\">public <strong>getModule</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Application</small>\n</h3> <p>Gets the module definition registered in the application via module name</p> <h3 id=\"setdefaultmodule\" class=\"method-signature\">public <strong>setDefaultModule</strong> (<em>mixed</em> $defaultModule) <small>inherited from Phalcon\\Application</small>\n</h3> <p>Sets the module name to be used if the router doesn’t return a valid module</p> <h3 id=\"getdefaultmodule\" class=\"method-signature\">public <strong>getDefaultModule</strong> () <small>inherited from Phalcon\\Application</small>\n</h3> <p>Returns the default module name</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $propertyName) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Magic method __get</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Application.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Application.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_collection_exception":"<h1 id=\"class-phalcon-mvc-collection-exception\">Class <strong>Phalcon\\Mvc\\Collection\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_collection_manager":"<h1 id=\"class-phalcon-mvc-collection-manager\">Class <strong>Phalcon\\Mvc\\Collection\\Manager</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection/manager.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This components controls the initialization of models, keeping record of relations between the different models of the application. A CollectionManager is injected to a model via a Dependency Injector Container such as Phalcon\\Di.</p> <pre class=\"highlight-php\" data-language=\"php\">$di = new \\Phalcon\\Di();\n\n $di-&gt;set('collectionManager', function(){\n      return new \\Phalcon\\Mvc\\Collection\\Manager();\n });\n\n $robot = new Robots($di);\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getservicename\" class=\"method-signature\">public <strong>getServiceName</strong> ()</h3> <p>...</p> <h3 id=\"setservicename\" class=\"method-signature\">public <strong>setServiceName</strong> (<em>mixed</em> $serviceName)</h3> <p>...</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the DependencyInjector container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the DependencyInjector container</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager)</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> ()</h3> <p>Returns the internal event manager</p> <h3 id=\"setcustomeventsmanager\" class=\"method-signature\">public <strong>setCustomEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model, <a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager)</h3> <p>Sets a custom events manager for a specific model</p> <h3 id=\"getcustomeventsmanager\" class=\"method-signature\">public <strong>getCustomEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model)</h3> <p>Returns a custom events manager related to a model</p> <h3 id=\"initialize\" class=\"method-signature\">public <strong>initialize</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model)</h3> <p>Initializes a model in the models manager</p> <h3 id=\"isinitialized\" class=\"method-signature\">public <strong>isInitialized</strong> (<em>mixed</em> $modelName)</h3> <p>Check whether a model is already initialized</p> <h3 id=\"getlastinitialized\" class=\"method-signature\">public <strong>getLastInitialized</strong> ()</h3> <p>Get the latest initialized model</p> <h3 id=\"setconnectionservice\" class=\"method-signature\">public <strong>setConnectionService</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model, <em>mixed</em> $connectionService)</h3> <p>Sets a connection service for a specific model</p> <h3 id=\"getconnectionservice\" class=\"method-signature\">public <strong>getConnectionService</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model)</h3> <p>Gets a connection service for a specific model</p> <h3 id=\"useimplicitobjectids\" class=\"method-signature\">public <strong>useImplicitObjectIds</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model, <em>mixed</em> $useImplicitObjectIds)</h3> <p>Sets whether a model must use implicit objects ids</p> <h3 id=\"isusingimplicitobjectids\" class=\"method-signature\">public <strong>isUsingImplicitObjectIds</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model)</h3> <p>Checks if a model is using implicit object ids</p> <h3 id=\"getconnection\" class=\"method-signature\">public <em>Mongo</em> <strong>getConnection</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model)</h3> <p>Returns the connection related to a model</p> <h3 id=\"notifyevent\" class=\"method-signature\">public <strong>notifyEvent</strong> (<em>mixed</em> $eventName, <a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model)</h3> <p>Receives events generated in the models and dispatches them to an events-manager if available Notify the behaviors that are listening in the model</p> <h3 id=\"missingmethod\" class=\"method-signature\">public <strong>missingMethod</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model, <em>mixed</em> $eventName, <em>mixed</em> $data)</h3> <p>Dispatch an event to the listeners and behaviors This method expects that the endpoint listeners/behaviors returns true meaning that at least one was implemented</p> <h3 id=\"addbehavior\" class=\"method-signature\">public <strong>addBehavior</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model, <a class=\"reference internal\" href=\"phalcon_mvc_collection_behaviorinterface\"><em>Phalcon\\Mvc\\Collection\\BehaviorInterface</em></a> $behavior)</h3> <p>Binds a behavior to a model</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Manager.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_Manager.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_micro_collection":"<h1 id=\"class-phalcon-mvc-micro-collection\">Class <strong>Phalcon\\Mvc\\Micro\\Collection</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_micro_collectioninterface\"><em>Phalcon\\Mvc\\Micro\\CollectionInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/micro/collection.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Groups Micro-Mvc handlers as controllers</p> <pre class=\"highlight-php\" data-language=\"php\">$app = new \\Phalcon\\Mvc\\Micro();\n\n $collection = new Collection();\n\n $collection-&gt;setHandler(new PostsController());\n\n $collection-&gt;get('/posts/edit/{id}', 'edit');\n\n $app-&gt;mount($collection);\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"_addmap\" class=\"method-signature\">protected <strong>_addMap</strong> (<em>string|array</em> $method, <em>string</em> $routePattern, <em>mixed</em> $handler, <em>string</em> $name)</h3> <p>Internal function to add a handler to the group</p> <h3 id=\"setprefix\" class=\"method-signature\">public <strong>setPrefix</strong> (<em>mixed</em> $prefix)</h3> <p>Sets a prefix for all routes added to the collection</p> <h3 id=\"getprefix\" class=\"method-signature\">public <strong>getPrefix</strong> ()</h3> <p>Returns the collection prefix if any</p> <h3 id=\"gethandlers\" class=\"method-signature\">public <em>array</em> <strong>getHandlers</strong> ()</h3> <p>Returns the registered handlers</p> <h3 id=\"sethandler\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_micro_collection\"><em>Phalcon\\Mvc\\Micro\\Collection</em></a> <strong>setHandler</strong> (<em>mixed</em> $handler, [<em>boolean</em> $lazy])</h3> <p>Sets the main handler</p> <h3 id=\"setlazy\" class=\"method-signature\">public <strong>setLazy</strong> (<em>mixed</em> $lazy)</h3> <p>Sets if the main handler must be lazy loaded</p> <h3 id=\"islazy\" class=\"method-signature\">public <strong>isLazy</strong> ()</h3> <p>Returns if the main handler must be lazy loaded</p> <h3 id=\"gethandler\" class=\"method-signature\">public <em>mixed</em> <strong>getHandler</strong> ()</h3> <p>Returns the main handler</p> <h3 id=\"map\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_micro_collection\"><em>Phalcon\\Mvc\\Micro\\Collection</em></a> <strong>map</strong> (<em>string</em> $routePattern, <em>callable</em> $handler, [<em>string</em> $name])</h3> <p>Maps a route to a handler</p> <h3 id=\"get\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_micro_collection\"><em>Phalcon\\Mvc\\Micro\\Collection</em></a> <strong>get</strong> (<em>string</em> $routePattern, <em>callable</em> $handler, [<em>string</em> $name])</h3> <p>Maps a route to a handler that only matches if the HTTP method is GET</p> <h3 id=\"post\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_micro_collection\"><em>Phalcon\\Mvc\\Micro\\Collection</em></a> <strong>post</strong> (<em>string</em> $routePattern, <em>callable</em> $handler, [<em>string</em> $name])</h3> <p>Maps a route to a handler that only matches if the HTTP method is POST</p> <h3 id=\"put\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_micro_collection\"><em>Phalcon\\Mvc\\Micro\\Collection</em></a> <strong>put</strong> (<em>string</em> $routePattern, <em>callable</em> $handler, [<em>string</em> $name])</h3> <p>Maps a route to a handler that only matches if the HTTP method is PUT</p> <h3 id=\"patch\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_micro_collection\"><em>Phalcon\\Mvc\\Micro\\Collection</em></a> <strong>patch</strong> (<em>string</em> $routePattern, <em>callable</em> $handler, [<em>string</em> $name])</h3> <p>Maps a route to a handler that only matches if the HTTP method is PATCH</p> <h3 id=\"head\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_micro_collection\"><em>Phalcon\\Mvc\\Micro\\Collection</em></a> <strong>head</strong> (<em>string</em> $routePattern, <em>callable</em> $handler, [<em>string</em> $name])</h3> <p>Maps a route to a handler that only matches if the HTTP method is HEAD</p> <h3 id=\"delete\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_micro_collection\"><em>Phalcon\\Mvc\\Micro\\Collection</em></a> <strong>delete</strong> (<em>string</em> $routePattern, <em>callable</em> $handler, [<em>string</em> $name])</h3> <p>Maps a route to a handler that only matches if the HTTP method is DELETE</p> <h3 id=\"options\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_micro_collection\"><em>Phalcon\\Mvc\\Micro\\Collection</em></a> <strong>options</strong> (<em>string</em> $routePattern, <em>callable</em> $handler, [<em>mixed</em> $name])</h3> <p>Maps a route to a handler that only matches if the HTTP method is OPTIONS</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_Collection.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_Collection.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_micro_lazyloader":"<h1 id=\"class-phalcon-mvc-micro-lazyloader\">Class <strong>Phalcon\\Mvc\\Micro\\LazyLoader</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/micro/lazyloader.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Lazy-Load of handlers for Mvc\\Micro using auto-loading</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getdefinition\" class=\"method-signature\">public <strong>getDefinition</strong> ()</h3> <p>...</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $definition)</h3> <p>Phalcon\\Mvc\\Micro\\LazyLoader constructor</p> <h3 id=\"__call\" class=\"method-signature\">public <em>mixed</em> <strong>__call</strong> (<em>string</em> $method, <em>array</em> $arguments)</h3> <p>Initializes the internal handler, calling functions on it</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_LazyLoader.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_LazyLoader.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_behavior_softdelete":"<h1 id=\"class-phalcon-mvc-model-behavior-softdelete\">Class <strong>Phalcon\\Mvc\\Model\\Behavior\\SoftDelete</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_behavior\"><em>Phalcon\\Mvc\\Model\\Behavior</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_behaviorinterface\"><em>Phalcon\\Mvc\\Model\\BehaviorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/behavior/softdelete.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Instead of permanently delete a record it marks the record as deleted changing the value of a flag column</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"notify\" class=\"method-signature\">public <strong>notify</strong> (<em>mixed</em> $type, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Listens for notifications from the models manager</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Mvc\\Model\\Behavior</small>\n</h3> <p>Phalcon\\Mvc\\Model\\Behavior</p> <h3 id=\"musttakeaction\" class=\"method-signature\">protected <strong>mustTakeAction</strong> (<em>mixed</em> $eventName) <small>inherited from Phalcon\\Mvc\\Model\\Behavior</small>\n</h3> <p>Checks whether the behavior must take action on certain event</p> <h3 id=\"getoptions\" class=\"method-signature\">protected <em>array</em> <strong>getOptions</strong> ([<em>string</em> $eventName]) <small>inherited from Phalcon\\Mvc\\Model\\Behavior</small>\n</h3> <p>Returns the behavior options related to an event</p> <h3 id=\"missingmethod\" class=\"method-signature\">public <strong>missingMethod</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>string</em> $method, [<em>array</em> $arguments]) <small>inherited from Phalcon\\Mvc\\Model\\Behavior</small>\n</h3> <p>Acts as fallbacks when a missing method is called on the model</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior_SoftDelete.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior_SoftDelete.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_behavior_timestampable":"<h1 id=\"class-phalcon-mvc-model-behavior-timestampable\">Class <strong>Phalcon\\Mvc\\Model\\Behavior\\Timestampable</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_behavior\"><em>Phalcon\\Mvc\\Model\\Behavior</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_behaviorinterface\"><em>Phalcon\\Mvc\\Model\\BehaviorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/behavior/timestampable.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to automatically update a model’s attribute saving the datetime when a record is created or updated</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"notify\" class=\"method-signature\">public <strong>notify</strong> (<em>mixed</em> $type, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Listens for notifications from the models manager</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Mvc\\Model\\Behavior</small>\n</h3> <p>Phalcon\\Mvc\\Model\\Behavior</p> <h3 id=\"musttakeaction\" class=\"method-signature\">protected <strong>mustTakeAction</strong> (<em>mixed</em> $eventName) <small>inherited from Phalcon\\Mvc\\Model\\Behavior</small>\n</h3> <p>Checks whether the behavior must take action on certain event</p> <h3 id=\"getoptions\" class=\"method-signature\">protected <em>array</em> <strong>getOptions</strong> ([<em>string</em> $eventName]) <small>inherited from Phalcon\\Mvc\\Model\\Behavior</small>\n</h3> <p>Returns the behavior options related to an event</p> <h3 id=\"missingmethod\" class=\"method-signature\">public <strong>missingMethod</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>string</em> $method, [<em>array</em> $arguments]) <small>inherited from Phalcon\\Mvc\\Model\\Behavior</small>\n</h3> <p>Acts as fallbacks when a missing method is called on the model</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior_Timestampable.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior_Timestampable.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_criteria":"<h1 id=\"class-phalcon-mvc-model-criteria\">Class <strong>Phalcon\\Mvc\\Model\\Criteria</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_criteriainterface\"><em>Phalcon\\Mvc\\Model\\CriteriaInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/criteria.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class is used to build the array parameter required by Phalcon\\Mvc\\Model::find() and Phalcon\\Mvc\\Model::findFirst() using an object-oriented interface.</p> <pre class=\"highlight-php\" data-language=\"php\">$robots = Robots::query()\n     -&gt;where('type = :type:')\n     -&gt;andWhere('year &lt; 2000')\n     -&gt;bind(['type' =&gt; 'mechanical'])\n     -&gt;limit(5, 10)\n     -&gt;orderBy('name')\n     -&gt;execute();\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the DependencyInjector container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the DependencyInjector container</p> <h3 id=\"setmodelname\" class=\"method-signature\">public <strong>setModelName</strong> (<em>mixed</em> $modelName)</h3> <p>Set a model on which the query will be executed</p> <h3 id=\"getmodelname\" class=\"method-signature\">public <strong>getModelName</strong> ()</h3> <p>Returns an internal model name on which the criteria will be applied</p> <h3 id=\"bind\" class=\"method-signature\">public <strong>bind</strong> (<em>array</em> $bindParams, [<em>mixed</em> $merge])</h3> <p>Sets the bound parameters in the criteria This method replaces all previously set bound parameters</p> <h3 id=\"bindtypes\" class=\"method-signature\">public <strong>bindTypes</strong> (<em>array</em> $bindTypes)</h3> <p>Sets the bind types in the criteria This method replaces all previously set bound parameters</p> <h3 id=\"distinct\" class=\"method-signature\">public <strong>distinct</strong> (<em>mixed</em> $distinct)</h3> <p>Sets SELECT DISTINCT / SELECT ALL flag</p> <h3 id=\"columns\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model_criteria\"><em>Phalcon\\Mvc\\Model\\Criteria</em></a> <strong>columns</strong> (<em>string|array</em> $columns)</h3> <p>Sets the columns to be queried</p> <pre class=\"highlight-php\" data-language=\"php\">$criteria-&gt;columns(array('id', 'name'));\n</pre> <h3 id=\"join\" class=\"method-signature\">public <strong>join</strong> (<em>mixed</em> $model, [<em>mixed</em> $conditions], [<em>mixed</em> $alias], [<em>mixed</em> $type])</h3> <p>Adds an INNER join to the query</p> <pre class=\"highlight-php\" data-language=\"php\">$criteria-&gt;join('Robots');\n$criteria-&gt;join('Robots', 'r.id = RobotsParts.robots_id');\n$criteria-&gt;join('Robots', 'r.id = RobotsParts.robots_id', 'r');\n$criteria-&gt;join('Robots', 'r.id = RobotsParts.robots_id', 'r', 'LEFT');\n</pre> <h3 id=\"innerjoin\" class=\"method-signature\">public <strong>innerJoin</strong> (<em>mixed</em> $model, [<em>mixed</em> $conditions], [<em>mixed</em> $alias])</h3> <p>Adds an INNER join to the query</p> <pre class=\"highlight-php\" data-language=\"php\">$criteria-&gt;innerJoin('Robots');\n$criteria-&gt;innerJoin('Robots', 'r.id = RobotsParts.robots_id');\n$criteria-&gt;innerJoin('Robots', 'r.id = RobotsParts.robots_id', 'r');\n</pre> <h3 id=\"leftjoin\" class=\"method-signature\">public <strong>leftJoin</strong> (<em>mixed</em> $model, [<em>mixed</em> $conditions], [<em>mixed</em> $alias])</h3> <p>Adds a LEFT join to the query</p> <pre class=\"highlight-php\" data-language=\"php\">$criteria-&gt;leftJoin('Robots', 'r.id = RobotsParts.robots_id', 'r');\n</pre> <h3 id=\"rightjoin\" class=\"method-signature\">public <strong>rightJoin</strong> (<em>mixed</em> $model, [<em>mixed</em> $conditions], [<em>mixed</em> $alias])</h3> <p>Adds a RIGHT join to the query</p> <pre class=\"highlight-php\" data-language=\"php\">$criteria-&gt;rightJoin('Robots', 'r.id = RobotsParts.robots_id', 'r');\n</pre> <h3 id=\"where\" class=\"method-signature\">public <strong>where</strong> (<em>mixed</em> $conditions, [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes])</h3> <p>Sets the conditions parameter in the criteria</p> <h3 id=\"addwhere\" class=\"method-signature\">public <strong>addWhere</strong> (<em>mixed</em> $conditions, [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes])</h3> <p>Appends a condition to the current conditions using an AND operator (deprecated)</p> <h3 id=\"andwhere\" class=\"method-signature\">public <strong>andWhere</strong> (<em>mixed</em> $conditions, [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes])</h3> <p>Appends a condition to the current conditions using an AND operator</p> <h3 id=\"orwhere\" class=\"method-signature\">public <strong>orWhere</strong> (<em>mixed</em> $conditions, [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes])</h3> <p>Appends a condition to the current conditions using an OR operator</p> <h3 id=\"betweenwhere\" class=\"method-signature\">public <strong>betweenWhere</strong> (<em>mixed</em> $expr, <em>mixed</em> $minimum, <em>mixed</em> $maximum)</h3> <p>Appends a BETWEEN condition to the current conditions</p> <pre class=\"highlight-php\" data-language=\"php\">$criteria-&gt;betweenWhere('price', 100.25, 200.50);\n</pre> <h3 id=\"notbetweenwhere\" class=\"method-signature\">public <strong>notBetweenWhere</strong> (<em>mixed</em> $expr, <em>mixed</em> $minimum, <em>mixed</em> $maximum)</h3> <p>Appends a NOT BETWEEN condition to the current conditions</p> <pre class=\"highlight-php\" data-language=\"php\">$criteria-&gt;notBetweenWhere('price', 100.25, 200.50);\n</pre> <h3 id=\"inwhere\" class=\"method-signature\">public <strong>inWhere</strong> (<em>mixed</em> $expr, <em>array</em> $values)</h3> <p>Appends an IN condition to the current conditions</p> <pre class=\"highlight-php\" data-language=\"php\">$criteria-&gt;inWhere('id', [1, 2, 3]);\n</pre> <h3 id=\"notinwhere\" class=\"method-signature\">public <strong>notInWhere</strong> (<em>mixed</em> $expr, <em>array</em> $values)</h3> <p>Appends a NOT IN condition to the current conditions</p> <pre class=\"highlight-php\" data-language=\"php\">$criteria-&gt;notInWhere('id', [1, 2, 3]);\n</pre> <h3 id=\"conditions\" class=\"method-signature\">public <strong>conditions</strong> (<em>mixed</em> $conditions)</h3> <p>Adds the conditions parameter to the criteria</p> <h3 id=\"order\" class=\"method-signature\">public <strong>order</strong> (<em>mixed</em> $orderColumns)</h3> <p>Adds the order-by parameter to the criteria (deprecated)</p> <h3 id=\"orderby\" class=\"method-signature\">public <strong>orderBy</strong> (<em>mixed</em> $orderColumns)</h3> <p>Adds the order-by clause to the criteria</p> <h3 id=\"groupby\" class=\"method-signature\">public <strong>groupBy</strong> (<em>mixed</em> $group)</h3> <p>Adds the group-by clause to the criteria</p> <h3 id=\"having\" class=\"method-signature\">public <strong>having</strong> (<em>mixed</em> $having)</h3> <p>Adds the having clause to the criteria</p> <h3 id=\"limit\" class=\"method-signature\">public <strong>limit</strong> (<em>mixed</em> $limit, [<em>mixed</em> $offset])</h3> <p>Adds the limit parameter to the criteria</p> <h3 id=\"forupdate\" class=\"method-signature\">public <strong>forUpdate</strong> ([<em>mixed</em> $forUpdate])</h3> <p>Adds the “for_update” parameter to the criteria</p> <h3 id=\"sharedlock\" class=\"method-signature\">public <strong>sharedLock</strong> ([<em>mixed</em> $sharedLock])</h3> <p>Adds the “shared_lock” parameter to the criteria</p> <h3 id=\"cache\" class=\"method-signature\">public <strong>cache</strong> (<em>array</em> $cache)</h3> <p>Sets the cache options in the criteria This method replaces all previously set cache options</p> <h3 id=\"getwhere\" class=\"method-signature\">public <strong>getWhere</strong> ()</h3> <p>Returns the conditions parameter in the criteria</p> <h3 id=\"getcolumns\" class=\"method-signature\">public <em>string|array|null</em> <strong>getColumns</strong> ()</h3> <p>Returns the columns to be queried</p> <h3 id=\"getconditions\" class=\"method-signature\">public <strong>getConditions</strong> ()</h3> <p>Returns the conditions parameter in the criteria</p> <h3 id=\"getlimit\" class=\"method-signature\">public <em>int|array|null</em> <strong>getLimit</strong> ()</h3> <p>Returns the limit parameter in the criteria, which will be an integer if limit was set without an offset, an array with ‘number’ and ‘offset’ keys if an offset was set with the limit, or null if limit has not been set.</p> <h3 id=\"getorderby\" class=\"method-signature\">public <strong>getOrderBy</strong> ()</h3> <p>Returns the order clause in the criteria</p> <h3 id=\"getgroupby\" class=\"method-signature\">public <strong>getGroupBy</strong> ()</h3> <p>Returns the group clause in the criteria</p> <h3 id=\"gethaving\" class=\"method-signature\">public <strong>getHaving</strong> ()</h3> <p>Returns the having clause in the criteria</p> <h3 id=\"getparams\" class=\"method-signature\">public <em>array</em> <strong>getParams</strong> ()</h3> <p>Returns all the parameters defined in the criteria</p> <h3 id=\"frominput\" class=\"method-signature\">public static <strong>fromInput</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector, <em>mixed</em> $modelName, <em>array</em> $data, [<em>mixed</em> $operator])</h3> <p>Builds a Phalcon\\Mvc\\Model\\Criteria based on an input array like _POST</p> <h3 id=\"execute\" class=\"method-signature\">public <strong>execute</strong> ()</h3> <p>Executes a find using the parameters built with the criteria</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Criteria.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Criteria.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_micro_exception":"<h1 id=\"class-phalcon-mvc-micro-exception\">Class <strong>Phalcon\\Mvc\\Micro\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/micro/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_behavior":"<h1 id=\"abstract-class-phalcon-mvc-model-behavior\">Abstract class <strong>Phalcon\\Mvc\\Model\\Behavior</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_behaviorinterface\"><em>Phalcon\\Mvc\\Model\\BehaviorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/behavior.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This is an optional base class for ORM behaviors</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <h3 id=\"musttakeaction\" class=\"method-signature\">protected <strong>mustTakeAction</strong> (<em>mixed</em> $eventName)</h3> <p>Checks whether the behavior must take action on certain event</p> <h3 id=\"getoptions\" class=\"method-signature\">protected <em>array</em> <strong>getOptions</strong> ([<em>string</em> $eventName])</h3> <p>Returns the behavior options related to an event</p> <h3 id=\"notify\" class=\"method-signature\">public <strong>notify</strong> (<em>mixed</em> $type, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>This method receives the notifications from the EventsManager</p> <h3 id=\"missingmethod\" class=\"method-signature\">public <strong>missingMethod</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>string</em> $method, [<em>array</em> $arguments])</h3> <p>Acts as fallbacks when a missing method is called on the model</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Behavior.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_dispatcher":"<h1 id=\"class-phalcon-mvc-dispatcher\">Class <strong>Phalcon\\Mvc\\Dispatcher</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_dispatcher\"><em>Phalcon\\Dispatcher</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_dispatcherinterface\"><em>Phalcon\\DispatcherInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_mvc_dispatcherinterface\"><em>Phalcon\\Mvc\\DispatcherInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/dispatcher.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Dispatching is the process of taking the request object, extracting the module name, controller name, action name, and optional parameters contained in it, and then instantiating a controller and calling an action of that controller.</p> <pre class=\"highlight-php\" data-language=\"php\">$di = new \\Phalcon\\Di();\n\n$dispatcher = new \\Phalcon\\Mvc\\Dispatcher();\n\n  $dispatcher-&gt;setDI($di);\n\n$dispatcher-&gt;setControllerName('posts');\n$dispatcher-&gt;setActionName('index');\n$dispatcher-&gt;setParams(array());\n\n$controller = $dispatcher-&gt;dispatch();\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"exception_no_di\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_NO_DI</strong>\n</h3> <h3 id=\"exception_cyclic_routing\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_CYCLIC_ROUTING</strong>\n</h3> <h3 id=\"exception_handler_not_found\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_HANDLER_NOT_FOUND</strong>\n</h3> <h3 id=\"exception_invalid_handler\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_INVALID_HANDLER</strong>\n</h3> <h3 id=\"exception_invalid_params\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_INVALID_PARAMS</strong>\n</h3> <h3 id=\"exception_action_not_found\" class=\"method-signature\">\n<em>integer</em> <strong>EXCEPTION_ACTION_NOT_FOUND</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"setcontrollersuffix\" class=\"method-signature\">public <strong>setControllerSuffix</strong> (<em>mixed</em> $controllerSuffix)</h3> <p>Sets the default controller suffix</p> <h3 id=\"setdefaultcontroller\" class=\"method-signature\">public <strong>setDefaultController</strong> (<em>mixed</em> $controllerName)</h3> <p>Sets the default controller name</p> <h3 id=\"setcontrollername\" class=\"method-signature\">public <strong>setControllerName</strong> (<em>mixed</em> $controllerName)</h3> <p>Sets the controller name to be dispatched</p> <h3 id=\"getcontrollername\" class=\"method-signature\">public <strong>getControllerName</strong> ()</h3> <p>Gets last dispatched controller name</p> <h3 id=\"getpreviousnamespacename\" class=\"method-signature\">public <strong>getPreviousNamespaceName</strong> ()</h3> <p>Gets previous dispatched namespace name</p> <h3 id=\"getpreviouscontrollername\" class=\"method-signature\">public <strong>getPreviousControllerName</strong> ()</h3> <p>Gets previous dispatched controller name</p> <h3 id=\"getpreviousactionname\" class=\"method-signature\">public <strong>getPreviousActionName</strong> ()</h3> <p>Gets previous dispatched action name</p> <h3 id=\"_throwdispatchexception\" class=\"method-signature\">protected <strong>_throwDispatchException</strong> (<em>mixed</em> $message, [<em>mixed</em> $exceptionCode])</h3> <p>Throws an internal exception</p> <h3 id=\"_handleexception\" class=\"method-signature\">protected <strong>_handleException</strong> (<em>Exception</em> $exception)</h3> <p>Handles a user exception</p> <h3 id=\"getcontrollerclass\" class=\"method-signature\">public <strong>getControllerClass</strong> ()</h3> <p>Possible controller class name that will be located to dispatch the request</p> <h3 id=\"getlastcontroller\" class=\"method-signature\">public <strong>getLastController</strong> ()</h3> <p>Returns the latest dispatched controller</p> <h3 id=\"getactivecontroller\" class=\"method-signature\">public <strong>getActiveController</strong> ()</h3> <p>Returns the active controller in the dispatcher</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the events manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"setactionsuffix\" class=\"method-signature\">public <strong>setActionSuffix</strong> (<em>mixed</em> $actionSuffix) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the default action suffix</p> <h3 id=\"getactionsuffix\" class=\"method-signature\">public <strong>getActionSuffix</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Gets the default action suffix</p> <h3 id=\"setmodulename\" class=\"method-signature\">public <strong>setModuleName</strong> (<em>mixed</em> $moduleName) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the module where the controller is (only informative)</p> <h3 id=\"getmodulename\" class=\"method-signature\">public <strong>getModuleName</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Gets the module where the controller class is</p> <h3 id=\"setnamespacename\" class=\"method-signature\">public <strong>setNamespaceName</strong> (<em>mixed</em> $namespaceName) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the namespace where the controller class is</p> <h3 id=\"getnamespacename\" class=\"method-signature\">public <strong>getNamespaceName</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Gets a namespace to be prepended to the current handler name</p> <h3 id=\"setdefaultnamespace\" class=\"method-signature\">public <strong>setDefaultNamespace</strong> (<em>mixed</em> $namespaceName) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the default namespace</p> <h3 id=\"getdefaultnamespace\" class=\"method-signature\">public <strong>getDefaultNamespace</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Returns the default namespace</p> <h3 id=\"setdefaultaction\" class=\"method-signature\">public <strong>setDefaultAction</strong> (<em>mixed</em> $actionName) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the default action name</p> <h3 id=\"setactionname\" class=\"method-signature\">public <strong>setActionName</strong> (<em>mixed</em> $actionName) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the action name to be dispatched</p> <h3 id=\"getactionname\" class=\"method-signature\">public <strong>getActionName</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Gets the latest dispatched action name</p> <h3 id=\"setparams\" class=\"method-signature\">public <strong>setParams</strong> (<em>array</em> $params) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets action params to be dispatched</p> <h3 id=\"getparams\" class=\"method-signature\">public <strong>getParams</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Gets action params</p> <h3 id=\"setparam\" class=\"method-signature\">public <strong>setParam</strong> (<em>mixed</em> $param, <em>mixed</em> $value) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Set a param by its name or numeric index</p> <h3 id=\"getparam\" class=\"method-signature\">public <em>mixed</em> <strong>getParam</strong> (<em>mixed</em> $param, [<em>string|array</em> $filters], [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Gets a param by its name or numeric index</p> <h3 id=\"hasparam\" class=\"method-signature\">public <em>boolean</em> <strong>hasParam</strong> (<em>mixed</em> $param) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Check if a param exists</p> <h3 id=\"getactivemethod\" class=\"method-signature\">public <strong>getActiveMethod</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Returns the current method to be/executed in the dispatcher</p> <h3 id=\"isfinished\" class=\"method-signature\">public <strong>isFinished</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Checks if the dispatch loop is finished or has more pendent controllers/tasks to dispatch</p> <h3 id=\"setreturnedvalue\" class=\"method-signature\">public <strong>setReturnedValue</strong> (<em>mixed</em> $value) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Sets the latest returned value by an action manually</p> <h3 id=\"getreturnedvalue\" class=\"method-signature\">public <em>mixed</em> <strong>getReturnedValue</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Returns value returned by the latest dispatched action</p> <h3 id=\"setmodelbinding\" class=\"method-signature\">public <strong>setModelBinding</strong> (<em>boolean</em> $value) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Enable/Disable model binding during dispatch</p> <h3 id=\"dispatch\" class=\"method-signature\">public <em>object</em> <strong>dispatch</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Dispatches a handle action taking into account the routing parameters</p> <h3 id=\"_dispatch\" class=\"method-signature\">protected <em>object</em> <strong>_dispatch</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Dispatches a handle action taking into account the routing parameters</p> <h3 id=\"forward\" class=\"method-signature\">public <strong>forward</strong> (<em>array</em> $forward) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Forwards the execution flow to another controller/action Dispatchers are unique per module. Forwarding between modules is not allowed</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;dispatcher-&gt;forward(array(\"controller\" =&gt; \"posts\", \"action\" =&gt; \"index\"));\n</pre> <h3 id=\"wasforwarded\" class=\"method-signature\">public <strong>wasForwarded</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Check if the current executed action was forwarded by another one</p> <h3 id=\"gethandlerclass\" class=\"method-signature\">public <strong>getHandlerClass</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Possible class name that will be located to dispatch the request</p> <h3 id=\"callactionmethod\" class=\"method-signature\">public <strong>callActionMethod</strong> (<em>mixed</em> $handler, <em>mixed</em> $actionMethod, [<em>array</em> $params]) <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>...</p> <h3 id=\"_resolveemptyproperties\" class=\"method-signature\">protected <strong>_resolveEmptyProperties</strong> () <small>inherited from Phalcon\\Dispatcher</small>\n</h3> <p>Set empty properties to their defaults (where defaults are available)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Dispatcher.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Dispatcher.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_micro":"<h1 id=\"class-phalcon-mvc-micro\">Class <strong>Phalcon\\Mvc\\Micro</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_di_injectable\"><em>Phalcon\\Di\\Injectable</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, ArrayAccess</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/micro.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>With Phalcon you can create “Micro-Framework like” applications. By doing this, you only need to write a minimal amount of code to create a PHP application. Micro applications are suitable to small applications, APIs and prototypes in a practical way.</p> <pre class=\"highlight-php\" data-language=\"php\">$app = new \\Phalcon\\Mvc\\Micro();\n\n $app-&gt;get('/say/welcome/{name}', function ($name) {\n    echo \"&lt;h1&gt;Welcome $name!&lt;/h1&gt;\";\n });\n\n $app-&gt;handle();\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector])</h3> <p>Phalcon\\Mvc\\Micro constructor</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the DependencyInjector container</p> <h3 id=\"map\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_router_routeinterface\"><em>Phalcon\\Mvc\\Router\\RouteInterface</em></a> <strong>map</strong> (<em>string</em> $routePattern, <em>callable</em> $handler)</h3> <p>Maps a route to a handler without any HTTP method constraint</p> <h3 id=\"get\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_router_routeinterface\"><em>Phalcon\\Mvc\\Router\\RouteInterface</em></a> <strong>get</strong> (<em>string</em> $routePattern, <em>callable</em> $handler)</h3> <p>Maps a route to a handler that only matches if the HTTP method is GET</p> <h3 id=\"post\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_router_routeinterface\"><em>Phalcon\\Mvc\\Router\\RouteInterface</em></a> <strong>post</strong> (<em>string</em> $routePattern, <em>callable</em> $handler)</h3> <p>Maps a route to a handler that only matches if the HTTP method is POST</p> <h3 id=\"put\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_router_routeinterface\"><em>Phalcon\\Mvc\\Router\\RouteInterface</em></a> <strong>put</strong> (<em>string</em> $routePattern, <em>callable</em> $handler)</h3> <p>Maps a route to a handler that only matches if the HTTP method is PUT</p> <h3 id=\"patch\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_router_routeinterface\"><em>Phalcon\\Mvc\\Router\\RouteInterface</em></a> <strong>patch</strong> (<em>string</em> $routePattern, <em>callable</em> $handler)</h3> <p>Maps a route to a handler that only matches if the HTTP method is PATCH</p> <h3 id=\"head\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_router_routeinterface\"><em>Phalcon\\Mvc\\Router\\RouteInterface</em></a> <strong>head</strong> (<em>string</em> $routePattern, <em>callable</em> $handler)</h3> <p>Maps a route to a handler that only matches if the HTTP method is HEAD</p> <h3 id=\"delete\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_router_routeinterface\"><em>Phalcon\\Mvc\\Router\\RouteInterface</em></a> <strong>delete</strong> (<em>string</em> $routePattern, <em>callable</em> $handler)</h3> <p>Maps a route to a handler that only matches if the HTTP method is DELETE</p> <h3 id=\"options\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_router_routeinterface\"><em>Phalcon\\Mvc\\Router\\RouteInterface</em></a> <strong>options</strong> (<em>string</em> $routePattern, <em>callable</em> $handler)</h3> <p>Maps a route to a handler that only matches if the HTTP method is OPTIONS</p> <h3 id=\"mount\" class=\"method-signature\">public <strong>mount</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_micro_collectioninterface\"><em>Phalcon\\Mvc\\Micro\\CollectionInterface</em></a> $collection)</h3> <p>Mounts a collection of handlers</p> <h3 id=\"notfound\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_micro\"><em>Phalcon\\Mvc\\Micro</em></a> <strong>notFound</strong> (<em>callable</em> $handler)</h3> <p>Sets a handler that will be called when the router doesn’t match any of the defined routes</p> <h3 id=\"error\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_micro\"><em>Phalcon\\Mvc\\Micro</em></a> <strong>error</strong> (<em>callable</em> $handler)</h3> <p>Sets a handler that will be called when an exception is thrown handling the route</p> <h3 id=\"getrouter\" class=\"method-signature\">public <strong>getRouter</strong> ()</h3> <p>Returns the internal router used by the application</p> <h3 id=\"setservice\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_di_serviceinterface\"><em>Phalcon\\Di\\ServiceInterface</em></a> <strong>setService</strong> (<em>string</em> $serviceName, <em>mixed</em> $definition, [<em>boolean</em> $shared])</h3> <p>Sets a service from the DI</p> <h3 id=\"hasservice\" class=\"method-signature\">public <strong>hasService</strong> (<em>mixed</em> $serviceName)</h3> <p>Checks if a service is registered in the DI</p> <h3 id=\"getservice\" class=\"method-signature\">public <em>object</em> <strong>getService</strong> (<em>string</em> $serviceName)</h3> <p>Obtains a service from the DI</p> <h3 id=\"getsharedservice\" class=\"method-signature\">public <em>mixed</em> <strong>getSharedService</strong> (<em>string</em> $serviceName)</h3> <p>Obtains a shared service from the DI</p> <h3 id=\"handle\" class=\"method-signature\">public <em>mixed</em> <strong>handle</strong> ([<em>string</em> $uri])</h3> <p>Handle the whole request</p> <h3 id=\"stop\" class=\"method-signature\">public <strong>stop</strong> ()</h3> <p>Stops the middleware execution avoiding than other middlewares be executed</p> <h3 id=\"setactivehandler\" class=\"method-signature\">public <strong>setActiveHandler</strong> (<em>callable</em> $activeHandler)</h3> <p>Sets externally the handler that must be called by the matched route</p> <h3 id=\"getactivehandler\" class=\"method-signature\">public <em>callable</em> <strong>getActiveHandler</strong> ()</h3> <p>Return the handler that will be called for the matched route</p> <h3 id=\"getreturnedvalue\" class=\"method-signature\">public <em>mixed</em> <strong>getReturnedValue</strong> ()</h3> <p>Returns the value returned by the executed handler</p> <h3 id=\"offsetexists\" class=\"method-signature\">public <em>boolean</em> <strong>offsetExists</strong> (<em>string</em> $alias)</h3> <p>Check if a service is registered in the internal services container using the array syntax</p> <h3 id=\"offsetset\" class=\"method-signature\">public <strong>offsetSet</strong> (<em>string</em> $alias, <em>mixed</em> $definition)</h3> <p>Allows to register a shared service in the internal services container using the array syntax</p> <pre class=\"highlight-php\" data-language=\"php\">$app['request'] = new \\Phalcon\\Http\\Request();\n</pre> <h3 id=\"offsetget\" class=\"method-signature\">public <em>mixed</em> <strong>offsetGet</strong> (<em>string</em> $alias)</h3> <p>Allows to obtain a shared service in the internal services container using the array syntax</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($di['request']);\n</pre> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>string</em> $alias)</h3> <p>Removes a service from the internal services container using the array syntax</p> <h3 id=\"before\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_micro\"><em>Phalcon\\Mvc\\Micro</em></a> <strong>before</strong> (<em>callable</em> $handler)</h3> <p>Appends a before middleware to be called before execute the route</p> <h3 id=\"after\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_micro\"><em>Phalcon\\Mvc\\Micro</em></a> <strong>after</strong> (<em>callable</em> $handler)</h3> <p>Appends an ‘after’ middleware to be called after execute the route</p> <h3 id=\"finish\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_micro\"><em>Phalcon\\Mvc\\Micro</em></a> <strong>finish</strong> (<em>callable</em> $handler)</h3> <p>Appends a ‘finish’ middleware to be called when the request is finished</p> <h3 id=\"gethandlers\" class=\"method-signature\">public <em>array</em> <strong>getHandlers</strong> ()</h3> <p>Returns the internal handlers attached to the application</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $propertyName) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Magic method __get</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_collection":"<h1 id=\"abstract-class-phalcon-mvc-collection\">Abstract class <strong>Phalcon\\Mvc\\Collection</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_entityinterface\"><em>Phalcon\\Mvc\\EntityInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, Serializable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This component implements a high level abstraction for NoSQL databases which works with documents</p>  <h2 id=\"constants\">Constants</h2> <h3 id=\"op_none\" class=\"method-signature\">\n<em>integer</em> <strong>OP_NONE</strong>\n</h3> <h3 id=\"op_create\" class=\"method-signature\">\n<em>integer</em> <strong>OP_CREATE</strong>\n</h3> <h3 id=\"op_update\" class=\"method-signature\">\n<em>integer</em> <strong>OP_UPDATE</strong>\n</h3> <h3 id=\"op_delete\" class=\"method-signature\">\n<em>integer</em> <strong>OP_DELETE</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">final public <strong>__construct</strong> ([<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector], [<a class=\"reference internal\" href=\"phalcon_mvc_collection_managerinterface\"><em>Phalcon\\Mvc\\Collection\\ManagerInterface</em></a> $modelsManager])</h3> <p>Phalcon\\Mvc\\Collection constructor</p> <h3 id=\"setid\" class=\"method-signature\">public <strong>setId</strong> (<em>mixed</em> $id)</h3> <p>Sets a value for the _id property, creates a MongoId object if needed</p> <h3 id=\"getid\" class=\"method-signature\">public <em>MongoId</em> <strong>getId</strong> ()</h3> <p>Returns the value of the _id property</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the dependency injection container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the dependency injection container</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">protected <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collection_managerinterface\"><em>Phalcon\\Mvc\\Collection\\ManagerInterface</em></a> $eventsManager)</h3> <p>Sets a custom events manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">protected <strong>getEventsManager</strong> ()</h3> <p>Returns the custom events manager</p> <h3 id=\"getcollectionmanager\" class=\"method-signature\">public <strong>getCollectionManager</strong> ()</h3> <p>Returns the models manager related to the entity instance</p> <h3 id=\"getreservedattributes\" class=\"method-signature\">public <strong>getReservedAttributes</strong> ()</h3> <p>Returns an array with reserved properties that cannot be part of the insert/update</p> <h3 id=\"useimplicitobjectids\" class=\"method-signature\">protected <strong>useImplicitObjectIds</strong> (<em>mixed</em> $useImplicitObjectIds)</h3> <p>Sets if a model must use implicit objects ids</p> <h3 id=\"setsource\" class=\"method-signature\">protected <strong>setSource</strong> (<em>mixed</em> $source)</h3> <p>Sets collection name which model should be mapped</p> <h3 id=\"getsource\" class=\"method-signature\">public <strong>getSource</strong> ()</h3> <p>Returns collection name mapped in the model</p> <h3 id=\"setconnectionservice\" class=\"method-signature\">public <strong>setConnectionService</strong> (<em>mixed</em> $connectionService)</h3> <p>Sets the DependencyInjection connection service name</p> <h3 id=\"getconnectionservice\" class=\"method-signature\">public <strong>getConnectionService</strong> ()</h3> <p>Returns DependencyInjection connection service</p> <h3 id=\"getconnection\" class=\"method-signature\">public <em>MongoDb</em> <strong>getConnection</strong> ()</h3> <p>Retrieves a database connection</p> <h3 id=\"readattribute\" class=\"method-signature\">public <em>mixed</em> <strong>readAttribute</strong> (<em>string</em> $attribute)</h3> <p>Reads an attribute value by its name</p> <pre class=\"highlight-php\" data-language=\"php\">echo $robot-&gt;readAttribute('name');\n</pre> <h3 id=\"writeattribute\" class=\"method-signature\">public <strong>writeAttribute</strong> (<em>string</em> $attribute, <em>mixed</em> $value)</h3> <p>Writes an attribute value by its name</p> <pre class=\"highlight-php\" data-language=\"php\">$robot-&gt;writeAttribute('name', 'Rosey');\n</pre> <h3 id=\"cloneresult\" class=\"method-signature\">public static <strong>cloneResult</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $collection, <em>array</em> $document)</h3> <p>Returns a cloned collection</p> <h3 id=\"_getresultset\" class=\"method-signature\">protected static <em>array</em> <strong>_getResultset</strong> (<em>array</em> $params, <a class=\"reference internal\" href=\"phalcon_mvc_collection\"><em>Phalcon\\Mvc\\Collection</em></a> $collection, <em>MongoDb</em> $connection, <em>boolean</em> $unique)</h3> <p>Returns a collection resultset</p> <h3 id=\"_getgroupresultset\" class=\"method-signature\">protected static <em>int</em> <strong>_getGroupResultset</strong> (<em>array</em> $params, <a class=\"reference internal\" href=\"phalcon_mvc_collection\"><em>Phalcon\\Mvc\\Collection</em></a> $collection, <em>MongoDb</em> $connection)</h3> <p>Perform a count over a resultset</p> <h3 id=\"_presave\" class=\"method-signature\">final protected <em>boolean</em> <strong>_preSave</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector, <em>boolean</em> $disableEvents, <em>boolean</em> $exists)</h3> <p>Executes internal hooks before save a document</p> <h3 id=\"_postsave\" class=\"method-signature\">final protected <strong>_postSave</strong> (<em>mixed</em> $disableEvents, <em>mixed</em> $success, <em>mixed</em> $exists)</h3> <p>Executes internal events after save a document</p> <h3 id=\"validate\" class=\"method-signature\">protected <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_validatorinterface\"><em>Phalcon\\Mvc\\Model\\ValidatorInterface</em></a> $validator)</h3> <p>Executes validators on every validation call</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Validator\\ExclusionIn as ExclusionIn;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n\npublic function validation()\n{\n    this-&gt;validate(new ExclusionIn(array(\n            'field' =&gt; 'status',\n            'domain' =&gt; array('A', 'I')\n    )));\n    if (this-&gt;validationHasFailed() == true) {\n            return false;\n    }\n}\n\n}\n</pre> <h3 id=\"validationhasfailed\" class=\"method-signature\">public <strong>validationHasFailed</strong> ()</h3> <p>Check whether validation process has generated any messages</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Validator\\ExclusionIn as ExclusionIn;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n\npublic function validation()\n{\n    this-&gt;validate(new ExclusionIn(array(\n            'field' =&gt; 'status',\n            'domain' =&gt; array('A', 'I')\n    )));\n    if (this-&gt;validationHasFailed() == true) {\n            return false;\n    }\n}\n\n}\n</pre> <h3 id=\"fireevent\" class=\"method-signature\">public <strong>fireEvent</strong> (<em>mixed</em> $eventName)</h3> <p>Fires an internal event</p> <h3 id=\"fireeventcancel\" class=\"method-signature\">public <strong>fireEventCancel</strong> (<em>mixed</em> $eventName)</h3> <p>Fires an internal event that cancels the operation</p> <h3 id=\"_canceloperation\" class=\"method-signature\">protected <strong>_cancelOperation</strong> (<em>mixed</em> $disableEvents)</h3> <p>Cancel the current operation</p> <h3 id=\"_exists\" class=\"method-signature\">protected <em>boolean</em> <strong>_exists</strong> (<em>MongoCollection</em> $collection)</h3> <p>Checks if the document exists in the collection</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> ()</h3> <p>Returns all the validation messages</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = new Robots();\n $robot-&gt;type = 'mechanical';\n $robot-&gt;name = 'Astro Boy';\n $robot-&gt;year = 1952;\n if ($robot-&gt;save() == false) {\necho \"Umh, We can't store robots right now \";\nforeach ($robot-&gt;getMessages() as message) {\n    echo message;\n}\n} else {\necho \"Great, a new robot was saved successfully!\";\n}\n</pre> <h3 id=\"appendmessage\" class=\"method-signature\">public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_messageinterface\"><em>Phalcon\\Mvc\\Model\\MessageInterface</em></a> $message)</h3> <p>Appends a customized message on the validation process</p> <pre class=\"highlight-php\" data-language=\"php\">use \\Phalcon\\Mvc\\Model\\Message as Message;\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n\n    public function beforeSave()\n    {\n            if ($this-&gt;name == 'Peter') {\n                    message = new Message(\"Sorry, but a robot cannot be named Peter\");\n                    $this-&gt;appendMessage(message);\n            }\n    }\n}\n</pre> <h3 id=\"preparecu\" class=\"method-signature\">protected <strong>prepareCU</strong> ()</h3> <p>Shared Code for CU Operations Prepares Collection</p> <h3 id=\"save\" class=\"method-signature\">public <strong>save</strong> ()</h3> <p>Creates/Updates a collection based on the values in the attributes</p> <h3 id=\"create\" class=\"method-signature\">public <strong>create</strong> ()</h3> <p>Creates a collection based on the values in the attributes</p> <h3 id=\"createifnotexist\" class=\"method-signature\">public <strong>createIfNotExist</strong> (<em>array</em> $criteria)</h3> <p>Creates a document based on the values in the attributes, if not found by criteria Preferred way to avoid duplication is to create index on attribute $robot = new Robot(); $robot-&gt;name = “MyRobot”; $robot-&gt;type = “Droid”; //create only if robot with same name and type does not exist $robot-&gt;createIfNotExist( array( “name”, “type” ) );</p> <h3 id=\"update\" class=\"method-signature\">public <strong>update</strong> ()</h3> <p>Creates/Updates a collection based on the values in the attributes</p> <h3 id=\"findbyid\" class=\"method-signature\">public static <strong>findById</strong> (<em>mixed</em> $id)</h3> <p>Find a document by its id (_id)</p> <pre class=\"highlight-php\" data-language=\"php\">// Find user by using \\MongoId object\n $user = Users::findById(new \\MongoId('545eb081631d16153a293a66'));\n\n // Find user by using id as sting\n $user = Users::findById('45cbc4a0e4123f6920000002');\n\n // Validate input\n if ($user = Users::findById($_POST['id'])) {\n     // ...\n }\n</pre> <h3 id=\"findfirst\" class=\"method-signature\">public static <strong>findFirst</strong> ([<em>array</em> $parameters])</h3> <p>Allows to query the first record that match the specified conditions</p> <pre class=\"highlight-php\" data-language=\"php\">// What's the first robot in the robots table?\n $robot = Robots::findFirst();\n echo 'The robot name is ', $robot-&gt;name, \"\\n\";\n\n // What's the first mechanical robot in robots table?\n $robot = Robots::findFirst([\n     ['type' =&gt; 'mechanical']\n ]);\n echo 'The first mechanical robot name is ', $robot-&gt;name, \"\\n\";\n\n // Get first virtual robot ordered by name\n $robot = Robots::findFirst([\n     ['type' =&gt; 'mechanical'],\n     'order' =&gt; ['name' =&gt; 1]\n ]);\n echo 'The first virtual robot name is ', $robot-&gt;name, \"\\n\";\n\n // Get first robot by id (_id)\n $robot = Robots::findFirst([\n     ['_id' =&gt; new \\MongoId('45cbc4a0e4123f6920000002')]\n ]);\n echo 'The robot id is ', $robot-&gt;_id, \"\\n\";\n</pre> <h3 id=\"find\" class=\"method-signature\">public static <strong>find</strong> ([<em>array</em> $parameters])</h3> <p>Allows to query a set of records that match the specified conditions</p> <pre class=\"highlight-php\" data-language=\"php\">//How many robots are there?\n $robots = Robots::find();\n echo \"There are \", count($robots), \"\\n\";\n\n //How many mechanical robots are there?\n $robots = Robots::find(array(\n     array(\"type\" =&gt; \"mechanical\")\n ));\n echo \"There are \", count(robots), \"\\n\";\n\n //Get and print virtual robots ordered by name\n $robots = Robots::findFirst(array(\n     array(\"type\" =&gt; \"virtual\"),\n     \"order\" =&gt; array(\"name\" =&gt; 1)\n ));\n foreach ($robots as $robot) {\n   echo $robot-&gt;name, \"\\n\";\n }\n\n //Get first 100 virtual robots ordered by name\n $robots = Robots::find(array(\n     array(\"type\" =&gt; \"virtual\"),\n     \"order\" =&gt; array(\"name\" =&gt; 1),\n     \"limit\" =&gt; 100\n ));\n foreach ($robots as $robot) {\n   echo $robot-&gt;name, \"\\n\";\n }\n</pre> <h3 id=\"count\" class=\"method-signature\">public static <strong>count</strong> ([<em>array</em> $parameters])</h3> <p>Perform a count over a collection</p> <pre class=\"highlight-php\" data-language=\"php\">echo 'There are ', Robots::count(), ' robots';\n</pre> <h3 id=\"aggregate\" class=\"method-signature\">public static <strong>aggregate</strong> ([<em>array</em> $parameters])</h3> <p>Perform an aggregation using the Mongo aggregation framework</p> <h3 id=\"summatory\" class=\"method-signature\">public static <strong>summatory</strong> (<em>mixed</em> $field, [<em>mixed</em> $conditions], [<em>mixed</em> $finalize])</h3> <p>Allows to perform a summatory group for a column in the collection</p> <h3 id=\"delete\" class=\"method-signature\">public <strong>delete</strong> ()</h3> <p>Deletes a model instance. Returning true on success or false otherwise.</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = Robots::findFirst();\n$robot-&gt;delete();\n\nforeach (Robots::find() as $robot) {\n    $robot-&gt;delete();\n}\n</pre> <h3 id=\"addbehavior\" class=\"method-signature\">protected <strong>addBehavior</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collection_behaviorinterface\"><em>Phalcon\\Mvc\\Collection\\BehaviorInterface</em></a> $behavior)</h3> <p>Sets up a behavior in a collection</p> <h3 id=\"skipoperation\" class=\"method-signature\">public <strong>skipOperation</strong> (<em>mixed</em> $skip)</h3> <p>Skips the current operation forcing a success state</p> <h3 id=\"toarray\" class=\"method-signature\">public <strong>toArray</strong> ()</h3> <p>Returns the instance as an array representation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($robot-&gt;toArray());\n</pre> <h3 id=\"serialize\" class=\"method-signature\">public <strong>serialize</strong> ()</h3> <p>Serializes the object ignoring connections or protected properties</p> <h3 id=\"unserialize\" class=\"method-signature\">public <strong>unserialize</strong> (<em>mixed</em> $data)</h3> <p>Unserializes the object from a serialized string</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_metadata_apc":"<h1 id=\"class-phalcon-mvc-model-metadata-apc\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Apc</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_metadata\"><em>Phalcon\\Mvc\\Model\\MetaData</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_metadatainterface\"><em>Phalcon\\Mvc\\Model\\MetaDataInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/apc.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Stores model meta-data in the APC cache. Data will erased if the web server is restarted By default meta-data is stored for 48 hours (172800 seconds) You can query the meta-data by printing apc_fetch(‘$PMM$’) or apc_fetch(‘$PMM$my-app-id’)</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData = new \\Phalcon\\Mvc\\Model\\Metadata\\Apc(array(\n    'prefix' =&gt; 'my-app-id',\n    'lifetime' =&gt; 86400\n));\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"models_attributes\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_ATTRIBUTES</strong>\n</h3> <h3 id=\"models_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_non_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NON_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_not_null\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NOT_NULL</strong>\n</h3> <h3 id=\"models_data_types\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES</strong>\n</h3> <h3 id=\"models_data_types_numeric\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_NUMERIC</strong>\n</h3> <h3 id=\"models_date_at\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_AT</strong>\n</h3> <h3 id=\"models_date_in\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_IN</strong>\n</h3> <h3 id=\"models_identity_column\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_IDENTITY_COLUMN</strong>\n</h3> <h3 id=\"models_data_types_bind\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_BIND</strong>\n</h3> <h3 id=\"models_automatic_default_insert\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_INSERT</strong>\n</h3> <h3 id=\"models_automatic_default_update\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_UPDATE</strong>\n</h3> <h3 id=\"models_default_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DEFAULT_VALUES</strong>\n</h3> <h3 id=\"models_empty_string_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_EMPTY_STRING_VALUES</strong>\n</h3> <h3 id=\"models_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_COLUMN_MAP</strong>\n</h3> <h3 id=\"models_reverse_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_REVERSE_COLUMN_MAP</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <p>Phalcon\\Mvc\\Model\\MetaData\\Apc constructor</p> <h3 id=\"read\" class=\"method-signature\">public <strong>read</strong> (<em>mixed</em> $key)</h3> <p>Reads meta-data from APC</p> <h3 id=\"write\" class=\"method-signature\">public <strong>write</strong> (<em>mixed</em> $key, <em>mixed</em> $data)</h3> <p>Writes the meta-data to APC</p> <h3 id=\"_initialize\" class=\"method-signature\">final protected <strong>_initialize</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $key, <em>mixed</em> $table, <em>mixed</em> $schema) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Initialize the metadata for certain table</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Sets the DependencyInjector container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the DependencyInjector container</p> <h3 id=\"setstrategy\" class=\"method-signature\">public <strong>setStrategy</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_metadata_strategyinterface\"><em>Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface</em></a> $strategy) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the meta-data extraction strategy</p> <h3 id=\"getstrategy\" class=\"method-signature\">public <strong>getStrategy</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Return the strategy to obtain the meta-data</p> <h3 id=\"readmetadata\" class=\"method-signature\">final public <strong>readMetaData</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads the complete meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaData(new Robots());\n</pre> <h3 id=\"readmetadataindex\" class=\"method-signature\">final public <strong>readMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaDataIndex(new Robots(), 0);\n</pre> <h3 id=\"writemetadataindex\" class=\"method-signature\">final public <strong>writeMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index, <em>mixed</em> $data) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;writeColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP, array('leName' =&gt; 'name')));\n</pre> <h3 id=\"readcolumnmap\" class=\"method-signature\">final public <strong>readColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads the ordered/reversed column map for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMap(new Robots()));\n</pre> <h3 id=\"readcolumnmapindex\" class=\"method-signature\">final public <strong>readColumnMapIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP));\n</pre> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns table attributes names (fields)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAttributes(new Robots()));\n</pre> <h3 id=\"getprimarykeyattributes\" class=\"method-signature\">public <strong>getPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of fields which are part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnonprimarykeyattributes\" class=\"method-signature\">public <strong>getNonPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of fields which are not part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNonPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnotnullattributes\" class=\"method-signature\">public <strong>getNotNullAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of not null attributes</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNotNullAttributes(new Robots()));\n</pre> <h3 id=\"getdatatypes\" class=\"method-signature\">public <strong>getDataTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes and their data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypes(new Robots()));\n</pre> <h3 id=\"getdatatypesnumeric\" class=\"method-signature\">public <strong>getDataTypesNumeric</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes which types are numerical</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypesNumeric(new Robots()));\n</pre> <h3 id=\"getidentityfield\" class=\"method-signature\">public <em>string</em> <strong>getIdentityField</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the name of identity field (if one is present)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getIdentityField(new Robots()));\n</pre> <h3 id=\"getbindtypes\" class=\"method-signature\">public <strong>getBindTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes and their bind data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getBindTypes(new Robots()));\n</pre> <h3 id=\"getautomaticcreateattributes\" class=\"method-signature\">public <strong>getAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticCreateAttributes(new Robots()));\n</pre> <h3 id=\"getautomaticupdateattributes\" class=\"method-signature\">public <strong>getAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticUpdateAttributes(new Robots()));\n</pre> <h3 id=\"setautomaticcreateattributes\" class=\"method-signature\">public <strong>setAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticCreateAttributes(new Robots(), array('created_at' =&gt; true));\n</pre> <h3 id=\"setautomaticupdateattributes\" class=\"method-signature\">public <strong>setAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticUpdateAttributes(new Robots(), array('modified_at' =&gt; true));\n</pre> <h3 id=\"setemptystringattributes\" class=\"method-signature\">public <strong>setEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that allow empty string values</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setEmptyStringAttributes(new Robots(), array('name' =&gt; true));\n</pre> <h3 id=\"getemptystringattributes\" class=\"method-signature\">public <strong>getEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes allow empty strings</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getEmptyStringAttributes(new Robots()));\n</pre> <h3 id=\"getdefaultvalues\" class=\"method-signature\">public <strong>getDefaultValues</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes (which have default values) and their default values</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDefaultValues(new Robots()));\n</pre> <h3 id=\"getcolumnmap\" class=\"method-signature\">public <strong>getColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getColumnMap(new Robots()));\n</pre> <h3 id=\"getreversecolumnmap\" class=\"method-signature\">public <strong>getReverseColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the reverse column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getReverseColumnMap(new Robots()));\n</pre> <h3 id=\"hasattribute\" class=\"method-signature\">public <strong>hasAttribute</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $attribute) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Check if a model has certain attribute</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;hasAttribute(new Robots(), 'name'));\n</pre> <h3 id=\"isempty\" class=\"method-signature\">public <strong>isEmpty</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Checks if the internal meta-data container is empty</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;isEmpty());\n</pre> <h3 id=\"reset\" class=\"method-signature\">public <strong>reset</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Resets internal meta-data in order to regenerate it</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;reset();\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Apc.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Apc.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_exception":"<h1 id=\"class-phalcon-mvc-model-exception\">Class <strong>Phalcon\\Mvc\\Model\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_message":"<h1 id=\"class-phalcon-mvc-model-message\">Class <strong>Phalcon\\Mvc\\Model\\Message</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_messageinterface\"><em>Phalcon\\Mvc\\Model\\MessageInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/message.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Encapsulates validation info generated before save/delete records fails</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Message as Message;\n\n  class Robots extends \\Phalcon\\Mvc\\Model\n  {\n\n    public function beforeSave()\n    {\n      if ($this-&gt;name == 'Peter') {\n        $text = \"A robot cannot be named Peter\";\n        $field = \"name\";\n        $type = \"InvalidValue\";\n        $message = new Message($text, $field, $type);\n        $this-&gt;appendMessage($message);\n     }\n   }\n\n }\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>string</em> $message, [<em>string|array</em> $field], [<em>string</em> $type], [<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model], [<em>int|null</em> $code])</h3> <p>Phalcon\\Mvc\\Model\\Message constructor</p> <h3 id=\"settype\" class=\"method-signature\">public <strong>setType</strong> (<em>mixed</em> $type)</h3> <p>Sets message type</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> ()</h3> <p>Returns message type</p> <h3 id=\"setmessage\" class=\"method-signature\">public <strong>setMessage</strong> (<em>mixed</em> $message)</h3> <p>Sets verbose message</p> <h3 id=\"getmessage\" class=\"method-signature\">public <strong>getMessage</strong> ()</h3> <p>Returns verbose message</p> <h3 id=\"setfield\" class=\"method-signature\">public <strong>setField</strong> (<em>mixed</em> $field)</h3> <p>Sets field name related to message</p> <h3 id=\"getfield\" class=\"method-signature\">public <strong>getField</strong> ()</h3> <p>Returns field name related to message</p> <h3 id=\"setmodel\" class=\"method-signature\">public <strong>setModel</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Set the model who generates the message</p> <h3 id=\"setcode\" class=\"method-signature\">public <strong>setCode</strong> (<em>mixed</em> $code)</h3> <p>Sets code for the message</p> <h3 id=\"getmodel\" class=\"method-signature\">public <strong>getModel</strong> ()</h3> <p>Returns the model that produced the message</p> <h3 id=\"getcode\" class=\"method-signature\">public <strong>getCode</strong> ()</h3> <p>Returns the message code</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> ()</h3> <p>Magic __toString method returns verbose message</p> <h3 id=\"__set_state\" class=\"method-signature\">public static <strong>__set_state</strong> (<em>array</em> $message)</h3> <p>Magic __set_state helps to re-build messages variable exporting</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Message.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Message.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_metadata_session":"<h1 id=\"class-phalcon-mvc-model-metadata-session\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Session</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_metadata\"><em>Phalcon\\Mvc\\Model\\MetaData</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_metadatainterface\"><em>Phalcon\\Mvc\\Model\\MetaDataInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/session.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Stores model meta-data in session. Data will erased when the session finishes. Meta-data are permanent while the session is active. You can query the meta-data by printing $_SESSION[‘$PMM$’]</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData = new \\Phalcon\\Mvc\\Model\\Metadata\\Session(array(\n    'prefix' =&gt; 'my-app-id'\n ));\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"models_attributes\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_ATTRIBUTES</strong>\n</h3> <h3 id=\"models_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_non_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NON_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_not_null\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NOT_NULL</strong>\n</h3> <h3 id=\"models_data_types\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES</strong>\n</h3> <h3 id=\"models_data_types_numeric\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_NUMERIC</strong>\n</h3> <h3 id=\"models_date_at\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_AT</strong>\n</h3> <h3 id=\"models_date_in\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_IN</strong>\n</h3> <h3 id=\"models_identity_column\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_IDENTITY_COLUMN</strong>\n</h3> <h3 id=\"models_data_types_bind\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_BIND</strong>\n</h3> <h3 id=\"models_automatic_default_insert\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_INSERT</strong>\n</h3> <h3 id=\"models_automatic_default_update\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_UPDATE</strong>\n</h3> <h3 id=\"models_default_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DEFAULT_VALUES</strong>\n</h3> <h3 id=\"models_empty_string_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_EMPTY_STRING_VALUES</strong>\n</h3> <h3 id=\"models_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_COLUMN_MAP</strong>\n</h3> <h3 id=\"models_reverse_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_REVERSE_COLUMN_MAP</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <p>Phalcon\\Mvc\\Model\\MetaData\\Session constructor</p> <h3 id=\"read\" class=\"method-signature\">public <em>array</em> <strong>read</strong> (<em>string</em> $key)</h3> <p>Reads meta-data from $_SESSION</p> <h3 id=\"write\" class=\"method-signature\">public <strong>write</strong> (<em>string</em> $key, <em>array</em> $data)</h3> <p>Writes the meta-data to $_SESSION</p> <h3 id=\"_initialize\" class=\"method-signature\">final protected <strong>_initialize</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $key, <em>mixed</em> $table, <em>mixed</em> $schema) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Initialize the metadata for certain table</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Sets the DependencyInjector container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the DependencyInjector container</p> <h3 id=\"setstrategy\" class=\"method-signature\">public <strong>setStrategy</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_metadata_strategyinterface\"><em>Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface</em></a> $strategy) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the meta-data extraction strategy</p> <h3 id=\"getstrategy\" class=\"method-signature\">public <strong>getStrategy</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Return the strategy to obtain the meta-data</p> <h3 id=\"readmetadata\" class=\"method-signature\">final public <strong>readMetaData</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads the complete meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaData(new Robots());\n</pre> <h3 id=\"readmetadataindex\" class=\"method-signature\">final public <strong>readMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaDataIndex(new Robots(), 0);\n</pre> <h3 id=\"writemetadataindex\" class=\"method-signature\">final public <strong>writeMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index, <em>mixed</em> $data) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;writeColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP, array('leName' =&gt; 'name')));\n</pre> <h3 id=\"readcolumnmap\" class=\"method-signature\">final public <strong>readColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads the ordered/reversed column map for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMap(new Robots()));\n</pre> <h3 id=\"readcolumnmapindex\" class=\"method-signature\">final public <strong>readColumnMapIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP));\n</pre> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns table attributes names (fields)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAttributes(new Robots()));\n</pre> <h3 id=\"getprimarykeyattributes\" class=\"method-signature\">public <strong>getPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of fields which are part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnonprimarykeyattributes\" class=\"method-signature\">public <strong>getNonPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of fields which are not part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNonPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnotnullattributes\" class=\"method-signature\">public <strong>getNotNullAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of not null attributes</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNotNullAttributes(new Robots()));\n</pre> <h3 id=\"getdatatypes\" class=\"method-signature\">public <strong>getDataTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes and their data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypes(new Robots()));\n</pre> <h3 id=\"getdatatypesnumeric\" class=\"method-signature\">public <strong>getDataTypesNumeric</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes which types are numerical</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypesNumeric(new Robots()));\n</pre> <h3 id=\"getidentityfield\" class=\"method-signature\">public <em>string</em> <strong>getIdentityField</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the name of identity field (if one is present)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getIdentityField(new Robots()));\n</pre> <h3 id=\"getbindtypes\" class=\"method-signature\">public <strong>getBindTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes and their bind data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getBindTypes(new Robots()));\n</pre> <h3 id=\"getautomaticcreateattributes\" class=\"method-signature\">public <strong>getAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticCreateAttributes(new Robots()));\n</pre> <h3 id=\"getautomaticupdateattributes\" class=\"method-signature\">public <strong>getAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticUpdateAttributes(new Robots()));\n</pre> <h3 id=\"setautomaticcreateattributes\" class=\"method-signature\">public <strong>setAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticCreateAttributes(new Robots(), array('created_at' =&gt; true));\n</pre> <h3 id=\"setautomaticupdateattributes\" class=\"method-signature\">public <strong>setAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticUpdateAttributes(new Robots(), array('modified_at' =&gt; true));\n</pre> <h3 id=\"setemptystringattributes\" class=\"method-signature\">public <strong>setEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that allow empty string values</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setEmptyStringAttributes(new Robots(), array('name' =&gt; true));\n</pre> <h3 id=\"getemptystringattributes\" class=\"method-signature\">public <strong>getEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes allow empty strings</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getEmptyStringAttributes(new Robots()));\n</pre> <h3 id=\"getdefaultvalues\" class=\"method-signature\">public <strong>getDefaultValues</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes (which have default values) and their default values</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDefaultValues(new Robots()));\n</pre> <h3 id=\"getcolumnmap\" class=\"method-signature\">public <strong>getColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getColumnMap(new Robots()));\n</pre> <h3 id=\"getreversecolumnmap\" class=\"method-signature\">public <strong>getReverseColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the reverse column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getReverseColumnMap(new Robots()));\n</pre> <h3 id=\"hasattribute\" class=\"method-signature\">public <strong>hasAttribute</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $attribute) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Check if a model has certain attribute</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;hasAttribute(new Robots(), 'name'));\n</pre> <h3 id=\"isempty\" class=\"method-signature\">public <strong>isEmpty</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Checks if the internal meta-data container is empty</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;isEmpty());\n</pre> <h3 id=\"reset\" class=\"method-signature\">public <strong>reset</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Resets internal meta-data in order to regenerate it</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;reset();\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Session.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Session.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_metadata_strategy_annotations":"<h1 id=\"class-phalcon-mvc-model-metadata-strategy-annotations\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Strategy\\Annotations</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_metadata_strategyinterface\"><em>Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/strategy/annotations.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getmetadata\" class=\"method-signature\">final public <strong>getMetaData</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>The meta-data is obtained by reading the column descriptions from the database information schema</p> <h3 id=\"getcolumnmaps\" class=\"method-signature\">final public <strong>getColumnMaps</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Read the model’s column map, this can’t be inferred</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Strategy_Annotations.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Strategy_Annotations.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_metadata_strategy_introspection":"<h1 id=\"class-phalcon-mvc-model-metadata-strategy-introspection\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Strategy\\Introspection</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_metadata_strategyinterface\"><em>Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/strategy/introspection.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Queries the table meta-data in order to introspect the model’s metadata</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getmetadata\" class=\"method-signature\">final public <strong>getMetaData</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>The meta-data is obtained by reading the column descriptions from the database information schema</p> <h3 id=\"getcolumnmaps\" class=\"method-signature\">final public <strong>getColumnMaps</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Read the model’s column map, this can’t be inferred</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Strategy_Introspection.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Strategy_Introspection.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_manager":"<h1 id=\"class-phalcon-mvc-model-manager\">Class <strong>Phalcon\\Mvc\\Model\\Manager</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_managerinterface\"><em>Phalcon\\Mvc\\Model\\ManagerInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/manager.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This components controls the initialization of models, keeping record of relations between the different models of the application. A ModelsManager is injected to a model via a Dependency Injector/Services Container such as Phalcon\\Di.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Di;\n use Phalcon\\Mvc\\Model\\Manager as ModelsManager;\n\n $di = new Di();\n\n $di-&gt;set('modelsManager', function() {\n      return new ModelsManager();\n });\n\n $robot = new Robots($di);\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the DependencyInjector container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the DependencyInjector container</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager)</h3> <p>Sets a global events manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> ()</h3> <p>Returns the internal event manager</p> <h3 id=\"setcustomeventsmanager\" class=\"method-signature\">public <strong>setCustomEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager)</h3> <p>Sets a custom events manager for a specific model</p> <h3 id=\"getcustomeventsmanager\" class=\"method-signature\">public <strong>getCustomEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns a custom events manager related to a model</p> <h3 id=\"initialize\" class=\"method-signature\">public <strong>initialize</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Initializes a model in the model manager</p> <h3 id=\"isinitialized\" class=\"method-signature\">public <strong>isInitialized</strong> (<em>mixed</em> $modelName)</h3> <p>Check whether a model is already initialized</p> <h3 id=\"getlastinitialized\" class=\"method-signature\">public <strong>getLastInitialized</strong> ()</h3> <p>Get last initialized model</p> <h3 id=\"load\" class=\"method-signature\">public <strong>load</strong> (<em>mixed</em> $modelName, [<em>mixed</em> $newInstance])</h3> <p>Loads a model throwing an exception if it doesn’t exist</p> <h3 id=\"setmodelsource\" class=\"method-signature\">public <strong>setModelSource</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $source)</h3> <p>Sets the mapped source for a model</p> <h3 id=\"isvisiblemodelproperty\" class=\"method-signature\">final public <strong>isVisibleModelProperty</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $property)</h3> <p>Check whether a model property is declared as public.</p> <pre class=\"highlight-php\" data-language=\"php\">$isPublic = $manager-&gt;isVisibleModelProperty(new Robots(), 'name');\n</pre> <h3 id=\"getmodelsource\" class=\"method-signature\">public <strong>getModelSource</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns the mapped source for a model</p> <h3 id=\"setmodelschema\" class=\"method-signature\">public <strong>setModelSchema</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $schema)</h3> <p>Sets the mapped schema for a model</p> <h3 id=\"getmodelschema\" class=\"method-signature\">public <strong>getModelSchema</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns the mapped schema for a model</p> <h3 id=\"setconnectionservice\" class=\"method-signature\">public <strong>setConnectionService</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $connectionService)</h3> <p>Sets both write and read connection service for a model</p> <h3 id=\"setwriteconnectionservice\" class=\"method-signature\">public <strong>setWriteConnectionService</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $connectionService)</h3> <p>Sets write connection service for a model</p> <h3 id=\"setreadconnectionservice\" class=\"method-signature\">public <strong>setReadConnectionService</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $connectionService)</h3> <p>Sets read connection service for a model</p> <h3 id=\"getreadconnection\" class=\"method-signature\">public <strong>getReadConnection</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns the connection to read data related to a model</p> <h3 id=\"getwriteconnection\" class=\"method-signature\">public <strong>getWriteConnection</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns the connection to write data related to a model</p> <h3 id=\"_getconnection\" class=\"method-signature\">protected <strong>_getConnection</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $connectionServices)</h3> <p>Returns the connection to read or write data related to a model depending on the connection services.</p> <h3 id=\"getreadconnectionservice\" class=\"method-signature\">public <strong>getReadConnectionService</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns the connection service name used to read data related to a model</p> <h3 id=\"getwriteconnectionservice\" class=\"method-signature\">public <strong>getWriteConnectionService</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns the connection service name used to write data related to a model</p> <h3 id=\"_getconnectionservice\" class=\"method-signature\">public <strong>_getConnectionService</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $connectionServices)</h3> <p>Returns the connection service name used to read or write data related to a model depending on the connection services</p> <h3 id=\"notifyevent\" class=\"method-signature\">public <strong>notifyEvent</strong> (<em>mixed</em> $eventName, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Receives events generated in the models and dispatches them to an events-manager if available Notify the behaviors that are listening in the model</p> <h3 id=\"missingmethod\" class=\"method-signature\">public <strong>missingMethod</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $eventName, <em>mixed</em> $data)</h3> <p>Dispatch an event to the listeners and behaviors This method expects that the endpoint listeners/behaviors returns true meaning that a least one was implemented</p> <h3 id=\"addbehavior\" class=\"method-signature\">public <strong>addBehavior</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <a class=\"reference internal\" href=\"phalcon_mvc_model_behaviorinterface\"><em>Phalcon\\Mvc\\Model\\BehaviorInterface</em></a> $behavior)</h3> <p>Binds a behavior to a model</p> <h3 id=\"keepsnapshots\" class=\"method-signature\">public <strong>keepSnapshots</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $keepSnapshots)</h3> <p>Sets if a model must keep snapshots</p> <h3 id=\"iskeepingsnapshots\" class=\"method-signature\">public <strong>isKeepingSnapshots</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Checks if a model is keeping snapshots for the queried records</p> <h3 id=\"usedynamicupdate\" class=\"method-signature\">public <strong>useDynamicUpdate</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $dynamicUpdate)</h3> <p>Sets if a model must use dynamic update instead of the all-field update</p> <h3 id=\"isusingdynamicupdate\" class=\"method-signature\">public <strong>isUsingDynamicUpdate</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Checks if a model is using dynamic update instead of all-field update</p> <h3 id=\"addhasone\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model_relation\"><em>Phalcon\\Mvc\\Model\\Relation</em></a> <strong>addHasOne</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> $model, <em>mixed</em> $fields, <em>string</em> $referencedModel, <em>mixed</em> $referencedFields, [<em>array</em> $options])</h3> <p>Setup a 1-1 relation between two models</p> <h3 id=\"addbelongsto\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model_relation\"><em>Phalcon\\Mvc\\Model\\Relation</em></a> <strong>addBelongsTo</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> $model, <em>mixed</em> $fields, <em>string</em> $referencedModel, <em>mixed</em> $referencedFields, [<em>array</em> $options])</h3> <p>Setup a relation reverse many to one between two models</p> <h3 id=\"addhasmany\" class=\"method-signature\">public <strong>addHasMany</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $fields, <em>string</em> $referencedModel, <em>mixed</em> $referencedFields, [<em>array</em> $options])</h3> <p>Setup a relation 1-n between two models</p> <h3 id=\"addhasmanytomany\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model_relation\"><em>Phalcon\\Mvc\\Model\\Relation</em></a> <strong>addHasManyToMany</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>string</em> $fields, <em>string</em> $intermediateModel, <em>string</em> $intermediateFields, <em>string</em> $intermediateReferencedFields, <em>string</em> $referencedModel, <em>string</em> $referencedFields, [<em>array</em> $options])</h3> <p>Setups a relation n-m between two models</p> <h3 id=\"existsbelongsto\" class=\"method-signature\">public <strong>existsBelongsTo</strong> (<em>mixed</em> $modelName, <em>mixed</em> $modelRelation)</h3> <p>Checks whether a model has a belongsTo relation with another model</p> <h3 id=\"existshasmany\" class=\"method-signature\">public <strong>existsHasMany</strong> (<em>mixed</em> $modelName, <em>mixed</em> $modelRelation)</h3> <p>Checks whether a model has a hasMany relation with another model</p> <h3 id=\"existshasone\" class=\"method-signature\">public <strong>existsHasOne</strong> (<em>mixed</em> $modelName, <em>mixed</em> $modelRelation)</h3> <p>Checks whether a model has a hasOne relation with another model</p> <h3 id=\"existshasmanytomany\" class=\"method-signature\">public <strong>existsHasManyToMany</strong> (<em>mixed</em> $modelName, <em>mixed</em> $modelRelation)</h3> <p>Checks whether a model has a hasManyToMany relation with another model</p> <h3 id=\"getrelationbyalias\" class=\"method-signature\">public <strong>getRelationByAlias</strong> (<em>mixed</em> $modelName, <em>mixed</em> $alias)</h3> <p>Returns a relation by its alias</p> <h3 id=\"_mergefindparameters\" class=\"method-signature\">final protected <strong>_mergeFindParameters</strong> (<em>mixed</em> $findParamsOne, <em>mixed</em> $findParamsTwo)</h3> <p>Merge two arrays of find parameters</p> <h3 id=\"getrelationrecords\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model_resultset_simple\"><em>Phalcon\\Mvc\\Model\\Resultset\\Simple</em></a> <a href=\"#id1\"><span class=\"problematic\" id=\"id2\">|</span></a>PhalconMvcModelResultsetSimple|int|false <strong>getRelationRecords</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_relationinterface\"><em>Phalcon\\Mvc\\Model\\RelationInterface</em></a> $relation, <em>mixed</em> $method, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $record, [<em>mixed</em> $parameters])</h3> <p>Helper method to query records based on a relation definition</p> <h3 id=\"getreusablerecords\" class=\"method-signature\">public <strong>getReusableRecords</strong> (<em>mixed</em> $modelName, <em>mixed</em> $key)</h3> <p>Returns a reusable object from the internal list</p> <h3 id=\"setreusablerecords\" class=\"method-signature\">public <strong>setReusableRecords</strong> (<em>mixed</em> $modelName, <em>mixed</em> $key, <em>mixed</em> $records)</h3> <p>Stores a reusable record in the internal list</p> <h3 id=\"clearreusableobjects\" class=\"method-signature\">public <strong>clearReusableObjects</strong> ()</h3> <p>Clears the internal reusable list</p> <h3 id=\"getbelongstorecords\" class=\"method-signature\">public <strong>getBelongsToRecords</strong> (<em>mixed</em> $method, <em>mixed</em> $modelName, <em>mixed</em> $modelRelation, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $record, [<em>mixed</em> $parameters])</h3> <p>Gets belongsTo related records from a model</p> <h3 id=\"gethasmanyrecords\" class=\"method-signature\">public <strong>getHasManyRecords</strong> (<em>mixed</em> $method, <em>mixed</em> $modelName, <em>mixed</em> $modelRelation, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $record, [<em>mixed</em> $parameters])</h3> <p>Gets hasMany related records from a model</p> <h3 id=\"gethasonerecords\" class=\"method-signature\">public <strong>getHasOneRecords</strong> (<em>mixed</em> $method, <em>mixed</em> $modelName, <em>mixed</em> $modelRelation, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $record, [<em>mixed</em> $parameters])</h3> <p>Gets belongsTo related records from a model</p> <h3 id=\"getbelongsto\" class=\"method-signature\">public <strong>getBelongsTo</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Gets all the belongsTo relations defined in a model</p> <pre class=\"highlight-php\" data-language=\"php\">$relations = $modelsManager-&gt;getBelongsTo(new Robots());\n</pre> <h3 id=\"gethasmany\" class=\"method-signature\">public <strong>getHasMany</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Gets hasMany relations defined on a model</p> <h3 id=\"gethasone\" class=\"method-signature\">public <strong>getHasOne</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Gets hasOne relations defined on a model</p> <h3 id=\"gethasmanytomany\" class=\"method-signature\">public <strong>getHasManyToMany</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Gets hasManyToMany relations defined on a model</p> <h3 id=\"gethasoneandhasmany\" class=\"method-signature\">public <strong>getHasOneAndHasMany</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Gets hasOne relations defined on a model</p> <h3 id=\"getrelations\" class=\"method-signature\">public <strong>getRelations</strong> (<em>mixed</em> $modelName)</h3> <p>Query all the relationships defined on a model</p> <h3 id=\"getrelationsbetween\" class=\"method-signature\">public <strong>getRelationsBetween</strong> (<em>mixed</em> $first, <em>mixed</em> $second)</h3> <p>Query the first relationship defined between two models</p> <h3 id=\"createquery\" class=\"method-signature\">public <strong>createQuery</strong> (<em>mixed</em> $phql)</h3> <p>Creates a Phalcon\\Mvc\\Model\\Query without execute it</p> <h3 id=\"executequery\" class=\"method-signature\">public <strong>executeQuery</strong> (<em>mixed</em> $phql, [<em>mixed</em> $placeholders], [<em>mixed</em> $types])</h3> <p>Creates a Phalcon\\Mvc\\Model\\Query and execute it</p> <h3 id=\"createbuilder\" class=\"method-signature\">public <strong>createBuilder</strong> ([<em>mixed</em> $params])</h3> <p>Creates a Phalcon\\Mvc\\Model\\Query\\Builder</p> <h3 id=\"getlastquery\" class=\"method-signature\">public <strong>getLastQuery</strong> ()</h3> <p>Returns the last query created or executed in the models manager</p> <h3 id=\"registernamespacealias\" class=\"method-signature\">public <strong>registerNamespaceAlias</strong> (<em>mixed</em> $alias, <em>mixed</em> $namespaceName)</h3> <p>Registers shorter aliases for namespaces in PHQL statements</p> <h3 id=\"getnamespacealias\" class=\"method-signature\">public <strong>getNamespaceAlias</strong> (<em>mixed</em> $alias)</h3> <p>Returns a real namespace from its alias</p> <h3 id=\"getnamespacealiases\" class=\"method-signature\">public <strong>getNamespaceAliases</strong> ()</h3> <p>Returns all the registered namespace aliases</p> <h3 id=\"__destruct\" class=\"method-signature\">public <strong>__destruct</strong> ()</h3> <p>Destroys the current PHQL cache</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Manager.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Manager.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_metadata":"<h1 id=\"abstract-class-phalcon-mvc-model-metadata\">Abstract class <strong>Phalcon\\Mvc\\Model\\MetaData</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_mvc_model_metadatainterface\"><em>Phalcon\\Mvc\\Model\\MetaDataInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Because Phalcon\\Mvc\\Model requires meta-data like field names, data types, primary keys, etc. this component collect them and store for further querying by Phalcon\\Mvc\\Model. Phalcon\\Mvc\\Model\\MetaData can also use adapters to store temporarily or permanently the meta-data. A standard Phalcon\\Mvc\\Model\\MetaData can be used to query model attributes:</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData = new \\Phalcon\\Mvc\\Model\\MetaData\\Memory();\n$attributes = $metaData-&gt;getAttributes(new Robots());\nprint_r($attributes);\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"models_attributes\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_ATTRIBUTES</strong>\n</h3> <h3 id=\"models_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_non_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NON_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_not_null\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NOT_NULL</strong>\n</h3> <h3 id=\"models_data_types\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES</strong>\n</h3> <h3 id=\"models_data_types_numeric\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_NUMERIC</strong>\n</h3> <h3 id=\"models_date_at\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_AT</strong>\n</h3> <h3 id=\"models_date_in\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_IN</strong>\n</h3> <h3 id=\"models_identity_column\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_IDENTITY_COLUMN</strong>\n</h3> <h3 id=\"models_data_types_bind\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_BIND</strong>\n</h3> <h3 id=\"models_automatic_default_insert\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_INSERT</strong>\n</h3> <h3 id=\"models_automatic_default_update\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_UPDATE</strong>\n</h3> <h3 id=\"models_default_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DEFAULT_VALUES</strong>\n</h3> <h3 id=\"models_empty_string_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_EMPTY_STRING_VALUES</strong>\n</h3> <h3 id=\"models_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_COLUMN_MAP</strong>\n</h3> <h3 id=\"models_reverse_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_REVERSE_COLUMN_MAP</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"_initialize\" class=\"method-signature\">final protected <strong>_initialize</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $key, <em>mixed</em> $table, <em>mixed</em> $schema)</h3> <p>Initialize the metadata for certain table</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the DependencyInjector container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the DependencyInjector container</p> <h3 id=\"setstrategy\" class=\"method-signature\">public <strong>setStrategy</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_metadata_strategyinterface\"><em>Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface</em></a> $strategy)</h3> <p>Set the meta-data extraction strategy</p> <h3 id=\"getstrategy\" class=\"method-signature\">public <strong>getStrategy</strong> ()</h3> <p>Return the strategy to obtain the meta-data</p> <h3 id=\"readmetadata\" class=\"method-signature\">final public <strong>readMetaData</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Reads the complete meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaData(new Robots());\n</pre> <h3 id=\"readmetadataindex\" class=\"method-signature\">final public <strong>readMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index)</h3> <p>Reads meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaDataIndex(new Robots(), 0);\n</pre> <h3 id=\"writemetadataindex\" class=\"method-signature\">final public <strong>writeMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index, <em>mixed</em> $data)</h3> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;writeColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP, array('leName' =&gt; 'name')));\n</pre> <h3 id=\"readcolumnmap\" class=\"method-signature\">final public <strong>readColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Reads the ordered/reversed column map for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMap(new Robots()));\n</pre> <h3 id=\"readcolumnmapindex\" class=\"method-signature\">final public <strong>readColumnMapIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index)</h3> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP));\n</pre> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns table attributes names (fields)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAttributes(new Robots()));\n</pre> <h3 id=\"getprimarykeyattributes\" class=\"method-signature\">public <strong>getPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns an array of fields which are part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnonprimarykeyattributes\" class=\"method-signature\">public <strong>getNonPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns an array of fields which are not part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNonPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnotnullattributes\" class=\"method-signature\">public <strong>getNotNullAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns an array of not null attributes</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNotNullAttributes(new Robots()));\n</pre> <h3 id=\"getdatatypes\" class=\"method-signature\">public <strong>getDataTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns attributes and their data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypes(new Robots()));\n</pre> <h3 id=\"getdatatypesnumeric\" class=\"method-signature\">public <strong>getDataTypesNumeric</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns attributes which types are numerical</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypesNumeric(new Robots()));\n</pre> <h3 id=\"getidentityfield\" class=\"method-signature\">public <em>string</em> <strong>getIdentityField</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns the name of identity field (if one is present)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getIdentityField(new Robots()));\n</pre> <h3 id=\"getbindtypes\" class=\"method-signature\">public <strong>getBindTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns attributes and their bind data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getBindTypes(new Robots()));\n</pre> <h3 id=\"getautomaticcreateattributes\" class=\"method-signature\">public <strong>getAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticCreateAttributes(new Robots()));\n</pre> <h3 id=\"getautomaticupdateattributes\" class=\"method-signature\">public <strong>getAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticUpdateAttributes(new Robots()));\n</pre> <h3 id=\"setautomaticcreateattributes\" class=\"method-signature\">public <strong>setAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes)</h3> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticCreateAttributes(new Robots(), array('created_at' =&gt; true));\n</pre> <h3 id=\"setautomaticupdateattributes\" class=\"method-signature\">public <strong>setAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes)</h3> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticUpdateAttributes(new Robots(), array('modified_at' =&gt; true));\n</pre> <h3 id=\"setemptystringattributes\" class=\"method-signature\">public <strong>setEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes)</h3> <p>Set the attributes that allow empty string values</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setEmptyStringAttributes(new Robots(), array('name' =&gt; true));\n</pre> <h3 id=\"getemptystringattributes\" class=\"method-signature\">public <strong>getEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns attributes allow empty strings</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getEmptyStringAttributes(new Robots()));\n</pre> <h3 id=\"getdefaultvalues\" class=\"method-signature\">public <strong>getDefaultValues</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns attributes (which have default values) and their default values</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDefaultValues(new Robots()));\n</pre> <h3 id=\"getcolumnmap\" class=\"method-signature\">public <strong>getColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns the column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getColumnMap(new Robots()));\n</pre> <h3 id=\"getreversecolumnmap\" class=\"method-signature\">public <strong>getReverseColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>Returns the reverse column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getReverseColumnMap(new Robots()));\n</pre> <h3 id=\"hasattribute\" class=\"method-signature\">public <strong>hasAttribute</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $attribute)</h3> <p>Check if a model has certain attribute</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;hasAttribute(new Robots(), 'name'));\n</pre> <h3 id=\"isempty\" class=\"method-signature\">public <strong>isEmpty</strong> ()</h3> <p>Checks if the internal meta-data container is empty</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;isEmpty());\n</pre> <h3 id=\"reset\" class=\"method-signature\">public <strong>reset</strong> ()</h3> <p>Resets internal meta-data in order to regenerate it</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;reset();\n</pre> <h3 id=\"read\" class=\"method-signature\">abstract public <strong>read</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Mvc\\Model\\MetaDataInterface</small>\n</h3> <p>...</p> <h3 id=\"write\" class=\"method-signature\">abstract public <strong>write</strong> (<em>mixed</em> $key, <em>mixed</em> $data) <small>inherited from Phalcon\\Mvc\\Model\\MetaDataInterface</small>\n</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_query_lang":"<h1 id=\"abstract-class-phalcon-mvc-model-query-lang\">Abstract class <strong>Phalcon\\Mvc\\Model\\Query\\Lang</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/query/lang.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>PHQL is implemented as a parser (written in C) that translates syntax in that of the target RDBMS. It allows Phalcon to offer a unified SQL language to the developer, while internally doing all the work of translating PHQL instructions to the most optimal SQL instructions depending on the RDBMS type associated with a model. To achieve the highest performance possible, we wrote a parser that uses the same technology as SQLite. This technology provides a small in-memory parser with a very low memory footprint that is also thread-safe.</p> <pre class=\"highlight-php\" data-language=\"php\">$intermediate = Phalcon\\Mvc\\Model\\Query\\Lang::parsePHQL(\"SELECT r.* FROM Robots r LIMIT 10\");\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"parsephql\" class=\"method-signature\">public static <em>string</em> <strong>parsePHQL</strong> (<em>string</em> $phql)</h3> <p>Parses a PHQL statement returning an intermediate representation (IR)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Lang.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Lang.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_relation":"<h1 id=\"class-phalcon-mvc-model-relation\">Class <strong>Phalcon\\Mvc\\Model\\Relation</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_relationinterface\"><em>Phalcon\\Mvc\\Model\\RelationInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/relation.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class represents a relationship between two models</p>  <h2 id=\"constants\">Constants</h2> <h3 id=\"belongs_to\" class=\"method-signature\">\n<em>integer</em> <strong>BELONGS_TO</strong>\n</h3> <h3 id=\"has_one\" class=\"method-signature\">\n<em>integer</em> <strong>HAS_ONE</strong>\n</h3> <h3 id=\"has_many\" class=\"method-signature\">\n<em>integer</em> <strong>HAS_MANY</strong>\n</h3> <h3 id=\"has_one_through\" class=\"method-signature\">\n<em>integer</em> <strong>HAS_ONE_THROUGH</strong>\n</h3> <h3 id=\"has_many_through\" class=\"method-signature\">\n<em>integer</em> <strong>HAS_MANY_THROUGH</strong>\n</h3> <h3 id=\"no_action\" class=\"method-signature\">\n<em>integer</em> <strong>NO_ACTION</strong>\n</h3> <h3 id=\"action_restrict\" class=\"method-signature\">\n<em>integer</em> <strong>ACTION_RESTRICT</strong>\n</h3> <h3 id=\"action_cascade\" class=\"method-signature\">\n<em>integer</em> <strong>ACTION_CASCADE</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>int</em> $type, <em>string</em> $referencedModel, <em>string|array</em> $fields, <em>string|array</em> $referencedFields, [<em>array</em> $options])</h3> <p>Phalcon\\Mvc\\Model\\Relation constructor</p> <h3 id=\"setintermediaterelation\" class=\"method-signature\">public <strong>setIntermediateRelation</strong> (<em>string|array</em> $intermediateFields, <em>string</em> $intermediateModel, <em>string</em> $intermediateReferencedFields)</h3> <p>Sets the intermediate model data for has-<a href=\"#id1\"><span class=\"problematic\" id=\"id2\">*</span></a>-through relations</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> ()</h3> <p>Returns the relation type</p> <h3 id=\"getreferencedmodel\" class=\"method-signature\">public <strong>getReferencedModel</strong> ()</h3> <p>Returns the referenced model</p> <h3 id=\"getfields\" class=\"method-signature\">public <em>string|array</em> <strong>getFields</strong> ()</h3> <p>Returns the fields</p> <h3 id=\"getreferencedfields\" class=\"method-signature\">public <em>string|array</em> <strong>getReferencedFields</strong> ()</h3> <p>Returns the referenced fields</p> <h3 id=\"getoptions\" class=\"method-signature\">public <em>string|array</em> <strong>getOptions</strong> ()</h3> <p>Returns the options</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $name)</h3> <p>Returns an option by the specified name If the option doesn’t exist null is returned</p> <h3 id=\"isforeignkey\" class=\"method-signature\">public <strong>isForeignKey</strong> ()</h3> <p>Check whether the relation act as a foreign key</p> <h3 id=\"getforeignkey\" class=\"method-signature\">public <em>string|array</em> <strong>getForeignKey</strong> ()</h3> <p>Returns the foreign key configuration</p> <h3 id=\"getparams\" class=\"method-signature\">public <em>array</em> <strong>getParams</strong> ()</h3> <p>Returns parameters that must be always used when the related records are obtained</p> <h3 id=\"isthrough\" class=\"method-signature\">public <strong>isThrough</strong> ()</h3> <p>Check whether the relation is a ‘many-to-many’ relation or not</p> <h3 id=\"isreusable\" class=\"method-signature\">public <strong>isReusable</strong> ()</h3> <p>Check if records returned by getting belongs-to/has-many are implicitly cached during the current request</p> <h3 id=\"getintermediatefields\" class=\"method-signature\">public <em>string|array</em> <strong>getIntermediateFields</strong> ()</h3> <p>Gets the intermediate fields for has-<a href=\"#id3\"><span class=\"problematic\" id=\"id4\">*</span></a>-through relations</p> <h3 id=\"getintermediatemodel\" class=\"method-signature\">public <strong>getIntermediateModel</strong> ()</h3> <p>Gets the intermediate model for has-<a href=\"#id5\"><span class=\"problematic\" id=\"id6\">*</span></a>-through relations</p> <h3 id=\"getintermediatereferencedfields\" class=\"method-signature\">public <em>string|array</em> <strong>getIntermediateReferencedFields</strong> ()</h3> <p>Gets the intermediate referenced fields for has-<a href=\"#id7\"><span class=\"problematic\" id=\"id8\">*</span></a>-through relations</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Relation.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Relation.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_query":"<h1 id=\"class-phalcon-mvc-model-query\">Class <strong>Phalcon\\Mvc\\Model\\Query</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_queryinterface\"><em>Phalcon\\Mvc\\Model\\QueryInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/query.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class takes a PHQL intermediate representation and executes it.</p> <pre class=\"highlight-php\" data-language=\"php\">$phql = \"SELECT c.price*0.16 AS taxes, c.* FROM Cars AS c JOIN Brands AS b\n          WHERE b.name = :name: ORDER BY c.name\";\n\n $result = $manager-&gt;executeQuery($phql, array(\n   \"name\" =&gt; \"Lamborghini\"\n ));\n\n foreach ($result as $row) {\n   echo \"Name: \",  $row-&gt;cars-&gt;name, \"\\n\";\n   echo \"Price: \", $row-&gt;cars-&gt;price, \"\\n\";\n   echo \"Taxes: \", $row-&gt;taxes, \"\\n\";\n }\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"type_select\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_SELECT</strong>\n</h3> <h3 id=\"type_insert\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_INSERT</strong>\n</h3> <h3 id=\"type_update\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_UPDATE</strong>\n</h3> <h3 id=\"type_delete\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_DELETE</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $phql], [<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector], [<em>mixed</em> $options])</h3> <p>Phalcon\\Mvc\\Model\\Query constructor</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the dependency injection container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the dependency injection container</p> <h3 id=\"setuniquerow\" class=\"method-signature\">public <strong>setUniqueRow</strong> (<em>mixed</em> $uniqueRow)</h3> <p>Tells to the query if only the first row in the resultset must be returned</p> <h3 id=\"getuniquerow\" class=\"method-signature\">public <strong>getUniqueRow</strong> ()</h3> <p>Check if the query is programmed to get only the first row in the resultset</p> <h3 id=\"_getqualified\" class=\"method-signature\">final protected <strong>_getQualified</strong> (<em>array</em> $expr)</h3> <p>Replaces the model’s name to its source name in a qualified-name expression</p> <h3 id=\"_getcallargument\" class=\"method-signature\">final protected <strong>_getCallArgument</strong> (<em>array</em> $argument)</h3> <p>Resolves an expression in a single call argument</p> <h3 id=\"_getcaseexpression\" class=\"method-signature\">final protected <strong>_getCaseExpression</strong> (<em>array</em> $expr)</h3> <p>Resolves an expression in a single call argument</p> <h3 id=\"_getfunctioncall\" class=\"method-signature\">final protected <strong>_getFunctionCall</strong> (<em>array</em> $expr)</h3> <p>Resolves an expression in a single call argument</p> <h3 id=\"_getexpression\" class=\"method-signature\">final protected <em>string</em> <strong>_getExpression</strong> (<em>array</em> $expr, [<em>boolean</em> $quoting])</h3> <p>Resolves an expression from its intermediate code into a string</p> <h3 id=\"_getselectcolumn\" class=\"method-signature\">final protected <strong>_getSelectColumn</strong> (<em>array</em> $column)</h3> <p>Resolves a column from its intermediate representation into an array used to determine if the resultset produced is simple or complex</p> <h3 id=\"_gettable\" class=\"method-signature\">final protected <em>string</em> <strong>_getTable</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_managerinterface\"><em>Phalcon\\Mvc\\Model\\ManagerInterface</em></a> $manager, <em>array</em> $qualifiedName)</h3> <p>Resolves a table in a SELECT statement checking if the model exists</p> <h3 id=\"_getjoin\" class=\"method-signature\">final protected <strong>_getJoin</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_managerinterface\"><em>Phalcon\\Mvc\\Model\\ManagerInterface</em></a> $manager, <em>mixed</em> $join)</h3> <p>Resolves a JOIN clause checking if the associated models exist</p> <h3 id=\"_getjointype\" class=\"method-signature\">final protected <em>string</em> <strong>_getJoinType</strong> (<em>array</em> $join)</h3> <p>Resolves a JOIN type</p> <h3 id=\"_getsinglejoin\" class=\"method-signature\">final protected <em>array</em> <strong>_getSingleJoin</strong> (<em>string</em> $joinType, <em>string</em> $joinSource, <em>string</em> $modelAlias, <em>string</em> $joinAlias, <a class=\"reference internal\" href=\"phalcon_mvc_model_relationinterface\"><em>Phalcon\\Mvc\\Model\\RelationInterface</em></a> $relation)</h3> <p>Resolves joins involving has-one/belongs-to/has-many relations</p> <h3 id=\"_getmultijoin\" class=\"method-signature\">final protected <em>array</em> <strong>_getMultiJoin</strong> (<em>string</em> $joinType, <em>string</em> $joinSource, <em>string</em> $modelAlias, <em>string</em> $joinAlias, <a class=\"reference internal\" href=\"phalcon_mvc_model_relationinterface\"><em>Phalcon\\Mvc\\Model\\RelationInterface</em></a> $relation)</h3> <p>Resolves joins involving many-to-many relations</p> <h3 id=\"_getjoins\" class=\"method-signature\">final protected <em>array</em> <strong>_getJoins</strong> (<em>array</em> $select)</h3> <p>Processes the JOINs in the query returning an internal representation for the database dialect</p> <h3 id=\"_getorderclause\" class=\"method-signature\">final protected <em>array</em> <strong>_getOrderClause</strong> (<em>array|string</em> $order)</h3> <p>Returns a processed order clause for a SELECT statement</p> <h3 id=\"_getgroupclause\" class=\"method-signature\">final protected <strong>_getGroupClause</strong> (<em>array</em> $group)</h3> <p>Returns a processed group clause for a SELECT statement</p> <h3 id=\"_getlimitclause\" class=\"method-signature\">final protected <strong>_getLimitClause</strong> (<em>array</em> $limitClause)</h3> <p>Returns a processed limit clause for a SELECT statement</p> <h3 id=\"_prepareselect\" class=\"method-signature\">final protected <strong>_prepareSelect</strong> ([<em>mixed</em> $ast], [<em>mixed</em> $merge])</h3> <p>Analyzes a SELECT intermediate code and produces an array to be executed later</p> <h3 id=\"_prepareinsert\" class=\"method-signature\">final protected <strong>_prepareInsert</strong> ()</h3> <p>Analyzes an INSERT intermediate code and produces an array to be executed later</p> <h3 id=\"_prepareupdate\" class=\"method-signature\">final protected <strong>_prepareUpdate</strong> ()</h3> <p>Analyzes an UPDATE intermediate code and produces an array to be executed later</p> <h3 id=\"_preparedelete\" class=\"method-signature\">final protected <strong>_prepareDelete</strong> ()</h3> <p>Analyzes a DELETE intermediate code and produces an array to be executed later</p> <h3 id=\"parse\" class=\"method-signature\">public <strong>parse</strong> ()</h3> <p>Parses the intermediate code produced by Phalcon\\Mvc\\Model\\Query\\Lang generating another intermediate representation that could be executed by Phalcon\\Mvc\\Model\\Query</p> <h3 id=\"getcache\" class=\"method-signature\">public <strong>getCache</strong> ()</h3> <p>Returns the current cache backend instance</p> <h3 id=\"_executeselect\" class=\"method-signature\">final protected <strong>_executeSelect</strong> (<em>mixed</em> $intermediate, <em>mixed</em> $bindParams, <em>mixed</em> $bindTypes, [<em>mixed</em> $simulate])</h3> <p>Executes the SELECT intermediate representation producing a Phalcon\\Mvc\\Model\\Resultset</p> <h3 id=\"_executeinsert\" class=\"method-signature\">final protected <a class=\"reference internal\" href=\"phalcon_mvc_model_query_statusinterface\"><em>Phalcon\\Mvc\\Model\\Query\\StatusInterface</em></a> <strong>_executeInsert</strong> (<em>array</em> $intermediate, <em>array</em> $bindParams, <em>array</em> $bindTypes)</h3> <p>Executes the INSERT intermediate representation producing a Phalcon\\Mvc\\Model\\Query\\Status</p> <h3 id=\"_executeupdate\" class=\"method-signature\">final protected <a class=\"reference internal\" href=\"phalcon_mvc_model_query_statusinterface\"><em>Phalcon\\Mvc\\Model\\Query\\StatusInterface</em></a> <strong>_executeUpdate</strong> (<em>array</em> $intermediate, <em>array</em> $bindParams, <em>array</em> $bindTypes)</h3> <p>Executes the UPDATE intermediate representation producing a Phalcon\\Mvc\\Model\\Query\\Status</p> <h3 id=\"_executedelete\" class=\"method-signature\">final protected <a class=\"reference internal\" href=\"phalcon_mvc_model_query_statusinterface\"><em>Phalcon\\Mvc\\Model\\Query\\StatusInterface</em></a> <strong>_executeDelete</strong> (<em>array</em> $intermediate, <em>array</em> $bindParams, <em>array</em> $bindTypes)</h3> <p>Executes the DELETE intermediate representation producing a Phalcon\\Mvc\\Model\\Query\\Status</p> <h3 id=\"_getrelatedrecords\" class=\"method-signature\">final protected <a class=\"reference internal\" href=\"phalcon_mvc_model_resultsetinterface\"><em>Phalcon\\Mvc\\Model\\ResultsetInterface</em></a> <strong>_getRelatedRecords</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $intermediate, <em>array</em> $bindParams, <em>array</em> $bindTypes)</h3> <p>Query the records on which the UPDATE/DELETE operation well be done</p> <h3 id=\"execute\" class=\"method-signature\">public <em>mixed</em> <strong>execute</strong> ([<em>array</em> $bindParams], [<em>array</em> $bindTypes])</h3> <p>Executes a parsed PHQL statement</p> <h3 id=\"getsingleresult\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> <strong>getSingleResult</strong> ([<em>array</em> $bindParams], [<em>array</em> $bindTypes])</h3> <p>Executes the query returning the first result</p> <h3 id=\"settype\" class=\"method-signature\">public <strong>setType</strong> (<em>mixed</em> $type)</h3> <p>Sets the type of PHQL statement to be executed</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> ()</h3> <p>Gets the type of PHQL statement executed</p> <h3 id=\"setbindparams\" class=\"method-signature\">public <strong>setBindParams</strong> (<em>array</em> $bindParams, [<em>mixed</em> $merge])</h3> <p>Set default bind parameters</p> <h3 id=\"getbindparams\" class=\"method-signature\">public <em>array</em> <strong>getBindParams</strong> ()</h3> <p>Returns default bind params</p> <h3 id=\"setbindtypes\" class=\"method-signature\">public <strong>setBindTypes</strong> (<em>array</em> $bindTypes, [<em>mixed</em> $merge])</h3> <p>Set default bind parameters</p> <h3 id=\"setsharedlock\" class=\"method-signature\">public <strong>setSharedLock</strong> ([<em>mixed</em> $sharedLock])</h3> <p>Set SHARED LOCK clause</p> <h3 id=\"getbindtypes\" class=\"method-signature\">public <em>array</em> <strong>getBindTypes</strong> ()</h3> <p>Returns default bind types</p> <h3 id=\"setintermediate\" class=\"method-signature\">public <strong>setIntermediate</strong> (<em>array</em> $intermediate)</h3> <p>Allows to set the IR to be executed</p> <h3 id=\"getintermediate\" class=\"method-signature\">public <em>array</em> <strong>getIntermediate</strong> ()</h3> <p>Returns the intermediate representation of the PHQL statement</p> <h3 id=\"cache\" class=\"method-signature\">public <strong>cache</strong> (<em>mixed</em> $cacheOptions)</h3> <p>Sets the cache parameters of the query</p> <h3 id=\"getcacheoptions\" class=\"method-signature\">public <strong>getCacheOptions</strong> ()</h3> <p>Returns the current cache options</p> <h3 id=\"getsql\" class=\"method-signature\">public <strong>getSql</strong> ()</h3> <p>Returns the SQL to be generated by the internal PHQL (only works in SELECT statements)</p> <h3 id=\"clean\" class=\"method-signature\">public static <strong>clean</strong> ()</h3> <p>Destroys the internal PHQL cache</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_metadata_files":"<h1 id=\"class-phalcon-mvc-model-metadata-files\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Files</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_metadata\"><em>Phalcon\\Mvc\\Model\\MetaData</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_metadatainterface\"><em>Phalcon\\Mvc\\Model\\MetaDataInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/files.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Stores model meta-data in PHP files.</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData = new \\Phalcon\\Mvc\\Model\\Metadata\\Files(array(\n    'metaDataDir' =&gt; 'app/cache/metadata/'\n ));\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"models_attributes\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_ATTRIBUTES</strong>\n</h3> <h3 id=\"models_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_non_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NON_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_not_null\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NOT_NULL</strong>\n</h3> <h3 id=\"models_data_types\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES</strong>\n</h3> <h3 id=\"models_data_types_numeric\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_NUMERIC</strong>\n</h3> <h3 id=\"models_date_at\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_AT</strong>\n</h3> <h3 id=\"models_date_in\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_IN</strong>\n</h3> <h3 id=\"models_identity_column\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_IDENTITY_COLUMN</strong>\n</h3> <h3 id=\"models_data_types_bind\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_BIND</strong>\n</h3> <h3 id=\"models_automatic_default_insert\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_INSERT</strong>\n</h3> <h3 id=\"models_automatic_default_update\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_UPDATE</strong>\n</h3> <h3 id=\"models_default_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DEFAULT_VALUES</strong>\n</h3> <h3 id=\"models_empty_string_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_EMPTY_STRING_VALUES</strong>\n</h3> <h3 id=\"models_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_COLUMN_MAP</strong>\n</h3> <h3 id=\"models_reverse_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_REVERSE_COLUMN_MAP</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <p>Phalcon\\Mvc\\Model\\MetaData\\Files constructor</p> <h3 id=\"read\" class=\"method-signature\">public <em>mixed</em> <strong>read</strong> (<em>string</em> $key)</h3> <p>Reads meta-data from files</p> <h3 id=\"write\" class=\"method-signature\">public <strong>write</strong> (<em>string</em> $key, <em>array</em> $data)</h3> <p>Writes the meta-data to files</p> <h3 id=\"_initialize\" class=\"method-signature\">final protected <strong>_initialize</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $key, <em>mixed</em> $table, <em>mixed</em> $schema) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Initialize the metadata for certain table</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Sets the DependencyInjector container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the DependencyInjector container</p> <h3 id=\"setstrategy\" class=\"method-signature\">public <strong>setStrategy</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_metadata_strategyinterface\"><em>Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface</em></a> $strategy) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the meta-data extraction strategy</p> <h3 id=\"getstrategy\" class=\"method-signature\">public <strong>getStrategy</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Return the strategy to obtain the meta-data</p> <h3 id=\"readmetadata\" class=\"method-signature\">final public <strong>readMetaData</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads the complete meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaData(new Robots());\n</pre> <h3 id=\"readmetadataindex\" class=\"method-signature\">final public <strong>readMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaDataIndex(new Robots(), 0);\n</pre> <h3 id=\"writemetadataindex\" class=\"method-signature\">final public <strong>writeMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index, <em>mixed</em> $data) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;writeColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP, array('leName' =&gt; 'name')));\n</pre> <h3 id=\"readcolumnmap\" class=\"method-signature\">final public <strong>readColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads the ordered/reversed column map for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMap(new Robots()));\n</pre> <h3 id=\"readcolumnmapindex\" class=\"method-signature\">final public <strong>readColumnMapIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP));\n</pre> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns table attributes names (fields)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAttributes(new Robots()));\n</pre> <h3 id=\"getprimarykeyattributes\" class=\"method-signature\">public <strong>getPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of fields which are part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnonprimarykeyattributes\" class=\"method-signature\">public <strong>getNonPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of fields which are not part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNonPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnotnullattributes\" class=\"method-signature\">public <strong>getNotNullAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of not null attributes</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNotNullAttributes(new Robots()));\n</pre> <h3 id=\"getdatatypes\" class=\"method-signature\">public <strong>getDataTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes and their data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypes(new Robots()));\n</pre> <h3 id=\"getdatatypesnumeric\" class=\"method-signature\">public <strong>getDataTypesNumeric</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes which types are numerical</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypesNumeric(new Robots()));\n</pre> <h3 id=\"getidentityfield\" class=\"method-signature\">public <em>string</em> <strong>getIdentityField</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the name of identity field (if one is present)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getIdentityField(new Robots()));\n</pre> <h3 id=\"getbindtypes\" class=\"method-signature\">public <strong>getBindTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes and their bind data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getBindTypes(new Robots()));\n</pre> <h3 id=\"getautomaticcreateattributes\" class=\"method-signature\">public <strong>getAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticCreateAttributes(new Robots()));\n</pre> <h3 id=\"getautomaticupdateattributes\" class=\"method-signature\">public <strong>getAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticUpdateAttributes(new Robots()));\n</pre> <h3 id=\"setautomaticcreateattributes\" class=\"method-signature\">public <strong>setAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticCreateAttributes(new Robots(), array('created_at' =&gt; true));\n</pre> <h3 id=\"setautomaticupdateattributes\" class=\"method-signature\">public <strong>setAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticUpdateAttributes(new Robots(), array('modified_at' =&gt; true));\n</pre> <h3 id=\"setemptystringattributes\" class=\"method-signature\">public <strong>setEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that allow empty string values</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setEmptyStringAttributes(new Robots(), array('name' =&gt; true));\n</pre> <h3 id=\"getemptystringattributes\" class=\"method-signature\">public <strong>getEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes allow empty strings</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getEmptyStringAttributes(new Robots()));\n</pre> <h3 id=\"getdefaultvalues\" class=\"method-signature\">public <strong>getDefaultValues</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes (which have default values) and their default values</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDefaultValues(new Robots()));\n</pre> <h3 id=\"getcolumnmap\" class=\"method-signature\">public <strong>getColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getColumnMap(new Robots()));\n</pre> <h3 id=\"getreversecolumnmap\" class=\"method-signature\">public <strong>getReverseColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the reverse column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getReverseColumnMap(new Robots()));\n</pre> <h3 id=\"hasattribute\" class=\"method-signature\">public <strong>hasAttribute</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $attribute) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Check if a model has certain attribute</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;hasAttribute(new Robots(), 'name'));\n</pre> <h3 id=\"isempty\" class=\"method-signature\">public <strong>isEmpty</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Checks if the internal meta-data container is empty</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;isEmpty());\n</pre> <h3 id=\"reset\" class=\"method-signature\">public <strong>reset</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Resets internal meta-data in order to regenerate it</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;reset();\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Files.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Files.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_metadata_memcache":"<h1 id=\"class-phalcon-mvc-model-metadata-memcache\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Memcache</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_metadata\"><em>Phalcon\\Mvc\\Model\\MetaData</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_metadatainterface\"><em>Phalcon\\Mvc\\Model\\MetaDataInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/memcache.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Stores model meta-data in the Memcache. By default meta-data is stored for 48 hours (172800 seconds)</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData = new Phalcon\\Mvc\\Model\\Metadata\\Memcache(array(\n    'prefix' =&gt; 'my-app-id',\n    'lifetime' =&gt; 86400,\n    'host' =&gt; 'localhost',\n    'port' =&gt; 11211,\n    'persistent' =&gt; false\n));\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"models_attributes\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_ATTRIBUTES</strong>\n</h3> <h3 id=\"models_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_non_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NON_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_not_null\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NOT_NULL</strong>\n</h3> <h3 id=\"models_data_types\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES</strong>\n</h3> <h3 id=\"models_data_types_numeric\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_NUMERIC</strong>\n</h3> <h3 id=\"models_date_at\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_AT</strong>\n</h3> <h3 id=\"models_date_in\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_IN</strong>\n</h3> <h3 id=\"models_identity_column\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_IDENTITY_COLUMN</strong>\n</h3> <h3 id=\"models_data_types_bind\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_BIND</strong>\n</h3> <h3 id=\"models_automatic_default_insert\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_INSERT</strong>\n</h3> <h3 id=\"models_automatic_default_update\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_UPDATE</strong>\n</h3> <h3 id=\"models_default_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DEFAULT_VALUES</strong>\n</h3> <h3 id=\"models_empty_string_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_EMPTY_STRING_VALUES</strong>\n</h3> <h3 id=\"models_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_COLUMN_MAP</strong>\n</h3> <h3 id=\"models_reverse_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_REVERSE_COLUMN_MAP</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <p>Phalcon\\Mvc\\Model\\MetaData\\Memcache constructor</p> <h3 id=\"read\" class=\"method-signature\">public <strong>read</strong> (<em>mixed</em> $key)</h3> <p>Reads metadata from Memcache</p> <h3 id=\"write\" class=\"method-signature\">public <strong>write</strong> (<em>mixed</em> $key, <em>mixed</em> $data)</h3> <p>Writes the metadata to Memcache</p> <h3 id=\"reset\" class=\"method-signature\">public <strong>reset</strong> ()</h3> <p>Flush Memcache data and resets internal meta-data in order to regenerate it</p> <h3 id=\"_initialize\" class=\"method-signature\">final protected <strong>_initialize</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $key, <em>mixed</em> $table, <em>mixed</em> $schema) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Initialize the metadata for certain table</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Sets the DependencyInjector container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the DependencyInjector container</p> <h3 id=\"setstrategy\" class=\"method-signature\">public <strong>setStrategy</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_metadata_strategyinterface\"><em>Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface</em></a> $strategy) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the meta-data extraction strategy</p> <h3 id=\"getstrategy\" class=\"method-signature\">public <strong>getStrategy</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Return the strategy to obtain the meta-data</p> <h3 id=\"readmetadata\" class=\"method-signature\">final public <strong>readMetaData</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads the complete meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaData(new Robots());\n</pre> <h3 id=\"readmetadataindex\" class=\"method-signature\">final public <strong>readMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaDataIndex(new Robots(), 0);\n</pre> <h3 id=\"writemetadataindex\" class=\"method-signature\">final public <strong>writeMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index, <em>mixed</em> $data) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;writeColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP, array('leName' =&gt; 'name')));\n</pre> <h3 id=\"readcolumnmap\" class=\"method-signature\">final public <strong>readColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads the ordered/reversed column map for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMap(new Robots()));\n</pre> <h3 id=\"readcolumnmapindex\" class=\"method-signature\">final public <strong>readColumnMapIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP));\n</pre> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns table attributes names (fields)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAttributes(new Robots()));\n</pre> <h3 id=\"getprimarykeyattributes\" class=\"method-signature\">public <strong>getPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of fields which are part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnonprimarykeyattributes\" class=\"method-signature\">public <strong>getNonPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of fields which are not part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNonPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnotnullattributes\" class=\"method-signature\">public <strong>getNotNullAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of not null attributes</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNotNullAttributes(new Robots()));\n</pre> <h3 id=\"getdatatypes\" class=\"method-signature\">public <strong>getDataTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes and their data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypes(new Robots()));\n</pre> <h3 id=\"getdatatypesnumeric\" class=\"method-signature\">public <strong>getDataTypesNumeric</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes which types are numerical</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypesNumeric(new Robots()));\n</pre> <h3 id=\"getidentityfield\" class=\"method-signature\">public <em>string</em> <strong>getIdentityField</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the name of identity field (if one is present)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getIdentityField(new Robots()));\n</pre> <h3 id=\"getbindtypes\" class=\"method-signature\">public <strong>getBindTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes and their bind data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getBindTypes(new Robots()));\n</pre> <h3 id=\"getautomaticcreateattributes\" class=\"method-signature\">public <strong>getAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticCreateAttributes(new Robots()));\n</pre> <h3 id=\"getautomaticupdateattributes\" class=\"method-signature\">public <strong>getAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticUpdateAttributes(new Robots()));\n</pre> <h3 id=\"setautomaticcreateattributes\" class=\"method-signature\">public <strong>setAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticCreateAttributes(new Robots(), array('created_at' =&gt; true));\n</pre> <h3 id=\"setautomaticupdateattributes\" class=\"method-signature\">public <strong>setAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticUpdateAttributes(new Robots(), array('modified_at' =&gt; true));\n</pre> <h3 id=\"setemptystringattributes\" class=\"method-signature\">public <strong>setEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that allow empty string values</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setEmptyStringAttributes(new Robots(), array('name' =&gt; true));\n</pre> <h3 id=\"getemptystringattributes\" class=\"method-signature\">public <strong>getEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes allow empty strings</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getEmptyStringAttributes(new Robots()));\n</pre> <h3 id=\"getdefaultvalues\" class=\"method-signature\">public <strong>getDefaultValues</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes (which have default values) and their default values</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDefaultValues(new Robots()));\n</pre> <h3 id=\"getcolumnmap\" class=\"method-signature\">public <strong>getColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getColumnMap(new Robots()));\n</pre> <h3 id=\"getreversecolumnmap\" class=\"method-signature\">public <strong>getReverseColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the reverse column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getReverseColumnMap(new Robots()));\n</pre> <h3 id=\"hasattribute\" class=\"method-signature\">public <strong>hasAttribute</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $attribute) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Check if a model has certain attribute</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;hasAttribute(new Robots(), 'name'));\n</pre> <h3 id=\"isempty\" class=\"method-signature\">public <strong>isEmpty</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Checks if the internal meta-data container is empty</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;isEmpty());\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Memcache.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Memcache.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_query_status":"<h1 id=\"class-phalcon-mvc-model-query-status\">Class <strong>Phalcon\\Mvc\\Model\\Query\\Status</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_query_statusinterface\"><em>Phalcon\\Mvc\\Model\\Query\\StatusInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/query/status.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class represents the status returned by a PHQL statement like INSERT, UPDATE or DELETE. It offers context information and the related messages produced by the model which finally executes the operations when it fails</p> <pre class=\"highlight-php\" data-language=\"php\">$phql = \"UPDATE Robots SET name = :name:, type = :type:, year = :year: WHERE id = :id:\";\n$status = $app-&gt;modelsManager-&gt;executeQuery($phql, array(\n   'id' =&gt; 100,\n   'name' =&gt; 'Astroy Boy',\n   'type' =&gt; 'mechanical',\n   'year' =&gt; 1959\n));\n\n\\//Check if the update was successful\nif ($status-&gt;success() == true) {\n   echo 'OK';\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $success, [<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model])</h3> <h3 id=\"getmodel\" class=\"method-signature\">public <strong>getModel</strong> ()</h3> <p>Returns the model that executed the action</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> ()</h3> <p>Returns the messages produced because of a failed operation</p> <h3 id=\"success\" class=\"method-signature\">public <strong>success</strong> ()</h3> <p>Allows to check if the executed operation was successful</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Status.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Status.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_metadata_memory":"<h1 id=\"class-phalcon-mvc-model-metadata-memory\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Memory</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_metadata\"><em>Phalcon\\Mvc\\Model\\MetaData</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_metadatainterface\"><em>Phalcon\\Mvc\\Model\\MetaDataInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/memory.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Stores model meta-data in memory. Data will be erased when the request finishes</p>  <h2 id=\"constants\">Constants</h2> <h3 id=\"models_attributes\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_ATTRIBUTES</strong>\n</h3> <h3 id=\"models_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_non_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NON_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_not_null\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NOT_NULL</strong>\n</h3> <h3 id=\"models_data_types\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES</strong>\n</h3> <h3 id=\"models_data_types_numeric\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_NUMERIC</strong>\n</h3> <h3 id=\"models_date_at\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_AT</strong>\n</h3> <h3 id=\"models_date_in\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_IN</strong>\n</h3> <h3 id=\"models_identity_column\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_IDENTITY_COLUMN</strong>\n</h3> <h3 id=\"models_data_types_bind\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_BIND</strong>\n</h3> <h3 id=\"models_automatic_default_insert\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_INSERT</strong>\n</h3> <h3 id=\"models_automatic_default_update\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_UPDATE</strong>\n</h3> <h3 id=\"models_default_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DEFAULT_VALUES</strong>\n</h3> <h3 id=\"models_empty_string_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_EMPTY_STRING_VALUES</strong>\n</h3> <h3 id=\"models_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_COLUMN_MAP</strong>\n</h3> <h3 id=\"models_reverse_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_REVERSE_COLUMN_MAP</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <p>Phalcon\\Mvc\\Model\\MetaData\\Memory constructor</p> <h3 id=\"read\" class=\"method-signature\">public <em>array</em> <strong>read</strong> (<em>string</em> $key)</h3> <p>Reads the meta-data from temporal memory</p> <h3 id=\"write\" class=\"method-signature\">public <strong>write</strong> (<em>string</em> $key, <em>array</em> $data)</h3> <p>Writes the meta-data to temporal memory</p> <h3 id=\"_initialize\" class=\"method-signature\">final protected <strong>_initialize</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $key, <em>mixed</em> $table, <em>mixed</em> $schema) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Initialize the metadata for certain table</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Sets the DependencyInjector container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the DependencyInjector container</p> <h3 id=\"setstrategy\" class=\"method-signature\">public <strong>setStrategy</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_metadata_strategyinterface\"><em>Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface</em></a> $strategy) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the meta-data extraction strategy</p> <h3 id=\"getstrategy\" class=\"method-signature\">public <strong>getStrategy</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Return the strategy to obtain the meta-data</p> <h3 id=\"readmetadata\" class=\"method-signature\">final public <strong>readMetaData</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads the complete meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaData(new Robots());\n</pre> <h3 id=\"readmetadataindex\" class=\"method-signature\">final public <strong>readMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaDataIndex(new Robots(), 0);\n</pre> <h3 id=\"writemetadataindex\" class=\"method-signature\">final public <strong>writeMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index, <em>mixed</em> $data) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;writeColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP, array('leName' =&gt; 'name')));\n</pre> <h3 id=\"readcolumnmap\" class=\"method-signature\">final public <strong>readColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads the ordered/reversed column map for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMap(new Robots()));\n</pre> <h3 id=\"readcolumnmapindex\" class=\"method-signature\">final public <strong>readColumnMapIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP));\n</pre> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns table attributes names (fields)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAttributes(new Robots()));\n</pre> <h3 id=\"getprimarykeyattributes\" class=\"method-signature\">public <strong>getPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of fields which are part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnonprimarykeyattributes\" class=\"method-signature\">public <strong>getNonPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of fields which are not part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNonPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnotnullattributes\" class=\"method-signature\">public <strong>getNotNullAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of not null attributes</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNotNullAttributes(new Robots()));\n</pre> <h3 id=\"getdatatypes\" class=\"method-signature\">public <strong>getDataTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes and their data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypes(new Robots()));\n</pre> <h3 id=\"getdatatypesnumeric\" class=\"method-signature\">public <strong>getDataTypesNumeric</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes which types are numerical</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypesNumeric(new Robots()));\n</pre> <h3 id=\"getidentityfield\" class=\"method-signature\">public <em>string</em> <strong>getIdentityField</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the name of identity field (if one is present)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getIdentityField(new Robots()));\n</pre> <h3 id=\"getbindtypes\" class=\"method-signature\">public <strong>getBindTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes and their bind data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getBindTypes(new Robots()));\n</pre> <h3 id=\"getautomaticcreateattributes\" class=\"method-signature\">public <strong>getAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticCreateAttributes(new Robots()));\n</pre> <h3 id=\"getautomaticupdateattributes\" class=\"method-signature\">public <strong>getAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticUpdateAttributes(new Robots()));\n</pre> <h3 id=\"setautomaticcreateattributes\" class=\"method-signature\">public <strong>setAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticCreateAttributes(new Robots(), array('created_at' =&gt; true));\n</pre> <h3 id=\"setautomaticupdateattributes\" class=\"method-signature\">public <strong>setAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticUpdateAttributes(new Robots(), array('modified_at' =&gt; true));\n</pre> <h3 id=\"setemptystringattributes\" class=\"method-signature\">public <strong>setEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that allow empty string values</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setEmptyStringAttributes(new Robots(), array('name' =&gt; true));\n</pre> <h3 id=\"getemptystringattributes\" class=\"method-signature\">public <strong>getEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes allow empty strings</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getEmptyStringAttributes(new Robots()));\n</pre> <h3 id=\"getdefaultvalues\" class=\"method-signature\">public <strong>getDefaultValues</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes (which have default values) and their default values</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDefaultValues(new Robots()));\n</pre> <h3 id=\"getcolumnmap\" class=\"method-signature\">public <strong>getColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getColumnMap(new Robots()));\n</pre> <h3 id=\"getreversecolumnmap\" class=\"method-signature\">public <strong>getReverseColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the reverse column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getReverseColumnMap(new Robots()));\n</pre> <h3 id=\"hasattribute\" class=\"method-signature\">public <strong>hasAttribute</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $attribute) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Check if a model has certain attribute</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;hasAttribute(new Robots(), 'name'));\n</pre> <h3 id=\"isempty\" class=\"method-signature\">public <strong>isEmpty</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Checks if the internal meta-data container is empty</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;isEmpty());\n</pre> <h3 id=\"reset\" class=\"method-signature\">public <strong>reset</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Resets internal meta-data in order to regenerate it</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;reset();\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Memory.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Memory.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_row":"<h1 id=\"class-phalcon-mvc-model-row\">Class <strong>Phalcon\\Mvc\\Model\\Row</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_entityinterface\"><em>Phalcon\\Mvc\\EntityInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_mvc_model_resultinterface\"><em>Phalcon\\Mvc\\Model\\ResultInterface</em></a>, ArrayAccess, JsonSerializable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/row.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This component allows Phalcon\\Mvc\\Model to return rows without an associated entity. This objects implements the ArrayAccess interface to allow access the object as object-&gt;x or array[x].</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setdirtystate\" class=\"method-signature\">public <strong>setDirtyState</strong> (<em>mixed</em> $dirtyState)</h3> <p>Set the current object’s state</p> <h3 id=\"offsetexists\" class=\"method-signature\">public <em>boolean</em> <strong>offsetExists</strong> (<em>string|int</em> $index)</h3> <p>Checks whether offset exists in the row</p> <h3 id=\"offsetget\" class=\"method-signature\">public <em>string|PhalconMvcModelInterface</em> <strong>offsetGet</strong> (<em>string|int</em> $index)</h3> <p>Gets a record in a specific position of the row</p> <h3 id=\"offsetset\" class=\"method-signature\">public <strong>offsetSet</strong> (<em>string|int</em> $index, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $value)</h3> <p>Rows cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>string|int</em> $offset)</h3> <p>Rows cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <h3 id=\"readattribute\" class=\"method-signature\">public <em>mixed</em> <strong>readAttribute</strong> (<em>string</em> $attribute)</h3> <p>Reads an attribute value by its name</p> <pre class=\"highlight-php\" data-language=\"php\">echo $robot-&gt;readAttribute('name');\n</pre> <h3 id=\"writeattribute\" class=\"method-signature\">public <strong>writeAttribute</strong> (<em>string</em> $attribute, <em>mixed</em> $value)</h3> <p>Writes an attribute value by its name</p> <pre class=\"highlight-php\" data-language=\"php\">$robot-&gt;writeAttribute('name', 'Rosey');\n</pre> <h3 id=\"toarray\" class=\"method-signature\">public <em>array</em> <strong>toArray</strong> ()</h3> <p>Returns the instance as an array representation</p> <h3 id=\"jsonserialize\" class=\"method-signature\">public <em>array</em> <strong>jsonSerialize</strong> ()</h3> <p>Serializes the object for json_encode</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Row.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Row.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_metadata_libmemcached":"<h1 id=\"class-phalcon-mvc-model-metadata-libmemcached\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Libmemcached</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_metadata\"><em>Phalcon\\Mvc\\Model\\MetaData</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_metadatainterface\"><em>Phalcon\\Mvc\\Model\\MetaDataInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/libmemcached.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Stores model meta-data in the Memcache. By default meta-data is stored for 48 hours (172800 seconds)</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData = new Phalcon\\Mvc\\Model\\Metadata\\Libmemcached(array(\n    'servers' =&gt; array(\n         array('host' =&gt; 'localhost', 'port' =&gt; 11211, 'weight' =&gt; 1),\n     ),\n     'client' =&gt; array(\n         Memcached::OPT_HASH =&gt; Memcached::HASH_MD5,\n         Memcached::OPT_PREFIX_KEY =&gt; 'prefix.',\n     ),\n    'lifetime' =&gt; 3600,\n    'prefix' =&gt; 'my_'\n));\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"models_attributes\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_ATTRIBUTES</strong>\n</h3> <h3 id=\"models_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_non_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NON_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_not_null\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NOT_NULL</strong>\n</h3> <h3 id=\"models_data_types\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES</strong>\n</h3> <h3 id=\"models_data_types_numeric\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_NUMERIC</strong>\n</h3> <h3 id=\"models_date_at\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_AT</strong>\n</h3> <h3 id=\"models_date_in\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_IN</strong>\n</h3> <h3 id=\"models_identity_column\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_IDENTITY_COLUMN</strong>\n</h3> <h3 id=\"models_data_types_bind\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_BIND</strong>\n</h3> <h3 id=\"models_automatic_default_insert\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_INSERT</strong>\n</h3> <h3 id=\"models_automatic_default_update\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_UPDATE</strong>\n</h3> <h3 id=\"models_default_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DEFAULT_VALUES</strong>\n</h3> <h3 id=\"models_empty_string_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_EMPTY_STRING_VALUES</strong>\n</h3> <h3 id=\"models_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_COLUMN_MAP</strong>\n</h3> <h3 id=\"models_reverse_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_REVERSE_COLUMN_MAP</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <p>Phalcon\\Mvc\\Model\\MetaData\\Libmemcached constructor</p> <h3 id=\"read\" class=\"method-signature\">public <strong>read</strong> (<em>mixed</em> $key)</h3> <p>Reads metadata from Memcache</p> <h3 id=\"write\" class=\"method-signature\">public <strong>write</strong> (<em>mixed</em> $key, <em>mixed</em> $data)</h3> <p>Writes the metadata to Memcache</p> <h3 id=\"reset\" class=\"method-signature\">public <strong>reset</strong> ()</h3> <p>Flush Memcache data and resets internal meta-data in order to regenerate it</p> <h3 id=\"_initialize\" class=\"method-signature\">final protected <strong>_initialize</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $key, <em>mixed</em> $table, <em>mixed</em> $schema) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Initialize the metadata for certain table</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Sets the DependencyInjector container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the DependencyInjector container</p> <h3 id=\"setstrategy\" class=\"method-signature\">public <strong>setStrategy</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_metadata_strategyinterface\"><em>Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface</em></a> $strategy) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the meta-data extraction strategy</p> <h3 id=\"getstrategy\" class=\"method-signature\">public <strong>getStrategy</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Return the strategy to obtain the meta-data</p> <h3 id=\"readmetadata\" class=\"method-signature\">final public <strong>readMetaData</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads the complete meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaData(new Robots());\n</pre> <h3 id=\"readmetadataindex\" class=\"method-signature\">final public <strong>readMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaDataIndex(new Robots(), 0);\n</pre> <h3 id=\"writemetadataindex\" class=\"method-signature\">final public <strong>writeMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index, <em>mixed</em> $data) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;writeColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP, array('leName' =&gt; 'name')));\n</pre> <h3 id=\"readcolumnmap\" class=\"method-signature\">final public <strong>readColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads the ordered/reversed column map for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMap(new Robots()));\n</pre> <h3 id=\"readcolumnmapindex\" class=\"method-signature\">final public <strong>readColumnMapIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP));\n</pre> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns table attributes names (fields)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAttributes(new Robots()));\n</pre> <h3 id=\"getprimarykeyattributes\" class=\"method-signature\">public <strong>getPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of fields which are part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnonprimarykeyattributes\" class=\"method-signature\">public <strong>getNonPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of fields which are not part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNonPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnotnullattributes\" class=\"method-signature\">public <strong>getNotNullAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of not null attributes</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNotNullAttributes(new Robots()));\n</pre> <h3 id=\"getdatatypes\" class=\"method-signature\">public <strong>getDataTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes and their data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypes(new Robots()));\n</pre> <h3 id=\"getdatatypesnumeric\" class=\"method-signature\">public <strong>getDataTypesNumeric</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes which types are numerical</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypesNumeric(new Robots()));\n</pre> <h3 id=\"getidentityfield\" class=\"method-signature\">public <em>string</em> <strong>getIdentityField</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the name of identity field (if one is present)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getIdentityField(new Robots()));\n</pre> <h3 id=\"getbindtypes\" class=\"method-signature\">public <strong>getBindTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes and their bind data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getBindTypes(new Robots()));\n</pre> <h3 id=\"getautomaticcreateattributes\" class=\"method-signature\">public <strong>getAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticCreateAttributes(new Robots()));\n</pre> <h3 id=\"getautomaticupdateattributes\" class=\"method-signature\">public <strong>getAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticUpdateAttributes(new Robots()));\n</pre> <h3 id=\"setautomaticcreateattributes\" class=\"method-signature\">public <strong>setAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticCreateAttributes(new Robots(), array('created_at' =&gt; true));\n</pre> <h3 id=\"setautomaticupdateattributes\" class=\"method-signature\">public <strong>setAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticUpdateAttributes(new Robots(), array('modified_at' =&gt; true));\n</pre> <h3 id=\"setemptystringattributes\" class=\"method-signature\">public <strong>setEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that allow empty string values</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setEmptyStringAttributes(new Robots(), array('name' =&gt; true));\n</pre> <h3 id=\"getemptystringattributes\" class=\"method-signature\">public <strong>getEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes allow empty strings</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getEmptyStringAttributes(new Robots()));\n</pre> <h3 id=\"getdefaultvalues\" class=\"method-signature\">public <strong>getDefaultValues</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes (which have default values) and their default values</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDefaultValues(new Robots()));\n</pre> <h3 id=\"getcolumnmap\" class=\"method-signature\">public <strong>getColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getColumnMap(new Robots()));\n</pre> <h3 id=\"getreversecolumnmap\" class=\"method-signature\">public <strong>getReverseColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the reverse column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getReverseColumnMap(new Robots()));\n</pre> <h3 id=\"hasattribute\" class=\"method-signature\">public <strong>hasAttribute</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $attribute) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Check if a model has certain attribute</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;hasAttribute(new Robots(), 'name'));\n</pre> <h3 id=\"isempty\" class=\"method-signature\">public <strong>isEmpty</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Checks if the internal meta-data container is empty</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;isEmpty());\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Libmemcached.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Libmemcached.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_metadata_xcache":"<h1 id=\"class-phalcon-mvc-model-metadata-xcache\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Xcache</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_metadata\"><em>Phalcon\\Mvc\\Model\\MetaData</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_metadatainterface\"><em>Phalcon\\Mvc\\Model\\MetaDataInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/xcache.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Stores model meta-data in the XCache cache. Data will erased if the web server is restarted By default meta-data is stored for 48 hours (172800 seconds) You can query the meta-data by printing xcache_get(‘$PMM$’) or xcache_get(‘$PMM$my-app-id’)</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData = new Phalcon\\Mvc\\Model\\Metadata\\Xcache(array(\n    'prefix' =&gt; 'my-app-id',\n    'lifetime' =&gt; 86400\n));\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"models_attributes\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_ATTRIBUTES</strong>\n</h3> <h3 id=\"models_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_non_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NON_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_not_null\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NOT_NULL</strong>\n</h3> <h3 id=\"models_data_types\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES</strong>\n</h3> <h3 id=\"models_data_types_numeric\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_NUMERIC</strong>\n</h3> <h3 id=\"models_date_at\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_AT</strong>\n</h3> <h3 id=\"models_date_in\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_IN</strong>\n</h3> <h3 id=\"models_identity_column\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_IDENTITY_COLUMN</strong>\n</h3> <h3 id=\"models_data_types_bind\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_BIND</strong>\n</h3> <h3 id=\"models_automatic_default_insert\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_INSERT</strong>\n</h3> <h3 id=\"models_automatic_default_update\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_UPDATE</strong>\n</h3> <h3 id=\"models_default_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DEFAULT_VALUES</strong>\n</h3> <h3 id=\"models_empty_string_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_EMPTY_STRING_VALUES</strong>\n</h3> <h3 id=\"models_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_COLUMN_MAP</strong>\n</h3> <h3 id=\"models_reverse_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_REVERSE_COLUMN_MAP</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <p>Phalcon\\Mvc\\Model\\MetaData\\Xcache constructor</p> <h3 id=\"read\" class=\"method-signature\">public <em>array</em> <strong>read</strong> (<em>string</em> $key)</h3> <p>Reads metadata from XCache</p> <h3 id=\"write\" class=\"method-signature\">public <strong>write</strong> (<em>string</em> $key, <em>array</em> $data)</h3> <p>Writes the metadata to XCache</p> <h3 id=\"_initialize\" class=\"method-signature\">final protected <strong>_initialize</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $key, <em>mixed</em> $table, <em>mixed</em> $schema) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Initialize the metadata for certain table</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Sets the DependencyInjector container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the DependencyInjector container</p> <h3 id=\"setstrategy\" class=\"method-signature\">public <strong>setStrategy</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_metadata_strategyinterface\"><em>Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface</em></a> $strategy) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the meta-data extraction strategy</p> <h3 id=\"getstrategy\" class=\"method-signature\">public <strong>getStrategy</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Return the strategy to obtain the meta-data</p> <h3 id=\"readmetadata\" class=\"method-signature\">final public <strong>readMetaData</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads the complete meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaData(new Robots());\n</pre> <h3 id=\"readmetadataindex\" class=\"method-signature\">final public <strong>readMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaDataIndex(new Robots(), 0);\n</pre> <h3 id=\"writemetadataindex\" class=\"method-signature\">final public <strong>writeMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index, <em>mixed</em> $data) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;writeColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP, array('leName' =&gt; 'name')));\n</pre> <h3 id=\"readcolumnmap\" class=\"method-signature\">final public <strong>readColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads the ordered/reversed column map for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMap(new Robots()));\n</pre> <h3 id=\"readcolumnmapindex\" class=\"method-signature\">final public <strong>readColumnMapIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP));\n</pre> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns table attributes names (fields)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAttributes(new Robots()));\n</pre> <h3 id=\"getprimarykeyattributes\" class=\"method-signature\">public <strong>getPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of fields which are part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnonprimarykeyattributes\" class=\"method-signature\">public <strong>getNonPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of fields which are not part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNonPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnotnullattributes\" class=\"method-signature\">public <strong>getNotNullAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of not null attributes</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNotNullAttributes(new Robots()));\n</pre> <h3 id=\"getdatatypes\" class=\"method-signature\">public <strong>getDataTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes and their data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypes(new Robots()));\n</pre> <h3 id=\"getdatatypesnumeric\" class=\"method-signature\">public <strong>getDataTypesNumeric</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes which types are numerical</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypesNumeric(new Robots()));\n</pre> <h3 id=\"getidentityfield\" class=\"method-signature\">public <em>string</em> <strong>getIdentityField</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the name of identity field (if one is present)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getIdentityField(new Robots()));\n</pre> <h3 id=\"getbindtypes\" class=\"method-signature\">public <strong>getBindTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes and their bind data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getBindTypes(new Robots()));\n</pre> <h3 id=\"getautomaticcreateattributes\" class=\"method-signature\">public <strong>getAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticCreateAttributes(new Robots()));\n</pre> <h3 id=\"getautomaticupdateattributes\" class=\"method-signature\">public <strong>getAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticUpdateAttributes(new Robots()));\n</pre> <h3 id=\"setautomaticcreateattributes\" class=\"method-signature\">public <strong>setAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticCreateAttributes(new Robots(), array('created_at' =&gt; true));\n</pre> <h3 id=\"setautomaticupdateattributes\" class=\"method-signature\">public <strong>setAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticUpdateAttributes(new Robots(), array('modified_at' =&gt; true));\n</pre> <h3 id=\"setemptystringattributes\" class=\"method-signature\">public <strong>setEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that allow empty string values</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setEmptyStringAttributes(new Robots(), array('name' =&gt; true));\n</pre> <h3 id=\"getemptystringattributes\" class=\"method-signature\">public <strong>getEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes allow empty strings</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getEmptyStringAttributes(new Robots()));\n</pre> <h3 id=\"getdefaultvalues\" class=\"method-signature\">public <strong>getDefaultValues</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes (which have default values) and their default values</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDefaultValues(new Robots()));\n</pre> <h3 id=\"getcolumnmap\" class=\"method-signature\">public <strong>getColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getColumnMap(new Robots()));\n</pre> <h3 id=\"getreversecolumnmap\" class=\"method-signature\">public <strong>getReverseColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the reverse column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getReverseColumnMap(new Robots()));\n</pre> <h3 id=\"hasattribute\" class=\"method-signature\">public <strong>hasAttribute</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $attribute) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Check if a model has certain attribute</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;hasAttribute(new Robots(), 'name'));\n</pre> <h3 id=\"isempty\" class=\"method-signature\">public <strong>isEmpty</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Checks if the internal meta-data container is empty</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;isEmpty());\n</pre> <h3 id=\"reset\" class=\"method-signature\">public <strong>reset</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Resets internal meta-data in order to regenerate it</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;reset();\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Xcache.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Xcache.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_metadata_redis":"<h1 id=\"class-phalcon-mvc-model-metadata-redis\">Class <strong>Phalcon\\Mvc\\Model\\MetaData\\Redis</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_metadata\"><em>Phalcon\\Mvc\\Model\\MetaData</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_metadatainterface\"><em>Phalcon\\Mvc\\Model\\MetaDataInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/redis.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Stores model meta-data in the Redis. By default meta-data is stored for 48 hours (172800 seconds)</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Metadata\\Redis;\n\n $metaData = new Redis([\n     'host'       =&gt; '127.0.0.1',\n     'port'       =&gt; 6379,\n     'persistent' =&gt; 0,\n     'statsKey'   =&gt; '_PHCM_MM',\n     'lifetime'   =&gt; 172800,\n     'index'      =&gt; 2,\n ]);\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"models_attributes\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_ATTRIBUTES</strong>\n</h3> <h3 id=\"models_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_non_primary_key\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NON_PRIMARY_KEY</strong>\n</h3> <h3 id=\"models_not_null\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_NOT_NULL</strong>\n</h3> <h3 id=\"models_data_types\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES</strong>\n</h3> <h3 id=\"models_data_types_numeric\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_NUMERIC</strong>\n</h3> <h3 id=\"models_date_at\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_AT</strong>\n</h3> <h3 id=\"models_date_in\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATE_IN</strong>\n</h3> <h3 id=\"models_identity_column\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_IDENTITY_COLUMN</strong>\n</h3> <h3 id=\"models_data_types_bind\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DATA_TYPES_BIND</strong>\n</h3> <h3 id=\"models_automatic_default_insert\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_INSERT</strong>\n</h3> <h3 id=\"models_automatic_default_update\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_AUTOMATIC_DEFAULT_UPDATE</strong>\n</h3> <h3 id=\"models_default_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_DEFAULT_VALUES</strong>\n</h3> <h3 id=\"models_empty_string_values\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_EMPTY_STRING_VALUES</strong>\n</h3> <h3 id=\"models_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_COLUMN_MAP</strong>\n</h3> <h3 id=\"models_reverse_column_map\" class=\"method-signature\">\n<em>integer</em> <strong>MODELS_REVERSE_COLUMN_MAP</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <p>Phalcon\\Mvc\\Model\\MetaData\\Redis constructor</p> <h3 id=\"read\" class=\"method-signature\">public <strong>read</strong> (<em>mixed</em> $key)</h3> <p>Reads metadata from Redis</p> <h3 id=\"write\" class=\"method-signature\">public <strong>write</strong> (<em>mixed</em> $key, <em>mixed</em> $data)</h3> <p>Writes the metadata to Redis</p> <h3 id=\"reset\" class=\"method-signature\">public <strong>reset</strong> ()</h3> <p>Flush Redis data and resets internal meta-data in order to regenerate it</p> <h3 id=\"_initialize\" class=\"method-signature\">final protected <strong>_initialize</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $key, <em>mixed</em> $table, <em>mixed</em> $schema) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Initialize the metadata for certain table</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Sets the DependencyInjector container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the DependencyInjector container</p> <h3 id=\"setstrategy\" class=\"method-signature\">public <strong>setStrategy</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_metadata_strategyinterface\"><em>Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface</em></a> $strategy) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the meta-data extraction strategy</p> <h3 id=\"getstrategy\" class=\"method-signature\">public <strong>getStrategy</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Return the strategy to obtain the meta-data</p> <h3 id=\"readmetadata\" class=\"method-signature\">final public <strong>readMetaData</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads the complete meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaData(new Robots());\n</pre> <h3 id=\"readmetadataindex\" class=\"method-signature\">final public <strong>readMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads meta-data for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readMetaDataIndex(new Robots(), 0);\n</pre> <h3 id=\"writemetadataindex\" class=\"method-signature\">final public <strong>writeMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index, <em>mixed</em> $data) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;writeColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP, array('leName' =&gt; 'name')));\n</pre> <h3 id=\"readcolumnmap\" class=\"method-signature\">final public <strong>readColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads the ordered/reversed column map for certain model</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMap(new Robots()));\n</pre> <h3 id=\"readcolumnmapindex\" class=\"method-signature\">final public <strong>readColumnMapIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;readColumnMapIndex(new Robots(), MetaData::MODELS_REVERSE_COLUMN_MAP));\n</pre> <h3 id=\"getattributes\" class=\"method-signature\">public <strong>getAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns table attributes names (fields)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAttributes(new Robots()));\n</pre> <h3 id=\"getprimarykeyattributes\" class=\"method-signature\">public <strong>getPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of fields which are part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnonprimarykeyattributes\" class=\"method-signature\">public <strong>getNonPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of fields which are not part of the primary key</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNonPrimaryKeyAttributes(new Robots()));\n</pre> <h3 id=\"getnotnullattributes\" class=\"method-signature\">public <strong>getNotNullAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns an array of not null attributes</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getNotNullAttributes(new Robots()));\n</pre> <h3 id=\"getdatatypes\" class=\"method-signature\">public <strong>getDataTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes and their data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypes(new Robots()));\n</pre> <h3 id=\"getdatatypesnumeric\" class=\"method-signature\">public <strong>getDataTypesNumeric</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes which types are numerical</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDataTypesNumeric(new Robots()));\n</pre> <h3 id=\"getidentityfield\" class=\"method-signature\">public <em>string</em> <strong>getIdentityField</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the name of identity field (if one is present)</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getIdentityField(new Robots()));\n</pre> <h3 id=\"getbindtypes\" class=\"method-signature\">public <strong>getBindTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes and their bind data types</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getBindTypes(new Robots()));\n</pre> <h3 id=\"getautomaticcreateattributes\" class=\"method-signature\">public <strong>getAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticCreateAttributes(new Robots()));\n</pre> <h3 id=\"getautomaticupdateattributes\" class=\"method-signature\">public <strong>getAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getAutomaticUpdateAttributes(new Robots()));\n</pre> <h3 id=\"setautomaticcreateattributes\" class=\"method-signature\">public <strong>setAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticCreateAttributes(new Robots(), array('created_at' =&gt; true));\n</pre> <h3 id=\"setautomaticupdateattributes\" class=\"method-signature\">public <strong>setAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setAutomaticUpdateAttributes(new Robots(), array('modified_at' =&gt; true));\n</pre> <h3 id=\"setemptystringattributes\" class=\"method-signature\">public <strong>setEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Set the attributes that allow empty string values</p> <pre class=\"highlight-php\" data-language=\"php\">$metaData-&gt;setEmptyStringAttributes(new Robots(), array('name' =&gt; true));\n</pre> <h3 id=\"getemptystringattributes\" class=\"method-signature\">public <strong>getEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes allow empty strings</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getEmptyStringAttributes(new Robots()));\n</pre> <h3 id=\"getdefaultvalues\" class=\"method-signature\">public <strong>getDefaultValues</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns attributes (which have default values) and their default values</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getDefaultValues(new Robots()));\n</pre> <h3 id=\"getcolumnmap\" class=\"method-signature\">public <strong>getColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getColumnMap(new Robots()));\n</pre> <h3 id=\"getreversecolumnmap\" class=\"method-signature\">public <strong>getReverseColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Returns the reverse column map if any</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($metaData-&gt;getReverseColumnMap(new Robots()));\n</pre> <h3 id=\"hasattribute\" class=\"method-signature\">public <strong>hasAttribute</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $attribute) <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Check if a model has certain attribute</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;hasAttribute(new Robots(), 'name'));\n</pre> <h3 id=\"isempty\" class=\"method-signature\">public <strong>isEmpty</strong> () <small>inherited from Phalcon\\Mvc\\Model\\MetaData</small>\n</h3> <p>Checks if the internal meta-data container is empty</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($metaData-&gt;isEmpty());\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Redis.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_Redis.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_resultset_simple":"<h1 id=\"class-phalcon-mvc-model-resultset-simple\">Class <strong>Phalcon\\Mvc\\Model\\Resultset\\Simple</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_resultset\"><em>Phalcon\\Mvc\\Model\\Resultset</em></a></p> <p><em>implements</em> JsonSerializable, Serializable, ArrayAccess, Countable, SeekableIterator, Traversable, Iterator, <a class=\"reference internal\" href=\"phalcon_mvc_model_resultsetinterface\"><em>Phalcon\\Mvc\\Model\\ResultsetInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/resultset/simple.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Simple resultsets only contains a complete objects This class builds every complete object as it is required</p>  <h2 id=\"constants\">Constants</h2> <h3 id=\"type_result_full\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_RESULT_FULL</strong>\n</h3> <h3 id=\"type_result_partial\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_RESULT_PARTIAL</strong>\n</h3> <h3 id=\"hydrate_records\" class=\"method-signature\">\n<em>integer</em> <strong>HYDRATE_RECORDS</strong>\n</h3> <h3 id=\"hydrate_objects\" class=\"method-signature\">\n<em>integer</em> <strong>HYDRATE_OBJECTS</strong>\n</h3> <h3 id=\"hydrate_arrays\" class=\"method-signature\">\n<em>integer</em> <strong>HYDRATE_ARRAYS</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $columnMap, <em>\\Phalcon\\Mvc\\ModelInterface|Phalcon\\Mvc\\Model\\Row</em> $model, <em>\\Phalcon\\Db\\Result\\Pdo|null</em> $result, [<a class=\"reference internal\" href=\"phalcon_cache_backendinterface\"><em>Phalcon\\Cache\\BackendInterface</em></a> $cache], [<em>boolean</em> $keepSnapshots])</h3> <p>Phalcon\\Mvc\\Model\\Resultset\\Simple constructor</p> <h3 id=\"current\" class=\"method-signature\">final public <strong>current</strong> ()</h3> <p>Returns current row in the resultset</p> <h3 id=\"toarray\" class=\"method-signature\">public <strong>toArray</strong> ([<em>mixed</em> $renameColumns])</h3> <p>Returns a complete resultset as an array, if the resultset has a big number of rows it could consume more memory than currently it does. Export the resultset to an array couldn’t be faster with a large number of records</p> <h3 id=\"serialize\" class=\"method-signature\">public <strong>serialize</strong> ()</h3> <p>Serializing a resultset will dump all related rows into a big array</p> <h3 id=\"unserialize\" class=\"method-signature\">public <strong>unserialize</strong> (<em>mixed</em> $data)</h3> <p>Unserializing a resultset will allow to only works on the rows present in the saved state</p> <h3 id=\"next\" class=\"method-signature\">public <strong>next</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Moves cursor to next row in the resultset</p> <h3 id=\"valid\" class=\"method-signature\">public <strong>valid</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Check whether internal resource has rows to fetch</p> <h3 id=\"key\" class=\"method-signature\">public <strong>key</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Gets pointer number of active row in the resultset</p> <h3 id=\"rewind\" class=\"method-signature\">final public <strong>rewind</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Rewinds resultset to its beginning</p> <h3 id=\"seek\" class=\"method-signature\">final public <strong>seek</strong> (<em>mixed</em> $position) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Changes internal pointer to a specific position in the resultset Set new position if required and set this-&gt;_row</p> <h3 id=\"count\" class=\"method-signature\">final public <strong>count</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Counts how many rows are in the resultset</p> <h3 id=\"offsetexists\" class=\"method-signature\">public <strong>offsetExists</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Checks whether offset exists in the resultset</p> <h3 id=\"offsetget\" class=\"method-signature\">public <strong>offsetGet</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Gets row in a specific position of the resultset</p> <h3 id=\"offsetset\" class=\"method-signature\">public <strong>offsetSet</strong> (<em>int</em> $index, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $value) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Resultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>mixed</em> $offset) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Resultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Returns the internal type of data retrieval that the resultset is using</p> <h3 id=\"getfirst\" class=\"method-signature\">public <strong>getFirst</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Get first row in the resultset</p> <h3 id=\"getlast\" class=\"method-signature\">public <strong>getLast</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Get last row in the resultset</p> <h3 id=\"setisfresh\" class=\"method-signature\">public <strong>setIsFresh</strong> (<em>mixed</em> $isFresh) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Set if the resultset is fresh or an old one cached</p> <h3 id=\"isfresh\" class=\"method-signature\">public <strong>isFresh</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Tell if the resultset if fresh or an old one cached</p> <h3 id=\"sethydratemode\" class=\"method-signature\">public <strong>setHydrateMode</strong> (<em>mixed</em> $hydrateMode) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Sets the hydration mode in the resultset</p> <h3 id=\"gethydratemode\" class=\"method-signature\">public <strong>getHydrateMode</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Returns the current hydration mode</p> <h3 id=\"getcache\" class=\"method-signature\">public <strong>getCache</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Returns the associated cache for the resultset</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Returns the error messages produced by a batch operation</p> <h3 id=\"update\" class=\"method-signature\">public <em>boolean</em> <strong>update</strong> (<em>array</em> $data, [<em>Closure</em> $conditionCallback]) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Updates every record in the resultset</p> <h3 id=\"delete\" class=\"method-signature\">public <strong>delete</strong> ([<em>Closure</em> $conditionCallback]) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Deletes every record in the resultset</p> <h3 id=\"filter\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> [] <strong>filter</strong> (<em>callback</em> $filter) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Filters a resultset returning only those the developer requires</p> <pre class=\"highlight-php\" data-language=\"php\">$filtered = $robots-&gt;filter(function($robot){\n    if ($robot-&gt;id &lt; 3) {\n            return $robot;\n    }\n});\n</pre> <h3 id=\"jsonserialize\" class=\"method-signature\">public <em>array</em> <strong>jsonSerialize</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Returns serialised model objects as array for json_encode. Calls jsonSerialize on each object if present</p> <pre class=\"highlight-php\" data-language=\"php\">$robots = Robots::find();\n echo json_encode($robots);\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset_Simple.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset_Simple.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_resultset":"<h1 id=\"abstract-class-phalcon-mvc-model-resultset\">Abstract class <strong>Phalcon\\Mvc\\Model\\Resultset</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_resultsetinterface\"><em>Phalcon\\Mvc\\Model\\ResultsetInterface</em></a>, Iterator, Traversable, SeekableIterator, Countable, ArrayAccess, Serializable, JsonSerializable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/resultset.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This component allows to Phalcon\\Mvc\\Model returns large resultsets with the minimum memory consumption Resultsets can be traversed using a standard foreach or a while statement. If a resultset is serialized it will dump all the rows into a big array. Then unserialize will retrieve the rows as they were before serializing.</p> <pre class=\"highlight-php\" data-language=\"php\">// Using a standard foreach\n $robots = Robots::find([\"type='virtual'\", 'order' =&gt; 'name']);\n foreach ($robots as robot) {\n     echo robot-&gt;name, \"\\n\";\n }\n\n // Using a while\n $robots = Robots::find([\"type='virtual'\", 'order' =&gt; 'name');\n $robots-&gt;rewind();\n while ($robots-&gt;valid()) {\n     $robot = $robots-&gt;current();\n     echo $robot-&gt;name, \"\\n\";\n     $robots-&gt;next();\n }\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"type_result_full\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_RESULT_FULL</strong>\n</h3> <h3 id=\"type_result_partial\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_RESULT_PARTIAL</strong>\n</h3> <h3 id=\"hydrate_records\" class=\"method-signature\">\n<em>integer</em> <strong>HYDRATE_RECORDS</strong>\n</h3> <h3 id=\"hydrate_objects\" class=\"method-signature\">\n<em>integer</em> <strong>HYDRATE_OBJECTS</strong>\n</h3> <h3 id=\"hydrate_arrays\" class=\"method-signature\">\n<em>integer</em> <strong>HYDRATE_ARRAYS</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>\\Phalcon\\Db\\ResultInterface|false</em> $result, [<a class=\"reference internal\" href=\"phalcon_cache_backendinterface\"><em>Phalcon\\Cache\\BackendInterface</em></a> $cache])</h3> <p>Phalcon\\Mvc\\Model\\Resultset constructor</p> <h3 id=\"next\" class=\"method-signature\">public <strong>next</strong> ()</h3> <p>Moves cursor to next row in the resultset</p> <h3 id=\"valid\" class=\"method-signature\">public <strong>valid</strong> ()</h3> <p>Check whether internal resource has rows to fetch</p> <h3 id=\"key\" class=\"method-signature\">public <strong>key</strong> ()</h3> <p>Gets pointer number of active row in the resultset</p> <h3 id=\"rewind\" class=\"method-signature\">final public <strong>rewind</strong> ()</h3> <p>Rewinds resultset to its beginning</p> <h3 id=\"seek\" class=\"method-signature\">final public <strong>seek</strong> (<em>mixed</em> $position)</h3> <p>Changes internal pointer to a specific position in the resultset Set new position if required and set this-&gt;_row</p> <h3 id=\"count\" class=\"method-signature\">final public <strong>count</strong> ()</h3> <p>Counts how many rows are in the resultset</p> <h3 id=\"offsetexists\" class=\"method-signature\">public <strong>offsetExists</strong> (<em>mixed</em> $index)</h3> <p>Checks whether offset exists in the resultset</p> <h3 id=\"offsetget\" class=\"method-signature\">public <strong>offsetGet</strong> (<em>mixed</em> $index)</h3> <p>Gets row in a specific position of the resultset</p> <h3 id=\"offsetset\" class=\"method-signature\">public <strong>offsetSet</strong> (<em>int</em> $index, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $value)</h3> <p>Resultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>mixed</em> $offset)</h3> <p>Resultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> ()</h3> <p>Returns the internal type of data retrieval that the resultset is using</p> <h3 id=\"getfirst\" class=\"method-signature\">public <strong>getFirst</strong> ()</h3> <p>Get first row in the resultset</p> <h3 id=\"getlast\" class=\"method-signature\">public <strong>getLast</strong> ()</h3> <p>Get last row in the resultset</p> <h3 id=\"setisfresh\" class=\"method-signature\">public <strong>setIsFresh</strong> (<em>mixed</em> $isFresh)</h3> <p>Set if the resultset is fresh or an old one cached</p> <h3 id=\"isfresh\" class=\"method-signature\">public <strong>isFresh</strong> ()</h3> <p>Tell if the resultset if fresh or an old one cached</p> <h3 id=\"sethydratemode\" class=\"method-signature\">public <strong>setHydrateMode</strong> (<em>mixed</em> $hydrateMode)</h3> <p>Sets the hydration mode in the resultset</p> <h3 id=\"gethydratemode\" class=\"method-signature\">public <strong>getHydrateMode</strong> ()</h3> <p>Returns the current hydration mode</p> <h3 id=\"getcache\" class=\"method-signature\">public <strong>getCache</strong> ()</h3> <p>Returns the associated cache for the resultset</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> ()</h3> <p>Returns the error messages produced by a batch operation</p> <h3 id=\"update\" class=\"method-signature\">public <em>boolean</em> <strong>update</strong> (<em>array</em> $data, [<em>Closure</em> $conditionCallback])</h3> <p>Updates every record in the resultset</p> <h3 id=\"delete\" class=\"method-signature\">public <strong>delete</strong> ([<em>Closure</em> $conditionCallback])</h3> <p>Deletes every record in the resultset</p> <h3 id=\"filter\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> [] <strong>filter</strong> (<em>callback</em> $filter)</h3> <p>Filters a resultset returning only those the developer requires</p> <pre class=\"highlight-php\" data-language=\"php\">$filtered = $robots-&gt;filter(function($robot){\n    if ($robot-&gt;id &lt; 3) {\n            return $robot;\n    }\n});\n</pre> <h3 id=\"jsonserialize\" class=\"method-signature\">public <em>array</em> <strong>jsonSerialize</strong> ()</h3> <p>Returns serialised model objects as array for json_encode. Calls jsonSerialize on each object if present</p> <pre class=\"highlight-php\" data-language=\"php\">$robots = Robots::find();\n echo json_encode($robots);\n</pre> <h3 id=\"toarray\" class=\"method-signature\">abstract public <strong>toArray</strong> () <small>inherited from Phalcon\\Mvc\\Model\\ResultsetInterface</small>\n</h3> <p>...</p> <h3 id=\"current\" class=\"method-signature\">abstract public <strong>current</strong> () <small>inherited from Iterator</small>\n</h3> <p>...</p> <h3 id=\"serialize\" class=\"method-signature\">abstract public <strong>serialize</strong> () <small>inherited from Serializable</small>\n</h3> <p>...</p> <h3 id=\"unserialize\" class=\"method-signature\">abstract public <strong>unserialize</strong> (<em>mixed</em> $serialized) <small>inherited from Serializable</small>\n</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_resultset_complex":"<h1 id=\"class-phalcon-mvc-model-resultset-complex\">Class <strong>Phalcon\\Mvc\\Model\\Resultset\\Complex</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_resultset\"><em>Phalcon\\Mvc\\Model\\Resultset</em></a></p> <p><em>implements</em> JsonSerializable, Serializable, ArrayAccess, Countable, SeekableIterator, Traversable, Iterator, <a class=\"reference internal\" href=\"phalcon_mvc_model_resultsetinterface\"><em>Phalcon\\Mvc\\Model\\ResultsetInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/resultset/complex.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Complex resultsets may include complete objects and scalar values. This class builds every complex row as it is required</p>  <h2 id=\"constants\">Constants</h2> <h3 id=\"type_result_full\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_RESULT_FULL</strong>\n</h3> <h3 id=\"type_result_partial\" class=\"method-signature\">\n<em>integer</em> <strong>TYPE_RESULT_PARTIAL</strong>\n</h3> <h3 id=\"hydrate_records\" class=\"method-signature\">\n<em>integer</em> <strong>HYDRATE_RECORDS</strong>\n</h3> <h3 id=\"hydrate_objects\" class=\"method-signature\">\n<em>integer</em> <strong>HYDRATE_OBJECTS</strong>\n</h3> <h3 id=\"hydrate_arrays\" class=\"method-signature\">\n<em>integer</em> <strong>HYDRATE_ARRAYS</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $columnTypes, [<a class=\"reference internal\" href=\"phalcon_db_resultinterface\"><em>Phalcon\\Db\\ResultInterface</em></a> $result], [<a class=\"reference internal\" href=\"phalcon_cache_backendinterface\"><em>Phalcon\\Cache\\BackendInterface</em></a> $cache])</h3> <p>Phalcon\\Mvc\\Model\\Resultset\\Complex constructor</p> <h3 id=\"current\" class=\"method-signature\">final public <strong>current</strong> ()</h3> <p>Returns current row in the resultset</p> <h3 id=\"toarray\" class=\"method-signature\">public <strong>toArray</strong> ()</h3> <p>Returns a complete resultset as an array, if the resultset has a big number of rows it could consume more memory than currently it does.</p> <h3 id=\"serialize\" class=\"method-signature\">public <strong>serialize</strong> ()</h3> <p>Serializing a resultset will dump all related rows into a big array</p> <h3 id=\"unserialize\" class=\"method-signature\">public <strong>unserialize</strong> (<em>mixed</em> $data)</h3> <p>Unserializing a resultset will allow to only works on the rows present in the saved state</p> <h3 id=\"next\" class=\"method-signature\">public <strong>next</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Moves cursor to next row in the resultset</p> <h3 id=\"valid\" class=\"method-signature\">public <strong>valid</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Check whether internal resource has rows to fetch</p> <h3 id=\"key\" class=\"method-signature\">public <strong>key</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Gets pointer number of active row in the resultset</p> <h3 id=\"rewind\" class=\"method-signature\">final public <strong>rewind</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Rewinds resultset to its beginning</p> <h3 id=\"seek\" class=\"method-signature\">final public <strong>seek</strong> (<em>mixed</em> $position) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Changes internal pointer to a specific position in the resultset Set new position if required and set this-&gt;_row</p> <h3 id=\"count\" class=\"method-signature\">final public <strong>count</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Counts how many rows are in the resultset</p> <h3 id=\"offsetexists\" class=\"method-signature\">public <strong>offsetExists</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Checks whether offset exists in the resultset</p> <h3 id=\"offsetget\" class=\"method-signature\">public <strong>offsetGet</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Gets row in a specific position of the resultset</p> <h3 id=\"offsetset\" class=\"method-signature\">public <strong>offsetSet</strong> (<em>int</em> $index, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $value) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Resultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>mixed</em> $offset) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Resultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Returns the internal type of data retrieval that the resultset is using</p> <h3 id=\"getfirst\" class=\"method-signature\">public <strong>getFirst</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Get first row in the resultset</p> <h3 id=\"getlast\" class=\"method-signature\">public <strong>getLast</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Get last row in the resultset</p> <h3 id=\"setisfresh\" class=\"method-signature\">public <strong>setIsFresh</strong> (<em>mixed</em> $isFresh) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Set if the resultset is fresh or an old one cached</p> <h3 id=\"isfresh\" class=\"method-signature\">public <strong>isFresh</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Tell if the resultset if fresh or an old one cached</p> <h3 id=\"sethydratemode\" class=\"method-signature\">public <strong>setHydrateMode</strong> (<em>mixed</em> $hydrateMode) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Sets the hydration mode in the resultset</p> <h3 id=\"gethydratemode\" class=\"method-signature\">public <strong>getHydrateMode</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Returns the current hydration mode</p> <h3 id=\"getcache\" class=\"method-signature\">public <strong>getCache</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Returns the associated cache for the resultset</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Returns the error messages produced by a batch operation</p> <h3 id=\"update\" class=\"method-signature\">public <em>boolean</em> <strong>update</strong> (<em>array</em> $data, [<em>Closure</em> $conditionCallback]) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Updates every record in the resultset</p> <h3 id=\"delete\" class=\"method-signature\">public <strong>delete</strong> ([<em>Closure</em> $conditionCallback]) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Deletes every record in the resultset</p> <h3 id=\"filter\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> [] <strong>filter</strong> (<em>callback</em> $filter) <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Filters a resultset returning only those the developer requires</p> <pre class=\"highlight-php\" data-language=\"php\">$filtered = $robots-&gt;filter(function($robot){\n    if ($robot-&gt;id &lt; 3) {\n            return $robot;\n    }\n});\n</pre> <h3 id=\"jsonserialize\" class=\"method-signature\">public <em>array</em> <strong>jsonSerialize</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Resultset</small>\n</h3> <p>Returns serialised model objects as array for json_encode. Calls jsonSerialize on each object if present</p> <pre class=\"highlight-php\" data-language=\"php\">$robots = Robots::find();\n echo json_encode($robots);\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset_Complex.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Resultset_Complex.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_query_builder":"<h1 id=\"class-phalcon-mvc-model-query-builder\">Class <strong>Phalcon\\Mvc\\Model\\Query\\Builder</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_query_builderinterface\"><em>Phalcon\\Mvc\\Model\\Query\\BuilderInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/query/builder.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Helps to create PHQL queries using an OO interface</p> <pre class=\"highlight-php\" data-language=\"php\">$params = array(\n    'models'     =&gt; array('Users'),\n    'columns'    =&gt; array('id', 'name', 'status'),\n    'conditions' =&gt; array(\n        array(\n            \"created &gt; :min: AND created &lt; :max:\",\n            array(\"min\" =&gt; '2013-01-01',   'max' =&gt; '2014-01-01'),\n            array(\"min\" =&gt; PDO::PARAM_STR, 'max' =&gt; PDO::PARAM_STR),\n        ),\n    ),\n    // or 'conditions' =&gt; \"created &gt; '2013-01-01' AND created &lt; '2014-01-01'\",\n    'group'      =&gt; array('id', 'name'),\n    'having'     =&gt; \"name = 'Kamil'\",\n    'order'      =&gt; array('name', 'id'),\n    'limit'      =&gt; 20,\n    'offset'     =&gt; 20,\n    // or 'limit' =&gt; array(20, 20),\n);\n$queryBuilder = new \\Phalcon\\Mvc\\Model\\Query\\Builder($params);\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"operator_or\" class=\"method-signature\">\n<em>string</em> <strong>OPERATOR_OR</strong>\n</h3> <h3 id=\"operator_and\" class=\"method-signature\">\n<em>string</em> <strong>OPERATOR_AND</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>mixed</em> $params], [<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector])</h3> <p>Phalcon\\Mvc\\Model\\Query\\Builder constructor</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the DependencyInjector container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the DependencyInjector container</p> <h3 id=\"distinct\" class=\"method-signature\">public <strong>distinct</strong> (<em>mixed</em> $distinct)</h3> <p>Sets SELECT DISTINCT / SELECT ALL flag</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;distinct(\"status\");\n$builder-&gt;distinct(null);\n</pre> <h3 id=\"getdistinct\" class=\"method-signature\">public <strong>getDistinct</strong> ()</h3> <p>Returns SELECT DISTINCT / SELECT ALL flag</p> <h3 id=\"columns\" class=\"method-signature\">public <strong>columns</strong> (<em>mixed</em> $columns)</h3> <p>Sets the columns to be queried</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;columns(\"id, name\");\n$builder-&gt;columns(array('id', 'name'));\n  $builder-&gt;columns(array('name', 'number' =&gt; 'COUNT(*)'));\n</pre> <h3 id=\"getcolumns\" class=\"method-signature\">public <em>string|array</em> <strong>getColumns</strong> ()</h3> <p>Return the columns to be queried</p> <h3 id=\"from\" class=\"method-signature\">public <strong>from</strong> (<em>mixed</em> $models)</h3> <p>Sets the models who makes part of the query</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;from('Robots');\n$builder-&gt;from(array('Robots', 'RobotsParts'));\n$builder-&gt;from(array('r' =&gt; 'Robots', 'rp' =&gt; 'RobotsParts'));\n</pre> <h3 id=\"addfrom\" class=\"method-signature\">public <strong>addFrom</strong> (<em>mixed</em> $model, [<em>mixed</em> $alias], [<em>mixed</em> $with])</h3> <p>Add a model to take part of the query</p> <pre class=\"highlight-php\" data-language=\"php\">// Load data from models Robots\n$builder-&gt;addFrom('Robots');\n\n  // Load data from model 'Robots' using 'r' as alias in PHQL\n$builder-&gt;addFrom('Robots', 'r');\n\n  // Load data from model 'Robots' using 'r' as alias in PHQL\n  // and eager load model 'RobotsParts'\n$builder-&gt;addFrom('Robots', 'r', 'RobotsParts');\n\n  // Load data from model 'Robots' using 'r' as alias in PHQL\n  // and eager load models 'RobotsParts' and 'Parts'\n$builder-&gt;addFrom('Robots', 'r', ['RobotsParts', 'Parts']);\n</pre> <h3 id=\"getfrom\" class=\"method-signature\">public <em>string|array</em> <strong>getFrom</strong> ()</h3> <p>Return the models who makes part of the query</p> <h3 id=\"join\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model_query_builder\"><em>Phalcon\\Mvc\\Model\\Query\\Builder</em></a> <strong>join</strong> (<em>string</em> $model, [<em>string</em> $conditions], [<em>string</em> $alias], [<em>string</em> $type])</h3> <p>Adds an INNER join to the query</p> <pre class=\"highlight-php\" data-language=\"php\">// Inner Join model 'Robots' with automatic conditions and alias\n$builder-&gt;join('Robots');\n\n  // Inner Join model 'Robots' specifing conditions\n$builder-&gt;join('Robots', 'Robots.id = RobotsParts.robots_id');\n\n  // Inner Join model 'Robots' specifing conditions and alias\n$builder-&gt;join('Robots', 'r.id = RobotsParts.robots_id', 'r');\n\n  // Left Join model 'Robots' specifing conditions, alias and type of join\n$builder-&gt;join('Robots', 'r.id = RobotsParts.robots_id', 'r', 'LEFT');\n</pre> <h3 id=\"innerjoin\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model_query_builder\"><em>Phalcon\\Mvc\\Model\\Query\\Builder</em></a> <strong>innerJoin</strong> (<em>string</em> $model, [<em>string</em> $conditions], [<em>string</em> $alias])</h3> <p>Adds an INNER join to the query</p> <pre class=\"highlight-php\" data-language=\"php\">// Inner Join model 'Robots' with automatic conditions and alias\n$builder-&gt;innerJoin('Robots');\n\n  // Inner Join model 'Robots' specifing conditions\n$builder-&gt;innerJoin('Robots', 'Robots.id = RobotsParts.robots_id');\n\n  // Inner Join model 'Robots' specifing conditions and alias\n$builder-&gt;innerJoin('Robots', 'r.id = RobotsParts.robots_id', 'r');\n</pre> <h3 id=\"leftjoin\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model_query_builder\"><em>Phalcon\\Mvc\\Model\\Query\\Builder</em></a> <strong>leftJoin</strong> (<em>string</em> $model, [<em>string</em> $conditions], [<em>string</em> $alias])</h3> <p>Adds a LEFT join to the query</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;leftJoin('Robots', 'r.id = RobotsParts.robots_id', 'r');\n</pre> <h3 id=\"rightjoin\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model_query_builder\"><em>Phalcon\\Mvc\\Model\\Query\\Builder</em></a> <strong>rightJoin</strong> (<em>string</em> $model, [<em>string</em> $conditions], [<em>string</em> $alias])</h3> <p>Adds a RIGHT join to the query</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;rightJoin('Robots', 'r.id = RobotsParts.robots_id', 'r');\n</pre> <h3 id=\"getjoins\" class=\"method-signature\">public <em>array</em> <strong>getJoins</strong> ()</h3> <p>Return join parts of the query</p> <h3 id=\"where\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model_query_builder\"><em>Phalcon\\Mvc\\Model\\Query\\Builder</em></a> <strong>where</strong> (<em>mixed</em> $conditions, [<em>array</em> $bindParams], [<em>array</em> $bindTypes])</h3> <p>Sets the query conditions</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;where(100);\n$builder-&gt;where('name = \"Peter\"');\n$builder-&gt;where('name = :name: AND id &gt; :id:', array('name' =&gt; 'Peter', 'id' =&gt; 100));\n</pre> <h3 id=\"andwhere\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model_query_builder\"><em>Phalcon\\Mvc\\Model\\Query\\Builder</em></a> <strong>andWhere</strong> (<em>string</em> $conditions, [<em>array</em> $bindParams], [<em>array</em> $bindTypes])</h3> <p>Appends a condition to the current conditions using a AND operator</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;andWhere('name = \"Peter\"');\n$builder-&gt;andWhere('name = :name: AND id &gt; :id:', array('name' =&gt; 'Peter', 'id' =&gt; 100));\n</pre> <h3 id=\"orwhere\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model_query_builder\"><em>Phalcon\\Mvc\\Model\\Query\\Builder</em></a> <strong>orWhere</strong> (<em>string</em> $conditions, [<em>array</em> $bindParams], [<em>array</em> $bindTypes])</h3> <p>Appends a condition to the current conditions using an OR operator</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;orWhere('name = \"Peter\"');\n$builder-&gt;orWhere('name = :name: AND id &gt; :id:', array('name' =&gt; 'Peter', 'id' =&gt; 100));\n</pre> <h3 id=\"betweenwhere\" class=\"method-signature\">public <strong>betweenWhere</strong> (<em>mixed</em> $expr, <em>mixed</em> $minimum, <em>mixed</em> $maximum, [<em>mixed</em> $operator])</h3> <p>Appends a BETWEEN condition to the current conditions</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;betweenWhere('price', 100.25, 200.50);\n</pre> <h3 id=\"notbetweenwhere\" class=\"method-signature\">public <strong>notBetweenWhere</strong> (<em>mixed</em> $expr, <em>mixed</em> $minimum, <em>mixed</em> $maximum, [<em>mixed</em> $operator])</h3> <p>Appends a NOT BETWEEN condition to the current conditions</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;notBetweenWhere('price', 100.25, 200.50);\n</pre> <h3 id=\"inwhere\" class=\"method-signature\">public <strong>inWhere</strong> (<em>mixed</em> $expr, <em>array</em> $values, [<em>mixed</em> $operator])</h3> <p>Appends an IN condition to the current conditions</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;inWhere('id', [1, 2, 3]);\n</pre> <h3 id=\"notinwhere\" class=\"method-signature\">public <strong>notInWhere</strong> (<em>mixed</em> $expr, <em>array</em> $values, [<em>mixed</em> $operator])</h3> <p>Appends a NOT IN condition to the current conditions</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;notInWhere('id', [1, 2, 3]);\n</pre> <h3 id=\"getwhere\" class=\"method-signature\">public <em>string|array</em> <strong>getWhere</strong> ()</h3> <p>Return the conditions for the query</p> <h3 id=\"orderby\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model_query_builder\"><em>Phalcon\\Mvc\\Model\\Query\\Builder</em></a> <strong>orderBy</strong> (<em>string|array</em> $orderBy)</h3> <p>Sets an ORDER BY condition clause</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;orderBy('Robots.name');\n$builder-&gt;orderBy(array('1', 'Robots.name'));\n</pre> <h3 id=\"getorderby\" class=\"method-signature\">public <em>string|array</em> <strong>getOrderBy</strong> ()</h3> <p>Returns the set ORDER BY clause</p> <h3 id=\"having\" class=\"method-signature\">public <strong>having</strong> (<em>mixed</em> $having)</h3> <p>Sets a HAVING condition clause. You need to escape PHQL reserved words using [ and ] delimiters</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;having('SUM(Robots.price) &gt; 0');\n</pre> <h3 id=\"forupdate\" class=\"method-signature\">public <strong>forUpdate</strong> (<em>mixed</em> $forUpdate)</h3> <p>Sets a FOR UPDATE clause</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;forUpdate(true);\n</pre> <h3 id=\"gethaving\" class=\"method-signature\">public <em>string|array</em> <strong>getHaving</strong> ()</h3> <p>Return the current having clause</p> <h3 id=\"limit\" class=\"method-signature\">public <strong>limit</strong> ([<em>mixed</em> $limit], [<em>mixed</em> $offset])</h3> <p>Sets a LIMIT clause, optionally an offset clause</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;limit(100);\n$builder-&gt;limit(100, 20);\n</pre> <h3 id=\"getlimit\" class=\"method-signature\">public <em>string|array</em> <strong>getLimit</strong> ()</h3> <p>Returns the current LIMIT clause</p> <h3 id=\"offset\" class=\"method-signature\">public <strong>offset</strong> (<em>mixed</em> $offset)</h3> <p>Sets an OFFSET clause</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;offset(30);\n</pre> <h3 id=\"getoffset\" class=\"method-signature\">public <em>string|array</em> <strong>getOffset</strong> ()</h3> <p>Returns the current OFFSET clause</p> <h3 id=\"groupby\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model_query_builder\"><em>Phalcon\\Mvc\\Model\\Query\\Builder</em></a> <strong>groupBy</strong> (<em>string|array</em> $group)</h3> <p>Sets a GROUP BY clause</p> <pre class=\"highlight-php\" data-language=\"php\">$builder-&gt;groupBy(array('Robots.name'));\n</pre> <h3 id=\"getgroupby\" class=\"method-signature\">public <em>string</em> <strong>getGroupBy</strong> ()</h3> <p>Returns the GROUP BY clause</p> <h3 id=\"getphql\" class=\"method-signature\">final public <em>string</em> <strong>getPhql</strong> ()</h3> <p>Returns a PHQL statement built based on the builder parameters</p> <h3 id=\"getquery\" class=\"method-signature\">public <strong>getQuery</strong> ()</h3> <p>Returns the query built</p> <h3 id=\"autoescape\" class=\"method-signature\">final public <strong>autoescape</strong> (<em>mixed</em> $identifier)</h3> <p>Automatically escapes identifiers but only if they need to be escaped.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Builder.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_Builder.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_transaction_exception":"<h1 id=\"class-phalcon-mvc-model-transaction-exception\">Class <strong>Phalcon\\Mvc\\Model\\Transaction\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_mvc_model_exception\"><em>Phalcon\\Mvc\\Model\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/transaction/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_validator_numericality":"<h1 id=\"class-phalcon-mvc-model-validator-numericality\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\Numericality</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_validator\"><em>Phalcon\\Mvc\\Model\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_validatorinterface\"><em>Phalcon\\Mvc\\Model\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/numericality.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to validate if a field has a valid numeric format</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Validator\\Numericality as NumericalityValidator;\n\nclass Products extends \\Phalcon\\Mvc\\Model\n{\n\n  public function validation()\n  {\n      $this-&gt;validate(new NumericalityValidator(array(\n          \"field\" =&gt; 'price'\n      )));\n      if ($this-&gt;validationHasFailed() == true) {\n          return false;\n      }\n  }\n\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_entityinterface\"><em>Phalcon\\Mvc\\EntityInterface</em></a> $record)</h3> <p>Executes the validator</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <h3 id=\"appendmessage\" class=\"method-signature\">protected <strong>appendMessage</strong> (<em>string</em> $message, [<em>string|array</em> $field], [<em>string</em> $type]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Appends a message to the validator</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns messages generated by the validator</p> <h3 id=\"getoptions\" class=\"method-signature\">public <em>array</em> <strong>getOptions</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns all the options from the validator</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns an option</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $option) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Check whether an option has been defined in the validator options</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Numericality.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Numericality.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model":"<h1 id=\"abstract-class-phalcon-mvc-model\">Abstract class <strong>Phalcon\\Mvc\\Model</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_entityinterface\"><em>Phalcon\\Mvc\\EntityInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_mvc_model_resultinterface\"><em>Phalcon\\Mvc\\Model\\ResultInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, Serializable, JsonSerializable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Phalcon\\Mvc\\Model connects business objects and database tables to create a persistable domain model where logic and data are presented in one wrapping. It‘s an implementation of the object-relational mapping (ORM). A model represents the information (data) of the application and the rules to manipulate that data. Models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application’s business logic will be concentrated in the models. Phalcon\\Mvc\\Model is the first ORM written in Zephir/C languages for PHP, giving to developers high performance when interacting with databases while is also easy to use.</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = new Robots();\n $robot-&gt;type = 'mechanical';\n $robot-&gt;name = 'Astro Boy';\n $robot-&gt;year = 1952;\n if ($robot-&gt;save() == false) {\n  echo \"Umh, We can store robots: \";\n  foreach ($robot-&gt;getMessages() as $message) {\n echo message;\n  }\n } else {\n  echo \"Great, a new robot was saved successfully!\";\n }\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"op_none\" class=\"method-signature\">\n<em>integer</em> <strong>OP_NONE</strong>\n</h3> <h3 id=\"op_create\" class=\"method-signature\">\n<em>integer</em> <strong>OP_CREATE</strong>\n</h3> <h3 id=\"op_update\" class=\"method-signature\">\n<em>integer</em> <strong>OP_UPDATE</strong>\n</h3> <h3 id=\"op_delete\" class=\"method-signature\">\n<em>integer</em> <strong>OP_DELETE</strong>\n</h3> <h3 id=\"dirty_state_persistent\" class=\"method-signature\">\n<em>integer</em> <strong>DIRTY_STATE_PERSISTENT</strong>\n</h3> <h3 id=\"dirty_state_transient\" class=\"method-signature\">\n<em>integer</em> <strong>DIRTY_STATE_TRANSIENT</strong>\n</h3> <h3 id=\"dirty_state_detached\" class=\"method-signature\">\n<em>integer</em> <strong>DIRTY_STATE_DETACHED</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">final public <strong>__construct</strong> ([<em>mixed</em> $data], [<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector], [<a class=\"reference internal\" href=\"phalcon_mvc_model_managerinterface\"><em>Phalcon\\Mvc\\Model\\ManagerInterface</em></a> $modelsManager])</h3> <p>Phalcon\\Mvc\\Model constructor</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the dependency injection container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the dependency injection container</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">protected <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager)</h3> <p>Sets a custom events manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">protected <strong>getEventsManager</strong> ()</h3> <p>Returns the custom events manager</p> <h3 id=\"getmodelsmetadata\" class=\"method-signature\">public <strong>getModelsMetaData</strong> ()</h3> <p>Returns the models meta-data service related to the entity instance</p> <h3 id=\"getmodelsmanager\" class=\"method-signature\">public <strong>getModelsManager</strong> ()</h3> <p>Returns the models manager related to the entity instance</p> <h3 id=\"settransaction\" class=\"method-signature\">public <strong>setTransaction</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_transactioninterface\"><em>Phalcon\\Mvc\\Model\\TransactionInterface</em></a> $transaction)</h3> <p>Sets a transaction related to the Model instance</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Transaction\\Manager as TxManager;\nuse Phalcon\\Mvc\\Model\\Transaction\\Failed as TxFailed;\n\ntry {\n\n  $txManager = new TxManager();\n\n  $transaction = $txManager-&gt;get();\n\n  $robot = new Robots();\n  $robot-&gt;setTransaction($transaction);\n  $robot-&gt;name = 'WALL·E';\n  $robot-&gt;created_at = date('Y-m-d');\n  if ($robot-&gt;save() == false) {\n  $transaction-&gt;rollback(\"Can't save robot\");\n  }\n\n  $robotPart = new RobotParts();\n  $robotPart-&gt;setTransaction($transaction);\n  $robotPart-&gt;type = 'head';\n  if ($robotPart-&gt;save() == false) {\n  $transaction-&gt;rollback(\"Robot part cannot be saved\");\n  }\n\n  $transaction-&gt;commit();\n\n} catch (TxFailed $e) {\n  echo 'Failed, reason: ', $e-&gt;getMessage();\n}\n</pre> <h3 id=\"setsource\" class=\"method-signature\">protected <strong>setSource</strong> (<em>mixed</em> $source)</h3> <p>Sets table name which model should be mapped</p> <h3 id=\"getsource\" class=\"method-signature\">public <strong>getSource</strong> ()</h3> <p>Returns table name mapped in the model</p> <h3 id=\"setschema\" class=\"method-signature\">protected <strong>setSchema</strong> (<em>mixed</em> $schema)</h3> <p>Sets schema name where table mapped is located</p> <h3 id=\"getschema\" class=\"method-signature\">public <strong>getSchema</strong> ()</h3> <p>Returns schema name where table mapped is located</p> <h3 id=\"setconnectionservice\" class=\"method-signature\">public <strong>setConnectionService</strong> (<em>mixed</em> $connectionService)</h3> <p>Sets the DependencyInjection connection service name</p> <h3 id=\"setreadconnectionservice\" class=\"method-signature\">public <strong>setReadConnectionService</strong> (<em>mixed</em> $connectionService)</h3> <p>Sets the DependencyInjection connection service name used to read data</p> <h3 id=\"setwriteconnectionservice\" class=\"method-signature\">public <strong>setWriteConnectionService</strong> (<em>mixed</em> $connectionService)</h3> <p>Sets the DependencyInjection connection service name used to write data</p> <h3 id=\"getreadconnectionservice\" class=\"method-signature\">public <strong>getReadConnectionService</strong> ()</h3> <p>Returns the DependencyInjection connection service name used to read data related the model</p> <h3 id=\"getwriteconnectionservice\" class=\"method-signature\">public <strong>getWriteConnectionService</strong> ()</h3> <p>Returns the DependencyInjection connection service name used to write data related to the model</p> <h3 id=\"setdirtystate\" class=\"method-signature\">public <strong>setDirtyState</strong> (<em>mixed</em> $dirtyState)</h3> <p>Sets the dirty state of the object using one of the DIRTY_STATE_* constants</p> <h3 id=\"getdirtystate\" class=\"method-signature\">public <strong>getDirtyState</strong> ()</h3> <p>Returns one of the DIRTY_STATE_* constants telling if the record exists in the database or not</p> <h3 id=\"getreadconnection\" class=\"method-signature\">public <strong>getReadConnection</strong> ()</h3> <p>Gets the connection used to read data for the model</p> <h3 id=\"getwriteconnection\" class=\"method-signature\">public <strong>getWriteConnection</strong> ()</h3> <p>Gets the connection used to write data to the model</p> <h3 id=\"assign\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model\"><em>Phalcon\\Mvc\\Model</em></a> <strong>assign</strong> (<em>array</em> $data, [<em>mixed</em> $dataColumnMap], [<em>array</em> $whiteList])</h3> <p>Assigns values to a model from an array</p> <pre class=\"highlight-php\" data-language=\"php\">$robot-&gt;assign(array(\n'type' =&gt; 'mechanical',\n'name' =&gt; 'Astro Boy',\n'year' =&gt; 1952\n ));\n\n //assign by db row, column map needed\n $robot-&gt;assign($dbRow, array(\n'db_type' =&gt; 'type',\n'db_name' =&gt; 'name',\n'db_year' =&gt; 'year'\n ));\n\n //allow assign only name and year\n $robot-&gt;assign($_POST, null, array('name', 'year');\n</pre> <h3 id=\"cloneresultmap\" class=\"method-signature\">public static <strong>cloneResultMap</strong> (<em>\\Phalcon\\Mvc\\ModelInterface|\\Phalcon\\Mvc\\Model\\Row</em> $base, <em>array</em> $data, <em>array</em> $columnMap, [<em>int</em> $dirtyState], [<em>boolean</em> $keepSnapshots])</h3> <p>Assigns values to a model from an array returning a new model.</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = \\Phalcon\\Mvc\\Model::cloneResultMap(new Robots(), array(\n  'type' =&gt; 'mechanical',\n  'name' =&gt; 'Astro Boy',\n  'year' =&gt; 1952\n));\n</pre> <h3 id=\"cloneresultmaphydrate\" class=\"method-signature\">public static <em>mixed</em> <strong>cloneResultMapHydrate</strong> (<em>array</em> $data, <em>array</em> $columnMap, <em>int</em> $hydrationMode)</h3> <p>Returns an hydrated result based on the data and the column map</p> <h3 id=\"cloneresult\" class=\"method-signature\">public static <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> <strong>cloneResult</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $base, <em>array</em> $data, [<em>int</em> $dirtyState])</h3> <p>Assigns values to a model from an array returning a new model</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = Phalcon\\Mvc\\Model::cloneResult(new Robots(), array(\n  'type' =&gt; 'mechanical',\n  'name' =&gt; 'Astro Boy',\n  'year' =&gt; 1952\n));\n</pre> <h3 id=\"find\" class=\"method-signature\">public static <strong>find</strong> ([<em>mixed</em> $parameters])</h3> <p>Allows to query a set of records that match the specified conditions</p> <pre class=\"highlight-php\" data-language=\"php\">// How many robots are there?\n $robots = Robots::find();\n echo 'There are ', count($robots), \"\\n\";\n\n // How many mechanical robots are there?\n $robots = Robots::find(\"type='mechanical'\");\n echo 'There are ', count($robots), \"\\n\";\n\n // Get and print virtual robots ordered by name\n $robots = Robots::find([\"type='virtual'\", 'order' =&gt; 'name']);\n foreach ($robots as $robot) {\n echo $robot-&gt;name, \"\\n\";\n }\n\n // Get first 100 virtual robots ordered by name\n $robots = Robots::find([\"type='virtual'\", 'order' =&gt; 'name', 'limit' =&gt; 100]);\n foreach ($robots as $robot) {\n echo $robot-&gt;name, \"\\n\";\n }\n</pre> <h3 id=\"findfirst\" class=\"method-signature\">public static <em>static</em> <strong>findFirst</strong> ([<em>string|array</em> $parameters])</h3> <p>Allows to query the first record that match the specified conditions</p> <pre class=\"highlight-php\" data-language=\"php\">//What's the first robot in robots table?\n $robot = Robots::findFirst();\n echo \"The robot name is \", $robot-&gt;name;\n\n //What's the first mechanical robot in robots table?\n $robot = Robots::findFirst(\"type='mechanical'\");\n echo \"The first mechanical robot name is \", $robot-&gt;name;\n\n //Get first virtual robot ordered by name\n $robot = Robots::findFirst(array(\"type='virtual'\", \"order\" =&gt; \"name\"));\n echo \"The first virtual robot name is \", $robot-&gt;name;\n</pre> <h3 id=\"query\" class=\"method-signature\">public static <strong>query</strong> ([<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector])</h3> <p>Create a criteria for a specific model</p> <h3 id=\"_exists\" class=\"method-signature\">protected <em>boolean</em> <strong>_exists</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_metadatainterface\"><em>Phalcon\\Mvc\\Model\\MetaDataInterface</em></a> $metaData, <a class=\"reference internal\" href=\"phalcon_db_adapterinterface\"><em>Phalcon\\Db\\AdapterInterface</em></a> $connection, [<em>string|array</em> $table])</h3> <p>Checks if the current record already exists or not</p> <h3 id=\"_groupresult\" class=\"method-signature\">protected static <a class=\"reference internal\" href=\"phalcon_mvc_model_resultsetinterface\"><em>Phalcon\\Mvc\\Model\\ResultsetInterface</em></a> <strong>_groupResult</strong> (<em>mixed</em> $functionName, <em>string</em> $alias, <em>array</em> $parameters)</h3> <p>Generate a PHQL SELECT statement for an aggregate</p> <h3 id=\"count\" class=\"method-signature\">public static <em>mixed</em> <strong>count</strong> ([<em>array</em> $parameters])</h3> <p>Allows to count how many records match the specified conditions</p> <pre class=\"highlight-php\" data-language=\"php\">//How many robots are there?\n $number = Robots::count();\n echo \"There are \", $number, \"\\n\";\n\n //How many mechanical robots are there?\n $number = Robots::count(\"type = 'mechanical'\");\n echo \"There are \", $number, \" mechanical robots\\n\";\n</pre> <h3 id=\"sum\" class=\"method-signature\">public static <em>mixed</em> <strong>sum</strong> ([<em>array</em> $parameters])</h3> <p>Allows to calculate a sum on a column that match the specified conditions</p> <pre class=\"highlight-php\" data-language=\"php\">//How much are all robots?\n $sum = Robots::sum(array('column' =&gt; 'price'));\n echo \"The total price of robots is \", $sum, \"\\n\";\n\n //How much are mechanical robots?\n $sum = Robots::sum(array(\"type = 'mechanical'\", 'column' =&gt; 'price'));\n echo \"The total price of mechanical robots is  \", $sum, \"\\n\";\n</pre> <h3 id=\"maximum\" class=\"method-signature\">public static <em>mixed</em> <strong>maximum</strong> ([<em>array</em> $parameters])</h3> <p>Allows to get the maximum value of a column that match the specified conditions</p> <pre class=\"highlight-php\" data-language=\"php\">//What is the maximum robot id?\n $id = Robots::maximum(array('column' =&gt; 'id'));\n echo \"The maximum robot id is: \", $id, \"\\n\";\n\n //What is the maximum id of mechanical robots?\n $sum = Robots::maximum(array(\"type='mechanical'\", 'column' =&gt; 'id'));\n echo \"The maximum robot id of mechanical robots is \", $id, \"\\n\";\n</pre> <h3 id=\"minimum\" class=\"method-signature\">public static <em>mixed</em> <strong>minimum</strong> ([<em>array</em> $parameters])</h3> <p>Allows to get the minimum value of a column that match the specified conditions</p> <pre class=\"highlight-php\" data-language=\"php\">//What is the minimum robot id?\n $id = Robots::minimum(array('column' =&gt; 'id'));\n echo \"The minimum robot id is: \", $id;\n\n //What is the minimum id of mechanical robots?\n $sum = Robots::minimum(array(\"type='mechanical'\", 'column' =&gt; 'id'));\n echo \"The minimum robot id of mechanical robots is \", $id;\n</pre> <h3 id=\"average\" class=\"method-signature\">public static <em>double</em> <strong>average</strong> ([<em>array</em> $parameters])</h3> <p>Allows to calculate the average value on a column matching the specified conditions</p> <pre class=\"highlight-php\" data-language=\"php\">//What's the average price of robots?\n $average = Robots::average(array('column' =&gt; 'price'));\n echo \"The average price is \", $average, \"\\n\";\n\n //What's the average price of mechanical robots?\n $average = Robots::average(array(\"type='mechanical'\", 'column' =&gt; 'price'));\n echo \"The average price of mechanical robots is \", $average, \"\\n\";\n</pre> <h3 id=\"fireevent\" class=\"method-signature\">public <strong>fireEvent</strong> (<em>mixed</em> $eventName)</h3> <p>Fires an event, implicitly calls behaviors and listeners in the events manager are notified</p> <h3 id=\"fireeventcancel\" class=\"method-signature\">public <strong>fireEventCancel</strong> (<em>mixed</em> $eventName)</h3> <p>Fires an event, implicitly calls behaviors and listeners in the events manager are notified This method stops if one of the callbacks/listeners returns boolean false</p> <h3 id=\"_canceloperation\" class=\"method-signature\">protected <strong>_cancelOperation</strong> ()</h3> <p>Cancel the current operation</p> <h3 id=\"appendmessage\" class=\"method-signature\">public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_messageinterface\"><em>Phalcon\\Mvc\\Model\\MessageInterface</em></a> $message)</h3> <p>Appends a customized message on the validation process</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\n use Phalcon\\Mvc\\Model\\Message as Message;\n\n class Robots extends Model\n {\n\n   public function beforeSave()\n   {\n if ($this-&gt;name == 'Peter') {\n    $message = new Message(\"Sorry, but a robot cannot be named Peter\");\n    $this-&gt;appendMessage($message);\n }\n   }\n }\n</pre> <h3 id=\"validate\" class=\"method-signature\">protected <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validationinterface\"><em>Phalcon\\ValidationInterface</em></a> $validator)</h3> <p>Executes validators on every validation call</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\ExclusionIn;\n\nclass Subscriptors extends Model\n{\n\npublic function validation()\n  {\n            $validator = new Validation();\n            $validator-&gt;add('status', new ExclusionIn(array(\n            'domain' =&gt; array('A', 'I')\n    )));\n\n    return $this-&gt;validate($validator);\n}\n}\n</pre> <h3 id=\"validationhasfailed\" class=\"method-signature\">public <strong>validationHasFailed</strong> ()</h3> <p>Check whether validation process has generated any messages</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Validator\\ExclusionIn as ExclusionIn;\n\nclass Subscriptors extends Model\n{\n\npublic function validation()\n  {\n  $validator = new Validation();\n\n            $validator-&gt;validate('status', new ExclusionIn(array(\n            'domain' =&gt; array('A', 'I')\n    ));\n\n    return $this-&gt;validate($validator);\n}\n}\n</pre> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> ([<em>mixed</em> $filter])</h3> <p>Returns array of validation messages</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = new Robots();\n$robot-&gt;type = 'mechanical';\n$robot-&gt;name = 'Astro Boy';\n$robot-&gt;year = 1952;\nif ($robot-&gt;save() == false) {\n    echo \"Umh, We can't store robots right now \";\n    foreach ($robot-&gt;getMessages() as $message) {\n            echo $message;\n    }\n} else {\n    echo \"Great, a new robot was saved successfully!\";\n}\n</pre> <h3 id=\"_checkforeignkeysrestrict\" class=\"method-signature\">final protected <strong>_checkForeignKeysRestrict</strong> ()</h3> <p>Reads “belongs to” relations and check the virtual foreign keys when inserting or updating records to verify that inserted/updated values are present in the related entity</p> <h3 id=\"_checkforeignkeysreversecascade\" class=\"method-signature\">final protected <strong>_checkForeignKeysReverseCascade</strong> ()</h3> <p>Reads both “hasMany” and “hasOne” relations and checks the virtual foreign keys (cascade) when deleting records</p> <h3 id=\"_checkforeignkeysreverserestrict\" class=\"method-signature\">final protected <strong>_checkForeignKeysReverseRestrict</strong> ()</h3> <p>Reads both “hasMany” and “hasOne” relations and checks the virtual foreign keys (restrict) when deleting records</p> <h3 id=\"_presave\" class=\"method-signature\">protected <strong>_preSave</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_metadatainterface\"><em>Phalcon\\Mvc\\Model\\MetaDataInterface</em></a> $metaData, <em>mixed</em> $exists, <em>mixed</em> $identityField)</h3> <p>Executes internal hooks before save a record</p> <h3 id=\"_postsave\" class=\"method-signature\">protected <strong>_postSave</strong> (<em>mixed</em> $success, <em>mixed</em> $exists)</h3> <p>Executes internal events after save a record</p> <h3 id=\"_dolowinsert\" class=\"method-signature\">protected <em>boolean</em> <strong>_doLowInsert</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_metadatainterface\"><em>Phalcon\\Mvc\\Model\\MetaDataInterface</em></a> $metaData, <a class=\"reference internal\" href=\"phalcon_db_adapterinterface\"><em>Phalcon\\Db\\AdapterInterface</em></a> $connection, <em>string|array</em> $table, <em>boolean|string</em> $identityField)</h3> <p>Sends a pre-build INSERT SQL statement to the relational database system</p> <h3 id=\"_dolowupdate\" class=\"method-signature\">protected <em>boolean</em> <strong>_doLowUpdate</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_metadatainterface\"><em>Phalcon\\Mvc\\Model\\MetaDataInterface</em></a> $metaData, <a class=\"reference internal\" href=\"phalcon_db_adapterinterface\"><em>Phalcon\\Db\\AdapterInterface</em></a> $connection, <em>string|array</em> $table)</h3> <p>Sends a pre-build UPDATE SQL statement to the relational database system</p> <h3 id=\"_presaverelatedrecords\" class=\"method-signature\">protected <em>boolean</em> <strong>_preSaveRelatedRecords</strong> (<a class=\"reference internal\" href=\"phalcon_db_adapterinterface\"><em>Phalcon\\Db\\AdapterInterface</em></a> $connection, <em>\\Phalcon\\Mvc\\ModelInterface[]</em> $related)</h3> <p>Saves related records that must be stored prior to save the master record</p> <h3 id=\"_postsaverelatedrecords\" class=\"method-signature\">protected <em>boolean</em> <strong>_postSaveRelatedRecords</strong> (<a class=\"reference internal\" href=\"phalcon_db_adapterinterface\"><em>Phalcon\\Db\\AdapterInterface</em></a> $connection, <em>Phalcon\\Mvc\\ModelInterface[]</em> $related)</h3> <p>Save the related records assigned in the has-one/has-many relations</p> <h3 id=\"save\" class=\"method-signature\">public <em>boolean</em> <strong>save</strong> ([<em>array</em> $data], [<em>array</em> $whiteList])</h3> <p>Inserts or updates a model instance. Returning true on success or false otherwise.</p> <pre class=\"highlight-php\" data-language=\"php\">//Creating a new robot\n$robot = new Robots();\n$robot-&gt;type = 'mechanical';\n$robot-&gt;name = 'Astro Boy';\n$robot-&gt;year = 1952;\n$robot-&gt;save();\n\n//Updating a robot name\n$robot = Robots::findFirst(\"id=100\");\n$robot-&gt;name = \"Biomass\";\n$robot-&gt;save();\n</pre> <h3 id=\"create\" class=\"method-signature\">public <strong>create</strong> ([<em>mixed</em> $data], [<em>mixed</em> $whiteList])</h3> <p>Inserts a model instance. If the instance already exists in the persistence it will throw an exception Returning true on success or false otherwise.</p> <pre class=\"highlight-php\" data-language=\"php\">//Creating a new robot\n$robot = new Robots();\n$robot-&gt;type = 'mechanical';\n$robot-&gt;name = 'Astro Boy';\n$robot-&gt;year = 1952;\n$robot-&gt;create();\n\n  //Passing an array to create\n  $robot = new Robots();\n  $robot-&gt;create(array(\n  'type' =&gt; 'mechanical',\n  'name' =&gt; 'Astro Boy',\n  'year' =&gt; 1952\n  ));\n</pre> <h3 id=\"update\" class=\"method-signature\">public <strong>update</strong> ([<em>mixed</em> $data], [<em>mixed</em> $whiteList])</h3> <p>Updates a model instance. If the instance doesn’t exist in the persistence it will throw an exception Returning true on success or false otherwise.</p> <pre class=\"highlight-php\" data-language=\"php\">//Updating a robot name\n$robot = Robots::findFirst(\"id=100\");\n$robot-&gt;name = \"Biomass\";\n$robot-&gt;update();\n</pre> <h3 id=\"delete\" class=\"method-signature\">public <strong>delete</strong> ()</h3> <p>Deletes a model instance. Returning true on success or false otherwise.</p> <pre class=\"highlight-php\" data-language=\"php\">$robot = Robots::findFirst(\"id=100\");\n$robot-&gt;delete();\n\nforeach (Robots::find(\"type = 'mechanical'\") as $robot) {\n   $robot-&gt;delete();\n}\n</pre> <h3 id=\"getoperationmade\" class=\"method-signature\">public <strong>getOperationMade</strong> ()</h3> <p>Returns the type of the latest operation performed by the ORM Returns one of the OP_* class constants</p> <h3 id=\"refresh\" class=\"method-signature\">public <strong>refresh</strong> ()</h3> <p>Refreshes the model attributes re-querying the record from the database</p> <h3 id=\"skipoperation\" class=\"method-signature\">public <strong>skipOperation</strong> (<em>mixed</em> $skip)</h3> <p>Skips the current operation forcing a success state</p> <h3 id=\"readattribute\" class=\"method-signature\">public <strong>readAttribute</strong> (<em>mixed</em> $attribute)</h3> <p>Reads an attribute value by its name</p> <pre class=\"highlight-php\" data-language=\"php\">echo $robot-&gt;readAttribute('name');\n</pre> <h3 id=\"writeattribute\" class=\"method-signature\">public <strong>writeAttribute</strong> (<em>mixed</em> $attribute, <em>mixed</em> $value)</h3> <p>Writes an attribute value by its name</p> <pre class=\"highlight-php\" data-language=\"php\">$robot-&gt;writeAttribute('name', 'Rosey');\n</pre> <h3 id=\"skipattributes\" class=\"method-signature\">protected <strong>skipAttributes</strong> (<em>array</em> $attributes)</h3> <p>Sets a list of attributes that must be skipped from the generated INSERT/UPDATE statement</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n\n   public function initialize()\n   {\n   $this-&gt;skipAttributes(array('price'));\n   }\n}\n</pre> <h3 id=\"skipattributesoncreate\" class=\"method-signature\">protected <strong>skipAttributesOnCreate</strong> (<em>array</em> $attributes)</h3> <p>Sets a list of attributes that must be skipped from the generated INSERT statement</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n\n   public function initialize()\n   {\n   $this-&gt;skipAttributesOnCreate(array('created_at'));\n   }\n}\n</pre> <h3 id=\"skipattributesonupdate\" class=\"method-signature\">protected <strong>skipAttributesOnUpdate</strong> (<em>array</em> $attributes)</h3> <p>Sets a list of attributes that must be skipped from the generated UPDATE statement</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n\n   public function initialize()\n   {\n   $this-&gt;skipAttributesOnUpdate(array('modified_in'));\n   }\n}\n</pre> <h3 id=\"allowemptystringvalues\" class=\"method-signature\">protected <strong>allowEmptyStringValues</strong> (<em>array</em> $attributes)</h3> <p>Sets a list of attributes that must be skipped from the generated UPDATE statement</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n\n   public function initialize()\n   {\n   $this-&gt;allowEmptyStringValues(array('name'));\n   }\n}\n</pre> <h3 id=\"hasone\" class=\"method-signature\">protected <strong>hasOne</strong> (<em>mixed</em> $fields, <em>mixed</em> $referenceModel, <em>mixed</em> $referencedFields, [<em>mixed</em> $options])</h3> <p>Setup a 1-1 relation between two models</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n\n   public function initialize()\n   {\n   $this-&gt;hasOne('id', 'RobotsDescription', 'robots_id');\n   }\n}\n</pre> <h3 id=\"belongsto\" class=\"method-signature\">protected <strong>belongsTo</strong> (<em>mixed</em> $fields, <em>mixed</em> $referenceModel, <em>mixed</em> $referencedFields, [<em>mixed</em> $options])</h3> <p>Setup a relation reverse 1-1 between two models</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php\n\nclass RobotsParts extends \\Phalcon\\Mvc\\Model\n{\n\n   public function initialize()\n   {\n   $this-&gt;belongsTo('robots_id', 'Robots', 'id');\n   }\n\n}\n</pre> <h3 id=\"hasmany\" class=\"method-signature\">protected <strong>hasMany</strong> (<em>mixed</em> $fields, <em>mixed</em> $referenceModel, <em>mixed</em> $referencedFields, [<em>mixed</em> $options])</h3> <p>Setup a relation 1-n between two models</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n\n   public function initialize()\n   {\n   $this-&gt;hasMany('id', 'RobotsParts', 'robots_id');\n   }\n}\n</pre> <h3 id=\"hasmanytomany\" class=\"method-signature\">protected <a class=\"reference internal\" href=\"phalcon_mvc_model_relation\"><em>Phalcon\\Mvc\\Model\\Relation</em></a> <strong>hasManyToMany</strong> (<em>string|array</em> $fields, <em>string</em> $intermediateModel, <em>string|array</em> $intermediateFields, <em>string|array</em> $intermediateReferencedFields, <em>mixed</em> $referenceModel, <em>string|array</em> $referencedFields, [<em>array</em> $options])</h3> <p>Setup a relation n-n between two models through an intermediate relation</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n\n   public function initialize()\n   {\n   //Setup a many-to-many relation to Parts through RobotsParts\n   $this-&gt;hasManyToMany(\n            'id',\n            'RobotsParts',\n            'robots_id',\n            'parts_id',\n            'Parts',\n            'id'\n    );\n   }\n}\n</pre> <h3 id=\"addbehavior\" class=\"method-signature\">public <strong>addBehavior</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_behaviorinterface\"><em>Phalcon\\Mvc\\Model\\BehaviorInterface</em></a> $behavior)</h3> <p>Setups a behavior in a model</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\nclass Robots extends Model\n{\n\n   public function initialize()\n   {\n    $this-&gt;addBehavior(new Timestampable(array(\n            'onCreate' =&gt; array(\n                    'field' =&gt; 'created_at',\n                    'format' =&gt; 'Y-m-d'\n            )\n    )));\n   }\n}\n</pre> <h3 id=\"keepsnapshots\" class=\"method-signature\">protected <strong>keepSnapshots</strong> (<em>mixed</em> $keepSnapshot)</h3> <p>Sets if the model must keep the original record snapshot in memory</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n\n   public function initialize()\n   {\n    $this-&gt;keepSnapshots(true);\n   }\n}\n</pre> <h3 id=\"setsnapshotdata\" class=\"method-signature\">public <strong>setSnapshotData</strong> (<em>array</em> $data, [<em>array</em> $columnMap])</h3> <p>Sets the record’s snapshot data. This method is used internally to set snapshot data when the model was set up to keep snapshot data</p> <h3 id=\"hassnapshotdata\" class=\"method-signature\">public <strong>hasSnapshotData</strong> ()</h3> <p>Checks if the object has internal snapshot data</p> <h3 id=\"getsnapshotdata\" class=\"method-signature\">public <strong>getSnapshotData</strong> ()</h3> <p>Returns the internal snapshot data</p> <h3 id=\"haschanged\" class=\"method-signature\">public <strong>hasChanged</strong> ([<em>string|array</em> $fieldName])</h3> <p>Check if a specific attribute has changed This only works if the model is keeping data snapshots</p> <h3 id=\"getchangedfields\" class=\"method-signature\">public <strong>getChangedFields</strong> ()</h3> <p>Returns a list of changed values</p> <h3 id=\"usedynamicupdate\" class=\"method-signature\">protected <strong>useDynamicUpdate</strong> (<em>mixed</em> $dynamicUpdate)</h3> <p>Sets if a model must use dynamic update instead of the all-field update</p> <pre class=\"highlight-php\" data-language=\"php\">&lt;?php\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n\n   public function initialize()\n   {\n    $this-&gt;useDynamicUpdate(true);\n   }\n}\n</pre> <h3 id=\"getrelated\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model_resultsetinterface\"><em>Phalcon\\Mvc\\Model\\ResultsetInterface</em></a> <strong>getRelated</strong> (<em>string</em> $alias, [<em>array</em> $arguments])</h3> <p>Returns related records based on defined relations</p> <h3 id=\"_getrelatedrecords\" class=\"method-signature\">protected <em>mixed</em> <strong>_getRelatedRecords</strong> (<em>string</em> $modelName, <em>string</em> $method, <em>array</em> $arguments)</h3> <p>Returns related records defined relations depending on the method name</p> <h3 id=\"_invokefinder\" class=\"method-signature\">final protected static <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> []|:doc:<cite>Phalcon\\Mvc\\ModelInterface &lt;Phalcon_Mvc_ModelInterface&gt;</cite> <a href=\"#id1\"><span class=\"problematic\" id=\"id2\">|</span></a>boolean <strong>_invokeFinder</strong> (<em>string</em> $method, <em>array</em> $arguments)</h3> <p>Try to check if the query must invoke a finder</p> <h3 id=\"__call\" class=\"method-signature\">public <em>mixed</em> <strong>__call</strong> (<em>string</em> $method, <em>array</em> $arguments)</h3> <p>Handles method calls when a method is not implemented</p> <h3 id=\"__callstatic\" class=\"method-signature\">public static <em>mixed</em> <strong>__callStatic</strong> (<em>string</em> $method, <em>array</em> $arguments)</h3> <p>Handles method calls when a static method is not implemented</p> <h3 id=\"__set\" class=\"method-signature\">public <strong>__set</strong> (<em>string</em> $property, <em>mixed</em> $value)</h3> <p>Magic method to assign values to the the model</p> <h3 id=\"_possiblesetter\" class=\"method-signature\">final protected <em>string</em> <strong>_possibleSetter</strong> (<em>string</em> $property, <em>mixed</em> $value)</h3> <p>Check for, and attempt to use, possible setter.</p> <h3 id=\"__get\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_model_resultset\"><em>Phalcon\\Mvc\\Model\\Resultset</em></a> <a href=\"#id3\"><span class=\"problematic\" id=\"id4\">|</span></a>PhalconMvcModel <strong>__get</strong> (<em>string</em> $property)</h3> <p>Magic method to get related records using the relation alias as a property</p> <h3 id=\"__isset\" class=\"method-signature\">public <strong>__isset</strong> (<em>mixed</em> $property)</h3> <p>Magic method to check if a property is a valid relation</p> <h3 id=\"serialize\" class=\"method-signature\">public <strong>serialize</strong> ()</h3> <p>Serializes the object ignoring connections, services, related objects or static properties</p> <h3 id=\"unserialize\" class=\"method-signature\">public <strong>unserialize</strong> (<em>mixed</em> $data)</h3> <p>Unserializes the object from a serialized string</p> <h3 id=\"dump\" class=\"method-signature\">public <strong>dump</strong> ()</h3> <p>Returns a simple representation of the object that can be used with var_dump</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($robot-&gt;dump());\n</pre> <h3 id=\"toarray\" class=\"method-signature\">public <em>array</em> <strong>toArray</strong> ([<em>array</em> $columns])</h3> <p>Returns the instance as an array representation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($robot-&gt;toArray());\n</pre> <h3 id=\"jsonserialize\" class=\"method-signature\">public <em>array</em> <strong>jsonSerialize</strong> ()</h3> <p>Serializes the object for json_encode</p> <pre class=\"highlight-php\" data-language=\"php\">echo json_encode($robot);\n</pre> <h3 id=\"setup\" class=\"method-signature\">public static <strong>setup</strong> (<em>array</em> $options)</h3> <p>Enables/disables options in the ORM</p> <h3 id=\"reset\" class=\"method-signature\">public <strong>reset</strong> ()</h3> <p>Reset a model instance data</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_transaction":"<h1 id=\"class-phalcon-mvc-model-transaction\">Class <strong>Phalcon\\Mvc\\Model\\Transaction</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_transactioninterface\"><em>Phalcon\\Mvc\\Model\\TransactionInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/transaction.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Transactions are protective blocks where SQL statements are only permanent if they can all succeed as one atomic action. Phalcon\\Transaction is intended to be used with Phalcon_Model_Base. Phalcon Transactions should be created using Phalcon\\Transaction\\Manager.</p> <pre class=\"highlight-php\" data-language=\"php\">try {\n\n  $manager = new \\Phalcon\\Mvc\\Model\\Transaction\\Manager();\n\n  $transaction = $manager-&gt;get();\n\n  $robot = new Robots();\n  $robot-&gt;setTransaction($transaction);\n  $robot-&gt;name = 'WALL·E';\n  $robot-&gt;created_at = date('Y-m-d');\n  if ($robot-&gt;save() == false) {\n    $transaction-&gt;rollback(\"Can't save robot\");\n  }\n\n  $robotPart = new RobotParts();\n  $robotPart-&gt;setTransaction($transaction);\n  $robotPart-&gt;type = 'head';\n  if ($robotPart-&gt;save() == false) {\n    $transaction-&gt;rollback(\"Can't save robot part\");\n  }\n\n  $transaction-&gt;commit();\n\n} catch(Phalcon\\Mvc\\Model\\Transaction\\Failed $e) {\n  echo 'Failed, reason: ', $e-&gt;getMessage();\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector, [<em>boolean</em> $autoBegin], [<em>string</em> $service])</h3> <p>Phalcon\\Mvc\\Model\\Transaction constructor</p> <h3 id=\"settransactionmanager\" class=\"method-signature\">public <strong>setTransactionManager</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_transaction_managerinterface\"><em>Phalcon\\Mvc\\Model\\Transaction\\ManagerInterface</em></a> $manager)</h3> <p>Sets transaction manager related to the transaction</p> <h3 id=\"begin\" class=\"method-signature\">public <strong>begin</strong> ()</h3> <p>Starts the transaction</p> <h3 id=\"commit\" class=\"method-signature\">public <strong>commit</strong> ()</h3> <p>Commits the transaction</p> <h3 id=\"rollback\" class=\"method-signature\">public <em>boolean</em> <strong>rollback</strong> ([<em>string</em> $rollbackMessage], [<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $rollbackRecord])</h3> <p>Rollbacks the transaction</p> <h3 id=\"getconnection\" class=\"method-signature\">public <strong>getConnection</strong> ()</h3> <p>Returns the connection related to transaction</p> <h3 id=\"setisnewtransaction\" class=\"method-signature\">public <strong>setIsNewTransaction</strong> (<em>mixed</em> $isNew)</h3> <p>Sets if is a reused transaction or new once</p> <h3 id=\"setrollbackonabort\" class=\"method-signature\">public <strong>setRollbackOnAbort</strong> (<em>mixed</em> $rollbackOnAbort)</h3> <p>Sets flag to rollback on abort the HTTP connection</p> <h3 id=\"ismanaged\" class=\"method-signature\">public <strong>isManaged</strong> ()</h3> <p>Checks whether transaction is managed by a transaction manager</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> ()</h3> <p>Returns validations messages from last save try</p> <h3 id=\"isvalid\" class=\"method-signature\">public <strong>isValid</strong> ()</h3> <p>Checks whether internal connection is under an active transaction</p> <h3 id=\"setrollbackedrecord\" class=\"method-signature\">public <strong>setRollbackedRecord</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $record)</h3> <p>Sets object which generates rollback action</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_transaction_failed":"<h1 id=\"class-phalcon-mvc-model-transaction-failed\">Class <strong>Phalcon\\Mvc\\Model\\Transaction\\Failed</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_mvc_model_transaction_exception\"><em>Phalcon\\Mvc\\Model\\Transaction\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/transaction/failed.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class will be thrown to exit a try/catch block for isolated transactions</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $message, [<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $record])</h3> <p>Phalcon\\Mvc\\Model\\Transaction\\Failed constructor</p> <h3 id=\"getrecordmessages\" class=\"method-signature\">public <strong>getRecordMessages</strong> ()</h3> <p>Returns validation record messages which stop the transaction</p> <h3 id=\"getrecord\" class=\"method-signature\">public <strong>getRecord</strong> ()</h3> <p>Returns validation record messages which stop the transaction</p> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_Failed.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_Failed.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_validationfailed":"<h1 id=\"class-phalcon-mvc-model-validationfailed\">Class <strong>Phalcon\\Mvc\\Model\\ValidationFailed</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_mvc_model_exception\"><em>Phalcon\\Mvc\\Model\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validationfailed.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This exception is generated when a model fails to save a record Phalcon\\Mvc\\Model must be set up to have this behavior</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>Model</em> $model, <em>Message[]</em> $validationMessages)</h3> <p>Phalcon\\Mvc\\Model\\ValidationFailed constructor</p> <h3 id=\"getmodel\" class=\"method-signature\">public <strong>getModel</strong> ()</h3> <p>Returns the model that generated the messages</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> ()</h3> <p>Returns the complete group of messages produced in the validation</p> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ValidationFailed.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ValidationFailed.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_validator":"<h1 id=\"abstract-class-phalcon-mvc-model-validator\">Abstract class <strong>Phalcon\\Mvc\\Model\\Validator</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This is a base class for Phalcon\\Mvc\\Model validators</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $options)</h3> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <h3 id=\"appendmessage\" class=\"method-signature\">protected <strong>appendMessage</strong> (<em>string</em> $message, [<em>string|array</em> $field], [<em>string</em> $type])</h3> <p>Appends a message to the validator</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> ()</h3> <p>Returns messages generated by the validator</p> <h3 id=\"getoptions\" class=\"method-signature\">public <em>array</em> <strong>getOptions</strong> ()</h3> <p>Returns all the options from the validator</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $option, [<em>mixed</em> $defaultValue])</h3> <p>Returns an option</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $option)</h3> <p>Check whether an option has been defined in the validator options</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_validator_email":"<h1 id=\"class-phalcon-mvc-model-validator-email\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\Email</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_validator\"><em>Phalcon\\Mvc\\Model\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_validatorinterface\"><em>Phalcon\\Mvc\\Model\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/email.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to validate if email fields has correct values</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Validator\\Email as EmailValidator;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Model\n{\n\n    public function validation()\n    {\n            $this-&gt;validate(new EmailValidator(array(\n                    'field' =&gt; 'electronic_mail'\n            )));\n            if ($this-&gt;validationHasFailed() == true) {\n                    return false;\n            }\n    }\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_entityinterface\"><em>Phalcon\\Mvc\\EntityInterface</em></a> $record)</h3> <p>Executes the validator</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <h3 id=\"appendmessage\" class=\"method-signature\">protected <strong>appendMessage</strong> (<em>string</em> $message, [<em>string|array</em> $field], [<em>string</em> $type]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Appends a message to the validator</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns messages generated by the validator</p> <h3 id=\"getoptions\" class=\"method-signature\">public <em>array</em> <strong>getOptions</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns all the options from the validator</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns an option</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $option) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Check whether an option has been defined in the validator options</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Email.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Email.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_transaction_manager":"<h1 id=\"class-phalcon-mvc-model-transaction-manager\">Class <strong>Phalcon\\Mvc\\Model\\Transaction\\Manager</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_transaction_managerinterface\"><em>Phalcon\\Mvc\\Model\\Transaction\\ManagerInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/transaction/manager.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>A transaction acts on a single database connection. If you have multiple class-specific databases, the transaction will not protect interaction among them. This class manages the objects that compose a transaction. A transaction produces a unique connection that is passed to every object part of the transaction.</p> <pre class=\"highlight-php\" data-language=\"php\">try {\n\n  use Phalcon\\Mvc\\Model\\Transaction\\Manager as TransactionManager;\n\n  $transactionManager = new TransactionManager();\n\n  $transaction = $transactionManager-&gt;get();\n\n  $robot = new Robots();\n  $robot-&gt;setTransaction($transaction);\n  $robot-&gt;name = 'WALL·E';\n  $robot-&gt;created_at = date('Y-m-d');\n  if($robot-&gt;save()==false){\n    $transaction-&gt;rollback(\"Can't save robot\");\n  }\n\n  $robotPart = new RobotParts();\n  $robotPart-&gt;setTransaction($transaction);\n  $robotPart-&gt;type = 'head';\n  if($robotPart-&gt;save()==false){\n    $transaction-&gt;rollback(\"Can't save robot part\");\n  }\n\n  $transaction-&gt;commit();\n\n} catch (Phalcon\\Mvc\\Model\\Transaction\\Failed $e) {\n  echo 'Failed, reason: ', $e-&gt;getMessage();\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector])</h3> <p>Phalcon\\Mvc\\Model\\Transaction\\Manager constructor</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the dependency injection container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the dependency injection container</p> <h3 id=\"setdbservice\" class=\"method-signature\">public <strong>setDbService</strong> (<em>mixed</em> $service)</h3> <p>Sets the database service used to run the isolated transactions</p> <h3 id=\"getdbservice\" class=\"method-signature\">public <em>string</em> <strong>getDbService</strong> ()</h3> <p>Returns the database service used to isolate the transaction</p> <h3 id=\"setrollbackpendent\" class=\"method-signature\">public <strong>setRollbackPendent</strong> (<em>mixed</em> $rollbackPendent)</h3> <p>Set if the transaction manager must register a shutdown function to clean up pendent transactions</p> <h3 id=\"getrollbackpendent\" class=\"method-signature\">public <strong>getRollbackPendent</strong> ()</h3> <p>Check if the transaction manager is registering a shutdown function to clean up pendent transactions</p> <h3 id=\"has\" class=\"method-signature\">public <strong>has</strong> ()</h3> <p>Checks whether the manager has an active transaction</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> ([<em>mixed</em> $autoBegin])</h3> <p>Returns a new \\Phalcon\\Mvc\\Model\\Transaction or an already created once This method registers a shutdown function to rollback active connections</p> <h3 id=\"getorcreatetransaction\" class=\"method-signature\">public <strong>getOrCreateTransaction</strong> ([<em>mixed</em> $autoBegin])</h3> <p>Create/Returns a new transaction or an existing one</p> <h3 id=\"rollbackpendent\" class=\"method-signature\">public <strong>rollbackPendent</strong> ()</h3> <p>Rollbacks active transactions within the manager</p> <h3 id=\"commit\" class=\"method-signature\">public <strong>commit</strong> ()</h3> <p>Commits active transactions within the manager</p> <h3 id=\"rollback\" class=\"method-signature\">public <strong>rollback</strong> ([<em>boolean</em> $collect])</h3> <p>Rollbacks active transactions within the manager Collect will remove the transaction from the manager</p> <h3 id=\"notifyrollback\" class=\"method-signature\">public <strong>notifyRollback</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_transactioninterface\"><em>Phalcon\\Mvc\\Model\\TransactionInterface</em></a> $transaction)</h3> <p>Notifies the manager about a rollbacked transaction</p> <h3 id=\"notifycommit\" class=\"method-signature\">public <strong>notifyCommit</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_transactioninterface\"><em>Phalcon\\Mvc\\Model\\TransactionInterface</em></a> $transaction)</h3> <p>Notifies the manager about a committed transaction</p> <h3 id=\"_collecttransaction\" class=\"method-signature\">protected <strong>_collectTransaction</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_transactioninterface\"><em>Phalcon\\Mvc\\Model\\TransactionInterface</em></a> $transaction)</h3> <p>Removes transactions from the TransactionManager</p> <h3 id=\"collecttransactions\" class=\"method-signature\">public <strong>collectTransactions</strong> ()</h3> <p>Remove all the transactions from the manager</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_Manager.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_Manager.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_router_exception":"<h1 id=\"class-phalcon-mvc-router-exception\">Class <strong>Phalcon\\Mvc\\Router\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/router/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_validator_exclusionin":"<h1 id=\"class-phalcon-mvc-model-validator-exclusionin\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\Exclusionin</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_validator\"><em>Phalcon\\Mvc\\Model\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_validatorinterface\"><em>Phalcon\\Mvc\\Model\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/exclusionin.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Phalcon\\Mvc\\Model\\Validator\\ExclusionIn Check if a value is not included into a list of values</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Validator\\ExclusionIn as ExclusionInValidator;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Model\n{\n\n    public function validation()\n    {\n            $this-&gt;validate(new ExclusionInValidator(array(\n                    'field' =&gt; 'status',\n                    'domain' =&gt; array('A', 'I')\n            )));\n            if ($this-&gt;validationHasFailed() == true) {\n                    return false;\n            }\n    }\n\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_entityinterface\"><em>Phalcon\\Mvc\\EntityInterface</em></a> $record)</h3> <p>Executes the validator</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <h3 id=\"appendmessage\" class=\"method-signature\">protected <strong>appendMessage</strong> (<em>string</em> $message, [<em>string|array</em> $field], [<em>string</em> $type]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Appends a message to the validator</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns messages generated by the validator</p> <h3 id=\"getoptions\" class=\"method-signature\">public <em>array</em> <strong>getOptions</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns all the options from the validator</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns an option</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $option) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Check whether an option has been defined in the validator options</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Exclusionin.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Exclusionin.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_validator_inclusionin":"<h1 id=\"class-phalcon-mvc-model-validator-inclusionin\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\Inclusionin</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_validator\"><em>Phalcon\\Mvc\\Model\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_validatorinterface\"><em>Phalcon\\Mvc\\Model\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/inclusionin.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Phalcon\\Mvc\\Model\\Validator\\InclusionIn Check if a value is included into a list of values</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Validator\\InclusionIn as InclusionInValidator;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Model\n{\n\n    public function validation()\n    {\n            $this-&gt;validate(new InclusionInValidator(array(\n                    \"field\" =&gt; 'status',\n                    'domain' =&gt; array('A', 'I')\n            )));\n            if ($this-&gt;validationHasFailed() == true) {\n                    return false;\n            }\n    }\n\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_entityinterface\"><em>Phalcon\\Mvc\\EntityInterface</em></a> $record)</h3> <p>Executes validator</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <h3 id=\"appendmessage\" class=\"method-signature\">protected <strong>appendMessage</strong> (<em>string</em> $message, [<em>string|array</em> $field], [<em>string</em> $type]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Appends a message to the validator</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns messages generated by the validator</p> <h3 id=\"getoptions\" class=\"method-signature\">public <em>array</em> <strong>getOptions</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns all the options from the validator</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns an option</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $option) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Check whether an option has been defined in the validator options</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Inclusionin.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Inclusionin.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_validator_presenceof":"<h1 id=\"class-phalcon-mvc-model-validator-presenceof\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\PresenceOf</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_validator\"><em>Phalcon\\Mvc\\Model\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_validatorinterface\"><em>Phalcon\\Mvc\\Model\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/presenceof.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to validate if a filed have a value different of null and empty string (“”)</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Validator\\PresenceOf;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Model\n{\n\n  public function validation()\n  {\n      $this-&gt;validate(new PresenceOf(array(\n          \"field\" =&gt; 'name',\n          \"message\" =&gt; 'The name is required'\n      )));\n      if ($this-&gt;validationHasFailed() == true) {\n          return false;\n      }\n  }\n\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_entityinterface\"><em>Phalcon\\Mvc\\EntityInterface</em></a> $record)</h3> <p>Executes the validator</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <h3 id=\"appendmessage\" class=\"method-signature\">protected <strong>appendMessage</strong> (<em>string</em> $message, [<em>string|array</em> $field], [<em>string</em> $type]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Appends a message to the validator</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns messages generated by the validator</p> <h3 id=\"getoptions\" class=\"method-signature\">public <em>array</em> <strong>getOptions</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns all the options from the validator</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns an option</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $option) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Check whether an option has been defined in the validator options</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_PresenceOf.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_PresenceOf.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_validator_ip":"<h1 id=\"class-phalcon-mvc-model-validator-ip\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\Ip</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_validator\"><em>Phalcon\\Mvc\\Model\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_validatorinterface\"><em>Phalcon\\Mvc\\Model\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/ip.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Phalcon\\Mvc\\Model\\Validator\\IP Validates that a value is ipv4 address in valid range</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Validator\\Ip;\n\nclass Data extends Phalcon\\Mvc\\Model\n{\n\n  public function validation()\n  {\n      // Any pubic IP\n      $this-&gt;validate(new IP(array(\n          'field'             =&gt; 'server_ip',\n          'version'           =&gt; IP::VERSION_4 | IP::VERSION_6, // v6 and v4. The same if not specified\n          'allowReserved'     =&gt; false,   // False if not specified. Ignored for v6\n          'allowPrivate'      =&gt; false,   // False if not specified\n          'message'           =&gt; 'IP address has to be correct'\n      )));\n\n      // Any public v4 address\n      $this-&gt;validate(new IP(array(\n          'field'             =&gt; 'ip_4',\n          'version'           =&gt; IP::VERSION_4,\n          'message'           =&gt; 'IP address has to be correct'\n      )));\n\n      // Any v6 address\n      $this-&gt;validate(new IP(array(\n          'field'             =&gt; 'ip6',\n          'version'           =&gt; IP::VERSION_6,\n          'allowPrivate'      =&gt; true,\n          'message'           =&gt; 'IP address has to be correct'\n      )));\n\n      if ($this-&gt;validationHasFailed() == true) {\n          return false;\n      }\n  }\n\n}\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"version_4\" class=\"method-signature\">\n<em>integer</em> <strong>VERSION_4</strong>\n</h3> <h3 id=\"version_6\" class=\"method-signature\">\n<em>integer</em> <strong>VERSION_6</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_entityinterface\"><em>Phalcon\\Mvc\\EntityInterface</em></a> $record)</h3> <p>Executes the validator</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <h3 id=\"appendmessage\" class=\"method-signature\">protected <strong>appendMessage</strong> (<em>string</em> $message, [<em>string|array</em> $field], [<em>string</em> $type]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Appends a message to the validator</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns messages generated by the validator</p> <h3 id=\"getoptions\" class=\"method-signature\">public <em>array</em> <strong>getOptions</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns all the options from the validator</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns an option</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $option) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Check whether an option has been defined in the validator options</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Ip.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Ip.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_validator_uniqueness":"<h1 id=\"class-phalcon-mvc-model-validator-uniqueness\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\Uniqueness</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_validator\"><em>Phalcon\\Mvc\\Model\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_validatorinterface\"><em>Phalcon\\Mvc\\Model\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/uniqueness.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Validates that a field or a combination of a set of fields are not present more than once in the existing records of the related table</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Validator\\Uniqueness;\n\nclass Subscriptors extends Model\n{\n\n  public function validation()\n  {\n      $this-&gt;validate(new Uniqueness(array(\n          \"field\"   =&gt; \"email\",\n          \"message\" =&gt; \"Value of field 'email' is already present in another record\"\n      )));\n      if ($this-&gt;validationHasFailed() == true) {\n          return false;\n      }\n  }\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_entityinterface\"><em>Phalcon\\Mvc\\EntityInterface</em></a> $record)</h3> <p>Executes the validator</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <h3 id=\"appendmessage\" class=\"method-signature\">protected <strong>appendMessage</strong> (<em>string</em> $message, [<em>string|array</em> $field], [<em>string</em> $type]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Appends a message to the validator</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns messages generated by the validator</p> <h3 id=\"getoptions\" class=\"method-signature\">public <em>array</em> <strong>getOptions</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns all the options from the validator</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns an option</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $option) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Check whether an option has been defined in the validator options</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Uniqueness.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Uniqueness.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_validator_url":"<h1 id=\"class-phalcon-mvc-model-validator-url\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\Url</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_validator\"><em>Phalcon\\Mvc\\Model\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_validatorinterface\"><em>Phalcon\\Mvc\\Model\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/url.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to validate if a field has a url format</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Validator\\Url as UrlValidator;\n\nclass Posts extends \\Phalcon\\Mvc\\Model\n{\n\n  public function validation()\n  {\n      $this-&gt;validate(new UrlValidator(array(\n          'field' =&gt; 'source_url'\n      )));\n      if ($this-&gt;validationHasFailed() == true) {\n          return false;\n      }\n  }\n\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_entityinterface\"><em>Phalcon\\Mvc\\EntityInterface</em></a> $record)</h3> <p>Executes the validator</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <h3 id=\"appendmessage\" class=\"method-signature\">protected <strong>appendMessage</strong> (<em>string</em> $message, [<em>string|array</em> $field], [<em>string</em> $type]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Appends a message to the validator</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns messages generated by the validator</p> <h3 id=\"getoptions\" class=\"method-signature\">public <em>array</em> <strong>getOptions</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns all the options from the validator</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns an option</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $option) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Check whether an option has been defined in the validator options</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Url.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Url.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_validator_stringlength":"<h1 id=\"class-phalcon-mvc-model-validator-stringlength\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\StringLength</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_validator\"><em>Phalcon\\Mvc\\Model\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_validatorinterface\"><em>Phalcon\\Mvc\\Model\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/stringlength.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Simply validates specified string length constraints</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Validator\\StringLength as StringLengthValidator;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Model\n{\n\npublic function validation()\n{\n    $this-&gt;validate(new StringLengthValidator(array(\n            \"field\" =&gt; 'name_last',\n            'max' =&gt; 50,\n            'min' =&gt; 2,\n            'messageMaximum' =&gt; 'We don\\'t like really long names',\n            'messageMinimum' =&gt; 'We want more than just their initials'\n    )));\n    if ($this-&gt;validationHasFailed() == true) {\n            return false;\n    }\n}\n\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_entityinterface\"><em>Phalcon\\Mvc\\EntityInterface</em></a> $record)</h3> <p>Executes the validator</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <h3 id=\"appendmessage\" class=\"method-signature\">protected <strong>appendMessage</strong> (<em>string</em> $message, [<em>string|array</em> $field], [<em>string</em> $type]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Appends a message to the validator</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns messages generated by the validator</p> <h3 id=\"getoptions\" class=\"method-signature\">public <em>array</em> <strong>getOptions</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns all the options from the validator</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns an option</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $option) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Check whether an option has been defined in the validator options</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_StringLength.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_StringLength.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_validator_regex":"<h1 id=\"class-phalcon-mvc-model-validator-regex\">Class <strong>Phalcon\\Mvc\\Model\\Validator\\Regex</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_model_validator\"><em>Phalcon\\Mvc\\Model\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_model_validatorinterface\"><em>Phalcon\\Mvc\\Model\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validator/regex.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows validate if the value of a field matches a regular expression</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Model\\Validator\\Regex as RegexValidator;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Model\n{\n\n  public function validation()\n  {\n      $this-&gt;validate(new RegexValidator(array(\n          \"field\" =&gt; 'created_at',\n          'pattern' =&gt; '/^[0-9]{4}[-\\/](0[1-9]|1[12])[-\\/](0[1-9]|[12][0-9]|3[01])/'\n      )));\n      if ($this-&gt;validationHasFailed() == true) {\n          return false;\n      }\n  }\n\n}\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_entityinterface\"><em>Phalcon\\Mvc\\EntityInterface</em></a> $record)</h3> <p>Executes the validator</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <h3 id=\"appendmessage\" class=\"method-signature\">protected <strong>appendMessage</strong> (<em>string</em> $message, [<em>string|array</em> $field], [<em>string</em> $type]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Appends a message to the validator</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns messages generated by the validator</p> <h3 id=\"getoptions\" class=\"method-signature\">public <em>array</em> <strong>getOptions</strong> () <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns all the options from the validator</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $option, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Returns an option</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $option) <small>inherited from Phalcon\\Mvc\\Model\\Validator</small>\n</h3> <p>Check whether an option has been defined in the validator options</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Regex.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Validator_Regex.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_user_module":"<h1 id=\"class-phalcon-mvc-user-module\">Class <strong>Phalcon\\Mvc\\User\\Module</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_di_injectable\"><em>Phalcon\\Di\\Injectable</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/user/module.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $propertyName) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Magic method __get</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_User_Module.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_User_Module.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_user_plugin":"<h1 id=\"class-phalcon-mvc-user-plugin\">Class <strong>Phalcon\\Mvc\\User\\Plugin</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_di_injectable\"><em>Phalcon\\Di\\Injectable</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/user/plugin.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $propertyName) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Magic method __get</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_User_Plugin.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_User_Plugin.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_router_group":"<h1 id=\"class-phalcon-mvc-router-group\">Class <strong>Phalcon\\Mvc\\Router\\Group</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_router_groupinterface\"><em>Phalcon\\Mvc\\Router\\GroupInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/router/group.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Helper class to create a group of routes with common attributes</p> <pre class=\"highlight-php\" data-language=\"php\">$router = new \\Phalcon\\Mvc\\Router();\n\n //Create a group with a common module and controller\n $blog = new Group(array(\n    'module' =&gt; 'blog',\n    'controller' =&gt; 'index'\n ));\n\n //All the routes start with /blog\n $blog-&gt;setPrefix('/blog');\n\n //Add a route to the group\n $blog-&gt;add('/save', array(\n    'action' =&gt; 'save'\n ));\n\n //Add another route to the group\n $blog-&gt;add('/edit/{id}', array(\n    'action' =&gt; 'edit'\n ));\n\n //This route maps to a controller different than the default\n $blog-&gt;add('/blog', array(\n    'controller' =&gt; 'about',\n    'action' =&gt; 'index'\n ));\n\n //Add the group to the router\n $router-&gt;mount($blog);\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>mixed</em> $paths])</h3> <p>Phalcon\\Mvc\\Router\\Group constructor</p> <h3 id=\"sethostname\" class=\"method-signature\">public <strong>setHostname</strong> (<em>mixed</em> $hostname)</h3> <p>Set a hostname restriction for all the routes in the group</p> <h3 id=\"gethostname\" class=\"method-signature\">public <strong>getHostname</strong> ()</h3> <p>Returns the hostname restriction</p> <h3 id=\"setprefix\" class=\"method-signature\">public <strong>setPrefix</strong> (<em>mixed</em> $prefix)</h3> <p>Set a common uri prefix for all the routes in this group</p> <h3 id=\"getprefix\" class=\"method-signature\">public <strong>getPrefix</strong> ()</h3> <p>Returns the common prefix for all the routes</p> <h3 id=\"beforematch\" class=\"method-signature\">public <strong>beforeMatch</strong> (<em>mixed</em> $beforeMatch)</h3> <p>Sets a callback that is called if the route is matched. The developer can implement any arbitrary conditions here If the callback returns false the route is treated as not matched</p> <h3 id=\"getbeforematch\" class=\"method-signature\">public <strong>getBeforeMatch</strong> ()</h3> <p>Returns the ‘before match’ callback if any</p> <h3 id=\"setpaths\" class=\"method-signature\">public <strong>setPaths</strong> (<em>mixed</em> $paths)</h3> <p>Set common paths for all the routes in the group</p> <h3 id=\"getpaths\" class=\"method-signature\">public <strong>getPaths</strong> ()</h3> <p>Returns the common paths defined for this group</p> <h3 id=\"getroutes\" class=\"method-signature\">public <strong>getRoutes</strong> ()</h3> <p>Returns the routes added to the group</p> <h3 id=\"add\" class=\"method-signature\">public <strong>add</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $httpMethods])</h3> <p>Adds a route to the router on any HTTP method</p> <pre class=\"highlight-php\" data-language=\"php\">router-&gt;add('/about', 'About::index');\n</pre> <h3 id=\"addget\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_router_route\"><em>Phalcon\\Mvc\\Router\\Route</em></a> <strong>addGet</strong> (<em>string</em> $pattern, [<em>string/array</em> $paths])</h3> <p>Adds a route to the router that only match if the HTTP method is GET</p> <h3 id=\"addpost\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_router_route\"><em>Phalcon\\Mvc\\Router\\Route</em></a> <strong>addPost</strong> (<em>string</em> $pattern, [<em>string/array</em> $paths])</h3> <p>Adds a route to the router that only match if the HTTP method is POST</p> <h3 id=\"addput\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_router_route\"><em>Phalcon\\Mvc\\Router\\Route</em></a> <strong>addPut</strong> (<em>string</em> $pattern, [<em>string/array</em> $paths])</h3> <p>Adds a route to the router that only match if the HTTP method is PUT</p> <h3 id=\"addpatch\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_router_route\"><em>Phalcon\\Mvc\\Router\\Route</em></a> <strong>addPatch</strong> (<em>string</em> $pattern, [<em>string/array</em> $paths])</h3> <p>Adds a route to the router that only match if the HTTP method is PATCH</p> <h3 id=\"adddelete\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_router_route\"><em>Phalcon\\Mvc\\Router\\Route</em></a> <strong>addDelete</strong> (<em>string</em> $pattern, [<em>string/array</em> $paths])</h3> <p>Adds a route to the router that only match if the HTTP method is DELETE</p> <h3 id=\"addoptions\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_router_route\"><em>Phalcon\\Mvc\\Router\\Route</em></a> <strong>addOptions</strong> (<em>string</em> $pattern, [<em>string/array</em> $paths])</h3> <p>Add a route to the router that only match if the HTTP method is OPTIONS</p> <h3 id=\"addhead\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_mvc_router_route\"><em>Phalcon\\Mvc\\Router\\Route</em></a> <strong>addHead</strong> (<em>string</em> $pattern, [<em>string/array</em> $paths])</h3> <p>Adds a route to the router that only match if the HTTP method is HEAD</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> ()</h3> <p>Removes all the pre-defined routes</p> <h3 id=\"_addroute\" class=\"method-signature\">protected <strong>_addRoute</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $httpMethods])</h3> <p>Adds a route applying the common attributes</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Group.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Group.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_router_route":"<h1 id=\"class-phalcon-mvc-router-route\">Class <strong>Phalcon\\Mvc\\Router\\Route</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_router_routeinterface\"><em>Phalcon\\Mvc\\Router\\RouteInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/router/route.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class represents every route added to the router</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $httpMethods])</h3> <p>Phalcon\\Mvc\\Router\\Route constructor</p> <h3 id=\"compilepattern\" class=\"method-signature\">public <strong>compilePattern</strong> (<em>mixed</em> $pattern)</h3> <p>Replaces placeholders from pattern returning a valid PCRE regular expression</p> <h3 id=\"via\" class=\"method-signature\">public <strong>via</strong> (<em>mixed</em> $httpMethods)</h3> <p>Set one or more HTTP methods that constraint the matching of the route</p> <pre class=\"highlight-php\" data-language=\"php\">$route-&gt;via('GET');\n $route-&gt;via(array('GET', 'POST'));\n</pre> <h3 id=\"extractnamedparams\" class=\"method-signature\">public <strong>extractNamedParams</strong> (<em>mixed</em> $pattern)</h3> <p>Extracts parameters from a string</p> <h3 id=\"reconfigure\" class=\"method-signature\">public <strong>reConfigure</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>Reconfigure the route adding a new pattern and a set of paths</p> <h3 id=\"getroutepaths\" class=\"method-signature\">public static <strong>getRoutePaths</strong> ([<em>mixed</em> $paths])</h3> <p>Returns routePaths</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> ()</h3> <p>Returns the route’s name</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name)</h3> <p>Sets the route’s name</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add('/about', array(\n     'controller' =&gt; 'about'\n ))-&gt;setName('about');\n</pre> <h3 id=\"beforematch\" class=\"method-signature\">public <strong>beforeMatch</strong> (<em>mixed</em> $callback)</h3> <p>Sets a callback that is called if the route is matched. The developer can implement any arbitrary conditions here If the callback returns false the route is treated as not matched</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add('/login', array(\n  'module'     =&gt; 'admin',\n  'controller' =&gt; 'session'\n ))-&gt;beforeMatch(function ($uri, $route) {\n   // Check if the request was made with Ajax\n   if ($_SERVER['HTTP_X_REQUESTED_WITH'] == 'xmlhttprequest') {\n      return false;\n   }\n     return true;\n });\n</pre> <h3 id=\"getbeforematch\" class=\"method-signature\">public <strong>getBeforeMatch</strong> ()</h3> <p>Returns the ‘before match’ callback if any</p> <h3 id=\"match\" class=\"method-signature\">public <strong>match</strong> (<em>mixed</em> $callback)</h3> <p>Allows to set a callback to handle the request directly in the route</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;add(\"/help\", array())-&gt;match(function () {\n  return $this-&gt;getResponse()-&gt;redirect('https://support.google.com/', true);\n});\n</pre> <h3 id=\"getmatch\" class=\"method-signature\">public <strong>getMatch</strong> ()</h3> <p>Returns the ‘match’ callback if any</p> <h3 id=\"getrouteid\" class=\"method-signature\">public <strong>getRouteId</strong> ()</h3> <p>Returns the route’s id</p> <h3 id=\"getpattern\" class=\"method-signature\">public <strong>getPattern</strong> ()</h3> <p>Returns the route’s pattern</p> <h3 id=\"getcompiledpattern\" class=\"method-signature\">public <strong>getCompiledPattern</strong> ()</h3> <p>Returns the route’s compiled pattern</p> <h3 id=\"getpaths\" class=\"method-signature\">public <strong>getPaths</strong> ()</h3> <p>Returns the paths</p> <h3 id=\"getreversedpaths\" class=\"method-signature\">public <strong>getReversedPaths</strong> ()</h3> <p>Returns the paths using positions as keys and names as values</p> <h3 id=\"sethttpmethods\" class=\"method-signature\">public <strong>setHttpMethods</strong> (<em>mixed</em> $httpMethods)</h3> <p>Sets a set of HTTP methods that constraint the matching of the route (alias of via)</p> <pre class=\"highlight-php\" data-language=\"php\">$route-&gt;setHttpMethods('GET');\n $route-&gt;setHttpMethods(array('GET', 'POST'));\n</pre> <h3 id=\"gethttpmethods\" class=\"method-signature\">public <strong>getHttpMethods</strong> ()</h3> <p>Returns the HTTP methods that constraint matching the route</p> <h3 id=\"sethostname\" class=\"method-signature\">public <strong>setHostname</strong> (<em>mixed</em> $hostname)</h3> <p>Sets a hostname restriction to the route</p> <pre class=\"highlight-php\" data-language=\"php\">$route-&gt;setHostname('localhost');\n</pre> <h3 id=\"gethostname\" class=\"method-signature\">public <strong>getHostname</strong> ()</h3> <p>Returns the hostname restriction if any</p> <h3 id=\"setgroup\" class=\"method-signature\">public <strong>setGroup</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_router_groupinterface\"><em>Phalcon\\Mvc\\Router\\GroupInterface</em></a> $group)</h3> <p>Sets the group associated with the route</p> <h3 id=\"getgroup\" class=\"method-signature\">public <strong>getGroup</strong> ()</h3> <p>Returns the group associated with the route</p> <h3 id=\"convert\" class=\"method-signature\">public <strong>convert</strong> (<em>mixed</em> $name, <em>mixed</em> $converter)</h3> <p>Adds a converter to perform an additional transformation for certain parameter</p> <h3 id=\"getconverters\" class=\"method-signature\">public <strong>getConverters</strong> ()</h3> <p>Returns the router converter</p> <h3 id=\"reset\" class=\"method-signature\">public static <strong>reset</strong> ()</h3> <p>Resets the internal route id generator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Route.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Route.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_router":"<h1 id=\"class-phalcon-mvc-router\">Class <strong>Phalcon\\Mvc\\Router</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_mvc_routerinterface\"><em>Phalcon\\Mvc\\RouterInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/router.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Phalcon\\Mvc\\Router is the standard framework router. Routing is the process of taking a URI endpoint (that part of the URI which comes after the base URL) and decomposing it into parameters to determine which module, controller, and action of that controller should receive the request</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router;\n\n $router = new Router();\n\n $router-&gt;add(\n     '/documentation/{chapter}/{name}\\.{type:[a-z]+}',\n     [\n         'controller' =&gt; 'documentation',\n         'action'     =&gt; 'show'\n    )\n);\n\n $router-&gt;handle();\n\n echo $router-&gt;getControllerName();\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"uri_source_get_url\" class=\"method-signature\">\n<em>integer</em> <strong>URI_SOURCE_GET_URL</strong>\n</h3> <h3 id=\"uri_source_server_request_uri\" class=\"method-signature\">\n<em>integer</em> <strong>URI_SOURCE_SERVER_REQUEST_URI</strong>\n</h3> <h3 id=\"position_first\" class=\"method-signature\">\n<em>integer</em> <strong>POSITION_FIRST</strong>\n</h3> <h3 id=\"position_last\" class=\"method-signature\">\n<em>integer</em> <strong>POSITION_LAST</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>mixed</em> $defaultRoutes])</h3> <p>Phalcon\\Mvc\\Router constructor</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager)</h3> <p>Sets the events manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> ()</h3> <p>Returns the internal event manager</p> <h3 id=\"getrewriteuri\" class=\"method-signature\">public <strong>getRewriteUri</strong> ()</h3> <p>Get rewrite info. This info is read from $_GET[‘_url’]. This returns ‘/’ if the rewrite information cannot be read</p> <h3 id=\"seturisource\" class=\"method-signature\">public <strong>setUriSource</strong> (<em>mixed</em> $uriSource)</h3> <p>Sets the URI source. One of the URI_SOURCE_* constants</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;setUriSource(Router::URI_SOURCE_SERVER_REQUEST_URI);\n</pre> <h3 id=\"removeextraslashes\" class=\"method-signature\">public <strong>removeExtraSlashes</strong> (<em>mixed</em> $remove)</h3> <p>Set whether router must remove the extra slashes in the handled routes</p> <h3 id=\"setdefaultnamespace\" class=\"method-signature\">public <strong>setDefaultNamespace</strong> (<em>mixed</em> $namespaceName)</h3> <p>Sets the name of the default namespace</p> <h3 id=\"setdefaultmodule\" class=\"method-signature\">public <strong>setDefaultModule</strong> (<em>mixed</em> $moduleName)</h3> <p>Sets the name of the default module</p> <h3 id=\"setdefaultcontroller\" class=\"method-signature\">public <strong>setDefaultController</strong> (<em>mixed</em> $controllerName)</h3> <p>Sets the default controller name</p> <h3 id=\"setdefaultaction\" class=\"method-signature\">public <strong>setDefaultAction</strong> (<em>mixed</em> $actionName)</h3> <p>Sets the default action name</p> <h3 id=\"setdefaults\" class=\"method-signature\">public <strong>setDefaults</strong> (<em>array</em> $defaults)</h3> <p>Sets an array of default paths. If a route is missing a path the router will use the defined here This method must not be used to set a 404 route</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;setDefaults([\n     'module' =&gt; 'common',\n     'action' =&gt; 'index'\n ]);\n</pre> <h3 id=\"getdefaults\" class=\"method-signature\">public <strong>getDefaults</strong> ()</h3> <p>Returns an array of default parameters</p> <h3 id=\"handle\" class=\"method-signature\">public <strong>handle</strong> ([<em>mixed</em> $uri])</h3> <p>Handles routing information received from the rewrite engine</p> <pre class=\"highlight-php\" data-language=\"php\">// Read the info from the rewrite engine\n $router-&gt;handle();\n\n // Manually passing an URL\n $router-&gt;handle('/posts/edit/1');\n</pre> <h3 id=\"add\" class=\"method-signature\">public <strong>add</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $httpMethods], [<em>mixed</em> $position])</h3> <p>Adds a route to the router without any HTTP constraint</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router;\n\n $router-&gt;add('/about', 'About::index');\n $router-&gt;add('/about', 'About::index', ['GET', 'POST']);\n $router-&gt;add('/about', 'About::index', ['GET', 'POST'], Router::POSITION_FIRST);\n</pre> <h3 id=\"addget\" class=\"method-signature\">public <strong>addGet</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position])</h3> <p>Adds a route to the router that only match if the HTTP method is GET</p> <h3 id=\"addpost\" class=\"method-signature\">public <strong>addPost</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position])</h3> <p>Adds a route to the router that only match if the HTTP method is POST</p> <h3 id=\"addput\" class=\"method-signature\">public <strong>addPut</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position])</h3> <p>Adds a route to the router that only match if the HTTP method is PUT</p> <h3 id=\"addpatch\" class=\"method-signature\">public <strong>addPatch</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position])</h3> <p>Adds a route to the router that only match if the HTTP method is PATCH</p> <h3 id=\"adddelete\" class=\"method-signature\">public <strong>addDelete</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position])</h3> <p>Adds a route to the router that only match if the HTTP method is DELETE</p> <h3 id=\"addoptions\" class=\"method-signature\">public <strong>addOptions</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position])</h3> <p>Add a route to the router that only match if the HTTP method is OPTIONS</p> <h3 id=\"addhead\" class=\"method-signature\">public <strong>addHead</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position])</h3> <p>Adds a route to the router that only match if the HTTP method is HEAD</p> <h3 id=\"addpurge\" class=\"method-signature\">public <strong>addPurge</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position])</h3> <p>Adds a route to the router that only match if the HTTP method is PURGE (Squid and Varnish support)</p> <h3 id=\"addtrace\" class=\"method-signature\">public <strong>addTrace</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position])</h3> <p>Adds a route to the router that only match if the HTTP method is TRACE</p> <h3 id=\"addconnect\" class=\"method-signature\">public <strong>addConnect</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position])</h3> <p>Adds a route to the router that only match if the HTTP method is CONNECT</p> <h3 id=\"mount\" class=\"method-signature\">public <strong>mount</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_router_groupinterface\"><em>Phalcon\\Mvc\\Router\\GroupInterface</em></a> $group)</h3> <p>Mounts a group of routes in the router</p> <h3 id=\"notfound\" class=\"method-signature\">public <strong>notFound</strong> (<em>mixed</em> $paths)</h3> <p>Set a group of paths to be returned when none of the defined routes are matched</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> ()</h3> <p>Removes all the pre-defined routes</p> <h3 id=\"getnamespacename\" class=\"method-signature\">public <strong>getNamespaceName</strong> ()</h3> <p>Returns the processed namespace name</p> <h3 id=\"getmodulename\" class=\"method-signature\">public <strong>getModuleName</strong> ()</h3> <p>Returns the processed module name</p> <h3 id=\"getcontrollername\" class=\"method-signature\">public <strong>getControllerName</strong> ()</h3> <p>Returns the processed controller name</p> <h3 id=\"getactionname\" class=\"method-signature\">public <strong>getActionName</strong> ()</h3> <p>Returns the processed action name</p> <h3 id=\"getparams\" class=\"method-signature\">public <strong>getParams</strong> ()</h3> <p>Returns the processed parameters</p> <h3 id=\"getmatchedroute\" class=\"method-signature\">public <strong>getMatchedRoute</strong> ()</h3> <p>Returns the route that matches the handled URI</p> <h3 id=\"getmatches\" class=\"method-signature\">public <strong>getMatches</strong> ()</h3> <p>Returns the sub expressions in the regular expression matched</p> <h3 id=\"wasmatched\" class=\"method-signature\">public <strong>wasMatched</strong> ()</h3> <p>Checks if the router matches any of the defined routes</p> <h3 id=\"getroutes\" class=\"method-signature\">public <strong>getRoutes</strong> ()</h3> <p>Returns all the routes defined in the router</p> <h3 id=\"getroutebyid\" class=\"method-signature\">public <strong>getRouteById</strong> (<em>mixed</em> $id)</h3> <p>Returns a route object by its id</p> <h3 id=\"getroutebyname\" class=\"method-signature\">public <strong>getRouteByName</strong> (<em>mixed</em> $name)</h3> <p>Returns a route object by its name</p> <h3 id=\"isexactcontrollername\" class=\"method-signature\">public <strong>isExactControllerName</strong> ()</h3> <p>Returns whether controller name should not be mangled</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_router_annotations":"<h1 id=\"class-phalcon-mvc-router-annotations\">Class <strong>Phalcon\\Mvc\\Router\\Annotations</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_mvc_router\"><em>Phalcon\\Mvc\\Router</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_mvc_routerinterface\"><em>Phalcon\\Mvc\\RouterInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/router/annotations.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>A router that reads routes annotations from classes/resources</p> <pre class=\"highlight-php\" data-language=\"php\">$di['router'] = function() {\n\n    //Use the annotations router\n    $router = new Annotations(false);\n\n    //This will do the same as above but only if the handled uri starts with /robots\n            $router-&gt;addResource('Robots', '/robots');\n\n            return $router;\n};\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"uri_source_get_url\" class=\"method-signature\">\n<em>integer</em> <strong>URI_SOURCE_GET_URL</strong>\n</h3> <h3 id=\"uri_source_server_request_uri\" class=\"method-signature\">\n<em>integer</em> <strong>URI_SOURCE_SERVER_REQUEST_URI</strong>\n</h3> <h3 id=\"position_first\" class=\"method-signature\">\n<em>integer</em> <strong>POSITION_FIRST</strong>\n</h3> <h3 id=\"position_last\" class=\"method-signature\">\n<em>integer</em> <strong>POSITION_LAST</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"addresource\" class=\"method-signature\">public <strong>addResource</strong> (<em>mixed</em> $handler, [<em>mixed</em> $prefix])</h3> <p>Adds a resource to the annotations handler A resource is a class that contains routing annotations</p> <h3 id=\"addmoduleresource\" class=\"method-signature\">public <strong>addModuleResource</strong> (<em>mixed</em> $module, <em>mixed</em> $handler, [<em>mixed</em> $prefix])</h3> <p>Adds a resource to the annotations handler A resource is a class that contains routing annotations The class is located in a module</p> <h3 id=\"handle\" class=\"method-signature\">public <strong>handle</strong> ([<em>mixed</em> $uri])</h3> <p>Produce the routing parameters from the rewrite information</p> <h3 id=\"processcontrollerannotation\" class=\"method-signature\">public <strong>processControllerAnnotation</strong> (<em>mixed</em> $handler, <a class=\"reference internal\" href=\"phalcon_annotations_annotation\"><em>Phalcon\\Annotations\\Annotation</em></a> $annotation)</h3> <p>Checks for annotations in the controller docblock</p> <h3 id=\"processactionannotation\" class=\"method-signature\">public <strong>processActionAnnotation</strong> (<em>mixed</em> $module, <em>mixed</em> $namespaceName, <em>mixed</em> $controller, <em>mixed</em> $action, <a class=\"reference internal\" href=\"phalcon_annotations_annotation\"><em>Phalcon\\Annotations\\Annotation</em></a> $annotation)</h3> <p>Checks for annotations in the public methods of the controller</p> <h3 id=\"setcontrollersuffix\" class=\"method-signature\">public <strong>setControllerSuffix</strong> (<em>mixed</em> $controllerSuffix)</h3> <p>Changes the controller class suffix</p> <h3 id=\"setactionsuffix\" class=\"method-signature\">public <strong>setActionSuffix</strong> (<em>mixed</em> $actionSuffix)</h3> <p>Changes the action method suffix</p> <h3 id=\"getresources\" class=\"method-signature\">public <strong>getResources</strong> ()</h3> <p>Return the registered resources</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>mixed</em> $defaultRoutes]) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Phalcon\\Mvc\\Router constructor</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Sets the events manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"getrewriteuri\" class=\"method-signature\">public <strong>getRewriteUri</strong> () <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Get rewrite info. This info is read from $_GET[‘_url’]. This returns ‘/’ if the rewrite information cannot be read</p> <h3 id=\"seturisource\" class=\"method-signature\">public <strong>setUriSource</strong> (<em>mixed</em> $uriSource) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Sets the URI source. One of the URI_SOURCE_* constants</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;setUriSource(Router::URI_SOURCE_SERVER_REQUEST_URI);\n</pre> <h3 id=\"removeextraslashes\" class=\"method-signature\">public <strong>removeExtraSlashes</strong> (<em>mixed</em> $remove) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Set whether router must remove the extra slashes in the handled routes</p> <h3 id=\"setdefaultnamespace\" class=\"method-signature\">public <strong>setDefaultNamespace</strong> (<em>mixed</em> $namespaceName) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Sets the name of the default namespace</p> <h3 id=\"setdefaultmodule\" class=\"method-signature\">public <strong>setDefaultModule</strong> (<em>mixed</em> $moduleName) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Sets the name of the default module</p> <h3 id=\"setdefaultcontroller\" class=\"method-signature\">public <strong>setDefaultController</strong> (<em>mixed</em> $controllerName) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Sets the default controller name</p> <h3 id=\"setdefaultaction\" class=\"method-signature\">public <strong>setDefaultAction</strong> (<em>mixed</em> $actionName) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Sets the default action name</p> <h3 id=\"setdefaults\" class=\"method-signature\">public <strong>setDefaults</strong> (<em>array</em> $defaults) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Sets an array of default paths. If a route is missing a path the router will use the defined here This method must not be used to set a 404 route</p> <pre class=\"highlight-php\" data-language=\"php\">$router-&gt;setDefaults([\n     'module' =&gt; 'common',\n     'action' =&gt; 'index'\n ]);\n</pre> <h3 id=\"getdefaults\" class=\"method-signature\">public <strong>getDefaults</strong> () <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Returns an array of default parameters</p> <h3 id=\"add\" class=\"method-signature\">public <strong>add</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $httpMethods], [<em>mixed</em> $position]) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Adds a route to the router without any HTTP constraint</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Router;\n\n $router-&gt;add('/about', 'About::index');\n $router-&gt;add('/about', 'About::index', ['GET', 'POST']);\n $router-&gt;add('/about', 'About::index', ['GET', 'POST'], Router::POSITION_FIRST);\n</pre> <h3 id=\"addget\" class=\"method-signature\">public <strong>addGet</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position]) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Adds a route to the router that only match if the HTTP method is GET</p> <h3 id=\"addpost\" class=\"method-signature\">public <strong>addPost</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position]) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Adds a route to the router that only match if the HTTP method is POST</p> <h3 id=\"addput\" class=\"method-signature\">public <strong>addPut</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position]) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Adds a route to the router that only match if the HTTP method is PUT</p> <h3 id=\"addpatch\" class=\"method-signature\">public <strong>addPatch</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position]) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Adds a route to the router that only match if the HTTP method is PATCH</p> <h3 id=\"adddelete\" class=\"method-signature\">public <strong>addDelete</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position]) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Adds a route to the router that only match if the HTTP method is DELETE</p> <h3 id=\"addoptions\" class=\"method-signature\">public <strong>addOptions</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position]) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Add a route to the router that only match if the HTTP method is OPTIONS</p> <h3 id=\"addhead\" class=\"method-signature\">public <strong>addHead</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position]) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Adds a route to the router that only match if the HTTP method is HEAD</p> <h3 id=\"addpurge\" class=\"method-signature\">public <strong>addPurge</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position]) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Adds a route to the router that only match if the HTTP method is PURGE (Squid and Varnish support)</p> <h3 id=\"addtrace\" class=\"method-signature\">public <strong>addTrace</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position]) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Adds a route to the router that only match if the HTTP method is TRACE</p> <h3 id=\"addconnect\" class=\"method-signature\">public <strong>addConnect</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $position]) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Adds a route to the router that only match if the HTTP method is CONNECT</p> <h3 id=\"mount\" class=\"method-signature\">public <strong>mount</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_router_groupinterface\"><em>Phalcon\\Mvc\\Router\\GroupInterface</em></a> $group) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Mounts a group of routes in the router</p> <h3 id=\"notfound\" class=\"method-signature\">public <strong>notFound</strong> (<em>mixed</em> $paths) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Set a group of paths to be returned when none of the defined routes are matched</p> <h3 id=\"clear\" class=\"method-signature\">public <strong>clear</strong> () <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Removes all the pre-defined routes</p> <h3 id=\"getnamespacename\" class=\"method-signature\">public <strong>getNamespaceName</strong> () <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Returns the processed namespace name</p> <h3 id=\"getmodulename\" class=\"method-signature\">public <strong>getModuleName</strong> () <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Returns the processed module name</p> <h3 id=\"getcontrollername\" class=\"method-signature\">public <strong>getControllerName</strong> () <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Returns the processed controller name</p> <h3 id=\"getactionname\" class=\"method-signature\">public <strong>getActionName</strong> () <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Returns the processed action name</p> <h3 id=\"getparams\" class=\"method-signature\">public <strong>getParams</strong> () <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Returns the processed parameters</p> <h3 id=\"getmatchedroute\" class=\"method-signature\">public <strong>getMatchedRoute</strong> () <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Returns the route that matches the handled URI</p> <h3 id=\"getmatches\" class=\"method-signature\">public <strong>getMatches</strong> () <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Returns the sub expressions in the regular expression matched</p> <h3 id=\"wasmatched\" class=\"method-signature\">public <strong>wasMatched</strong> () <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Checks if the router matches any of the defined routes</p> <h3 id=\"getroutes\" class=\"method-signature\">public <strong>getRoutes</strong> () <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Returns all the routes defined in the router</p> <h3 id=\"getroutebyid\" class=\"method-signature\">public <strong>getRouteById</strong> (<em>mixed</em> $id) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Returns a route object by its id</p> <h3 id=\"getroutebyname\" class=\"method-signature\">public <strong>getRouteByName</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Returns a route object by its name</p> <h3 id=\"isexactcontrollername\" class=\"method-signature\">public <strong>isExactControllerName</strong> () <small>inherited from Phalcon\\Mvc\\Router</small>\n</h3> <p>Returns whether controller name should not be mangled</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Annotations.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_Annotations.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_url":"<h1 id=\"class-phalcon-mvc-url\">Class <strong>Phalcon\\Mvc\\Url</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_urlinterface\"><em>Phalcon\\Mvc\\UrlInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/url.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This components helps in the generation of: URIs, URLs and Paths</p> <pre class=\"highlight-php\" data-language=\"php\">//Generate a URL appending the URI to the base URI\n echo $url-&gt;get('products/edit/1');\n\n //Generate a URL for a predefined route\n echo $url-&gt;get(array('for' =&gt; 'blog-post', 'title' =&gt; 'some-cool-stuff', 'year' =&gt; '2012'));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the DependencyInjector container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the DependencyInjector container</p> <h3 id=\"setbaseuri\" class=\"method-signature\">public <strong>setBaseUri</strong> (<em>mixed</em> $baseUri)</h3> <p>Sets a prefix for all the URIs to be generated</p> <pre class=\"highlight-php\" data-language=\"php\">$url-&gt;setBaseUri('/invo/');\n$url-&gt;setBaseUri('/invo/index.php/');\n</pre> <h3 id=\"setstaticbaseuri\" class=\"method-signature\">public <strong>setStaticBaseUri</strong> (<em>mixed</em> $staticBaseUri)</h3> <p>Sets a prefix for all static URLs generated</p> <pre class=\"highlight-php\" data-language=\"php\">$url-&gt;setStaticBaseUri('/invo/');\n</pre> <h3 id=\"getbaseuri\" class=\"method-signature\">public <strong>getBaseUri</strong> ()</h3> <p>Returns the prefix for all the generated urls. By default /</p> <h3 id=\"getstaticbaseuri\" class=\"method-signature\">public <strong>getStaticBaseUri</strong> ()</h3> <p>Returns the prefix for all the generated static urls. By default /</p> <h3 id=\"setbasepath\" class=\"method-signature\">public <strong>setBasePath</strong> (<em>mixed</em> $basePath)</h3> <p>Sets a base path for all the generated paths</p> <pre class=\"highlight-php\" data-language=\"php\">$url-&gt;setBasePath('/var/www/htdocs/');\n</pre> <h3 id=\"getbasepath\" class=\"method-signature\">public <strong>getBasePath</strong> ()</h3> <p>Returns the base path</p> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> ([<em>mixed</em> $uri], [<em>mixed</em> $args], [<em>mixed</em> $local], [<em>mixed</em> $baseUri])</h3> <p>Generates a URL</p> <pre class=\"highlight-php\" data-language=\"php\">//Generate a URL appending the URI to the base URI\n echo $url-&gt;get('products/edit/1');\n\n //Generate a URL for a predefined route\n echo $url-&gt;get(array('for' =&gt; 'blog-post', 'title' =&gt; 'some-cool-stuff', 'year' =&gt; '2015'));\n\n // Generate a URL with GET arguments (/show/products?id=1&amp;name=Carrots)\n echo $url-&gt;get('show/products', array('id' =&gt; 1, 'name' =&gt; 'Carrots'));\n\n // Generate an absolute URL by setting the third parameter as false.\n echo $url-&gt;get('https://phalconphp.com/', null, false);\n</pre> <h3 id=\"getstatic\" class=\"method-signature\">public <strong>getStatic</strong> ([<em>mixed</em> $uri])</h3> <p>Generates a URL for a static resource</p> <pre class=\"highlight-php\" data-language=\"php\">// Generate a URL for a static resource\n echo $url-&gt;getStatic(\"img/logo.png\");\n\n // Generate a URL for a static predefined route\n echo $url-&gt;getStatic(array('for' =&gt; 'logo-cdn'));\n</pre> <h3 id=\"path\" class=\"method-signature\">public <strong>path</strong> ([<em>mixed</em> $path])</h3> <p>Generates a local path</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Url.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Url.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_view_engine":"<h1 id=\"abstract-class-phalcon-mvc-view-engine\">Abstract class <strong>Phalcon\\Mvc\\View\\Engine</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_di_injectable\"><em>Phalcon\\Di\\Injectable</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view/engine.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>All the template engine adapters must inherit this class. This provides basic interfacing between the engine and the Phalcon\\Mvc\\View component.</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_viewbaseinterface\"><em>Phalcon\\Mvc\\ViewBaseInterface</em></a> $view, [<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector])</h3> <p>Phalcon\\Mvc\\View\\Engine constructor</p> <h3 id=\"getcontent\" class=\"method-signature\">public <strong>getContent</strong> ()</h3> <p>Returns cached output on another view stage</p> <h3 id=\"partial\" class=\"method-signature\">public <em>string</em> <strong>partial</strong> (<em>string</em> $partialPath, [<em>array</em> $params])</h3> <p>Renders a partial inside another view</p> <h3 id=\"getview\" class=\"method-signature\">public <strong>getView</strong> ()</h3> <p>Returns the view component related to the adapter</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $propertyName) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Magic method __get</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_url_exception":"<h1 id=\"class-phalcon-mvc-url-exception\">Class <strong>Phalcon\\Mvc\\Url\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/url/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Url_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Url_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_user_component":"<h1 id=\"class-phalcon-mvc-user-component\">Class <strong>Phalcon\\Mvc\\User\\Component</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_di_injectable\"><em>Phalcon\\Di\\Injectable</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/user/component.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $propertyName) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Magic method __get</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_User_Component.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_User_Component.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_view_exception":"<h1 id=\"class-phalcon-mvc-view-exception\">Class <strong>Phalcon\\Mvc\\View\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_paginator_adapter":"<h1 id=\"abstract-class-phalcon-paginator-adapter\">Abstract class <strong>Phalcon\\Paginator\\Adapter</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/paginator/adapter.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setcurrentpage\" class=\"method-signature\">public <strong>setCurrentPage</strong> (<em>mixed</em> $page)</h3> <p>Set the current page number</p> <h3 id=\"setlimit\" class=\"method-signature\">public <strong>setLimit</strong> (<em>mixed</em> $limitRows)</h3> <p>Set current rows limit</p> <h3 id=\"getlimit\" class=\"method-signature\">public <strong>getLimit</strong> ()</h3> <p>Get current rows limit</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_view_engine_volt_exception":"<h1 id=\"class-phalcon-mvc-view-engine-volt-exception\">Class <strong>Phalcon\\Mvc\\View\\Engine\\Volt\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_mvc_view_exception\"><em>Phalcon\\Mvc\\View\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view/engine/volt/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Volt_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Volt_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_paginator_exception":"<h1 id=\"class-phalcon-paginator-exception\">Class <strong>Phalcon\\Paginator\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/paginator/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_view_engine_volt":"<h1 id=\"class-phalcon-mvc-view-engine-volt\">Class <strong>Phalcon\\Mvc\\View\\Engine\\Volt</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_view_engine\"><em>Phalcon\\Mvc\\View\\Engine</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_mvc_view_engineinterface\"><em>Phalcon\\Mvc\\View\\EngineInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view/engine/volt.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Designer friendly and fast template engine for PHP written in Zephir/C</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>array</em> $options)</h3> <p>Set Volt’s options</p> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> ()</h3> <p>Return Volt’s options</p> <h3 id=\"getcompiler\" class=\"method-signature\">public <strong>getCompiler</strong> ()</h3> <p>Returns the Volt’s compiler</p> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> (<em>mixed</em> $templatePath, <em>mixed</em> $params, [<em>mixed</em> $mustClean])</h3> <p>Renders a view using the template engine</p> <h3 id=\"length\" class=\"method-signature\">public <strong>length</strong> (<em>mixed</em> $item)</h3> <p>Length filter. If an array/object is passed a count is performed otherwise a strlen/mb_strlen</p> <h3 id=\"isincluded\" class=\"method-signature\">public <strong>isIncluded</strong> (<em>mixed</em> $needle, <em>mixed</em> $haystack)</h3> <p>Checks if the needle is included in the haystack</p> <h3 id=\"convertencoding\" class=\"method-signature\">public <strong>convertEncoding</strong> (<em>mixed</em> $text, <em>mixed</em> $from, <em>mixed</em> $to)</h3> <p>Performs a string conversion</p> <h3 id=\"slice\" class=\"method-signature\">public <strong>slice</strong> (<em>mixed</em> $value, [<em>mixed</em> $start], [<em>mixed</em> $end])</h3> <p>Extracts a slice from a string/array/traversable object value</p> <h3 id=\"sort\" class=\"method-signature\">public <strong>sort</strong> (<em>array</em> $value)</h3> <p>Sorts an array</p> <h3 id=\"callmacro\" class=\"method-signature\">public <strong>callMacro</strong> (<em>mixed</em> $name, [<em>array</em> $arguments])</h3> <p>Checks if a macro is defined and calls it</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_viewbaseinterface\"><em>Phalcon\\Mvc\\ViewBaseInterface</em></a> $view, [<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector]) <small>inherited from Phalcon\\Mvc\\View\\Engine</small>\n</h3> <p>Phalcon\\Mvc\\View\\Engine constructor</p> <h3 id=\"getcontent\" class=\"method-signature\">public <strong>getContent</strong> () <small>inherited from Phalcon\\Mvc\\View\\Engine</small>\n</h3> <p>Returns cached output on another view stage</p> <h3 id=\"partial\" class=\"method-signature\">public <em>string</em> <strong>partial</strong> (<em>string</em> $partialPath, [<em>array</em> $params]) <small>inherited from Phalcon\\Mvc\\View\\Engine</small>\n</h3> <p>Renders a partial inside another view</p> <h3 id=\"getview\" class=\"method-signature\">public <strong>getView</strong> () <small>inherited from Phalcon\\Mvc\\View\\Engine</small>\n</h3> <p>Returns the view component related to the adapter</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $propertyName) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Magic method __get</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Volt.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Volt.html</a>\n  </p>\n</div>\n","api/phalcon_paginator_adapter_model":"<h1 id=\"class-phalcon-paginator-adapter-model\">Class <strong>Phalcon\\Paginator\\Adapter\\Model</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_paginator_adapter\"><em>Phalcon\\Paginator\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_paginator_adapterinterface\"><em>Phalcon\\Paginator\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/paginator/adapter/model.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This adapter allows to paginate data using a Phalcon\\Mvc\\Model resultset as a base.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Paginator\\Adapter\\Model;\n\n $paginator = new Model(\n     [\n         'data'  =&gt; Robots::find(),\n         'limit' =&gt; 25,\n         'page'  =&gt; $currentPage\n     ]\n );\n\n $paginate = $paginator-&gt;getPaginate();\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $config)</h3> <p>Phalcon\\Paginator\\Adapter\\Model constructor</p> <h3 id=\"getpaginate\" class=\"method-signature\">public <strong>getPaginate</strong> ()</h3> <p>Returns a slice of the resultset to show in the pagination</p> <h3 id=\"setcurrentpage\" class=\"method-signature\">public <strong>setCurrentPage</strong> (<em>mixed</em> $page) <small>inherited from Phalcon\\Paginator\\Adapter</small>\n</h3> <p>Set the current page number</p> <h3 id=\"setlimit\" class=\"method-signature\">public <strong>setLimit</strong> (<em>mixed</em> $limitRows) <small>inherited from Phalcon\\Paginator\\Adapter</small>\n</h3> <p>Set current rows limit</p> <h3 id=\"getlimit\" class=\"method-signature\">public <strong>getLimit</strong> () <small>inherited from Phalcon\\Paginator\\Adapter</small>\n</h3> <p>Get current rows limit</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_Model.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_Model.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_view_engine_php":"<h1 id=\"class-phalcon-mvc-view-engine-php\">Class <strong>Phalcon\\Mvc\\View\\Engine\\Php</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_mvc_view_engine\"><em>Phalcon\\Mvc\\View\\Engine</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_mvc_view_engineinterface\"><em>Phalcon\\Mvc\\View\\EngineInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view/engine/php.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Adapter to use PHP itself as templating engine</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> (<em>mixed</em> $path, <em>mixed</em> $params, [<em>mixed</em> $mustClean])</h3> <p>Renders a view using the template engine</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_viewbaseinterface\"><em>Phalcon\\Mvc\\ViewBaseInterface</em></a> $view, [<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector]) <small>inherited from Phalcon\\Mvc\\View\\Engine</small>\n</h3> <p>Phalcon\\Mvc\\View\\Engine constructor</p> <h3 id=\"getcontent\" class=\"method-signature\">public <strong>getContent</strong> () <small>inherited from Phalcon\\Mvc\\View\\Engine</small>\n</h3> <p>Returns cached output on another view stage</p> <h3 id=\"partial\" class=\"method-signature\">public <em>string</em> <strong>partial</strong> (<em>string</em> $partialPath, [<em>array</em> $params]) <small>inherited from Phalcon\\Mvc\\View\\Engine</small>\n</h3> <p>Renders a partial inside another view</p> <h3 id=\"getview\" class=\"method-signature\">public <strong>getView</strong> () <small>inherited from Phalcon\\Mvc\\View\\Engine</small>\n</h3> <p>Returns the view component related to the adapter</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $propertyName) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Magic method __get</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Php.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Php.html</a>\n  </p>\n</div>\n","api/phalcon_queue_beanstalk_exception":"<h1 id=\"class-phalcon-queue-beanstalk-exception\">Class <strong>Phalcon\\Queue\\Beanstalk\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/queue/beanstalk/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Queue_Beanstalk_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Queue_Beanstalk_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_view":"<h1 id=\"class-phalcon-mvc-view\">Class <strong>Phalcon\\Mvc\\View</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_di_injectable\"><em>Phalcon\\Di\\Injectable</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_mvc_viewinterface\"><em>Phalcon\\Mvc\\ViewInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_mvc_viewbaseinterface\"><em>Phalcon\\Mvc\\ViewBaseInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Phalcon\\Mvc\\View is a class for working with the “view” portion of the model-view-controller pattern. That is, it exists to help keep the view script separate from the model and controller scripts. It provides a system of helpers, output filters, and variable escaping.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View;\n\n $view = new View();\n\n // Setting views directory\n $view-&gt;setViewsDir('app/views/');\n\n $view-&gt;start();\n\n // Shows recent posts view (app/views/posts/recent.phtml)\n $view-&gt;render('posts', 'recent');\n $view-&gt;finish();\n\n // Printing views output\n echo $view-&gt;getContent();\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"level_main_layout\" class=\"method-signature\">\n<em>integer</em> <strong>LEVEL_MAIN_LAYOUT</strong>\n</h3> <h3 id=\"level_after_template\" class=\"method-signature\">\n<em>integer</em> <strong>LEVEL_AFTER_TEMPLATE</strong>\n</h3> <h3 id=\"level_layout\" class=\"method-signature\">\n<em>integer</em> <strong>LEVEL_LAYOUT</strong>\n</h3> <h3 id=\"level_before_template\" class=\"method-signature\">\n<em>integer</em> <strong>LEVEL_BEFORE_TEMPLATE</strong>\n</h3> <h3 id=\"level_action_view\" class=\"method-signature\">\n<em>integer</em> <strong>LEVEL_ACTION_VIEW</strong>\n</h3> <h3 id=\"level_no_render\" class=\"method-signature\">\n<em>integer</em> <strong>LEVEL_NO_RENDER</strong>\n</h3> <h3 id=\"cache_mode_none\" class=\"method-signature\">\n<em>integer</em> <strong>CACHE_MODE_NONE</strong>\n</h3> <h3 id=\"cache_mode_inverse\" class=\"method-signature\">\n<em>integer</em> <strong>CACHE_MODE_INVERSE</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"getrenderlevel\" class=\"method-signature\">public <strong>getRenderLevel</strong> ()</h3> <p>...</p> <h3 id=\"getcurrentrenderlevel\" class=\"method-signature\">public <strong>getCurrentRenderLevel</strong> ()</h3> <p>...</p> <h3 id=\"getregisteredengines\" class=\"method-signature\">public <strong>getRegisteredEngines</strong> ()</h3> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <p>Phalcon\\Mvc\\View constructor</p> <h3 id=\"_isabsolutepath\" class=\"method-signature\">final protected <strong>_isAbsolutePath</strong> (<em>mixed</em> $path)</h3> <p>Checks if a path is absolute or not</p> <h3 id=\"setviewsdir\" class=\"method-signature\">public <strong>setViewsDir</strong> (<em>mixed</em> $viewsDir)</h3> <p>Sets the views directory. Depending of your platform, always add a trailing slash or backslash</p> <h3 id=\"getviewsdir\" class=\"method-signature\">public <strong>getViewsDir</strong> ()</h3> <p>Gets views directory</p> <h3 id=\"setlayoutsdir\" class=\"method-signature\">public <strong>setLayoutsDir</strong> (<em>mixed</em> $layoutsDir)</h3> <p>Sets the layouts sub-directory. Must be a directory under the views directory. Depending of your platform, always add a trailing slash or backslash</p> <pre class=\"highlight-php\" data-language=\"php\">$view-&gt;setLayoutsDir('../common/layouts/');\n</pre> <h3 id=\"getlayoutsdir\" class=\"method-signature\">public <strong>getLayoutsDir</strong> ()</h3> <p>Gets the current layouts sub-directory</p> <h3 id=\"setpartialsdir\" class=\"method-signature\">public <strong>setPartialsDir</strong> (<em>mixed</em> $partialsDir)</h3> <p>Sets a partials sub-directory. Must be a directory under the views directory. Depending of your platform, always add a trailing slash or backslash</p> <pre class=\"highlight-php\" data-language=\"php\">$view-&gt;setPartialsDir('../common/partials/');\n</pre> <h3 id=\"getpartialsdir\" class=\"method-signature\">public <strong>getPartialsDir</strong> ()</h3> <p>Gets the current partials sub-directory</p> <h3 id=\"setbasepath\" class=\"method-signature\">public <strong>setBasePath</strong> (<em>mixed</em> $basePath)</h3> <p>Sets base path. Depending of your platform, always add a trailing slash or backslash</p> <pre class=\"highlight-php\" data-language=\"php\">$view-&gt;setBasePath(__DIR__ . '/');\n</pre> <h3 id=\"getbasepath\" class=\"method-signature\">public <strong>getBasePath</strong> ()</h3> <p>Gets base path</p> <h3 id=\"setrenderlevel\" class=\"method-signature\">public <strong>setRenderLevel</strong> (<em>mixed</em> $level)</h3> <p>Sets the render level for the view</p> <pre class=\"highlight-php\" data-language=\"php\">//Render the view related to the controller only\n    $this-&gt;view-&gt;setRenderLevel(View::LEVEL_LAYOUT);\n</pre> <h3 id=\"disablelevel\" class=\"method-signature\">public <strong>disableLevel</strong> (<em>mixed</em> $level)</h3> <p>Disables a specific level of rendering</p> <pre class=\"highlight-php\" data-language=\"php\">// Render all levels except ACTION level\n $this-&gt;view-&gt;disableLevel(View::LEVEL_ACTION_VIEW);\n</pre> <h3 id=\"setmainview\" class=\"method-signature\">public <strong>setMainView</strong> (<em>mixed</em> $viewPath)</h3> <p>Sets default view name. Must be a file without extension in the views directory</p> <pre class=\"highlight-php\" data-language=\"php\">//Renders as main view views-dir/base.phtml\n    $this-&gt;view-&gt;setMainView('base');\n</pre> <h3 id=\"getmainview\" class=\"method-signature\">public <strong>getMainView</strong> ()</h3> <p>Returns the name of the main view</p> <h3 id=\"setlayout\" class=\"method-signature\">public <strong>setLayout</strong> (<em>mixed</em> $layout)</h3> <p>Change the layout to be used instead of using the name of the latest controller name</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;view-&gt;setLayout('main');\n</pre> <h3 id=\"getlayout\" class=\"method-signature\">public <strong>getLayout</strong> ()</h3> <p>Returns the name of the main view</p> <h3 id=\"settemplatebefore\" class=\"method-signature\">public <strong>setTemplateBefore</strong> (<em>mixed</em> $templateBefore)</h3> <p>Sets a template before the controller layout</p> <h3 id=\"cleantemplatebefore\" class=\"method-signature\">public <strong>cleanTemplateBefore</strong> ()</h3> <p>Resets any “template before” layouts</p> <h3 id=\"settemplateafter\" class=\"method-signature\">public <strong>setTemplateAfter</strong> (<em>mixed</em> $templateAfter)</h3> <p>Sets a “template after” controller layout</p> <h3 id=\"cleantemplateafter\" class=\"method-signature\">public <strong>cleanTemplateAfter</strong> ()</h3> <p>Resets any template before layouts</p> <h3 id=\"setparamtoview\" class=\"method-signature\">public <strong>setParamToView</strong> (<em>mixed</em> $key, <em>mixed</em> $value)</h3> <p>Adds parameters to views (alias of setVar)</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;view-&gt;setParamToView('products', $products);\n</pre> <h3 id=\"setvars\" class=\"method-signature\">public <strong>setVars</strong> (<em>array</em> $params, [<em>mixed</em> $merge])</h3> <p>Set all the render params</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;view-&gt;setVars(['products' =&gt; $products]);\n</pre> <h3 id=\"setvar\" class=\"method-signature\">public <strong>setVar</strong> (<em>mixed</em> $key, <em>mixed</em> $value)</h3> <p>Set a single view parameter</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;view-&gt;setVar('products', $products);\n</pre> <h3 id=\"getvar\" class=\"method-signature\">public <strong>getVar</strong> (<em>mixed</em> $key)</h3> <p>Returns a parameter previously set in the view</p> <h3 id=\"getparamstoview\" class=\"method-signature\">public <strong>getParamsToView</strong> ()</h3> <p>Returns parameters to views</p> <h3 id=\"getcontrollername\" class=\"method-signature\">public <strong>getControllerName</strong> ()</h3> <p>Gets the name of the controller rendered</p> <h3 id=\"getactionname\" class=\"method-signature\">public <strong>getActionName</strong> ()</h3> <p>Gets the name of the action rendered</p> <h3 id=\"getparams\" class=\"method-signature\">public <strong>getParams</strong> ()</h3> <p>Gets extra parameters of the action rendered</p> <h3 id=\"start\" class=\"method-signature\">public <strong>start</strong> ()</h3> <p>Starts rendering process enabling the output buffering</p> <h3 id=\"_loadtemplateengines\" class=\"method-signature\">protected <strong>_loadTemplateEngines</strong> ()</h3> <p>Loads registered template engines, if none is registered it will use Phalcon\\Mvc\\View\\Engine\\Php</p> <h3 id=\"_enginerender\" class=\"method-signature\">protected <strong>_engineRender</strong> (<em>array</em> $engines, <em>string</em> $viewPath, <em>boolean</em> $silence, <em>boolean</em> $mustClean, [<a class=\"reference internal\" href=\"phalcon_cache_backendinterface\"><em>Phalcon\\Cache\\BackendInterface</em></a> $cache])</h3> <p>Checks whether view exists on registered extensions and render it</p> <h3 id=\"registerengines\" class=\"method-signature\">public <strong>registerEngines</strong> (<em>array</em> $engines)</h3> <p>Register templating engines</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;view-&gt;registerEngines([\n  '.phtml' =&gt; 'Phalcon\\Mvc\\View\\Engine\\Php',\n  '.volt'  =&gt; 'Phalcon\\Mvc\\View\\Engine\\Volt',\n  '.mhtml' =&gt; 'MyCustomEngine'\n ]);\n</pre> <h3 id=\"exists\" class=\"method-signature\">public <strong>exists</strong> (<em>mixed</em> $view)</h3> <p>Checks whether view exists</p> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> (<em>string</em> $controllerName, <em>string</em> $actionName, [<em>array</em> $params])</h3> <p>Executes render process from dispatching data</p> <pre class=\"highlight-php\" data-language=\"php\">// Shows recent posts view (app/views/posts/recent.phtml)\n $view-&gt;start()-&gt;render('posts', 'recent')-&gt;finish();\n</pre> <h3 id=\"pick\" class=\"method-signature\">public <strong>pick</strong> (<em>mixed</em> $renderView)</h3> <p>Choose a different view to render instead of last-controller/last-action</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\Controller;\n\n class ProductsController extends Controller\n {\n\n    public function saveAction()\n    {\n\n         // Do some save stuff...\n\n         // Then show the list view\n         $this-&gt;view-&gt;pick(\"products/list\");\n    }\n }\n</pre> <h3 id=\"getpartial\" class=\"method-signature\">public <strong>getPartial</strong> (<em>mixed</em> $partialPath, [<em>mixed</em> $params])</h3> <p>Renders a partial view</p> <pre class=\"highlight-php\" data-language=\"php\">// Retrieve the contents of a partial\n    echo $this-&gt;getPartial('shared/footer');\n</pre> <pre class=\"highlight-php\" data-language=\"php\">// Retrieve the contents of a partial with arguments\n    echo $this-&gt;getPartial('shared/footer', ['content' =&gt; $html]);\n</pre> <h3 id=\"partial\" class=\"method-signature\">public <strong>partial</strong> (<em>mixed</em> $partialPath, [<em>mixed</em> $params])</h3> <p>Renders a partial view</p> <pre class=\"highlight-php\" data-language=\"php\">// Show a partial inside another view\n    $this-&gt;partial('shared/footer');\n</pre> <pre class=\"highlight-php\" data-language=\"php\">// Show a partial inside another view with parameters\n    $this-&gt;partial('shared/footer', ['content' =&gt; $html]);\n</pre> <h3 id=\"getrender\" class=\"method-signature\">public <em>string</em> <strong>getRender</strong> (<em>string</em> $controllerName, <em>string</em> $actionName, [<em>array</em> $params], [<em>mixed</em> $configCallback])</h3> <p>Perform the automatic rendering returning the output as a string</p> <pre class=\"highlight-php\" data-language=\"php\">$template = $this-&gt;view-&gt;getRender('products', 'show', ['products' =&gt; $products]);\n</pre> <h3 id=\"finish\" class=\"method-signature\">public <strong>finish</strong> ()</h3> <p>Finishes the render process by stopping the output buffering</p> <h3 id=\"_createcache\" class=\"method-signature\">protected <strong>_createCache</strong> ()</h3> <p>Create a Phalcon\\Cache based on the internal cache options</p> <h3 id=\"iscaching\" class=\"method-signature\">public <strong>isCaching</strong> ()</h3> <p>Check if the component is currently caching the output content</p> <h3 id=\"getcache\" class=\"method-signature\">public <strong>getCache</strong> ()</h3> <p>Returns the cache instance used to cache</p> <h3 id=\"cache\" class=\"method-signature\">public <strong>cache</strong> ([<em>mixed</em> $options])</h3> <p>Cache the actual view render to certain level</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;view-&gt;cache(['key' =&gt; 'my-key', 'lifetime' =&gt; 86400]);\n</pre> <h3 id=\"setcontent\" class=\"method-signature\">public <strong>setContent</strong> (<em>mixed</em> $content)</h3> <p>Externally sets the view content</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;view-&gt;setContent(\"&lt;h1&gt;hello&lt;/h1&gt;\");\n</pre> <h3 id=\"getcontent\" class=\"method-signature\">public <strong>getContent</strong> ()</h3> <p>Returns cached output from another view stage</p> <h3 id=\"getactiverenderpath\" class=\"method-signature\">public <strong>getActiveRenderPath</strong> ()</h3> <p>Returns the path (or paths) of the views that are currently rendered</p> <h3 id=\"disable\" class=\"method-signature\">public <strong>disable</strong> ()</h3> <p>Disables the auto-rendering process</p> <h3 id=\"enable\" class=\"method-signature\">public <strong>enable</strong> ()</h3> <p>Enables the auto-rendering process</p> <h3 id=\"reset\" class=\"method-signature\">public <strong>reset</strong> ()</h3> <p>Resets the view component to its factory default values</p> <h3 id=\"__set\" class=\"method-signature\">public <strong>__set</strong> (<em>mixed</em> $key, <em>mixed</em> $value)</h3> <p>Magic method to pass variables to the views</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;view-&gt;products = $products;\n</pre> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $key)</h3> <p>Magic method to retrieve a variable passed to the view</p> <pre class=\"highlight-php\" data-language=\"php\">echo $this-&gt;view-&gt;products;\n</pre> <h3 id=\"isdisabled\" class=\"method-signature\">public <strong>isDisabled</strong> ()</h3> <p>Whether automatic rendering is enabled</p> <h3 id=\"__isset\" class=\"method-signature\">public <strong>__isset</strong> (<em>mixed</em> $key)</h3> <p>Magic method to retrieve if a variable is set in the view</p> <pre class=\"highlight-php\" data-language=\"php\">echo isset($this-&gt;view-&gt;products);\n</pre> <h3 id=\"getviewsdirs\" class=\"method-signature\">protected <strong>getViewsDirs</strong> ()</h3> <p>Gets views directories</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal event manager</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View.html</a>\n  </p>\n</div>\n","api/phalcon_paginator_adapter_nativearray":"<h1 id=\"class-phalcon-paginator-adapter-nativearray\">Class <strong>Phalcon\\Paginator\\Adapter\\NativeArray</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_paginator_adapter\"><em>Phalcon\\Paginator\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_paginator_adapterinterface\"><em>Phalcon\\Paginator\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/paginator/adapter/nativearray.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Pagination using a PHP array as source of data</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Paginator\\Adapter\\NativeArray;\n\n $paginator = new NativeArray(\n     [\n         'data'  =&gt; array(\n             ['id' =&gt; 1, 'name' =&gt; 'Artichoke'],\n             ['id' =&gt; 2, 'name' =&gt; 'Carrots'],\n             ['id' =&gt; 3, 'name' =&gt; 'Beet'],\n             ['id' =&gt; 4, 'name' =&gt; 'Lettuce'],\n             ['id' =&gt; 5, 'name' =&gt; '']\n         ],\n         'limit' =&gt; 2,\n         'page'  =&gt; $currentPage,\n     ]\n );\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $config)</h3> <p>Phalcon\\Paginator\\Adapter\\NativeArray constructor</p> <h3 id=\"getpaginate\" class=\"method-signature\">public <strong>getPaginate</strong> ()</h3> <p>Returns a slice of the resultset to show in the pagination</p> <h3 id=\"setcurrentpage\" class=\"method-signature\">public <strong>setCurrentPage</strong> (<em>mixed</em> $page) <small>inherited from Phalcon\\Paginator\\Adapter</small>\n</h3> <p>Set the current page number</p> <h3 id=\"setlimit\" class=\"method-signature\">public <strong>setLimit</strong> (<em>mixed</em> $limitRows) <small>inherited from Phalcon\\Paginator\\Adapter</small>\n</h3> <p>Set current rows limit</p> <h3 id=\"getlimit\" class=\"method-signature\">public <strong>getLimit</strong> () <small>inherited from Phalcon\\Paginator\\Adapter</small>\n</h3> <p>Get current rows limit</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_NativeArray.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_NativeArray.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_view_engine_volt_compiler":"<h1 id=\"class-phalcon-mvc-view-engine-volt-compiler\">Class <strong>Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view/engine/volt/compiler.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class reads and compiles Volt templates into PHP plain code</p> <pre class=\"highlight-php\" data-language=\"php\">$compiler = new \\Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler();\n\n$compiler-&gt;compile('views/partials/header.volt');\n\nrequire $compiler-&gt;getCompiledTemplatePath();\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<a class=\"reference internal\" href=\"phalcon_mvc_viewbaseinterface\"><em>Phalcon\\Mvc\\ViewBaseInterface</em></a> $view])</h3> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the internal dependency injector</p> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>array</em> $options)</h3> <p>Sets the compiler options</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>string</em> $option, <em>mixed</em> $value)</h3> <p>Sets a single compiler option</p> <h3 id=\"getoption\" class=\"method-signature\">public <em>string</em> <strong>getOption</strong> (<em>string</em> $option)</h3> <p>Returns a compiler’s option</p> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> ()</h3> <p>Returns the compiler options</p> <h3 id=\"fireextensionevent\" class=\"method-signature\">final public <em>mixed</em> <strong>fireExtensionEvent</strong> (<em>string</em> $name, [<em>array</em> $arguments])</h3> <p>Fires an event to registered extensions</p> <h3 id=\"addextension\" class=\"method-signature\">public <strong>addExtension</strong> (<em>mixed</em> $extension)</h3> <p>Registers a Volt’s extension</p> <h3 id=\"getextensions\" class=\"method-signature\">public <strong>getExtensions</strong> ()</h3> <p>Returns the list of extensions registered in Volt</p> <h3 id=\"addfunction\" class=\"method-signature\">public <strong>addFunction</strong> (<em>mixed</em> $name, <em>mixed</em> $definition)</h3> <p>Register a new function in the compiler</p> <h3 id=\"getfunctions\" class=\"method-signature\">public <strong>getFunctions</strong> ()</h3> <p>Register the user registered functions</p> <h3 id=\"addfilter\" class=\"method-signature\">public <strong>addFilter</strong> (<em>mixed</em> $name, <em>mixed</em> $definition)</h3> <p>Register a new filter in the compiler</p> <h3 id=\"getfilters\" class=\"method-signature\">public <strong>getFilters</strong> ()</h3> <p>Register the user registered filters</p> <h3 id=\"setuniqueprefix\" class=\"method-signature\">public <strong>setUniquePrefix</strong> (<em>mixed</em> $prefix)</h3> <p>Set a unique prefix to be used as prefix for compiled variables</p> <h3 id=\"getuniqueprefix\" class=\"method-signature\">public <strong>getUniquePrefix</strong> ()</h3> <p>Return a unique prefix to be used as prefix for compiled variables and contexts</p> <h3 id=\"attributereader\" class=\"method-signature\">public <strong>attributeReader</strong> (<em>array</em> $expr)</h3> <p>Resolves attribute reading</p> <h3 id=\"functioncall\" class=\"method-signature\">public <strong>functionCall</strong> (<em>array</em> $expr)</h3> <p>Resolves function intermediate code into PHP function calls</p> <h3 id=\"resolvetest\" class=\"method-signature\">public <strong>resolveTest</strong> (<em>array</em> $test, <em>mixed</em> $left)</h3> <p>Resolves filter intermediate code into a valid PHP expression</p> <h3 id=\"resolvefilter\" class=\"method-signature\">final protected <strong>resolveFilter</strong> (<em>array</em> $filter, <em>mixed</em> $left)</h3> <p>Resolves filter intermediate code into PHP function calls</p> <h3 id=\"expression\" class=\"method-signature\">final public <strong>expression</strong> (<em>array</em> $expr)</h3> <p>Resolves an expression node in an AST volt tree</p> <h3 id=\"_statementlistorextends\" class=\"method-signature\">final protected <em>string|array</em> <strong>_statementListOrExtends</strong> (<em>array</em> $statements)</h3> <p>Compiles a block of statements</p> <h3 id=\"compileforeach\" class=\"method-signature\">public <strong>compileForeach</strong> (<em>array</em> $statement, [<em>mixed</em> $extendsMode])</h3> <p>Compiles a “foreach” intermediate code representation into plain PHP code</p> <h3 id=\"compileforelse\" class=\"method-signature\">public <strong>compileForElse</strong> ()</h3> <p>Generates a ‘forelse’ PHP code</p> <h3 id=\"compileif\" class=\"method-signature\">public <strong>compileIf</strong> (<em>array</em> $statement, [<em>mixed</em> $extendsMode])</h3> <p>Compiles a ‘if’ statement returning PHP code</p> <h3 id=\"compileelseif\" class=\"method-signature\">public <strong>compileElseIf</strong> (<em>array</em> $statement)</h3> <p>Compiles a “elseif” statement returning PHP code</p> <h3 id=\"compilecache\" class=\"method-signature\">public <strong>compileCache</strong> (<em>array</em> $statement, [<em>mixed</em> $extendsMode])</h3> <p>Compiles a “cache” statement returning PHP code</p> <h3 id=\"compileset\" class=\"method-signature\">public <strong>compileSet</strong> (<em>array</em> $statement)</h3> <p>Compiles a “set” statement returning PHP code</p> <h3 id=\"compiledo\" class=\"method-signature\">public <strong>compileDo</strong> (<em>array</em> $statement)</h3> <p>Compiles a “do” statement returning PHP code</p> <h3 id=\"compilereturn\" class=\"method-signature\">public <strong>compileReturn</strong> (<em>array</em> $statement)</h3> <p>Compiles a “return” statement returning PHP code</p> <h3 id=\"compileautoescape\" class=\"method-signature\">public <strong>compileAutoEscape</strong> (<em>array</em> $statement, <em>mixed</em> $extendsMode)</h3> <p>Compiles a “autoescape” statement returning PHP code</p> <h3 id=\"compileecho\" class=\"method-signature\">public <em>string</em> <strong>compileEcho</strong> (<em>array</em> $statement)</h3> <p>Compiles a ‘{{‘ ‘}}’ statement returning PHP code</p> <h3 id=\"compileinclude\" class=\"method-signature\">public <strong>compileInclude</strong> (<em>array</em> $statement)</h3> <p>Compiles a ‘include’ statement returning PHP code</p> <h3 id=\"compilemacro\" class=\"method-signature\">public <strong>compileMacro</strong> (<em>array</em> $statement, <em>mixed</em> $extendsMode)</h3> <p>Compiles macros</p> <h3 id=\"compilecall\" class=\"method-signature\">public <em>string</em> <strong>compileCall</strong> (<em>array</em> $statement, <em>boolean</em> $extendsMode)</h3> <p>Compiles calls to macros</p> <h3 id=\"_statementlist\" class=\"method-signature\">final protected <strong>_statementList</strong> (<em>array</em> $statements, [<em>mixed</em> $extendsMode])</h3> <p>Traverses a statement list compiling each of its nodes</p> <h3 id=\"_compilesource\" class=\"method-signature\">protected <strong>_compileSource</strong> (<em>mixed</em> $viewCode, [<em>mixed</em> $extendsMode])</h3> <p>Compiles a Volt source code returning a PHP plain version</p> <h3 id=\"compilestring\" class=\"method-signature\">public <strong>compileString</strong> (<em>mixed</em> $viewCode, [<em>mixed</em> $extendsMode])</h3> <p>Compiles a template into a string</p> <pre class=\"highlight-php\" data-language=\"php\">echo $compiler-&gt;compileString('{{ \"hello world\" }}');\n</pre> <h3 id=\"compilefile\" class=\"method-signature\">public <em>string|array</em> <strong>compileFile</strong> (<em>string</em> $path, <em>string</em> $compiledPath, [<em>boolean</em> $extendsMode])</h3> <p>Compiles a template into a file forcing the destination path</p> <pre class=\"highlight-php\" data-language=\"php\">$compiler-&gt;compile('views/layouts/main.volt', 'views/layouts/main.volt.php');\n</pre> <h3 id=\"compile\" class=\"method-signature\">public <strong>compile</strong> (<em>mixed</em> $templatePath, [<em>mixed</em> $extendsMode])</h3> <p>Compiles a template into a file applying the compiler options This method does not return the compiled path if the template was not compiled</p> <pre class=\"highlight-php\" data-language=\"php\">$compiler-&gt;compile('views/layouts/main.volt');\nrequire $compiler-&gt;getCompiledTemplatePath();\n</pre> <h3 id=\"gettemplatepath\" class=\"method-signature\">public <strong>getTemplatePath</strong> ()</h3> <p>Returns the path that is currently being compiled</p> <h3 id=\"getcompiledtemplatepath\" class=\"method-signature\">public <strong>getCompiledTemplatePath</strong> ()</h3> <p>Returns the path to the last compiled template</p> <h3 id=\"parse\" class=\"method-signature\">public <em>array</em> <strong>parse</strong> (<em>string</em> $viewCode)</h3> <p>Parses a Volt template returning its intermediate representation</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($compiler-&gt;parse('{{ 3 + 2 }}'));\n</pre> <h3 id=\"getfinalpath\" class=\"method-signature\">protected <strong>getFinalPath</strong> (<em>mixed</em> $path)</h3> <p>Gets the final path with VIEW</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Volt_Compiler.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Engine_Volt_Compiler.html</a>\n  </p>\n</div>\n","api/phalcon_registry":"<h1 id=\"final-class-phalcon-registry\">Final class <strong>Phalcon\\Registry</strong>\n</h1> <p><em>implements</em> ArrayAccess, Countable, Iterator, Traversable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/registry.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>A registry is a container for storing objects and values in the application space. By storing the value in a registry, the same object is always available throughout your application.</p> <pre class=\"highlight-php\" data-language=\"php\">$registry = new \\Phalcon\\Registry();\n\n      // Set value\n      $registry-&gt;something = 'something';\n      // or\n      $registry['something'] = 'something';\n\n      // Get value\n      $value = $registry-&gt;something;\n      // or\n      $value = $registry['something'];\n\n      // Check if the key exists\n      $exists = isset($registry-&gt;something);\n      // or\n      $exists = isset($registry['something']);\n\n      // Unset\n      unset($registry-&gt;something);\n      // or\n      unset($registry['something']);\n\nIn addition to ArrayAccess, Phalcon\\\\Registry also implements Countable (count($registry) will return the number of elements in the registry), Serializable and Iterator (you can iterate over the registry using a foreach loop) interfaces. For PHP 5.4 and higher, JsonSerializable interface is implemented.  Phalcon\\\\Registry is very fast (it is typically faster than any userspace implementation of the registry); however, this comes at a price: Phalcon\\\\Registry is a final class and cannot be inherited from.  Though Phalcon\\\\Registry exposes methods like __get(), offsetGet(), count() etc, it is not recommended to invoke them manually (these methods exist mainly to match the interfaces the registry implements): $registry-&gt;__get('property') is several times slower than $registry-&gt;property.  Internally all the magic methods (and interfaces except JsonSerializable) are implemented using object handlers or similar techniques: this allows to bypass relatively slow method calls.\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">final public <strong>__construct</strong> ()</h3> <p>Registry constructor</p> <h3 id=\"offsetexists\" class=\"method-signature\">final public <strong>offsetExists</strong> (<em>mixed</em> $offset)</h3> <p>Checks if the element is present in the registry</p> <h3 id=\"offsetget\" class=\"method-signature\">final public <strong>offsetGet</strong> (<em>mixed</em> $offset)</h3> <p>Returns an index in the registry</p> <h3 id=\"offsetset\" class=\"method-signature\">final public <strong>offsetSet</strong> (<em>mixed</em> $offset, <em>mixed</em> $value)</h3> <p>Sets an element in the registry</p> <h3 id=\"offsetunset\" class=\"method-signature\">final public <strong>offsetUnset</strong> (<em>mixed</em> $offset)</h3> <p>Unsets an element in the registry</p> <h3 id=\"count\" class=\"method-signature\">final public <strong>count</strong> ()</h3> <p>Checks how many elements are in the register</p> <h3 id=\"next\" class=\"method-signature\">final public <strong>next</strong> ()</h3> <p>Moves cursor to next row in the registry</p> <h3 id=\"key\" class=\"method-signature\">final public <strong>key</strong> ()</h3> <p>Gets pointer number of active row in the registry</p> <h3 id=\"rewind\" class=\"method-signature\">final public <strong>rewind</strong> ()</h3> <p>Rewinds the registry cursor to its beginning</p> <h3 id=\"valid\" class=\"method-signature\">public <strong>valid</strong> ()</h3> <p>Checks if the iterator is valid</p> <h3 id=\"current\" class=\"method-signature\">public <strong>current</strong> ()</h3> <p>Obtains the current value in the internal iterator</p> <h3 id=\"__set\" class=\"method-signature\">final public <strong>__set</strong> (<em>mixed</em> $key, <em>mixed</em> $value)</h3> <p>Sets an element in the registry</p> <h3 id=\"__get\" class=\"method-signature\">final public <strong>__get</strong> (<em>mixed</em> $key)</h3> <p>Returns an index in the registry</p> <h3 id=\"__isset\" class=\"method-signature\">final public <strong>__isset</strong> (<em>mixed</em> $key)</h3> <p>...</p> <h3 id=\"__unset\" class=\"method-signature\">final public <strong>__unset</strong> (<em>mixed</em> $key)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Registry.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Registry.html</a>\n  </p>\n</div>\n","api/phalcon_paginator_adapter_querybuilder":"<h1 id=\"class-phalcon-paginator-adapter-querybuilder\">Class <strong>Phalcon\\Paginator\\Adapter\\QueryBuilder</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_paginator_adapter\"><em>Phalcon\\Paginator\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_paginator_adapterinterface\"><em>Phalcon\\Paginator\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/paginator/adapter/querybuilder.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Pagination using a PHQL query builder as source of data</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Paginator\\Adapter\\QueryBuilder;\n\n $builder = $this-&gt;modelsManager-&gt;createBuilder()\n                 -&gt;columns('id, name')\n                 -&gt;from('Robots')\n                 -&gt;orderBy('name');\n\n $paginator = new QueryBuilder(\n     [\n         'builder' =&gt; $builder,\n         'limit'   =&gt; 20,\n         'page'    =&gt; 1,\n     ]\n );\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $config)</h3> <h3 id=\"getcurrentpage\" class=\"method-signature\">public <strong>getCurrentPage</strong> ()</h3> <p>Get the current page number</p> <h3 id=\"setquerybuilder\" class=\"method-signature\">public <strong>setQueryBuilder</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_query_builder\"><em>Phalcon\\Mvc\\Model\\Query\\Builder</em></a> $builder)</h3> <p>Set query builder object</p> <h3 id=\"getquerybuilder\" class=\"method-signature\">public <strong>getQueryBuilder</strong> ()</h3> <p>Get query builder object</p> <h3 id=\"getpaginate\" class=\"method-signature\">public <strong>getPaginate</strong> ()</h3> <p>Returns a slice of the resultset to show in the pagination</p> <h3 id=\"setcurrentpage\" class=\"method-signature\">public <strong>setCurrentPage</strong> (<em>mixed</em> $page) <small>inherited from Phalcon\\Paginator\\Adapter</small>\n</h3> <p>Set the current page number</p> <h3 id=\"setlimit\" class=\"method-signature\">public <strong>setLimit</strong> (<em>mixed</em> $limitRows) <small>inherited from Phalcon\\Paginator\\Adapter</small>\n</h3> <p>Set current rows limit</p> <h3 id=\"getlimit\" class=\"method-signature\">public <strong>getLimit</strong> () <small>inherited from Phalcon\\Paginator\\Adapter</small>\n</h3> <p>Get current rows limit</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_QueryBuilder.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_Adapter_QueryBuilder.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_view_simple":"<h1 id=\"class-phalcon-mvc-view-simple\">Class <strong>Phalcon\\Mvc\\View\\Simple</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_di_injectable\"><em>Phalcon\\Di\\Injectable</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_mvc_viewbaseinterface\"><em>Phalcon\\Mvc\\ViewBaseInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view/simple.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This component allows to render views without hierarchical levels</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Mvc\\View\\Simple as View;\n\n $view = new View();\n\n // Render a view\n echo $view-&gt;render('templates/my-view', ['some' =&gt; $param]);\n\n // Or with filename with extension\n echo $view-&gt;render('templates/my-view.volt', ['parameter' =&gt; $here]);\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getregisteredengines\" class=\"method-signature\">public <strong>getRegisteredEngines</strong> ()</h3> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <p>Phalcon\\Mvc\\View\\Simple constructor</p> <h3 id=\"setviewsdir\" class=\"method-signature\">public <strong>setViewsDir</strong> (<em>mixed</em> $viewsDir)</h3> <p>Sets views directory. Depending of your platform, always add a trailing slash or backslash</p> <h3 id=\"getviewsdir\" class=\"method-signature\">public <strong>getViewsDir</strong> ()</h3> <p>Gets views directory</p> <h3 id=\"registerengines\" class=\"method-signature\">public <strong>registerEngines</strong> (<em>array</em> $engines)</h3> <p>Register templating engines</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;view-&gt;registerEngines([\n  '.phtml' =&gt; 'Phalcon\\Mvc\\View\\Engine\\Php',\n  '.volt'  =&gt; 'Phalcon\\Mvc\\View\\Engine\\Volt',\n  '.mhtml' =&gt; 'MyCustomEngine'\n ]);\n</pre> <h3 id=\"_loadtemplateengines\" class=\"method-signature\">protected <em>array</em> <strong>_loadTemplateEngines</strong> ()</h3> <p>Loads registered template engines, if none is registered it will use Phalcon\\Mvc\\View\\Engine\\Php</p> <h3 id=\"_internalrender\" class=\"method-signature\">final protected <strong>_internalRender</strong> (<em>string</em> $path, <em>array</em> $params)</h3> <p>Tries to render the view with every engine registered in the component</p> <h3 id=\"render\" class=\"method-signature\">public <strong>render</strong> (<em>string</em> $path, [<em>array</em> $params])</h3> <p>Renders a view</p> <h3 id=\"partial\" class=\"method-signature\">public <strong>partial</strong> (<em>mixed</em> $partialPath, [<em>mixed</em> $params])</h3> <p>Renders a partial view</p> <pre class=\"highlight-php\" data-language=\"php\">// Show a partial inside another view\n    $this-&gt;partial('shared/footer');\n</pre> <pre class=\"highlight-php\" data-language=\"php\">// Show a partial inside another view with parameters\n    $this-&gt;partial('shared/footer', ['content' =&gt; $html]);\n</pre> <h3 id=\"setcacheoptions\" class=\"method-signature\">public <strong>setCacheOptions</strong> (<em>array</em> $options)</h3> <p>Sets the cache options</p> <h3 id=\"getcacheoptions\" class=\"method-signature\">public <em>array</em> <strong>getCacheOptions</strong> ()</h3> <p>Returns the cache options</p> <h3 id=\"_createcache\" class=\"method-signature\">protected <strong>_createCache</strong> ()</h3> <p>Create a Phalcon\\Cache based on the internal cache options</p> <h3 id=\"getcache\" class=\"method-signature\">public <strong>getCache</strong> ()</h3> <p>Returns the cache instance used to cache</p> <h3 id=\"cache\" class=\"method-signature\">public <strong>cache</strong> ([<em>mixed</em> $options])</h3> <p>Cache the actual view render to certain level</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;view-&gt;cache(['key' =&gt; 'my-key', 'lifetime' =&gt; 86400]);\n</pre> <h3 id=\"setparamtoview\" class=\"method-signature\">public <strong>setParamToView</strong> (<em>mixed</em> $key, <em>mixed</em> $value)</h3> <p>Adds parameters to views (alias of setVar)</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;view-&gt;setParamToView('products', $products);\n</pre> <h3 id=\"setvars\" class=\"method-signature\">public <strong>setVars</strong> (<em>array</em> $params, [<em>mixed</em> $merge])</h3> <p>Set all the render params</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;view-&gt;setVars(['products' =&gt; $products]);\n</pre> <h3 id=\"setvar\" class=\"method-signature\">public <strong>setVar</strong> (<em>mixed</em> $key, <em>mixed</em> $value)</h3> <p>Set a single view parameter</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;view-&gt;setVar('products', $products);\n</pre> <h3 id=\"getvar\" class=\"method-signature\">public <strong>getVar</strong> (<em>mixed</em> $key)</h3> <p>Returns a parameter previously set in the view</p> <h3 id=\"getparamstoview\" class=\"method-signature\">public <em>array</em> <strong>getParamsToView</strong> ()</h3> <p>Returns parameters to views</p> <h3 id=\"setcontent\" class=\"method-signature\">public <strong>setContent</strong> (<em>mixed</em> $content)</h3> <p>Externally sets the view content</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;view-&gt;setContent(\"&lt;h1&gt;hello&lt;/h1&gt;\");\n</pre> <h3 id=\"getcontent\" class=\"method-signature\">public <strong>getContent</strong> ()</h3> <p>Returns cached output from another view stage</p> <h3 id=\"getactiverenderpath\" class=\"method-signature\">public <em>string</em> <strong>getActiveRenderPath</strong> ()</h3> <p>Returns the path of the view that is currently rendered</p> <h3 id=\"__set\" class=\"method-signature\">public <strong>__set</strong> (<em>mixed</em> $key, <em>mixed</em> $value)</h3> <p>Magic method to pass variables to the views</p> <pre class=\"highlight-php\" data-language=\"php\">$this-&gt;view-&gt;products = $products;\n</pre> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $key)</h3> <p>Magic method to retrieve a variable passed to the view</p> <pre class=\"highlight-php\" data-language=\"php\">echo $this-&gt;view-&gt;products;\n</pre> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal event manager</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Simple.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_Simple.html</a>\n  </p>\n</div>\n","api/phalcon_queue_beanstalk":"<h1 id=\"class-phalcon-queue-beanstalk\">Class <strong>Phalcon\\Queue\\Beanstalk</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/queue/beanstalk.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Class to access the beanstalk queue service. Partially implements the protocol version 1.2</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Queue\\Beanstalk;\n\n $queue = new Beanstalk([\n     'host'       =&gt; '127.0.0.1',\n     'port'       =&gt; 11300,\n     'persistent' =&gt; true,\n ]);\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"default_delay\" class=\"method-signature\">\n<em>integer</em> <strong>DEFAULT_DELAY</strong>\n</h3> <h3 id=\"default_priority\" class=\"method-signature\">\n<em>integer</em> <strong>DEFAULT_PRIORITY</strong>\n</h3> <h3 id=\"default_ttr\" class=\"method-signature\">\n<em>integer</em> <strong>DEFAULT_TTR</strong>\n</h3> <h3 id=\"default_tube\" class=\"method-signature\">\n<em>string</em> <strong>DEFAULT_TUBE</strong>\n</h3> <h3 id=\"default_host\" class=\"method-signature\">\n<em>string</em> <strong>DEFAULT_HOST</strong>\n</h3> <h3 id=\"default_port\" class=\"method-signature\">\n<em>integer</em> <strong>DEFAULT_PORT</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <h3 id=\"connect\" class=\"method-signature\">public <strong>connect</strong> ()</h3> <p>Makes a connection to the Beanstalkd server</p> <h3 id=\"put\" class=\"method-signature\">public <strong>put</strong> (<em>mixed</em> $data, [<em>array</em> $options])</h3> <p>Puts a job on the queue using specified tube.</p> <h3 id=\"reserve\" class=\"method-signature\">public <strong>reserve</strong> ([<em>mixed</em> $timeout])</h3> <p>Reserves/locks a ready job from the specified tube.</p> <h3 id=\"choose\" class=\"method-signature\">public <strong>choose</strong> (<em>mixed</em> $tube)</h3> <p>Change the active tube. By default the tube is “default”.</p> <h3 id=\"watch\" class=\"method-signature\">public <strong>watch</strong> (<em>mixed</em> $tube)</h3> <p>The watch command adds the named tube to the watch list for the current connection.</p> <h3 id=\"ignore\" class=\"method-signature\">public <strong>ignore</strong> (<em>mixed</em> $tube)</h3> <p>It removes the named tube from the watch list for the current connection.</p> <h3 id=\"pausetube\" class=\"method-signature\">public <strong>pauseTube</strong> (<em>mixed</em> $tube, <em>mixed</em> $delay)</h3> <p>Can delay any new job being reserved for a given time.</p> <h3 id=\"kick\" class=\"method-signature\">public <strong>kick</strong> (<em>mixed</em> $bound)</h3> <p>The kick command applies only to the currently used tube.</p> <h3 id=\"stats\" class=\"method-signature\">public <strong>stats</strong> ()</h3> <p>Gives statistical information about the system as a whole.</p> <h3 id=\"statstube\" class=\"method-signature\">public <strong>statsTube</strong> (<em>mixed</em> $tube)</h3> <p>Gives statistical information about the specified tube if it exists.</p> <h3 id=\"listtubes\" class=\"method-signature\">public <strong>listTubes</strong> ()</h3> <p>Returns a list of all existing tubes.</p> <h3 id=\"listtubeused\" class=\"method-signature\">public <strong>listTubeUsed</strong> ()</h3> <p>Returns the tube currently being used by the client.</p> <h3 id=\"listtubeswatched\" class=\"method-signature\">public <strong>listTubesWatched</strong> ()</h3> <p>Returns a list tubes currently being watched by the client.</p> <h3 id=\"peekready\" class=\"method-signature\">public <strong>peekReady</strong> ()</h3> <p>Inspect the next ready job.</p> <h3 id=\"peekburied\" class=\"method-signature\">public <strong>peekBuried</strong> ()</h3> <p>Return the next job in the list of buried jobs.</p> <h3 id=\"peekdelayed\" class=\"method-signature\">public <strong>peekDelayed</strong> ()</h3> <p>Return the next job in the list of buried jobs.</p> <h3 id=\"jobpeek\" class=\"method-signature\">public <strong>jobPeek</strong> (<em>mixed</em> $id)</h3> <p>The peek commands let the client inspect a job in the system.</p> <h3 id=\"readstatus\" class=\"method-signature\">final public <strong>readStatus</strong> ()</h3> <p>Reads the latest status from the Beanstalkd server</p> <h3 id=\"readyaml\" class=\"method-signature\">final public <strong>readYaml</strong> ()</h3> <p>Fetch a YAML payload from the Beanstalkd server</p> <h3 id=\"read\" class=\"method-signature\">public <strong>read</strong> ([<em>mixed</em> $length])</h3> <p>Reads a packet from the socket. Prior to reading from the socket will check for availability of the connection.</p> <h3 id=\"write\" class=\"method-signature\">protected <strong>write</strong> (<em>mixed</em> $data)</h3> <p>Writes data to the socket. Performs a connection if none is available</p> <h3 id=\"disconnect\" class=\"method-signature\">public <strong>disconnect</strong> ()</h3> <p>Closes the connection to the beanstalk server.</p> <h3 id=\"quit\" class=\"method-signature\">public <strong>quit</strong> ()</h3> <p>Simply closes the connection.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Queue_Beanstalk.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Queue_Beanstalk.html</a>\n  </p>\n</div>\n","api/phalcon_security_exception":"<h1 id=\"class-phalcon-security-exception\">Class <strong>Phalcon\\Security\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/security/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Security_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Security_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_queue_beanstalk_job":"<h1 id=\"class-phalcon-queue-beanstalk-job\">Class <strong>Phalcon\\Queue\\Beanstalk\\Job</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/queue/beanstalk/job.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Represents a job in a beanstalk queue</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getid\" class=\"method-signature\">public <strong>getId</strong> ()</h3> <h3 id=\"getbody\" class=\"method-signature\">public <strong>getBody</strong> ()</h3> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<a class=\"reference internal\" href=\"phalcon_queue_beanstalk\"><em>Phalcon\\Queue\\Beanstalk</em></a> $queue, <em>mixed</em> $id, <em>mixed</em> $body)</h3> <h3 id=\"delete\" class=\"method-signature\">public <strong>delete</strong> ()</h3> <p>Removes a job from the server entirely</p> <h3 id=\"release\" class=\"method-signature\">public <strong>release</strong> ([<em>mixed</em> $priority], [<em>mixed</em> $delay])</h3> <p>The release command puts a reserved job back into the ready queue (and marks its state as “ready”) to be run by any client. It is normally used when the job fails because of a transitory error.</p> <h3 id=\"bury\" class=\"method-signature\">public <strong>bury</strong> ([<em>mixed</em> $priority])</h3> <p>The bury command puts a job into the “buried” state. Buried jobs are put into a FIFO linked list and will not be touched by the server again until a client kicks them with the “kick” command.</p> <h3 id=\"touch\" class=\"method-signature\">public <strong>touch</strong> ()</h3> <p>The <cite>touch</cite> command allows a worker to request more time to work on a job. This is useful for jobs that potentially take a long time, but you still want the benefits of a TTR pulling a job away from an unresponsive worker. A worker may periodically tell the server that it’s still alive and processing a job (e.g. it may do this on <cite>DEADLINE_SOON</cite>). The command postpones the auto release of a reserved job until TTR seconds from when the command is issued.</p> <h3 id=\"kick\" class=\"method-signature\">public <strong>kick</strong> ()</h3> <p>Move the job to the ready queue if it is delayed or buried.</p> <h3 id=\"stats\" class=\"method-signature\">public <strong>stats</strong> ()</h3> <p>Gives statistical information about the specified job if it exists.</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> ()</h3> <p>Checks if the job has been modified after unserializing the object</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Queue_Beanstalk_Job.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Queue_Beanstalk_Job.html</a>\n  </p>\n</div>\n","api/phalcon_session_bag":"<h1 id=\"class-phalcon-session-bag\">Class <strong>Phalcon\\Session\\Bag</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_session_baginterface\"><em>Phalcon\\Session\\BagInterface</em></a>, IteratorAggregate, Traversable, ArrayAccess, Countable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/session/bag.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This component helps to separate session data into “namespaces”. Working by this way you can easily create groups of session variables into the application</p> <pre class=\"highlight-php\" data-language=\"php\">$user = new \\Phalcon\\Session\\Bag('user');\n$user-&gt;name = \"Kimbra Johnson\";\n$user-&gt;age  = 22;\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $name)</h3> <p>Phalcon\\Session\\Bag constructor</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the DependencyInjector container</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the DependencyInjector container</p> <h3 id=\"initialize\" class=\"method-signature\">public <strong>initialize</strong> ()</h3> <p>Initializes the session bag. This method must not be called directly, the class calls it when its internal data is accessed</p> <h3 id=\"destroy\" class=\"method-signature\">public <strong>destroy</strong> ()</h3> <p>Destroys the session bag</p> <pre class=\"highlight-php\" data-language=\"php\">$user-&gt;destroy();\n</pre> <h3 id=\"set\" class=\"method-signature\">public <strong>set</strong> (<em>mixed</em> $property, <em>mixed</em> $value)</h3> <p>Sets a value in the session bag</p> <pre class=\"highlight-php\" data-language=\"php\">$user-&gt;set('name', 'Kimbra');\n</pre> <h3 id=\"__set\" class=\"method-signature\">public <strong>__set</strong> (<em>mixed</em> $property, <em>mixed</em> $value)</h3> <p>Magic setter to assign values to the session bag</p> <pre class=\"highlight-php\" data-language=\"php\">$user-&gt;name = \"Kimbra\";\n</pre> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $property, [<em>mixed</em> $defaultValue])</h3> <p>Obtains a value from the session bag optionally setting a default value</p> <pre class=\"highlight-php\" data-language=\"php\">echo $user-&gt;get('name', 'Kimbra');\n</pre> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $property)</h3> <p>Magic getter to obtain values from the session bag</p> <pre class=\"highlight-php\" data-language=\"php\">echo $user-&gt;name;\n</pre> <h3 id=\"has\" class=\"method-signature\">public <strong>has</strong> (<em>mixed</em> $property)</h3> <p>Check whether a property is defined in the internal bag</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($user-&gt;has('name'));\n</pre> <h3 id=\"__isset\" class=\"method-signature\">public <strong>__isset</strong> (<em>mixed</em> $property)</h3> <p>Magic isset to check whether a property is defined in the bag</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump(isset($user['name']));\n</pre> <h3 id=\"remove\" class=\"method-signature\">public <strong>remove</strong> (<em>mixed</em> $property)</h3> <p>Removes a property from the internal bag</p> <pre class=\"highlight-php\" data-language=\"php\">$user-&gt;remove('name');\n</pre> <h3 id=\"__unset\" class=\"method-signature\">public <strong>__unset</strong> (<em>mixed</em> $property)</h3> <p>Magic unset to remove items using the array syntax</p> <pre class=\"highlight-php\" data-language=\"php\">unset($user['name']);\n</pre> <h3 id=\"count\" class=\"method-signature\">final public <strong>count</strong> ()</h3> <p>Return length of bag</p> <pre class=\"highlight-php\" data-language=\"php\">echo $user-&gt;count();\n</pre> <h3 id=\"getiterator\" class=\"method-signature\">final public <strong>getIterator</strong> ()</h3> <p> Returns the bag iterator</p> <h3 id=\"offsetset\" class=\"method-signature\">final public <strong>offsetSet</strong> (<em>mixed</em> $property, <em>mixed</em> $value)</h3> <p>...</p> <h3 id=\"offsetexists\" class=\"method-signature\">final public <strong>offsetExists</strong> (<em>mixed</em> $property)</h3> <p>...</p> <h3 id=\"offsetunset\" class=\"method-signature\">final public <strong>offsetUnset</strong> (<em>mixed</em> $property)</h3> <p>...</p> <h3 id=\"offsetget\" class=\"method-signature\">final public <strong>offsetGet</strong> (<em>mixed</em> $property)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Bag.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Bag.html</a>\n  </p>\n</div>\n","api/phalcon_session_exception":"<h1 id=\"class-phalcon-session-exception\">Class <strong>Phalcon\\Session\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/session/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_tag_exception":"<h1 id=\"class-phalcon-tag-exception\">Class <strong>Phalcon\\Tag\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/tag/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Tag_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Tag_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_security":"<h1 id=\"class-phalcon-security\">Class <strong>Phalcon\\Security</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/security.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This component provides a set of functions to improve the security in Phalcon applications</p> <pre class=\"highlight-php\" data-language=\"php\">$login = $this-&gt;request-&gt;getPost('login');\n$password = $this-&gt;request-&gt;getPost('password');\n\n$user = Users::findFirstByLogin($login);\nif ($user) {\n    if ($this-&gt;security-&gt;checkHash($password, $user-&gt;password)) {\n            //The password is valid\n    }\n}\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"crypt_default\" class=\"method-signature\">\n<em>integer</em> <strong>CRYPT_DEFAULT</strong>\n</h3> <h3 id=\"crypt_std_des\" class=\"method-signature\">\n<em>integer</em> <strong>CRYPT_STD_DES</strong>\n</h3> <h3 id=\"crypt_ext_des\" class=\"method-signature\">\n<em>integer</em> <strong>CRYPT_EXT_DES</strong>\n</h3> <h3 id=\"crypt_md5\" class=\"method-signature\">\n<em>integer</em> <strong>CRYPT_MD5</strong>\n</h3> <h3 id=\"crypt_blowfish\" class=\"method-signature\">\n<em>integer</em> <strong>CRYPT_BLOWFISH</strong>\n</h3> <h3 id=\"crypt_blowfish_a\" class=\"method-signature\">\n<em>integer</em> <strong>CRYPT_BLOWFISH_A</strong>\n</h3> <h3 id=\"crypt_blowfish_x\" class=\"method-signature\">\n<em>integer</em> <strong>CRYPT_BLOWFISH_X</strong>\n</h3> <h3 id=\"crypt_blowfish_y\" class=\"method-signature\">\n<em>integer</em> <strong>CRYPT_BLOWFISH_Y</strong>\n</h3> <h3 id=\"crypt_sha256\" class=\"method-signature\">\n<em>integer</em> <strong>CRYPT_SHA256</strong>\n</h3> <h3 id=\"crypt_sha512\" class=\"method-signature\">\n<em>integer</em> <strong>CRYPT_SHA512</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"setworkfactor\" class=\"method-signature\">public <strong>setWorkFactor</strong> (<em>mixed</em> $workFactor)</h3> <p>...</p> <h3 id=\"getworkfactor\" class=\"method-signature\">public <strong>getWorkFactor</strong> ()</h3> <p>...</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ()</h3> <p>Phalcon\\Security constructor</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> ()</h3> <p>Returns the internal dependency injector</p> <h3 id=\"setrandombytes\" class=\"method-signature\">public <strong>setRandomBytes</strong> (<em>mixed</em> $randomBytes)</h3> <p>Sets a number of bytes to be generated by the openssl pseudo random generator</p> <h3 id=\"getrandombytes\" class=\"method-signature\">public <strong>getRandomBytes</strong> ()</h3> <p>Returns a number of bytes to be generated by the openssl pseudo random generator</p> <h3 id=\"getrandom\" class=\"method-signature\">public <strong>getRandom</strong> ()</h3> <p>Returns a secure random number generator instance</p> <h3 id=\"getsaltbytes\" class=\"method-signature\">public <strong>getSaltBytes</strong> ([<em>mixed</em> $numberBytes])</h3> <p>Generate a &gt;22-length pseudo random string to be used as salt for passwords</p> <h3 id=\"hash\" class=\"method-signature\">public <strong>hash</strong> (<em>mixed</em> $password, [<em>mixed</em> $workFactor])</h3> <p>Creates a password hash using bcrypt with a pseudo random salt</p> <h3 id=\"checkhash\" class=\"method-signature\">public <strong>checkHash</strong> (<em>mixed</em> $password, <em>mixed</em> $passwordHash, [<em>mixed</em> $maxPassLength])</h3> <p>Checks a plain text password and its hash version to check if the password matches</p> <h3 id=\"islegacyhash\" class=\"method-signature\">public <strong>isLegacyHash</strong> (<em>mixed</em> $passwordHash)</h3> <p>Checks if a password hash is a valid bcrypt’s hash</p> <h3 id=\"gettokenkey\" class=\"method-signature\">public <strong>getTokenKey</strong> ()</h3> <p>Generates a pseudo random token key to be used as input’s name in a CSRF check</p> <h3 id=\"gettoken\" class=\"method-signature\">public <strong>getToken</strong> ()</h3> <p>Generates a pseudo random token value to be used as input’s value in a CSRF check</p> <h3 id=\"checktoken\" class=\"method-signature\">public <strong>checkToken</strong> ([<em>mixed</em> $tokenKey], [<em>mixed</em> $tokenValue], [<em>mixed</em> $destroyIfValid])</h3> <p>Check if the CSRF token sent in the request is the same that the current in session</p> <h3 id=\"getsessiontoken\" class=\"method-signature\">public <strong>getSessionToken</strong> ()</h3> <p>Returns the value of the CSRF token in session</p> <h3 id=\"destroytoken\" class=\"method-signature\">public <strong>destroyToken</strong> ()</h3> <p>Removes the value of the CSRF token and key from session</p> <h3 id=\"computehmac\" class=\"method-signature\">public <strong>computeHmac</strong> (<em>mixed</em> $data, <em>mixed</em> $key, <em>mixed</em> $algo, [<em>mixed</em> $raw])</h3> <p>Computes a HMAC</p> <h3 id=\"setdefaulthash\" class=\"method-signature\">public <strong>setDefaultHash</strong> (<em>mixed</em> $defaultHash)</h3> <p>Sets the default hash</p> <h3 id=\"getdefaulthash\" class=\"method-signature\">public <strong>getDefaultHash</strong> ()</h3> <p>Returns the default hash</p> <h3 id=\"haslibressl\" class=\"method-signature\">public <strong>hasLibreSsl</strong> ()</h3> <p>Testing for LibreSSL</p> <h3 id=\"getsslversionnumber\" class=\"method-signature\">public <strong>getSslVersionNumber</strong> ()</h3> <p>Getting OpenSSL or LibreSSL version Parse OPENSSL_VERSION_TEXT because OPENSSL_VERSION_NUMBER is no use for LibreSSL.</p> <pre class=\"highlight-php\" data-language=\"php\">if ($security-&gt;getSslVersionNumber() &gt;= 20105) {\n     // ...\n }\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Security.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Security.html</a>\n  </p>\n</div>\n","api/phalcon_session_adapter_libmemcached":"<h1 id=\"class-phalcon-session-adapter-libmemcached\">Class <strong>Phalcon\\Session\\Adapter\\Libmemcached</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_session_adapter\"><em>Phalcon\\Session\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_session_adapterinterface\"><em>Phalcon\\Session\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/session/adapter/libmemcached.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This adapter store sessions in libmemcached</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Session\\Adapter\\Libmemcached;\n\n $session = new Libmemcached([\n     'servers' =&gt; [\n         ['host' =&gt; 'localhost', 'port' =&gt; 11211, 'weight' =&gt; 1],\n     ],\n     'client' =&gt; [\n         \\Memcached::OPT_HASH       =&gt; \\Memcached::HASH_MD5,\n         \\Memcached::OPT_PREFIX_KEY =&gt; 'prefix.',\n     ],\n     'lifetime' =&gt; 3600,\n     'prefix'   =&gt; 'my_'\n ]);\n\n $session-&gt;start();\n\n $session-&gt;set('var', 'some-value');\n\n echo $session-&gt;get('var');\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"session_active\" class=\"method-signature\">\n<em>integer</em> <strong>SESSION_ACTIVE</strong>\n</h3> <h3 id=\"session_none\" class=\"method-signature\">\n<em>integer</em> <strong>SESSION_NONE</strong>\n</h3> <h3 id=\"session_disabled\" class=\"method-signature\">\n<em>integer</em> <strong>SESSION_DISABLED</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"getlibmemcached\" class=\"method-signature\">public <strong>getLibmemcached</strong> ()</h3> <p>...</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <strong>getLifetime</strong> ()</h3> <p>...</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $options)</h3> <p>Phalcon\\Session\\Adapter\\Libmemcached constructor</p> <h3 id=\"open\" class=\"method-signature\">public <strong>open</strong> ()</h3> <p>...</p> <h3 id=\"close\" class=\"method-signature\">public <strong>close</strong> ()</h3> <p>...</p> <h3 id=\"read\" class=\"method-signature\">public <strong>read</strong> (<em>mixed</em> $sessionId)</h3> <h3 id=\"write\" class=\"method-signature\">public <strong>write</strong> (<em>mixed</em> $sessionId, <em>mixed</em> $data)</h3> <h3 id=\"destroy\" class=\"method-signature\">public <strong>destroy</strong> ([<em>mixed</em> $sessionId])</h3> <h3 id=\"gc\" class=\"method-signature\">public <strong>gc</strong> ()</h3> <h3 id=\"start\" class=\"method-signature\">public <strong>start</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Starts the session (if headers are already sent the session will not be started)</p> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Sets session’s options</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;setOptions(['uniqueId' =&gt; 'my-private-app']);\n</pre> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Get internal options</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Set session name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Get session name</p> <h3 id=\"regenerateid\" class=\"method-signature\">public <strong>regenerateId</strong> ([<em>mixed</em> $deleteOldSession]) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $index, [<em>mixed</em> $defaultValue], [<em>mixed</em> $remove]) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Gets a session variable from an application context</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;get('auth', 'yes');\n</pre> <h3 id=\"set\" class=\"method-signature\">public <strong>set</strong> (<em>mixed</em> $index, <em>mixed</em> $value) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Sets a session variable in an application context</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;set('auth', 'yes');\n</pre> <h3 id=\"has\" class=\"method-signature\">public <strong>has</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Check whether a session variable is set in an application context</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($session-&gt;has('auth'));\n</pre> <h3 id=\"remove\" class=\"method-signature\">public <strong>remove</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Removes a session variable from an application context</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;remove('auth');\n</pre> <h3 id=\"getid\" class=\"method-signature\">public <strong>getId</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Returns active session id</p> <pre class=\"highlight-php\" data-language=\"php\">echo $session-&gt;getId();\n</pre> <h3 id=\"setid\" class=\"method-signature\">public <strong>setId</strong> (<em>mixed</em> $id) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Set the current session id</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;setId($id);\n</pre> <h3 id=\"isstarted\" class=\"method-signature\">public <strong>isStarted</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Check whether the session has been started</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($session-&gt;isStarted());\n</pre> <h3 id=\"status\" class=\"method-signature\">public <strong>status</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Returns the status of the current session.</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($session-&gt;status());\n\n  if ($session-&gt;status() !== $session::SESSION_ACTIVE) {\n      $session-&gt;start();\n  }\n</pre> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Alias: Gets a session variable from an application context</p> <h3 id=\"__set\" class=\"method-signature\">public <strong>__set</strong> (<em>mixed</em> $index, <em>mixed</em> $value) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Alias: Sets a session variable in an application context</p> <h3 id=\"__isset\" class=\"method-signature\">public <strong>__isset</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Alias: Check whether a session variable is set in an application context</p> <h3 id=\"__unset\" class=\"method-signature\">public <strong>__unset</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Alias: Removes a session variable from an application context</p> <h3 id=\"__destruct\" class=\"method-signature\">public <strong>__destruct</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Libmemcached.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Libmemcached.html</a>\n  </p>\n</div>\n","api/phalcon_session_adapter_redis":"<h1 id=\"class-phalcon-session-adapter-redis\">Class <strong>Phalcon\\Session\\Adapter\\Redis</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_session_adapter\"><em>Phalcon\\Session\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_session_adapterinterface\"><em>Phalcon\\Session\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/session/adapter/redis.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This adapter store sessions in Redis</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Session\\Adapter\\Redis;\n\n $session = new Redis([\n     'uniqueId'   =&gt; 'my-private-app',\n     'host'       =&gt; 'localhost',\n     'port'       =&gt; 6379,\n     'auth'       =&gt; 'foobared',\n     'persistent' =&gt; false,\n     'lifetime'   =&gt; 3600,\n     'prefix'     =&gt; 'my_'\n     'index'      =&gt; 1,\n ]);\n\n $session-&gt;start();\n\n $session-&gt;set('var', 'some-value');\n\n echo $session-&gt;get('var');\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"session_active\" class=\"method-signature\">\n<em>integer</em> <strong>SESSION_ACTIVE</strong>\n</h3> <h3 id=\"session_none\" class=\"method-signature\">\n<em>integer</em> <strong>SESSION_NONE</strong>\n</h3> <h3 id=\"session_disabled\" class=\"method-signature\">\n<em>integer</em> <strong>SESSION_DISABLED</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"getredis\" class=\"method-signature\">public <strong>getRedis</strong> ()</h3> <p>...</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <strong>getLifetime</strong> ()</h3> <p>...</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <p>Phalcon\\Session\\Adapter\\Redis constructor</p> <h3 id=\"open\" class=\"method-signature\">public <strong>open</strong> ()</h3> <h3 id=\"close\" class=\"method-signature\">public <strong>close</strong> ()</h3> <h3 id=\"read\" class=\"method-signature\">public <strong>read</strong> (<em>mixed</em> $sessionId)</h3> <h3 id=\"write\" class=\"method-signature\">public <strong>write</strong> (<em>mixed</em> $sessionId, <em>mixed</em> $data)</h3> <h3 id=\"destroy\" class=\"method-signature\">public <strong>destroy</strong> ([<em>mixed</em> $sessionId])</h3> <h3 id=\"gc\" class=\"method-signature\">public <strong>gc</strong> ()</h3> <h3 id=\"start\" class=\"method-signature\">public <strong>start</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Starts the session (if headers are already sent the session will not be started)</p> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Sets session’s options</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;setOptions(['uniqueId' =&gt; 'my-private-app']);\n</pre> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Get internal options</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Set session name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Get session name</p> <h3 id=\"regenerateid\" class=\"method-signature\">public <strong>regenerateId</strong> ([<em>mixed</em> $deleteOldSession]) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $index, [<em>mixed</em> $defaultValue], [<em>mixed</em> $remove]) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Gets a session variable from an application context</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;get('auth', 'yes');\n</pre> <h3 id=\"set\" class=\"method-signature\">public <strong>set</strong> (<em>mixed</em> $index, <em>mixed</em> $value) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Sets a session variable in an application context</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;set('auth', 'yes');\n</pre> <h3 id=\"has\" class=\"method-signature\">public <strong>has</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Check whether a session variable is set in an application context</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($session-&gt;has('auth'));\n</pre> <h3 id=\"remove\" class=\"method-signature\">public <strong>remove</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Removes a session variable from an application context</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;remove('auth');\n</pre> <h3 id=\"getid\" class=\"method-signature\">public <strong>getId</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Returns active session id</p> <pre class=\"highlight-php\" data-language=\"php\">echo $session-&gt;getId();\n</pre> <h3 id=\"setid\" class=\"method-signature\">public <strong>setId</strong> (<em>mixed</em> $id) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Set the current session id</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;setId($id);\n</pre> <h3 id=\"isstarted\" class=\"method-signature\">public <strong>isStarted</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Check whether the session has been started</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($session-&gt;isStarted());\n</pre> <h3 id=\"status\" class=\"method-signature\">public <strong>status</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Returns the status of the current session.</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($session-&gt;status());\n\n  if ($session-&gt;status() !== $session::SESSION_ACTIVE) {\n      $session-&gt;start();\n  }\n</pre> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Alias: Gets a session variable from an application context</p> <h3 id=\"__set\" class=\"method-signature\">public <strong>__set</strong> (<em>mixed</em> $index, <em>mixed</em> $value) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Alias: Sets a session variable in an application context</p> <h3 id=\"__isset\" class=\"method-signature\">public <strong>__isset</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Alias: Check whether a session variable is set in an application context</p> <h3 id=\"__unset\" class=\"method-signature\">public <strong>__unset</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Alias: Removes a session variable from an application context</p> <h3 id=\"__destruct\" class=\"method-signature\">public <strong>__destruct</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Redis.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Redis.html</a>\n  </p>\n</div>\n","api/phalcon_translate":"<h1 id=\"abstract-class-phalcon-translate\">Abstract class <strong>Phalcon\\Translate</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/translate.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Translate.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Translate.html</a>\n  </p>\n</div>\n","api/phalcon_session_adapter":"<h1 id=\"abstract-class-phalcon-session-adapter\">Abstract class <strong>Phalcon\\Session\\Adapter</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_session_adapterinterface\"><em>Phalcon\\Session\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/session/adapter.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Base class for Phalcon\\Session adapters</p>  <h2 id=\"constants\">Constants</h2> <h3 id=\"session_active\" class=\"method-signature\">\n<em>integer</em> <strong>SESSION_ACTIVE</strong>\n</h3> <h3 id=\"session_none\" class=\"method-signature\">\n<em>integer</em> <strong>SESSION_NONE</strong>\n</h3> <h3 id=\"session_disabled\" class=\"method-signature\">\n<em>integer</em> <strong>SESSION_DISABLED</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <p>Phalcon\\Session\\Adapter constructor</p> <h3 id=\"start\" class=\"method-signature\">public <strong>start</strong> ()</h3> <p>Starts the session (if headers are already sent the session will not be started)</p> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>array</em> $options)</h3> <p>Sets session’s options</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;setOptions(['uniqueId' =&gt; 'my-private-app']);\n</pre> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> ()</h3> <p>Get internal options</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name)</h3> <p>Set session name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> ()</h3> <p>Get session name</p> <h3 id=\"regenerateid\" class=\"method-signature\">public <strong>regenerateId</strong> ([<em>mixed</em> $deleteOldSession])</h3> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $index, [<em>mixed</em> $defaultValue], [<em>mixed</em> $remove])</h3> <p>Gets a session variable from an application context</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;get('auth', 'yes');\n</pre> <h3 id=\"set\" class=\"method-signature\">public <strong>set</strong> (<em>mixed</em> $index, <em>mixed</em> $value)</h3> <p>Sets a session variable in an application context</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;set('auth', 'yes');\n</pre> <h3 id=\"has\" class=\"method-signature\">public <strong>has</strong> (<em>mixed</em> $index)</h3> <p>Check whether a session variable is set in an application context</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($session-&gt;has('auth'));\n</pre> <h3 id=\"remove\" class=\"method-signature\">public <strong>remove</strong> (<em>mixed</em> $index)</h3> <p>Removes a session variable from an application context</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;remove('auth');\n</pre> <h3 id=\"getid\" class=\"method-signature\">public <strong>getId</strong> ()</h3> <p>Returns active session id</p> <pre class=\"highlight-php\" data-language=\"php\">echo $session-&gt;getId();\n</pre> <h3 id=\"setid\" class=\"method-signature\">public <strong>setId</strong> (<em>mixed</em> $id)</h3> <p>Set the current session id</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;setId($id);\n</pre> <h3 id=\"isstarted\" class=\"method-signature\">public <strong>isStarted</strong> ()</h3> <p>Check whether the session has been started</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($session-&gt;isStarted());\n</pre> <h3 id=\"destroy\" class=\"method-signature\">public <strong>destroy</strong> ([<em>mixed</em> $removeData])</h3> <p>Destroys the active session</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($session-&gt;destroy());\nvar_dump($session-&gt;destroy(true));\n</pre> <h3 id=\"status\" class=\"method-signature\">public <strong>status</strong> ()</h3> <p>Returns the status of the current session.</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($session-&gt;status());\n\n  if ($session-&gt;status() !== $session::SESSION_ACTIVE) {\n      $session-&gt;start();\n  }\n</pre> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $index)</h3> <p>Alias: Gets a session variable from an application context</p> <h3 id=\"__set\" class=\"method-signature\">public <strong>__set</strong> (<em>mixed</em> $index, <em>mixed</em> $value)</h3> <p>Alias: Sets a session variable in an application context</p> <h3 id=\"__isset\" class=\"method-signature\">public <strong>__isset</strong> (<em>mixed</em> $index)</h3> <p>Alias: Check whether a session variable is set in an application context</p> <h3 id=\"__unset\" class=\"method-signature\">public <strong>__unset</strong> (<em>mixed</em> $index)</h3> <p>Alias: Removes a session variable from an application context</p> <h3 id=\"__destruct\" class=\"method-signature\">public <strong>__destruct</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter.html</a>\n  </p>\n</div>\n","api/phalcon_session_adapter_files":"<h1 id=\"class-phalcon-session-adapter-files\">Class <strong>Phalcon\\Session\\Adapter\\Files</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_session_adapter\"><em>Phalcon\\Session\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_session_adapterinterface\"><em>Phalcon\\Session\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/session/adapter/files.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"constants\">Constants</h2> <h3 id=\"session_active\" class=\"method-signature\">\n<em>integer</em> <strong>SESSION_ACTIVE</strong>\n</h3> <h3 id=\"session_none\" class=\"method-signature\">\n<em>integer</em> <strong>SESSION_NONE</strong>\n</h3> <h3 id=\"session_disabled\" class=\"method-signature\">\n<em>integer</em> <strong>SESSION_DISABLED</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Phalcon\\Session\\Adapter constructor</p> <h3 id=\"start\" class=\"method-signature\">public <strong>start</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Starts the session (if headers are already sent the session will not be started)</p> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Sets session’s options</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;setOptions(['uniqueId' =&gt; 'my-private-app']);\n</pre> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Get internal options</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Set session name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Get session name</p> <h3 id=\"regenerateid\" class=\"method-signature\">public <strong>regenerateId</strong> ([<em>mixed</em> $deleteOldSession]) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $index, [<em>mixed</em> $defaultValue], [<em>mixed</em> $remove]) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Gets a session variable from an application context</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;get('auth', 'yes');\n</pre> <h3 id=\"set\" class=\"method-signature\">public <strong>set</strong> (<em>mixed</em> $index, <em>mixed</em> $value) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Sets a session variable in an application context</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;set('auth', 'yes');\n</pre> <h3 id=\"has\" class=\"method-signature\">public <strong>has</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Check whether a session variable is set in an application context</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($session-&gt;has('auth'));\n</pre> <h3 id=\"remove\" class=\"method-signature\">public <strong>remove</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Removes a session variable from an application context</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;remove('auth');\n</pre> <h3 id=\"getid\" class=\"method-signature\">public <strong>getId</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Returns active session id</p> <pre class=\"highlight-php\" data-language=\"php\">echo $session-&gt;getId();\n</pre> <h3 id=\"setid\" class=\"method-signature\">public <strong>setId</strong> (<em>mixed</em> $id) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Set the current session id</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;setId($id);\n</pre> <h3 id=\"isstarted\" class=\"method-signature\">public <strong>isStarted</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Check whether the session has been started</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($session-&gt;isStarted());\n</pre> <h3 id=\"destroy\" class=\"method-signature\">public <strong>destroy</strong> ([<em>mixed</em> $removeData]) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Destroys the active session</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($session-&gt;destroy());\nvar_dump($session-&gt;destroy(true));\n</pre> <h3 id=\"status\" class=\"method-signature\">public <strong>status</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Returns the status of the current session.</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($session-&gt;status());\n\n  if ($session-&gt;status() !== $session::SESSION_ACTIVE) {\n      $session-&gt;start();\n  }\n</pre> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Alias: Gets a session variable from an application context</p> <h3 id=\"__set\" class=\"method-signature\">public <strong>__set</strong> (<em>mixed</em> $index, <em>mixed</em> $value) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Alias: Sets a session variable in an application context</p> <h3 id=\"__isset\" class=\"method-signature\">public <strong>__isset</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Alias: Check whether a session variable is set in an application context</p> <h3 id=\"__unset\" class=\"method-signature\">public <strong>__unset</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Alias: Removes a session variable from an application context</p> <h3 id=\"__destruct\" class=\"method-signature\">public <strong>__destruct</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Files.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Files.html</a>\n  </p>\n</div>\n","api/phalcon_session_adapter_memcache":"<h1 id=\"class-phalcon-session-adapter-memcache\">Class <strong>Phalcon\\Session\\Adapter\\Memcache</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_session_adapter\"><em>Phalcon\\Session\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_session_adapterinterface\"><em>Phalcon\\Session\\AdapterInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/session/adapter/memcache.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This adapter store sessions in memcache</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Session\\Adapter\\Memcache;\n\n $session = new Memcache([\n     'uniqueId'   =&gt; 'my-private-app',\n     'host'       =&gt; '127.0.0.1',\n     'port'       =&gt; 11211,\n     'persistent' =&gt; true,\n     'lifetime'   =&gt; 3600,\n     'prefix'     =&gt; 'my_'\n ]);\n\n $session-&gt;start();\n\n $session-&gt;set('var', 'some-value');\n\n echo $session-&gt;get('var');\n</pre>  <h2 id=\"constants\">Constants</h2> <h3 id=\"session_active\" class=\"method-signature\">\n<em>integer</em> <strong>SESSION_ACTIVE</strong>\n</h3> <h3 id=\"session_none\" class=\"method-signature\">\n<em>integer</em> <strong>SESSION_NONE</strong>\n</h3> <h3 id=\"session_disabled\" class=\"method-signature\">\n<em>integer</em> <strong>SESSION_DISABLED</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"getmemcache\" class=\"method-signature\">public <strong>getMemcache</strong> ()</h3> <p>...</p> <h3 id=\"getlifetime\" class=\"method-signature\">public <strong>getLifetime</strong> ()</h3> <p>...</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <p>Phalcon\\Session\\Adapter\\Memcache constructor</p> <h3 id=\"open\" class=\"method-signature\">public <strong>open</strong> ()</h3> <p>...</p> <h3 id=\"close\" class=\"method-signature\">public <strong>close</strong> ()</h3> <p>...</p> <h3 id=\"read\" class=\"method-signature\">public <strong>read</strong> (<em>mixed</em> $sessionId)</h3> <h3 id=\"write\" class=\"method-signature\">public <strong>write</strong> (<em>mixed</em> $sessionId, <em>mixed</em> $data)</h3> <h3 id=\"destroy\" class=\"method-signature\">public <strong>destroy</strong> ([<em>mixed</em> $sessionId])</h3> <h3 id=\"gc\" class=\"method-signature\">public <strong>gc</strong> ()</h3> <h3 id=\"start\" class=\"method-signature\">public <strong>start</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Starts the session (if headers are already sent the session will not be started)</p> <h3 id=\"setoptions\" class=\"method-signature\">public <strong>setOptions</strong> (<em>array</em> $options) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Sets session’s options</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;setOptions(['uniqueId' =&gt; 'my-private-app']);\n</pre> <h3 id=\"getoptions\" class=\"method-signature\">public <strong>getOptions</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Get internal options</p> <h3 id=\"setname\" class=\"method-signature\">public <strong>setName</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Set session name</p> <h3 id=\"getname\" class=\"method-signature\">public <strong>getName</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Get session name</p> <h3 id=\"regenerateid\" class=\"method-signature\">public <strong>regenerateId</strong> ([<em>mixed</em> $deleteOldSession]) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <h3 id=\"get\" class=\"method-signature\">public <strong>get</strong> (<em>mixed</em> $index, [<em>mixed</em> $defaultValue], [<em>mixed</em> $remove]) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Gets a session variable from an application context</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;get('auth', 'yes');\n</pre> <h3 id=\"set\" class=\"method-signature\">public <strong>set</strong> (<em>mixed</em> $index, <em>mixed</em> $value) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Sets a session variable in an application context</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;set('auth', 'yes');\n</pre> <h3 id=\"has\" class=\"method-signature\">public <strong>has</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Check whether a session variable is set in an application context</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($session-&gt;has('auth'));\n</pre> <h3 id=\"remove\" class=\"method-signature\">public <strong>remove</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Removes a session variable from an application context</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;remove('auth');\n</pre> <h3 id=\"getid\" class=\"method-signature\">public <strong>getId</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Returns active session id</p> <pre class=\"highlight-php\" data-language=\"php\">echo $session-&gt;getId();\n</pre> <h3 id=\"setid\" class=\"method-signature\">public <strong>setId</strong> (<em>mixed</em> $id) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Set the current session id</p> <pre class=\"highlight-php\" data-language=\"php\">$session-&gt;setId($id);\n</pre> <h3 id=\"isstarted\" class=\"method-signature\">public <strong>isStarted</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Check whether the session has been started</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($session-&gt;isStarted());\n</pre> <h3 id=\"status\" class=\"method-signature\">public <strong>status</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Returns the status of the current session.</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump($session-&gt;status());\n\n  if ($session-&gt;status() !== $session::SESSION_ACTIVE) {\n      $session-&gt;start();\n  }\n</pre> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Alias: Gets a session variable from an application context</p> <h3 id=\"__set\" class=\"method-signature\">public <strong>__set</strong> (<em>mixed</em> $index, <em>mixed</em> $value) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Alias: Sets a session variable in an application context</p> <h3 id=\"__isset\" class=\"method-signature\">public <strong>__isset</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Alias: Check whether a session variable is set in an application context</p> <h3 id=\"__unset\" class=\"method-signature\">public <strong>__unset</strong> (<em>mixed</em> $index) <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>Alias: Removes a session variable from an application context</p> <h3 id=\"__destruct\" class=\"method-signature\">public <strong>__destruct</strong> () <small>inherited from Phalcon\\Session\\Adapter</small>\n</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Memcache.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Session_Adapter_Memcache.html</a>\n  </p>\n</div>\n","api/phalcon_translate_interpolator_associativearray":"<h1 id=\"class-phalcon-translate-interpolator-associativearray\">Class <strong>Phalcon\\Translate\\Interpolator\\AssociativeArray</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_translate_interpolatorinterface\"><em>Phalcon\\Translate\\InterpolatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/interpolator/associativearray.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"replaceplaceholders\" class=\"method-signature\">public <strong>replacePlaceholders</strong> (<em>mixed</em> $translation, [<em>mixed</em> $placeholders])</h3> <p>Replaces placeholders by the values passed</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Interpolator_AssociativeArray.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Interpolator_AssociativeArray.html</a>\n  </p>\n</div>\n","api/phalcon_security_random":"<h1 id=\"class-phalcon-security-random\">Class <strong>Phalcon\\Security\\Random</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/security/random.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Secure random number generator class. Provides secure random number generator which is suitable for generating session key in HTTP cookies, etc. It supports following secure random number generators: - random_bytes (PHP 7) - libsodium - openssl, libressl - /dev/urandom <cite>Phalcon\\Security\\Random</cite> could be mainly useful for: - Key generation (e.g. generation of complicated keys) - Generating random passwords for new user accounts - Encryption systems</p> <pre class=\"highlight-php\" data-language=\"php\">$random = new \\Phalcon\\Security\\Random();\n\n    // Random binary string\n    $bytes = $random-&gt;bytes();\n\n    // Random hex string\n    echo $random-&gt;hex(10); // a29f470508d5ccb8e289\n    echo $random-&gt;hex(10); // 533c2f08d5eee750e64a\n    echo $random-&gt;hex(11); // f362ef96cb9ffef150c9cd\n    echo $random-&gt;hex(12); // 95469d667475125208be45c4\n    echo $random-&gt;hex(13); // 05475e8af4a34f8f743ab48761\n\n    // Random base64 string\n    echo $random-&gt;base64(12); // XfIN81jGGuKkcE1E\n    echo $random-&gt;base64(12); // 3rcq39QzGK9fUqh8\n    echo $random-&gt;base64();   // DRcfbngL/iOo9hGGvy1TcQ==\n    echo $random-&gt;base64(16); // SvdhPcIHDZFad838Bb0Swg==\n\n    // Random URL-safe base64 string\n    echo $random-&gt;base64Safe();           // PcV6jGbJ6vfVw7hfKIFDGA\n    echo $random-&gt;base64Safe();           // GD8JojhzSTrqX7Q8J6uug\n    echo $random-&gt;base64Safe(8);          // mGyy0evy3ok\n    echo $random-&gt;base64Safe(null, true); // DRrAgOFkS4rvRiVHFefcQ==\n\n    // Random UUID\n    echo $random-&gt;uuid(); // db082997-2572-4e2c-a046-5eefe97b1235\n    echo $random-&gt;uuid(); // da2aa0e2-b4d0-4e3c-99f5-f5ef62c57fe2\n    echo $random-&gt;uuid(); // 75e6b628-c562-4117-bb76-61c4153455a9\n    echo $random-&gt;uuid(); // dc446df1-0848-4d05-b501-4af3c220c13d\n\n    // Random number between 0 and $len\n    echo $random-&gt;number(256); // 84\n    echo $random-&gt;number(256); // 79\n    echo $random-&gt;number(100); // 29\n    echo $random-&gt;number(300); // 40\n\n    // Random base58 string\n    echo $random-&gt;base58();   // 4kUgL2pdQMSCQtjE\n    echo $random-&gt;base58();   // Umjxqf7ZPwh765yR\n    echo $random-&gt;base58(24); // qoXcgmw4A9dys26HaNEdCRj9\n    echo $random-&gt;base58(7);  // 774SJD3vgP\n\nThis class partially borrows SecureRandom library from Ruby\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"bytes\" class=\"method-signature\">public <strong>bytes</strong> ([<em>mixed</em> $len])</h3> <p>Generates a random binary string The <cite>Random::bytes</cite> method returns a string and accepts as input an int representing the length in bytes to be returned. If $len is not specified, 16 is assumed. It may be larger in future. The result may contain any byte: “x00” - “xFF”.</p> <pre class=\"highlight-php\" data-language=\"php\">$random = new \\Phalcon\\Security\\Random();\n\n  $bytes = $random-&gt;bytes();\n  var_dump(bin2hex($bytes));\n  // possible output: string(32) \"00f6c04b144b41fad6a59111c126e1ee\"\n</pre> <h3 id=\"hex\" class=\"method-signature\">public <strong>hex</strong> ([<em>mixed</em> $len])</h3> <p>Generates a random hex string If $len is not specified, 16 is assumed. It may be larger in future. The length of the result string is usually greater of $len.</p> <pre class=\"highlight-php\" data-language=\"php\">$random = new \\Phalcon\\Security\\Random();\n\n  echo $random-&gt;hex(10); // a29f470508d5ccb8e289\n</pre> <h3 id=\"base58\" class=\"method-signature\">public <strong>base58</strong> ([<em>mixed</em> $n])</h3> <p>Generates a random base58 string If $len is not specified, 16 is assumed. It may be larger in future. The result may contain alphanumeric characters except 0, O, I and l. It is similar to Base64 but has been modified to avoid both non-alphanumeric characters and letters which might look ambiguous when printed.</p> <pre class=\"highlight-php\" data-language=\"php\">$random = new \\Phalcon\\Security\\Random();\n\n  echo $random-&gt;base58(); // 4kUgL2pdQMSCQtjE\n</pre> <h3 id=\"base64\" class=\"method-signature\">public <strong>base64</strong> ([<em>mixed</em> $len])</h3> <p>Generates a random base64 string If $len is not specified, 16 is assumed. It may be larger in future. The length of the result string is usually greater of $len. Size formula: 4 <a href=\"#id1\"><span class=\"problematic\" id=\"id2\">*</span></a>( $len / 3) and this need to be rounded up to a multiple of 4.</p> <pre class=\"highlight-php\" data-language=\"php\">$random = new \\Phalcon\\Security\\Random();\n\n  echo $random-&gt;base64(12); // 3rcq39QzGK9fUqh8\n</pre> <h3 id=\"base64safe\" class=\"method-signature\">public <strong>base64Safe</strong> ([<em>mixed</em> $len], [<em>mixed</em> $padding])</h3> <p>Generates a random URL-safe base64 string If $len is not specified, 16 is assumed. It may be larger in future. The length of the result string is usually greater of $len. By default, padding is not generated because “=” may be used as a URL delimiter. The result may contain A-Z, a-z, 0-9, “-” and “_”. “=” is also used if $padding is true. See RFC 3548 for the definition of URL-safe base64.</p> <pre class=\"highlight-php\" data-language=\"php\">$random = new \\Phalcon\\Security\\Random();\n\n  echo $random-&gt;base64Safe(); // GD8JojhzSTrqX7Q8J6uug\n</pre> <h3 id=\"uuid\" class=\"method-signature\">public <strong>uuid</strong> ()</h3> <p>Generates a v4 random UUID (Universally Unique IDentifier) The version 4 UUID is purely random (except the version). It doesn’t contain meaningful information such as MAC address, time, etc. See RFC 4122 for details of UUID. This algorithm sets the version number (4 bits) as well as two reserved bits. All other bits (the remaining 122 bits) are set using a random or pseudorandom data source. Version 4 UUIDs have the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx where x is any hexadecimal digit and y is one of 8, 9, A, or B (e.g., f47ac10b-58cc-4372-a567-0e02b2c3d479).</p> <pre class=\"highlight-php\" data-language=\"php\">$random = new \\Phalcon\\Security\\Random();\n\n  echo $random-&gt;uuid(); // 1378c906-64bb-4f81-a8d6-4ae1bfcdec22\n</pre> <h3 id=\"number\" class=\"method-signature\">public <strong>number</strong> (<em>mixed</em> $len)</h3> <p>Generates a random number between 0 and $len Returns an integer: 0 &lt;= result &lt;= $len.</p> <pre class=\"highlight-php\" data-language=\"php\">$random = new \\Phalcon\\Security\\Random();\n\n  echo $random-&gt;number(16); // 8\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Security_Random.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Security_Random.html</a>\n  </p>\n</div>\n","api/phalcon_tag_select":"<h1 id=\"abstract-class-phalcon-tag-select\">Abstract class <strong>Phalcon\\Tag\\Select</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/tag/select.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Generates a SELECT html tag using a static array of values or a Phalcon\\Mvc\\Model resultset</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"selectfield\" class=\"method-signature\">public static <strong>selectField</strong> (<em>array</em> $parameters, [<em>array</em> $data])</h3> <p>Generates a SELECT tag</p> <h3 id=\"_optionsfromresultset\" class=\"method-signature\">private static <strong>_optionsFromResultset</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_resultset\"><em>Phalcon\\Mvc\\Model\\Resultset</em></a> $resultset, <em>array</em> $using, <em>mixed</em> $value, <em>string</em> $closeOption)</h3> <p>Generate the OPTION tags based on a resultset</p> <h3 id=\"_optionsfromarray\" class=\"method-signature\">private static <strong>_optionsFromArray</strong> (<em>array</em> $data, <em>mixed</em> $value, <em>string</em> $closeOption)</h3> <p>Generate the OPTION tags based on an array</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Tag_Select.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Tag_Select.html</a>\n  </p>\n</div>\n","api/phalcon_translate_adapter":"<h1 id=\"abstract-class-phalcon-translate-adapter\">Abstract class <strong>Phalcon\\Translate\\Adapter</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/adapter.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Base class for Phalcon\\Translate adapters</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $options)</h3> <p>...</p> <h3 id=\"setinterpolator\" class=\"method-signature\">public <strong>setInterpolator</strong> (<a class=\"reference internal\" href=\"phalcon_translate_interpolatorinterface\"><em>Phalcon\\Translate\\InterpolatorInterface</em></a> $interpolator)</h3> <p>...</p> <h3 id=\"t\" class=\"method-signature\">public <em>string</em> <strong>t</strong> (<em>string</em> $translateKey, [<em>array</em> $placeholders])</h3> <p>Returns the translation string of the given key</p> <h3 id=\"_\" class=\"method-signature\">public <em>string</em> <strong>_</strong> (<em>string</em> $translateKey, [<em>array</em> $placeholders])</h3> <p>Returns the translation string of the given key (alias of method ‘t’)</p> <h3 id=\"offsetset\" class=\"method-signature\">public <strong>offsetSet</strong> (<em>string</em> $offset, <em>string</em> $value)</h3> <p>Sets a translation value</p> <h3 id=\"offsetexists\" class=\"method-signature\">public <strong>offsetExists</strong> (<em>mixed</em> $translateKey)</h3> <p>Check whether a translation key exists</p> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>string</em> $offset)</h3> <p>Unsets a translation from the dictionary</p> <h3 id=\"offsetget\" class=\"method-signature\">public <em>string</em> <strong>offsetGet</strong> (<em>string</em> $translateKey)</h3> <p>Returns the translation related to the given key</p> <h3 id=\"replaceplaceholders\" class=\"method-signature\">protected <strong>replacePlaceholders</strong> (<em>mixed</em> $translation, [<em>mixed</em> $placeholders])</h3> <p>Replaces placeholders by the values passed</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter.html</a>\n  </p>\n</div>\n","api/phalcon_translate_adapter_nativearray":"<h1 id=\"class-phalcon-translate-adapter-nativearray\">Class <strong>Phalcon\\Translate\\Adapter\\NativeArray</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_translate_adapter\"><em>Phalcon\\Translate\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_translate_adapterinterface\"><em>Phalcon\\Translate\\AdapterInterface</em></a>, ArrayAccess</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/adapter/nativearray.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to define translation lists using PHP arrays</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $options)</h3> <p>Phalcon\\Translate\\Adapter\\NativeArray constructor</p> <h3 id=\"query\" class=\"method-signature\">public <strong>query</strong> (<em>mixed</em> $index, [<em>mixed</em> $placeholders])</h3> <p>Returns the translation related to the given key</p> <h3 id=\"exists\" class=\"method-signature\">public <strong>exists</strong> (<em>mixed</em> $index)</h3> <p>Check whether is defined a translation key in the internal array</p> <h3 id=\"setinterpolator\" class=\"method-signature\">public <strong>setInterpolator</strong> (<a class=\"reference internal\" href=\"phalcon_translate_interpolatorinterface\"><em>Phalcon\\Translate\\InterpolatorInterface</em></a> $interpolator) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>...</p> <h3 id=\"t\" class=\"method-signature\">public <em>string</em> <strong>t</strong> (<em>string</em> $translateKey, [<em>array</em> $placeholders]) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Returns the translation string of the given key</p> <h3 id=\"_\" class=\"method-signature\">public <em>string</em> <strong>_</strong> (<em>string</em> $translateKey, [<em>array</em> $placeholders]) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Returns the translation string of the given key (alias of method ‘t’)</p> <h3 id=\"offsetset\" class=\"method-signature\">public <strong>offsetSet</strong> (<em>string</em> $offset, <em>string</em> $value) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Sets a translation value</p> <h3 id=\"offsetexists\" class=\"method-signature\">public <strong>offsetExists</strong> (<em>mixed</em> $translateKey) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Check whether a translation key exists</p> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>string</em> $offset) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Unsets a translation from the dictionary</p> <h3 id=\"offsetget\" class=\"method-signature\">public <em>string</em> <strong>offsetGet</strong> (<em>string</em> $translateKey) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Returns the translation related to the given key</p> <h3 id=\"replaceplaceholders\" class=\"method-signature\">protected <strong>replacePlaceholders</strong> (<em>mixed</em> $translation, [<em>mixed</em> $placeholders]) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Replaces placeholders by the values passed</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_NativeArray.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_NativeArray.html</a>\n  </p>\n</div>\n","api/phalcon_translate_adapter_csv":"<h1 id=\"class-phalcon-translate-adapter-csv\">Class <strong>Phalcon\\Translate\\Adapter\\Csv</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_translate_adapter\"><em>Phalcon\\Translate\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_translate_adapterinterface\"><em>Phalcon\\Translate\\AdapterInterface</em></a>, ArrayAccess</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/adapter/csv.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to define translation lists using CSV file</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $options)</h3> <p>Phalcon\\Translate\\Adapter\\Csv constructor</p> <h3 id=\"_load\" class=\"method-signature\">private <strong>_load</strong> (<em>string</em> $file, <em>int</em> $length, <em>string</em> $delimiter, <em>string</em> $enclosure)</h3> <p>Load translates from file</p> <h3 id=\"query\" class=\"method-signature\">public <strong>query</strong> (<em>mixed</em> $index, [<em>mixed</em> $placeholders])</h3> <p>Returns the translation related to the given key</p> <h3 id=\"exists\" class=\"method-signature\">public <strong>exists</strong> (<em>mixed</em> $index)</h3> <p>Check whether is defined a translation key in the internal array</p> <h3 id=\"setinterpolator\" class=\"method-signature\">public <strong>setInterpolator</strong> (<a class=\"reference internal\" href=\"phalcon_translate_interpolatorinterface\"><em>Phalcon\\Translate\\InterpolatorInterface</em></a> $interpolator) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>...</p> <h3 id=\"t\" class=\"method-signature\">public <em>string</em> <strong>t</strong> (<em>string</em> $translateKey, [<em>array</em> $placeholders]) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Returns the translation string of the given key</p> <h3 id=\"_\" class=\"method-signature\">public <em>string</em> <strong>_</strong> (<em>string</em> $translateKey, [<em>array</em> $placeholders]) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Returns the translation string of the given key (alias of method ‘t’)</p> <h3 id=\"offsetset\" class=\"method-signature\">public <strong>offsetSet</strong> (<em>string</em> $offset, <em>string</em> $value) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Sets a translation value</p> <h3 id=\"offsetexists\" class=\"method-signature\">public <strong>offsetExists</strong> (<em>mixed</em> $translateKey) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Check whether a translation key exists</p> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>string</em> $offset) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Unsets a translation from the dictionary</p> <h3 id=\"offsetget\" class=\"method-signature\">public <em>string</em> <strong>offsetGet</strong> (<em>string</em> $translateKey) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Returns the translation related to the given key</p> <h3 id=\"replaceplaceholders\" class=\"method-signature\">protected <strong>replacePlaceholders</strong> (<em>mixed</em> $translation, [<em>mixed</em> $placeholders]) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Replaces placeholders by the values passed</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_Csv.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_Csv.html</a>\n  </p>\n</div>\n","api/phalcon_translate_exception":"<h1 id=\"class-phalcon-translate-exception\">Class <strong>Phalcon\\Translate\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_translate_interpolator_indexedarray":"<h1 id=\"class-phalcon-translate-interpolator-indexedarray\">Class <strong>Phalcon\\Translate\\Interpolator\\IndexedArray</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_translate_interpolatorinterface\"><em>Phalcon\\Translate\\InterpolatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/interpolator/indexedarray.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"replaceplaceholders\" class=\"method-signature\">public <strong>replacePlaceholders</strong> (<em>mixed</em> $translation, [<em>mixed</em> $placeholders])</h3> <p>Replaces placeholders by the values passed</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Interpolator_IndexedArray.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Interpolator_IndexedArray.html</a>\n  </p>\n</div>\n","api/phalcon_validation_combinedfieldsvalidator":"<h1 id=\"abstract-class-phalcon-validation-combinedfieldsvalidator\">Abstract class <strong>Phalcon\\Validation\\CombinedFieldsValidator</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/combinedfieldsvalidator.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p> <h3 id=\"validate\" class=\"method-signature\">abstract public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $attribute) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Executes the validation</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_CombinedFieldsValidator.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_CombinedFieldsValidator.html</a>\n  </p>\n</div>\n","api/phalcon_validation_exception":"<h1 id=\"class-phalcon-validation-exception\">Class <strong>Phalcon\\Validation\\Exception</strong>\n</h1> <p><em>extends</em> class <a class=\"reference internal\" href=\"phalcon_exception\"><em>Phalcon\\Exception</em></a></p> <p><em>implements</em> Throwable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/exception.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__clone\" class=\"method-signature\">final private <em>Exception</em> <strong>__clone</strong> () <small>inherited from Exception</small>\n</h3> <p>Clone the exception</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>string</em> $message], [<em>int</em> $code], [<em>Exception</em> $previous]) <small>inherited from Exception</small>\n</h3> <p>Exception constructor</p> <h3 id=\"__wakeup\" class=\"method-signature\">public <strong>__wakeup</strong> () <small>inherited from Exception</small>\n</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">final public <em>string</em> <strong>getMessage</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception message</p> <h3 id=\"getcode\" class=\"method-signature\">final public <em>int</em> <strong>getCode</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the Exception code</p> <h3 id=\"getfile\" class=\"method-signature\">final public <em>string</em> <strong>getFile</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the file in which the exception occurred</p> <h3 id=\"getline\" class=\"method-signature\">final public <em>int</em> <strong>getLine</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the line in which the exception occurred</p> <h3 id=\"gettrace\" class=\"method-signature\">final public <em>array</em> <strong>getTrace</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace</p> <h3 id=\"getprevious\" class=\"method-signature\">final public <em>Exception</em> <strong>getPrevious</strong> () <small>inherited from Exception</small>\n</h3> <p>Returns previous Exception</p> <h3 id=\"gettraceasstring\" class=\"method-signature\">final public <em>Exception</em> <strong>getTraceAsString</strong> () <small>inherited from Exception</small>\n</h3> <p>Gets the stack trace as a string</p> <h3 id=\"__tostring\" class=\"method-signature\">public <em>string</em> <strong>__toString</strong> () <small>inherited from Exception</small>\n</h3> <p>String representation of the exception</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Exception.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Exception.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator":"<h1 id=\"abstract-class-phalcon-validation-validator\">Abstract class <strong>Phalcon\\Validation\\Validator</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This is a base class for validators</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options])</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key)</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key)</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue])</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value)</h3> <p>Sets an option in the validator</p> <h3 id=\"validate\" class=\"method-signature\">abstract public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $attribute)</h3> <p>Executes the validation</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator.html</a>\n  </p>\n</div>\n","api/phalcon_translate_adapter_gettext":"<h1 id=\"class-phalcon-translate-adapter-gettext\">Class <strong>Phalcon\\Translate\\Adapter\\Gettext</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_translate_adapter\"><em>Phalcon\\Translate\\Adapter</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_translate_adapterinterface\"><em>Phalcon\\Translate\\AdapterInterface</em></a>, ArrayAccess</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/adapter/gettext.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows translate using gettext</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getdirectory\" class=\"method-signature\">public <strong>getDirectory</strong> ()</h3> <h3 id=\"getdefaultdomain\" class=\"method-signature\">public <strong>getDefaultDomain</strong> ()</h3> <h3 id=\"getlocale\" class=\"method-signature\">public <strong>getLocale</strong> ()</h3> <h3 id=\"getcategory\" class=\"method-signature\">public <strong>getCategory</strong> ()</h3> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>array</em> $options)</h3> <p>Phalcon\\Translate\\Adapter\\Gettext constructor</p> <h3 id=\"query\" class=\"method-signature\">public <em>string</em> <strong>query</strong> (<em>string</em> $index, [<em>array</em> $placeholders])</h3> <p>Returns the translation related to the given key</p> <h3 id=\"exists\" class=\"method-signature\">public <strong>exists</strong> (<em>mixed</em> $index)</h3> <p>Check whether is defined a translation key in the internal array</p> <h3 id=\"nquery\" class=\"method-signature\">public <strong>nquery</strong> (<em>mixed</em> $msgid1, <em>mixed</em> $msgid2, <em>mixed</em> $count, [<em>mixed</em> $placeholders], [<em>mixed</em> $domain])</h3> <p>The plural version of gettext(). Some languages have more than one form for plural messages dependent on the count.</p> <h3 id=\"setdomain\" class=\"method-signature\">public <strong>setDomain</strong> (<em>mixed</em> $domain)</h3> <p>Changes the current domain (i.e. the translation file)</p> <h3 id=\"resetdomain\" class=\"method-signature\">public <strong>resetDomain</strong> ()</h3> <p>Sets the default domain</p> <h3 id=\"setdefaultdomain\" class=\"method-signature\">public <strong>setDefaultDomain</strong> (<em>mixed</em> $domain)</h3> <p>Sets the domain default to search within when calls are made to gettext()</p> <h3 id=\"setdirectory\" class=\"method-signature\">public <strong>setDirectory</strong> (<em>mixed</em> $directory)</h3> <p>Sets the path for a domain</p> <pre class=\"highlight-php\" data-language=\"php\">// Set the directory path\n $gettext-&gt;setDirectory('/path/to/the/messages');\n\n // Set the domains and directories path\n $gettext-&gt;setDirectory([\n    'messages' =&gt; '/path/to/the/messages',\n    'another'  =&gt; '/path/to/the/another'\n ]);\n</pre> <h3 id=\"setlocale\" class=\"method-signature\">public <strong>setLocale</strong> (<em>mixed</em> $category, <em>mixed</em> $locale)</h3> <p>Sets locale information</p> <pre class=\"highlight-php\" data-language=\"php\">// Set locale to Dutch\n $gettext-&gt;setLocale(LC_ALL, 'nl_NL');\n\n // Try different possible locale names for german\n $gettext-&gt;setLocale(LC_ALL, '[email protected]', 'de_DE', 'de', 'ge');\n</pre> <h3 id=\"prepareoptions\" class=\"method-signature\">protected <strong>prepareOptions</strong> (<em>array</em> $options)</h3> <p>Validator for constructor</p> <h3 id=\"getoptionsdefault\" class=\"method-signature\">private <strong>getOptionsDefault</strong> ()</h3> <p>Gets default options</p> <h3 id=\"setinterpolator\" class=\"method-signature\">public <strong>setInterpolator</strong> (<a class=\"reference internal\" href=\"phalcon_translate_interpolatorinterface\"><em>Phalcon\\Translate\\InterpolatorInterface</em></a> $interpolator) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>...</p> <h3 id=\"t\" class=\"method-signature\">public <em>string</em> <strong>t</strong> (<em>string</em> $translateKey, [<em>array</em> $placeholders]) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Returns the translation string of the given key</p> <h3 id=\"_\" class=\"method-signature\">public <em>string</em> <strong>_</strong> (<em>string</em> $translateKey, [<em>array</em> $placeholders]) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Returns the translation string of the given key (alias of method ‘t’)</p> <h3 id=\"offsetset\" class=\"method-signature\">public <strong>offsetSet</strong> (<em>string</em> $offset, <em>string</em> $value) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Sets a translation value</p> <h3 id=\"offsetexists\" class=\"method-signature\">public <strong>offsetExists</strong> (<em>mixed</em> $translateKey) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Check whether a translation key exists</p> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>string</em> $offset) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Unsets a translation from the dictionary</p> <h3 id=\"offsetget\" class=\"method-signature\">public <em>string</em> <strong>offsetGet</strong> (<em>string</em> $translateKey) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Returns the translation related to the given key</p> <h3 id=\"replaceplaceholders\" class=\"method-signature\">protected <strong>replacePlaceholders</strong> (<em>mixed</em> $translation, [<em>mixed</em> $placeholders]) <small>inherited from Phalcon\\Translate\\Adapter</small>\n</h3> <p>Replaces placeholders by the values passed</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_Gettext.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_Adapter_Gettext.html</a>\n  </p>\n</div>\n","api/phalcon_validation":"<h1 id=\"class-phalcon-validation\">Class <strong>Phalcon\\Validation</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_di_injectable\"><em>Phalcon\\Di\\Injectable</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_events_eventsawareinterface\"><em>Phalcon\\Events\\EventsAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_di_injectionawareinterface\"><em>Phalcon\\Di\\InjectionAwareInterface</em></a>, <a class=\"reference internal\" href=\"phalcon_validationinterface\"><em>Phalcon\\ValidationInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows to validate data using custom or built-in validators</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setvalidators\" class=\"method-signature\">public <strong>setValidators</strong> (<em>mixed</em> $validators)</h3> <p>...</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $validators])</h3> <p>Phalcon\\Validation constructor</p> <h3 id=\"validate\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_validation_message_group\"><em>Phalcon\\Validation\\Message\\Group</em></a> <strong>validate</strong> ([<em>array|object</em> $data], [<em>object</em> $entity])</h3> <p>Validate a set of data according to a set of rules</p> <h3 id=\"add\" class=\"method-signature\">public <strong>add</strong> (<em>mixed</em> $field, <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator)</h3> <p>Adds a validator to a field</p> <h3 id=\"rule\" class=\"method-signature\">public <strong>rule</strong> (<em>mixed</em> $field, <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator)</h3> <p>Alias of <cite>add</cite> method</p> <h3 id=\"rules\" class=\"method-signature\">public <strong>rules</strong> (<em>mixed</em> $field, <em>array</em> $validators)</h3> <p>Adds the validators to a field</p> <h3 id=\"setfilters\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> <strong>setFilters</strong> (<em>string</em> $field, <em>array|string</em> $filters)</h3> <p>Adds filters to the field</p> <h3 id=\"getfilters\" class=\"method-signature\">public <em>mixed</em> <strong>getFilters</strong> ([<em>string</em> $field])</h3> <p>Returns all the filters or a specific one</p> <h3 id=\"getvalidators\" class=\"method-signature\">public <strong>getValidators</strong> ()</h3> <p>Returns the validators added to the validation</p> <h3 id=\"setentity\" class=\"method-signature\">public <strong>setEntity</strong> (<em>object</em> $entity)</h3> <p>Sets the bound entity</p> <h3 id=\"getentity\" class=\"method-signature\">public <em>object</em> <strong>getEntity</strong> ()</h3> <p>Returns the bound entity</p> <h3 id=\"setdefaultmessages\" class=\"method-signature\">public <strong>setDefaultMessages</strong> ([<em>array</em> $messages])</h3> <p>Adds default messages to validators</p> <h3 id=\"getdefaultmessage\" class=\"method-signature\">public <strong>getDefaultMessage</strong> (<em>mixed</em> $type)</h3> <p>Get default message for validator type</p> <h3 id=\"getmessages\" class=\"method-signature\">public <strong>getMessages</strong> ()</h3> <p>Returns the registered validators</p> <h3 id=\"setlabels\" class=\"method-signature\">public <strong>setLabels</strong> (<em>array</em> $labels)</h3> <p>Adds labels for fields</p> <h3 id=\"getlabel\" class=\"method-signature\">public <em>string</em> <strong>getLabel</strong> (<em>string</em> $field)</h3> <p>Get label for field</p> <h3 id=\"appendmessage\" class=\"method-signature\">public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a> $message)</h3> <p>Appends a message to the messages list</p> <h3 id=\"bind\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> <strong>bind</strong> (<em>object</em> $entity, <em>array|object</em> $data)</h3> <p>Assigns the data to an entity The entity is used to obtain the validation values</p> <h3 id=\"getvalue\" class=\"method-signature\">public <em>mixed</em> <strong>getValue</strong> (<em>string</em> $field)</h3> <p>Gets the a value to validate in the array/object data source</p> <h3 id=\"prechecking\" class=\"method-signature\">protected <strong>preChecking</strong> (<em>mixed</em> $field, <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator)</h3> <p>Internal validations, if it returns true, then skip the current validator</p> <h3 id=\"setdi\" class=\"method-signature\">public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the dependency injector</p> <h3 id=\"getdi\" class=\"method-signature\">public <strong>getDI</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal dependency injector</p> <h3 id=\"seteventsmanager\" class=\"method-signature\">public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Sets the event manager</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">public <strong>getEventsManager</strong> () <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Returns the internal event manager</p> <h3 id=\"__get\" class=\"method-signature\">public <strong>__get</strong> (<em>mixed</em> $propertyName) <small>inherited from Phalcon\\Di\\Injectable</small>\n</h3> <p>Magic method __get</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation.html</a>\n  </p>\n</div>\n","api/phalcon_validation_message_group":"<h1 id=\"class-phalcon-validation-message-group\">Class <strong>Phalcon\\Validation\\Message\\Group</strong>\n</h1> <p><em>implements</em> Countable, ArrayAccess, Iterator, Traversable</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/message/group.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Represents a group of validation messages</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $messages])</h3> <p>Phalcon\\Validation\\Message\\Group constructor</p> <h3 id=\"offsetget\" class=\"method-signature\">public <a class=\"reference internal\" href=\"phalcon_validation_message\"><em>Phalcon\\Validation\\Message</em></a> <strong>offsetGet</strong> (<em>int</em> $index)</h3> <p>Gets an attribute a message using the array syntax</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($messages[0]);\n</pre> <h3 id=\"offsetset\" class=\"method-signature\">public <strong>offsetSet</strong> (<em>int</em> $index, <a class=\"reference internal\" href=\"phalcon_validation_message\"><em>Phalcon\\Validation\\Message</em></a> $message)</h3> <p>Sets an attribute using the array-syntax</p> <pre class=\"highlight-php\" data-language=\"php\">$messages[0] = new \\Phalcon\\Validation\\Message('This is a message');\n</pre> <h3 id=\"offsetexists\" class=\"method-signature\">public <em>boolean</em> <strong>offsetExists</strong> (<em>int</em> $index)</h3> <p>Checks if an index exists</p> <pre class=\"highlight-php\" data-language=\"php\">var_dump(isset($message['database']));\n</pre> <h3 id=\"offsetunset\" class=\"method-signature\">public <strong>offsetUnset</strong> (<em>string</em> $index)</h3> <p>Removes a message from the list</p> <pre class=\"highlight-php\" data-language=\"php\">unset($message['database']);\n</pre> <h3 id=\"appendmessage\" class=\"method-signature\">public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a> $message)</h3> <p>Appends a message to the group</p> <pre class=\"highlight-php\" data-language=\"php\">$messages-&gt;appendMessage(new \\Phalcon\\Validation\\Message('This is a message'));\n</pre> <h3 id=\"appendmessages\" class=\"method-signature\">public <strong>appendMessages</strong> (<em>\\Phalcon\\Validation\\MessageInterface[]</em> $messages)</h3> <p>Appends an array of messages to the group</p> <pre class=\"highlight-php\" data-language=\"php\">$messages-&gt;appendMessages($messagesArray);\n</pre> <h3 id=\"filter\" class=\"method-signature\">public <em>array</em> <strong>filter</strong> (<em>string</em> $fieldName)</h3> <p>Filters the message group by field name</p> <h3 id=\"count\" class=\"method-signature\">public <strong>count</strong> ()</h3> <p>Returns the number of messages in the list</p> <h3 id=\"rewind\" class=\"method-signature\">public <strong>rewind</strong> ()</h3> <p>Rewinds the internal iterator</p> <h3 id=\"current\" class=\"method-signature\">public <strong>current</strong> ()</h3> <p>Returns the current message in the iterator</p> <h3 id=\"key\" class=\"method-signature\">public <strong>key</strong> ()</h3> <p>Returns the current position/key in the iterator</p> <h3 id=\"next\" class=\"method-signature\">public <strong>next</strong> ()</h3> <p>Moves the internal iteration pointer to the next position</p> <h3 id=\"valid\" class=\"method-signature\">public <strong>valid</strong> ()</h3> <p>Check if the current message in the iterator is valid</p> <h3 id=\"__set_state\" class=\"method-signature\">public static <a class=\"reference internal\" href=\"phalcon_validation_message_group\"><em>Phalcon\\Validation\\Message\\Group</em></a> <strong>__set_state</strong> (<em>array</em> $group)</h3> <p>Magic __set_state helps to re-build messages variable when exporting</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Message_Group.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Message_Group.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_alnum":"<h1 id=\"class-phalcon-validation-validator-alnum\">Class <strong>Phalcon\\Validation\\Validator\\Alnum</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/alnum.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Check for alphanumeric character(s)</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\Alnum as AlnumValidator;\n\n $validator-&gt;add('username', new AlnumValidator([\n     'message' =&gt; ':field must contain only alphanumeric characters'\n ]));\n\n $validator-&gt;add(['username', 'name'], new AlnumValidator([\n     'message' =&gt; [\n         'username' =&gt; 'username must contain only alphanumeric characters',\n         'name' =&gt; 'name must contain only alphanumeric characters'\n     ]\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Alnum.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Alnum.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_digit":"<h1 id=\"class-phalcon-validation-validator-digit\">Class <strong>Phalcon\\Validation\\Validator\\Digit</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/digit.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Check for numeric character(s)</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\Digit as DigitValidator;\n\n $validator-&gt;add('height', new DigitValidator([\n     'message' =&gt; ':field must be numeric'\n ]));\n\n $validator-&gt;add(['height', 'width'], new DigitValidator([\n     'message' =&gt; [\n         'height' =&gt; 'height must be numeric',\n         'width' =&gt; 'width must be numeric'\n     ]\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Digit.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Digit.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_between":"<h1 id=\"class-phalcon-validation-validator-between\">Class <strong>Phalcon\\Validation\\Validator\\Between</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/between.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Validates that a value is between an inclusive range of two values. For a value x, the test is passed if minimum&lt;=x&lt;=maximum.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\Between;\n\n $validator-&gt;add('price', new Between([\n     'minimum' =&gt; 0,\n     'maximum' =&gt; 100,\n     'message' =&gt; 'The price must be between 0 and 100'\n ]));\n\n $validator-&gt;add(['price', 'amount'], new Between([\n     'minimum' =&gt; [\n         'price' =&gt; 0,\n         'amount' =&gt; 0\n     ],\n     'maximum' =&gt; [\n         'price' =&gt; 100,\n         'amount' =&gt; 50\n     ],\n     'message' =&gt; [\n         'price' =&gt; 'The price must be between 0 and 100',\n         'amount' =&gt; 'The amount must be between 0 and 50'\n     ]\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Between.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Between.html</a>\n  </p>\n</div>\n","api/phalcon_text":"<h1 id=\"abstract-class-phalcon-text\">Abstract class <strong>Phalcon\\Text</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/text.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Provides utilities to work with texts</p>  <h2 id=\"constants\">Constants</h2> <h3 id=\"random_alnum\" class=\"method-signature\">\n<em>integer</em> <strong>RANDOM_ALNUM</strong>\n</h3> <h3 id=\"random_alpha\" class=\"method-signature\">\n<em>integer</em> <strong>RANDOM_ALPHA</strong>\n</h3> <h3 id=\"random_hexdec\" class=\"method-signature\">\n<em>integer</em> <strong>RANDOM_HEXDEC</strong>\n</h3> <h3 id=\"random_numeric\" class=\"method-signature\">\n<em>integer</em> <strong>RANDOM_NUMERIC</strong>\n</h3> <h3 id=\"random_nozero\" class=\"method-signature\">\n<em>integer</em> <strong>RANDOM_NOZERO</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"camelize\" class=\"method-signature\">public static <strong>camelize</strong> (<em>mixed</em> $str, [<em>mixed</em> $delimiter])</h3> <p>Converts strings to camelize style</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Text::camelize('coco_bongo'); // CocoBongo\n    echo Phalcon\\Text::camelize('co_co-bon_go', '-'); // Co_coBon_go\n    echo Phalcon\\Text::camelize('co_co-bon_go', '_-'); // CoCoBonGo\n</pre> <h3 id=\"uncamelize\" class=\"method-signature\">public static <strong>uncamelize</strong> (<em>mixed</em> $str, [<em>mixed</em> $delimiter])</h3> <p>Uncamelize strings which are camelized</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Text::uncamelize('CocoBongo'); // coco_bongo\n    echo Phalcon\\Text::uncamelize('CocoBongo', '-'); // coco-bongo\n</pre> <h3 id=\"increment\" class=\"method-signature\">public static <strong>increment</strong> (<em>mixed</em> $str, [<em>mixed</em> $separator])</h3> <p>Adds a number to a string or increment that number if it already is defined</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Text::increment(\"a\"); // \"a_1\"\n    echo Phalcon\\Text::increment(\"a_1\"); // \"a_2\"\n</pre> <h3 id=\"random\" class=\"method-signature\">public static <strong>random</strong> ([<em>mixed</em> $type], [<em>mixed</em> $length])</h3> <p>Generates a random string based on the given type. Type is one of the RANDOM_* constants</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Text::random(Phalcon\\Text::RANDOM_ALNUM); //\"aloiwkqz\"\n</pre> <h3 id=\"startswith\" class=\"method-signature\">public static <strong>startsWith</strong> (<em>mixed</em> $str, <em>mixed</em> $start, [<em>mixed</em> $ignoreCase])</h3> <p>Check if a string starts with a given string</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Text::startsWith(\"Hello\", \"He\"); // true\n    echo Phalcon\\Text::startsWith(\"Hello\", \"he\", false); // false\n    echo Phalcon\\Text::startsWith(\"Hello\", \"he\"); // true\n</pre> <h3 id=\"endswith\" class=\"method-signature\">public static <strong>endsWith</strong> (<em>mixed</em> $str, <em>mixed</em> $end, [<em>mixed</em> $ignoreCase])</h3> <p>Check if a string ends with a given string</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Text::endsWith(\"Hello\", \"llo\"); // true\n    echo Phalcon\\Text::endsWith(\"Hello\", \"LLO\", false); // false\n    echo Phalcon\\Text::endsWith(\"Hello\", \"LLO\"); // true\n</pre> <h3 id=\"lower\" class=\"method-signature\">public static <strong>lower</strong> (<em>mixed</em> $str, [<em>mixed</em> $encoding])</h3> <p>Lowercases a string, this function makes use of the mbstring extension if available</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Text::lower(\"HELLO\"); // hello\n</pre> <h3 id=\"upper\" class=\"method-signature\">public static <strong>upper</strong> (<em>mixed</em> $str, [<em>mixed</em> $encoding])</h3> <p>Uppercases a string, this function makes use of the mbstring extension if available</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Text::upper(\"hello\"); // HELLO\n</pre> <h3 id=\"reduceslashes\" class=\"method-signature\">public static <strong>reduceSlashes</strong> (<em>mixed</em> $str)</h3> <p>Reduces multiple slashes in a string to single slashes</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Text::reduceSlashes(\"foo//bar/baz\"); // foo/bar/baz\n    echo Phalcon\\Text::reduceSlashes(\"http://foo.bar///baz/buz\"); // http://foo.bar/baz/buz\n</pre> <h3 id=\"concat\" class=\"method-signature\">public static <strong>concat</strong> ()</h3> <p>Concatenates strings using the separator only once without duplication in places concatenation</p> <pre class=\"highlight-php\" data-language=\"php\">$str = Phalcon\\Text::concat(\"/\", \"/tmp/\", \"/folder_1/\", \"/folder_2\", \"folder_3/\");\n    echo $str; // /tmp/folder_1/folder_2/folder_3/\n</pre> <h3 id=\"dynamic\" class=\"method-signature\">public static <strong>dynamic</strong> (<em>mixed</em> $text, [<em>mixed</em> $leftDelimiter], [<em>mixed</em> $rightDelimiter], [<em>mixed</em> $separator])</h3> <p>Generates random text in accordance with the template</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Text::dynamic(\"{Hi|Hello}, my name is a {Bob|Mark|Jon}!\"); // Hi my name is a Bob\n    echo Phalcon\\Text::dynamic(\"{Hi|Hello}, my name is a {Bob|Mark|Jon}!\"); // Hi my name is a Jon\n    echo Phalcon\\Text::dynamic(\"{Hi|Hello}, my name is a {Bob|Mark|Jon}!\"); // Hello my name is a Bob\n    echo Phalcon\\Text::dynamic(\"[Hi/Hello], my name is a [Zyxep/Mark]!\", '[', ']', '/'); // Hello my name is a Zyxep\n</pre> <h3 id=\"underscore\" class=\"method-signature\">public static <strong>underscore</strong> (<em>mixed</em> $text)</h3> <p>Makes a phrase underscored instead of spaced</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Text::underscore('look behind'); // 'look_behind'\n   echo Phalcon\\Text::underscore('Awesome Phalcon'); // 'Awesome_Phalcon'\n</pre> <h3 id=\"humanize\" class=\"method-signature\">public static <strong>humanize</strong> (<em>mixed</em> $text)</h3> <p>Makes an underscored or dashed phrase human-readable</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Text::humanize('start-a-horse'); // 'start a horse'\n   echo Phalcon\\Text::humanize('five_cats'); // 'five cats'\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Text.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Text.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_date":"<h1 id=\"class-phalcon-validation-validator-date\">Class <strong>Phalcon\\Validation\\Validator\\Date</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/date.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Checks if a value is a valid date</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\Date as DateValidator;\n\n $validator-&gt;add('date', new DateValidator([\n     'format' =&gt; 'd-m-Y',\n     'message' =&gt; 'The date is invalid'\n ]));\n\n $validator-&gt;add(['date','anotherDate'], new DateValidator([\n     'format' =&gt; [\n         'date' =&gt; 'd-m-Y',\n         'anotherDate' =&gt; 'Y-m-d'\n     ],\n     'message' =&gt; [\n         'date' =&gt; 'The date is invalid',\n         'anotherDate' =&gt; 'The another date is invalid'\n     ]\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"checkdate\" class=\"method-signature\">private <strong>checkDate</strong> (<em>mixed</em> $value, <em>mixed</em> $format)</h3> <p>...</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Date.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Date.html</a>\n  </p>\n</div>\n","api/phalcon_validation_message":"<h1 id=\"class-phalcon-validation-message\">Class <strong>Phalcon\\Validation\\Message</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/message.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Encapsulates validation info generated in the validation process</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> (<em>mixed</em> $message, [<em>mixed</em> $field], [<em>mixed</em> $type], [<em>mixed</em> $code])</h3> <p>Phalcon\\Validation\\Message constructor</p> <h3 id=\"settype\" class=\"method-signature\">public <strong>setType</strong> (<em>mixed</em> $type)</h3> <p>Sets message type</p> <h3 id=\"gettype\" class=\"method-signature\">public <strong>getType</strong> ()</h3> <p>Returns message type</p> <h3 id=\"setmessage\" class=\"method-signature\">public <strong>setMessage</strong> (<em>mixed</em> $message)</h3> <p>Sets verbose message</p> <h3 id=\"getmessage\" class=\"method-signature\">public <strong>getMessage</strong> ()</h3> <p>Returns verbose message</p> <h3 id=\"setfield\" class=\"method-signature\">public <strong>setField</strong> (<em>mixed</em> $field)</h3> <p>Sets field name related to message</p> <h3 id=\"getfield\" class=\"method-signature\">public <em>mixed</em> <strong>getField</strong> ()</h3> <p>Returns field name related to message</p> <h3 id=\"setcode\" class=\"method-signature\">public <strong>setCode</strong> (<em>mixed</em> $code)</h3> <p>Sets code for the message</p> <h3 id=\"getcode\" class=\"method-signature\">public <strong>getCode</strong> ()</h3> <p>Returns the message code</p> <h3 id=\"__tostring\" class=\"method-signature\">public <strong>__toString</strong> ()</h3> <p>Magic __toString method returns verbose message</p> <h3 id=\"__set_state\" class=\"method-signature\">public static <strong>__set_state</strong> (<em>array</em> $message)</h3> <p>Magic __set_state helps to recover messsages from serialization</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Message.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Message.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_confirmation":"<h1 id=\"class-phalcon-validation-validator-confirmation\">Class <strong>Phalcon\\Validation\\Validator\\Confirmation</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/confirmation.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Checks that two values have the same value</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\Confirmation;\n\n $validator-&gt;add('password', new Confirmation([\n     'message' =&gt; 'Password doesn\\'t match confirmation',\n     'with' =&gt; 'confirmPassword'\n ]));\n\n $validator-&gt;add(['password', 'email'], new Confirmation([\n     'message' =&gt; [\n         'password' =&gt; 'Password doesn\\'t match confirmation',\n         'email' =&gt; 'Email  doesn\\'t match confirmation'\n     ],\n     'with' =&gt; [\n         'password =&gt; 'confirmPassword',\n         'email' =&gt; 'confirmEmail'\n     ]\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"compare\" class=\"method-signature\">final protected <strong>compare</strong> (<em>mixed</em> $a, <em>mixed</em> $b)</h3> <p>Compare strings</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Confirmation.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Confirmation.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_email":"<h1 id=\"class-phalcon-validation-validator-email\">Class <strong>Phalcon\\Validation\\Validator\\Email</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/email.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Checks if a value has a correct e-mail format</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\Email as EmailValidator;\n\n $validator-&gt;add('email', new EmailValidator([\n     'message' =&gt; 'The e-mail is not valid'\n ]));\n\n $validator-&gt;add(['email', 'anotherEmail'], new EmailValidator([\n     'message' =&gt; [\n         'email' =&gt; 'The e-mail is not valid',\n         'anotherEmail' =&gt; 'The another e-mail is not valid'\n     ]\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Email.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Email.html</a>\n  </p>\n</div>\n","api/phalcon_tag":"<h1 id=\"class-phalcon-tag\">Class <strong>Phalcon\\Tag</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/tag.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Phalcon\\Tag is designed to simplify building of HTML tags. It provides a set of helpers to generate HTML in a dynamic way. This component is an abstract class that you can extend to add more helpers.</p>  <h2 id=\"constants\">Constants</h2> <h3 id=\"html32\" class=\"method-signature\">\n<em>integer</em> <strong>HTML32</strong>\n</h3> <h3 id=\"html401_strict\" class=\"method-signature\">\n<em>integer</em> <strong>HTML401_STRICT</strong>\n</h3> <h3 id=\"html401_transitional\" class=\"method-signature\">\n<em>integer</em> <strong>HTML401_TRANSITIONAL</strong>\n</h3> <h3 id=\"html401_frameset\" class=\"method-signature\">\n<em>integer</em> <strong>HTML401_FRAMESET</strong>\n</h3> <h3 id=\"html5\" class=\"method-signature\">\n<em>integer</em> <strong>HTML5</strong>\n</h3> <h3 id=\"xhtml10_strict\" class=\"method-signature\">\n<em>integer</em> <strong>XHTML10_STRICT</strong>\n</h3> <h3 id=\"xhtml10_transitional\" class=\"method-signature\">\n<em>integer</em> <strong>XHTML10_TRANSITIONAL</strong>\n</h3> <h3 id=\"xhtml10_frameset\" class=\"method-signature\">\n<em>integer</em> <strong>XHTML10_FRAMESET</strong>\n</h3> <h3 id=\"xhtml11\" class=\"method-signature\">\n<em>integer</em> <strong>XHTML11</strong>\n</h3> <h3 id=\"xhtml20\" class=\"method-signature\">\n<em>integer</em> <strong>XHTML20</strong>\n</h3> <h3 id=\"xhtml5\" class=\"method-signature\">\n<em>integer</em> <strong>XHTML5</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"getescaper\" class=\"method-signature\">public static <em>EscaperInterface</em> <strong>getEscaper</strong> (<em>array</em> $params)</h3> <p>Obtains the ‘escaper’ service if required</p> <h3 id=\"renderattributes\" class=\"method-signature\">public static <strong>renderAttributes</strong> (<em>mixed</em> $code, <em>array</em> $attributes)</h3> <p>Renders parameters keeping order in their HTML attributes</p> <h3 id=\"setdi\" class=\"method-signature\">public static <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>Sets the dependency injector container.</p> <h3 id=\"getdi\" class=\"method-signature\">public static <strong>getDI</strong> ()</h3> <p>Internally gets the request dispatcher</p> <h3 id=\"geturlservice\" class=\"method-signature\">public static <strong>getUrlService</strong> ()</h3> <p>Returns a URL service from the default DI</p> <h3 id=\"getescaperservice\" class=\"method-signature\">public static <strong>getEscaperService</strong> ()</h3> <p>Returns an Escaper service from the default DI</p> <h3 id=\"setautoescape\" class=\"method-signature\">public static <strong>setAutoescape</strong> (<em>mixed</em> $autoescape)</h3> <p>Set autoescape mode in generated html</p> <h3 id=\"setdefault\" class=\"method-signature\">public static <strong>setDefault</strong> (<em>string</em> $id, <em>string</em> $value)</h3> <p>Assigns default values to generated tags by helpers</p> <pre class=\"highlight-php\" data-language=\"php\">// Assigning \"peter\" to \"name\" component\n Phalcon\\Tag::setDefault(\"name\", \"peter\");\n\n // Later in the view\n echo Phalcon\\Tag::textField(\"name\"); //Will have the value \"peter\" by default\n</pre> <h3 id=\"setdefaults\" class=\"method-signature\">public static <strong>setDefaults</strong> (<em>array</em> $values, [<em>mixed</em> $merge])</h3> <p>Assigns default values to generated tags by helpers</p> <pre class=\"highlight-php\" data-language=\"php\">// Assigning \"peter\" to \"name\" component\n Phalcon\\Tag::setDefaults(array(\"name\" =&gt; \"peter\"));\n\n // Later in the view\n echo Phalcon\\Tag::textField(\"name\"); //Will have the value \"peter\" by default\n</pre> <h3 id=\"displayto\" class=\"method-signature\">public static <strong>displayTo</strong> (<em>string</em> $id, <em>string</em> $value)</h3> <p>Alias of Phalcon\\Tag::setDefault</p> <h3 id=\"hasvalue\" class=\"method-signature\">public static <em>boolean</em> <strong>hasValue</strong> (<em>string</em> $name)</h3> <p>Check if a helper has a default value set using Phalcon\\Tag::setDefault or value from _POST</p> <h3 id=\"getvalue\" class=\"method-signature\">public static <em>mixed</em> <strong>getValue</strong> (<em>string</em> $name, [<em>array</em> $params])</h3> <p>Every helper calls this function to check whether a component has a predefined value using Phalcon\\Tag::setDefault or value from _POST</p> <h3 id=\"resetinput\" class=\"method-signature\">public static <strong>resetInput</strong> ()</h3> <p>Resets the request and internal values to avoid those fields will have any default value</p> <h3 id=\"linkto\" class=\"method-signature\">public static <em>string</em> <strong>linkTo</strong> (<em>array|string</em> $parameters, [<em>string</em> $text], [<em>boolean</em> $local])</h3> <p>Builds a HTML A tag using framework conventions</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::linkTo(\"signup/register\", \"Register Here!\");\n echo Phalcon\\Tag::linkTo(array(\"signup/register\", \"Register Here!\"));\n echo Phalcon\\Tag::linkTo(array(\"signup/register\", \"Register Here!\", \"class\" =&gt; \"btn-primary\"));\n echo Phalcon\\Tag::linkTo(\"http://phalconphp.com/\", \"Phalcon\", FALSE);\n echo Phalcon\\Tag::linkTo(array(\"http://phalconphp.com/\", \"Phalcon Home\", FALSE));\n echo Phalcon\\Tag::linkTo(array(\"http://phalconphp.com/\", \"Phalcon Home\", \"local\" =&gt;FALSE));\n</pre> <h3 id=\"_inputfield\" class=\"method-signature\">final protected static <em>string</em> <strong>_inputField</strong> (<em>string</em> $type, <em>array</em> $parameters, [<em>boolean</em> $asValue])</h3> <p>Builds generic INPUT tags</p> <h3 id=\"_inputfieldchecked\" class=\"method-signature\">final protected static <em>string</em> <strong>_inputFieldChecked</strong> (<em>string</em> $type, <em>array</em> $parameters)</h3> <p>Builds INPUT tags that implements the checked attribute</p> <h3 id=\"colorfield\" class=\"method-signature\">public static <em>string</em> <strong>colorField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”color”] tag</p> <h3 id=\"textfield\" class=\"method-signature\">public static <em>string</em> <strong>textField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”text”] tag</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::textField(array(\"name\", \"size\" =&gt; 30));\n</pre> <h3 id=\"numericfield\" class=\"method-signature\">public static <em>string</em> <strong>numericField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”number”] tag</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::numericField(array(\"price\", \"min\" =&gt; \"1\", \"max\" =&gt; \"5\"));\n</pre> <h3 id=\"rangefield\" class=\"method-signature\">public static <em>string</em> <strong>rangeField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”range”] tag</p> <h3 id=\"emailfield\" class=\"method-signature\">public static <em>string</em> <strong>emailField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”email”] tag</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::emailField(\"email\");\n</pre> <h3 id=\"datefield\" class=\"method-signature\">public static <em>string</em> <strong>dateField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”date”] tag</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::dateField(array(\"born\", \"value\" =&gt; \"14-12-1980\"))\n</pre> <h3 id=\"datetimefield\" class=\"method-signature\">public static <em>string</em> <strong>dateTimeField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”datetime”] tag</p> <h3 id=\"datetimelocalfield\" class=\"method-signature\">public static <em>string</em> <strong>dateTimeLocalField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”datetime-local”] tag</p> <h3 id=\"monthfield\" class=\"method-signature\">public static <em>string</em> <strong>monthField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”month”] tag</p> <h3 id=\"timefield\" class=\"method-signature\">public static <em>string</em> <strong>timeField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”time”] tag</p> <h3 id=\"weekfield\" class=\"method-signature\">public static <em>string</em> <strong>weekField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”week”] tag</p> <h3 id=\"passwordfield\" class=\"method-signature\">public static <em>string</em> <strong>passwordField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”password”] tag</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::passwordField(array(\"name\", \"size\" =&gt; 30));\n</pre> <h3 id=\"hiddenfield\" class=\"method-signature\">public static <em>string</em> <strong>hiddenField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”hidden”] tag</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::hiddenField(array(\"name\", \"value\" =&gt; \"mike\"));\n</pre> <h3 id=\"filefield\" class=\"method-signature\">public static <em>string</em> <strong>fileField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”file”] tag</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::fileField(\"file\");\n</pre> <h3 id=\"searchfield\" class=\"method-signature\">public static <em>string</em> <strong>searchField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”search”] tag</p> <h3 id=\"telfield\" class=\"method-signature\">public static <em>string</em> <strong>telField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”tel”] tag</p> <h3 id=\"urlfield\" class=\"method-signature\">public static <em>string</em> <strong>urlField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”url”] tag</p> <h3 id=\"checkfield\" class=\"method-signature\">public static <em>string</em> <strong>checkField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”check”] tag</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::checkField(array(\"terms\", \"value\" =&gt; \"Y\"));\n</pre> <p>Volt syntax:</p> <pre class=\"highlight-php\" data-language=\"php\">{{ check_field(\"terms\") }}\n</pre> <h3 id=\"radiofield\" class=\"method-signature\">public static <em>string</em> <strong>radioField</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”radio”] tag</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::radioField(array(\"weather\", \"value\" =&gt; \"hot\"))\n</pre> <p>Volt syntax:</p> <pre class=\"highlight-php\" data-language=\"php\">{{ radio_field(\"Save\") }}\n</pre> <h3 id=\"imageinput\" class=\"method-signature\">public static <em>string</em> <strong>imageInput</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”image”] tag</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::imageInput(array(\"src\" =&gt; \"/img/button.png\"));\n</pre> <p>Volt syntax:</p> <pre class=\"highlight-php\" data-language=\"php\">{{ image_input(\"src\": \"/img/button.png\") }}\n</pre> <h3 id=\"submitbutton\" class=\"method-signature\">public static <em>string</em> <strong>submitButton</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML input[type=”submit”] tag</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::submitButton(\"Save\")\n</pre> <p>Volt syntax:</p> <pre class=\"highlight-php\" data-language=\"php\">{{ submit_button(\"Save\") }}\n</pre> <h3 id=\"selectstatic\" class=\"method-signature\">public static <em>string</em> <strong>selectStatic</strong> (<em>array</em> $parameters, [<em>array</em> $data])</h3> <p>Builds a HTML SELECT tag using a PHP array for options</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::selectStatic(\"status\", array(\"A\" =&gt; \"Active\", \"I\" =&gt; \"Inactive\"))\n</pre> <h3 id=\"select\" class=\"method-signature\">public static <em>string</em> <strong>select</strong> (<em>array</em> $parameters, [<em>array</em> $data])</h3> <p>Builds a HTML SELECT tag using a Phalcon\\Mvc\\Model resultset as options</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::select([\n     \"robotId\",\n     Robots::find(\"type = \"mechanical\"\"),\n     \"using\" =&gt; [\"id\", \"name\"]\n ]);\n</pre> <p>Volt syntax:</p> <pre class=\"highlight-php\" data-language=\"php\">{{ select(\"robotId\", robots, \"using\": [\"id\", \"name\"]) }}\n</pre> <h3 id=\"textarea\" class=\"method-signature\">public static <em>string</em> <strong>textArea</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML TEXTAREA tag</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::textArea(array(\"comments\", \"cols\" =&gt; 10, \"rows\" =&gt; 4))\n</pre> <p>Volt syntax:</p> <pre class=\"highlight-php\" data-language=\"php\">{{ text_area(\"comments\", \"cols\": 10, \"rows\": 4) }}\n</pre> <h3 id=\"form\" class=\"method-signature\">public static <em>string</em> <strong>form</strong> (<em>array</em> $parameters)</h3> <p>Builds a HTML FORM tag</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::form(\"posts/save\");\n echo Phalcon\\Tag::form(array(\"posts/save\", \"method\" =&gt; \"post\"));\n</pre> <p>Volt syntax:</p> <pre class=\"highlight-php\" data-language=\"php\">{{ form(\"posts/save\") }}\n {{ form(\"posts/save\", \"method\": \"post\") }}\n</pre> <h3 id=\"endform\" class=\"method-signature\">public static <strong>endForm</strong> ()</h3> <p>Builds a HTML close FORM tag</p> <h3 id=\"settitle\" class=\"method-signature\">public static <strong>setTitle</strong> (<em>mixed</em> $title)</h3> <p>Set the title of view content</p> <pre class=\"highlight-php\" data-language=\"php\">Phalcon\\Tag::setTitle(\"Welcome to my Page\");\n</pre> <h3 id=\"settitleseparator\" class=\"method-signature\">public static <strong>setTitleSeparator</strong> (<em>mixed</em> $titleSeparator)</h3> <p>Set the title separator of view content</p> <pre class=\"highlight-php\" data-language=\"php\">Phalcon\\Tag::setTitleSeparator(\"-\");\n</pre> <h3 id=\"appendtitle\" class=\"method-signature\">public static <strong>appendTitle</strong> (<em>mixed</em> $title)</h3> <p>Appends a text to current document title</p> <h3 id=\"prependtitle\" class=\"method-signature\">public static <strong>prependTitle</strong> (<em>mixed</em> $title)</h3> <p>Prepends a text to current document title</p> <h3 id=\"gettitle\" class=\"method-signature\">public static <strong>getTitle</strong> ([<em>mixed</em> $tags])</h3> <p>Gets the current document title. The title will be automatically escaped.</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::getTitle();\n</pre> <pre class=\"highlight-php\" data-language=\"php\">{{ get_title() }}\n</pre> <h3 id=\"gettitleseparator\" class=\"method-signature\">public static <strong>getTitleSeparator</strong> ()</h3> <p>Gets the current document title separator</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::getTitleSeparator();\n</pre> <pre class=\"highlight-php\" data-language=\"php\">{{ get_title_separator() }}\n</pre> <h3 id=\"stylesheetlink\" class=\"method-signature\">public static <em>string</em> <strong>stylesheetLink</strong> ([<em>array</em> $parameters], [<em>boolean</em> $local])</h3> <p>Builds a LINK[rel=”stylesheet”] tag</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::stylesheetLink(\"http://fonts.googleapis.com/css?family=Rosario\", false);\n echo Phalcon\\Tag::stylesheetLink(\"css/style.css\");\n</pre> <p>Volt Syntax:</p> <pre class=\"highlight-php\" data-language=\"php\">{{ stylesheet_link(\"http://fonts.googleapis.com/css?family=Rosario\", false) }}\n {{ stylesheet_link(\"css/style.css\") }}\n</pre> <h3 id=\"javascriptinclude\" class=\"method-signature\">public static <em>string</em> <strong>javascriptInclude</strong> ([<em>array</em> $parameters], [<em>boolean</em> $local])</h3> <p>Builds a SCRIPT[type=”javascript”] tag</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::javascriptInclude(\"http://ajax.googleapis.com/ajax/libs/jquery/2.2.3/jquery.min.js\", false);\n echo Phalcon\\Tag::javascriptInclude(\"javascript/jquery.js\");\n</pre> <p>Volt syntax:</p> <pre class=\"highlight-php\" data-language=\"php\">{{ javascript_include(\"http://ajax.googleapis.com/ajax/libs/jquery/2.2.3/jquery.min.js\", false) }}\n {{ javascript_include(\"javascript/jquery.js\") }}\n</pre> <h3 id=\"image\" class=\"method-signature\">public static <em>string</em> <strong>image</strong> ([<em>array</em> $parameters], [<em>boolean</em> $local])</h3> <p>Builds HTML IMG tags</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::image(\"img/bg.png\");\n echo Phalcon\\Tag::image(array(\"img/photo.jpg\", \"alt\" =&gt; \"Some Photo\"));\n</pre> <p>Volt Syntax:</p> <pre class=\"highlight-php\" data-language=\"php\">{{ image(\"img/bg.png\") }}\n {{ image(\"img/photo.jpg\", \"alt\": \"Some Photo\") }}\n {{ image(\"http://static.mywebsite.com/img/bg.png\", false) }}\n</pre> <h3 id=\"friendlytitle\" class=\"method-signature\">public static <strong>friendlyTitle</strong> (<em>mixed</em> $text, [<em>mixed</em> $separator], [<em>mixed</em> $lowercase], [<em>mixed</em> $replace])</h3> <p>Converts texts into URL-friendly titles</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::friendlyTitle(\"These are big important news\", \"-\")\n</pre> <h3 id=\"setdoctype\" class=\"method-signature\">public static <strong>setDocType</strong> (<em>mixed</em> $doctype)</h3> <p>Set the document type of content</p> <h3 id=\"getdoctype\" class=\"method-signature\">public static <strong>getDocType</strong> ()</h3> <p>Get the document type declaration of content</p> <h3 id=\"taghtml\" class=\"method-signature\">public static <strong>tagHtml</strong> (<em>mixed</em> $tagName, [<em>mixed</em> $parameters], [<em>mixed</em> $selfClose], [<em>mixed</em> $onlyStart], [<em>mixed</em> $useEol])</h3> <p>Builds a HTML tag</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::tagHtml(name, parameters, selfClose, onlyStart, eol);\n</pre> <h3 id=\"taghtmlclose\" class=\"method-signature\">public static <strong>tagHtmlClose</strong> (<em>mixed</em> $tagName, [<em>mixed</em> $useEol])</h3> <p>Builds a HTML tag closing tag</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Tag::tagHtmlClose(\"script\", true)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Tag.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Tag.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_identical":"<h1 id=\"class-phalcon-validation-validator-identical\">Class <strong>Phalcon\\Validation\\Validator\\Identical</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/identical.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Checks if a value is identical to other</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\Identical;\n\n $validator-&gt;add('terms', new Identical([\n     'accepted' =&gt; 'yes',\n     'message' =&gt; 'Terms and conditions must be accepted'\n ]));\n\n $validator-&gt;add(['terms', 'anotherTerms'], new Identical([\n     'accepted' =&gt; [\n         'terms' =&gt; 'yes',\n         'anotherTerms' =&gt; 'yes'\n     ],\n     'message' =&gt; [\n         'terms' =&gt; 'Terms and conditions must be accepted',\n         'anotherTerms' =&gt; 'Another terms  must be accepted'\n     ]\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Identical.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Identical.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_numericality":"<h1 id=\"class-phalcon-validation-validator-numericality\">Class <strong>Phalcon\\Validation\\Validator\\Numericality</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/numericality.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Check for a valid numeric value</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\Numericality;\n\n $validator-&gt;add('price', new Numericality([\n     'message' =&gt; ':field is not numeric'\n ]));\n\n $validator-&gt;add(['price', 'amount'], new Numericality([\n     'message' =&gt; [\n         'price' =&gt; 'price is not numeric',\n         'amount' =&gt; 'amount is not numeric'\n     ]\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Numericality.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Numericality.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_regex":"<h1 id=\"class-phalcon-validation-validator-regex\">Class <strong>Phalcon\\Validation\\Validator\\Regex</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/regex.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Allows validate if the value of a field matches a regular expression</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\Regex as RegexValidator;\n\n $validator-&gt;add('created_at', new RegexValidator([\n     'pattern' =&gt; '/^[0-9]{4}[-\\/](0[1-9]|1[12])[-\\/](0[1-9]|[12][0-9]|3[01])$/',\n     'message' =&gt; 'The creation date is invalid'\n ]));\n\n $validator-&gt;add(['created_at', 'name'], new RegexValidator([\n     'pattern' =&gt; [\n         'created_at' =&gt; '/^[0-9]{4}[-\\/](0[1-9]|1[12])[-\\/](0[1-9]|[12][0-9]|3[01])$/',\n         'name' =&gt; '/^[a-z]$/'\n     ],\n     'message' =&gt; [\n         'created_at' =&gt; 'The creation date is invalid',\n         'name' =&gt; ' 'The name is invalid'\n     ]\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Regex.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Regex.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_stringlength":"<h1 id=\"class-phalcon-validation-validator-stringlength\">Class <strong>Phalcon\\Validation\\Validator\\StringLength</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/stringlength.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Validates that a string has the specified maximum and minimum constraints The test is passed if for a string’s length L, min&lt;=L&lt;=max, i.e. L must be at least min, and at most max.</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\StringLength as StringLength;\n\n $validation-&gt;add('name_last', new StringLength([\n     'max' =&gt; 50,\n     'min' =&gt; 2,\n     'messageMaximum' =&gt; 'We don\\'t like really long names',\n     'messageMinimum' =&gt; 'We want more than just their initials'\n ]));\n\n $validation-&gt;add(['name_last', 'name_first'], new StringLength([\n     'max' =&gt; [\n         'name_last' =&gt; 50,\n         'name_first' =&gt; 40\n     ],\n     'min' =&gt; [\n         'name_last' =&gt; 2,\n         'name_first' =&gt; 4\n     ],\n     'messageMaximum' =&gt; [\n         'name_last' =&gt; 'We don\\'t like really long last names',\n         'name_first' =&gt; 'We don\\'t like really long first names'\n     ],\n     'messageMinimum' =&gt; [\n         'name_last' =&gt; 'We don\\'t like too short last names',\n         'name_first' =&gt; 'We don\\'t like too short first names',\n     ]\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_StringLength.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_StringLength.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_creditcard":"<h1 id=\"class-phalcon-validation-validator-creditcard\">Class <strong>Phalcon\\Validation\\Validator\\CreditCard</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/creditcard.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Checks if a value has a valid credit card number</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\CreditCard as CreditCardValidator;\n\n $validator-&gt;add('creditcard', new CreditCardValidator([\n     'message' =&gt; 'The credit card number is not valid'\n ]));\n\n $validator-&gt;add(['creditcard', 'secondCreditCard'], new CreditCardValidator([\n     'message' =&gt; [\n         'creditcard' =&gt; 'The credit card number is not valid',\n         'secondCreditCard' =&gt; 'The second credit card number is not valid'\n     ]\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"verifybyluhnalgorithm\" class=\"method-signature\">private <em>boolean</em> <strong>verifyByLuhnAlgorithm</strong> (<em>string</em> $number)</h3> <p>is a simple checksum formula used to validate a variety of identification numbers</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_CreditCard.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_CreditCard.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_presenceof":"<h1 id=\"class-phalcon-validation-validator-presenceof\">Class <strong>Phalcon\\Validation\\Validator\\PresenceOf</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/presenceof.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Validates that a value is not null or empty string</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\PresenceOf;\n\n $validator-&gt;add('name', new PresenceOf([\n     'message' =&gt; 'The name is required'\n ]));\n\n $validator-&gt;add(['name', 'email'], new PresenceOf([\n     'message' =&gt; [\n         'name' =&gt; 'The name is required',\n         'email' =&gt; 'The email is required'\n     ]\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_PresenceOf.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_PresenceOf.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_url":"<h1 id=\"class-phalcon-validation-validator-url\">Class <strong>Phalcon\\Validation\\Validator\\Url</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/url.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Checks if a value has a url format</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\Url as UrlValidator;\n\n $validator-&gt;add('url', new UrlValidator([\n     'message' =&gt; ':field must be a url'\n ]));\n\n $validator-&gt;add(['url', 'homepage'], new UrlValidator([\n     'message' =&gt; [\n         'url' =&gt; 'url must be a url',\n         'homepage' =&gt; 'homepage must be a url'\n     ]\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Url.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Url.html</a>\n  </p>\n</div>\n","api/phalcon_version":"<h1 id=\"class-phalcon-version\">Class <strong>Phalcon\\Version</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/version.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>This class allows to get the installed version of the framework</p>  <h2 id=\"constants\">Constants</h2> <h3 id=\"version_major\" class=\"method-signature\">\n<em>integer</em> <strong>VERSION_MAJOR</strong>\n</h3> <h3 id=\"version_medium\" class=\"method-signature\">\n<em>integer</em> <strong>VERSION_MEDIUM</strong>\n</h3> <h3 id=\"version_minor\" class=\"method-signature\">\n<em>integer</em> <strong>VERSION_MINOR</strong>\n</h3> <h3 id=\"version_special\" class=\"method-signature\">\n<em>integer</em> <strong>VERSION_SPECIAL</strong>\n</h3> <h3 id=\"version_special_number\" class=\"method-signature\">\n<em>integer</em> <strong>VERSION_SPECIAL_NUMBER</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"_getversion\" class=\"method-signature\">protected static <strong>_getVersion</strong> ()</h3> <p>Area where the version number is set. The format is as follows: ABBCCDE A - Major version B - Med version (two digits) C - Min version (two digits) D - Special release: 1 = Alpha, 2 = Beta, 3 = RC, 4 = Stable E - Special release version i.e. RC1, Beta2 etc.</p> <h3 id=\"_getspecial\" class=\"method-signature\">final protected static <strong>_getSpecial</strong> (<em>mixed</em> $special)</h3> <p>Translates a number to a special release If Special release = 1 this function will return ALPHA</p> <h3 id=\"get\" class=\"method-signature\">public static <strong>get</strong> ()</h3> <p>Returns the active version (string)</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Version::get();\n</pre> <h3 id=\"getid\" class=\"method-signature\">public static <strong>getId</strong> ()</h3> <p>Returns the numeric active version</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Version::getId();\n</pre> <h3 id=\"getpart\" class=\"method-signature\">public static <strong>getPart</strong> (<em>mixed</em> $part)</h3> <p>Returns a specific part of the version. If the wrong parameter is passed it will return the full version</p> <pre class=\"highlight-php\" data-language=\"php\">echo Phalcon\\Version::getPart(Phalcon\\Version::VERSION_MAJOR);\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Version.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Version.html</a>\n  </p>\n</div>\n","api/phalcon_acl_resourceinterface":"<h1 id=\"interface-phalcon-acl-resourceinterface\">Interface <strong>Phalcon\\Acl\\ResourceInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/resourceinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getname\" class=\"method-signature\">abstract public <strong>getName</strong> ()</h3> <p>...</p> <h3 id=\"getdescription\" class=\"method-signature\">abstract public <strong>getDescription</strong> ()</h3> <p>...</p> <h3 id=\"__tostring\" class=\"method-signature\">abstract public <strong>__toString</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_ResourceInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_ResourceInterface.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_uniqueness":"<h1 id=\"class-phalcon-validation-validator-uniqueness\">Class <strong>Phalcon\\Validation\\Validator\\Uniqueness</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_combinedfieldsvalidator\"><em>Phalcon\\Validation\\CombinedFieldsValidator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/uniqueness.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Check that a field is unique in the related table</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\Uniqueness as UniquenessValidator;\n\n   $validator-&gt;add('username', new UniquenessValidator([\n       'model' =&gt; new Users(),\n       'message' =&gt; ':field must be unique'\n   ]));\n\nDifferent attribute from the field:\n</pre> <pre class=\"highlight-php\" data-language=\"php\">$validator-&gt;add('username', new UniquenessValidator([\n       'model' =&gt; new Users(),\n       'attribute' =&gt; 'nick'\n   ]));\n\nIn model:\n</pre> <pre class=\"highlight-php\" data-language=\"php\">$validator-&gt;add('username', new UniquenessValidator());\n\nCombination of fields in model:\n</pre> <pre class=\"highlight-php\" data-language=\"php\">$validator-&gt;add(['firstName', 'lastName'], new UniquenessValidator());\n\nIt is possible to convert values before validation. This is useful in situations where values need to be converted to do the database lookup:\n</pre> <pre class=\"highlight-php\" data-language=\"php\">$validator-&gt;add('username', new UniquenessValidator([\n     'convert' =&gt; function (array $values) {\n         $values['username'] = strtolower($values['username']);\n\n         return $values;\n     }\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"isuniqueness\" class=\"method-signature\">protected <strong>isUniqueness</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>...</p> <h3 id=\"getcolumnnamereal\" class=\"method-signature\">protected <strong>getColumnNameReal</strong> (<em>mixed</em> $record, <em>mixed</em> $field)</h3> <p>The column map is used in the case to get real column name</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Uniqueness.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Uniqueness.html</a>\n  </p>\n</div>\n","api/phalcon_acl_adapterinterface":"<h1 id=\"interface-phalcon-acl-adapterinterface\">Interface <strong>Phalcon\\Acl\\AdapterInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/adapterinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setdefaultaction\" class=\"method-signature\">abstract public <strong>setDefaultAction</strong> (<em>mixed</em> $defaultAccess)</h3> <p>...</p> <h3 id=\"getdefaultaction\" class=\"method-signature\">abstract public <strong>getDefaultAction</strong> ()</h3> <p>...</p> <h3 id=\"setnoargumentsdefaultaction\" class=\"method-signature\">abstract public <strong>setNoArgumentsDefaultAction</strong> (<em>mixed</em> $defaultAccess)</h3> <p>...</p> <h3 id=\"getnoargumentsdefaultaction\" class=\"method-signature\">abstract public <strong>getNoArgumentsDefaultAction</strong> ()</h3> <p>...</p> <h3 id=\"addrole\" class=\"method-signature\">abstract public <strong>addRole</strong> (<em>mixed</em> $role, [<em>mixed</em> $accessInherits])</h3> <p>...</p> <h3 id=\"addinherit\" class=\"method-signature\">abstract public <strong>addInherit</strong> (<em>mixed</em> $roleName, <em>mixed</em> $roleToInherit)</h3> <p>...</p> <h3 id=\"isrole\" class=\"method-signature\">abstract public <strong>isRole</strong> (<em>mixed</em> $roleName)</h3> <p>...</p> <h3 id=\"isresource\" class=\"method-signature\">abstract public <strong>isResource</strong> (<em>mixed</em> $resourceName)</h3> <p>...</p> <h3 id=\"addresource\" class=\"method-signature\">abstract public <strong>addResource</strong> (<em>mixed</em> $resourceObject, <em>mixed</em> $accessList)</h3> <p>...</p> <h3 id=\"addresourceaccess\" class=\"method-signature\">abstract public <strong>addResourceAccess</strong> (<em>mixed</em> $resourceName, <em>mixed</em> $accessList)</h3> <p>...</p> <h3 id=\"dropresourceaccess\" class=\"method-signature\">abstract public <strong>dropResourceAccess</strong> (<em>mixed</em> $resourceName, <em>mixed</em> $accessList)</h3> <p>...</p> <h3 id=\"allow\" class=\"method-signature\">abstract public <strong>allow</strong> (<em>mixed</em> $roleName, <em>mixed</em> $resourceName, <em>mixed</em> $access, [<em>mixed</em> $func])</h3> <p>...</p> <h3 id=\"deny\" class=\"method-signature\">abstract public <strong>deny</strong> (<em>mixed</em> $roleName, <em>mixed</em> $resourceName, <em>mixed</em> $access, [<em>mixed</em> $func])</h3> <p>...</p> <h3 id=\"isallowed\" class=\"method-signature\">abstract public <strong>isAllowed</strong> (<em>mixed</em> $roleName, <em>mixed</em> $resourceName, <em>mixed</em> $access, [<em>array</em> $parameters])</h3> <p>...</p> <h3 id=\"getactiverole\" class=\"method-signature\">abstract public <strong>getActiveRole</strong> ()</h3> <p>...</p> <h3 id=\"getactiveresource\" class=\"method-signature\">abstract public <strong>getActiveResource</strong> ()</h3> <p>...</p> <h3 id=\"getactiveaccess\" class=\"method-signature\">abstract public <strong>getActiveAccess</strong> ()</h3> <p>...</p> <h3 id=\"getroles\" class=\"method-signature\">abstract public <strong>getRoles</strong> ()</h3> <p>...</p> <h3 id=\"getresources\" class=\"method-signature\">abstract public <strong>getResources</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_AdapterInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_AdapterInterface.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_alpha":"<h1 id=\"class-phalcon-validation-validator-alpha\">Class <strong>Phalcon\\Validation\\Validator\\Alpha</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/alpha.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Check for alphabetic character(s)</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\Alpha as AlphaValidator;\n\n $validator-&gt;add('username', new AlphaValidator([\n     'message' =&gt; ':field must contain only letters'\n ]));\n\n $validator-&gt;add(['username', 'name'], new AlphaValidator([\n     'message' =&gt; [\n         'username' =&gt; 'username must contain only letters',\n         'name' =&gt; 'name must contain only letters'\n    ]\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Alpha.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_Alpha.html</a>\n  </p>\n</div>\n","api/phalcon_acl_resourceaware":"<h1 id=\"interface-phalcon-acl-resourceaware\">Interface <strong>Phalcon\\Acl\\ResourceAware</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/resourceaware.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getresourcename\" class=\"method-signature\">abstract public <strong>getResourceName</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_ResourceAware.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_ResourceAware.html</a>\n  </p>\n</div>\n","api/phalcon_annotations_readerinterface":"<h1 id=\"interface-phalcon-annotations-readerinterface\">Interface <strong>Phalcon\\Annotations\\ReaderInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/readerinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"parse\" class=\"method-signature\">abstract public <strong>parse</strong> (<em>mixed</em> $className)</h3> <p>...</p> <h3 id=\"parsedocblock\" class=\"method-signature\">abstract public static <strong>parseDocBlock</strong> (<em>mixed</em> $docBlock, [<em>mixed</em> $file], [<em>mixed</em> $line])</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_ReaderInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_ReaderInterface.html</a>\n  </p>\n</div>\n","api/phalcon_cache_frontendinterface":"<h1 id=\"interface-phalcon-cache-frontendinterface\">Interface <strong>Phalcon\\Cache\\FrontendInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/frontendinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getlifetime\" class=\"method-signature\">abstract public <strong>getLifetime</strong> ()</h3> <p>...</p> <h3 id=\"isbuffering\" class=\"method-signature\">abstract public <strong>isBuffering</strong> ()</h3> <p>...</p> <h3 id=\"start\" class=\"method-signature\">abstract public <strong>start</strong> ()</h3> <p>...</p> <h3 id=\"getcontent\" class=\"method-signature\">abstract public <strong>getContent</strong> ()</h3> <p>...</p> <h3 id=\"stop\" class=\"method-signature\">abstract public <strong>stop</strong> ()</h3> <p>...</p> <h3 id=\"beforestore\" class=\"method-signature\">abstract public <strong>beforeStore</strong> (<em>mixed</em> $data)</h3> <p>...</p> <h3 id=\"afterretrieve\" class=\"method-signature\">abstract public <strong>afterRetrieve</strong> (<em>mixed</em> $data)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_FrontendInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_FrontendInterface.html</a>\n  </p>\n</div>\n","api/phalcon_acl_roleaware":"<h1 id=\"interface-phalcon-acl-roleaware\">Interface <strong>Phalcon\\Acl\\RoleAware</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/roleaware.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getrolename\" class=\"method-signature\">abstract public <strong>getRoleName</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_RoleAware.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_RoleAware.html</a>\n  </p>\n</div>\n","api/phalcon_cache_backendinterface":"<h1 id=\"interface-phalcon-cache-backendinterface\">Interface <strong>Phalcon\\Cache\\BackendInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cache/backendinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"start\" class=\"method-signature\">abstract public <strong>start</strong> (<em>mixed</em> $keyName, [<em>mixed</em> $lifetime])</h3> <p>...</p> <h3 id=\"stop\" class=\"method-signature\">abstract public <strong>stop</strong> ([<em>mixed</em> $stopBuffer])</h3> <p>...</p> <h3 id=\"getfrontend\" class=\"method-signature\">abstract public <strong>getFrontend</strong> ()</h3> <p>...</p> <h3 id=\"getoptions\" class=\"method-signature\">abstract public <strong>getOptions</strong> ()</h3> <p>...</p> <h3 id=\"isfresh\" class=\"method-signature\">abstract public <strong>isFresh</strong> ()</h3> <p>...</p> <h3 id=\"isstarted\" class=\"method-signature\">abstract public <strong>isStarted</strong> ()</h3> <p>...</p> <h3 id=\"setlastkey\" class=\"method-signature\">abstract public <strong>setLastKey</strong> (<em>mixed</em> $lastKey)</h3> <p>...</p> <h3 id=\"getlastkey\" class=\"method-signature\">abstract public <strong>getLastKey</strong> ()</h3> <p>...</p> <h3 id=\"get\" class=\"method-signature\">abstract public <strong>get</strong> (<em>mixed</em> $keyName, [<em>mixed</em> $lifetime])</h3> <p>...</p> <h3 id=\"save\" class=\"method-signature\">abstract public <strong>save</strong> ([<em>mixed</em> $keyName], [<em>mixed</em> $content], [<em>mixed</em> $lifetime], [<em>mixed</em> $stopBuffer])</h3> <p>...</p> <h3 id=\"delete\" class=\"method-signature\">abstract public <strong>delete</strong> (<em>mixed</em> $keyName)</h3> <p>...</p> <h3 id=\"querykeys\" class=\"method-signature\">abstract public <strong>queryKeys</strong> ([<em>mixed</em> $prefix])</h3> <p>...</p> <h3 id=\"exists\" class=\"method-signature\">abstract public <strong>exists</strong> ([<em>mixed</em> $keyName], [<em>mixed</em> $lifetime])</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_BackendInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cache_BackendInterface.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_exclusionin":"<h1 id=\"class-phalcon-validation-validator-exclusionin\">Class <strong>Phalcon\\Validation\\Validator\\ExclusionIn</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/exclusionin.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Check if a value is not included into a list of values</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\ExclusionIn;\n\n $validator-&gt;add('status', new ExclusionIn([\n     'message' =&gt; 'The status must not be A or B',\n     'domain' =&gt; ['A', 'B']\n ]));\n\n $validator-&gt;add(['status', 'type'], new ExclusionIn([\n     'message' =&gt; [\n         'status' =&gt; 'The status must not be A or B',\n         'type' =&gt; 'The type must not be 1 or 2'\n     ],\n     'domain' =&gt; [\n         'status' =&gt; ['A', 'B'],\n         'type' =&gt; [1, 2]\n     ]\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_ExclusionIn.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_ExclusionIn.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_file":"<h1 id=\"class-phalcon-validation-validator-file\">Class <strong>Phalcon\\Validation\\Validator\\File</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/file.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Checks if a value has a correct file</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\File as FileValidator;\n\n $validator-&gt;add('file', new FileValidator([\n     'maxSize' =&gt; '2M',\n     'messageSize' =&gt; ':field exceeds the max filesize (:max)',\n     'allowedTypes' =&gt; array('image/jpeg', 'image/png'),\n     'messageType' =&gt; 'Allowed file types are :types',\n     'maxResolution' =&gt; '800x600',\n     'messageMaxResolution' =&gt; 'Max resolution of :field is :max'\n ]));\n\n $validator-&gt;add(['file', 'anotherFile'], new FileValidator([\n     'maxSize' =&gt; [\n         'file' =&gt; '2M',\n         'anotherFile' =&gt; '4M'\n     ],\n     'messageSize' =&gt; [\n         'file' =&gt; 'file exceeds the max filesize 2M',\n         'anotherFile' =&gt; 'anotherFile exceeds the max filesize 4M',\n     'allowedTypes' =&gt; [\n         'file' =&gt; ['image/jpeg', 'image/png'],\n         'anotherFile' =&gt; ['image/gif', 'image/bmp']\n     ],\n     'messageType' =&gt; [\n         'file' =&gt; 'Allowed file types are image/jpeg and image/png',\n         'anotherFile' =&gt; 'Allowed file types are image/gif and image/bmp'\n     ],\n     'maxResolution' =&gt; [\n         'file' =&gt; '800x600',\n         'anotherFile' =&gt; '1024x768'\n     ],\n     'messageMaxResolution' =&gt; [\n         'file' =&gt; 'Max resolution of file is 800x600',\n         'anotherFile' =&gt; 'Max resolution of file is 1024x768'\n     ]\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"isallowempty\" class=\"method-signature\">public <strong>isAllowEmpty</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Check on empty</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_File.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_File.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validator_inclusionin":"<h1 id=\"class-phalcon-validation-validator-inclusionin\">Class <strong>Phalcon\\Validation\\Validator\\InclusionIn</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_validation_validator\"><em>Phalcon\\Validation\\Validator</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validator/inclusionin.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Check if a value is included into a list of values</p> <pre class=\"highlight-php\" data-language=\"php\">use Phalcon\\Validation\\Validator\\InclusionIn;\n\n $validator-&gt;add('status', new InclusionIn([\n     'message' =&gt; 'The status must be A or B',\n     'domain' =&gt; array('A', 'B')\n ]));\n\n $validator-&gt;add(['status', 'type'], new InclusionIn([\n     'message' =&gt; [\n         'status' =&gt; 'The status must be A or B',\n         'type' =&gt; 'The status must be 1 or 2'\n     ],\n     'domain' =&gt; [\n         'status' =&gt; ['A', 'B'],\n         'type' =&gt; [1, 2]\n     ]\n ]));\n</pre>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $field)</h3> <p>Executes the validation</p> <h3 id=\"__construct\" class=\"method-signature\">public <strong>__construct</strong> ([<em>array</em> $options]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Phalcon\\Validation\\Validator constructor</p> <h3 id=\"issetoption\" class=\"method-signature\">public <strong>isSetOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option has been defined</p> <h3 id=\"hasoption\" class=\"method-signature\">public <strong>hasOption</strong> (<em>mixed</em> $key) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Checks if an option is defined</p> <h3 id=\"getoption\" class=\"method-signature\">public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue]) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Returns an option in the validator’s options Returns null if the option hasn’t set</p> <h3 id=\"setoption\" class=\"method-signature\">public <strong>setOption</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Validation\\Validator</small>\n</h3> <p>Sets an option in the validator</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_InclusionIn.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_Validator_InclusionIn.html</a>\n  </p>\n</div>\n","api/phalcon_cli_routerinterface":"<h1 id=\"interface-phalcon-cli-routerinterface\">Interface <strong>Phalcon\\Cli\\RouterInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/routerinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setdefaultmodule\" class=\"method-signature\">abstract public <strong>setDefaultModule</strong> (<em>mixed</em> $moduleName)</h3> <p>...</p> <h3 id=\"setdefaulttask\" class=\"method-signature\">abstract public <strong>setDefaultTask</strong> (<em>mixed</em> $taskName)</h3> <p>...</p> <h3 id=\"setdefaultaction\" class=\"method-signature\">abstract public <strong>setDefaultAction</strong> (<em>mixed</em> $actionName)</h3> <p>...</p> <h3 id=\"setdefaults\" class=\"method-signature\">abstract public <strong>setDefaults</strong> (<em>array</em> $defaults)</h3> <p>...</p> <h3 id=\"handle\" class=\"method-signature\">abstract public <strong>handle</strong> ([<em>mixed</em> $arguments])</h3> <p>...</p> <h3 id=\"add\" class=\"method-signature\">abstract public <strong>add</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"getmodulename\" class=\"method-signature\">abstract public <strong>getModuleName</strong> ()</h3> <p>...</p> <h3 id=\"gettaskname\" class=\"method-signature\">abstract public <strong>getTaskName</strong> ()</h3> <p>...</p> <h3 id=\"getactionname\" class=\"method-signature\">abstract public <strong>getActionName</strong> ()</h3> <p>...</p> <h3 id=\"getparams\" class=\"method-signature\">abstract public <strong>getParams</strong> ()</h3> <p>...</p> <h3 id=\"getmatchedroute\" class=\"method-signature\">abstract public <strong>getMatchedRoute</strong> ()</h3> <p>...</p> <h3 id=\"getmatches\" class=\"method-signature\">abstract public <strong>getMatches</strong> ()</h3> <p>...</p> <h3 id=\"wasmatched\" class=\"method-signature\">abstract public <strong>wasMatched</strong> ()</h3> <p>...</p> <h3 id=\"getroutes\" class=\"method-signature\">abstract public <strong>getRoutes</strong> ()</h3> <p>...</p> <h3 id=\"getroutebyid\" class=\"method-signature\">abstract public <strong>getRouteById</strong> (<em>mixed</em> $id)</h3> <p>...</p> <h3 id=\"getroutebyname\" class=\"method-signature\">abstract public <strong>getRouteByName</strong> (<em>mixed</em> $name)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_RouterInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_RouterInterface.html</a>\n  </p>\n</div>\n","api/phalcon_cli_taskinterface":"<h1 id=\"interface-phalcon-cli-taskinterface\">Interface <strong>Phalcon\\Cli\\TaskInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/taskinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_TaskInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_TaskInterface.html</a>\n  </p>\n</div>\n","api/phalcon_cryptinterface":"<h1 id=\"interface-phalcon-cryptinterface\">Interface <strong>Phalcon\\CryptInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cryptinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setcipher\" class=\"method-signature\">abstract public <strong>setCipher</strong> (<em>mixed</em> $cipher)</h3> <p>...</p> <h3 id=\"getcipher\" class=\"method-signature\">abstract public <strong>getCipher</strong> ()</h3> <p>...</p> <h3 id=\"setkey\" class=\"method-signature\">abstract public <strong>setKey</strong> (<em>mixed</em> $key)</h3> <p>...</p> <h3 id=\"getkey\" class=\"method-signature\">abstract public <strong>getKey</strong> ()</h3> <p>...</p> <h3 id=\"encrypt\" class=\"method-signature\">abstract public <strong>encrypt</strong> (<em>mixed</em> $text, [<em>mixed</em> $key])</h3> <p>...</p> <h3 id=\"decrypt\" class=\"method-signature\">abstract public <strong>decrypt</strong> (<em>mixed</em> $text, [<em>mixed</em> $key])</h3> <p>...</p> <h3 id=\"encryptbase64\" class=\"method-signature\">abstract public <strong>encryptBase64</strong> (<em>mixed</em> $text, [<em>mixed</em> $key])</h3> <p>...</p> <h3 id=\"decryptbase64\" class=\"method-signature\">abstract public <strong>decryptBase64</strong> (<em>mixed</em> $text, [<em>mixed</em> $key])</h3> <p>...</p> <h3 id=\"getavailableciphers\" class=\"method-signature\">abstract public <strong>getAvailableCiphers</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_CryptInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_CryptInterface.html</a>\n  </p>\n</div>\n","api/phalcon_cli_router_routeinterface":"<h1 id=\"interface-phalcon-cli-router-routeinterface\">Interface <strong>Phalcon\\Cli\\Router\\RouteInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/router/routeinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"compilepattern\" class=\"method-signature\">abstract public <strong>compilePattern</strong> (<em>mixed</em> $pattern)</h3> <p>...</p> <h3 id=\"reconfigure\" class=\"method-signature\">abstract public <strong>reConfigure</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"getname\" class=\"method-signature\">abstract public <strong>getName</strong> ()</h3> <p>...</p> <h3 id=\"setname\" class=\"method-signature\">abstract public <strong>setName</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"getrouteid\" class=\"method-signature\">abstract public <strong>getRouteId</strong> ()</h3> <p>...</p> <h3 id=\"getpattern\" class=\"method-signature\">abstract public <strong>getPattern</strong> ()</h3> <p>...</p> <h3 id=\"getcompiledpattern\" class=\"method-signature\">abstract public <strong>getCompiledPattern</strong> ()</h3> <p>...</p> <h3 id=\"getpaths\" class=\"method-signature\">abstract public <strong>getPaths</strong> ()</h3> <p>...</p> <h3 id=\"getreversedpaths\" class=\"method-signature\">abstract public <strong>getReversedPaths</strong> ()</h3> <p>...</p> <h3 id=\"reset\" class=\"method-signature\">abstract public static <strong>reset</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router_RouteInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_Router_RouteInterface.html</a>\n  </p>\n</div>\n","api/phalcon_db_adapterinterface":"<h1 id=\"interface-phalcon-db-adapterinterface\">Interface <strong>Phalcon\\Db\\AdapterInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/adapterinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"fetchone\" class=\"method-signature\">abstract public <strong>fetchOne</strong> (<em>mixed</em> $sqlQuery, [<em>mixed</em> $fetchMode], [<em>mixed</em> $placeholders])</h3> <p>...</p> <h3 id=\"fetchall\" class=\"method-signature\">abstract public <strong>fetchAll</strong> (<em>mixed</em> $sqlQuery, [<em>mixed</em> $fetchMode], [<em>mixed</em> $placeholders])</h3> <p>...</p> <h3 id=\"insert\" class=\"method-signature\">abstract public <strong>insert</strong> (<em>mixed</em> $table, <em>array</em> $values, [<em>mixed</em> $fields], [<em>mixed</em> $dataTypes])</h3> <p>...</p> <h3 id=\"update\" class=\"method-signature\">abstract public <strong>update</strong> (<em>mixed</em> $table, <em>mixed</em> $fields, <em>mixed</em> $values, [<em>mixed</em> $whereCondition], [<em>mixed</em> $dataTypes])</h3> <p>...</p> <h3 id=\"delete\" class=\"method-signature\">abstract public <strong>delete</strong> (<em>mixed</em> $table, [<em>mixed</em> $whereCondition], [<em>mixed</em> $placeholders], [<em>mixed</em> $dataTypes])</h3> <p>...</p> <h3 id=\"getcolumnlist\" class=\"method-signature\">abstract public <strong>getColumnList</strong> (<em>mixed</em> $columnList)</h3> <p>...</p> <h3 id=\"limit\" class=\"method-signature\">abstract public <strong>limit</strong> (<em>mixed</em> $sqlQuery, <em>mixed</em> $number)</h3> <p>...</p> <h3 id=\"tableexists\" class=\"method-signature\">abstract public <strong>tableExists</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName])</h3> <p>...</p> <h3 id=\"viewexists\" class=\"method-signature\">abstract public <strong>viewExists</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName])</h3> <p>...</p> <h3 id=\"forupdate\" class=\"method-signature\">abstract public <strong>forUpdate</strong> (<em>mixed</em> $sqlQuery)</h3> <p>...</p> <h3 id=\"sharedlock\" class=\"method-signature\">abstract public <strong>sharedLock</strong> (<em>mixed</em> $sqlQuery)</h3> <p>...</p> <h3 id=\"createtable\" class=\"method-signature\">abstract public <strong>createTable</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>array</em> $definition)</h3> <p>...</p> <h3 id=\"droptable\" class=\"method-signature\">abstract public <strong>dropTable</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists])</h3> <p>...</p> <h3 id=\"createview\" class=\"method-signature\">abstract public <strong>createView</strong> (<em>mixed</em> $viewName, <em>array</em> $definition, [<em>mixed</em> $schemaName])</h3> <p>...</p> <h3 id=\"dropview\" class=\"method-signature\">abstract public <strong>dropView</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists])</h3> <p>...</p> <h3 id=\"addcolumn\" class=\"method-signature\">abstract public <strong>addColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column)</h3> <p>...</p> <h3 id=\"modifycolumn\" class=\"method-signature\">abstract public <strong>modifyColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column, [<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $currentColumn])</h3> <p>...</p> <h3 id=\"dropcolumn\" class=\"method-signature\">abstract public <strong>dropColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $columnName)</h3> <p>...</p> <h3 id=\"addindex\" class=\"method-signature\">abstract public <strong>addIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index)</h3> <p>...</p> <h3 id=\"dropindex\" class=\"method-signature\">abstract public <strong>dropIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $indexName)</h3> <p>...</p> <h3 id=\"addprimarykey\" class=\"method-signature\">abstract public <strong>addPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index)</h3> <p>...</p> <h3 id=\"dropprimarykey\" class=\"method-signature\">abstract public <strong>dropPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName)</h3> <p>...</p> <h3 id=\"addforeignkey\" class=\"method-signature\">abstract public <strong>addForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_referenceinterface\"><em>Phalcon\\Db\\ReferenceInterface</em></a> $reference)</h3> <p>...</p> <h3 id=\"dropforeignkey\" class=\"method-signature\">abstract public <strong>dropForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $referenceName)</h3> <p>...</p> <h3 id=\"getcolumndefinition\" class=\"method-signature\">abstract public <strong>getColumnDefinition</strong> (<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column)</h3> <p>...</p> <h3 id=\"listtables\" class=\"method-signature\">abstract public <strong>listTables</strong> ([<em>mixed</em> $schemaName])</h3> <p>...</p> <h3 id=\"listviews\" class=\"method-signature\">abstract public <strong>listViews</strong> ([<em>mixed</em> $schemaName])</h3> <p>...</p> <h3 id=\"getdescriptor\" class=\"method-signature\">abstract public <strong>getDescriptor</strong> ()</h3> <p>...</p> <h3 id=\"getconnectionid\" class=\"method-signature\">abstract public <strong>getConnectionId</strong> ()</h3> <p>...</p> <h3 id=\"getsqlstatement\" class=\"method-signature\">abstract public <strong>getSQLStatement</strong> ()</h3> <p>...</p> <h3 id=\"getrealsqlstatement\" class=\"method-signature\">abstract public <strong>getRealSQLStatement</strong> ()</h3> <p>...</p> <h3 id=\"getsqlvariables\" class=\"method-signature\">abstract public <strong>getSQLVariables</strong> ()</h3> <p>...</p> <h3 id=\"getsqlbindtypes\" class=\"method-signature\">abstract public <strong>getSQLBindTypes</strong> ()</h3> <p>...</p> <h3 id=\"gettype\" class=\"method-signature\">abstract public <strong>getType</strong> ()</h3> <p>...</p> <h3 id=\"getdialecttype\" class=\"method-signature\">abstract public <strong>getDialectType</strong> ()</h3> <p>...</p> <h3 id=\"getdialect\" class=\"method-signature\">abstract public <strong>getDialect</strong> ()</h3> <p>...</p> <h3 id=\"connect\" class=\"method-signature\">abstract public <strong>connect</strong> ([<em>array</em> $descriptor])</h3> <p>...</p> <h3 id=\"query\" class=\"method-signature\">abstract public <strong>query</strong> (<em>mixed</em> $sqlStatement, [<em>mixed</em> $placeholders], [<em>mixed</em> $dataTypes])</h3> <p>...</p> <h3 id=\"execute\" class=\"method-signature\">abstract public <strong>execute</strong> (<em>mixed</em> $sqlStatement, [<em>mixed</em> $placeholders], [<em>mixed</em> $dataTypes])</h3> <p>...</p> <h3 id=\"affectedrows\" class=\"method-signature\">abstract public <strong>affectedRows</strong> ()</h3> <p>...</p> <h3 id=\"close\" class=\"method-signature\">abstract public <strong>close</strong> ()</h3> <p>...</p> <h3 id=\"escapeidentifier\" class=\"method-signature\">abstract public <strong>escapeIdentifier</strong> (<em>mixed</em> $identifier)</h3> <p>...</p> <h3 id=\"escapestring\" class=\"method-signature\">abstract public <strong>escapeString</strong> (<em>mixed</em> $str)</h3> <p>...</p> <h3 id=\"lastinsertid\" class=\"method-signature\">abstract public <strong>lastInsertId</strong> ([<em>mixed</em> $sequenceName])</h3> <p>...</p> <h3 id=\"begin\" class=\"method-signature\">abstract public <strong>begin</strong> ([<em>mixed</em> $nesting])</h3> <p>...</p> <h3 id=\"rollback\" class=\"method-signature\">abstract public <strong>rollback</strong> ([<em>mixed</em> $nesting])</h3> <p>...</p> <h3 id=\"commit\" class=\"method-signature\">abstract public <strong>commit</strong> ([<em>mixed</em> $nesting])</h3> <p>...</p> <h3 id=\"isundertransaction\" class=\"method-signature\">abstract public <strong>isUnderTransaction</strong> ()</h3> <p>...</p> <h3 id=\"getinternalhandler\" class=\"method-signature\">abstract public <strong>getInternalHandler</strong> ()</h3> <p>...</p> <h3 id=\"describeindexes\" class=\"method-signature\">abstract public <strong>describeIndexes</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>...</p> <h3 id=\"describereferences\" class=\"method-signature\">abstract public <strong>describeReferences</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>...</p> <h3 id=\"tableoptions\" class=\"method-signature\">abstract public <strong>tableOptions</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName])</h3> <p>...</p> <h3 id=\"useexplicitidvalue\" class=\"method-signature\">abstract public <strong>useExplicitIdValue</strong> ()</h3> <p>...</p> <h3 id=\"getdefaultidvalue\" class=\"method-signature\">abstract public <strong>getDefaultIdValue</strong> ()</h3> <p>...</p> <h3 id=\"supportsequences\" class=\"method-signature\">abstract public <strong>supportSequences</strong> ()</h3> <p>...</p> <h3 id=\"createsavepoint\" class=\"method-signature\">abstract public <strong>createSavepoint</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"releasesavepoint\" class=\"method-signature\">abstract public <strong>releaseSavepoint</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"rollbacksavepoint\" class=\"method-signature\">abstract public <strong>rollbackSavepoint</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"setnestedtransactionswithsavepoints\" class=\"method-signature\">abstract public <strong>setNestedTransactionsWithSavepoints</strong> (<em>mixed</em> $nestedTransactionsWithSavepoints)</h3> <p>...</p> <h3 id=\"isnestedtransactionswithsavepoints\" class=\"method-signature\">abstract public <strong>isNestedTransactionsWithSavepoints</strong> ()</h3> <p>...</p> <h3 id=\"getnestedtransactionsavepointname\" class=\"method-signature\">abstract public <strong>getNestedTransactionSavepointName</strong> ()</h3> <p>...</p> <h3 id=\"describecolumns\" class=\"method-signature\">abstract public <strong>describeColumns</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_AdapterInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_AdapterInterface.html</a>\n  </p>\n</div>\n","api/phalcon_acl_roleinterface":"<h1 id=\"interface-phalcon-acl-roleinterface\">Interface <strong>Phalcon\\Acl\\RoleInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/acl/roleinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getname\" class=\"method-signature\">abstract public <strong>getName</strong> ()</h3> <p>...</p> <h3 id=\"getdescription\" class=\"method-signature\">abstract public <strong>getDescription</strong> ()</h3> <p>...</p> <h3 id=\"__tostring\" class=\"method-signature\">abstract public <strong>__toString</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_RoleInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Acl_RoleInterface.html</a>\n  </p>\n</div>\n","api/phalcon_assets_filterinterface":"<h1 id=\"interface-phalcon-assets-filterinterface\">Interface <strong>Phalcon\\Assets\\FilterInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/assets/filterinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"filter\" class=\"method-signature\">abstract public <strong>filter</strong> (<em>mixed</em> $content)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_FilterInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Assets_FilterInterface.html</a>\n  </p>\n</div>\n","api/phalcon_db_indexinterface":"<h1 id=\"interface-phalcon-db-indexinterface\">Interface <strong>Phalcon\\Db\\IndexInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/indexinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getname\" class=\"method-signature\">abstract public <strong>getName</strong> ()</h3> <p>...</p> <h3 id=\"getcolumns\" class=\"method-signature\">abstract public <strong>getColumns</strong> ()</h3> <p>...</p> <h3 id=\"gettype\" class=\"method-signature\">abstract public <strong>getType</strong> ()</h3> <p>...</p> <h3 id=\"__set_state\" class=\"method-signature\">abstract public static <strong>__set_state</strong> (<em>array</em> $data)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_IndexInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_IndexInterface.html</a>\n  </p>\n</div>\n","api/phalcon_db_columninterface":"<h1 id=\"interface-phalcon-db-columninterface\">Interface <strong>Phalcon\\Db\\ColumnInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/columninterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getschemaname\" class=\"method-signature\">abstract public <strong>getSchemaName</strong> ()</h3> <p>...</p> <h3 id=\"getname\" class=\"method-signature\">abstract public <strong>getName</strong> ()</h3> <p>...</p> <h3 id=\"gettype\" class=\"method-signature\">abstract public <strong>getType</strong> ()</h3> <p>...</p> <h3 id=\"gettypereference\" class=\"method-signature\">abstract public <strong>getTypeReference</strong> ()</h3> <p>...</p> <h3 id=\"gettypevalues\" class=\"method-signature\">abstract public <strong>getTypeValues</strong> ()</h3> <p>...</p> <h3 id=\"getsize\" class=\"method-signature\">abstract public <strong>getSize</strong> ()</h3> <p>...</p> <h3 id=\"getscale\" class=\"method-signature\">abstract public <strong>getScale</strong> ()</h3> <p>...</p> <h3 id=\"isunsigned\" class=\"method-signature\">abstract public <strong>isUnsigned</strong> ()</h3> <p>...</p> <h3 id=\"isnotnull\" class=\"method-signature\">abstract public <strong>isNotNull</strong> ()</h3> <p>...</p> <h3 id=\"isprimary\" class=\"method-signature\">abstract public <strong>isPrimary</strong> ()</h3> <p>...</p> <h3 id=\"isautoincrement\" class=\"method-signature\">abstract public <strong>isAutoIncrement</strong> ()</h3> <p>...</p> <h3 id=\"isnumeric\" class=\"method-signature\">abstract public <strong>isNumeric</strong> ()</h3> <p>...</p> <h3 id=\"isfirst\" class=\"method-signature\">abstract public <strong>isFirst</strong> ()</h3> <p>...</p> <h3 id=\"getafterposition\" class=\"method-signature\">abstract public <strong>getAfterPosition</strong> ()</h3> <p>...</p> <h3 id=\"getbindtype\" class=\"method-signature\">abstract public <strong>getBindType</strong> ()</h3> <p>...</p> <h3 id=\"getdefault\" class=\"method-signature\">abstract public <strong>getDefault</strong> ()</h3> <p>...</p> <h3 id=\"hasdefault\" class=\"method-signature\">abstract public <strong>hasDefault</strong> ()</h3> <p>...</p> <h3 id=\"__set_state\" class=\"method-signature\">abstract public static <strong>__set_state</strong> (<em>array</em> $data)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ColumnInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ColumnInterface.html</a>\n  </p>\n</div>\n","api/phalcon_db_resultinterface":"<h1 id=\"interface-phalcon-db-resultinterface\">Interface <strong>Phalcon\\Db\\ResultInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/resultinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"execute\" class=\"method-signature\">abstract public <strong>execute</strong> ()</h3> <p>...</p> <h3 id=\"fetch\" class=\"method-signature\">abstract public <strong>fetch</strong> ()</h3> <p>...</p> <h3 id=\"fetcharray\" class=\"method-signature\">abstract public <strong>fetchArray</strong> ()</h3> <p>...</p> <h3 id=\"fetchall\" class=\"method-signature\">abstract public <strong>fetchAll</strong> ()</h3> <p>...</p> <h3 id=\"numrows\" class=\"method-signature\">abstract public <strong>numRows</strong> ()</h3> <p>...</p> <h3 id=\"dataseek\" class=\"method-signature\">abstract public <strong>dataSeek</strong> (<em>mixed</em> $number)</h3> <p>...</p> <h3 id=\"setfetchmode\" class=\"method-signature\">abstract public <strong>setFetchMode</strong> (<em>mixed</em> $fetchMode)</h3> <p>...</p> <h3 id=\"getinternalresult\" class=\"method-signature\">abstract public <strong>getInternalResult</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ResultInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ResultInterface.html</a>\n  </p>\n</div>\n","api/phalcon_di_injectionawareinterface":"<h1 id=\"interface-phalcon-di-injectionawareinterface\">Interface <strong>Phalcon\\Di\\InjectionAwareInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/di/injectionawareinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setdi\" class=\"method-signature\">abstract public <strong>setDI</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>...</p> <h3 id=\"getdi\" class=\"method-signature\">abstract public <strong>getDI</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Di_InjectionAwareInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Di_InjectionAwareInterface.html</a>\n  </p>\n</div>\n","api/phalcon_annotations_adapterinterface":"<h1 id=\"interface-phalcon-annotations-adapterinterface\">Interface <strong>Phalcon\\Annotations\\AdapterInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/annotations/adapterinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setreader\" class=\"method-signature\">abstract public <strong>setReader</strong> (<a class=\"reference internal\" href=\"phalcon_annotations_readerinterface\"><em>Phalcon\\Annotations\\ReaderInterface</em></a> $reader)</h3> <p>...</p> <h3 id=\"getreader\" class=\"method-signature\">abstract public <strong>getReader</strong> ()</h3> <p>...</p> <h3 id=\"get\" class=\"method-signature\">abstract public <strong>get</strong> (<em>mixed</em> $className)</h3> <p>...</p> <h3 id=\"getmethods\" class=\"method-signature\">abstract public <strong>getMethods</strong> (<em>mixed</em> $className)</h3> <p>...</p> <h3 id=\"getmethod\" class=\"method-signature\">abstract public <strong>getMethod</strong> (<em>mixed</em> $className, <em>mixed</em> $methodName)</h3> <p>...</p> <h3 id=\"getproperties\" class=\"method-signature\">abstract public <strong>getProperties</strong> (<em>mixed</em> $className)</h3> <p>...</p> <h3 id=\"getproperty\" class=\"method-signature\">abstract public <strong>getProperty</strong> (<em>mixed</em> $className, <em>mixed</em> $propertyName)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_AdapterInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Annotations_AdapterInterface.html</a>\n  </p>\n</div>\n","api/phalcon_di_serviceinterface":"<h1 id=\"interface-phalcon-di-serviceinterface\">Interface <strong>Phalcon\\Di\\ServiceInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/di/serviceinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getname\" class=\"method-signature\">abstract public <strong>getName</strong> ()</h3> <p>...</p> <h3 id=\"setshared\" class=\"method-signature\">abstract public <strong>setShared</strong> (<em>mixed</em> $shared)</h3> <p>...</p> <h3 id=\"isshared\" class=\"method-signature\">abstract public <strong>isShared</strong> ()</h3> <p>...</p> <h3 id=\"setdefinition\" class=\"method-signature\">abstract public <strong>setDefinition</strong> (<em>mixed</em> $definition)</h3> <p>...</p> <h3 id=\"getdefinition\" class=\"method-signature\">abstract public <strong>getDefinition</strong> ()</h3> <p>...</p> <h3 id=\"resolve\" class=\"method-signature\">abstract public <strong>resolve</strong> ([<em>mixed</em> $parameters], [<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector])</h3> <p>...</p> <h3 id=\"setparameter\" class=\"method-signature\">abstract public <strong>setParameter</strong> (<em>mixed</em> $position, <em>array</em> $parameter)</h3> <p>...</p> <h3 id=\"__set_state\" class=\"method-signature\">abstract public static <strong>__set_state</strong> (<em>array</em> $attributes)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Di_ServiceInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Di_ServiceInterface.html</a>\n  </p>\n</div>\n","api/phalcon_cli_dispatcherinterface":"<h1 id=\"interface-phalcon-cli-dispatcherinterface\">Interface <strong>Phalcon\\Cli\\DispatcherInterface</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_dispatcherinterface\"><em>Phalcon\\DispatcherInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/cli/dispatcherinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"settasksuffix\" class=\"method-signature\">abstract public <strong>setTaskSuffix</strong> (<em>mixed</em> $taskSuffix)</h3> <p>...</p> <h3 id=\"setdefaulttask\" class=\"method-signature\">abstract public <strong>setDefaultTask</strong> (<em>mixed</em> $taskName)</h3> <p>...</p> <h3 id=\"settaskname\" class=\"method-signature\">abstract public <strong>setTaskName</strong> (<em>mixed</em> $taskName)</h3> <p>...</p> <h3 id=\"gettaskname\" class=\"method-signature\">abstract public <strong>getTaskName</strong> ()</h3> <p>...</p> <h3 id=\"getlasttask\" class=\"method-signature\">abstract public <strong>getLastTask</strong> ()</h3> <p>...</p> <h3 id=\"getactivetask\" class=\"method-signature\">abstract public <strong>getActiveTask</strong> ()</h3> <p>...</p> <h3 id=\"setactionsuffix\" class=\"method-signature\">abstract public <strong>setActionSuffix</strong> (<em>mixed</em> $actionSuffix) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"getactionsuffix\" class=\"method-signature\">abstract public <strong>getActionSuffix</strong> () <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"setdefaultnamespace\" class=\"method-signature\">abstract public <strong>setDefaultNamespace</strong> (<em>mixed</em> $defaultNamespace) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"setdefaultaction\" class=\"method-signature\">abstract public <strong>setDefaultAction</strong> (<em>mixed</em> $actionName) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"setnamespacename\" class=\"method-signature\">abstract public <strong>setNamespaceName</strong> (<em>mixed</em> $namespaceName) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"setmodulename\" class=\"method-signature\">abstract public <strong>setModuleName</strong> (<em>mixed</em> $moduleName) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"setactionname\" class=\"method-signature\">abstract public <strong>setActionName</strong> (<em>mixed</em> $actionName) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"getactionname\" class=\"method-signature\">abstract public <strong>getActionName</strong> () <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"setparams\" class=\"method-signature\">abstract public <strong>setParams</strong> (<em>mixed</em> $params) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"getparams\" class=\"method-signature\">abstract public <strong>getParams</strong> () <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"setparam\" class=\"method-signature\">abstract public <strong>setParam</strong> (<em>mixed</em> $param, <em>mixed</em> $value) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"getparam\" class=\"method-signature\">abstract public <strong>getParam</strong> (<em>mixed</em> $param, [<em>mixed</em> $filters]) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"hasparam\" class=\"method-signature\">abstract public <strong>hasParam</strong> (<em>mixed</em> $param) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"isfinished\" class=\"method-signature\">abstract public <strong>isFinished</strong> () <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"getreturnedvalue\" class=\"method-signature\">abstract public <strong>getReturnedValue</strong> () <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"dispatch\" class=\"method-signature\">abstract public <strong>dispatch</strong> () <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"forward\" class=\"method-signature\">abstract public <strong>forward</strong> (<em>mixed</em> $forward) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_DispatcherInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Cli_DispatcherInterface.html</a>\n  </p>\n</div>\n","api/phalcon_diinterface":"<h1 id=\"interface-phalcon-diinterface\">Interface <strong>Phalcon\\DiInterface</strong>\n</h1> <p><em>implements</em> ArrayAccess</p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/diinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"set\" class=\"method-signature\">abstract public <strong>set</strong> (<em>mixed</em> $name, <em>mixed</em> $definition, [<em>mixed</em> $shared])</h3> <p>...</p> <h3 id=\"setshared\" class=\"method-signature\">abstract public <strong>setShared</strong> (<em>mixed</em> $name, <em>mixed</em> $definition)</h3> <p>...</p> <h3 id=\"remove\" class=\"method-signature\">abstract public <strong>remove</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"attempt\" class=\"method-signature\">abstract public <strong>attempt</strong> (<em>mixed</em> $name, <em>mixed</em> $definition, [<em>mixed</em> $shared])</h3> <p>...</p> <h3 id=\"get\" class=\"method-signature\">abstract public <strong>get</strong> (<em>mixed</em> $name, [<em>mixed</em> $parameters])</h3> <p>...</p> <h3 id=\"getshared\" class=\"method-signature\">abstract public <strong>getShared</strong> (<em>mixed</em> $name, [<em>mixed</em> $parameters])</h3> <p>...</p> <h3 id=\"setraw\" class=\"method-signature\">abstract public <strong>setRaw</strong> (<em>mixed</em> $name, <a class=\"reference internal\" href=\"phalcon_di_serviceinterface\"><em>Phalcon\\Di\\ServiceInterface</em></a> $rawDefinition)</h3> <p>...</p> <h3 id=\"getraw\" class=\"method-signature\">abstract public <strong>getRaw</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"getservice\" class=\"method-signature\">abstract public <strong>getService</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"has\" class=\"method-signature\">abstract public <strong>has</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"wasfreshinstance\" class=\"method-signature\">abstract public <strong>wasFreshInstance</strong> ()</h3> <p>...</p> <h3 id=\"getservices\" class=\"method-signature\">abstract public <strong>getServices</strong> ()</h3> <p>...</p> <h3 id=\"setdefault\" class=\"method-signature\">abstract public static <strong>setDefault</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>...</p> <h3 id=\"getdefault\" class=\"method-signature\">abstract public static <strong>getDefault</strong> ()</h3> <p>...</p> <h3 id=\"reset\" class=\"method-signature\">abstract public static <strong>reset</strong> ()</h3> <p>...</p> <h3 id=\"offsetexists\" class=\"method-signature\">abstract public <strong>offsetExists</strong> (<em>mixed</em> $offset) <small>inherited from ArrayAccess</small>\n</h3> <p>...</p> <h3 id=\"offsetget\" class=\"method-signature\">abstract public <strong>offsetGet</strong> (<em>mixed</em> $offset) <small>inherited from ArrayAccess</small>\n</h3> <p>...</p> <h3 id=\"offsetset\" class=\"method-signature\">abstract public <strong>offsetSet</strong> (<em>mixed</em> $offset, <em>mixed</em> $value) <small>inherited from ArrayAccess</small>\n</h3> <p>...</p> <h3 id=\"offsetunset\" class=\"method-signature\">abstract public <strong>offsetUnset</strong> (<em>mixed</em> $offset) <small>inherited from ArrayAccess</small>\n</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_DiInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_DiInterface.html</a>\n  </p>\n</div>\n","api/phalcon_events_eventinterface":"<h1 id=\"interface-phalcon-events-eventinterface\">Interface <strong>Phalcon\\Events\\EventInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/events/eventinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getdata\" class=\"method-signature\">abstract public <strong>getData</strong> ()</h3> <p>...</p> <h3 id=\"setdata\" class=\"method-signature\">abstract public <strong>setData</strong> ([<em>mixed</em> $data])</h3> <p>...</p> <h3 id=\"gettype\" class=\"method-signature\">abstract public <strong>getType</strong> ()</h3> <p>...</p> <h3 id=\"settype\" class=\"method-signature\">abstract public <strong>setType</strong> (<em>mixed</em> $type)</h3> <p>...</p> <h3 id=\"stop\" class=\"method-signature\">abstract public <strong>stop</strong> ()</h3> <p>...</p> <h3 id=\"isstopped\" class=\"method-signature\">abstract public <strong>isStopped</strong> ()</h3> <p>...</p> <h3 id=\"iscancelable\" class=\"method-signature\">abstract public <strong>isCancelable</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Events_EventInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Events_EventInterface.html</a>\n  </p>\n</div>\n","api/phalcon_events_managerinterface":"<h1 id=\"interface-phalcon-events-managerinterface\">Interface <strong>Phalcon\\Events\\ManagerInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/events/managerinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"attach\" class=\"method-signature\">abstract public <strong>attach</strong> (<em>mixed</em> $eventType, <em>mixed</em> $handler)</h3> <p>...</p> <h3 id=\"detach\" class=\"method-signature\">abstract public <strong>detach</strong> (<em>mixed</em> $eventType, <em>mixed</em> $handler)</h3> <p>...</p> <h3 id=\"detachall\" class=\"method-signature\">abstract public <strong>detachAll</strong> ([<em>mixed</em> $type])</h3> <p>...</p> <h3 id=\"fire\" class=\"method-signature\">abstract public <strong>fire</strong> (<em>mixed</em> $eventType, <em>mixed</em> $source, [<em>mixed</em> $data])</h3> <p>...</p> <h3 id=\"getlisteners\" class=\"method-signature\">abstract public <strong>getListeners</strong> (<em>mixed</em> $type)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Events_ManagerInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Events_ManagerInterface.html</a>\n  </p>\n</div>\n","api/phalcon_dispatcherinterface":"<h1 id=\"interface-phalcon-dispatcherinterface\">Interface <strong>Phalcon\\DispatcherInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/dispatcherinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setactionsuffix\" class=\"method-signature\">abstract public <strong>setActionSuffix</strong> (<em>mixed</em> $actionSuffix)</h3> <p>...</p> <h3 id=\"getactionsuffix\" class=\"method-signature\">abstract public <strong>getActionSuffix</strong> ()</h3> <p>...</p> <h3 id=\"setdefaultnamespace\" class=\"method-signature\">abstract public <strong>setDefaultNamespace</strong> (<em>mixed</em> $defaultNamespace)</h3> <p>...</p> <h3 id=\"setdefaultaction\" class=\"method-signature\">abstract public <strong>setDefaultAction</strong> (<em>mixed</em> $actionName)</h3> <p>...</p> <h3 id=\"setnamespacename\" class=\"method-signature\">abstract public <strong>setNamespaceName</strong> (<em>mixed</em> $namespaceName)</h3> <p>...</p> <h3 id=\"setmodulename\" class=\"method-signature\">abstract public <strong>setModuleName</strong> (<em>mixed</em> $moduleName)</h3> <p>...</p> <h3 id=\"setactionname\" class=\"method-signature\">abstract public <strong>setActionName</strong> (<em>mixed</em> $actionName)</h3> <p>...</p> <h3 id=\"getactionname\" class=\"method-signature\">abstract public <strong>getActionName</strong> ()</h3> <p>...</p> <h3 id=\"setparams\" class=\"method-signature\">abstract public <strong>setParams</strong> (<em>mixed</em> $params)</h3> <p>...</p> <h3 id=\"getparams\" class=\"method-signature\">abstract public <strong>getParams</strong> ()</h3> <p>...</p> <h3 id=\"setparam\" class=\"method-signature\">abstract public <strong>setParam</strong> (<em>mixed</em> $param, <em>mixed</em> $value)</h3> <p>...</p> <h3 id=\"getparam\" class=\"method-signature\">abstract public <strong>getParam</strong> (<em>mixed</em> $param, [<em>mixed</em> $filters])</h3> <p>...</p> <h3 id=\"hasparam\" class=\"method-signature\">abstract public <strong>hasParam</strong> (<em>mixed</em> $param)</h3> <p>...</p> <h3 id=\"isfinished\" class=\"method-signature\">abstract public <strong>isFinished</strong> ()</h3> <p>...</p> <h3 id=\"getreturnedvalue\" class=\"method-signature\">abstract public <strong>getReturnedValue</strong> ()</h3> <p>...</p> <h3 id=\"dispatch\" class=\"method-signature\">abstract public <strong>dispatch</strong> ()</h3> <p>...</p> <h3 id=\"forward\" class=\"method-signature\">abstract public <strong>forward</strong> (<em>mixed</em> $forward)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_DispatcherInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_DispatcherInterface.html</a>\n  </p>\n</div>\n","api/phalcon_events_eventsawareinterface":"<h1 id=\"interface-phalcon-events-eventsawareinterface\">Interface <strong>Phalcon\\Events\\EventsAwareInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/events/eventsawareinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"seteventsmanager\" class=\"method-signature\">abstract public <strong>setEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager)</h3> <p>...</p> <h3 id=\"geteventsmanager\" class=\"method-signature\">abstract public <strong>getEventsManager</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Events_EventsAwareInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Events_EventsAwareInterface.html</a>\n  </p>\n</div>\n","api/phalcon_db_dialectinterface":"<h1 id=\"interface-phalcon-db-dialectinterface\">Interface <strong>Phalcon\\Db\\DialectInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/dialectinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"limit\" class=\"method-signature\">abstract public <strong>limit</strong> (<em>mixed</em> $sqlQuery, <em>mixed</em> $number)</h3> <p>...</p> <h3 id=\"forupdate\" class=\"method-signature\">abstract public <strong>forUpdate</strong> (<em>mixed</em> $sqlQuery)</h3> <p>...</p> <h3 id=\"sharedlock\" class=\"method-signature\">abstract public <strong>sharedLock</strong> (<em>mixed</em> $sqlQuery)</h3> <p>...</p> <h3 id=\"select\" class=\"method-signature\">abstract public <strong>select</strong> (<em>array</em> $definition)</h3> <p>...</p> <h3 id=\"getcolumnlist\" class=\"method-signature\">abstract public <strong>getColumnList</strong> (<em>array</em> $columnList)</h3> <p>...</p> <h3 id=\"getcolumndefinition\" class=\"method-signature\">abstract public <strong>getColumnDefinition</strong> (<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column)</h3> <p>...</p> <h3 id=\"addcolumn\" class=\"method-signature\">abstract public <strong>addColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column)</h3> <p>...</p> <h3 id=\"modifycolumn\" class=\"method-signature\">abstract public <strong>modifyColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column, [<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $currentColumn])</h3> <p>...</p> <h3 id=\"dropcolumn\" class=\"method-signature\">abstract public <strong>dropColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $columnName)</h3> <p>...</p> <h3 id=\"addindex\" class=\"method-signature\">abstract public <strong>addIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index)</h3> <p>...</p> <h3 id=\"dropindex\" class=\"method-signature\">abstract public <strong>dropIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $indexName)</h3> <p>...</p> <h3 id=\"addprimarykey\" class=\"method-signature\">abstract public <strong>addPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index)</h3> <p>...</p> <h3 id=\"dropprimarykey\" class=\"method-signature\">abstract public <strong>dropPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName)</h3> <p>...</p> <h3 id=\"addforeignkey\" class=\"method-signature\">abstract public <strong>addForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_referenceinterface\"><em>Phalcon\\Db\\ReferenceInterface</em></a> $reference)</h3> <p>...</p> <h3 id=\"dropforeignkey\" class=\"method-signature\">abstract public <strong>dropForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $referenceName)</h3> <p>...</p> <h3 id=\"createtable\" class=\"method-signature\">abstract public <strong>createTable</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>array</em> $definition)</h3> <p>...</p> <h3 id=\"createview\" class=\"method-signature\">abstract public <strong>createView</strong> (<em>mixed</em> $viewName, <em>array</em> $definition, [<em>mixed</em> $schemaName])</h3> <p>...</p> <h3 id=\"droptable\" class=\"method-signature\">abstract public <strong>dropTable</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName)</h3> <p>...</p> <h3 id=\"dropview\" class=\"method-signature\">abstract public <strong>dropView</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists])</h3> <p>...</p> <h3 id=\"tableexists\" class=\"method-signature\">abstract public <strong>tableExists</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName])</h3> <p>...</p> <h3 id=\"viewexists\" class=\"method-signature\">abstract public <strong>viewExists</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName])</h3> <p>...</p> <h3 id=\"describecolumns\" class=\"method-signature\">abstract public <strong>describeColumns</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>...</p> <h3 id=\"listtables\" class=\"method-signature\">abstract public <strong>listTables</strong> ([<em>mixed</em> $schemaName])</h3> <p>...</p> <h3 id=\"describeindexes\" class=\"method-signature\">abstract public <strong>describeIndexes</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>...</p> <h3 id=\"describereferences\" class=\"method-signature\">abstract public <strong>describeReferences</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>...</p> <h3 id=\"tableoptions\" class=\"method-signature\">abstract public <strong>tableOptions</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>...</p> <h3 id=\"supportssavepoints\" class=\"method-signature\">abstract public <strong>supportsSavepoints</strong> ()</h3> <p>...</p> <h3 id=\"supportsreleasesavepoints\" class=\"method-signature\">abstract public <strong>supportsReleaseSavepoints</strong> ()</h3> <p>...</p> <h3 id=\"createsavepoint\" class=\"method-signature\">abstract public <strong>createSavepoint</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"releasesavepoint\" class=\"method-signature\">abstract public <strong>releaseSavepoint</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"rollbacksavepoint\" class=\"method-signature\">abstract public <strong>rollbackSavepoint</strong> (<em>mixed</em> $name)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_DialectInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_DialectInterface.html</a>\n  </p>\n</div>\n","api/phalcon_flashinterface":"<h1 id=\"interface-phalcon-flashinterface\">Interface <strong>Phalcon\\FlashInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/flashinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"error\" class=\"method-signature\">abstract public <strong>error</strong> (<em>mixed</em> $message)</h3> <p>...</p> <h3 id=\"notice\" class=\"method-signature\">abstract public <strong>notice</strong> (<em>mixed</em> $message)</h3> <p>...</p> <h3 id=\"success\" class=\"method-signature\">abstract public <strong>success</strong> (<em>mixed</em> $message)</h3> <p>...</p> <h3 id=\"warning\" class=\"method-signature\">abstract public <strong>warning</strong> (<em>mixed</em> $message)</h3> <p>...</p> <h3 id=\"message\" class=\"method-signature\">abstract public <strong>message</strong> (<em>mixed</em> $type, <em>mixed</em> $message)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_FlashInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_FlashInterface.html</a>\n  </p>\n</div>\n","api/phalcon_db_referenceinterface":"<h1 id=\"interface-phalcon-db-referenceinterface\">Interface <strong>Phalcon\\Db\\ReferenceInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/referenceinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getname\" class=\"method-signature\">abstract public <strong>getName</strong> ()</h3> <p>...</p> <h3 id=\"getschemaname\" class=\"method-signature\">abstract public <strong>getSchemaName</strong> ()</h3> <p>...</p> <h3 id=\"getreferencedschema\" class=\"method-signature\">abstract public <strong>getReferencedSchema</strong> ()</h3> <p>...</p> <h3 id=\"getcolumns\" class=\"method-signature\">abstract public <strong>getColumns</strong> ()</h3> <p>...</p> <h3 id=\"getreferencedtable\" class=\"method-signature\">abstract public <strong>getReferencedTable</strong> ()</h3> <p>...</p> <h3 id=\"getreferencedcolumns\" class=\"method-signature\">abstract public <strong>getReferencedColumns</strong> ()</h3> <p>...</p> <h3 id=\"getondelete\" class=\"method-signature\">abstract public <strong>getOnDelete</strong> ()</h3> <p>...</p> <h3 id=\"getonupdate\" class=\"method-signature\">abstract public <strong>getOnUpdate</strong> ()</h3> <p>...</p> <h3 id=\"__set_state\" class=\"method-signature\">abstract public static <strong>__set_state</strong> (<em>array</em> $data)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ReferenceInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_ReferenceInterface.html</a>\n  </p>\n</div>\n","api/phalcon_http_request_fileinterface":"<h1 id=\"interface-phalcon-http-request-fileinterface\">Interface <strong>Phalcon\\Http\\Request\\FileInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/http/request/fileinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getsize\" class=\"method-signature\">abstract public <strong>getSize</strong> ()</h3> <p>...</p> <h3 id=\"getname\" class=\"method-signature\">abstract public <strong>getName</strong> ()</h3> <p>...</p> <h3 id=\"gettempname\" class=\"method-signature\">abstract public <strong>getTempName</strong> ()</h3> <p>...</p> <h3 id=\"gettype\" class=\"method-signature\">abstract public <strong>getType</strong> ()</h3> <p>...</p> <h3 id=\"getrealtype\" class=\"method-signature\">abstract public <strong>getRealType</strong> ()</h3> <p>...</p> <h3 id=\"moveto\" class=\"method-signature\">abstract public <strong>moveTo</strong> (<em>mixed</em> $destination)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request_FileInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Request_FileInterface.html</a>\n  </p>\n</div>\n","api/phalcon_escaperinterface":"<h1 id=\"interface-phalcon-escaperinterface\">Interface <strong>Phalcon\\EscaperInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/escaperinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setencoding\" class=\"method-signature\">abstract public <strong>setEncoding</strong> (<em>mixed</em> $encoding)</h3> <p>...</p> <h3 id=\"getencoding\" class=\"method-signature\">abstract public <strong>getEncoding</strong> ()</h3> <p>...</p> <h3 id=\"sethtmlquotetype\" class=\"method-signature\">abstract public <strong>setHtmlQuoteType</strong> (<em>mixed</em> $quoteType)</h3> <p>...</p> <h3 id=\"escapehtml\" class=\"method-signature\">abstract public <strong>escapeHtml</strong> (<em>mixed</em> $text)</h3> <p>...</p> <h3 id=\"escapehtmlattr\" class=\"method-signature\">abstract public <strong>escapeHtmlAttr</strong> (<em>mixed</em> $text)</h3> <p>...</p> <h3 id=\"escapecss\" class=\"method-signature\">abstract public <strong>escapeCss</strong> (<em>mixed</em> $css)</h3> <p>...</p> <h3 id=\"escapejs\" class=\"method-signature\">abstract public <strong>escapeJs</strong> (<em>mixed</em> $js)</h3> <p>...</p> <h3 id=\"escapeurl\" class=\"method-signature\">abstract public <strong>escapeUrl</strong> (<em>mixed</em> $url)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_EscaperInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_EscaperInterface.html</a>\n  </p>\n</div>\n","api/phalcon_filterinterface":"<h1 id=\"interface-phalcon-filterinterface\">Interface <strong>Phalcon\\FilterInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/filterinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"add\" class=\"method-signature\">abstract public <strong>add</strong> (<em>mixed</em> $name, <em>mixed</em> $handler)</h3> <p>...</p> <h3 id=\"sanitize\" class=\"method-signature\">abstract public <strong>sanitize</strong> (<em>mixed</em> $value, <em>mixed</em> $filters)</h3> <p>...</p> <h3 id=\"getfilters\" class=\"method-signature\">abstract public <strong>getFilters</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_FilterInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_FilterInterface.html</a>\n  </p>\n</div>\n","api/phalcon_filter_userfilterinterface":"<h1 id=\"interface-phalcon-filter-userfilterinterface\">Interface <strong>Phalcon\\Filter\\UserFilterInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/filter/userfilterinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"filter\" class=\"method-signature\">abstract public <strong>filter</strong> (<em>mixed</em> $value)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Filter_UserFilterInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Filter_UserFilterInterface.html</a>\n  </p>\n</div>\n","api/phalcon_logger_formatterinterface":"<h1 id=\"interface-phalcon-logger-formatterinterface\">Interface <strong>Phalcon\\Logger\\FormatterInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/formatterinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"format\" class=\"method-signature\">abstract public <strong>format</strong> (<em>mixed</em> $message, <em>mixed</em> $type, <em>mixed</em> $timestamp, [<em>mixed</em> $context])</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_FormatterInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_FormatterInterface.html</a>\n  </p>\n</div>\n","api/phalcon_forms_elementinterface":"<h1 id=\"interface-phalcon-forms-elementinterface\">Interface <strong>Phalcon\\Forms\\ElementInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/forms/elementinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setform\" class=\"method-signature\">abstract public <strong>setForm</strong> (<a class=\"reference internal\" href=\"phalcon_forms_form\"><em>Phalcon\\Forms\\Form</em></a> $form)</h3> <p>...</p> <h3 id=\"getform\" class=\"method-signature\">abstract public <strong>getForm</strong> ()</h3> <p>...</p> <h3 id=\"setname\" class=\"method-signature\">abstract public <strong>setName</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"getname\" class=\"method-signature\">abstract public <strong>getName</strong> ()</h3> <p>...</p> <h3 id=\"setfilters\" class=\"method-signature\">abstract public <strong>setFilters</strong> (<em>mixed</em> $filters)</h3> <p>...</p> <h3 id=\"addfilter\" class=\"method-signature\">abstract public <strong>addFilter</strong> (<em>mixed</em> $filter)</h3> <p>...</p> <h3 id=\"getfilters\" class=\"method-signature\">abstract public <strong>getFilters</strong> ()</h3> <p>...</p> <h3 id=\"addvalidators\" class=\"method-signature\">abstract public <strong>addValidators</strong> (<em>array</em> $validators, [<em>mixed</em> $merge])</h3> <p>...</p> <h3 id=\"addvalidator\" class=\"method-signature\">abstract public <strong>addValidator</strong> (<a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator)</h3> <p>...</p> <h3 id=\"getvalidators\" class=\"method-signature\">abstract public <strong>getValidators</strong> ()</h3> <p>...</p> <h3 id=\"prepareattributes\" class=\"method-signature\">abstract public <strong>prepareAttributes</strong> ([<em>array</em> $attributes], [<em>mixed</em> $useChecked])</h3> <p>...</p> <h3 id=\"setattribute\" class=\"method-signature\">abstract public <strong>setAttribute</strong> (<em>mixed</em> $attribute, <em>mixed</em> $value)</h3> <p>...</p> <h3 id=\"getattribute\" class=\"method-signature\">abstract public <strong>getAttribute</strong> (<em>mixed</em> $attribute, [<em>mixed</em> $defaultValue])</h3> <p>...</p> <h3 id=\"setattributes\" class=\"method-signature\">abstract public <strong>setAttributes</strong> (<em>array</em> $attributes)</h3> <p>...</p> <h3 id=\"getattributes\" class=\"method-signature\">abstract public <strong>getAttributes</strong> ()</h3> <p>...</p> <h3 id=\"setuseroption\" class=\"method-signature\">abstract public <strong>setUserOption</strong> (<em>mixed</em> $option, <em>mixed</em> $value)</h3> <p>...</p> <h3 id=\"getuseroption\" class=\"method-signature\">abstract public <strong>getUserOption</strong> (<em>mixed</em> $option, [<em>mixed</em> $defaultValue])</h3> <p>...</p> <h3 id=\"setuseroptions\" class=\"method-signature\">abstract public <strong>setUserOptions</strong> (<em>array</em> $options)</h3> <p>...</p> <h3 id=\"getuseroptions\" class=\"method-signature\">abstract public <strong>getUserOptions</strong> ()</h3> <p>...</p> <h3 id=\"setlabel\" class=\"method-signature\">abstract public <strong>setLabel</strong> (<em>mixed</em> $label)</h3> <p>...</p> <h3 id=\"getlabel\" class=\"method-signature\">abstract public <strong>getLabel</strong> ()</h3> <p>...</p> <h3 id=\"label\" class=\"method-signature\">abstract public <strong>label</strong> ()</h3> <p>...</p> <h3 id=\"setdefault\" class=\"method-signature\">abstract public <strong>setDefault</strong> (<em>mixed</em> $value)</h3> <p>...</p> <h3 id=\"getdefault\" class=\"method-signature\">abstract public <strong>getDefault</strong> ()</h3> <p>...</p> <h3 id=\"getvalue\" class=\"method-signature\">abstract public <strong>getValue</strong> ()</h3> <p>...</p> <h3 id=\"getmessages\" class=\"method-signature\">abstract public <strong>getMessages</strong> ()</h3> <p>...</p> <h3 id=\"hasmessages\" class=\"method-signature\">abstract public <strong>hasMessages</strong> ()</h3> <p>...</p> <h3 id=\"setmessages\" class=\"method-signature\">abstract public <strong>setMessages</strong> (<a class=\"reference internal\" href=\"phalcon_validation_message_group\"><em>Phalcon\\Validation\\Message\\Group</em></a> $group)</h3> <p>...</p> <h3 id=\"appendmessage\" class=\"method-signature\">abstract public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a> $message)</h3> <p>...</p> <h3 id=\"clear\" class=\"method-signature\">abstract public <strong>clear</strong> ()</h3> <p>...</p> <h3 id=\"render\" class=\"method-signature\">abstract public <strong>render</strong> ([<em>mixed</em> $attributes])</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_ElementInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Forms_ElementInterface.html</a>\n  </p>\n</div>\n","api/phalcon_http_response_headersinterface":"<h1 id=\"interface-phalcon-http-response-headersinterface\">Interface <strong>Phalcon\\Http\\Response\\HeadersInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/http/response/headersinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"set\" class=\"method-signature\">abstract public <strong>set</strong> (<em>mixed</em> $name, <em>mixed</em> $value)</h3> <p>...</p> <h3 id=\"get\" class=\"method-signature\">abstract public <strong>get</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"setraw\" class=\"method-signature\">abstract public <strong>setRaw</strong> (<em>mixed</em> $header)</h3> <p>...</p> <h3 id=\"send\" class=\"method-signature\">abstract public <strong>send</strong> ()</h3> <p>...</p> <h3 id=\"reset\" class=\"method-signature\">abstract public <strong>reset</strong> ()</h3> <p>...</p> <h3 id=\"__set_state\" class=\"method-signature\">abstract public static <strong>__set_state</strong> (<em>array</em> $data)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_HeadersInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_HeadersInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_collection_behaviorinterface":"<h1 id=\"interface-phalcon-mvc-collection-behaviorinterface\">Interface <strong>Phalcon\\Mvc\\Collection\\BehaviorInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection/behaviorinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"notify\" class=\"method-signature\">abstract public <strong>notify</strong> (<em>mixed</em> $type, <a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $collection)</h3> <p>...</p> <h3 id=\"missingmethod\" class=\"method-signature\">abstract public <strong>missingMethod</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $collection, <em>mixed</em> $method, [<em>mixed</em> $arguments])</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_BehaviorInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_BehaviorInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_controllerinterface":"<h1 id=\"interface-phalcon-mvc-controllerinterface\">Interface <strong>Phalcon\\Mvc\\ControllerInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/controllerinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ControllerInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ControllerInterface.html</a>\n  </p>\n</div>\n","api/phalcon_http_requestinterface":"<h1 id=\"interface-phalcon-http-requestinterface\">Interface <strong>Phalcon\\Http\\RequestInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/http/requestinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"get\" class=\"method-signature\">abstract public <strong>get</strong> ([<em>mixed</em> $name], [<em>mixed</em> $filters], [<em>mixed</em> $defaultValue])</h3> <p>...</p> <h3 id=\"getpost\" class=\"method-signature\">abstract public <strong>getPost</strong> ([<em>mixed</em> $name], [<em>mixed</em> $filters], [<em>mixed</em> $defaultValue])</h3> <p>...</p> <h3 id=\"getquery\" class=\"method-signature\">abstract public <strong>getQuery</strong> ([<em>mixed</em> $name], [<em>mixed</em> $filters], [<em>mixed</em> $defaultValue])</h3> <p>...</p> <h3 id=\"getserver\" class=\"method-signature\">abstract public <strong>getServer</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"has\" class=\"method-signature\">abstract public <strong>has</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"haspost\" class=\"method-signature\">abstract public <strong>hasPost</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"hasput\" class=\"method-signature\">abstract public <strong>hasPut</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"hasquery\" class=\"method-signature\">abstract public <strong>hasQuery</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"hasserver\" class=\"method-signature\">abstract public <strong>hasServer</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"getheader\" class=\"method-signature\">abstract public <strong>getHeader</strong> (<em>mixed</em> $header)</h3> <p>...</p> <h3 id=\"getscheme\" class=\"method-signature\">abstract public <strong>getScheme</strong> ()</h3> <p>...</p> <h3 id=\"isajax\" class=\"method-signature\">abstract public <strong>isAjax</strong> ()</h3> <p>...</p> <h3 id=\"issoaprequested\" class=\"method-signature\">abstract public <strong>isSoapRequested</strong> ()</h3> <p>...</p> <h3 id=\"issecurerequest\" class=\"method-signature\">abstract public <strong>isSecureRequest</strong> ()</h3> <p>...</p> <h3 id=\"getrawbody\" class=\"method-signature\">abstract public <strong>getRawBody</strong> ()</h3> <p>...</p> <h3 id=\"getserveraddress\" class=\"method-signature\">abstract public <strong>getServerAddress</strong> ()</h3> <p>...</p> <h3 id=\"getservername\" class=\"method-signature\">abstract public <strong>getServerName</strong> ()</h3> <p>...</p> <h3 id=\"gethttphost\" class=\"method-signature\">abstract public <strong>getHttpHost</strong> ()</h3> <p>...</p> <h3 id=\"getport\" class=\"method-signature\">abstract public <strong>getPort</strong> ()</h3> <p>...</p> <h3 id=\"getclientaddress\" class=\"method-signature\">abstract public <strong>getClientAddress</strong> ([<em>mixed</em> $trustForwardedHeader])</h3> <p>...</p> <h3 id=\"getmethod\" class=\"method-signature\">abstract public <strong>getMethod</strong> ()</h3> <p>...</p> <h3 id=\"getuseragent\" class=\"method-signature\">abstract public <strong>getUserAgent</strong> ()</h3> <p>...</p> <h3 id=\"ismethod\" class=\"method-signature\">abstract public <strong>isMethod</strong> (<em>mixed</em> $methods, [<em>mixed</em> $strict])</h3> <p>...</p> <h3 id=\"ispost\" class=\"method-signature\">abstract public <strong>isPost</strong> ()</h3> <p>...</p> <h3 id=\"isget\" class=\"method-signature\">abstract public <strong>isGet</strong> ()</h3> <p>...</p> <h3 id=\"isput\" class=\"method-signature\">abstract public <strong>isPut</strong> ()</h3> <p>...</p> <h3 id=\"ishead\" class=\"method-signature\">abstract public <strong>isHead</strong> ()</h3> <p>...</p> <h3 id=\"isdelete\" class=\"method-signature\">abstract public <strong>isDelete</strong> ()</h3> <p>...</p> <h3 id=\"isoptions\" class=\"method-signature\">abstract public <strong>isOptions</strong> ()</h3> <p>...</p> <h3 id=\"ispurge\" class=\"method-signature\">abstract public <strong>isPurge</strong> ()</h3> <p>...</p> <h3 id=\"istrace\" class=\"method-signature\">abstract public <strong>isTrace</strong> ()</h3> <p>...</p> <h3 id=\"isconnect\" class=\"method-signature\">abstract public <strong>isConnect</strong> ()</h3> <p>...</p> <h3 id=\"hasfiles\" class=\"method-signature\">abstract public <strong>hasFiles</strong> ([<em>mixed</em> $onlySuccessful])</h3> <p>...</p> <h3 id=\"getuploadedfiles\" class=\"method-signature\">abstract public <strong>getUploadedFiles</strong> ([<em>mixed</em> $onlySuccessful])</h3> <p>...</p> <h3 id=\"gethttpreferer\" class=\"method-signature\">abstract public <strong>getHTTPReferer</strong> ()</h3> <p>...</p> <h3 id=\"getacceptablecontent\" class=\"method-signature\">abstract public <strong>getAcceptableContent</strong> ()</h3> <p>...</p> <h3 id=\"getbestaccept\" class=\"method-signature\">abstract public <strong>getBestAccept</strong> ()</h3> <p>...</p> <h3 id=\"getclientcharsets\" class=\"method-signature\">abstract public <strong>getClientCharsets</strong> ()</h3> <p>...</p> <h3 id=\"getbestcharset\" class=\"method-signature\">abstract public <strong>getBestCharset</strong> ()</h3> <p>...</p> <h3 id=\"getlanguages\" class=\"method-signature\">abstract public <strong>getLanguages</strong> ()</h3> <p>...</p> <h3 id=\"getbestlanguage\" class=\"method-signature\">abstract public <strong>getBestLanguage</strong> ()</h3> <p>...</p> <h3 id=\"getbasicauth\" class=\"method-signature\">abstract public <strong>getBasicAuth</strong> ()</h3> <p>...</p> <h3 id=\"getdigestauth\" class=\"method-signature\">abstract public <strong>getDigestAuth</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Http_RequestInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Http_RequestInterface.html</a>\n  </p>\n</div>\n","api/phalcon_logger_adapterinterface":"<h1 id=\"interface-phalcon-logger-adapterinterface\">Interface <strong>Phalcon\\Logger\\AdapterInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/logger/adapterinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setformatter\" class=\"method-signature\">abstract public <strong>setFormatter</strong> (<a class=\"reference internal\" href=\"phalcon_logger_formatterinterface\"><em>Phalcon\\Logger\\FormatterInterface</em></a> $formatter)</h3> <p>...</p> <h3 id=\"getformatter\" class=\"method-signature\">abstract public <strong>getFormatter</strong> ()</h3> <p>...</p> <h3 id=\"setloglevel\" class=\"method-signature\">abstract public <strong>setLogLevel</strong> (<em>mixed</em> $level)</h3> <p>...</p> <h3 id=\"getloglevel\" class=\"method-signature\">abstract public <strong>getLogLevel</strong> ()</h3> <p>...</p> <h3 id=\"log\" class=\"method-signature\">abstract public <strong>log</strong> (<em>mixed</em> $type, [<em>mixed</em> $message], [<em>array</em> $context])</h3> <p>...</p> <h3 id=\"begin\" class=\"method-signature\">abstract public <strong>begin</strong> ()</h3> <p>...</p> <h3 id=\"commit\" class=\"method-signature\">abstract public <strong>commit</strong> ()</h3> <p>...</p> <h3 id=\"rollback\" class=\"method-signature\">abstract public <strong>rollback</strong> ()</h3> <p>...</p> <h3 id=\"close\" class=\"method-signature\">abstract public <strong>close</strong> ()</h3> <p>...</p> <h3 id=\"debug\" class=\"method-signature\">abstract public <strong>debug</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>...</p> <h3 id=\"error\" class=\"method-signature\">abstract public <strong>error</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>...</p> <h3 id=\"info\" class=\"method-signature\">abstract public <strong>info</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>...</p> <h3 id=\"notice\" class=\"method-signature\">abstract public <strong>notice</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>...</p> <h3 id=\"warning\" class=\"method-signature\">abstract public <strong>warning</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>...</p> <h3 id=\"alert\" class=\"method-signature\">abstract public <strong>alert</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>...</p> <h3 id=\"emergency\" class=\"method-signature\">abstract public <strong>emergency</strong> (<em>mixed</em> $message, [<em>array</em> $context])</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_AdapterInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Logger_AdapterInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_collection_managerinterface":"<h1 id=\"interface-phalcon-mvc-collection-managerinterface\">Interface <strong>Phalcon\\Mvc\\Collection\\ManagerInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collection/managerinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setcustomeventsmanager\" class=\"method-signature\">abstract public <strong>setCustomEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model, <a class=\"reference internal\" href=\"phalcon_events_managerinterface\"><em>Phalcon\\Events\\ManagerInterface</em></a> $eventsManager)</h3> <p>...</p> <h3 id=\"getcustomeventsmanager\" class=\"method-signature\">abstract public <strong>getCustomEventsManager</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"initialize\" class=\"method-signature\">abstract public <strong>initialize</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"isinitialized\" class=\"method-signature\">abstract public <strong>isInitialized</strong> (<em>mixed</em> $modelName)</h3> <p>...</p> <h3 id=\"getlastinitialized\" class=\"method-signature\">abstract public <strong>getLastInitialized</strong> ()</h3> <p>...</p> <h3 id=\"setconnectionservice\" class=\"method-signature\">abstract public <strong>setConnectionService</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model, <em>mixed</em> $connectionService)</h3> <p>...</p> <h3 id=\"useimplicitobjectids\" class=\"method-signature\">abstract public <strong>useImplicitObjectIds</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model, <em>mixed</em> $useImplicitObjectIds)</h3> <p>...</p> <h3 id=\"isusingimplicitobjectids\" class=\"method-signature\">abstract public <strong>isUsingImplicitObjectIds</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"getconnection\" class=\"method-signature\">abstract public <strong>getConnection</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"notifyevent\" class=\"method-signature\">abstract public <strong>notifyEvent</strong> (<em>mixed</em> $eventName, <a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"addbehavior\" class=\"method-signature\">abstract public <strong>addBehavior</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $model, <a class=\"reference internal\" href=\"phalcon_mvc_collection_behaviorinterface\"><em>Phalcon\\Mvc\\Collection\\BehaviorInterface</em></a> $behavior)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_ManagerInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Collection_ManagerInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_micro_collectioninterface":"<h1 id=\"interface-phalcon-mvc-micro-collectioninterface\">Interface <strong>Phalcon\\Mvc\\Micro\\CollectionInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/micro/collectioninterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setprefix\" class=\"method-signature\">abstract public <strong>setPrefix</strong> (<em>mixed</em> $prefix)</h3> <p>...</p> <h3 id=\"getprefix\" class=\"method-signature\">abstract public <strong>getPrefix</strong> ()</h3> <p>...</p> <h3 id=\"gethandlers\" class=\"method-signature\">abstract public <strong>getHandlers</strong> ()</h3> <p>...</p> <h3 id=\"sethandler\" class=\"method-signature\">abstract public <strong>setHandler</strong> (<em>mixed</em> $handler, [<em>mixed</em> $lazy])</h3> <p>...</p> <h3 id=\"setlazy\" class=\"method-signature\">abstract public <strong>setLazy</strong> (<em>mixed</em> $lazy)</h3> <p>...</p> <h3 id=\"islazy\" class=\"method-signature\">abstract public <strong>isLazy</strong> ()</h3> <p>...</p> <h3 id=\"gethandler\" class=\"method-signature\">abstract public <strong>getHandler</strong> ()</h3> <p>...</p> <h3 id=\"map\" class=\"method-signature\">abstract public <strong>map</strong> (<em>mixed</em> $routePattern, <em>mixed</em> $handler, [<em>mixed</em> $name])</h3> <p>...</p> <h3 id=\"get\" class=\"method-signature\">abstract public <strong>get</strong> (<em>mixed</em> $routePattern, <em>mixed</em> $handler, [<em>mixed</em> $name])</h3> <p>...</p> <h3 id=\"post\" class=\"method-signature\">abstract public <strong>post</strong> (<em>mixed</em> $routePattern, <em>mixed</em> $handler, [<em>mixed</em> $name])</h3> <p>...</p> <h3 id=\"put\" class=\"method-signature\">abstract public <strong>put</strong> (<em>mixed</em> $routePattern, <em>mixed</em> $handler, [<em>mixed</em> $name])</h3> <p>...</p> <h3 id=\"patch\" class=\"method-signature\">abstract public <strong>patch</strong> (<em>mixed</em> $routePattern, <em>mixed</em> $handler, [<em>mixed</em> $name])</h3> <p>...</p> <h3 id=\"head\" class=\"method-signature\">abstract public <strong>head</strong> (<em>mixed</em> $routePattern, <em>mixed</em> $handler, [<em>mixed</em> $name])</h3> <p>...</p> <h3 id=\"delete\" class=\"method-signature\">abstract public <strong>delete</strong> (<em>mixed</em> $routePattern, <em>mixed</em> $handler, [<em>mixed</em> $name])</h3> <p>...</p> <h3 id=\"options\" class=\"method-signature\">abstract public <strong>options</strong> (<em>mixed</em> $routePattern, <em>mixed</em> $handler, [<em>mixed</em> $name])</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_CollectionInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_CollectionInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_controller_bindmodelinterface":"<h1 id=\"interface-phalcon-mvc-controller-bindmodelinterface\">Interface <strong>Phalcon\\Mvc\\Controller\\BindModelInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/controller/bindmodelinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getmodelname\" class=\"method-signature\">abstract public static <strong>getModelName</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Controller_BindModelInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Controller_BindModelInterface.html</a>\n  </p>\n</div>\n","api/phalcon_http_cookieinterface":"<h1 id=\"interface-phalcon-http-cookieinterface\">Interface <strong>Phalcon\\Http\\CookieInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/http/cookieinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setvalue\" class=\"method-signature\">abstract public <strong>setValue</strong> (<em>mixed</em> $value)</h3> <p>...</p> <h3 id=\"getvalue\" class=\"method-signature\">abstract public <strong>getValue</strong> ([<em>mixed</em> $filters], [<em>mixed</em> $defaultValue])</h3> <p>...</p> <h3 id=\"send\" class=\"method-signature\">abstract public <strong>send</strong> ()</h3> <p>...</p> <h3 id=\"delete\" class=\"method-signature\">abstract public <strong>delete</strong> ()</h3> <p>...</p> <h3 id=\"useencryption\" class=\"method-signature\">abstract public <strong>useEncryption</strong> (<em>mixed</em> $useEncryption)</h3> <p>...</p> <h3 id=\"isusingencryption\" class=\"method-signature\">abstract public <strong>isUsingEncryption</strong> ()</h3> <p>...</p> <h3 id=\"setexpiration\" class=\"method-signature\">abstract public <strong>setExpiration</strong> (<em>mixed</em> $expire)</h3> <p>...</p> <h3 id=\"getexpiration\" class=\"method-signature\">abstract public <strong>getExpiration</strong> ()</h3> <p>...</p> <h3 id=\"setpath\" class=\"method-signature\">abstract public <strong>setPath</strong> (<em>mixed</em> $path)</h3> <p>...</p> <h3 id=\"getname\" class=\"method-signature\">abstract public <strong>getName</strong> ()</h3> <p>...</p> <h3 id=\"getpath\" class=\"method-signature\">abstract public <strong>getPath</strong> ()</h3> <p>...</p> <h3 id=\"setdomain\" class=\"method-signature\">abstract public <strong>setDomain</strong> (<em>mixed</em> $domain)</h3> <p>...</p> <h3 id=\"getdomain\" class=\"method-signature\">abstract public <strong>getDomain</strong> ()</h3> <p>...</p> <h3 id=\"setsecure\" class=\"method-signature\">abstract public <strong>setSecure</strong> (<em>mixed</em> $secure)</h3> <p>...</p> <h3 id=\"getsecure\" class=\"method-signature\">abstract public <strong>getSecure</strong> ()</h3> <p>...</p> <h3 id=\"sethttponly\" class=\"method-signature\">abstract public <strong>setHttpOnly</strong> (<em>mixed</em> $httpOnly)</h3> <p>...</p> <h3 id=\"gethttponly\" class=\"method-signature\">abstract public <strong>getHttpOnly</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Http_CookieInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Http_CookieInterface.html</a>\n  </p>\n</div>\n","api/phalcon_image_adapterinterface":"<h1 id=\"interface-phalcon-image-adapterinterface\">Interface <strong>Phalcon\\Image\\AdapterInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/image/adapterinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"resize\" class=\"method-signature\">abstract public <strong>resize</strong> ([<em>mixed</em> $width], [<em>mixed</em> $height], [<em>mixed</em> $master])</h3> <p>...</p> <h3 id=\"crop\" class=\"method-signature\">abstract public <strong>crop</strong> (<em>mixed</em> $width, <em>mixed</em> $height, [<em>mixed</em> $offsetX], [<em>mixed</em> $offsetY])</h3> <p>...</p> <h3 id=\"rotate\" class=\"method-signature\">abstract public <strong>rotate</strong> (<em>mixed</em> $degrees)</h3> <p>...</p> <h3 id=\"flip\" class=\"method-signature\">abstract public <strong>flip</strong> (<em>mixed</em> $direction)</h3> <p>...</p> <h3 id=\"sharpen\" class=\"method-signature\">abstract public <strong>sharpen</strong> (<em>mixed</em> $amount)</h3> <p>...</p> <h3 id=\"reflection\" class=\"method-signature\">abstract public <strong>reflection</strong> (<em>mixed</em> $height, [<em>mixed</em> $opacity], [<em>mixed</em> $fadeIn])</h3> <p>...</p> <h3 id=\"watermark\" class=\"method-signature\">abstract public <strong>watermark</strong> (<a class=\"reference internal\" href=\"phalcon_image_adapter\"><em>Phalcon\\Image\\Adapter</em></a> $watermark, [<em>mixed</em> $offsetX], [<em>mixed</em> $offsetY], [<em>mixed</em> $opacity])</h3> <p>...</p> <h3 id=\"text\" class=\"method-signature\">abstract public <strong>text</strong> (<em>mixed</em> $text, [<em>mixed</em> $offsetX], [<em>mixed</em> $offsetY], [<em>mixed</em> $opacity], [<em>mixed</em> $color], [<em>mixed</em> $size], [<em>mixed</em> $fontfile])</h3> <p>...</p> <h3 id=\"mask\" class=\"method-signature\">abstract public <strong>mask</strong> (<a class=\"reference internal\" href=\"phalcon_image_adapter\"><em>Phalcon\\Image\\Adapter</em></a> $watermark)</h3> <p>...</p> <h3 id=\"background\" class=\"method-signature\">abstract public <strong>background</strong> (<em>mixed</em> $color, [<em>mixed</em> $opacity])</h3> <p>...</p> <h3 id=\"blur\" class=\"method-signature\">abstract public <strong>blur</strong> (<em>mixed</em> $radius)</h3> <p>...</p> <h3 id=\"pixelate\" class=\"method-signature\">abstract public <strong>pixelate</strong> (<em>mixed</em> $amount)</h3> <p>...</p> <h3 id=\"save\" class=\"method-signature\">abstract public <strong>save</strong> ([<em>mixed</em> $file], [<em>mixed</em> $quality])</h3> <p>...</p> <h3 id=\"render\" class=\"method-signature\">abstract public <strong>render</strong> ([<em>mixed</em> $ext], [<em>mixed</em> $quality])</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Image_AdapterInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Image_AdapterInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_collectioninterface":"<h1 id=\"interface-phalcon-mvc-collectioninterface\">Interface <strong>Phalcon\\Mvc\\CollectionInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/collectioninterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setid\" class=\"method-signature\">abstract public <strong>setId</strong> (<em>mixed</em> $id)</h3> <p>...</p> <h3 id=\"getid\" class=\"method-signature\">abstract public <strong>getId</strong> ()</h3> <p>...</p> <h3 id=\"getreservedattributes\" class=\"method-signature\">abstract public <strong>getReservedAttributes</strong> ()</h3> <p>...</p> <h3 id=\"getsource\" class=\"method-signature\">abstract public <strong>getSource</strong> ()</h3> <p>...</p> <h3 id=\"setconnectionservice\" class=\"method-signature\">abstract public <strong>setConnectionService</strong> (<em>mixed</em> $connectionService)</h3> <p>...</p> <h3 id=\"getconnection\" class=\"method-signature\">abstract public <strong>getConnection</strong> ()</h3> <p>...</p> <h3 id=\"cloneresult\" class=\"method-signature\">abstract public static <strong>cloneResult</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_collectioninterface\"><em>Phalcon\\Mvc\\CollectionInterface</em></a> $collection, <em>array</em> $document)</h3> <p>...</p> <h3 id=\"fireevent\" class=\"method-signature\">abstract public <strong>fireEvent</strong> (<em>mixed</em> $eventName)</h3> <p>...</p> <h3 id=\"fireeventcancel\" class=\"method-signature\">abstract public <strong>fireEventCancel</strong> (<em>mixed</em> $eventName)</h3> <p>...</p> <h3 id=\"validationhasfailed\" class=\"method-signature\">abstract public <strong>validationHasFailed</strong> ()</h3> <p>...</p> <h3 id=\"getmessages\" class=\"method-signature\">abstract public <strong>getMessages</strong> ()</h3> <p>...</p> <h3 id=\"appendmessage\" class=\"method-signature\">abstract public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_messageinterface\"><em>Phalcon\\Mvc\\Model\\MessageInterface</em></a> $message)</h3> <p>...</p> <h3 id=\"save\" class=\"method-signature\">abstract public <strong>save</strong> ()</h3> <p>...</p> <h3 id=\"findbyid\" class=\"method-signature\">abstract public static <strong>findById</strong> (<em>mixed</em> $id)</h3> <p>...</p> <h3 id=\"findfirst\" class=\"method-signature\">abstract public static <strong>findFirst</strong> ([<em>array</em> $parameters])</h3> <p>...</p> <h3 id=\"find\" class=\"method-signature\">abstract public static <strong>find</strong> ([<em>array</em> $parameters])</h3> <p>...</p> <h3 id=\"count\" class=\"method-signature\">abstract public static <strong>count</strong> ([<em>array</em> $parameters])</h3> <p>...</p> <h3 id=\"delete\" class=\"method-signature\">abstract public <strong>delete</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_CollectionInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_CollectionInterface.html</a>\n  </p>\n</div>\n","api/phalcon_http_responseinterface":"<h1 id=\"interface-phalcon-http-responseinterface\">Interface <strong>Phalcon\\Http\\ResponseInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/http/responseinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setstatuscode\" class=\"method-signature\">abstract public <strong>setStatusCode</strong> (<em>mixed</em> $code, [<em>mixed</em> $message])</h3> <p>...</p> <h3 id=\"getheaders\" class=\"method-signature\">abstract public <strong>getHeaders</strong> ()</h3> <p>...</p> <h3 id=\"setheader\" class=\"method-signature\">abstract public <strong>setHeader</strong> (<em>mixed</em> $name, <em>mixed</em> $value)</h3> <p>...</p> <h3 id=\"setrawheader\" class=\"method-signature\">abstract public <strong>setRawHeader</strong> (<em>mixed</em> $header)</h3> <p>...</p> <h3 id=\"resetheaders\" class=\"method-signature\">abstract public <strong>resetHeaders</strong> ()</h3> <p>...</p> <h3 id=\"setexpires\" class=\"method-signature\">abstract public <strong>setExpires</strong> (<em>DateTime</em> $datetime)</h3> <p>...</p> <h3 id=\"setnotmodified\" class=\"method-signature\">abstract public <strong>setNotModified</strong> ()</h3> <p>...</p> <h3 id=\"setcontenttype\" class=\"method-signature\">abstract public <strong>setContentType</strong> (<em>mixed</em> $contentType, [<em>mixed</em> $charset])</h3> <p>...</p> <h3 id=\"setcontentlength\" class=\"method-signature\">abstract public <strong>setContentLength</strong> (<em>mixed</em> $contentLength)</h3> <p>...</p> <h3 id=\"redirect\" class=\"method-signature\">abstract public <strong>redirect</strong> ([<em>mixed</em> $location], [<em>mixed</em> $externalRedirect], [<em>mixed</em> $statusCode])</h3> <p>...</p> <h3 id=\"setcontent\" class=\"method-signature\">abstract public <strong>setContent</strong> (<em>mixed</em> $content)</h3> <p>...</p> <h3 id=\"setjsoncontent\" class=\"method-signature\">abstract public <strong>setJsonContent</strong> (<em>mixed</em> $content)</h3> <p>...</p> <h3 id=\"appendcontent\" class=\"method-signature\">abstract public <strong>appendContent</strong> (<em>mixed</em> $content)</h3> <p>...</p> <h3 id=\"getcontent\" class=\"method-signature\">abstract public <strong>getContent</strong> ()</h3> <p>...</p> <h3 id=\"sendheaders\" class=\"method-signature\">abstract public <strong>sendHeaders</strong> ()</h3> <p>...</p> <h3 id=\"sendcookies\" class=\"method-signature\">abstract public <strong>sendCookies</strong> ()</h3> <p>...</p> <h3 id=\"send\" class=\"method-signature\">abstract public <strong>send</strong> ()</h3> <p>...</p> <h3 id=\"setfiletosend\" class=\"method-signature\">abstract public <strong>setFileToSend</strong> (<em>mixed</em> $filePath, [<em>mixed</em> $attachmentName])</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Http_ResponseInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Http_ResponseInterface.html</a>\n  </p>\n</div>\n","api/phalcon_http_response_cookiesinterface":"<h1 id=\"interface-phalcon-http-response-cookiesinterface\">Interface <strong>Phalcon\\Http\\Response\\CookiesInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/http/response/cookiesinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"useencryption\" class=\"method-signature\">abstract public <strong>useEncryption</strong> (<em>mixed</em> $useEncryption)</h3> <p>...</p> <h3 id=\"isusingencryption\" class=\"method-signature\">abstract public <strong>isUsingEncryption</strong> ()</h3> <p>...</p> <h3 id=\"set\" class=\"method-signature\">abstract public <strong>set</strong> (<em>mixed</em> $name, [<em>mixed</em> $value], [<em>mixed</em> $expire], [<em>mixed</em> $path], [<em>mixed</em> $secure], [<em>mixed</em> $domain], [<em>mixed</em> $httpOnly])</h3> <p>...</p> <h3 id=\"get\" class=\"method-signature\">abstract public <strong>get</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"has\" class=\"method-signature\">abstract public <strong>has</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"delete\" class=\"method-signature\">abstract public <strong>delete</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"send\" class=\"method-signature\">abstract public <strong>send</strong> ()</h3> <p>...</p> <h3 id=\"reset\" class=\"method-signature\">abstract public <strong>reset</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_CookiesInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Http_Response_CookiesInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_entityinterface":"<h1 id=\"interface-phalcon-mvc-entityinterface\">Interface <strong>Phalcon\\Mvc\\EntityInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/entityinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"readattribute\" class=\"method-signature\">abstract public <strong>readAttribute</strong> (<em>mixed</em> $attribute)</h3> <p>...</p> <h3 id=\"writeattribute\" class=\"method-signature\">abstract public <strong>writeAttribute</strong> (<em>mixed</em> $attribute, <em>mixed</em> $value)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_EntityInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_EntityInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_metadata_strategyinterface":"<h1 id=\"interface-phalcon-mvc-model-metadata-strategyinterface\">Interface <strong>Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadata/strategyinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getmetadata\" class=\"method-signature\">abstract public <strong>getMetaData</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>...</p> <h3 id=\"getcolumnmaps\" class=\"method-signature\">abstract public <strong>getColumnMaps</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_StrategyInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaData_StrategyInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_queryinterface":"<h1 id=\"interface-phalcon-mvc-model-queryinterface\">Interface <strong>Phalcon\\Mvc\\Model\\QueryInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/queryinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"parse\" class=\"method-signature\">abstract public <strong>parse</strong> ()</h3> <p>...</p> <h3 id=\"cache\" class=\"method-signature\">abstract public <strong>cache</strong> (<em>mixed</em> $cacheOptions)</h3> <p>...</p> <h3 id=\"getcacheoptions\" class=\"method-signature\">abstract public <strong>getCacheOptions</strong> ()</h3> <p>...</p> <h3 id=\"setuniquerow\" class=\"method-signature\">abstract public <strong>setUniqueRow</strong> (<em>mixed</em> $uniqueRow)</h3> <p>...</p> <h3 id=\"getuniquerow\" class=\"method-signature\">abstract public <strong>getUniqueRow</strong> ()</h3> <p>...</p> <h3 id=\"execute\" class=\"method-signature\">abstract public <strong>execute</strong> ([<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes])</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_QueryInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_QueryInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_query_builderinterface":"<h1 id=\"interface-phalcon-mvc-model-query-builderinterface\">Interface <strong>Phalcon\\Mvc\\Model\\Query\\BuilderInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/query/builderinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"constants\">Constants</h2> <h3 id=\"operator_or\" class=\"method-signature\">\n<em>string</em> <strong>OPERATOR_OR</strong>\n</h3> <h3 id=\"operator_and\" class=\"method-signature\">\n<em>string</em> <strong>OPERATOR_AND</strong>\n</h3>   <h2 id=\"methods\">Methods</h2> <h3 id=\"columns\" class=\"method-signature\">abstract public <strong>columns</strong> (<em>mixed</em> $columns)</h3> <p>...</p> <h3 id=\"getcolumns\" class=\"method-signature\">abstract public <strong>getColumns</strong> ()</h3> <p>...</p> <h3 id=\"from\" class=\"method-signature\">abstract public <strong>from</strong> (<em>mixed</em> $models)</h3> <p>...</p> <h3 id=\"addfrom\" class=\"method-signature\">abstract public <strong>addFrom</strong> (<em>mixed</em> $model, [<em>mixed</em> $alias])</h3> <p>...</p> <h3 id=\"getfrom\" class=\"method-signature\">abstract public <strong>getFrom</strong> ()</h3> <p>...</p> <h3 id=\"join\" class=\"method-signature\">abstract public <strong>join</strong> (<em>mixed</em> $model, [<em>mixed</em> $conditions], [<em>mixed</em> $alias])</h3> <p>...</p> <h3 id=\"innerjoin\" class=\"method-signature\">abstract public <strong>innerJoin</strong> (<em>mixed</em> $model, [<em>mixed</em> $conditions], [<em>mixed</em> $alias])</h3> <p>...</p> <h3 id=\"leftjoin\" class=\"method-signature\">abstract public <strong>leftJoin</strong> (<em>mixed</em> $model, [<em>mixed</em> $conditions], [<em>mixed</em> $alias])</h3> <p>...</p> <h3 id=\"rightjoin\" class=\"method-signature\">abstract public <strong>rightJoin</strong> (<em>mixed</em> $model, [<em>mixed</em> $conditions], [<em>mixed</em> $alias])</h3> <p>...</p> <h3 id=\"getjoins\" class=\"method-signature\">abstract public <strong>getJoins</strong> ()</h3> <p>...</p> <h3 id=\"where\" class=\"method-signature\">abstract public <strong>where</strong> (<em>mixed</em> $conditions, [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes])</h3> <p>...</p> <h3 id=\"andwhere\" class=\"method-signature\">abstract public <strong>andWhere</strong> (<em>mixed</em> $conditions, [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes])</h3> <p>...</p> <h3 id=\"orwhere\" class=\"method-signature\">abstract public <strong>orWhere</strong> (<em>mixed</em> $conditions, [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes])</h3> <p>...</p> <h3 id=\"betweenwhere\" class=\"method-signature\">abstract public <strong>betweenWhere</strong> (<em>mixed</em> $expr, <em>mixed</em> $minimum, <em>mixed</em> $maximum, [<em>mixed</em> $operator])</h3> <p>...</p> <h3 id=\"notbetweenwhere\" class=\"method-signature\">abstract public <strong>notBetweenWhere</strong> (<em>mixed</em> $expr, <em>mixed</em> $minimum, <em>mixed</em> $maximum, [<em>mixed</em> $operator])</h3> <p>...</p> <h3 id=\"inwhere\" class=\"method-signature\">abstract public <strong>inWhere</strong> (<em>mixed</em> $expr, <em>array</em> $values, [<em>mixed</em> $operator])</h3> <p>...</p> <h3 id=\"notinwhere\" class=\"method-signature\">abstract public <strong>notInWhere</strong> (<em>mixed</em> $expr, <em>array</em> $values, [<em>mixed</em> $operator])</h3> <p>...</p> <h3 id=\"getwhere\" class=\"method-signature\">abstract public <strong>getWhere</strong> ()</h3> <p>...</p> <h3 id=\"orderby\" class=\"method-signature\">abstract public <strong>orderBy</strong> (<em>mixed</em> $orderBy)</h3> <p>...</p> <h3 id=\"getorderby\" class=\"method-signature\">abstract public <strong>getOrderBy</strong> ()</h3> <p>...</p> <h3 id=\"having\" class=\"method-signature\">abstract public <strong>having</strong> (<em>mixed</em> $having)</h3> <p>...</p> <h3 id=\"gethaving\" class=\"method-signature\">abstract public <strong>getHaving</strong> ()</h3> <p>...</p> <h3 id=\"limit\" class=\"method-signature\">abstract public <strong>limit</strong> (<em>mixed</em> $limit, [<em>mixed</em> $offset])</h3> <p>...</p> <h3 id=\"getlimit\" class=\"method-signature\">abstract public <strong>getLimit</strong> ()</h3> <p>...</p> <h3 id=\"groupby\" class=\"method-signature\">abstract public <strong>groupBy</strong> (<em>mixed</em> $group)</h3> <p>...</p> <h3 id=\"getgroupby\" class=\"method-signature\">abstract public <strong>getGroupBy</strong> ()</h3> <p>...</p> <h3 id=\"getphql\" class=\"method-signature\">abstract public <strong>getPhql</strong> ()</h3> <p>...</p> <h3 id=\"getquery\" class=\"method-signature\">abstract public <strong>getQuery</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_BuilderInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_BuilderInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_query_statusinterface":"<h1 id=\"interface-phalcon-mvc-model-query-statusinterface\">Interface <strong>Phalcon\\Mvc\\Model\\Query\\StatusInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/query/statusinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getmodel\" class=\"method-signature\">abstract public <strong>getModel</strong> ()</h3> <p>...</p> <h3 id=\"getmessages\" class=\"method-signature\">abstract public <strong>getMessages</strong> ()</h3> <p>...</p> <h3 id=\"success\" class=\"method-signature\">abstract public <strong>success</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_StatusInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Query_StatusInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_messageinterface":"<h1 id=\"interface-phalcon-mvc-model-messageinterface\">Interface <strong>Phalcon\\Mvc\\Model\\MessageInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/messageinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"settype\" class=\"method-signature\">abstract public <strong>setType</strong> (<em>mixed</em> $type)</h3> <p>...</p> <h3 id=\"gettype\" class=\"method-signature\">abstract public <strong>getType</strong> ()</h3> <p>...</p> <h3 id=\"setmessage\" class=\"method-signature\">abstract public <strong>setMessage</strong> (<em>mixed</em> $message)</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">abstract public <strong>getMessage</strong> ()</h3> <p>...</p> <h3 id=\"setfield\" class=\"method-signature\">abstract public <strong>setField</strong> (<em>mixed</em> $field)</h3> <p>...</p> <h3 id=\"getfield\" class=\"method-signature\">abstract public <strong>getField</strong> ()</h3> <p>...</p> <h3 id=\"__tostring\" class=\"method-signature\">abstract public <strong>__toString</strong> ()</h3> <p>...</p> <h3 id=\"__set_state\" class=\"method-signature\">abstract public static <strong>__set_state</strong> (<em>array</em> $message)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MessageInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MessageInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_resultinterface":"<h1 id=\"interface-phalcon-mvc-model-resultinterface\">Interface <strong>Phalcon\\Mvc\\Model\\ResultInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/resultinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setdirtystate\" class=\"method-signature\">abstract public <strong>setDirtyState</strong> (<em>mixed</em> $dirtyState)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ResultInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ResultInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_modelinterface":"<h1 id=\"interface-phalcon-mvc-modelinterface\">Interface <strong>Phalcon\\Mvc\\ModelInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/modelinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"settransaction\" class=\"method-signature\">abstract public <strong>setTransaction</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_transactioninterface\"><em>Phalcon\\Mvc\\Model\\TransactionInterface</em></a> $transaction)</h3> <p>...</p> <h3 id=\"getsource\" class=\"method-signature\">abstract public <strong>getSource</strong> ()</h3> <p>...</p> <h3 id=\"getschema\" class=\"method-signature\">abstract public <strong>getSchema</strong> ()</h3> <p>...</p> <h3 id=\"setconnectionservice\" class=\"method-signature\">abstract public <strong>setConnectionService</strong> (<em>mixed</em> $connectionService)</h3> <p>...</p> <h3 id=\"setwriteconnectionservice\" class=\"method-signature\">abstract public <strong>setWriteConnectionService</strong> (<em>mixed</em> $connectionService)</h3> <p>...</p> <h3 id=\"setreadconnectionservice\" class=\"method-signature\">abstract public <strong>setReadConnectionService</strong> (<em>mixed</em> $connectionService)</h3> <p>...</p> <h3 id=\"getreadconnectionservice\" class=\"method-signature\">abstract public <strong>getReadConnectionService</strong> ()</h3> <p>...</p> <h3 id=\"getwriteconnectionservice\" class=\"method-signature\">abstract public <strong>getWriteConnectionService</strong> ()</h3> <p>...</p> <h3 id=\"getreadconnection\" class=\"method-signature\">abstract public <strong>getReadConnection</strong> ()</h3> <p>...</p> <h3 id=\"getwriteconnection\" class=\"method-signature\">abstract public <strong>getWriteConnection</strong> ()</h3> <p>...</p> <h3 id=\"setdirtystate\" class=\"method-signature\">abstract public <strong>setDirtyState</strong> (<em>mixed</em> $dirtyState)</h3> <p>...</p> <h3 id=\"getdirtystate\" class=\"method-signature\">abstract public <strong>getDirtyState</strong> ()</h3> <p>...</p> <h3 id=\"assign\" class=\"method-signature\">abstract public <strong>assign</strong> (<em>array</em> $data, [<em>mixed</em> $dataColumnMap], [<em>mixed</em> $whiteList])</h3> <p>...</p> <h3 id=\"cloneresultmap\" class=\"method-signature\">abstract public static <strong>cloneResultMap</strong> (<em>mixed</em> $base, <em>array</em> $data, <em>mixed</em> $columnMap, [<em>mixed</em> $dirtyState], [<em>mixed</em> $keepSnapshots])</h3> <p>...</p> <h3 id=\"cloneresult\" class=\"method-signature\">abstract public static <strong>cloneResult</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $base, <em>array</em> $data, [<em>mixed</em> $dirtyState])</h3> <p>...</p> <h3 id=\"cloneresultmaphydrate\" class=\"method-signature\">abstract public static <strong>cloneResultMapHydrate</strong> (<em>array</em> $data, <em>mixed</em> $columnMap, <em>mixed</em> $hydrationMode)</h3> <p>...</p> <h3 id=\"find\" class=\"method-signature\">abstract public static <strong>find</strong> ([<em>mixed</em> $parameters])</h3> <p>...</p> <h3 id=\"findfirst\" class=\"method-signature\">abstract public static <strong>findFirst</strong> ([<em>mixed</em> $parameters])</h3> <p>...</p> <h3 id=\"query\" class=\"method-signature\">abstract public static <strong>query</strong> ([<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector])</h3> <p>...</p> <h3 id=\"count\" class=\"method-signature\">abstract public static <strong>count</strong> ([<em>mixed</em> $parameters])</h3> <p>...</p> <h3 id=\"sum\" class=\"method-signature\">abstract public static <strong>sum</strong> ([<em>mixed</em> $parameters])</h3> <p>...</p> <h3 id=\"maximum\" class=\"method-signature\">abstract public static <strong>maximum</strong> ([<em>mixed</em> $parameters])</h3> <p>...</p> <h3 id=\"minimum\" class=\"method-signature\">abstract public static <strong>minimum</strong> ([<em>mixed</em> $parameters])</h3> <p>...</p> <h3 id=\"average\" class=\"method-signature\">abstract public static <strong>average</strong> ([<em>mixed</em> $parameters])</h3> <p>...</p> <h3 id=\"fireevent\" class=\"method-signature\">abstract public <strong>fireEvent</strong> (<em>mixed</em> $eventName)</h3> <p>...</p> <h3 id=\"fireeventcancel\" class=\"method-signature\">abstract public <strong>fireEventCancel</strong> (<em>mixed</em> $eventName)</h3> <p>...</p> <h3 id=\"appendmessage\" class=\"method-signature\">abstract public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_messageinterface\"><em>Phalcon\\Mvc\\Model\\MessageInterface</em></a> $message)</h3> <p>...</p> <h3 id=\"validationhasfailed\" class=\"method-signature\">abstract public <strong>validationHasFailed</strong> ()</h3> <p>...</p> <h3 id=\"getmessages\" class=\"method-signature\">abstract public <strong>getMessages</strong> ()</h3> <p>...</p> <h3 id=\"save\" class=\"method-signature\">abstract public <strong>save</strong> ([<em>mixed</em> $data], [<em>mixed</em> $whiteList])</h3> <p>...</p> <h3 id=\"create\" class=\"method-signature\">abstract public <strong>create</strong> ([<em>mixed</em> $data], [<em>mixed</em> $whiteList])</h3> <p>...</p> <h3 id=\"update\" class=\"method-signature\">abstract public <strong>update</strong> ([<em>mixed</em> $data], [<em>mixed</em> $whiteList])</h3> <p>...</p> <h3 id=\"delete\" class=\"method-signature\">abstract public <strong>delete</strong> ()</h3> <p>...</p> <h3 id=\"getoperationmade\" class=\"method-signature\">abstract public <strong>getOperationMade</strong> ()</h3> <p>...</p> <h3 id=\"refresh\" class=\"method-signature\">abstract public <strong>refresh</strong> ()</h3> <p>...</p> <h3 id=\"skipoperation\" class=\"method-signature\">abstract public <strong>skipOperation</strong> (<em>mixed</em> $skip)</h3> <p>...</p> <h3 id=\"getrelated\" class=\"method-signature\">abstract public <strong>getRelated</strong> (<em>mixed</em> $alias, [<em>mixed</em> $arguments])</h3> <p>...</p> <h3 id=\"setsnapshotdata\" class=\"method-signature\">abstract public <strong>setSnapshotData</strong> (<em>array</em> $data, [<em>mixed</em> $columnMap])</h3> <p>...</p> <h3 id=\"reset\" class=\"method-signature\">abstract public <strong>reset</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ModelInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ModelInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_metadatainterface":"<h1 id=\"interface-phalcon-mvc-model-metadatainterface\">Interface <strong>Phalcon\\Mvc\\Model\\MetaDataInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/metadatainterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setstrategy\" class=\"method-signature\">abstract public <strong>setStrategy</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_metadata_strategyinterface\"><em>Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface</em></a> $strategy)</h3> <p>...</p> <h3 id=\"getstrategy\" class=\"method-signature\">abstract public <strong>getStrategy</strong> ()</h3> <p>...</p> <h3 id=\"readmetadata\" class=\"method-signature\">abstract public <strong>readMetaData</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"readmetadataindex\" class=\"method-signature\">abstract public <strong>readMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index)</h3> <p>...</p> <h3 id=\"writemetadataindex\" class=\"method-signature\">abstract public <strong>writeMetaDataIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index, <em>mixed</em> $data)</h3> <p>...</p> <h3 id=\"readcolumnmap\" class=\"method-signature\">abstract public <strong>readColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"readcolumnmapindex\" class=\"method-signature\">abstract public <strong>readColumnMapIndex</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $index)</h3> <p>...</p> <h3 id=\"getattributes\" class=\"method-signature\">abstract public <strong>getAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"getprimarykeyattributes\" class=\"method-signature\">abstract public <strong>getPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"getnonprimarykeyattributes\" class=\"method-signature\">abstract public <strong>getNonPrimaryKeyAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"getnotnullattributes\" class=\"method-signature\">abstract public <strong>getNotNullAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"getdatatypes\" class=\"method-signature\">abstract public <strong>getDataTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"getdatatypesnumeric\" class=\"method-signature\">abstract public <strong>getDataTypesNumeric</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"getidentityfield\" class=\"method-signature\">abstract public <strong>getIdentityField</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"getbindtypes\" class=\"method-signature\">abstract public <strong>getBindTypes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"getautomaticcreateattributes\" class=\"method-signature\">abstract public <strong>getAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"getautomaticupdateattributes\" class=\"method-signature\">abstract public <strong>getAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"setautomaticcreateattributes\" class=\"method-signature\">abstract public <strong>setAutomaticCreateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes)</h3> <p>...</p> <h3 id=\"setautomaticupdateattributes\" class=\"method-signature\">abstract public <strong>setAutomaticUpdateAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes)</h3> <p>...</p> <h3 id=\"setemptystringattributes\" class=\"method-signature\">abstract public <strong>setEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>array</em> $attributes)</h3> <p>...</p> <h3 id=\"getemptystringattributes\" class=\"method-signature\">abstract public <strong>getEmptyStringAttributes</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"getdefaultvalues\" class=\"method-signature\">abstract public <strong>getDefaultValues</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"getcolumnmap\" class=\"method-signature\">abstract public <strong>getColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"getreversecolumnmap\" class=\"method-signature\">abstract public <strong>getReverseColumnMap</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"hasattribute\" class=\"method-signature\">abstract public <strong>hasAttribute</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $attribute)</h3> <p>...</p> <h3 id=\"isempty\" class=\"method-signature\">abstract public <strong>isEmpty</strong> ()</h3> <p>...</p> <h3 id=\"reset\" class=\"method-signature\">abstract public <strong>reset</strong> ()</h3> <p>...</p> <h3 id=\"read\" class=\"method-signature\">abstract public <strong>read</strong> (<em>mixed</em> $key)</h3> <p>...</p> <h3 id=\"write\" class=\"method-signature\">abstract public <strong>write</strong> (<em>mixed</em> $key, <em>mixed</em> $data)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaDataInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_MetaDataInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_relationinterface":"<h1 id=\"interface-phalcon-mvc-model-relationinterface\">Interface <strong>Phalcon\\Mvc\\Model\\RelationInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/relationinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setintermediaterelation\" class=\"method-signature\">abstract public <strong>setIntermediateRelation</strong> (<em>mixed</em> $intermediateFields, <em>mixed</em> $intermediateModel, <em>mixed</em> $intermediateReferencedFields)</h3> <p>...</p> <h3 id=\"isreusable\" class=\"method-signature\">abstract public <strong>isReusable</strong> ()</h3> <p>...</p> <h3 id=\"gettype\" class=\"method-signature\">abstract public <strong>getType</strong> ()</h3> <p>...</p> <h3 id=\"getreferencedmodel\" class=\"method-signature\">abstract public <strong>getReferencedModel</strong> ()</h3> <p>...</p> <h3 id=\"getfields\" class=\"method-signature\">abstract public <strong>getFields</strong> ()</h3> <p>...</p> <h3 id=\"getreferencedfields\" class=\"method-signature\">abstract public <strong>getReferencedFields</strong> ()</h3> <p>...</p> <h3 id=\"getoptions\" class=\"method-signature\">abstract public <strong>getOptions</strong> ()</h3> <p>...</p> <h3 id=\"getoption\" class=\"method-signature\">abstract public <strong>getOption</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"isforeignkey\" class=\"method-signature\">abstract public <strong>isForeignKey</strong> ()</h3> <p>...</p> <h3 id=\"getforeignkey\" class=\"method-signature\">abstract public <strong>getForeignKey</strong> ()</h3> <p>...</p> <h3 id=\"isthrough\" class=\"method-signature\">abstract public <strong>isThrough</strong> ()</h3> <p>...</p> <h3 id=\"getintermediatefields\" class=\"method-signature\">abstract public <strong>getIntermediateFields</strong> ()</h3> <p>...</p> <h3 id=\"getintermediatemodel\" class=\"method-signature\">abstract public <strong>getIntermediateModel</strong> ()</h3> <p>...</p> <h3 id=\"getintermediatereferencedfields\" class=\"method-signature\">abstract public <strong>getIntermediateReferencedFields</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_RelationInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_RelationInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_managerinterface":"<h1 id=\"interface-phalcon-mvc-model-managerinterface\">Interface <strong>Phalcon\\Mvc\\Model\\ManagerInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/managerinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"initialize\" class=\"method-signature\">abstract public <strong>initialize</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"setmodelsource\" class=\"method-signature\">abstract public <strong>setModelSource</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $source)</h3> <p>...</p> <h3 id=\"getmodelsource\" class=\"method-signature\">abstract public <strong>getModelSource</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"setmodelschema\" class=\"method-signature\">abstract public <strong>setModelSchema</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $schema)</h3> <p>...</p> <h3 id=\"getmodelschema\" class=\"method-signature\">abstract public <strong>getModelSchema</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"setconnectionservice\" class=\"method-signature\">abstract public <strong>setConnectionService</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $connectionService)</h3> <p>...</p> <h3 id=\"setreadconnectionservice\" class=\"method-signature\">abstract public <strong>setReadConnectionService</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $connectionService)</h3> <p>...</p> <h3 id=\"getreadconnectionservice\" class=\"method-signature\">abstract public <strong>getReadConnectionService</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"setwriteconnectionservice\" class=\"method-signature\">abstract public <strong>setWriteConnectionService</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $connectionService)</h3> <p>...</p> <h3 id=\"getwriteconnectionservice\" class=\"method-signature\">abstract public <strong>getWriteConnectionService</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"getreadconnection\" class=\"method-signature\">abstract public <strong>getReadConnection</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"getwriteconnection\" class=\"method-signature\">abstract public <strong>getWriteConnection</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"isinitialized\" class=\"method-signature\">abstract public <strong>isInitialized</strong> (<em>mixed</em> $modelName)</h3> <p>...</p> <h3 id=\"getlastinitialized\" class=\"method-signature\">abstract public <strong>getLastInitialized</strong> ()</h3> <p>...</p> <h3 id=\"load\" class=\"method-signature\">abstract public <strong>load</strong> (<em>mixed</em> $modelName, [<em>mixed</em> $newInstance])</h3> <p>...</p> <h3 id=\"addhasone\" class=\"method-signature\">abstract public <strong>addHasOne</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $fields, <em>mixed</em> $referencedModel, <em>mixed</em> $referencedFields, [<em>mixed</em> $options])</h3> <p>...</p> <h3 id=\"addbelongsto\" class=\"method-signature\">abstract public <strong>addBelongsTo</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $fields, <em>mixed</em> $referencedModel, <em>mixed</em> $referencedFields, [<em>mixed</em> $options])</h3> <p>...</p> <h3 id=\"addhasmany\" class=\"method-signature\">abstract public <strong>addHasMany</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $fields, <em>mixed</em> $referencedModel, <em>mixed</em> $referencedFields, [<em>mixed</em> $options])</h3> <p>...</p> <h3 id=\"existsbelongsto\" class=\"method-signature\">abstract public <strong>existsBelongsTo</strong> (<em>mixed</em> $modelName, <em>mixed</em> $modelRelation)</h3> <p>...</p> <h3 id=\"existshasmany\" class=\"method-signature\">abstract public <strong>existsHasMany</strong> (<em>mixed</em> $modelName, <em>mixed</em> $modelRelation)</h3> <p>...</p> <h3 id=\"existshasone\" class=\"method-signature\">abstract public <strong>existsHasOne</strong> (<em>mixed</em> $modelName, <em>mixed</em> $modelRelation)</h3> <p>...</p> <h3 id=\"getbelongstorecords\" class=\"method-signature\">abstract public <strong>getBelongsToRecords</strong> (<em>mixed</em> $method, <em>mixed</em> $modelName, <em>mixed</em> $modelRelation, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $record, [<em>mixed</em> $parameters])</h3> <p>...</p> <h3 id=\"gethasmanyrecords\" class=\"method-signature\">abstract public <strong>getHasManyRecords</strong> (<em>mixed</em> $method, <em>mixed</em> $modelName, <em>mixed</em> $modelRelation, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $record, [<em>mixed</em> $parameters])</h3> <p>...</p> <h3 id=\"gethasonerecords\" class=\"method-signature\">abstract public <strong>getHasOneRecords</strong> (<em>mixed</em> $method, <em>mixed</em> $modelName, <em>mixed</em> $modelRelation, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $record, [<em>mixed</em> $parameters])</h3> <p>...</p> <h3 id=\"getbelongsto\" class=\"method-signature\">abstract public <strong>getBelongsTo</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"gethasmany\" class=\"method-signature\">abstract public <strong>getHasMany</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"gethasone\" class=\"method-signature\">abstract public <strong>getHasOne</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"gethasoneandhasmany\" class=\"method-signature\">abstract public <strong>getHasOneAndHasMany</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"getrelations\" class=\"method-signature\">abstract public <strong>getRelations</strong> (<em>mixed</em> $modelName)</h3> <p>...</p> <h3 id=\"getrelationsbetween\" class=\"method-signature\">abstract public <strong>getRelationsBetween</strong> (<em>mixed</em> $first, <em>mixed</em> $second)</h3> <p>...</p> <h3 id=\"createquery\" class=\"method-signature\">abstract public <strong>createQuery</strong> (<em>mixed</em> $phql)</h3> <p>...</p> <h3 id=\"executequery\" class=\"method-signature\">abstract public <strong>executeQuery</strong> (<em>mixed</em> $phql, [<em>mixed</em> $placeholders])</h3> <p>...</p> <h3 id=\"createbuilder\" class=\"method-signature\">abstract public <strong>createBuilder</strong> ([<em>mixed</em> $params])</h3> <p>...</p> <h3 id=\"addbehavior\" class=\"method-signature\">abstract public <strong>addBehavior</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <a class=\"reference internal\" href=\"phalcon_mvc_model_behaviorinterface\"><em>Phalcon\\Mvc\\Model\\BehaviorInterface</em></a> $behavior)</h3> <p>...</p> <h3 id=\"notifyevent\" class=\"method-signature\">abstract public <strong>notifyEvent</strong> (<em>mixed</em> $eventName, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"missingmethod\" class=\"method-signature\">abstract public <strong>missingMethod</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $eventName, <em>mixed</em> $data)</h3> <p>...</p> <h3 id=\"getlastquery\" class=\"method-signature\">abstract public <strong>getLastQuery</strong> ()</h3> <p>...</p> <h3 id=\"getrelationbyalias\" class=\"method-signature\">abstract public <strong>getRelationByAlias</strong> (<em>mixed</em> $modelName, <em>mixed</em> $alias)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ManagerInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ManagerInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_resultsetinterface":"<h1 id=\"interface-phalcon-mvc-model-resultsetinterface\">Interface <strong>Phalcon\\Mvc\\Model\\ResultsetInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/resultsetinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"gettype\" class=\"method-signature\">abstract public <strong>getType</strong> ()</h3> <p>...</p> <h3 id=\"getfirst\" class=\"method-signature\">abstract public <strong>getFirst</strong> ()</h3> <p>...</p> <h3 id=\"getlast\" class=\"method-signature\">abstract public <strong>getLast</strong> ()</h3> <p>...</p> <h3 id=\"setisfresh\" class=\"method-signature\">abstract public <strong>setIsFresh</strong> (<em>mixed</em> $isFresh)</h3> <p>...</p> <h3 id=\"isfresh\" class=\"method-signature\">abstract public <strong>isFresh</strong> ()</h3> <p>...</p> <h3 id=\"getcache\" class=\"method-signature\">abstract public <strong>getCache</strong> ()</h3> <p>...</p> <h3 id=\"toarray\" class=\"method-signature\">abstract public <strong>toArray</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ResultsetInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ResultsetInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_transactioninterface":"<h1 id=\"interface-phalcon-mvc-model-transactioninterface\">Interface <strong>Phalcon\\Mvc\\Model\\TransactionInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/transactioninterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"settransactionmanager\" class=\"method-signature\">abstract public <strong>setTransactionManager</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_transaction_managerinterface\"><em>Phalcon\\Mvc\\Model\\Transaction\\ManagerInterface</em></a> $manager)</h3> <p>...</p> <h3 id=\"begin\" class=\"method-signature\">abstract public <strong>begin</strong> ()</h3> <p>...</p> <h3 id=\"commit\" class=\"method-signature\">abstract public <strong>commit</strong> ()</h3> <p>...</p> <h3 id=\"rollback\" class=\"method-signature\">abstract public <strong>rollback</strong> ([<em>mixed</em> $rollbackMessage], [<em>mixed</em> $rollbackRecord])</h3> <p>...</p> <h3 id=\"getconnection\" class=\"method-signature\">abstract public <strong>getConnection</strong> ()</h3> <p>...</p> <h3 id=\"setisnewtransaction\" class=\"method-signature\">abstract public <strong>setIsNewTransaction</strong> (<em>mixed</em> $isNew)</h3> <p>...</p> <h3 id=\"setrollbackonabort\" class=\"method-signature\">abstract public <strong>setRollbackOnAbort</strong> (<em>mixed</em> $rollbackOnAbort)</h3> <p>...</p> <h3 id=\"ismanaged\" class=\"method-signature\">abstract public <strong>isManaged</strong> ()</h3> <p>...</p> <h3 id=\"getmessages\" class=\"method-signature\">abstract public <strong>getMessages</strong> ()</h3> <p>...</p> <h3 id=\"isvalid\" class=\"method-signature\">abstract public <strong>isValid</strong> ()</h3> <p>...</p> <h3 id=\"setrollbackedrecord\" class=\"method-signature\">abstract public <strong>setRollbackedRecord</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $record)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_TransactionInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_TransactionInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_transaction_managerinterface":"<h1 id=\"interface-phalcon-mvc-model-transaction-managerinterface\">Interface <strong>Phalcon\\Mvc\\Model\\Transaction\\ManagerInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/transaction/managerinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"has\" class=\"method-signature\">abstract public <strong>has</strong> ()</h3> <p>...</p> <h3 id=\"get\" class=\"method-signature\">abstract public <strong>get</strong> ([<em>mixed</em> $autoBegin])</h3> <p>...</p> <h3 id=\"rollbackpendent\" class=\"method-signature\">abstract public <strong>rollbackPendent</strong> ()</h3> <p>...</p> <h3 id=\"commit\" class=\"method-signature\">abstract public <strong>commit</strong> ()</h3> <p>...</p> <h3 id=\"rollback\" class=\"method-signature\">abstract public <strong>rollback</strong> ([<em>mixed</em> $collect])</h3> <p>...</p> <h3 id=\"notifyrollback\" class=\"method-signature\">abstract public <strong>notifyRollback</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_transactioninterface\"><em>Phalcon\\Mvc\\Model\\TransactionInterface</em></a> $transaction)</h3> <p>...</p> <h3 id=\"notifycommit\" class=\"method-signature\">abstract public <strong>notifyCommit</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_model_transactioninterface\"><em>Phalcon\\Mvc\\Model\\TransactionInterface</em></a> $transaction)</h3> <p>...</p> <h3 id=\"collecttransactions\" class=\"method-signature\">abstract public <strong>collectTransactions</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_ManagerInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_Transaction_ManagerInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_dispatcherinterface":"<h1 id=\"interface-phalcon-mvc-dispatcherinterface\">Interface <strong>Phalcon\\Mvc\\DispatcherInterface</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_dispatcherinterface\"><em>Phalcon\\DispatcherInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/dispatcherinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setcontrollersuffix\" class=\"method-signature\">abstract public <strong>setControllerSuffix</strong> (<em>mixed</em> $controllerSuffix)</h3> <p>...</p> <h3 id=\"setdefaultcontroller\" class=\"method-signature\">abstract public <strong>setDefaultController</strong> (<em>mixed</em> $controllerName)</h3> <p>...</p> <h3 id=\"setcontrollername\" class=\"method-signature\">abstract public <strong>setControllerName</strong> (<em>mixed</em> $controllerName)</h3> <p>...</p> <h3 id=\"getcontrollername\" class=\"method-signature\">abstract public <strong>getControllerName</strong> ()</h3> <p>...</p> <h3 id=\"getlastcontroller\" class=\"method-signature\">abstract public <strong>getLastController</strong> ()</h3> <p>...</p> <h3 id=\"getactivecontroller\" class=\"method-signature\">abstract public <strong>getActiveController</strong> ()</h3> <p>...</p> <h3 id=\"setactionsuffix\" class=\"method-signature\">abstract public <strong>setActionSuffix</strong> (<em>mixed</em> $actionSuffix) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"getactionsuffix\" class=\"method-signature\">abstract public <strong>getActionSuffix</strong> () <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"setdefaultnamespace\" class=\"method-signature\">abstract public <strong>setDefaultNamespace</strong> (<em>mixed</em> $defaultNamespace) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"setdefaultaction\" class=\"method-signature\">abstract public <strong>setDefaultAction</strong> (<em>mixed</em> $actionName) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"setnamespacename\" class=\"method-signature\">abstract public <strong>setNamespaceName</strong> (<em>mixed</em> $namespaceName) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"setmodulename\" class=\"method-signature\">abstract public <strong>setModuleName</strong> (<em>mixed</em> $moduleName) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"setactionname\" class=\"method-signature\">abstract public <strong>setActionName</strong> (<em>mixed</em> $actionName) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"getactionname\" class=\"method-signature\">abstract public <strong>getActionName</strong> () <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"setparams\" class=\"method-signature\">abstract public <strong>setParams</strong> (<em>mixed</em> $params) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"getparams\" class=\"method-signature\">abstract public <strong>getParams</strong> () <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"setparam\" class=\"method-signature\">abstract public <strong>setParam</strong> (<em>mixed</em> $param, <em>mixed</em> $value) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"getparam\" class=\"method-signature\">abstract public <strong>getParam</strong> (<em>mixed</em> $param, [<em>mixed</em> $filters]) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"hasparam\" class=\"method-signature\">abstract public <strong>hasParam</strong> (<em>mixed</em> $param) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"isfinished\" class=\"method-signature\">abstract public <strong>isFinished</strong> () <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"getreturnedvalue\" class=\"method-signature\">abstract public <strong>getReturnedValue</strong> () <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"dispatch\" class=\"method-signature\">abstract public <strong>dispatch</strong> () <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p> <h3 id=\"forward\" class=\"method-signature\">abstract public <strong>forward</strong> (<em>mixed</em> $forward) <small>inherited from Phalcon\\DispatcherInterface</small>\n</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_DispatcherInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_DispatcherInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_behaviorinterface":"<h1 id=\"interface-phalcon-mvc-model-behaviorinterface\">Interface <strong>Phalcon\\Mvc\\Model\\BehaviorInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/behaviorinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"notify\" class=\"method-signature\">abstract public <strong>notify</strong> (<em>mixed</em> $type, <a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model)</h3> <p>...</p> <h3 id=\"missingmethod\" class=\"method-signature\">abstract public <strong>missingMethod</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_modelinterface\"><em>Phalcon\\Mvc\\ModelInterface</em></a> $model, <em>mixed</em> $method, [<em>mixed</em> $arguments])</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_BehaviorInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_BehaviorInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_router_groupinterface":"<h1 id=\"interface-phalcon-mvc-router-groupinterface\">Interface <strong>Phalcon\\Mvc\\Router\\GroupInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/router/groupinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"sethostname\" class=\"method-signature\">abstract public <strong>setHostname</strong> (<em>mixed</em> $hostname)</h3> <p>...</p> <h3 id=\"gethostname\" class=\"method-signature\">abstract public <strong>getHostname</strong> ()</h3> <p>...</p> <h3 id=\"setprefix\" class=\"method-signature\">abstract public <strong>setPrefix</strong> (<em>mixed</em> $prefix)</h3> <p>...</p> <h3 id=\"getprefix\" class=\"method-signature\">abstract public <strong>getPrefix</strong> ()</h3> <p>...</p> <h3 id=\"beforematch\" class=\"method-signature\">abstract public <strong>beforeMatch</strong> (<em>mixed</em> $beforeMatch)</h3> <p>...</p> <h3 id=\"getbeforematch\" class=\"method-signature\">abstract public <strong>getBeforeMatch</strong> ()</h3> <p>...</p> <h3 id=\"setpaths\" class=\"method-signature\">abstract public <strong>setPaths</strong> (<em>mixed</em> $paths)</h3> <p>...</p> <h3 id=\"getpaths\" class=\"method-signature\">abstract public <strong>getPaths</strong> ()</h3> <p>...</p> <h3 id=\"getroutes\" class=\"method-signature\">abstract public <strong>getRoutes</strong> ()</h3> <p>...</p> <h3 id=\"add\" class=\"method-signature\">abstract public <strong>add</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $httpMethods])</h3> <p>...</p> <h3 id=\"addget\" class=\"method-signature\">abstract public <strong>addGet</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"addpost\" class=\"method-signature\">abstract public <strong>addPost</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"addput\" class=\"method-signature\">abstract public <strong>addPut</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"addpatch\" class=\"method-signature\">abstract public <strong>addPatch</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"adddelete\" class=\"method-signature\">abstract public <strong>addDelete</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"addoptions\" class=\"method-signature\">abstract public <strong>addOptions</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"addhead\" class=\"method-signature\">abstract public <strong>addHead</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"clear\" class=\"method-signature\">abstract public <strong>clear</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_GroupInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_GroupInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_micro_middlewareinterface":"<h1 id=\"interface-phalcon-mvc-micro-middlewareinterface\">Interface <strong>Phalcon\\Mvc\\Micro\\MiddlewareInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/micro/middlewareinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"call\" class=\"method-signature\">abstract public <strong>call</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_micro\"><em>Phalcon\\Mvc\\Micro</em></a> $application)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_MiddlewareInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Micro_MiddlewareInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_router_routeinterface":"<h1 id=\"interface-phalcon-mvc-router-routeinterface\">Interface <strong>Phalcon\\Mvc\\Router\\RouteInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/router/routeinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"sethostname\" class=\"method-signature\">abstract public <strong>setHostname</strong> (<em>mixed</em> $hostname)</h3> <p>...</p> <h3 id=\"gethostname\" class=\"method-signature\">abstract public <strong>getHostname</strong> ()</h3> <p>...</p> <h3 id=\"compilepattern\" class=\"method-signature\">abstract public <strong>compilePattern</strong> (<em>mixed</em> $pattern)</h3> <p>...</p> <h3 id=\"via\" class=\"method-signature\">abstract public <strong>via</strong> (<em>mixed</em> $httpMethods)</h3> <p>...</p> <h3 id=\"reconfigure\" class=\"method-signature\">abstract public <strong>reConfigure</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"getname\" class=\"method-signature\">abstract public <strong>getName</strong> ()</h3> <p>...</p> <h3 id=\"setname\" class=\"method-signature\">abstract public <strong>setName</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"sethttpmethods\" class=\"method-signature\">abstract public <strong>setHttpMethods</strong> (<em>mixed</em> $httpMethods)</h3> <p>...</p> <h3 id=\"getrouteid\" class=\"method-signature\">abstract public <strong>getRouteId</strong> ()</h3> <p>...</p> <h3 id=\"getpattern\" class=\"method-signature\">abstract public <strong>getPattern</strong> ()</h3> <p>...</p> <h3 id=\"getcompiledpattern\" class=\"method-signature\">abstract public <strong>getCompiledPattern</strong> ()</h3> <p>...</p> <h3 id=\"getpaths\" class=\"method-signature\">abstract public <strong>getPaths</strong> ()</h3> <p>...</p> <h3 id=\"getreversedpaths\" class=\"method-signature\">abstract public <strong>getReversedPaths</strong> ()</h3> <p>...</p> <h3 id=\"gethttpmethods\" class=\"method-signature\">abstract public <strong>getHttpMethods</strong> ()</h3> <p>...</p> <h3 id=\"reset\" class=\"method-signature\">abstract public static <strong>reset</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_RouteInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Router_RouteInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_view_engineinterface":"<h1 id=\"interface-phalcon-mvc-view-engineinterface\">Interface <strong>Phalcon\\Mvc\\View\\EngineInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/view/engineinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getcontent\" class=\"method-signature\">abstract public <strong>getContent</strong> ()</h3> <p>...</p> <h3 id=\"partial\" class=\"method-signature\">abstract public <strong>partial</strong> (<em>mixed</em> $partialPath, [<em>mixed</em> $params])</h3> <p>...</p> <h3 id=\"render\" class=\"method-signature\">abstract public <strong>render</strong> (<em>mixed</em> $path, <em>mixed</em> $params, [<em>mixed</em> $mustClean])</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_EngineInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_View_EngineInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_urlinterface":"<h1 id=\"interface-phalcon-mvc-urlinterface\">Interface <strong>Phalcon\\Mvc\\UrlInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/urlinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setbaseuri\" class=\"method-signature\">abstract public <strong>setBaseUri</strong> (<em>mixed</em> $baseUri)</h3> <p>...</p> <h3 id=\"getbaseuri\" class=\"method-signature\">abstract public <strong>getBaseUri</strong> ()</h3> <p>...</p> <h3 id=\"setbasepath\" class=\"method-signature\">abstract public <strong>setBasePath</strong> (<em>mixed</em> $basePath)</h3> <p>...</p> <h3 id=\"getbasepath\" class=\"method-signature\">abstract public <strong>getBasePath</strong> ()</h3> <p>...</p> <h3 id=\"get\" class=\"method-signature\">abstract public <strong>get</strong> ([<em>mixed</em> $uri], [<em>mixed</em> $args], [<em>mixed</em> $local])</h3> <p>...</p> <h3 id=\"path\" class=\"method-signature\">abstract public <strong>path</strong> ([<em>mixed</em> $path])</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_UrlInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_UrlInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_criteriainterface":"<h1 id=\"interface-phalcon-mvc-model-criteriainterface\">Interface <strong>Phalcon\\Mvc\\Model\\CriteriaInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/criteriainterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setmodelname\" class=\"method-signature\">abstract public <strong>setModelName</strong> (<em>mixed</em> $modelName)</h3> <p>...</p> <h3 id=\"getmodelname\" class=\"method-signature\">abstract public <strong>getModelName</strong> ()</h3> <p>...</p> <h3 id=\"bind\" class=\"method-signature\">abstract public <strong>bind</strong> (<em>array</em> $bindParams)</h3> <p>...</p> <h3 id=\"bindtypes\" class=\"method-signature\">abstract public <strong>bindTypes</strong> (<em>array</em> $bindTypes)</h3> <p>...</p> <h3 id=\"where\" class=\"method-signature\">abstract public <strong>where</strong> (<em>mixed</em> $conditions)</h3> <p>...</p> <h3 id=\"conditions\" class=\"method-signature\">abstract public <strong>conditions</strong> (<em>mixed</em> $conditions)</h3> <p>...</p> <h3 id=\"orderby\" class=\"method-signature\">abstract public <strong>orderBy</strong> (<em>mixed</em> $orderColumns)</h3> <p>...</p> <h3 id=\"limit\" class=\"method-signature\">abstract public <strong>limit</strong> (<em>mixed</em> $limit, [<em>mixed</em> $offset])</h3> <p>...</p> <h3 id=\"forupdate\" class=\"method-signature\">abstract public <strong>forUpdate</strong> ([<em>mixed</em> $forUpdate])</h3> <p>...</p> <h3 id=\"sharedlock\" class=\"method-signature\">abstract public <strong>sharedLock</strong> ([<em>mixed</em> $sharedLock])</h3> <p>...</p> <h3 id=\"andwhere\" class=\"method-signature\">abstract public <strong>andWhere</strong> (<em>mixed</em> $conditions, [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes])</h3> <p>...</p> <h3 id=\"orwhere\" class=\"method-signature\">abstract public <strong>orWhere</strong> (<em>mixed</em> $conditions, [<em>mixed</em> $bindParams], [<em>mixed</em> $bindTypes])</h3> <p>...</p> <h3 id=\"betweenwhere\" class=\"method-signature\">abstract public <strong>betweenWhere</strong> (<em>mixed</em> $expr, <em>mixed</em> $minimum, <em>mixed</em> $maximum)</h3> <p>...</p> <h3 id=\"notbetweenwhere\" class=\"method-signature\">abstract public <strong>notBetweenWhere</strong> (<em>mixed</em> $expr, <em>mixed</em> $minimum, <em>mixed</em> $maximum)</h3> <p>...</p> <h3 id=\"inwhere\" class=\"method-signature\">abstract public <strong>inWhere</strong> (<em>mixed</em> $expr, <em>array</em> $values)</h3> <p>...</p> <h3 id=\"notinwhere\" class=\"method-signature\">abstract public <strong>notInWhere</strong> (<em>mixed</em> $expr, <em>array</em> $values)</h3> <p>...</p> <h3 id=\"getwhere\" class=\"method-signature\">abstract public <strong>getWhere</strong> ()</h3> <p>...</p> <h3 id=\"getconditions\" class=\"method-signature\">abstract public <strong>getConditions</strong> ()</h3> <p>...</p> <h3 id=\"getlimit\" class=\"method-signature\">abstract public <strong>getLimit</strong> ()</h3> <p>...</p> <h3 id=\"getorderby\" class=\"method-signature\">abstract public <strong>getOrderBy</strong> ()</h3> <p>...</p> <h3 id=\"getparams\" class=\"method-signature\">abstract public <strong>getParams</strong> ()</h3> <p>...</p> <h3 id=\"execute\" class=\"method-signature\">abstract public <strong>execute</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_CriteriaInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_CriteriaInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_viewbaseinterface":"<h1 id=\"interface-phalcon-mvc-viewbaseinterface\">Interface <strong>Phalcon\\Mvc\\ViewBaseInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/viewbaseinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setviewsdir\" class=\"method-signature\">abstract public <strong>setViewsDir</strong> (<em>mixed</em> $viewsDir)</h3> <p>...</p> <h3 id=\"getviewsdir\" class=\"method-signature\">abstract public <strong>getViewsDir</strong> ()</h3> <p>...</p> <h3 id=\"setparamtoview\" class=\"method-signature\">abstract public <strong>setParamToView</strong> (<em>mixed</em> $key, <em>mixed</em> $value)</h3> <p>...</p> <h3 id=\"setvar\" class=\"method-signature\">abstract public <strong>setVar</strong> (<em>mixed</em> $key, <em>mixed</em> $value)</h3> <p>...</p> <h3 id=\"getparamstoview\" class=\"method-signature\">abstract public <strong>getParamsToView</strong> ()</h3> <p>...</p> <h3 id=\"getcache\" class=\"method-signature\">abstract public <strong>getCache</strong> ()</h3> <p>...</p> <h3 id=\"cache\" class=\"method-signature\">abstract public <strong>cache</strong> ([<em>mixed</em> $options])</h3> <p>...</p> <h3 id=\"setcontent\" class=\"method-signature\">abstract public <strong>setContent</strong> (<em>mixed</em> $content)</h3> <p>...</p> <h3 id=\"getcontent\" class=\"method-signature\">abstract public <strong>getContent</strong> ()</h3> <p>...</p> <h3 id=\"partial\" class=\"method-signature\">abstract public <strong>partial</strong> (<em>mixed</em> $partialPath, [<em>mixed</em> $params])</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ViewBaseInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ViewBaseInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_viewinterface":"<h1 id=\"interface-phalcon-mvc-viewinterface\">Interface <strong>Phalcon\\Mvc\\ViewInterface</strong>\n</h1> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_mvc_viewbaseinterface\"><em>Phalcon\\Mvc\\ViewBaseInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/viewinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setlayoutsdir\" class=\"method-signature\">abstract public <strong>setLayoutsDir</strong> (<em>mixed</em> $layoutsDir)</h3> <p>...</p> <h3 id=\"getlayoutsdir\" class=\"method-signature\">abstract public <strong>getLayoutsDir</strong> ()</h3> <p>...</p> <h3 id=\"setpartialsdir\" class=\"method-signature\">abstract public <strong>setPartialsDir</strong> (<em>mixed</em> $partialsDir)</h3> <p>...</p> <h3 id=\"getpartialsdir\" class=\"method-signature\">abstract public <strong>getPartialsDir</strong> ()</h3> <p>...</p> <h3 id=\"setbasepath\" class=\"method-signature\">abstract public <strong>setBasePath</strong> (<em>mixed</em> $basePath)</h3> <p>...</p> <h3 id=\"getbasepath\" class=\"method-signature\">abstract public <strong>getBasePath</strong> ()</h3> <p>...</p> <h3 id=\"setrenderlevel\" class=\"method-signature\">abstract public <strong>setRenderLevel</strong> (<em>mixed</em> $level)</h3> <p>...</p> <h3 id=\"setmainview\" class=\"method-signature\">abstract public <strong>setMainView</strong> (<em>mixed</em> $viewPath)</h3> <p>...</p> <h3 id=\"getmainview\" class=\"method-signature\">abstract public <strong>getMainView</strong> ()</h3> <p>...</p> <h3 id=\"setlayout\" class=\"method-signature\">abstract public <strong>setLayout</strong> (<em>mixed</em> $layout)</h3> <p>...</p> <h3 id=\"getlayout\" class=\"method-signature\">abstract public <strong>getLayout</strong> ()</h3> <p>...</p> <h3 id=\"settemplatebefore\" class=\"method-signature\">abstract public <strong>setTemplateBefore</strong> (<em>mixed</em> $templateBefore)</h3> <p>...</p> <h3 id=\"cleantemplatebefore\" class=\"method-signature\">abstract public <strong>cleanTemplateBefore</strong> ()</h3> <p>...</p> <h3 id=\"settemplateafter\" class=\"method-signature\">abstract public <strong>setTemplateAfter</strong> (<em>mixed</em> $templateAfter)</h3> <p>...</p> <h3 id=\"cleantemplateafter\" class=\"method-signature\">abstract public <strong>cleanTemplateAfter</strong> ()</h3> <p>...</p> <h3 id=\"getcontrollername\" class=\"method-signature\">abstract public <strong>getControllerName</strong> ()</h3> <p>...</p> <h3 id=\"getactionname\" class=\"method-signature\">abstract public <strong>getActionName</strong> ()</h3> <p>...</p> <h3 id=\"getparams\" class=\"method-signature\">abstract public <strong>getParams</strong> ()</h3> <p>...</p> <h3 id=\"start\" class=\"method-signature\">abstract public <strong>start</strong> ()</h3> <p>...</p> <h3 id=\"registerengines\" class=\"method-signature\">abstract public <strong>registerEngines</strong> (<em>array</em> $engines)</h3> <p>...</p> <h3 id=\"render\" class=\"method-signature\">abstract public <strong>render</strong> (<em>mixed</em> $controllerName, <em>mixed</em> $actionName, [<em>mixed</em> $params])</h3> <p>...</p> <h3 id=\"pick\" class=\"method-signature\">abstract public <strong>pick</strong> (<em>mixed</em> $renderView)</h3> <p>...</p> <h3 id=\"finish\" class=\"method-signature\">abstract public <strong>finish</strong> ()</h3> <p>...</p> <h3 id=\"getactiverenderpath\" class=\"method-signature\">abstract public <strong>getActiveRenderPath</strong> ()</h3> <p>...</p> <h3 id=\"disable\" class=\"method-signature\">abstract public <strong>disable</strong> ()</h3> <p>...</p> <h3 id=\"enable\" class=\"method-signature\">abstract public <strong>enable</strong> ()</h3> <p>...</p> <h3 id=\"reset\" class=\"method-signature\">abstract public <strong>reset</strong> ()</h3> <p>...</p> <h3 id=\"isdisabled\" class=\"method-signature\">abstract public <strong>isDisabled</strong> ()</h3> <p>...</p> <h3 id=\"setviewsdir\" class=\"method-signature\">abstract public <strong>setViewsDir</strong> (<em>mixed</em> $viewsDir) <small>inherited from Phalcon\\Mvc\\ViewBaseInterface</small>\n</h3> <p>...</p> <h3 id=\"getviewsdir\" class=\"method-signature\">abstract public <strong>getViewsDir</strong> () <small>inherited from Phalcon\\Mvc\\ViewBaseInterface</small>\n</h3> <p>...</p> <h3 id=\"setparamtoview\" class=\"method-signature\">abstract public <strong>setParamToView</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Mvc\\ViewBaseInterface</small>\n</h3> <p>...</p> <h3 id=\"setvar\" class=\"method-signature\">abstract public <strong>setVar</strong> (<em>mixed</em> $key, <em>mixed</em> $value) <small>inherited from Phalcon\\Mvc\\ViewBaseInterface</small>\n</h3> <p>...</p> <h3 id=\"getparamstoview\" class=\"method-signature\">abstract public <strong>getParamsToView</strong> () <small>inherited from Phalcon\\Mvc\\ViewBaseInterface</small>\n</h3> <p>...</p> <h3 id=\"getcache\" class=\"method-signature\">abstract public <strong>getCache</strong> () <small>inherited from Phalcon\\Mvc\\ViewBaseInterface</small>\n</h3> <p>...</p> <h3 id=\"cache\" class=\"method-signature\">abstract public <strong>cache</strong> ([<em>mixed</em> $options]) <small>inherited from Phalcon\\Mvc\\ViewBaseInterface</small>\n</h3> <p>...</p> <h3 id=\"setcontent\" class=\"method-signature\">abstract public <strong>setContent</strong> (<em>mixed</em> $content) <small>inherited from Phalcon\\Mvc\\ViewBaseInterface</small>\n</h3> <p>...</p> <h3 id=\"getcontent\" class=\"method-signature\">abstract public <strong>getContent</strong> () <small>inherited from Phalcon\\Mvc\\ViewBaseInterface</small>\n</h3> <p>...</p> <h3 id=\"partial\" class=\"method-signature\">abstract public <strong>partial</strong> (<em>mixed</em> $partialPath, [<em>mixed</em> $params]) <small>inherited from Phalcon\\Mvc\\ViewBaseInterface</small>\n</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ViewInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ViewInterface.html</a>\n  </p>\n</div>\n","api/phalcon_session_baginterface":"<h1 id=\"interface-phalcon-session-baginterface\">Interface <strong>Phalcon\\Session\\BagInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/session/baginterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"initialize\" class=\"method-signature\">abstract public <strong>initialize</strong> ()</h3> <p>...</p> <h3 id=\"destroy\" class=\"method-signature\">abstract public <strong>destroy</strong> ()</h3> <p>...</p> <h3 id=\"set\" class=\"method-signature\">abstract public <strong>set</strong> (<em>mixed</em> $property, <em>mixed</em> $value)</h3> <p>...</p> <h3 id=\"get\" class=\"method-signature\">abstract public <strong>get</strong> (<em>mixed</em> $property, [<em>mixed</em> $defaultValue])</h3> <p>...</p> <h3 id=\"has\" class=\"method-signature\">abstract public <strong>has</strong> (<em>mixed</em> $property)</h3> <p>...</p> <h3 id=\"__set\" class=\"method-signature\">abstract public <strong>__set</strong> (<em>mixed</em> $property, <em>mixed</em> $value)</h3> <p>...</p> <h3 id=\"__get\" class=\"method-signature\">abstract public <strong>__get</strong> (<em>mixed</em> $property)</h3> <p>...</p> <h3 id=\"__isset\" class=\"method-signature\">abstract public <strong>__isset</strong> (<em>mixed</em> $property)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Session_BagInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Session_BagInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_model_validatorinterface":"<h1 id=\"interface-phalcon-mvc-model-validatorinterface\">Interface <strong>Phalcon\\Mvc\\Model\\ValidatorInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/model/validatorinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getmessages\" class=\"method-signature\">abstract public <strong>getMessages</strong> ()</h3> <p>...</p> <h3 id=\"validate\" class=\"method-signature\">abstract public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_entityinterface\"><em>Phalcon\\Mvc\\EntityInterface</em></a> $record)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ValidatorInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_Model_ValidatorInterface.html</a>\n  </p>\n</div>\n","api/phalcon_paginator_adapterinterface":"<h1 id=\"interface-phalcon-paginator-adapterinterface\">Interface <strong>Phalcon\\Paginator\\AdapterInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/paginator/adapterinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setcurrentpage\" class=\"method-signature\">abstract public <strong>setCurrentPage</strong> (<em>mixed</em> $page)</h3> <p>...</p> <h3 id=\"getpaginate\" class=\"method-signature\">abstract public <strong>getPaginate</strong> ()</h3> <p>...</p> <h3 id=\"setlimit\" class=\"method-signature\">abstract public <strong>setLimit</strong> (<em>mixed</em> $limit)</h3> <p>...</p> <h3 id=\"getlimit\" class=\"method-signature\">abstract public <strong>getLimit</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_AdapterInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Paginator_AdapterInterface.html</a>\n  </p>\n</div>\n","api/phalcon_session_adapterinterface":"<h1 id=\"interface-phalcon-session-adapterinterface\">Interface <strong>Phalcon\\Session\\AdapterInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/session/adapterinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"start\" class=\"method-signature\">abstract public <strong>start</strong> ()</h3> <p>...</p> <h3 id=\"setoptions\" class=\"method-signature\">abstract public <strong>setOptions</strong> (<em>array</em> $options)</h3> <p>...</p> <h3 id=\"getoptions\" class=\"method-signature\">abstract public <strong>getOptions</strong> ()</h3> <p>...</p> <h3 id=\"get\" class=\"method-signature\">abstract public <strong>get</strong> (<em>mixed</em> $index, [<em>mixed</em> $defaultValue])</h3> <p>...</p> <h3 id=\"set\" class=\"method-signature\">abstract public <strong>set</strong> (<em>mixed</em> $index, <em>mixed</em> $value)</h3> <p>...</p> <h3 id=\"has\" class=\"method-signature\">abstract public <strong>has</strong> (<em>mixed</em> $index)</h3> <p>...</p> <h3 id=\"remove\" class=\"method-signature\">abstract public <strong>remove</strong> (<em>mixed</em> $index)</h3> <p>...</p> <h3 id=\"getid\" class=\"method-signature\">abstract public <strong>getId</strong> ()</h3> <p>...</p> <h3 id=\"isstarted\" class=\"method-signature\">abstract public <strong>isStarted</strong> ()</h3> <p>...</p> <h3 id=\"destroy\" class=\"method-signature\">abstract public <strong>destroy</strong> ([<em>mixed</em> $removeData])</h3> <p>...</p> <h3 id=\"regenerateid\" class=\"method-signature\">abstract public <strong>regenerateId</strong> ([<em>mixed</em> $deleteOldSession])</h3> <p>...</p> <h3 id=\"setname\" class=\"method-signature\">abstract public <strong>setName</strong> (<em>mixed</em> $name)</h3> <p>...</p> <h3 id=\"getname\" class=\"method-signature\">abstract public <strong>getName</strong> ()</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Session_AdapterInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Session_AdapterInterface.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_moduledefinitioninterface":"<h1 id=\"interface-phalcon-mvc-moduledefinitioninterface\">Interface <strong>Phalcon\\Mvc\\ModuleDefinitionInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/moduledefinitioninterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"registerautoloaders\" class=\"method-signature\">abstract public <strong>registerAutoloaders</strong> ([<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector])</h3> <p>...</p> <h3 id=\"registerservices\" class=\"method-signature\">abstract public <strong>registerServices</strong> (<a class=\"reference internal\" href=\"phalcon_diinterface\"><em>Phalcon\\DiInterface</em></a> $dependencyInjector)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ModuleDefinitionInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_ModuleDefinitionInterface.html</a>\n  </p>\n</div>\n","api/phalcon_translate_adapterinterface":"<h1 id=\"interface-phalcon-translate-adapterinterface\">Interface <strong>Phalcon\\Translate\\AdapterInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/adapterinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"t\" class=\"method-signature\">abstract public <strong>t</strong> (<em>mixed</em> $translateKey, [<em>mixed</em> $placeholders])</h3> <p>...</p> <h3 id=\"query\" class=\"method-signature\">abstract public <strong>query</strong> (<em>mixed</em> $index, [<em>mixed</em> $placeholders])</h3> <p>...</p> <h3 id=\"exists\" class=\"method-signature\">abstract public <strong>exists</strong> (<em>mixed</em> $index)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_AdapterInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_AdapterInterface.html</a>\n  </p>\n</div>\n","api/phalcon_validationinterface":"<h1 id=\"interface-phalcon-validationinterface\">Interface <strong>Phalcon\\ValidationInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validationinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"validate\" class=\"method-signature\">abstract public <strong>validate</strong> ([<em>mixed</em> $data], [<em>mixed</em> $entity])</h3> <p>...</p> <h3 id=\"add\" class=\"method-signature\">abstract public <strong>add</strong> (<em>mixed</em> $field, <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator)</h3> <p>...</p> <h3 id=\"rule\" class=\"method-signature\">abstract public <strong>rule</strong> (<em>mixed</em> $field, <a class=\"reference internal\" href=\"phalcon_validation_validatorinterface\"><em>Phalcon\\Validation\\ValidatorInterface</em></a> $validator)</h3> <p>...</p> <h3 id=\"rules\" class=\"method-signature\">abstract public <strong>rules</strong> (<em>mixed</em> $field, <em>array</em> $validators)</h3> <p>...</p> <h3 id=\"setfilters\" class=\"method-signature\">abstract public <strong>setFilters</strong> (<em>mixed</em> $field, <em>mixed</em> $filters)</h3> <p>...</p> <h3 id=\"getfilters\" class=\"method-signature\">abstract public <strong>getFilters</strong> ([<em>mixed</em> $field])</h3> <p>...</p> <h3 id=\"getvalidators\" class=\"method-signature\">abstract public <strong>getValidators</strong> ()</h3> <p>...</p> <h3 id=\"getentity\" class=\"method-signature\">abstract public <strong>getEntity</strong> ()</h3> <p>...</p> <h3 id=\"setdefaultmessages\" class=\"method-signature\">abstract public <strong>setDefaultMessages</strong> ([<em>array</em> $messages])</h3> <p>...</p> <h3 id=\"getdefaultmessage\" class=\"method-signature\">abstract public <strong>getDefaultMessage</strong> (<em>mixed</em> $type)</h3> <p>...</p> <h3 id=\"getmessages\" class=\"method-signature\">abstract public <strong>getMessages</strong> ()</h3> <p>...</p> <h3 id=\"setlabels\" class=\"method-signature\">abstract public <strong>setLabels</strong> (<em>array</em> $labels)</h3> <p>...</p> <h3 id=\"getlabel\" class=\"method-signature\">abstract public <strong>getLabel</strong> (<em>mixed</em> $field)</h3> <p>...</p> <h3 id=\"appendmessage\" class=\"method-signature\">abstract public <strong>appendMessage</strong> (<a class=\"reference internal\" href=\"phalcon_validation_messageinterface\"><em>Phalcon\\Validation\\MessageInterface</em></a> $message)</h3> <p>...</p> <h3 id=\"bind\" class=\"method-signature\">abstract public <strong>bind</strong> (<em>mixed</em> $entity, <em>mixed</em> $data)</h3> <p>...</p> <h3 id=\"getvalue\" class=\"method-signature\">abstract public <strong>getValue</strong> (<em>mixed</em> $field)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_ValidationInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_ValidationInterface.html</a>\n  </p>\n</div>\n","api/phalcon_translate_interpolatorinterface":"<h1 id=\"interface-phalcon-translate-interpolatorinterface\">Interface <strong>Phalcon\\Translate\\InterpolatorInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/translate/interpolatorinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"replaceplaceholders\" class=\"method-signature\">abstract public <strong>replacePlaceholders</strong> (<em>mixed</em> $translation, [<em>mixed</em> $placeholders])</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_InterpolatorInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Translate_InterpolatorInterface.html</a>\n  </p>\n</div>\n","api/phalcon_validation_messageinterface":"<h1 id=\"interface-phalcon-validation-messageinterface\">Interface <strong>Phalcon\\Validation\\MessageInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/messageinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"settype\" class=\"method-signature\">abstract public <strong>setType</strong> (<em>mixed</em> $type)</h3> <p>...</p> <h3 id=\"gettype\" class=\"method-signature\">abstract public <strong>getType</strong> ()</h3> <p>...</p> <h3 id=\"setmessage\" class=\"method-signature\">abstract public <strong>setMessage</strong> (<em>mixed</em> $message)</h3> <p>...</p> <h3 id=\"getmessage\" class=\"method-signature\">abstract public <strong>getMessage</strong> ()</h3> <p>...</p> <h3 id=\"setfield\" class=\"method-signature\">abstract public <strong>setField</strong> (<em>mixed</em> $field)</h3> <p>...</p> <h3 id=\"getfield\" class=\"method-signature\">abstract public <strong>getField</strong> ()</h3> <p>...</p> <h3 id=\"__tostring\" class=\"method-signature\">abstract public <strong>__toString</strong> ()</h3> <p>...</p> <h3 id=\"__set_state\" class=\"method-signature\">abstract public static <strong>__set_state</strong> (<em>array</em> $message)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_MessageInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_MessageInterface.html</a>\n  </p>\n</div>\n","reference/xampp":"<h1 id=\"installation-on-xampp\">Installation on XAMPP</h1> <p><a class=\"reference external\" href=\"https://www.apachefriends.org/download.html\">XAMPP</a> is an easy to install Apache distribution containing MySQL, PHP and Perl. Once you download XAMPP, all you have to do is extract it and start using it. Below are detailed instructions on how to install Phalcon on XAMPP for Windows. Using the latest XAMPP version is highly recommended.</p>  <h2 id=\"download-the-right-version-of-phalcon\">Download the right version of Phalcon</h2> <p>XAMPP is always releasing 32 bit versions of Apache and PHP. You will need to download the x86 version of Phalcon for Windows from the download section.</p> <p>After downloading the Phalcon library you will have a zip file like the one shown below:</p> <div class=\"figure align-center\"> <img alt=\"../_images/xampp-1.png\" src=\"https://docs.phalconphp.com/en/latest/_images/xampp-1.png\"> </div> <p>Extract the library from the archive to get the Phalcon DLL:</p> <div class=\"figure align-center\"> <img alt=\"../_images/xampp-2.png\" src=\"https://docs.phalconphp.com/en/latest/_images/xampp-2.png\"> </div> <p>Copy the file php_phalcon.dll to the PHP extensions. If you have installed XAMPP in the C:\\xampp folder, the extension needs to be in C:\\xampp\\php\\ext</p> <div class=\"figure align-center\"> <img alt=\"../_images/xampp-3.png\" src=\"https://docs.phalconphp.com/en/latest/_images/xampp-3.png\"> </div> <p>Edit the php.ini file, it is located at C:\\xampp\\php\\php.ini. It can be edited with Notepad or a similar program. We recommend Notepad++ to avoid issues with line endings. Append at the end of the file: extension=php_phalcon.dll and save it.</p> <div class=\"figure align-center\"> <img alt=\"../_images/xampp-4.png\" src=\"https://docs.phalconphp.com/en/latest/_images/xampp-4.png\"> </div> <p>Restart the Apache Web Server from the XAMPP Control Center. This will load the new PHP configuration.</p> <div class=\"figure align-center\"> <img alt=\"../_images/xampp-5.png\" src=\"https://docs.phalconphp.com/en/latest/_images/xampp-5.png\"> </div> <p>Open your browser to navigate to <a class=\"reference external\" href=\"http://localhost\">http://localhost</a>. The XAMPP welcome page will appear. Click on the link phpinfo().</p> <div class=\"figure align-center\"> <img alt=\"../_images/xampp-6.png\" src=\"https://docs.phalconphp.com/en/latest/_images/xampp-6.png\"> </div> <p>phpinfo() will output a significant amount of information on screen about the current state of PHP. Scroll down to check if the phalcon extension has been loaded correctly.</p> <div class=\"figure align-center\"> <img alt=\"../_images/xampp-7.png\" src=\"https://docs.phalconphp.com/en/latest/_images/xampp-7.png\"> </div> <p>If you can see the phalcon version in the phpinfo() output, congrats!, You are now flying with Phalcon.</p>   <h2 id=\"screencast\">Screencast</h2> <p>The following screencast is a step by step guide to install Phalcon on Windows:</p> <div align=\"center\"><iframe src=\"https://player.vimeo.com/video/40265988\" width=\"500\" height=\"266\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div>  <h2 id=\"related-guides\">Related Guides</h2> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"install\"><em>General Installation</em></a></li> <li><a class=\"reference internal\" href=\"wamp\"><em>Detailed Installation on WAMP for Windows</em></a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/xampp.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/xampp.html</a>\n  </p>\n</div>\n","reference/wamp":"<h1 id=\"installation-on-wamp\">Installation on WAMP</h1> <p><a class=\"reference external\" href=\"http://www.wampserver.com/en/\">WampServer</a> is a Windows web development environment. It allows you to create web applications with Apache2, PHP and a MySQL database. Below are detailed instructions on how to install Phalcon on WampServer for Windows. Using the latest WampServer version is highly recommended.</p>  <h2 id=\"download-the-right-version-of-phalcon\">Download the right version of Phalcon</h2> <p>WAMP has both 32 and 64 bit versions. From the download section, you can choose the Phalcon for Windows accordingly to your desired architecture.</p> <p>After download the Phalcon library you will have a zip file like the one shown below:</p> <div class=\"figure align-center\"> <img alt=\"../_images/xampp-1.png\" src=\"https://docs.phalconphp.com/en/latest/_images/xampp-1.png\"> </div> <p>Extract the library from the archive to get the Phalcon DLL:</p> <div class=\"figure align-center\"> <img alt=\"../_images/xampp-2.png\" src=\"https://docs.phalconphp.com/en/latest/_images/xampp-2.png\"> </div> <p>Copy the file php_phalcon.dll to the PHP extensions. If WAMP is installed in the C:\\wamp folder, the extension needs to be in C:\\wamp\\bin\\php\\php5.5.12\\ext</p> <div class=\"figure align-center\"> <img alt=\"../_images/wamp-1.png\" src=\"https://docs.phalconphp.com/en/latest/_images/wamp-1.png\"> </div> <p>Edit the php.ini file, it is located at C:\\wamp\\bin\\php\\php5.5.12\\php.ini. It can be edited with Notepad or a similar program. We recommend Notepad++ to avoid issues with line endings. Append at the end of the file: extension=php_phalcon.dll and save it.</p> <div class=\"figure align-center\"> <img alt=\"../_images/wamp-2.png\" src=\"https://docs.phalconphp.com/en/latest/_images/wamp-2.png\"> </div> <p>Also edit another php.ini file, which is located at C:\\wamp\\bin\\apache\\apache2.4.9\\bin\\php.ini. Append at the end of the file: extension=php_phalcon.dll and save it.</p> <p>Restart the Apache Web Server. Do a single click on the WampServer icon at system tray. Choose “Restart All Services” from the pop-up menu. Check out that tray icon will become green again.</p> <div class=\"figure align-center\"> <img alt=\"../_images/wamp-3.png\" src=\"https://docs.phalconphp.com/en/latest/_images/wamp-3.png\"> </div> <p>Open your browser to navigate to <a class=\"reference external\" href=\"http://localhost\">http://localhost</a>. The WAMP welcome page will appear. Look at the section “extensions loaded” to check if phalcon was loaded.</p> <div class=\"figure align-center\"> <img alt=\"../_images/wamp-4.png\" src=\"https://docs.phalconphp.com/en/latest/_images/wamp-4.png\"> </div> <p>Congrats!, You are now flying with Phalcon.</p>   <h2 id=\"related-guides\">Related Guides</h2> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"install\"><em>General Installation</em></a></li> <li><a class=\"reference internal\" href=\"xampp\"><em>Detailed Installation on XAMPP for Windows</em></a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/wamp.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/wamp.html</a>\n  </p>\n</div>\n","api/phalcon_mvc_routerinterface":"<h1 id=\"interface-phalcon-mvc-routerinterface\">Interface <strong>Phalcon\\Mvc\\RouterInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/mvc/routerinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"setdefaultmodule\" class=\"method-signature\">abstract public <strong>setDefaultModule</strong> (<em>mixed</em> $moduleName)</h3> <p>...</p> <h3 id=\"setdefaultcontroller\" class=\"method-signature\">abstract public <strong>setDefaultController</strong> (<em>mixed</em> $controllerName)</h3> <p>...</p> <h3 id=\"setdefaultaction\" class=\"method-signature\">abstract public <strong>setDefaultAction</strong> (<em>mixed</em> $actionName)</h3> <p>...</p> <h3 id=\"setdefaults\" class=\"method-signature\">abstract public <strong>setDefaults</strong> (<em>array</em> $defaults)</h3> <p>...</p> <h3 id=\"handle\" class=\"method-signature\">abstract public <strong>handle</strong> ([<em>mixed</em> $uri])</h3> <p>...</p> <h3 id=\"add\" class=\"method-signature\">abstract public <strong>add</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths], [<em>mixed</em> $httpMethods])</h3> <p>...</p> <h3 id=\"addget\" class=\"method-signature\">abstract public <strong>addGet</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"addpost\" class=\"method-signature\">abstract public <strong>addPost</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"addput\" class=\"method-signature\">abstract public <strong>addPut</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"addpatch\" class=\"method-signature\">abstract public <strong>addPatch</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"adddelete\" class=\"method-signature\">abstract public <strong>addDelete</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"addoptions\" class=\"method-signature\">abstract public <strong>addOptions</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"addhead\" class=\"method-signature\">abstract public <strong>addHead</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"addpurge\" class=\"method-signature\">abstract public <strong>addPurge</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"addtrace\" class=\"method-signature\">abstract public <strong>addTrace</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"addconnect\" class=\"method-signature\">abstract public <strong>addConnect</strong> (<em>mixed</em> $pattern, [<em>mixed</em> $paths])</h3> <p>...</p> <h3 id=\"mount\" class=\"method-signature\">abstract public <strong>mount</strong> (<a class=\"reference internal\" href=\"phalcon_mvc_router_groupinterface\"><em>Phalcon\\Mvc\\Router\\GroupInterface</em></a> $group)</h3> <p>...</p> <h3 id=\"clear\" class=\"method-signature\">abstract public <strong>clear</strong> ()</h3> <p>...</p> <h3 id=\"getmodulename\" class=\"method-signature\">abstract public <strong>getModuleName</strong> ()</h3> <p>...</p> <h3 id=\"getnamespacename\" class=\"method-signature\">abstract public <strong>getNamespaceName</strong> ()</h3> <p>...</p> <h3 id=\"getcontrollername\" class=\"method-signature\">abstract public <strong>getControllerName</strong> ()</h3> <p>...</p> <h3 id=\"getactionname\" class=\"method-signature\">abstract public <strong>getActionName</strong> ()</h3> <p>...</p> <h3 id=\"getparams\" class=\"method-signature\">abstract public <strong>getParams</strong> ()</h3> <p>...</p> <h3 id=\"getmatchedroute\" class=\"method-signature\">abstract public <strong>getMatchedRoute</strong> ()</h3> <p>...</p> <h3 id=\"getmatches\" class=\"method-signature\">abstract public <strong>getMatches</strong> ()</h3> <p>...</p> <h3 id=\"wasmatched\" class=\"method-signature\">abstract public <strong>wasMatched</strong> ()</h3> <p>...</p> <h3 id=\"getroutes\" class=\"method-signature\">abstract public <strong>getRoutes</strong> ()</h3> <p>...</p> <h3 id=\"getroutebyid\" class=\"method-signature\">abstract public <strong>getRouteById</strong> (<em>mixed</em> $id)</h3> <p>...</p> <h3 id=\"getroutebyname\" class=\"method-signature\">abstract public <strong>getRouteByName</strong> (<em>mixed</em> $name)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_RouterInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Mvc_RouterInterface.html</a>\n  </p>\n</div>\n","api/phalcon_validation_validatorinterface":"<h1 id=\"interface-phalcon-validation-validatorinterface\">Interface <strong>Phalcon\\Validation\\ValidatorInterface</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/validation/validatorinterface.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"hasoption\" class=\"method-signature\">abstract public <strong>hasOption</strong> (<em>mixed</em> $key)</h3> <p>...</p> <h3 id=\"getoption\" class=\"method-signature\">abstract public <strong>getOption</strong> (<em>mixed</em> $key, [<em>mixed</em> $defaultValue])</h3> <p>...</p> <h3 id=\"validate\" class=\"method-signature\">abstract public <strong>validate</strong> (<a class=\"reference internal\" href=\"phalcon_validation\"><em>Phalcon\\Validation</em></a> $validation, <em>mixed</em> $attribute)</h3> <p>...</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_ValidatorInterface.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Validation_ValidatorInterface.html</a>\n  </p>\n</div>\n","api/phalcon_session":"<h1 id=\"abstract-class-phalcon-session\">Abstract class <strong>Phalcon\\Session</strong>\n</h1> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/session.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Session.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Session.html</a>\n  </p>\n</div>\n","reference/linuxtools":"<h1 id=\"phalcon-developer-tools-on-linux\">Phalcon Developer Tools on Linux</h1> <p>These steps will guide you through the process of installing Phalcon Developer Tools for Linux.</p>  <h2 id=\"prerequisites\">Prerequisites</h2> <p>The Phalcon PHP extension is required to run Phalcon Tools. If you haven’t installed it yet, please see the <a class=\"reference internal\" href=\"install\"><em>Installation</em></a> section for instructions.</p>   <h2 id=\"download\">Download</h2> <p>You can download a cross platform package containing the developer tools from the <a class=\"reference external\" href=\"http://phalconphp.com/download\">Download</a> section. Also you can clone it from <a class=\"reference external\" href=\"https://github.com/phalcon/phalcon-devtools\">Github</a>.</p> <p>Open a terminal and type the commands below:</p> <div class=\"figure align-center\"> <img alt=\"../_images/linux-1.png\" src=\"https://docs.phalconphp.com/en/latest/_images/linux-1.png\"> </div> <p>Then enter the folder where the tools were cloned and execute ”. ./phalcon.sh”, (don’t forget the dot at beginning of the command):</p> <div class=\"figure align-center\"> <img alt=\"../_images/linux-2.png\" src=\"https://docs.phalconphp.com/en/latest/_images/linux-2.png\"> </div> <p>Create a symbolink link to the phalcon.php script:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ln -s ~/phalcon-devtools/phalcon.php /usr/bin/phalcon\n\nchmod ugo+x /usr/bin/phalcon\n</pre> <p>Congratulations you now have Phalcon tools installed!</p>  <h3 id=\"related-guides\">Related Guides</h3> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"tools\"><em>Using Developer Tools</em></a></li> <li><a class=\"reference internal\" href=\"wintools\"><em>Installation on Windows</em></a></li> <li><a class=\"reference internal\" href=\"mactools\"><em>Installation on Mac</em></a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/linuxtools.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/linuxtools.html</a>\n  </p>\n</div>\n","reference/mactools":"<h1 id=\"phalcon-developer-tools-on-mac-os-x\">Phalcon Developer Tools on Mac OS X</h1> <p>These steps will guide you through the process of installing Phalcon Developer Tools for OS/X.</p>  <h2 id=\"prerequisites\">Prerequisites</h2> <p>The Phalcon PHP extension is required to run Phalcon Tools. If you haven’t installed it yet, please see the <a class=\"reference internal\" href=\"install\"><em>Installation</em></a> section for instructions.</p>   <h2 id=\"download\">Download</h2> <p>You can download a cross platform package containing the developer tools from the <a class=\"reference external\" href=\"http://phalconphp.com/download\">Download</a> section. You can also clone it from <a class=\"reference external\" href=\"https://github.com/phalcon/phalcon-devtools\">Github</a>.</p> <p>Open the terminal application:</p> <div class=\"figure align-center\"> <img alt=\"../_images/mac-1.png\" src=\"https://docs.phalconphp.com/en/latest/_images/mac-1.png\"> </div> <p>Copy &amp; Paste the commands below in your terminal:</p> <pre class=\"highlight-bash\" data-language=\"bash\">wget -q --no-check-certificate -O phalcon-tools.zip http://github.com/phalcon/phalcon-devtools/zipball/master\nunzip -q phalcon-tools.zip\nmv phalcon-phalcon-devtools-* phalcon-tools\n</pre> <p>Check where the phalcon-tools directory was installed using a <em>pwd</em> command in your terminal:</p> <div class=\"figure align-center\"> <img alt=\"../_images/mac-2.png\" src=\"https://docs.phalconphp.com/en/latest/_images/mac-2.png\"> </div> <p>On the Mac platform, you need to configure your user PATH to include Phalcon tools. Edit your .profile and append the Phalcon tools path to the environment variable PATH:</p> <div class=\"figure align-center\"> <img alt=\"../_images/mac-3.png\" src=\"https://docs.phalconphp.com/en/latest/_images/mac-3.png\"> </div> <p>Insert these two lines at the end of the file:</p> <pre class=\"highlight-bash\" data-language=\"bash\">export PATH=$PATH:/Users/scott/phalcon-tools\nexport PTOOLSPATH=/Users/scott/phalcon-tools\n</pre> <p>The .profile should look like this:</p> <div class=\"figure align-center\"> <img alt=\"../_images/mac-4.png\" src=\"https://docs.phalconphp.com/en/latest/_images/mac-4.png\"> </div> <p>Save your changes and close the editor. In the terminal window, type the following commands to create a symbolic link to the phalcon.php script:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ln -s ~/phalcon-tools/phalcon.php ~/phalcon-tools/phalcon\nchmod +x ~/phalcon-tools/phalcon\n</pre> <p>Type the command “phalcon” and you will see something like this:</p> <div class=\"figure align-center\"> <img alt=\"../_images/mac-5.png\" src=\"https://docs.phalconphp.com/en/latest/_images/mac-5.png\"> </div> <p>Congratulations you now have Phalcon tools installed!</p>  <h3 id=\"related-guides\">Related Guides</h3> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"tools\"><em>Using Developer Tools</em></a></li> <li><a class=\"reference internal\" href=\"wintools\"><em>Installation on Windows</em></a></li> <li><a class=\"reference internal\" href=\"linuxtools\"><em>Installation on Linux</em></a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/mactools.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/mactools.html</a>\n  </p>\n</div>\n","api/phalcon_db_dialect_mysql":"<h1 id=\"class-phalcon-db-dialect-mysql\">Class <strong>Phalcon\\Db\\Dialect\\Mysql</strong>\n</h1> <p><em>extends</em> abstract class <a class=\"reference internal\" href=\"phalcon_db_dialect\"><em>Phalcon\\Db\\Dialect</em></a></p> <p><em>implements</em> <a class=\"reference internal\" href=\"phalcon_db_dialectinterface\"><em>Phalcon\\Db\\DialectInterface</em></a></p> <p><span class=\"raw-html\"><a href=\"https://github.com/phalcon/cphalcon/blob/master/phalcon/db/dialect/mysql.zep\" class=\"btn btn-default btn-sm\">Source on GitHub</a></span></p> <p>Generates database specific SQL for the MySQL RDBMS</p>  <h2 id=\"methods\">Methods</h2> <h3 id=\"getcolumndefinition\" class=\"method-signature\">public <strong>getColumnDefinition</strong> (<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column)</h3> <p>Gets the column name in MySQL</p> <h3 id=\"addcolumn\" class=\"method-signature\">public <strong>addColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column)</h3> <p>Generates SQL to add a column to a table</p> <h3 id=\"modifycolumn\" class=\"method-signature\">public <strong>modifyColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $column, [<a class=\"reference internal\" href=\"phalcon_db_columninterface\"><em>Phalcon\\Db\\ColumnInterface</em></a> $currentColumn])</h3> <p>Generates SQL to modify a column in a table</p> <h3 id=\"dropcolumn\" class=\"method-signature\">public <strong>dropColumn</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $columnName)</h3> <p>Generates SQL to delete a column from a table</p> <h3 id=\"addindex\" class=\"method-signature\">public <strong>addIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index)</h3> <p>Generates SQL to add an index to a table</p> <h3 id=\"dropindex\" class=\"method-signature\">public <strong>dropIndex</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $indexName)</h3> <p>Generates SQL to delete an index from a table</p> <h3 id=\"addprimarykey\" class=\"method-signature\">public <strong>addPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_indexinterface\"><em>Phalcon\\Db\\IndexInterface</em></a> $index)</h3> <p>Generates SQL to add the primary key to a table</p> <h3 id=\"dropprimarykey\" class=\"method-signature\">public <strong>dropPrimaryKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName)</h3> <p>Generates SQL to delete primary key from a table</p> <h3 id=\"addforeignkey\" class=\"method-signature\">public <strong>addForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <a class=\"reference internal\" href=\"phalcon_db_referenceinterface\"><em>Phalcon\\Db\\ReferenceInterface</em></a> $reference)</h3> <p>Generates SQL to add an index to a table</p> <h3 id=\"dropforeignkey\" class=\"method-signature\">public <strong>dropForeignKey</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>mixed</em> $referenceName)</h3> <p>Generates SQL to delete a foreign key from a table</p> <h3 id=\"createtable\" class=\"method-signature\">public <strong>createTable</strong> (<em>mixed</em> $tableName, <em>mixed</em> $schemaName, <em>array</em> $definition)</h3> <p>Generates SQL to create a table</p> <h3 id=\"droptable\" class=\"method-signature\">public <strong>dropTable</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists])</h3> <p>Generates SQL to drop a table</p> <h3 id=\"createview\" class=\"method-signature\">public <strong>createView</strong> (<em>mixed</em> $viewName, <em>array</em> $definition, [<em>mixed</em> $schemaName])</h3> <p>Generates SQL to create a view</p> <h3 id=\"dropview\" class=\"method-signature\">public <strong>dropView</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName], [<em>mixed</em> $ifExists])</h3> <p>Generates SQL to drop a view</p> <h3 id=\"tableexists\" class=\"method-signature\">public <strong>tableExists</strong> (<em>mixed</em> $tableName, [<em>mixed</em> $schemaName])</h3> <p>Generates SQL checking for the existence of a schema.table</p> <pre class=\"highlight-php\" data-language=\"php\">echo $dialect-&gt;tableExists(\"posts\", \"blog\");\n    echo $dialect-&gt;tableExists(\"posts\");\n</pre> <h3 id=\"viewexists\" class=\"method-signature\">public <strong>viewExists</strong> (<em>mixed</em> $viewName, [<em>mixed</em> $schemaName])</h3> <p>Generates SQL checking for the existence of a schema.view</p> <h3 id=\"describecolumns\" class=\"method-signature\">public <strong>describeColumns</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>Generates SQL describing a table</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($dialect-&gt;describeColumns(\"posts\"));\n</pre> <h3 id=\"listtables\" class=\"method-signature\">public <strong>listTables</strong> ([<em>mixed</em> $schemaName])</h3> <p>List all tables in database</p> <pre class=\"highlight-php\" data-language=\"php\">print_r($dialect-&gt;listTables(\"blog\"))\n</pre> <h3 id=\"listviews\" class=\"method-signature\">public <strong>listViews</strong> ([<em>mixed</em> $schemaName])</h3> <p>Generates the SQL to list all views of a schema or user</p> <h3 id=\"describeindexes\" class=\"method-signature\">public <strong>describeIndexes</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>Generates SQL to query indexes on a table</p> <h3 id=\"describereferences\" class=\"method-signature\">public <strong>describeReferences</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>Generates SQL to query foreign keys on a table</p> <h3 id=\"tableoptions\" class=\"method-signature\">public <strong>tableOptions</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema])</h3> <p>Generates the SQL to describe the table creation options</p> <h3 id=\"_gettableoptions\" class=\"method-signature\">protected <strong>_getTableOptions</strong> (<em>array</em> $definition)</h3> <p>Generates SQL to add the table creation options</p> <h3 id=\"registercustomfunction\" class=\"method-signature\">public <strong>registerCustomFunction</strong> (<em>mixed</em> $name, <em>mixed</em> $customFunction) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Registers custom SQL functions</p> <h3 id=\"getcustomfunctions\" class=\"method-signature\">public <strong>getCustomFunctions</strong> () <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Returns registered functions</p> <h3 id=\"escapeschema\" class=\"method-signature\">final public <strong>escapeSchema</strong> (<em>mixed</em> $str, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Escape Schema</p> <h3 id=\"escape\" class=\"method-signature\">final public <strong>escape</strong> (<em>mixed</em> $str, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Escape identifiers</p> <h3 id=\"limit\" class=\"method-signature\">public <strong>limit</strong> (<em>mixed</em> $sqlQuery, <em>mixed</em> $number) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Generates the SQL for LIMIT clause</p> <pre class=\"highlight-php\" data-language=\"php\">$sql = $dialect-&gt;limit('SELECT * FROM robots', 10);\n    echo $sql; // SELECT * FROM robots LIMIT 10\n\n    $sql = $dialect-&gt;limit('SELECT * FROM robots', [10, 50]);\n    echo $sql; // SELECT * FROM robots LIMIT 10 OFFSET 50\n</pre> <h3 id=\"forupdate\" class=\"method-signature\">public <strong>forUpdate</strong> (<em>mixed</em> $sqlQuery) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Returns a SQL modified with a FOR UPDATE clause</p> <pre class=\"highlight-php\" data-language=\"php\">$sql = $dialect-&gt;forUpdate('SELECT * FROM robots');\n echo $sql; // SELECT * FROM robots FOR UPDATE\n</pre> <h3 id=\"sharedlock\" class=\"method-signature\">public <strong>sharedLock</strong> (<em>mixed</em> $sqlQuery) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <pre class=\"highlight-php\" data-language=\"php\">$sql = $dialect-&gt;sharedLock('SELECT * FROM robots');\n echo $sql; // SELECT * FROM robots LOCK IN SHARE MODE\n</pre> <h3 id=\"getcolumnlist\" class=\"method-signature\">final public <strong>getColumnList</strong> (<em>array</em> $columnList, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Gets a list of columns with escaped identifiers</p> <pre class=\"highlight-php\" data-language=\"php\">echo $dialect-&gt;getColumnList(array('column1', 'column'));\n</pre> <h3 id=\"getsqlcolumn\" class=\"method-signature\">final public <strong>getSqlColumn</strong> (<em>mixed</em> $column, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve Column expressions</p> <h3 id=\"getsqlexpression\" class=\"method-signature\">public <strong>getSqlExpression</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Transforms an intermediate representation for an expression into a database system valid expression</p> <h3 id=\"getsqltable\" class=\"method-signature\">final public <strong>getSqlTable</strong> (<em>mixed</em> $table, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Transform an intermediate representation of a schema/table into a database system valid expression</p> <h3 id=\"select\" class=\"method-signature\">public <strong>select</strong> (<em>array</em> $definition) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Builds a SELECT statement</p> <h3 id=\"supportssavepoints\" class=\"method-signature\">public <strong>supportsSavepoints</strong> () <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Checks whether the platform supports savepoints</p> <h3 id=\"supportsreleasesavepoints\" class=\"method-signature\">public <strong>supportsReleaseSavepoints</strong> () <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Checks whether the platform supports releasing savepoints.</p> <h3 id=\"createsavepoint\" class=\"method-signature\">public <strong>createSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Generate SQL to create a new savepoint</p> <h3 id=\"releasesavepoint\" class=\"method-signature\">public <strong>releaseSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Generate SQL to release a savepoint</p> <h3 id=\"rollbacksavepoint\" class=\"method-signature\">public <strong>rollbackSavepoint</strong> (<em>mixed</em> $name) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Generate SQL to rollback a savepoint</p> <h3 id=\"getsqlexpressionscalar\" class=\"method-signature\">final protected <strong>getSqlExpressionScalar</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve Column expressions</p> <h3 id=\"getsqlexpressionobject\" class=\"method-signature\">final protected <strong>getSqlExpressionObject</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve object expressions</p> <h3 id=\"getsqlexpressionqualified\" class=\"method-signature\">final protected <strong>getSqlExpressionQualified</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve qualified expressions</p> <h3 id=\"getsqlexpressionbinaryoperations\" class=\"method-signature\">final protected <strong>getSqlExpressionBinaryOperations</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve binary operations expressions</p> <h3 id=\"getsqlexpressionunaryoperations\" class=\"method-signature\">final protected <strong>getSqlExpressionUnaryOperations</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve unary operations expressions</p> <h3 id=\"getsqlexpressionfunctioncall\" class=\"method-signature\">final protected <strong>getSqlExpressionFunctionCall</strong> (<em>array</em> $expression, <em>mixed</em> $escapeChar, [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve function calls</p> <h3 id=\"getsqlexpressionlist\" class=\"method-signature\">final protected <strong>getSqlExpressionList</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve Lists</p> <h3 id=\"getsqlexpressionall\" class=\"method-signature\">final protected <strong>getSqlExpressionAll</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve *</p> <h3 id=\"getsqlexpressioncastvalue\" class=\"method-signature\">final protected <strong>getSqlExpressionCastValue</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve CAST of values</p> <h3 id=\"getsqlexpressionconvertvalue\" class=\"method-signature\">final protected <strong>getSqlExpressionConvertValue</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve CONVERT of values encodings</p> <h3 id=\"getsqlexpressioncase\" class=\"method-signature\">final protected <strong>getSqlExpressionCase</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve CASE expressions</p> <h3 id=\"getsqlexpressionfrom\" class=\"method-signature\">final protected <strong>getSqlExpressionFrom</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a FROM clause</p> <h3 id=\"getsqlexpressionjoins\" class=\"method-signature\">final protected <strong>getSqlExpressionJoins</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a JOINs clause</p> <h3 id=\"getsqlexpressionwhere\" class=\"method-signature\">final protected <strong>getSqlExpressionWhere</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a WHERE clause</p> <h3 id=\"getsqlexpressiongroupby\" class=\"method-signature\">final protected <strong>getSqlExpressionGroupBy</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a GROUP BY clause</p> <h3 id=\"getsqlexpressionhaving\" class=\"method-signature\">final protected <strong>getSqlExpressionHaving</strong> (<em>array</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a HAVING clause</p> <h3 id=\"getsqlexpressionorderby\" class=\"method-signature\">final protected <strong>getSqlExpressionOrderBy</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve an ORDER BY clause</p> <h3 id=\"getsqlexpressionlimit\" class=\"method-signature\">final protected <strong>getSqlExpressionLimit</strong> (<em>mixed</em> $expression, [<em>mixed</em> $escapeChar], [<em>mixed</em> $bindCounts]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Resolve a LIMIT clause</p> <h3 id=\"preparecolumnalias\" class=\"method-signature\">protected <strong>prepareColumnAlias</strong> (<em>mixed</em> $qualified, [<em>mixed</em> $alias], [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Prepares column for this RDBMS</p> <h3 id=\"preparetable\" class=\"method-signature\">protected <strong>prepareTable</strong> (<em>mixed</em> $table, [<em>mixed</em> $schema], [<em>mixed</em> $alias], [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Prepares table for this RDBMS</p> <h3 id=\"preparequalified\" class=\"method-signature\">protected <strong>prepareQualified</strong> (<em>mixed</em> $column, [<em>mixed</em> $domain], [<em>mixed</em> $escapeChar]) <small>inherited from Phalcon\\Db\\Dialect</small>\n</h3> <p>Prepares qualified for this RDBMS</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_MySQL.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/api/Phalcon_Db_Dialect_MySQL.html</a>\n  </p>\n</div>\n","reference/wintools":"<h1 id=\"phalcon-developer-tools-on-windows\">Phalcon Developer Tools on Windows</h1> <p>These steps will guide you through the process of installing Phalcon Developer Tools for Windows.</p>  <h2 id=\"prerequisites\">Prerequisites</h2> <p>The Phalcon PHP extension is required to run Phalcon Tools. If you haven’t installed it yet, please see the <a class=\"reference internal\" href=\"install\"><em>Installation</em></a> section for instructions.</p>   <h2 id=\"download\">Download</h2> <p>You can download a cross platform package containing the developer tools from the <a class=\"reference external\" href=\"http://phalconphp.com/download\">Download</a> section. Also you can clone it from <a class=\"reference external\" href=\"https://github.com/phalcon/phalcon-devtools\">Github</a>.</p> <p>On the Windows platform, you need to configure the system PATH to include Phalcon tools as well as the PHP executable. If you download the Phalcon tools as a zip archive, extract it on any path of your local drive i.e. <em>c:\\phalcon-tools</em>. You will need this path in the steps below. Edit the file “phalcon.bat” by right clicking on the file and selecting “Edit”:</p> <div class=\"figure align-center\"> <img alt=\"../_images/path-0.png\" src=\"https://docs.phalconphp.com/en/latest/_images/path-0.png\"> </div> <p>Change the path to the one you installed the Phalcon tools (set PTOOLSPATH=C:phalcon-tools):</p> <div class=\"figure align-center\"> <img alt=\"../_images/path-01.png\" src=\"https://docs.phalconphp.com/en/latest/_images/path-01.png\"> </div> <p>Save the changes.</p>  <h3 id=\"adding-php-and-tools-to-your-system-path\">Adding PHP and Tools to your system PATH</h3> <p>Because the scripts are written in PHP, you need to install it on your machine. Depending on your PHP installation, the executable can be located in various places. Search for the file php.exe and copy the path it is located in. For instance, if using the latest WAMP stack, PHP is located in: <em>C:\\wampbin\\php\\php5.3.10\\php.exe</em>.</p> <p>From the Windows start menu, right mouse click on the “Computer” icon and select “Properties”:</p> <div class=\"figure align-center\"> <img alt=\"../_images/path-1.png\" src=\"https://docs.phalconphp.com/en/latest/_images/path-1.png\"> </div> <p>Click the “Advanced” tab and then the button “Environment Variables”:</p> <div class=\"figure align-center\"> <img alt=\"../_images/path-2.png\" src=\"https://docs.phalconphp.com/en/latest/_images/path-2.png\"> </div> <p>At the bottom, look for the section “System variables” and edit the variable “Path”:</p> <div class=\"figure align-center\"> <img alt=\"../_images/path-3.png\" src=\"https://docs.phalconphp.com/en/latest/_images/path-3.png\"> </div> <p>Be very careful on this step! You need to append at the end of the long string the path where your php.exe was located and the path where Phalcon tools are installed. Use the ”;” character to separate the different paths in the variable:</p> <div class=\"figure align-center\"> <img alt=\"../_images/path-4.png\" src=\"https://docs.phalconphp.com/en/latest/_images/path-4.png\"> </div> <p>Accept the changes made by clicking “OK” and close the dialogs opened. From the start menu click on the option “Run”. If you can’t find this option, press “Windows Key” + “R”.</p> <div class=\"figure align-center\"> <img alt=\"../_images/path-5.png\" src=\"https://docs.phalconphp.com/en/latest/_images/path-5.png\"> </div> <p>Type “cmd” and press enter to open the windows command line utility:</p> <div class=\"figure align-center\"> <img alt=\"../_images/path-6.png\" src=\"https://docs.phalconphp.com/en/latest/_images/path-6.png\"> </div> <p>Type the commands “php -v” and “phalcon” and you will see something like this:</p> <div class=\"figure align-center\"> <img alt=\"../_images/path-7.png\" src=\"https://docs.phalconphp.com/en/latest/_images/path-7.png\"> </div> <p>Congratulations you now have Phalcon tools installed!</p>   <h3 id=\"related-guides\">Related Guides</h3> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"tools\"><em>Using Developer Tools</em></a></li> <li><a class=\"reference internal\" href=\"mactools\"><em>Installation on OS X</em></a></li> <li><a class=\"reference internal\" href=\"linuxtools\"><em>Installation on Linux</em></a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Phalcon Framework Team<br>Licensed under the Creative Commons Attribution License 3.0.<br>\n    <a href=\"https://docs.phalconphp.com/en/latest/reference/wintools.html\" class=\"_attribution-link\">https://docs.phalconphp.com/en/latest/reference/wintools.html</a>\n  </p>\n</div>\n"}