{"index":"<h1 class=\"gh-header-title instapaper_title\">D3.js</h1>   <p>Everything in D3 is scoped under the <code>d3</code> namespace.</p> <p>D3 uses <a href=\"http://semver.org\">semantic versioning</a>. You can find the current version of D3 as <code>d3.version</code>.</p> <p>See one of:</p> <ul> <li> <a href=\"#d3-core\">Core</a> - selections, transitions, data, localization, colors, etc.</li> <li> <a href=\"#d3scale-scales\">Scales</a> - convert between data and visual encodings</li> <li> <a href=\"#d3svg-svg\">SVG</a> - utilities for creating Scalable Vector Graphics</li> <li> <a href=\"#d3time-time\">Time</a> - parse or format times, compute calendar intervals, etc.</li> <li> <a href=\"#d3layout-layouts\">Layouts</a> - derive secondary data for positioning elements</li> <li> <a href=\"#d3geo-geography\">Geography</a> - project spherical coordinates, latitude &amp; longitude math</li> <li> <a href=\"#d3geom-geometry\">Geometry</a> - utilities for 2D geometry, such as Voronoi diagrams and quadtrees</li> <li> <a href=\"#d3behavior-behaviors\">Behaviors</a> - reusable interaction behaviors</li> </ul> <h2 id=\"d3-core\"> d3 (core) </h2> <h3> <a href=\"selections\">Selections</a> </h3> <ul> <li> <a href=\"selections#d3_select\">d3.select</a> - select an element from the current document.</li> <li> <a href=\"selections#d3_selectAll\">d3.selectAll</a> - select multiple elements from the current document.</li> <li> <a href=\"selections#attr\">selection.attr</a> - get or set attribute values.</li> <li> <a href=\"selections#classed\">selection.classed</a> - add or remove CSS classes.</li> <li> <a href=\"selections#style\">selection.style</a> - get or set style properties.</li> <li> <a href=\"selections#property\">selection.property</a> - get or set raw properties.</li> <li> <a href=\"selections#text\">selection.text</a> - get or set text content.</li> <li> <a href=\"selections#html\">selection.html</a> - get or set inner HTML content.</li> <li> <a href=\"selections#append\">selection.append</a> - create and append new elements.</li> <li> <a href=\"selections#insert\">selection.insert</a> - create and insert new elements before existing elements.</li> <li> <a href=\"selections#remove\">selection.remove</a> - remove elements from the document.</li> <li> <a href=\"selections#data\">selection.data</a> - get or set data for a group of elements, while computing a relational join.</li> <li> <a href=\"selections#enter\">selection.enter</a> - returns placeholders for missing elements.</li> <li> <a href=\"selections#exit\">selection.exit</a> - returns elements that are no longer needed.</li> <li> <a href=\"selections#datum\">selection.datum</a> - get or set data for individual elements, without computing a join.</li> <li> <a href=\"selections#filter\">selection.filter</a> - filter a selection based on data.</li> <li> <a href=\"selections#sort\">selection.sort</a> - sort elements in the document based on data.</li> <li> <a href=\"selections#order\">selection.order</a> - reorders elements in the document to match the selection.</li> <li> <a href=\"selections#on\">selection.on</a> - add or remove event listeners for interaction.</li> <li> <a href=\"selections#transition\">selection.transition</a> - start a transition on the selected elements.</li> <li> <a href=\"selections#interrupt\">selection.interrupt</a> - immediately interrupt the current transition, if any.</li> <li> <a href=\"selections#each\">selection.each</a> - call a function for each selected element.</li> <li> <a href=\"selections#call\">selection.call</a> - call a function passing in the current selection.</li> <li> <a href=\"selections#empty\">selection.empty</a> - returns true if the selection is empty.</li> <li> <a href=\"selections#node\">selection.node</a> - returns the first node in the selection.</li> <li> <a href=\"selections#size\">selection.size</a> - returns the number of elements in the selection.</li> <li> <a href=\"selections#select\">selection.select</a> - subselect a descendant element for each selected element.</li> <li> <a href=\"selections#selectAll\">selection.selectAll</a> - subselect multiple descendants for each selected element.</li> <li> <a href=\"selections#d3_selection\">d3.selection</a> - augment the selection prototype, or test instance types.</li> <li> <a href=\"selections#d3_event\">d3.event</a> - access the current user event for interaction.</li> <li> <a href=\"selections#d3_mouse\">d3.mouse</a> - gets the mouse position relative to a specified container.</li> <li> <a href=\"selections#d3_touch\">d3.touch</a> - gets a touch position relative to a specified container.</li> <li> <a href=\"selections#d3_touches\">d3.touches</a> - gets the touch positions relative to a specified container.</li> </ul> <h3> <a href=\"transitions\">Transitions</a> </h3> <ul> <li> <a href=\"transitions#d3_transition\">d3.transition</a> - start an animated transition.</li> <li> <a href=\"transitions#delay\">transition.delay</a> - specify per-element delay in milliseconds.</li> <li> <a href=\"transitions#duration\">transition.duration</a> - specify per-element duration in milliseconds.</li> <li> <a href=\"transitions#ease\">transition.ease</a> - specify transition easing function.</li> <li> <a href=\"transitions#attr\">transition.attr</a> - smoothly transition to the new attribute value.</li> <li> <a href=\"transitions#attrTween\">transition.attrTween</a> - smoothly transition between two attribute values.</li> <li> <a href=\"transitions#style\">transition.style</a> - smoothly transition to the new style property value.</li> <li> <a href=\"transitions#styleTween\">transition.styleTween</a> - smoothly transition between two style property values.</li> <li> <a href=\"transitions#text\">transition.text</a> - set the text content when the transition starts.</li> <li> <a href=\"transitions#tween\">transition.tween</a> - specify a custom tween operator to run as part of the transition.</li> <li> <a href=\"transitions#select\">transition.select</a> - start a transition on a descendant element for each selected element.</li> <li> <a href=\"transitions#selectAll\">transition.selectAll</a> - start a transition on multiple descendants for each selected element.</li> <li> <a href=\"transitions#filter\">transition.filter</a> - filter a transition based on data.</li> <li> <a href=\"transitions#transition\">transition.transition</a> - when this transition ends, start another one on the same elements.</li> <li> <a href=\"transitions#remove\">transition.remove</a> - remove selected elements at the end of a transition.</li> <li> <a href=\"transitions#empty\">transition.empty</a> - returns true if the transition is empty.</li> <li> <a href=\"transitions#node\">transition.node</a> - returns the first node in the transition.</li> <li> <a href=\"transitions#size\">transition.size</a> - returns the number of elements in the selection.</li> <li> <a href=\"transitions#each\">transition.each</a> - add a listener for transition end events.</li> <li> <a href=\"transitions#call\">transition.call</a> - call a function passing in the current transition.</li> <li> <a href=\"transitions#d3_ease\">d3.ease</a> - customize transition timing.</li> <li> <a href=\"transitions#_ease\">ease</a> - a parametric easing function.</li> <li> <a href=\"transitions#d3_timer\">d3.timer</a> - start a custom animation timer.</li> <li> <a href=\"transitions#d3_timer_flush\">d3.timer.flush</a> - immediately execute any zero-delay timers.</li> <li> <a href=\"transitions#d3_interpolate\">d3.interpolate</a> - interpolate two values.</li> <li> <a href=\"transitions#_interpolate\">interpolate</a> - a parametric interpolation function.</li> <li> <a href=\"transitions#d3_interpolateNumber\">d3.interpolateNumber</a> - interpolate two numbers.</li> <li> <a href=\"transitions#d3_interpolateRound\">d3.interpolateRound</a> - interpolate two integers.</li> <li> <a href=\"transitions#d3_interpolateString\">d3.interpolateString</a> - interpolate two strings.</li> <li> <a href=\"transitions#d3_interpolateRgb\">d3.interpolateRgb</a> - interpolate two RGB colors.</li> <li> <a href=\"transitions#d3_interpolateHsl\">d3.interpolateHsl</a> - interpolate two HSL colors.</li> <li> <a href=\"transitions#d3_interpolateLab\">d3.interpolateLab</a> - interpolate two L*a*b* colors.</li> <li> <a href=\"transitions#d3_interpolateHcl\">d3.interpolateHcl</a> - interpolate two HCL colors.</li> <li> <a href=\"transitions#d3_interpolateArray\">d3.interpolateArray</a> - interpolate two arrays of values.</li> <li> <a href=\"transitions#d3_interpolateObject\">d3.interpolateObject</a> - interpolate two arbitrary objects.</li> <li> <a href=\"transitions#d3_interpolateTransform\">d3.interpolateTransform</a> - interpolate two 2D matrix transforms.</li> <li> <a href=\"transitions#d3_interpolateZoom\">d3.interpolateZoom</a> - zoom and pan between two points smoothly.</li> <li> <a href=\"transitions#d3_interpolators\">d3.interpolators</a> - register a custom interpolator.</li> </ul> <h3> <a href=\"arrays\">Working with Arrays</a> </h3> <ul> <li> <a href=\"arrays#d3_ascending\">d3.ascending</a> - compare two values for sorting.</li> <li> <a href=\"arrays#d3_descending\">d3.descending</a> - compare two values for sorting.</li> <li> <a href=\"arrays#d3_min\">d3.min</a> - find the minimum value in an array.</li> <li> <a href=\"arrays#d3_max\">d3.max</a> - find the maximum value in an array.</li> <li> <a href=\"arrays#d3_extent\">d3.extent</a> - find the minimum and maximum value in an array.</li> <li> <a href=\"arrays#d3_sum\">d3.sum</a> - compute the sum of an array of numbers.</li> <li> <a href=\"arrays#d3_mean\">d3.mean</a> - compute the arithmetic mean of an array of numbers.</li> <li> <a href=\"arrays#d3_median\">d3.median</a> - compute the median of an array of numbers (the 0.5-quantile).</li> <li> <a href=\"arrays#d3_quantile\">d3.quantile</a> - compute a quantile for a sorted array of numbers.</li> <li> <a href=\"arrays#d3_variance\">d3.variance</a> - compute the variance of an array of numbers.</li> <li> <a href=\"arrays#d3_deviation\">d3.deviation</a> - compute the standard deviation of an array of numbers.</li> <li> <a href=\"arrays#d3_bisect\">d3.bisect</a> - search for a value in a sorted array.</li> <li> <a href=\"arrays#d3_bisectRight\">d3.bisectRight</a> - search for a value in a sorted array.</li> <li> <a href=\"arrays#d3_bisectLeft\">d3.bisectLeft</a> - search for a value in a sorted array.</li> <li> <a href=\"arrays#d3_bisector\">d3.bisector</a> - bisect using an accessor or comparator.</li> <li> <a href=\"arrays#d3_shuffle\">d3.shuffle</a> - randomize the order of an array.</li> <li> <a href=\"arrays#d3_permute\">d3.permute</a> - reorder an array of elements according to an array of indexes.</li> <li> <a href=\"arrays#d3_zip\">d3.zip</a> - transpose a variable number of arrays.</li> <li> <a href=\"arrays#d3_transpose\">d3.transpose</a> - transpose an array of arrays.</li> <li> <a href=\"arrays#d3_pairs\">d3.pairs</a> - returns an array of adjacent pairs of elements.</li> <li> <a href=\"arrays#d3_keys\">d3.keys</a> - list the keys of an associative array.</li> <li> <a href=\"arrays#d3_values\">d3.values</a> - list the values of an associated array.</li> <li> <a href=\"arrays#d3_entries\">d3.entries</a> - list the key-value entries of an associative array.</li> <li> <a href=\"arrays#d3_merge\">d3.merge</a> - merge multiple arrays into one array.</li> <li> <a href=\"arrays#d3_range\">d3.range</a> - generate a range of numeric values.</li> <li> <a href=\"arrays#d3_nest\">d3.nest</a> - group array elements hierarchically.</li> <li> <a href=\"arrays#nest_key\">nest.key</a> - add a level to the nest hierarchy.</li> <li> <a href=\"arrays#nest_sortKeys\">nest.sortKeys</a> - sort the current nest level by key.</li> <li> <a href=\"arrays#nest_sortValues\">nest.sortValues</a> - sort the leaf nest level by value.</li> <li> <a href=\"arrays#nest_rollup\">nest.rollup</a> - specify a rollup function for leaf values.</li> <li> <a href=\"arrays#nest_map\">nest.map</a> - evaluate the nest operator, returning an associative array.</li> <li> <a href=\"arrays#nest_entries\">nest.entries</a> - evaluate the nest operator, returning an array of key-values tuples.</li> <li> <a href=\"arrays#d3_map\">d3.map</a> - a shim for ES6 maps, since objects are not hashes!</li> <li> <a href=\"arrays#map_has\">map.has</a> - returns true if the map contains the specified key.</li> <li> <a href=\"arrays#map_get\">map.get</a> - returns the value for the specified key.</li> <li> <a href=\"arrays#map_set\">map.set</a> - sets the value for the specified key.</li> <li> <a href=\"arrays#map_remove\">map.remove</a> - removes the entry for specified key.</li> <li> <a href=\"arrays#map_keys\">map.keys</a> - returns the map’s array of keys.</li> <li> <a href=\"arrays#map_values\">map.values</a> - returns the map’s array of values.</li> <li> <a href=\"arrays#map_entries\">map.entries</a> - returns the map’s array of entries (key-values objects).</li> <li> <a href=\"arrays#map_forEach\">map.forEach</a> - calls the specified function for each entry in the map.</li> <li> <a href=\"arrays#map_empty\">map.empty</a> - returns false if the map has at least one entry.</li> <li> <a href=\"arrays#map_size\">map.size</a> - returns the number of entries in the map.</li> <li> <a href=\"arrays#d3_set\">d3.set</a> - a shim for ES6 sets, since objects are not hashes!</li> <li> <a href=\"arrays#set_has\">set.has</a> - returns true if the set contains the specified value.</li> <li> <a href=\"arrays#set_add\">set.add</a> - adds the specified value.</li> <li> <a href=\"arrays#set_remove\">set.remove</a> - removes the specified value.</li> <li> <a href=\"arrays#set_values\">set.values</a> - returns the set’s array of values.</li> <li> <a href=\"arrays#set_forEach\">set.forEach</a> - calls the specified function for each value in the set.</li> <li> <a href=\"arrays#set_empty\">set.empty</a> - returns true if the set has at least one value.</li> <li> <a href=\"arrays#set_size\">set.size</a> - returns the number of values in the set.</li> </ul> <h3> <a href=\"math\">Math</a> </h3> <ul> <li> <a href=\"math#random_normal\">d3.random.normal</a> - generate a random number with a normal distribution.</li> <li> <a href=\"math#random_logNormal\">d3.random.logNormal</a> - generate a random number with a log-normal distribution.</li> <li> <a href=\"math#random_bates\">d3.random.bates</a> - generate a random number with a Bates distribution.</li> <li> <a href=\"math#random_irwinHall\">d3.random.irwinHall</a> - generate a random number with an Irwin–Hall distribution.</li> <li> <a href=\"math#d3_transform\">d3.transform</a> - compute the standard form of a 2D matrix transform.</li> </ul> <h3> <a href=\"requests\">Loading External Resources</a> </h3> <ul> <li> <a href=\"requests#d3_xhr\">d3.xhr</a> - request a resource using XMLHttpRequest.</li> <li> <a href=\"requests#header\">xhr.header</a> - set a request header.</li> <li> <a href=\"requests#mimeType\">xhr.mimeType</a> - set the Accept request header and override the response MIME type.</li> <li> <a href=\"requests#response\">xhr.response</a> - set a response mapping function.</li> <li> <a href=\"requests#get\">xhr.get</a> - issue a GET request.</li> <li> <a href=\"requests#post\">xhr.post</a> - issue a POST request.</li> <li> <a href=\"requests#send\">xhr.send</a> - issue a request with the specified method and data.</li> <li> <a href=\"requests#abort\">xhr.abort</a> - abort an outstanding request.</li> <li> <a href=\"requests#on\">xhr.on</a> - add an event listener for \"progress\", \"load\" or \"error\" events.</li> <li> <a href=\"requests#d3_text\">d3.text</a> - request a text file.</li> <li> <a href=\"requests#d3_json\">d3.json</a> - request a JSON blob.</li> <li> <a href=\"requests#d3_html\">d3.html</a> - request an HTML document fragment.</li> <li> <a href=\"requests#d3_xml\">d3.xml</a> - request an XML document fragment.</li> <li> <a href=\"csv\">d3.csv</a> - request a comma-separated values (CSV) file.</li> <li> <a href=\"csv#tsv\">d3.tsv</a> - request a tab-separated values (TSV) file.</li> </ul> <h3> <a href=\"formatting\">String Formatting</a> </h3> <ul> <li> <a href=\"formatting#d3_format\">d3.format</a> - format a number as a string.</li> <li> <a href=\"formatting#d3_formatPrefix\">d3.formatPrefix</a> - returns the <a href=\"http://en.wikipedia.org/wiki/Metric_prefix\">SI prefix</a> for the specified value and precision.</li> <li> <a href=\"formatting#d3_requote\">d3.requote</a> - quote a string for use in a regular expression.</li> <li> <a href=\"formatting#d3_round\">d3.round</a> - rounds a value to some digits after the decimal point.</li> </ul> <h3> <a href=\"csv\">CSV Formatting (d3.csv)</a> </h3> <ul> <li> <a href=\"csv#csv\">d3.csv</a> - request a comma-separated values (CSV) file.</li> <li> <a href=\"csv#parse\">d3.csv.parse</a> - parse a CSV string into objects using the header row.</li> <li> <a href=\"csv#parseRows\">d3.csv.parseRows</a> - parse a CSV string into tuples, ignoring the header row.</li> <li> <a href=\"csv#format\">d3.csv.format</a> - format an array of objects into a CSV string.</li> <li> <a href=\"csv#formatRows\">d3.csv.formatRows</a> - format an array of tuples into a CSV string.</li> <li> <a href=\"csv#tsv\">d3.tsv</a> - request a tab-separated values (TSV) file.</li> <li> <a href=\"csv#tsv_parse\">d3.tsv.parse</a> - parse a TSV string into objects using the header row.</li> <li> <a href=\"csv#tsv_parseRows\">d3.tsv.parseRows</a> - parse a TSV string into tuples, ignoring the header row.</li> <li> <a href=\"csv#tsv_format\">d3.tsv.format</a> - format an array of objects into a TSV string.</li> <li> <a href=\"csv#tsv_formatRows\">d3.tsv.formatRows</a> - format an array of tuples into a TSV string.</li> <li> <a href=\"csv#dsv\">d3.dsv</a> - create a parser/formatter for the specified delimiter and mime type.</li> </ul> <h3> <a href=\"localization\">Localization</a> </h3> <ul> <li> <a href=\"localization#d3_locale\">d3.locale</a> - create a new locale using the specified strings.</li> <li> <a href=\"localization#locale_numberFormat\">locale.numberFormat</a> - create a new number formatter.</li> <li> <a href=\"localization#locale_timeFormat\">locale.timeFormat</a> - create a new time formatter / parser.</li> </ul> <h3> <a href=\"colors\">Colors</a> </h3> <ul> <li> <a href=\"colors#d3_rgb\">d3.rgb</a> - specify a color in RGB space.</li> <li> <a href=\"colors#rgb_brighter\">rgb.brighter</a> - increase RGB channels by some exponential factor (gamma).</li> <li> <a href=\"colors#rgb_darker\">rgb.darker</a> - decrease RGB channels by some exponential factor (gamma).</li> <li> <a href=\"colors#rgb_hsl\">rgb.hsl</a> - convert from RGB to HSL.</li> <li> <a href=\"colors#rgb_toString\">rgb.toString</a> - convert an RGB color to a string.</li> <li> <a href=\"colors#d3_hsl\">d3.hsl</a> - specify a color in HSL space.</li> <li> <a href=\"colors#hsl_brighter\">hsl.brighter</a> - increase lightness by some exponential factor (gamma).</li> <li> <a href=\"colors#hsl_darker\">hsl.darker</a> - decrease lightness by some exponential factor (gamma).</li> <li> <a href=\"colors#hsl_rgb\">hsl.rgb</a> - convert from HSL to RGB.</li> <li> <a href=\"colors#hsl_toString\">hsl.toString</a> - convert an HSL color to a string.</li> <li> <a href=\"colors#d3_lab\">d3.lab</a> - specify a color in L*a*b* space.</li> <li> <a href=\"colors#lab_brighter\">lab.brighter</a> - increase lightness by some exponential factor (gamma).</li> <li> <a href=\"colors#lab_darker\">lab.darker</a> - decrease lightness by some exponential factor (gamma).</li> <li> <a href=\"colors#lab_rgb\">lab.rgb</a> - convert from L*a*b* to RGB.</li> <li> <a href=\"colors#lab_toString\">lab.toString</a> - convert a L*a*b* color to a string.</li> <li> <a href=\"colors#d3_hcl\">d3.hcl</a> - specify a color in HCL space.</li> <li> <a href=\"colors#hcl_brighter\">hcl.brighter</a> - increase lightness by some exponential factor (gamma).</li> <li> <a href=\"colors#hcl_darker\">hcl.darker</a> - decrease lightness by some exponential factor (gamma).</li> <li> <a href=\"colors#hcl_rgb\">hcl.rgb</a> - convert from HCL to RGB.</li> <li> <a href=\"colors#hcl_toString\">hcl.toString</a> - convert an HCL color to a string.</li> </ul> <h3> <a href=\"namespaces\">Namespaces</a> </h3> <ul> <li> <a href=\"namespaces#prefix\">d3.ns.prefix</a> - access or extend known XML namespaces.</li> <li> <a href=\"namespaces#qualify\">d3.ns.qualify</a> - qualify a prefixed name, such as \"xlink:href\".</li> </ul> <h3> <a href=\"internals\">Internals</a> </h3> <ul> <li> <a href=\"internals#functor\">d3.functor</a> - create a function that returns a constant.</li> <li> <a href=\"internals#rebind\">d3.rebind</a> - rebind an inherited getter/setter method to a subclass.</li> <li> <a href=\"internals#d3_dispatch\">d3.dispatch</a> - create a custom event dispatcher.</li> <li> <a href=\"internals#dispatch_on\">dispatch.on</a> - register or unregister an event listener.</li> <li> <a href=\"internals#_dispatch\">dispatch.type</a> - dispatch an event to registered listeners.</li> </ul> <h2 id=\"d3scale-scales\"> d3.scale (Scales) </h2> <h3> <a href=\"quantitative-scales#quantitative\">Quantitative</a> </h3> <ul> <li> <a href=\"quantitative-scales#linear\">d3.scale.linear</a> - construct a linear quantitative scale.</li> <li> <a href=\"quantitative-scales#_linear\">linear</a> - get the range value corresponding to a given domain value.</li> <li> <a href=\"quantitative-scales#linear_invert\">linear.invert</a> - get the domain value corresponding to a given range value.</li> <li> <a href=\"quantitative-scales#linear_domain\">linear.domain</a> - get or set the scale's input domain.</li> <li> <a href=\"quantitative-scales#linear_range\">linear.range</a> - get or set the scale's output range.</li> <li> <a href=\"quantitative-scales#linear_rangeRound\">linear.rangeRound</a> - set the scale's output range, and enable rounding.</li> <li> <a href=\"quantitative-scales#linear_interpolate\">linear.interpolate</a> - get or set the scale's output interpolator.</li> <li> <a href=\"quantitative-scales#linear_clamp\">linear.clamp</a> - enable or disable clamping of the output range.</li> <li> <a href=\"quantitative-scales#linear_nice\">linear.nice</a> - extend the scale domain to nice round numbers.</li> <li> <a href=\"quantitative-scales#linear_ticks\">linear.ticks</a> - get representative values from the input domain.</li> <li> <a href=\"quantitative-scales#linear_tickFormat\">linear.tickFormat</a> - get a formatter for displaying tick values.</li> <li> <a href=\"quantitative-scales#linear_copy\">linear.copy</a> - create a new scale from an existing scale.</li> <li> <a href=\"quantitative-scales#sqrt\">d3.scale.sqrt</a> - construct a quantitative scale with a square root transform.</li> <li> <a href=\"quantitative-scales#pow\">d3.scale.pow</a> - construct a quantitative scale with an exponential transform.</li> <li> <a href=\"quantitative-scales#_pow\">pow</a> - get the range value corresponding to a given domain value.</li> <li> <a href=\"quantitative-scales#pow_invert\">pow.invert</a> - get the domain value corresponding to a given range value.</li> <li> <a href=\"quantitative-scales#pow_domain\">pow.domain</a> - get or set the scale's input domain.</li> <li> <a href=\"quantitative-scales#pow_range\">pow.range</a> - get or set the scale's output range.</li> <li> <a href=\"quantitative-scales#pow_rangeRound\">pow.rangeRound</a> - set the scale's output range, and enable rounding.</li> <li> <a href=\"quantitative-scales#pow_interpolate\">pow.interpolate</a> - get or set the scale's output interpolator.</li> <li> <a href=\"quantitative-scales#pow_clamp\">pow.clamp</a> - enable or disable clamping of the output range.</li> <li> <a href=\"quantitative-scales#pow_nice\">pow.nice</a> - extend the scale domain to nice round numbers.</li> <li> <a href=\"quantitative-scales#pow_ticks\">pow.ticks</a> - get representative values from the input domain.</li> <li> <a href=\"quantitative-scales#pow_tickFormat\">pow.tickFormat</a> - get a formatter for displaying tick values.</li> <li> <a href=\"quantitative-scales#pow_exponent\">pow.exponent</a> - get or set the exponent power.</li> <li> <a href=\"quantitative-scales#pow_copy\">pow.copy</a> - create a new scale from an existing scale.</li> <li> <a href=\"quantitative-scales#log\">d3.scale.log</a> - construct a quantitative scale with a logarithmic transform.</li> <li> <a href=\"quantitative-scales#_log\">log</a> - get the range value corresponding to a given domain value.</li> <li> <a href=\"quantitative-scales#log_invert\">log.invert</a> - get the domain value corresponding to a given range value.</li> <li> <a href=\"quantitative-scales#log_domain\">log.domain</a> - get or set the scale's input domain.</li> <li> <a href=\"quantitative-scales#log_range\">log.range</a> - get or set the scale's output range.</li> <li> <a href=\"quantitative-scales#log_rangeRound\">log.rangeRound</a> - set the scale's output range, and enable rounding.</li> <li> <a href=\"quantitative-scales#log_base\">log.base</a> - get or set the scale's logarithmic base.</li> <li> <a href=\"quantitative-scales#log_interpolate\">log.interpolate</a> - get or set the scale's output interpolator.</li> <li> <a href=\"quantitative-scales#log_clamp\">log.clamp</a> - enable or disable clamping of the output range.</li> <li> <a href=\"quantitative-scales#log_nice\">log.nice</a> - extend the scale domain to nice powers of ten.</li> <li> <a href=\"quantitative-scales#log_ticks\">log.ticks</a> - get representative values from the input domain.</li> <li> <a href=\"quantitative-scales#log_tickFormat\">log.tickFormat</a> - get a formatter for displaying tick values.</li> <li> <a href=\"quantitative-scales#log_copy\">log.copy</a> - create a new scale from an existing scale.</li> <li> <a href=\"quantitative-scales#quantize\">d3.scale.quantize</a> - construct a linear quantitative scale with a discrete output range.</li> <li> <a href=\"quantitative-scales#_quantize\">quantize</a> - get the range value corresponding to a given domain value.</li> <li> <a href=\"quantitative-scales#quantize_invertExtent\">quantize.invertExtent</a> - get the domain values for the specified range value.</li> <li> <a href=\"quantitative-scales#quantize_domain\">quantize.domain</a> - get or set the scale's input domain.</li> <li> <a href=\"quantitative-scales#quantize_range\">quantize.range</a> - get or set the scale's output range (as discrete values).</li> <li> <a href=\"quantitative-scales#quantize_copy\">quantize.copy</a> - create a new scale from an existing scale.</li> <li> <a href=\"quantitative-scales#threshold\">d3.scale.threshold</a> - construct a threshold scale with a discrete output range.</li> <li> <a href=\"quantitative-scales#_threshold\">threshold</a> - get the range value corresponding to a given domain value.</li> <li> <a href=\"quantitative-scales#threshold_invertExtent\">threshold.invertExtent</a> - get the domain values for the specified range value.</li> <li> <a href=\"quantitative-scales#threshold_domain\">threshold.domain</a> - get or set the scale's input domain.</li> <li> <a href=\"quantitative-scales#threshold_range\">threshold.range</a> - get or set the scale's output range (as discrete values).</li> <li> <a href=\"quantitative-scales#threshold_copy\">threshold.copy</a> - create a new scale from an existing scale.</li> <li> <a href=\"quantitative-scales#quantile\">d3.scale.quantile</a> - construct a quantitative scale mapping to quantiles.</li> <li> <a href=\"quantitative-scales#_quantile\">quantile</a> - get the range value corresponding to a given domain value.</li> <li> <a href=\"quantitative-scales#quantile_invertExtent\">quantile.invertExtent</a> - get the domain values for the specified range value.</li> <li> <a href=\"quantitative-scales#quantile_domain\">quantile.domain</a> - get or set the scale's input domain (as discrete values).</li> <li> <a href=\"quantitative-scales#quantile_range\">quantile.range</a> - get or set the scale's output range (as discrete values).</li> <li> <a href=\"quantitative-scales#quantile_quantiles\">quantile.quantiles</a> - get the scale's quantile bin thresholds.</li> <li> <a href=\"quantitative-scales#quantile_copy\">quantile.copy</a> - create a new scale from an existing scale.</li> <li> <a href=\"quantitative-scales#identity\">d3.scale.identity</a> - construct a linear identity scale.</li> <li> <a href=\"quantitative-scales#_identity\">identity</a> - the identity function.</li> <li> <a href=\"quantitative-scales#_identity\">identity.invert</a> - equivalent to identity; the identity function.</li> <li> <a href=\"quantitative-scales#identity_domain\">identity.domain</a> - get or set the scale's domain and range.</li> <li> <a href=\"quantitative-scales#identity_domain\">identity.range</a> - equivalent to identity.domain.</li> <li> <a href=\"quantitative-scales#identity_ticks\">identity.ticks</a> - get representative values from the domain.</li> <li> <a href=\"quantitative-scales#identity_tickFormat\">identity.tickFormat</a> - get a formatter for displaying tick values.</li> <li> <a href=\"quantitative-scales#identity_copy\">identity.copy</a> - create a new scale from an existing scale.</li> </ul> <h3> <a href=\"ordinal-scales#ordinal\">Ordinal</a> </h3> <ul> <li> <a href=\"ordinal-scales#ordinal\">d3.scale.ordinal</a> - construct an ordinal scale.</li> <li> <a href=\"ordinal-scales#_ordinal\">ordinal</a> - get the range value corresponding to a given domain value.</li> <li> <a href=\"ordinal-scales#ordinal_domain\">ordinal.domain</a> - get or set the scale's input domain.</li> <li> <a href=\"ordinal-scales#ordinal_range\">ordinal.range</a> - get or set the scale's output range.</li> <li> <a href=\"ordinal-scales#ordinal_rangePoints\">ordinal.rangePoints</a> - divide a continuous output range for discrete points.</li> <li> <a href=\"ordinal-scales#ordinal_rangeRoundPoints\">ordinal.rangeRoundPoints</a> - divide a continuous output range for discrete points.</li> <li> <a href=\"ordinal-scales#ordinal_rangeBands\">ordinal.rangeBands</a> - divide a continuous output range for discrete bands.</li> <li> <a href=\"ordinal-scales#ordinal_rangeRoundBands\">ordinal.rangeRoundBands</a> - divide a continuous output range for discrete bands.</li> <li> <a href=\"ordinal-scales#ordinal_rangeBand\">ordinal.rangeBand</a> - get the discrete range band width.</li> <li> <a href=\"ordinal-scales#ordinal_rangeExtent\">ordinal.rangeExtent</a> - get the minimum and maximum values of the output range.</li> <li> <a href=\"ordinal-scales#ordinal_copy\">ordinal.copy</a> - create a new scale from an existing scale.</li> <li> <a href=\"ordinal-scales#category10\">d3.scale.category10</a> - construct an ordinal scale with ten categorical colors.</li> <li> <a href=\"ordinal-scales#category20\">d3.scale.category20</a> - construct an ordinal scale with twenty categorical colors.</li> <li> <a href=\"ordinal-scales#category20b\">d3.scale.category20b</a> - construct an ordinal scale with twenty categorical colors.</li> <li> <a href=\"ordinal-scales#category20c\">d3.scale.category20c</a> - construct an ordinal scale with twenty categorical colors.</li> </ul> <h2 id=\"d3svg-svg\"> d3.svg (SVG) </h2> <h3> <a href=\"svg-shapes\">Shapes</a> </h3> <ul> <li> <a href=\"svg-shapes#line\">d3.svg.line</a> - create a new line generator.</li> <li> <a href=\"svg-shapes#_line\">line</a> - generate a piecewise linear curve, as in a line chart.</li> <li> <a href=\"svg-shapes#line_x\">line.x</a> - get or set the <em>x</em>-coordinate accessor.</li> <li> <a href=\"svg-shapes#line_y\">line.y</a> - get or set the <em>y</em>-coordinate accessor.</li> <li> <a href=\"svg-shapes#line_interpolate\">line.interpolate</a> - get or set the interpolation mode.</li> <li> <a href=\"svg-shapes#line_tension\">line.tension</a> - get or set the cardinal spline tension.</li> <li> <a href=\"svg-shapes#line_defined\">line.defined</a> - control whether the line is defined at a given point.</li> <li> <a href=\"svg-shapes#line_radial\">d3.svg.line.radial</a> - create a new radial line generator.</li> <li> <a href=\"svg-shapes#_line_radial\">line</a> - generate a piecewise linear curve, as in a polar line chart.</li> <li> <a href=\"svg-shapes#line_radial_radius\">line.radius</a> - get or set the <em>radius</em> accessor.</li> <li> <a href=\"svg-shapes#line_radial_angle\">line.angle</a> - get or set the <em>angle</em> accessor.</li> <li> <a href=\"svg-shapes#line_radial_interpolate\">line.interpolate</a> - get or set the interpolation mode.</li> <li> <a href=\"svg-shapes#line_radial_tension\">line.tension</a> - get or set the cardinal spline tension.</li> <li> <a href=\"svg-shapes#line_radial_defined\">line.defined</a> - control whether the line is defined at a given point.</li> <li> <a href=\"svg-shapes#area\">d3.svg.area</a> - create a new area generator.</li> <li> <a href=\"svg-shapes#_area\">area</a> - generate a piecewise linear area, as in an area chart.</li> <li> <a href=\"svg-shapes#area_x\">area.x</a> - get or set the <em>x</em>-coordinate accessors.</li> <li> <a href=\"svg-shapes#area_x0\">area.x0</a> - get or set the <em>x0</em>-coordinate (baseline) accessor.</li> <li> <a href=\"svg-shapes#area_x1\">area.x1</a> - get or set the <em>x1</em>-coordinate (topline) accessor.</li> <li> <a href=\"svg-shapes#area_y\">area.y</a> - get or set the <em>y</em>-coordinate accessors.</li> <li> <a href=\"svg-shapes#area_y0\">area.y0</a> - get or set the <em>y0</em>-coordinate (baseline) accessor.</li> <li> <a href=\"svg-shapes#area_y1\">area.y1</a> - get or set the <em>y1</em>-coordinate (topline) accessor.</li> <li> <a href=\"svg-shapes#area_interpolate\">area.interpolate</a> - get or set the interpolation mode.</li> <li> <a href=\"svg-shapes#area_tension\">area.tension</a> - get or set the cardinal spline tension.</li> <li> <a href=\"svg-shapes#area_defined\">area.defined</a> - control whether the area is defined at a given point.</li> <li> <a href=\"svg-shapes#area_radial\">d3.svg.area.radial</a> - create a new area generator.</li> <li> <a href=\"svg-shapes#_area_radial\">area</a> - generate a piecewise linear area, as in a polar area chart.</li> <li> <a href=\"svg-shapes#area_radial_radius\">area.radius</a> - get or set the <em>radius</em> accessors.</li> <li> <a href=\"svg-shapes#area_radial_innerRadius\">area.innerRadius</a> - get or set the inner <em>radius</em> (baseline) accessor.</li> <li> <a href=\"svg-shapes#area_radial_outerRadius\">area.outerRadius</a> - get or set the outer <em>radius</em> (topline) accessor.</li> <li> <a href=\"svg-shapes#area_radial_angle\">area.angle</a> - get or set the <em>angle</em> accessors.</li> <li> <a href=\"svg-shapes#area_radial_startAngle\">area.startAngle</a> - get or set the <em>angle</em> (baseline) accessor.</li> <li> <a href=\"svg-shapes#area_radial_endAngle\">area.endAngle</a> - get or set the <em>angle</em> (topline) accessor.</li> <li> <a href=\"svg-shapes#area_radial_defined\">area.defined</a> - control whether the area is defined at a given point.</li> <li> <a href=\"svg-shapes#arc\">d3.svg.arc</a> - create a new arc generator.</li> <li> <a href=\"svg-shapes#_arc\">arc</a> - generate a solid arc, as in a pie or donut chart.</li> <li> <a href=\"svg-shapes#arc_innerRadius\">arc.innerRadius</a> - get or set the inner radius accessor.</li> <li> <a href=\"svg-shapes#arc_outerRadius\">arc.outerRadius</a> - get or set the outer radius accessor.</li> <li> <a href=\"svg-shapes#arc_cornerRadius\">arc.cornerRadius</a> - get or set the corner radius accessor.</li> <li> <a href=\"svg-shapes#arc_padRadius\">arc.padRadius</a> - get or set the pad radius accessor.</li> <li> <a href=\"svg-shapes#arc_startAngle\">arc.startAngle</a> - get or set the start angle accessor.</li> <li> <a href=\"svg-shapes#arc_endAngle\">arc.endAngle</a> - get or set the end angle accessor.</li> <li> <a href=\"svg-shapes#arc_padAngle\">arc.padAngle</a> - get or set the pad angle accessor.</li> <li> <a href=\"svg-shapes#arc_centroid\">arc.centroid</a> - compute the arc centroid.</li> <li> <a href=\"svg-shapes#symbol\">d3.svg.symbol</a> - create a new symbol generator.</li> <li> <a href=\"svg-shapes#_symbol\">symbol</a> - generate categorical symbols, as in a scatterplot.</li> <li> <a href=\"svg-shapes#symbol_type\">symbol.type</a> - get or set the symbol type accessor.</li> <li> <a href=\"svg-shapes#symbol_size\">symbol.size</a> - get or set the symbol size (in square pixels) accessor.</li> <li> <a href=\"svg-shapes#symbolTypes\">d3.svg.symbolTypes</a> - the array of supported symbol types.</li> <li> <a href=\"svg-shapes#chord\">d3.svg.chord</a> - create a new chord generator.</li> <li> <a href=\"svg-shapes#_chord\">chord</a> - generate a quadratic Bézier connecting two arcs, as in a chord diagram.</li> <li> <a href=\"svg-shapes#chord_radius\">chord.radius</a> - get or set the arc radius accessor.</li> <li> <a href=\"svg-shapes#chord_startAngle\">chord.startAngle</a> - get or set the arc start angle accessor.</li> <li> <a href=\"svg-shapes#chord_endAngle\">chord.endAngle</a> - get or set the arc end angle accessor.</li> <li> <a href=\"svg-shapes#chord_source\">chord.source</a> - get or set the source arc accessor.</li> <li> <a href=\"svg-shapes#chord_target\">chord.target</a> - get or set the target arc accessor.</li> <li> <a href=\"svg-shapes#diagonal\">d3.svg.diagonal</a> - create a new diagonal generator.</li> <li> <a href=\"svg-shapes#_diagonal\">diagonal</a> - generate a two-dimensional Bézier connector, as in a node-link diagram.</li> <li> <a href=\"svg-shapes#diagonal_source\">diagonal.source</a> - get or set the source point accessor.</li> <li> <a href=\"svg-shapes#diagonal_target\">diagonal.target</a> - get or set the target point accessor.</li> <li> <a href=\"svg-shapes#diagonal_projection\">diagonal.projection</a> - get or set an optional point transform.</li> <li> <a href=\"svg-shapes#diagonal_radial\">d3.svg.diagonal.radial</a> - create a new diagonal generator.</li> <li> <a href=\"svg-shapes#_diagonal_radial\">diagonal</a> - generate a two-dimensional Bézier connector, as in a node-link diagram.</li> </ul> <h3> <a href=\"svg-axes\">Axes</a> </h3> <ul> <li> <a href=\"svg-axes#axis\">d3.svg.axis</a> - create a new axis generator.</li> <li> <a href=\"svg-axes#_axis\">axis</a> - creates or updates an axis for the given selection or transition.</li> <li> <a href=\"svg-axes#scale\">axis.scale</a> - get or set the axis scale.</li> <li> <a href=\"svg-axes#orient\">axis.orient</a> - get or set the axis orientation.</li> <li> <a href=\"svg-axes#ticks\">axis.ticks</a> - control how ticks are generated for the axis.</li> <li> <a href=\"svg-axes#tickValues\">axis.tickValues</a> - specify tick values explicitly.</li> <li> <a href=\"svg-axes#tickSize\">axis.tickSize</a> - specify the size of major, minor and end ticks.</li> <li> <a href=\"svg-axes#innerTickSize\">axis.innerTickSize</a> - specify the size of inner ticks.</li> <li> <a href=\"svg-axes#outerTickSize\">axis.outerTickSize</a> - specify the size of outer ticks.</li> <li> <a href=\"svg-axes#tickPadding\">axis.tickPadding</a> - specify padding between ticks and tick labels.</li> <li> <a href=\"svg-axes#tickFormat\">axis.tickFormat</a> - override the tick formatting for labels.</li> </ul> <h3> <a href=\"svg-controls\">Controls</a> </h3> <ul> <li> <a href=\"svg-controls#brush\">d3.svg.brush</a> - click and drag to select one- or two-dimensional regions.</li> <li> <a href=\"svg-controls#_brush\">brush</a> - apply a brush to the given selection or transition.</li> <li> <a href=\"svg-controls#brush_x\">brush.x</a> - the brush’s <i>x</i>-scale, for horizontal brushing.</li> <li> <a href=\"svg-controls#brush_y\">brush.y</a> - the brush’s <i>y</i>-scale, for vertical brushing.</li> <li> <a href=\"svg-controls#brush_extent\">brush.extent</a> - the brush’s extent in zero, one or two dimensions.</li> <li> <a href=\"svg-controls#brush_clear\">brush.clear</a> - reset the brush extent.</li> <li> <a href=\"svg-controls#brush_empty\">brush.empty</a> - whether or not the brush extent is empty.</li> <li> <a href=\"svg-controls#brush_on\">brush.on</a> - listeners for when the brush is moved.</li> <li> <a href=\"svg-controls#brush_event\">brush.event</a> - dispatch brush events after setting the extent.</li> </ul> <h2 id=\"d3time-time\"> d3.time (Time) </h2> <h3> <a href=\"time-formatting\">Time Formatting</a> </h3> <ul> <li> <a href=\"time-formatting#format\">d3.time.format</a> - create a new local time formatter for a given specifier.</li> <li> <a href=\"time-formatting#_format\">format</a> - format a date into a string.</li> <li> <a href=\"time-formatting#parse\">format.parse</a> - parse a string into a date.</li> <li> <a href=\"time-formatting#format_multi\">d3.time.format.multi</a> - create a new local multi-resolution time formatter.</li> <li> <a href=\"time-formatting#format_utc\">d3.time.format.utc</a> - create a new UTC time formatter for a given specifier.</li> <li> <a href=\"time-formatting#format_iso\">d3.time.format.iso</a> - the ISO 8601 UTC time formatter.</li> </ul> <h3> <a href=\"time-scales\">Time Scales</a> </h3> <ul> <li> <a href=\"time-scales#scale\">d3.time.scale</a> - construct a linear time scale.</li> <li> <a href=\"time-scales#_scale\">scale</a> - get the range value corresponding to a given domain value.</li> <li> <a href=\"time-scales#invert\">scale.invert</a> - get the domain value corresponding to a given range value.</li> <li> <a href=\"time-scales#domain\">scale.domain</a> - get or set the scale's input domain.</li> <li> <a href=\"time-scales#nice\">scale.nice</a> - extend the scale domain to nice round numbers.</li> <li> <a href=\"time-scales#range\">scale.range</a> - get or set the scale's output range.</li> <li> <a href=\"time-scales#rangeRound\">scale.rangeRound</a> - set the scale's output range, and enable rounding.</li> <li> <a href=\"time-scales#interpolate\">scale.interpolate</a> - get or set the scale's output interpolator.</li> <li> <a href=\"time-scales#clamp\">scale.clamp</a> - enable or disable clamping of the output range.</li> <li> <a href=\"time-scales#ticks\">scale.ticks</a> - get representative values from the input domain.</li> <li> <a href=\"time-scales#tickFormat\">scale.tickFormat</a> - get a formatter for displaying tick values.</li> <li> <a href=\"time-scales#copy\">scale.copy</a> - create a new scale from an existing scale.</li> </ul> <h3> <a href=\"time-intervals\">Time Intervals</a> </h3> <ul> <li> <a href=\"time-intervals#interval\">d3.time.interval</a> - a time interval in local time.</li> <li> <a href=\"time-intervals#_interval\">interval</a> - alias for interval.floor.</li> <li> <a href=\"time-intervals#interval_range\">interval.range</a> - returns dates within the specified range.</li> <li> <a href=\"time-intervals#interval_floor\">interval.floor</a> - rounds down to the nearest interval.</li> <li> <a href=\"time-intervals#interval_round\">interval.round</a> - rounds up or down to the nearest interval.</li> <li> <a href=\"time-intervals#interval_ceil\">interval.ceil</a> - rounds up to the nearest interval.</li> <li> <a href=\"time-intervals#interval_offset\">interval.offset</a> - returns a date offset by some interval.</li> <li> <a href=\"time-intervals#interval_utc\">interval.utc</a> - returns the UTC-equivalent time interval.</li> <li> <a href=\"time-intervals#day\">d3.time.day</a> - every day (12:00 AM).</li> <li> <a href=\"time-intervals#day\">d3.time.days</a> - alias for day.range.</li> <li> <a href=\"time-intervals#dayOfYear\">d3.time.dayOfYear</a> - computes the day number.</li> <li> <a href=\"time-intervals#hour\">d3.time.hour</a> - every hour (e.g., 1:00 AM).</li> <li> <a href=\"time-intervals#hours\">d3.time.hours</a> - alias for hour.range.</li> <li> <a href=\"time-intervals#minute\">d3.time.minute</a> - every minute (e.g., 1:02 AM).</li> <li> <a href=\"time-intervals#minutes\">d3.time.minutes</a> - alias for minute.range.</li> <li> <a href=\"time-intervals#month\">d3.time.month</a> - every month (e.g., February 1, 12:00 AM).</li> <li> <a href=\"time-intervals#months\">d3.time.months</a> - alias for month.range.</li> <li> <a href=\"time-intervals#second\">d3.time.second</a> - every second (e.g., 1:02:03 AM).</li> <li> <a href=\"time-intervals#seconds\">d3.time.seconds</a> - alias for second.range.</li> <li> <a href=\"time-intervals#sunday\">d3.time.sunday</a> - every Sunday (e.g., February 5, 12:00 AM).</li> <li> <a href=\"time-intervals#sundays\">d3.time.sundays</a> - alias for sunday.range.</li> <li> <a href=\"time-intervals#sundayOfYear\">d3.time.sundayOfYear</a> - computes the sunday-based week number.</li> <li> <a href=\"time-intervals#monday\">d3.time.monday</a> - every Monday (e.g., February 5, 12:00 AM).</li> <li> <a href=\"time-intervals#mondays\">d3.time.mondays</a> - alias for monday.range.</li> <li> <a href=\"time-intervals#mondayOfYear\">d3.time.mondayOfYear</a> - computes the monday-based week number.</li> <li> <a href=\"time-intervals#tuesday\">d3.time.tuesday</a> - every Tuesday (e.g., February 5, 12:00 AM).</li> <li> <a href=\"time-intervals#tuesdays\">d3.time.tuesdays</a> - alias for tuesday.range.</li> <li> <a href=\"time-intervals#tuesdayOfYear\">d3.time.tuesdayOfYear</a> - computes the tuesday-based week number.</li> <li> <a href=\"time-intervals#wednesday\">d3.time.wednesday</a> - every Wednesday (e.g., February 5, 12:00 AM).</li> <li> <a href=\"time-intervals#wednesdays\">d3.time.wednesdays</a> - alias for wednesday.range.</li> <li> <a href=\"time-intervals#tuesdayOfYear\">d3.time.wednesdayOfYear</a> - computes the wednesday-based week number.</li> <li> <a href=\"time-intervals#thursday\">d3.time.thursday</a> - every Thursday (e.g., February 5, 12:00 AM).</li> <li> <a href=\"time-intervals#thursdays\">d3.time.thursdays</a> - alias for thursday.range.</li> <li> <a href=\"time-intervals#thursdayOfYear\">d3.time.thursdayOfYear</a> - computes the thursday-based week number.</li> <li> <a href=\"time-intervals#friday\">d3.time.friday</a> - every Friday (e.g., February 5, 12:00 AM).</li> <li> <a href=\"time-intervals#fridays\">d3.time.fridays</a> - alias for friday.range.</li> <li> <a href=\"time-intervals#fridayOfYear\">d3.time.fridayOfYear</a> - computes the friday-based week number.</li> <li> <a href=\"time-intervals#saturday\">d3.time.saturday</a> - every Saturday (e.g., February 5, 12:00 AM).</li> <li> <a href=\"time-intervals#saturdays\">d3.time.saturdays</a> - alias for saturday.range.</li> <li> <a href=\"time-intervals#saturdayOfYear\">d3.time.saturdayOfYear</a> - computes the saturday-based week number.</li> <li> <a href=\"time-intervals#week\">d3.time.week</a> - alias for sunday.</li> <li> <a href=\"time-intervals#weeks\">d3.time.weeks</a> - alias for sunday.range.</li> <li> <a href=\"time-intervals#weekOfYear\">d3.time.weekOfYear</a> - alias for sundayOfYear.</li> <li> <a href=\"time-intervals#year\">d3.time.year</a> - every year (e.g., January 1, 12:00 AM).</li> <li> <a href=\"time-intervals#years\">d3.time.years</a> - alias for year.range.</li> </ul> <h2 id=\"d3layout-layouts\"> d3.layout (Layouts) </h2> <h3> <a href=\"bundle-layout\">Bundle</a> </h3> <ul> <li> <a href=\"bundle-layout#bundle\">d3.layout.bundle</a> - construct a new default bundle layout.</li> <li> <a href=\"bundle-layout#_bundle\">bundle</a> - apply Holten's <em>hierarchical bundling</em> algorithm to edges.</li> </ul> <h3> <a href=\"chord-layout\">Chord</a> </h3> <ul> <li> <a href=\"chord-layout#chord\">d3.layout.chord</a> - produce a chord diagram from a matrix of relationships.</li> <li> <a href=\"chord-layout#matrix\">chord.matrix</a> - get or set the matrix data backing the layout.</li> <li> <a href=\"chord-layout#padding\">chord.padding</a> - get or set the angular padding between chord segments.</li> <li> <a href=\"chord-layout#sortGroups\">chord.sortGroups</a> - get or set the comparator function for groups.</li> <li> <a href=\"chord-layout#sortSubgroups\">chord.sortSubgroups</a> - get or set the comparator function for subgroups.</li> <li> <a href=\"chord-layout#sortChords\">chord.sortChords</a> - get or set the comparator function for chords (z-order).</li> <li> <a href=\"chord-layout#chords\">chord.chords</a> - retrieve the computed chord angles.</li> <li> <a href=\"chord-layout#groups\">chord.groups</a> - retrieve the computed group angles.</li> </ul> <h3> <a href=\"cluster-layout\">Cluster</a> </h3> <ul> <li> <a href=\"cluster-layout#cluster\">d3.layout.cluster</a> - cluster entities into a dendrogram.</li> <li> <a href=\"cluster-layout#_cluster\">cluster</a> - alias for cluster.nodes.</li> <li> <a href=\"cluster-layout#nodes\">cluster.nodes</a> - compute the cluster layout and return the array of nodes.</li> <li> <a href=\"cluster-layout#links\">cluster.links</a> - compute the parent-child links between tree nodes.</li> <li> <a href=\"cluster-layout#children\">cluster.children</a> - get or set the accessor function for child nodes.</li> <li> <a href=\"cluster-layout#sort\">cluster.sort</a> - get or set the comparator function for sibling nodes.</li> <li> <a href=\"cluster-layout#separation\">cluster.separation</a> - get or set the spacing function between neighboring nodes.</li> <li> <a href=\"cluster-layout#size\">cluster.size</a> - get or set the layout size in <em>x</em> and <em>y</em>.</li> <li> <a href=\"cluster-layout#nodeSize\">cluster.nodeSize</a> - specify a fixed size for each node.</li> </ul> <h3> <a href=\"force-layout\">Force</a> </h3> <ul> <li> <a href=\"force-layout#force\">d3.layout.force</a> - position linked nodes using physical simulation.</li> <li> <a href=\"force-layout#on\">force.on</a> - listen to updates in the computed layout positions.</li> <li> <a href=\"force-layout#nodes\">force.nodes</a> - get or set the array of nodes to layout.</li> <li> <a href=\"force-layout#links\">force.links</a> - get or set the array of links between nodes.</li> <li> <a href=\"force-layout#size\">force.size</a> - get or set the layout size in <em>x</em> and <em>y</em>.</li> <li> <a href=\"force-layout#linkDistance\">force.linkDistance</a> - get or set the link distance.</li> <li> <a href=\"force-layout#linkStrength\">force.linkStrength</a> - get or set the link strength.</li> <li> <a href=\"force-layout#friction\">force.friction</a> - get or set the friction coefficient.</li> <li> <a href=\"force-layout#charge\">force.charge</a> - get or set the charge strength.</li> <li> <a href=\"force-layout#chargeDistance\">force.chargeDistance</a> - get or set the maximum charge distance.</li> <li> <a href=\"force-layout#gravity\">force.gravity</a> - get or set the gravity strength.</li> <li> <a href=\"force-layout#theta\">force.theta</a> - get or set the accuracy of the charge interaction.</li> <li> <a href=\"force-layout#start\">force.start</a> - start or restart the simulation when the nodes change.</li> <li> <a href=\"force-layout#resume\">force.resume</a> - reheat the cooling parameter and restart simulation.</li> <li> <a href=\"force-layout#stop\">force.stop</a> - immediately terminate the simulation.</li> <li> <a href=\"force-layout#alpha\">force.alpha</a> - get or set the layout's cooling parameter.</li> <li> <a href=\"force-layout#tick\">force.tick</a> - run the layout simulation one step.</li> <li> <a href=\"force-layout#drag\">force.drag</a> - bind a behavior to nodes to allow interactive dragging.</li> </ul> <h3> <a href=\"hierarchy-layout\">Hierarchy</a> </h3> <ul> <li> <a href=\"hierarchy-layout#hierarchy\">d3.layout.hierarchy</a> - derive a custom hierarchical layout implementation.</li> <li> <a href=\"hierarchy-layout#_hierarchy\">hierarchy</a> - alias for hierarchy.nodes.</li> <li> <a href=\"hierarchy-layout#nodes\">hierarchy.nodes</a> - compute the layout and return the array of nodes.</li> <li> <a href=\"hierarchy-layout#links\">hierarchy.links</a> - compute the parent-child links between tree nodes.</li> <li> <a href=\"hierarchy-layout#children\">hierarchy.children</a> - get or set the accessor function for child nodes.</li> <li> <a href=\"hierarchy-layout#sort\">hierarchy.sort</a> - get or set the comparator function for sibling nodes.</li> <li> <a href=\"hierarchy-layout#value\">hierarchy.value</a> - get or set the value accessor function.</li> <li> <a href=\"hierarchy-layout#revalue\">hierarchy.revalue</a> - recompute the hierarchy values.</li> </ul> <h3> <a href=\"histogram-layout\">Histogram</a> </h3> <ul> <li> <a href=\"histogram-layout#histogram\">d3.layout.histogram</a> - construct a new default histogram layout.</li> <li> <a href=\"histogram-layout#_histogram\">histogram</a> - compute the distribution of data using quantized bins.</li> <li> <a href=\"histogram-layout#value\">histogram.value</a> - get or set the value accessor function.</li> <li> <a href=\"histogram-layout#range\">histogram.range</a> - get or set the considered value range.</li> <li> <a href=\"histogram-layout#bins\">histogram.bins</a> - specify how values are organized into bins.</li> <li> <a href=\"histogram-layout#frequency\">histogram.frequency</a> - compute the distribution as counts or probabilities.</li> </ul> <h3> <a href=\"pack-layout\">Pack</a> </h3> <ul> <li> <a href=\"pack-layout#pack\">d3.layout.pack</a> - produce a hierarchical layout using recursive circle-packing.</li> <li> <a href=\"pack-layout#_pack\">pack</a> - alias for pack.nodes.</li> <li> <a href=\"pack-layout#nodes\">pack.nodes</a> - compute the pack layout and return the array of nodes.</li> <li> <a href=\"pack-layout#links\">pack.links</a> - compute the parent-child links between tree nodes.</li> <li> <a href=\"pack-layout#children\">pack.children</a> - get or set the children accessor function.</li> <li> <a href=\"pack-layout#sort\">pack.sort</a> - control the order in which sibling nodes are traversed.</li> <li> <a href=\"pack-layout#value\">pack.value</a> - get or set the value accessor used to size circles.</li> <li> <a href=\"pack-layout#size\">pack.size</a> - specify the layout size in <em>x</em> and <em>y</em>.</li> <li> <a href=\"pack-layout#radius\">pack.radius</a> - specify the node radius, rather than deriving it from value.</li> <li> <a href=\"pack-layout#padding\">pack.padding</a> - specify the layout padding in (approximate) pixels.</li> </ul> <h3> <a href=\"partition-layout\">Partition</a> </h3> <ul> <li> <a href=\"partition-layout#partition\">d3.layout.partition</a> - recursively partition a node tree into a sunburst or icicle.</li> <li> <a href=\"partition-layout#_partition\">partition</a> - alias for partition.nodes.</li> <li> <a href=\"partition-layout#nodes\">partition.nodes</a> - compute the partition layout and return the array of nodes.</li> <li> <a href=\"partition-layout#links\">partition.links</a> - compute the parent-child links between tree nodes.</li> <li> <a href=\"partition-layout#children\">partition.children</a> - get or set the children accessor function.</li> <li> <a href=\"partition-layout#sort\">partition.sort</a> - control the order in which sibling nodes are traversed.</li> <li> <a href=\"partition-layout#value\">partition.value</a> - get or set the value accessor used to size circles.</li> <li> <a href=\"partition-layout#size\">partition.size</a> - specify the layout size in <em>x</em> and <em>y</em>.</li> </ul> <h3> <a href=\"pie-layout\">Pie</a> </h3> <ul> <li> <a href=\"pie-layout#pie\">d3.layout.pie</a> - construct a new default pie layout.</li> <li> <a href=\"pie-layout#_pie\">pie</a> - compute the start and end angles for arcs in a pie or donut chart.</li> <li> <a href=\"pie-layout#value\">pie.value</a> - get or set the value accessor function.</li> <li> <a href=\"pie-layout#sort\">pie.sort</a> - control the clockwise order of pie slices.</li> <li> <a href=\"pie-layout#startAngle\">pie.startAngle</a> - get or set the overall start angle of the pie.</li> <li> <a href=\"pie-layout#endAngle\">pie.endAngle</a> - get or set the overall end angle of the pie.</li> <li> <a href=\"pie-layout#padAngle\">pie.padAngle</a> - get or set the pad angle of the pie.</li> </ul> <h3> <a href=\"stack-layout\">Stack</a> </h3> <ul> <li> <a href=\"stack-layout#stack\">d3.layout.stack</a> - construct a new default stack layout.</li> <li> <a href=\"stack-layout#_stack\">stack</a> - compute the baseline for each series in a stacked bar or area chart.</li> <li> <a href=\"stack-layout#values\">stack.values</a> - get or set the values accessor function per series.</li> <li> <a href=\"stack-layout#order\">stack.order</a> - control the order in which series are stacked.</li> <li> <a href=\"stack-layout#offset\">stack.offset</a> - specify the overall baseline algorithm.</li> <li> <a href=\"stack-layout#x\">stack.x</a> - get or set the <em>x</em>-dimension accessor function.</li> <li> <a href=\"stack-layout#y\">stack.y</a> - get or set the <em>y</em>-dimension accessor function.</li> <li> <a href=\"stack-layout#out\">stack.out</a> - get or set the output function for storing the baseline.</li> </ul> <h3> <a href=\"tree-layout\">Tree</a> </h3> <ul> <li> <a href=\"tree-layout#tree\">d3.layout.tree</a> - position a tree of nodes tidily.</li> <li> <a href=\"tree-layout#_tree\">tree</a> - alias for tree.nodes.</li> <li> <a href=\"tree-layout#nodes\">tree.nodes</a> - compute the tree layout and return the array of nodes.</li> <li> <a href=\"tree-layout#links\">tree.links</a> - compute the parent-child links between tree nodes.</li> <li> <a href=\"tree-layout#children\">tree.children</a> - get or set the children accessor function.</li> <li> <a href=\"tree-layout#sort\">tree.sort</a> - control the order in which sibling nodes are traversed.</li> <li> <a href=\"tree-layout#separation\">tree.separation</a> - get or set the spacing function between neighboring nodes.</li> <li> <a href=\"tree-layout#size\">tree.size</a> - specify the layout size in <em>x</em> and <em>y</em>.</li> <li> <a href=\"tree-layout#nodeSize\">tree.nodeSize</a> - specify a fixed size for each node.</li> </ul> <h3> <a href=\"treemap-layout\">Treemap</a> </h3> <ul> <li> <a href=\"treemap-layout#treemap\">d3.layout.treemap</a> - use recursive spatial subdivision to display a tree of nodes.</li> <li> <a href=\"treemap-layout#_treemap\">treemap</a> - alias for treemap.nodes.</li> <li> <a href=\"treemap-layout#nodes\">treemap.nodes</a> - compute the treemap layout and return the array of nodes.</li> <li> <a href=\"treemap-layout#links\">treemap.links</a> - compute the parent-child links between tree nodes.</li> <li> <a href=\"treemap-layout#children\">treemap.children</a> - get or set the children accessor function.</li> <li> <a href=\"treemap-layout#sort\">treemap.sort</a> - control the order in which sibling nodes are traversed.</li> <li> <a href=\"treemap-layout#value\">treemap.value</a> - get or set the value accessor used to size treemap cells.</li> <li> <a href=\"treemap-layout#size\">treemap.size</a> - specify the layout size in <em>x</em> and <em>y</em>.</li> <li> <a href=\"treemap-layout#padding\">treemap.padding</a> - specify the padding between a parent and its children.</li> <li> <a href=\"treemap-layout#round\">treemap.round</a> - enable or disable rounding to exact pixels.</li> <li> <a href=\"treemap-layout#sticky\">treemap.sticky</a> - make the layout sticky for stable updates.</li> <li> <a href=\"treemap-layout#mode\">treemap.mode</a> - change the treemap layout algorithm.</li> </ul> <h2 id=\"d3geo-geography\"> d3.geo (Geography) </h2> <h3> <a href=\"geo-paths\">Paths</a> </h3> <ul> <li> <a href=\"geo-paths#path\">d3.geo.path</a> - create a new geographic path generator.</li> <li> <a href=\"geo-paths#_path\">path</a> - project the specified feature and render it to the context.</li> <li> <a href=\"geo-paths#path_projection\">path.projection</a> - get or set the geographic projection.</li> <li> <a href=\"geo-paths#path_context\">path.context</a> - get or set the render context.</li> <li> <a href=\"geo-paths#path_pointRadius\">path.pointRadius</a> - get or set the radius to display point features.</li> <li> <a href=\"geo-paths#path_area\">path.area</a> - compute the projected area of a given feature.</li> <li> <a href=\"geo-paths#path_centroid\">path.centroid</a> - compute the projected centroid of a given feature.</li> <li> <a href=\"geo-paths#path_bounds\">path.bounds</a> - compute the projected bounds of a given feature.</li> <li> <a href=\"geo-paths#graticule\">d3.geo.graticule</a> - create a graticule generator.</li> <li> <a href=\"geo-paths#_graticule\">graticule</a> - generate a MultiLineString of meridians and parallels.</li> <li> <a href=\"geo-paths#graticule_lines\">graticule.lines</a> - generate an array of LineStrings of meridians and parallels.</li> <li> <a href=\"geo-paths#graticule_outline\">graticule.outline</a> - generate a Polygon of the graticule’s extent.</li> <li> <a href=\"geo-paths#graticule_extent\">graticule.extent</a> - get or set the major &amp; minor extents.</li> <li> <a href=\"geo-paths#graticule_majorExtent\">graticule.majorExtent</a> - get or set the major extent.</li> <li> <a href=\"geo-paths#graticule_minorExtent\">graticule.minorExtent</a> - get or set the minor extent.</li> <li> <a href=\"geo-paths#graticule_step\">graticule.step</a> - get or set the major &amp; minor step intervals.</li> <li> <a href=\"geo-paths#graticule_majorStep\">graticule.majorStep</a> - get or set the major step intervals.</li> <li> <a href=\"geo-paths#graticule_minorStep\">graticule.minorStep</a> - get or set the minor step intervals.</li> <li> <a href=\"geo-paths#graticule_precision\">graticule.precision</a> - get or set the latitudinal precision.</li> <li> <a href=\"geo-paths#circle\">d3.geo.circle</a> - create a circle generator.</li> <li> <a href=\"geo-paths#_circle\">circle</a> - generate a piecewise circle as a Polygon.</li> <li> <a href=\"geo-paths#circle_origin\">circle.origin</a> - specify the origin in latitude and longitude.</li> <li> <a href=\"geo-paths#circle_angle\">circle.angle</a> - specify the angular radius in degrees.</li> <li> <a href=\"geo-paths#circle_precision\">circle.precision</a> - specify the precision of the piecewise circle.</li> <li> <a href=\"geo-paths#area\">d3.geo.area</a> - compute the spherical area of a given feature.</li> <li> <a href=\"geo-paths#bounds\">d3.geo.bounds</a> - compute the latitude-longitude bounding box for a given feature.</li> <li> <a href=\"geo-paths#centroid\">d3.geo.centroid</a> - compute the spherical centroid of a given feature.</li> <li> <a href=\"geo-paths#distance\">d3.geo.distance</a> - compute the great-arc distance between two points.</li> <li> <a href=\"geo-paths#interpolate\">d3.geo.interpolate</a> - interpolate between two points along a great arc.</li> <li> <a href=\"geo-paths#length\">d3.geo.length</a> - compute the length of a line string or the perimeter of a polygon.</li> <li> <a href=\"geo-paths#rotation\">d3.geo.rotation</a> - create a rotation function for the specified angles [λ, φ, γ].</li> <li> <a href=\"geo-paths#_rotation\">rotation</a> - rotate the given location around the sphere.</li> <li> <a href=\"geo-paths#rotation_invert\">rotation.invert</a> - inverse-rotate the given location around the sphere.</li> </ul> <h3> <a href=\"geo-projections\">Projections</a> </h3> <ul> <li> <a href=\"geo-projections#projection\">d3.geo.projection</a> - create a standard projection from a raw projection.</li> <li> <a href=\"geo-projections#_projection\">projection</a> - project the specified location.</li> <li> <a href=\"geo-projections#invert\">projection.invert</a> - invert the projection for the specified point.</li> <li> <a href=\"geo-projections#rotate\">projection.rotate</a> - get or set the projection’s three-axis rotation.</li> <li> <a href=\"geo-projections#center\">projection.center</a> - get or set the projection’s center location.</li> <li> <a href=\"geo-projections#translate\">projection.translate</a> - get or set the projection’s translation position.</li> <li> <a href=\"geo-projections#scale\">projection.scale</a> - get or set the projection’s scale factor.</li> <li> <a href=\"geo-projections#clipAngle\">projection.clipAngle</a> - get or set the radius of the projection’s clip circle.</li> <li> <a href=\"geo-projections#clipExtent\">projection.clipExtent</a> - get or set the projection’s viewport clip extent, in pixels.</li> <li> <a href=\"geo-projections#precision\">projection.precision</a> - get or set the precision threshold for adaptive resampling.</li> <li> <a href=\"geo-projections#stream\">projection.stream</a> - wrap the specified stream listener, projecting input geometry.</li> <li> <a href=\"geo-projections#projectionMutator\">d3.geo.projectionMutator</a> - create a standard projection from a mutable raw projection.</li> <li> <a href=\"geo-projections#albers\">d3.geo.albers</a> - the Albers equal-area conic projection.</li> <li> <a href=\"geo-projections#albers_parallels\">albers.parallels</a> - get or set the projection's two standard parallels.</li> <li> <a href=\"geo-projections#albersUsa\">d3.geo.albersUsa</a> - a composite Albers projection for the United States.</li> <li> <a href=\"geo-projections#azimuthalEqualArea\">d3.geo.azimuthalEqualArea</a> - the azimuthal equal-area projection.</li> <li> <a href=\"geo-projections#azimuthalEquidistant\">d3.geo.azimuthalEquidistant</a> - the azimuthal equidistant projection.</li> <li> <a href=\"geo-projections#conicConformal\">d3.geo.conicConformal</a> - the conic conformal projection.</li> <li> <a href=\"geo-projections#conicEquidistant\">d3.geo.conicEquidistant</a> - the conic equidistant projection.</li> <li> <a href=\"geo-projections#conicEqualArea\">d3.geo.conicEqualArea</a> the conic equal-area (a.k.a. Albers) projection.</li> <li> <a href=\"geo-projections#equirectangular\">d3.geo.equirectangular</a> - the equirectangular (plate carreé) projection.</li> <li> <a href=\"geo-projections#gnomonic\">d3.geo.gnomonic</a> - the gnomonic projection.</li> <li> <a href=\"geo-projections#mercator\">d3.geo.mercator</a> - the spherical Mercator projection.</li> <li> <a href=\"geo-projections#orthographic\">d3.geo.orthographic</a> - the azimuthal orthographic projection.</li> <li> <a href=\"geo-projections#stereographic\">d3.geo.stereographic</a> - the azimuthal stereographic projection.</li> <li> <a href=\"geo-projections#azimuthalEqualArea_raw\">d3.geo.azimuthalEqualArea.raw</a> - the raw azimuthal equal-area projection.</li> <li> <a href=\"geo-projections#azimuthalEquidistant_raw\">d3.geo.azimuthalEquidistant.raw</a> - the azimuthal equidistant projection.</li> <li> <a href=\"geo-projections#conicConformal_raw\">d3.geo.conicConformal.raw</a> - the raw conic conformal projection.</li> <li> <a href=\"geo-projections#conicEquidistant_raw\">d3.geo.conicEquidistant.raw</a> - the raw conic equidistant projection.</li> <li> <a href=\"geo-projections#conicEqualArea_raw\">d3.geo.conicEqualArea.raw</a> the raw conic equal-area (a.k.a. Albers) projection.</li> <li> <a href=\"geo-projections#equirectangular_raw\">d3.geo.equirectangular.raw</a> - the raw equirectangular (plate carrée) projection.</li> <li> <a href=\"geo-projections#gnomonic_raw\">d3.geo.gnomonic.raw</a> - the raw gnomonic projection.</li> <li> <a href=\"geo-projections#mercator_raw\">d3.geo.mercator.raw</a> - the raw Mercator projection.</li> <li> <a href=\"geo-projections#orthographic_raw\">d3.geo.orthographic.raw</a> - the raw azimuthal orthographic projection.</li> <li> <a href=\"geo-projections#stereographic_raw\">d3.geo.stereographic.raw</a> - the raw azimuthal stereographic projection.</li> <li> <a href=\"geo-projections#transverseMercator_raw\">d3.geo.transverseMercator.raw</a> - the raw transverse Mercator projection.</li> </ul> <h3> <a href=\"geo-streams\">Streams</a> </h3> <ul> <li> <a href=\"geo-streams#stream\">d3.geo.stream</a> - convert a GeoJSON object to a geometry stream.</li> <li> <a href=\"geo-streams#stream_point\">stream.point</a> - indicate an <em>x</em>, <em>y</em> (and optionally <em>z</em>) coordinate.</li> <li> <a href=\"geo-streams#stream_lineStart\">stream.lineStart</a> - indicate the start of a line or ring.</li> <li> <a href=\"geo-streams#stream_lineEnd\">stream.lineEnd</a> - indicate the end of a line or ring.</li> <li> <a href=\"geo-streams#stream_polygonStart\">stream.polygonStart</a> - indicate the start of a polygon.</li> <li> <a href=\"geo-streams#stream_polygonEnd\">stream.polygonEnd</a> - indicate the end of a polygon.</li> <li> <a href=\"geo-streams#stream_sphere\">stream.sphere</a> - indicate a sphere.</li> <li> <a href=\"geo-streams#transform\">d3.geo.transform</a> - transform streaming geometries.</li> <li> <a href=\"geo-streams#transform_stream\">transform.stream</a> - wraps a given stream.</li> <li> <a href=\"geo-streams#clipExtent\">d3.geo.clipExtent</a> - a stream transform that clips geometries to a given axis-aligned rectangle.</li> <li> <a href=\"geo-streams#clipExtent_extent\">clipExtent.extent</a> - sets the clip extent.</li> </ul> <h2 id=\"d3geom-geometry\"> d3.geom (Geometry) </h2> <h3> <a href=\"voronoi-geom\">Voronoi</a> </h3> <ul> <li> <a href=\"voronoi-geom#voronoi\">d3.geom.voronoi</a> - create a Voronoi layout with default accessors.</li> <li> <a href=\"voronoi-geom#_voronoi\">voronoi</a> - compute the Voronoi tessellation for the specified points.</li> <li> <a href=\"voronoi-geom#x\">voronoi.x</a> - get or set the x-coordinate accessor for each point.</li> <li> <a href=\"voronoi-geom#y\">voronoi.y</a> - get or set the y-coordinate accessor for each point.</li> <li> <a href=\"voronoi-geom#clipExtent\">voronoi.clipExtent</a> - get or set the clip extent for the tesselation.</li> <li> <a href=\"voronoi-geom#links\">voronoi.links</a> - compute the Delaunay mesh as a network of links.</li> <li> <a href=\"voronoi-geom#triangles\">voronoi.triangles</a> - compute the Delaunay mesh as a triangular tessellation.</li> </ul> <h3> <a href=\"quadtree-geom\">Quadtree</a> </h3> <ul> <li> <a href=\"quadtree-geom#quadtree\">d3.geom.quadtree</a> - constructs a quadtree for an array of points.</li> <li> <a href=\"quadtree-geom#add\">quadtree.add</a> - add a point to the quadtree.</li> <li> <a href=\"quadtree-geom#visit\">quadtree.visit</a> - recursively visit nodes in the quadtree.</li> <li> <a href=\"quadtree-geom#find\">quadtree.find</a> - find the closest point in the quadtree.</li> </ul> <h3> <a href=\"polygon-geom\">Polygon</a> </h3> <ul> <li> <a href=\"polygon-geom#polygon\">d3.geom.polygon</a> - create a polygon from the specified array of points.</li> <li> <a href=\"polygon-geom#area\">polygon.area</a> - compute the counterclockwise area of this polygon.</li> <li> <a href=\"polygon-geom#centroid\">polygon.centroid</a> - compute the area centroid of this polygon.</li> <li> <a href=\"polygon-geom#clip\">polygon.clip</a> - clip the specified polygon to this polygon.</li> </ul> <h3> <a href=\"hull-geom\">Hull</a> </h3> <ul> <li> <a href=\"hull-geom#hull\">d3.geom.hull</a> - create a convex hull layout with default accessors.</li> <li> <a href=\"hull-geom#_hull\">hull</a> - compute the convex hull for the given array of points.</li> <li> <a href=\"hull-geom#x\">hull.x</a> - get or set the <em>x</em>-coordinate accessor.</li> <li> <a href=\"hull-geom#y\">hull.y</a> - get or set the <em>y</em>-coordinate accessor.</li> </ul> <h2 id=\"d3behavior-behaviors\"> d3.behavior (Behaviors) </h2> <h3> <a href=\"drag-behavior\">Drag</a> </h3> <ul> <li><a href=\"drag-behavior#drag\">d3.behavior.drag</a></li> <li><a href=\"drag-behavior#origin\">drag.origin</a></li> <li><a href=\"drag-behavior#on\">drag.on</a></li> </ul> <h3> <a href=\"zoom-behavior\">Zoom</a> </h3> <ul> <li> <a href=\"zoom-behavior#zoom\">d3.behavior.zoom</a> - create a zoom behavior.</li> <li> <a href=\"zoom-behavior#_zoom\">zoom</a> - apply the zoom behavior to the selected elements.</li> <li> <a href=\"zoom-behavior#scale\">zoom.scale</a> - the current scale factor.</li> <li> <a href=\"zoom-behavior#translate\">zoom.translate</a> - the current translate offset.</li> <li> <a href=\"zoom-behavior#scaleExtent\">zoom.scaleExtent</a> - optional limits on the scale factor.</li> <li> <a href=\"zoom-behavior#center\">zoom.center</a> - an optional focal point for mousewheel zooming.</li> <li> <a href=\"zoom-behavior#size\">zoom.size</a> - the dimensions of the viewport.</li> <li> <a href=\"zoom-behavior#duration\">zoom.duration</a> - get or set the dblclick transition duration.</li> <li> <a href=\"zoom-behavior#x\">zoom.x</a> - an optional scale whose domain is bound to the <em>x</em> extent of the viewport.</li> <li> <a href=\"zoom-behavior#y\">zoom.y</a> - an optional scale whose domain is bound to the <em>y</em> extent of the viewport.</li> <li> <a href=\"zoom-behavior#on\">zoom.on</a> - listeners for when the scale or translate changes.</li> <li> <a href=\"zoom-behavior#event\">zoom.event</a> - dispatch zoom events after setting the scale or translate.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/API-Reference\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/API-Reference</a>\n  </p>\n</div>\n","arrays":"<h1 class=\"gh-header-title instapaper_title\">Arrays</h1>   <p>When using D3—and doing data visualization in general—you tend to do a lot of <strong>array manipulation</strong>. That's because D3's canonical representation of data is an array. Some common forms of array manipulation include taking a contiguous slice (subset) of an array, filtering an array using a predicate function, and mapping an array to a parallel set of values using a transform function. Before looking at the set of utilities that D3 provides for arrays, you should familiarize yourself with the powerful <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype\">array methods built-in to JavaScript</a>.</p> <p>JavaScript includes <strong>mutator methods</strong> that modify the array:</p> <ul> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\">array.pop</a> - Remove the last element from the array.</li> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\">array.push</a> - Add one or more elements to the end of the array.</li> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\">array.reverse</a> - Reverse the order of the elements of the array.</li> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\">array.shift</a> - Remove the first element from the array.</li> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">array.sort</a> - Sort the elements of the array.</li> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">array.splice</a> - Add or remove elements from the array.</li> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\">array.unshift</a> - Add one or more elements to the front of the array.</li> </ul> <p>There are also <strong>accessor methods</strong> that return some representation of the array:</p> <ul> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">array.concat</a> - Join the array with other array(s) or value(s).</li> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\">array.join</a> - Join all elements of the array into a string.</li> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">array.slice</a> - Extract a section of the array.</li> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\">array.indexOf</a> - Find the first occurrence of a value within the array.</li> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\">array.lastIndexOf</a> - Find the last occurrence of a value within the array.</li> </ul> <p>And finally, <strong>iteration methods</strong> that apply functions to elements in the array:</p> <ul> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">array.filter</a> - Create a new array with only the elements for which a predicate is true.</li> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">array.forEach</a> - Call a function for each element in the array.</li> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\">array.every</a> - See if every element in the array satisfies a predicate.</li> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">array.map</a> - Create a new array with the result of calling a function on every element in the array.</li> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\">array.some</a> - See if at least one element in the array satisfies a predicate.</li> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\">array.reduce</a> - Apply a function to reduce the array to a single value (from left-to-right).</li> <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\">array.reduceRight</a> - Apply a function to reduce the array to a single value (from right-to-left).</li> </ul> <h2 id=\"ordering\"> Ordering</h2> <h6 id=\"d3_ascending\"> d3.<strong>ascending</strong>(<em>a</em>, <em>b</em>)</h6> <p>Returns -1 if <em>a</em> is less than <em>b</em>, or 1 if <em>a</em> is greater than <em>b</em>, or 0. This is the comparator function for natural order, and can be used in conjunction with the built-in array sort method to arrange elements in ascending order. It is implemented as:</p> <div class=\"highlight highlight-source-js\"><pre>function ascending(a, b) {\n  return a &lt; b ? -1 : a &gt; b ? 1 : a &gt;= b ? 0 : NaN;\n}</pre></div> <p>Note that if no comparator function is specified to the built-in sort method, the default order is lexicographic (alphabetical), not natural! This can lead to surprising behavior when sorting an array of numbers.</p> <h6 id=\"d3_descending\"> d3.<strong>descending</strong>(<em>a</em>, <em>b</em>)</h6> <p>Returns -1 if <em>a</em> is greater than <em>b</em>, or 1 if <em>a</em> is less than <em>b</em>, or 0. This is the comparator function for reverse natural order, and can be used in conjunction with the built-in array sort method to arrange elements in descending order. It is implemented as:</p> <div class=\"highlight highlight-source-js\"><pre>function descending(a, b) {\n  return b &lt; a ? -1 : b &gt; a ? 1 : b &gt;= a ? 0 : NaN;\n}</pre></div> <p>Note that if no comparator function is specified to the built-in sort method, the default order is lexicographic (alphabetical), not natural! This can lead to surprising behavior when sorting an array of numbers.</p> <h6 id=\"d3_min\"> d3.<strong>min</strong>(<em>array</em>[, <em>accessor</em>])</h6> <p>Returns the minimum value in the given <em>array</em> using natural order. If the array is empty, returns undefined. An optional <em>accessor</em> function may be specified, which is equivalent to calling <em>array.map(accessor)</em> before computing the minimum value. Unlike the built-in <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Math/min\">Math.min</a>, this method ignores undefined values; this is useful for computing the domain of a <a class=\"internal present\" href=\"https://github.com/mbostock/d3/wiki/Scales\">scale</a> while only considering the defined region of the data. In addition, elements are compared using natural order rather than numeric order. For example, the minimum of [\"20\", \"3\"] is \"20\", while the minimum of [20, 3] is 3.</p> <h6 id=\"d3_max\"> d3.<strong>max</strong>(<em>array</em>[, <em>accessor</em>])</h6> <p>Returns the maximum value in the given <em>array</em> using natural order. If the array is empty, returns undefined. An optional <em>accessor</em> function may be specified, which is equivalent to calling <em>array.map(accessor)</em> before computing the maximum value. Unlike the built-in <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Math/max\">Math.max</a>, this method ignores undefined values; this is useful for computing the domain of a <a class=\"internal present\" href=\"https://github.com/mbostock/d3/wiki/Scales\">scale</a> while only considering the defined region of the data. In addition, elements are compared using natural order rather than numeric order. For example, the maximum of [\"20\", \"3\"] is \"3\", while the maximum of [20, 3] is 20.</p> <h6 id=\"d3_extent\"> d3.<strong>extent</strong>(<em>array</em>[, <em>accessor</em>])</h6> <p>Returns the minimum and maximum value in the given <em>array</em> using natural order. This is equivalent to calling <a href=\"#d3_min\">d3.min</a> and <a href=\"#d3_max\">d3.max</a> simultaneously.</p> <h6 id=\"d3_sum\"> d3.<strong>sum</strong>(<em>array</em>[, <em>accessor</em>])</h6> <p>Returns the sum of the given <em>array</em>. If the array is empty, returns 0. An optional <em>accessor</em> function may be specified, which is equivalent to calling <em>array.map(accessor)</em> before computing the sum. This method ignores invalid values such as NaN and undefined; this is useful for computing the sum of data while only considering the well-defined values.</p> <h6 id=\"d3_mean\"> d3.<strong>mean</strong>(<em>array</em>[, <em>accessor</em>])</h6> <p>Returns the mean of the given <em>array</em>. If the array is empty, returns undefined. An optional <em>accessor</em> function may be specified, which is equivalent to calling <em>array.map(accessor)</em> before computing the mean. This method ignores invalid values such as NaN and undefined; this is useful for computing the mean of data while only considering the well-defined values.</p> <h6 id=\"d3_median\"> d3.<strong>median</strong>(<em>array</em>[, <em>accessor</em>])</h6> <p>Returns the median of the given <em>array</em> using the <a href=\"http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population\">R-7</a> algorithm. If the array is empty, returns undefined. An optional <em>accessor</em> function may be specified, which is equivalent to calling <em>array.map(accessor)</em> before computing the median. This method ignores invalid values such as NaN and undefined; this is useful for computing the median of data while only considering the well-defined values.</p> <h6 id=\"d3_quantile\"> d3.<strong>quantile</strong>(<em>numbers</em>, <em>p</em>)</h6> <p>Returns the <em>p</em>-quantile of the given sorted array of <em>numbers</em>, where <em>p</em> is a number in the range [0,1]. For example, the median can be computed using <em>p</em> = 0.5, the first quartile at <em>p</em> = 0.25, and the third quartile at <em>p</em> = 0.75. This particular implementation uses the <a href=\"http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population\">R-7</a> algorithm, which is the default for the R programming language and Excel. This method requires that <em>numbers</em> contains numeric elements and is already sorted in ascending order, such as by <a href=\"#d3_ascending\">d3.ascending</a>.</p> <div class=\"highlight highlight-source-js\"><pre>var a = [0, 1, 3];\nd3.quantile(a, 0); // 0\nd3.quantile(a, 0.5); // 1\nd3.quantile(a, 1); // 3\nd3.quantile(a, 0.25); // 0.5\nd3.quantile(a, 0.75); // 2\nd3.quantile(a, 0.1); // 0.19999999999999996 </pre></div> <h6 id=\"d3_variance\"> d3.<strong>variance</strong>(<em>array</em>[, <em>accessor</em>])</h6> <p>Returns an <a href=\"http://mathworld.wolfram.com/SampleVariance.html\">unbiased estimator of the population variance</a> of the given <em>array</em> of numbers. If the array has fewer than two values, returns undefined. An optional <em>accessor</em> function may be specified, which is equivalent to calling <em>array.map(accessor)</em> before computing the variance. This method ignores invalid values such as NaN and undefined.</p> <h6 id=\"d3_deviation\"> d3.<strong>deviation</strong>(<em>array</em>[, <em>accessor</em>])</h6> <p>Returns the standard deviation, defined as the square root of the <a href=\"#d3_variance\">bias-corrected variance</a>, of the given <em>array</em> of numbers. If the array has fewer than two values, returns undefined. An optional <em>accessor</em> function may be specified, which is equivalent to calling <em>array.map(accessor)</em> before computing the standard deviation. This method ignores invalid values such as NaN and undefined.</p> <h6 id=\"d3_bisectLeft\"> d3.<strong>bisectLeft</strong>(<em>array</em>, <em>x</em>[, <em>lo</em>[, <em>hi</em>]])</h6> <p>Locate the insertion point for <em>x</em> in <em>array</em> to maintain sorted order. The arguments <em>lo</em> and <em>hi</em> may be used to specify a subset of the array which should be considered; by default the entire array is used. If <em>x</em> is already present in <em>array</em>, the insertion point will be before (to the left of) any existing entries. The return value is suitable for use as the first argument to <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice\">splice</a> assuming that <em>array</em> is already sorted. The returned insertion point <em>i</em> partitions the <em>array</em> into two halves so that all <em>v</em> &lt; <em>x</em> for <em>v</em> in <em>array</em>.slice(lo, i) for the left side and all v &gt;= x for v in <em>array</em>.slice(i, hi) for the right side.</p> <h6 id=\"d3_bisect\"> d3.<strong>bisect</strong>(<em>array</em>, <em>x</em>[, <em>lo</em>[, <em>hi</em>]])<br>  d3.<strong>bisectRight</strong>(<em>array</em>, <em>x</em>[, <em>lo</em>[, <em>hi</em>]])</h6> <p>Similar to bisectLeft, but returns an insertion point which comes after (to the right of) any existing entries of <em>x</em> in <em>array</em>. The returned insertion point <em>i</em> partitions the <em>array</em> into two halves so that all <em>v</em> &lt;= <em>x</em> for <em>v</em> in <em>array</em>.slice(lo, i) for the left side and all <em>v</em> &gt; <em>x</em> for <em>v</em> in <em>array</em>.slice(i, hi) for the right side.</p> <h6 id=\"d3_bisector\"> d3.<strong>bisector</strong>(<em>accessor</em>) <br> d3.<strong>bisector</strong>(<em>comparator</em>)</h6> <p>Returns a bisector using the specified <em>accessor</em> or <em>comparator</em> function. The returned object has <code>left</code> and <code>right</code> properties which are similar to <a href=\"#d3_bisectLeft\">bisectLeft</a> and <a href=\"#d3_bisectRight\">bisectRight</a>, respectively. This method can be used to bisect arrays of objects instead of being limited to simple arrays of primitives. For example, given the following array of objects:</p> <div class=\"highlight highlight-source-js\"><pre>var data = [\n  {date: new Date(2011, 1, 1), value: 0.5},\n  {date: new Date(2011, 2, 1), value: 0.6},\n  {date: new Date(2011, 3, 1), value: 0.7},\n  {date: new Date(2011, 4, 1), value: 0.8}\n];</pre></div> <p>A suitable bisect function could be constructed as:</p> <div class=\"highlight highlight-source-js\"><pre>var bisect = d3.bisector(function(d) { return d.date; }).right;</pre></div> <p>This is equivalent to specifying a comparator:</p> <div class=\"highlight highlight-source-js\"><pre>var bisect = d3.bisector(function(a, b) { return a.date - b.date; }).right;</pre></div> <p>And then applied as <code>bisect(data, new Date(2011, 1, 2))</code>, returning an index. Use a comparator rather than an accessor if you want values to be sorted in an order different than natural order, such as in descending rather than ascending order.</p> <h6 id=\"d3_shuffle\"> d3.<strong>shuffle</strong>(<em>array</em>[, <em>lo</em>[, <em>hi</em>]])</h6> <p>Randomizes the order of the specified <em>array</em> using the <a href=\"http://bost.ocks.org/mike/shuffle/\">Fisher–Yates shuffle</a>.</p> <h2 id=\"associative-arrays\"> Associative Arrays</h2> <p>Another common data type in JavaScript is the associative array, or more simply the object, which has a set of named properties. In Java this is referred to as a map, and in Python, a dictionary. JavaScript provides a standard mechanism for iterating over the keys (or property names) in an associative array: the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Statements/for...in\">for…in loop</a>. However, note that the iteration order is undefined. D3 provides several operators for converting associative arrays to standard indexed arrays.</p> <h6 id=\"d3_keys\"> d3.<strong>keys</strong>(<em>object</em>)</h6> <p>Returns an array containing the property names of the specified object (an associative array). The order of the returned array is undefined.</p> <h6 id=\"d3_values\"> d3.<strong>values</strong>(<em>object</em>)</h6> <p>Returns an array containing the property values of the specified object (an associative array). The order of the returned array is undefined.</p> <h6 id=\"d3_entries\"> d3.<strong>entries</strong>(<em>object</em>)</h6> <p>Returns an array containing the property keys and values of the specified object (an associative array). Each entry is an object with a key and value attribute, such as <code>{key: \"foo\", value: 42}</code>. The order of the returned array is undefined.</p> <div class=\"highlight highlight-source-js\"><pre>d3.entries({foo: 42, bar: true}); // [{key: \"foo\", value: 42}, {key: \"bar\", value: true}]</pre></div> <h3> Maps</h3> <p>While it is tempting to use bare objects as maps in JavaScript, this can lead to <a href=\"http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/\">unexpected behavior</a> when built-in property names are used as keys. For example, if you try to set <code>object[\"__proto__\"] = 42</code>, it probably won't do what you expect. The same is true if you attempt to query whether a given key is defined in the map; <code>\"hasOwnProperty\" in object</code> returns true because your bare object inherits the hasOwnProperty method from the Object prototype. To avoid these problems, ES6 proposes <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets\">simple maps and sets</a>; until modern browsers support these collections, you can use d3.map instead.</p> <p>Note: unlike the proposed ES6 map, d3.map still uses string-coercion for keys rather than strict equality.</p> <h6 id=\"d3_map\"> d3.<strong>map</strong>([<em>object</em>][, <em>key</em>])</h6> <p>Constructs a new map. If <em>object</em> is specified, copies all enumerable properties from the specified object into this map. The specified object may be an array. An optional <em>key</em> function may be specified to compute the key for each value in the array. For example:</p> <div class=\"highlight highlight-source-js\"><pre>var m = d3.map([{name: \"foo\"}, {name: \"bar\"}], function(d) { return d.name; });\nm.get(\"foo\"); // {\"name\": \"foo\"}\nm.get(\"bar\"); // {\"name\": \"bar\"}\nm.get(\"baz\"); // undefined</pre></div> <p>See also <a href=\"#nest\">d3.nest</a>.</p> <h6 id=\"map_has\"> map.<strong>has</strong>(<em>key</em>)</h6> <p>Returns true if and only if this map has an entry for the specified <em>key</em> string. Note: the value may be <code>null</code> or <code>undefined</code>.</p> <h6 id=\"map_get\"> map.<strong>get</strong>(<em>key</em>)</h6> <p>Returns the value for the specified <em>key</em> string. If the map does not have an entry for the specified <em>key</em>, returns <code>undefined</code>.</p> <h6 id=\"map_set\"> map.<strong>set</strong>(<em>key</em>, <em>value</em>)</h6> <p>Sets the <em>value</em> for the specified <em>key</em> string; returns the new <em>value</em>. If the map previously had an entry for the same <em>key</em> string, the old entry is replaced with the new value.</p> <h6 id=\"map_remove\"> map.<strong>remove</strong>(<em>key</em>)</h6> <p>If the map has an entry for the specified <em>key</em> string, removes the entry and returns true. Otherwise, this method does nothing and returns false.</p> <h6 id=\"map_keys\"> map.<strong>keys</strong>()</h6> <p>Returns an array of string keys for every entry in this map. The order of the returned keys is arbitrary.</p> <h6 id=\"map_values\"> map.<strong>values</strong>()</h6> <p>Returns an array of values for every entry in this map. The order of the returned values is arbitrary.</p> <h6 id=\"map_entries\"> map.<strong>entries</strong>()</h6> <p>Returns an array of key-value objects for each entry in this map. The order of the returned entries is arbitrary. Each entry’s key is a string, but the value has arbitrary type.</p> <h6 id=\"map_forEach\"> map.<strong>forEach</strong>(<em>function</em>)</h6> <p>Calls the specified <em>function</em> for each entry in this map, passing the entry's key and value as two arguments. The <code>this</code> context of the <em>function</em> is this map. Returns undefined. The iteration order is arbitrary.</p> <h6 id=\"map_empty\"> map.<strong>empty</strong>()</h6> <p>Returns true if and only if this map has zero entries.</p> <h6 id=\"map_size\"> map.<strong>size</strong>()</h6> <p>Returns the number of entries in this map.</p> <h3> Sets</h3> <h6 id=\"d3_set\"> d3.<strong>set</strong>([<em>array</em>])</h6> <p>Constructs a new set. If <em>array</em> is specified, adds the given <em>array</em> of string values to the returned set.</p> <h6 id=\"set_has\"> set.<strong>has</strong>(<em>value</em>)</h6> <p>Returns true if and only if this set has an entry for the specified <em>value</em> string.</p> <h6 id=\"set_add\"> set.<strong>add</strong>(<em>value</em>)</h6> <p>Adds the specified <em>value</em> string to this set. Returns <em>value</em>.</p> <h6 id=\"set_remove\"> set.<strong>remove</strong>(<em>value</em>)</h6> <p>If the set contains the specified <em>value</em> string, removes it and returns true. Otherwise, this method does nothing and returns false.</p> <h6 id=\"set_values\"> set.<strong>values</strong>()</h6> <p>Returns an array of the string values in this set. The order of the returned values is arbitrary. Can be used as a convenient way of computing the unique values for a set of strings. For example:</p> <div class=\"highlight highlight-source-js\"><pre>d3.set([\"foo\", \"bar\", \"foo\", \"baz\"]).values(); // \"foo\", \"bar\", \"baz\"</pre></div> <h6 id=\"set_forEach\"> set.<strong>forEach</strong>(<em>function</em>)</h6> <p>Calls the specified <em>function</em> for each value in this set, passing the value as an argument. The <code>this</code> context of the <em>function</em> is this set. Returns undefined. The iteration order is arbitrary.</p> <h6 id=\"set_empty\"> set.<strong>empty</strong>()</h6> <p>Returns true if and only if this set has zero values.</p> <h6 id=\"set_size\"> set.<strong>size</strong>()</h6> <p>Returns the number of values in this set.</p> <h2 id=\"array-operators\"> Array Operators</h2> <h6 id=\"d3_merge\"> d3.<strong>merge</strong>(<em>arrays</em>)</h6> <p>Merges the specified <em>arrays</em> into a single array. This method is similar to the built-in array concat method; the only difference is that it is more convenient when you have an array of arrays.</p> <div class=\"highlight highlight-source-js\"><pre>d3.merge([ [1], [2, 3] ]); // returns [1, 2, 3]</pre></div> <h6 id=\"d3_range\"> d3.<strong>range</strong>([<em>start</em>, ]<em>stop</em>[, <em>step</em>])</h6> <p>Generates an array containing an arithmetic progression, similar to the Python built-in <a href=\"http://docs.python.org/library/functions.html#range\">range</a>. This method is often used to iterate over a sequence of numeric or integer values, such as the indexes into an array. Unlike the Python version, the arguments are not required to be integers, though the results are more predictable if they are due to floating point precision. If <em>step</em> is omitted, it defaults to 1. If <em>start</em> is omitted, it defaults to 0. The <em>stop</em> value is not included in the result. The full form returns an array of numbers [<em>start</em>, <em>start</em> + <em>step</em>, <em>start</em> + 2 * <em>step</em>, …]. If <em>step</em> is positive, the last element is the largest <em>start</em> + <em>i</em> * <em>step</em> less than <em>stop</em>; if <em>step</em> is negative, the last element is the smallest <em>start</em> + <em>i</em> * <em>step</em> greater than <em>stop</em>. If the returned array would contain an infinite number of values, an error is thrown rather than causing an infinite loop.</p> <h6 id=\"d3_permute\"> d3.<strong>permute</strong>(<em>array</em>, <em>indexes</em>)</h6> <p>Returns a permutation of the specified <em>array</em> using the specified array of <em>indexes</em>. The returned array contains the corresponding element in array for each index in indexes, in order. For example, permute([\"a\", \"b\", \"c\"], [1, 2, 0]) returns [\"b\", \"c\", \"a\"]. It is acceptable for the array of indexes to be a different length from the array of elements, and for indexes to be duplicated or omitted.</p> <p>This method can also be used to extract the values from an object into an array with a stable order. (Array indexes in JavaScript are simply properties which have a special relationship to <code>.length</code>.) Extracting keyed values in order can be useful for generating data arrays in nested selections. For example, we could display some of the Minnesota barley yield data above in table form:</p> <div class=\"highlight highlight-source-js\"><pre>var cols = [\"site\", \"variety\", \"yield\"];\nthead.selectAll('th').data(cols)\n    .enter().append('th').text(function (d) { return d.toUpperCase(); });\ntbody.selectAll('tr').data(yields)\n    .enter().append('tr').selectAll('td').data(function (row) { return d3.permute(row, cols); })\n        .enter().append('td').text(function (d) { return d; });</pre></div> <h6 id=\"d3_zip\"> d3.<strong>zip</strong>(<em>arrays…</em>)</h6> <p>Returns an array of arrays, where the ith array contains the ith element from each of the argument <em>arrays</em>. The returned array is truncated in length to the shortest array in <em>arrays</em>. If <em>arrays</em> contains only a single array, the returned array contains one-element arrays. With no arguments, the returned array is empty.</p> <div class=\"highlight highlight-source-js\"><pre>d3.zip([1, 2], [3, 4]); // returns [[1, 3], [2, 4]]</pre></div> <h6 id=\"d3_transpose\"> d3.<strong>transpose</strong>(<em>matrix</em>)</h6> <p>Equivalent to <code>d3.zip.apply(null, matrix)</code>; uses the zip operator as a two-dimensional <a href=\"http://en.wikipedia.org/wiki/Transpose\">matrix transpose</a>.</p> <h6 id=\"d3_pairs\"> d3.<strong>pairs</strong>(<em>array</em>)</h6> <p>For each adjacent pair of elements in the specified <em>array</em>, returns a new array of tuples of element <em>i</em> and element <em>i</em> - 1. For example:</p> <div class=\"highlight highlight-source-js\"><pre>d3.pairs([1, 2, 3, 4]); // returns [[1, 2], [2, 3], [3, 4]]</pre></div> <p>If the specified array has fewer than two elements, returns the empty array.</p> <h3> Nest</h3> <p>Nesting allows elements in an array to be grouped into a hierarchical tree structure; think of it like the GROUP BY operator in SQL, except you can have multiple levels of grouping, and the resulting output is a tree rather than a flat table. The levels in the tree are specified by key functions. The leaf nodes of the tree can be sorted by value, while the internal nodes can be sorted by key. An optional rollup function will collapse the elements in each leaf node using a summary function. The nest operator (the object returned by <a href=\"#d3_nest\">d3.nest</a>) is reusable, and does not retain any references to the data that is nested.</p> <p>For example, consider the following tabular data structure of Barley yields, from various sites in Minnesota during 1931-2:</p> <div class=\"highlight highlight-source-js\"><pre>var yields = [\n  {yield: 27.00, variety: \"Manchuria\", year: 1931, site: \"University Farm\"},\n  {yield: 48.87, variety: \"Manchuria\", year: 1931, site: \"Waseca\"},\n  {yield: 27.43, variety: \"Manchuria\", year: 1931, site: \"Morris\"},\n  ...\n];</pre></div> <p>To facilitate visualization, it may be useful to nest the elements first by year, and then by variety, as follows:</p> <div class=\"highlight highlight-source-js\"><pre>var nest = d3.nest()\n    .key(function(d) { return d.year; })\n    .key(function(d) { return d.variety; })\n    .entries(yields);</pre></div> <p>This returns a nested array. Each element of the outer array is a key-values pair, listing the values for each distinct key:</p> <div class=\"highlight highlight-source-js\"><pre>[{key: \"1931\", values: [\n   {key: \"Manchuria\", values: [\n     {yield: 27.00, variety: \"Manchuria\", year: 1931, site: \"University Farm\"},\n     {yield: 48.87, variety: \"Manchuria\", year: 1931, site: \"Waseca\"},\n     {yield: 27.43, variety: \"Manchuria\", year: 1931, site: \"Morris\"}, ...]},\n   {key: \"Glabron\", values: [\n     {yield: 43.07, variety: \"Glabron\", year: 1931, site: \"University Farm\"},\n     {yield: 55.20, variety: \"Glabron\", year: 1931, site: \"Waseca\"}, ...]}, ...]},\n {key: \"1932\", values: ...}]</pre></div> <p>The nested form allows easy iteration and generation of hierarchical structures in SVG or HTML.</p> <p>For a longer introduction to d3.nest, see:</p> <ul> <li>Phoebe Bright’s <a href=\"http://bl.ocks.org/phoebebright/raw/3176159/\">D3 Nest Tutorial and examples</a> </li> <li>Shan Carter’s <a href=\"http://bl.ocks.org/shancarter/raw/4748131/\">Mister Nester</a> </li> </ul> <h6 id=\"d3_nest\"> d3.<strong>nest</strong>()</h6> <p>Creates a new nest operator. The set of keys is initially empty. If the <a href=\"#nest_map\">map</a> or <a href=\"#nest_entries\">entries</a> operator is invoked before any key functions are registered, the nest operator simply returns the input array. Examples of nest: <a href=\"http://bl.ocks.org/phoebebright/raw/3176159/\">http://bl.ocks.org/phoebebright/raw/3176159/</a></p> <h6 id=\"nest_key\"> nest.<strong>key</strong>(<em>function</em>)</h6> <p>Registers a new key <em>function</em>. The key function will be invoked for each element in the input array, and must return a string identifier that is used to assign the element to its group. Most often, the function is implemented as a simple accessor, such as the year and variety accessors in the example above. The function is <em>not</em> passed the input array index. Each time a key is registered, it is pushed onto the end of an internal keys array, and the resulting map or entries will have an additional hierarchy level. There is not currently a facility to remove or query the registered keys. The most-recently registered key is referred to as the current key in subsequent methods.</p> <h6 id=\"nest_sortKeys\"> nest.<strong>sortKeys</strong>(<em>comparator</em>)</h6> <p>Sorts key values for the current key using the specified <em>comparator</em>, such as <a href=\"#d3_descending\">d3.descending</a>. If no comparator is specified for the current key, the order in which keys will be returned is undefined. Note that this only affects the result of the entries operator; the order of keys returned by the map operator is always undefined, regardless of comparator.</p> <div class=\"highlight highlight-source-js\"><pre>var nest = d3.nest()\n    .key(function(d) { return d.year; })\n    .sortKeys(d3.ascending)\n    .entries(yields);</pre></div> <h6 id=\"nest_sortValues\"> nest.<strong>sortValues</strong>(<em>comparator</em>)</h6> <p>Sorts leaf elements using the specified <em>comparator</em>, such as <a href=\"#d3_descending\">d3.descending</a>. This is roughly equivalent to sorting the input array before applying the nest operator; however it is typically more efficient as the size of each group is smaller. If no value comparator is specified, elements will be returned in the order they appeared in the input array. This applies to both the map and entries operators.</p> <h6 id=\"nest_rollup\"> nest.<strong>rollup</strong>(<em>function</em>)</h6> <p>Specifies a rollup <em>function</em> to be applied on each group of leaf elements. The return value of the rollup function will replace the array of leaf values in either the associative array returned by the map operator, or the values attribute of each entry returned by the entries operator.</p> <h6 id=\"nest_map\"> nest.<strong>map</strong>(<em>array</em>[, <em>mapType</em>])</h6> <p>Applies the nest operator to the specified <em>array</em>, returning an associative array. Each entry in the returned associative array corresponds to a distinct key value returned by the first key function. The entry value depends on the number of registered key functions: if there is an additional key, the value is another nested associative array; otherwise, the value is the array of elements filtered from the input <em>array</em> that have the given key value.</p> <p>If a <em>mapType</em> is specified, the specified function is used to construct a map rather than returning a simple JavaScript object. It is recommended that you use <a href=\"#d3_map\">d3.map</a> for this purpose. For example:</p> <div class=\"highlight highlight-source-js\"><pre>var yieldsByYearAndVariety = d3.nest()\n    .key(function(d) { return d.year; })\n    .key(function(d) { return d.variety; })\n    .map(yields, d3.map);</pre></div> <p>Using d3.map rather than an object offers conveniences (e.g., the returned map has <a href=\"#map_keys\">keys</a> and <a href=\"#map_values\">values</a> functions), and protects against unusual key names that conflict with built-in JavaScript properties, such as <code>__proto__</code>.</p> <h6 id=\"nest_entries\"> nest.<strong>entries</strong>(<em>array</em>)</h6> <p>Applies the nest operator to the specified <em>array</em>, returning an array of key-values entries. Conceptually, this is similar to applying <a href=\"#d3_entries\">d3.entries</a> to the associative array returned by <a href=\"#nest_map\">map</a>, but it applies to every level of the hierarchy rather than just the first (outermost) level. Each entry in the returned array corresponds to a distinct key value returned by the first key function. The entry value depends on the number of registered key functions: if there is an additional key, the value is another nested array of entries; otherwise, the value is the array of elements filtered from the input <em>array</em> that have the given key value.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Arrays\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Arrays</a>\n  </p>\n</div>\n","drag-behavior":"<h1 class=\"gh-header-title instapaper_title\">Drag Behavior</h1>   <p>This behavior automatically creates event listeners to handle drag gestures on an element. Both mouse events and touch events are supported.</p> <h6 id=\"drag\"> d3.behavior.<b>drag</b>()</h6> <p>Constructs a new drag behavior. Once constructed, you can apply the drag behavior to selected elements using selection.call:</p> <div class=\"highlight highlight-source-js\"><pre>var drag = d3.behavior.drag();\nselection.call(drag);</pre></div> <p>All registered listeners use the “drag” namespace, so to subsequently remove the behavior:</p> <div class=\"highlight highlight-source-js\"><pre>selection.on(\".drag\", null);</pre></div> <h6 id=\"on\"> drag.<b>on</b>(<i>type</i>[, <i>listener</i>])</h6> <p>Registers the specified <em>listener</em> to receive events of the specified <em>type</em> from the drag behavior. If no <em>listener</em> is specified, returns the currently-registered listener for the specified event <em>type</em>. (The <em>type</em> may include a namespace; see <a href=\"internals#dispatch_on\">dispatch.on</a> for additional details.) The following events are supported:</p> <ul> <li> <em>dragstart</em> - when a drag gesture starts.</li> <li> <em>drag</em> - when the drag gesture moves.</li> <li> <em>dragend</em> - when the drag gesture finishes.</li> </ul> <p>Drag events (but not dragstart and dragend events) expose \"x\" and \"y\" properties representing the current position of the drag gesture in local coordinates. By default, this position is simply the <a href=\"selections#d3_mouse\">mouse</a> (or <a href=\"selections#d3_touches\">touch</a>) position; however, the position can be modified by specifying an <a href=\"#origin\">origin</a>. The drag event also exposes \"dx\" and \"dy\" properties representing the element’s coordinates relative to its position at the beginning of the gesture, which is occasionally more convenient than specifying an explicit origin.</p> <p>During a drag gesture, some browser default behaviors (such as text selection) are prevented. To allow the dragging of links, the default behavior for a click event that immediately follows a non-empty drag gesture is prevented. When registering your own click listener on draggable elements, you can check whether the click event was suppressed as follows:</p> <div class=\"highlight highlight-source-js\"><pre>selection.on(\"click\", function() {\n  if (d3.event.defaultPrevented) return; // click suppressed\n  console.log(\"clicked!\");\n});</pre></div> <p>When combining drag behaviors with other event listeners for interaction events (such as having <a href=\"http://bl.ocks.org/mbostock/6123708\">drag take precedence over zoom</a>), you may also consider stopping propagation on the source event to prevent multiple actions:</p> <div class=\"highlight highlight-source-js\"><pre>drag.on(\"dragstart\", function() {\n  d3.event.sourceEvent.stopPropagation(); // silence other listeners\n});</pre></div> <h6 id=\"origin\"> drag.<b>origin</b>([<i>origin</i>])</h6> <p>If <em>origin</em> is specified, sets the origin accessor to the specified function. If <em>origin</em> is not specified, returns the current origin accessor which defaults to null.</p> <p>The <em>origin</em> accessor function is used to determine the starting position (the “origin”) of the element being dragged; this allows the drag behavior to preserve the offset between the mouse position and the starting element position during drag. If the origin accessor is null, then the element position is set to the mouse position on drag; this can cause a noticeable jump on large elements. If an origin accessor is specified, the function is called on mousedown. The function is invoked in the same manner as other operator functions, being passed the current datum <code>d</code> and index <code>i</code>, with the <code>this</code> context as the clicked-on DOM element. To access the current event, use the global <a href=\"selections#d3_event\">d3.event</a>. The origin accessor must return an object with <code>x</code> and <code>y</code> properties representing the starting coordinates of the element being dragged.</p> <p>Frequently the origin accessor is specified as the identity function: <code>function(d) { return d; }</code>. This is suitable when the datum bound to the dragged element is already an object with <code>x</code> and <code>y</code> attributes representing its current position. For example: <a href=\"http://bl.ocks.org/1557377\">http://bl.ocks.org/1557377</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Drag-Behavior\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Drag-Behavior</a>\n  </p>\n</div>\n","chord-layout":"<h1 class=\"gh-header-title instapaper_title\">Chord Layout</h1>   <p><strong>Chord diagrams</strong> show relationships among a group of entities. For example, consider a hypothetical population of people with different hair colors: black, blonde, brown and red. Each person in this population has a preferred hair color for a dating partner; of the 29,630 (hypothetical) people with black hair, 40% (11,975) prefer partners with the same hair color. This preference is asymmetric: for example, only 10% of people with blonde hair prefer black hair, while 20% of people with black hair prefer blonde hair.</p> <p><a href=\"http://mbostock.github.com/d3/ex/chord.html\"><img src=\"https://github.com/mbostock/d3/wiki/chord.png\" alt=\"chord\"></a></p> <p>A chord diagram visualizes these relationships by drawing quadratic Bézier curves between arcs. The source and target arcs represents two mirrored subsets of the total population, such as the number of people with black hair that prefer blonde hair, and the number of people with blonde hair that prefer black hair. As another example, consider this chord diagram of <a href=\"http://bl.ocks.org/mbostock/1046712\">software dependencies</a>.</p> <p>The chord layout is designed to work in conjunction with the <a href=\"svg-shapes#chord\">chord shape</a> and the <a href=\"svg-shapes#arc\">arc shape</a>. The layout is used to generate data objects which describe the chords, serving as input to the chord shape. The layout also generates descriptions for the groups, which can be used as input to the arc shape.</p> <h6 id=\"chord\"> d3.layout.<b>chord</b>()</h6> <p>Constructs a new chord layout. By default, the input data is not sorted, and there is no padding between groups. Unlike some of the other layouts, the chord layout is not a function to be applied to data; instead, data is specified by setting the associated <a href=\"chord-layout#matrix\">matrix</a>, and retrieved using the <a href=\"chord-layout#chords\">chords</a> and <a href=\"chord-layout#groups\">groups</a> accessors.</p> <h6 id=\"matrix\"> chord.<b>matrix</b>([<i>matrix</i>])</h6> <p>If <em>matrix</em> is specified, sets the input data matrix used by this layout. If <em>matrix</em> is not specified, returns the current data matrix, which defaults to undefined. The input matrix must be a <a href=\"http://en.wikipedia.org/wiki/Matrix_(mathematics)#Square_matrices\">square matrix</a> of numbers, such as:</p> <div class=\"highlight highlight-source-js\"><pre>[[11975,  5871, 8916, 2868],\n [ 1951, 10048, 2060, 6171],\n [ 8010, 16145, 8090, 8045],\n [ 1013,   990,  940, 6907]]</pre></div> <p>Each row in the matrix corresponds to a distinct group, such as a hair color in the above example. Each column <em>i</em> in the matrix corresponds to the same group as row <em>i</em>; the cell <em>ij</em> corresponds to the relationship from group <em>i</em> to group <em>j</em>.</p> <h6 id=\"padding\"> chord.<b>padding</b>([<i>padding</i>])</h6> <p>If <em>padding</em> is specified, sets the angular padding between groups to the specified value in <a href=\"http://en.wikipedia.org/wiki/Radian\">radians</a>. If <em>padding</em> is not specified, returns the current padding, which defaults to zero. You may wish to compute the padding as a function of the number of groups (the number of rows or columns in the associated matrix).</p> <h6 id=\"sortGroups\"> chord.<b>sortGroups</b>([<i>comparator</i>])</h6> <p>If <em>comparator</em> is specified, sets the sort order of groups (rows) for the layout using the specified comparator function. The comparator function is invoked for pairs of rows, being passed the sum of row <em>i</em> and row <em>j</em>. Typically, the comparator should be specified as either <a href=\"arrays#d3_ascending\">d3.ascending</a> or <a href=\"arrays#d3_descending\">d3.descending</a>. If <em>comparator</em> is not specified, returns the current group sort order, which defaults to null for no sorting.</p> <h6 id=\"sortSubgroups\"> chord.<b>sortSubgroups</b>([<i>comparator</i>])</h6> <p>If <em>comparator</em> is specified, sets the sort order of subgroups (columns within rows) for the layout using the specified comparator function. The comparator function is invoked for pairs of cells, being passed the value of each cell. Typically, the comparator should be specified as either ascending or descending. If <em>comparator</em> is not specified, returns the current subgroup sort order, which defaults to null for no sorting.</p> <h6 id=\"sortChords\"> chord.<b>sortChords</b>([<i>comparator</i>])</h6> <p>If <em>comparator</em> is specified, sets the sort order of chords (z-order) for the layout using the specified comparator function. The comparator function is invoked for pairs of chords, being passed the minimum value of the associated source and target cells. Typically, the comparator should be specified as either ascending or descending. If <em>comparator</em> is not specified, returns the current chord sort order, which defaults to null for no sorting.</p> <h6 id=\"chords\"> chord.<b>chords</b>()</h6> <p>Returns the computed chord objects, given the layout's current configuration and associated matrix. If the chord objects were previously-computed, this method returns the cached value. Changing any attribute of the layout implicitly clears the previously-computed chords, if any, such that the next call to this method will recompute the layout. The returned objects have the following properties:</p> <ul> <li>source - an object describing the source.</li> <li>target - an object describing the target.</li> </ul> <p>These objects, in turn, describe the underlying entity:</p> <ul> <li>index - the row index, <em>i</em>.</li> <li>subindex - the column index, <em>j</em>.</li> <li>startAngle - the start angle of the arc, in radians.</li> <li>endAngle - the end angle of the arc, in radians.</li> <li>value - the value of the associated cell <em>ij</em>, a number.</li> </ul> <p>Note that these objects conveniently match the default accessors for the <a href=\"svg-shapes#chord\">chord</a> generator; however, you can still override the accessors to tweak the layout, or simply manipulate the returned objects.</p> <h6 id=\"groups\"> chord.<b>groups</b>()</h6> <p>Returns the computed group objects, given the layout's current configuration and associated matrix. If the group objects were previously-computed, this method returns the cached value. Changing any attribute of the layout implicitly clears the previously-computed groups, if any, such that the next call to this method will recompute the layout. The returned objects have the following properties:</p> <ul> <li>index - the row index, <em>i</em>.</li> <li>startAngle - the start angle of the arc, in radians.</li> <li>endAngle - the end angle of the arc, in radians.</li> <li>value - the sum of the associated row <em>i</em>, a number.</li> </ul> <p>Note that these objects conveniently match the default accessors for the <a href=\"svg-shapes#arc\">arc</a> generator; however, you can still override the accessors to tweak the layout, or simply manipulate the returned objects.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Chord-Layout\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Chord-Layout</a>\n  </p>\n</div>\n","cluster-layout":"<h1 class=\"gh-header-title instapaper_title\">Cluster Layout</h1>   <p>The <strong>cluster layout</strong> produces <a href=\"http://en.wikipedia.org/wiki/Dendrogram\">dendrograms</a>: node-link diagrams that place leaf nodes of the tree at the same depth. For example, a cluster layout can be used to organize software classes in a package hierarchy:</p> <p><a href=\"http://mbostock.github.com/d3/ex/cluster.html\"><img src=\"https://github.com/mbostock/d3/wiki/cluster.png\" alt=\"cluster\"></a></p> <p>Like other classes in D3, layouts follow the method chaining pattern where setter methods return the layout itself, allowing multiple setters to be invoked in a concise statement.</p> <h6 id=\"cluster\"> d3.layout.<b>cluster</b>()</h6> <p>Creates a new cluster layout with the default settings: the default sort order is null; the default children accessor assumes each input data is an object with a children array; the default separation function uses one node width for siblings, and two node widths for non-siblings; the default size is 1×1.</p> <h6 id=\"_cluster\"> <b>cluster</b>(<i>root</i>) <br> cluster.<b>nodes</b>(<i>root</i>)</h6> <p>Runs the cluster layout, returning the array of nodes associated with the specified <em>root</em> node. The cluster layout is part of D3's family of <a class=\"internal present\" href=\"hierarchy-layout\">hierarchical</a> layouts. These layouts follow the same basic structure: the input argument to the layout is the <em>root</em> node of the hierarchy, and the output return value is an array representing the computed positions of all nodes. Several attributes are populated on each node:</p> <ul> <li>parent - the parent node, or null for the root.</li> <li>children - the array of child nodes, or null for leaf nodes.</li> <li>depth - the depth of the node, starting at 0 for the root.</li> <li>x - the computed <em>x</em>-coordinate of the node position.</li> <li>y - the computed <em>y</em>-coordinate of the node position.</li> </ul> <p>Although the layout has a size in <em>x</em> and <em>y</em>, this represents an arbitrary coordinate system; for example, you can treat <em>x</em> as a radius and <em>y</em> as an angle to produce a radial rather than Cartesian layout.</p> <h6 id=\"links\"> cluster.<b>links</b>(<i>nodes</i>)</h6> <p>Given the specified array of <em>nodes</em>, such as those returned by <a href=\"cluster-layout#nodes\">nodes</a>, returns an array of objects representing the links from parent to child for each node. Leaf nodes will not have any links. Each link is an object with two attributes:</p> <ul> <li>source - the parent node (as described above).</li> <li>target - the child node.</li> </ul> <p>This method is useful for retrieving a set of link descriptions suitable for display, often in conjunction with the <a href=\"svg-shapes#diagonal\">diagonal</a> shape generator. For example:</p> <div class=\"highlight highlight-source-js\"><pre>svg.selectAll(\"path\")\n    .data(cluster.links(nodes))\n  .enter().append(\"path\")\n    .attr(\"d\", d3.svg.diagonal());</pre></div> <h6 id=\"children\"> cluster.<b>children</b>([<i>children</i>])</h6> <p>If <em>children</em> is specified, sets the specified children accessor function. If <em>children</em> is not specified, returns the current children accessor function, which by default assumes that the input data is an object with a children array:</p> <div class=\"highlight highlight-source-js\"><pre>function children(d) {\n  return d.children;\n}</pre></div> <p>Often, it is convenient to load the node hierarchy using <a href=\"requests#d3_json\">d3.json</a>, and represent the input hierarchy as a nested <a href=\"http://json.org\">JSON</a> object. For example:</p> <div class=\"highlight highlight-source-js\"><pre>{\n \"name\": \"flare\",\n \"children\": [\n  {\n   \"name\": \"analytics\",\n   \"children\": [\n    {\n     \"name\": \"cluster\",\n     \"children\": [\n      {\"name\": \"AgglomerativeCluster\", \"size\": 3938},\n      {\"name\": \"CommunityStructure\", \"size\": 3812},\n      {\"name\": \"MergeEdge\", \"size\": 743}\n     ]\n    },\n    {\n     \"name\": \"graph\",\n     \"children\": [\n      {\"name\": \"BetweennessCentrality\", \"size\": 3534},\n      {\"name\": \"LinkDistance\", \"size\": 5731}\n     ]\n    }\n   ]\n  }\n ]\n}</pre></div> <p>The children accessor is first invoked for root node in the hierarchy. If the accessor returns null, then the node is assumed to be a leaf node at the layout traversal terminates. Otherwise, the accessor should return an array of data elements representing the child nodes.</p> <h6 id=\"sort\"> cluster.<b>sort</b>([<i>comparator</i>])</h6> <p>If <em>comparator</em> is specified, sets the sort order of sibling nodes for the layout using the specified comparator function. If <em>comparator</em> is not specified, returns the current group sort order, which defaults to null for no sorting. The comparator function is invoked for pairs of nodes, being passed the input data for each node. The default comparator is null, which disables sorting and uses tree traversal order. For example, to sort sibling nodes in descending order by the associated input data's string name attribute, say:</p> <div class=\"highlight highlight-source-js\"><pre>function comparator(a, b) {\n  return d3.ascending(a.name, b.name);\n}</pre></div> <p>See <a href=\"arrays#d3_ascending\">d3.ascending</a> or <a href=\"arrays#d3_descending\">d3.descending</a> for details.</p> <h6 id=\"separation\"> cluster.<b>separation</b>([<i>separation</i>])</h6> <p>If <em>separation</em> is specified, uses the specified function to compute separation between neighboring nodes. If <em>separation</em> is not specified, returns the current separation function, which defaults to:</p> <div class=\"highlight highlight-source-js\"><pre>function separation(a, b) {\n  return a.parent == b.parent ? 1 : 2;\n}</pre></div> <p>A variation that is more appropriate for radial layouts reduces the separation gap proportionally to the radius:</p> <div class=\"highlight highlight-source-js\"><pre>function separation(a, b) {\n  return (a.parent == b.parent ? 1 : 2) / a.depth;\n}</pre></div> <p>The separation function is passed two neighboring nodes <em>a</em> and <em>b</em>, and must return the desired separation between nodes. The nodes are typically siblings, though the nodes may also be cousins (or even more distant relations) if the layout decides to place such nodes adjacent.</p> <h6 id=\"size\"> cluster.<b>size</b>([<i>size</i>])</h6> <p>If <em>size</em> is specified, sets the available layout size to the specified two-element array of numbers representing <em>x</em> and <em>y</em>. If <em>size</em> is not specified, returns the current size, which defaults to 1×1, or null if a <a href=\"#nodeSize\">nodeSize</a> is in use. Although the layout has a size in <em>x</em> and <em>y</em>, this represents an arbitrary coordinate system. For example, to produce a radial layout where the tree breadth (<em>x</em>) in measured in degrees, and the tree depth (<em>y</em>) is a radius <em>r</em> in pixels, say [360, <em>r</em>].</p> <h6 id=\"nodeSize\"> cluster.<b>nodeSize</b>([<i>nodeSize</i>])</h6> <p>If <em>nodeSize</em> is specified, sets a fixed size for each node as a two-element array of numbers representing <em>x</em> and <em>y</em>. If <em>nodeSize</em> is not specified, returns the current node size, which defaults to null, meaning that the layout has an overall fixed size, which can be retrieved using <a href=\"#size\">size</a>.</p> <h6 id=\"value\"> cluster.<b>value</b>([<i>value</i>])</h6> <p>If <em>value</em> is specified, sets the value accessor to the specified function. If <em>value</em> is not specified, returns the current value accessor which defaults to null, meaning that the value attribute is not computed. If specified, the value accessor is invoked for each input data element, and must return a number representing the numeric value of the node. This value has no effect on the cluster layout, but is generic functionality provided by hierarchy layouts.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Cluster-Layout\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Cluster-Layout</a>\n  </p>\n</div>\n","colors":"<h1 class=\"gh-header-title instapaper_title\">Colors</h1>   <p>Constructing visualizations often involves working with colors. Even though your browser understands a lot about colors, it doesn't offer much help in manipulating colors through JavaScript. So D3 provides representations for various color spaces, including <a href=\"http://en.wikipedia.org/wiki/RGB_color_model\">RGB</a>, <a href=\"http://en.wikipedia.org/wiki/HSL_and_HSV\">HSL</a>, <a href=\"http://en.wikipedia.org/wiki/Lab_color_space\">LAB</a> and <a href=\"https://en.wikipedia.org/wiki/CIELUV_color_space#Cylindrical_representation\">HCL</a>, allowing specification, interpolation, conversion and manipulation (such as making colors brighter or darker).</p> <p>Note: while you can work with colors directly, you might also want to take a look at D3's built-in color interpolation, such as <a href=\"transitions#d3_interpolateRgb\">interpolateRgb</a>, <a href=\"transitions#d3_interpolateHsl\">interpolateHsl</a> and <a href=\"https://github.com/mbostock/d3/wiki/Scales\">scales</a>. If you are looking for <strong>color palettes</strong>, see the <a href=\"ordinal-scales\">ordinal scales</a> reference.</p> <h2 id=\"rgb\"> RGB</h2> <h6 id=\"d3_rgb\"> d3.<b>rgb</b>(<i>r</i>, <i>g</i>, <i>b</i>)</h6> <p>Constructs a new RGB color with the specified <em>r</em>, <em>g</em> and <em>b</em> channel values. Each channel must be specified as an integer in the range [0,255]. The channels are available as the <code>r</code>, <code>g</code> and <code>b</code> attributes of the returned object.</p> <h6 id=\"#d3_rgb\"> d3.<b>rgb</b>(<i>color</i>)</h6> <p>Constructs a new RGB color by parsing the specified <em>color</em> string. If <em>color</em> is not a string, it is coerced to a string; thus, this constructor can also be used to create a copy of an existing color, or force the conversion of a <a href=\"#d3_hsl\">d3.hsl</a> color to RGB. The color string may be in a variety of formats:</p> <ul> <li>rgb decimal - \"rgb(255,255,255)\"</li> <li>hsl decimal - \"hsl(120,50%,20%)\"</li> <li>rgb hexadecimal - \"#ffeeaa\"</li> <li>rgb shorthand hexadecimal - \"#fea\"</li> <li>named - \"red\", \"white\", \"blue\"</li> </ul> <p>The resulting color is stored as red, green and blue integer channel values in the range [0,255]. The channels are available as the <code>r</code>, <code>g</code> and <code>b</code> attributes of the returned object. The list of supported <a href=\"http://www.w3.org/TR/SVG/types.html#ColorKeywords\">named colors</a> is specified by CSS. If the color is specified in HSL space, it is converted to RGB in a manner equivalent to <a href=\"#hsl_rgb\">hsl.rgb</a>.</p> <h6 id=\"rgb_brighter\"> rgb.<b>brighter</b>([<i>k</i>])</h6> <p>Returns a brighter copy of this color. Each channel is multiplied by 0.7 ^ <em>-k</em>. If the gamma value <em>k</em> is omitted, it defaults to 1. Channel values are capped at the maximum value of 255, and the minimum value of 30.</p> <h6 id=\"rgb_darker\"> rgb.<b>darker</b>([<i>k</i>])</h6> <p>Returns a darker copy of this color. Each channel is multiplied by 0.7 ^ <em>k</em>. If the gamma value <em>k</em> is omitted, it defaults to 1.</p> <h6 id=\"rgb_hsl\"> rgb.<b>hsl</b>()</h6> <p>Returns the equivalent color in HSL space; see <a href=\"#d3_hsl\">d3.hsl</a> for details on the returned object. The conversion from HSL to RGB is described in <a href=\"http://www.w3.org/TR/css3-color/#hsl-color\">CSS3 Color Module Level 3</a>; this is the equivalent reverse operation.</p> <h6 id=\"rgb_toString\"> rgb.<b>toString</b>()</h6> <p>Converts this RGB color to a hexadecimal string, such as \"#f7eaba\".</p> <h2 id=\"hsl\"> HSL</h2> <h6 id=\"d3_hsl\"> d3.<b>hsl</b>(<i>h</i>, <i>s</i>, <i>l</i>)</h6> <p>Constructs a new HSL color with the specified hue <em>h</em>, saturation <em>s</em> and lightness <em>l</em>. The hue must be a number in the range [0,360]. The saturation and lightness must be in the range [0,1] <span>(not percentages)</span>. These values are available as the <code>h</code>, <code>s</code> and <code>l</code> attributes of the returned object.</p> <h6 id=\"#d3_hsl\"> d3.<b>hsl</b>(<i>color</i>)</h6> <p>Constructs a new HSL color by parsing the specified <em>color</em> string. If <em>color</em> is not a string, it is coerced to a string; thus, this constructor can also be used to create a copy of an existing color, or force the conversion of a <a href=\"#d3_rgb\">d3.rgb</a> color to HSL. The color string may be in a variety of formats:</p> <ul> <li>rgb decimal - \"rgb(255,255,255)\"</li> <li>hsl decimal - \"hsl(120,50%,20%)\"</li> <li>rgb hexadecimal - \"#ffeeaa\"</li> <li>rgb shorthand hexadecimal - \"#fea\"</li> <li>named - \"red\", \"white\", \"blue\"</li> </ul> <p>The resulting color is stored as hue in the range [0,360], and saturation and lightness values in the range [0,1]. These values are available as the <code>h</code>, <code>s</code> and <code>l</code> attributes of the returned object. The list of supported <a href=\"http://www.w3.org/TR/SVG/types.html#ColorKeywords\">named colors</a> is specified by CSS. If the color is specified in RGB space, it is converted to HSL in a manner equivalent to <a href=\"#rgb_hsl\">rgb.hsl</a>.</p> <h6 id=\"hsl_brighter\"> hsl.<b>brighter</b>([<i>k</i>])</h6> <p>Returns a brighter copy of this color. The lightness channel is multiplied by 0.7 ^ <em>-k</em>. If the gamma value <em>k</em> is omitted, it defaults to 1.</p> <h6 id=\"hsl_darker\"> hsl.<b>darker</b>([<i>k</i>])</h6> <p>Returns a darker copy of this color. The lightness channel is multiplied by 0.7 ^ <em>k</em>. If the gamma value <em>k</em> is omitted, it defaults to 1.</p> <h6 id=\"hsl_rgb\"> hsl.<b>rgb</b>()</h6> <p>Returns the equivalent color in RGB space; see <a href=\"#d3_rgb\">d3.rgb</a> for details on the returned object. The conversion from HSL to RGB is described in <a href=\"http://www.w3.org/TR/css3-color/#hsl-color\">CSS3 Color Module Level 3</a>.</p> <h6 id=\"hsl_toString\"> hsl.<b>toString</b>()</h6> <p>Converts this HSL color to an RGB hexadecimal string, such as \"#f7eaba\".</p> <h2 id=\"hcl\"> HCL</h2> <h6 id=\"d3_hcl\"> d3.<b>hcl</b>(<i>h</i>, <i>c</i>, <i>l</i>)</h6> <p>Constructs a new HCL color with the specified hue <em>h</em>, chroma <em>c</em>, and luminance <em>l</em>. The hue must be a number in the range [0,360]. The chroma and luminance must be in the range <a href=\"https://github.com/mbostock/d3/wiki/not%20percentages\">0,1</a>. These values are available as the <code>h</code>, <code>c</code>, and <code>l</code> attributes of the returned object.</p> <h6 id=\"#d3_hcl\"> d3.<b>hcl</b>(<i>color</i>)</h6> <p>Constructs a new HCL color by parsing the specified <em>color</em> string. If <em>color</em> is not a string, it is coerced to a string; thus, this constructor can also be used to create a copy of an existing color, or force the conversion of a <a href=\"#d3_rgb\">d3.rgb</a> color to HCL. The color string may be in a variety of formats:</p> <ul> <li>rgb decimal - \"rgb(255,255,255)\"</li> <li>hsl decimal - \"hsl(120,50%,20%)\"</li> <li>rgb hexadecimal - \"#ffeeaa\"</li> <li>rgb shorthand hexadecimal - \"#fea\"</li> <li>named - \"red\", \"white\", \"blue\"</li> </ul> <p>The resulting color is stored as hue in the range [0,360], and chroma and luminance values in the range [0,1]. These values are available as the h, c and l attributes of the returned object. The list of supported <a href=\"http://www.w3.org/TR/SVG/types.html#ColorKeywords\">named colors</a> is specified by CSS.</p> <h6 id=\"hcl_brighter\"> hcl.<b>brighter</b>([<i>k</i>])</h6> <p>Returns a brighter copy of this color. The luminance channel is multiplied by 18 * <em>k</em>. If the gamma value <em>k</em> is omitted, it defaults to 1. The greatest brightness possible is 100.</p> <h6 id=\"hcl_darker\"> hcl.<b>darker</b>([<i>k</i>])</h6> <p>Returns a darker copy of this color. The luminance channel is multiplied by -18 * <em>k</em>. If the gamma value <em>k</em> is omitted, it defaults to 1. The lowest darkness possible is 0.</p> <h6 id=\"hcl_rgb\"> hcl.<b>rgb</b>()</h6> <p>Returns the equivalent color in RGB space; see <a href=\"#d3_rgb\">d3.rgb</a> for details on the returned object.</p> <h6 id=\"hcl_toString\"> hcl.<b>toString</b>()</h6> <p>Converts this HCL color to an RGB hexadecimal string, such as \"#f7eaba\".</p> <h2 id=\"lab\"> L*a*b*</h2> <h6 id=\"d3_lab\"> d3.<b>lab</b>(<i>l</i>, <i>a</i>, <i>b</i>)</h6> <p>Constructs a new L*a*b* color with the specified lightness <em>l</em>, <em>a</em>, and <em>b</em>; with a and b being the color-opponent dimensions. The lightness must be in a range from [0,100]. These values are available as the <code>l</code>, <code>a</code>, and <code>b</code> attributes of the returned object.</p> <h6 id=\"#d3_lab\"> d3.<b>lab</b>(<i>color</i>)</h6> <p>Constructs a new L*a*b* color by parsing the specified <em>color</em> string. If <em>color</em> is not a string, it is coerced to a string; thus, this constructor can also be used to create a copy of an existing color, or force the conversion of a <a href=\"#d3_rgb\">d3.rgb</a> color to L*a*b*. The color string may be in a variety of formats:</p> <ul> <li>rgb decimal - \"rgb(255,255,255)\"</li> <li>hsl decimal - \"hsl(120,50%,20%)\"</li> <li>rgb hexadecimal - \"#ffeeaa\"</li> <li>rgb shorthand hexadecimal - \"#fea\"</li> <li>named - \"red\", \"white\", \"blue\"</li> </ul> <p>The resulting color is stored as lightness in the range [0,100], and corresponding a and b values. These values are available as the l, a, and b attributes of the returned object. The list of supported <a href=\"http://www.w3.org/TR/SVG/types.html#ColorKeywords\">named colors</a> is specified by CSS. If the color is specified in RGB space, it is converted to L*a*b* by first being converted to XYZ space, then to RGB space.</p> <h6 id=\"lab_brighter\"> lab.<b>brighter</b>([<i>k</i>])</h6> <p>Returns a brighter copy of this color. The lightness channel is multiplied by 18 * <em>k</em>. If the gamma value <em>k</em> is omitted, it defaults to 1. The greatest brightness possible is 100.</p> <h6 id=\"lab_darker\"> lab.<b>darker</b>([<i>k</i>])</h6> <p>Returns a darker copy of this color. The lightness channel is multiplied by -18 * <em>k</em>. If the gamma value <em>k</em> is omitted, it defaults to 1. The lowest darkness possible is 0.</p> <h6 id=\"lab_rgb\"> lab.<b>rgb</b>()</h6> <p>Returns the equivalent color in RGB space; see <a href=\"#d3_rgb\">d3.rgb</a> for details on the returned object.</p> <h6 id=\"lab_toString\"> lab.<b>toString</b>()</h6> <p>Converts this L*a*b* color to an RGB hexadecimal string, such as \"#f7eaba\".</p> <h2 id=\"color\"> Color</h2> <p>A d3.color base type is provided if you want to extend D3 with additional color spaces. This type enables automatic RGB interpolation by <a href=\"transitions#d3_interpolate\">d3.interpolate</a> (detected via <code>instanceof d3.color</code>).</p> <h6 id=\"d3_color\"> d3.<b>color</b>()</h6> <p>The base constructor for color types.</p> <h6 id=\"rgb\"> color.<b>rgb</b>()</h6> <p>Returns the <a href=\"#d3_rgb\">RGB equivalent</a> of this color. Must be implemented by all color spaces.</p> <h6 id=\"toString\"> color.<b>toString</b>()</h6> <p>Converts an RGB hexadecimal string representing this color, such as \"#f7eaba\".</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Colors\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Colors</a>\n  </p>\n</div>\n","csv":"<h1 class=\"gh-header-title instapaper_title\">CSV</h1>   <p>D3 provides built-in support for parsing <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">comma-separated values</a>, tab-separated values and arbitrary delimiter-separated values. These tabular formats are popular with spreadsheet programs such as Microsoft Excel. Tabular formats are often more space-efficient than JSON, which can improve loading times for large datasets.</p> <h6 id=\"csv\"> d3.<b>csv</b>(<i>url</i>[[, <i>accessor</i>], <i>callback</i>])</h6> <p>Issues an HTTP GET request for the comma-separated values (CSV) file at the specified <em>url</em>. The file contents are assumed to be <a href=\"http://tools.ietf.org/html/rfc4180\">RFC4180-compliant</a>. The mime type of the request will be \"text/csv\". The request is processed asynchronously, such that this method returns immediately after opening the request. When the CSV data is available, the specified <em>callback</em> will be invoked with the <a href=\"csv#parse\">parsed rows</a> as the argument. If an error occurs, the callback function will instead be invoked with null. An optional <i>accessor</i> function may be specified, which is then passed to <a href=\"#parse\">d3.csv.parse</a>; the <i>accessor</i> may also be specified by using the return request object’s row function. For example:</p> <div class=\"highlight highlight-source-js\"><pre>d3.csv(\"path/to/file.csv\")\n    .row(function(d) { return {key: d.key, value: +d.value}; })\n    .get(function(error, rows) { console.log(rows); });</pre></div> <p>See the <a href=\"http://bl.ocks.org/mbostock/4060606\">unemployment choropleth</a> for an example.</p> <h6 id=\"parse\"> d3.csv.<b>parse</b>(<i>string</i>[, <i>accessor</i>])</h6> <p>Parses the specified <em>string</em>, which is the contents of a CSV file, returning an array of objects representing the parsed rows. The string is assumed to be <a href=\"http://tools.ietf.org/html/rfc4180\">RFC4180-compliant</a>. Unlike the <a href=\"csv#parseRows\">parseRows</a> method, this method requires that the first line of the CSV file contains a comma-separated list of column names; these column names become the attributes on the returned objects. For example, consider the following CSV file:</p> <pre><code>Year,Make,Model,Length\n1997,Ford,E350,2.34\n2000,Mercury,Cougar,2.38\n</code></pre> <p>The resulting JavaScript array is:</p> <div class=\"highlight highlight-source-js\"><pre>[\n  {\"Year\": \"1997\", \"Make\": \"Ford\", \"Model\": \"E350\", \"Length\": \"2.34\"},\n  {\"Year\": \"2000\", \"Make\": \"Mercury\", \"Model\": \"Cougar\", \"Length\": \"2.38\"}\n]</pre></div> <p>Note that the values themselves are always strings; they will not be automatically converted to numbers. JavaScript may coerce strings to numbers for you automatically (for example, using the + operator). By specifying an <i>accessor</i> function, you can convert the strings to numbers or other specific types, such as dates:</p> <div class=\"highlight highlight-source-js\"><pre>d3.csv(\"example.csv\", function(d) {\n  return {\n    year: new Date(+d.Year, 0, 1), // convert \"Year\" column to Date\n    make: d.Make,\n    model: d.Model,\n    length: +d.Length // convert \"Length\" column to number\n  };\n}, function(error, rows) {\n  console.log(rows);\n});</pre></div> <p>Using + rather than <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt\">parseInt</a> or <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat</a> is typically faster, though more restrictive. For example, \"30px\" when coerced using + returns NaN, while parseInt and parseFloat return 30.</p> <h6 id=\"parseRows\"> d3.csv.<b>parseRows</b>(<i>string</i>[, <i>accessor</i>])</h6> <p>Parses the specified <em>string</em>, which is the contents of a CSV file, returning an array of arrays representing the parsed rows. The string is assumed to be <a href=\"http://tools.ietf.org/html/rfc4180\">RFC4180-compliant</a>. Unlike the <a href=\"csv#parse\">parse</a> method, this method treats the header line as a standard row, and should be used whenever the CSV file does not contain a header. Each row is represented as an array rather than an object. Rows may have variable length. For example, consider the following CSV file:</p> <pre><code>1997,Ford,E350,2.34\n2000,Mercury,Cougar,2.38\n</code></pre> <p>The resulting JavaScript array is:</p> <div class=\"highlight highlight-source-js\"><pre>[\n  [\"1997\", \"Ford\", \"E350\", \"2.34\"],\n  [\"2000\", \"Mercury\", \"Cougar\", \"2.38\"]\n]</pre></div> <p>Note that the values themselves are always strings; they will not be automatically converted to numbers. See <a href=\"csv#parse\">parse</a> for details.</p> <p>An optional <em>accessor</em> function may be specified as the second argument. This function is invoked for each row in the CSV file, being passed the current row and index as two arguments. The return value of the function replaces the element in the returned array of rows; if the function returns null, the row is stripped from the returned array of rows. In effect, the accessor is similar to applying a <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/map\">map</a> and <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/filter\">filter</a> operator to the returned rows. The accessor function is used by <a href=\"csv#parse\">parse</a> to convert each row to an object with named attributes.</p> <h6 id=\"format\"> d3.csv.<b>format</b>(<i>rows</i>)</h6> <p>Converts the specified array of <em>rows</em> into comma-separated values format, returning a string. This operation is the reverse of <a href=\"csv#parse\">parse</a>. Each row will be separated by a newline (\\n), and each column within each row will be separated by a comma (,). Values that contain either commas, double-quotes (\") or newlines will be escaped using double-quotes.</p> <p>Each row should be an object, and all object properties will be converted into fields. For greater control over which properties are converted, convert the rows into arrays containing only the properties that should be converted and use <a href=\"csv#formatRows\">formatRows</a>.</p> <h6 id=\"formatRows\"> d3.csv.<b>formatRows</b>(<i>rows</i>)</h6> <p>Converts the specified array of <em>rows</em> into comma-separated values format, returning a string. This operation is the reverse of <a href=\"csv#parseRows\">parseRows</a>. Each row will be separated by a newline (\\n), and each column within each row will be separated by a comma (,). Values that contain either commas, double-quotes (\") or newlines will be escaped using double-quotes.</p> <h2 id=\"tsv\"> TSV</h2> <p>Tab-separated values are equivalent to comma-separated values, except the tab character is used as a delimiter rather than the comma.</p> <h6 id=\"tsv\"> d3.<b>tsv</b>(<i>url</i>[, <i>accessor</i>][, <i>callback</i>])</h6> <p>Equivalent to <a href=\"#csv\">d3.csv</a>, but for tab-separated values.</p> <h6 id=\"tsv_parse\"> d3.tsv.<b>parse</b>(<i>string</i>[, <i>accessor</i>])</h6> <p>Equivalent to <a href=\"#parse\">csv.parse</a>, but for tab-separated values.</p> <h6 id=\"tsv_parseRows\"> d3.tsv.<b>parseRows</b>(<i>string</i>[, <i>accessor</i>])</h6> <p>Equivalent to <a href=\"#parseRows\">csv.parseRows</a>, but for tab-separated values.</p> <h6 id=\"tsv_format\"> d3.tsv.<b>format</b>(<i>rows</i>)</h6> <p>Equivalent to <a href=\"#format\">csv.format</a>, but for tab-separated values.</p> <h6 id=\"tsv_formatRows\"> d3.tsv.<b>formatRows</b>(<i>rows</i>)</h6> <p>Equivalent to <a href=\"#formatRows\">csv.formatRows</a>, but for tab-separated values.</p> <h2 id=\"arbitrary-delimiters\"> Arbitrary Delimiters</h2> <h6 id=\"dsv\"> d3.<b>dsv</b>(<i>delimiter</i>, <i>mimeType</i>)</h6> <p>Constructs a new parser for the given delimiter and mime type. For example, to parse values separated by \"|\", the vertical bar character, use:</p> <div class=\"highlight highlight-source-js\"><pre>var dsv = d3.dsv(\"|\", \"text/plain\");</pre></div> <h6 id=\"_dsv\"> <b>dsv</b>(<i>url</i>[, <i>accessor</i>][, <i>callback</i>])</h6> <p>Equivalent to <a href=\"#csv\">d3.csv</a>, but for delimiter-separated values.</p> <h6 id=\"dsv_parse\"> dsv.<b>parse</b>(<i>string</i>[, <i>accessor</i>])</h6> <p>Equivalent to <a href=\"#parse\">csv.parse</a>, but for delimiter-separated values.</p> <h6 id=\"dsv_parseRows\"> dsv.<b>parseRows</b>(<i>string</i>[, <i>accessor</i>])</h6> <p>Equivalent to <a href=\"#parseRows\">csv.parseRows</a>, but for delimiter-separated values.</p> <h6 id=\"dsv_format\"> dsv.<b>format</b>(<i>rows</i>)</h6> <p>Equivalent to <a href=\"#format\">csv.format</a>, but for delimiter-separated values.</p> <h6 id=\"dsv_formatRows\"> dsv.<b>formatRows</b>(<i>rows</i>)</h6> <p>Equivalent to <a href=\"#formatRows\">csv.formatRows</a>, but for delimiter-separated values.</p> <h3> Content Security Policy</h3> <p>If a <a href=\"http://www.w3.org/TR/CSP/\">content security policy</a> is in place, note that <a href=\"#csv_parse\">csv.parse</a>, <a href=\"#tsv_parse\">tsv.parse</a> and <a href=\"#dsv_parse\">dsv.parse</a> require <code>unsafe-eval</code> in the <code>script-src</code> directive, due to their (safe) use of dynamic code generation for fast parsing. This also applies to the default constructors <a href=\"#csv\">d3.csv</a>, <a href=\"#tsv\">d3.tsv</a> and <a href=\"#_dsv\">dsv</a>, which issue an HTTP GET request for the resource and then parse the response to objects using <a href=\"#csv_parse\">csv.parse</a>, <a href=\"#tsv_parse\">tsv.parse</a> or <a href=\"#dsv_parse\">dsv.parse</a>.</p> <p>If <code>unsafe-eval</code> cannot be used, then <a href=\"#csv_parseRows\">csv.parseRows</a>, <a href=\"#tsv_parseRows\">tsv.parseRows</a> or <a href=\"#dsv_parseRows\">dsv.parseRows</a> can be used as a workaround, in combination with <a href=\"requests#d3_text\">d3.text</a> to retrieve the resource if necessary.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/CSV\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/CSV</a>\n  </p>\n</div>\n","geo-paths":"<h1 class=\"gh-header-title instapaper_title\">Geo Paths</h1>   <p>For cartographic visualizations, D3 supports a handful of components for displaying and manipulating <strong>geographic data</strong>. These components use the <a href=\"http://geojson.org/geojson-spec.html\">GeoJSON format</a>—a standard way of representing geographic features in JavaScript. (See also the <a href=\"https://github.com/mbostock/topojson\">TopoJSON format</a>, an extension of GeoJSON that is significantly more compact.) To convert shapefiles to GeoJSON, use ogr2ogr, part of the <a href=\"http://www.gdal.org/\">GDAL package</a>.</p> <p><a href=\"http://bl.ocks.org/mbostock/4060606\"><img src=\"https://camo.githubusercontent.com/becc832b7e4558a99c754c8b13cb650a40e79367/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343036303630362f7468756d626e61696c2e706e67\" height=\"120\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4060606/thumbnail.png\"></a></p> <p>Some other tools you may be interested in:</p> <ul> <li> <a href=\"https://github.com/mbostock/topojson\">TopoJSON</a> - shapefile simplification, topology construction and GeoJSON compression.</li> <li> <a href=\"https://github.com/Toblerity/Shapely\">Shapely</a> - manipulation of planar geometry objects.</li> <li> <a href=\"http://colorbrewer2.org\">ColorBrewer</a> - color scales for maps.</li> <li> <a href=\"http://postgis.refractions.net/\">PostGIS</a> - a geospatial database.</li> </ul> <p>The primary mechanism for displaying geographic data is <a href=\"#path\">d3.geo.path</a>. This class is similar to <a href=\"svg-shapes#line\">d3.svg.line</a> and the other SVG shape generators: given a geometry or feature object, it generates the path data string suitable for the \"d\" attribute of an SVG path element. The d3.geo.path class can <a href=\"http://bl.ocks.org/mbostock/3783604\">render directly to Canvas</a>, which may offer better performance when animating the projection.</p> <h6 id=\"path\"> d3.geo.<b>path</b>()</h6> <p>Creates a new geographic path generator with the default settings: the <a href=\"geo-projections#albersUsa\">albersUsa</a> projection and a point radius of 4.5 pixels.</p> <h6 id=\"_path\"> <b>path</b>(<i>feature</i>[, <i>index</i>])</h6> <p>Returns the path data string for the given <em>feature</em>, which may be any GeoJSON feature or geometry object:</p> <ul> <li>Point - a single position.</li> <li>MultiPoint - an array of positions.</li> <li>LineString - an array of positions forming a continuous line.</li> <li>MultiLineString - an array of arrays of positions forming several lines.</li> <li>Polygon - an array of arrays of positions forming a polygon (possibly with holes).</li> <li>MultiPolygon - a multidimensional array of positions forming multiple polygons.</li> <li>GeometryCollection - an array of geometry objects.</li> <li>Feature - a feature containing one of the above geometry objects.</li> <li>FeatureCollection - an array of feature objects.</li> </ul> <p>The type \"Sphere\" is also supported, which is useful for rendering the outline of the globe. A sphere has no coordinates. An optional <em>index</em> may be specified, which is passed along to the <a href=\"geo-paths#pointRadius\">pointRadius</a> accessor; the <em>index</em> is passed automatically when the path generator is invoked by <a href=\"selections#attr\">selection.attr</a>.</p> <p><strong>Important:</strong> the <em>inside</em> of a polygon is all points that the polygon winds around in a clockwise order. If your GeoJSON input has polygons in the wrong winding order, you must reverse them, say via <a href=\"http://www.postgis.org/docs/ST_ForceRHR.html\">ST_ForceRHR</a>; you can also convert your GeoJSON to <a href=\"https://github.com/mbostock/topojson\">TopoJSON</a>, and this will happen automatically.</p> <p>To display multiple features, you can place them in a single feature collection and a single path element:</p> <div class=\"highlight highlight-source-js\"><pre>svg.append(\"path\")\n    .datum({type: \"FeatureCollection\", features: features})\n    .attr(\"d\", d3.geo.path());</pre></div> <p>Alternatively, you can create multiple distinct path elements:</p> <div class=\"highlight highlight-source-js\"><pre>svg.selectAll(\"path\")\n    .data(features)\n  .enter().append(\"path\")\n    .attr(\"d\", d3.geo.path());</pre></div> <p>Using distinct path elements is typically slower than a single path element for a collection. However, distinct path elements are preferred if you want interact with features separately (e.g., using CSS :hover or click events).</p> <h6 id=\"path_projection\"> path.<b>projection</b>([<i>projection</i>])</h6> <p>If <em>projection</em> is specified, sets the projection used by the path generator to the specified projection function. If <em>projection</em> is not specified, returns the current projection, which defaults to <a href=\"geo-projections#albersUsa\">albersUsa</a>. The projection is typically one of D3's built-in <a href=\"geo-projections\">geographic projections</a>; however, any function can be used. A projection function takes a two-element array of numbers representing the coordinates of a location, [<i>longitude</i>, <i>latitude</i>], and returns a similar two-element array of numbers representing the projected pixel position [<i>x</i>, <i>y</i>]. For example, a rudimentary spherical Mercator projection:</p> <div class=\"highlight highlight-source-js\"><pre>function mercator(coordinates) {\n  return [\n    coordinates[0] / 360,\n    (-180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + coordinates[1] * Math.PI / 360))) / 360\n  ];\n}</pre></div> <p>Internally, this point projection function is wrapped with a fallback <a href=\"geo-streams\">stream transformation</a> that performs <a href=\"http://bl.ocks.org/mbostock/3795544\">adaptive resampling</a>. However, the fallback stream does not perform any clipping or cutting.</p> <p>For more control over the stream transformation, the <em>projection</em> may be specified as an object that implements the <em>stream</em> method. (<a href=\"http://bl.ocks.org/mbostock/5663666\">See example.</a>) The stream method takes an output stream as input, and returns a wrapped stream that projects the input geometry; in other words, it implements <a href=\"geo-projections#stream\">projection.stream</a>.</p> <p>If <em>projection</em> is null, the path uses the identity transformation, where the input geometry is not projected and is instead rendered directly in raw coordinates. This can be useful for fast rendering of already-projected geometry, or for fast rendering of the equirectangular projection.</p> <h6 id=\"path_context\"> path.<b>context</b>([<i>context</i>])</h6> <p>If <em>context</em> is specified, sets the render context and returns the path generator. If the context is null, then the path generator will return an SVG path string when <a href=\"#_path\">invoked</a> on a given feature. If the context is non-null, the path generator will instead call methods on the specified context to render geometry. The context must implement the following methods:</p> <ul> <li>beginPath()</li> <li>moveTo(x, y)</li> <li>lineTo(x, y)</li> <li>arc(x, y, radius, startAngle, endAngle)</li> <li>closePath()</li> </ul> <p>Note that this is a subset of the canvas element’s <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#2dcontext\">2D rendering context</a>, and thus a canvas context can be passed to the path generator, in which case geometry will be rendered <a href=\"http://bl.ocks.org/mbostock/3783604\">directly to the canvas</a>. If <em>context</em> is not specified, returns the current render context, which defaults to null.</p> <h6 id=\"path_area\"> path.<b>area</b>(<i>feature</i>)</h6> <p>Computes the projected area (in square pixels) for the specified <em>feature</em>. Point, MultiPoint, LineString and MultiLineString features have zero area. For Polygon and MultiPolygon features, this method first computes the area of the exterior ring, and then subtracts the area of any interior holes. This method observes any clipping and resampling performed by the projection stream.</p> <h6 id=\"path_centroid\"> path.<b>centroid</b>(<i>feature</i>)</h6> <p>Computes the projected centroid (in pixels) for the specified <em>feature</em>. This is handy for, say, labeling state or county boundaries, or displaying a symbol map. The <a href=\"http://mbostock.github.com/d3/ex/cartogram.html\">noncontiguous cartogram</a> example scales each state around its centroid. This method observes any clipping and resampling performed by the projection stream.</p> <h6 id=\"path_bounds\"> path.<b>bounds</b>(<i>feature</i>)</h6> <p>Computes the projected bounding box (in pixels) for the specified <em>feature</em>. The bounding box is represented by a two-dimensional array: [[<i>left</i>, <i>top</i>], [<i>right</i>, <i>bottom</i>]] , different from GIS <a href=\"geo-paths#bounds\">geo.bounds</a>' convention. This is handy for, say, zooming in to a particular feature. This method observes any clipping and resampling performed by the projection stream. </p> <h6 id=\"path_pointRadius\"> path.<b>pointRadius</b>([<i>radius</i>])</h6> <p>If <em>radius</em> is specified, sets the radius used to display Point and MultiPoint features to the specified number. If <em>radius</em> is not specified, returns the current radius. While the radius is commonly specified as a number constant, it may also be specified as a function which is computed per feature, being passed the <em>feature</em> and <em>index</em> arguments from the <a href=\"geo-paths#_path\">path</a> function. For example, if your GeoJSON data has additional properties, you might access those properties inside the radius function to vary the point size; alternatively, you could <a href=\"svg-shapes#symbol\">d3.svg.symbol</a> and a <a href=\"geo-projections\">projection</a> for more control over the display.</p> <h2 id=\"shape-generators\"> Shape Generators</h2> <p>Note: to generate a great arc in D3, simply pass a LineString-type geometry object to d3.geo.path. D3’s projections use great-arc interpolation for intermediate points (with <a href=\"http://bl.ocks.org/mbostock/3795544\">adaptive resampling</a>), so there’s no need to use a shape generator to create great arcs.</p> <h6 id=\"graticule\"> d3.geo.<b>graticule</b>\n</h6> <p>Constructs a feature generator for creating graticules.</p> <h6 id=\"_graticule\"> <b>graticule</b>()</h6> <p>Returns a MultiLineString geometry object representing all meridians and parallels for this graticule.</p> <h6 id=\"graticule_lines\"> graticule.<b>lines</b>()</h6> <p>Returns an array of LineString geometry objects, one for each meridian or parallel for this graticule.</p> <h6 id=\"graticule_outline\"> graticule.<b>outline</b>()</h6> <p>Returns a Polygon geometry object representing the outline of this graticule, i.e. along the meridians and parallels defining its extent.</p> <h6 id=\"graticule_extent\"> graticule.<b>extent</b>(<i>extent</i>)</h6> <p>If <em>extent</em> is specified, sets the major and minor extents of this graticule. If <em>extent</em> is not specified, returns the current minor extent, which defaults to ⟨⟨-180°, -80° - ε⟩, ⟨180°, 80° + ε⟩⟩.</p> <h6 id=\"graticule_majorExtent\"> graticule.<b>majorExtent</b>(<i>extent</i>)</h6> <p>If <em>extent</em> is specified, sets the major extent of this graticule. If <em>extent</em> is not specified, returns the current major extent, which defaults to ⟨⟨-180°, -90° + ε⟩, ⟨180°, 90° - ε⟩⟩.</p> <h6 id=\"graticule_minorExtent\"> graticule.<b>minorExtent</b>(<i>extent</i>)</h6> <p>If <em>extent</em> is specified, sets the minor extent of this graticule. If <em>extent</em> is not specified, returns the current minor extent, which defaults to ⟨⟨-180°, -80° - ε⟩, ⟨180°, 80° + ε⟩⟩.</p> <h6 id=\"graticule_step\"> graticule.<b>step</b>(<i>step</i>)</h6> <p>If <em>step</em> is specified, sets the major and minor step for this graticule. If <em>step</em> is not specified, returns the current minor step, which defaults to ⟨10°, 10°⟩.</p> <h6 id=\"graticule_majorStep\"> graticule.<b>majorStep</b>(<i>step</i>)</h6> <p>If <em>step</em> is specified, sets the major step for this graticule. If <em>step</em> is not specified, returns the current major step, which defaults to ⟨90°, 360°⟩.</p> <h6 id=\"graticule_minorStep\"> graticule.<b>minorStep</b>(<i>step</i>)</h6> <p>If <em>step</em> is specified, sets the minor step for this graticule. If <em>step</em> is not specified, returns the current minor step, which defaults to ⟨10°, 10°⟩.</p> <h6 id=\"graticule_precision\"> graticule.<b>precision</b>(<i>precision</i>)</h6> <p>If <em>precision</em> is specified, sets the precision for this graticule, in degrees. If <em>precision</em> is not specified, returns the current precision, which defaults to 2.5°.</p> <h6 id=\"circle\"> d3.geo.<b>circle</b>\n</h6> <p>Constructs a feature generator for creating circles centered at a given geographic location with a given radius in degrees.</p> <h6 id=\"_circle\"> <b>circle</b>(<i>arguments…</i>)</h6> <p>Returns a GeoJSON Polygon approximating a circle. The origin accessor specifies how to determine the origin for the given <em>arguments</em>; the default accessor uses the constant ⟨0°,0°⟩.</p> <h6 id=\"circle_origin\"> circle.<b>origin</b>([<i>origin</i>])</h6> <p>If <em>origin</em> is specified, sets the circle origin. A two-element coordinate array should be specified, or an accessor function. If <em>origin</em> is not specified, returns the current origin, which defaults to ⟨0°,0°⟩.</p> <h6 id=\"circle_angle\"> circle.<b>angle</b>([<i>angle</i>])</h6> <p>If <em>angle</em> is specified, sets the angular radius of the circle in degrees. If <em>angle</em> is not specified, returns the current radius, which defaults to 90°.</p> <h6 id=\"circle_precision\"> circle.<b>precision</b>([<i>precision</i>])</h6> <p>If <em>precision</em> is specified, sets the precision of the interpolated circle segments in degrees. These interpolated segments are inserted when a feature is clipped by the circle. If <em>precision</em> is not specified, returns the current precision, which defaults to 6°.</p> <h2 id=\"spherical-math\"> Spherical Math</h2> <h6 id=\"area\"> d3.geo.<b>area</b>(<i>feature</i>)</h6> <p>Returns the spherical area of the specified <em>feature</em> in <a href=\"http://mathworld.wolfram.com/Steradian.html\">steradians</a>. See also <a href=\"#path_area\">path.area</a>, which computes the projected area on the Cartesian plane.</p> <h6 id=\"centroid\"> d3.geo.<b>centroid</b>(<i>feature</i>)</h6> <p>Returns the spherical centroid of the specified <em>feature</em>. See also <a href=\"#path_centroid\">path.centroid</a>, which computes the projected centroid on the Cartesian plane.</p> <h6 id=\"bounds\"> d3.geo.<b>bounds</b>(<i>feature</i>)</h6> <p>Returns the spherical bounding box for the specified <em>feature</em>. The bounding box is represented by a two-dimensional array: [​[<i>left</i>, <i>bottom</i>], [<i>right</i>, <i>top</i>]​], where <em>left</em> is the minimum longitude, <em>bottom</em> is the minimum latitude, <em>right</em> is maximum longitude, and <em>top</em> is the maximum latitude. See also <a href=\"#path_bounds\">path.bounds</a>, which computes the projected bounding box on the Cartesian plane.</p> <h6 id=\"distance\"> d3.geo.<b>distance</b>(<i>a</i>, <i>b</i>)</h6> <p>Returns the great-arc distance in radians between the two points <i>a</i> and <i>b</i>. Each point is specified as an array [<i>longitude</i>, <i>latitude</i>], with coordinates expressed in decimal degrees.</p> <h6 id=\"length\"> d3.geo.<b>length</b>(<i>feature</i>)</h6> <p>Returns the great-arc length of the specified <em>feature</em> in <a href=\"http://mathworld.wolfram.com/Radian.html\">radians</a>. For polygons, returns the perimeter of the exterior ring plus that of any interior rings.</p> <h6 id=\"interpolate\"> d3.geo.<b>interpolate</b>(<i>a</i>, <i>b</i>)</h6> <p>Returns an interpolator given the two locations <em>a</em> and <em>b</em>. Each location must be represented as a two-element array of [<i>longitude</i>, <i>latitude</i>]. The returned interpolator is a function which takes a single parameter <em>t</em> as input, where <em>t</em> ranges from 0 to 1. A value of 0 returns the location <em>a</em>, while a value of 1 returns the location <em>b</em>. Intermediate values interpolate from <em>a</em> to <em>b</em> along the spanning great arc.</p> <h6 id=\"rotation\"> d3.geo.<b>rotation</b>(<i>rotate</i>)</h6> <p>Specifies a rotation in the form of an array, [λ, φ, γ]. The elements of the array are angles in degrees, and specify a rotation in the following order: longitudinal, latitudinal and about the origin. If the last element of the array, γ, is omitted, this defaults to 0. Returns a function, which rotates a given location as described below.</p> <h6 id=\"_rotation\"> <b>rotation</b>(<i>location</i>)</h6> <p>Rotates a given location according to the angles specified for this rotation, in the order described above. A location is specified as an array [<i>longitude</i>, <i>latitude</i>], with coordinates expressed in degrees. Returns a new array representing the rotated location.</p> <h6 id=\"rotation_invert\"> rotation.<b>invert</b>(<i>location</i>)</h6> <p>Rotates a given location according to the angles specified for this rotation, but with the order described above reversed. A location is specified as an array [<i>longitude</i>, <i>latitude</i>], with coordinates expressed in degrees. Returns a new array representing the rotated location.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Geo-Paths\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Geo-Paths</a>\n  </p>\n</div>\n","formatting":"<h1 class=\"gh-header-title instapaper_title\">Formatting</h1>   <p>Formatting numbers is one of those things you don't normally think about until an ugly \"0.30000000000000004\" appears on your axis labels. Also, maybe you want to group thousands to improve readability, and use fixed precision, such as \"$1,240.10\". Or, maybe you want to display only the significant digits of a particular number. D3 makes this easy using a standard <strong>number format</strong>. For example, to create a function that zero-fills to four digits, say:</p> <div class=\"highlight highlight-source-js\"><pre>var zero = d3.format(\"04d\");</pre></div> <p>Now you can conveniently format numbers:</p> <div class=\"highlight highlight-source-js\"><pre>zero(2); // \"0002\"\nzero(123); // \"0123\"</pre></div> <p>In addition to numbers, D3 also supports formatting and parsing <a class=\"internal present\" href=\"time-formatting\">dates</a>, and <a class=\"internal present\" href=\"csv\">comma-separated values</a>.</p> <h2 id=\"numbers\"> Numbers</h2> <h6 id=\"d3_format\"> d3.<b>format</b>(<i>specifier</i>)</h6> <p>Returns a new format function with the given string <em>specifier</em>. (Equivalent to <a href=\"localization#locale_numberFormat\">locale.numberFormat</a> for the default U.S. English locale.) A format function takes a number as the only argument, and returns a string representing the formatted number. The format specifier is modeled after Python 3.1's built-in <a href=\"http://docs.python.org/release/3.1.3/library/string.html#formatspec\">format specification mini-language</a>. The general form of a specifier is:</p> <pre><code> [​[fill]align][sign][symbol][0][width][,][.precision][type]\n</code></pre> <p>The <em>fill</em> can be any character other than \"{\" or \"}\". The presence of a fill character is signaled by the character following it, which must be one of the <em>align</em> options.</p> <p>The <em>align</em> can be:</p> <ul> <li>(\"&lt;\") Forces the field to be left-aligned within the available space. </li> <li>(\"&gt;\") Forces the field to be right-aligned within the available space. (This is the default).</li> <li>(\"^\") Forces the field to be centered within the available space.</li> </ul> <p>The <em>sign</em> can be:</p> <ul> <li>plus (\"+\") - a sign should be used for both positive and negative numbers.</li> <li>minus (\"-\") - a sign should be used only for negative numbers. (This is the default.)</li> <li>space (\" \") - a leading space should be used on positive numbers, and a minus sign on negative numbers.</li> </ul> <p>The <em>symbol</em> can be:</p> <ul> <li>currency (\"$\") - indicates that a currency symbol should be prefixed (or suffixed) per the locale. See <a href=\"localization#locale\">Localization</a> for more information on how to set the locale currency symbol. </li> <li>base (\"#\") - for binary, octal, or hexadecimal output, prefix by \"0b\", \"0o\", or \"0x\", respectively.</li> </ul> <p>The \"0\" option enables zero-padding.</p> <p>The <em>width</em> defines the minimum field width. If not specified, then the width will be determined by the content.</p> <p>The <em>comma</em> (\",\") option enables the use of a comma for a thousands separator.</p> <p>The <em>precision</em> indicates how many digits should be displayed after the decimal point for a value formatted with types \"f\" and \"%\", or before and after the decimal point for a value formatted with types \"g\", \"r\" and \"p\".</p> <p>The available <em>type</em> values are:</p> <ul> <li>exponent (\"e\") - use <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number/toExponential\">Number.toExponential</a>.</li> <li>general (\"g\") - use <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number/toPrecision\">Number.toPrecision</a>.</li> <li>fixed (\"f\") - use <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number/toFixed\">Number.toFixed</a>.</li> <li>integer (\"d\") - use <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number/toString\">Number.toString</a>, but ignore any non-integer values.</li> <li>rounded (\"r\") - round to <em>precision</em> significant digits, padding with zeroes where necessary in similar fashion to fixed (\"f\"). If no <em>precision</em> is specified, falls back to general notation.</li> <li>percentage (\"%\") - like fixed, but multiply by 100 and suffix with \"%\".</li> <li>rounded percentage (\"p\") - like rounded, but multiply by 100 and suffix with \"%\".</li> <li>binary (\"b\") - outputs the number in base 2.</li> <li>octal (\"o\") - outputs the number in base 8.</li> <li>hexadecimal (\"x\") - outputs the number in base 16, using lower-case letters for the digits above 9.</li> <li>hexadecimal (\"X\") - outputs the number in base 16, using upper-case letters for the digits above 9.</li> <li>character (\"c\") - converts the integer to the corresponding unicode character before printing.</li> <li>SI-prefix (\"s\") - like rounded, but with a unit suffixed such as \"9.5M\" for mega, or \"1.00µ\" for micro.</li> </ul> <p>The type \"n\" is also supported as shorthand for \",g\". </p> <h6 id=\"d3_formatPrefix\"> d3.<b>formatPrefix</b>(<i>value</i>[, <i>precision</i>])</h6> <p>Returns the <a href=\"http://en.wikipedia.org/wiki/Metric_prefix\">SI prefix</a> for the specified <em>value</em>. If an optional <em>precision</em> is specified, the <em>value</em> is rounded accordingly using <a href=\"#d3_round\">d3.round</a> before computing the prefix. The returned prefix object has two properties:</p> <ul> <li>symbol - the prefix symbol, such as \"M\" for millions.</li> <li>scale - the scale function, for converting numbers to the appropriate prefixed scale.</li> </ul> <p>For example:</p> <div class=\"highlight highlight-source-js\"><pre>var prefix = d3.formatPrefix(1.21e9);\nconsole.log(prefix.symbol); // \"G\"\nconsole.log(prefix.scale(1.21e9)); // 1.21</pre></div> <p>This method is used by d3.format for the <code>s</code> format.</p> <h6 id=\"d3_round\"> d3.<b>round</b>(<i>x</i>[, <i>n</i>])</h6> <p>Returns the value <em>x</em> rounded to <em>n</em> digits after the decimal point. If <em>n</em> is omitted, it defaults to zero. The result is a number. Values are rounded to the closest multiple of 10 to the power minus <em>n</em>; if two multiples are equally close, the value is rounded up in accordance with the built-in <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Math/round\">round</a> function. For example:</p> <div class=\"highlight highlight-source-js\"><pre>d3.round(1.23); // 1\nd3.round(1.23, 1); // 1.2\nd3.round(1.25, 1); // 1.3\nd3.round(12.5, 0); // 13\nd3.round(12, -1); // 10</pre></div> <p>Note that the resulting number when converted to a string may be imprecise due to IEEE floating point precision; to format a number to a string with a fixed number of decimal points, use <a href=\"formatting#d3_format\">d3.format</a> instead.</p> <h2 id=\"strings\"> Strings</h2> <h6 id=\"d3_requote\"> d3.<b>requote</b>(<i>string</i>)</h6> <p>Returns a quoted (escaped) version of the specified <em>string</em> such that the string may be embedded in a regular expression as a string literal.</p> <div class=\"highlight highlight-source-js\"><pre>d3.requote(\"[]\"); // \"\\[\\]\"</pre></div> <h2 id=\"dates\"> Dates</h2> <p>See the <a class=\"internal present\" href=\"time-formatting\">d3.time</a> module.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Formatting\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Formatting</a>\n  </p>\n</div>\n","force-layout":"<h1 class=\"gh-header-title instapaper_title\">Force Layout</h1>   <p>A flexible force-directed graph layout implementation using position <a href=\"http://en.wikipedia.org/wiki/Verlet_integration\">Verlet integration</a> to allow <a href=\"http://www.csse.monash.edu.au/%7Etdwyer/Dwyer2009FastConstraints.pdf\">simple constraints</a>. For more on physical simulations, see <a href=\"http://www.gamasutra.com/resource_guide/20030121/jacobson_pfv.htm\">Thomas Jakobsen</a>. This implementation uses a <a href=\"quadtree-geom\">quadtree</a> to accelerate charge interaction using the <a href=\"http://en.wikipedia.org/wiki/Barnes%E2%80%93Hut_simulation\">Barnes–Hut approximation</a>. In addition to the repulsive <a href=\"force-layout#charge\">charge</a> force, a pseudo-<a href=\"force-layout#gravity\">gravity</a> force keeps nodes centered in the visible area and avoids expulsion of disconnected subgraphs, while links are fixed-<a href=\"force-layout#distance\">distance</a> geometric constraints. Additional custom forces and constraints may be applied on the \"tick\" event, simply by updating the <em>x</em> and <em>y</em> attributes of nodes.</p> <p><a href=\"http://bl.ocks.org/mbostock/4062045\"><img src=\"https://github.com/mbostock/d3/wiki/force.png\" alt=\"force\"></a></p> <p>For an extensive overview of the possibilities, with examples, see <a href=\"https://vimeo.com/29458354\">this talk</a> and <a href=\"http://mbostock.github.io/d3/talk/20110921/#0\">corresponding deck</a>.</p> <p>Some fun examples:</p> <ul> <li><a href=\"http://bl.ocks.org/mbostock/1021841\">divergent forces</a></li> <li><a href=\"http://bl.ocks.org/mbostock/1021953\">multiple foci</a></li> <li><a href=\"http://bl.ocks.org/mbostock/929623\">graph constructor</a></li> <li><a href=\"http://bl.ocks.org/mbostock/1062288\">force-directed tree</a></li> <li><a href=\"http://bl.ocks.org/mbostock/1062383\">force-directed symbols</a></li> <li><a href=\"http://bl.ocks.org/mbostock/950642\">force-directed images and labels</a></li> <li><a href=\"http://bl.ocks.org/mbostock/1073373\">force-directed states</a></li> <li><a href=\"http://bl.ocks.org/mbostock/3750558\">sticky force layout</a></li> </ul> <p>Like other classes in D3, layouts follow the method chaining pattern where setter methods return the layout itself, allowing multiple setters to be invoked in a concise statement. Unlike some of the other layout implementations which are stateless, the force layout keeps a reference to the associated nodes and links internally; thus, a given force layout instance can only be used with a single dataset.</p> <h6 id=\"force\"> d3.layout.<b>force</b>()</h6> <p>Constructs a new force-directed layout with the default settings: size 1×1, link strength 1, friction 0.9, distance 20, charge strength -30, gravity strength 0.1, and theta parameter 0.8. The default nodes and links are the empty array, and when the layout is started, the internal alpha cooling parameter is set to 0.1. The general pattern for constructing force-directed layouts is to set all the configuration properties, and then call <a href=\"force-layout#start\">start</a>:</p> <div class=\"highlight highlight-source-js\"><pre>var force = d3.layout.force()\n    .nodes(nodes)\n    .links(links)\n    .size([w, h])\n    .linkStrength(0.1)\n    .friction(0.9)\n    .linkDistance(20)\n    .charge(-30)\n    .gravity(0.1)\n    .theta(0.8)\n    .alpha(0.1)\n    .start();</pre></div> <p>Note that, like D3's other layouts, the force-directed layout doesn't mandate a particular visual representation. Most commonly, nodes are mapped to SVG circle elements, and links are mapped to SVG line elements. But you might also display nodes as <a href=\"http://bl.ocks.org/mbostock/1062383\">symbols</a> or <a href=\"http://bl.ocks.org/mbostock/950642\">images</a>.</p> <h6 id=\"size\"> force.<b>size</b>([<i>width, height</i>])</h6> <p>If <em>size</em> is specified, sets the available layout size to the specified two-element array of numbers representing <em>x</em> and <em>y</em>. If <em>size</em> is not specified, returns the current size, which defaults to [1, 1]. The size affects two aspects of the force-directed layout: the gravitational center, and the initial random position. The center of gravity is simply [ <em>x</em> / 2, <em>y</em> / 2 ]. When nodes are added to the force layout, if they do not have <em>x</em> and <em>y</em> attributes already set, then these attributes are initialized using a uniform random distribution in the range [0, <em>x</em>] and [0, <em>y</em>], respectively.</p> <h6 id=\"linkDistance\"> force.<b>linkDistance</b>([<i>distance</i>])</h6> <p>If <em>distance</em> is specified, sets the target distance between linked nodes to the specified value. If <em>distance</em> is not specified, returns the layout's current link distance, which defaults to 20. If <em>distance</em> is a constant, then all links are the same distance. Otherwise, if <em>distance</em> is a function, then the function is evaluated for each link (in order), being passed the link and its index, with the <code>this</code> context as the force layout; the function's return value is then used to set each link's distance. The function is evaluated whenever the layout <a href=\"force-layout#start\">starts</a>.</p> <p>Links are not implemented as \"spring forces\", as is common in other force-directed layouts, but as weak geometric constraints. For each tick of the layout, the distance between each pair of linked nodes is computed and compared to the target distance; the links are then moved towards each other, or away from each other, so as to converge on the desired distance. This method of constraints relaxation on top of position Verlet integration is vastly more stable than previous methods using spring forces, and also allows for the flexible implementation of <a href=\"http://www.csse.monash.edu.au/%7Etdwyer/Dwyer2009FastConstraints.pdf\">other constraints</a> in the tick event listener, such as hierarchical layering.</p> <h6 id=\"linkStrength\"> force.<b>linkStrength</b>([<i>strength</i>])</h6> <p>If <em>strength</em> is specified, sets the strength (rigidity) of links to the specified value in the range [0,1]. If <em>strength</em> is not specified, returns the layout's current link strength, which defaults to 1. If <em>strength</em> is a constant, then all links have the same strength. Otherwise, if <em>strength</em> is a function, then the function is evaluated for each link (in order), being passed the link and its index, with the <code>this</code> context as the force layout; the function's return value is then used to set each link's strength. The function is evaluated whenever the layout <a href=\"force-layout#start\">starts</a>.</p> <h6 id=\"friction\"> force.<b>friction</b>([<i>friction</i>])</h6> <p>If <em>friction</em> is specified, sets the friction coefficient to the specified value. If <em>friction</em> is not specified, returns the current coefficient, which defaults to 0.9. The name of this parameter is perhaps misleading; it does not correspond to a standard physical <a href=\"http://en.wikipedia.org/wiki/Friction#Coefficient_of_friction\">coefficient of friction</a>. Instead, it more closely approximates velocity decay: at each tick of the simulation, the particle velocity is scaled by the specified <em>friction</em>. Thus, a value of 1 corresponds to a frictionless environment, while a value of 0 freezes all particles in place. Values outside the range [0,1] are not recommended and may have destabilizing effects.</p> <h6 id=\"charge\"> force.<b>charge</b>([<i>charge</i>])</h6> <p>If <em>charge</em> is specified, sets the charge strength to the specified value. If <em>charge</em> is not specified, returns the current charge strength, which defaults to -30. If <em>charge</em> is a constant, then all nodes have the same charge. Otherwise, if <em>charge</em> is a function, then the function is evaluated for each node (in order), being passed the node and its index, with the <code>this</code> context as the force layout; the function's return value is then used to set each node's charge. The function is evaluated whenever the layout <a href=\"force-layout#start\">starts</a>.</p> <p>A negative value results in node repulsion, while a positive value results in node attraction. For graph layout, negative values should be used; for <a href=\"http://mbostock.github.com/protovis/ex/nbody.html\"><em>n</em>-body simulation</a>, positive values can be used. All nodes are assumed to be infinitesimal points with equal charge and mass. Charge forces are implemented efficiently via the <a href=\"http://arborjs.org/docs/barnes-hut\">Barnes–Hut algorithm</a>, computing a <a href=\"quadtree-geom\">quadtree</a> for each tick. Setting the charge force to zero disables computation of the quadtree, which can noticeably improve performance if you do not need n-body forces.</p> <h6 id=\"chargeDistance\"> force.<b>chargeDistance</b>([<i>distance</i>])</h6> <p>If <em>distance</em> is specified, sets the maximum distance over which charge forces are applied. If <em>distance</em> is not specified, returns the current maximum charge distance, which defaults to infinity. Specifying a finite charge distance improves the performance of the force layout and produces a more localized layout; distance-limited charge forces are especially useful in conjunction with custom gravity. For an example, see <a href=\"http://www.nytimes.com/newsgraphics/2013/09/07/director-star-chart/\">“Constellations of Directors and their Stars”</a> (<em>The New York Times</em>).</p> <h6 id=\"theta\"> force.<b>theta</b>([<i>theta</i>])</h6> <p>If <em>theta</em> is specified, sets the Barnes–Hut approximation criterion to the specified value. If <em>theta</em> is not specified, returns the current value, which defaults to 0.8. Unlike links, which only affect two linked nodes, the charge force is global: every node affects every other node, even if they are on disconnected subgraphs.</p> <p>To avoid quadratic performance slowdown for large graphs, the force layout uses the <a href=\"http://en.wikipedia.org/wiki/Barnes-Hut_simulation\">Barnes–Hut approximation</a> which takes O(<em>n</em> log <em>n</em>) per tick. For each tick, a quadtree is created to store the current node positions; then for each node, the sum charge force of all other nodes on the given node are computed. For clusters of nodes that are far away, the charge force is approximated by treating the distance cluster of nodes as a single, larger node. <em>Theta</em> determines the accuracy of the computation: if the ratio of the area of a quadrant in the quadtree to the distance between a node to the quadrant's center of mass is less than <em>theta</em>, all nodes in the given quadrant are treated as a single, larger node rather than computed individually.</p> <h6 id=\"gravity\"> force.<b>gravity</b>([<i>gravity</i>])</h6> <p>If <em>gravity</em> is specified, sets the gravitational strength to the specified numerical value. If <em>gravity</em> is not specified, returns the current gravitational strength, which defaults to 0.1. The name of this parameter is perhaps misleading; it does not correspond to physical <a href=\"http://en.wikipedia.org/wiki/Gravitation\">gravity</a> (which can be simulated using a positive <a href=\"force-layout#charge\">charge</a> parameter). Instead, gravity is implemented as a weak geometric constraint similar to a virtual spring connecting each node to the center of the layout's <a href=\"force-layout#size\">size</a>. This approach has nice properties: near the center of the layout, the gravitational strength is almost zero, avoiding any local distortion of the layout; as nodes get pushed farther away from the center, the gravitational strength becomes stronger in linear proportion to the distance. Thus, gravity will always overcome repulsive charge forces at some threshold, preventing disconnected nodes from escaping the layout.</p> <p>Gravity can be disabled by setting the gravitational strength to zero. If you disable gravity, it is recommended that you implement some other geometric constraint to prevent nodes from escaping the layout, such as constraining them within the layout's bounds.</p> <h6 id=\"nodes\"> force.<b>nodes</b>([<i>nodes</i>])</h6> <p>If <em>nodes</em> is specified, sets the layout's associated nodes to the specified array. If <em>nodes</em> is not specified, returns the current array, which defaults to the empty array. Each node has the following attributes:</p> <ul> <li>index - the zero-based index of the node within the <em>nodes</em> array.</li> <li>x - the <em>x</em>-coordinate of the current node position.</li> <li>y - the <em>y</em>-coordinate of the current node position.</li> <li>px - the <em>x</em>-coordinate of the previous node position.</li> <li>py - the <em>y</em>-coordinate of the previous node position.</li> <li>fixed - a boolean indicating whether node position is locked.</li> <li>weight - the node weight; the number of associated links.</li> </ul> <p>These attributes do not need to be set before passing the nodes to the layout; if they are not set, suitable defaults will be initialized by the layout when <a href=\"force-layout#start\">start</a> is called. However, be aware that if you are storing other data on your nodes, your data attributes should not conflict with the above properties used by the layout.</p> <h6 id=\"links\"> force.<b>links</b>([<i>links</i>])</h6> <p>If <em>links</em> is specified, sets the layout's associated links to the specified array. If <em>links</em> is not specified, returns the current array, which defaults to the empty array. Each link has the following attributes:</p> <ul> <li>source - the source node (an element in <em>nodes</em>).</li> <li>target - the target node (an element in <em>nodes</em>).</li> </ul> <p>Note: the values of the source and target attributes may be initially specified as indexes into the <em>nodes</em> array; these will be replaced by references after the call to <a href=\"#start\">start</a>. Link objects may have additional fields that you specify; this data can be used to compute link <a href=\"force-layout#linkStrength\">strength</a> and <a href=\"force-layout#linkDistance\">distance</a> on a per-link basis using an accessor function.</p> <h6 id=\"start\"> force.<b>start</b>()</h6> <p>Starts the simulation; this method must be called when the layout is first created, after assigning the nodes and links. In addition, it should be called again whenever the nodes or links change. Internally, the layout uses a cooling parameter <em>alpha</em> which controls the layout temperature: as the physical simulation converges on a stable layout, the temperature drops, causing nodes to move more slowly. Eventually, <em>alpha</em> drops below a threshold and the simulation stops completely, freeing the CPU and avoiding battery drain. The layout can be reheated using <a href=\"force-layout#resume\">resume</a> or by restarting; this happens automatically when using the <a href=\"force-layout#drag\">drag</a> behavior.</p> <p>On start, the layout initializes various attributes on the associated nodes. The <em>index</em> of each node is computed by iterating over the array, starting at zero. The initial <em>x</em> and <em>y</em> coordinates, if not already set externally to a valid number, are computed by examining neighboring nodes: if a linked node already has an initial position in <em>x</em> or <em>y</em>, the corresponding coordinates are applied to the new node. This increases the stability of the graph layout when new nodes are added, rather than using the default which is to initialize the position randomly within the layout's <a href=\"force-layout#size\">size</a>. The previous <em>px</em> and <em>py</em> position is set to the initial position, if not already set, giving new nodes an initial velocity of zero. Finally, the <em>fixed</em> boolean defaults to false.</p> <p>The layout also initializes the <em>source</em> and <em>target</em> attributes on the associated links: for convenience, these attributes may be specified as a numeric index rather than a direct link, such that the nodes and links can be read-in from a JSON file or other static description that may not allow circular linking. The <em>source</em> and <em>target</em> attributes on incoming links are only replaced with the corresponding entries in <em>nodes</em> if these attributes are numbers; thus, these attributes on existing links are unaffected when the layout is restarted. The link <a href=\"force-layout#linkDistance\">distances</a> and <a href=\"force-layout#linkStrength\">strengths</a> are also computed on start.</p> <h6 id=\"alpha\"> force.<b>alpha</b>([<i>value</i>])</h6> <p>Gets or sets the force layout's cooling parameter, <em>alpha</em>. If <em>value</em> is specified, sets alpha to the specified value and returns the force layout. If <em>value</em> is greater than zero, this method also restarts the force layout if it is not already running, dispatching a \"start\" event and enabling the tick timer. If <em>value</em> is nonpositive, and the force layout is running, this method stops the force layout on the next tick and dispatches an \"end\" event. If <em>value</em> is not specified, this method returns the current alpha value.</p> <h6 id=\"resume\"> force.<b>resume</b>()</h6> <p>Equivalent to:</p> <div class=\"highlight highlight-source-js\"><pre>force.alpha(.1);</pre></div> <p>Sets the cooling parameter <em>alpha</em> to 0.1. This method sets the internal <em>alpha</em> parameter to 0.1, and then restarts the <a href=\"transitions#d3_timer\">timer</a>. Typically, you don't need to call this method directly; it is called automatically by <a href=\"force-layout#start\">start</a>. It is also called automatically by <a href=\"force-layout#drag\">drag</a> during a drag gesture.</p> <h6 id=\"stop\"> force.<b>stop</b>()</h6> <p>Equivalent to:</p> <div class=\"highlight highlight-source-js\"><pre>force.alpha(0);</pre></div> <p>Terminates the simulation, setting the cooling parameter <em>alpha</em> to zero. This can be used to stop the simulation explicitly, for example, if you want to show animation or allow other interaction. If you do not stop the layout explicitly, it will still stop automatically after the layout's cooling parameter decays below some threshold.</p> <h6 id=\"tick\"> force.<b>tick</b>()</h6> <p>Runs the force layout simulation one step. This method can be used in conjunction with <a href=\"#start\">start</a> and <a href=\"#stop\">stop</a> to compute a static layout. For example:</p> <div class=\"highlight highlight-source-js\"><pre>force.start();\nfor (var i = 0; i &lt; n; ++i) force.tick();\nforce.stop();</pre></div> <p>The number of iterations depends on the graph size and complexity. The choice of initial positions can also have a dramatic impact on how quickly the graph converges on a good solution. For example, here the nodes are arranged along the diagonal:</p> <div class=\"highlight highlight-source-js\"><pre>var n = nodes.length;\nnodes.forEach(function(d, i) {\n  d.x = d.y = width / n * i;\n});</pre></div> <p>If you do not initialize the positions manually, the force layout will initialize them randomly, resulting in somewhat unpredictable behavior.</p> <h6 id=\"on\"> force.<b>on</b>(<i>type</i>, <i>listener</i>)</h6> <p>Registers the specified <em>listener</em> to receive events of the specified <em>type</em> from the force layout. Currently, only \"start\", \"tick\", and \"end\" events are supported. </p> <p>The event objects that will be passed to the listener functions are custom objects created using the <a href=\"internals#events\"><code>d3.dispatch()</code></a> process. Each event object has two properties: the <code>type</code> (a string, either <code>\"start\"</code>, <code>\"tick\"</code>, or <code>\"end\"</code>), and <code>alpha</code>, which is the current value of the alpha cooling parameter (a number between 0 and 1). The <code><i>event</i>.alpha</code> property can be used to monitor layout progress or to control your own custom adjustments.</p> <p>The \"start\" event is dispatched both for the initial start of the simulation and anytime the simulation is re-started.</p> <p>The \"tick\" events are dispatched for each tick of the simulation. Listen to tick events to update the displayed positions of nodes and links. For example, if you initially display the nodes and links like so:</p> <div class=\"highlight highlight-source-js\"><pre>var link = vis.selectAll(\"line\")\n    .data(links)\n  .enter().append(\"line\");\n\nvar node = vis.selectAll(\"circle\")\n    .data(nodes)\n  .enter().append(\"circle\")\n    .attr(\"r\", 5);</pre></div> <p>You can set their positions on tick:</p> <div class=\"highlight highlight-source-js\"><pre>force.on(\"tick\", function() {\n  link.attr(\"x1\", function(d) { return d.source.x; })\n      .attr(\"y1\", function(d) { return d.source.y; })\n      .attr(\"x2\", function(d) { return d.target.x; })\n      .attr(\"y2\", function(d) { return d.target.y; });\n\n  node.attr(\"cx\", function(d) { return d.x; })\n      .attr(\"cy\", function(d) { return d.y; });\n});</pre></div> <p>In this case, we've stored the selections <code>node</code> and <code>link</code> on initialization, so that we don't need to reselect the nodes on every tick. If you prefer, you can display nodes and links differently; for example, you might use <a href=\"svg-shapes#symbol\">symbols</a> rather than circles.</p> <p>The \"end\" event is dispatched when the simulations internal alpha cooling parameter drops below the the cut-off value (0.005) and is set to zero.</p> <h6 id=\"drag\"> force.<b>drag</b>()</h6> <p>Bind a behavior to nodes to allow interactive dragging, either using the mouse or touch. Use this in conjunction with the <a href=\"selections#call\">call</a> operator on the nodes; for example, say <code>node.call(force.drag)</code> on initialization. The drag event sets the <em>fixed</em> attribute of nodes on mouseover, such that as soon as the mouse is over a node, it stops moving. Fixing on mouseover, rather than on mousedown, makes it easier to catch moving nodes. When a mousedown event is received, and on each subsequent mousemove until mouseup, the node center is set to the current mouse position. In addition, each mousemove triggers a <a href=\"force-layout#resume\">resume</a> of the force layout, reheating the simulation. If you want dragged nodes to remain fixed after dragging, set the <em>fixed</em> attribute to true on <em>dragstart</em>, as in the <a href=\"http://bl.ocks.org/mbostock/3750558\">sticky force layout</a> example.</p> <p>Implementation note: the mousemove and mouseup event listeners are registered on the current window, such that when the user starts dragging a node, they can continue to drag the node even if the mouse leaves the window. Each event listener uses the \"force\" namespace, so as to avoid collision with other event listeners you may wish to bind to nodes or to the window. If a node is moved by the drag behavior, the subsequent click event that would be triggered by the final mouseup is captured and the default behavior prevented. If you register a click event listener, you can ignore these clicks on drag by seeing if the default behavior was prevented:</p> <div class=\"highlight highlight-source-js\"><pre>selection.on(\"click\", function(d) {\n  if (d3.event.defaultPrevented) return; // ignore drag\n  otherwiseDoAwesomeThing();\n});</pre></div> <p>See the <a href=\"http://bl.ocks.org/mbostock/1093130\">collapsible force layout</a> and <a href=\"http://bl.ocks.org/mbostock/1021841\">divergent forces</a> for examples.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Force-Layout\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Force-Layout</a>\n  </p>\n</div>\n","histogram-layout":"<h1 class=\"gh-header-title instapaper_title\">Histogram Layout</h1>   <p>A <strong>histogram layout</strong> shows the distribution of data by grouping discrete data points into bins. See <a href=\"http://bl.ocks.org/mbostock/3048450\">bl.ock 3048450</a> for example usage.</p> <h6 id=\"histogram\"> d3.layout.<b>histogram</b>()</h6> <p>Constructs a new histogram function with the default value accessor, range function, and bin function. By default, the histogram function returns frequencies. The returned layout object is both an object and a function. That is: you can call the layout like any other function, and the layout has additional methods that change its behavior. Like other classes in D3, layouts follow the method chaining pattern where setter methods return the layout itself, allowing multiple setters to be invoked in a concise statement.</p> <h6 id=\"_histogram\"> <b>histogram</b>(<i>values</i>[, <i>index</i>])</h6> <p>Evaluates the histogram function on the specified array of <em>values</em>. An optional <em>index</em> may be specified, which is passed along to the range and bin function. The return value is an array of arrays: each element in the outer array represents a bin, and each bin contains the associated elements from the input <em>values</em>. In addition, each bin has three attributes:</p> <ul> <li> <em>x</em> - the lower bound of the bin (inclusive).</li> <li> <em>dx</em> - the width of the bin; x + dx is the upper bound (exclusive).</li> <li> <em>y</em> - the count (if <a href=\"histogram-layout#frequency\">frequency</a> is true), or the probability (if frequency is false).</li> </ul> <p>Note that the y attribute is the same as the length attribute, in frequency mode.</p> <h6 id=\"value\"> histogram.<b>value</b>([<i>accessor</i>])</h6> <p>Specifies how to extract a value from the associated data; <em>accessor</em> is a function which is invoked on each input value passed to <a href=\"histogram-layout#_histogram\">histogram</a>, equivalent to calling <em>values.map(accessor)</em> before computing the histogram. The default value function is the built-in <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>, which is similar to the identity function. If <em>accessor</em> is not specified, returns the current value accessor.</p> <h6 id=\"range\"> histogram.<b>range</b>([<i>range</i>])</h6> <p>Specifies the range of the histogram. Values outside the specified range will be ignored. The <em>range</em> may be specified either as a two-element array representing the minimum and maximum value of the range, or as a function that returns the range given the array of <em>values</em> and the current <em>index</em> passed to <a href=\"histogram-layout#_histogram\">histogram</a>. The default range is the extent (<a href=\"arrays#d3_min\">minimum</a> and <a href=\"arrays#d3_max\">maximum</a>) of the values. If <em>range</em> is not specified, returns the current range function.</p> <h6 id=\"bins\"> histogram.<b>bins</b>() <br> histogram.<b>bins</b>(<i>count</i>) <br> histogram.<b>bins</b>(<i>thresholds</i>) <br> histogram.<b>bins</b>(<i>function</i>)</h6> <p>Specifies how to bin values in the histogram. If no argument is specified, the current binning function is returned, which defaults to an implementation of <a href=\"http://en.wikipedia.org/wiki/Histogram\">Sturges' formula</a> that divides values into bins using uniformly-spaced values. If a <em>count</em> is specified, the value <a href=\"#range\">range</a> is divided evenly into the specified number of bins.</p> <p>If an array of <em>thresholds</em> is specified, it defines the value thresholds used to bin, starting with the leftmost (lowest) value and ending with rightmost (highest) value. The <em>n</em> + 1 <em>thresholds</em> specify <em>n</em> bins. Any values less than <i>thresholds[1]</i> will be placed in the first bin; likewise any values greater than or equal to <i>thresholds[thresholds.length - 2]</i> will be placed in the last bin. Thus, although the first and last threshold are not used to assign values to bins, they are still necessary to define the <em>x</em> property of the first bin and the <em>dx</em> property of the last bin, respectively.</p> <p>Lastly, if a binning <em>function</em> is specified, it is invoked when the layout is passed data, being passed the current <a href=\"histogram-layout#range\">range</a>, the array of values and the current index passed to <a href=\"histogram-layout#_histogram\">histogram</a>. This function must then return an array of <em>thresholds</em> as described in the previous paragraph.</p> <h6 id=\"frequency\"> histogram.<b>frequency</b>([<i>frequency</i>])</h6> <p>Specifies the meaning of the generated bins’ <em>y</em>-values. If <em>frequency</em> is true, which is the default, the <em>y</em>-value represents the count of elements in the bin. If false, it represents the probability of a random element in the sample population being in that bin. Note that this is a <em>probability</em>, not a <em>probability density</em>, and so for <a href=\"http://bl.ocks.org/mbostock/1624660\">irregular histograms</a>, you must normalize the <em>y</em>-value by the bin width (<code>bin.y / bin.dx</code>) for the area of the displayed bar to be proportional to the probability. If <em>frequency</em> is not specified, returns the current frequency boolean.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Histogram-Layout\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Histogram-Layout</a>\n  </p>\n</div>\n","hull-geom":"<h1 class=\"gh-header-title instapaper_title\">Hull Geom</h1>   <h6 id=\"hull\"> d3.geom.<b>hull</b>()</h6> <p><a href=\"http://bl.ocks.org/mbostock/4341699\"><img src=\"https://camo.githubusercontent.com/5ada78fc3779446f82a2148bb68b67d8d3ec1d21/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343334313639392f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4341699/thumbnail.png\"></a></p> <p>Create a new hull layout with the default <em>x</em>- and <em>y</em>-accessors.</p> <h6 id=\"_hull\"> <b>hull</b>(<i>vertices</i>)</h6> <p>Returns the convex hull for the specified <em>vertices</em> array, using the current x- and y-coordinate accessors. The returned convex hull is represented as an array containing a subset of the input vertices, arranged in counterclockwise order (for consistency with <a href=\"polygon-geom#clip\">polygon.clip</a>).</p> <p>Assumes the <em>vertices</em> array is greater than three in length. If <em>vertices</em> is of length &lt;= 3, returns [].</p> <h6 id=\"x\"> hull.<b>x</b>([<i>x</i>])</h6> <p>If <em>x</em> is specified, sets the x-coordinate accessor. If <em>x</em> is not specified, returns the current x-coordinate accessor, which defaults to:</p> <div class=\"highlight highlight-source-js\"><pre>function(d) { return d[0]; }</pre></div> <h6 id=\"y\"> hull.<b>y</b>([<i>y</i>])</h6> <p>If <em>y</em> is specified, sets the y-coordinate accessor. If <em>y</em> is not specified, returns the current y-coordinate accessor, which defaults to:</p> <div class=\"highlight highlight-source-js\"><pre>function(d) { return d[1]; }</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Hull-Geom\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Hull-Geom</a>\n  </p>\n</div>\n","geo-projections":"<h1 class=\"gh-header-title instapaper_title\">Geo Projections</h1>   <p>D3 includes several common projections by default, as shown below. Numerous (less-commonly used) projections are available in the <a href=\"https://github.com/d3/d3-geo-projection/\">extended geographic projections plugin</a> and the <a href=\"https://github.com/d3/d3-plugins/tree/master/geo/polyhedron\">polyhedral projection plugin</a>.</p> <table> <tr height=\"146\" valign=\"top\"> <td>d3.geo.albersUsa<br><a href=\"http://bl.ocks.org/mbostock/4090848\"><img src=\"https://camo.githubusercontent.com/2268a4f5bf1729e612c447cdeb39436be58af77c/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343039303834382f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4090848/thumbnail.png\"></a> </td> <td>d3.geo.azimuthalEqualArea<br><a href=\"http://bl.ocks.org/mbostock/3757101\"><img src=\"https://camo.githubusercontent.com/2aa03c5f99c72a7775341aa86c8322ae67de8421/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333735373130312f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3757101/thumbnail.png\"></a> </td> <td>d3.geo.azimuthalEquidistant<br><a href=\"http://bl.ocks.org/mbostock/3757110\"><img src=\"https://camo.githubusercontent.com/08a3c5189398880d1d3d9f94694afb6dd52e1366/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333735373131302f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3757110/thumbnail.png\"></a> </td> </tr> <tr height=\"146\" valign=\"top\"> <td>d3.geo.conicEqualArea<br><a href=\"http://bl.ocks.org/mbostock/3734308\"><img src=\"https://camo.githubusercontent.com/705780535b279ffc9e48adb93244f1d55b4149b9/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333733343330382f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3734308/thumbnail.png\"></a> </td> <td>d3.geo.conicConformal<br><a href=\"http://bl.ocks.org/mbostock/3734321\"><img src=\"https://camo.githubusercontent.com/9a9b004d6d6e99e934a0c59973e27c3b89d00fcb/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333733343332312f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3734321/thumbnail.png\"></a> </td> <td>d3.geo.conicEquidistant<br><a href=\"http://bl.ocks.org/mbostock/3734317\"><img src=\"https://camo.githubusercontent.com/3b51bc98fbddeb73e759d6032aa5b53809950ae4/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333733343331372f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3734317/thumbnail.png\"></a> </td> </tr> <tr height=\"146\" valign=\"top\"> <td>d3.geo.equirectangular<br><a href=\"http://bl.ocks.org/mbostock/3757119\"><img src=\"https://camo.githubusercontent.com/510ed66d8c29e34e1010f2167baabd1d01b5fe3b/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333735373131392f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3757119/thumbnail.png\"></a> </td> <td>d3.geo.gnomonic<br><a href=\"http://bl.ocks.org/mbostock/3757349\"><img src=\"https://camo.githubusercontent.com/3ed0165a82d5ece1428da8817ab58e36027efb5f/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333735373334392f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3757349/thumbnail.png\"></a> </td> <td>d3.geo.mercator<br><a href=\"http://bl.ocks.org/mbostock/3757132\"><img src=\"https://camo.githubusercontent.com/64176495a5d2700fb37d8099f0385774e729ac97/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333735373133322f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3757132/thumbnail.png\"></a> </td> </tr> <tr height=\"146\" valign=\"top\"> <td>d3.geo.orthographic<br><a href=\"http://bl.ocks.org/mbostock/3757125\"><img src=\"https://camo.githubusercontent.com/99ea4d70bc1061f6dc0dacb5c1a8c83eeb19e9fa/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333735373132352f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3757125/thumbnail.png\"></a> </td> <td>d3.geo.stereographic<br><a href=\"http://bl.ocks.org/mbostock/3757137\"><img src=\"https://camo.githubusercontent.com/c0c64b059b717a8e523289f71e7a8a28c342082f/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333735373133372f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3757137/thumbnail.png\"></a> </td> <td>d3.geo.transverseMercator<br><a href=\"http://bl.ocks.org/mbostock/5126418\"><img src=\"https://camo.githubusercontent.com/b7679bbce2a6db23b4cbcfdcf26163539f68333e/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f353132363431382f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/5126418/thumbnail.png\"></a> </td> </tr> </table> <h2 id=\"standard-abstract-projection\"> Standard Abstract Projection</h2> <p>Most projections provided by D3 are created via d3.geo.projection and are configurable: you can rotate the globe, scale or transform the canvas, etc. Unless you’re implementing a new raw projection, you probably won’t use the d3.geo.projection constructor, but you are likely to use the configuration methods.</p> <h6 id=\"projection\"> d3.geo.<b>projection</b>(<i>raw</i>)</h6> <p>Constructs a new projection from the specified <em>raw</em> point projection function. For example, a Mercator projection can be implemented as:</p> <div class=\"highlight highlight-source-js\"><pre>var mercator = d3.geo.projection(function(λ, φ) {\n  return [\n    λ,\n    Math.log(Math.tan(π / 4 + φ / 2))\n  ];\n});</pre></div> <p>(See <a href=\"https://github.com/mbostock/d3/blob/master/src/geo/mercator.js\">src/geo/mercator.js</a> for the full implementation.) If the raw function supports an <em>invert</em> method, then the returned projection will expose a corresponding <a href=\"#invert\">invert</a> method.</p> <h6 id=\"_projection\"> <b>projection</b>(<i>location</i>)</h6> <p>Projects forward from spherical coordinates (in degrees) to Cartesian coordinates (in pixels). Returns an array [<i>x</i>, <i>y</i>] given the input array [<i>longitude</i>, <i>latitude</i>]. May return null if the specified <em>location</em> has no defined projected position, such as when the location is outside the clipping bounds of the projection.</p> <h6 id=\"invert\"> projection.<b>invert</b>(<i>point</i>)</h6> <p>Projects backward from Cartesian coordinates (in pixels) to spherical coordinates (in degrees). Returns an array [<i>longitude</i>, <i>latitude</i>] given the input array [<i>x</i>, <i>y</i>]. Not all projections implement <em>invert</em>; for noninvertible projections, this method is undefined.</p> <h6 id=\"rotate\"> projection.<b>rotate</b>([<i>rotation</i>])</h6> <p>If <em>rotation</em> is specified, sets the projection’s <a href=\"http://bl.ocks.org/mbostock/4282586\">three-axis rotation</a> to the specified angles λ, φ and γ (<a href=\"http://en.wikipedia.org/wiki/Aircraft_principal_axes\">yaw, pitch and roll</a>, or equivalently <a href=\"http://en.wikipedia.org/wiki/Geographic_coordinate_system\">longitude, latitude</a> and roll) in degrees and returns the projection. If <em>rotation</em> is not specified, returns the current rotation which defaults [0, 0, 0]. If the specified <em>rotation</em> has only two values, rather than three, the roll is assumed to be 0°.</p> <h6 id=\"center\"> projection.<b>center</b>([<i>location</i>])</h6> <p>If <em>location</em> is specified, sets the projection’s center to the specified <em>location</em>, a two-element array of longitude and latitude in degrees and returns the projection. If <em>center</em> is not specified, returns the current center which defaults to ⟨0°,0°⟩.</p> <h6 id=\"translate\"> projection.<b>translate</b>([<i>point</i>])</h6> <p>If <em>point</em> is specified, sets the projection’s translation offset to the specified two-element array [<i>x</i>, <i>y</i>] and returns the projection. If <em>point</em> is not specified, returns the current translation offset which defaults to [480, 250]. The translation offset determines the pixel coordinates of the projection’s <a href=\"#center\">center</a>. The default translation offset places ⟨0°,0°⟩ at the center of a 960×500 area.</p> <h6 id=\"scale\"> projection.<b>scale</b>([<i>scale</i>])</h6> <p>If <em>scale</em> is specified, sets the projection’s scale factor to the specified value and returns the projection. If <em>scale</em> is not specified, returns the current scale factor which defaults to 150. The scale factor corresponds linearly to the distance between projected points. However, scale factors are not consistent across projections.</p> <h6 id=\"clipAngle\"> projection.<b>clipAngle</b>(<i>angle</i>)</h6> <p>If <em>angle</em> is specified, sets the projection’s clipping circle radius to the specified angle in degrees and returns the projection. If <em>angle</em> is null, switches to <a href=\"http://bl.ocks.org/mbostock/3788999\">antimeridian cutting</a> rather than small-circle clipping. If <em>angle</em> is not specified, returns the current clip angle which defaults to null. Small-circle clipping is independent of viewport clipping via <a href=\"#clipExtent\">clipExtent</a>.</p> <h6 id=\"clipExtent\"> projection.<b>clipExtent</b>(<i>extent</i>)</h6> <p>If <em>extent</em> is specified, sets the projection’s viewport clip extent to the specified bounds in pixels and returns the projection. The <em>extent</em> bounds are specified as an array [​[<i>x0</i>, <i>y0</i>], [<i>x1</i>, <i>y1</i>]​], where <i>x0</i> is the left-side of the viewport, <i>y0</i> is the top, <i>x1</i> is the right and <i>y1</i> is the bottom. If <em>extent</em> is null, no viewport clipping is performed. If <em>extent</em> is not specified, returns the current viewport clip extent which defaults to null. Viewport clipping is independent of small-circle clipping via <a href=\"#clipAngle\">clipAngle</a>.</p> <h6 id=\"precision\"> projection.<b>precision</b>(<i>precision</i>)</h6> <p>If <em>precision</em> is specified, sets the threshold for the projection’s <a href=\"http://bl.ocks.org/mbostock/3795544\">adaptive resampling</a> to the specified value in pixels and returns the projection. This value corresponds to the <a href=\"http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm\">Douglas–Peucker</a> distance. If <em>precision</em> is not specified, returns the projection’s current resampling precision which defaults to <code>Math.SQRT(1/2)</code>.</p> <p>A <em>precision</em> of <code>0</code> disables adaptive resampling.</p> <h6 id=\"stream\"> projection.<b>stream</b>(<i>listener</i>)</h6> <p>Returns a projecting <a href=\"geo-streams\">stream</a> wrapper for the specified <em>listener</em>. Any geometry streamed to the wrapper is projected before being streamed to the wrapped listener. A typical projection involves several stream transformations: the input geometry is first converted to radians, rotated on three axes, clipped to the small circle or cut along the antimeridian, and lastly projected to the Cartesian plane with adaptive resampling, scale and translation.</p> <h6 id=\"projectionMutator\"> d3.geo.<b>projectionMutator</b>(<i>rawFactory</i>)</h6> <p>Constructs a new projection from the specified <em>raw</em> point projection function <em>factory</em>. This function does not return the projection directly, but instead returns a <em>mutate</em> method that you can call whenever the raw projection function changes. For example, say you’re implementing the Albers equal-area conic projection, which requires configuring the projection's two parallels. Using closures, you can implement the raw projection as follows:</p> <div class=\"highlight highlight-source-js\"><pre>// φ0 and φ1 are the two parallels\nfunction albersRaw(φ0, φ1) {\n  return function(λ, φ) {\n    return [\n      /* compute x here */,\n      /* compute y here */\n    ];\n  };\n}</pre></div> <p>Using d3.geo.projectionMutator, you can implement a standard projection that allows the parallels to be changed, reassigning the raw projection used internally by d3.geo.projection:</p> <div class=\"highlight highlight-source-js\"><pre>function albers() {\n  var φ0 = 29.5,\n      φ1 = 45.5,\n      mutate = d3.geo.projectionMutator(albersRaw),\n      projection = mutate(φ0, φ1);\n\n  projection.parallels = function(_) {\n    if (!arguments.length) return [φ0, φ1];\n    return mutate(φ0 = +_[0], φ1 = +_[1]);\n  };\n\n  return projection;\n}</pre></div> <p>Thus, when creating a mutable projection, the <em>mutate</em> function is never exposed, but can be used to recreate the underlying raw projection easily. For the full implementation, see <a href=\"https://github.com/mbostock/d3/blob/master/src/geo/albers.js\">src/geo/albers.js</a>.</p> <h2 id=\"standard-projections\"> Standard Projections</h2> <h6 id=\"albers\"> d3.geo.<b>albers</b>()</h6> <p>An alias for <a href=\"#conicEqualArea\">d3.geo.conicEqualArea</a>, with USA-centric defaults: scale 1000, translate [480, 250], rotation [96°, 0°], center ⟨-0.6°, 38.7°⟩ and parallels [29.5°, 45.5°], making it suitable for displaying the United States, centered around <a href=\"https://maps.google.com/maps?q=Hutchinson,+Kansas&amp;z=5\">Hutchinson, Kansas</a> in a 960×500 area. The central meridian and parallels are specified by the <a href=\"http://www.usgs.gov/\">USGS</a> in the 1970 <a href=\"http://www.nationalatlas.gov/\">National Atlas</a>.</p> <h6 id=\"albersUsa\"> d3.geo.<b>albersUsa</b>()</h6> <p><a href=\"http://bl.ocks.org/mbostock/4090848\"><img src=\"https://camo.githubusercontent.com/2268a4f5bf1729e612c447cdeb39436be58af77c/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343039303834382f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4090848/thumbnail.png\"></a></p> <p>The Albers USA projection is a composite projection of four Albers projections designed to display the forty-eight lower United States alongside Alaska and Hawaii. Although intended for choropleths, it scales the area of Alaska by a factor of 0.35x (a <i>lie factor</i> of 3); Hawaii is shown at the same scale as the lower forty-eight.</p> <p>The Albers USA projection does not support rotation or centering.</p> <h6 id=\"azimuthalEqualArea\"> d3.geo.<b>azimuthalEqualArea</b>()</h6> <p><a href=\"http://bl.ocks.org/mbostock/3757101\"><img src=\"https://camo.githubusercontent.com/2aa03c5f99c72a7775341aa86c8322ae67de8421/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333735373130312f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3757101/thumbnail.png\"></a></p> <p>The azimuthal equal-area projection is also suitable for choropleths. A <a href=\"http://bl.ocks.org/mbostock/4364903\">polar aspect</a> of this projection is used for the United Nations logo.</p> <h6 id=\"azimuthalEquidistant\"> d3.geo.<b>azimuthalEquidistant</b>()</h6> <p><a href=\"http://bl.ocks.org/mbostock/3757110\"><img src=\"https://camo.githubusercontent.com/08a3c5189398880d1d3d9f94694afb6dd52e1366/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333735373131302f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3757110/thumbnail.png\"></a></p> <p>The azimuthal equidistant projection preserves distances from the projection’s center: the distance from any projected point to the projection’s center is proportional to the great arc distance. Thus, circles around the projection’s center are projected to circles on the Cartesian plane. This can be useful for visualizing distances relative to a point of reference, such as commute distances.</p> <h6 id=\"conicConformal\"> d3.geo.<b>conicConformal</b>()</h6> <p><a href=\"http://bl.ocks.org/mbostock/3734321\"><img src=\"https://camo.githubusercontent.com/9a9b004d6d6e99e934a0c59973e27c3b89d00fcb/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333733343332312f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3734321/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/9764521\"><img src=\"https://camo.githubusercontent.com/2f77c6b74771b08792af5c33cba3e23b2e5b3e1f/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f393736343532312f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/9764521/thumbnail.png\"></a></p> <p>Lambert’s conformal conic projection projects the globe conformally onto a cone.</p> <h6 id=\"conicConformal_parallels\"> conicConformal.<b>parallels</b>([<i>parallels</i>])</h6> <p>If <em>parallels</em> is specified, sets the projection’s standard parallels to the specified two-element array of latitudes (in degrees) and returns the projection. If <em>parallels</em> is not specified, returns the current parallels.</p> <h6 id=\"conicEqualArea\"> d3.geo.<b>conicEqualArea</b>()</h6> <p><a href=\"http://bl.ocks.org/mbostock/3734308\"><img src=\"https://camo.githubusercontent.com/705780535b279ffc9e48adb93244f1d55b4149b9/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333733343330382f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3734308/thumbnail.png\"></a></p> <p>The Albers projection, as an <a href=\"http://en.wikipedia.org/wiki/Map_projection#Equal-area\">equal-area</a> projection, is recommended for <a href=\"http://mbostock.github.com/d3/ex/choropleth.html\">choropleths</a> as it preserves the relative areas of geographic features.</p> <h6 id=\"conicEqualArea_parallels\"> conicEqualArea.<b>parallels</b>([<i>parallels</i>])</h6> <p>If <em>parallels</em> is specified, sets the Albers projection’s standard parallels to the specified two-element array of latitudes (in degrees) and returns the projection. If <em>parallels</em> is not specified, returns the current parallels. To minimize distortion, the parallels should be chosen to surround the projection’s <a href=\"#center\">center</a>.</p> <h6 id=\"conicEquidistant\"> d3.geo.<b>conicEquidistant</b>()</h6> <p><a href=\"http://bl.ocks.org/mbostock/3734317\"><img src=\"https://camo.githubusercontent.com/3b51bc98fbddeb73e759d6032aa5b53809950ae4/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333733343331372f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3734317/thumbnail.png\"></a></p> <h6 id=\"conicEquidistant_parallels\"> conicEquidistant.<b>parallels</b>([<i>parallels</i>])</h6> <p>If <em>parallels</em> is specified, sets the projection’s standard parallels to the specified two-element array of latitudes (in degrees) and returns the projection. If <em>parallels</em> is not specified, returns the current parallels.</p> <h6 id=\"equirectangular\"> d3.geo.<b>equirectangular</b>()</h6> <p><a href=\"http://bl.ocks.org/mbostock/3757119\"><img src=\"https://camo.githubusercontent.com/510ed66d8c29e34e1010f2167baabd1d01b5fe3b/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333735373131392f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3757119/thumbnail.png\"></a></p> <p>The equirectangular, or plate carrée projection, is the simplest possible geographic projection: the identity function. It is neither equal-area nor conformal, but is sometimes used for raster data. See <a href=\"http://bl.ocks.org/mbostock/4329423\">raster reprojection</a> for an example; the source image uses the equirectangular projection.</p> <h6 id=\"gnomonic\"> d3.geo.<b>gnomonic</b>()</h6> <p><a href=\"http://bl.ocks.org/mbostock/3757349\"><img src=\"https://camo.githubusercontent.com/3ed0165a82d5ece1428da8817ab58e36027efb5f/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333735373334392f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3757349/thumbnail.png\"></a></p> <p>The gnomonic projection is an azimuthal projection that projects great circles as straight lines. See the <a href=\"http://bl.ocks.org/mbostock/3795048\">interactive gnomonic</a> for an example.</p> <h6 id=\"mercator\"> d3.geo.<b>mercator</b>()</h6> <p><a href=\"http://bl.ocks.org/mbostock/3757132\"><img src=\"https://camo.githubusercontent.com/64176495a5d2700fb37d8099f0385774e729ac97/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333735373133322f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3757132/thumbnail.png\"></a></p> <p>The spherical Mercator projection is commonly used by tiled mapping libraries (such as <a href=\"http://openlayers.org/\">OpenLayers</a> and <a href=\"http://leafletjs.com\">Leaflet</a>). For an example displaying raster tiles with the Mercator projection, see the <a href=\"http://bl.ocks.org/mbostock/4150951\">d3.geo.tile plugin</a>. It is <a href=\"http://en.wikipedia.org/wiki/Map_projection#Conformal\">conformal</a>; however, it introduces severe area distortion at world scale and thus is not recommended for choropleths.</p> <h6 id=\"orthographic\"> d3.geo.<b>orthographic</b>()</h6> <p><a href=\"http://bl.ocks.org/mbostock/3757125\"><img src=\"https://camo.githubusercontent.com/99ea4d70bc1061f6dc0dacb5c1a8c83eeb19e9fa/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333735373132352f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3757125/thumbnail.png\"></a></p> <p>The orthographic projection is an azimuthal projection suitable for displaying a single hemisphere; the point of perspective is at infinity. See the <a href=\"http://bl.ocks.org/mbostock/4183330\">animated world tour</a> and <a href=\"http://bl.ocks.org/mbostock/3795040\">interactive orthographic</a> for examples. For a general perspective projection, see the <a href=\"http://bl.ocks.org/mbostock/3790444\">satellite projection</a>.</p> <h6 id=\"stereographic\"> d3.geo.<b>stereographic</b>()</h6> <p><a href=\"http://bl.ocks.org/mbostock/3757137\"><img src=\"https://camo.githubusercontent.com/c0c64b059b717a8e523289f71e7a8a28c342082f/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333735373133372f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3757137/thumbnail.png\"></a></p> <p>The stereographic projection is another perspective (azimuthal) projection. The point of perspective is on the surface of the sphere, looking in; it is thus commonly used for celestial charts. See the <a href=\"http://bl.ocks.org/mbostock/3763057\">interactive stereographic</a> for an example.</p> <h6 id=\"transverseMercator\"> d3.geo.<b>transverseMercator</b>()</h6> <p><a href=\"http://bl.ocks.org/mbostock/5126418\"><img src=\"https://camo.githubusercontent.com/b7679bbce2a6db23b4cbcfdcf26163539f68333e/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f353132363431382f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/5126418/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/4695821\"><img src=\"https://camo.githubusercontent.com/d3138c19fe707f7634e024288f86bdea67e631a3/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343639353832312f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4695821/thumbnail.png\"></a></p> <p>The transverse Mercator projection.</p> <h2 id=\"raw-projections\"> Raw Projections</h2> <p>D3 exposes several raw projections, designed for reuse when implementing a composite projection (such as <a href=\"http://bl.ocks.org/mbostock/4319903\">Sinu–Mollweide</a>, which combines the raw <a href=\"http://bl.ocks.org/mbostock/3712399\">sinusoidal</a> and <a href=\"http://bl.ocks.org/mbostock/3734336\">Mollweide</a> projections). Raw projections are typically wrapped using <a href=\"#projection\">d3.geo.projection</a> before use. These are point functions that take spherical coordinates λ and φ (in radians) as input and return a two-element array (also in radians) as output. Many raw projections also implement an inverse projection for mapping from planar to spherical coordinates.</p> <h6 id=\"albers_raw\"> d3.geo.albers.<b>raw</b>(φ<sub>0</sub>, φ<sub>1</sub>)</h6> <p>An alias for <a href=\"#conicEqualArea_raw\">d3.geo.conicEqualArea.raw</a>.</p> <h6 id=\"azimuthalEqualArea_raw\"> d3.geo.azimuthalEqualArea.<b>raw</b>\n</h6> <p>The raw <a href=\"#azimuthalEqualArea\">azimuthal equal-area projection</a>.</p> <h6 id=\"azimuthalEquidistant_raw\"> d3.geo.azimuthalEquidistant.<b>raw</b>\n</h6> <p>The raw <a href=\"#azimuthalEquidistant\">azimuthal equidistant projection</a>.</p> <h6 id=\"conicConformal_raw\"> d3.geo.conicConformal.<b>raw</b>(φ<sub>0</sub>, φ<sub>1</sub>)</h6> <p>Returns a raw <a href=\"#conicConformal\">conformal conic projection</a> with the specified parallels in radians.</p> <h6 id=\"conicEqualArea_raw\"> d3.geo.conicEqualArea.<b>raw</b>(φ<sub>0</sub>, φ<sub>1</sub>)</h6> <p>Returns a raw <a href=\"#conicEqualArea\">Albers projection</a> with the specified parallels in radians.</p> <h6 id=\"conicEquidistant_raw\"> d3.geo.conicEquidistant.<b>raw</b>(φ<sub>0</sub>, φ<sub>1</sub>)</h6> <p>Returns a raw <a href=\"#conicEquidistant\">equidistant conic projection</a> with the specified parallels in radians.</p> <h6 id=\"equirectangular_raw\"> d3.geo.equirectangular.<b>raw</b>\n</h6> <p>The raw <a href=\"#equirectangular\">equirectangular projection</a>.</p> <h6 id=\"gnomonic_raw\"> d3.geo.gnomonic.<b>raw</b>\n</h6> <p>The raw <a href=\"#gnomonic\">gnomonic projection</a>.</p> <h6 id=\"mercator_raw\"> d3.geo.mercator.<b>raw</b>\n</h6> <p>The raw <a href=\"#mercator\">Mercator projection</a>.</p> <h6 id=\"orthographic_raw\"> d3.geo.orthographic.<b>raw</b>\n</h6> <p>The raw <a href=\"#orthographic\">orthographic projection</a>.</p> <h6 id=\"stereographic_raw\"> d3.geo.stereographic.<b>raw</b>\n</h6> <p>The raw <a href=\"#stereographic\">stereographic projection</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Geo-Projections\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Geo-Projections</a>\n  </p>\n</div>\n","namespaces":"<h1 class=\"gh-header-title instapaper_title\">Namespaces</h1>   <p>SVG has a different namespace from HTML, so D3 provides a few tools to simplify dealing with namespaces.</p> <h6 id=\"prefix\"> d3.ns.<b>prefix</b>\n</h6> <p>The map of registered namespace prefixes. The default value is:</p> <div class=\"highlight highlight-source-js\"><pre>{\n  svg: \"http://www.w3.org/2000/svg\",\n  xhtml: \"http://www.w3.org/1999/xhtml\",\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\n}</pre></div> <p>Additional prefixes may be assigned as needed to create elements or attributes in other namespaces.</p> <h6 id=\"qualify\"> d3.ns.<b>qualify</b>(<i>name</i>)</h6> <p>Qualifies the specified <em>name</em>, which may have a namespace prefix. If the name contains a colon (\":\"), the substring before the colon is interpreted as the namespace prefix, which must be registered in d3.ns.<strong>prefix</strong>; the return value is an object with <code>space</code> and <code>local</code> attributes containing the full namespace URL and the local name. For example, the result of qualify(\"svg:text\") is:</p> <div class=\"highlight highlight-source-js\"><pre>{space: \"http://www.w3.org/2000/svg\", local: \"text\"}</pre></div> <p>If the name does not contain a colon, this function merely returns the input name. This function is used internally to decide whether to use a namespaced method (such as <code>createElementNS</code>) or a non-namespaced equivalent.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Namespaces\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Namespaces</a>\n  </p>\n</div>\n","math":"<h1 class=\"gh-header-title instapaper_title\">Math</h1>   <h2 id=\"pseudorandom-number-generation\"> Pseudorandom Number Generation</h2> <p>You can use the built-in <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/random\">Math.random</a> to generate uniform distributions. For example, to generate a random integer between 0 and 99 (inclusive), you can say <code>Math.floor(Math.random() * 100)</code>. </p> <h6 id=\"d3_random_normal\"> d3.random.<b>normal</b>([<i>mean</i>, [<i>deviation</i>]])</h6> <p>Returns a function for generating random numbers with a <a href=\"http://en.wikipedia.org/wiki/Normal_distribution\">normal (Gaussian) distribution</a>. The expected value of the generated pseudorandom numbers is <em>mean</em>, with the given standard <em>deviation</em>. If <em>deviation</em> is not specified, it defaults to 1.0; if <em>mean</em> is not specified, it defaults to 0.0.</p> <h6 id=\"d3_random_logNormal\"> d3.random.<b>logNormal</b>([<i>mean</i>, [<i>deviation</i>]])</h6> <p>Returns a function for generating random numbers with a <a href=\"http://en.wikipedia.org/wiki/Log-normal_distribution\">log-normal distribution</a>. The expected value of the random variable’s natural logrithm is <em>mean</em>, with the given standard <em>deviation</em>. If <em>deviation</em> is not specified, it defaults to 1.0; if <em>mean</em> is not specified, it defaults to 0.0.</p> <h6 id=\"d3_random_bates\"> d3.random.<b>bates</b>(<i>count</i>)</h6> <p>Returns a function for generating random numbers with a <a href=\"http://en.wikipedia.org/wiki/Bates_distribution\">Bates distribution</a>. The number of independent variables is specified by <em>count</em>.</p> <h6 id=\"d3_random_irwinHall\"> d3.random.<b>irwinHall</b>(<i>count</i>)</h6> <p>Returns a function for generating random numbers with an <a href=\"http://en.wikipedia.org/wiki/Irwin%E2%80%93Hall_distribution\">Irwin–Hall distribution</a>. The number of independent variables is specified by <em>count</em>.</p> <h2 id=\"2d-transforms\"> 2D Transforms</h2> <h6 id=\"d3_transform\"> d3.<b>transform</b>(<i>string</i>)</h6> <p>Parses the given 2D affine transform string, as defined by SVG's <a href=\"http://www.w3.org/TR/SVG/coords.html#TransformAttribute\">transform attribute</a>. The transform is then decomposed to an object with fields for translate, rotate, x-skew and scale. This behavior is standardized by CSS: see <a href=\"http://www.w3.org/TR/css3-2d-transforms/#matrix-decomposing\">matrix decomposition for animation</a>.</p> <h6 id=\"transform_rotate\"> transform.<b>rotate</b>\n</h6> <p>Returns the rotation angle θ of this transform, in degrees.</p> <h6 id=\"transform_translate\"> transform.<b>translate</b>\n</h6> <p>Returns the [dx, dy] translation of this transform, as a two-element array in local coordinates (typically pixels).</p> <h6 id=\"transform_skew\"> transform.<b>skew</b>\n</h6> <p>Returns the <em>x</em>-skew φ of this transform, in degrees.</p> <h6 id=\"transform_scale\"> transform.<b>scale</b>\n</h6> <p>Returns the [kx, ky] scale of this transform, as a two-element array.</p> <h6 id=\"transform_toString\"> transform.<b>toString()</b>\n</h6> <p>Returns a string representation of this transform, in the form \"translate(dx,dy)rotate(θ)skewX(φ)scale(kx,ky)\".</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Math\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Math</a>\n  </p>\n</div>\n","internals":"<h1 class=\"gh-header-title instapaper_title\">Internals</h1>   <p>Various utilities for implementing reusable components.</p> <h2 id=\"functions\"> Functions</h2> <h6 id=\"functor\"> d3.<b>functor</b>(<i>value</i>)</h6> <p>If the specified <em>value</em> is a function, returns the specified value. Otherwise, returns a function that returns the specified value. This method is used internally as a lazy way of upcasting constant values to functions, in cases where a property may be specified either as a function or a constant. For example, many D3 layouts allow properties to be specified this way, and it simplifies the implementation if we automatically convert constant values to functions.</p> <h6 id=\"rebind\"> d3.<b>rebind</b>(<i>target</i>, <i>source</i>, <i>names…</i>)</h6> <p>Copies the methods with the specified <em>names</em> from <em>source</em> to <em>target</em>, and returns <em>target</em>. Calling one of the named methods on the target object invokes the same-named method on the source object, passing any arguments passed to the target method, and using the source object as the <code>this</code> context. If the source method returns the source object, the target method returns the target object (“setter” method); otherwise, the target method returns the return value of the source method (“getter” mode). The rebind operator allows inherited methods (mix-ins) to be rebound to a subclass on a different object.</p> <h2 id=\"events\"> Events</h2> <p>D3’s behaviors and higher level components, such as the <a href=\"svg-controls#brush\">brush</a>, use d3.dispatch to broadcast custom events.</p> <p><a href=\"http://bl.ocks.org/mbostock/5872848\"><img src=\"https://camo.githubusercontent.com/24399264658cd9800506c25055af45348f8974ee/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f353837323834382f7468756d626e61696c2e706e67\" alt=\"dispatching events\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/5872848/thumbnail.png\"></a></p> <p>For visualizations with coordinated views, d3.dispatch provides a convenient lightweight mechanism for loosely-coupled components. Organizing your code with d3.dispatch can assist with separation of concerns and make your code easier to maintain.</p> <h6 id=\"d3_dispatch\"> d3.<b>dispatch</b>(<i>types…</i>)</h6> <p>Creates a new dispatcher object for the specified <em>types</em>. Each argument is a string representing the name of the event type, such as \"zoom\" or \"change\". The returned object is an associative array; each type name is associated with a dispatch object. For example, if you wanted to create an event dispatcher for \"start\" and \"end\" events, you can say:</p> <div class=\"highlight highlight-source-js\"><pre>var dispatch = d3.dispatch(\"start\", \"end\");</pre></div> <p>Then, you can access the dispatchers for the different event types as <code>dispatch.start</code> and <code>dispatch.end</code>. For example, you might add an event listener:</p> <div class=\"highlight highlight-source-js\"><pre>dispatch.on(\"start\", listener);</pre></div> <p>And then later dispatch an event to all registered listeners:</p> <div class=\"highlight highlight-source-js\"><pre>dispatch.start();</pre></div> <p>For details on how to pass arguments to listeners, see <a href=\"#dispatch\">dispatch</a>.</p> <h6 id=\"dispatch_on\"> dispatch.<b>on</b>(<i>type</i>[, <i>listener</i>])</h6> <p>Adds or removes an event <em>listener</em> for the specified <em>type</em>. The <em>type</em> is a string event type name, such as \"start\" or \"end\". The specified <em>listener</em> is invoked with the context and arguments determined by the caller; see <a href=\"#dispatch\">dispatch</a>. </p> <p>If an event listener was already registered for the same type, the existing listener is removed before the new listener is added. To register multiple listeners for the same event type, the type may be followed by an optional namespace, such as \"click.foo\" and \"click.bar\". Likewise, you can remove all registered listeners for a given namespace by saying <code>dispatch.on(\".foo\", null)</code>.</p> <p>If <em>listener</em> is not specified, returns the currently-assigned listener for the specified <em>type</em>, if any.</p> <h6 id=\"dispatch\"> dispatch.<b><em>type</em></b>(<i>arguments…</i>)</h6> <p>The <em>type</em> method (such as <code>dispatch.start</code> in the above example) notifies each registered listener, passing the listener the specified <em>arguments</em>. The <code>this</code> context will be used as the context of the registered listeners. For example, to invoke all registered listeners with the context <em>foo</em> and the argument <em>bar</em>, say dispatch.call( <em>foo</em>, <em>bar</em> ). Thus, you can pass whatever arguments you want to the listeners; most commonly, you might create an object that represents the event, or pass along the current datum ( <em>d</em> ) and index ( <em>i</em> ). You can also control the \"this\" context of the listeners using <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/Call\">call</a> or <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/Apply\">apply</a>.</p> <p>For example, if you wanted a native \"click\" event to your \"custom\" event, while preserving the context and arguments, you could say:</p> <div class=\"highlight highlight-source-js\"><pre>selection.on(\"click\", function(d, i) {\n  dispatch.custom.apply(this, arguments);\n});</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Internals\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Internals</a>\n  </p>\n</div>\n","geo-streams":"<h1 class=\"gh-header-title instapaper_title\">Geo Streams</h1>   <p>For fast transformations of geometry without temporary copies of geometry objects, D3 uses <strong>geometry streams</strong>. The main <a href=\"#d3_geo_stream\">d3.geo.stream</a> method converts a GeoJSON input object to a stream: a series of method calls on a <em>stream listener</em>. In addition, D3 provides several stream transformations that wrap listeners and transform the geometry. For example, the <a href=\"geo-projections#stream\">projection.stream</a> interface transforms spherical coordinates to Cartesian coordinates, and <a href=\"geo-paths\">d3.geo.path</a> serializes geometry to either SVG or Canvas. Internally, clipping and rotating are also implemented as stream transformations.</p> <h6 id=\"stream\"> d3.geo.<b>stream</b>(<i>object</i>, <i>listener</i>)</h6> <p>Streams the specified <a href=\"http://geojson.org\">GeoJSON</a> <em>object</em> to the specified stream <em>listener</em>. (Despite the name “stream”, these method calls are currently synchronous.) While both features and geometry objects are supported as input, the stream interface only describes the geometry, and thus additional feature properties are not visible to listeners.</p> <h2 id=\"stream-listeners\"> Stream Listeners</h2> <p>Stream listeners must implement several methods to traverse geometry. Listeners are inherently stateful; the meaning of a <a href=\"#point\">point</a> depends on whether the point is inside of a <a href=\"#lineStart\">line</a>, and likewise a line is distinguished from a ring by a <a href=\"#polygonStart\">polygon</a>.</p> <h6 id=\"stream_point\"> listener.<b>point</b>(<i>x</i>, <i>y</i>[, <i>z</i>])</h6> <p>Indicates a point with the specified coordinates <em>x</em> and <em>y</em> (and optionally <em>z</em>). The coordinate system is unspecified and implementation-dependent; for example, <a href=\"geo-projections#stream\">projection streams</a> require spherical coordinates in degrees as input. Outside the context of a polygon or line, a point indicates a point geometry object (<a href=\"http://www.geojson.org/geojson-spec.html#point\">Point</a> or <a href=\"http://www.geojson.org/geojson-spec.html#multipoint\">MultiPoint</a>). Within a line or polygon ring, the point indicates a control point.</p> <h6 id=\"stream_lineStart\"> listener.<b>lineStart</b>()</h6> <p>Indicates the start of a line or ring. Within a polygon, indicates the start of a ring. The first ring of a polygon is the exterior ring, and is typically clockwise. Any subsequent rings indicate holes in the polygon, and are typically counterclockwise.</p> <h6 id=\"stream_lineEnd\"> listener.<b>lineEnd</b>()</h6> <p>Indicates the end of a line or ring. Within a polygon, indicates the end of a ring. Unlike GeoJSON, the redundant closing coordinate of a ring is <em>not</em> indicated via <a href=\"#point\">point</a>, and instead is implied via lineEnd within a polygon. Thus, the given polygon input:</p> <div class=\"highlight highlight-source-json\"><pre>{\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n    [[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]]\n  ]\n}</pre></div> <p>Will produce the following series of method calls on the listener:</p> <div class=\"highlight highlight-source-js\"><pre>listener.polygonStart();\nlistener.lineStart();\nlistener.point(0, 0);\nlistener.point(1, 0);\nlistener.point(1, 1);\nlistener.point(0, 1);\nlistener.lineEnd();\nlistener.polygonEnd();</pre></div> <h6 id=\"stream_polygonStart\"> listener.<b>polygonStart</b>()</h6> <p>Indicates the start of a polygon. The first line of a polygon indicates the exterior ring, and any subsequent lines indicate interior holes.</p> <h6 id=\"stream_polygonEnd\"> listener.<b>polygonEnd</b>()</h6> <p>Indicates the end of a polygon.</p> <h6 id=\"stream_sphere\"> listener.<b>sphere</b>()</h6> <p>Indicates the sphere (the globe; the unit sphere centered at ⟨0,0,0⟩).</p> <h2 id=\"stream-transforms\"> Stream Transforms</h2> <p>A stream transform wraps a stream listener, transforming the geometry before passing it along to the wrapped listener. A <a href=\"geo-projections\">geographic projection</a> is one example of a stream transform. The <a href=\"#transform\">d3.geo.transform</a> class provides an easy way of implementing a custom stream transform.</p> <h6 id=\"transform\"> d3.geo.<b>transform</b>(<i>methods</i>)</h6> <p>Creates a new stream transform using the specified hash of methods. The hash may contain implementations of any of the standard stream listener methods: <a href=\"#stream_sphere\">sphere</a>, <a href=\"#stream_point\">point</a>, <a href=\"#stream_lineStart\">lineStart</a>, <a href=\"#stream_lineEnd\">lineEnd</a>, <a href=\"#stream_polygonStart\">polygonStart</a> and <a href=\"#stream_polygonEnd\">polygonEnd</a>. Any method that is <em>not</em> present in the specified hash will be implemented a pass-through directly to the wrapped stream. To access the wrapped stream within a method, use <code>this.stream</code>. For example, to implement a simple <a href=\"http://bl.ocks.org/mbostock/5663666\">2D matrix transform</a>:</p> <div class=\"highlight highlight-source-js\"><pre>function matrix(a, b, c, d, tx, ty) {\n  return d3.geo.transform({\n    point: function(x, y) { this.stream.point(a * x + b * y + tx, c * x + d * y + ty); },\n  });\n}</pre></div> <p>This transform can then be used in conjunction with <a href=\"geo-paths\">d3.geo.path</a>. For example, to implement a 2D affine transform that flips the <i>y</i>-axis:</p> <div class=\"highlight highlight-source-js\"><pre>var path = d3.geo.path()\n    .projection(matrix(1, 0, 0, -1, 0, height));</pre></div> <h6 id=\"transform_stream\"> transform.<b>stream</b>(<i>listener</i>)</h6> <p>Given the specified stream <em>listener</em>, returns a wrapped stream listener that applies this transform to any input geometry before streaming it to the wrapped listener.</p> <h6 id=\"clipExtent\"> d3.geo.<b>clipExtent</b>()</h6> <p>Create a new stream <a href=\"#transform\">transform</a> that implements axis-aligned rectangle clipping. This is typically used to clip geometry to the viewport after <a href=\"geo-projections\">projecting</a>.</p> <h6 id=\"clipExtent_extent\"> clipExtent.<b>extent</b>([<i>extent</i>])</h6> <p>If <em>extent</em> is specified, sets the clip extent to the specified rectangle [​[<i>x0</i>, <i>y0</i>], [<i>x1</i>, <i>y1</i>]​] and returns this transform. If <em>extent</em> is not specified, returns the current clip extent, which defaults to [​[0, 0], [960, 500]​].</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Geo-Streams\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Geo-Streams</a>\n  </p>\n</div>\n","hierarchy-layout":"<h1 class=\"gh-header-title instapaper_title\">Hierarchy Layout</h1>   <p>The hierarchy layout is an <em>abstract</em> layout that is not used directly, but instead allows code sharing between multiple hierarchical layouts. For an implementation, see one of:</p> <ul> <li> <a class=\"internal present\" href=\"cluster-layout\">Cluster</a> - cluster entities into a dendrogram.</li> <li> <a class=\"internal present\" href=\"pack-layout\">Pack</a> - produce a hierarchical layout using recursive circle-packing.</li> <li> <a class=\"internal present\" href=\"partition-layout\">Partition</a> - recursively partition a node tree into a sunburst or icicle.</li> <li> <a class=\"internal present\" href=\"tree-layout\">Tree</a> - position a tree of nodes tidily.</li> <li> <a class=\"internal present\" href=\"treemap-layout\">Treemap</a> - use recursive spatial subdivision to display a tree of nodes.</li> </ul> <p>Although not a hierarchy layout, the <a href=\"bundle-layout\">bundle layout</a> is also designed to work in conjunction with hierarchies.</p> <h6 id=\"hierarchy\"> d3.layout.<b>hierarchy</b>()</h6> <p>Creates a new hierarchy layout with the default settings: the default sort order is by descending value; the default value accessor assumes each input data is an object with a numeric value attribute; and the default children accessor assumes each input data is an object with a children array.</p> <h6 id=\"_hierarchy\"> <b>hierarchy</b>(<i>root</i>)</h6> <p>Runs the hierarchy layout, returning the array of nodes associated with the specified <em>root</em> node. The input argument to the layout is the root node of the hierarchy, and the output return value is an array representing the computed positions of all nodes. Several attributes are populated on each node:</p> <ul> <li>parent - the parent node, or null for the root.</li> <li>children - the array of child nodes, or null for leaf nodes.</li> <li>value - the node value, as returned by the value accessor.</li> <li>depth - the depth of the node, starting at 0 for the root.</li> </ul> <p>In addition, most hierarchy layouts also compute <em>x</em> and <em>y</em> positions for nodes; see the implementing class for details.</p> <h6 id=\"links\"> hierarchy.<b>links</b>(<i>nodes</i>)</h6> <p>Given the specified array of <em>nodes</em> returns an array of objects representing the links from parent to child for each node. Leaf nodes will not have any links. Each link is an object with two attributes:</p> <ul> <li>source - the parent node (as described above).</li> <li>target - the child node.</li> </ul> <p>This method is useful for retrieving a set of link descriptions suitable for display, often in conjunction with the <a href=\"svg-shapes#diagonal\">diagonal</a> shape generator. For example:</p> <div class=\"highlight highlight-source-js\"><pre>svg.selectAll(\"path\")\n    .data(partition.links(nodes))\n  .enter().append(\"path\")\n    .attr(\"d\", d3.svg.diagonal());</pre></div> <h6 id=\"children\"> hierarchy.<b>children</b>([<i>accessor</i>])</h6> <p>If <em>accessor</em> is specified, sets the specified children accessor function. If <em>accessor</em> is not specified, returns the current children accessor function, which by default assumes that the input data is an object with a children array:</p> <div class=\"highlight highlight-source-js\"><pre>function children(d) {\n  return d.children;\n}</pre></div> <p>Often, it is convenient to load the node hierarchy using <a href=\"requests#d3_json\">d3.json</a>, and represent the input hierarchy as a nested <a href=\"http://json.org\">JSON</a> object. For example:</p> <div class=\"highlight highlight-source-js\"><pre>{\n \"name\": \"flare\",\n \"children\": [\n  {\n   \"name\": \"analytics\",\n   \"children\": [\n    {\n     \"name\": \"cluster\",\n     \"children\": [\n      {\"name\": \"AgglomerativeCluster\", \"size\": 3938},\n      {\"name\": \"CommunityStructure\", \"size\": 3812},\n      {\"name\": \"MergeEdge\", \"size\": 743}\n     ]\n    },\n    {\n     \"name\": \"graph\",\n     \"children\": [\n      {\"name\": \"BetweennessCentrality\", \"size\": 3534},\n      {\"name\": \"LinkDistance\", \"size\": 5731}\n     ]\n    }\n   ]\n  }\n ]\n}</pre></div> <p>The children accessor is first invoked for root node in the hierarchy. If the accessor returns null, then the node is assumed to be a leaf node and the layout traversal terminates. Otherwise, the accessor should return an array of data elements representing the child nodes. The accessor is called with arguments <em>node</em> and <em>depth</em>.</p> <h6 id=\"sort\"> hierarchy.<b>sort</b>([<i>comparator</i>])</h6> <p>If <em>comparator</em> is specified, sets the sort order of sibling nodes for the layout using the specified comparator function. If <em>comparator</em> is not specified, returns the current group sort order, which defaults to descending order by the associated input data's numeric value attribute:</p> <div class=\"highlight highlight-source-js\"><pre>function comparator(a, b) {\n  return b.value - a.value;\n}</pre></div> <p>The comparator function is invoked for pairs of nodes, being passed the input data for each node. A null comparator disables sorting and uses tree traversal order. Comparator functions may also be implemented using <a href=\"arrays#d3_ascending\">d3.ascending</a> or <a href=\"arrays#d3_descending\">d3.descending</a>.</p> <h6 id=\"value\"> hierarchy.<b>value</b>([<i>value</i>])</h6> <p>If <em>value</em> is specified, sets the value accessor to the specified function. If <em>value</em> is not specified, returns the current value accessor. The default accessor assumes that the input data is an object with a numeric value attribute:</p> <div class=\"highlight highlight-source-js\"><pre>function value(d) {\n  return d.value;\n}</pre></div> <p>The value accessor is invoked for each input data element, and must return a number representing the numeric value of the node. For area-proportional layouts such as treemaps, this value is used to set the area of each node proportionally to the value; for other hierarchical layouts, the value has no effect on the layout.</p> <h6 id=\"revalue\"> hierarchy.<b>revalue</b>(<i>root</i>)</h6> <p>Re-evaluates the values of each node in the specified tree starting at <em>root</em>, without re-sorting or recomputing the child nodes. This method can be used to recompute the values of each node without making any structural changes to the hierarchy. Primarily, it exists to support <a href=\"treemap-layout#sticky\">sticky treemaps</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Hierarchy-Layout\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Hierarchy-Layout</a>\n  </p>\n</div>\n","localization":"<h1 class=\"gh-header-title instapaper_title\">Localization</h1>   <p>The formatting of numbers, dates and currencies varies by language and locale. While the default build of D3 is intended for U.S. English, you can change the behavior of D3’s formatters by loading new locales as needed.</p> <h6 id=\"locale\"> d3.<b>locale</b>(<i>definition</i>)</h6> <p>Returns a new locale given the specified <em>definition</em>. The locale definition must include the following properties for number formatting:</p> <ul> <li>decimal - the decimal place string (e.g., <code>\".\"</code>).</li> <li>thousands - the group separator string (e.g., <code>\",\"</code>).</li> <li>grouping - the array of group sizes (e.g., <code>[3]</code>), cycled as needed.</li> <li>currency - the currency prefix and suffix strings (e.g., <code>[\"$\", \"\"]</code>).</li> </ul> <p>(Note that the <em>thousands</em> property is a slight misnomer, as the grouping definition allows groups other than thousands.)</p> <p>The locale definition must also include the following properties for time formatting:</p> <ul> <li>dateTime - the date and time (%c) format string (e.g., <code>\"%a %b %e %X %Y\")</code>.</li> <li>date - the date (%x) format string (e.g., <code>\"%m/%d/%Y\"</code>).</li> <li>time - the time (%X) format string (e.g., <code>\"%H:%M:%S\"</code>).</li> <li>periods - the locale’s A.M. and P.M. equivalents (e.g., <code>[\"AM\", \"PM\"]</code>).</li> <li>days - the full names of the weekdays, starting with Sunday.</li> <li>shortDays - the abbreviated names of the weekdays, starting with Sunday.</li> <li>months - the full names of the months (starting with January).</li> <li>shortMonths - the abbreviated names of the months (starting with January).</li> </ul> <p>For example, the default U.S. English (en_US) locale is defined as:</p> <div class=\"highlight highlight-source-json\"><pre>{\n  \"decimal\": \".\",\n  \"thousands\": \",\",\n  \"grouping\": [3],\n  \"currency\": [\"$\", \"\"],\n  \"dateTime\": \"%a %b %e %X %Y\",\n  \"date\": \"%m/%d/%Y\",\n  \"time\": \"%H:%M:%S\",\n  \"periods\": [\"AM\", \"PM\"],\n  \"days\": [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n  \"shortDays\": [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  \"months\": [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n  \"shortMonths\": [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n}</pre></div> <p>A locale for Russian (ru_RU) might be defined as:</p> <div class=\"highlight highlight-source-json\"><pre>{\n  \"decimal\": \",\",\n  \"thousands\": \"\\u00A0\",\n  \"grouping\": [3],\n  \"currency\": [\"\", \" руб.\"],\n  \"dateTime\": \"%A, %e %B %Y г. %X\",\n  \"date\": \"%d.%m.%Y\",\n  \"time\": \"%H:%M:%S\",\n  \"periods\": [\"AM\", \"PM\"],\n  \"days\": [\"воскресенье\", \"понедельник\", \"вторник\", \"среда\", \"четверг\", \"пятница\", \"суббота\"],\n  \"shortDays\": [\"вс\", \"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\"],\n  \"months\": [\"января\", \"февраля\", \"марта\", \"апреля\", \"мая\", \"июня\", \"июля\", \"августа\", \"сентября\", \"октября\", \"ноября\", \"декабря\"],\n  \"shortMonths\": [\"янв\", \"фев\", \"мар\", \"апр\", \"май\", \"июн\", \"июл\", \"авг\", \"сен\", \"окт\", \"ноя\", \"дек\"]\n}</pre></div> <h6 id=\"locale_numberFormat\"> locale.<b>numberFormat</b>(<i>specifier</i>)</h6> <p>The locale’s equivalent of <a href=\"formatting#d3_format\">d3.format</a>.</p> <h6 id=\"locale_timeFormat\"> locale.<b>timeFormat</b>(<i>specifier</i>)</h6> <p>The locale’s equivalent of <a href=\"time-formatting#format\">d3.time.format</a>.</p> <h6 id=\"locale_timeFormat_utc\"> locale.timeFormat.<b>utc</b>(<i>specifier</i>)</h6> <p>The locale’s equivalent of <a href=\"time-formatting#format_utc\">d3.time.format.utc</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Localization\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Localization</a>\n  </p>\n</div>\n","bundle-layout":"<h1 class=\"gh-header-title instapaper_title\">Bundle Layout</h1>   <p>Implements Danny Holten's <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.220.8113&amp;rep=rep1&amp;type=pdf\">hierarchical edge bundling</a> algorithm. For each input link, a path is computed that travels through the tree, up the parent hierarchy to the least common ancestor, and then back down to the destination node. This sequence of nodes can then be used in conjunction with other <a href=\"hierarchy-layout\">hierarchical layouts</a>, such as <a href=\"cluster-layout\">cluster</a> to generate bundled splines between nodes:</p> <p><img src=\"https://github.com/mbostock/d3/wiki/bundle.png\" alt=\"bundle\"></p> <p>For example, consider this visualization of <a href=\"http://bl.ocks.org/mbostock/1044242\">software dependencies</a>.</p> <h6 id=\"bundle\"> d3.layout.<b>bundle</b>()</h6> <p>Constructs a new default bundle layout. Currently, the bundle layout is stateless and thus only has a default configuration. The returned layout object is both an object and a function. That is: you can call the layout like any other function, and the layout has additional methods that change its behavior. Like other classes in D3, layouts follow the method chaining pattern where setter methods return the layout itself, allowing multiple setters to be invoked in a concise statement.</p> <h6 id=\"_bundle\"> <b>bundle</b>(<i>links</i>)</h6> <p>Evaluates the bundle layout on the specified array of <em>links</em>, returning the computed path from the source to the target, through the <a href=\"http://en.wikipedia.org/wiki/Lowest_common_ancestor\">least common ancestor</a>. Each input link must have two attributes:</p> <ul> <li>source - the source node.</li> <li>target - the target node.</li> </ul> <p>Furthermore, each node must have one attribute:</p> <ul> <li>parent - the parent node.</li> </ul> <p>This is a subset of the fields generated by the <a href=\"hierarchy-layout\">hierarchy layouts</a>. The return value of the layout is an array of paths, where each path is represented as an array of nodes. Thus, the bundle layout does not compute the basis splines directly; instead, it returns an array of nodes which implicitly represent the control points of the spline. You can use this array in conjunction with <a href=\"svg-shapes#line\">d3.svg.line</a> or <a href=\"svg-shapes#line_radial\">d3.svg.line.radial</a> to generate the splines themselves. For example, if you were to use a <a href=\"cluster-layout\">cluster</a>:</p> <div class=\"highlight highlight-source-js\"><pre>var cluster = d3.layout.cluster()\n    .size([2 * Math.PI, 500]);</pre></div> <p>A suitable line generator for hierarchical edge bundling might be:</p> <div class=\"highlight highlight-source-js\"><pre>var line = d3.svg.line.radial()\n    .interpolate(\"bundle\")\n    .tension(.85)\n    .radius(function(d) { return d.y; })\n    .angle(function(d) { return d.x; });</pre></div> <p>The bundle layout is designed to work in conjunction with the line generator's \"bundle\" interpolation mode, though technically speaking you can use any interpolator or shape generator. Holten's bundle strength parameter is exposed as the line's <a href=\"svg-shapes#line_tension\">tension</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Bundle-Layout\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Bundle-Layout</a>\n  </p>\n</div>\n","pack-layout":"<h1 class=\"gh-header-title instapaper_title\">Pack Layout</h1>   <p>Enclosure diagrams use containment (nesting) to represent the hierarchy. The size of each leaf node’s circle reveals a quantitative dimension of each data point. The enclosing circles show the approximate cumulative size of each subtree, but note that because of wasted space there is some distortion between levels; only the leaf nodes can be compared accurately. Although <a href=\"http://en.wikipedia.org/wiki/Circle_packing\">circle packing</a> does not use space as efficiently as a <a class=\"internal present\" href=\"treemap-layout\">treemap</a>, the “wasted” space more prominently reveals the hierarchy.</p> <p>This layout is based on <a href=\"https://dl.acm.org/citation.cfm?id=1124851\">Visualization of large hierarchical data by circle packing</a> by Wang et al.</p> <p><a href=\"http://bl.ocks.org/mbostock/4063530\"><img src=\"https://github.com/mbostock/d3/wiki/pack.png\" alt=\"pack\"></a></p> <p>By flattening the hierarchy, the <strong>pack layout</strong> can also be used to create <a href=\"http://en.wikipedia.org/wiki/Bubble_chart\">bubble charts</a>:</p> <p><a href=\"http://bl.ocks.org/mbostock/4063269\"><img src=\"https://github.com/mbostock/d3/wiki/bubble.png\" alt=\"bubble\"></a></p> <p>Like other classes in D3, layouts follow the method chaining pattern where setter methods return the layout itself, allowing multiple setters to be invoked in a concise statement.</p> <h6 id=\"pack\"> d3.layout.<b>pack</b>()</h6> <p>Creates a new pack layout with the default settings: the default sort order is by ascending value; the default children accessor assumes each input data is an object with a children array; the default size is 1×1.</p> <h6 id=\"_pack\"> <b>pack</b>(<i>root</i>) <br> pack.<b>nodes</b>(<i>root</i>)</h6> <p>Runs the pack layout, returning the array of nodes associated with the specified <em>root</em> node. The cluster layout is part of D3's family of <a href=\"hierarchy-layout\">hierarchical layouts</a>. These layouts follow the same basic structure: the input argument to the layout is the <em>root</em> node of the hierarchy, and the output return value is an array representing the computed positions of all nodes. Several attributes are populated on each node:</p> <ul> <li> <code>parent</code> - the parent node, or null for the root.</li> <li> <code>children</code> - the array of child nodes, or null for leaf nodes.</li> <li> <code>value</code> - the node value, as returned by the value accessor.</li> <li> <code>depth</code> - the depth of the node, starting at 0 for the root.</li> <li> <code>x</code> - the computed <em>x</em>-coordinate of the node position.</li> <li> <code>y</code> - the computed <em>y</em>-coordinate of the node position.</li> <li> <code>r</code> - the computed node radius.</li> </ul> <h6 id=\"links\"> pack.<b>links</b>(<i>nodes</i>)</h6> <p>Given the specified array of <em>nodes</em>, such as those returned by <a href=\"pack-layout#nodes\">nodes</a>, returns an array of objects representing the links from parent to child for each node. Leaf nodes will not have any links. Each link is an object with two attributes:</p> <ul> <li>source - the parent node (as described above).</li> <li>target - the child node.</li> </ul> <p>This method is useful for retrieving a set of link descriptions suitable for display, often in conjunction with the <a href=\"svg-shapes#diagonal\">diagonal</a> shape generator. For example:</p> <div class=\"highlight highlight-source-js\"><pre>svg.selectAll(\"path\")\n    .data(cluster.links(nodes))\n  .enter().append(\"path\")\n    .attr(\"d\", d3.svg.diagonal());</pre></div> <h6 id=\"children\"> pack.<b>children</b>([<i>children</i>])</h6> <p>If <em>children</em> is specified, sets the specified children accessor function. If <em>children</em> is not specified, returns the current children accessor function, which by default assumes that the input data is an object with a children array:</p> <div class=\"highlight highlight-source-js\"><pre>function children(d) {\n  return d.children;\n}</pre></div> <p>Often, it is convenient to load the node hierarchy using <a href=\"requests#d3_json\">d3.json</a>, and represent the input hierarchy as a nested <a href=\"http://json.org\">JSON</a> object. For example:</p> <div class=\"highlight highlight-source-js\"><pre>{\n \"name\": \"flare\",\n \"children\": [\n  {\n   \"name\": \"analytics\",\n   \"children\": [\n    {\n     \"name\": \"cluster\",\n     \"children\": [\n      {\"name\": \"AgglomerativeCluster\", \"size\": 3938},\n      {\"name\": \"CommunityStructure\", \"size\": 3812},\n      {\"name\": \"MergeEdge\", \"size\": 743}\n     ]\n    },\n    {\n     \"name\": \"graph\",\n     \"children\": [\n      {\"name\": \"BetweennessCentrality\", \"size\": 3534},\n      {\"name\": \"LinkDistance\", \"size\": 5731}\n     ]\n    }\n   ]\n  }\n ]\n}</pre></div> <p>The children accessor is first invoked for root node in the hierarchy. If the accessor returns <code>null</code>, then the node is assumed to be a leaf node and the layout traversal terminates. Otherwise, the accessor should return an array of data elements representing the child nodes.</p> <h6 id=\"sort\"> pack.<b>sort</b>([<i>comparator</i>])</h6> <p>If <em>comparator</em> is specified, sets the sort order of sibling nodes for the layout using the specified comparator function. If <em>comparator</em> is not specified, returns the current group sort order, which defaults to ascending order by the associated input data's numeric <code>value</code> attribute:</p> <div class=\"highlight highlight-source-js\"><pre>function comparator(a, b) {\n  return a.value - b.value;\n}</pre></div> <p>The comparator function is invoked for pairs of nodes, being passed the input data for each node. A null comparator disables sorting and uses tree traversal order. Comparator functions may also be implemented using <a href=\"arrays#d3_ascending\">d3.ascending</a> or <a href=\"arrays#d3_descending\">d3.descending</a>.</p> <h6 id=\"value\"> pack.<b>value</b>([<i>value</i>])</h6> <p>If <em>value</em> is specified, sets the value accessor to the specified function. If <em>value</em> is not specified, returns the current value accessor, which assumes that the input data is an object with a numeric <code>value</code> attribute:</p> <div class=\"highlight highlight-source-js\"><pre>function value(d) {\n  return d.value;\n}</pre></div> <p>The value accessor is invoked for each input data element, and must return a number representing the numeric value of the node. This value is used to set the area of each circle proportionally to the value. However, note that circle size is strictly comparable only between leaf nodes; internal nodes cannot be compared accurately, as there is empty space between packed child circles and their parent.</p> <h6 id=\"size\"> pack.<b>size</b>([<i>size</i>])</h6> <p>If <em>size</em> is specified, sets the available layout size to the specified two-element array of numbers representing <em>x</em> and <em>y</em>. If <em>size</em> is not specified, returns the current size, which defaults to 1×1.</p> <h6 id=\"radius\"> pack.<b>radius</b>([<i>radius</i>])</h6> <p>If <em>radius</em> is specified, sets the radius function for computing the radius of each node. If <em>radius</em> is null, as it is by default, the radius is determined automatically from the node value, scaled to fit the layout size. If <em>radius</em> is not specified, returns the current radius function, which defaults to null. The <em>radius</em> can also be specified as a constant number for uniform circle size.</p> <h6 id=\"padding\"> pack.<b>padding</b>([<i>padding</i>])</h6> <p>If <em>padding</em> is specified, sets the approximate padding between adjacent circles, in pixels. If <em>padding</em> is not specified, returns the current padding, which defaults to zero.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Pack-Layout\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Pack-Layout</a>\n  </p>\n</div>\n","pie-layout":"<h1 class=\"gh-header-title instapaper_title\">Pie Layout</h1>   <p>The pie layout is a convenience for computing the start and end angles of arcs that comprise a pie or donut chart:</p> <p><img src=\"https://github.com/mbostock/d3/wiki/pie.png\" alt=\"pie\"></p> <p>You don't <em>need</em> to use the pie layout to create a pie chart; you can just use the <a href=\"svg-shapes#arc\">arc shape</a> directly if you prefer. The pie layout simply makes it easier to convert an array of data into an array of objects with startAngle and endAngle attributes that range from 0 to 2π, which you can then pass to the arc shape generator.</p> <h6 id=\"pie\"> d3.layout.<b>pie</b>()</h6> <p>Constructs a new pie function with the default value accessor (number), sort comparator (descending value), start angle (0) and end angle (2π). The returned layout object is both an object and a function. That is: you can call the layout like any other function, and the layout has additional methods that change its behavior. Like other classes in D3, layouts follow the method chaining pattern where setter methods return the layout itself, allowing multiple setters to be invoked in a concise statement.</p> <h6 id=\"_pie\"> <b>pie</b>(<i>values</i>[, <i>index</i>])</h6> <p>Evaluates the pie function on the specified array of <em>values</em>. An optional <em>index</em> may be specified, which is passed along to the start and end angle functions. The return value is an array of arc descriptors:</p> <ul> <li>value - the data value, returned by the <em>value</em> accessor.</li> <li>startAngle - the start angle of the arc in radians.</li> <li>endAngle - the end angle of the arc in radians.</li> <li>padAngle - the pad angle of the arc in radians.</li> <li>data - the original datum for this arc.</li> </ul> <p>The elements are returned in the original order, matching <em>values</em>, even if a <a href=\"#sort\">sort</a> order is applied; this preserves the original index of each element in the values array, which is nice if you are using the index to generate a categorical color or other display property.</p> <h6 id=\"value\"> pie.<b>value</b>([<i>accessor</i>])</h6> <p>Specifies how to extract a value from the associated data (e.g. sets the accessor function for the pie layout to use); <em>accessor</em> is a function which is invoked on each input value passed to <a href=\"#_pie\">pie</a>, equivalent to calling <em>values.map(accessor)</em> before computing the pie layout. The function is passed two arguments: the current datum and the current index. The default value function is the built-in <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>, which is similar to the identity function. If <em>accessor</em> is not specified, returns the current value accessor.</p> <h6 id=\"sort\"> pie.<b>sort</b>([<i>comparator</i>])</h6> <p>If <em>comparator</em> is specified, sets the sort order of data for the layout using the specified comparator function. Pass <code>null</code> to disable sorting. If <em>comparator</em> is not specified, returns the current sort order. The sort order defaults to descending value. Sorting preserves the index (and z-index) of input values, affecting only the computed angles. The comparator function is invoked for pairs of data elements from the <em>values</em> array passed to <a href=\"#_pie\">pie</a>. Comparator functions may also be implemented using <a href=\"arrays#d3_ascending\">d3.ascending</a> or <a href=\"arrays#d3_descending\">d3.descending</a>.</p> <h6 id=\"startAngle\"> pie.<b>startAngle</b>([<i>angle</i>])</h6> <p>If <em>angle</em> is specified, sets the overall start angle of the pie layout to the specified value in radians. If <em>angle</em> is not specified, returns the current value, which defaults to 0. The start angle can be specified either as a constant or as a function; if a function, it is evaluated once when the <a href=\"#_pie\">pie</a> function is called, being passed the current <em>data</em> and <em>index</em>.</p> <h6 id=\"endAngle\"> pie.<b>endAngle</b>([<i>angle</i>])</h6> <p>If <em>angle</em> is specified, sets the overall end angle of the pie layout to the specified value in radians. If <em>angle</em> is not specified, returns the current value, which defaults to 2π. The end angle can be specified either as a constant or as a function; if a function, it is evaluated once when the <a href=\"#_pie\">pie</a> function is called, being passed the current <em>data</em> and <em>index</em>.</p> <h6 id=\"padAngle\"> pie.<b>padAngle</b>([<i>angle</i>])</h6> <p>If <em>angle</em> is specified, sets the pad angle of the pie layout to the specified value in radians. Adjacent arcs <a href=\"http://bl.ocks.org/mbostock/f098d146315be4d1db52\">will be separated</a> by the pad angle. If <em>angle</em> is not specified, returns the current value, which defaults to 0. The pad angle can be specified either as a constant or as a function; if a function, it is evaluated once when the <a href=\"#_pie\">pie</a> function is called, being passed the current <em>data</em> and <em>index</em>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Pie-Layout\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Pie-Layout</a>\n  </p>\n</div>\n","ordinal-scales":"<h1 class=\"gh-header-title instapaper_title\">Ordinal Scales</h1>   <p><strong>Scales</strong> are functions that map from an input domain to an output range. <strong>Ordinal</strong> scales have a discrete domain, such as a set of names or categories. There are also <a class=\"internal present\" href=\"quantitative-scales\">quantitative scales</a>, which have a continuous domain, such as the set of real numbers. Scales are an optional feature in D3; you don't have to use them, if you prefer to do the math yourself. However, using scales can greatly simplify the code needed to map a dimension of data to a visual representation.</p> <p>A scale object, such as that returned by <a href=\"ordinal-scales#ordinal\">d3.scale.ordinal</a>, is both an object and a function. That is: you can call the scale like any other function, and the scale has additional methods that change its behavior. Like other classes in D3, scales follow the method chaining pattern where setter methods return the scale itself, allowing multiple setters to be invoked in a concise statement.</p> <h6 id=\"ordinal\"> d3.scale.<b>ordinal</b>()</h6> <p>Constructs a new ordinal scale with an empty domain and an empty range. The ordinal scale is invalid (always returning undefined) until an output range is specified.</p> <h6 id=\"_ordinal\"> <b>ordinal</b>(<i>x</i>)</h6> <p>Given a value <em>x</em> in the input domain, returns the corresponding value in the output range.</p> <p>If the range was specified explicitly (as by <a href=\"#ordinal_range\">range</a>, but not <a href=\"#ordinal_rangeBands\">rangeBands</a>, <a href=\"#ordinal_rangeRoundBands\">rangeRoundBands</a> or <a href=\"#ordinal_rangePoints\">rangePoints</a>), <em>and</em> the given value <em>x</em> is not in the scale’s <a href=\"#ordinal_domain\">domain</a>, then <em>x</em> is implicitly added to the domain; subsequent invocations of the scale given the same value <em>x</em> will return the same value <em>y</em> from the range.</p> <h6 id=\"ordinal_domain\"> ordinal.<b>domain</b>([<i>values</i>])</h6> <p>If <em>values</em> is specified, sets the input domain of the ordinal scale to the specified array of values. The first element in <em>values</em> will be mapped to the first element in the output range, the second domain value to the second range value, and so on. Domain values are stored internally in an associative array as a mapping from value to index; the resulting index is then used to retrieve a value from the output range. Thus, an ordinal scale's values must be coercible to a string, and the stringified version of the domain value uniquely identifies the corresponding range value. If <em>values</em> is not specified, this method returns the current domain.</p> <p>Setting the domain on an ordinal scale is optional. If no domain is set, a <a href=\"#ordinal_range\">range</a> must be set explicitly. Then, each unique value that is passed to the scale function will be assigned a new value from the output range; in other words, the domain will be inferred implicitly from usage. Although domains may thus be constructed implicitly, it is still a good idea to assign the ordinal scale's domain explicitly to ensure deterministic behavior, as inferring the domain from usage will be dependent on ordering.</p> <h6 id=\"ordinal_range\"> ordinal.<b>range</b>([<i>values</i>])</h6> <p>If <em>values</em> is specified, sets the output range of the ordinal scale to the specified array of values. The first element in the domain will be mapped to the first element in <em>values</em>, the second domain value to the second range value, and so on. If there are fewer elements in the range than in the domain, the scale will recycle values from the start of the range. If <em>values</em> is not specified, this method returns the current output range.</p> <p>This method is intended for when the set of discrete output values is computed explicitly, such as a set of categorical colors. In other cases, such as determining the layout of an ordinal scatterplot or bar chart, you may find the <a href=\"ordinal-scales#ordinal_rangePoints\">rangePoints</a> or <a href=\"ordinal-scales#ordinal_rangeBands\">rangeBands</a> operators more convenient.</p> <h6 id=\"ordinal_rangePoints\"> ordinal.<b>rangePoints</b>(<i>interval</i>[, <i>padding</i>])</h6> <p>Sets the output range from the specified continuous <em>interval</em>. The array <em>interval</em> contains two elements representing the minimum and maximum numeric value. This interval is subdivided into <em>n</em> evenly-spaced <strong>points</strong>, where <em>n</em> is the number of (unique) values in the input domain. The first and last point may be offset from the edge of the interval according to the specified <em>padding</em>, which defaults to zero. The <em>padding</em> is expressed as a multiple of the spacing between points. A reasonable value is 1.0, such that the first and last point will be offset from the minimum and maximum value by half the distance between points.</p> <p><img src=\"https://camo.githubusercontent.com/1f2b6fd134f82ce192002ec3944eccb09c748abe/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f3233303534312f3533383638392f34366438373131382d633139332d313165322d383361622d3230303864663763333661612e706e67\" alt=\"rangepoints\" data-canonical-src=\"https://f.cloud.github.com/assets/230541/538689/46d87118-c193-11e2-83ab-2008df7c36aa.png\"></p> <div class=\"highlight highlight-source-js\"><pre>var o = d3.scale.ordinal()\n    .domain([1, 2, 3, 4])\n    .rangePoints([0, 100]);\n\no.range(); // [0, 33.333333333333336, 66.66666666666667, 100]</pre></div> <h6 id=\"ordinal_rangeRoundPoints\"> ordinal.<b>rangeRoundPoints</b>(<i>interval</i>[, <i>padding</i>])</h6> <p>Like <a href=\"#ordinal_rangePoints\">rangePoints</a>, except guarantees that the range values are integers so as to avoid antialiasing artifacts.</p> <div class=\"highlight highlight-source-js\"><pre>var o = d3.scale.ordinal()\n    .domain([1, 2, 3, 4])\n    .rangeRoundPoints([0, 100]);\n\no.range(); // [1, 34, 67, 100]</pre></div> <p>Note that rounding necessarily introduces additional outer padding which is, on average, proportional to the length of the domain. For example, for a domain of size 50, an additional 25px of outer padding on either side may be required. Modifying the range extent to be closer to a multiple of the domain length may reduce the additional padding.</p> <div class=\"highlight highlight-source-js\"><pre>var o = d3.scale.ordinal()\n    .domain(d3.range(50))\n    .rangeRoundPoints([0, 95]);\n\no.range(); // [23, 24, 25, …, 70, 71, 72]\no.rangeRoundPoints([0, 100]);\no.range(); // [1, 3, 5, …, 95, 97, 98]</pre></div> <p>(Alternatively, you could round the output of the scale manually or apply shape-rendering: crispEdges. However, this will result in irregularly spaced points.)</p> <h6 id=\"ordinal_rangeBands\"> ordinal.<b>rangeBands</b>(<i>interval</i>[, <i>padding</i>[, <i>outerPadding</i>]])</h6> <p>Sets the output range from the specified continuous <em>interval</em>. The array <em>interval</em> contains two elements representing the minimum and maximum numeric value. This interval is subdivided into <em>n</em> evenly-spaced <strong>bands</strong>, where <em>n</em> is the number of (unique) values in the input domain. The bands may be offset from the edge of the interval and other bands according to the specified <em>padding</em>, which defaults to zero. The padding is typically in the range [0,1] and corresponds to the amount of space in the range interval to allocate to padding. A value of 0.5 means that the band width will be equal to the padding width. The <em>outerPadding</em> argument is for the entire group of bands; a value of 0 means there will be padding only between rangeBands.</p> <p><img src=\"https://camo.githubusercontent.com/12675eaff20815f41bccd4d1c50643c2b531052e/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f3233303534312f3533383638382f34366332393863302d633139332d313165322d396137652d3135643961626366616239622e706e67\" alt=\"rangebands\" data-canonical-src=\"https://f.cloud.github.com/assets/230541/538688/46c298c0-c193-11e2-9a7e-15d9abcfab9b.png\"></p> <div class=\"highlight highlight-source-js\"><pre>var o = d3.scale.ordinal()\n    .domain([1, 2, 3])\n    .rangeBands([0, 100]);\n\no.rangeBand(); // 33.333333333333336\no.range(); // [0, 33.333333333333336, 66.66666666666667]\no.rangeExtent(); // [0, 100]</pre></div> <h6 id=\"ordinal_rangeRoundBands\"> ordinal.<b>rangeRoundBands</b>(<i>interval</i>[, <i>padding</i>[, <i>outerPadding</i>]])</h6> <p>Like <a href=\"ordinal-scales#ordinal_rangeBands\">rangeBands</a>, except guarantees that range values and band width are integers so as to avoid antialiasing artifacts.</p> <div class=\"highlight highlight-source-js\"><pre>var o = d3.scale.ordinal()\n    .domain([1, 2, 3])\n    .rangeRoundBands([0, 100]);\n\no.range(); // [1, 34, 67]\no.rangeBand(); // 33\no.rangeExtent(); // [0, 100]</pre></div> <p>Note that rounding necessarily introduces additional outer padding which is, on average, proportional to the length of the domain. For example, for a domain of size 50, an additional 25px of outer padding on either side may be required. Modifying the range extent to be closer to a multiple of the domain length may reduce the additional padding.</p> <div class=\"highlight highlight-source-js\"><pre>var o = d3.scale.ordinal()\n    .domain(d3.range(50))\n    .rangeRoundBands([0, 95]);\n\no.range(); // [23, 24, 25, …, 70, 71, 72]\n\no.rangeRoundBands([0, 100]);\no.range(); // [0, 2, 4, …, 94, 96, 98]</pre></div> <p>(Alternatively, you could round the output of the scale manually or apply shape-rendering: crispEdges. However, this will result in irregularly spaced and sized bands.)</p> <h6 id=\"ordinal_rangeBand\"> ordinal.<b>rangeBand</b>()</h6> <p>Returns the band width. When the scale’s range is configured with rangeBands or rangeRoundBands, the scale returns the lower value for the given input. The upper value can then be computed by offsetting by the band width. If the scale’s range is set using range or rangePoints, the band width is zero.</p> <h6 id=\"ordinal_rangeExtent\"> ordinal.<b>rangeExtent</b>()</h6> <p>Returns a two-element array representing the extent of the scale's range, i.e., the smallest and largest values.</p> <h6 id=\"ordinal_copy\"> ordinal.<b>copy</b>()</h6> <p>Returns an exact copy of this ordinal scale. Changes to this scale will not affect the returned scale, and vice versa.</p> <h2 id=\"categorical-colors\"> Categorical Colors</h2> <h6 id=\"category10\"> d3.scale.<b>category10</b>()</h6> <p>Constructs a new ordinal scale with a range of ten categorical colors:</p> <p><img src=\"https://github.com/mbostock/d3/wiki/1f77b4.png\" alt=\"1f77b4\"> #1f77b4<br> <img src=\"https://github.com/mbostock/d3/wiki/ff7f0e.png\" alt=\"ff7f0e\"> #ff7f0e<br> <img src=\"https://github.com/mbostock/d3/wiki/2ca02c.png\" alt=\"2ca02c\"> #2ca02c<br> <img src=\"https://github.com/mbostock/d3/wiki/d62728.png\" alt=\"d62728\"> #d62728<br> <img src=\"https://github.com/mbostock/d3/wiki/9467bd.png\" alt=\"9467bd\"> #9467bd<br> <img src=\"https://github.com/mbostock/d3/wiki/8c564b.png\" alt=\"8c564b\"> #8c564b<br> <img src=\"https://github.com/mbostock/d3/wiki/e377c2.png\" alt=\"e377c2\"> #e377c2<br> <img src=\"https://github.com/mbostock/d3/wiki/7f7f7f.png\" alt=\"7f7f7f\"> #7f7f7f<br> <img src=\"https://github.com/mbostock/d3/wiki/bcbd22.png\" alt=\"bcbd22\"> #bcbd22<br> <img src=\"https://github.com/mbostock/d3/wiki/17becf.png\" alt=\"17becf\"> #17becf<br></p> <h6 id=\"category20\"> d3.scale.<b>category20</b>()</h6> <p>Constructs a new ordinal scale with a range of twenty categorical colors:</p> <p><img src=\"https://github.com/mbostock/d3/wiki/1f77b4.png\" alt=\"1f77b4\"> #1f77b4<br> <img src=\"https://github.com/mbostock/d3/wiki/aec7e8.png\" alt=\"aec7e8\"> #aec7e8<br> <img src=\"https://github.com/mbostock/d3/wiki/ff7f0e.png\" alt=\"ff7f0e\"> #ff7f0e<br> <img src=\"https://github.com/mbostock/d3/wiki/ffbb78.png\" alt=\"ffbb78\"> #ffbb78<br> <img src=\"https://github.com/mbostock/d3/wiki/2ca02c.png\" alt=\"2ca02c\"> #2ca02c<br> <img src=\"https://github.com/mbostock/d3/wiki/98df8a.png\" alt=\"98df8a\"> #98df8a<br> <img src=\"https://github.com/mbostock/d3/wiki/d62728.png\" alt=\"d62728\"> #d62728<br> <img src=\"https://github.com/mbostock/d3/wiki/ff9896.png\" alt=\"ff9896\"> #ff9896<br> <img src=\"https://github.com/mbostock/d3/wiki/9467bd.png\" alt=\"9467bd\"> #9467bd<br> <img src=\"https://github.com/mbostock/d3/wiki/c5b0d5.png\" alt=\"c5b0d5\"> #c5b0d5<br> <img src=\"https://github.com/mbostock/d3/wiki/8c564b.png\" alt=\"8c564b\"> #8c564b<br> <img src=\"https://github.com/mbostock/d3/wiki/c49c94.png\" alt=\"c49c94\"> #c49c94<br> <img src=\"https://github.com/mbostock/d3/wiki/e377c2.png\" alt=\"e377c2\"> #e377c2<br> <img src=\"https://github.com/mbostock/d3/wiki/f7b6d2.png\" alt=\"f7b6d2\"> #f7b6d2<br> <img src=\"https://github.com/mbostock/d3/wiki/7f7f7f.png\" alt=\"7f7f7f\"> #7f7f7f<br> <img src=\"https://github.com/mbostock/d3/wiki/c7c7c7.png\" alt=\"c7c7c7\"> #c7c7c7<br> <img src=\"https://github.com/mbostock/d3/wiki/bcbd22.png\" alt=\"bcbd22\"> #bcbd22<br> <img src=\"https://github.com/mbostock/d3/wiki/dbdb8d.png\" alt=\"dbdb8d\"> #dbdb8d<br> <img src=\"https://github.com/mbostock/d3/wiki/17becf.png\" alt=\"17becf\"> #17becf<br> <img src=\"https://github.com/mbostock/d3/wiki/9edae5.png\" alt=\"9edae5\"> #9edae5<br></p> <h6 id=\"category20b\"> d3.scale.<b>category20b</b>()</h6> <p>Constructs a new ordinal scale with a range of twenty categorical colors:</p> <p><img src=\"https://github.com/mbostock/d3/wiki/393b79.png\" alt=\"393b79\"> #393b79<br> <img src=\"https://github.com/mbostock/d3/wiki/5254a3.png\" alt=\"5254a3\"> #5254a3<br> <img src=\"https://github.com/mbostock/d3/wiki/6b6ecf.png\" alt=\"6b6ecf\"> #6b6ecf<br> <img src=\"https://github.com/mbostock/d3/wiki/9c9ede.png\" alt=\"9c9ede\"> #9c9ede<br> <img src=\"https://github.com/mbostock/d3/wiki/637939.png\" alt=\"637939\"> #637939<br> <img src=\"https://github.com/mbostock/d3/wiki/8ca252.png\" alt=\"8ca252\"> #8ca252<br> <img src=\"https://github.com/mbostock/d3/wiki/b5cf6b.png\" alt=\"b5cf6b\"> #b5cf6b<br> <img src=\"https://github.com/mbostock/d3/wiki/cedb9c.png\" alt=\"cedb9c\"> #cedb9c<br> <img src=\"https://github.com/mbostock/d3/wiki/8c6d31.png\" alt=\"8c6d31\"> #8c6d31<br> <img src=\"https://github.com/mbostock/d3/wiki/bd9e39.png\" alt=\"bd9e39\"> #bd9e39<br> <img src=\"https://github.com/mbostock/d3/wiki/e7ba52.png\" alt=\"e7ba52\"> #e7ba52<br> <img src=\"https://github.com/mbostock/d3/wiki/e7cb94.png\" alt=\"e7cb94\"> #e7cb94<br> <img src=\"https://github.com/mbostock/d3/wiki/843c39.png\" alt=\"843c39\"> #843c39<br> <img src=\"https://github.com/mbostock/d3/wiki/ad494a.png\" alt=\"ad494a\"> #ad494a<br> <img src=\"https://github.com/mbostock/d3/wiki/d6616b.png\" alt=\"d6616b\"> #d6616b<br> <img src=\"https://github.com/mbostock/d3/wiki/e7969c.png\" alt=\"e7969c\"> #e7969c<br> <img src=\"https://github.com/mbostock/d3/wiki/7b4173.png\" alt=\"7b4173\"> #7b4173<br> <img src=\"https://github.com/mbostock/d3/wiki/a55194.png\" alt=\"a55194\"> #a55194<br> <img src=\"https://github.com/mbostock/d3/wiki/ce6dbd.png\" alt=\"ce6dbd\"> #ce6dbd<br> <img src=\"https://github.com/mbostock/d3/wiki/de9ed6.png\" alt=\"de9ed6\"> #de9ed6<br></p> <h6 id=\"category20c\"> d3.scale.<b>category20c</b>()</h6> <p>Constructs a new ordinal scale with a range of twenty categorical colors:</p> <p><img src=\"https://github.com/mbostock/d3/wiki/3182bd.png\" alt=\"3182bd\"> #3182bd<br> <img src=\"https://github.com/mbostock/d3/wiki/6baed6.png\" alt=\"6baed6\"> #6baed6<br> <img src=\"https://github.com/mbostock/d3/wiki/9ecae1.png\" alt=\"9ecae1\"> #9ecae1<br> <img src=\"https://github.com/mbostock/d3/wiki/c6dbef.png\" alt=\"c6dbef\"> #c6dbef<br> <img src=\"https://github.com/mbostock/d3/wiki/e6550d.png\" alt=\"e6550d\"> #e6550d<br> <img src=\"https://github.com/mbostock/d3/wiki/fd8d3c.png\" alt=\"fd8d3c\"> #fd8d3c<br> <img src=\"https://github.com/mbostock/d3/wiki/fdae6b.png\" alt=\"fdae6b\"> #fdae6b<br> <img src=\"https://github.com/mbostock/d3/wiki/fdd0a2.png\" alt=\"fdd0a2\"> #fdd0a2<br> <img src=\"https://github.com/mbostock/d3/wiki/31a354.png\" alt=\"31a354\"> #31a354<br> <img src=\"https://github.com/mbostock/d3/wiki/74c476.png\" alt=\"74c476\"> #74c476<br> <img src=\"https://github.com/mbostock/d3/wiki/a1d99b.png\" alt=\"a1d99b\"> #a1d99b<br> <img src=\"https://github.com/mbostock/d3/wiki/c7e9c0.png\" alt=\"c7e9c0\"> #c7e9c0<br> <img src=\"https://github.com/mbostock/d3/wiki/756bb1.png\" alt=\"756bb1\"> #756bb1<br> <img src=\"https://github.com/mbostock/d3/wiki/9e9ac8.png\" alt=\"9e9ac8\"> #9e9ac8<br> <img src=\"https://github.com/mbostock/d3/wiki/bcbddc.png\" alt=\"bcbddc\"> #bcbddc<br> <img src=\"https://github.com/mbostock/d3/wiki/dadaeb.png\" alt=\"dadaeb\"> #dadaeb<br> <img src=\"https://github.com/mbostock/d3/wiki/636363.png\" alt=\"636363\"> #636363<br> <img src=\"https://github.com/mbostock/d3/wiki/969696.png\" alt=\"969696\"> #969696<br> <img src=\"https://github.com/mbostock/d3/wiki/bdbdbd.png\" alt=\"bdbdbd\"> #bdbdbd<br> <img src=\"https://github.com/mbostock/d3/wiki/d9d9d9.png\" alt=\"d9d9d9\"> #d9d9d9<br></p> <h2 id=\"colorbrewer\"> ColorBrewer</h2> <p>D3 also bundles some fantastic categorical color scales by <a href=\"http://colorbrewer2.org/\">Cynthia Brewer</a>. You can find those in either CSS or JavaScript form in <a href=\"https://github.com/mbostock/d3/tree/master/lib/colorbrewer\">lib/colorbrewer</a>.</p> <p>For CSS, assign a class such as \"q0-3\", \"q1-3\" or \"q2-3\" to the element you wish it be filled. Then, set the class attribute on a parent element (such as the SVG element) with the desired color scale name, such as \"RdBu\" or \"Blues\". For examples, see: <a href=\"http://mbostock.github.com/d3/talk/20111116/calendar.html\">calendar heatmap</a>, <a href=\"http://mbostock.github.com/d3/talk/20111018/choropleth.html\">choropleth</a>.</p> <p>For JavaScript, you can use colorbrewer.RdBu[9] or equivalent as the range of a d3.scale.ordinal. For example:</p> <div class=\"highlight highlight-source-js\"><pre>var o = d3.scale.ordinal()\n    .domain([\"foo\", \"bar\", \"baz\"])\n    .range(colorbrewer.RdBu[9]);</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Ordinal-Scales\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Ordinal-Scales</a>\n  </p>\n</div>\n","polygon-geom":"<h1 class=\"gh-header-title instapaper_title\">Polygon Geom</h1>   <h6 id=\"polygon\"> d3.geom.<b>polygon</b>(<i>vertices</i>)</h6> <p>Returns the input array of vertices with additional methods attached, as described below.</p> <h6 id=\"area\"> polygon.<b>area</b>()</h6> <p>Returns the signed area of this polygon. If the vertices are in counterclockwise order, the area is positive, otherwise it is negative.</p> <h6 id=\"centroid\"> polygon.<b>centroid</b>()</h6> <p>Returns a two-element array representing the centroid of this polygon.</p> <h6 id=\"clip\"> polygon.<b>clip</b>(<i>subject</i>)</h6> <p>Clips the <em>subject</em> polygon against this polygon. In other words, returns a polygon representing the intersection of this polygon and the <em>subject</em> polygon. Assumes the clip polygon is counterclockwise and convex.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Polygon-Geom\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Polygon-Geom</a>\n  </p>\n</div>\n","partition-layout":"<h1 class=\"gh-header-title instapaper_title\">Partition Layout</h1>   <p>The <strong>partition layout</strong> produces adjacency diagrams: a space-filling variant of a node-link tree diagram. Rather than drawing a link between parent and child in the hierarchy, nodes are drawn as solid areas (either arcs or rectangles), and their placement relative to other nodes reveals their position in the hierarchy. The size of the nodes encodes a quantitative dimension that would be difficult to show in a node-link diagram.</p> <p><a href=\"http://bl.ocks.org/mbostock/4063423\"><img src=\"https://github.com/mbostock/d3/wiki/partition.png\" alt=\"partition\"></a></p> <p>Like other classes in D3, layouts follow the method chaining pattern where setter methods return the layout itself, allowing multiple setters to be invoked in a concise statement.</p> <h6 id=\"partition\"> d3.layout.<b>partition</b>()</h6> <p>Creates a new partition layout with the default settings: the default sort order is by descending value; the default value accessor assumes each input data is an object with a numeric value attribute; the default children accessor assumes each input data is an object with a children array; the default size is 1×1.</p> <h6 id=\"_partition\"> <b>partition</b>(<i>root</i>) <br> partition.<b>nodes</b>(<i>root</i>)</h6> <p>Runs the partition layout, returning the array of nodes associated with the specified <em>root</em> node. The partition layout is part of D3's family of <a class=\"internal present\" href=\"hierarchy-layout\">hierarchical layouts</a>. These layouts follow the same basic structure: the input argument to the layout is the root node of the hierarchy, and the output return value is an array representing the computed positions of all nodes. Several attributes are populated on each node:</p> <ul> <li>parent - the parent node, or null for the root.</li> <li>children - the array of child nodes, or null for leaf nodes.</li> <li>value - the node value, as returned by the value accessor.</li> <li>depth - the depth of the node, starting at 0 for the root.</li> <li>x - the minimum <em>x</em>-coordinate of the node position.</li> <li>y - the minimum <em>y</em>-coordinate of the node position.</li> <li>dx - the <em>x</em>-extent of the node position.</li> <li>dy - the <em>y</em>-extent of the node position.</li> </ul> <p>Although the layout has a size in <em>x</em> and <em>y</em>, this represents an arbitrary coordinate system; for example, you can treat <em>x</em> as an angle and <em>y</em> as a radius to produce a radial rather than Cartesian layout. In Cartesian orientation, <em>x</em>, <em>y</em>, <em>dx</em> and <em>dy</em> correspond to the \"x\", \"y\", \"width\" and \"height\" attributes of the SVG <a class=\"internal present\" href=\"svg-shapes#svg_rect\">rect</a> element. In radial orientation, they can be used to compute the innerRadius, startAngle, outerRadius and endAngle of an <a class=\"internal present\" href=\"svg-shapes#arc\">arc</a> generator. The Cartesian orientation may be called an <strong>icicle tree</strong>, while the radial orientation is called a <strong>sunburst</strong>.</p> <h6 id=\"links\"> partition.<b>links</b>(<i>nodes</i>)</h6> <p>Given the specified array of <em>nodes</em>, such as those returned by <a href=\"partition-layout#nodes\">nodes</a>, returns an array of objects representing the links from parent to child for each node. Leaf nodes will not have any links. Each link is an object with two attributes:</p> <ul> <li>source - the parent node (as described above).</li> <li>target - the child node.</li> </ul> <p>This method is useful for retrieving a set of link descriptions suitable for display, often in conjunction with the <a href=\"svg-shapes#diagonal\">diagonal</a> shape generator. For example:</p> <div class=\"highlight highlight-source-js\"><pre>svg.selectAll(\"path\")\n    .data(partition.links(nodes))\n  .enter().append(\"path\")\n    .attr(\"d\", d3.svg.diagonal());</pre></div> <h6 id=\"children\"> partition.<b>children</b>([<i>children</i>])</h6> <p>If <em>children</em> is specified, sets the specified children accessor function. If <em>children</em> is not specified, returns the current children accessor function, which by default assumes that the input data is an object with a children array:</p> <div class=\"highlight highlight-source-js\"><pre>function children(d) {\n  return d.children;\n}</pre></div> <p>Often, it is convenient to load the node hierarchy using <a href=\"requests#d3_json\">d3.json</a>, and represent the input hierarchy as a nested <a href=\"http://json.org\">JSON</a> object. For example:</p> <div class=\"highlight highlight-source-js\"><pre>{\n \"name\": \"flare\",\n \"children\": [\n  {\n   \"name\": \"analytics\",\n   \"children\": [\n    {\n     \"name\": \"cluster\",\n     \"children\": [\n      {\"name\": \"AgglomerativeCluster\", \"size\": 3938},\n      {\"name\": \"CommunityStructure\", \"size\": 3812},\n      {\"name\": \"MergeEdge\", \"size\": 743}\n     ]\n    },\n    {\n     \"name\": \"graph\",\n     \"children\": [\n      {\"name\": \"BetweennessCentrality\", \"size\": 3534},\n      {\"name\": \"LinkDistance\", \"size\": 5731}\n     ]\n    }\n   ]\n  }\n ]\n}</pre></div> <p>The children accessor is first invoked for root node in the hierarchy. If the accessor returns null, then the node is assumed to be a leaf node, and the layout traversal terminates. Otherwise, the accessor should return an array of data elements representing the child nodes.</p> <h6 id=\"sort\"> partition.<b>sort</b>([<i>comparator</i>])</h6> <p>If <em>comparator</em> is specified, sets the sort order of sibling nodes for the layout using the specified comparator function. If <em>comparator</em> is not specified, returns the current group sort order, which defaults to descending order by the associated input data's numeric value attribute:</p> <div class=\"highlight highlight-source-js\"><pre>function comparator(a, b) {\n  return b.value - a.value;\n}</pre></div> <p>The comparator function is invoked for pairs of nodes, being passed the input data for each node. A null comparator disables sorting and uses tree traversal order. Comparator functions may also be implemented using <a href=\"arrays#d3_ascending\">d3.ascending</a> or <a href=\"arrays#d3_descending\">d3.descending</a>.</p> <h6 id=\"value\"> partition.<b>value</b>([<i>value</i>])</h6> <p>If <em>value</em> is specified, sets the value accessor to the specified function. If <em>value</em> is not specified, returns the current value accessor, which assumes that the input data is an object with a numeric value attribute:</p> <div class=\"highlight highlight-source-js\"><pre>function value(d) {\n  return d.value;\n}</pre></div> <p>The value accessor is invoked for each input data element, and must return a number representing the numeric value of the node. This value is used to set the area of each node proportionally to the value.</p> <h6 id=\"size\"> partition.<b>size</b>([<i>size</i>])</h6> <p>If <em>size</em> is specified, sets the available layout size to the specified two-element array of numbers representing <em>x</em> and <em>y</em>. </p> <div class=\"highlight highlight-source-js\"><pre>var width = 1800, height = 2000;\nvar partition = d3.layout.partition()\n    .size([width, height])\n    .value(function(d) { return d.size; });</pre></div> <p>If <em>size</em> is not specified, returns the current size, which defaults to 1×1. Notice, that if the size is not explicitly specified, i.e. defaults to 1×1, the calculated coordinates for each element will be normalized, i.e. each coordinate will be &lt; 1, whereas the sum of all the coordinates giving 1. Consequently, you will not see anything on UI ( since 1x1 is too small to see anything). A good way to use such a situation is to apply linear range scaling. The rendering result will be the same as in case of specifying explicitly the size of the diagram, however you will get a more flexible solution for further implementations: </p> <div class=\"highlight highlight-source-js\"><pre>// first, declare scaling for X and Y axis\n var width = 1800, height = 2000,\n x = d3.scale.linear().range([0, width]),\n y = d3.scale.linear().range([0, height]);\n\n// then apply the scaling for each calculated coordinate\nsvg.selectAll(\"rect\").data(nodes)\n            .enter().append(\"svg:rect\")\n            .attr(\"x\", function(d) { return x(d.x);})\n            .attr(\"y\", function(d) { return y(d.y);})\n            .attr(\"width\", function(d) {  return  x(d.dx);})\n            .attr(\"height\", function(d) { return y(d.dy); });</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Partition-Layout\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Partition-Layout</a>\n  </p>\n</div>\n","quadtree-geom":"<h1 class=\"gh-header-title instapaper_title\">Quadtree Geom</h1>   <p>A <strong>quadtree</strong> is a two-dimensional recursive spatial subdivision. This implementation uses square partitions, dividing each square into four equally-sized squares. Each point exists in a unique node; if multiple points are in the same position, some points may be stored on internal nodes rather than leaf nodes. Quadtrees can be used to accelerate various spatial operations, such as the Barnes-Hut approximation for computing n-body forces, or collision detection.</p> <p><a href=\"http://bl.ocks.org/mbostock/4343214\"><img src=\"https://camo.githubusercontent.com/a7ea927e1aaa9a115dbb994c5254304824cc5dcb/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343334333231342f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4343214/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/6216724\"><img src=\"https://camo.githubusercontent.com/0cb03b12d3b62fde292f0c382d6a9ff54c936761/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f363231363732342f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/6216724/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/6224050\"><img src=\"https://camo.githubusercontent.com/7b6e15a6c57b40a398bc63a8157061b6148d0912/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f363232343035302f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/6224050/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/patricksurry/6478178\"><img src=\"https://camo.githubusercontent.com/d4c4e8666187f31ffb156fc077b8085f3e75a943/687474703a2f2f626c2e6f636b732e6f72672f7061747269636b73757272792f7261772f363437383137382f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/patricksurry/raw/6478178/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/llb4ll/8709363\"><img src=\"https://camo.githubusercontent.com/bae838670eed34b2e62231d7e24b54d448b7a734/687474703a2f2f626c2e6f636b732e6f72672f6c6c62346c6c2f7261772f383730393336332f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/llb4ll/raw/8709363/thumbnail.png\"></a></p> <h6 id=\"quadtree\"> d3.geom.<b>quadtree</b>()</h6> <p>Creates a new quadtree factory with the default <a href=\"#x\"><em>x</em>-accessor</a>, <a href=\"#y\"><em>y</em>-accessor</a> and <a href=\"#extent\">extent</a>. The <a href=\"#_quadtree\">returned function</a> can be used to create any number of quadtrees from data with the factory’s configuration.</p> <h6 id=\"_quadtree\"> <b>quadtree</b>(<i>points</i>),<br>  <b>quadtree</b>(<i>points</i>, <i>x2</i>, <i>y2</i>),<br>  <b>quadtree</b>(<i>points</i>, <i>x1</i>, <i>y1</i>, <i>x2</i>, <i>y2</i>)</h6> <p>Constructs a new quadtree for the specified array of data <em>points</em>, returning the root node of a new quadtree. The elements of the <em>points</em> array must have <em>x</em> and <em>y</em> members defining their coordinates. The current <a href=\"#x\"><em>x</em>-</a> and <a href=\"#y\"><em>y</em>-</a> accessor functions are ignored. The extent can also be specified with by additional, optional arguments with <code>x1</code> and <code>y1</code> specified explicitly or assumed to be zero if omitted. To build a quadtree by adding points incrementally, the specified <em>points</em> array can be empty, and then points can be later <a href=\"#add\">added</a> to the returned root node; in this case, you must also specify the <a href=\"#extent\">extent</a> of the quadtree.</p> <p>Each node in the quadtree has several properties:</p> <ul> <li> <em>nodes</em> - a sparse array of the four child nodes in order: top-left, top-right, bottom-left, bottom-right</li> <li> <em>leaf</em> - a boolean indicating whether this is an internal node or a leaf node</li> <li> <em>point</em> - the point associated with this node, if any (may apply to either internal or leaf nodes)</li> <li> <em>x</em> - the <em>x</em>-coordinate of the associated point, if any</li> <li> <em>y</em> - the <em>y</em>-coordinate of the associated point, if any</li> </ul> <p>The returned root node also defines <a href=\"#add\">add</a> and <a href=\"#visit\">visit</a> methods.</p> <h6 id=\"add\"> root.<b>add</b>(<i>point</i>)</h6> <p>Adds the specified new <em>point</em> to the quadtree.</p> <h6 id=\"visit\"> root.<b>visit</b>(<i>callback</i>)</h6> <p>Visits each node in the quadtree, invoking the specified <em>callback</em> with arguments {<i>node</i>, <em>x1</em>, <em>y1</em>, <em>x2</em>, <em>y2</em>} for each node, where <em>node</em> is the node being visited and the remaining arguments are the coordinates of the top-left and bottom-right corners of the node respectively. (Note: the definition of the coordinate system used by the quadtree is arbitrary, so a more precision rule is that <em>x1</em> &lt;= <em>x2</em> and <em>y1</em> &lt;= <em>y2</em>. In the typical coordinate system used by SVG and Canvas, the origin ⟨0,0⟩ is in the top-left corner, and thus ⟨<em>x1</em>, <em>y1</em>⟩ is also the top-left corner of the current node.) Nodes are traversed in pre-order. If the <em>callback</em> returns true for a given node, then the children of that node are not visited; otherwise, all child nodes are visited.</p> <h6 id=\"visit\"> root.<b>find</b>(<i>point</i>)</h6> <p>Given any point <em>[x,y]</em>, returns the closest point in the quadtree.</p> <h6 id=\"x\"> quadtree.<b>x</b>([<i>x</i>])</h6> <p>If <em>x</em> is specified, sets the x-coordinate accessor and returns this quadtree factory. If <em>x</em> is not specified, returns the current <em>x</em>-coordinate accessor, which defaults to:</p> <div class=\"highlight highlight-source-js\"><pre>function(d) { return d[0]; }</pre></div> <p>For each point added to the quadtree, either during <a href=\"#_quadtree\">initial construction</a> or lazily <a href=\"#add\">added</a>, the <em>x</em>-accessor is invoked with the arguments {<i>d</i>, <i>i</i>}, where <em>d</em> is the current point and <em>i</em> is its index in the array of all points. The <em>x</em>-accessor must then return a numeric value indicating the <em>x</em>-coordinate of the given point. The <em>x</em>-accessor may also be defined as a constant number rather than a function, if desired.</p> <h6 id=\"y\"> quadtree.<b>y</b>([<i>y</i>])</h6> <p>If <em>y</em> is specified, sets the y-coordinate accessor and returns this quadtree factory. If <em>y</em> is not specified, returns the current <em>y</em>-coordinate accessor, which defaults to:</p> <div class=\"highlight highlight-source-js\"><pre>function(d) { return d[1]; }</pre></div> <p>For each point added to the quadtree, either during <a href=\"#_quadtree\">initial construction</a> or lazily <a href=\"#add\">added</a>, the <em>y</em>-accessor is invoked with the arguments {<i>d</i>, <i>i</i>}, where <em>d</em> is the current point and <em>i</em> is its index in the array of all points. The <em>y</em>-accessor must then return a numeric value indicating the <em>y</em>-coordinate of the given point. The <em>y</em>-accessor may also be defined as a constant number rather than a function, if desired.</p> <h6 id=\"extent\"> quadtree.<b>extent</b>([<i>extent</i>])</h6> <p>If <em>extent</em> is specified, sets the current extent and returns this quadtree factory. If <em>extent</em> is not specified, returns the current extent, which defaults to null. When the extent is null, an extent will be computed automatically by scanning the array of input points passed to the <a href=\"#_quadtree\">quadtree constructor</a>. Otherwise, the <em>extent</em> must be specified as a two-dimensional array [​[<i>x0</i>, <i>y0</i>], [​<i>x1</i>, <i>y1</i>]​], where <em>x0</em> and <em>y0</em> are the lower bounds of the extent, and <em>x1</em> and <em>y1</em> are the upper bounds of the extent. Setting an extent is required when constructing a quadtree lazily from an initially-empty set of nodes.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Quadtree-Geom\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Quadtree-Geom</a>\n  </p>\n</div>\n","requests":"<h1 class=\"gh-header-title instapaper_title\">Requests</h1>   <p>You can’t visualize data if you can’t access it! Fortunately, there are many ways to get data into the browser. For small datasets, you might hardcode the data in your script, or embed data in the DOM using <a href=\"http://ejohn.org/blog/html-5-data-attributes/\">data attributes</a>. For larger datasets, you could load an external script that defines your data as a global variable. (<a href=\"http://en.wikipedia.org/wiki/JSONP\">JSONP</a> is a common example of this.) But, the most versatile way of loading data into the browser is using an <a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\">XMLHttpRequest</a>, or <strong>XHR</strong>. This allows data to be loaded <em>asynchronously</em> (so the rest of the page can display while data is loading), and is safer than JSONP. D3’s xhr module simplifies loading and parsing data.</p> <p>When loading data asynchronously, code that depends on the loaded data should generally exist within the callback function. For example, see the <a href=\"http://mbostock.github.com/d3/ex/calendar.html\">calendar visualization</a> on the D3 website. Code that doesn't depend on data can run immediately when the page loads. Also, you may find it convenient to save loaded data to the global namespace, so that you can access it after the initial render, such as during a transition. You can do this using closures, or simply assign the loaded data to a global:</p> <div class=\"highlight highlight-source-js\"><pre>var data; // a global\n\nd3.json(\"path/to/file.json\", function(error, json) {\n  if (error) return console.warn(error);\n  data = json;\n  visualizeit();\n});</pre></div> <p>By default, most browsers do not allow cross-domain requests. To <a href=\"http://enable-cors.org/\">enable cross-domain requests</a>, have the server set the header Access-Control-Allow-Origin. For more details, see the W3C recommendation on <a href=\"http://www.w3.org/TR/cors/\">Cross-Origin Resource Sharing</a>. For IE9, d3.xhr uses the nonstandard XDomainRequest for cross-domain requests. Note that to send credentials, the request will need to be decorated with .on(\"beforesend\", function (request) {request.withCredentials = true;}) and not using .headers(\"withCredentials\", \"true\")</p> <h2 id=\"xhr\"> XHR</h2> <h6 id=\"d3_xhr\"> d3.<b>xhr</b>(<i>url</i>[, <i>mimeType</i>][, <i>callback</i>])</h6> <p>Creates an asynchronous request for specified <em>url</em>. An optional <em>mime type</em> may be specified as the second argument, such as \"text/plain\". If a <em>callback</em> is specified, the request is immediately issued with the GET method and the callback is invoked asynchronously when the resource is loaded or the request fails; the callback is invoked with two arguments: the error, if any, and the XMLHttpRequest object representing the response. The response is undefined if an error occurs. If the response has an unsuccessful status code, the error is the XMLHttpRequest object. If no callback is specified, the returned request can be issued using <a href=\"#get\">xhr.get</a>, <a href=\"#post\">xhr.post</a> or similar, and handled using <a href=\"#on\">xhr.on</a>.</p> <h6 id=\"header\"> xhr.<b>header</b>(<i>name</i>[, <i>value</i>])</h6> <p>If <em>value</em> is specified, sets the request header with the specified <em>name</em> to the specified value. If <em>value</em> is null, removes the request header with the specified <em>name</em>. If <em>value</em> is not specified, returns the current value of the request header with the specified <em>name</em>. Header names are case-insensitive.</p> <p>Request headers can only be modified before the request is <a href=\"#sent\">sent</a>. Therefore, you cannot pass a callback to the <a href=\"#d3_xhr\">d3.xhr constructor</a> if you wish to specify a header. Instead, use <a href=\"#get\">xhr.get</a> or similar. For example:</p> <div class=\"highlight highlight-source-js\"><pre>d3.csv(\"/path/to/file.csv\")\n    .header(\"header-name\", \"header-value\")\n    .get(function(error, data) {\n      // callback\n    });</pre></div> <h6 id=\"mimeType\"> xhr.<b>mimeType</b>([<i>type</i>])</h6> <p>If <em>type</em> is specified, sets the request mime type to the specified value. If <em>type</em> is null, clears the current mime type, if any. If <em>type</em> is not specified, returns the current mime type, which defaults to null. The mime type is used to both set the <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\">\"Accept\" request header</a> and for <a href=\"http://www.w3.org/TR/XMLHttpRequest/#the-overridemimetype%28%29-method\">overrideMimeType</a>, where supported. Request headers can only be modified before the request is <a href=\"#sent\">sent</a>.</p> <h6 id=\"responseType\"> xhr.<b>responseType</b>(<i>type</i>)</h6> <p>If <em>type</em> is specified, sets the <a href=\"http://www.w3.org/TR/XMLHttpRequest/#the-responsetype-attribute\">response type</a>, e.g. \"\", \"arraybuffer\", \"blob\", \"document\", or \"text\". If <em>type</em> is not specified, returns the current response type, which defaults to \"\".</p> <h6 id=\"response\"> xhr.<b>response</b>(<i>value</i>)</h6> <p>If <em>value</em> is specified, sets the response value function to the specified function. If <em>value</em> is not specified, returns the current response value function, which defaults to the identity function. The response value function is used to map the response XMLHttpRequest object to its associated data value. For example, for text requests, you might use <code>function(request) { return request.responseText; }</code>, whereas for JSON requests, you might use <code>function(request) { return JSON.parse(request.responseText); }</code>.</p> <h6 id=\"get\"> xhr.<b>get</b>([<i>callback</i>])</h6> <p>Issues this request using the GET method. If a <em>callback</em> is specified, it will be invoked asynchronously when the request is done or errors; the callback is invoked with two arguments: the error, if any, and the response value. The response value is undefined if an error occurs. If no <em>callback</em> is specified, then \"load\" and \"error\" listeners should be registered via <a href=\"#on\">xhr.on</a>. This method is a convenience wrapper of <a href=\"#send\">xhr.send</a>.</p> <h6 id=\"post\"> xhr.<b>post</b>([<i>data</i>][, <i>callback</i>])</h6> <p>Issues this request using the POST method, optionally posting the specified <em>data</em> in the request body. If a <em>callback</em> is specified, it will be invoked asynchronously when the request is done or errors; the callback is invoked with two arguments: the error, if any, and the response value. The response value is undefined if an error occurs. If no <em>callback</em> is specified, then \"load\" and \"error\" listeners should be registered via <a href=\"#on\">xhr.on</a>. This method is a convenience wrapper of <a href=\"#send\">xhr.send</a>.</p> <p>An example using URL encoding:</p> <div class=\"highlight highlight-source-js\"><pre>d3.csv(\"/path/to/file.csv\")\n    .header(\"Content-Type\", \"application/x-www-form-urlencoded\")\n    .post(\"a=2&amp;b=3\", function(error, data) {\n      // callback\n    });</pre></div> <p>An example using JSON encoding:</p> <div class=\"highlight highlight-source-js\"><pre>d3.csv(\"/path/to/file.csv\")\n    .header(\"Content-Type\", \"application/json\")\n    .post(JSON.stringify({a: 2, b: 3}), function(error, data) {\n      // callback\n    });</pre></div> <h6 id=\"send\"> xhr.<b>send</b>(<i>method</i>[, <i>data</i>][, <i>callback</i>])</h6> <p>Issues this request using the specified <em>method</em>, optionally posting the specified <em>data</em> in the request body. If a <em>callback</em> is specified, it will be invoked asynchronously when the request is done or errors; the callback is invoked with two arguments: the error, if any, and the response value. The response value is undefined if an error occurs. If no <em>callback</em> is specified, then \"load\" and \"error\" listeners should be registered via <a href=\"#on\">xhr.on</a>.</p> <h6 id=\"abort\"> xhr.<b>abort</b>()</h6> <p>Aborts this request, if it is currently in-flight. See <a href=\"http://www.w3.org/TR/XMLHttpRequest/#the-abort%28%29-method\">XMLHttpRequest’s abort</a>.</p> <h6 id=\"on\"> xhr.<b>on</b>(<i>type</i>[, <i>listener</i>])</h6> <p>Adds or removes an event <em>listener</em> to this request for the specified <em>type</em>. The type must be one of the following:</p> <ul> <li> <em>beforesend</em> - before the request is sent, to allow custom headers and the like to be set.</li> <li> <em>progress</em> - to monitor the <a href=\"http://www.w3.org/TR/progress-events/\">progress of the request</a>.</li> <li> <em>load</em> - when the request completes successfully.</li> <li> <em>error</em> - when the request completes unsuccessfully; this includes 4xx and 5xx response codes.</li> </ul> <p>If an event listener was already registered for the same type, the existing listener is removed before the new listener is added. To register multiple listeners for the same event type, the type may be followed by an optional namespace, such as \"load.foo\" and \"load.bar\". To remove a listener, pass null as the listener.</p> <p>If <em>listener</em> is not specified, returns the currently-assigned listener for the specified type, if any.</p> <h2 id=\"convenience-methods\"> Convenience Methods</h2> <p>Often, d3.xhr is not used directly. Instead, one of the type-specific methods is used instead, such as <a href=\"#d3_text\">d3.text</a> for plain text, <a href=\"#d3_json\">d3.json</a> for JSON, <a href=\"#d3_xml\">d3.xml</a> for XML, <a href=\"#d3_html\">d3.html</a> for HTML, <a href=\"#d3_csv\">d3.csv</a> for comma-separated values, and <a href=\"#d3_tsv\">d3.tsv</a> for tabulation-separated values.</p> <h6 id=\"d3_text\"> d3.<b>text</b>(<i>url</i>[, <i>mimeType</i>][, <i>callback</i>])</h6> <p>Creates a request for the text file at the specified <em>url</em>. An optional <em>mime type</em> may be specified as the second argument, such as \"text/plain\". If a <em>callback</em> is specified, the request is immediately issued with the GET method, and the callback will be invoked asynchronously when the file is loaded or the request fails; the callback is invoked with two arguments: the error, if any, and the response text. The response text is undefined if an error occurs. If no callback is specified, the returned request can be issued using xhr.get or similar, and handled using xhr.on.</p> <h6 id=\"d3_json\"> d3.<b>json</b>(<i>url</i>[, <i>callback</i>])</h6> <p>Creates a request for the <a href=\"http://json.org\">JSON</a> file at the specified <em>url</em> with the mime type \"application/json\". If a <em>callback</em> is specified, the request is immediately issued with the GET method, and the callback will be invoked asynchronously when the file is loaded or the request fails; the callback is invoked with two arguments: the error, if any, and the parsed JSON. The parsed JSON is undefined if an error occurs. If no callback is specified, the returned request can be issued using xhr.get or similar, and handled using xhr.on.</p> <h6 id=\"d3_xml\"> d3.<b>xml</b>(<i>url</i>[, <i>mimeType</i>][, <i>callback</i>])</h6> <p>Creates a request for the XML file at the specified <em>url</em>. An optional <em>mime type</em> may be specified as the second argument, such as \"application/xml\". If a <em>callback</em> is specified, the request is immediately issued with the GET method, and the callback will be invoked asynchronously when the file is loaded or the request fails; the callback is invoked with two arguments: the error, if any, and the parsed XML as a <a href=\"http://www.w3.org/TR/XMLHttpRequest/#the-responsexml-attribute\">document</a>. The parsed XML is undefined if an error occurs. If no callback is specified, the returned request can be issued using xhr.get or similar, and handled using xhr.on.</p> <h6 id=\"d3_html\"> d3.<b>html</b>(<i>url</i>[, <i>callback</i>])</h6> <p>Creates a request for the HTML file at the specified <em>url</em> with the mime type \"text/html\". If a <em>callback</em> is specified, the request is immediately issued with the GET method, and the callback will be invoked asynchronously when the file is loaded or the request fails; the callback is invoked with two arguments: the error, if any, and the parsed HTML as a <a href=\"https://developer.mozilla.org/en-US/docs/DOM/range.createContextualFragment\">document fragment</a>. The parsed HTML is undefined if an error occurs. If no callback is specified, the returned request can be issued using xhr.get or similar, and handled using xhr.on.</p> <h6 id=\"d3_csv\"> d3.<b>csv</b>(<i>url</i>[, <i>accessor</i>][, <i>callback</i>])</h6> <p>Creates a request for the <a class=\"internal present\" href=\"csv\">CSV</a> file at the specified <em>url</em> with the mime type \"text/csv\". If a <em>callback</em> is specified, the request is immediately issued with the GET method, and the callback will be invoked asynchronously when the file is loaded or the request fails; the callback is invoked with two arguments: the error, if any, and the array of <a href=\"csv#parse\">parsed rows</a> per <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>. The rows array is undefined if an error occurs. If no callback is specified, the returned request can be issued using xhr.get or similar, and handled using xhr.on.</p> <h6 id=\"d3_tsv\"> d3.<b>tsv</b>(<i>url</i>[, <i>accessor</i>][, <i>callback</i>])</h6> <p>Creates a request for the <a href=\"csv#d3_tsv\">TSV</a> file at the specified <em>url</em> with the mime type \"text/tab-separated-values\". If a <em>callback</em> is specified, the request is immediately issued with the GET method, and the callback will be invoked asynchronously when the file is loaded or the request fails; the callback is invoked with two arguments: the error, if any, and the array of <a href=\"csv#tsv_parse\">parsed rows</a> per <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>. The rows array is undefined if an error occurs. If no callback is specified, the returned request can be issued using xhr.get or similar, and handled using xhr.on.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Requests\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Requests</a>\n  </p>\n</div>\n","svg-events":"<h1 class=\"gh-header-title instapaper_title\">SVG Events</h1>   <h6 id=\"mouse\"> d3.svg.<b>mouse</b>(<i>container</i>)</h6> <p>Renamed to <a href=\"selections#d3_mouse\">d3.mouse</a>.</p> <h6 id=\"touches\"> d3.svg.<b>touches</b>(<i>container</i>)</h6> <p>Renamed to <a href=\"selections#d3_touches\">d3.touches</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/SVG-Events\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/SVG-Events</a>\n  </p>\n</div>\n","svg-controls":"<h1 class=\"gh-header-title instapaper_title\">SVG Controls</h1>   <h2 id=\"brush\"> Brush</h2> <p><a href=\"http://bl.ocks.org/mbostock/6452972\"><img src=\"https://camo.githubusercontent.com/a4edf44f17003a4949594fc1ca3bf43b0cf35b46/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f363435323937322f7468756d626e61696c2e706e67\" alt=\"6452972\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/6452972/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/4063663\"><img src=\"https://camo.githubusercontent.com/e7a76dcf5bc87140c44e3054bb83d85f389968dc/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343036333636332f7468756d626e61696c2e706e67\" alt=\"4063663\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4063663/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/6232620\"><img src=\"https://camo.githubusercontent.com/e383c64566590d378f1d9b5259bafbb491225488/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f363233323632302f7468756d626e61696c2e706e67\" alt=\"6232620\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/6232620/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/6232537\"><img src=\"https://camo.githubusercontent.com/08248779a66d479c2e9d45f4fd91795889b69ba5/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f363233323533372f7468756d626e61696c2e706e67\" alt=\"6232537\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/6232537/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/6216724\"><img src=\"https://camo.githubusercontent.com/0cb03b12d3b62fde292f0c382d6a9ff54c936761/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f363231363732342f7468756d626e61696c2e706e67\" alt=\"6216724\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/6216724/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/4560481\"><img src=\"https://camo.githubusercontent.com/73405e64243808e2cd76c689c5e8c08eea42d94e/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343536303438312f7468756d626e61696c2e706e67\" alt=\"4560481\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4560481/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/4565798\"><img src=\"https://camo.githubusercontent.com/884572c8c64fbe955ef0ea5d2dc9236b7c62a7bb/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343536353739382f7468756d626e61696c2e706e67\" alt=\"4565798\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4565798/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/4349545\"><img src=\"https://camo.githubusercontent.com/dc3732c94a0cf54fa6ad46106ec4fe6bae9c5230/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343334393534352f7468756d626e61696c2e706e67\" alt=\"4349545\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4349545/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/4349509\"><img src=\"https://camo.githubusercontent.com/2d8b98e9a7e5572907ea65e3d0ad300b3f532b54/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343334393530392f7468756d626e61696c2e706e67\" alt=\"4349509\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4349509/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/4343214\"><img src=\"https://camo.githubusercontent.com/a7ea927e1aaa9a115dbb994c5254304824cc5dcb/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343334333231342f7468756d626e61696c2e706e67\" alt=\"4343214\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4343214/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/1667367\"><img src=\"https://camo.githubusercontent.com/7a9f008da2ba477efbce1e0bde50a792386ed995/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f313636373336372f7468756d626e61696c2e706e67\" alt=\"1667367\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/1667367/thumbnail.png\"></a></p> <h6 id=\"brush\"> d3.svg.<b>brush</b>()</h6> <p>Constructs a new brush with no default <em>x</em>- and <em>y</em>-scale, and an empty extent.</p> <h6 id=\"_brush\"> <b>brush</b>(<i>selection</i>)</h6> <p>Draws or redraws this brush into the specified <em>selection</em> of elements. The brush may be drawn into multiple elements simultaneously, but note that these brushes would share the same backing extent; typically, a brush is drawn into only one element at a time. The <em>selection</em> can also be a <a href=\"transitions\">transition</a>, in which case the brush will perform an <a href=\"http://bl.ocks.org/mbostock/6216724\">automatic transition</a>. Use <a href=\"#brush_event\">brush.event</a> to dispatch brush events during the transition for animated brushing.</p> <h6 id=\"brush_x\"> brush.<b>x</b>([<i>scale</i>])</h6> <p>Gets or sets the <em>x</em>-scale associated with the brush. If <em>scale</em> is specified, sets the <em>x</em>-scale to the specified scale and returns the brush; if <em>scale</em> is not specified, returns the current <em>x</em>-scale, which defaults to null. The scale is typically defined as a <a href=\"quantitative-scales\">quantitative scale</a>, in which case the <a href=\"#extent\">extent</a> is in data space from the scale's <a href=\"quantitative-scales#linear_domain\">domain</a>; however, it may instead be defined as an <a href=\"ordinal-scales\">ordinal scale</a>, where the extent is in pixel space from the scale's <a href=\"ordinal-scales#ordinal_rangeExtent\">range extent</a>.</p> <h6 id=\"brush_y\"> brush.<b>y</b>([<i>scale</i>])</h6> <p>Gets or sets the <em>y</em>-scale associated with the brush. If <em>scale</em> is specified, sets the <em>y</em>-scale to the specified scale and returns the brush; if <em>scale</em> is not specified, returns the current <em>y</em>-scale, which defaults to null. The scale is typically defined as a <a href=\"quantitative-scales\">quantitative scale</a>, in which case the <a href=\"#extent\">extent</a> is in data space from the scale's <a href=\"quantitative-scales#linear_domain\">domain</a>; however, it may instead be defined as an <a href=\"ordinal-scales\">ordinal scale</a>, where the extent is in pixel space from the scale's <a href=\"ordinal-scales#ordinal_rangeExtent\">range extent</a>.</p> <h6 id=\"brush_extent\"> brush.<b>extent</b>([<i>values</i>])</h6> <p>Gets or sets the current brush extent. If <em>values</em> is specified, sets the extent to the specified values and returns the brush; if <em>values</em> is not specified, returns the current extent. The definition of the extent depends on the associated scales. If both an <em>x</em>- and <em>y</em>-scale are available, then the extent is the two-dimensional array [‍​[<i>x0</i>, <i>y0</i>], [<i>x1</i>, <i>y1</i>]​], where <em>x0</em> and <em>y0</em> are the lower bounds of the extent, and <em>x1</em> and <em>y1</em> are the upper bounds of the extent. If only the <em>x</em>-scale is available, then the extent is defined as the one-dimensional array [<i>x0</i>, <i>x1</i>]; likewise, if only the <em>y</em>-scale is available, then the extent is [<i>y0</i>, <i>y1</i>]. If neither scale is available, then the extent is null.</p> <p>When the extent is set to <em>values</em>, the resulting extent is preserved exactly. However, as soon as the brush is moved by the user (on mousemove following a mousedown), then the extent will be recomputed by calling <a href=\"quantitative-scales#linear_invert\">scale.invert</a>. Note that, in this case, the values may be slightly imprecise due to the limited precision of pixels.</p> <p>Note that this does not automatically redraw the brush or dispatch any events to listeners. To redraw the brush, call <a href=\"#_brush\">brush</a> on a selection or transition; to dispatch events, use <a href=\"#brush_event\">brush.event</a>.</p> <h6 id=\"brush_clamp\"> brush.<b>clamp</b>([<i>clamp</i>])</h6> <p>Gets or sets the current clamping behavior. If <em>clamp</em> is specified, sets the clamping behavior and returns the brush; if <em>clamp</em> is not specified, returns the current clamping behavior. The clamping behavior definition depends on the associated scales. If both an <em>x</em>- and <em>y</em>-scale are available, then the clamping behavior is an array [ <em>x</em>, <em>y</em> ], where <em>x</em> and <em>y</em> are booleans that determine whether the each dimension of the two-dimensional extent should be clamped to its respective <em>x</em>- and <em>y</em>-scale. If only one of the <em>x</em>-scale and <em>y</em>-scale are available, then the clamping behavior is a boolean referring to whether the one-dimensional extent should be clamped to that scale. If neither scale is available, then the clamping behavior is null.</p> <h6 id=\"brush_clear\"> brush.<b>clear</b>()</h6> <p>Clears the extent, making the brush extent <a href=\"#brush_empty\">empty</a>.</p> <h6 id=\"brush_empty\"> brush.<b>empty</b>()</h6> <p>Returns true if and only if the brush extent is empty. When a brush is created, it is initially empty; the brush may also become empty with a single click on the background without moving, or if the extent is <a href=\"#brush_clear\">cleared</a>. A brush is considered empty if it has zero-width or zero-height. When the brush is empty, its extent is not strictly defined.</p> <h6 id=\"brush_on\"> brush.<b>on</b>(<i>type</i>[, <i>listener</i>])</h6> <p>Gets or sets the <em>listener</em> for the specified event <em>type</em>. Brushes support three types of events:</p> <ul> <li> <em>brushstart</em> - on mousedown</li> <li> <em>brush</em> - on mousemove, if the brush extent has changed</li> <li> <em>brushend</em> - on mouseup</li> </ul> <p>Note that when clicking on the background, a mousedown also triggers a \"brush\" event, since the brush extent is immediately cleared to start a new extent.</p> <h6 id=\"brush_event\"> brush.<b>event</b>(<i>selection</i>)</h6> <p>If <em>selection</em> is a selection, it dispatches a brush gesture to registered listeners as a three event sequence: <em>brushstart</em>, <em>brush</em> and <em>brushend</em>. This can be useful in triggering listeners after setting the <a href=\"#brush_extent\">brush extent</a> programatically. If <em>selection</em> is a transition, registers the appropriate tweens so that the brush dispatches events over the course of the transition: a <em>brushstart</em> event when the transition starts from the previously-set extent, <em>brush</em> events for each tick of the transition, and finally a <em>brushend</em> event when the transition ends. Note that the transition will be <a href=\"selections#interrupt\">interrupted</a> if the user starts brushing before the transition ends.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/SVG-Controls\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/SVG-Controls</a>\n  </p>\n</div>\n","stack-layout":"<h1 class=\"gh-header-title instapaper_title\">Stack Layout</h1>   <p>The stack layout takes an array of layer objects, each having a series (array) of <em>point objects</em> as a member. The point objects contain a pair of ordinates (as a minimum) that map the horizontal position of each point and its vertical thickness. The output from the stack layout is the same array of layers, but with state added onto the <em>point objects</em> to facilitate the selected stacking strategy.<br> The layout computes a baseline for the first layer which it then propagates to the above layers, so as to produce a stacked data set.<br> Several baseline algorithms are supported, along with sorting heuristics to improve perception, as described in <a href=\"http://www.leebyron.com/else/streamgraph/download.php?file=stackedgraphs_byron_wattenberg.pdf\">“Stacked Graphs—Geometry &amp; Aesthetics”</a> by Byron &amp; Wattenberg.</p> <p><a href=\"http://bl.ocks.org/mbostock/4060954\"><img src=\"https://github.com/mbostock/d3/wiki/stack.png\" alt=\"stack\"></a></p> <p>The stack layout operates in an arbitrary two-dimensional <em>x</em> and <em>y</em> coordinate space, similar to D3's other layouts, including <a href=\"tree-layout\">tree</a>. Thus, layers can be stacked vertically, horizontally, or even <a href=\"http://hint.fm/projects/flickr/\">radially</a>. While the \"zero\" offset is the default, a streamgraph can be generated using the \"wiggle\" offset, which attempts to minimize change in slope weighted by layer thickness.</p> <h6 id=\"stack\"> d3.layout.<b>stack</b>()</h6> <p>Constructs a new stack layout with the default offset (zero) and order (null). The returned layout object is both an object and a function. That is: you can call the layout like any other function, and the layout has additional methods that change its behavior. Like other classes in D3, layouts follow the method chaining pattern where setter methods return the layout itself, allowing multiple setters to be invoked in a concise statement.</p> <h6 id=\"_stack\"> <b>stack</b>(<i>layers</i>[, <i>index</i>])</h6> <p>Computes the <em>y</em>-coordinate baseline for each layer in the <em>layers</em> array, and then propagates that baseline to the other layers. In the simplest case, <em>layers</em> is a two-dimensional array of <em>point objects</em>, all having the same length, and each having a vertical and horizontal ordinate value to define the <em>y</em>-thickness of each layer at the given <em>x</em>-position. </p> <p>More complex structures are accepted by the layout, but only if an <em>accessor</em> function is passed to <a href=\"stack-layout#values\">values</a>, which abstracts the structure back to the simple case described above. In any case, the complexity is limited to an array of layer objects, each having a points array as a member. It is not possible, for example to use a series hash table (object) containing key value pairs representing the coordinates. Such a structure could be abstracted into the required format using an accessor function but, the object returned by the layout would not have the added offset state, as there is currently no means to abstract the output <em>with layer awareness</em>. </p> <p>The default layout expects the point objects to carry <em>x</em> and <em>y</em> members, to which it will add a <em>y0</em> member, to store the offset values produced by the selected baseline algorithm.<br> If the coordinate properties (raw or <a href=\"stack-layout#values\">abstracted</a>) are not named <em>x</em> and <em>y</em>, then <a href=\"stack-layout#x\">x</a> and <a href=\"stack-layout#y\">y</a> <em>accessors</em> must be provided to complete the abstraction and deliver the above structure.</p> <p>Thus, each <em>point object</em> has the following abstract structure: </p> <ul> <li>x - the <em>x</em>-position of the value.</li> <li>y - the <em>y</em>-thickness of the value.</li> <li>y0 - the minimum <em>y</em>-position of the value (baseline).</li> </ul> <p>The last two being physically added onto the point objects if required. </p> <p>The optional <em>index</em> argument is not consumed by the default layout, but is made available to custom <a href=\"stack-layout#order\">order</a> and <a href=\"stack-layout#offset\">offset</a> objects.</p> <h6 id=\"values\"> stack.<b>values</b>([<i>accessor</i>])</h6> <p>Specifies how to extract the <em>points</em> array from the <em>layer</em> elements of the <em>layers</em> array; <em>accessor</em> is a function which is invoked on each input layer passed to <a href=\"stack-layout#_stack\">stack</a>, equivalent to calling <em>layers.map(accessor)</em> before computing the stack layout. The default values function is the identity function. If <em>accessor</em> is not specified, returns the current values accessor.</p> <p>The values accessor can be used to associate additional data per-layer, rather than per-point. For example, say your data were structured as follows:</p> <div class=\"highlight highlight-source-js\"><pre>var layers = [\n  {\n    \"name\": \"apples\",\n    \"values\": [\n      { \"x\": 0, \"y\":  91},\n      { \"x\": 1, \"y\": 290}\n    ]\n  },\n  {  \n    \"name\": \"oranges\",\n    \"values\": [\n      { \"x\": 0, \"y\":  9},\n      { \"x\": 1, \"y\": 49}\n    ]\n  }\n];</pre></div> <p>Specify a values accessor that retrieves the points for each layer:</p> <div class=\"highlight highlight-source-js\"><pre>var stack = d3.layout.stack()\n    .offset(\"wiggle\")\n    .values(function(d) { return d.values; });</pre></div> <p>Then, if you wanted to add a tooltip for each layer, you might say:</p> <div class=\"highlight highlight-source-js\"><pre>svg.selectAll(\"path\")\n    .data(stack(layers))\n  .enter().append(\"path\")\n    .attr(\"d\", function(d) { return area(d.values); })\n  .append(\"title\")\n    .text(function(d) { return d.name; });</pre></div> <h6 id=\"offset\"> stack.<b>offset</b>([<i>offset</i>])</h6> <p>If <em>offset</em> is specified, sets the stack offset algorithm to the specified value. If <em>offset</em> is not specified, returns the current offset algorithm. The following string values are supported:</p> <ul> <li>silhouette - center the stream, as in <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.39.2977&amp;rep=rep1&amp;type=pdf\">ThemeRiver</a>.</li> <li>wiggle - minimize weighted change in slope.</li> <li>expand - normalize layers to fill the range [0,1].</li> <li>zero - use a zero baseline, <em>i.e.</em>, the <em>y</em>-axis.</li> </ul> <p>In addition to a string, <em>offset</em> may be specified as a function. The input to the offset function is the layer data, converted to a standardized representation: a two-dimensional array of values, where each value is represented as a two-element array [<em>x</em>, <em>y</em>]. The return value of the offset function must be an array of values which represents the <em>y</em>-coordinates of the baseline. For example, the default \"zero\" offset is implemented as:</p> <div class=\"highlight highlight-source-js\"><pre>function offset(data) {\n  var j = -1,\n      m = data[0].length,\n      y0 = [];\n  while (++j &lt; m) y0[j] = 0;\n  return y0;\n}</pre></div> <h6 id=\"order\"> stack.<b>order</b>([<i>order</i>])</h6> <p>If <em>order</em> is specified, sets the stack order to the specified value. If <em>order</em> is not specified, returns the current order. The following string values are supported:</p> <ul> <li>inside-out - sort by index of maximum value, then use balanced weighting.</li> <li>reverse - reverse the input layer order.</li> <li>default - use the input layer order.</li> </ul> <p>In addition to a string, <em>order</em> may be specified as a function. The input to the order function is the layer data, converted to the standardized representation: a two-dimensional array of values, where each value is represented as a two-element array [<em>x</em>, <em>y</em>]. The return value of the order function must be an array of indexes which represents the layer order. For example, the default order is implemented as:</p> <div class=\"highlight highlight-source-js\"><pre>function order(data) {\n  return d3.range(data.length);\n}</pre></div> <p>See also <a href=\"arrays#d3_range\">d3.range</a>.</p> <h6 id=\"x\"> stack.<b>x</b>([<i>accessor</i>])</h6> <p>Specifies how to access the <em>x</em>-coordinate of each value’s position. If <em>accessor</em> is specified, sets the accessor to the specified function. If <em>accessor</em> is not specified, returns the current function, which by default assumes that each input value has an x attribute:</p> <div class=\"highlight highlight-source-js\"><pre>function x(d) {\n  return d.x;\n}</pre></div> <p>The <em>x</em>-accessor is invoked for each input value, for each input layer, being passed the current data (d) and index (i). The return value of the accessor must be a number.</p> <p>The <em>x</em>-coordinate only affects the behavior of the “wiggle” <a href=\"#offset\">offset</a>; changing this accessor does <em>not</em> affect how data is grouped into stacks. Although the <em>x</em>-accessor is invoked for all layers (not just the bottommost layer), <strong>the stack layout assumes that the <em>x</em>-coordinates of all layers are homogenous and consistent</strong>. In other words, each layer must contain the same number of values, at the same <em>x</em>-coordinates, in the same order. If your data is irregular, you will need to reinterpolate or reorder the data before computing the stack.</p> <h6 id=\"y\"> stack.<b>y</b>([<i>accessor</i>])</h6> <p>Specifies how to access the <em>y</em>-coordinate of each value's thickness. If <em>accessor</em> is specified, sets the accessor to the specified function. If <em>accessor</em> is not specified, returns the current function, which by default assumes that each input value has a y attribute:</p> <div class=\"highlight highlight-source-js\"><pre>function y(d) {\n  return d.y;\n}</pre></div> <p>The <em>y</em>-accessor is invoked for each input value, for each input layer, being passed the current data (d) and index (i). The return value of the accessor must be a number. With the exception of the \"expand\" offset, the stack layout does not perform any automatic scaling of data. To simplify scaling, use this layout in conjunction with a <a href=\"quantitative-scales#linear\">linear scale</a> or similar.</p> <h6 id=\"out\"> stack.<b>out</b>([<i>setter</i>])</h6> <p>Specifies how to propagate the computed baseline to above layers. If <em>setter</em> is specified, it is used as the output function. If <em>setter</em> is not specified, returns the current output function, which by default assumes that each input value has y and y0 attributes:</p> <div class=\"highlight highlight-source-js\"><pre>function out(d, y0, y) {\n  d.y0 = y0;\n  d.y = y;\n}</pre></div> <p>The <em>setter</em> is invoked for each input value, for each input layer, being passed the current data (d), the computed <em>y0</em> value, and the computed <em>y</em>-thickness. In all cases except the \"expand\" offset, the <em>y</em>-thickness is the same as the input value returned by <a href=\"stack-layout#y\">y</a>, and thus may be ignored.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Stack-Layout\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Stack-Layout</a>\n  </p>\n</div>\n","svg-axes":"<h1 class=\"gh-header-title instapaper_title\">SVG Axes</h1>   <p>D3’s <a href=\"http://bl.ocks.org/mbostock/1166403\">axis component</a> displays reference lines for scales automatically. This lets you focus on displaying the data, while the axis component takes care of the tedious task of drawing axes and labeled ticks.</p> <p><a href=\"http://bl.ocks.org/mbostock/1166403\"><img src=\"https://camo.githubusercontent.com/e5941cab7d2840dd12b7f0337a98b9c66934b769/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f313136363430332f7468756d626e61696c2e706e67\" alt=\"Axis Component\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/1166403/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/6186172\"><img src=\"https://camo.githubusercontent.com/2614f116149fa1965de09cd4dfd7cc4e4428d485/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f363138363137322f7468756d626e61696c2e706e67\" alt=\"6186172\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/6186172/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/5537697\"><img src=\"https://camo.githubusercontent.com/fd286ceecd00bf7c295e38ac213ab4a60756ff43/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f353533373639372f7468756d626e61696c2e706e67\" alt=\"5537697\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/5537697/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/4573883\"><img src=\"https://camo.githubusercontent.com/1678a673cc4fb5ec9ea4e03c4f5cf8da1012fd8c/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343537333838332f7468756d626e61696c2e706e67\" alt=\"4573883\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4573883/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/4403522\"><img src=\"https://camo.githubusercontent.com/34956e6d517e970087ddccf04e6347e21edfa43b/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343430333532322f7468756d626e61696c2e706e67\" alt=\"4403522\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4403522/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/4349486\"><img src=\"https://camo.githubusercontent.com/722c44e616f4e79478479fc98a9b464f36b5ab34/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343334393438362f7468756d626e61696c2e706e67\" alt=\"4349486\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4349486/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/3892919\"><img src=\"https://camo.githubusercontent.com/838b470cc7186e8b1ca8ea1b7a0f697b92a2062f/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333839323931392f7468756d626e61696c2e706e67\" alt=\"3892919\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3892919/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/3371592\"><img src=\"https://camo.githubusercontent.com/09beac2f70a25e41c416e72284e5aa791ac5209b/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333337313539322f7468756d626e61696c2e706e67\" alt=\"3371592\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3371592/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/3259783\"><img src=\"https://camo.githubusercontent.com/fc556ccb3888ab5e0c21b2131a135ba3add9e954/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333235393738332f7468756d626e61696c2e706e67\" alt=\"3259783\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3259783/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/3212294\"><img src=\"https://camo.githubusercontent.com/7671b77ba1b574edf7e940bd695432eb940f4914/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333231323239342f7468756d626e61696c2e706e67\" alt=\"3212294\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3212294/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/2983699\"><img src=\"https://camo.githubusercontent.com/eecad4bfef533f8377c266aed0dcd1f4ec2bb858/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f323938333639392f7468756d626e61696c2e706e67\" alt=\"2983699\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/2983699/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/2996766\"><img src=\"https://camo.githubusercontent.com/ba060786e8d061aebbb7f5339f7c5829736ce6ae/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f323939363736362f7468756d626e61696c2e706e67\" alt=\"2996766\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/2996766/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/2996785\"><img src=\"https://camo.githubusercontent.com/82717a2961f1772695858aa9cc40c689bb44c157/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f323939363738352f7468756d626e61696c2e706e67\" alt=\"2996785\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/2996785/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/1849162\"><img src=\"https://camo.githubusercontent.com/2bda9a886cdb4c735451c33bd368e27b70fa3ceb/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f313834393136322f7468756d626e61696c2e706e67\" alt=\"1849162\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/1849162/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/4323929\"><img src=\"https://camo.githubusercontent.com/8f81488237b857170c2f30e4091c21f1cd82fb8f/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343332333932392f7468756d626e61696c2e706e67\" alt=\"4323929\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4323929/thumbnail.png\"></a></p> <h2 id=\"axis\"> Axis</h2> <p>The axis component is designed to work with D3’s <a href=\"quantitative-scales\">quantitative</a>, <a href=\"time-scales\">time</a> and <a href=\"ordinal-scales\">ordinal</a> scales.</p> <h6 id=\"axis\"> d3.svg.<b>axis</b>()</h6> <p>Create a new default axis.</p> <h6 id=\"_axis\"> <b>axis</b>(<i>selection</i>)</h6> <p>Apply the axis to a <a href=\"selections\">selection</a> or <a href=\"transitions\">transition</a>. The selection must contain an <code>svg</code> or <code>g</code> element. For example:</p> <div class=\"highlight highlight-source-js\"><pre>d3.select(\"body\").append(\"svg\")\n    .attr(\"class\", \"axis\")\n    .attr(\"width\", 1440)\n    .attr(\"height\", 30)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(0,30)\")\n    .call(axis);</pre></div> <h6 id=\"scale\"> axis.<b>scale</b>([<i>scale</i>])</h6> <p>If <em>scale</em> is specified, sets the scale and returns the axis. If <em>scale</em> is not specified, returns the current scale which defaults to a linear scale.</p> <h6 id=\"orient\"> axis.<b>orient</b>([<i>orientation</i>])</h6> <p>If <em>orientation</em> is specified, sets the orientation and returns the axis. If <em>orientation</em> is not specified, returns the current orientation which defaults to <code>\"bottom\"</code>. The following orientations are supported:</p> <ul> <li> <code>\"top\"</code> - horizontal axis with ticks above the domain path</li> <li> <code>\"bottom\"</code> - horizontal axis with ticks below the domain path</li> <li> <code>\"left\"</code> - vertical axis with ticks to the left of the domain path</li> <li> <code>\"right\"</code> - vertical axis with ticks to the right of the domain path</li> </ul> <p>If the specified <em>orientation</em> is not one of the supported values, the axis reverts to the default orientation. Changing the orientation affects the position of the ticks and their labels in relation to the axis path, but does not change the position of the axis itself; to change the position of the axis with respect to the plot, specify a <a href=\"http://www.w3.org/TR/SVG/coords.html#TransformAttribute\">transform</a> attribute on the containing <code>g</code> element.</p> <h6 id=\"ticks\"> axis.<b>ticks</b>([<i>arguments…</i>])</h6> <p>If <em>arguments</em> are specified, stores the specified arguments for subsequent use in generating ticks and returns the axis. The arguments will later be passed to <a href=\"quantitative-scales#linear_ticks\">scale.ticks</a> to generate tick values (unless tick values are specified explicitly via <a href=\"#tickValues\">axis.tickValues</a>). The arguments are also passed to the scale’s tickFormat method to generate the default tick format. If no arguments are specified, returns the current tick arguments, which default to [10].</p> <p>Suitable arguments depends on the associated scale: for a <a href=\"quantitative-scales\">linear scale</a>, you might specify a tick count such as <code>axis.ticks(20)</code>; for a <a href=\"quantitative-scales#log_tickFormat\">log scale</a>, you might specify both a count and a tick format; for a <a href=\"time-scales#ticks\">time scale</a>, a <a href=\"time-intervals\">time interval</a> such as <code>axis.ticks(d3.time.minutes, 15)</code> might be appropriate.</p> <h6 id=\"tickValues\"> axis.<b>tickValues</b>([<i>values</i>])</h6> <p>If a <em>values</em> array is specified, the specified values are used for ticks, rather than using the scale's automatic tick generator. If <em>values</em> is null, clears any previously-set explicit tick values, reverting back to the scale's tick generator. If <em>values</em> is not specified, returns the currently-set tick values, which defaults to null. For example, to generate ticks at specific values:</p> <div class=\"highlight highlight-source-js\"><pre>var xAxis = d3.svg.axis()\n    .scale(x)\n    .tickValues([1, 2, 3, 5, 8, 13, 21]);</pre></div> <p>The explicit tick values take precedent over the tick arguments set by <a href=\"#ticks\">axis.ticks</a>. However, any tick arguments will still be passed to the scale's <a href=\"#tickFormat\">tickFormat</a> function if a tick format is not also set; thus, it may be valid to set both axis.ticks and axis.tickValues.</p> <h6 id=\"tickSize\"> axis.<b>tickSize</b>([<i>inner, outer</i>])</h6> <p>If <em>inner, outer</em> are specified, sets the <a href=\"#innerTickSize\">inner</a> and <a href=\"#outerTickSize\">outer</a> tick sizes to the specified value and returns the axis. If <em>inner, outer</em> are not specified, returns the current inner tick size, which defaults to 6.</p> <h6 id=\"innerTickSize\"> axis.<b>innerTickSize</b>([<i>size</i>])</h6> <p>If <em>size</em> is specified, sets the inner tick size to the specified value and returns the axis. If <em>size</em> is not specified, returns the current inner tick size, which defaults to 6. The inner tick size controls the length of the tick lines, offset from the native position of the axis.</p> <h6 id=\"outerTickSize\"> axis.<b>outerTickSize</b>([<i>size</i>])</h6> <p>If <em>size</em> is specified, sets the outer tick size to the specified value and returns the axis. If <em>size</em> is not specified, returns the current outer tick size, which defaults to 6. The outer tick size controls the length of the square ends of the domain path, offset from the native position of the axis. Thus, the “outer ticks” are not actually ticks but part of the domain path, and their position is determined by the associated scale's domain extent. Thus, outer ticks may overlap with the first or last inner tick. An outer tick size of 0 suppresses the square ends of the domain path, instead producing a straight line.</p> <h6 id=\"tickPadding\"> axis.<b>tickPadding</b>([<i>padding</i>])</h6> <p>If <em>padding</em> is specified, sets the padding to the specified value in pixels and returns the axis. If <em>padding</em> is not specified, returns the current padding which defaults to 3 pixels.</p> <h6 id=\"tickFormat\"> axis.<b>tickFormat</b>([<i>format</i>])</h6> <p>If <em>format</em> is specified, sets the format to the specified function and returns the axis. If <em>format</em> is not specified, returns the current format function, which defaults to null. A null format indicates that the scale's default formatter should be used, which is generated by calling <a href=\"quantitative-scales#linear_tickFormat\">scale.tickFormat</a>. In this case, the arguments specified by <a href=\"#ticks\">ticks</a> are likewise passed to scale.tickFormat.</p> <p>See <a href=\"formatting#d3_format\">d3.format</a> for help creating formatters. For example, <code>axis.tickFormat(d3.format(\",.0f\"))</code> will display integers with comma-grouping for thousands. Defining the formatter first: <code>var commasFormatter = d3.format(\",.0f\")</code> lets you to call it as a function of your data, for example, to add currency units in front of the comma-grouped integers: <code>.tickFormat(function(d) { return \"$\" + commasFormatter(d); })</code>.</p> <p>Note: for log scales, the number of ticks cannot be customized; however, the number of tick labels <em>can</em> be customized via <a href=\"#ticks\">ticks</a>. Likewise, the tick formatter for log scales is typically specified via ticks rather than tickFormat, so as to preserve the default label-hiding behavior.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/SVG-Axes\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/SVG-Axes</a>\n  </p>\n</div>\n","time-formatting":"<h1 class=\"gh-header-title instapaper_title\">Time Formatting</h1>   <p>D3 includes a helper module for parsing and formatting dates modeled after the venerable <a href=\"http://pubs.opengroup.org/onlinepubs/009695399/functions/strptime.html\">strptime</a> and <a href=\"http://pubs.opengroup.org/onlinepubs/007908799/xsh/strftime.html\">strftime</a> C-library standards. These functions are also notably available in Python's <a href=\"http://docs.python.org/library/time.html\">time</a> module.</p> <h6 id=\"format\"> d3.time.<b>format</b>(<i>specifier</i>)</h6> <p>Constructs a new local time formatter using the given <em>specifier</em>. (Equivalent to <a href=\"localization#locale_timeFormat\">locale.timeFormat</a> for the default U.S. English locale.) The specifier string may contain the following directives.</p> <ul> <li> <code>%a</code> - abbreviated weekday name.</li> <li> <code>%A</code> - full weekday name.</li> <li> <code>%b</code> - abbreviated month name.</li> <li> <code>%B</code> - full month name.</li> <li> <code>%c</code> - date and time, as \"%a %b %e %H:%M:%S %Y\".</li> <li> <code>%d</code> - zero-padded day of the month as a decimal number [01,31].</li> <li> <code>%e</code> - space-padded day of the month as a decimal number [ 1,31]; equivalent to <code>%_d</code>.</li> <li> <code>%H</code> - hour (24-hour clock) as a decimal number [00,23].</li> <li> <code>%I</code> - hour (12-hour clock) as a decimal number [01,12].</li> <li> <code>%j</code> - day of the year as a decimal number [001,366].</li> <li> <code>%m</code> - month as a decimal number [01,12].</li> <li> <code>%M</code> - minute as a decimal number [00,59].</li> <li> <code>%L</code> - milliseconds as a decimal number [000, 999].</li> <li> <code>%p</code> - either AM or PM.</li> <li> <code>%S</code> - second as a decimal number [00,61].</li> <li> <code>%U</code> - week number of the year (Sunday as the first day of the week) as a decimal number [00,53].</li> <li> <code>%w</code> - weekday as a decimal number [0(Sunday),6].</li> <li> <code>%W</code> - week number of the year (Monday as the first day of the week) as a decimal number [00,53].</li> <li> <code>%x</code> - date, as \"%m/%d/%Y\".</li> <li> <code>%X</code> - time, as \"%H:%M:%S\".</li> <li> <code>%y</code> - year without century as a decimal number [00,99].</li> <li> <code>%Y</code> - year with century as a decimal number.</li> <li> <code>%Z</code> - time zone offset, such as \"-0700\".</li> <li> <code>%%</code> - a literal \"%\" character.</li> </ul> <p>For %U, all days in a new year preceding the first Sunday are considered to be in week 0. For %W, all days in a new year preceding the first Monday are considered to be in week 0. In some implementations of strftime and strptime (as in Python), a directive may include an optional field width or precision; this feature is not yet implemented in D3, but may be added in the future.</p> <p>For locale-specific date and time formatters, see <a href=\"localization#locale_timeFormat\">locale.timeFormat</a>.</p> <p>The % sign indicating a directive may be immediately followed by a padding modifier:</p> <ul> <li> <code>0</code> - zero-padding</li> <li> <code>_</code> - space-padding</li> <li> <code>-</code> - disable padding</li> </ul> <p>If no padding modifier is specified, the default is <code>0</code> for all directives, except for <code>%e</code> which defaults to <code>_</code>).</p> <p>The returned <em>format</em> is both an object and a function. For example:</p> <div class=\"highlight highlight-source-js\"><pre>var format = d3.time.format(\"%Y-%m-%d\");\nformat.parse(\"2011-01-01\"); // returns a Date\nformat(new Date(2011, 0, 1)); // returns a string</pre></div> <h6 id=\"_format\"> <b>format</b>(<i>date</i>)</h6> <p>Formats the specified <em>date</em>, returning the corresponding string. The <em>date</em> must be a JavaScript <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date\">Date</a> object. </p> <div class=\"highlight highlight-source-js\"><pre>var monthNameFormat = d3.time.format(\"%B\");\nvar dayNameFormat = d3.time.format(\"%A\");\nmonthNameFormat(new Date(2014, 4, 1));  //returns string \"May\" (remember javascript months are zero-indexed, thus 4 = May)\ndayNameFormat(new Date(2014, 4, 1));  //returns string \"Thursday\"</pre></div> <p>Note that when dates are used in conjunction with <a href=\"quantitative-scales\">quantitative scales</a>, the dates are implicitly coerced to numbers representing the number of milliseconds since <a href=\"http://en.wikipedia.org/wiki/Unix_time\">UNIX epoch</a>. To convert between numbers and dates, you can use the following code:</p> <div class=\"highlight highlight-source-js\"><pre>time = +date; // convert a Date object to time in milliseconds\ndate = new Date(time); // convert a time in milliseconds to a Date object</pre></div> <p>If you prefer to be explicit, you can also use the date object's <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/getTime\">getTime</a> method, but the + operator is shorter and possibly faster.</p> <h6 id=\"parse\"> format.<b>parse</b>(<i>string</i>)</h6> <p>Parses the specified <em>string</em>, returning the corresponding date object. If the parsing fails, returns null. Unlike \"natural language\" date parsers (including JavaScript's built-in <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/parse\">parse</a>), this method is strict: if the specified string does not exactly match the associated format specifier, this method returns null. For example, if the associated format is the full ISO 8601 string \"%Y-%m-%dT%H:%M:%SZ\", then the string \"2011-07-01T19:15:28Z\" will be parsed correctly, but \"2011-07-01T19:15:28\", \"2011-07-01 19:15:28\" and \"2011-07-01\" will return null, despite being valid 8601 dates. (Note that the hard-coded \"Z\" here is different from <code>%Z</code>, the time zone offset.) If desired, you can use multiple formats to try multiple format specifiers sequentially.</p> <p>The <code>%d</code> and <code>%e</code> format specifiers are considered equivalent for parsing.</p> <h6 id=\"format_multi\"> d3.time.format.<b>multi</b>(<i>formats</i>)</h6> <p>Returns a new multi-resolution time format given the specified array of predicated <em>formats</em>. Each format is a two-element array consisting of a format specifier string (such as that passed to the <a href=\"#format\">d3.time.format</a> constructor) and a predicate function. For any date that is passed to the returned time format, the first predicate function that returns true will determine how the specified date is formatted. For example, the default time format used by <a href=\"time-scales\">d3.time.scale</a> is implemented as:</p> <div class=\"highlight highlight-source-js\"><pre>var format = d3.time.format.multi([\n  [\".%L\", function(d) { return d.getMilliseconds(); }],\n  [\":%S\", function(d) { return d.getSeconds(); }],\n  [\"%I:%M\", function(d) { return d.getMinutes(); }],\n  [\"%I %p\", function(d) { return d.getHours(); }],\n  [\"%a %d\", function(d) { return d.getDay() &amp;&amp; d.getDate() != 1; }],\n  [\"%b %d\", function(d) { return d.getDate() != 1; }],\n  [\"%B\", function(d) { return d.getMonth(); }],\n  [\"%Y\", function() { return true; }]\n]);</pre></div> <p>Thus, if the specified date is not a round second, the milliseconds format (<code>\".%L\"</code>) is used; otherwise, if the specified date is not a round minute, the seconds format (<code>\":%S\"</code>) is used, and so on. See <a href=\"http://bl.ocks.org/mbostock/4149176\">bl.ocks.org/4149176</a> for an example.</p> <p>The <strong>multi</strong> method is available on any d3.time.format constructor. For example, <a href=\"#format_utc\">d3.time.format.utc</a>.multi returns a multi-resolution UTC time format, and <a href=\"localization#timeFormat\">locale.timeFormat</a>.multi returns a multi-resolution time format for the specified locale.</p> <h6 id=\"format_utc\"> d3.time.format.<b>utc</b>(<i>specifier</i>)</h6> <p>Constructs a new UTC time formatter using the given <em>specifier</em>. (Equivalent to <a href=\"localization#locale_timeFormat_utc\">locale.timeFormat.utc</a> for the default U.S. English locale.) The specifier may contain the same directives as the local time <a href=\"time-formatting#format\">format</a>. Internally, this time formatter is implemented using the UTC methods on the Date object, such as <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/getUTCDate\">getUTCDate</a> and <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/setUTCDate\">setUTCDate</a> in place of <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/getDate\">getDate</a> and <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/setDate\">setDate</a>.</p> <h6 id=\"format_iso\"> d3.time.format.<b>iso</b>\n</h6> <p>The full <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> UTC time format: \"%Y-%m-%dT%H:%M:%S.%LZ\". Where available, this method will use <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toISOString\">Date.toISOString</a> to format and the <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date\">Date constructor</a> to parse strings. If you depend on strict validation of the input format according to ISO 8601, you should construct a time format explicitly instead:</p> <div class=\"highlight highlight-source-js\"><pre>var iso = d3.time.format.utc(\"%Y-%m-%dT%H:%M:%S.%LZ\");</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Time-Formatting\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Time-Formatting</a>\n  </p>\n</div>\n","time-intervals":"<h1 class=\"gh-header-title instapaper_title\">Time Intervals</h1>   <p><strong>Time intervals</strong> are irregular! For example, there are 60 seconds in a minute, but 24 hours in a day. Even more confusing, some days have 23 or 25 hours due to <a href=\"http://en.wikipedia.org/wiki/Daylight_saving_time\">daylight saving time</a>, and the standard <a href=\"http://en.wikipedia.org/wiki/Gregorian_calendar\">Gregorian calendar</a> uses months of differing lengths. And then there are leap years!</p> <p>To simplify manipulation of and iteration over time intervals, D3 provides a handful of time utilities in addition to the time <a href=\"time-scales\">scale</a> and <a href=\"time-formatting\">format</a>. The utilities support both local time and UTC time. Local time is determined by the browser's JavaScript runtime; arbitrary time zone support would be nice, but requires access to the Olson zoneinfo files.</p> <h2 id=\"interval\"> Interval</h2> <h6 id=\"interval\"> d3.time.<i>interval</i>\n</h6> <p>Returns the specified <em>interval</em>. The following intervals are supported:</p> <ul> <li>d3.time.<a href=\"#second\">second</a> </li> <li>d3.time.<a href=\"#minute\">minute</a> </li> <li>d3.time.<a href=\"#hour\">hour</a> </li> <li>d3.time.<a href=\"#day\">day</a> </li> <li>d3.time.<a href=\"#week\">week</a> (alias for d3.time.<a href=\"#sunday\">sunday</a>)</li> <li>d3.time.<a href=\"#sunday\">sunday</a> </li> <li>d3.time.<a href=\"#monday\">monday</a> </li> <li>d3.time.<a href=\"#tuesday\">tuesday</a> </li> <li>d3.time.<a href=\"#wednesday\">wednesday</a> </li> <li>d3.time.<a href=\"#thursday\">thursday</a> </li> <li>d3.time.<a href=\"#friday\">friday</a> </li> <li>d3.time.<a href=\"#saturday\">saturday</a> </li> <li>d3.time.<a href=\"#month\">month</a> </li> <li>d3.time.<a href=\"#year\">year</a> </li> </ul> <h6 id=\"_interval\"> <i>interval</i>(<i>date</i>)</h6> <p>Alias for <em>interval</em>.floor(<em>date</em>). For example, <code>d3.time.day(new Date())</code> returns midnight (12:00 AM) on the current day, in local time.</p> <h6 id=\"interval_floor\"> <i>interval</i>.<b>floor</b>(<i>date</i>)</h6> <p>Rounds down the specified <em>date</em>, returning the latest time interval before or equal to <em>date</em>. For example, <code>d3.time.day.floor(new Date())</code> returns midnight (12:00 AM) on the current day, in local time.</p> <h6 id=\"interval_round\"> <i>interval</i>.<b>round</b>(<i>date</i>)</h6> <p>Rounds up or down the specified <em>date</em>, returning the closest time interval to <em>date</em>. For example, <code>d3.time.day.round(new Date())</code> returns midnight (12:00 AM) on the current day if it is on or before noon, and midnight of the following day if it is after noon.</p> <h6 id=\"interval_ceil\"> <i>interval</i>.<b>ceil</b>(<i>date</i>)</h6> <p>Rounds up the specified <em>date</em>, returning the earliest time interval after or equal to <em>date</em>. For example, <code>d3.time.day.ceil(new Date())</code> returns midnight (12:00 AM) on the following day, in local time (unless you happen to run this code at exactly midnight, in which case it returns the current time).</p> <h6 id=\"interval_range\"> <i>interval</i>.<b>range</b>(<i>start</i>, <i>stop</i>[, <i>step</i>])</h6> <p>Returns every time interval after or equal to <em>start</em> and before <em>stop</em>. If <em>step</em> is specified, then every <em>step</em>'th interval will be returned, based on the interval number (such as day of month for d3.time.day). For example, a <em>step</em> of 2 will return the 1st, 3rd, 5th <em>etc.</em> of the month with d3.time.day.</p> <h6 id=\"interval_offset\"> <i>interval</i>.<b>offset</b>(<i>date</i>, <i>step</i>)</h6> <p>Returns a new date equal to <em>date</em> plus <em>step</em> intervals. If <em>step</em> is negative, then the returned date will be before the specified <em>date</em>; if <em>step</em> is zero, then a copy of the specified <em>date</em> is returned. This method does not round the specified <em>date</em> to the interval. For example, if it is currently 5:34 PM, then <code>d3.time.day.offset(new Date(), 1)</code> returns 5:34 PM tomorrow (even if Daylight Savings Time changes!).</p> <h6 id=\"interval_utc\"> <i>interval</i>.<b>utc</b>\n</h6> <p>Returns a corresponding time interval in UTC rather than local time. For example, <code>d3.time.day.range(start, stop)</code> returns local time days between <em>start</em> and <em>stop</em>, while <code>d3.time.day.utc.range(start, stop)</code> returns UTC days between <em>start</em> and <em>stop</em>.</p> <h2 id=\"intervals\"> Intervals</h2> <h6 id=\"second\"> d3.time.<b>second</b>\n</h6> <p>Seconds (e.g., 01:23:45.0000 AM). Always 1,000 milliseconds long.</p> <h6 id=\"minute\"> d3.time.<b>minute</b>\n</h6> <p>Minutes (e.g., 01:02:00 AM). ECMAScript <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.1\">explicitly ignores leap seconds</a>, so minutes are always 60 seconds (6e4 milliseconds) long.</p> <h6 id=\"hour\"> d3.time.<b>hour</b>\n</h6> <p>Hours (e.g., 01:00 AM). 60 minutes long (36e5 milliseconds). Note that advancing time by one hour can return the same hour number, or skip an hour number, due to Daylight Savings Time.</p> <h6 id=\"day\"> d3.time.<b>day</b>\n</h6> <p>Days (e.g., February 7, 2012 at 12:00 AM). Most days are 24 hours long (864e5 milliseconds); however, with Daylight Savings Time, a day may be 23 or 25 hours long.</p> <h6 id=\"week\"> d3.time.<b>week</b>\n</h6> <p>Alias for d3.time.<a href=\"#sunday\">sunday</a>. A week is always 7 days, but ranges between 167 and 169 hours depending on Daylight Savings Time.</p> <h6 id=\"sunday\"> d3.time.<b>sunday</b>\n</h6> <p>Sunday-based weeks (e.g., February 5, 2012 at 12:00 AM).</p> <h6 id=\"monday\"> d3.time.<b>monday</b>\n</h6> <p>Monday-based weeks (e.g., February 6, 2012 at 12:00 AM).</p> <h6 id=\"tuesday\"> d3.time.<b>tuesday</b>\n</h6> <p>Tuesday-based weeks (e.g., February 7, 2012 at 12:00 AM).</p> <h6 id=\"wednesday\"> d3.time.<b>wednesday</b>\n</h6> <p>Wednesday-based weeks (e.g., February 8, 2012 at 12:00 AM).</p> <h6 id=\"thursday\"> d3.time.<b>thursday</b>\n</h6> <p>Thursday-based weeks (e.g., February 9, 2012 at 12:00 AM).</p> <h6 id=\"friday\"> d3.time.<b>friday</b>\n</h6> <p>Friday-based weeks (e.g., February 10, 2012 at 12:00 AM).</p> <h6 id=\"saturday\"> d3.time.<b>saturday</b>\n</h6> <p>Saturday-based weeks (e.g., February 11, 2012 at 12:00 AM).</p> <h6 id=\"month\"> d3.time.<b>month</b>\n</h6> <p>Months (e.g., February 1, 2012 at 12:00 AM). Ranges between 28 and 31 days.</p> <h6 id=\"year\"> d3.time.<b>year</b>\n</h6> <p>Years (e.g., January 1, 2012 at 12:00 AM). Normal years are 365 days long; leap years are 366.</p> <h2 id=\"aliases\"> Aliases</h2> <h6 id=\"seconds\"> d3.time.<b>seconds</b>(<i>start</i>, <i>stop</i>[, <i>step</i>])</h6> <p>Alias for d3.time.<a href=\"#second\">second</a>.<a href=\"#interval_range\">range</a>. Returns the second boundaries (e.g., 01:23:45 AM) after or equal to <em>start</em> and before <em>stop</em>. If <em>step</em> is specified, then every <em>step</em>'th second will be returned, based on the second of the minute. For example, a <em>step</em> of 15 will return 9:01:45 PM, 9:02:00 PM, 9:02:15 PM, <em>etc.</em></p> <h6 id=\"minutes\"> d3.time.<b>minutes</b>(<i>start</i>, <i>stop</i>[, <i>step</i>])</h6> <p>Alias for d3.time.<a href=\"#minute\">minute</a>.<a href=\"#interval_range\">range</a>. Returns the minute boundaries (e.g., 01:23 AM) after or equal to <em>start</em> and before <em>stop</em>. If <em>step</em> is specified, then every <em>step</em>'th minute will be returned, based on the minute of the hour. For example, a <em>step</em> of 15 will return 9:45 PM, 10:00 PM, 10:15 PM, <em>etc.</em></p> <h6 id=\"hours\"> d3.time.<b>hours</b>(<i>start</i>, <i>stop</i>[, <i>step</i>])</h6> <p>Alias for d3.time.<a href=\"#hour\">hour</a>.<a href=\"#interval_range\">range</a>. Returns the hour boundaries (e.g., 01 AM) after or equal to <em>start</em> and before <em>stop</em>. If <em>step</em> is specified, then every <em>step</em>'th hour will be returned, based on the hour of the day. For example, a <em>step</em> of 3 will return 9 PM, 12 AM, 3 AM, <em>etc.</em></p> <h6 id=\"days\"> d3.time.<b>days</b>(<i>start</i>, <i>stop</i>[, <i>step</i>])</h6> <p>Alias for d3.time.<a href=\"#day\">day</a>.<a href=\"#interval_range\">range</a>. Returns the day boundaries (midnight) after or equal to <em>start</em> and before <em>stop</em>. If <em>step</em> is specified, then every <em>step</em>'th date will be returned, based on the day of the month. For example, a <em>step</em> of 2 will return the 1st, 3rd, 5th <em>etc.</em> of the month.</p> <h6 id=\"weeks\"> d3.time.<b>weeks</b>(<i>start</i>, <i>stop</i>[, <i>step</i>]) <br> d3.time.<b>sundays</b>(<i>start</i>, <i>stop</i>[, <i>step</i>]) <br> d3.time.<b>mondays</b>(<i>start</i>, <i>stop</i>[, <i>step</i>]) <br> d3.time.<b>tuesdays</b>(<i>start</i>, <i>stop</i>[, <i>step</i>]) <br> d3.time.<b>wednesdays</b>(<i>start</i>, <i>stop</i>[, <i>step</i>]) <br> d3.time.<b>thursdays</b>(<i>start</i>, <i>stop</i>[, <i>step</i>]) <br> d3.time.<b>fridays</b>(<i>start</i>, <i>stop</i>[, <i>step</i>]) <br> d3.time.<b>saturdays</b>(<i>start</i>, <i>stop</i>[, <i>step</i>])</h6> <p>Aliases for d3.time.<i>interval</i>.<a href=\"#interval_range\">range</a> etc. Returns the week boundaries (midnight Sunday) after or equal to <em>start</em> and before <em>stop</em>. If <em>step</em> is specified, then every <em>step</em>'th week will be returned, based on the week of the year. For example, a <em>step</em> of 4 will return January 2, January 30, February 27, <em>etc.</em></p> <h6 id=\"months\"> d3.time.<b>months</b>(<i>start</i>, <i>stop</i>[, <i>step</i>])</h6> <p>Alias for d3.time.<a href=\"#month\">month</a>.<a href=\"#interval_range\">range</a>. Returns the month boundaries (e.g., January 01) after or equal to <em>start</em> and before <em>stop</em>. If <em>step</em> is specified, then every <em>step</em>'th month will be returned, based on the month of the year. For example, a <em>step</em> of 3 will return January, April, July, <em>etc.</em></p> <h6 id=\"years\"> d3.time.<b>years</b>(<i>start</i>, <i>stop</i>[, <i>step</i>])</h6> <p>Alias for d3.time.<a href=\"#year\">year</a>.<a href=\"#interval_range\">range</a>. Returns the year boundaries (midnight January 1st) after or equal to <em>start</em> and before <em>stop</em>. If <em>step</em> is specified, then every <em>step</em>'th year will be returned. For example, a <em>step</em> of 5 will return 2010, 2015, 2020, <em>etc.</em></p> <h2 id=\"counting\"> Counting</h2> <h6 id=\"dayOfYear\"> d3.time.<b>dayOfYear</b>(<i>date</i>)</h6> <p>Returns the day number for the given date. The first day of the year (January 1) is always the 0th day. Unlike the <a href=\"time-formatting\">d3.time.format</a>'s %j directive, dayOfYear is 0-based rather than 1-based.</p> <h6 id=\"weekOfYear\"> d3.time.<b>weekOfYear</b>(<i>date</i>) <br> d3.time.<b>sundayOfYear</b>(<i>date</i>) <br> d3.time.<b>mondayOfYear</b>(<i>date</i>) <br> d3.time.<b>tuesdayOfYear</b>(<i>date</i>) <br> d3.time.<b>wednesdayOfYear</b>(<i>date</i>) <br> d3.time.<b>thursdayOfYear</b>(<i>date</i>) <br> d3.time.<b>fridayOfYear</b>(<i>date</i>) <br> d3.time.<b>saturdayOfYear</b>(<i>date</i>)</h6> <p>Returns the week number for the given date, where weeks start with the given <i>day</i>. The first day of the year (January 1) is always the 0th week. weekOfYear is an alias for sundayOfYear, which is equivalent to <a href=\"time-formatting\">d3.time.format</a>'s %U directive. mondayOfYear is equivalent to <a href=\"time-formatting\">d3.time.format</a>'s %W directive.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Time-Intervals\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Time-Intervals</a>\n  </p>\n</div>\n","time-scales":"<h1 class=\"gh-header-title instapaper_title\">Time Scales</h1>   <p>D3's <strong>time scale</strong> is an extension of <a href=\"quantitative-scales#linear\">d3.scale.linear</a> that uses JavaScript <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date\">Date</a> objects as the domain representation. Thus, unlike the normal linear scale, domain values are coerced to dates rather than numbers; similarly, the <a href=\"time-scales#invert\">invert</a> function returns a date. Most conveniently, the time scale also provides suitable <a href=\"time-scales#ticks\">ticks</a> based on <a href=\"time-intervals\">time intervals</a>, taking the pain out of generating axes for nearly any time-based domain.</p> <p>A scale object, such as that returned by <a href=\"time-scales#scale\">d3.time.scale</a>, is both an object and a function. That is: you can call the scale like any other function, and the scale has additional methods that change its behavior. Like other classes in D3, scales follow the method chaining pattern where setter methods return the scale itself, allowing multiple setters to be invoked in a concise statement.</p> <h6 id=\"scale\"> d3.time.<b>scale</b>()</h6> <p>Constructs a new time scale with the default domain and range; the ticks and tick format are configured for local time.</p> <h6 id=\"utc\"> d3.time.scale.<b>utc</b>()</h6> <p>Constructs a new time scale with the default domain and range; the ticks and tick format are configured for UTC time.</p> <h6 id=\"_scale\"> <b>scale</b>(<i>x</i>)</h6> <p>Given a date <em>x</em> in the input domain, returns the corresponding value in the output range.</p> <h6 id=\"invert\"> scale.<b>invert</b>(<i>y</i>)</h6> <p>Returns the date in the input domain <em>x</em> for the corresponding value in the output range <em>y</em>. This represents the inverse mapping from range to domain. For a valid value <em>y</em> in the output range, scale(scale.invert(<em>y</em>)) equals <em>y</em>; similarly, for a valid date <em>x</em> in the input domain, scale.invert(scale(<em>x</em>)) equals <em>x</em>. The invert operator is particularly useful for interaction, say to determine the date in the input domain that corresponds to the pixel location under the mouse.</p> <h6 id=\"domain\"> scale.<b>domain</b>([<i>dates</i>])</h6> <p>If <em>dates</em> is specified, sets the scale's input domain to the specified array of dates. The array must contain two or more dates. If the elements in the given array are not dates, they will be coerced to dates; this coercion happens similarly when the scale is called. If <em>dates</em> is not specified, returns the scale's current input domain. Although time scales typically have just two dates in their domain, you can specify more than two dates for a <em>polylinear</em> scale. In this case, there must be an equivalent number of values in the output range.</p> <h6 id=\"nice\"> scale.<b>nice</b>([<i>interval</i>[, <i>step</i>]]) <br> scale.<b>nice</b>([<i>count</i>])</h6> <p>Extends the domain so that it starts and ends on nice round values as determined by the specified <a href=\"time-intervals\">time <em>interval</em></a> and optional <em>step</em> count. As an alternative to specifying an explicit time interval, a numeric <em>count</em> can be specified, and a time interval will be chosen automatically to be consistent with <a href=\"#ticks\">scale.ticks</a>. If <em>count</em> is not specified, it defaults to 10.</p> <p>This method typically extends the scale's domain, and may only extend the bounds to the nearest round value. Nicing is useful if the domain is computed from data and may be irregular. For example, for a domain of [2009-07-13T00:02, 2009-07-13T23:48], the nice domain is [2009-07-13, 2009-07-14]. If the domain has more than two values, nicing the domain only affects the first and last value.</p> <h6 id=\"range\"> scale.<b>range</b>([<i>values</i>])</h6> <p>If <em>values</em> is specified, sets the scale's output range to the specified array of values. The array must contain two or more values, to match the cardinality of the input domain. The elements in the given array need not be numbers; any value that is supported by the underlying <a href=\"time-scales#interpolate\">interpolator</a> will work. However, numeric ranges are required for the invert operator. If <em>values</em> is not specified, returns the scale's current output range.</p> <h6 id=\"rangeRound\"> scale.<b>rangeRound</b>([<i>values</i>])</h6> <p>Sets the scale's output range to the specified array of values, while also setting the scale's interpolator to <a class=\"internal present\" href=\"transitions#d3_interpolateRound\">d3.interpolateRound</a>. This is a convenience routine for when the values output by the scale should be exact integers, such as to avoid antialiasing artifacts. It is also possible to round the output values manually after the scale is applied.</p> <h6 id=\"interpolate\"> scale.<b>interpolate</b>([<i>factory</i>])</h6> <p>If <em>factory</em> is specified, sets the scale's output interpolator using the specified <em>factory</em>. The interpolator factory defaults to <a class=\"internal present\" href=\"transitions#d3_interpolate\">d3.interpolate</a>, and is used to map the normalized domain parameter <em>t</em> in [0,1] to the corresponding value in the output range. The interpolator factory will be used to construct interpolators for each adjacent pair of values from the output range. If <em>factory</em> is not specified, returns the scale's interpolator factory.</p> <h6 id=\"clamp\"> scale.<b>clamp</b>([<i>boolean</i>])</h6> <p>If <em>boolean</em> is specified, enables or disables clamping accordingly. By default, clamping is disabled, such that if a value outside the input domain is passed to the scale, the scale may return a value outside the output range through linear extrapolation. For example, with the default domain and range of [0,1], an input value of 2 will return an output value of 2. If clamping is enabled, the normalized domain parameter <em>t</em> is clamped to the range [0,1], such that the return value of the scale is always within the scale's output range. If <em>boolean</em> is not specified, returns whether or not the scale currently clamps values to within the output range.</p> <h6 id=\"ticks\"> scale.<b>ticks</b>([<i>interval</i>[, <i>step</i>]]) <br> scale.<b>ticks</b>([<i>count</i>])</h6> <p>Returns representative dates from the scale's input domain. The returned tick dates are uniformly spaced (modulo irregular time intervals, such as months and leap years), have human-readable values (such as midnights), and are guaranteed to be within the extent of the input domain. Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data.</p> <p>If <em>count</em> is a number, then approximately <em>count</em> ticks will be returned. If <em>count</em> is not specified, it defaults to 10. The specified <em>count</em> is only a hint; the scale may return more or fewer values depending on the input domain. If a <a href=\"time-intervals\">time <em>interval</em></a> is specified, then the time interval’s <a href=\"time-intervals#interval_range\">range function</a> will be used to generate ticks, being passed the optional <em>step</em> argument, if any. For example, to create ten default ticks, say:</p> <div class=\"highlight highlight-source-js\"><pre>scale.ticks(10);</pre></div> <p>While to create ticks at 15-minute intervals, say:</p> <div class=\"highlight highlight-source-js\"><pre>scale.ticks(d3.time.minute, 15);</pre></div> <p>Note: for UTC scales, be sure to use the appropriate UTC range method (such as d3.time.minute.utc).</p> <p>The following time intervals are considered for automatic ticks:</p> <ul> <li>1-, 5-, 15- and 30-<a href=\"time-intervals#second\">second</a>.</li> <li>1-, 5-, 15- and 30-<a href=\"time-intervals#minute\">minute</a>.</li> <li>1-, 3-, 6- and 12-<a href=\"time-intervals#hour\">hour</a>.</li> <li>1- and 2-<a href=\"time-intervals#day\">day</a>.</li> <li>1-<a href=\"time-intervals#week\">week</a>.</li> <li>1- and 3-<a href=\"time-intervals#month\">month</a>.</li> <li>1-<a href=\"time-intervals#year\">year</a>.</li> </ul> <p>This set of time intervals is somewhat arbitrary and additional values may be added in the future.</p> <h6 id=\"tickFormat\"> scale.<b>tickFormat</b>()</h6> <p>Returns a <a class=\"internal present\" href=\"time-formatting\">time format</a> function suitable for displaying a tick value. You don't have to use the scale's built-in tick format, but it automatically computes the appropriate display based on the input date.</p> <p>The following time formats are considered:</p> <ul> <li>%Y - for year boundaries, such as \"2011\".</li> <li>%B - for month boundaries, such as \"February\".</li> <li>%b %d - for week boundaries, such as \"Feb 06\".</li> <li>%a %d - for day boundaries, such as \"Mon 07\".</li> <li>%I %p - for hour boundaries, such as \"01 AM\".</li> <li>%I:%M - for minute boundaries, such as \"01:23\".</li> <li>:%S - for second boundaries, such as \":45\".</li> <li>.%L - milliseconds for all other times, such as \".012\".</li> </ul> <p>By using multi-scale time formats, the default tick format provides both local and global context for each time interval. For example, by showing the sequence [11 PM, Mon 07, 01 AM], the tick formatter reveals information about hours, dates, and day simultaneously—rather than just the hours. If you'd prefer single-scale time formatting, you can always use your own <a href=\"time-formatting\">d3.time.format</a>. You can also roll your own <a href=\"http://bl.ocks.org/mbostock/4149176\">custom multi-scale time format</a>.</p> <h6 id=\"copy\"> scale.<b>copy</b>()</h6> <p>Returns an exact copy of this time scale. Changes to this scale will not affect the returned scale, and vice versa.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Time-Scales\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Time-Scales</a>\n  </p>\n</div>\n","quantitative-scales":"<h1 class=\"gh-header-title instapaper_title\">Quantitative Scales</h1>   <p><strong>Scales</strong> are functions that map from an input domain to an output range. <strong>Quantitative</strong> scales have a continuous domain, such as the set of real numbers, or dates. There are also <a class=\"internal present\" href=\"ordinal-scales\">ordinal scales</a>, which have a discrete domain, such as a set of names or categories. Scales are an optional feature in D3; you don't have to use them, if you prefer to do the math yourself. However, using scales can greatly simplify the code needed to map a dimension of data to a visual representation.</p> <p>A scale object, such as that returned by <a href=\"quantitative-scales#linear\">d3.scale.linear</a>, is both an object and a function. That is: you can call the scale like any other function, and the scale has additional methods that change its behavior. Like other classes in D3, scales follow the method chaining pattern where setter methods return the scale itself, allowing multiple setters to be invoked in a concise statement.</p> <h2 id=\"linear-scales\"> Linear Scales</h2> <p>Linear scales are the most common scale, and a good default choice to map a continuous input domain to a continuous output range. The mapping is <em>linear</em> in that the output range value <em>y</em> can be expressed as a linear function of the input domain value <em>x</em>: <em>y</em> = <em>mx</em> + <em>b</em>. The input domain is typically a dimension of the data that you want to visualize, such as the height of students (measured in meters) in a sample population. The output range is typically a dimension of the desired output visualization, such as the height of bars (measured in pixels) in a histogram. </p> <p>The state dimensions are <a href=\"#linear_domain\">domain</a>, <a href=\"#linear_range\">range</a>, <a href=\"#linear_interpolate\">output interpolator</a> and <a href=\"#linear_clamp\">clamping behavior</a>.</p> <h6 id=\"linear\"> d3.scale.<b>linear</b>()</h6> <p>Constructs a new linear scale with the default domain [0,1] and the default range [0,1]. Thus, the default linear scale is equivalent to the identity function for numbers; for example linear(0.5) returns 0.5.</p> <h6 id=\"_linear\"> <b>linear</b>(<i>x</i>)</h6> <p>Given a value <em>x</em> in the input domain, returns the corresponding value in the output range.</p> <p>Note: some <a href=\"#linear_interpolate\">interpolators</a> <strong>reuse return values</strong>. For example, if the domain values are arbitrary objects, then <a href=\"transitions#d3_interpolateObject\">d3.interpolateObject</a> is automatically applied and the scale reuses the returned object. Often, the return value of a scale is immediately used to set an <a href=\"selections#attr\">attribute</a> or <a href=\"selections#style\">style</a>, and you don’t have to worry about this; however, if you need to store the scale’s return value, use string coercion or create a copy as appropriate.</p> <h6 id=\"linear_invert\"> linear.<b>invert</b>(<i>y</i>)</h6> <p>Returns the value in the input domain <em>x</em> for the corresponding value in the output range <em>y</em>. This represents the inverse mapping from range to domain. For a valid value <em>y</em> in the output range, linear(linear.invert(<i>y</i>)) equals <em>y</em>; similarly, for a valid value <em>x</em> in the input domain, linear.invert(linear(<i>x</i>)) equals <em>x</em>. Equivalently, you can construct the invert operator by building a new scale while swapping the domain and range. The invert operator is particularly useful for interaction, say to determine the value in the input domain that corresponds to the pixel location under the mouse.</p> <p>Note: the invert operator is only supported if the output range is numeric! D3 allows the output range to be any type; under the hood, <a class=\"internal present\" href=\"transitions#d3_interpolate\">d3.interpolate</a> or a custom interpolator of your choice is used to map the normalized parameter <em>t</em> to a value in the output range. Thus, the output range may be colors, strings, or even arbitrary objects. As there is no facility to \"uninterpolate\" arbitrary types, the invert operator is currently supported only on numeric ranges.</p> <h6 id=\"linear_domain\"> linear.<b>domain</b>([<i>numbers</i>])</h6> <p>If <em>numbers</em> is specified, sets the scale's input domain to the specified array of numbers. The array must contain two or more numbers. If the elements in the given array are not numbers, they will be coerced to numbers; this coercion happens similarly when the scale is called. Thus, a linear scale can be used to encode types such as <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date\">date objects</a> that can be converted to numbers; however, it is often more convenient to use <a href=\"time-scales\">d3.time.scale</a> for dates. (You can implement your own convertible number objects using <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/valueOf\">valueOf</a>.) If <em>numbers</em> is not specified, returns the scale's current input domain.</p> <p>Although linear scales typically have just two numeric values in their domain, you can specify more than two values for a <em>polylinear</em> scale. In this case, there must be an equivalent number of values in the output range. A polylinear scale represents multiple piecewise linear scales that divide a continuous domain and range. This is particularly useful for defining diverging quantitative scales. For example, to interpolate between white and red for negative values, and white and green for positive values, say:</p> <div class=\"highlight highlight-source-js\"><pre>var color = d3.scale.linear()\n    .domain([-1, 0, 1])\n    .range([\"red\", \"white\", \"green\"]);</pre></div> <p>The resulting value of color(-.5) is rgb(255, 128, 128), and the value of color(.5) is rgb(128, 192, 128). Internally, polylinear scales perform a binary search for the output interpolator corresponding to the given domain value. By repeating values in both the domain and range, you can also force a chunk of the input domain to map to a constant in the output range.</p> <h6 id=\"linear_range\"> linear.<b>range</b>([<i>values</i>])</h6> <p>If <em>values</em> is specified, sets the scale's output range to the specified array of values. The array must contain two or more values, to match the cardinality of the input domain, otherwise the longer of the two is truncated to match the other. The elements in the given array need not be numbers; any value that is supported by the underlying <a href=\"quantitative-scales#linear_interpolate\">interpolator</a> will work. However, numeric ranges are required for the invert operator. If <em>values</em> is not specified, returns the scale's current output range.</p> <h6 id=\"linear_rangeRound\"> linear.<b>rangeRound</b>(<i>values</i>)</h6> <p>Sets the scale's output range to the specified array of values, while also setting the scale's interpolator to <a class=\"internal present\" href=\"transitions#d3_interpolateRound\">d3.interpolateRound</a>. This is a convenience routine for when the values output by the scale should be exact integers, such as to avoid antialiasing artifacts. It is also possible to round the output values manually after the scale is applied.</p> <h6 id=\"linear_interpolate\"> linear.<b>interpolate</b>([<i>factory</i>])</h6> <p>If <em>factory</em> is specified, sets the scale's output interpolator using the specified <em>factory</em>. The interpolator factory defaults to <a class=\"internal present\" href=\"transitions#d3_interpolate\">d3.interpolate</a>, and is used to map the normalized domain parameter <em>t</em> in [0,1] to the corresponding value in the output range. The interpolator factory will be used to construct interpolators for each adjacent pair of values from the output range. If <em>factory</em> is not specified, returns the scale's interpolator factory.</p> <h6 id=\"linear_clamp\"> linear.<b>clamp</b>([<i>boolean</i>])</h6> <p>If <em>boolean</em> is specified, enables or disables clamping accordingly. By default, clamping is disabled, such that if a value outside the input domain is passed to the scale, the scale may return a value outside the output range through linear extrapolation. For example, with the default domain and range of [0,1], an input value of 2 will return an output value of 2. If clamping is enabled, the normalized domain parameter <em>t</em> is clamped to the range [0,1], such that the return value of the scale is always within the scale's output range. If <em>boolean</em> is not specified, returns whether or not the scale currently clamps values to within the output range.</p> <h6 id=\"linear_nice\"> linear.<b>nice</b>([<i>count</i>])</h6> <p>Extends the domain so that it starts and ends on nice round values. This method typically modifies the scale's domain, and may only extend the bounds to the nearest round value. The precision of the round value is dependent on the extent of the domain <em>dx</em> according to the following formula: exp(round(log(<i>dx</i>)) - 1). Nicing is useful if the domain is computed from data and may be irregular. For example, for a domain of [0.20147987687960267, 0.996679553296417], the nice domain is [0.2, 1]. If the domain has more than two values, nicing the domain only affects the first and last value.</p> <p>The optional tick <em>count</em> argument allows greater control over the step size used to extend the bounds, guaranteeing that the returned <a href=\"#linear_ticks\">ticks</a> will exactly cover the domain.</p> <h6 id=\"linear_ticks\"> linear.<b>ticks</b>([<i>count</i>])</h6> <p>A stateless method that returns approximately <em>count</em> representative values from the scale's input domain. If <em>count</em> is not specified, it defaults to 10. The returned tick values are uniformly spaced, have human-readable values (such as multiples of powers of 10), and are guaranteed to be within the extent of the input domain. Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data. The specified <em>count</em> is only a hint; the scale may return more or fewer values depending on the input domain.</p> <h6 id=\"linear_tickFormat\"> linear.<b>tickFormat</b>(<i>count</i>, [<i>format</i>])</h6> <p>A stateless method that returns a <a class=\"internal present\" href=\"formatting#d3_format\">number format</a> function suitable for displaying a tick value. The specified <em>count</em> should have the same value as the count that is used to generate the tick values. You don't have to use the scale's built-in tick format, but it automatically computes the appropriate precision based on the fixed interval between tick values.</p> <p>The optional <em>format</em> argument allows a <a class=\"internal present\" href=\"formatting#d3_format\">format specifier</a> to be specified, where the precision of the format is automatically substituted by the scale to be appropriate for the tick interval. For example, to format percentage change, you might say:</p> <div class=\"highlight highlight-source-js\"><pre>var x = d3.scale.linear().domain([-1, 1]);\nconsole.log(x.ticks(5).map(x.tickFormat(5, \"+%\"))); // [\"-100%\", \"-50%\", \"+0%\", \"+50%\", \"+100%\"]</pre></div> <p>Likewise, if <em>format</em> uses the format type <code>s</code>, the scale will compute a SI-prefix based on the largest value in the domain, and use that SI-prefix for <a href=\"http://bl.ocks.org/mbostock/9764126\">all tick values</a>. If the <em>format</em> already specifies a precision, this method is equivalent to <a href=\"formatting#d3_format\">d3.format</a>.</p> <p>Note that when using a log scale in conjunction with an axis, you typically want to use <a href=\"svg-axes#ticks\">axis.ticks</a> rather than <a href=\"svg-axes#tickFormat\">axis.tickFormat</a> to take advantage of the log scale’s custom tick format, as in <a href=\"http://bl.ocks.org/mbostock/5537697\">bl.ocks.org/5537697</a>.</p> <h6 id=\"linear_copy\"> linear.<b>copy</b>()</h6> <p>Returns an exact copy of this linear scale. Changes to this scale will not affect the returned scale, and vice versa.</p> <h3> Identity Scales</h3> <p>Identity scales are a special case of linear scales where the domain and range are identical; the scale and its invert method are both the identity function. These scales are occasionally useful when working with pixel coordinates, say in conjunction with the <a href=\"svg-axes\">axis</a> and <a href=\"svg-controls#brush\">brush</a> components.</p> <h6 id=\"identity\"> d3.scale.<b>identity</b>()</h6> <p>Constructs a new identity scale with the default domain [0, 1] and the default range [0, 1]. An identity scale is always equivalent to the identity function.</p> <h6 id=\"_identity\"> <b>identity</b>(<i>x</i>)<br> <a href=\"#_identity\">#</a> identity.<b>invert</b>(<i>x</i>)</h6> <p>Returns the given value <em>x</em>.</p> <h6 id=\"identity_domain\"> identity.<b>domain</b>([<i>numbers</i>])<br> <a href=\"#identity_domain\">#</a> identity.<b>range</b>([<i>numbers</i>])</h6> <p>If <em>numbers</em> is specified, sets the scale's input domain and output range to the specified array of numbers. The array must contain two or more numbers. If the elements in the given array are not numbers, they will be coerced to numbers; this coercion happens similarly when the scale is called. If numbers is not specified, returns the scale's current input domain (or equivalently, output range).</p> <h6 id=\"identity_ticks\"> identity.<b>ticks</b>([<i>count</i>])</h6> <p>Returns approximately <em>count</em> representative values from the scale's input domain (or equivalently, output range). If <em>count</em> is not specified, it defaults to 10. The returned tick values are uniformly spaced, have human-readable values (such as multiples of powers of 10), and are guaranteed to be within the extent of the input domain. Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data. The specified <em>count</em> is only a hint; the scale may return more or fewer values depending on the input domain.</p> <h6 id=\"identity_tickFormat\"> identity.<b>tickFormat</b>(<i>count</i>, [<i>format</i>])</h6> <p>Returns a <a href=\"formatting#d3_format\">number format</a> function suitable for displaying a tick value. The specified <em>count</em> should have the same value as the count that is used to generate the tick values. You don't have to use the scale's built-in tick format, but it automatically computes the appropriate precision based on the fixed interval between tick values.</p> <p>The optional <em>format</em> argument allows a <a class=\"internal present\" href=\"formatting#d3_format\">format specifier</a> to be specified. If the format specifier doesn’t have a defined precision, the precision will be set automatically by the scale, returning the appropriate format. This provides a convenient, declarative way of specifying a format whose precision will be automatically set by the scale.</p> <h6 id=\"identity_copy\"> identity.<b>copy</b>()</h6> <p>Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.</p> <h2 id=\"power-scales\"> Power Scales</h2> <p>Power scales are similar to linear scales, except there's an exponential transform that is applied to the input domain value before the output range value is computed. The mapping to the output range value <em>y</em> can be expressed as a function of the input domain value <em>x</em>: <em>y</em> = <em>mx^k</em> + <em>b</em>, where <em>k</em> is the exponent value. Power scales also support negative values, in which case the input value is multiplied by -1, and the resulting output value is also multiplied by -1.</p> <h6 id=\"sqrt\"> d3.scale.<b>sqrt</b>()</h6> <p>Constructs a new power scale with the default domain [0,1], the default range [0,1], and the exponent .5. This method is shorthand for:</p> <div class=\"highlight highlight-source-js\"><pre>d3.scale.pow().exponent(.5)</pre></div> <p>The returned scale is a function that takes a single argument <em>x</em> representing a value in the input domain; the return value is the corresponding value in the output range. Thus, the returned scale is equivalent to the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Math/sqrt\">sqrt</a> function for numbers; for example sqrt(0.25) returns 0.5.</p> <h6 id=\"pow\"> d3.scale.<b>pow</b>()</h6> <p>Constructs a new power scale with the default domain [0,1], the default range [0,1], and the default exponent 1. Thus, the default power scale is equivalent to the identity function for numbers; for example pow(0.5) returns 0.5.</p> <h6 id=\"_pow\"> <b>pow</b>(<i>x</i>)</h6> <p>Given a value <em>x</em> in the input domain, returns the corresponding value in the output range.</p> <p>Note: some <a href=\"#pow_interpolate\">interpolators</a> <strong>reuse return values</strong>. For example, if the domain values are arbitrary objects, then <a href=\"transitions#d3_interpolateObject\">d3.interpolateObject</a> is automatically applied and the scale reuses the returned object. Often, the return value of a scale is immediately used to set an <a href=\"selections#attr\">attribute</a> or <a href=\"selections#style\">style</a>, and you don’t have to worry about this; however, if you need to store the scale’s return value, use string coercion or create a copy as appropriate.</p> <h6 id=\"pow_invert\"> pow.<b>invert</b>(<i>y</i>)</h6> <p>Returns the value in the input domain <em>x</em> for the corresponding value in the output range <em>y</em>. This represents the inverse mapping from range to domain. For a valid value <em>y</em> in the output range, pow(pow.invert(<i>y</i>)) equals <em>y</em>; similarly, for a valid value <em>x</em> in the input domain, pow.invert(pow(<i>x</i>)) equals <em>x</em>. Equivalently, you can construct the invert operator by building a new scale while swapping the domain and range. The invert operator is particularly useful for interaction, say to determine the value in the input domain that corresponds to the pixel location under the mouse.</p> <p>Note: the invert operator is only supported if the output range is numeric! D3 allows the output range to be any type; under the hood, <a class=\"internal present\" href=\"transitions#d3_interpolate\">d3.interpolate</a> or a custom interpolator of your choice is used to map the normalized parameter <em>t</em> to a value in the output range. Thus, the output range may be colors, strings, or even arbitrary objects. As there is no facility to \"uninterpolate\" arbitrary types, the invert operator is currently supported only on numeric ranges.</p> <h6 id=\"pow_domain\"> pow.<b>domain</b>([<i>numbers</i>])</h6> <p>If <em>numbers</em> is specified, sets the scale's input domain to the specified array of numbers. The array must contain two or more numbers. If the elements in the given array are not numbers, they will be coerced to numbers; this coercion happens similarly when the scale is called. Thus, a power scale can be used to encode any type that can be converted to numbers. If <em>numbers</em> is not specified, returns the scale's current input domain.</p> <p>As with linear scales (see <a href=\"quantitative-scales#linear_domain\">linear.domain</a>), power scales can also accept more than two values for the domain and range, thus resulting in polypower scale.</p> <h6 id=\"pow_range\"> pow.<b>range</b>([<i>values</i>])</h6> <p>If <em>values</em> is specified, sets the scale's output range to the specified array of values. The array must contain two or more values, to match the cardinality of the input domain, otherwise the longer of the two is truncated to match the other. The elements in the given array need not be numbers; any value that is supported by the underlying <a href=\"quantitative-scales#pow_interpolate\">interpolator</a> will work. However, numeric ranges are required for the invert operator. If <em>values</em> is not specified, returns the scale's current output range.</p> <h6 id=\"pow_rangeRound\"> pow.<b>rangeRound</b>(<i>values</i>)</h6> <p>Sets the scale's output range to the specified array of values, while also setting the scale's interpolator to <a class=\"internal present\" href=\"transitions#d3_interpolateRound\">d3.interpolateRound</a>. This is a convenience routine for when the values output by the scale should be exact integers, such as to avoid antialiasing artifacts. It is also possible to round the output values manually after the scale is applied.</p> <h6 id=\"pow_exponent\"> pow.<b>exponent</b>([<i>k</i>])</h6> <p>If <em>k</em> is specified, sets the current exponent to the given numeric value. If <em>k</em> is not specified, returns the current exponent. The default value is 1.</p> <h6 id=\"pow_interpolate\"> pow.<b>interpolate</b>([<i>factory</i>])</h6> <p>If <em>factory</em> is specified, sets the scale's output interpolator using the specified <em>factory</em>. The interpolator factory defaults to <a class=\"internal present\" href=\"transitions#d3_interpolate\">d3.interpolate</a>, and is used to map the normalized domain parameter <em>t</em> in [0,1] to the corresponding value in the output range. The interpolator factory will be used to construct interpolators for each adjacent pair of values from the output range. If <em>factory</em> is not specified, returns the scale's interpolator factory.</p> <h6 id=\"pow_clamp\"> pow.<b>clamp</b>([<i>boolean</i>])</h6> <p>If <em>boolean</em> is specified, enables or disables clamping accordingly. By default, clamping is disabled, such that if a value outside the input domain is passed to the scale, the scale may return a value outside the output range through linear extrapolation. For example, with the default domain and range of [0,1], an input value of 2 will return an output value of 2. If clamping is enabled, the normalized domain parameter <em>t</em> is clamped to the range [0,1], such that the return value of the scale is always within the scale's output range. If <em>boolean</em> is not specified, returns whether or not the scale currently clamps values to within the output range.</p> <h6 id=\"pow_nice\"> pow.<b>nice</b>([<i>m</i>])</h6> <p>Extends the domain so that it starts and ends on nice round values. This method typically modifies the scale's domain, and may only extend the bounds to the nearest round value. The precision of the round value is dependent on the extent of the domain <em>dx</em> according to the following formula: exp(round(log(<i>dx</i>)) - 1). Nicing is useful if the domain is computed from data and may be irregular. For example, for a domain of [0.20147987687960267, 0.996679553296417], the nice domain is [0.2, 1]. If the domain has more than two values, nicing the domain only affects the first and last value.</p> <p>The optional <em>m</em> argument allows a tick count to be specified to control the step size used prior to extending the bounds.</p> <h6 id=\"pow_ticks\"> pow.<b>ticks</b>([<i>count</i>])</h6> <p>Returns approximately <em>count</em> representative values from the scale's input domain. If <em>count</em> is not specified, it defaults to 10. The returned tick values are uniformly spaced, have human-readable values (such as multiples of powers of 10), and are guaranteed to be within the extent of the input domain. Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data. The specified <em>count</em> is only a hint; the scale may return more or fewer values depending on the input domain.</p> <h6 id=\"pow_tickFormat\"> pow.<b>tickFormat</b>([<i>count</i>, [<i>format</i>]])</h6> <p>Returns a <a class=\"internal present\" href=\"formatting#d3_format\">number format</a> function suitable for displaying a tick value. The specified <em>count</em> should have the same value as the count that is used to generate the tick values. You don't have to use the scale's built-in tick format, but it automatically computes the appropriate precision based on the fixed interval between tick values.</p> <p>The optional <em>format</em> argument allows a <a class=\"internal present\" href=\"formatting#d3_format\">format specifier</a> to be specified. If the format specifier doesn’t have a defined precision, the precision will be set automatically by the scale, returning the appropriate format. This provides a convenient, declarative way of specifying a format whose precision will be automatically set by the scale.</p> <h6 id=\"pow_copy\"> pow.<b>copy</b>()</h6> <p>Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.</p> <h2 id=\"log-scales\"> Log Scales</h2> <p>Log scales are similar to linear scales, except there's a logarithmic transform that is applied to the input domain value before the output range value is computed. The mapping to the output range value <em>y</em> can be expressed as a function of the input domain value <em>x</em>: <em>y</em> = <em>m</em> log(<i>x</i>) + <em>b</em>.</p> <p>As log(0) is negative infinity, a log scale must have either an exclusively-positive or exclusively-negative domain; the domain must not include or cross zero. A log scale with a positive domain has a well-defined behavior for positive values, and a log scale with a negative domain has a well-defined behavior for negative values (the input value is multiplied by -1, and the resulting output value is also multiplied by -1). The behavior of the scale is undefined if you pass a negative value to a log scale with a positive domain or vice versa.</p> <h6 id=\"log\"> d3.scale.<b>log</b>()</h6> <p>Constructs a new log scale with the default domain [1,10], the default range [0,1], and the base 10.</p> <h6 id=\"_log\"> <b>log</b>(<i>x</i>)</h6> <p>Given a value <em>x</em> in the input domain, returns the corresponding value in the output range.</p> <p>Note: some <a href=\"#log_interpolate\">interpolators</a> <strong>reuse return values</strong>. For example, if the domain values are arbitrary objects, then <a href=\"transitions#d3_interpolateObject\">d3.interpolateObject</a> is automatically applied and the scale reuses the returned object. Often, the return value of a scale is immediately used to set an <a href=\"selections#attr\">attribute</a> or <a href=\"selections#style\">style</a>, and you don’t have to worry about this; however, if you need to store the scale’s return value, use string coercion or create a copy as appropriate.</p> <h6 id=\"log_invert\"> log.<b>invert</b>(<i>y</i>)</h6> <p>Returns the value in the input domain <em>x</em> for the corresponding value in the output range <em>y</em>. This represents the inverse mapping from range to domain. For a valid value <em>y</em> in the output range, log(log.invert(<i>y</i>)) equals <em>y</em>; similarly, for a valid value <em>x</em> in the input domain, log.invert(log(<i>x</i>)) equals <em>x</em>. Equivalently, you can construct the invert operator by building a new scale while swapping the domain and range. The invert operator is particularly useful for interaction, say to determine the value in the input domain that corresponds to the pixel location under the mouse.</p> <p>Note: the invert operator is only supported if the output range is numeric! D3 allows the output range to be any type; under the hood, <a class=\"internal present\" href=\"transitions#d3_interpolate\">d3.interpolate</a> or a custom interpolator of your choice is used to map the normalized parameter <em>t</em> to a value in the output range. Thus, the output range may be colors, strings, or even arbitrary objects. As there is no facility to \"uninterpolate\" arbitrary types, the invert operator is currently supported only on numeric ranges.</p> <h6 id=\"log_domain\"> log.<b>domain</b>([<i>numbers</i>])</h6> <p>If <em>numbers</em> is specified, sets the scale's input domain to the specified array of numbers. The array must contain two or more numbers. If the elements in the given array are not numbers, they will be coerced to numbers; this coercion happens similarly when the scale is called. Thus, a log scale can be used to encode any type that can be converted to numbers. If <em>numbers</em> is not specified, returns the scale's current input domain.</p> <p>As with linear scales (see <a href=\"quantitative-scales#linear_domain\">linear.domain</a>), log scales can also accept more than two values for the domain and range, thus resulting in polylog scale.</p> <h6 id=\"log_range\"> log.<b>range</b>([<i>values</i>])</h6> <p>If <em>values</em> is specified, sets the scale's output range to the specified array of values. The array must contain two or more values, to match the cardinality of the input domain, otherwise the longer of the two is truncated to match the other. The elements in the given array need not be numbers; any value that is supported by the underlying <a href=\"quantitative-scales#log_interpolate\">interpolator</a> will work. However, numeric ranges are required for the invert operator. If <em>values</em> is not specified, returns the scale's current output range.</p> <h6 id=\"log_rangeRound\"> log.<b>rangeRound</b>(<i>values</i>)</h6> <p>Sets the scale's output range to the specified array of values, while also setting the scale's interpolator to <a class=\"internal present\" href=\"transitions#d3_interpolateRound\">d3.interpolateRound</a>. This is a convenience routine for when the values output by the scale should be exact integers, such as to avoid antialiasing artifacts. It is also possible to round the output values manually after the scale is applied.</p> <h6 id=\"log_base\"> log.<b>base</b>([<i>base</i>])</h6> <p>If <em>base</em> is specified, sets the base for this logarithmic scale. If <em>base</em> is not specified, returns the current base, which defaults to 10.</p> <h6 id=\"log_interpolate\"> log.<b>interpolate</b>([<i>factory</i>])</h6> <p>If <em>factory</em> is specified, sets the scale's output interpolator using the specified <em>factory</em>. The interpolator factory defaults to <a class=\"internal present\" href=\"transitions#d3_interpolate\">d3.interpolate</a>, and is used to map the normalized domain parameter <em>t</em> in [0,1] to the corresponding value in the output range. The interpolator factory will be used to construct interpolators for each adjacent pair of values from the output range. If <em>factory</em> is not specified, returns the scale's interpolator factory.</p> <h6 id=\"log_clamp\"> log.<b>clamp</b>([<i>boolean</i>])</h6> <p>If <em>boolean</em> is specified, enables or disables clamping accordingly. By default, clamping is disabled, such that if a value outside the input domain is passed to the scale, the scale may return a value outside the output range through linear extrapolation. For example, with the default domain and range of [0,1], an input value of 2 will return an output value of 2. If clamping is enabled, the normalized domain parameter <em>t</em> is clamped to the range [0,1], such that the return value of the scale is always within the scale's output range. If <em>boolean</em> is not specified, returns whether or not the scale currently clamps values to within the output range.</p> <h6 id=\"log_nice\"> log.<b>nice</b>()</h6> <p>Extends the domain so that it starts and ends on nice round values. This method typically modifies the scale's domain, and may only extend the bounds to the nearest round value. The nearest round value is based on integer powers of the scale’s <a href=\"#log_base\">base</a>, which defaults to 10. Nicing is useful if the domain is computed from data and may be irregular. For example, for a domain of [0.20147987687960267, 0.996679553296417], the nice domain is [0.1, 1]. If the domain has more than two values, nicing the domain only affects the first and last value.</p> <h6 id=\"log_ticks\"> log.<b>ticks</b>()</h6> <p>Returns representative values from the scale's input domain. The returned tick values are uniformly spaced within each power of ten, and are guaranteed to be within the extent of the input domain. Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data. Note that the number of ticks cannot be customized (due to the nature of log scales); however, you can filter the returned array of values if you want to reduce the number of ticks.</p> <h6 id=\"log_tickFormat\"> log.<b>tickFormat</b>([<i>count</i>, [<i>format</i>]])</h6> <p>Returns a <a class=\"internal present\" href=\"formatting#d3_format\">number format</a> function suitable for displaying a tick value. The returned tick format is implemented as <code>d.toPrecision(1)</code>. If a <em>count</em> is specified, then some of the tick labels may not be displayed; this is useful if there is not enough room to fit all of the tick labels. However, note that the tick marks will still be displayed (so that the log scale distortion remains visible). When specifying a count, you may also override the <em>format</em> function; you can also specify a format specifier as a string, and it will automatically be wrapped with <a href=\"formatting\">d3.format</a>. For example, to get a tick formatter that will display 20 ticks of a currency:</p> <div class=\"highlight highlight-source-js\"><pre>scale.tickFormat(20, \"$,.2f\");</pre></div> <p>If the format specifier doesn’t have a defined precision, the precision will be set automatically by the scale, returning the appropriate format. This provides a convenient, declarative way of specifying a format whose precision will be automatically set by the scale.</p> <h6 id=\"log_copy\"> log.<b>copy</b>()</h6> <p>Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.</p> <h2 id=\"quantize-scales\"> Quantize Scales</h2> <p>Quantize scales are a variant of linear scales with a discrete rather than continuous range. The input domain is still continuous, and divided into uniform segments based on the number of values in (the cardinality of) the output range. The mapping is <em>linear</em> in that the output range value <em>y</em> can be expressed as a linear function of the input domain value <em>x</em>: <em>y</em> = <em>mx</em> + <em>b</em>. The input domain is typically a dimension of the data that you want to visualize, such as the height of students (measured in meters) in a sample population. The output range is typically a dimension of the desired output visualization, such as the height of bars (measured in pixels) in a histogram.</p> <h6 id=\"quantize\"> d3.scale.<b>quantize</b>()</h6> <p>Constructs a new quantize scale with the default domain [0,1] and the default range [0,1]. Thus, the default quantize scale is equivalent to the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Math/round\">round</a> function for numbers; for example quantize(0.49) returns 0, and quantize(0.51) returns 1.</p> <div class=\"highlight highlight-source-js\"><pre> var q = d3.scale.quantize().domain([0, 1]).range(['a', 'b', 'c']);\n //q(0.3) === 'a', q(0.4) === 'b', q(0.6) === 'b', q(0.7) ==='c';\n //q.invertExtent('a') returns [0, 0.3333333333333333]</pre></div> <h6 id=\"_quantize\"> <b>quantize</b>(<i>x</i>)</h6> <p>Given a value <em>x</em> in the input domain, returns the corresponding value in the output range.</p> <h6 id=\"quantize_invertExtent\"> quantize.<b>invertExtent</b>(<i>y</i>)</h6> <p>Returns the extent of values in the input domain [<i>x0</i>, <i>x1</i>] for the corresponding value in the output range <em>y</em>, representing the inverse mapping from range to domain. This method is useful for interaction, say to determine the value in the input domain that corresponds to the pixel location under the mouse.</p> <h6 id=\"quantize_domain\"> quantize.<b>domain</b>([<i>numbers</i>])</h6> <p>If <em>numbers</em> is specified, sets the scale's input domain to the specified two-element array of numbers. If the array contains more than two numbers, only the first and last number are used. If the elements in the given array are not numbers, they will be coerced to numbers; this coercion happens similarly when the scale is called. Thus, a quantize scale can be used to encode any type that can be converted to numbers. If <em>numbers</em> is not specified, returns the scale's current input domain.</p> <h6 id=\"quantize_range\"> quantize.<b>range</b>([<i>values</i>])</h6> <p>If <em>values</em> is specified, sets the scale's output range to the specified array of values. The array may contain any number of discrete values. The elements in the given array need not be numbers; any value or type will work. If <em>values</em> is not specified, returns the scale's current output range.</p> <h6 id=\"quantize_copy\"> quantize.<b>copy</b>()</h6> <p>Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.</p> <h2 id=\"quantile-scales\"> Quantile Scales</h2> <p>Quantile scales map an input domain to a discrete range. Although the input domain is continuous and the scale will accept any reasonable input value, the input domain is specified as a discrete set of values. The number of values in (the cardinality of) the output range determines the number of quantiles that will be computed from the input domain. To compute the quantiles, the input domain is sorted, and treated as a <a href=\"http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population\">population of discrete values</a>. The input domain is typically a dimension of the data that you want to visualize, such as the daily change of the stock market. The output range is typically a dimension of the desired output visualization, such as a diverging color scale.</p> <h6 id=\"quantile\"> d3.scale.<b>quantile</b>()</h6> <p>Constructs a new quantile scale with an empty domain and an empty range. The quantile scale is invalid until both a domain and range are specified.</p> <h6 id=\"_quantile\"> <b>quantile</b>(<i>x</i>)</h6> <p>Given a value <em>x</em> in the input domain, returns the corresponding value in the output range.</p> <h6 id=\"quantile_invertExtent\"> quantile.<b>invertExtent</b>(<i>y</i>)</h6> <p>Returns the extent of values in the input domain [<i>x0</i>, <i>x1</i>] for the corresponding value in the output range <em>y</em>, representing the inverse mapping from range to domain. This method is useful for interaction, say to determine the value in the input domain that corresponds to the pixel location under the mouse.</p> <h6 id=\"quantile_domain\"> quantile.<b>domain</b>([<i>numbers</i>])</h6> <p>If <em>numbers</em> is specified, sets the input domain of the quantile scale to the specified set of discrete numeric values. The array must not be empty, and must contain at least one numeric value; NaN, null and undefined values are ignored and not considered part of the sample population. If the elements in the given array are not numbers, they will be coerced to numbers; this coercion happens similarly when the scale is called. A copy of the input array is sorted and stored internally. Thus, a quantile scale can be used to encode any type that can be converted to numbers. If <em>numbers</em> is not specified, returns the scale's current input domain.</p> <h6 id=\"quantile_range\"> quantile.<b>range</b>([<i>values</i>])</h6> <p>If <em>values</em> is specified, sets the discrete values in the output range. The array must not be empty, and may contain any type of value. The number of values in (the cardinality, or length, of) the <em>values</em> array determines the number of quantiles that are computed. For example, to compute quartiles, <em>values</em> must be an array of four elements such as [0, 1, 2, 3]. If <em>values</em> is not specified, returns the current output range.</p> <h6 id=\"quantile_quantiles\"> quantile.<b>quantiles</b>()</h6> <p>Returns the quantile thresholds. If the output range contains <em>n</em> discrete values, the returned threshold array will contain <em>n</em> - 1 values. Values less than the first element in the thresholds array, quantiles()[0], are considered in the first quantile; greater values less than the second threshold are in the second quantile, and so on. Internally, the thresholds array is used with <a class=\"internal present\" href=\"arrays#d3_bisect\">d3.bisect</a> to find the output quantile associated with the given input value.</p> <h6 id=\"quantile_copy\"> quantile.<b>copy</b>()</h6> <p>Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.</p> <h2 id=\"threshold-scales\"> Threshold Scales</h2> <p>Threshold scales are similar to quantize scales, except they allow you to map arbitrary subsets of the domain to discrete values in the range. The input domain is still continuous, and divided into slices based on a set of threshold values. The input domain is typically a dimension of the data that you want to visualize, such as the height of students (measured in meters) in a sample population. The output range is typically a dimension of the desired output visualization, such as a set of colors (represented as strings).</p> <h6 id=\"threshold\"> d3.scale.<b>threshold</b>()</h6> <p>Constructs a new threshold scale with the default domain [.5] and the default range [0,1]. Thus, the default threshold scale is equivalent to the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Math/round\">round</a> function for numbers; for example threshold(0.49) returns 0, and threshold(0.51) returns 1.</p> <div class=\"highlight highlight-source-js\"><pre>var t = d3.scale.threshold().domain([0, 1]).range(['a', 'b', 'c']); \nt(-1) === 'a';\nt(0) === 'b';\nt(0.5) === 'b';\nt(1) === 'c';\nt(1000) === 'c';\nt.invertExtent('a'); //returns [undefined, 0]\nt.invertExtent('b'); //returns [0, 1]\nt.invertExtent('c'); //returns [1, undefined]</pre></div> <h6 id=\"_threshold\"> <b>threshold</b>(<i>x</i>)</h6> <p>Given a value <em>x</em> in the input domain, returns the corresponding value in the output range.</p> <h6 id=\"threshold_invertExtent\"> threshold.<b>invertExtent</b>(<i>y</i>)</h6> <p>Returns the extent of values in the input domain [<i>x0</i>, <i>x1</i>] for the corresponding value in the output range <em>y</em>, representing the inverse mapping from range to domain. This method is useful for interaction, say to determine the value in the input domain that corresponds to the pixel location under the mouse.</p> <h6 id=\"threshold_domain\"> threshold.<b>domain</b>([<i>domain</i>])</h6> <p>If <em>domain</em> is specified, sets the scale's input domain to the specified array of values. The values must be in sorted ascending order, or the behavior of the scale is undefined. The values are typically numbers, but any naturally ordered values (such as strings) will work. Thus, a threshold scale can be used to encode any type that is ordered. If the number of values in the scale's range is N + 1, the number of values in the scale's domain must be N. If there are fewer than N elements in the domain, the additional values in the range are ignored. If there are more than N elements in the domain, the scale may return undefined for some inputs. If <em>domain</em> is not specified, returns the scale's current input domain.</p> <h6 id=\"threshold_range\"> threshold.<b>range</b>([<i>values</i>])</h6> <p>If <em>values</em> is specified, sets the scale's output range to the specified array of values. If the number of values in the scale's domain is N, the number of values in the scale's range must be N + 1. If there are fewer than N+1 elements in the range, the scale may return undefined for some inputs. If there are more than N + 1 elements in the range, the additional values are ignored. The elements in the given array need not be numbers; any value or type will work. If <em>values</em> is not specified, returns the scale's current output range.</p> <h6 id=\"threshold_copy\"> threshold.<b>copy</b>()</h6> <p>Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Quantitative-Scales\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Quantitative-Scales</a>\n  </p>\n</div>\n","tree-layout":"<h1 class=\"gh-header-title instapaper_title\">Tree Layout</h1>   <p>The <strong>tree</strong> layout produces tidy node-link diagrams of trees using the <a href=\"http://emr.cs.iit.edu/%7Ereingold/tidier-drawings.pdf\">Reingold–Tilford “tidy” algorithm</a>. For example, a tree layout can be used to organize software classes in a package hierarchy:</p> <p><a href=\"http://mbostock.github.com/d3/ex/tree.html\"><img src=\"https://github.com/mbostock/d3/wiki/diagonal.png\" alt=\"diagonal\"></a></p> <p>Like most other layouts, the object returned by d3.layout.tree is both an object and a function. That is: you can call the layout like any other function, and the layout has additional methods that change its behavior. Like other classes in D3, layouts follow the method chaining pattern where setter methods return the layout itself, allowing multiple setters to be invoked in a concise statement.</p> <h6 id=\"tree\"> d3.layout.<b>tree</b>()</h6> <p>Creates a new tree layout with the default settings: the default sort order is null; the default children accessor assumes each input data is an object with a children array; the default separation function uses one node width for siblings, and two node widths for non-siblings; the default size is 1×1.</p> <h6 id=\"_tree\"> <b>tree</b>(<i>root</i>) <br> tree.<b>nodes</b>(<i>root</i>)</h6> <p>Runs the tree layout, returning the array of nodes associated with the specified <em>root</em> node. The tree layout is part of D3's family of <a class=\"internal present\" href=\"hierarchy-layout\">hierarchical</a> layouts. These layouts follow the same basic structure: the input argument to the layout is the root node of the hierarchy, and the output return value is an array representing the computed positions of all nodes. Several attributes are populated on each node:</p> <ul> <li>parent - the parent node, or null for the root.</li> <li>children - the array of child nodes, or null for leaf nodes.</li> <li>depth - the depth of the node, starting at 0 for the root.</li> <li>x - the computed <em>x</em>-coordinate of the node position.</li> <li>y - the computed <em>y</em>-coordinate of the node position.</li> </ul> <p>Although the layout has a size in <em>x</em> and <em>y</em>, this represents an arbitrary coordinate system; for example, you can treat <em>x</em> as a radius and <em>y</em> as an angle to produce a radial rather than Cartesian layout.</p> <h6 id=\"links\"> tree.<b>links</b>(<i>nodes</i>)</h6> <p>Given the specified array of <em>nodes</em>, such as those returned by <a href=\"tree-layout#nodes\">nodes</a>, returns an array of objects representing the links from parent to child for each node. Leaf nodes will not have any links. Each link is an object with two attributes:</p> <ul> <li>source - the parent node (as described above).</li> <li>target - the child node.</li> </ul> <p>This method is useful for retrieving a set of link descriptions suitable for display, often in conjunction with the <a href=\"svg-shapes#diagonal\">diagonal</a> shape generator. For example:</p> <div class=\"highlight highlight-source-js\"><pre>svg.selectAll(\"path\")\n    .data(tree.links(nodes))\n  .enter().append(\"path\")\n    .attr(\"d\", d3.svg.diagonal());</pre></div> <h6 id=\"children\"> tree.<b>children</b>([<i>children</i>])</h6> <p>If <em>children</em> is specified, sets the specified children accessor function. If <em>children</em> is not specified, returns the current children accessor function, which by default assumes that the input data is an object with a children array:</p> <div class=\"highlight highlight-source-js\"><pre>function children(d) {\n  return d.children;\n}</pre></div> <p>Often, it is convenient to load the node hierarchy using <a href=\"requests#d3_json\">d3.json</a>, and represent the input hierarchy as a nested <a href=\"http://json.org\">JSON</a> object. For example:</p> <div class=\"highlight highlight-source-js\"><pre>{\n \"name\": \"flare\",\n \"children\": [\n  {\n   \"name\": \"analytics\",\n   \"children\": [\n    {\n     \"name\": \"cluster\",\n     \"children\": [\n      {\"name\": \"AgglomerativeCluster\", \"size\": 3938},\n      {\"name\": \"CommunityStructure\", \"size\": 3812},\n      {\"name\": \"MergeEdge\", \"size\": 743}\n     ]\n    },\n    {\n     \"name\": \"graph\",\n     \"children\": [\n      {\"name\": \"BetweennessCentrality\", \"size\": 3534},\n      {\"name\": \"LinkDistance\", \"size\": 5731}\n     ]\n    }\n   ]\n  }\n ]\n}</pre></div> <p>The children accessor is first invoked for root node in the hierarchy. If the accessor returns null, then the node is assumed to be a leaf node at the layout traversal terminates. Otherwise, the accessor should return an array of data elements representing the child nodes.</p> <h6 id=\"separation\"> tree.<b>separation</b>([<i>separation</i>])</h6> <p>If <em>separation</em> is specified, uses the specified function to compute separation between neighboring nodes. If <em>separation</em> is not specified, returns the current separation function, which defaults to:</p> <div class=\"highlight highlight-source-js\"><pre>function separation(a, b) {\n  return a.parent == b.parent ? 1 : 2;\n}</pre></div> <p>A variation that is more appropriate for radial layouts reduces the separation gap proportionally to the radius:</p> <div class=\"highlight highlight-source-js\"><pre>function separation(a, b) {\n  return (a.parent == b.parent ? 1 : 2) / a.depth;\n}</pre></div> <p>The separation function is passed two neighboring nodes <em>a</em> and <em>b</em>, and must return the desired separation between nodes. The nodes are typically siblings, though the nodes may also be cousins (or even more distant relations) if the layout decides to place such nodes adjacent.</p> <h6 id=\"size\"> tree.<b>size</b>([<i>size</i>])</h6> <p>If <em>size</em> is specified, sets the available layout size to the specified two-element array of numbers representing <em>x</em> and <em>y</em>. If <em>size</em> is not specified, returns the current size, which defaults to 1×1. The layout size is specified in <em>x</em> and <em>y</em>, but this is not limited screen coordinates and may represent an arbitrary coordinate system. For example, to produce a radial layout where the tree breadth (<em>x</em>) is measured in degrees, and the tree depth (<em>y</em>) is a radius <em>r</em> in pixels, say [360, <em>r</em>].</p> <p>The size property is exclusive with <a href=\"#nodeSize\">tree.nodeSize</a>; setting tree.size sets tree.nodeSize to null.</p> <h6 id=\"nodeSize\"> tree.<b>nodeSize</b>([<i>nodeSize</i>])</h6> <p>If <em>nodeSize</em> is specified, sets a fixed size for each node as a two-element array of numbers representing <em>x</em> and <em>y</em>. If <em>nodeSize</em> is not specified, returns the current node size, which defaults to null indicating that the layout is determined using the overall <a href=\"#size\">tree.size</a> property instead of using a fixed node size. The layout size is specified in <em>x</em> and <em>y</em>, but this is not limited screen coordinates and may represent an arbitrary coordinate system.</p> <p>The nodeSize property is exclusive with <a href=\"#size\">tree.size</a>; setting tree.nodeSize sets tree.size to null.</p> <h6 id=\"sort\"> tree.<b>sort</b>([<i>comparator</i>])</h6> <p>If <em>comparator</em> is specified, sets the sort order of sibling nodes for the layout using the specified comparator function. If <em>comparator</em> is not specified, returns the current group sort order, which defaults to null for no sorting. The comparator function is invoked for pairs of nodes, being passed the input data for each node. The default comparator is null, which disables sorting and uses tree traversal order. For example, to sort sibling nodes in descending order by the associated input data's numeric value attribute, say:</p> <div class=\"highlight highlight-source-js\"><pre>function comparator(a, b) {\n  return b.value - a.value;\n}</pre></div> <p>Sorting by the node's name or key is also common. This can be done easily using <a href=\"arrays#d3_ascending\">d3.ascending</a> or <a href=\"arrays#d3_descending\">d3.descending</a>.</p> <h6 id=\"value\"> tree.<b>value</b>([<i>value</i>])</h6> <p>If <em>value</em> is specified, sets the value accessor to the specified function. If <em>value</em> is not specified, returns the current value accessor which defaults to null, meaning that the value attribute is not computed. If specified, the value accessor is invoked for each input data element, and must return a number representing the numeric value of the node. This value has no effect on the tree layout, but is generic functionality provided by hierarchy layouts.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Tree-Layout\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Tree-Layout</a>\n  </p>\n</div>\n","voronoi-geom":"<h1 class=\"gh-header-title instapaper_title\">Voronoi Geom</h1>   <p>Voronoi layouts are particularly useful for invisible interactive regions, as demonstrated in Nate Vack’s <a href=\"http://bl.ocks.org/njvack/1405439\">Voronoi picking</a> example. See Tovi Grossman’s paper on <a href=\"http://www.tovigrossman.com/BubbleCursor\">bubble cursors</a> for a related concept.</p> <h6 id=\"voronoi\"> d3.geom.<b>voronoi</b>()</h6> <p><a href=\"http://bl.ocks.org/mbostock/4060366\"><img src=\"https://camo.githubusercontent.com/509f1a78948f12afb5b92e5e52c7091b12f704be/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343036303336362f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4060366/thumbnail.png\"></a></p> <p>Creates a Voronoi layout with default accessors.</p> <h6 id=\"_voronoi\"> <b>voronoi</b>(<i>data</i>)</h6> <p>Returns an array of polygons, one for each input vertex in the specified <em>data</em> array. Each polygon is an array of points, and each point is a two-element array of <em>x</em> and <em>y</em> positions.</p> <p>If any vertices are coincident or have <code>NaN</code> positions, <em>the behavior of this method is undefined</em>: most likely, invalid polygons will be returned! You should filter invalid vertices, and consolidate coincident vertices, before calling this function.</p> <h6 id=\"x\"> voronoi.<b>x</b>([<i>x</i>])</h6> <p>If <em>x</em> is specified, sets the x-coordinate accessor. If <em>x</em> is not specified, returns the current x-coordinate accessor, which defaults to:</p> <div class=\"highlight highlight-source-js\"><pre>function(d) { return d[0]; }</pre></div> <h6 id=\"y\"> voronoi.<b>y</b>([<i>y</i>])</h6> <p>If <em>y</em> is specified, sets the y-coordinate accessor. If <em>y</em> is not specified, returns the current y-coordinate accessor, which defaults to:</p> <div class=\"highlight highlight-source-js\"><pre>function(d) { return d[1]; }</pre></div> <h6 id=\"clipExtent\"> voronoi.<b>clipExtent</b>([<i>extent</i>])</h6> <p>If <em>extent</em> is specified, sets the clip extent of the Voronoi layout to the specified bounds and returns the layout. The <em>extent</em> bounds are specified as an array [​[<i>x0</i>, <i>y0</i>], [<i>x1</i>, <i>y1</i>]​], where <i>x0</i> is the left side of the extent, <i>y0</i> is the top, <i>x1</i> is the right and <i>y1</i> is the bottom. If <em>extent</em> is <code>null</code>, no clipping is performed. If <em>extent</em> is not specified, returns the current clip extent which defaults to <code>null</code>.</p> <p>See <a href=\"http://bl.ocks.org/mbostock/4237768\">this example</a>. Use of a clip extent is strongly recommended, as unclipped polygons may have large coordinates which do not display correctly.</p> <p>Alternatively, you can also employ custom clipping without specifying a size, either in SVG or by post-processing with <a href=\"polygon-geom#clip\">polygon.clip</a>.</p> <h6 id=\"links\"> voronoi.<b>links</b>(<i>data</i>)</h6> <p>Returns the Delaunay triangulation of the specified <em>data</em> array as an array of links. Each link has the following attributes:</p> <ul> <li>source - the source node (an element in <em>data</em>).</li> <li>target - the target node (an element in <em>data</em>).</li> </ul> <p>The <a href=\"http://bl.ocks.org/mbostock/1073373\">Force-Directed States of America</a> uses an array of such links to create a force-directed graph.</p> <h6 id=\"triangles\"> voronoi.<b>triangles</b>(<i>data</i>)</h6> <p><a href=\"http://bl.ocks.org/mbostock/4341156\"><img src=\"https://camo.githubusercontent.com/d5eb113b692b199a819cfc5d29d69055e91311f0/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343334313135362f7468756d626e61696c2e706e67\" width=\"202\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4341156/thumbnail.png\"></a></p> <p>Returns the <a href=\"https://en.wikipedia.org/wiki/Delaunay_triangulation\">Delaunay triangulation</a> of the specified <em>data</em> array as an array of triangles. Each triangle is a three-element array containing elements from <em>data</em>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Voronoi-Geom\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Voronoi-Geom</a>\n  </p>\n</div>\n","treemap-layout":"<h1 class=\"gh-header-title instapaper_title\">Treemap Layout</h1>   <p>Introduced by <a href=\"http://www.cs.umd.edu/hcil/treemap-history/\">Ben Shneiderman</a> in 1991, a <strong>treemap</strong> recursively subdivides area into rectangles. As with <a href=\"partition-layout\">adjacency diagrams</a>, the size of any node in the tree is quickly revealed. “Squarified” treemaps use approximately-square rectangles, which offer better readability and size estimation than naïve “slice-and-dice” subdivision. Fancier algorithms such as <a href=\"http://portal.acm.org/citation.cfm?id=1056018.1056041\">Voronoi</a> and <a href=\"http://hint.fm/papers/158-wattenberg-final3.pdf\">jigsaw</a> treemaps also exist but are less common.</p> <p><a href=\"http://bl.ocks.org/mbostock/4063582\"><img src=\"https://github.com/mbostock/d3/wiki/treemap.png\" alt=\"treemap\"></a></p> <p>Like other classes in D3, layouts follow the method chaining pattern where setter methods return the layout itself, allowing multiple setters to be invoked in a concise statement.</p> <h6 id=\"treemap\"> d3.layout.<b>treemap</b>()</h6> <p>Creates a new treemap layout with the default settings: the default sort order is by descending value; the default value accessor assumes each input data is an object with a numeric value attribute; the default children accessor assumes each input data is an object with a children array; the default size is 1×1.</p> <h6 id=\"_treemap\"> <b>treemap</b>(<i>root</i>) <br> treemap.<b>nodes</b>(<i>root</i>)</h6> <p>Runs the treemap layout, returning the array of nodes associated with the specified <em>root</em> node. The treemap layout is part of D3's family of <a href=\"hierarchy-layout\">hierarchical layouts</a>. These layouts follow the same basic structure: the input argument to the layout is the root node of the hierarchy, and the output return value is an array representing the computed positions of all nodes. Several attributes are populated on each node:</p> <ul> <li>parent - the parent node, or null for the root.</li> <li>children - the array of child nodes, or null for leaf nodes.</li> <li>value - the node value, as returned by the value accessor.</li> <li>depth - the depth of the node, starting at 0 for the root.</li> <li>area - the computed pixel area of this node. (TODO: remove?)</li> <li>x - the minimum <em>x</em>-coordinate of the node position.</li> <li>y - the minimum <em>y</em>-coordinate of the node position.</li> <li>z - the orientation of this cell’s subdivision, if any. (TODO: remove?)</li> <li>dx - the <em>x</em>-extent of the node position.</li> <li>dy - the <em>y</em>-extent of the node position.</li> </ul> <p>Note that this will modify the nodes that you pass in!</p> <p>Although the layout has a size in <em>x</em> and <em>y</em>, this represents an arbitrary coordinate system; for example, you can treat <em>x</em> as a radius and <em>y</em> as an angle to produce a radial rather than Cartesian layout. In Cartesian orientation, <em>x</em>, <em>y</em>, <em>dx</em> and <em>dy</em> correspond to the \"x\", \"y\", \"width\" and \"height\" attributes of the SVG <a class=\"internal present\" href=\"svg-shapes#svg_rect\">rect</a> element.</p> <h6 id=\"links\"> treemap.<b>links</b>(<i>nodes</i>)</h6> <p>Given the specified array of <em>nodes</em>, such as those returned by <a href=\"treemap-layout#nodes\">nodes</a>, returns an array of objects representing the links from parent to child for each node. Leaf nodes will not have any links. Each link is an object with two attributes:</p> <ul> <li>source - the parent node (as described above).</li> <li>target - the child node.</li> </ul> <p>This method is useful for retrieving a set of link descriptions suitable for display, often in conjunction with the <a href=\"svg-shapes#diagonal\">diagonal</a> shape generator. For example:</p> <div class=\"highlight highlight-source-js\"><pre>svg.selectAll(\"path\")\n    .data(partition.links(nodes))\n  .enter().append(\"path\")\n    .attr(\"d\", d3.svg.diagonal());</pre></div> <h6 id=\"children\"> treemap.<b>children</b>([<i>children</i>])</h6> <p>If <em>children</em> is specified, sets the specified children accessor function. If <em>children</em> is not specified, returns the current children accessor function, which by default assumes that the input data is an object with a children array:</p> <div class=\"highlight highlight-source-js\"><pre>function children(d, depth) {\n  return d.children;\n}</pre></div> <p>Often, it is convenient to load the node hierarchy using <a href=\"requests#d3_json\">d3.json</a>, and represent the input hierarchy as a nested <a href=\"http://json.org\">JSON</a> object. For example:</p> <div class=\"highlight highlight-source-js\"><pre>{\n \"name\": \"flare\",\n \"children\": [\n  {\n   \"name\": \"analytics\",\n   \"children\": [\n    {\n     \"name\": \"cluster\",\n     \"children\": [\n      {\"name\": \"AgglomerativeCluster\", \"size\": 3938},\n      {\"name\": \"CommunityStructure\", \"size\": 3812},\n      {\"name\": \"MergeEdge\", \"size\": 743}\n     ]\n    },\n    {\n     \"name\": \"graph\",\n     \"children\": [\n      {\"name\": \"BetweennessCentrality\", \"size\": 3534},\n      {\"name\": \"LinkDistance\", \"size\": 5731}\n     ]\n    }\n   ]\n  }\n ]\n}</pre></div> <p>The children accessor is first invoked for root node in the hierarchy. If the accessor returns null, then the node is assumed to be a leaf node at the layout traversal terminates. Otherwise, the accessor should return an array of data elements representing the child nodes.</p> <h6 id=\"sort\"> treemap.<b>sort</b>([<i>comparator</i>])</h6> <p>If <em>comparator</em> is specified, sets the sort order of sibling nodes for the layout using the specified comparator function. If <em>comparator</em> is not specified, returns the current group sort order, which defaults to descending order by the associated input data's numeric value attribute:</p> <div class=\"highlight highlight-source-js\"><pre>function comparator(a, b) {\n  return b.value - a.value;\n}</pre></div> <p>The comparator function is invoked for pairs of nodes, being passed the input data for each node. A null comparator disables sorting and uses tree traversal order. Comparator functions may also be implemented using <a href=\"arrays#d3_ascending\">d3.ascending</a> or <a href=\"arrays#d3_descending\">d3.descending</a>.</p> <h6 id=\"value\"> treemap.<b>value</b>([<i>value</i>])</h6> <p>If <em>value</em> is specified, sets the value accessor to the specified function. If <em>value</em> is not specified, returns the current value accessor, which assumes that the input data is an object with a numeric value attribute:</p> <div class=\"highlight highlight-source-js\"><pre>function value(d) {\n  return d.value;\n}</pre></div> <p>The value accessor is invoked for each input data element, and must return a number representing the numeric value of the node. This value is used to set the area of each node proportionally to the value.</p> <h6 id=\"size\"> treemap.<b>size</b>([<i>size</i>])</h6> <p>If <em>size</em> is specified, sets the available layout size to the specified two-element array of numbers representing <em>x</em> and <em>y</em>. If <em>size</em> is not specified, returns the current size, which defaults to 1×1.</p> <h6 id=\"padding\"> treemap.<b>padding</b>([<i>padding</i>])</h6> <p>Get or set the padding for each treemap cell, in pixels. The padding determines the amount of extra space to reserve between the parent and its children; this space can be used to indicate the hierarchy through enclosure, or to reserve space for parent labels. If no padding is used, then the leaves of the tree will completely fill the layout's size.</p> <p>If <em>padding</em> is specified, sets the new padding and returns the treemap layout; if <em>padding</em> is not specified, returns the current padding. The padding may be specified several ways:</p> <ul> <li>A null value disables padding; null is equivalent to zero.</li> <li>A number indicates uniform padding, in pixels, on all four sides.</li> <li>An array of numbers indicates the top, right, bottom and left padding values.</li> </ul> <p>The padding may also be specified as a function which returns one of the three above values. This function is evaluated for each internal (non-leaf) node, and can be used to compute padding dynamically.</p> <h6 id=\"round\"> treemap.<b>round</b>([<i>round</i>])</h6> <p>If <em>round</em> is specified, sets whether or not the treemap layout will round to exact pixel boundaries. This can be nice to avoid antialiasing artifacts in SVG. If <em>round</em> is not specified, returns whether the treemap will be rounded.</p> <h6 id=\"sticky\"> treemap.<b>sticky</b>([<i>sticky</i>])</h6> <p>If <em>sticky</em> is specified, sets whether or not the treemap layout is \"sticky\": a <em>sticky</em> treemap layout will preserve the relative arrangement of nodes across transitions. The allocation of nodes into squarified horizontal and vertical rows is persisted across updates by storing a <em>z</em> attribute on the last element in each row; this allows nodes to be resized smoothly, without shuffling or occlusion that would impede perception of changing values. Note, however, that this results in a suboptimal layout for one of the two states. If <em>sticky</em> is not specified, returns whether the treemap layout is sticky.</p> <p>Implementation note: sticky treemaps cache the array of nodes internally; therefore, it is not possible to reuse the same layout instance on multiple datasets. To reset the cached state when switching datasets with a sticky layout, call sticky(true) again. Since version <a href=\"https://github.com/mbostock/d3/tree/v1.25.0\">1.25.0</a>, hierarchy layouts no longer copy the input data by default on each invocation, so it may be possible to eliminate caching and make the layout fully stateless.</p> <h6 id=\"mode\"> treemap.<b>mode</b>([<i>mode</i>])</h6> <p>If <em>mode</em> is specified, sets the layout algorithm. If <em>mode</em> is not specified, returns the current layout algorithm, which defaults to \"squarify\". The following modes are supported:</p> <ul> <li>squarify - rectangular subdivision; squareness controlled via the target <a href=\"#ratio\">ratio</a>.</li> <li>slice - horizontal subdivision.</li> <li>dice - vertical subdivision.</li> <li>slice-dice - alternating between horizontal and vertical subdivision.</li> </ul> <h6 id=\"ratio\"> treemap.<b>ratio</b>([<i>ratio</i>])</h6> <p>If <em>ratio</em> is specified, sets the layout ratio. If <em>ratio</em> is not specified, returns the current layout ratio, which defaults to <code>.5 * (1 + Math.sqrt(5))</code></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Treemap-Layout\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Treemap-Layout</a>\n  </p>\n</div>\n","zoom-behavior":"<h1 class=\"gh-header-title instapaper_title\">Zoom Behavior</h1>   <p><a href=\"http://bl.ocks.org/mbostock/3892919\"><img src=\"https://camo.githubusercontent.com/838b470cc7186e8b1ca8ea1b7a0f697b92a2062f/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333839323931392f7468756d626e61696c2e706e67\" alt=\"Pan+Zoom\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3892919/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/4015254\"><img src=\"https://camo.githubusercontent.com/5f0fcb967e2531819acc6c48fcdaf9f4d6f40058/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343031353235342f7468756d626e61696c2e706e67\" alt=\"Zoomable Area\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4015254/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/3680999\"><img src=\"https://camo.githubusercontent.com/03af025029098d6e11b540fb8b95f541fab954c4/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f333638303939392f7468756d626e61696c2e706e67\" alt=\"Geometric Zooming\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/3680999/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/4132797\"><img src=\"https://camo.githubusercontent.com/043640d1db6b5b1bbfc14ab77b11917009efc30c/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f343133323739372f7468756d626e61696c2e706e67\" alt=\"d3.geo.tile\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/4132797/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/5914438\"><img src=\"https://camo.githubusercontent.com/0a6506b754063fa1bee367c01dd76bdcc9230f2b/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f353931343433382f7468756d626e61696c2e706e67\" alt=\"Raster &amp; Vector Zoom\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/5914438/thumbnail.png\"></a> <a href=\"http://bl.ocks.org/mbostock/2374239\"><img src=\"https://camo.githubusercontent.com/e24a033737498cf6626be0d47b2c6b685c19373d/687474703a2f2f626c2e6f636b732e6f72672f6d626f73746f636b2f7261772f323337343233392f7468756d626e61696c2e706e67\" alt=\"Zoomable Geography\" data-canonical-src=\"http://bl.ocks.org/mbostock/raw/2374239/thumbnail.png\"></a></p> <p>This behavior automatically creates event listeners to handle zooming and panning gestures on a container element. Both mouse and touch events are supported.</p> <h6 id=\"zoom\"> d3.behavior.<b>zoom</b>()</h6> <p>Constructs a new zoom behavior. Once constructed, you can apply the behavior to selected elements using selection.call:</p> <div class=\"highlight highlight-source-js\"><pre>var zoom = d3.behavior.zoom();\nselection.call(zoom);</pre></div> <p>All registered listeners use the “zoom” namespace, so to subsequently remove the behavior:</p> <div class=\"highlight highlight-source-js\"><pre>selection.on(\".zoom\", null);</pre></div> <h6 id=\"_zoom\"> <b>zoom</b>(<i>selection</i>)</h6> <p>Applies the zoom behavior to the specified <em>selection</em>, registering the necessary event listeners to support panning and zooming.</p> <h6 id=\"translate\"> zoom.<b>translate</b>([<i>translate</i>])</h6> <p>Specifies the current zoom translation vector. If not specified, returns the current translation vector, which defaults to [0, 0].</p> <h6 id=\"scale\"> zoom.<b>scale</b>([<i>scale</i>])</h6> <p>Specifies the current zoom scale. If not specified, returns the current zoom scale, which defaults to 1.</p> <h6 id=\"scaleExtent\"> zoom.<b>scaleExtent</b>([<i>extent</i>])</h6> <p>Specifies the zoom scale's allowed range as a two-element array, [<i>minimum</i>, <i>maximum</i>]. If not specified, returns the current scale extent, which defaults to [0, Infinity].</p> <h6 id=\"center\"> zoom.<b>center</b>([<i>center</i>])</h6> <p>If <em>center</em> is specified, sets the <a href=\"http://bl.ocks.org/mbostock/6226534\">focal point</a> [<i>x</i>, <i>y</i>] for mousewheel zooming and returns this zoom behavior. If <em>center</em> is not specified, returns the current focal point, which defaults to null. A null center indicates that mousewheel zooming should zoom in and out around the current mouse location.</p> <h6 id=\"size\"> zoom.<b>size</b>([<i>size</i>])</h6> <p>If <em>size</em> is specified, sets the viewport size to the specified dimensions [<i>width</i>, <i>height</i>] and returns this zoom behavior. If <em>size</em> is not specified, returns the current viewport size which defaults to [960, 500]. A <em>size</em> is needed to support <a href=\"transitions#d3_interpolateZoom\">smooth zooming</a> during transitions.</p> <h6 id=\"x\"> zoom.<b>x</b>([<i>x</i>])</h6> <p>Specifies an <em>x</em>-scale whose domain should be automatically adjusted when zooming. If not specified, returns the current <em>x</em>-scale, which defaults to null. If the scale's domain or range is modified programmatically, this function should be called again. Setting the <em>x</em>-scale also resets the scale to 1 and the translate to [0, 0].</p> <h6 id=\"y\"> zoom.<b>y</b>([<i>y</i>])</h6> <p>Specifies an <em>y</em>-scale whose domain should be automatically adjusted when zooming. If not specified, returns the current <em>y</em>-scale, which defaults to null. If the scale's domain or range is modified programmatically, this function should be called again. Setting the <em>y</em>-scale also resets the scale to 1 and the translate to [0, 0].</p> <h6 id=\"on\"> zoom.<b>on</b>(<i>type</i>, <i>listener</i>)</h6> <p>Registers the specified <em>listener</em> to receive events of the specified <em>type</em> from the zoom behavior. The following types are supported:</p> <ul> <li> <em>zoomstart</em> - at the start of a zoom gesture (e.g., touchstart).</li> <li> <em>zoom</em> - when the view changes (e.g., touchmove).</li> <li> <em>zoomend</em> - at the end of the current zoom gesture (e.g., touchend).</li> </ul> <p>If an event listener was already registered for the same type, the existing listener is removed before the new listener is added. To register multiple listeners for the same event type, the type may be followed by an optional namespace, such as \"zoom.foo\" and \"zoom.bar\". To remove a listener, pass null as the listener.</p> <p>For mousewheel events, which happen discretely with no explicit start and end reported by the browser, events that occur within 50 milliseconds of each other are grouped into a single zoom gesture. If you want more robust interpretation of these gestures, please petition your browser vendor of choice for better touch event support.</p> <p>When fired, the d3.event object will contain the following properties:</p> <ul> <li> <em>scale</em> - a number; the current scale.</li> <li> <em>translate</em> - a two-element array representing the current translation vector.</li> </ul> <h6 id=\"event\"> zoom.<b>event</b>(<i>selection</i>)</h6> <p>If <em>selection</em> is a selection, immediately dispatches a zoom gesture to registered listeners, as the three event sequence <em>zoomstart</em>, <em>zoom</em> and <em>zoomend</em>. This can be useful in triggering listeners after setting the <a href=\"#translate\">translate</a> or <a href=\"#scale\">scale</a> programatically. If <em>selection</em> is a transition, registers the appropriate tweens so that the zoom behavior dispatches events over the course of the transition: a <em>zoomstart</em> event when the transition starts from the previously-set view, <em>zoom</em> events for each tick of the transition, and finally a <em>zoomend</em> event when the transition ends. Note that the transition will be <a href=\"selections#interrupt\">interrupted</a> if the user starts zooming before the transition ends.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Zoom-Behavior\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Zoom-Behavior</a>\n  </p>\n</div>\n","selections":"<h1 class=\"gh-header-title instapaper_title\">Selections</h1>   <p>A <strong>selection</strong> is an array of elements pulled from the current document. D3 uses <a href=\"http://www.w3.org/TR/css3-selectors/\" title=\"|http://www.w3.org/TR/css3-selectors/\">CSS3</a> to select elements. For example, you can select by tag (\"div\"), class (\".awesome\"), unique identifier (\"#foo\"), attribute (\"[color=red]\"), or containment (\"parent child\"). Selectors can also be intersected (\".this.that\" for logical AND) or unioned (\".this, .that\" for logical OR). If your browser doesn't support selectors natively, you can include <a href=\"http://sizzlejs.com/\" title=\"http://sizzlejs.com/\">Sizzle</a> before D3 for backwards-compatibility.</p> <p>After selecting elements, you apply <strong>operators</strong> to them to do stuff. These operators can get or set <a href=\"selections#attr\">attributes</a>, <a href=\"selections#style\">styles</a>, <a href=\"selections#property\">properties</a>, <a href=\"selections#html\">HTML</a> and <a href=\"selections#text\">text</a> content. Attribute values and such are specified as either constants or functions; the latter are evaluated for each element. You can also join selections to <a href=\"selections#data\">data</a>; this data is available to operators for data-driven transformations. In addition, joining to data produces <a href=\"selections#enter\">enter</a> and <a href=\"selections#enter\">exit</a> subselections, so that you may <a href=\"selections#append\">add</a> or <a href=\"selections#remove\">remove</a> elements in response to changes in data.</p> <p>You won't generally need to use <code>for</code> loops or recursive functions to modify the document with D3. That's because you operate on entire selections at once, rather than looping over individual elements. However, you can still loop over elements manually if you wish: there's an <a href=\"selections#each\">each</a> operator which invokes an arbitrary function, and selections are arrays, so elements can be accessed directly (e.g., <code>selection[0][0]</code>). D3 supports method chaining for brevity when applying multiple operators: the operator return value is the selection.</p> <h2 id=\"selecting-elements\"> Selecting Elements</h2> <p>D3 provides two top-level methods for selecting elements: <a href=\"selections#d3_select\">select</a> and <a href=\"selections#d3_selectAll\">selectAll</a>. These methods accept selector strings; the former selects only the first matching element, while the latter selects <em>all</em> matching elements in document traversal order. These methods can also accept nodes, which is useful for integration with third-party libraries such as jQuery or developer tools (<code>$0</code>).</p> <h6 id=\"d3_select\"> d3.<b>select</b>(<i>selector</i>)</h6> <p>Selects the first element that matches the specified selector string, returning a single-element selection. If no elements in the current document match the specified selector, returns the empty selection. If multiple elements match the selector, only the first matching element (in document traversal order) will be selected.</p> <h6 id=\"d3_select\"> d3.<b>select</b>(<i>node</i>)</h6> <p>Selects the specified node. This is useful if you already have a reference to a node, such as <code>d3.select(this)</code> within an event listener, or a global such as <code>document.body</code>. This function does not traverse the DOM.</p> <h6 id=\"d3_selectAll\"> d3.<b>selectAll</b>(<i>selector</i>)</h6> <p>Selects all elements that match the specified selector. The elements will be selected in document traversal order (top-to-bottom). If no elements in the current document match the specified selector, returns the empty selection.</p> <h6 id=\"d3_selectAll\"> d3.<b>selectAll</b>(<i>nodes</i>)</h6> <p>Selects the specified array of elements. This is useful if you already have a reference to nodes, such as <code>d3.selectAll(this.childNodes)</code> within an event listener, or a global such as <code>document.links</code>. The <em>nodes</em> argument doesn't have to be an array, exactly; any pseudo-array that can be coerced into an array (e.g., a <code>NodeList</code> or <code>arguments</code>) will work. This function does not traverse the DOM.</p> <h2 id=\"operating-on-selections\"> Operating on Selections</h2> <p>Selections are arrays of elements—literally (<a href=\"http://bost.ocks.org/mike/selection/#subclass\" title=\"http://bost.ocks.org/mike/selection/#subclass\">maybe not literally...</a>). D3 binds additional methods to the array so that you can apply operators to the selected elements, such as setting an attribute on all the selected elements. One nuance is that selections are <em>grouped</em>: rather than a one-dimensional array, each selection is an <em>array of arrays</em> of elements. This preserves the hierarchical structure of subselections. Most of the time, you can ignore this detail, but that's why a single-element selection looks like <code>[[node]]</code> rather than <code>[node]</code>. For more on nested selections, see <a href=\"http://bost.ocks.org/mike/nest/\" title=\"http://bost.ocks.org/mike/nest/\">Nested Selections</a>.</p> <p>If you want to learn how selections work, try selecting elements interactively using your browser's developer console. You can inspect the returned array to see which elements were selected, and how they are grouped. You can also then apply operators to the selected elements and see how the page content changes.</p> <h3> Content</h3> <p>D3 has a variety of operators which affect the document content. These are what you'll use the most to display data! When used to set document content, the operators return the current selection, so you can chain multiple operators together in a concise statement.</p> <h6 id=\"attr\"> selection.<b>attr</b>(<i>name</i>[, <i>value</i>])</h6> <p>If <em>value</em> is specified, sets the attribute with the specified name to the specified value on all selected elements. If <em>value</em> is a constant, then all elements are given the same attribute value; otherwise, if <em>value</em> is a function, then the function is evaluated for each selected element (in order), being passed the current datum <code>d</code> and the current index <code>i</code>, with the <code>this</code> context as the current DOM element. The function's return value is then used to set each element's attribute. A null value will remove the specified attribute.</p> <p>If <em>value</em> is not specified, returns the value of the specified attribute for the first non-null element in the selection. This is generally useful only if you know that the selection contains exactly one element.</p> <p>The specified <em>name</em> may have a namespace prefix, such as <code>xlink:href</code>, to specify an \"href\" attribute in the XLink namespace. By default, D3 supports svg, xhtml, xlink, xml, and xmlns namespaces. Additional namespaces can be registered by adding them to <a href=\"namespaces#prefix\">d3.ns.prefix</a> using dot notation.</p> <p><em>name</em> can also be an Object of <em>name</em> and <em>value</em> attributes.</p> <h6 id=\"classed\"> selection.<b>classed</b>(<i>name</i>[, <i>value</i>])</h6> <p>This operator is a convenience routine for setting the \"class\" attribute; it understands that the \"class\" attribute is a set of tokens separated by spaces. Under the hood, it will use the <a href=\"https://developer.mozilla.org/en/DOM/element.classList\" title=\"https://developer.mozilla.org/en/DOM/element.classList\">classList</a> if available, for convenient adding, removing and toggling of CSS classes.</p> <p>If <em>value</em> is specified, sets whether or not the specified class is associated with the selected elements. If <em>value</em> is a constant and truthy, then all elements are assigned the specified class, if not already assigned; if falsey, then the class is removed from all selected elements, if assigned. If <em>value</em> is a function, then the function is evaluated for each selected element (in order), being passed the current datum <code>d</code> and the current index <code>i</code>, with the <code>this</code> context as the current DOM element. The function's return value is then used to assign or unassign the specified class on each element.</p> <p>If you want to set several classes at once, use an object literal like so: <code>selection.classed({'foo': true, 'bar': false})</code>, or use a space-separated list of class names like so: <code>selection.classed('foo bar', true)</code>. </p> <p>If <em>value</em> is not specified, returns true if and only if the first non-null element in this selection has the specified class. This is generally useful only if you know the selection contains exactly one element.</p> <h6 id=\"style\"> selection.<b>style</b>(<i>name</i>[, <i>value</i>[, <i>priority</i>]])</h6> <p>If <em>value</em> is specified, sets the CSS style property with the specified name to the specified value on all selected elements. If <em>value</em> is a constant, then all elements are given the same style value; otherwise, if <em>value</em> is a function, then the function is evaluated for each selected element (in order), being passed the current datum <code>d</code> and the current index <code>i</code>, with the <code>this</code> context as the current DOM element. The function's return value is then used to set each element's style property. A null value will remove the style property. An optional <em>priority</em> may also be specified, either as null or the string \"important\" (without the exclamation point).</p> <p>If you want to set several style properties at once, use an object literal. For example: </p> <div class=\"highlight highlight-source-js\"><pre>selection.style({stroke: \"black\", \"stroke-width\": \"2px\"});</pre></div> <p>Note that CSS styles typically have associated units. For example, <code>\"3px\"</code> is a valid stroke-width property value, while <code>3</code> is not. Although some browsers implicitly assign the \"px\" (pixel) unit to numeric values, not all browsers do: IE, for example, throws an “invalid arguments” error and stops executing!</p> <p>If <em>value</em> is not specified, returns the current <em>computed</em> value of the specified style property for the first non-null element in the selection. This is generally useful only if you know the selection contains exactly one element. Note that the computed value may be <em>different</em> than the value that was previously set, particularly if the style property was set using a shorthand property (such as the \"font\" style, which is shorthand for \"font-size\", \"font-face\", etc.).</p> <h6 id=\"property\"> selection.<b>property</b>(<i>name</i>[, <i>value</i>])</h6> <p>Some HTML elements have special properties that are not addressable using standard attributes or styles. For example, form text fields have a <code>value</code> string property, and checkboxes have a <code>checked</code> boolean property. You can use the <code>property</code> operator to get or set these properties, or any other addressable field on the underlying element, such as <code>className</code>.</p> <p>If <em>value</em> is specified, sets the property with the specified name to the specified value on all selected elements. If <em>value</em> is a constant, then all elements are given the same property value; otherwise, if <em>value</em> is a function, then the function is evaluated for each selected element (in order), being passed the current datum <code>d</code> and the current index <code>i</code>, with the <code>this</code> context as the current DOM element. The function's return value is then used to set each element's property. A null value will delete the specified property.</p> <p>If you want to set several properties at once, use an object literal like so: <code>selection.property({'foo': 'bar', 'baz': 'qux'})</code>.</p> <p>If <em>value</em> is not specified, returns the value of the specified property for the first non-null element in the selection. This is generally useful only if you know the selection contains exactly one element.</p> <h6 id=\"text\"> selection.<b>text</b>([<i>value</i>])</h6> <p>The <code>text</code> operator is based on the <a href=\"http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-textContent\" title=\"http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-textContent\">textContent</a> property; setting the text content will replace any existing child elements.</p> <p>If <em>value</em> is specified, sets the text content to the specified value on all selected elements. If <em>value</em> is a constant, then all elements are given the same text content; otherwise, if <em>value</em> is a function, then the function is evaluated for each selected element (in order), being passed the current datum <code>d</code> and the current index <code>i</code>, with the <code>this</code> context as the current DOM element. The function's return value is then used to set each element's text content. A null value will clear the content.</p> <p>If <em>value</em> is not specified, returns the text content for the first non-null element in the selection. This is generally useful only if you know the selection contains exactly one element.</p> <h6 id=\"html\"> selection.<b>html</b>([<i>value</i>])</h6> <p>The <code>html</code> operator is based on the <a href=\"http://dev.w3.org/html5/spec-LC/apis-in-html-documents.html#innerhtml\" title=\"http://dev.w3.org/html5/spec-LC/apis-in-html-documents.html#innerhtml\">innerHTML</a> property; setting the inner HTML content will replace any existing child elements. Also, you may prefer to use the <code>append</code> or <code>insert</code> operators to create HTML content in a data-driven way; this operator is intended for when you want a little bit of HTML, say for rich formatting.</p> <p>If <em>value</em> is specified, sets the inner HTML content to the specified value on all selected elements. If <em>value</em> is a constant, then all elements are given the same inner HTML content; otherwise, if <em>value</em> is a function, then the function is evaluated for each selected element (in order), being passed the current datum <code>d</code> and the current index <code>i</code>, with the <code>this</code> context as the current DOM element. The function's return value is then used to set each element's inner HTML content. A null value will clear the content.</p> <p>If <em>value</em> is not specified, returns the inner HTML content for the first non-null element in the selection. This is generally useful only if you know the selection contains exactly one element.</p> <p>Note: as its name suggests, selection.html is only supported on HTML elements. SVG elements and other non-HTML elements do not support the innerHTML property, and thus are incompatible with selection.html. Consider using <a href=\"https://developer.mozilla.org/en-US/docs/XMLSerializer\">XMLSerializer</a> to convert a DOM subtree to text. See also the <a href=\"https://code.google.com/p/innersvg/\">innersvg polyfill</a>, which provides a shim to support the innerHTML property on SVG elements.</p> <h6 id=\"append\"> selection.<b>append</b>(<i>name</i>)</h6> <p>Appends a new element with the specified <em>name</em> as the last child of each element in the current selection, returning a new selection containing the appended elements. Each new element inherits the data of the current elements, if any, in the same manner as <a href=\"selections#select\">select</a> for subselections.</p> <p>The <em>name</em> may be specified either as a constant string or as a function that returns the DOM element to append. If <em>name</em> is a function, it is passed the current datum <code>d</code> and the current index <code>i</code>, with the <code>this</code> context as the current DOM element. To append an arbitrary element based on the bound data it must be created in the function. For example:</p> <div class=\"highlight highlight-source-js\"><pre>selection.enter().append(function(d) {\n    return document.createElementNS(\"http://www.w3.org/2000/svg\", d.type)\n})</pre></div> <p>When the <em>name</em> is specified as a string, it may have a namespace prefix of the form \"namespace:tag\". For example, \"svg:text\" will create a \"text\" element in the SVG namespace. By default, D3 supports svg, xhtml, xlink, xml and xmlns namespaces. Additional namespaces can be registered by adding to <a href=\"namespaces#prefix\">d3.ns.prefix</a>. If no namespace is specified, then the namespace will be inherited from the enclosing element; or, if the name is one of the known prefixes, the corresponding namespace will be used (for example, \"svg\" implies \"svg:svg\").</p> <h6 id=\"insert\"> selection.<b>insert</b>(<i>name</i>[, <i>before</i>])</h6> <p>Inserts a new element with the specified <em>name</em> before the element matching the specified <em>before</em> selector, for each element in the current selection, returning a new selection containing the inserted elements. If the before selector does not match any elements, then the new element will be the last child as with <a href=\"selections#append\">append</a>. Each new element inherits the data of the current elements (if any), in the same manner as <a href=\"selections#select\">select</a> for subselections.</p> <p>The <em>name</em> may be specified either as a constant string or as a function that returns the DOM element to append. When the <em>name</em> is specified as a string, it may have a namespace prefix of the form \"namespace:tag\". For example, \"svg:text\" will create a \"text\" element in the SVG namespace. By default, D3 supports svg, xhtml, xlink, xml and xmlns namespaces. Additional namespaces can be registered by adding to <a href=\"namespaces#prefix\">d3.ns.prefix</a>. If no namespace is specified, then the namespace will be inherited from the enclosing element; or, if the name is one of the known prefixes, the corresponding namespace will be used (for example, \"svg\" implies \"svg:svg\").</p> <p>Likewise, the <em>before</em> selector may be specified as a selector string or a function which returns a DOM element. For instance, <code>insert(\"div\", \":first-child\")</code> will prepend child div nodes to the current selection. For <a href=\"selections#enter\">enter selections</a>, the <em>before</em> selector may be omitted, in which case entering elements will be inserted immediately before the next following sibling in the update selection, if any. This allows you to insert elements into the DOM in an order consistent with bound data. Note, however, the slower <a href=\"selections#order\">selection.order</a> may still be required if updating elements change order.</p> <h6 id=\"remove\"> selection.<b>remove</b>()</h6> <p>Removes the elements in the current selection from the current document. Returns the current selection (the same elements that were removed) which are now “off-screen”, detached from the DOM. Note that there is not currently a dedicated API to add removed elements back to the document; however, you can pass a function to selection.append or selection.insert to re-add elements.</p> <h3> Data</h3> <h6 id=\"data\"> selection.<b>data</b>([<i>values</i>[, <i>key</i>]])</h6> <p>Joins the specified array of data with the current selection. The specified <em>values</em> is an array of data values (e.g. numbers or objects), or a function that returns an array of values. If a <em>key</em> function is not specified, then the first datum in <em>values</em> is assigned to the first element in the current selection, the second datum to the second selected element, and so on. When data is assigned to an element, it is stored in the property <code>__data__</code> (defined by D3), thus making the data \"sticky\" so that it is available on re-selection.</p> <p>The result of the <code>data</code> method is the <em>update</em> selection; this represents the selected DOM elements that were successfully bound to the specified data elements. The <em>update</em> selection also contains a reference to the <a href=\"selections#enter\">enter</a> and <a href=\"selections#exit\">exit</a> selections, for adding and removing nodes in correspondence with data. The <em>update</em> and <em>enter</em> selections are returned in data order and the <em>exit</em> selection in document order at the time that the selection was queried. For more details, see the short tutorial <a href=\"http://bost.ocks.org/mike/join/\" title=\"http://bost.ocks.org/mike/join/\">Thinking With Joins</a>.</p> <p>A <em>key</em> function <strong>key</strong>([ <em>d</em> [, <em>i</em> ]]) may be specified to control how data is joined to elements (this replaces the default by-index behavior). The key function returns a string which is used to join a datum with its corresponding element, based on the previously-bound data. For example, if each datum has a unique field <code>name</code>, the join might be specified as <code>.data(data, function(d) { return d.name; })</code></p> <p>The key function is called twice during the data binding process, which proceeds in two phases. </p> <ol> <li><p>The <em>key</em> function is evaluated on the nodes to form <code>nodeByKeyValue</code> (an associative array of nodes) with the <code>this</code> context as the node, <code>d</code> as the node <code>__data__</code> member and the second argument <code>i</code> as the selection group index. </p></li> <li><p>The <em>key</em> function is evaluated on each element of the <em>values</em> array - this time with <em>values</em> as the <code>this</code> context, <em>values</em>[<code>i</code>] as the first argument <code>d</code> and the <em>values</em> index <code>i</code> as the second argument - and the results are then used to attempt to look up the nodes in the <code>nodeByKeyValue</code> collection. If the lookup is successful, the node is added to the <em>update selection</em>, any nodes not queried are added to the exit selection. Any data elements that failed to find a matching node are used to form the enter selection. </p></li> </ol> <p>If a key function is specified, the <code>data</code> operator also affects the index of nodes; this index is passed as the second argument <code>i</code> to any operator function arguments. However, note that existing DOM elements are not automatically reordered; use <a href=\"#sort\">sort</a> or <a href=\"#order\">order</a> as needed. For a more detailed example of how the key function affects the data join, see the tutorial <a href=\"http://bost.ocks.org/mike/bar/2/\" title=\"http://bost.ocks.org/mike/bar/2/\">A Bar Chart, Part 2</a>.</p> <p>The <em>values</em> array specifies the data <strong>for each group</strong> in the selection. Thus, if the selection has multiple groups (such as a <a href=\"#d3_selectAll\">d3.selectAll</a> followed by a <a href=\"#selectAll\">selection.selectAll</a>), then <em>data</em> should be specified as a function that returns an array (assuming that you want different data for each group). The function will be passed the current group data (or <code>undefined</code>) and the index, with the group as the <code>this</code> context. For example, you may bind a two-dimensional array to an initial selection, and then bind the contained inner arrays to each subselection. The <em>values</em> function in this case is the identity function: it is invoked for each group of child elements, being passed the data bound to the parent element, and returns this array of data.</p> <div class=\"highlight highlight-source-js\"><pre>var matrix = [\n  [11975,  5871, 8916, 2868],\n  [ 1951, 10048, 2060, 6171],\n  [ 8010, 16145, 8090, 8045],\n  [ 1013,   990,  940, 6907]\n];\n\nvar tr = d3.select(\"body\").append(\"table\").selectAll(\"tr\")\n    .data(matrix)\n  .enter().append(\"tr\");\n\nvar td = tr.selectAll(\"td\")\n    .data(function(d) { return d; })\n  .enter().append(\"td\")\n    .text(function(d) { return d; });</pre></div> <p>If <em>values</em> is not specified, then this method returns the array of data for the first group in the selection. The length of the returned array will match the length of the first group, and the index of each datum in the returned array will match the corresponding index in the selection. If some of the elements in the selection are null, or if they have no associated data, then the corresponding element in the array will be <code>undefined</code>.</p> <p>Note: the <code>data</code> method cannot be used to clear previously-bound data; use <a href=\"#datum\">selection.datum</a> instead.</p> <h6 id=\"enter\"> selection.<b>enter()</b>\n</h6> <p>Returns the enter selection: placeholder nodes for each data element for which no corresponding existing DOM element was found in the current selection. This method is only defined on the update selection, which is returned by the <a href=\"selections#data\">data</a> operator. In addition, the enter selection only defines the <a href=\"selections#append\">append</a>, <a href=\"selections#insert\">insert</a>, <a href=\"selections#select\">select</a> and <a href=\"selections#call\">call</a> operators; you must use these operators to instantiate the entering elements before modifying any content. Enter selections also support <a href=\"selections#empty\">empty</a> and <a href=\"selections#size\">size</a>.</p> <p>As a simple example, consider the case where the existing selection is empty, and we wish to create new nodes to match our data:</p> <div class=\"highlight highlight-source-js\"><pre>d3.select(\"body\").selectAll(\"div\")\n    .data([4, 8, 15, 16, 23, 42])\n  .enter().append(\"div\")\n    .text(function(d) { return d; });</pre></div> <p>Assuming that the body is initially empty, the above code will create six new DIV elements, append them to the body in order, and assign their text content as the associated (string-coerced) number:</p> <div class=\"highlight highlight-text-html-basic\"><pre>&lt;div&gt;4&lt;/div&gt;\n&lt;div&gt;8&lt;/div&gt;\n&lt;div&gt;15&lt;/div&gt;\n&lt;div&gt;16&lt;/div&gt;\n&lt;div&gt;23&lt;/div&gt;\n&lt;div&gt;42&lt;/div&gt;</pre></div> <p>Another way to think about the entering placeholder nodes is that they are pointers to the parent node (in this example, the document body); however, they only support append and insert. Once elements have been inserted, their indices will reflect the new positions and not necessarily start from zero or be continuous.</p> <p>The enter selection <strong>merges into the update selection</strong> when you append or insert. Rather than applying the same operators to the enter and update selections separately, you can now apply them only once to the update selection after entering the nodes. If you find yourself removing an entire selection's elements only to reinsert most of them, do this instead. For example:</p> <div class=\"highlight highlight-source-js\"><pre>var update_sel = svg.selectAll(\"circle\").data(data)\nupdate_sel.attr(/* operate on old elements only */)\nupdate_sel.enter().append(\"circle\").attr(/* operate on new elements only */)\nupdate_sel.attr(/* operate on old and new elements */)\nupdate_sel.exit().remove() /* complete the enter-update-exit pattern */</pre></div> <h6 id=\"exit\"> selection.<b>exit()</b>\n</h6> <p>Returns the exit selection: existing DOM elements in the current selection for which no new data element was found. This method is only defined on the update selection, which is returned by the <a href=\"selections#data\">data</a> operator. The exit selection defines all the normal operators, though typically the main one you'll want to use is <a href=\"selections#remove\">remove</a>; the other operators exist primarily so you can define an exiting transition as desired. Note that the <em>exit</em> operator merely returns a reference to the exit selection, and it is up to you to remove the new nodes.</p> <p>As a simple example, consider updating the six DIV elements created in the above example for the enter operator. Here we bind those elements to a new array of data with some new and some old:</p> <div class=\"highlight highlight-source-js\"><pre>var div = d3.select(\"body\").selectAll(\"div\")\n    .data([1, 2, 4, 8, 16, 32], function(d) { return d; });</pre></div> <p>Now <code>div</code>—the result of the data operator—refers to the updating selection. Since we specified a key function using the identity function, and the new data array contains the numbers [4, 8, 16] which also exist in the old data array, this updating selection contains three DIV elements. Let's say we leave those elements as-is. We can instantiate and add the new elements [1, 2, 32] using the enter selection:</p> <div class=\"highlight highlight-source-js\"><pre>div.enter().append(\"div\")\n    .text(function(d) { return d; });</pre></div> <p>Likewise, we can remove the exiting elements [15, 23, 42]:</p> <div class=\"highlight highlight-source-js\"><pre>div.exit().remove();</pre></div> <p>Now the document body looks like this:</p> <div class=\"highlight highlight-text-html-basic\"><pre>&lt;div&gt;4&lt;/div&gt;\n&lt;div&gt;8&lt;/div&gt;\n&lt;div&gt;16&lt;/div&gt;\n&lt;div&gt;1&lt;/div&gt;\n&lt;div&gt;2&lt;/div&gt;\n&lt;div&gt;32&lt;/div&gt;</pre></div> <p>Note that the DOM elements are now out-of-order. However, the selection index <code>i</code> (the second argument to operator functions), will correctly match the new data array. For example, we could assign an index attribute:</p> <div class=\"highlight highlight-source-js\"><pre>d3.selectAll(\"div\").attr(\"index\", function(d, i) { return i; });</pre></div> <p>This would result in:</p> <div class=\"highlight highlight-text-html-basic\"><pre>&lt;div index=\"2\"&gt;4&lt;/div&gt;\n&lt;div index=\"3\"&gt;8&lt;/div&gt;\n&lt;div index=\"4\"&gt;16&lt;/div&gt;\n&lt;div index=\"0\"&gt;1&lt;/div&gt;\n&lt;div index=\"1\"&gt;2&lt;/div&gt;\n&lt;div index=\"5\"&gt;32&lt;/div&gt;</pre></div> <p>If you want the document traversal order to match the selection data order, you can use <a href=\"#sort\">sort</a> or <a href=\"#order\">order</a>.</p> <h6 id=\"filter\"> selection.<b>filter</b>(<i>selector</i>)</h6> <p>Filters the selection, returning a new selection that contains only the elements for which the specified <em>selector</em> is true. The <em>selector</em> may be specified either as a function or as a selector string, such as \".foo\". As with other operators, the function is passed the current datum <code>d</code> and index <code>i</code>, with the <code>this</code> context as the current DOM element. Filter should only be called on selections with DOM elements bound, e.g. from <a href=\"selections#append\">append</a> or <a href=\"selections#insert\">insert</a>. To bind elements to only a subset of the data, call the built-in array <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Filter\" title=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Filter\">filter</a> on the argument to <a href=\"selections#data\">data</a>. Like the built-in function, D3's filter <em>does not</em> preserve the index of the original selection in the returned selection; it returns a copy with elements removed. If you want to preserve the index, use <a href=\"selections#select\">select</a> instead. </p> <p>For example, to select every element with an odd index (relative to the zero-based index):</p> <div class=\"highlight highlight-source-js\"><pre>var odds = selection.select(function(d, i) { return i % 2 === 1 ? this : null; });</pre></div> <p>Equivalently, using a filter function:</p> <div class=\"highlight highlight-source-js\"><pre>var odds = selection.filter(function(d, i) { return i % 2 === 1; });</pre></div> <p>Or a filter selector (noting that the :nth-child pseudo-class is a one-based index rather than a zero-based index):</p> <div class=\"highlight highlight-source-js\"><pre>var odds = selection.filter(\":nth-child(even)\");</pre></div> <p>Thus, you can use either select or filter to apply operators to a subset of elements.</p> <h6 id=\"datum\"> selection.<b>datum</b>([<i>value</i>])</h6> <p>Gets or sets the bound data for each selected element. Unlike the <a href=\"#data\">selection.data</a> method, this method does not compute a join (and thus does not compute enter and exit selections). This method is implemented on top of <a href=\"#property\">selection.property</a>:</p> <div class=\"highlight highlight-source-js\"><pre>d3.selection.prototype.datum = function(value) {\n  return arguments.length &lt; 1\n      ? this.property(\"__data__\")\n      : this.property(\"__data__\", value);\n};</pre></div> <p>If <em>value</em> is specified, sets the element's bound data to the specified value on all selected elements. If <em>value</em> is a constant, all elements are given the same data; otherwise, if <em>value</em> is a function, then the function is evaluated for each selected element, being passed the previous datum <code>d</code> and the current index <code>i</code>, with the <code>this</code> context as the current DOM element. The function is then used to set each element's data. A null value will delete the bound data. This operator has no effect on the index.</p> <p>If <em>value</em> is not specified, returns the bound datum for the first non-null element in the selection. This is generally useful only if you know the selection contains exactly one element.</p> <p>Note: this method was previously called \"map\". The old name is deprecated.</p> <p>The <code>datum</code> method is useful for accessing HTML5 <a href=\"http://www.w3.org/TR/html5/dom.html#custom-data-attribute\" title=\"http://www.w3.org/TR/html5/dom.html#custom-data-attribute\">custom data attributes</a> with D3. For example, given the following elements:</p> <div class=\"highlight highlight-text-html-basic\"><pre>&lt;ul id=\"list\"&gt;\n  &lt;li data-username=\"shawnbot\"&gt;Shawn Allen&lt;/li&gt;\n  &lt;li data-username=\"mbostock\"&gt;Mike Bostock&lt;/li&gt;\n&lt;/ul&gt;</pre></div> <p>You can expose the custom data attributes to D3 by setting each element’s data as the built-in <a href=\"http://www.w3.org/TR/html5/dom.html#dom-dataset\" title=\"http://www.w3.org/TR/html5/dom.html#dom-dataset\">dataset</a> property:</p> <div class=\"highlight highlight-source-js\"><pre>selection.datum(function() { return this.dataset; })</pre></div> <p>This can then be used, <a href=\"http://bl.ocks.org/1323729\" title=\"http://bl.ocks.org/1323729\">for example</a>, to sort elements by username.</p> <h6 id=\"sort\"> selection.<b>sort</b>([<i>comparator</i>])</h6> <p>Sorts the elements in the current selection according to the <em>comparator</em> function, and then re-inserts the document elements to match. Returns the selection.</p> <p>The comparator function, which defaults to <a href=\"arrays#d3_ascending\">d3.ascending</a>, is passed two elements' data <em>a</em> and <em>b</em> to compare. It should return either a negative, positive, or zero value. If negative, then <em>a</em> should be before <em>b</em>; if positive, then <em>a</em> should be after <em>b</em>; otherwise, <em>a</em> and <em>b</em> are considered equal and the order is arbitrary. </p> <p>Note that the sort is not guaranteed to be stable; however, it is guaranteed to have the same behavior as your browser's built-in <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort\" title=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort\">sort</a> method on arrays.</p> <h6 id=\"order\"> selection.<b>order</b>()</h6> <p>Re-inserts elements into the document such that the document order matches the selection order. This is equivalent to calling sort() if the data is already sorted, but much faster.</p> <h3> Animation &amp; Interaction</h3> <h6 id=\"on\"> selection.<b>on</b>(<i>type</i>[, <i>listener</i>[, <i>capture</i>]])</h6> <p>Adds or removes an event <em>listener</em> to each element in the current selection, for the specified <em>type</em>. The <em>type</em> is a string event type name, such as \"click\", \"mouseover\", or \"submit\". (Any <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\">DOM event type</a> supported by your browser may be used.) The <em>listener</em> is stored by decorating the selected DOM elements using the naming convention \"__on<em>type</em>\". The specified <em>listener</em> is invoked in the same manner as other operator functions, being passed the current datum <code>d</code> and index <code>i</code>, with the <code>this</code> context as the current DOM element. To access the current event within a listener, use the global <a href=\"selections#d3_event\">d3.event</a>. The return value of the event listener is ignored. </p> <p>If an event listener was already registered for the same type on the selected element, the existing listener is removed before the new listener is added. To register multiple listeners for the same event type, the type may be followed by an optional namespace, such as \"click.foo\" and \"click.bar\". The first part of the <em>type</em> (\"click\" for example) is used to register the event listener (using element.addEventListener()) and methods are added on the selected elements as __onclick.foo and __onclick.bar. To remove a listener, pass null as the <em>listener</em>. To remove all listeners for a particular event type, pass null as the <em>listener</em>, and <code>.type</code> as the <em>type</em>, e.g. <code>selection.on(\".foo\", null)</code>.</p> <p>An optional <em>capture</em> flag may be specified, which corresponds to the W3C <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\" title=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">useCapture flag</a>: \"After initiating capture, all events of the specified type will be dispatched to the registered EventListener before being dispatched to any EventTargets beneath them in the tree. Events which are bubbling upward through the tree will not trigger an EventListener designated to use capture.\"</p> <p>If <em>listener</em> is not specified, returns the currently-assigned listener for the specified <em>type</em>, if any.</p> <p>Note that while listeners will always see the latest datum (<code>d</code>) for their element, the index (<code>i</code>) is a property of the selection, and is defined when the selection is created. Updating the index requires re-selecting and re-binding listeners.</p> <h6 id=\"d3_event\"> d3.<b>event</b>\n</h6> <p>Stores the current event, if any. This global is registered during an event listener callback with the <a href=\"selections#on\">on</a> operator. The current event is reset after the listener is notified in a <code>finally</code> block. This allows the listener function to have the same form as other operator functions, being passed the current datum <code>d</code> and index <code>i</code>.</p> <p>The <code>d3.event</code> object is a <a href=\"https://developer.mozilla.org/en-US/docs/DOM/event\" title=\"https://developer.mozilla.org/en-US/docs/DOM/event\">DOM event</a> and implements the standard event fields like <code>timeStamp</code> and <code>keyCode</code> as well as methods like <code>preventDefault()</code> and <code>stopPropagation()</code>. While you can use the native event's <a href=\"https://developer.mozilla.org/en/DOM/event.pageX\" title=\"https://developer.mozilla.org/en/DOM/event.pageX\">pageX</a> and <a href=\"https://developer.mozilla.org/en/DOM/event.pageY\" title=\"https://developer.mozilla.org/en/DOM/event.pageY\">pageY</a>, it is often more convenient to transform the event position to the local coordinate system of the container that received the event. For example, if you embed an SVG in the normal flow of your page, you may want the event position relative to the top-left corner of the SVG image. If your SVG contains transforms, you might also want to know the position of the event relative to those transforms. Use the <a href=\"#d3_mouse\">d3.mouse</a> operator for the standard mouse pointer, and use <a href=\"#d3_touches\">d3.touches</a> for multitouch events on iOS.</p> <h6 id=\"d3_mouse\"> d3.<b>mouse</b>(<i>container</i>)</h6> <p>Returns the <em>x</em> and <em>y</em> coordinates of the current <a href=\"#d3_event\">d3.event</a>, relative to the specified <em>container</em>. The container may be an HTML or SVG container element, such as an <a href=\"http://www.w3.org/TR/SVG/struct.html#Groups\" title=\"http://www.w3.org/TR/SVG/struct.html#Groups\">svg:g</a> or <a href=\"http://www.w3.org/TR/SVG/struct.html#SVGElement\" title=\"http://www.w3.org/TR/SVG/struct.html#SVGElement\">svg:svg</a>. The coordinates are returned as a two-element array [<em>x</em>, <em>y</em>].</p> <h6 id=\"d3_touch\"> d3.<b>touch</b>(<i>container</i>[, <i>touches</i>], <i>identifier</i>)</h6> <p>Returns the <em>x</em> and <em>y</em> coordinates of the touch with the specified identifier associated with the current <a href=\"#d3_event\">d3.event</a>, relative to the specified <em>container</em>. If <em>touches</em> is not specified, defaults to the current event’s <a href=\"http://developer.apple.com/library/safari/documentation/UserExperience/Reference/TouchEventClassReference/TouchEvent/TouchEvent.html#//apple_ref/javascript/instp/TouchEvent/changedTouches\" title=\"http://developer.apple.com/library/safari/documentation/UserExperience/Reference/TouchEventClassReference/TouchEvent/TouchEvent.html#//apple_ref/javascript/instp/TouchEvent/changedTouches\">changedTouches</a>. The container may be an HTML or SVG container element, such as an svg:g or svg:svg. The coordinates are returned as an array of two-element arrays [ [ <em>x1</em>, <em>y1</em>], [ <em>x2</em>, <em>y2</em>], … ]. If there is no touch with the specified identifier in <em>touches</em>, returns null; this can be useful for ignoring touchmove events where the only some touches have moved.</p> <h6 id=\"d3_touches\"> d3.<b>touches</b>(<i>container</i>[, <i>touches</i>])</h6> <p>Returns the <em>x</em> and <em>y</em> coordinates of each touch associated with the current <a href=\"#d3_event\">d3.event</a>, based on the <a href=\"http://developer.apple.com/library/safari/documentation/UserExperience/Reference/TouchEventClassReference/TouchEvent/TouchEvent.html#//apple_ref/javascript/instp/TouchEvent/touches\" title=\"http://developer.apple.com/library/safari/documentation/UserExperience/Reference/TouchEventClassReference/TouchEvent/TouchEvent.html#//apple_ref/javascript/instp/TouchEvent/touches\">touches</a> attribute, relative to the specified <em>container</em>. The container may be an HTML or SVG container element, such as an svg:g or svg:svg. The coordinates are returned as an array of two-element arrays [ [ <em>x1</em>, <em>y1</em>], [ <em>x2</em>, <em>y2</em>], … ]. If <em>touches</em> is specified, returns the positions of the specified touches; if <em>touches</em> is not specified, it defaults to the <code>touches</code> property on the current event.</p> <h6 id=\"transition\"> selection.<b>transition</b>([<i>name</i>])</h6> <p>Starts a <a href=\"transitions\">transition</a> for the current selection. Transitions behave much like selections, except operators animate smoothly over time rather than applying instantaneously.</p> <p>Transitions of the same name are <a href=\"http://bost.ocks.org/mike/transition/\" title=\"http://bost.ocks.org/mike/transition/\">exclusive per-element</a>. When the new transition starts on a given element, it will interrupt an active transition of the same name on the element, if any. If a <em>name</em> is not specified, the empty name (“”) is used. Note that transitions with a zero delay do not start until the next timer tick, which is typically about 17ms after scheduling.</p> <h6 id=\"interrupt\"> selection.<b>interrupt</b>([<i>name</i>])</h6> <p>Immediately interrupts the active <a href=\"transitions\">transition</a> of the specified <em>name</em> on the selected elements, if any. If a <em>name</em> is not specified, the empty name (“”) is used. Does not cancel any scheduled transitions that have not yet started. To cancel scheduled transitions as well, simply create a new zero-delay transition after interrupting the current transition:</p> <div class=\"highlight highlight-source-js\"><pre>selection\n    .interrupt() // cancel the current transition\n    .transition(); // preempt any scheduled transitions</pre></div> <h3> Subselections</h3> <p>Whereas the top-level select methods query the entire document, a selection's <a href=\"selections#select\">select</a> and <a href=\"selections#selectAll\">selectAll</a> operators restrict queries to descendants of each selected element; we call this \"subselection\". For example, <code>d3.selectAll(\"p\").select(\"b\")</code> returns the first bold (\"b\") elements in every paragraph (\"p\") element. Subselecting via selectAll groups elements by ancestor. Thus, <code>d3.selectAll(\"p\").selectAll(\"b\")</code> groups by paragraph, while <code>d3.selectAll(\"p b\")</code> returns a flat selection. Subselecting via select is similar, but preserves groups and propagates data. Grouping plays an important role in the data join, and functional operators may depend on the numeric index of the current element within its group.</p> <h6 id=\"select\"> selection.<b>select</b>(<i>selector</i>)</h6> <p>For each element in the current selection, selects the first descendant element that matches the specified <em>selector</em> string. If no element matches the specified selector for the current element, the element at the current index will be null in the returned selection; operators (with the exception of <a href=\"selections#data\">data</a>) automatically skip null elements, thereby preserving the index of the existing selection. If the current element has associated data, this data is inherited by the returned subselection, and automatically bound to the newly selected elements. If multiple elements match the selector, only the first matching element in document traversal order will be selected.</p> <p>The <em>selector</em> may also be specified as a function that returns an element, or null if there is no matching element. In this case, the specified <em>selector</em> is invoked in the same manner as other operator functions, being passed the current datum <code>d</code> and index <code>i</code>, with the <code>this</code> context as the current DOM element. </p> <h6 id=\"selectAll\"> selection.<b>selectAll</b>(<i>selector</i>)</h6> <p>For each element in the current selection, selects descendant elements that match the specified <em>selector</em> string. The returned selection is grouped by the ancestor node in the current selection. If no element matches the specified selector for the current element, the group at the current index will be empty in the returned selection. The subselection does not inherit data from the current selection; however, if the <a href=\"selections#data\">data</a> value is specified as a function, this function will be called with the data <code>d</code> of the ancestor node and the group index <code>i</code> to determine the data bindings for the subselection.</p> <p>Grouping by selectAll also affects subsequent entering placeholder nodes. Thus, to specify the parent node when appending entering nodes, use select followed by selectAll:</p> <div class=\"highlight highlight-source-js\"><pre>d3.select(\"body\").selectAll(\"div\")</pre></div> <p>You can see the parent node of each group by inspecting the <code>parentNode</code> property of each group array, such as <code>selection[0].parentNode</code>.</p> <p>The <em>selector</em> may also be specified as a function that returns an array of elements (or a NodeList), or the empty array if there are no matching elements. In this case, the specified <em>selector</em> is invoked in the same manner as other operator functions, being passed the current datum <code>d</code> and index <code>i</code>, with the <code>this</code> context as the current DOM element. </p> <h3> Control</h3> <p>For advanced usage, D3 has a few additional operators for custom control flow.</p> <h6 id=\"each\"> selection.<b>each</b>(<i>function</i>)</h6> <p>Invokes the specified <em>function</em> for each element in the current selection, passing in the current datum <code>d</code> and index <code>i</code>, with the <code>this</code> context of the current DOM element. This operator is used internally by nearly every other operator, and can be used to invoke arbitrary code for each selected element. The each operator can be used to process selections recursively, by using <code>d3.select(this)</code> within the callback function.</p> <h6 id=\"call\"> selection.<b>call</b>(<i>function</i>[, <i>arguments…</i>])</h6> <p>Invokes the specified <em>function</em> once, passing in the current selection along with any optional <em>arguments</em>. The call operator always returns the current selection, regardless of the return value of the specified function. The call operator is identical to invoking a function by hand; but it makes it easier to use method chaining. For example, say we want to set a number of attributes the same way in a number of different places. So we take the code and wrap it in a reusable function:</p> <div class=\"highlight highlight-source-js\"><pre>function foo(selection) {\n  selection\n      .attr(\"name1\", \"value1\")\n      .attr(\"name2\", \"value2\");\n}</pre></div> <p>Now, we can say this:</p> <div class=\"highlight highlight-source-js\"><pre>foo(d3.selectAll(\"div\"));</pre></div> <p>Or equivalently:</p> <div class=\"highlight highlight-source-js\"><pre>d3.selectAll(\"div\").call(foo);</pre></div> <p>The <code>this</code> context of the called function is also the current selection. This is slightly redundant with the first argument, which we might fix in the future.</p> <p>If you use an object's method in selection.call and need <code>this</code> to point to that object you create a function <em>bound</em> to the object before calling.</p> <pre><code>function Foo(text) {\n    this.text = text;\n}\n\nFoo.prototype.setText = function(selection) {\n    selection.text(this.text);\n}\n\nvar bar = new Foo(\"Bar\");\n\nd3.selectAll(\"span\").call(bar.setText.bind(bar));\n// Or\nd3.selectAll(\"span\").call(Foo.prototype.setText.bind(bar));\n</code></pre> <h6 id=\"empty\"> selection.<b>empty</b>()</h6> <p>Returns true if the current selection is empty; a selection is empty if it contains no elements or only null elements.</p> <h6 id=\"node\"> selection.<b>node</b>()</h6> <p>Returns the first non-null element in the current selection. If the selection is empty, returns null.</p> <h6 id=\"size\"> selection.<b>size</b>()</h6> <p>Returns the total number of elements in the current selection.</p> <h3> Extension</h3> <h6 id=\"d3_selection\"> d3.<b>selection</b>()</h6> <p>Returns the root selection, equivalent to <code>d3.select(document.documentElement)</code>. This function can also be used to check if an object is a selection: <code>o instanceof d3.selection</code>. You can also add new methods to the selection prototype. For example, to add a convenience method for setting the \"checked\" property of checkboxes, you might say:</p> <div class=\"highlight highlight-source-js\"><pre>d3.selection.prototype.checked = function(value) {\n  return arguments.length &lt; 1\n      ? this.property(\"checked\")\n      : this.property(\"checked\", value);\n};</pre></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Selections\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Selections</a>\n  </p>\n</div>\n","transitions":"<h1 class=\"gh-header-title instapaper_title\">Transitions</h1>   <p>A transition is a special type of <a class=\"internal present\" href=\"selections\">selection</a> where the operators apply smoothly over time rather than instantaneously. You derive a transition from a selection using the <a class=\"internal present\" href=\"selections#transition\">transition</a> operator. While transitions generally support the same operators as selections (such as <a href=\"transitions#attr\">attr</a> and <a href=\"transitions#style\">style</a>), not all operators are supported; for example, you must append elements before a transition starts. A <a href=\"transitions#remove\">remove</a> operator is provided for convenient removal of elements when the transition ends.</p> <p>Transitions may have per-element delays and durations, computed using functions of data similar to other operators. This makes it easy to stagger a transition for different elements, either based on data or index. For example, you can sort elements and then stagger the transition for better perception of element reordering during the transition. For more details on these techniques, see <a href=\"http://vis.berkeley.edu/papers/animated_transitions/\">\"Animated Transitions in Statistical Data Graphics\"</a> by Heer &amp; Robertson.</p> <p>D3 has many built-in interpolators to simplify the transitioning of arbitrary values. For instance, you can transition from the font string \"500 12px sans-serif\" to \"300 42px sans-serif\", and D3 will find the numbers embedded within the string, interpolating both font size and weight automatically. You can even interpolate arbitrary nested objects and arrays or SVG path data. D3 allows custom interpolators should you find the built-in ones insufficient, using the <a href=\"transitions#attrTween\">attrTween</a> and <a href=\"transitions#styleTween\">styleTween</a> operators. D3's interpolators provide the basis for <a class=\"internal present\" href=\"https://github.com/mbostock/d3/wiki/Scales\">scales</a> and can be used outside of transitions; an interpolator is a function that maps a parametric value <em>t</em> in the domain [0,1] to a color, number or arbitrary value.</p> <p>Multiple transitions may operate on any selection sequentially or in parallel. Sequential transitions on a selection are enabled by chaining transitions using <a href=\"transitions#transition\">transition.transition</a>. Parallel transitions on a selection are enabled by assigning each parallel transition a unique name. Only one transition with a given name may be <em>active</em> on a given element at a given time. However, multiple transitions with the same name may be <em>scheduled</em> on the same element; provided they are staggered in time, each transition will run in sequence. If a newer transition runs on a given element, it implicitly cancels any older transitions with the same name, including any that were scheduled but not yet run. This allows new transitions, such as those in response to a new user event, to supersede older transitions even if those older transitions are staged or have staggered delays. Multi-stage transitions (transitions that are created during the \"end\" event of an earlier transition) are considered the same \"age\" as the original transition; internally this is tracked by monotonically-increasing unique IDs which are inherited when multi-stage transitions are created. To interrupt an in-progress transition, use <a href=\"selections#interrupt\">selection.interrupt</a>.</p> <p>For more on transitions, read the <a href=\"http://bost.ocks.org/mike/transition/\">Working with Transitions</a> tutorial.</p> <h2 id=\"starting-transitions\"> Starting Transitions</h2> <p>Transitions are created using <a href=\"#d3_transition\">d3.transition</a> or <a href=\"selections#transition\">selection.transition</a>. Transitions start automatically upon creation after a <a href=\"#transition_delay\">delay</a>, which defaults to zero. Note, however, that even a zero-delay transition starts asynchronously because it waits one tick (~17ms); the delay between the transition’s creation and its first tick gives you time to configure the transition by overriding default timing parameters and registering tweens. Transitions have a default <a href=\"#transition_duration\">duration</a> of 250ms. </p> <p>If another transition is active on a given element, a new zero-delay transition will <strong>not</strong> immediately (synchronously) interrupt the active transition: the old transition does not get pre-empted until the new transition starts on the subsequent tick, and the old transition is given a final tick. (Within a tick, active transitions are called back in the order they were scheduled.) Thus, the old transition may overwrite attribute or style values that were set synchronously when the new transition was created. Use <a href=\"selections#interrupt\">selection.interrupt</a> to interrupt any active transition and prevent it receiving its final tick.</p> <h6 id=\"d3_transition\"> d3.<b>transition</b>([<i>selection</i>], [<i>name</i>])</h6> <p>Create an animated transition. This is equivalent to <code>d3.select(document).transition()</code>. This method is used rarely, as it is typically easier to derive a transition from an existing selection, rather than deriving a selection from an existing transition. If <em>name</em> is specified, create a transition with the specified name; otherwise, use the empty name (“”).</p> <p>When called with an optional <em>selection</em>, this method typically returns the specified selection; i.e., it is a no-op. However, within the context of <a href=\"#each\">transition.each</a>, this method will create a new transition for the specified selection that inherits the delay, duration and other properties of the parent transition. This is useful for implementing <a href=\"http://bost.ocks.org/mike/chart/\">reusable components</a> that can be called either on selections or on transitions, in the latter case supporting deriving concurrent transitions. An example of this is D3’s <a href=\"svg-axes\">axis component</a>.</p> <h6 id=\"delay\"> transition.<b>delay</b>([<i>delay</i>])</h6> <p>Specifies the transition <em>delay</em> in milliseconds. If <em>delay</em> is a constant, then all elements are given the same delay; otherwise, if <em>delay</em> is a function, then the function is evaluated for each selected element (in order), being passed the current datum <code>d</code> and the current index <code>i</code>, with the <code>this</code> context as the current DOM element. The function's return value is then used to set each element's delay. The default delay is 0. If <em>delay</em> is not specified, returns the delay bound to the first non-null element in the transition.</p> <p>Setting the delay to be a multiple of the index <code>i</code> is a convenient way to stagger transitions for elements. For example, if you used a fixed duration of <em>duration</em>, and have <em>n</em> elements in the current selection, you can stagger the transition over 2 * <em>duration</em> by saying:</p> <div class=\"highlight highlight-source-js\"><pre>.delay(function(d, i) { return i / n * duration; })</pre></div> <p>You may also compute the delay as a function of the data, thereby creating a data-driven animation.</p> <p>Note that a delay is always relative to the <em>first</em> transition in a chain.</p> <h6 id=\"duration\"> transition.<b>duration</b>([<i>duration</i>])</h6> <p>Specifies per-element <em>duration</em> in milliseconds. If <em>duration</em> is a constant, then all elements are given the same duration; otherwise, if <em>duration</em> is a function, then the function is evaluated for each selected element (in order), being passed the current datum <code>d</code> and the current index <code>i</code>, with the <code>this</code> context as the current DOM element. The function's return value is then used to set each element's duration. The default duration is 250ms. If <em>duration</em> is not specified, returns the duration bound to the first non-null element in the transition.</p> <h6 id=\"ease\"> transition.<b>ease</b>([<i>value</i>[, <i>arguments</i>]])</h6> <p>Specifies the transition <a href=\"http://www.robertpenner.com/easing/\">easing function</a>. If <em>value</em> is a function, it is used to ease the current parametric timing value <em>t</em>, which is typically in the range [0,1]. (At the end of a transition, <em>t</em> may be slightly greater than 1.) Otherwise, <em>value</em> is assumed to be a string and the arguments are passed to the <a href=\"transitions#d3_ease\">d3.ease</a> method to generate an easing function. The default easing function is \"cubic-in-out\". Note that it is not possible to customize the easing function per-element or per-attribute; however, if you use the \"linear\" easing function, you can apply custom easing inside your interpolator using <a href=\"transitions#attrTween\">attrTween</a> or <a href=\"transitions#styleTween\">styleTween</a>. If <em>ease</em> is not specified, returns the easing function bound to the first non-null element in the transition.</p> <h2 id=\"operating-on-transitions\"> Operating on Transitions</h2> <h3> Content</h3> <h6 id=\"attr\"> transition.<b>attr</b>(<i>name</i>, <i>value</i>)</h6> <p>Transitions the value of the attribute with the specified <em>name</em> to the specified <em>value</em>. The starting value of the transition is the current attribute value(be sure to set an initial value beforehand if you don't want bad surprises), and the ending value is the specified <em>value</em>. If <em>value</em> is a constant, then all elements are transitioned to the same attribute value; otherwise, if <em>value</em> is a function, then the function is evaluated for each selected element (in order), being passed the current datum <code>d</code> and the current index <code>i</code>, with the <code>this</code> context as the current DOM element. The function's return value is then used to transition each element's attribute. Null values are not supported because the interpolator would be undefined; if you want to remove the attribute after the transition finishes, use <a href=\"transitions#remove\">remove</a>.</p> <p>An interpolator is selected automatically based on the ending value. If the ending value is a number, the starting value is coerced to a number and <a href=\"transitions#d3_interpolateNumber\">interpolateNumber</a> is used. If the ending value is a string, a check is performed to see if the string represents a color of the form <code>/^(#|rgb\\(|hsl\\()/</code>, or one of the <a href=\"http://www.w3.org/TR/SVG/types.html#ColorKeywords\">CSS named colors</a>; if so, the starting value is coerced to an RGB color and <a href=\"transitions#d3_interpolateRgb\">interpolateRgb</a> is used. Otherwise, <a href=\"transitions#d3_interpolateString\">interpolateString</a> is used, which interpolates numbers embedded within strings.</p> <h6 id=\"attrTween\"> transition.<b>attrTween</b>(<i>name</i>, <i>tween</i>)</h6> <p>Transitions the value of the attribute with the specified <em>name</em> according to the specified <em>tween</em> function. The starting and ending value of the transition are determined by <em>tween</em>; the <em>tween</em> function is invoked when the transition starts on each element, being passed the current datum <code>d</code>, the current index <code>i</code> and the current attribute value <code>a</code>, with the <code>this</code> context as the current DOM element. The return value of <em>tween</em> must be an interpolator: a function that maps a parametric value <em>t</em> in the domain [0,1] to a color, number or arbitrary value.</p> <p>For example, the attr operator is built on top of the attrTween operator. The tween function used by the attr operator depends on whether the end value is a function or a constant. If the end value is a function:</p> <div class=\"highlight highlight-source-js\"><pre>function tween(d, i, a) {\n  return d3.interpolate(a, String(value.call(this, d, i)));\n}</pre></div> <p>Otherwise, if the end value is a constant:</p> <div class=\"highlight highlight-source-js\"><pre>function tween(d, i, a) {\n  return d3.interpolate(a, String(value));\n}</pre></div> <p>The attrTween operator is used when you need a custom interpolator, such as one that understands the semantics of SVG path data. One common technique is <em>dataspace interpolation</em>, where <a href=\"transitions#d3_interpolateObject\">interpolateObject</a> is used to interpolate two data values, and the result of this interpolation is then used (say, with a <a class=\"internal present\" href=\"svg-shapes\">shape</a>) to compute the new attribute value. Use the attr operator for the simpler common case where an interpolator can be automatically derived from the current attribute value to the desired end value.</p> <h6 id=\"style\"> transition.<b>style</b>(<i>name</i>, <i>value</i>[, <i>priority</i>])</h6> <p>Transitions the value of the CSS style property with the specified <em>name</em> to the specified <em>value</em>. An optional <em>priority</em> may also be specified, either as null or the string \"important\" (without the exclamation point). The starting value of the transition is the current computed style property value, and the ending value is the specified <em>value</em>. If <em>value</em> is a constant, then all elements are transitioned to the same style property value; otherwise, if <em>value</em> is a function, then the function is evaluated for each selected element (in order), being passed the current datum <code>d</code> and the current index <code>i</code>, with the <code>this</code> context as the current DOM element. The function's return value is then used to transition each element's style property. Null values are not supported because the interpolator would be undefined; if you want to remove the style property after the transition finishes, listen to the <a href=\"transitions#each\">end</a> event.</p> <p>An interpolator is selected automatically based on the ending value. If the ending value is a number, the starting value is coerced to a number and <a href=\"transitions#d3_interpolateNumber\">interpolateNumber</a> is used. If the ending value is a string, a check is performed to see if the string represents a color of the form <code>/^(#|rgb\\(|hsl\\()/</code>, or one of the <a href=\"http://www.w3.org/TR/SVG/types.html#ColorKeywords\">CSS named colors</a>; if so, the starting value is coerced to an RGB color and <a href=\"transitions#d3_interpolateRgb\">interpolateRgb</a> is used. Otherwise, <a href=\"transitions#d3_interpolateString\">interpolateString</a> is used, which interpolates numbers embedded within strings.</p> <p>Note that the computed starting value may be different than the value that was previously set, particularly if the style property was set using a shorthand property (such as the \"font\" style, which is shorthand for \"font-size\", \"font-face\", etc.). Moreover, computed dimensions such as \"font-size\" and \"line-height\" are always in pixels, so you should specify the ending value in pixels too if appropriate.</p> <h6 id=\"styleTween\"> transition.<b>styleTween</b>(<i>name</i>, <i>tween</i>[, <i>priority</i>])</h6> <p>Transitions the value of the CSS style property with the specified <em>name</em> according to the specified <em>tween</em> function. An optional <em>priority</em> may also be specified, either as null or the string \"important\" (without the exclamation point). The starting and ending value of the transition are determined by <em>tween</em>; the <em>tween</em> function is invoked when the transition starts on each element, being passed the current datum <code>d</code>, the current index <code>i</code> and the current attribute value <code>a</code>, with the <code>this</code> context as the current DOM element. The return value of <em>tween</em> must be an interpolator: a function that maps a parametric value <em>t</em> in the domain [0,1] to a color, number or arbitrary value.</p> <p>For example, the style operator is built on top of the styleTween operator. The tween function used by the style operator depends on whether the end value is a function or a constant. If the end value is a function:</p> <div class=\"highlight highlight-source-js\"><pre>function tween(d, i, a) {\n  return d3.interpolate(a, String(value.call(this, d, i)));\n}</pre></div> <p>Otherwise, if the end value is a constant:</p> <div class=\"highlight highlight-source-js\"><pre>function tween(d, i, a) {\n  return d3.interpolate(a, String(value));\n}</pre></div> <p>The styleTween operator is used when you need a custom interpolator, such as one that understands the semantics of CSS3 transforms. Use the style operator for the simpler common case where an interpolator can be automatically derived from the current computed style property value to the desired end value.</p> <h6 id=\"text\"> transition.<b>text</b>(<i>value</i>)</h6> <p>The <code>text</code> operator is based on the <a href=\"http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-textContent\">textContent</a> property; setting the text content will replace any existing child elements.</p> <p>Set the text content to the specified value on all selected elements when the transition starts. If <em>value</em> is a constant, then all elements are given the same text content; otherwise, if <em>value</em> is a function, then the function is evaluated for each selected element (in order), being passed the current datum <code>d</code> and the current index <code>i</code>, with the <code>this</code> context as the current DOM element. The function's return value is then used to set each element's text content. A null value will clear the content.</p> <h6 id=\"tween\"> transition.<b>tween</b>(<i>name</i>, <i>factory</i>)</h6> <p>Registers a custom tween for the specified <em>name</em>. When the transition starts, the specified <em>factory</em> function will be invoked for each selected element in the transition, being passed that element's data (<em>d</em>) and index (<em>i</em>) as arguments, with the element as the context (<code>this</code>). The factory should return the tween function to be called over the course of the transition. The tween function is then called repeatedly, being passed the current normalized time <em>t</em> in [0, 1]. If the factory returns null, then the tween is not run on the selected element.</p> <p>The tween method is used internally to implement <a href=\"#attr\">attr</a> and <a href=\"#style\">style</a> tweens, and can be used to interpolate other document content. For example, to interpolate text content from 0 to 100:</p> <div class=\"highlight highlight-source-js\"><pre>selection.transition().tween(\"text\", function() {\n  var i = d3.interpolateRound(0, 100);\n  return function(t) {\n    this.textContent = i(t);\n  };\n});</pre></div> <p>Tweens are often written using closures to capture state created when the transition starts. In the example above, the interpolator <code>i</code> is initialized when the transition starts, and then used subsequently over the course of the transition. (Though note that in the above example, the starting value of the transition is hard-coded to zero, whereas more commonly the starting value of the transition is based on the current state in the DOM.)</p> <h6 id=\"remove\"> transition.<b>remove</b>()</h6> <p>Remove the selected elements at the end of a transition. If a newer transition is scheduled on any of the selected elements, these elements will not be removed; however, the \"end\" event will still be dispatched.</p> <h3> Subtransitions</h3> <p>Transitions may be derived from existing transitions, in a similar manner to subselections. Subtransitions inherit easing, duration and delay from the parent transition.</p> <h6 id=\"select\"> transition.<b>select</b>(<i>selector</i>)</h6> <p>For each element in the current transition, selects the first descendant element that matches the specified <em>selector</em> string. If no element matches the specified selector for the current element, the element at the current index will be null in the returned selection; operators (with the exception of <a href=\"transitions#data\">data</a>) automatically skip null elements, thereby preserving the index of the existing selection. If the current element has associated data, this data is inherited by the returned subselection, and automatically bound to the newly selected elements. If multiple elements match the selector, only the first matching element in document traversal order will be selected.</p> <p>This method is approximately equivalent to:</p> <div class=\"highlight highlight-source-js\"><pre>selection.select(selector).transition()</pre></div> <p>where <em>selection</em> is the current transition's underlying selection. In addition, the returned new transition inherits easing, duration and delay from the current transition.</p> <h6 id=\"selectAll\"> transition.<b>selectAll</b>(<i>selector</i>)</h6> <p>For each element in the current transition, selects descendant elements that match the specified <em>selector</em> string. The returned selection is grouped by the ancestor node in the current selection. If no element matches the specified selector for the current element, the group at the current index will be empty in the returned selection. The subselection does not inherit data from the current selection; however, if data was previously bound to the selected elements, that data will be available to operators.</p> <p>This method is approximately equivalent to:</p> <div class=\"highlight highlight-source-js\"><pre>selection.selectAll(selector).transition()</pre></div> <p>where <em>selection</em> is the current transition's underlying selection. In addition, the returned new transition inherits easing, duration and delay from the current transition. The duration and delay for each subelement is inherited from the duration and delay of the parent element in the current transition.</p> <h6 id=\"filter\"> transition.<b>filter</b>(<i>selector</i>)</h6> <p>Filters the transition, returning a new transition that contains only the elements for which the specified <em>selector</em> is true. The <em>selector</em> may be specified either as a function or as a selector string, such as \".foo\". As with other operators, the function is passed the current datum <code>d</code> and index <code>i</code>, with the <code>this</code> context as the current DOM element. Like the built-in array <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Filter\">filter</a> method, the returned selection <em>does not</em> preserve the index of the original selection; it returns a copy with elements removed. If you want to preserve the index, use <a href=\"#select\">select</a> instead. For example, to select every other element:</p> <div class=\"highlight highlight-source-js\"><pre>var odds = transition.select(function(d, i) { return i &amp; 1 ? this : null; });</pre></div> <p>Equivalently, using a filter function:</p> <div class=\"highlight highlight-source-js\"><pre>var odds = transition.filter(function(d, i) { return i &amp; 1; });</pre></div> <p>Or a filter selector:</p> <div class=\"highlight highlight-source-js\"><pre>var odds = transition.filter(\":nth-child(odd)\");</pre></div> <p>Thus, you can use either select or filter to apply tweens to a subset of elements.</p> <h6 id=\"transition\"> transition.<b>transition</b>()</h6> <p>Creates a new transition on the same selected elements that starts when this transition ends. The new transition inherits a delay equal to this transition's delay + duration to control this timing. The new transition also inherits this transition’s name, duration, and easing. This can be used to define <a href=\"http://bl.ocks.org/mbostock/4341417\">chained transitions</a> without needing to listen for \"end\" events.</p> <p>As described above, the delay state of chained transitions is used as a scaffold for the chain. This means that the delay method will have unexpected behaviour in this context, however, if you want to add a delay between chained transitions, an easy way to do this is to have a no-op transition in between:</p> <div class=\"highlight highlight-source-js\"><pre>selection.transition() // this transition runs from t=1s to t=3s\n    .delay(1000)\n    .duration(2000)\n  .transition() // then a delay from t=3s to t=4s\n    .duration(1000)\n  .transition() // then lastly another transition from t=4s to t=5s</pre></div> <p>Though, note that the last transition in this chain inherits the 1s duration from the interstitial pause, and not the 2s duration from the first transition.</p> <h3> Control</h3> <h6 id=\"each\"> transition.<b>each</b>([<i>type</i>, ]<i>listener</i>)</h6> <p>If <i>type</i> is specified, adds a listener for transition events, supporting \"start\", \"end\" and \"interrupt\" events. The listener will be invoked for each individual element in the transition.</p> <p>The <em>start</em> event is invoked during the first asynchronous callback (tick) of the transition, before any tweens are invoked. For transitions with zero delay, this is typically about 17ms after the transition is scheduled. State events are useful for triggering instantaneous changes to each element, such as changing attributes that cannot be interpolated.</p> <p>The <em>end</em> event is invoked during the last asynchronous callback (tick) after the transition duration and delay expires, after all tweens are invoked with t=1. Note that if the transition is superseded by a later-scheduled transition on a given element, no end event will be dispatched for that element; interrupted transitions do not trigger end events. For example, <a href=\"#remove\">transition.remove</a> schedules each element to be removed when the transition ends, but if the transition is interrupted, the element will not be removed. End events can be used as an alternative to <a href=\"#transition\">transition.transition</a> to create <a href=\"http://bl.ocks.org/mbostock/1125997\">chained transitions</a> by selecting the current element, <code>this</code>, and deriving a new transition; however, this can lead to clock drift over time and thus transition.transition should be preferred.</p> <p>The <em>interrupt</em> event is invoked if an active transition is interrupted by another transition of the same name on the same element. The interrupt event is dispatched on the interrupted transition immediately prior to the start event on the interrupting transition. Note that if a transition is cancelled before it starts (such as when a later-scheduled transition starts before a delayed transition), no interrupt event is dispatched.</p> <p>If <i>type</i> is not specified, behaves similarly to <a href=\"selections#each\">selection.each</a>: immediately invokes the specified <em>function</em> for each element in the current transition, passing in the current datum <code>d</code> and index <code>i</code>, with the <code>this</code> context of the current DOM element. Any transitions created within the scope of transition.each will inherit transition parameters from the parent transition, including id, delay, duration and easing. Thus, transitions created within a transition.each will not interrupt the parent transition, similar to <a href=\"#transition\">subtransitions</a>.</p> <p>The transition.each method can be used to chain transitions and apply shared timing across a set of transitions. For example:</p> <div class=\"highlight highlight-source-js\"><pre>d3.transition()\n    .duration(750)\n    .ease(\"linear\")\n    .each(function() {\n      d3.selectAll(\".foo\").transition()\n         .style(\"opacity\", 0)\n         .remove();\n    })\n  .transition()\n    .each(function() {\n      d3.selectAll(\".bar\").transition()\n        .style(\"opacity\", 0)\n        .remove();\n    });</pre></div> <p>By using <code>d3.select(this)</code> within transition.each, you can even inherit staggered delay across a set of selected elements. This technique is used by the <a href=\"svg-axes\">Axis component</a> to support <a href=\"http://bl.ocks.org/mbostock/1166403\">automatic transitions</a>.</p> <p>See also the <a href=\"http://bl.ocks.org/mbostock/5779690\">Exit, Update, Enter</a> example.</p> <h6 id=\"call\"> transition.<b>call</b>(<i>function</i>[, <i>arguments…</i>])</h6> <p>Invokes the specified <em>function</em> once, passing in the current transition along with any optional <em>arguments</em>. The call operator always returns the current transition, regardless of the return value of the specified function. The call operator is identical to invoking a function by hand; but it makes it easier to use method chaining. For example, say we want to set a number of attributes the same way in a number of different places. So we take the code and wrap it in a reusable function:</p> <div class=\"highlight highlight-source-js\"><pre>function foo(transition) {\n  transition\n      .attr(\"name1\", \"value1\")\n      .attr(\"name2\", \"value2\");\n}</pre></div> <p>Now, we can say this:</p> <div class=\"highlight highlight-source-js\"><pre>foo(d3.selectAll(\"div\").transition())</pre></div> <p>Or equivalently:</p> <div class=\"highlight highlight-source-js\"><pre>d3.selectAll(\"div\").transition().call(foo);</pre></div> <p>In many cases, it is possible to call the same function <em>foo</em> on both transitions and selections, due to identical methods on both selections and transitions! The <code>this</code> context of the called function is also the current transition. This is slightly redundant with the first argument, which we might fix in the future.</p> <h6 id=\"empty\"> transition.<b>empty</b>()</h6> <p>Returns true if the current transition is empty; a transition is empty if it contains no non-null elements.</p> <h6 id=\"node\"> transition.<b>node</b>()</h6> <p>Returns the first non-null element in the current transition. If the transition is empty, returns null.</p> <h6 id=\"size\"> transition.<b>size</b>()</h6> <p>Returns the total number of elements in the current transition.</p> <h2 id=\"easing\"> Easing</h2> <h6 id=\"d3_ease\"> d3.<b>ease</b>(<i>type</i>[, <i>arguments…</i>])</h6> <p>Returns a built-in easing function of the specified <em>type</em>, with any optional <em>arguments</em>. An easing function takes the current parameterized time value <em>t</em> in the domain [0,1], and maps it to another value in a similar range; it is typically used to set transition <a href=\"transitions#ease\">easing</a>. The following easing types are supported:</p> <ul> <li>linear - the identity function, <em>t</em>.</li> <li>poly(k) - raises <em>t</em> to the specified power <em>k</em> (e.g., 3).</li> <li>quad - equivalent to poly(2).</li> <li>cubic - equivalent to poly(3).</li> <li>sin - applies the trigonometric function <em>sin</em>.</li> <li>exp - raises 2 to a power based on <em>t</em>.</li> <li>circle - the quarter circle.</li> <li>elastic(a, p) - simulates an elastic band; may extend slightly beyond 0 and 1.</li> <li>back(s) - simulates backing into a parking space.</li> <li>bounce - simulates a bouncy collision.</li> </ul> <p>These built-in types may be extended using a variety of modes:</p> <ul> <li>in - the identity function.</li> <li>out - reverses the easing direction to [1,0].</li> <li>in-out - copies and mirrors the easing function from [0,.5] and [.5,1].</li> <li>out-in - copies and mirrors the easing function from [1,.5] and [.5,0].</li> </ul> <p>The default easing function is \"cubic-in-out\" which provides suitable <a href=\"http://en.wikipedia.org/wiki/12_basic_principles_of_animation#Slow_In_and_Slow_Out\">slow-in slow-out</a> animation.</p> <h6 id=\"_ease\"> <b>ease</b>(<i>t</i>)</h6> <p>Given a parametric time <em>t</em>, typically in the range [0,1], returns the eased time. The returned value is typically in the range [0,1] as well, but may extend slightly beyond this range for certain easing functions, such as \"elastic\".</p> <h2 id=\"timers\"> Timers</h2> <p>D3 internally maintains an efficient timer queue so that thousands of timers can be processed concurrently with minimal overhead; in addition, this timer queue guarantees consistent timing of animations when concurrent or staged transitions are scheduled. If your browser supports it, the timer queue will use <a href=\"http://paulirish.com/2011/requestanimationframe-for-smart-animating/\">requestAnimationFrame</a> for fluid and efficient animation. The timer queue is also smart about using setTimeout when there is a long delay before the next scheduled event.</p> <h6 id=\"d3_timer\"> d3.<b>timer</b>(<i>function</i>[, <i>delay</i>[, <i>time</i>]])</h6> <p>Start a custom animation timer, invoking the specified <em>function</em> repeatedly until it returns true. There is no way to cancel the timer after it starts, so make sure your timer function returns true when done! The <em>function</em> is passed the time elapsed in milliseconds since the timer started.</p> <p>An optional numeric <em>delay</em> in milliseconds may be specified when the given <em>function</em> should only be invoked after a delay. The delay is relative to the specified <em>time</em> in milliseconds since UNIX epoch; if <em>time</em> is not specified, it defaults to <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/now\">Date.now</a>.</p> <p>You may use <em>delay</em> and <em>time</em> to specify relative and absolute moments in time when the <em>function</em> should start being invoked. For example, a calendar notification might be coded as:</p> <div class=\"highlight highlight-source-js\"><pre>d3.timer(notify, -4 * 1000 * 60 * 60, +new Date(2012, 09, 29)); // four hours before midnight October 29 (months are zero-based)</pre></div> <p>Note that if d3.timer is called within the callback of another timer, the new timer will be invoked immediately at the end of the current frame (if active as determined by the specified <em>delay</em> and <em>time</em>), rather than waiting until the next frame.</p> <h6 id=\"d3_timer_flush\"> d3.timer.<b>flush</b>()</h6> <p>Immediately execute (invoke once) any active timers. Normally, zero-delay transitions are executed after an instantaneous delay (&lt;10ms). This can cause a brief flicker if the browser renders the page twice: once at the end of the first event loop, then again immediately on the first timer callback. By flushing the timer queue at the end of the first event loop, you can run any zero-delay transitions immediately and avoid the flicker.</p> <h2 id=\"interpolation\"> Interpolation</h2> <p>D3 has many built-in interpolators to simplify the transitioning of arbitrary values; an interpolator is a function that maps a parametric value <em>t</em> in the domain [0,1] to a color, number or arbitrary value.</p> <h6 id=\"d3_interpolate\"> d3.<b>interpolate</b>(<i>a</i>, <i>b</i>)</h6> <p>Returns the default interpolator between the two values <em>a</em> and <em>b</em>. The type of interpolator is based on the type of the end value <em>b</em>, using the following algorithm:</p> <ol> <li>If <em>b</em> is a color, interpolateRgb is used.</li> <li>If <em>b</em> is a string, interpolateString is used.</li> <li>If <em>b</em> is an array, interpolateArray is used.</li> <li>If <em>b</em> is an object and not coercible to a number, interpolateObject is used.</li> <li>Otherwise, interpolateNumber is used.</li> </ol> <p>Based on the chosen interpolator, <em>a</em> is coerced to a suitable corresponding type. The color check applies to both instances of <a href=\"colors#d3_rgb\">d3.rgb</a> and other color spaces as well as color strings of the form <code>/^(#|rgb\\(|hsl\\()/</code> or a <a href=\"http://www.w3.org/TR/SVG/types.html#ColorKeywords\">CSS named colors</a>.</p> <p>The behavior of this default interpolator may be extended to support additional types by pushing custom interpolators onto the <a href=\"#d3_interpolators\">d3.interpolators</a> array.</p> <h6 id=\"_interpolate\"> <b>interpolate</b>(<i>t</i>)</h6> <p>Given a parameter <em>t</em> typically in the range [0,1], returns the associated interpolation value. Interpolators are commonly used in conjunction with scales to map an input domain (such as a quantitative dimension) to an output range (such as a range of colors or pixel positions).</p> <h6 id=\"d3_interpolateNumber\"> d3.<b>interpolateNumber</b>(<i>a</i>, <i>b</i>)</h6> <p>Returns a numeric interpolator between the two numbers <em>a</em> and <em>b</em>. The returned interpolator is equivalent to:</p> <div class=\"highlight highlight-source-js\"><pre>function interpolate(t) {\n  return a * (1 - t) + b * t;\n}</pre></div> <p>Caution: avoid interpolating to or from the number zero when the interpolator is used to generate a string (such as with <a href=\"transitions#attr\">attr</a>). Very small values, when stringified, may be converted to scientific notation and cause a temporarily invalid attribute or style property value. For example, the number 0.0000001 is converted to the string \"1e-7\". This is particularly noticeable when interpolating opacity values. To avoid scientific notation, start or end the transition at 1e-6, which is the smallest value that is not stringified in exponential notation.</p> <h6 id=\"d3_interpolateRound\"> d3.<b>interpolateRound</b>(<i>a</i>, <i>b</i>)</h6> <p>Returns a numeric interpolator between the two numbers <em>a</em> and <em>b</em>; the interpolator is similar to <a href=\"transitions#d3_interpolateNumber\">interpolateNumber</a>, except it will round the resulting value to the nearest integer.</p> <h6 id=\"d3_interpolateString\"> d3.<b>interpolateString</b>(<i>a</i>, <i>b</i>)</h6> <p>Returns a string interpolator between the two strings <em>a</em> and <em>b</em>. The string interpolator finds numbers embedded in <em>a</em> and <em>b</em>, where each number is of the form:</p> <pre><code>/[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g\n</code></pre> <p>For each number embedded in <em>b</em>, the interpolator will attempt to find a corresponding number in <em>a</em>. If a corresponding number is found, a numeric interpolator is created using <a href=\"transitions#d3_interpolateNumber\">interpolateNumber</a>. The remaining parts of the string <em>b</em> are used as a template: the static parts of the string <em>b</em> remain constant for the interpolation, with the interpolated numeric values embedded in the template. For example, if <em>a</em> is \"300 12px sans-serif\", and <em>b</em> is \"500 36px Comic-Sans\", two embedded numbers are found. The remaining static parts of the string are a space between the two numbers (\" \"), and the suffix (\"px Comic-Sans\"). The result of the interpolator at <em>t</em> = .5 is \"400 24px Comic-Sans\".</p> <h6 id=\"d3_interpolateRgb\"> d3.<b>interpolateRgb</b>(<i>a</i>, <i>b</i>)</h6> <p>Returns an RGB color space interpolator between the two colors <em>a</em> and <em>b</em>. The colors <em>a</em> and <em>b</em> need not be in RGB, but they will be converted to RGB using <a href=\"colors#d3_rgb\">d3.rgb</a>. The red, green and blue channels are interpolated linearly in a manner equivalent to <a href=\"transitions#d3_interpolateRound\">interpolateRound</a>, as fractional channel values are not allowed. The return value of the interpolator is a hexadecimal RGB string.</p> <h6 id=\"d3_interpolateHsl\"> d3.<b>interpolateHsl</b>(<i>a</i>, <i>b</i>)</h6> <p>Returns an HSL color space interpolator between the two colors <em>a</em> and <em>b</em>. The colors <em>a</em> and <em>b</em> need not be in HSL, but they will be converted to HSL using <a class=\"internal present\" href=\"colors#d3_hsl\">d3.hsl</a>. The hue, saturation and lightness are interpolated linearly in a manner equivalent to <a href=\"transitions#d3_interpolateNumber\">interpolateNumber</a>. (The shortest path between the start and end hue is used.) The return value of the interpolator is a hexadecimal RGB string.</p> <h6 id=\"d3_interpolateLab\"> d3.<b>interpolateLab</b>(<i>a</i>, <i>b</i>)</h6> <p>Returns a L*a*b* color space interpolator between the two colors <em>a</em> and <em>b</em>. The colors <em>a</em> and <em>b</em> will be converted to L*a*\\b* if necessary using <a class=\"internal present\" href=\"colors#d3_lab\">d3.lab</a>. The color channels are then interpolated linearly in a manner equivalent to <a href=\"transitions#d3_interpolateNumber\">interpolateNumber</a>. The return value of the interpolator is a hexadecimal RGB string.</p> <h6 id=\"d3_interpolateHcl\"> d3.<b>interpolateHcl</b>(<i>a</i>, <i>b</i>)</h6> <p>Returns an HCL color space interpolator between the two colors <em>a</em> and <em>b</em>. The colors <em>a</em> and <em>b</em> will be converted to HCL if necessary using <a class=\"internal present\" href=\"colors#d3_hcl\">d3.hcl</a>. The color channels are then interpolated linearly in a manner equivalent to <a href=\"transitions#d3_interpolateNumber\">interpolateNumber</a>. (The shortest path between the start and end hue is used.) The return value of the interpolator is a hexadecimal RGB string.</p> <h6 id=\"d3_interpolateArray\"> d3.<b>interpolateArray</b>(<i>a</i>, <i>b</i>)</h6> <p>Returns an array interpolator between the two arrays <em>a</em> and <em>b</em>. Internally, an array template is created that is the same length in <em>b</em>. For each element in <em>b</em>, if there exists a corresponding element in <em>a</em>, a generic interpolator is created for the two elements using <a href=\"transitions#d3_interpolate\">interpolate</a>. If there is no such element, the static value from <em>b</em> is used in the template. Then, for the given parameter <em>t</em>, the template's embedded interpolators are evaluated. The updated array template is then returned. For example, if <em>a</em> is the array [0, 1] and <em>b</em> is the array [1, 10, 100], then the result of the interpolator for <em>t</em> = .5 is the array [.5, 5.5, 100].</p> <p>Note: no defensive copy of the template array is created; modifications of the returned array may adversely affect subsequent evaluation of the interpolator. No copy is made because interpolators should be fast, as they are part of the inner loop of animation.</p> <h6 id=\"d3_interpolateObject\"> d3.<b>interpolateObject</b>(<i>a</i>, <i>b</i>)</h6> <p>Returns an object interpolator between the two objects <em>a</em> and <em>b</em>. Internally, an object template is created that has the same properties as <em>b</em>. For each property in <em>b</em>, if there exists a corresponding property in <em>a</em>, a generic interpolator is created for the two elements using <a href=\"transitions#d3_interpolate\">interpolate</a>. If there is no such property, the static value from <em>b</em> is used in the template. Then, for the given parameter <em>t</em>, the template's embedded interpolators are evaluated and the updated object template is then returned. For example, if <em>a</em> is the object {x: 0, y: 1} and <em>b</em> is the object {x: 1, y: 10, z: 100}, the result of the interpolator for <em>t</em> = .5 is the object {x: .5, y: 5.5, z: 100}.</p> <p>Object interpolation is particularly useful for <em>dataspace interpolation</em>, where data is interpolated rather than attribute values. For example, you can interpolate an object which describes an arc in a pie chart, and then use <a class=\"internal present\" href=\"svg-shapes#arc\">d3.svg.arc</a> to compute the new SVG path data.</p> <p>Note: no defensive copy of the template object is created; modifications of the returned object may adversely affect subsequent evaluation of the interpolator. No copy is made because interpolators should be fast, as they are part of the inner loop of animation.</p> <h6 id=\"d3_interpolateTransform\"> d3.<b>interpolateTransform</b>(<i>a</i>, <i>b</i>)</h6> <p>Returns an interpolator between the two 2D affine <a href=\"math#transform\">transforms</a> represented by <em>a</em> and <em>b</em>. Each transform is decomposed to a standard representation of translate, rotate, <em>x</em>-skew and scale; these component transformations are then interpolated. This behavior is standardized by CSS: see <a href=\"http://www.w3.org/TR/css3-2d-transforms/#matrix-decomposition\">matrix decomposition for animation</a>.</p> <h6 id=\"d3_interpolateZoom\"> d3.<b>interpolateZoom</b>(<i>a</i>, <i>b</i>)</h6> <p>Returns a smooth <a href=\"#_interpolate\">interpolator</a> between the two views <em>a</em> and <em>b</em> of a two-dimensional plane, based on <a href=\"https://www.google.com/search?q=Smooth+and+efficient+zooming+and+panning\">“Smooth and efficient zooming and panning”</a> by Jarke J. van Wijk and Wim A.A. Nuij. Each view is defined as an array of three numbers: <em>cx</em>, <em>cy</em> and <em>width</em>. The first two coordinates <em>cx</em>, <em>cy</em> represent the center of the viewport; the last coordinate <em>width</em> represents the size of the viewport. The returned interpolator also has a <em>duration</em> property which encodes the recommended transition duration in milliseconds. This duration is based on the path length of the curved trajectory through <em>x,y</em> space. If you want to a slower or faster transition, multiply this by an arbitrary scale factor (<i>V</i> as described in the original paper).</p> <h6 id=\"interpolate\"> d3.geo.<b>interpolate</b>(<i>a</i>, <i>b</i>)</h6> <p>See <a href=\"geo-paths#interpolate\">d3.geo.interpolate</a>.</p> <h6 id=\"d3_interpolators\"> d3.<b>interpolators</b>\n</h6> <p>The array of built-in interpolator factories, as used by <a href=\"transitions#d3_interpolate\">d3.interpolate</a>. Additional interpolator factories may be pushed onto the end of this array. Each factory may return an interpolator, if it supports interpolating the two specified input values; otherwise, the factory should return a falsey value and other interpolators will be tried.</p> <p>For example, to register a custom interpolator that formats dollars and cents, you might say:</p> <div class=\"highlight highlight-source-js\"><pre>d3.interpolators.push(function(a, b) {\n  var re = /^\\$([0-9,.]+)$/, ma, mb, f = d3.format(\",.02f\");\n  if ((ma = re.exec(a)) &amp;&amp; (mb = re.exec(b))) {\n    a = parseFloat(ma[1]);\n    b = parseFloat(mb[1]) - a;\n    return function(t) {\n      return \"$\" + f(a + b * t);\n    };\n  }\n});</pre></div> <p>Then, <code>d3.interpolate(\"$20\", \"$10\")(1/3)</code> returns <code>$16.67</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/Transitions\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/Transitions</a>\n  </p>\n</div>\n","svg-shapes":"<h1 class=\"gh-header-title instapaper_title\">SVG Shapes</h1>   <p>SVG has a number of built-in simple shapes, such as axis-aligned rectangles and circles. For greater flexibility, you can use SVG's <a href=\"http://www.w3.org/TR/SVG/paths.html#PathElement\">path</a> element in conjunction with D3's path data generators.</p> <p>A shape generator, such as that returned by <a href=\"svg-shapes#arc\">d3.svg.arc</a>, is both an object and a function. That is: you can call the shape like any other function, and the shape has additional methods that change its behavior. Like other classes in D3, shapes follow the method chaining pattern where setter methods return the shape itself, allowing multiple setters to be invoked in a concise statement.</p> <h2 id=\"svg-elements\"> SVG Elements</h2> <p>All SVG shapes can be transformed using the <a href=\"http://www.w3.org/TR/SVG/coords.html#TransformAttribute\">transform</a> attribute. You can apply the transform either to the shape directly, or to a containing <a href=\"http://www.w3.org/TR/SVG/struct.html#Groups\">g</a> element. Thus, when a shape is defined as \"axis-aligned\", that merely means axis-aligned within the local coordinate system; you can still rotate and otherwise transform the shape. Shapes can be filled and stroked using the <a href=\"http://www.w3.org/TR/SVG/painting.html#FillProperties\">fill</a> and <a href=\"http://www.w3.org/TR/SVG/painting.html#StrokeProperties\">stroke</a> styles. (You can also use the attributes of the same name, but styles are recommended as they are compatible with external stylesheets.)</p> <h6 id=\"svg_rect\"> svg:<b>rect</b> x=\"0\" y=\"0\" width=\"0\" height=\"0\" rx=\"0\" ry=\"0\"</h6> <p>The <a href=\"http://www.w3.org/TR/SVG/shapes.html#RectElement\">rect</a> element defines an axis-aligned rectangle. The top-left corner of the rectangle is positioned using the <em>x</em> and <em>y</em> attributes, while its size is specified using <em>width</em> and <em>height</em>. A rounded rectangle can be produced using the optional <em>rx</em> and <em>ry</em> attributes.</p> <h6 id=\"svg_circle\"> svg:<b>circle</b> cx=\"0\" cy=\"0\" r=\"0\"</h6> <p>The <a href=\"http://www.w3.org/TR/SVG/shapes.html#CircleElement\">circle</a> element defines a circle based on a center point and a radius. The center is positioned using the <em>cx</em> and <em>cy</em> attributes, while the radius is specified using the <em>r</em> attribute.</p> <h6 id=\"svg_ellipse\"> svg:<b>ellipse</b> cx=\"0\" cy=\"0\" rx=\"0\" ry=\"0\"</h6> <p>The <a href=\"http://www.w3.org/TR/SVG/shapes.html#EllipseElement\">ellipse</a> element defines an axis-aligned ellipse based on a center point and two radii. The center is positioned using the <em>cx</em> and <em>cy</em> attributes, while the radii are specified using the <em>rx</em> and <em>ry</em> attributes.</p> <h6 id=\"svg_line\"> svg:<b>line</b> x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\"</h6> <p>The <a href=\"http://www.w3.org/TR/SVG/shapes.html#LineElement\">line</a> element defines a line segment that starts at one point and ends at another. The first point is specified using the <em>x1</em> and <em>y1</em> attributes, while the second point is specified using the <em>x2</em> and <em>y2</em> attributes. The line element is a popular choice for drawing rules, reference lines, axes and tick marks.</p> <h6 id=\"svg_polyline\"> svg:<b>polyline</b> points=\"\"</h6> <p>The <a href=\"http://www.w3.org/TR/SVG/shapes.html#PolylineElement\">polyline</a> element defines a set of connected straight line segments. Typically, polyline elements define open shapes. The points that make up the polyline are specified using the <em>points</em> attribute. Note: in D3, it is typically more convenient and flexible to use the <a href=\"svg-shapes#line\">d3.svg.line</a> path generator in conjunction with a path element.</p> <h6 id=\"svg_polygon\"> svg:<b>polygon</b> points=\"\"</h6> <p>The <a href=\"http://www.w3.org/TR/SVG/shapes.html#PolygonElement\">polygon</a> element defines a closed shape consisting of a set of connected straight line segments. The points that make up the polygon are specified using the <em>points</em> attribute. Note: in D3, it is typically more convenient and flexible to use the <a href=\"svg-shapes#line\">d3.svg.line</a> path generator in conjunction with a path element. The line can be closed using the <a href=\"http://www.w3.org/TR/SVG/paths.html#PathDataClosePathCommand\">closepath</a> \"Z\" command.</p> <h6 id=\"svg_text\"> svg:<b>text</b> x=\"0\" y=\"0\" dx=\"0\" dy=\"0\" text-anchor=\"start\"</h6> <p>The <a href=\"http://www.w3.org/TR/SVG/text.html#TextElement\">text</a> element defines a graphics element consisting of text. The text content of the text element (see the <a class=\"internal present\" href=\"selections#text\">text</a> operator) define the characters to be rendered. The anchor position of the text element is controlled using the <em>x</em> and <em>y</em> attributes; additionally, the text can be offset from the anchor using <em>dx</em> and <em>dy</em> attributes. This offset is particularly convenient for controlling the text margin and baseline, as you can use \"em\" units which are relative to the font size. The horizontal text alignment is controlling using the <em>text-anchor</em> attribute. Here are a few examples:</p> <div class=\"highlight highlight-text-xml\"><pre>&lt;svg:text text-anchor=\"start\"&gt;left-align, bottom-baseline&lt;/svg:text&gt;\n&lt;svg:text text-anchor=\"middle\"&gt;center-align, bottom-baseline&lt;/svg:text&gt;\n&lt;svg:text text-anchor=\"end\"&gt;right-align, bottom-baseline&lt;/svg:text&gt;\n&lt;svg:text dy=\".35em\" text-anchor=\"start\"&gt;left-align, middle-baseline&lt;/svg:text&gt;\n&lt;svg:text dy=\".35em\" text-anchor=\"middle\"&gt;center-align, middle-baseline&lt;/svg:text&gt;\n&lt;svg:text dy=\".35em\" text-anchor=\"end\"&gt;right-align, middle-baseline&lt;/svg:text&gt;\n&lt;svg:text dy=\".71em\" text-anchor=\"start\"&gt;left-align, top-baseline&lt;/svg:text&gt;\n&lt;svg:text dy=\".71em\" text-anchor=\"middle\"&gt;center-align, top-baseline&lt;/svg:text&gt;\n&lt;svg:text dy=\".71em\" text-anchor=\"end\"&gt;right-align, top-baseline&lt;/svg:text&gt;</pre></div> <p>It's possible that there is a better way to specify the text baseline using SVG's <a href=\"http://www.w3.org/TR/SVG/text.html#BaselineAlignmentProperties\">baseline alignment properties</a>, but these don't seem to be widely supported by browsers. Lastly, the font color is typically specified using the <em>fill</em> style (you can also use <em>stroke</em>), and the font is controlled using the <em>font</em>, <em>font-family</em>, <em>font-size</em> and related styles. Some browsers also support CSS3 properties, such as <em>text-shadow</em>.</p> <h6 id=\"svg_path\"> svg:<b>path</b> d=\"\" transform=\"\"</h6> <p>The <a href=\"http://www.w3.org/TR/SVG/paths.html#PathElement\">path</a> element represents the outline of a shape which can be filled, stroked, used as a clipping path, or any combination of the three. The <em>d</em> attribute defines the path data, which is a <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\">mini-language</a> of path commands, such as <em>moveto</em> (M), <em>lineto</em> (L) and <em>closepath</em> (Z). The path element is a generalization of all other shapes in SVG, and can be used to draw nearly anything!</p> <h2 id=\"path-data-generators\"> Path Data Generators</h2> <p>To simplify the construction of the <em>d</em> attribute for path elements, D3 includes a number of helper classes for generating path data. Each generator is a function of data. So, if your data is a sequence of <em>xy</em> coordinates, you can define accessor functions that the path generators use to produce path data. For example, you might define a line generator:</p> <div class=\"highlight highlight-source-js\"><pre>var line = d3.svg.line()\n    .x(function(d) { return d.x; })\n    .y(function(d) { return d.y; })\n    .interpolate(\"basis\");</pre></div> <p>Then later on, you can use this function to set the <em>d</em> attribute:</p> <div class=\"highlight highlight-source-js\"><pre>g.append(\"path\")\n    .attr(\"d\", line);</pre></div> <p>Whatever data is bound to <code>g</code> (in this example) will be passed to the <code>line</code> instance. Thus, the data must be specified as an array. For every element in the data array, the <em>x</em>- and <em>y</em>-accessor functions are used to pull out the control point coordinates.</p> <p>A path generator, such as that returned by d3.svg.line, is both an object and a function. That is: you can call the generator like any other function, and the generator has additional methods that change its behavior. Like other classes in D3, path generators follow the method chaining pattern where setter methods return the generator itself, allowing multiple setters to be invoked in a concise statement.</p> <h6 id=\"line\"> d3.svg.<b>line</b>()</h6> <p>Constructs a new line generator with the default <em>x</em>- and <em>y</em>-accessor functions (that assume the input data is a two-element array of numbers; see below for details), and linear interpolation. The returned function generates path data for an open piecewise linear curve, or polyline, as in a line chart:</p> <p><img src=\"https://github.com/mbostock/d3/wiki/line.png\" alt=\"line\"></p> <p>By changing the interpolation, you can also generate splines and step functions. Also, don't be afraid to tack on additional path commands at the end. For example, if you want to generate a closed path, append a closepath (Z) command:</p> <div class=\"highlight highlight-source-js\"><pre>g.append(\"path\")\n    .attr(\"d\", function(d) { return line(d) + \"Z\"; });</pre></div> <p>The line generator is designed to work in conjunction with the <a href=\"svg-shapes#area\">area</a> generator. For example, when producing an area chart, you might use an area generator with a fill style, and a line generator with a stroke style to emphasize the top edge of the area. Since the line generator is only used to set the <em>d</em> attribute, you can control the appearance of the line using standard SVG styles and attributes, such as <em>fill</em>, <em>stroke</em> and <em>stroke-width</em>.</p> <h6 id=\"_line\"> <b>line</b>(<i>data</i>)</h6> <p>Returns the path data string for the specified array of <em>data</em> elements, or null if the path is empty.</p> <h6 id=\"line_x\"> line.<b>x</b>([<i>x</i>])</h6> <p>If <em>x</em> is specified, sets the <em>x</em>-accessor to the specified function or constant. If <em>x</em> is not specified, returns the current <em>x</em>-accessor. This accessor is invoked for each element in the data array passed to the line generator. The default accessor assumes that each input element is a two-element array of numbers:</p> <div class=\"highlight highlight-source-js\"><pre>function x(d) {\n  return d[0];\n}</pre></div> <p>Typically, an <em>x</em>-accessor is specified because the input data is in a different format, or because you want to apply a <a class=\"internal present\" href=\"quantitative-scales\">scale</a>. For example, if your data is specified as an object with <code>x</code> and <code>y</code> attributes, rather than a tuple, you might dereference these attributes and apply the scales simultaneously:</p> <div class=\"highlight highlight-source-js\"><pre>var x = d3.scale.linear().range([0, w]),\n    y = d3.scale.linear().range([h, 0]);\n\nvar line = d3.svg.line()\n    .x(function(d) { return x(d.x); })\n    .y(function(d) { return y(d.y); });</pre></div> <p>The <em>x</em>-accessor is invoked in the same manner as other value functions in D3. The <em>this</em> context of the function is the current element in the selection. (Technically, the same <em>this</em> context that invokes the line function; however, in the common case that the line generator is passed to the <a class=\"internal present\" href=\"selections#attr\">attr</a> operator, the <em>this</em> context will be the associated DOM element.) The function is passed two arguments, the current datum (d) and the current index (i). In this context, the index is the index into the array of control points, rather than the index of the current element in the selection. The <em>x</em>-accessor is invoked exactly once per datum, in the order specified by the data array. Thus, it is possible to specify a nondeterministic accessor, such as a random number generator. It is also possible to specify the <em>x</em>-accessor as a constant rather than a function, in which case all points will have the same <em>x</em>-coordinate.</p> <h6 id=\"line_y\"> line.<b>y</b>([<i>y</i>])</h6> <p>If <em>y</em> is specified, sets the <em>y</em>-accessor to the specified function or constant. If <em>y</em> is not specified, returns the current <em>y</em>-accessor. This accessor is invoked for each element in the data array passed to the line generator. The default accessor assumes that each input element is a two-element array of numbers:</p> <div class=\"highlight highlight-source-js\"><pre>function y(d) {\n  return d[1];\n}</pre></div> <p>For an example of how to specify a <em>y</em>-accessor, see the similar <a href=\"svg-shapes#line_x\">x</a> accessor. Note that, like most other graphics libraries, SVG uses the top-left corner as the origin and thus higher values of <em>y</em> are <em>lower</em> on the screen. For visualization we often want the origin in the bottom-left corner instead; one easy way to accomplish this is to invert the range of the <em>y</em>-scale by using range([h, 0]) instead of range([0, h]).</p> <h6 id=\"line_interpolate\"> line.<b>interpolate</b>([<i>interpolate</i>])</h6> <p>If <em>interpolate</em> is specified, sets the interpolation mode to the specified string or function. If <em>interpolate</em> is not specified, returns the current interpolation mode. The following named interpolation modes are supported:</p> <ul> <li>linear - piecewise linear segments, as in a polyline.</li> <li>linear-closed - close the linear segments to form a polygon.</li> <li>step - alternate between horizontal and vertical segments, as in a step function.</li> <li>step-before - alternate between vertical and horizontal segments, as in a step function.</li> <li>step-after - alternate between horizontal and vertical segments, as in a step function.</li> <li>basis - a <a href=\"http://en.wikipedia.org/wiki/B-spline\">B-spline</a>, with control point duplication on the ends.</li> <li>basis-open - an open B-spline; may not intersect the start or end.</li> <li>basis-closed - a closed B-spline, as in a loop.</li> <li>bundle - equivalent to <em>basis</em>, except the <em>tension</em> parameter is used to straighten the spline.</li> <li>cardinal - a <a href=\"http://en.wikipedia.org/wiki/Cubic_Hermite_spline#Cardinal_spline\">Cardinal spline</a>, with control point duplication on the ends.</li> <li>cardinal-open - an open Cardinal spline; may not intersect the start or end, but will intersect other control points.</li> <li>cardinal-closed - a closed Cardinal spline, as in a loop.</li> <li>monotone - <a href=\"http://en.wikipedia.org/wiki/Monotone_cubic_interpolation\">cubic interpolation</a> that preserves monotonicity in <em>y</em>.</li> </ul> <p>The behavior of some of these interpolation modes may be further customized by specifying a <a href=\"svg-shapes#line_tension\">tension</a>.</p> <p>If <em>interpolate</em> is a function, then this function will be invoked to convert an array of points of the form [​[x0, y0], [x1, y1], …], returning an <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\">SVG path data string</a> that will be used to display the line. The \"M\" at the start of the string is implied and should not be returned. For example, linear interpolation is implemented as:</p> <div class=\"highlight highlight-source-js\"><pre>function interpolateLinear(points) {\n  return points.join(\"L\");\n}</pre></div> <p>This is equivalent to (and more efficient than):</p> <div class=\"highlight highlight-source-js\"><pre>function interpolateLinear(points) {\n  var path = \"\";\n  for (var i = 0; i &lt; points.length; i++) {\n    if (i) path += \"L\";\n    path += points[i][0] + \",\" + points[i][1];\n  }\n  return path;\n}</pre></div> <p>See <a href=\"http://bl.ocks.org/mbostock/3310323\">bl.ocks.org/3310323</a> for another example of custom line interpolation.</p> <h6 id=\"line_tension\"> line.<b>tension</b>([<i>tension</i>])</h6> <p>If <em>tension</em> is specified, sets the Cardinal spline interpolation tension to the specified number in the range [0, 1]. If <em>tension</em> is not specified, returns the current tension. The tension only affects the Cardinal interpolation modes: cardinal, cardinal-open and cardinal-closed. The default tension is 0.7. In some sense, this can be interpreted as the length of the tangent; 1 will yield all zero tangents, and 0 yields a <a href=\"http://en.wikipedia.org/wiki/Cubic_Hermite_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom spline</a>.</p> <p>Note that the tension must be specified as a constant, rather than a function, as it is constant for the entirety of the line. However, it is still possible to generate multiple lines with different tensions using the same generator. For example:</p> <div class=\"highlight highlight-source-js\"><pre>svg.selectAll(\"path\")\n    .data([0, 0.2, 0.4, 0.6, 0.8, 1])\n  .enter().append(\"path\")\n    .attr(\"d\", function(d) { return line.tension(d)(data); });</pre></div> <p>In this example (see the <a href=\"http://bl.ocks.org/mbostock/1016220\">live version</a>), the tension is set before each invocation of the line generator, thus resulting in lines with the same data but different paths.</p> <h6 id=\"line_defined\"> line.<b>defined</b>([<i>defined</i>])</h6> <p>Gets or sets the accessor function that controls where the line is defined. If <em>defined</em> is specified, sets the new accessor function and returns the line. If <em>defined</em> is not specified, returns the current accessor which defaults to <code>function() { return true; }</code>. The defined accessor can be used to define where the line is defined and undefined, which is typically useful in conjunction with missing data; the generated path data will automatically be broken into multiple distinct subpaths, skipping undefined data. For example, if you want to ignore <em>y</em>-values that are not a number (or undefined), you can say:</p> <div class=\"highlight highlight-source-js\"><pre>line.defined(function(d) { return !isNaN(d[1]); });</pre></div> <p>If a datum is defined but surrounded by undefined data (or the end of the array), that datum will not be visible.</p> <h6 id=\"line_radial\"> d3.svg.line.<b>radial</b>()</h6> <p>Constructs a new radial line generator with the default <em>radius</em>- and <em>angle</em>-accessor functions (that assume the input data is a two-element array of numbers; see below for details), and linear interpolation. The returned function generates path data for an open piecewise linear curve, or polyline, as with the Cartesian <a href=\"svg-shapes#line\">line</a> generator.</p> <h6 id=\"_line_radial\"> <b>line</b>(<i>data</i>)</h6> <p>Returns the path data string for the specified array of <em>data</em> elements.</p> <h6 id=\"line_radial_radius\"> line.<b>radius</b>([<i>radius</i>])</h6> <p>If <em>radius</em> is specified, sets the <em>radius</em>-accessor to the specified function or constant. If <em>radius</em> is not specified, returns the current <em>radius</em>-accessor. This accessor is invoked for each element in the data array passed to the line generator. The default accessor assumes that each input element is a two-element array of numbers:</p> <div class=\"highlight highlight-source-js\"><pre>function radius(d) {\n  return d[0];\n}</pre></div> <p>This method is a transformation of the Cartesian <a href=\"svg-shapes#line_x\">line.x</a> method.</p> <h6 id=\"line_radial_angle\"> line.<b>angle</b>([<i>angle</i>])</h6> <p>If <em>angle</em> is specified, sets the <em>angle</em>-accessor to the specified function or constant in radians. If <em>angle</em> is not specified, returns the current <em>angle</em>-accessor. This accessor is invoked for each element in the data array passed to the line generator. The default accessor assumes that each input element is a two-element array of numbers:</p> <div class=\"highlight highlight-source-js\"><pre>function angle(d) {\n  return d[1];\n}</pre></div> <p>This method is a transformation of the Cartesian <a href=\"svg-shapes#line_y\">line.y</a> method.</p> <h6 id=\"line_radial_interpolate\"> line.<b>interpolate</b>([<i>interpolate</i>])</h6> <p>See the Cartesian <a href=\"svg-shapes#line_interpolate\">line.interpolate</a> method. The interpolation occurs after projecting to Cartesian space.</p> <h6 id=\"line_radial_tension\"> line.<b>tension</b>([<i>tension</i>])</h6> <p>See the Cartesian <a href=\"svg-shapes#line_tension\">line.tension</a> method. The interpolation occurs after projecting to Cartesian space.</p> <h6 id=\"line_radial_defined\"> line.<b>defined</b>([<i>defined</i>])</h6> <p>See the Cartesian <a href=\"svg-shapes#line_defined\">line.defined</a> method.</p> <h6 id=\"area\"> d3.svg.<b>area</b>()</h6> <p>Constructs a new area generator with the default <em>x</em>-, <em>y0</em>- and <em>y1</em>-accessor functions (that assume the input data is a two-element array of numbers; see below for details), and linear interpolation. The returned function generates path data for a closed piecewise linear curve, or polygon, as in an area chart:</p> <p><img src=\"https://github.com/mbostock/d3/wiki/area.png\" alt=\"area\"></p> <p>Conceptually, the polygon is formed using two <a href=\"svg-shapes#line\">lines</a>: the top line is formed using the <em>x</em>- and <em>y1</em>-accessor functions, and proceeds from left-to-right; the bottom line is added to this line, using the <em>x</em>- and <em>y0</em>-accessor functions, and proceeds from right-to-left. By setting the <a href=\"http://www.w3.org/TR/SVG/coords.html#TransformAttribute\">transform</a> attribute to rotate the path element by 90 degrees, you can also generate vertical areas. By changing the interpolation, you can also generate splines and step functions.</p> <p>The area generator is designed to work in conjunction with the <a href=\"svg-shapes#line\">line</a> generator. For example, when producing an area chart, you might use an area generator with a fill style, and a line generator with a stroke style to emphasize the top edge of the area. Since the area generator is only used to set the <em>d</em> attribute, you can control the appearance of the area using standard SVG styles and attributes, such as <em>fill</em>.</p> <p>To create <a href=\"http://mbostock.github.com/d3/ex/stream.html\">streamgraphs</a> (stacked area charts), use the <a href=\"stack-layout\">stack</a> layout. This layout sets the y0 attribute for each value in a series, which can be used from the <em>y0</em>- and <em>y1</em>-accessors. Note that each series must have the same number of values per series, and each value must have the same <em>x</em>-coordinate; if you have missing data or inconsistent <em>x</em>-coordinates per series, you must resample and interpolate your data before computing the stacked layout.</p> <h6 id=\"_area\"> <b>area</b>(<i>data</i>)</h6> <p>Returns the path data string for the specified array of <em>data</em> elements, or null if the path is empty.</p> <h6 id=\"area_x\"> area.<b>x</b>([<i>x</i>])</h6> <p>If <em>x</em> is specified, sets the <em>x</em>-accessor to the specified function or constant. If <em>x</em> is not specified, returns the current <em>x</em>-accessor. This accessor is invoked for each element in the data array passed to the area generator. The default accessor assumes that each input element is a two-element array of numbers:</p> <div class=\"highlight highlight-source-js\"><pre>function x(d) {\n  return d[0];\n}</pre></div> <p>Typically, an <em>x</em>-accessor is specified because the input data is in a different format, or because you want to apply a <a class=\"internal present\" href=\"quantitative-scales\">scale</a>. For example, if your data is specified as an object with <code>x</code> and <code>y</code> attributes, rather than a tuple, you might dereference these attributes and apply the scales simultaneously:</p> <div class=\"highlight highlight-source-js\"><pre>var x = d3.scale.linear().range([0, w]),\n    y = d3.scale.linear().range([h, 0]);\n\nvar area = d3.svg.area()\n    .x(function(d) { return x(d.x); })\n    .y0(h)\n    .y1(function(d) { return y(d.y); });</pre></div> <p>The <em>x</em>-accessor is invoked in the same manner as other value functions in D3. The <em>this</em> context of the function is the current element in the selection. (Technically, the same <em>this</em> context that invokes the area function; however, in the common case that the area generator is passed to the <a class=\"internal present\" href=\"selections#attr\">attr</a> operator, the <em>this</em> context will be the associated DOM element.) The function is passed two arguments, the current datum (d) and the current index (i). In this context, the index is the index into the array of control points, rather than the index of the current element in the selection. The <em>x</em>-accessor is invoked exactly once per datum, in the order specified by the data array. Thus, it is possible to specify a non-deterministic accessor, such as a random number generator. It is also possible to specify the <em>x</em>-accessor as a constant rather than a function, in which case all points will have the same <em>x</em>-coordinate.</p> <h6 id=\"area_x0\"> area.<b>x0</b>([<i>x0</i>])</h6> <p>…</p> <h6 id=\"area_x1\"> area.<b>x1</b>([<i>x1</i>])</h6> <p>…</p> <h6 id=\"area_y\"> area.<b>y</b>([<i>y</i>])</h6> <p>…</p> <h6 id=\"area_y0\"> area.<b>y0</b>([<i>y0</i>])</h6> <p>If <em>y0</em> is specified, sets the <em>y0</em>-accessor to the specified function or constant. If <em>y0</em> is not specified, returns the current <em>y0</em>-accessor. This accessor is invoked for each element in the data array passed to the area generator. The default accessor is the constant zero, thus using a fixed baseline at <em>y</em> = 0. For an example of how to specify a <em>y0</em>-accessor, see the similar <a href=\"svg-shapes#area_x\">x</a> accessor.</p> <h6 id=\"area_y1\"> area.<b>y1</b>([<i>y1</i>])</h6> <p>If <em>y1</em> is specified, sets the <em>y1</em>-accessor to the specified function or constant. If <em>y1</em> is not specified, returns the current <em>y1</em>-accessor. This accessor is invoked for each element in the data array passed to the area generator. The default accessor assumes that each input element is a two-element array of numbers:</p> <div class=\"highlight highlight-source-js\"><pre>function y1(d) {\n  return d[1];\n}</pre></div> <p>For an example of how to specify a <em>y1</em>-accessor, see the similar <a href=\"svg-shapes#area_x\">x</a> accessor. Note that, like most other graphics libraries, SVG uses the top-left corner as the origin and thus higher values of <em>y</em> are <em>lower</em> on the screen. For visualization we often want the origin in the bottom-left corner instead; one easy way to accomplish this is to invert the range of the <em>y</em>-scale by using range([h, 0]) instead of range([0, h]).</p> <h6 id=\"area_interpolate\"> area.<b>interpolate</b>([<i>interpolate</i>])</h6> <p>If <em>interpolate</em> is specified, sets the interpolation mode to the specified string or function. If <em>interpolate</em> is not specified, returns the current interpolation mode. The following named modes are supported:</p> <ul> <li>linear - piecewise linear segments, as in a polyline.</li> <li>step - alternate between horizontal and vertical segments, as in a step function.</li> <li>step-before - alternate between vertical and horizontal segments, as in a step function.</li> <li>step-after - alternate between horizontal and vertical segments, as in a step function.</li> <li>basis - a <a href=\"http://en.wikipedia.org/wiki/B-spline\">B-spline</a>, with control point duplication on the ends.</li> <li>basis-open - an open B-spline; may not intersect the start or end.</li> <li>cardinal - a <a href=\"http://en.wikipedia.org/wiki/Cubic_Hermite_spline#Cardinal_spline\">Cardinal spline</a>, with control point duplication on the ends.</li> <li>cardinal-open - an open Cardinal spline; may not intersect the start or end, but will intersect other control points.</li> <li>monotone - <a href=\"http://en.wikipedia.org/wiki/Monotone_cubic_interpolation\">cubic interpolation</a> that preserves monotonicity in <em>y</em>.</li> </ul> <p>The behavior of some of these interpolation modes may be further customized by specifying a <a href=\"svg-shapes#area_tension\">tension</a>. Technically, the basis-closed and cardinal-closed interpolation modes are also supported, but these make more sense in the context of a line rather than an area.</p> <p>If <em>interpolate</em> is a function, then this function will be invoked to convert an array of points of the form [​[x0, y0], [x1, y1], …], returning an <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\">SVG path data string</a> that will be used to display the area. The \"M\" at the start of the string is implied and should not be returned. For example, linear interpolation is implemented as:</p> <div class=\"highlight highlight-source-js\"><pre>function interpolateLinear(points) {\n  return points.join(\"L\");\n}</pre></div> <p>This is equivalent to (and more efficient than):</p> <div class=\"highlight highlight-source-js\"><pre>function interpolateLinear(points) {\n  var path = \"\";\n  for (var i = 0; i &lt; points.length; i++) {\n    if (i) path += \"L\";\n    path += points[i][0] + \",\" + points[i][1];\n  }\n  return path;\n}</pre></div> <p>See <a href=\"http://bl.ocks.org/mbostock/3310323\">bl.ocks.org/3310323</a> for another example of custom interpolation.</p> <h6 id=\"area_tension\"> area.<b>tension</b>([<i>tension</i>])</h6> <p>If <em>tension</em> is specified, sets the Cardinal spline interpolation tension to the specified number in the range [0, 1]. If <em>tension</em> is not specified, returns the current tension. The tension only affects the Cardinal interpolation modes: cardinal, cardinal-open and cardinal-closed. The default tension is 0.7. In some sense, this can be interpreted as the length of the tangent; 1 will yield all zero tangents, and 0 yields a <a href=\"http://en.wikipedia.org/wiki/Cubic_Hermite_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom spline</a>. Note that the tension must be specified as a constant, rather than a function, as it is constant for the entirety of the area.</p> <h6 id=\"area_defined\"> area.<b>defined</b>([<i>defined</i>])</h6> <p>Gets or sets the accessor function that controls where the area is defined. If <em>defined</em> is specified, sets the new accessor function and returns the area. If <em>defined</em> is not specified, returns the current accessor which defaults to <code>function() { return true; }</code>. The defined accessor can be used to define where the area is defined and undefined, which is typically useful in conjunction with missing data; the generated path data will automatically be broken into multiple distinct subpaths, skipping undefined data. For example, if you want to ignore <em>y</em>-values that are not a number (or undefined), you can say:</p> <div class=\"highlight highlight-source-js\"><pre>area.defined(function(d) { return !isNaN(d[1]); });</pre></div> <h6 id=\"area_radial\"> d3.svg.area.<b>radial</b>()</h6> <p>…</p> <h6 id=\"_area_radial\"> <b>area</b>(<i>data</i>)</h6> <p>Returns the path data string for the specified array of <em>data</em> elements.</p> <h6 id=\"area_radial_radius\"> area.<b>radius</b>([<i>radius</i>])</h6> <p>…</p> <h6 id=\"area_radial_innerRadius\"> area.<b>innerRadius</b>([<i>radius</i>])</h6> <p>…</p> <h6 id=\"area_radial_outerRadius\"> area.<b>outerRadius</b>([<i>radius</i>])</h6> <p>…</p> <h6 id=\"area_radial_angle\"> area.<b>angle</b>([<i>angle</i>])</h6> <p>…</p> <h6 id=\"area_radial_startAngle\"> area.<b>startAngle</b>([<i>angle</i>])</h6> <p>…</p> <h6 id=\"area_radial_endAngle\"> area.<b>endAngle</b>([<i>angle</i>])</h6> <p>…</p> <h6 id=\"arc\"> d3.svg.<b>arc</b>()</h6> <p>Constructs a new arc generator with the default inner radius, outer radius, start angle and end angle accessor functions (that assume the input data is an object with named attributes matching the accessors; see below for details). While the default accessors assume that the arc dimensions are all specified dynamically, it is very common to set one or more of the dimensions as a constant, such as setting the inner radius to zero for a pie chart. The returned function generates path data for a closed solid arc, as in a pie or donut chart:</p> <p><img src=\"https://github.com/mbostock/d3/wiki/arc.png\" alt=\"arc\"></p> <p>In fact, four forms are possible: a <a href=\"https://en.wikipedia.org/wiki/Disk_(mathematics)\">disk</a> (when the inner radius is zero and the angular span is greater than or equal to 2π), a <a href=\"http://en.wikipedia.org/wiki/Circular_sector\">circular sector</a> (when the inner radius is zero and the angular span is less than 2π), an <a href=\"http://en.wikipedia.org/wiki/Annulus_(mathematics)\">annulus</a> (when the inner radius is non-zero and the angular span is greater than or equal to 2π), and an annular sector (when the inner radius is non-zero and the angular span is less than 2π).</p> <h6 id=\"_arc\"> <b>arc</b>(<i>datum</i>[, <i>index</i>])</h6> <p>Returns the path data string for the specified <em>datum</em>. An optional <em>index</em> may be specified, which is passed through to the arc's accessor functions.</p> <h6 id=\"arc_innerRadius\"> arc.<b>innerRadius</b>([<i>radius</i>])</h6> <p>If <em>radius</em> is specified, sets the inner radius accessor to the specified function or constant. If <em>radius</em> is not specified, returns the current inner radius accessor, which defaults to:</p> <div class=\"highlight highlight-source-js\"><pre>function innerRadius(d) {\n  return d.innerRadius;\n}</pre></div> <p>The arc generator arguments (typically <code>d</code> and <code>i</code>) and context (<code>this</code>) are passed through to the accessor function. An inner radius accessor function is useful for handling data in a different format or for applying a <a href=\"https://github.com/mbostock/d3/wiki/Quantitative%20Scales\">quantitative scale</a> to encode data. A constant inner radius may be used to create a standard pie or donut chart.</p> <h6 id=\"arc_outerRadius\"> arc.<b>outerRadius</b>([<i>radius</i>])</h6> <p>If <em>radius</em> is specified, sets the outer radius accessor to the specified function or constant. If <em>radius</em> is not specified, returns the current outer radius accessor, which defaults to:</p> <div class=\"highlight highlight-source-js\"><pre>function outerRadius(d) {\n  return d.outerRadius;\n}</pre></div> <p>The arc generator arguments (typically <code>d</code> and <code>i</code>) and context (<code>this</code>) are passed through to the accessor function. An outer radius accessor function is useful for handling data in a different format or for applying a <a href=\"https://github.com/mbostock/d3/wiki/Quantitative%20Scales\">quantitative scale</a> to encode data. A constant outer radius may be used to create a standard pie or donut chart.</p> <h6 id=\"arc_cornerRadius\"> arc.<b>cornerRadius</b>([<i>radius</i>])</h6> <p>If <em>radius</em> is specified, sets the corner radius accessor to the specified function or constant. If <em>radius</em> is not specified, returns the current outer radius accessor, which defaults to zero. Although a constant corner radius is typically used, the corner radius may also be specified as a function. The arc generator arguments (typically <code>d</code> and <code>i</code>) and context (<code>this</code>) are passed through to the accessor function.</p> <h6 id=\"arc_padRadius\"> arc.<b>padRadius</b>([<i>radius</i>])</h6> <p>If <em>radius</em> is specified, sets the pad radius accessor to the specified function or constant. If <em>radius</em> is not specified, returns the current pad radius accessor, which defaults to “auto”. The “auto” pad radius method computes the pad radius based on the previously-computed <a href=\"#arc_innerRadius\">inner</a> and <a href=\"#arc_outerRadius\">outer</a> as:</p> <div class=\"highlight highlight-source-js\"><pre>function padRadius(innerRadius, outerRadius) {\n  return Math.sqrt(innerRadius * innerRadius + outerRadius * outerRadius);\n}</pre></div> <p>This implementation is designed to preserve the approximate relative area of arcs in conjunction with <a href=\"pie-layout#padAngle\">pie.padAngle</a>.</p> <p>The pad radius is the radius at which the <a href=\"#arc_padAngle\">pad angle</a> is applied: the nominal padding distance between parallel edges of adjacent arcs is defined as padRadius * padAngle. (The padding distance may be smaller if the inner radius is small relative to the pad angle.) The pad radius typically does not need to be changed from “auto”, but can be useful to ensure parallel edges between arcs with differing inner or outer radii, as when <a href=\"http://bl.ocks.org/mbostock/32bd93b1cc0fbccc9bf9\">extending an arc on hover</a>.</p> <p>If the pad radius is specified as an accessor function, the arc generator arguments (typically <code>d</code> and <code>i</code>) and context (<code>this</code>) are passed through to the accessor function.</p> <h6 id=\"arc_startAngle\"> arc.<b>startAngle</b>([<i>angle</i>])</h6> <p>If <em>angle</em> is specified, sets the start angle accessor to the specified function or constant. If <em>angle</em> is not specified, returns the current start angle accessor, which defaults to:</p> <div class=\"highlight highlight-source-js\"><pre>function startAngle(d) {\n  return d.startAngle;\n}</pre></div> <p>Angles are specified in radians; 0 corresponds to 12 o’clock (negative <em>y</em>) and proceeds clockwise, repeating at 2π. If the start angle is specified as an accessor function, the arc generator arguments (typically <code>d</code> and <code>i</code>) and context (<code>this</code>) are passed through to the accessor function.</p> <p>For constructing pie or donut charts, you will need to compute the start angle of each arc as the end angle of the previous arc. This can be done conveniently using the <a href=\"pie-layout\">pie layout</a>, which takes an array of input data and returns arc objects with <code>startAngle</code> and <code>endAngle</code> attributes compatible with the default arc accessors.</p> <h6 id=\"arc_endAngle\"> arc.<b>endAngle</b>([<i>angle</i>])</h6> <p>If <em>angle</em> is specified, sets the end angle accessor to the specified function or constant. If <em>angle</em> is not specified, returns the current end angle accessor, which defaults to:</p> <div class=\"highlight highlight-source-js\"><pre>function endAngle(d) {\n  return d.endAngle;\n}</pre></div> <p>Angles are specified in radians; 0 corresponds to 12 o’clock (negative <em>y</em>) and proceeds clockwise, repeating at 2π. If the end angle is specified as an accessor function, the arc generator arguments (typically <code>d</code> and <code>i</code>) and context (<code>this</code>) are passed through to the accessor function.</p> <p>For constructing pie or donut charts, you will need to compute the end angle of each arc as appropriate. This can be done conveniently using the <a href=\"pie-layout\">pie layout</a>, which takes an array of input data and returns arc objects with <code>startAngle</code> and <code>endAngle</code> attributes compatible with the default arc accessors.</p> <h6 id=\"arc_padAngle\"> arc.<b>padAngle</b>([<i>angle</i>])</h6> <p>If <em>angle</em> is specified, sets the pad angle accessor to the specified function or constant. If <em>angle</em> is not specified, returns the current pad angle accessor, which defaults to:</p> <div class=\"highlight highlight-source-js\"><pre>function padAngle(d) {\n  return d.padAngle;\n}</pre></div> <p>Angles are specified in radians. If the pad angle is specified as an accessor function, the arc generator arguments (typically <code>d</code> and <code>i</code>) and context (<code>this</code>) are passed through to the accessor function.</p> <p>Although the pad angle can be specified as a constant, it is preferable to use the default pad angle accessor and instead use <a href=\"pie-layout#padAngle\">pie.padAngle</a> to compute the appropriate pad angle, and to recompute the start and end angles of each arc so as to preserve approximate relative areas.</p> <h6 id=\"arc_centroid\"> arc.<b>centroid</b>(<i>arguments…</i>)</h6> <p>Computes the centroid of the arc that would be generated from the specified input <em>arguments</em>; typically, the arguments are the current datum (d), and optionally the current index (i). The centroid is defined as the midpoint in polar coordinates of the inner and outer radius, and the start and end angle. This provides a convenient location for arc labels. For example:</p> <div class=\"highlight highlight-source-js\"><pre>arcs.append(\"text\")\n    .attr(\"transform\", function(d) { return \"translate(\" + arc.centroid(d) + \")\"; })\n    .attr(\"dy\", \".35em\")\n    .attr(\"text-anchor\", \"middle\")\n    .text(function(d) { return d.value; });</pre></div> <p>Alternatively, you can use SVG's transform attribute to rotate text into position, though you may need to convert radians back into degrees. Yet another possibility is to use a <a href=\"http://www.w3.org/TR/SVG/text.html#TextPathElement\">textPath</a> element to curve the label along the path of the arc!</p> <h6 id=\"symbol\"> d3.svg.<b>symbol</b>()</h6> <p>Constructs a new symbol generator with the default <em>type</em>- and <em>size</em>-accessor functions (that make no assumptions about input data, and produce a circle sized 64 square pixels; see below for details). While the default accessors generate static symbols, it is common to set one or more of the accessors using a function, such as setting the size proportional to a dimension of data for a scatterplot. The returned function generates path data for various symbols, as in a dot plot:</p> <p><img src=\"https://github.com/mbostock/d3/wiki/symbol.png\" alt=\"symbol\"></p> <p>Note that the symbol does not include accessors for <em>x</em> and <em>y</em>. Instead, you can use the path element's <a href=\"http://www.w3.org/TR/SVG/coords.html#TransformAttribute\">transform</a> attribute to position the symbols, as in:</p> <div class=\"highlight highlight-source-js\"><pre>vis.selectAll(\"path\")\n    .data(data)\n  .enter().append(\"path\")\n    .attr(\"transform\", function(d) { return \"translate(\" + x(d.x) + \",\" + y(d.y) + \")\"; })\n    .attr(\"d\", d3.svg.symbol());</pre></div> <p>In the future, we may add <em>x</em>- and <em>y</em>-accessors for parity with the line and area generators. The symbol will be centered at the origin (0,0) of the local coordinate system. You can also use SVG's built-in basic shapes to produce many of these symbol types, though D3's symbol generator is useful in conjunction with path elements because you can easily change the symbol type and size as a function of data.</p> <h6 id=\"_symbol\"> <b>symbol</b>(<i>datum</i>[, <i>index</i>])</h6> <p>Returns the path data string for the specified <em>datum</em>. An optional <em>index</em> may be specified, which is passed through to the symbol's accessor functions.</p> <h6 id=\"symbol_type\"> symbol.<b>type</b>([<i>type</i>])</h6> <p>If <em>type</em> is specified, sets the <em>type</em>-accessor to the specified function or constant. If <em>type</em> is not specified, returns the current <em>type</em>-accessor. The default accessor is the constant \"circle\", and the following types are supported:</p> <ul> <li>circle - a <a href=\"http://en.wikipedia.org/wiki/Circle\">circle</a>.</li> <li>cross - a <a href=\"http://en.wikipedia.org/wiki/Cross\">Greek cross</a> or plus sign.</li> <li>diamond - a <a href=\"http://en.wikipedia.org/wiki/Rhombus\">rhombus</a>.</li> <li>square - an axis-aligned <a href=\"http://en.wikipedia.org/wiki/Square_(geometry)\">square</a>.</li> <li>triangle-down - a downward-pointing <a href=\"http://en.wikipedia.org/wiki/Equilateral_triangle\">equilateral triangle</a>.</li> <li>triangle-up - an upward-pointing equilateral triangle.</li> </ul> <p>Types are normalized to have the same area in square pixels, according to the specified <a href=\"svg-shapes#symbol_size\">size</a>. However, note that different types' sizes may be affected by the stroke and stroke width in different ways. All of the types are designed to be visible when only a fill style is used, although they generally look better when both a fill and stroke is used.</p> <p>The <em>type</em>-accessor is invoked in the same manner as other value functions in D3. The <em>this</em> context of the function is the current element in the selection. (Technically, the same <em>this</em> context that invokes the arc function; however, in the common case that the symbol generator is passed to the <a class=\"internal present\" href=\"selections#attr\">attr</a> operator, the <em>this</em> context will be the associated DOM element.) The function is passed two arguments, the current datum (d) and the current index (i). It is also possible to specify the <em>type</em>-accessor as a constant rather than a function.</p> <h6 id=\"symbol_size\"> symbol.<b>size</b>([<i>size</i>])</h6> <p>If <em>size</em> is specified, sets the <em>size</em>-accessor to the specified function or constant in square pixels. If <em>size</em> is not specified, returns the current <em>size</em>-accessor. The default is 64. This accessor is invoked on the argument passed to the symbol generator. Typically, a <em>size</em>-accessor is specified as a function when you want the size of the symbol to encode a <a href=\"quantitative-scales\">quantitative dimension</a> of data, or a constant it you simply want to make all the dots bigger or smaller. If you want to specify a radius rather than the size, you must do so indirectly, for example using a <a href=\"quantitative-scales#pow\">pow</a> scale with exponent 2.</p> <h6 id=\"symbolTypes\"> d3.svg.<b>symbolTypes</b>\n</h6> <p>The array of supported <a href=\"#symbol_type\">symbol types</a>.</p> <h6 id=\"chord\"> d3.svg.<b>chord</b>()</h6> <p>Constructs a new chord generator with the default accessor functions (that assume the input data is an object with named attributes matching the accessors; see below for details). While the default accessors assume that the chord dimensions are all specified dynamically, it is very common to set one or more of the dimensions as a constant, such as the radius. The returned function generates path data for a closed shape connecting two <a href=\"http://en.wikipedia.org/wiki/Arc_(geometry)\">arcs</a> with quadratic Bézier curves, as in a <a href=\"http://mbostock.github.com/d3/ex/chord.html\">chord diagram</a>:</p> <p><img src=\"https://github.com/mbostock/d3/wiki/chord.png\" alt=\"chord\"></p> <p>A chord generator is often used in conjunction with an <a href=\"svg-shapes#arc\">arc generator</a>, so as to draw annular segments at the start and end of the chords. In addition, the <a href=\"chord-layout\">chord layout</a> is useful for generating objects that describe a set of grouped chords from a matrix, compatible with the default accessors.</p> <h6 id=\"_chord\"> <b>chord</b>(<i>datum</i>[, <i>index</i>])</h6> <p>Returns the path data string for the specified <em>datum</em>. An optional <em>index</em> may be specified, which is passed through to the chord's accessor functions.</p> <h6 id=\"chord_source\"> chord.<b>source</b>([<i>source</i>])</h6> <p>If <em>source</em> is specified, sets the <em>source</em>-accessor to the specified function or constant. If <em>source</em> is not specified, returns the current <em>source</em>-accessor. The purpose of the <em>source</em> accessor is to return an object that describes the starting arc of the chord. The returned object is subsequently passed to the <a href=\"svg-shapes#chord_radius\">radius</a>, <a href=\"svg-shapes#chord_startAngle\">startAngle</a> and <a href=\"svg-shapes#chord_endAngle\">endAngle</a> accessors. This allows these other accessors to be reused for both the source and target arc descriptions. The default accessor assumes that the input data is an object with suitably-named attributes:</p> <div class=\"highlight highlight-source-js\"><pre>function source(d) {\n  return d.source;\n}</pre></div> <p>The <em>source</em>-accessor is invoked in the same manner as other value functions in D3. The <em>this</em> context of the function is the current element in the selection. (Technically, the same <em>this</em> context that invokes the arc function; however, in the common case that the symbol generator is passed to the <a class=\"internal present\" href=\"selections#attr\">attr</a> operator, the <em>this</em> context will be the associated DOM element.) The function is passed two arguments, the current datum (d) and the current index (i). It is also possible to specify the <em>source</em>-accessor as a constant rather than a function.</p> <h6 id=\"chord_target\"> chord.<b>target</b>([<i>target</i>])</h6> <p>If <em>target</em> is specified, sets the <em>target</em>-accessor to the specified function or constant. If <em>target</em> is not specified, returns the current <em>target</em>-accessor. The purpose of the <em>target</em> accessor is to return an object that describes the ending arc of the chord. The returned object is subsequently passed to the <a href=\"svg-shapes#chord_radius\">radius</a>, <a href=\"svg-shapes#chord_startAngle\">startAngle</a> and <a href=\"svg-shapes#chord_endAngle\">endAngle</a> accessors. This allows these other accessors to be reused for both the source and target arc descriptions. The default accessor assumes that the input data is an object with suitably-named attributes:</p> <div class=\"highlight highlight-source-js\"><pre>function target(d) {\n  return d.target;\n}</pre></div> <p>The <em>target</em>-accessor is invoked in the same manner as other value functions in D3. The function is passed two arguments, the current datum (d) and the current index (i). It is also possible to specify the <em>target</em>-accessor as a constant rather than a function.</p> <h6 id=\"chord_radius\"> chord.<b>radius</b>([<i>radius</i>])</h6> <p>If <em>radius</em> is specified, sets the <em>radius</em>-accessor to the specified function or constant. If <em>radius</em> is not specified, returns the current <em>radius</em>-accessor. The default accessor assumes that the input source or target description is an object with suitably-named attributes:</p> <div class=\"highlight highlight-source-js\"><pre>function radius(d) {\n  return d.radius;\n}</pre></div> <p>The <em>radius</em>-accessor is invoked in a similar manner as other value functions in D3. The function is passed two arguments, the current source description (derived from the current datum, d) and the current index (i). It is also possible to specify the <em>radius</em>-accessor as a constant rather than a function.</p> <h6 id=\"chord_startAngle\"> chord.<b>startAngle</b>([<i>angle</i>])</h6> <p>If <em>startAngle</em> is specified, sets the <em>startAngle</em>-accessor to the specified function or constant. If <em>startAngle</em> is not specified, returns the current <em>startAngle</em>-accessor. Angles are specified in radians; 0 corresponds to 12 o’clock (negative <em>y</em>) and proceeds clockwise, repeating at 2π. The default accessor assumes that the input source or target description is an object with suitably-named attributes:</p> <div class=\"highlight highlight-source-js\"><pre>function startAngle(d) {\n  return d.startAngle;\n}</pre></div> <p>The <em>startAngle</em>-accessor is invoked in a similar manner as other value functions in D3. The function is passed two arguments, the current source or target description (derived from the current datum, d) and the current index (i). It is also possible to specify the <em>startAngle</em>-accessor as a constant rather than a function.</p> <h6 id=\"chord_endAngle\"> chord.<b>endAngle</b>([<i>angle</i>])</h6> <p>If <em>endAngle</em> is specified, sets the <em>endAngle</em>-accessor to the specified function or constant. If <em>endAngle</em> is not specified, returns the current <em>endAngle</em>-accessor. Angles are specified in radians; 0 corresponds to 12 o’clock (negative <em>y</em>) and proceeds clockwise, repeating at 2π. The default accessor assumes that the input source or target description is an object with suitably-named attributes:</p> <div class=\"highlight highlight-source-js\"><pre>function endAngle(d) {\n  return d.endAngle;\n}</pre></div> <p>The <em>endAngle</em>-accessor is invoked in a similar manner as other value functions in D3. The function is passed two arguments, the current source or target description (derived from the current datum, d) and the current index (i). It is also possible to specify the <em>endAngle</em>-accessor as a constant rather than a function.</p> <h6 id=\"diagonal\"> d3.svg.<b>diagonal</b>()</h6> <p>Constructs a new diagonal generator with the default accessor functions (that assume the input data is an object with named attributes matching the accessors; see below for details). The returned function generates the path data for a cubic Bézier connecting the source and target points; the tangents are specified to produce smooth fan-in and fan-out when connecting nodes, as in a <a href=\"http://mbostock.github.com/d3/ex/tree.html\">node-link diagram</a>:</p> <p><img src=\"https://github.com/mbostock/d3/wiki/diagonal.png\" alt=\"diagonal\"></p> <p>Although diagonals default to Cartesian (axis-aligned) orientations, they can be used in radial and other orientations using a <a href=\"svg-shapes#diagonal_projection\">projection</a>.</p> <h6 id=\"_diagonal\"> <b>diagonal</b>(<i>datum</i>[, <i>index</i>])</h6> <p>Returns the path data string for the specified <em>datum</em>. An optional <em>index</em> may be specified, which is passed through to the diagonal's accessor functions.</p> <h6 id=\"diagonal_source\"> diagonal.<b>source</b>([<i>source</i>])</h6> <p>If <em>source</em> is specified, sets the <em>source</em>-accessor to the specified function or constant. If <em>source</em> is not specified, returns the current <em>source</em>-accessor. The purpose of the <em>source</em> accessor is to return an object of the form <code>{x, y}</code> that describes the starting point of the diagonal. (The returned object is subsequently passed to the <a href=\"svg-shapes#diagonal_projection\">projection</a>.) The default accessor assumes that the input data is an object with suitably-named attributes:</p> <div class=\"highlight highlight-source-js\"><pre>function source(d) {\n  return d.source;\n}</pre></div> <p>The <em>source</em>-accessor is invoked in the same manner as other value functions in D3. The <em>this</em> context of the function is the current element in the selection. (Technically, the same <em>this</em> context that invokes the diagonal function; however, in the common case that the symbol generator is passed to the <a class=\"internal present\" href=\"selections#attr\">attr</a> operator, the <em>this</em> context will be the associated DOM element.) The function is passed two arguments, the current datum (d) and the current index (i). It is also possible to specify the <em>source</em>-accessor as a constant rather than a function.</p> <h6 id=\"diagonal_target\"> diagonal.<b>target</b>([<i>target</i>])</h6> <p>If <em>target</em> is specified, sets the <em>target</em>-accessor to the specified function or constant. If <em>target</em> is not specified, returns the current <em>target</em>-accessor. The purpose of the <em>target</em> accessor is to return an object of the form <code>{x, y}</code> that describes the ending point of the diagonal. (The returned object is subsequently passed to the <a href=\"svg-shapes#diagonal_projection\">projection</a>.) The default accessor assumes that the input data is an object with suitably-named attributes:</p> <div class=\"highlight highlight-source-js\"><pre>function target(d) {\n  return d.target;\n}</pre></div> <p>The <em>target</em>-accessor is invoked in the same manner as other value functions in D3. The function is passed two arguments, the current datum (d) and the current index (i). It is also possible to specify the <em>source</em>-accessor as a constant rather than a function.</p> <h6 id=\"diagonal_projection\"> diagonal.<b>projection</b>([<i>projection</i>])</h6> <p>If <em>projection</em> is specified, sets the <em>projection</em> to the specified function. If <em>projection</em> is not specified, returns the current <em>projection</em>. The <em>projection</em> converts a point (such as that returned by the source and target accessors) of the form <code>{x, y}</code> to a two-element array of numbers. The default accessor assumes that the input point is an object with <em>x</em> and <em>y</em> attributes:</p> <div class=\"highlight highlight-source-js\"><pre>function projection(d) {\n  return [d.x, d.y];\n}</pre></div> <p>The default accessor is thus compatible with D3's various node layouts, including <a href=\"tree-layout\">tree</a>, <a href=\"partition-layout\">partition</a> and <a href=\"cluster-layout\">cluster</a>. For example, to produce a radial diagonal, assuming that the <em>y</em> attribute defines the radius in pixels, and the <em>x</em> attribute defines the angle in degrees:</p> <div class=\"highlight highlight-source-js\"><pre>function projection(d) {\n  var r = d.y, a = (d.x - 90) / 180 * Math.PI;\n  return [r * Math.cos(a), r * Math.sin(a)];\n}</pre></div> <p>The <em>projection</em> is invoked in a similar manner as other value functions in D3. The function is passed two arguments, the current source or target point (derived from the current data, d) and the current index (i).</p> <h6 id=\"diagonal_radial\"> d3.svg.diagonal.<b>radial</b>()</h6> <p>…</p> <h6 id=\"_diagonal_radial\"> <b>diagonal</b>(<i>datum</i>[, <i>index</i>])</h6> <p>Returns the path data string for the specified <em>datum</em>. An optional <em>index</em> may be specified, which is passed through to the diagonal's accessor functions.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Michael Bostock<br>Licensed under the BSD License.<br>\n    <a href=\"https://github.com/mbostock/d3/wiki/SVG-Shapes\" class=\"_attribution-link\">https://github.com/mbostock/d3/wiki/SVG-Shapes</a>\n  </p>\n</div>\n"}