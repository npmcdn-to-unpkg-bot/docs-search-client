{"server_12-5/server_components":"<h1 id=\"about-the-chef-server-title\">About the Chef Server</h1> <p>The Chef server acts as a hub for configuration data. The Chef server stores cookbooks, the policies that are applied to nodes, and metadata that describes each registered node that is being managed by the chef-client. Nodes use the chef-client to ask the Chef server for configuration details, such as recipes, templates, and file distributions. The chef-client then does as much of the configuration work as possible on the nodes themselves (and not on the Chef server). This scalable approach distributes the configuration effort throughout the organization.</p> <p>Starting with the release of Chef server 11, the front-end for the Chef server is written using <a class=\"reference external\" href=\"http://www.erlang.org/\">Erlang</a>, which is a programming language that <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Erlang_%28programming_language%29\">first appeared in 1986</a>, was open sourced in 1998, and is excellent with critical enterprise concerns like concurrency, fault-tolerance, and distributed environments. The Chef server can scale to the size of any enterprise and is sometimes referred to as Erchef.</p> <p>The following diagram shows the various components that are part of a Chef server deployment and how they relate to one another.</p> <img src=\"https://docs.chef.io/release/server_12-5/_images/server_components.svg\" width=\"500px\"> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Component</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Clients</td> <td>The Chef server is accessed primarily by nodes that are under management by Chef, as the chef-client runs occur. It is also accessed by individuals who maintain cookbooks and policy that is stored on the Chef server, typically from a workstation. And also by individual users with credentials to Chef server components, such as the Chef management console.</td> </tr> <tr class=\"row-odd\">\n<td>Load Balancer</td> <td>Nginx is an open-source HTTP and reverse proxy server that is used as the front-end load balancer for the Chef server. All requests to the Chef server API are routed through Nginx.</td> </tr> <tr class=\"row-even\">\n<td>Chef Manage</td> <td>\n<p class=\"first\">chef-server-webui is a Ruby on Rails 3.0 application that hosts the web interface for the Chef server.</p> <p class=\"last\">The Chef management console uses the Chef server API for all communication to the Chef server.</p> </td> </tr> <tr class=\"row-odd\">\n<td>Chef Server</td> <td>\n<p class=\"first\">Erchef is a complete rewrite of the core API for the Chef server, which allows it to be faster and more scalable than previous versions. The API itself is still compatible with the original Ruby-based Chef server, which means that cookbooks and recipes that were authored for the Ruby-based Chef server will continue to work on the Erlang-based Chef server. The chef-client is still written in Ruby.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Even though the Chef server is authored in Erlang, writing code in Erlang is NOT a requirement for using Chef.</p> </div> </td> </tr> <tr class=\"row-even\">\n<td>Bookshelf</td> <td>\n<p class=\"first\">Bookshelf is used to store cookbook content—files, templates, and so on—that have been uploaded to the Chef server as part of a cookbook version. Cookbook content is stored by content checksum. If two different cookbooks or different versions of the same cookbook include the same file or template, Bookshelf will store that file only once. The cookbook content managed by Bookshelf is stored in flat files and is separated from the Chef server and search index repositories.</p> <p class=\"last\">All cookbooks are stored in a dedicated repository.</p> </td> </tr> <tr class=\"row-odd\">\n<td>Message Queues</td> <td>\n<p class=\"first\">Messages are sent to the search index using the following components:</p> <blockquote> <div>\n<ol class=\"arabic simple\"> <li>RabbitMQ is used as the message queue for the Chef server. All items that will be added to the search index repository are first added to a queue.</li> <li>chef-expander is used to pull messages from the RabbitMQ queue, process them into the required format, and then post them to chef-solr for indexing.</li> <li>chef-solr wraps Apache Solr and exposes its REST API for indexing and search.</li> </ol> </div>\n</blockquote> <p class=\"last\">All messages are added to a dedicated search index repository.</p> </td> </tr> <tr class=\"row-even\">\n<td>PostgreSQL</td> <td>PostgreSQL is the data storage repository for the Chef server.</td> </tr> </tbody> </table>  <h2 id=\"capacity-planning\">Capacity Planning</h2> <p>This section provides guidance for capacity planning and how to choose the right configuration–standalone, high availability, or tiered–for the Chef server. This section provides guidance and not hard/fast rules. This is because some requests to the Chef server API are more computationally expensive than others. In general, it’s better to start small and then scale the Chef server as needed. Premature optimization can hinder more than help because it may introduce unnecessary complexity.</p>  <h3 id=\"scaling-the-chef-server\">Scaling the Chef Server</h3> <p>The Chef server itself is highly scalable. A single virtual machine running the Chef server can handle requests for many thousands of nodes. As the scale increases, it’s a straightforward process to expand into a tiered front-end, back-end architecture with horizontally scaled front-ends to relieve pressure on system bottlenecks.</p> <p>That said, it’s best to isolate failure domains with their own Chef server, rather than trying to run every node in an infrastructure from a single central, monolithic Chef server instance/cluster.</p> <p>For instance, if there are West coast and East coast data centers, it is best to have one Chef server instance in each datacenter. Deploys to each Chef server can be synchronized upstream by CI software. The primary limiting bottleneck for Chef server installations is almost always input/output operations per second (IOPS) performance for the database filesystem.</p>   <h3 id=\"ccrs-min\">CCRs/min</h3> <p>The key unit of measure for scaling the Chef server is the number of chef-client runs per minute: CCRs/min. For example, 500 nodes set to check in every 30 minutes is equivalent to 16.66 CCRs/min.</p> <p>Typically, the Chef server does not require a high availability or tiered topology until the number of CCRs/min is higher than 333/min (approximately 10k nodes).</p> <p>While synthetic benchmarks should be taken with a grain of salt, as they don’t typically represent real-world performance, internal synthetic benchmarks at Chef have seen a standalone Chef server installed on a <code class=\"docutils literal\">c3.2xlarge</code> Amazon Web Services (AWS) instance handle more than 1,000 CCRs/min (30k nodes).</p>   <h3 id=\"assumptions\">Assumptions</h3> <p>Several factors may influence server scalability. All server sizing recommendations are based on these assumptions:</p> <ul class=\"simple\"> <li>chef-client runs are daemonized, and are not initiated by a cron job. Using cron to schedule runs can create “thundering herd” problems</li> <li>chef-client runs are set to a default 30-minute interval with a 5-minute splay</li> <li>Search and <code class=\"docutils literal\">partial_search</code> are utilized, but not heavily</li> <li>The number of cookbooks per organization, across all versions, on the Chef server is under 500. (Multiple organizations with fewer than 500 cookbooks each, that still add up to a total of more than 500 cookbooks server-wide, is fine.)</li> <li>The default maximum allowable size for a node object is 1MB, although it is rare for nodes to exceed 150KB. Though compressed, this data is replicated twice, once in Apache Solr, and once in PostgreSQL. In practice, allowing a conservative 2MB of storage on the disk partition per node should be sufficient</li> <li>Disk space estimates assume that the Reporting add-on is not installed</li> </ul>   <h3 id=\"host-specifications\">Host Specifications</h3> <p>The following sections describe the host specifications for various sizes of CCRs/min and help show when to consider moving from a standalone topology to a high availability or tiered topology.</p> <p><strong>UP TO 33 CCRs/Min (approx. 1,000 nodes):</strong></p> <ul class=\"simple\"> <li>Chef recommends a single virtual machine instance</li> <li>Start with 2 CPU cores and 8GB of RAM, which is equivalent to an Amazon EC2 <code class=\"docutils literal\">m3.large</code> instance</li> <li>Allocate 2MB of disk space on the data partition per managed node</li> </ul> <p><strong>UP TO 167 CCRs/Min (approx. 5,000 nodes):</strong></p> <ul class=\"simple\"> <li>Chef recommends a single virtual machine instance</li> <li>Start with 4 CPU cores and 16GB of RAM, which is equivalent to an Amazon EC2 <code class=\"docutils literal\">m3.xlarge</code> instance</li> </ul> <p><strong>UP TO 333 CCRs/Min (Approx. 10,000 nodes):</strong></p> <ul class=\"simple\"> <li>Chef recommends a single virtual machine instance</li> <li>Start with 8 CPU cores and 32GB of RAM, which is equivalent to an Amazon EC2 <code class=\"docutils literal\">m3.2xlarge</code> instance</li> </ul> <p><strong>UP TO 667 CCRs/Min (Approx. 20,000 nodes):</strong></p> <ul class=\"simple\"> <li>Chef recommends two hosts, one front-end and one back-end</li> <li>The disk requirement for the front-end server is negligible</li> <li>Start with 8 CPU cores and 32GB of RAM for each host, which is equivalent to an Amazon EC2 <code class=\"docutils literal\">m3.2xlarge</code> instance</li> </ul> <p><strong>Scaling beyond 20,000 nodes on a single cluster:</strong></p> <ul class=\"simple\"> <li>Additional capacity can be gained by placing the front-end node behind an HTTP load balancer, and then scaling front-end nodes horizontally</li> <li>Chef recommends that Chef professional services be engaged to help with capacity and architectural planning at this size</li> </ul>    <h2 id=\"external-cookbooks\">External Cookbooks</h2> <p>The following diagram highlights the specific changes that occur when cookbooks are stored at an external location, such as Amazon Simple Storage Service (S3).</p> <img src=\"https://docs.chef.io/release/server_12-5/_images/server_components_s3.svg\" width=\"500px\"> <p>The following table describes the components that are different from the default configuration of the Chef server when cookbooks are stored at an external location:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Component</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Clients</td> <td>The Chef server will provide signed URLs for cookbook requests made by the various clients (individual users, knife requests, and from the chef-client that is installed on nodes under management by Chef).</td> </tr> <tr class=\"row-odd\">\n<td>Load Balancer</td> <td>The signed URLs for cookbooks are pointed here, and then routed to cookbook storage, as required.</td> </tr> <tr class=\"row-even\">\n<td>Chef Server</td> <td>\n<p class=\"first\">Erchef is a complete rewrite of the core API for the Chef server, which allows it to be faster and more scalable than previous versions. The API itself is still compatible with the original Ruby-based Chef server, which means that cookbooks and recipes that were authored for the Ruby-based Chef server will continue to work on the Erlang-based Chef server. The chef-client is still written in Ruby.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Even though the Chef server is authored in Erlang, writing code in Erlang is NOT a requirement for using Chef.</p> </div> </td> </tr> <tr class=\"row-odd\">\n<td>Amazon Simple Storage Service (S3)</td> <td>\n<p class=\"first\">Bookshelf is used to store cookbook content—files, templates, and so on—that have been uploaded to the Chef server as part of a cookbook version. Cookbook content is stored by content checksum. If two different cookbooks or different versions of the same cookbook include the same file or template, Bookshelf will store that file only once. The cookbook content managed by Bookshelf is stored in flat files and is separated from the Chef server and search index repositories.</p> <p class=\"last\">This represents external cookbooks storage at Amazon Simple Storage Service (S3).</p> </td> </tr> </tbody> </table>  <h3 id=\"aws-settings\">AWS Settings</h3> <p>Use the following configuration settings in the chef-server.rb file to configure external cookbook storage using Amazon Simple Storage Service (S3):</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">bookshelf['access_key_id']</code></td> <td>The access key identifier. (This is configurable and may be pointed at external storage locations, such as Amazon EC2. Four settings require configuration when pointing at an external cookbook storage location: <code class=\"docutils literal\">bookshelf['vip']</code>, for the endpoint used by the chef-client; <code class=\"docutils literal\">bookshelf['external_url']</code>, for the endpoint used by the Chef server; <code class=\"docutils literal\">bookshelf['access_key_id']</code>, for user access key; <code class=\"docutils literal\">bookshelf['secret_access_key']</code>, for secret key; and <code class=\"docutils literal\">opscode_erchef['s3_bucket']</code>, for the bucket name. Reconfigure the Chef server after changing these settings. Default value: generated by default.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">bookshelf['secret_access_key']</code></td> <td>The secret key. (This is configurable and may be pointed at external storage locations, such as Amazon EC2. Four settings require configuration when pointing at an external cookbook storage location: <code class=\"docutils literal\">bookshelf['vip']</code>, for the endpoint used by the chef-client; <code class=\"docutils literal\">bookshelf['external_url']</code>, for the endpoint used by the Chef server; <code class=\"docutils literal\">bookshelf['access_key_id']</code>, for user access key; <code class=\"docutils literal\">bookshelf['secret_access_key']</code>, for secret key; and <code class=\"docutils literal\">opscode_erchef['s3_bucket']</code>, for the bucket name. Reconfigure the Chef server after changing these settings. Default value: generated by default.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">bookshelf['vip']</code></td> <td>The virtual IP address. Default value: <code class=\"docutils literal\">127.0.0.1</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">opscode_erchef['nginx_bookshelf_caching']</code></td> <td>Whether Nginx is used to cache cookbooks. When <code class=\"docutils literal\">:on</code>, Nginx serves up the cached content instead of forwarding the request. Default value: <code class=\"docutils literal\">:off</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">opscode_erchef['s3_bucket']</code></td> <td>The name of the Amazon Simple Storage Service (S3) bucket. (This is configurable and may be pointed at external storage locations, such as Amazon EC2. Four settings require configuration when pointing at an external cookbook storage location: <code class=\"docutils literal\">bookshelf['vip']</code>, for the endpoint used by the chef-client; <code class=\"docutils literal\">bookshelf['external_url']</code>, for the endpoint used by the Chef server; <code class=\"docutils literal\">bookshelf['access_key_id']</code>, for user access key; <code class=\"docutils literal\">bookshelf['secret_access_key']</code>, for secret key; and <code class=\"docutils literal\">opscode_erchef['s3_bucket']</code>, for the bucket name. Reconfigure the Chef server after changing these settings. Default value: <code class=\"docutils literal\">bookshelf</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">opscode_erchef['s3_parallel_ops_fanout']</code></td> <td>Default value: <code class=\"docutils literal\">20</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">opscode_erchef['s3_parallel_ops_timeout']</code></td> <td>Default value: <code class=\"docutils literal\">5000</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">opscode_erchef['s3_url_expiry_window_size']</code></td> <td>The frequency at which unique URLs are generated. This value may be a specific amount of time, i.e. <code class=\"docutils literal\">15m</code> (fifteen minutes) or a percentage of the value of <code class=\"docutils literal\">s3_url_ttl</code>, i.e. <code class=\"docutils literal\">10%</code>. Default value: <code class=\"docutils literal\">:off</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">opscode_erchef['s3_url_ttl']</code></td> <td>The amount of time (in seconds) before connections to the server expire. If node bootstraps are timing out, increase this setting. Default value: <code class=\"docutils literal\">28800</code>.</td> </tr> </tbody> </table>    <h2 id=\"external-postgresql\">External PostgreSQL</h2> <p>The following diagram highlights the specific changes that occur when PostgreSQL is configured and managed independently of the Chef server configuration.</p> <img src=\"https://docs.chef.io/release/server_12-5/_images/server_components_postgresql.svg\" width=\"500px\"> <p>The following table describes the components in an external PostgreSQL configuration that are different from the default configuration of the Chef server:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Component</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Chef Server</td> <td>The Chef server configuration file is updated to point to an independently configured set of servers for PostgreSQL.</td> </tr> <tr class=\"row-odd\">\n<td>PostgreSQL</td> <td>\n<p class=\"first\">PostgreSQL is the data storage repository for the Chef server.</p> <p class=\"last\">This represents the independently configured set of servers that are running PostgreSQL and are configured to act as the data store for the Chef server.</p> </td> </tr> </tbody> </table>  <h3 id=\"postgresql-settings\">PostgreSQL Settings</h3> <p>Use the following configuration settings in the chef-server.rb file to configure PostgreSQL for use with the Chef server:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">postgresql['db_superuser']</code></td> <td>Required when <code class=\"docutils literal\">postgresql['external']</code> is set to <code class=\"docutils literal\">true</code>. The PostgreSQL user name. This user must be granted either the <code class=\"docutils literal\">CREATE ROLE</code> and <code class=\"docutils literal\">CREATE DATABASE</code> permissions in PostgreSQL or be granted <code class=\"docutils literal\">SUPERUSER</code> permission. This user must also have an entry in the host-based authentication configuration file used by PostgreSQL (traditionally named <code class=\"docutils literal\">pg_hba.conf</code>). Default value: <code class=\"docutils literal\">'superuser_userid'</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">postgresql['db_superuser_password']</code></td> <td>Required when <code class=\"docutils literal\">postgresql['external']</code> is set to <code class=\"docutils literal\">true</code>. The password for the user specified by <code class=\"docutils literal\">postgresql['db_superuser']</code>. Default value: <code class=\"docutils literal\">'the password'</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">postgresql['external']</code></td> <td>Required. Set to <code class=\"docutils literal\">true</code> to run PostgreSQL external to the Chef server. Must be set once only on a new installation of the Chef server before the first <code class=\"docutils literal\">chef-server-ctl reconfigure</code> command is run. If this is set after a reconfigure or set to <code class=\"docutils literal\">false</code>, any reconfigure of the Chef server will return an error. Default value: <code class=\"docutils literal\">false</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">postgresql['port']</code></td> <td>Optional when <code class=\"docutils literal\">postgresql['external']</code> is set to <code class=\"docutils literal\">true</code>. The port on which the service is to listen. The port used by PostgreSQL if that port is <strong>not</strong> 5432. Default value: <code class=\"docutils literal\">5432</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">postgresql['vip']</code></td> <td>Required when <code class=\"docutils literal\">postgresql['external']</code> is set to <code class=\"docutils literal\">true</code>. The virtual IP address. The host for this IP address must be online and reachable from the Chef server via the port specified by <code class=\"docutils literal\">postgresql['port']</code>. Set this value to the IP address or hostname for the machine on which external PostgreSQL is located when <code class=\"docutils literal\">postgresql['external']</code> is set to <code class=\"docutils literal\">true</code>.</td> </tr> </tbody> </table> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference external\" href=\"https://docs.chef.io/error_messages.html#external-postgresql\">https://docs.chef.io/error_messages.html#external-postgresql</a> for information about error messages may be present when configuring the Chef server to use a remote PostgreSQL server.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_components.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_components.html</a>\n  </p>\n</div>\n","index":"<h1 id=\"an-overview-of-chef\">An Overview of Chef</h1> <p>Welcome to Chef!</p> <p>Chef is a powerful automation platform that transforms complex infrastructure into code, bringing your servers and services to life. Whether you’re operating in the cloud, on-premises, or a hybrid, Chef automates how applications are configured, deployed, and managed across your network, no matter its size.</p> <p>Chef is built around simple concepts: achieving desired state, centralized modeling of IT infrastructure, and resource primitives that serve as building blocks. These concepts enable you to quickly manage any infrastructure with Chef. These very same concepts allow Chef to handle the most difficult infrastructure challenges on the planet. Anything that can run the chef-client can be managed by Chef.</p>  <h2 id=\"chef-components\">Chef Components</h2> <p>The following diagram shows the relationships between the various elements of Chef, including the nodes, the server, premium features of the server, and the workstation. These elements work together to provide the chef-client the information and instruction that it needs so that it can do its job. As you are reviewing the rest of this topic, use the icons in the tables to refer back to this image.</p> <img src=\"https://docs.chef.io/release/12-9/_images/chef_overview.svg\" width=\"600px\">  <p>Chef has the following major components:</p> <table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"80%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Component</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_workstation.svg\" width=\"100px\">  <img src=\"https://docs.chef.io/release/12-9/_images/icon_cookbook.svg\" width=\"100px\">  <img src=\"https://docs.chef.io/release/12-9/_images/icon_ruby.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">One (or more) workstations are configured to allow users to author, test, and maintain cookbooks. Cookbooks are uploaded to the Chef server from the workstation. Some cookbooks are custom to the organization and others are based on community cookbooks available from the Chef Supermarket.</p> <p>Ruby is the programming language that is the authoring syntax for cookbooks. Most recipes are simple patterns (blocks that define properties and values that map to specific configuration items like packages, files, services, templates, and users). The full power of Ruby is available for when you need a programming language.</p> <p class=\"last\">Often, a workstation is configured to use the Chef development kit as the development toolkit. The Chef development kit is a package from Chef that provides an optional (but recommended) set of tooling, including Chef itself, the chef command line tool, Kitchen, ChefSpec, Berkshelf, and more.</p> </td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_node.svg\" width=\"100px\">  <img src=\"https://docs.chef.io/release/12-9/_images/icon_chef_client.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">A node is any machine—physical, virtual, cloud, network device, etc.—that is under management by Chef.</p> <p class=\"last\">A chef-client is installed on every node that is under management by Chef. The chef-client performs all of the configuration tasks that are specified by the run-list and will pull down any required configuration data from the Chef server as it is needed during the chef-client run.</p> </td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_chef_server.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">The Chef server acts as a hub of information. Cookbooks and policy settings are uploaded to the Chef server by users from workstations. (Policy settings may also be maintained from the Chef server itself, via the Chef management console web user interface.)</p> <p>The chef-client accesses the Chef server from the node on which it’s installed to get configuration data, perform searches of historical chef-client run data, and then pull down the necessary configuration data. After the chef-client run is finished, the chef-client uploads updated run data to the Chef server (as the updated node object), uploads data generated by audit-mode (for additional rules processing by Chef Analytics), and generates reporting data.</p> <p class=\"last\">Chef management console is the user interface for the Chef server. It is used to manage data bags, attributes, run-lists, roles, environments, and cookbooks, and also to configure role-based access for users and groups.</p> </td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_chef_analytics.svg\" width=\"100px\">  </td> <td>Chef Analytics provides real-time visibility into what is happening on the Chef server, including what’s changing, who made those changes, and when they occurred. Details are tracked by the chef-client during the chef-client run. These details are uploaded to the Chef server at the end of the chef-client run. This data is used to build reports, run rules against the output of audit-mode, generate notifications based on the results of auditing, and visibility into messages that were generated during the chef-client run.</td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_chef_supermarket.svg\" width=\"100px\">  </td> <td>Chef Supermarket is the location in which community cookbooks are authored and maintained. Cookbooks that are part of the Chef Supermarket may be used by any Chef user. How community cookbooks are used varies from organization to organization.</td> </tr> </tbody> </table> <p>The premium features of the Chef server—Chef management console, Chef Analytics, chef-client run reporting, high availability configurations, and Chef server replication—may all be installed and configured for use with the Chef server. Each of these premium features are easily enabled and can be run as part of any Chef server deployment!</p> <p>The following sections discuss these elements (and their various components) in more detail.</p>   <h2 id=\"workstations\">Workstations</h2> <p>A workstation is a computer that is configured to run various Chef command-line tools that synchronize with a chef-repo, author cookbooks, interact with the Chef server, interact with nodes, or applications like Delivery.</p> <p>The workstation is the location from which most users do most of their work, including:</p> <ul class=\"simple\"> <li>Developing cookbooks and recipes (and authoring them using Ruby syntax and patterns)</li> <li>Keeping the chef-repo synchronized with version source control</li> <li>Using command-line tools</li> <li>Configuring organizational policy, including defining roles and environments and ensuring that critical data is stored in data bags</li> <li>Interacting with nodes, as (or when) required, such as performing a bootstrap operation</li> </ul> <p>While Chef includes tooling like the Chef development kit, encourages integration and unit testing, and defines workflow around cookbook authoring and policy, it’s important to note that you know best about how your infrastructure should be put together. Therefore, Chef makes as few decisions on its own as possible. When a decision must be made, the chef-client uses a reasonable default setting that can be easily changed. While Chef encourages the use of the tooling packaged in the Chef development kit, none of these tools should be seen as a requirement or pre-requisite for being successful using Chef.</p>  <h3 id=\"tools\">Tools</h3> <p>Some important components of workstations include:</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Component</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_devkit.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">The Chef development kit is a package that contains everything that is needed to start using Chef:</p> <ul class=\"last simple\"> <li>chef-client</li> <li>chef</li> <li>Ohai</li> <li>chef-zero</li> <li>Testing tools like Kitchen, ChefSpec, and Foodcritic</li> <li>Policy, including policy files</li> <li>Chef provisioning</li> <li>Everything else needed to author cookbooks and upload them to the Chef server</li> </ul> </td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_ctl_chef.svg\" width=\"100px\">  <img src=\"https://docs.chef.io/release/12-9/_images/icon_ctl_knife.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">Chef incudes two important command-line tools:</p> <ul class=\"last simple\"> <li>Use the chef command-line tool to work with items in a chef-repo, which is the primary location in which cookbooks are authored, tested, and maintained, and from which policy is uploaded to the Chef server</li> <li>Use the knife command-line tool to interact with nodes or work with objects on the Chef server</li> </ul> </td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_repository.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">The chef-repo is the repository structure in which cookbooks are authored, tested, and maintained:</p> <ul class=\"simple\"> <li>Cookbooks contain recipes, attributes, custom resources, libraries, definitions, files, templates, tests, and metadata</li> <li>The chef-repo should be synchronized with a version control system (such as git), and then managed as if it were source code</li> </ul> <p class=\"last\">The directory structure within the chef-repo varies. Some organizations prefer to keep all of their cookbooks in a single chef-repo, while other organizations prefer to use a chef-repo for every cookbook.</p> </td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_kitchen.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">Use <a class=\"reference external\" href=\"http://kitchen.ci\">Kitchen</a> to automatically test cookbook data across any combination of platforms and test suites:</p> <ul class=\"last simple\"> <li>Defined in a .kitchen.yml file</li> <li>Uses a driver plugin architecture</li> <li>Supports cookbook testing across many cloud providers and virtualization technologies</li> <li>Supports all common testing frameworks that are used by the Ruby community</li> <li>Uses a comprehensive set of base images provided by <a class=\"reference external\" href=\"https://github.com/chef/bento\">Bento</a>\n</li> </ul> </td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_chefspec.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">Use ChefSpec to simulate the convergence of resources on a node:</p> <ul class=\"last simple\"> <li>Runs the chef-client on a local machine</li> <li>Uses chef-zero or chef-solo</li> <li>Is an extension of RSpec, a behavior-driven development (BDD) framework for Ruby</li> <li>Is the fastest way to test resources and recipes</li> </ul> </td> </tr> </tbody> </table>    <h2 id=\"cookbooks\">Cookbooks</h2> <p>A cookbook is the fundamental unit of configuration and policy distribution. A cookbook defines a scenario and contains everything that is required to support that scenario:</p> <ul class=\"simple\"> <li>Recipes that specify the resources to use and the order in which they are to be applied</li> <li>Attribute values</li> <li>File distributions</li> <li>Templates</li> <li>Extensions to Chef, such as libraries, definitions, and custom resources</li> </ul> <p>The chef-client uses Ruby as its reference language for creating cookbooks and defining recipes, with an extended DSL for specific resources. A reasonable set of resources are available to the chef-client, enough to support many of the most common infrastructure automation scenarios; however, this DSL can also be extended when additional resources and capabilities are required.</p>  <h3 id=\"components\">Components</h3> <p>Cookbooks are comprised of the following components:</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Component</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_cookbook_attributes.svg\" width=\"100px\">  </td> <td>An attribute can be defined in a cookbook (or a recipe) and then used to override the default settings on a node. When a cookbook is loaded during a chef-client run, these attributes are compared to the attributes that are already present on the node. Attributes that are defined in attribute files are first loaded according to cookbook order. For each cookbook, attributes in the <code class=\"docutils literal\">default.rb</code> file are loaded first, and then additional attribute files (if present) are loaded in lexical sort order. When the cookbook attributes take precedence over the default attributes, the chef-client will apply those new settings and values during the chef-client run on the node.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_cookbook_files.svg\" width=\"100px\">  </td> <td>Use the <strong>cookbook_file</strong> resource to transfer files from a sub-directory of <code class=\"docutils literal\">COOKBOOK_NAME/files/</code> to a specified path located on a host that is running the chef-client. The file is selected according to file specificity, which allows different source files to be used based on the hostname, host platform (operating system, distro, or as appropriate), or platform version. Files that are located in the <code class=\"docutils literal\">COOKBOOK_NAME/files/default</code> sub-directory may be used on any platform.</td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_cookbook_libraries.svg\" width=\"100px\">  </td> <td>A library allows arbitrary Ruby code to be included in a cookbook, either as a way of extending the classes that are built-in to the chef-client—<code class=\"docutils literal\">Chef::Recipe</code>, for example—or for implementing entirely new functionality, similar to a mixin in Ruby. A library file is a Ruby file that is located within a cookbook’s <code class=\"docutils literal\">/libraries</code> directory. Because a library is built using Ruby, anything that can be done with Ruby can be done in a library file.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_cookbook_metadata.svg\" width=\"100px\">  </td> <td>Every cookbook requires a small amount of metadata. A file named metadata.rb is located at the top of every cookbook directory structure. The contents of the metadata.rb file provides hints to the Chef server to help ensure that cookbooks are deployed to each node correctly.</td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_cookbook_recipes.svg\" width=\"100px\">  <img src=\"https://docs.chef.io/release/12-9/_images/icon_recipe_dsl.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">A recipe is the most fundamental configuration element within the organization. A recipe:</p> <ul class=\"simple\"> <li>Is authored using Ruby, which is a programming language designed to read and behave in a predictable manner</li> <li>Is mostly a collection of resources, defined using patterns (resource names, attribute-value pairs, and actions); helper code is added around this using Ruby, when needed</li> <li>Must define everything that is required to configure part of a system</li> <li>Must be stored in a cookbook</li> <li>May be included in a recipe</li> <li>May use the results of a search query and read the contents of a data bag (including an encrypted data bag)</li> <li>May have a dependency on one (or more) recipes</li> <li>May tag a node to facilitate the creation of arbitrary groupings</li> <li>Must be added to a run-list before it can be used by the chef-client</li> <li>Is always executed in the same order as listed in a run-list</li> </ul> <p>The chef-client will run a recipe only when asked. When the chef-client runs the same recipe more than once, the results will be the same system state each time. When a recipe is run against a system, but nothing has changed on either the system or in the recipe, the chef-client won’t change anything.</p> <p class=\"last\">The Recipe DSL is a Ruby DSL that is primarily used to declare resources from within a recipe. The Recipe DSL also helps ensure that recipes interact with nodes (and node properties) in the desired manner. Most of the methods in the Recipe DSL are used to find a specific parameter and then tell the chef-client what action(s) to take, based on whether that parameter is present on a node.</p> </td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_cookbook_resources.svg\" width=\"100px\">  <img src=\"https://docs.chef.io/release/12-9/_images/icon_cookbook_providers.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">A resource is a statement of configuration policy that:</p> <ul class=\"simple\"> <li>Describes the desired state for a configuration item</li> <li>Declares the steps needed to bring that item to the desired state</li> <li>Specifies a resource type—such as <code class=\"docutils literal\">package</code>, <code class=\"docutils literal\">template</code>, or <code class=\"docutils literal\">service</code>\n</li> <li>Lists additional details (also known as resource properties), as necessary</li> <li>Are grouped into recipes, which describe working configurations</li> </ul> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p class=\"last\">Chef has <a class=\"reference external\" href=\"https://docs.chef.io/resources.html\">many built-in resources</a> that cover all of the most common actions across all of the most common platforms. You can <a class=\"reference external\" href=\"https://docs.chef.io/lwrp.html\">build your own resources</a> for handle any situation that isn’t covered by a built-in resource.</p> </td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_cookbook_templates.svg\" width=\"100px\">  </td> <td>A cookbook template is an Embedded Ruby (ERB) template that is used to dynamically generate static text files. Templates may contain Ruby expressions and statements, and are a great way to manage configuration files. Use the <strong>template</strong> resource to add cookbook templates to recipes; place the corresponding Embedded Ruby (ERB) template file in a cookbook’s <code class=\"docutils literal\">/templates</code> directory.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_cookbook_tests.svg\" width=\"100px\">  </td> <td>Testing cookbooks improves the quality of those cookbooks by ensuring they are doing what they are supposed to do and that they are authored in a consistent manner. Unit and integration testing validates the recipes in cookbooks. Syntax testing—often called linting—validates the quality of the code itself. The following tools are popular tools used for testing Chef recipes: Kitchen, ChefSpec, and Foodcritic.</td> </tr> </tbody> </table>    <h2 id=\"nodes\">Nodes</h2> <p>A node is any machine—physical, virtual, cloud, network device, etc.—that is under management by Chef.</p>  <h3 id=\"node-types\">Node Types</h3> <p>The types of nodes that can be managed by Chef include, but are not limited to, the following:</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Node Type</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_node_type_server.svg\" width=\"100px\">  </td> <td>A physical node is typically a server or a virtual machine, but it can be any active device attached to a network that is capable of sending, receiving, and forwarding information over a communications channel. In other words, a physical node is any active device attached to a network that can run a chef-client and also allow that chef-client to communicate with a Chef server.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_node_type_cloud_public.svg\" width=\"100px\">  </td> <td>A cloud-based node is hosted in an external cloud-based service, such as Amazon Web Services (AWS), OpenStack, Rackspace, Google Compute Engine, or Microsoft Azure. Plugins are available for knife that provide support for external cloud-based services. knife can use these plugins to create instances on cloud-based services. Once created, the chef-client can be used to deploy, configure, and maintain those instances.</td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_node_virtual_machine.svg\" width=\"100px\">  </td> <td>A virtual node is a machine that runs only as a software implementation, but otherwise behaves much like a physical machine.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_node_type_network_device.svg\" width=\"100px\">  </td> <td>A network node is any networking device—a switch, a router—that is being managed by a chef-client, such as networking devices by Juniper Networks, Arista, Cisco, and F5. Use Chef to automate common network configurations, such physical and logical Ethernet link properties and VLANs, on these devices.</td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_node_type_container.svg\" width=\"100px\">  </td> <td>Containers are an approach to virtualization that allows a single operating system to host many working configurations, where each working configuration—a container—is assigned a single responsibility that is isolated from all other responsibilities. Containers are popular as a way to manage distributed and scalable applications and services.</td> </tr> </tbody> </table>   <h3 id=\"chef-on-nodes\">Chef on Nodes</h3> <p>The key components of nodes that are under management by Chef include:</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Component</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_chef_client.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">A chef-client is an agent that runs locally on every node that is under management by Chef. When a chef-client is run, it will perform all of the steps that are required to bring the node into the expected state, including:</p> <ul class=\"simple\"> <li>Registering and authenticating the node with the Chef server</li> <li>Building the node object</li> <li>Synchronizing cookbooks</li> <li>Compiling the resource collection by loading each of the required cookbooks, including recipes, attributes, and all other dependencies</li> <li>Taking the appropriate and required actions to configure the node</li> <li>Looking for exceptions and notifications, handling each as required</li> </ul> <p class=\"last\">RSA public key-pairs are used to authenticate the chef-client with the Chef server every time a chef-client needs access to data that is stored on the Chef server. This prevents any node from accessing data that it shouldn’t and it ensures that only nodes that are properly registered with the Chef server can be managed.</p> </td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_ohai.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">Ohai is a tool that is used to detect attributes on a node, and then provide these attributes to the chef-client at the start of every chef-client run. Ohai is required by the chef-client and must be present on a node. (Ohai is installed on a node as part of the chef-client install process.)</p> <p>The types of attributes Ohai collects include (but are not limited to):</p> <ul class=\"simple\"> <li>Platform details</li> <li>Network usage</li> <li>Memory usage</li> <li>CPU data</li> <li>Kernel data</li> <li>Host names</li> <li>Fully qualified domain names</li> <li>Other configuration details</li> </ul> <p class=\"last\">Attributes that are collected by Ohai are automatic attributes, in that these attributes are used by the chef-client to ensure that these attributes remain unchanged after the chef-client is done configuring the node.</p> </td> </tr> </tbody> </table>    <h2 id=\"the-chef-server-title\">The Chef Server</h2> <p>The Chef server acts as a hub for configuration data. The Chef server stores cookbooks, the policies that are applied to nodes, and metadata that describes each registered node that is being managed by the chef-client. Nodes use the chef-client to ask the Chef server for configuration details, such as recipes, templates, and file distributions. The chef-client then does as much of the configuration work as possible on the nodes themselves (and not on the Chef server). This scalable approach distributes the configuration effort throughout the organization.</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_search.svg\" width=\"100px\">  </td> <td>Search indexes allow queries to be made for any type of data that is indexed by the Chef server, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the <code class=\"docutils literal\">search</code> subcommand in knife, the <code class=\"docutils literal\">search</code> method in the Recipe DSL, the search box in the Chef management console, and by using the <code class=\"docutils literal\">/search</code> or <code class=\"docutils literal\">/search/INDEX</code> endpoints in the Chef server API. The search engine is based on Apache Solr and is run from the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_manage.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">Chef management console is a web-based interface for the Chef server that provides users a way to manage the following objects:</p> <ul class=\"last simple\"> <li>Nodes</li> <li>Cookbooks and recipes</li> <li>Roles</li> <li>Stores of JSON data (data bags), including encrypted data</li> <li>Environments</li> <li>Searching of indexed data</li> <li>User accounts and user data for the individuals who have permission to log on to and access the Chef server</li> </ul> </td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_data_bags.svg\" width=\"100px\">  </td> <td>A data bag is a global variable that is stored as JSON data and is accessible from a Chef server. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_policy.svg\" width=\"100px\">  </td> <td>Policy defines how business and operational requirements, processes, and production workflows map to objects that are stored on the Chef server. Policy objects on the Chef server include roles, environments, and cookbook versions.</td> </tr> </tbody> </table>  <h3 id=\"policy\">Policy</h3> <p>Policy maps business and operational requirements, process, and workflow to settings and objects stored on the Chef server:</p> <ul class=\"simple\"> <li>Roles define server types, such as “web server” or “database server”</li> <li>Environments define process, such as “dev”, “staging”, or “production”</li> <li>Certain types of data—passwords, user account data, and other sensitive items—can be placed in data bags, which are located in a secure sub-area on the Chef server that can only be accessed by nodes that authenticate to the Chef server with the correct SSL certificates</li> <li>The cookbooks (and cookbook versions) in which organization-specific configuration policies are maintained</li> </ul> <p>Some important aspects of policy include:</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_roles.svg\" width=\"100px\">  </td> <td>A role is a way to define certain patterns and processes that exist across nodes in an organization as belonging to a single job function. Each role consists of zero (or more) attributes and a run-list. Each node can have zero (or more) roles assigned to it. When a role is run against a node, the configuration details of that node are compared against the attributes of the role, and then the contents of that role’s run-list are applied to the node’s configuration details. When a chef-client runs, it merges its own attributes and run-lists with those contained within each assigned role.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_environments.svg\" width=\"100px\">  </td> <td>An environment is a way to map an organization’s real-life workflow to what can be configured and managed when using Chef server. Every organization begins with a single environment called the <code class=\"docutils literal\">_default</code> environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization’s patterns and workflow. For example, creating <code class=\"docutils literal\">production</code>, <code class=\"docutils literal\">staging</code>, <code class=\"docutils literal\">testing</code>, and <code class=\"docutils literal\">development</code> environments. Generally, an environment is also associated with one (or more) cookbook versions.</td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_cookbook_versions.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">A cookbook version represents a set of functionality that is different from the cookbook on which it is based. A version may exist for many reasons, such as ensuring the correct use of a third-party component, updating a bug fix, or adding an improvement. A cookbook version is defined using syntax and operators, may be associated with environments, cookbook metadata, and/or run-lists, and may be frozen (to prevent unwanted updates from being made).</p> <p class=\"last\">A cookbook version is maintained just like a cookbook, with regard to source control, uploading it to the Chef server, and how the chef-client applies that cookbook when configuring nodes.</p> </td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_run_lists.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">A run-list defines all of the information necessary for Chef to configure a node into the desired state. A run-list is:</p> <ul class=\"last simple\"> <li>An ordered list of roles and/or recipes that are run in the exact order defined in the run-list; if a recipe appears more than once in the run-list, the chef-client will not run it twice</li> <li>Always specific to the node on which it runs; nodes may have a run-list that is identical to the run-list used by other nodes</li> <li>Stored as part of the node object on the Chef server</li> <li>Maintained using knife, and then uploaded from the workstation to the Chef server, or is maintained using the Chef management console</li> </ul> </td> </tr> </tbody> </table>    <h2 id=\"analytics\">Analytics</h2> <p>The Chef Analytics platform is a feature of Chef that provides real-time visibility into what is happening on the Chef server, including what’s changing, who made those changes, and when they occurred. Individuals may be notified of these changes in real-time. Use this visibility to verify compliance against internal controls.</p> <p>Chef Analytics includes:</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_actions.svg\" width=\"100px\">  </td> <td>Actions are policy and administrative changes made to the Chef server. The Chef server gathers a lot of data—–each node object, the node run history for all nodes, the history of every cookbook and cookbook version, how policy settings, such as roles, environments, and data bags, are applied and to what they are applied, individual user data, and so on.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_rules.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">Chef Analytics includes a powerful rules processing system that allows notifications to be generated based on observed events in the data stream, such as:</p> <ul class=\"simple\"> <li>Cookbook uploads</li> <li>Modifications to environments</li> <li>Machines on which chef-client runs have failed</li> <li>Machines on which audit-mode runs have failed</li> <li>Resources that were updated as a result of a chef-client run</li> </ul> <p class=\"last\">Notifications may be sent to any email address, a chat service like HipChat or Slack, or to a webhook-based service for generic intergrations.</p> </td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_reports.svg\" width=\"100px\">  </td> <td>Reporting is used to keep track of what happened during the execution of chef-client runs across all of the infrastructure that is being managed by Chef. Reports can be generated for the entire organization and they can be generated for specific nodes.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_controls.svg\" width=\"100px\">  </td> <td>A control is an automated test that is built into a cookbook, and then used to test the state of the system for compliance. Compliance can be many things. For example, ensuring that file and directory management meets specific internal IT policies—”Does the file exist?”, “Do the correct users or groups have access to this directory?”. Compliance may also be complex, such as helping to ensure goals defined by large-scale compliance frameworks such as PCI, HIPAA, and Sarbanes-Oxley can be met.</td> </tr> </tbody> </table>   <h2 id=\"conclusion\">Conclusion</h2> <p>Chef is a thin DSL (domain-specific language) built on top of Ruby. This approach allows Chef to provide just enough abstraction to make reasoning about your infrastructure easy. Chef includes a built-in taxonomy of all the basic resources one might configure on a system, plus a defined mechanism to extend that taxonomy using the full power of the Ruby language. Ruby was chosen because it provides the flexibility to use both the simple built-in taxonomy, as well being able to handle any customization path your organization requires.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/chef_overview.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/chef_overview.html</a>\n  </p>\n</div>\n","server_12-5/auth":"<h1 id=\"authentication-authorization\">Authentication, Authorization</h1> <p>All communication with the Chef server must be authenticated using the Chef server API, which is a REST API that allows requests to made to the Chef server. Only authenticated requests will be authorized. Most of the time, and especially when using knife, the chef-client, or the Chef server web interface, the use of the Chef server API is transparent. In some cases, the use of the Chef server API requires more detail, such as when making the request in Ruby code, with a knife plugin, or when using cURL.</p>  <h2 id=\"authentication\">Authentication</h2> <p>The authentication process ensures the Chef server responds only to requests made by trusted users. Public key encryption is used by the Chef server. When a node and/or a workstation is configured to run the chef-client, both public and private keys are created. The public key is stored on the Chef server, while the private key is returned to the user for safe keeping. (The private key is a .pem file located in the <code class=\"docutils literal\">.chef</code> directory or in <code class=\"docutils literal\">/etc/chef</code>.)</p> <p>Both the chef-client and knife use the Chef server API when communicating with the Chef server. The chef-validator uses the Chef server API, but only during the first chef-client run on a node.</p> <p>Each request to the Chef server from those executables sign a special group of HTTP headers with the private key. The Chef server then uses the public key to verify the headers and verify the contents.</p>  <h3 id=\"chef-validator\">chef-validator</h3> <p>Every request made by the chef-client to the Chef server must be an authenticated request using the Chef server API and a private key. When the chef-client makes a request to the Chef server, the chef-client authenticates each request using a private key located in <code class=\"docutils literal\">/etc/chef/client.pem</code>.</p> <p>However, during the first chef-client run, this private key does not exist. Instead, the chef-client will attempt to use the private key assigned to the chef-validator, located in <code class=\"docutils literal\">/etc/chef/validation.pem</code>. (If, for any reason, the chef-validator is unable to make an authenticated request to the Chef server, the initial chef-client run will fail.)</p> <p>During the initial chef-client run, the chef-client will register with the Chef server using the private key assigned to the chef-validator, after which the chef-client will obtain a <code class=\"docutils literal\">client.pem</code> private key for all future authentication requests to the Chef server.</p> <p>After the initial chef-client run has completed successfully, the chef-validator is no longer required and may be deleted from the node. Use the <code class=\"docutils literal\">delete_validation</code> recipe found in the <code class=\"docutils literal\">chef-client</code> cookbook (<a class=\"reference external\" href=\"https://github.com/chef-cookbooks/chef-client\">https://github.com/chef-cookbooks/chef-client</a>) to remove the chef-validator.</p>   <h3 id=\"during-a-chef-client-title-run\">During a chef-client Run</h3> <p>RSA public key-pairs are used to authenticate the chef-client with the Chef server every time a chef-client needs access to data that is stored on the Chef server. This prevents any node from accessing data that it shouldn’t and it ensures that only nodes that are properly registered with the Chef server can be managed.</p>   <h3 id=\"knife-title\">Knife</h3> <p>RSA public key-pairs are used to authenticate knife with the Chef server every time knife attempts to access the Chef server. This ensures that each instance of knife is properly registered with the Chef server and that only trusted users can make changes to the data.</p> <p>knife can also use the <code class=\"docutils literal\">knife exec</code> subcommand to make specific, authenticated requests to the Chef server. knife plugins can also make authenticated requests to the Chef server by leveraging the <code class=\"docutils literal\">knife exec</code> subcommand.</p>  <h4 id=\"api-requests\">API Requests</h4> <p>A knife plugin is a set of one (or more) subcommands that can be added to knife to support additional functionality that is not built-in to the base set of knife subcommands. Many of the knife plugins are built by members of the Chef community and several of them are built and maintained by Chef. A knife plugin is installed to the <code class=\"docutils literal\">~/.chef/plugins/knife/</code> directory, from where it can be run just like any other knife subcommand.</p> <p>A knife plugin can be used to make authenticated API requests to the Chef server using the following methods:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Method</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">rest.delete_rest</code></td> <td>Use to delete an object from the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">rest.get_rest</code></td> <td>Use to get the details of an object on the Chef server.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">rest.post_rest</code></td> <td>Use to add an object to the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">rest.put_rest</code></td> <td>Use to update an object on the Chef server.</td> </tr> </tbody> </table> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">module MyCommands\n  class MyNodeDelete &lt; Chef::Knife\n    #An implementation of knife node delete\n    banner 'knife my node delete [NODE_NAME]'\n\n  def run\n    if name_args.length &lt; 1\n      show_usage\n      ui.fatal(\"You must specify a node name.\")\n      exit 1\n    end\n    nodename = name_args[0]\n       api_endpoint = \"nodes/#{nodename}\"\n       # Again, we could just call rest.delete_rest\n       nodey = rest.get_rest(api_endpoint)\n       ui.confirm(\"Do you really want to delete #{nodey}\")\n       nodey.destroy\n     end\n   end\nend</pre>    <h3 id=\"from-the-web-interface\">From the Web Interface</h3> <p>The Chef server user interface uses the Chef server API to perform most operations. This ensures that authentication requests to the Chef server are authorized. This authentication process is handled automatically and is not something that users of the hosted Chef server will need to manage. For the on-premises Chef server, the authentication keys used by the web interface will need to be maintained by the individual administrators who are responsible for managing the server.</p>   <h3 id=\"other-options\">Other Options</h3> <p>The most common ways to interact with the Chef server using the Chef server API abstract the API from the user. That said, the Chef server API can be interacted with directly. The following sections describe a few of the ways that are available for doing that.</p>  <h4 id=\"curl\">cURL</h4> <p>An API request can be made using cURL, which is a Bash shell script that requires two utilities: awk and openssl. The following example shows how an authenticated request can be made using the Chef server API and cURL:</p> <pre class=\"highlight-bash\" data-language=\"bash\">#!/usr/bin/env bash\n\n_chef_dir () {\n  # Helper function:\n  # Recursive function that searches for chef configuration directory\n  # It looks upward from the cwd until it hits /.  If no directory is found,\n  # ~/.chef is chosen if it exists\n  # You could simply hard-code the path below\n\n  if [ \"$PWD\" = \"/\" ]; then\n  if [ -d \".chef\" ]; then\n    echo \"/.chef\"\n      elif [ -d \"$HOME/.chef\" ]; then\n        echo \"$HOME/.chef\"\n      fi\n    return\n  fi\n\n  if [ -d '.chef' ];then\n    echo \"${PWD}/.chef\"\n  else\n    (cd ..; _chef_dir)\n  fi\n}\n\n_chomp () {\n  # helper function to remove newlines\n  awk '{printf \"%s\", $0}'\n}\n\nchef_api_request() {\n  # This is the meat-and-potatoes, or rice-and-vegetables, your preference really.\n\n  local method path body timestamp chef_server_url client_name hashed_body hashed_path\n  local canonical_request headers auth_headers\n\n  chef_server_url=\"https://api.opscode.com/organizations/my_org\"\n  # '/organizations/ORG_NAME' is needed\n  if echo $chef_server_url | grep -q \"/organizations/\" ; then\n    endpoint=/organizations/${chef_server_url#*/organizations/}${2%%\\?*}\n  else\n    endpoint=${2%%\\?*}\n  fi\n  path=${chef_server_url}$2\n  client_name=\"chef_user\"\n  method=$1\n  body=$3\n\n  hashed_path=$(echo -n \"$endpoint\" | openssl dgst -sha1 -binary | openssl enc -base64)\n  hashed_body=$(echo -n \"$body\" | openssl dgst -sha1 -binary | openssl enc -base64)\n  timestamp=$(date -u \"+%Y-%m-%dT%H:%M:%SZ\")\n\n  canonical_request=\"Method:$method\\nHashed Path:$hashed_path\\nX-Ops-Content-Hash:$hashed_body\\nX-Ops-Timestamp:$timestamp\\nX-Ops-UserId:$client_name\"\n  headers=\"-H X-Ops-Timestamp:$timestamp \\\n    -H X-Ops-Userid:$client_name \\\n    -H X-Chef-Version:0.10.4 \\\n    -H Accept:application/json \\\n    -H X-Ops-Content-Hash:$hashed_body \\\n    -H X-Ops-Sign:version=1.0\"\n\n  auth_headers=$(printf \"$canonical_request\" | openssl rsautl -sign -inkey \\\n    \"$(_chef_dir)/${client_name}.pem\" | openssl enc -base64 | _chomp |  awk '{ll=int(length/60);i=0; \\\n    while (i&lt;=ll) {printf \" -H X-Ops-Authorization-%s:%s\", i+1, substr($0,i*60+1,60);i=i+1}}')\n\n  case $method in\n    GET)\n      curl_command=\"curl $headers $auth_headers $path\"\n      $curl_command\n      ;;\n    *)\n      echo \"Unknown Method. I only know: GET\" &gt;&amp;2\n      return 1\n      ;;\n    esac\n  }\n\n chef_api_request \"$@\"</pre> <p>After saving this shell script to a file named <code class=\"docutils literal\">chef_api_request</code>, use it similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ bash chef_api_request GET \"/clients\"</pre>   <h4 id=\"pychef\">PyChef</h4> <p>An API request can be made using PyChef, which is a Python library that meets the <code class=\"docutils literal\">Mixlib::Authentication</code> requirements so that it can easily interact with the Chef server. The following example shows how an authenticated request can be made using the Chef server API and PyChef:</p> <pre class=\"highlight-python\" data-language=\"python\">from chef import autoconfigure, Node\n\napi = autoconfigure()\nn = Node('web1')\nprint n['fqdn']\nn['myapp']['version'] = '1.0'\nn.save()</pre> <p>and the following example shows how to make API calls directly:</p> <pre class=\"highlight-python\" data-language=\"python\">from chef import autoconfigure\n\napi = autoconfigure()\nprint api.api_request('GET', '/clients')</pre> <p>The previous examples assume that the current working directory is such that PyChef can find a valid configuration file in the same manner as the chef-client or knife. For more about PyChef, see: <a class=\"reference external\" href=\"https://github.com/coderanger/pychef\">https://github.com/coderanger/pychef</a>.</p>   <h4 id=\"ruby\">Ruby</h4> <p>On a system with the chef-client installed, use Ruby to make an authenticated request to the Chef server:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'rubygems'\nrequire 'chef/config'\nrequire 'chef/log'\nrequire 'chef/rest'\n\nchef_server_url = 'https://chefserver.com'\nclient_name = 'clientname'\nsigning_key_filename = '/path/to/pem/for/clientname'\n\nrest = Chef::REST.new(chef_server_url, client_name, signing_key_filename)\nputs rest.get_rest('/clients')</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'rubygems'\nrequire 'mixlib/cli'\nrequire 'chef'\nrequire 'chef/node'\nrequire 'chef/mixin/xml_escape'\nrequire 'json'\n\nconfig_file = 'c:/chef/client.rb'\nChef::Config.from_file(config_file)\nChef::Log.level = Chef::Config[:log_level]\n\ndef Usage()\n  puts '/etc/chef/client.rb' # The config file location, e.g. ~/home/.chef/knife.rb etc\n  config_file = gets.chomp\n  if (!File.exist?(config_file))\n    puts 'config_file #{config_file} does not exist. Exiting.\\n'\n    exit\n  end\n  STDOUT.puts &lt;&lt;-EOF\n    Choose options e.g. 1\n\n    1 Display all nodes per environment\n    2 Display all nodes in detail (can be slow if there a large number of nodes)\n    9 Exit\n  EOF\nend\n\ndef ExecuteUserChoice()\n  testoption = gets.chomp\n  case testoption\n  when '1'\n    Execute(method(:DisplayNodesPerEnv))\n  when '2'\n    Execute(method(:DisplayNodesDetail))\n  when '9'\n    puts 'exit'\n  else\n    puts 'Unknown option #{testoption}. Exiting\\n'\n    exit\n  end\nend\n\ndef DisplayNodesPerEnv()\n  Chef::Environment.list(false).each do |envr|\n    print 'ENVIRONMENT: ', envr[0], '\\n'\n    Chef::Node.list_by_environment(envr[0], false).each do |node_info|\n      print '\\tNODE: ', node_info[0], '\\n'\n      print '\\t\\tURL: ', node_info[1], '\\n'\n    end\n  end\nend\n\ndef DisplayNodesDetail()\n  Chef::Node.list(true).each do |node_array|\n    node = node_array[1]\n    print '#{node.name}\\n'\n    print '\\t#{node[:fqdn]}\\n'\n    print '\\t#{node[:kernel][:machine]}\\n'\n    print '\\t#{node[:kernel][:os]}\\n'\n    print '\\t#{node[:platform]}\\n'\n    print '\\t#{node[:platform_version]}\\n'\n    print '\\t#{node.chef_environment}\\n'\n    print '\\t#{node.run_list.roles}\\n'\n  end\nend\n\ndef Execute(option)\n  begin\n    profilestart = Time.now\n    option.call()\n    profileend = Time.now\n    timeofrun = profileend - profilestart\n    print 'Time taken = #{timeofrun}'\n  rescue Exception =&gt; ex\n    print 'Error calling chef API'\n    print ex.message\n    print ex.backtrace.join('\\n')\n  end\nend\n\nUsage()\nExecuteUserChoice()</pre> <p>Another way Ruby can be used with the Chef server API is to get objects from the Chef server, and then interact with the returned data using Ruby methods. Whenever possible, the Chef server API will return an object of the relevant type. The returned object is then available to be called by other methods. For example, the <code class=\"docutils literal\">api.get</code> method can be used to return a node named <code class=\"docutils literal\">foobar</code>, and then <code class=\"docutils literal\">.destroy</code> can be used to delete that node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">silly_node = api.get('/nodes/foobar')\nsilly_node.destroy</pre>    <h3 id=\"debug-authentication-issues\">Debug Authentication Issues</h3> <p>In some cases, the chef-client may receive a 401 response to the authentication request and a 403 response to an authorization request. An authentication error error may look like the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">[Wed, 05 Oct 2011 15:43:34 -0700] INFO: HTTP Request Returned 401\nUnauthorized: Failed to authenticate as node_name. Ensure that your node_name and client key are correct.</pre> <p>To debug authentication problems, determine which chef-client is attempting to authenticate. This is often found in the log messages for that chef-client. Debug logging can be enabled on a chef-client using the following command:</p> <blockquote> <div>\n<pre class=\"highlight-bash\" data-language=\"bash\">$ chef-client -l debug</pre> <p>When debug logging is enabled, a log entry will look like the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">[Wed, 05 Oct 2011 22:05:35 +0000] DEBUG: Signing the request as NODE_NAME</pre> </div>\n</blockquote> <p>If the authentication request occurs during the initial chef-client run, the issue is most likely with the private key.</p> <p>If the authentication is happening on the node, there are a number of common causes:</p> <ul class=\"simple\"> <li>The <code class=\"docutils literal\">client.pem</code> file is incorrect. This can be fixed by deleting the <code class=\"docutils literal\">client.pem</code> file and re-running the chef-client. When the chef-client re-runs, it will re-attempt to register with the Chef server and generate the correct key.</li> <li>A <code class=\"docutils literal\">node_name</code> is different from the one used during the initial chef-client run. This can happen for a number of reasons. For example, if the client.rb file does not specify the correct node name and the host name has recently changed. This issue can be resolved by explicitly setting the node name in the client.rb file or by using the <code class=\"docutils literal\">-N</code> option for the chef-client executable.</li> <li>The system clock has drifted from the actual time by more than 15 minutes. This can be fixed by syncing the clock with an Network Time Protocol (NTP) server.</li> </ul>    <h2 id=\"authorization\">Authorization</h2> <p>The Chef server uses a role-based access control (RBAC) model to ensure that users may only perform authorized actions.</p>  <h3 id=\"chef-server-title\">Chef Server</h3> <p>The Chef server uses role-based access control (RBAC) to restrict access to objects—nodes, environments, roles, data bags, cookbooks, and so on. This ensures that only authorized user and/or chef-client requests to the Chef server are allowed. Access to objects on the Chef server is fine-grained, allowing access to be defined by object type, object, group, user, and organization. The Chef server uses permissions to define how a user may interact with an object, after they have been authorized to do so.</p> <p>The Chef server uses organizations, groups, and users to define role-based access control:</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/server_12-5/_images/icon_server_organization.svg\" width=\"100px\">  </td> <td>An organization is the top-level entity for role-based access control in the Chef server. Each organization contains the default groups (<code class=\"docutils literal\">admins</code>, <code class=\"docutils literal\">clients</code>, and <code class=\"docutils literal\">users</code>, plus <code class=\"docutils literal\">billing_admins</code> for the hosted Chef server), at least one user and at least one node (on which the chef-client is installed). The Chef server supports multiple organizations. The Chef server includes a single default organization that is defined during setup. Additional organizations can be created after the initial setup and configuration of the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/server_12-5/_images/icon_server_groups.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">A group is used to define access to object types and objects in the Chef server and also to assign permissions that determine what types of tasks are available to members of that group who are authorized to perform them. Groups are configured per-organization.</p> <p class=\"last\">Individual users who are members of a group will inherit the permissions assigned to the group. The Chef server includes the following default groups: <code class=\"docutils literal\">admins</code>, <code class=\"docutils literal\">clients</code>, and <code class=\"docutils literal\">users</code>. For users of the hosted Chef server, an additional default group is provided: <code class=\"docutils literal\">billing_admins</code>.</p> </td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/server_12-5/_images/icon_server_users.svg\" width=\"100px\">  </td> <td>A user is any non-administrator human being who will manage data that is uploaded to the Chef server from a workstation or who will log on to the Chef management console web user interface. The Chef server includes a single default user that is defined during setup and is automatically assigned to the <code class=\"docutils literal\">admins</code> group.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/server_12-5/_images/icon_chef_client.svg\" width=\"100px\">  </td> <td>A client is an actor that has permission to access the Chef server. A client is most often a node (on which the chef-client runs), but is also a workstation (on which knife runs), or some other machine that is configured to use the Chef server API. Each request to the Chef server that is made by a client uses a private key for authentication that must be authorized by the public key on the Chef server.</td> </tr> </tbody> </table> <p>When a user makes a request to the Chef server using the Chef server API, permission to perform that action is determined by the following process:</p> <ol class=\"arabic simple\"> <li>Check if the user has permission to the object type</li> <li>If no, recursively check if the user is a member of a security group that has permission to that object</li> <li>If yes, allow the user to perform the action</li> </ol> <p>Permissions are managed using the Chef management console add-on in the Chef server web user interface.</p>  <h4 id=\"object-permissions\">Object Permissions</h4> <p>The Chef server includes the following object permissions:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Permission</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><strong>Delete</strong></td> <td>Use the <strong>Delete</strong> permission to define which users and groups may delete an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] delete [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Grant</strong></td> <td>Use the <strong>Grant</strong> permission to define which users and groups may configure permissions on an object. This permission is required for any user who configures permissions using the <strong>Administration</strong> tab in the Chef management console.</td> </tr> <tr class=\"row-even\">\n<td><strong>Read</strong></td> <td>Use the <strong>Read</strong> permission to define which users and groups may view the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] show [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Update</strong></td> <td>Use the <strong>Update</strong> permission to define which users and groups may edit the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] edit [object_name]</code> argument to interact with objects on the Chef server and for any chef-client to save node data to the Chef server at the conclusion of a chef-client run.</td> </tr> </tbody> </table>   <h4 id=\"global-permissions\">Global Permissions</h4> <p>The Chef server includes the following global permissions:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Permission</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><strong>Create</strong></td> <td>Use the <strong>Create</strong> global permission to define which users and groups may create the following server object types: cookbooks, data bags, environments, nodes, roles, and tags. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] create</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>List</strong></td> <td>Use the <strong>List</strong> global permission to define which users and groups may view the following server object types: cookbooks, data bags, environments, nodes, roles, and tags. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] list</code> argument to interact with objects on the Chef server.</td> </tr> </tbody> </table> <p>These permissions set the default permissions for the following Chef server object types: clients, cookbooks, data bags, environments, groups, nodes, roles, and sandboxes.</p>   <h4 id=\"client-key-permissions\">Client Key Permissions</h4> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is only necessary after migrating a client from one Chef server to another. Permissions must be reset for client keys after the migration.</p> </div> <p>A client is an actor that has permission to access the Chef server. A client is most often a node (on which the chef-client runs), but is also a workstation (on which knife runs), or some other machine that is configured to use the Chef server API. Each request to the Chef server that is made by a client uses a private key for authentication that must be authorized by the public key on the Chef server.</p> <p>Keys should have <code class=\"docutils literal\">DELETE</code>, <code class=\"docutils literal\">GRANT</code>, <code class=\"docutils literal\">READ</code> and <code class=\"docutils literal\">UPDATE</code> permissions.</p> <p>Use the following code to set the correct permissions:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">#!/usr/bin/env ruby\nrequire 'rubygems'\nrequire 'chef/knife'\n\nChef::Config.from_file(File.join(Chef::Knife.chef_config_dir, 'knife.rb'))\n\nrest = Chef::REST.new(Chef::Config[:chef_server_url])\n\nChef::Node.list.each do |node|\n  %w{read update delete grant}.each do |perm|\n    ace = rest.get(\"nodes/#{node[0]}/_acl\")[perm]\n    ace['actors'] &lt;&lt; node[0] unless ace['actors'].include?(node[0])\n    rest.put(\"nodes/#{node[0]}/_acl/#{perm}\", perm =&gt; ace)\n    puts \"Client \\\"#{node[0]}\\\" granted \\\"#{perm}\\\" access on node \\\"#{node[0]}\\\"\"\n  end\nend</pre> <p>Save it as a Ruby script—<code class=\"docutils literal\">chef_server_permissions.rb</code>, for example—in the <code class=\"docutils literal\">.chef/scripts</code> directory located in the chef-repo, and then run a knife command similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife exec chef_server_permissions.rb</pre>   <h4 id=\"default-groups\">Default Groups</h4> <p>The Chef server includes the following default groups:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Group</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">admins</code></td> <td>The <code class=\"docutils literal\">admins</code> group defines the list of users who have administrative rights to all objects and object types for a single organization.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">billing_admins</code></td> <td>The <code class=\"docutils literal\">billing_admins</code> group defines the list of users who have permission to manage billing information. This permission exists only for the hosted Chef server.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">clients</code></td> <td>The <code class=\"docutils literal\">clients</code> group defines the list of nodes on which a chef-client is installed and under management by Chef. In general, think of this permission as “all of the non-human actors—the chef-client, in nearly every case—that get data from, and/or upload data to, the Chef server”. Newly-created chef-client instances are added to this group automatically.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">public_key_read_access</code></td> <td>The <code class=\"docutils literal\">public_key_read_access</code> group defines which users and clients have read permissions to key-related endpoints in the Chef server API.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">users</code></td> <td>The <code class=\"docutils literal\">users</code> group defines the list of users who use knife and the Chef management console to interact with objects and object types. In general, think of this permission as “all of the non-admin human actors who work with data that is uploaded to and/or downloaded from the Chef server”.</td> </tr> </tbody> </table>   <h4 id=\"multiple-organizations\">Multiple Organizations</h4> <p>A single instance of the Chef server can support many organizations. Each organization has a unique set of groups and users. Each organization manages a unique set of nodes, on which a chef-client is installed and configured so that it may interact with a single organization on the Chef server.</p> <img alt=\"_images/server_rbac_orgs_groups_and_users.png\" src=\"https://docs.chef.io/release/server_12-5/_images/server_rbac_orgs_groups_and_users.png\"> <p>A user may belong to multiple organizations under the following conditions:</p> <ul class=\"simple\"> <li>Role-based access control is configured per-organization</li> <li>For a single user to interact with the Chef server using knife from the same chef-repo, that user may need to edit their knife.rb file prior to that interaction</li> </ul> <p>Using multiple organizations within the Chef server ensures that the same toolset, coding patterns and practices, physical hardware, and product support effort is being applied across the entire company, even when:</p> <ul class=\"simple\"> <li>Multiple product groups must be supported—each product group can have its own security requirements, schedule, and goals</li> <li>Updates occur on different schedules—the nodes in one organization are managed completely independently from the nodes in another</li> <li>Individual teams have competing needs for object and object types—data bags, environments, roles, and cookbooks are unique to each organization, even if they share the same name</li> </ul>  <h5 id=\"many-users-same-repo\">Many Users, Same Repo</h5> <p>It is possible for multiple users to access the Chef server using the same knife.rb file. (A user can even access multiple organizations if, for example, each instance of the chef-repo contained the same copy of the knife.rb file.) This can be done by adding the knife.rb file to the chef-repo, and then using environment variables to handle the user-specific credential details and/or sensitive values. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">current_dir = File.dirname(__FILE__)\n  user = ENV['OPSCODE_USER'] || ENV['USER']\n  node_name                user\n  client_key               \"#{ENV['HOME']}/chef-repo/.chef/#{user}.pem\"\n  validation_client_name   \"#{ENV['ORGNAME']}-validator\"\n  validation_key           \"#{ENV['HOME']}/chef-repo/.chef/#{ENV['ORGNAME']}-validator.pem\"\n  chef_server_url          \"https://api.opscode.com/organizations/#{ENV['ORGNAME']}\"\n  syntax_check_cache_path  \"#{ENV['HOME']}/chef-repo/.chef/syntax_check_cache\"\n  cookbook_path            [\"#{current_dir}/../cookbooks\"]\n  cookbook_copyright       'Your Company, Inc.'\n  cookbook_license         'apachev2\"\n  cookbook_email           'cookbooks@yourcompany.com'\n\n  # Amazon AWS\n  knife[:aws_access_key_id] = ENV['AWS_ACCESS_KEY_ID']\n  knife[:aws_secret_access_key] = ENV['AWS_SECRET_ACCESS_KEY']\n\n  # Rackspace Cloud\n  knife[:rackspace_api_username] = ENV['RACKSPACE_USERNAME']\n  knife[:rackspace_api_key] = ENV['RACKSPACE_API_KEY']</pre>      <h2 id=\"api-chef-server\">Chef server API</h2> <p>The Chef server API is a REST API that provides access to objects on the Chef server, including nodes, environments, roles, cookbooks (and cookbook versions), and to manage an API client list and the associated RSA public key-pairs.</p>  <h3 id=\"authentication-headers\">Authentication Headers</h3> <p>Authentication to the Chef server occurs when a specific set of HTTP headers are signed using a private key that is associated with the machine from which the request is made. The request is authorized if the Chef server can verify the signature using the public key. Only authorized actions are allowed.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Most authentication requests made to the Chef server are abstracted from the user. Such as when using knife or the Chef server user interface. In some cases, such as when using the <code class=\"docutils literal\">knife exec</code> subcommand, the authentication requests need to be made more explicitly, but still in a way that does not require authentication headers. In a few cases, such as when using arbitrary Ruby code or cURL, it may be necessary to include the full authentication header as part of the request to the Chef server.</p> </div>  <h4 id=\"header-format\">Header Format</h4> <p>All hashing is done using SHA-1 and encoded in Base64. Base64 encoding should have line breaks every 60 characters. Each canonical header should be encoded in the following format:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Method:HTTP_METHOD\nHashed Path:HASHED_PATH\nX-Ops-Content-Hash:HASHED_BODY\nX-Ops-Timestamp:TIME\nX-Ops-UserId:USERID</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">HTTP_METHOD</code> is the method used in the API request (<code class=\"docutils literal\">GET</code>, <code class=\"docutils literal\">POST</code>, and so on)</li> <li>\n<code class=\"docutils literal\">HASHED_PATH</code> is the path of the request: <code class=\"docutils literal\">/organizations/NAME/name_of_endpoint</code>. The <code class=\"docutils literal\">HASHED_PATH</code> must be hashed using SHA-1 and encoded using Base64, must not have repeated forward slashes (<code class=\"docutils literal\">/</code>), must not end in a forward slash (unless the path is <code class=\"docutils literal\">/</code>), and must not include a query string.</li> <li>The private key must be an RSA key in the SSL .pem file format. This signature is then broken into character strings (of not more than 60 characters per line) and placed in the header.</li> </ul> <p>The Chef server decrypts this header and ensures its content matches the content of the non-encrypted headers that were in the request. The timestamp of the message is checked to ensure the request was received within a reasonable amount of time. One approach generating the signed headers is to use <a class=\"reference external\" href=\"https://github.com/chef/mixlib-authentication\">mixlib-authentication</a>, which is a class-based header signing authentication object similar to the one used by the chef-client.</p>   <h4 id=\"required-headers\">Required Headers</h4> <p>The following authentication headers are required:</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">Accept</code></td> <td>The format in which response data from the Chef server is provided. This header must be set to <code class=\"docutils literal\">application/json</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">Host</code></td> <td>The host name (and port number) to which a request is sent. (Port number <code class=\"docutils literal\">80</code> does not need to be specified.) For example: <code class=\"docutils literal\">api.opscode.com</code> (which is the same as <code class=\"docutils literal\">api.opscode.com:80</code>) or <code class=\"docutils literal\">api.opscode.com:443</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">X-Chef-Version</code></td> <td>The version of the chef-client executable from which a request is made. This header ensures that responses are in the correct format. For example: <code class=\"docutils literal\">12.0.2</code> or <code class=\"docutils literal\">11.16.x</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">X-Ops-Authorization-N</code></td> <td>One (or more) 60 character segments that comprise the canonical header. A canonical header is signed with the private key used by the client machine from which the request is sent, and is also encoded using Base64. If more than one segment is required, each should be named sequentially, e.g. <code class=\"docutils literal\">X-Ops-Authorization-1</code>, <code class=\"docutils literal\">X-Ops-Authorization-2</code>, <code class=\"docutils literal\">X-Ops-Authorization-N</code>, where <code class=\"docutils literal\">N</code> represents the integer used by the last header that is part of the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">X-Ops-Content-Hash</code></td> <td>The body of the request. The body should be hashed using SHA-1 and encoded using Base64. All hashing is done using SHA-1 and encoded in Base64. Base64 encoding should have line breaks every 60 characters.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">X-Ops-Sign</code></td> <td>Set this header to the following value: <code class=\"docutils literal\">version=1.0</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">X-Ops-Timestamp</code></td> <td>The timestamp, in ISO-8601 format and with UTC indicated by a trailing <code class=\"docutils literal\">Z</code> and separated by the character <code class=\"docutils literal\">T</code>. For example: <code class=\"docutils literal\">2013-03-10T14:14:44Z</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">X-Ops-UserId</code></td> <td>The name of the API client whose private key will be used to create the authorization header.</td> </tr> </tbody> </table>   <h4 id=\"example\">Example</h4> <p>The following example shows an authentication request:</p> <pre class=\"highlight-http\" data-language=\"http\">GET /organizations/NAME/nodes HTTP/1.1\n  Accept: application/json\n  Accept-Encoding: gzip;q=1.0,deflate;q=0.6,identity;q=0.3\n  X-Ops-Sign: algorithm=sha1;version=1.0;\n  X-Ops-Userid: user_id\n  X-Ops-Timestamp: 2014-12-12T17:13:28Z\n  X-Ops-Content-Hash: 2jmj7l5rfasfgSw0ygaVb/vlWAghYkK/YBwk=\n  X-Ops-Authorization-1: BE3NnBritishaf3ifuwLSPCCYasdfXaRN5oZb4c6hbW0aefI\n  X-Ops-Authorization-2: sL4j1qtEZzi/2WeF67UuytdsdfgbOc5CjgECQwqrym9gCUON\n  X-Ops-Authorization-3: yf0p7PrLRCNasdfaHhQ2LWSea+kTcu0dkasdfvaTghfCDC57\n  X-Ops-Authorization-4: 155i+ZlthfasfasdffukusbIUGBKUYFjhbvcds3k0i0gqs+V\n  X-Ops-Authorization-5: /sLcR7JjQky7sdafIHNfsBQrISktNPower1236hbFIayFBx3\n  X-Ops-Authorization-6: nodilAGMb166@haC/fttwlWQ2N1LasdqqGomRedtyhSqXA==\n  Host: api.opscode.com:443\n  X-Ops-Server-API-Info: 1\n  X-Chef-Version: 12.0.2\n  User-Agent: Chef Knife/12.0.2 (ruby-2.1.1-p320; ohai-8.0.0; x86_64-darwin12.0.2; +http://chef.io)</pre>    <h3 id=\"endpoints\">Endpoints</h3> <p>Each organization-specific authentication request must include <code class=\"docutils literal\">/organizations/NAME</code> as part of the name for the endpoint. For example, the full endpoint for getting a list of roles:</p> <pre class=\"highlight-html\" data-language=\"html\">GET /organizations/NAME/roles</pre> <p>where <code class=\"docutils literal\">ORG_NAME</code> is the name of the organization.</p> <p>For more information about the Chef server API endpoints see <a class=\"reference internal\" href=\"api_chef_server\">Chef Server API</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/auth.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/auth.html</a>\n  </p>\n</div>\n","server_12-5/server_users":"<h1 id=\"users\">Users</h1> <p>The following tasks are available for user management in Chef server:</p> <ul class=\"simple\"> <li>Creating users</li> <li>Editing a user’s profile</li> <li>Changing a password</li> <li>Recovering a password</li> <li>Regenerating a private key</li> <li>Viewing a user’s profile</li> </ul>  <h2 id=\"chef-server-ctl\">chef-server-ctl</h2> <p>The Chef server includes a command-line utility named chef-server-ctl. This command-line tool is used to start and stop individual services, reconfigure the Chef server, run chef-pedant, and then tail Chef server log files.</p> <p>Use the <code class=\"docutils literal\">user-create</code>, <code class=\"docutils literal\">user-delete</code>, <code class=\"docutils literal\">user-edit</code>, <code class=\"docutils literal\">user-list</code> and <code class=\"docutils literal\">user-show</code> subcommands to manage users.</p>  <h3 id=\"org-create\">org-create</h3> <p>The <code class=\"docutils literal\">org-create</code> subcommand is used to create an organization. (The validation key for the organization is returned to <code class=\"docutils literal\">STDOUT</code> when creating an organization with this command.)</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-create ORG_NAME \"ORG_FULL_NAME\" (options)</pre> <p>where:</p> <ul class=\"simple\"> <li>The name must begin with a lower-case letter or digit, may only contain lower-case letters, digits, hyphens, and underscores, and must be between 1 and 255 characters. For example: <code class=\"docutils literal\">chef</code>.</li> <li>The full name must begin with a non-white space character and must be between 1 and 1023 characters. For example: <code class=\"docutils literal\">\"Chef Software, Inc.\"</code>.</li> </ul> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a USER_NAME</code>, <code class=\"docutils literal\">--association_user USER_NAME</code>\n</dt> <dd>Associate a user with an organization and add them to the <code class=\"docutils literal\">admins</code> and <code class=\"docutils literal\">billing_admins</code> security groups.</dd> <dt>\n<code class=\"docutils literal\">-f FILE_NAME</code>, <code class=\"docutils literal\">--filename FILE_NAME</code>\n</dt> <dd>Write the ORGANIZATION-validator.pem to <code class=\"docutils literal\">FILE_NAME</code> instead of printing it to <code class=\"docutils literal\">STDOUT</code>.</dd> </dl>   <h3 id=\"org-delete\">org-delete</h3> <p>The <code class=\"docutils literal\">org-delete</code> subcommand is used to delete an organization.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-delete ORG_NAME</pre>   <h3 id=\"org-list\">org-list</h3> <p>The <code class=\"docutils literal\">org-list</code> subcommand is used to list all of the organizations currently present on the Chef server.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-list (options)</pre> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--all-orgs</code>\n</dt> <dd>Show all organizations.</dd> <dt>\n<code class=\"docutils literal\">-w</code>, <code class=\"docutils literal\">--with-uri</code>\n</dt> <dd>Show the corresponding URIs.</dd> </dl>   <h3 id=\"org-show\">org-show</h3> <p>The <code class=\"docutils literal\">org-show</code> subcommand is used to show the details for an organization.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-show ORG_NAME</pre>   <h3 id=\"org-user-add\">org-user-add</h3> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Early RC candidates for the Chef server 12 release named this command <code class=\"docutils literal\">org-associate</code>. This is the same command, with the exception of the <code class=\"docutils literal\">--admin</code> flag, which is added to the command (along with the rename) for the upcoming final release of Chef server 12.</p> </div> <p>The <code class=\"docutils literal\">org-user-add</code> subcommand is used to add a user to an organization.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-user-add ORG_NAME USER_NAME (options)</pre> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--admin</code></dt> <dd>Add the user to the <code class=\"docutils literal\">admins</code> group.</dd> </dl>   <h3 id=\"org-user-remove\">org-user-remove</h3> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Early RC candidates for the Chef server 12 release named this command <code class=\"docutils literal\">org-disociate</code>. This is the same command, but renamed for the upcoming final release of Chef server 12.</p> </div> <p>The <code class=\"docutils literal\">org-user-remove</code> subcommand is used to remove a user from an organization.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-user-remove ORG_NAME USER_NAME (options)</pre>   <h3 id=\"user-create\">user-create</h3> <p>The <code class=\"docutils literal\">user-create</code> subcommand is used to create a user. (The validation key for the organization may be returned to <code class=\"docutils literal\">STDOUT</code> when creating a user with this command.)</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-create USER_NAME FIRST_NAME [MIDDLE_NAME] LAST_NAME EMAIL 'PASSWORD' (options)</pre> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-f FILE_NAME</code>, <code class=\"docutils literal\">--filename FILE_NAME</code>\n</dt> <dd>Write the USER.pem to a file instead of <code class=\"docutils literal\">STDOUT</code>.</dd> </dl>   <h3 id=\"user-delete\">user-delete</h3> <p>The <code class=\"docutils literal\">user-delete</code> subcommand is used to delete a user.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-delete USER_NAME</pre>   <h3 id=\"user-edit\">user-edit</h3> <p>The <code class=\"docutils literal\">user-edit</code> subcommand is used to edit the details for a user. The data will be made available in the $EDITOR for editing.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-edit USER_NAME</pre>   <h3 id=\"user-list\">user-list</h3> <p>The <code class=\"docutils literal\">user-list</code> subcommand is used to view a list of users.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-list (options)</pre> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-w</code>, <code class=\"docutils literal\">--with-uri</code>\n</dt> <dd>Show the corresponding URIs.</dd> </dl>   <h3 id=\"user-show\">user-show</h3> <p>The <code class=\"docutils literal\">user-show</code> subcommand is used to show the details for a user.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-show USER_NAME (options)</pre> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-l</code>, <code class=\"docutils literal\">--with-orgs</code>\n</dt> <dd>Show all organizations.</dd> </dl>    <h2 id=\"chef-manage-title\">Chef Manage</h2> <p>This section is an alphabetical list of the various user-specific tasks that can be performed when using Chef management console.</p>  <h3 id=\"change-password\">Change Password</h3> <p>To change a user’s password:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">From the drop-down list next to your username, select <strong>My Profile</strong>.</p> </li> <li>\n<p class=\"first\">Under <strong>Users</strong>, click <strong>Change Password</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Change Password</strong>, enter the old password and then the new password.</p> <img alt=\"_images/step_manage_webui_admin_users_change_password.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_admin_users_change_password.png\"> </li> <li>\n<p class=\"first\">When finished, click <strong>Change Password</strong>.</p> </li> </ol>   <h3 id=\"invite-a-user\">Invite a User</h3> <p>To invite a user to an organization:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Administration</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Organizations</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Invite User</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Invite User</strong> dialog box, enter the Chef server user name for the user to be invited, and then click the <strong>Invite</strong> button:</p> <img alt=\"_images/step_manage_webui_admin_organization_invite_user.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_admin_organization_invite_user.png\"> <img alt=\"_images/step_manage_webui_admin_organization_invite_user_pending.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_admin_organization_invite_user_pending.png\"> </li> <li>\n<p class=\"first\">After the user accepts the invitation, they will be a member of this organization.</p> </li> </ol>   <h3 id=\"cancel-invite-for-user\">Cancel invite for User</h3> <p>Canceling a pending invite for a user can currently be completed using knife:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">As a user that is a member of the <code class=\"docutils literal\">admins</code> group, replace <code class=\"docutils literal\">ORGNAME</code> with your own <code class=\"docutils literal\">ORGNAME</code> and run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife raw 'association_requests' -s https://api.opscode.com/organizations/ORGNAME</pre> <p>You may see an empty list or you may see a populated list of invites. No invites looks like this</p> <pre class=\"highlight-bash\" data-language=\"bash\">[\n\n]</pre> <p>A single invite looks like this</p> <pre class=\"highlight-bash\" data-language=\"bash\">[\n  {\n    \"id\": \"f6240e73d35b1e3ce3238ab8a5131ccb\",\n    \"username\": \"testuser\"\n  }\n]</pre> </li> <li>\n<p class=\"first\">To cancel the above pending invite you would run</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife raw -m DELETE 'association_requests/f6240e73d35b1e3ce3238ab8a5131ccb' -s https://api.opscode.com/organizations/ORGNAME</pre> </li> </ol>   <h3 id=\"leave-org\">Leave Org</h3> <p>To leave an organization:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Administration</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Organizations</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Leave Organization</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Leave Organization</strong> dialog box, confirm that you want to leave the organization, and then click the <strong>Leave Organization</strong> button:</p> <img alt=\"_images/step_manage_webui_admin_organization_leave.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_admin_organization_leave.png\"> </li> </ol>   <h3 id=\"remove-user-from-org\">Remove User from Org</h3> <p>To remove a user from an organization:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">From the drop-down list next to your username, select <strong>My Profile</strong>.</p> </li> <li>\n<p class=\"first\">Under <strong>Users</strong>, click <strong>Leave Organization</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Leave Organization</strong> dialog box, confirm that the key should be regenerated and click the <strong>Leave Organization</strong> button:</p> <img alt=\"_images/step_manage_webui_admin_organization_leave.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_admin_organization_leave.png\"> </li> </ol>   <h3 id=\"remove-admin-user-from-org\">Remove Admin User from Org</h3> <p>Removing a member of the <code class=\"docutils literal\">admins</code> group from an organization requires the user to be removed from the <code class=\"docutils literal\">admins</code> group before they can be removed from the organization:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Administration</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Groups</strong>.</p> </li> <li>\n<p class=\"first\">Select the <strong>Groups</strong> group.</p> </li> <li>\n<p class=\"first\">Select a user to be removed from the <strong>Groups</strong> group:</p> <img alt=\"_images/step_manage_webui_admin_remove_admin_pre.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_admin_remove_admin_pre.png\"> </li> <li>\n<p class=\"first\">Click <strong>Remove</strong>.</p> <img alt=\"_images/step_manage_webui_admin_remove_admin_post.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_admin_remove_admin_post.png\"> </li> <li>\n<p class=\"first\">Click <strong>Users</strong>.</p> </li> <li>\n<p class=\"first\">Select a user.</p> </li> <li>\n<p class=\"first\">Click <strong>Remove from Organization</strong>.</p> <img alt=\"_images/step_manage_webui_admin_remove_admin_success.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_admin_remove_admin_success.png\"> </li> </ol>   <h3 id=\"reset-user-key\">Reset User Key</h3> <p>To reset a user’s validation key:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">From the drop-down list next to your username, select <strong>My Profile</strong>.</p> </li> <li>\n<p class=\"first\">Under <strong>Users</strong>, click <strong>Reset Key</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Reset Key</strong> dialog box, confirm that the key should be regenerated and click the <strong>Regenerate Key</strong> button:</p> <img alt=\"_images/step_manage_webui_admin_organization_reset_key.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_admin_organization_reset_key.png\"> </li> <li>\n<p class=\"first\">In the <strong>Reset Key</strong> dialog box, copy the key directly from the dialog box or click the <strong>Download</strong> button to download the key to your local machine:</p> <img alt=\"_images/step_manage_webui_admin_organization_reset_key_regenerated.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_admin_organization_reset_key_regenerated.png\"> </li> </ol>   <h3 id=\"view-user-account-details\">View User Account Details</h3> <p>To view user account settings:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>From the drop-down list next to your username, select <strong>My Profile</strong>.</li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_users.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_users.html</a>\n  </p>\n</div>\n","server_12-5/install_server":"<h1 id=\"install-the-chef-server-title\">Install the Chef Server</h1> <p>There are three configuration scenarios for the Chef server:</p> <ul class=\"simple\"> <li>\n<a class=\"reference external\" href=\"install_server#standalone\">Standalone</a> (everything on a single machine)</li> <li>\n<a class=\"reference external\" href=\"install_server#high-availability\">High availability</a> (machines configured for front-end and back-end, allowing for failover on the back-end and load-balancing on the front-end, as required)</li> <li>\n<a class=\"reference external\" href=\"install_server#tiered-single-backend\">Tiered</a> (machines configured for front-end and back-end, with a single back-end and load-balancing on the front-end, as required)</li> </ul>  <h2 id=\"prerequisites\">Prerequisites</h2> <p>The Chef server has the <a class=\"reference internal\" href=\"install_server_pre\">following prerequisites</a>:</p> <ul class=\"simple\"> <li>An x86_64 compatible system architecture; Red Hat Enterprise Linux and CentOS may require updates prior to installation</li> <li>A resolvable hostname that is specified using a FQDN or an IP address</li> <li>A connection to Network Time Protocol (NTP) to prevent clock drift</li> <li>A local mail transfer agent that allows the Chef server to send email notifications</li> <li>Using cron and the <code class=\"docutils literal\">/etc/cron.d</code> directory for periodic maintenance tasks</li> <li>Disabling the Apache Qpid daemon on CentOS and Red Hat systems</li> <li>Optional. A local user account under which services will run, a local user account for PostgreSQL, and a group account under which services will run. See <a class=\"reference external\" href=\"install_server_pre#uids-and-gids\">https://docs.chef.io/release/server_12-5/install_server_pre.html#uids-and-gids</a> for more information.</li> </ul>   <h2 id=\"standalone\">Standalone</h2> <p>The standalone installation of Chef server creates a working installation on a single server. This installation is also useful when you are installing Chef server in a virtual machine, for proof-of-concept deployments, or as a part of a development or testing loop.</p> <p>To install Chef server 12:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Download the package from <a class=\"reference external\" href=\"http://downloads.chef.io/chef-server/\">http://downloads.chef.io/chef-server/</a>.</p> </li> <li>\n<p class=\"first\">Upload the package to the machine that will run the Chef server, and then record its location on the file system. The rest of these steps assume this location is in the <code class=\"docutils literal\">/tmp</code> directory.</p> </li> <li>\n<p>As a root user, install the Chef server package on the server, using the name of the package provided by Chef. For Red Hat and CentOS 6:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh /tmp/chef-server-core-&lt;version&gt;.rpm</pre> <p>For Ubuntu:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -i /tmp/chef-server-core-&lt;version&gt;.deb</pre> <p>After a few minutes, the Chef server will be installed.</p> </li> <li>\n<p class=\"first\">Run the following to start all of the services:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> <p>Because the Chef server is composed of many different services that work together to create a functioning system, this step may take a few minutes to complete.</p> </li> <li>\n<p>Run the following command to create an administrator:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-create USER_NAME FIRST_NAME LAST_NAME EMAIL 'PASSWORD' --filename FILE_NAME</pre> <p>An RSA private key is generated automatically. This is the user’s private key and should be saved to a safe location. The <code class=\"docutils literal\">--filename</code> option will save the RSA private key to a specified path.</p> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-create stevedanno Steve Danno steved@chef.io 'abc123' --filename /path/to/stevedanno.pem</pre> </li> <li>\n<p>Run the following command to create an organization:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-create short_name 'full_organization_name' --association_user user_name --filename ORGANIZATION-validator.pem</pre> <p>The name must begin with a lower-case letter or digit, may only contain lower-case letters, digits, hyphens, and underscores, and must be between 1 and 255 characters. For example: <code class=\"docutils literal\">4thcoffee</code>.</p> <p>The full name must begin with a non-white space character and must be between 1 and 1023 characters. For example: <code class=\"docutils literal\">'Fourth Coffee, Inc.'</code>.</p> <p>The <code class=\"docutils literal\">--association_user</code> option will associate the <code class=\"docutils literal\">user_name</code> with the <code class=\"docutils literal\">admins</code> security group on the Chef server.</p> <p>An RSA private key is generated automatically. This is the chef-validator key and should be saved to a safe location. The <code class=\"docutils literal\">--filename</code> option will save the RSA private key to a specified path.</p> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-create 4thcoffee 'Fourth Coffee, Inc.' --association_user stevedanno --filename /path/to/4thcoffee-validator.pem</pre> </li> <li>\n<p>Enable additional features of the Chef server! The packages may be downloaded directly as part of the installation process or they may be first downloaded to a local directory, and then installed.</p> <p><strong>Use Downloads</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are not behind a firewall (and have connectivity to <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a>), these packages can be installed as described below.</p> <table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"80%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Command</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Chef Manage</td> <td>\n<p class=\"first\">Use Chef management console to manage data bags, attributes, run-lists, roles, environments, and cookbooks from a web user interface.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-manage</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ chef-manage-ctl reconfigure</pre> </td> </tr> <tr class=\"row-odd\">\n<td>Chef Push Jobs</td> <td>\n<p class=\"first\">Use Chef push jobs to run jobs—an action or a command to be executed—against nodes independently of a chef-client run.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install opscode-push-jobs-server</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ opscode-push-jobs-server-ctl reconfigure</pre> </td> </tr> <tr class=\"row-even\">\n<td>Chef Replication</td> <td>\n<p class=\"first\">Use Chef replication to asynchronously distribute cookbook, environment, role, and data bag data from a single, primary Chef server to one (or more) replicas of that Chef server.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-sync</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ chef-sync-ctl reconfigure</pre> </td> </tr> <tr class=\"row-odd\">\n<td>Reporting</td> <td>\n<p class=\"first\">Use Reporting to keep track of what happens during every chef-client runs across all of the infrastructure being managed by Chef. Run Reporting with Chef management console to view reports from a web user interface.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install opscode-reporting</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ opscode-reporting-ctl reconfigure</pre> </td> </tr> </tbody> </table> <p><strong>Use Local Packages</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are behind a firewall (and may not have connectivity to packages.chef.io), these packages can be downloaded from <a class=\"reference external\" href=\"https://downloads.chef.io/chef-manage/\">https://downloads.chef.io/chef-manage/</a>, and then installed manually. First download the package that is appropriate for the platform, save it to a local path, and then run the <code class=\"docutils literal\">install</code> command using the <code class=\"docutils literal\">--path</code> option to specify the directory in which the package is located:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install PACKAGE_NAME --path /path/to/package/directory</pre> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install chef-manage --path /root/packages</pre> <p>The <code class=\"docutils literal\">chef-server-ctl</code> command will install the first <code class=\"docutils literal\">chef-manage</code> package found in the <code class=\"docutils literal\">/root/packages</code> directory.</p> </li> </ol>   <h2 id=\"high-availability\">High Availability</h2> <p>The following links describe how to configure the Chef server for high availability:</p> <a href=\"install_server_ha_aws\">High Availability using Amazon Web Services</a> <a href=\"install_server_ha_drbd\">High Availability using DRBD</a>   <h2 id=\"tiered-single-backend\">Tiered (Single Backend)</h2> <p>The following link describes how to configure the Chef server with a single backend machine and multiple frontend machines:</p> <a href=\"install_server_tiered\">Tiered</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/install_server.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/install_server.html</a>\n  </p>\n</div>\n","server_12-5/server_ldap":"<h1 id=\"active-directory-and-ldap\">Active Directory and LDAP</h1> <p>The Chef server supports Active Directory and LDAP authentication, which enables users to log in to the Chef server using their corporate credentials.</p>  <h2 id=\"configure-ldap\">Configure LDAP</h2> <p>The Chef server supports using Active Directory or LDAP for any user that has an email address in the LDAP directory. This allows those users to log in to the Chef server by using their corporate credentials instead of having a separate username and password.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>The following attributes <strong>MUST</strong> be in the user LDAP record:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">mail:</code></li> <li>\n<code class=\"docutils literal\">sAMAccountName:</code> or <code class=\"docutils literal\">uid:</code>\n</li> </ul> <p>The following attributes <strong>SHOULD</strong> be in the user LDAP record:</p> <ul class=\"last simple\"> <li><code class=\"docutils literal\">displayname:</code></li> <li><code class=\"docutils literal\">givenname:</code></li> <li><code class=\"docutils literal\">sn:</code></li> <li><code class=\"docutils literal\">c:</code></li> <li><code class=\"docutils literal\">l:</code></li> </ul> </div> <p>To configure the Chef server to use Active Directory or LDAP do the following:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Install the Chef management console (if it is not already).</p> </li> <li>\n<p class=\"first\">Add the following settings to the chef-server.rb file. These settings must be added to each machine in the Chef server deployment, including both frontend and backend servers in a high availability or tiered configuration:</p> <p>This configuration file has the following settings for <code class=\"docutils literal\">ldap</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ldap['base_dn']</code></dt> <dd>\n<p class=\"first\">The root LDAP node under which all other nodes exist in the directory structure. For Active Directory, this is typically <code class=\"docutils literal\">cn=users</code> and then the domain. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">'OU=Employees,OU=Domain users,DC=example,DC=com'</pre> <p class=\"last\">Default value: <code class=\"docutils literal\">nil</code>.</p> </dd> <dt><code class=\"docutils literal\">ldap['bind_dn']</code></dt> <dd>\n<p class=\"first\">The distinguished name used to bind to the LDAP server. The user the Chef server will use to perform LDAP searches. This is often the administrator or manager user. This user needs to have read access to all LDAP users that require authentication. The Chef server must do an LDAP search before any user can log in. Many Active Directory and LDAP systems do not allow an anonymous bind. If anonymous bind is allowed, leave the <code class=\"docutils literal\">bind_dn</code> and <code class=\"docutils literal\">bind_password</code> settings blank. If anonymous bind is not allowed, a user with <code class=\"docutils literal\">READ</code> access to the directory is required. This user must be specified as an LDAP distinguished name similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">'CN=user,OU=Employees,OU=Domainuser,DC=example,DC=com'</pre> <p class=\"last\">Default value: <code class=\"docutils literal\">nil</code>.</p> </dd> <dt><code class=\"docutils literal\">ldap['bind_password']</code></dt> <dd>\n<p class=\"first last\">The password for the binding user. The password for the user specified by <code class=\"docutils literal\">ldap['bind_dn']</code>. Leave this value and <code class=\"docutils literal\">ldap['bind_dn']</code> unset if anonymous bind is sufficient. Default value: <code class=\"docutils literal\">nil</code>.</p> </dd> <dt><code class=\"docutils literal\">ldap['group_dn']</code></dt> <dd>\n<p class=\"first\">The distinguished name for a group. When set to the distinguished name of a group, only members of that group can log in. This feature filters based on the <code class=\"docutils literal\">memberOf</code> attribute and only works with LDAP servers that provide such an attribute. In OpenLDAP, the <code class=\"docutils literal\">memberOf</code> overlay provides this attribute. For example, if the value of the <code class=\"docutils literal\">memberOf</code> attribute is <code class=\"docutils literal\">CN=abcxyz,OU=users,DC=company,DC=com</code>, then use:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">ldap['group_dn'] = 'CN=user,OU=Employees,DC=example,DC=com'</pre> </dd> <dt><code class=\"docutils literal\">ldap['host']</code></dt> <dd>\n<p class=\"first last\">The name (or IP address) of the LDAP server. The hostname of the LDAP or Active Directory server. Be sure the Chef server is able to resolve any host names. Default value: <code class=\"docutils literal\">ldap-server-host</code>.</p> </dd> <dt><code class=\"docutils literal\">ldap['login_attribute']</code></dt> <dd>\n<p class=\"first last\">The LDAP attribute that holds the user’s login name. Use to specify the Chef server user name for an LDAP user. Default value: <code class=\"docutils literal\">sAMAccountName</code>.</p> </dd> <dt><code class=\"docutils literal\">ldap['port']</code></dt> <dd>\n<p class=\"first last\">An integer that specifies the port on which the LDAP server listens. The default value is an appropriate value for most configurations. Default value: <code class=\"docutils literal\">389</code> or <code class=\"docutils literal\">636</code> when <code class=\"docutils literal\">ldap['encryption']</code> is set to <code class=\"docutils literal\">:simple_tls</code>.</p> </dd> <dt><code class=\"docutils literal\">ldap['ssl_enabled']</code></dt> <dd>\n<p class=\"first\">Cause the Chef server to connect to the LDAP server using SSL. Default value: <code class=\"docutils literal\">false</code>. Must be <code class=\"docutils literal\">false</code> when <code class=\"docutils literal\">ldap['tls_enabled']</code> is <code class=\"docutils literal\">true</code>.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Previous versions of the Chef server used the <code class=\"docutils literal\">ldap['ssl_enabled']</code> setting to first enable SSL, and then the <code class=\"docutils literal\">ldap['encryption']</code> setting to specify the encryption type. These settings are deprecated.</p> </div> </dd> <dt><code class=\"docutils literal\">ldap['system_adjective']</code></dt> <dd>\n<p class=\"first\">A descriptive name for the login system that is displayed to users in the Chef server management console. If a value like “corporate” is used, then the Chef management console user interface will display strings like “the corporate login server”, “corporate login”, or “corporate password.” Default value: <code class=\"docutils literal\">AD/LDAP</code>.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">This setting is <strong>not</strong> used by the Chef server. It is used only by the Chef management console.</p> </div> </dd> <dt><code class=\"docutils literal\">ldap['timeout']</code></dt> <dd>\n<p class=\"first last\">The amount of time (in seconds) to wait before timing out. Default value: <code class=\"docutils literal\">60000</code>.</p> </dd> <dt><code class=\"docutils literal\">ldap['tls_enabled']</code></dt> <dd>\n<p class=\"first\">Enable TLS. When enabled, communication with the LDAP server is done via a secure SSL connection on a dedicated port. When <code class=\"docutils literal\">true</code>, <code class=\"docutils literal\">ldap['port']</code> is also set to <code class=\"docutils literal\">636</code>. Default value: <code class=\"docutils literal\">false</code>. Must be <code class=\"docutils literal\">false</code> when <code class=\"docutils literal\">ldap['ssl_enabled']</code> is <code class=\"docutils literal\">true</code>.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Previous versions of the Chef server used the <code class=\"docutils literal\">ldap['ssl_enabled']</code> setting to first enable SSL, and then the <code class=\"docutils literal\">ldap['encryption']</code> setting to specify the encryption type. These settings are deprecated.</p> </div> </dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If the chef-server.rb file does not exist, create a file called <code class=\"docutils literal\">chef-server.rb</code> and put it in the <code class=\"docutils literal\">/etc/opscode/</code> directory.</p> </div> </li> <li>\n<p>Reconfigure the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl reconfigure</pre> </li> <li>\n<p>Reconfigure the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-manage-ctl reconfigure</pre> </li> </ol> <p>At this point, all users should be able to use their Active Directory or LDAP usernames and passwords to log in to the Chef server.</p>   <h2 id=\"test-ldap-connectivity\">Test LDAP Connectivity</h2> <p>Use <code class=\"docutils literal\">ldapsearch</code> to test the ability of the Chef server to use Active Directory or LDAP. First, translate the Chef server LDAP settings into <code class=\"docutils literal\">ldapsearch</code> parameters:</p> <table class=\"docutils\"> <colgroup> <col width=\"50%\"> <col width=\"50%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Chef Server Setting</th> <th class=\"head\">\n<code class=\"docutils literal\">ldapsearch</code> Parameter</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<code class=\"docutils literal\">ldap['host']</code> and <code class=\"docutils literal\">ldap['port']</code>\n</td> <td><code class=\"docutils literal\">-H [HOST:PORT]</code></td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">ldap['bind_dn']</code></td> <td><code class=\"docutils literal\">-D [BIND_DN]</code></td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">ldap['bind_password']</code></td> <td>\n<code class=\"docutils literal\">-W</code>; <code class=\"docutils literal\">ldapsearch</code> will prompt for this parameter</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">ldap['base_dn']</code></td> <td><code class=\"docutils literal\">-b [BASE_DN]</code></td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">ldap['login_attribute']</code></td> <td>Defaults to <code class=\"docutils literal\">SAMAccountName</code>\n</td> </tr> </tbody> </table> <p>And then from a front end machine (in a high availability or tiered configuration) or from the Chef server in a standalone configuration, run the following command. Be sure to replace the uppercase placeholders with the values for your organization:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ldapsearch -LLL -H ldap://HOST:PORT -b 'BASE_DN' -D 'BIND_DN' -W '(LOGIN_ATTRIBUTE=YOUR_LDAP_ACCOUNT_USERNAME)'</pre> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ldapsearch -LLL -H ldap://win-ad1.chef.co:389 -b 'OU=Employees,OU=Domain users,DC=opscodecorp,DC=com' -D 'CN=Robert Forster,OU=Employees,OU=Domain users,DC=opscodecorp,DC=com' -W '(sAMAccountName=rforster)'</pre> <p>Output similar to the following is returned:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ldapsearch -LLL -H ldap://win-ad1.chef.co:389 -b 'OU=Employees,OU=Domain users,DC=opscodecorp,DC=com' -D 'CN=Robert Forster,OU=Employees,OU=Domain users,DC=opscodecorp,DC=com' -W '(sAMAccountName=rforster)'\nEnter LDAP Password:\n\ndn: CN=Robert Forster,OU=Employees,OU=Domain users,DC=opscodecorp,DC=com\nobjectClass: top\nobjectClass: person\nobjectClass: organizationalPerson\nobjectClass: user\ncn: Robert Forster\nsn: Forster\nc: 0\ngivenName: Robert\ndistinguishedName: CN=Robert Forster,OU=Employees,OU=Domain users,DC=opscodecorp,DC\n =com</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">ldapsearch</code> command may need to be installed on the platform. It is not included as part of the Chef server package.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_ldap.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_ldap.html</a>\n  </p>\n</div>\n","server_12-5/server_logs":"<h1 id=\"log-files\">Log Files</h1> <p>All logs generated by the Chef server can be found in <code class=\"docutils literal\">/var/log/opscode</code>. Each service enabled on the system also has a sub-directory in which service-specific logs are located, typically found in <code class=\"docutils literal\">/var/log/opscode/service_name</code>.</p>  <h2 id=\"view-log-files\">View Log Files</h2> <p>The Chef server has built-in support for easily tailing the logs that are generated. To view all the logs being generated on the Chef server, enter the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl tail</pre> <p>To view logs for a specific service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl tail SERVICENAME</pre> <p>where <code class=\"docutils literal\">SERVICENAME</code> should be replaced with name of the service for which log files will be viewed.</p> <p>Another way to view log files is to use the system utility tail:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ tail -50f /var/log/chef-server/opscode-chef/current</pre>  <h3 id=\"tail-log-files\">tail Log Files</h3> <p>The <code class=\"docutils literal\">tail</code> subcommand is used to follow all of the Chef server logs for all services. This command can also be run for an individual service by specifying the name of the service in the command.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl tail SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand.</p> <p>Another common approach to tailing the log files for a service is to use the system utility <code class=\"docutils literal\">tail</code>. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ tail -50f /var/log/opscode/opscode-chef/current</pre>    <h2 id=\"supervisor\">Supervisor</h2> <p>Supervisor logs are created and managed directly by the service supervisor, and are automatically rotated when a the current log file reaches 1,000,000 bytes. 10 log files are kept. The latest supervisor log is always located in <code class=\"docutils literal\">/var/log/chef-server/service_name/current</code> and rotated logs have a filename starting with <code class=\"docutils literal\">@</code> followed by a precise <code class=\"docutils literal\">tai64n</code> timestamp based on when the file was rotated.</p> <p>Supervisor logs are available for the following services:</p> <ul class=\"simple\"> <li>bifrost</li> <li>bookshelf</li> <li>nginx</li> <li>opscode-erchef</li> <li>opscode-expander</li> <li>opscode-expander-reindexer</li> <li>opscode-solr4</li> <li>postgresql</li> <li>rabbitmq</li> <li>redis</li> </ul>  <h3 id=\"nginx-access\">nginx, access</h3> <p>Nginx is an important entry point for data on the Chef server, which means that debugging efforts frequently start with analyzing the <strong>nginx</strong> service’s <code class=\"docutils literal\">access.log</code> file. This log contains every HTTP request made to the front-end machine and can be very useful when investigating request rates and usage patterns. The following is an example log entry:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">175.185.9.6 - - [12/Jul/2013:15:56:54 +0000] \"GET\n/organizations/exampleorg/data/firewall/nova_api HTTP/1.1\" 200\n\"0.850\" 452 \"-\" \"Chef Client/0.10.2 (ruby-1.8.7-p302; ohai-0.6.4;\nx86_64-linux; +http://opscode.com)\" \"127.0.0.1:9460\" \"200\"\n\"0.849\" \"0.10.2\" \"version=1.0\" \"some_node.example.com\"\n\"2013-07-12T15:56:40Z\" \"2jmj7l5rSw0yVb/vlWAYkK/YBwk=\" 985</pre> <p>where important fields in this log include:</p> <ul class=\"simple\"> <li>The HTTP status code (<code class=\"docutils literal\">200</code>)</li> <li>The IP address of the requesting client (<code class=\"docutils literal\">175.185.9.6</code>)</li> <li>The timestamp (<code class=\"docutils literal\">[12/Jul/2013:15:56:54 +0000]</code>)</li> <li>The total request time (<code class=\"docutils literal\">\"0.850\"</code>)</li> <li>The request method (<code class=\"docutils literal\">GET</code>)</li> <li>The request URL (<code class=\"docutils literal\">/organizations/exampleorg/data/firewall/nova_api</code>)</li> </ul>   <h3 id=\"opscode-erchef-current\">opscode-erchef, current</h3> <p>The <strong>opscode-erchef</strong> service’s <code class=\"docutils literal\">current.log</code> file contains a history of stack traces from major application crashes.</p>   <h3 id=\"opscode-erchef-erchef\">opscode-erchef, erchef</h3> <p>The <strong>opscode-erchef</strong> service’s <code class=\"docutils literal\">erchef.log</code> file contains a history of API requests that have been processed by Erchef. These logs can be rotated quickly, therefore it is generally best to sort them by date, and then find the most recently updated log file:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ls -lrt /var/log/opscode/opscode-erchef/erchef.log.*</pre> <p>The following is an example log entry:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">2013-08-06T08:54:32Z erchef@127.0.0.1 INFO org_name=srwjedoqqoypgmvafmoi; req_id=g3IAA2QAEGVyY2hlZkAx</pre> <p>where important fields in this log include:</p> <ul class=\"simple\"> <li>The HTTP method (<code class=\"docutils literal\">POST</code>)</li> <li>The HTTP path (<code class=\"docutils literal\">/organizations/srwjedoqqoypgmvafmoi/environments</code>)</li> <li>The message (<code class=\"docutils literal\">{created,&lt;&lt;\"_default\"&gt;&gt;}</code>)</li> <li>The organization name (<code class=\"docutils literal\">org_name=srwjedoqqoypgmvafmoi</code>)</li> <li>The timestamp (<code class=\"docutils literal\">2013-08-06T08:54:32Z</code>)</li> <li>The name of the user and/or chef-client which made the request (<code class=\"docutils literal\">pivotal</code>)</li> </ul> <p>In addition, the log file may contain additional entries that detail the amounts of time spent interacting with other services:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">rdbms_time</code> (the time spent talking to the <strong>postgresql</strong> service)</li> <li>\n<code class=\"docutils literal\">req_time</code> (the request time)</li> <li>\n<code class=\"docutils literal\">solr_time</code> (the time spent talking to the <strong>opscode-solr</strong> service)</li> </ul>    <h2 id=\"application\">Application</h2> <p>Application logs are created by the services directly, and may require log rotation policies to be applied based on organizational goals and the platform(s) on which the services are running.</p>  <h3 id=\"nginx\">nginx</h3> <p>The <code class=\"docutils literal\">nginx</code> service creates both supervisor and administrator logs. The administrator logs contain both access and error logs for each virtual host utilized by the Chef server. Each of the following logs require external log rotation.</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Logs</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">/var/log/opscode/nginx/access.log</code></td> <td>The Web UI and API HTTP access logs.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">/var/log/opscode/nginx/error.log</code></td> <td>The Web UI and API HTTP error logs.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">/var/log/opscode/nginx/internal-account.access.log</code></td> <td>The <code class=\"docutils literal\">opscode-account</code> internal load-balancer access logs.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">/var/log/opscode/nginx/internal-account.error.log</code></td> <td>The <code class=\"docutils literal\">opscode-account</code> internal load-balancer error logs.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">/var/log/opscode/nginx/internal-authz.access.log</code></td> <td>The <code class=\"docutils literal\">opscode-authz</code> internal load-balancer access logs.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">/var/log/opscode/nginx/internal-authz.error.log</code></td> <td>The <code class=\"docutils literal\">opscode-authz</code> internal load-balancer error logs.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">/var/log/opscode/nginx/internal-chef.access.log</code></td> <td>The <code class=\"docutils literal\">opscode-chef</code> and <code class=\"docutils literal\">opscode-erchef</code> internal load-balancer access logs.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">/var/log/opscode/nginx/internal-chef.error.log</code></td> <td>The <code class=\"docutils literal\">opscode-chef</code> and <code class=\"docutils literal\">opscode-erchef</code> internal load-balancer error logs.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">/var/log/opscode/nginx/nagios.access.log</code></td> <td>The <code class=\"docutils literal\">nagios</code> access logs.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">/var/log/opscode/nginx/nagios.error.log</code></td> <td>The <code class=\"docutils literal\">nagios</code> error logs.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">/var/log/opscode/nginx/rewrite-port-80.log</code></td> <td>The rewrite logs for traffic that uses HTTP instead of HTTPS.</td> </tr> </tbody> </table> <p>To follow the logs for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl tail nginx</pre>  <h4 id=\"read-log-files\">Read Log Files</h4> <p>The <strong>nginx</strong> access log format is as follows:</p> <pre class=\"highlight-bash\" data-language=\"bash\">log_format opscode '$remote_addr - $remote_user [$time_local]  '\n  '\"$request\" $status \"$request_time\" $body_bytes_sent '\n  '\"$http_referrer\" \"$http_user_agent\" \"$upstream_addr\" '\n  '\"$upstream_status\" \"$upstream_response_time\" \"$http_x_chef_version\" '\n  '\"$http_x_ops_sign\" \"$http_x_ops_userid\" \"$http_x_ops_timestamp\" '\n   '\"$http_x_ops_content_hash\" $request_length';</pre> <p>A sample log line:</p> <pre class=\"highlight-bash\" data-language=\"bash\">192.168.4.1 - - [17/Feb/2012:16:02:42 -0800]\n  \"GET /organizations/nginx/cookbooks HTTP/1.1\" 200\n  \"0.346\" 12 \"-\"\n  \"Chef Knife/0.10.4 (ruby-1.9.3-p0;\n                      ohai-0.6.10;\n                      x86_64-darwin11.2.0;\n                      +http://opscode.com\n                      )\"\n  \"127.0.0.1:9460\" \"200\" \"0.339\" \"0.10.4\"\n  \"version=1.0\" \"adam\" \"2012-02-18T00:02:42Z\"\n  \"2jmj7l5rSw0yVb/vlWAYkK/YBwk=\" 871</pre> <p>Field descriptions:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Field</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">$remote_addr</code></td> <td>The IP address of the client who made this request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">$remote_user</code></td> <td>The HTTP basic auth user name of this request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">$time_local</code></td> <td>The local time of the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">$request</code></td> <td>The HTTP request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">$status</code></td> <td>The HTTP status code.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">$request_time</code></td> <td>The time it took to service the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">$body_bytes_sent</code></td> <td>The number of bytes in the HTTP response body.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">$http_referrer</code></td> <td>The HTTP referrer.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">$http_user_agent</code></td> <td>The user agent of the requesting client.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">$upstream_addr</code></td> <td>The upstream reverse proxy used to service this request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">$upstream_status</code></td> <td>The upstream reverse proxy response status code.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">$upstream_response_time</code></td> <td>The upstream reverse proxy response time.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">$http_x_chef_version</code></td> <td>The version of Chef used to make this request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">$http_x_ops_sign</code></td> <td>The version of the authentication protocol.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">$http_x_ops_userid</code></td> <td>The client name that was used to sign this request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">$http_x_ops_timestamp</code></td> <td>The timestamp from when this request was signed.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">$http_x_ops_content_hash</code></td> <td>The hash of the contents of this request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">$request_length</code></td> <td>The length of this request.</td> </tr> </tbody> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_logs.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_logs.html</a>\n  </p>\n</div>\n","server_12-5/server_manage_clients":"<h1 id=\"manage-client-keys\">Manage Client Keys</h1> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This topic is about using the Chef management console to manage keys.</p> </div> <p>A client is an actor that has permission to access the Chef server. A client is most often a node (on which the chef-client runs), but is also a workstation (on which knife runs), or some other machine that is configured to use the Chef server API. Each request to the Chef server that is made by a client uses a private key for authentication that must be authorized by the public key on the Chef server.</p> <p>Use the Chef management console to create a key pair, download the private key, and then set permissions, to delete a key, or to reset a key.</p>  <h2 id=\"id1\">Manage Client Keys</h2> <p>Client keys can be managed from the Chef management console.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The images below refer to client keys as a “Client”.</p> </div>  <h3 id=\"add\">Add</h3> <p>To add a client key:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Clients</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Create</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Create Client</strong> dialog box, enter the name of the client key.</p> <img alt=\"_images/step_manage_webui_policy_client_add.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_client_add.png\"> <p>Click <strong>Create Client</strong>.</p> </li> <li>\n<p class=\"first\">Copy the private key:</p> <img alt=\"_images/step_manage_webui_policy_client_add_private_key.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_client_add_private_key.png\"> <p>or download and save the private key locally:</p> <img alt=\"_images/step_manage_webui_policy_client_add_private_key_download.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_client_add_private_key_download.png\"> </li> </ol>   <h3 id=\"delete\">Delete</h3> <p>To delete a client key:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Clients</strong>.</p> </li> <li>\n<p class=\"first\">Select a client key.</p> </li> <li>\n<p class=\"first\">Click <strong>Delete</strong>.</p> <img alt=\"_images/step_manage_webui_policy_client_delete.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_client_delete.png\"> </li> </ol>   <h3 id=\"reset-key\">Reset Key</h3> <p>To regenerate a client key:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Clients</strong>.</p> </li> <li>\n<p class=\"first\">Select a client key.</p> </li> <li>\n<p class=\"first\">Click the <strong>Details</strong> tab.</p> </li> <li>\n<p class=\"first\">Click <strong>Reset Key</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Reset Key</strong> dialog box, confirm that the key should be regenerated and click the <strong>Reset Key</strong> button:</p> <img alt=\"_images/step_manage_webui_admin_organization_reset_key.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_admin_organization_reset_key.png\"> </li> <li>\n<p class=\"first\">Copy the private key:</p> <img alt=\"_images/step_manage_webui_policy_client_reset_key_copy.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_client_reset_key_copy.png\"> <p>or download and save the private key locally:</p> <img alt=\"_images/step_manage_webui_policy_client_reset_key_download.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_client_reset_key_download.png\"> </li> </ol>   <h3 id=\"view-details\">View Details</h3> <p>To view client key details:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Clients</strong>.</li> <li>Select a client key.</li> <li>Click the <strong>Details</strong> tab.</li> </ol>   <h3 id=\"permissions\">Permissions</h3> <p>Permissions are used in the Chef server to define how users and groups can interact with objects on the server. Permissions are configured per-organization.</p> <p>The Chef server includes the following object permissions:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Permission</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><strong>Delete</strong></td> <td>Use the <strong>Delete</strong> permission to define which users and groups may delete an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] delete [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Grant</strong></td> <td>Use the <strong>Grant</strong> permission to define which users and groups may configure permissions on an object. This permission is required for any user who configures permissions using the <strong>Administration</strong> tab in the Chef management console.</td> </tr> <tr class=\"row-even\">\n<td><strong>Read</strong></td> <td>Use the <strong>Read</strong> permission to define which users and groups may view the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] show [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Update</strong></td> <td>Use the <strong>Update</strong> permission to define which users and groups may edit the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] edit [object_name]</code> argument to interact with objects on the Chef server and for any chef-client to save node data to the Chef server at the conclusion of a chef-client run.</td> </tr> </tbody> </table>  <h4 id=\"set\">Set</h4> <p>To set permissions list for a client key:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Clients</strong>.</li> <li>Select a client key.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>For each group listed under <strong>Name</strong>, select or de-select the <strong>Read</strong>, <strong>Update</strong>, <strong>Delete</strong>, and <strong>Grant</strong> permissions.</li> </ol>   <h4 id=\"update\">Update</h4> <p>To update the permissions list for a client key:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Clients</strong>.</li> <li>Select a client key.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>Click the <strong>+ Add</strong> button and enter the name of the user or group to be added.</li> <li>Select or de-select <strong>Read</strong>, <strong>Update</strong>, <strong>Delete</strong>, and <strong>Grant</strong> to update the permissions list for the user or group.</li> </ol>   <h4 id=\"view\">View</h4> <p>To view permissions for a client key:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Clients</strong>.</li> <li>Select a client key.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>Set the appropriate permissions: <strong>Delete</strong>, <strong>Grant</strong>, <strong>Read</strong>, and/or <strong>Update</strong>.</li> </ol>     <h2 id=\"chef-validator-keys\">chef-validator Keys</h2> <p>Every request made by the chef-client to the Chef server must be an authenticated request using the Chef server API and a private key. When the chef-client makes a request to the Chef server, the chef-client authenticates each request using a private key located in <code class=\"docutils literal\">/etc/chef/client.pem</code>.</p> <p>However, during the first chef-client run, this private key does not exist. Instead, the chef-client will attempt to use the private key assigned to the chef-validator, located in <code class=\"docutils literal\">/etc/chef/validation.pem</code>. (If, for any reason, the chef-validator is unable to make an authenticated request to the Chef server, the initial chef-client run will fail.)</p> <p>During the initial chef-client run, the chef-client will register with the Chef server using the private key assigned to the chef-validator, after which the chef-client will obtain a <code class=\"docutils literal\">client.pem</code> private key for all future authentication requests to the Chef server.</p> <p>After the initial chef-client run has completed successfully, the chef-validator is no longer required and may be deleted from the node. Use the <code class=\"docutils literal\">delete_validation</code> recipe found in the <code class=\"docutils literal\">chef-client</code> cookbook (<a class=\"reference external\" href=\"https://github.com/chef-cookbooks/chef-client\">https://github.com/chef-cookbooks/chef-client</a>) to remove the chef-validator.</p>  <h3 id=\"id2\">Add</h3> <p>To add a chef-validator key:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Clients</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Create</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Create Client</strong> dialog box, enter the name of the chef-validator key.</p> <img alt=\"_images/step_manage_webui_policy_validation_add.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_validation_add.png\"> <p>Select the <strong>Validation Client</strong> option. Click <strong>Create Client</strong>.</p> </li> <li>\n<p class=\"first\">Copy the private key:</p> <img alt=\"_images/step_manage_webui_policy_client_add_private_key.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_client_add_private_key.png\"> <p>or download and save the private key locally:</p> <img alt=\"_images/step_manage_webui_policy_client_add_private_key_download.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_client_add_private_key_download.png\"> </li> </ol>   <h3 id=\"id3\">Delete</h3> <p>To delete a chef-validator key:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Clients</strong>.</p> </li> <li>\n<p class=\"first\">Select a chef-validator key.</p> </li> <li>\n<p class=\"first\">Click <strong>Delete</strong>.</p> <img alt=\"_images/step_manage_webui_policy_validation_delete.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_validation_delete.png\"> </li> </ol>   <h3 id=\"id4\">Reset Key</h3> <p>To reset a chef-validator key:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Clients</strong>.</p> </li> <li>\n<p class=\"first\">Select a chef-validator key.</p> </li> <li>\n<p class=\"first\">Click the <strong>Details</strong> tab.</p> </li> <li>\n<p class=\"first\">Click <strong>Reset Key</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Reset Key</strong> dialog box, confirm that the key should be regenerated and click the <strong>Reset Key</strong> button:</p> <img alt=\"_images/step_manage_webui_admin_organization_reset_key.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_admin_organization_reset_key.png\"> </li> <li>\n<p class=\"first\">Copy the private key:</p> <img alt=\"_images/step_manage_webui_policy_client_reset_key_copy.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_client_reset_key_copy.png\"> <p>or download and save the private key locally:</p> <img alt=\"_images/step_manage_webui_policy_client_reset_key_download.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_client_reset_key_download.png\"> </li> </ol>   <h3 id=\"id5\">View Details</h3> <p>To view details for a chef-validator key:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Clients</strong>.</p> </li> <li>\n<p class=\"first\">Select a chef-validator key.</p> <img alt=\"_images/step_manage_webui_policy_validation_view_details.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_validation_view_details.png\"> </li> <li>\n<p class=\"first\">Click the <strong>Details</strong> tab.</p> </li> </ol>   <h3 id=\"id6\">Permissions</h3> <p>Permissions are used in the Chef server to define how users and groups can interact with objects on the server. Permissions are configured per-organization.</p> <p>The Chef server includes the following object permissions:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Permission</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><strong>Delete</strong></td> <td>Use the <strong>Delete</strong> permission to define which users and groups may delete an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] delete [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Grant</strong></td> <td>Use the <strong>Grant</strong> permission to define which users and groups may configure permissions on an object. This permission is required for any user who configures permissions using the <strong>Administration</strong> tab in the Chef management console.</td> </tr> <tr class=\"row-even\">\n<td><strong>Read</strong></td> <td>Use the <strong>Read</strong> permission to define which users and groups may view the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] show [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Update</strong></td> <td>Use the <strong>Update</strong> permission to define which users and groups may edit the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] edit [object_name]</code> argument to interact with objects on the Chef server and for any chef-client to save node data to the Chef server at the conclusion of a chef-client run.</td> </tr> </tbody> </table>  <h4 id=\"id7\">Set</h4> <p>To update the permissions list for a chef-validator key:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Clients</strong>.</li> <li>Select a chef-validator key.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>Click the <strong>+ Add</strong> button and enter the name of the user or group to be added.</li> <li>Select or de-select <strong>Delete</strong>, <strong>Grant</strong>, <strong>Read</strong>, and/or <strong>Update</strong> to update the permissions list for the user or group.</li> </ol>   <h4 id=\"id8\">Update</h4> <p>To update the permissions list for a client key:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Clients</strong>.</li> <li>Select a client key.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>Click the <strong>+ Add</strong> button and enter the name of the user or group to be added.</li> <li>Select or de-select <strong>Read</strong>, <strong>Update</strong>, <strong>Delete</strong>, and <strong>Grant</strong> to update the permissions list for the user or group.</li> </ol>   <h4 id=\"id9\">View</h4> <p>To view permissions for a chef-validator key:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Clients</strong>.</li> <li>Select a chef-validator key.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>Set the appropriate permissions: <strong>Delete</strong>, <strong>Grant</strong>, <strong>Read</strong>, and/or <strong>Update</strong>.</li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_manage_clients.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_manage_clients.html</a>\n  </p>\n</div>\n","server_12-5/install_server_tiered":"<h1 id=\"tiered\">Tiered</h1> <p>This topic describes how to set up the Chef server with a single back end and multiple load-balanced frontend servers.</p> <img alt=\"_images/chef_server_tiered.png\" src=\"https://docs.chef.io/release/server_12-5/_images/chef_server_tiered.png\">  <h2 id=\"prerequisites\">Prerequisites</h2> <p>Before installing the Chef server software, perform the following steps:</p> <ul class=\"simple\"> <li>The backend server must be accessible from each frontend server. A virtual IP address is created and managed by the Chef server, but will also need to be added to the DNS so that all machines in the tiered configuration may access it.</li> <li>Persistent data on the backend Chef server is primarily composed of cookbook files and directories. Separate disks should be dedicated entirely to storing this data prior to installing the Chef server.</li> <li>Load-balancing should be used with frontend servers, along with a DNS entry for the virtual IP address used for load balancing. This virtual IP address is added to the chef-server.rb file as the <code class=\"docutils literal\">api_fqdn</code>.</li> <li>All required ports must be open. See the Firewalls section (below) for the list of ports. All connections to and from the Chef server are accomplished via TCP. Refer to the operating system’s manual or your systems administrators for instructions on how to configure to ports, if necessary.</li> <li>The hostname for the Chef server must be an FQDN, including the domain suffix, and must be resolvable by the backend and frontend servers. See <a class=\"reference external\" href=\"https://docs.chef.io/install_server_pre.html#hostnames\">Hostnames, FQDNs</a> for more information.</li> <li>\n<code class=\"docutils literal\">chef-server-ctl reconfigure</code> will not bind the <code class=\"docutils literal\">backend_vip</code> to the backend server. The easiest thing to do is just define <code class=\"docutils literal\">backend_vip</code> as the already configured main IP address of the backend system. If you need to use an additional address, it will need to be configured and bound on the system before <code class=\"docutils literal\">chef-server-ctl reconfigure</code> is run.</li> </ul>   <h2 id=\"disk-configuration\">Disk Configuration</h2> <p>Persistent data on the backend server of the Chef server is primarily composed of cookbook files and directories. Separate disks should be dedicated entirely to storing this data prior to installing the Chef server. These disks should:</p> <ul class=\"simple\"> <li>Utilize hardware RAID</li> <li>Be configured in either RAID1</li> </ul> <p>This assumes that:</p> <ul class=\"simple\"> <li>~300GB of raw, unpartitioned disk space is available</li> <li>The disk space presents as a single device. For example: <code class=\"docutils literal\">/dev/sdb</code>.</li> <li>The storage is added to a volume group named <code class=\"docutils literal\">opscode</code> and is presented to the Chef server by mounting on <code class=\"docutils literal\">/var/opt/opscode</code> before a reconfiguration</li> </ul> <p>The following commands properly set up disk configuration on the backend server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ pvcreate /dev/sdb</pre> <p>and:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ vgcreate opscode /dev/sdb</pre> <p>and:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ lvcreate -l 80%VG -n tiered opscode</pre>  <h3 id=\"mount-storage-device\">Mount Storage Device</h3> <p>To build and mount the storage device on the backend server, do the following:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Create the file system. For example, an <code class=\"docutils literal\">ext4</code> type named <code class=\"docutils literal\">tiered</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ mkfs.ext4 /dev/opscode/tiered</pre> <p>then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ mkdir -p /var/opt/opscode</pre> <p>and then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ mount /dev/opscode/tiered /var/opt/opscode</pre> </li> </ol>    <h2 id=\"backend\">Backend</h2> <p>Use the following steps to set up the backend Chef server:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Download the packages from <a class=\"reference external\" href=\"http://downloads.chef.io/chef-server/\">http://downloads.chef.io/chef-server/</a>. For Red Hat and CentOS 6:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh /tmp/chef-server-core-&lt;version&gt;.rpm</pre> <p>For Ubuntu:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -i /tmp/chef-server-core-&lt;version&gt;.deb</pre> <p>After a few minutes, the Chef server will be installed.</p> </li> <li>\n<p class=\"first\">Create a file named chef-server.rb that is located in the <code class=\"docutils literal\">/etc/opscode/</code> directory. See the chef-server.rb section below for an example of the settings and values that are required.</p> </li> </ol>   <h2 id=\"chef-server-rb\">chef-server.rb</h2> <p>The chef-server.rb file that is located in the <code class=\"docutils literal\">/etc/opscode/</code> directory describes the topology of the tiered configuration. On the backend server, create a file named chef-server.rb and save it in the <code class=\"docutils literal\">/etc/opscode/</code> directory.</p> <p>Add the following settings to the chef-server.rb file:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Define the topology type:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">topology \"tier\"</pre> </li> <li>\n<p class=\"first\">Define the backend server:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">server \"FQDN\",\n  :ipaddress =&gt; \"IP_ADDRESS\",\n  :role =&gt; \"backend\",\n  :bootstrap =&gt; true</pre> <p>Replace <code class=\"docutils literal\">FQDN</code> with the FQDN of the server and <code class=\"docutils literal\">IP_ADDRESS</code> with the IP address of the server. The role is a backend server is <code class=\"docutils literal\">\"backend\"</code>.</p> </li> <li>\n<p class=\"first\">Define the backend virtual IP address:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">backend_vip \"FQDN\",\n  :ipaddress =&gt; \"IP_ADDRESS\",\n  :device =&gt; \"eth0\"</pre> <p>Replace <code class=\"docutils literal\">FQDN</code> with the FQDN of the server. Replace <code class=\"docutils literal\">IP_ADDRESS</code> with the virtual IP address of the server. The <code class=\"docutils literal\">:device</code> parameter should be the ethernet interface to which the virtual IP address will bind. This is typically the public interface of the server. In a typical tiered install, the config here could also be just the main FQDN and IP address that are already configured for the backend. Running <code class=\"docutils literal\">chef-server-ctl reconfigure</code> will not bind the <code class=\"docutils literal\">backend_vip</code> address to an interface, this must be done on startup of the machine.</p> </li> <li>\n<p class=\"first\">Define each frontend server:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">server \"FQDN\",\n  :ipaddress =&gt; \"IP_ADDRESS\",\n  :role =&gt; \"frontend\"</pre> <p>Replace <code class=\"docutils literal\">FQDN</code> with the FQDN of the frontend server. Replace <code class=\"docutils literal\">IP_ADDRESS</code> with the IP address of the frontend server. Set <code class=\"docutils literal\">:role</code> to <code class=\"docutils literal\">\"frontend\"</code>.</p> <p>Add separate entry in the chef-server.rb file for each frontend server.</p> </li> <li>\n<p class=\"first\">Define the API FQDN:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">api_fqdn \"FQDN\"</pre> <p>Replace <code class=\"docutils literal\">FQDN</code> with the FQDN of the load balanced virtual IP address, which should be equal to the FQDN for the service URI that is used by the Chef server.</p> </li> <li>\n<p>Reconfigure the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl reconfigure</pre> </li> </ol>   <h2 id=\"frontend\">Frontend</h2> <p>For each frontend server, use the following steps to set up the Chef server:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Install the Chef server package. For Red Hat and CentOS 6:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh /tmp/chef-server-core-&lt;version&gt;.rpm</pre> <p>For Ubuntu:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -i /tmp/chef-server-core-&lt;version&gt;.deb</pre> <p>After a few minutes, the Chef server will be installed.</p> </li> <li>\n<p class=\"first\">Create the <code class=\"docutils literal\">/etc/opscode/</code> directory, and then copy the entire contents of the <code class=\"docutils literal\">/etc/opscode</code> directory from the primary backend server, including all certificates and the chef-server.rb file.</p> </li> <li>\n<p>Reconfigure the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl reconfigure</pre> </li> <li>\n<p>Start the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl start</pre> </li> <li>\n<p>Run the following command to create an administrator:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-create USER_NAME FIRST_NAME LAST_NAME EMAIL 'PASSWORD' --filename FILE_NAME</pre> <p>An RSA private key is generated automatically. This is the user’s private key and should be saved to a safe location. The <code class=\"docutils literal\">--filename</code> option will save the RSA private key to a specified path.</p> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-create stevedanno Steve Danno steved@chef.io 'abc123' --filename /path/to/stevedanno.pem</pre> </li> <li>\n<p>Run the following command to create an organization:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-create short_name 'full_organization_name' --association_user user_name --filename ORGANIZATION-validator.pem</pre> <p>The name must begin with a lower-case letter or digit, may only contain lower-case letters, digits, hyphens, and underscores, and must be between 1 and 255 characters. For example: <code class=\"docutils literal\">4thcoffee</code>.</p> <p>The full name must begin with a non-white space character and must be between 1 and 1023 characters. For example: <code class=\"docutils literal\">'Fourth Coffee, Inc.'</code>.</p> <p>The <code class=\"docutils literal\">--association_user</code> option will associate the <code class=\"docutils literal\">user_name</code> with the <code class=\"docutils literal\">admins</code> security group on the Chef server.</p> <p>An RSA private key is generated automatically. This is the chef-validator key and should be saved to a safe location. The <code class=\"docutils literal\">--filename</code> option will save the RSA private key to a specified path.</p> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-create 4thcoffee 'Fourth Coffee, Inc.' --association_user stevedanno --filename /path/to/4thcoffee-validator.pem</pre> </li> <li>\n<p>Reconfigure the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl reconfigure</pre> </li> </ol>   <h2 id=\"enable-features\">Enable Features</h2> <p>Enable additional features of the Chef server! The packages may be downloaded directly as part of the installation process or they may be first downloaded to a local directory, and then installed.</p> <p><strong>Use Downloads</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are not behind a firewall (and have connectivity to <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a>), these packages can be installed as described below.</p> <table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"80%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Command</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Chef Manage</td> <td>\n<p class=\"first\">Use Chef management console to manage data bags, attributes, run-lists, roles, environments, and cookbooks from a web user interface.</p> <p>On each front end server in the Chef server configuration, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-manage</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-manage-ctl reconfigure</pre> <p class=\"last\">This updates the Chef server and creates the <code class=\"docutils literal\">/etc/opscode-manage/secrets.rb</code> file. When running the Chef management console 1.11 (or higher), copy the <code class=\"docutils literal\">secrets.rb</code> file in the <code class=\"docutils literal\">/etc/opscode-manage</code> directory on one of the frontend servers to the same directory on each of the other frontend servers, and then rerun <code class=\"docutils literal\">chef-manage-ctl reconfigure</code> so the copied <code class=\"docutils literal\">/etc/opscode-manage/secrets.rb</code> file gets used correctly.</p> </td> </tr> <tr class=\"row-odd\">\n<td>Chef Replication</td> <td>\n<p class=\"first\">Use Chef replication to asynchronously distribute cookbook, environment, role, and data bag data from a single, primary Chef server to one (or more) replicas of that Chef server.</p> <p>On all servers in the Chef server configuration, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-sync</pre> <p>On the primary Chef server, create the chef-sync.rb file in the <code class=\"docutils literal\">/etc/chef-sync/</code> directory, and then add the following setting:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">role :master</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ chef-sync-ctl reconfigure</pre> </td> </tr> </tbody> </table> <p><strong>Use Local Packages</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are behind a firewall (and may not have connectivity to packages.chef.io), these packages can be downloaded from <a class=\"reference external\" href=\"https://downloads.chef.io/chef-manage/\">https://downloads.chef.io/chef-manage/</a>, and then installed manually. First download the package that is appropriate for the platform, save it to a local path, and then run the <code class=\"docutils literal\">install</code> command using the <code class=\"docutils literal\">--path</code> option to specify the directory in which the package is located:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install PACKAGE_NAME --path /path/to/package/directory</pre> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install chef-manage --path /root/packages</pre> <p>The <code class=\"docutils literal\">chef-server-ctl</code> command will install the first <code class=\"docutils literal\">chef-manage</code> package found in the <code class=\"docutils literal\">/root/packages</code> directory.</p> <p><strong>Install Reporting</strong></p> <p>To set up the Reporting server:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Install the package on each frontend and backend Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install opscode-reporting</pre> </li> <li>\n<p class=\"first\">Reconfigure the Chef server on the backend primary server (bootstrap):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Reconfigure the Reporting server on the backend primary server (bootstrap):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-reporting-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Copy the entire <code class=\"docutils literal\">/etc/opscode-reporting</code> directory from the backend primary server to all frontend and backend servers. For example, from each server run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ scp -r &lt;Bootstrap server IP&gt;:/etc/opscode-reporting /etc</pre> <p>or from the backend primary server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ scp -r /etc/opscode-reporting &lt;each servers IP&gt;:/etc</pre> </li> <li>\n<p class=\"first\">Reconfigure any Chef server on which Reporting services have been installed:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Reconfigure Reporting services on each server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-reporting-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Verify the installation:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-reporting-ctl test</pre> </li> </ol>   <h2 id=\"reference\">Reference</h2> <p>The following sections show an example chef-server.rb file and a list of the ports that are required by the Chef server.</p>  <h3 id=\"id1\">chef-server.rb</h3> <p>A completed chef-server.rb configuration file for a four server tiered Chef server configuration, consisting of:</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"38%\"> <col width=\"38%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">FQDN</th> <th class=\"head\">Real IP Address</th> <th class=\"head\">Role</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>be1.example.com</td> <td>192.168.4.1</td> <td>backend</td> </tr> <tr class=\"row-odd\">\n<td>fe1.example.com</td> <td>192.168.4.2</td> <td>frontend</td> </tr> <tr class=\"row-even\">\n<td>fe2.example.com</td> <td>192.168.4.3</td> <td>frontend</td> </tr> <tr class=\"row-odd\">\n<td>fe3.example.com</td> <td>192.168.4.4</td> <td>frontend</td> </tr> <tr class=\"row-even\">\n<td>chef.example.com</td> <td> </td> <td>load balanced frontend VIP</td> </tr> <tr class=\"row-odd\">\n<td>be.example.com</td> <td>192.168.4.7</td> <td>load balanced backend VIP</td> </tr> </tbody> </table> <p>Looks like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">topology \"tier\"\n\nserver \"be1.example.com\",\n  :ipaddress =&gt; \"192.168.4.1\",\n  :role =&gt; \"backend\",\n  :bootstrap =&gt; true\n\nbackend_vip \"be.example.com\",\n  :ipaddress =&gt; \"192.168.4.7\",\n  :device =&gt; \"eth0\"\n\nserver \"fe1.example.com\",\n  :ipaddress =&gt; \"192.168.4.2\",\n  :role =&gt; \"frontend\"\n\nserver \"fe2.example.com\",\n  :ipaddress =&gt; \"192.168.4.3\",\n  :role =&gt; \"frontend\"\n\nserver \"fe3.example.com\",\n  :ipaddress =&gt; \"192.168.4.4\",\n  :role =&gt; \"frontend\"\n\napi_fqdn \"chef.example.com\"</pre>   <h3 id=\"firewalls\">Firewalls</h3> <p>All of the ports used by the Chef server are TCP ports. Refer to the operating system’s manual or site systems administrators for instructions on how to enable changes to ports, if necessary.</p> <p>All services must be listening on the appropriate ports. Most monitoring systems provide a means of testing whether a given port is accepting connections and service-specific tools may also be available. In addition, the generic system tool Telnet can also be used to initiate the connection:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ telnet HOST_NAME PORT</pre> <p>A single loopback interface should be configured using the <code class=\"docutils literal\">127.0.0.1</code> address. This ensures that all of the services are available to the Chef server, in the event that the Chef server attempts to contact itself from within a front or back end machine. All ports should be accessible through the loopback interface of their respective hosts.</p>  <h4 id=\"id2\">Backend</h4> <p>For back-end servers in a tiered Chef server installation, ensure that ports marked as external (marked as <code class=\"docutils literal\">yes</code> in the <strong>External</strong> column) are open and accessible via any firewalls that are in use:</p> <table class=\"docutils\"> <colgroup> <col width=\"11%\"> <col width=\"78%\"> <col width=\"11%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Port</th> <th class=\"head\">Service Name, Description</th> <th class=\"head\">External</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>80, 443, 9683</td> <td>\n<p class=\"first\"><strong>nginx</strong></p> <p>The <strong>nginx</strong> service is used to manage traffic to the Chef server, including virtual hosts for internal and external API request/response routing, external add-on request routing, and routing between front- and back-end components.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Port 9683 is used to internally load balance the <strong>oc_bifrost</strong> service.</p> </div> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>9463</td> <td>\n<p class=\"first\"><strong>oc_bifrost</strong></p> <p class=\"last\">The <strong>oc_bifrost</strong> service ensures that every request to view or manage objects stored on the Chef server is authorized.</p> </td> <td> </td> </tr> <tr class=\"row-even\">\n<td>8983</td> <td>\n<p class=\"first\"><strong>opscode-solr4</strong></p> <p class=\"last\">The <strong>opscode-solr4</strong> service is used to create the search indexes used for searching objects like nodes, data bags, and cookbooks. (This service ensures timely search results via the Chef server API; data that is used by the Chef platform is stored in PostgreSQL.)</p> </td> <td> </td> </tr> <tr class=\"row-odd\">\n<td>5432</td> <td>\n<p class=\"first\"><strong>postgresql</strong></p> <p class=\"last\">The <strong>postgresql</strong> service is used to store node, object, and user data.</p> </td> <td> </td> </tr> <tr class=\"row-even\">\n<td>5672, 15672</td> <td>\n<p class=\"first\"><strong>rabbitmq</strong></p> <p class=\"last\">The <strong>rabbitmq</strong> service is used to provide the message queue that is used by the Chef server to get search data to Apache Solr so that it can be indexed for search. When Chef Analytics is confiugred, the <strong>rabbitmq</strong> service is also used to send data from the Chef server to the Chef Analytics server.</p> </td> <td> </td> </tr> <tr class=\"row-odd\">\n<td>16379</td> <td>\n<p class=\"first\"><strong>redis_lb</strong></p> <p class=\"last\">Key-value store used in conjunction with Nginx to route requests and populate request data used by the Chef server.</p> </td> <td> </td> </tr> <tr class=\"row-even\">\n<td>4321</td> <td>\n<p class=\"first\"><strong>bookshelf</strong></p> <p class=\"last\">The <strong>bookshelf</strong> service is an Amazon Simple Storage Service (S3)-compatible service that is used to store cookbooks, including all of the files—recipes, templates, and so on—that are associated with each cookbook.</p> </td> <td> </td> </tr> <tr class=\"row-odd\">\n<td>8000</td> <td>\n<p class=\"first\"><strong>opscode-erchef</strong></p> <p>The <strong>opscode-erchef</strong> service is an Erlang-based service that is used to handle Chef server API requests to the following areas within the Chef server:</p> <ul class=\"last simple\"> <li>Cookbooks</li> <li>Data bags</li> <li>Environments</li> <li>Nodes</li> <li>Roles</li> <li>Sandboxes</li> <li>Search</li> </ul> </td> <td> </td> </tr> </tbody> </table>   <h4 id=\"id3\">Frontend</h4> <p>For front-end servers, ensure that ports marked as external (marked as <code class=\"docutils literal\">yes</code> in the <strong>External</strong> column) are open and accessible via any firewalls that are in use:</p> <table class=\"docutils\"> <colgroup> <col width=\"11%\"> <col width=\"78%\"> <col width=\"11%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Port</th> <th class=\"head\">Service Name, Description</th> <th class=\"head\">External</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>80, 443, 9683</td> <td>\n<p class=\"first\"><strong>nginx</strong></p> <p>The <strong>nginx</strong> service is used to manage traffic to the Chef server, including virtual hosts for internal and external API request/response routing, external add-on request routing, and routing between front- and back-end components.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Port 9683 is used to internally load balance the <strong>oc_bifrost</strong> service.</p> </div> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>9463</td> <td>\n<p class=\"first\"><strong>oc_bifrost</strong></p> <p class=\"last\">The <strong>oc_bifrost</strong> service ensures that every request to view or manage objects stored on the Chef server is authorized.</p> </td> <td> </td> </tr> <tr class=\"row-even\">\n<td>9090</td> <td>\n<p class=\"first\"><strong>oc-id</strong></p> <p class=\"last\">The <strong>oc-id</strong> service enables OAuth 2.0 authentication to the Chef server by external applications, including Chef Supermarket and Chef Analytics. OAuth 2.0 uses token-based authentication, where external applications use tokens that are issued by the <strong>oc-id</strong> provider. No special credentials—<code class=\"docutils literal\">webui_priv.pem</code> or privileged keys—are stored on the external application.</p> </td> <td> </td> </tr> <tr class=\"row-odd\">\n<td>8000</td> <td>\n<p class=\"first\"><strong>opscode-erchef</strong></p> <p>The <strong>opscode-erchef</strong> service is an Erlang-based service that is used to handle Chef server API requests to the following areas within the Chef server:</p> <ul class=\"last simple\"> <li>Cookbooks</li> <li>Data bags</li> <li>Environments</li> <li>Nodes</li> <li>Roles</li> <li>Sandboxes</li> <li>Search</li> </ul> </td> <td> </td> </tr> </tbody> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/install_server_tiered.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/install_server_tiered.html</a>\n  </p>\n</div>\n","server_12-5/manage":"<h1 id=\"chef-manage-title\">Chef Manage</h1> <p>The Chef management console enables the management of nodes, data bags, roles, environments, and cookbooks by using a web user interface. In addition, access to nodes, data bags, roles, environments, and cookbooks is configurable using role-based access control (RBAC).</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is a premium feature of Chef. Access to premium features is free (up to 25 nodes) when a premium feature is installed on-premises. For higher node counts, access is <a class=\"reference external\" href=\"https://www.chef.io/pricing/\">available via subscription</a>.</p> </div>  <h2 id=\"nodes\">Nodes</h2> <p>A node is any machine—physical, virtual, cloud, network device, etc.—that is under management by Chef.</p> <p>The Chef management console provides ways for users to <a class=\"reference external\" href=\"https://docs.chef.io/server_manage_nodes.html#manage\">delete nodes and reset their private keys</a>, <a class=\"reference external\" href=\"https://docs.chef.io/server_manage_nodes.html#node-attributes\">edit node attributes</a>, <a class=\"reference external\" href=\"https://docs.chef.io/server_manage_nodes.html#run-lists\">manage the run-lists</a>, <a class=\"reference external\" href=\"https://docs.chef.io/server_manage_nodes.html#permissions\">configure user and group permissions</a>, and <a class=\"reference external\" href=\"https://docs.chef.io/server_manage_nodes.html#manage-tags\">manage tags</a>.</p> <img alt=\"_images/step_manage_webui_nodes.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_nodes.png\">  <h3 id=\"search\">Search</h3> <p>Search indexes allow queries to be made for any type of data that is indexed by the Chef server, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the <code class=\"docutils literal\">search</code> subcommand in knife, the <code class=\"docutils literal\">search</code> method in the Recipe DSL, the search box in the Chef management console, and by using the <code class=\"docutils literal\">/search</code> or <code class=\"docutils literal\">/search/INDEX</code> endpoints in the Chef server API. The search engine is based on Apache Solr and is run from the Chef server.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The syntax for search queries in the Chef management console is identical to the syntax for search queries used with knife, the command line tool used to manage objects on the Chef server.</p> </div>  <h4 id=\"query-syntax\">Query Syntax</h4> <p>A search query is comprised of two parts: the key and the search pattern. A search query has the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">key:search_pattern</pre> <p>where <code class=\"docutils literal\">key</code> is a field name that is found in the JSON description of an indexable object on the Chef server (a role, node, client, environment, or data bag) and <code class=\"docutils literal\">search_pattern</code> defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both <code class=\"docutils literal\">key</code> and <code class=\"docutils literal\">search_pattern</code> are case-sensitive; <code class=\"docutils literal\">key</code> has limited support for multiple character wildcard matching using an asterisk (“*”) (and as long as it is not the first character).</p>   <h4 id=\"keys\">Keys</h4> <p>A field name/description pair is available in the JSON object. Use the field name when searching for this information in the JSON object. Any field that exists in any JSON description for any role, node, chef-client, environment, or data bag can be searched.</p>  <h5 id=\"nested-fields\">Nested Fields</h5> <p>A nested field appears deeper in the JSON data structure. For example, information about a network interface might be several layers deep: <code class=\"docutils literal\">node[:network][:interfaces][:en1]</code>. When nested fields are present in a JSON structure, the chef-client will extract those nested fields to the top-level, flattening them into compound fields that support wildcard search patterns.</p> <p>By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor.</p> <p>Consider the following snippet of JSON data:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\"network\":\n  [\n  //snipped...\n    \"interfaces\",\n      {\"en1\": {\n        \"number\": \"1\",\n        \"flags\": [\n          \"UP\",\n          \"BROADCAST\",\n          \"SMART\",\n          \"RUNNING\",\n          \"SIMPLEX\",\n          \"MULTICAST\"\n        ],\n        \"addresses\": {\n          \"fe80::fa1e:dfff:fed8:63a2\": {\n            \"scope\": \"Link\",\n            \"prefixlen\": \"64\",\n            \"family\": \"inet6\"\n          },\n          \"f8:1e:df:d8:63:a2\": {\n            \"family\": \"lladdr\"\n          },\n          \"192.168.0.195\": {\n            \"netmask\": \"255.255.255.0\",\n            \"broadcast\": \"192.168.0.255\",\n            \"family\": \"inet\"\n          }\n        },\n        \"mtu\": \"1500\",\n        \"media\": {\n          \"supported\": {\n            \"autoselect\": {\n              \"options\": [\n\n              ]\n            }\n          },\n          \"selected\": {\n            \"autoselect\": {\n              \"options\": [\n\n              ]\n            }\n          }\n        },\n        \"type\": \"en\",\n        \"status\": \"active\",\n        \"encapsulation\": \"Ethernet\"\n      },\n  //snipped...</pre> <p>Before this data is indexed on the Chef server, the nested fields are extracted into the top level, similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">\"broadcast\" =&gt; \"192.168.0.255\",\n\"flags\"     =&gt; [\"UP\", \"BROADCAST\", \"SMART\", \"RUNNING\", \"SIMPLEX\", \"MULTICAST\"]\n\"mtu\"       =&gt; \"1500\"</pre> <p>which allows searches like the following to find data that is present in this node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"broadcast:192.168.0.*\"</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"mtu:1500\"</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"flags:UP\"</pre> <p>This data is also flattened into various compound fields, which follow the same pattern as the JSON hierarchy and use underscores (<code class=\"docutils literal\">_</code>) to separate the levels of data, similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\"># ...snip...\n\"network_interfaces_en1_addresses_192.168.0.195_broadcast\" =&gt; \"192.168.0.255\",\n\"network_interfaces_en1_addresses_fe80::fa1e:tldr_family\"  =&gt; \"inet6\",\n\"network_interfaces_en1_addresses\"                         =&gt; [\"fe80::fa1e:tldr\",\"f8:1e:df:tldr\",\"192.168.0.195\"]\n# ...snip...</pre> <p>which allows searches like the following to find data that is present in this node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"network_interfaces_en1_addresses:192.168.0.195\"</pre> <p>This flattened data structure also supports using wildcard compound fields, which allow searches to omit levels within the JSON data structure that are not important to the search query. In the following example, an asterisk (<code class=\"docutils literal\">*</code>) is used to show where the wildcard can exist when searching for a nested field:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">\"network_interfaces_*_flags\"     =&gt; [\"UP\", \"BROADCAST\", \"SMART\", \"RUNNING\", \"SIMPLEX\", \"MULTICAST\"]\n\"network_interfaces_*_addresses\" =&gt; [\"fe80::fa1e:dfff:fed8:63a2\", \"192.168.0.195\", \"f8:1e:df:d8:63:a2\"]\n\"network_interfaces_en0_media_*\" =&gt; [\"autoselect\", \"none\", \"1000baseT\", \"10baseT/UTP\", \"100baseTX\"]\n\"network_interfaces_en1_*\"       =&gt; [\"1\", \"UP\", \"BROADCAST\", \"SMART\", \"RUNNING\", \"SIMPLEX\", \"MULTICAST\",\n                                     \"fe80::fa1e:dfff:fed8:63a2\", \"f8:1e:df:d8:63:a2\", \"192.168.0.195\",\n                                     \"1500\", \"supported\", \"selected\", \"en\", \"active\", \"Ethernet\"]</pre> <p>For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">network_interfaces__flags</pre> <p>This query will search within the <code class=\"docutils literal\">flags</code> node, within the JSON structure, for each of <code class=\"docutils literal\">UP</code>, <code class=\"docutils literal\">BROADCAST</code>, <code class=\"docutils literal\">SMART</code>, <code class=\"docutils literal\">RUNNING</code>, <code class=\"docutils literal\">SIMPLEX</code>, and <code class=\"docutils literal\">MULTICAST</code>.</p>    <h4 id=\"about-patterns\">About Patterns</h4> <p>A search pattern is a way to fine-tune search results by returning anything that matches some type of incomplete search query. There are four types of search patterns that can be used when searching the search indexes on the Chef server: exact, wildcard, range, and fuzzy.</p>  <h5 id=\"exact-matching\">Exact Matching</h5> <p>An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by Ruby or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (‘ ‘) and a search pattern with double quotes (” ”).</p>   <h5 id=\"wildcard-matching\">Wildcard Matching</h5> <p>A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:</p> <ul class=\"simple\"> <li>A question mark (<code class=\"docutils literal\">?</code>) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)</li> <li>An asterisk (<code class=\"docutils literal\">*</code>) can be used to replace any number of characters (including zero)</li> </ul>   <h5 id=\"range-matching\">Range Matching</h5> <p>A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (“[ ]”) to denote inclusive boundaries and curly braces (“{ }”) to denote exclusive boundaries and with the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">boundary TO boundary</pre> <p>where <code class=\"docutils literal\">TO</code> is required (and must be capitalized).</p>   <h5 id=\"fuzzy-matching\">Fuzzy Matching</h5> <p>A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">\"search_query\"~edit_distance</pre> <p>where <code class=\"docutils literal\">search_query</code> is the string that will be used during the search and <code class=\"docutils literal\">edit_distance</code> is the proximity. A tilde (“~”) is used to separate the edit distance from the search query.</p>    <h4 id=\"about-operators\">About Operators</h4> <p>An operator can be used to ensure that certain terms are included in the results, are excluded from the results, or are not included even when other aspects of the query match. Searches can use the following operators:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operator</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">AND</code></td> <td>Use to find a match when both terms exist.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">OR</code></td> <td>Use to find a match if either term exists.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">NOT</code></td> <td>Use to exclude the term after <code class=\"docutils literal\">NOT</code> from the search results.</td> </tr> </tbody> </table> <p>Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>Using <code class=\"docutils literal\">AND NOT</code> together may trigger an error. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ERROR: knife search failed: invalid search query:\n'datacenter%3A123%20AND%20NOT%20hostname%3Adev-%20AND%20NOT%20hostanem%3Asyslog-'\nParse error at offset: 38 Reason: Expected one of \\ at line 1, column 42 (byte 42) after AND</pre> <p>Use <code class=\"docutils literal\">-</code> instead of <code class=\"docutils literal\">NOT</code>. For example:</p> <pre class=\"last highlight-bash\" data-language=\"bash\">$ knife search sample \"id:foo AND -id:bar\"</pre> </div>   <h4 id=\"special-characters\">Special Characters</h4> <p>A special character can be used to fine-tune a search query and to increase the accuracy of the search results. The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (<code class=\"docutils literal\">\\</code>):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">+  -  &amp;&amp;  | |  !  ( )  { }  [ ]  ^  \"  ~  *  ?  :  \\</pre> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">\\(1\\+1\\)\\:2</pre>     <h2 id=\"reports\">Reports</h2> <p>Use Reporting to keep track of what happens during the execution of chef-client runs across all of the machines that are under management by Chef. Reports can be generated for the entire organization and they can be generated for specific nodes.</p> <p>Reporting data is collected during the chef-client run and the results are posted to the Chef server at the end of the chef-client run at the same time the node object is uploaded to the Chef server.</p> <p>The Chef management console provides ways for users to <a class=\"reference external\" href=\"https://docs.chef.io/server_manage_reports.html#configure-reports\">configure the timeframe</a> around which a report is built, and then to <a class=\"reference external\" href=\"https://docs.chef.io/server_manage_reports.html#view-reports\">review the reports</a> that are available for that timeframe.</p> <img alt=\"_images/step_manage_webui_reports.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_reports.png\">   <h2 id=\"policy\">Policy</h2> <p>Policy maps business and operational requirements, process, and workflow to settings and objects stored on the Chef server:</p> <ul class=\"simple\"> <li>Roles define server types, such as “web server” or “database server”</li> <li>Environments define process, such as “dev”, “staging”, or “production”</li> <li>Certain types of data—passwords, user account data, and other sensitive items—can be placed in data bags, which are located in a secure sub-area on the Chef server that can only be accessed by nodes that authenticate to the Chef server with the correct SSL certificates</li> <li>The cookbooks (and cookbook versions) in which organization-specific configuration policies are maintained</li> </ul> <p>The Chef management console provides ways for users to manage <a class=\"reference external\" href=\"https://docs.chef.io/server_manage_data_bags.html\">data bags</a>, <a class=\"reference external\" href=\"https://docs.chef.io/server_manage_environments.html\">environments</a>, <a class=\"reference external\" href=\"https://docs.chef.io/server_manage_roles.html\">roles</a>, <a class=\"reference external\" href=\"https://docs.chef.io/server_manage_cookbooks.html\">cookbooks</a>, <a class=\"reference external\" href=\"https://docs.chef.io/server_manage_clients.html\">clients</a>, and <a class=\"reference external\" href=\"https://docs.chef.io/server_manage_nodes.html#manage-tags\">managing tags</a>.</p> <img alt=\"_images/step_manage_webui_policy.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy.png\">   <h2 id=\"admin\">Admin</h2> <p>Organizations, users, and groups can be managed from the Chef management console, including role-based access control for any user and group to any of the objects saved to the Chef server.</p> <p>The Chef server uses role-based access control (RBAC) to restrict access to objects—nodes, environments, roles, data bags, cookbooks, and so on. This ensures that only authorized user and/or chef-client requests to the Chef server are allowed. Access to objects on the Chef server is fine-grained, allowing access to be defined by object type, object, group, user, and organization. The Chef server uses permissions to define how a user may interact with an object, after they have been authorized to do so.</p> <img alt=\"_images/step_manage_webui_admin.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_admin.png\"><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/manage.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/manage.html</a>\n  </p>\n</div>\n","server_12-5/server_high_availability":"<h1 id=\"high-availability\">High Availability</h1> <p>The Chef server can operate in a high availability configuration that provides automated load balancing and failover for stateful components in the system architecture. This type of configuration typically splits the servers into two segments: front-end and back-end machines:</p> <img src=\"https://docs.chef.io/release/server_12-5/_images/chef_server_ha.svg\" width=\"600px\">  <p>Front-end machines handle requests to the Chef server API and access to the web user interface. Front-end machines should be load balanced and scaled horizontally by increasing the number of servers available to handle requests.</p> <p>Back-end machines handle data storage and retrieval, messaging and routing, analytics processing, and search. Back-end machines should be configured for failover using block level replication.</p> <p>For Chef server 12, the following high availability configurations are supported:</p> <ul class=\"simple\"> <li>DRBD</li> <li>AWS</li> </ul>  <h2 id=\"drbd\">DRBD</h2> <p>DRBD is a supported high availability configuration option for the Chef server.</p> <img src=\"https://docs.chef.io/release/server_12-5/_images/chef_server_ha_drbd.svg\" width=\"600px\">  <p>Front-end machines are scaled horizontally, and then load balanced using a hardware load balancer, SSL off-loading, and round-robin as the load balancing algorithm.</p> <p>Back-end machines are scaled vertically by adding memory, processing power, and faster disks to increase throughput, by adding faster disks and dedicated network interface cards to increase the reliability of DRBD and the responsiveness of the Chef server. Failover is achieved using:</p> <ul class=\"simple\"> <li>Asynchronous block level replication of logical volume managers, positioned between the two back-end machines</li> <li>A primary and backup cluster election using VRRP over unicast TCP/IP and Keepalived</li> <li>A virtual IP address to the primary Chef server that is maintained based on the results of the election done by Keepalived</li> </ul> <p>When the primary Chef server in the cluster fails, the VRRP heartbeat will stop. At this point, the backup server will begin transitioning to the primary state by:</p> <ol class=\"arabic simple\"> <li>Assigning the virtual IP address and sending a <code class=\"docutils literal\">proxy-arp</code>; this step transitions the virtual IP address, which means traffic will flow to the back-end Chef server while it makes the transition to becoming the primary Chef server.</li> <li>Attempting to take over as the primary Chef server for the DRBD device.</li> <li>Starting all of the back-end services.</li> </ol> <p>For more information about DRBD, see <a class=\"reference external\" href=\"http://www.drbd.org\">http://www.drbd.org</a>.</p>  <h3 id=\"graceful-transitions\">Graceful Transitions</h3> <p>The Keepalived service manages the VRRP and cluster transitions. It should be running on both the primary and secondary servers. To transition from the primary to the secondary, simply run the following command on the primary Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop keepalived</pre> <p>This will initiate a failover from the primary to the secondary Chef server and will cause the current primary Chef server to remove the virtual IP address, stop all services, unmount the DRBD device, and then become the secondary Chef server for the DRBD device. Meanwhile, the secondary Chef server will undergo a similar process, but become the primary Chef server.</p> <p>To view the progress of this transition, use the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ watch -n1 sudo chef-server-ctl ha-status</pre>   <h3 id=\"split-brains\">Split Brains</h3> <p>A <code class=\"docutils literal\">split-brain</code> event is a concept of clustered computing systems in which the cluster loses its heartbeat communication channel and becomes two unconnected pieces. Recovery from a <code class=\"docutils literal\">split-brain</code> event can be a complex issue and different clustering software packages use different methods.</p> <p>Failures happen, so completely preventing a <code class=\"docutils literal\">split-brain</code> event is not an absolute possibility. However, it is possible to alleviate some of the issues that crop up in any <code class=\"docutils literal\">split-brain</code> event scenarios by maxing out the heartbeat network bandwidth and optimizing transfer protocols.</p> <p>DRBD is a shared-nothing system. Data is replicated between hosts over a dedicated network link rather than stored on a central network-attached storage (NAS) or storage attached network (SAN) to which all hosts are connected. The most critical issue for storage in a high availability topology is loss of or corruption of data. Maximizing the amount of data that can be passed over the wire while all systems are up and running correctly minimizes the chance that something will be lost or unrecoverable if a host goes down.</p> <p>At any given time, only one DRBD host has <code class=\"docutils literal\">userland</code> access to data, This host is referred to as the primary node. The other host runs the DRBD daemon, but cannot mount the storage into the file system. The secondary node receives information from the primary node, and then replicates disk actions on its local storage copy (even if the partition looks like it doesn’t have a file system to which a <code class=\"docutils literal\">mount</code> command can be sent).</p> <p>The approach that DRBD takes to <code class=\"docutils literal\">split-brain</code> event situations is to degrade all partners still alive to secondary status, and then wait for manual intervention. This is called auto-fencing, with a goal of minimizing the potential for damage to your data. When you lose one of the partners in a high availability topology, a bit of manual intervention is required to ensure that the disks aren’t in a bad state and can be brought back up. These scenarios are discussed below, including suggestions for diagnosing and recovering from each scenario.</p>  <h4 id=\"custom-handlers\">Custom Handlers</h4> <p>DRBD configuration allows for custom handlers when a <code class=\"docutils literal\">split-brain</code> event happens. The basic handler sends a notification email to a configurable email address so the issue can be investigated.</p> <p>The <code class=\"docutils literal\">drbd.conf</code> file that is used with the Chef server specifies other built-in actions that may be taken in certain fault scenarios:</p> <pre class=\"highlight-bash\" data-language=\"bash\">after-sb-0pri discard-younger-primary;\nafter-sb-1pri discard-secondary;\nafter-sb-2pri call-pri-lost-after-sb;</pre> <p>What this means:</p> <ul class=\"simple\"> <li>after-sb-0pri: A <code class=\"docutils literal\">split-brain</code> event has been detected and neither node is the primary node. The <code class=\"docutils literal\">discard-younger-primary</code> action will roll back any changes made on the last host that was the primary node.</li> <li>after-sb-1pri: A <code class=\"docutils literal\">split-brain</code> event has been detected and only one node believes that it was the primary node when the event happened. The <code class=\"docutils literal\">discard-secondary</code> action will continue operations on the primary node and will assume that the secondary node was lost.</li> <li>after-sb-2pri: A <code class=\"docutils literal\">split-brain</code> event has been detected and both nodes believed they were primary nodes. The <code class=\"docutils literal\">call-pri-lost-after-sb</code> action will attempt to apply the <code class=\"docutils literal\">discard-younger-primary</code> from the <code class=\"docutils literal\">0pri</code> configuration to determine which host should be the primary node. Once determined, the other host takes action to become the secondary node.</li> </ul>    <h3 id=\"assumptions\">Assumptions</h3> <p>The following assumptions exist when the Chef server is deployed in a high availability topology:</p> <ul class=\"simple\"> <li>The back-end processes run on two hosts: <code class=\"docutils literal\">BE1</code> and <code class=\"docutils literal\">BE2</code>. <code class=\"docutils literal\">BE1</code> is the DRBD primary and the master Chef server; <code class=\"docutils literal\">BE2</code> is the DRBD secondary and the Chef server backup</li> <li>The back-end uses Keepalived and a dedicated network interface for heartbeat</li> <li>The back-end uses DRBD for file redundancy</li> </ul> <p>On each host, its own status is reported first, and then the status of its remote partner.</p> <p>When both the primary and secondary nodes are running and behaving as expected, the contents of <code class=\"docutils literal\">/proc/drbd</code> on the primary node will look similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">version: 8.4.0 (api:1/proto:86-100)\n  GIT-hash: 28753f559ab51b549d16bcf487fe625d5919c49c build by root@localhost.localdomain, 2012-02-06 12:59:36\n0: cs:Connected ro:Primary/Secondary ds:UpToDate/UpToDate C r-----\n      ns:4091788 nr:64 dw:112 dr:4092817 al:3 bm:252 lo:0 pe:0 ua:0 ap:0 ep:1 wo:b oos:0</pre> <p>On the secondary node, the status will look similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">version: 8.4.1 (api:1/proto:86-100)\n  GIT-hash: 91b4c048c1a0e06777b5f65d312b38d47abaea80 build by dag@Build64R6, 2011-12-21 06:08:50\n0: cs:Connected ro:Secondary/Primary ds:UpToDate/UpToDate C r-----\n      ns:0 nr:48 dw:48 dr:0 al:0 bm:2 lo:0 pe:0 ua:0 ap:0 ep:1 wo:b oos:0</pre> <p>For information about the settings in this file, see the DRBD website: <a class=\"reference external\" href=\"http://www.drbd.org/users-guide/ch-admin.html\">http://www.drbd.org/users-guide/ch-admin.html</a>.</p>   <h3 id=\"failure-scenarios\">Failure Scenarios</h3> <p>The following four common scenarios are discussed:</p> <ol class=\"arabic simple\"> <li>Back-end server #2 fails gracefully (all data is synced)</li> <li>Back-end server #2 hard fails badly (unsynced data)</li> <li>Back-end server #1 fails gracefully (all data is synced)</li> <li>Back-end server #1 hard fails badly (unsynced data)</li> <li>Both hosts are up as secondary, and the Chef server is unhappy</li> </ol>  <h4 id=\"scenarios-1-and-2\">Scenarios 1 and 2</h4> <p>When the active backup server fails, DRBD on the master will continue to function in primary mode, whether the DRBD on the secondary was shut down gracefully or became unavailable unexpectedly. Verify that DRBD is functioning by running <code class=\"docutils literal\">drbdadm role pc0</code> on the primary:</p> <pre class=\"highlight-bash\" data-language=\"bash\">[root@be1 opscode]# drbdadm role pc0\nPrimary/Unknown\n[root@be1 opscode]#</pre> <p>You can see the full status by running cat <code class=\"docutils literal\">/proc/drbd</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">version: 8.4.0 (api:1/proto:86-100)\n  GIT-hash: 28753f559ab51b549d16bcf487fe625d5919c49c build by    root@localhost.localdomain, 2012-02-06 12:59:36\n0: cs:WFConnection ro:Primary/Unknown ds:UpToDate/DUnknown C r-----\n      ns:672 nr:0 dw:24 dr:1697 al:2 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:b oos:130760</pre> <p>The disk partition is still mounted into the file system and can be used as normal.</p> <p>When the secondary becomes available again, two things may happen:</p> <ul class=\"simple\"> <li>If the status of the secondary reports <code class=\"docutils literal\">Inconsistent</code> or <code class=\"docutils literal\">UpToDate</code> without manual intervention, all is well.</li> <li>If it remains <code class=\"docutils literal\">DUnknown</code>, DRBD on the secondary can be manually restarted and it will start to sync. The <code class=\"docutils literal\">DUnknown</code> status is the report which indicates that DRBD sees no network connection to its partner.</li> </ul> <p>The last field in the <code class=\"docutils literal\">/prod/drbd</code> file (<code class=\"docutils literal\">oos</code>) reports how far the primary is out of sync with its partner. If the secondary is down and there are a lot of writes on the primary, this number will increase. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">version: 8.4.0 (api:1/proto:86-100)\nGIT-hash: 28753f559ab51b549d16bcf487fe625d5919c49c build by root@localhost.localdomain, 2012-02-06 12:59:36\n 0: cs:WFConnection ro:Primary/Unknown ds:UpToDate/DUnknown C r-----\n     ns:5205048 nr:64 dw:1466728 dr:4180125 al:354 bm:261 lo:1667 pe:0 ua:0 ap:1665 ep:1 wo:b oos:361540</pre> <p>When the disks return to a synced state, that field will return to <code class=\"docutils literal\">0</code>. While the secondary is syncing, status about the syncing process will be shown for both hosts. For the secondary, something like the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">GIT-hash: 91b4c048c1a0e06777b5f65d312b38d47abaea80 build by dag@Build64R6, 2011-12-21 06:08:50\n 0: cs:SyncTarget ro:Secondary/Primary ds:Inconsistent/UpToDate C r-----\n    ns:0 nr:1263008 dw:1257888 dr:0 al:0 bm:60 lo:6 pe:8 ua:5 ap:0 ep:1 wo:f oos:1670512\n        [======&gt;.............] sync'ed: 36.3% (1670512/2613068)K\n        finish: 0:00:47 speed: 35,152 (18,124) want: 44,520 K/sec</pre> <p>and for the primary, something like the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">version: 8.4.0 (api:1/proto:86-100)\nGIT-hash: 28753f559ab51b549d16bcf487fe625d5919c49c build by root@localhost.localdomain, 2012-02-06 12:59:36\n 0: cs:SyncSource ro:Primary/Secondary ds:UpToDate/Inconsistent C r-----\n    ns:7259268 nr:64 dw:4279364 dr:5721317 al:949 bm:360 lo:5 pe:0 ua:5 ap:0 ep:1 wo:b oos:1121600\n        [==========&gt;.........] sync'ed: 57.3% (1121600/2613068)K\n        finish: 0:00:32 speed: 34,328 (21,304) K/sec</pre> <p>Eventually the hosts will quiesce and report <code class=\"docutils literal\">ds:UpToDate/UpToDate</code>. Depending on how long the secondary was down, how much data was written to the primary in the interim, and the speed of the shared network, this process could be nearly instantaneous, or could take several minutes. The processes used to manage the Chef server should not require manipulation in any way during this recovery.</p> <p>If the secondary host is lost completely, a new host can be installed in its place, the device built, and then DRBD started. The new host will pair with the existing primary, sync data, and be ready to take over if necessary.</p>   <h4 id=\"scenario-3\">Scenario 3</h4> <p>Trouble starts when the DRBD primary is the host that becomes unavailable. The DRBD process on the secondary makes no assumptions about whether or not it should automatically take over, based on the split-brain configurations in the <code class=\"docutils literal\">drbd.conf</code> file.</p> <p>Basically, what this means is that when the primary becomes unavailable to the secondary without an explicit takeover being initiated, the secondary will assume that it itself is the wrong, <code class=\"docutils literal\">split-brained</code> host, and is the one unconnected and incorrect. It will take no automatic action.</p> <p>The status of the secondary will look something like the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">version: 8.4.1 (api:1/proto:86-100)\nGIT-hash: 91b4c048c1a0e06777b5f65d312b38d47abaea80 build by dag@Build64R6, 2011-12-21 06:08:50\n 0: cs:WFConnection ro:Secondary/Unknown ds:UpToDate/DUnknown C r-----\n    ns:0 nr:3505480 dw:4938128 dr:0 al:0 bm:290 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:0</pre> <p>The <code class=\"docutils literal\">ds:UpToDate/Unknown</code> is important; it indicates that the secondary has all the data that was on the primary and won’t lose anything if it is promoted.</p> <p>If it is verified that the primary host is going to be down for a while, the secondary can be promoted to primary:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ drbdadm primary pc0</pre> <p>at that point the status will change to something like the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">version: 8.4.1 (api:1/proto:86-100)\nGIT-hash: 91b4c048c1a0e06777b5f65d312b38d47abaea80 build by dag@Build64R6, 2011-12-21 06:08:50\n 0: cs:WFConnection ro:Primary/Unknown ds:UpToDate/DUnknown C r-----\n    ns:0 nr:3505480 dw:4938128 dr:672 al:0 bm:290 lo:0 pe:0 ua:0 ap:0 ep:1 wo:f oos:0</pre> <p>Notice that <code class=\"docutils literal\">ro</code> is now <code class=\"docutils literal\">ro:Primary/Unknown</code>. The Chef server can now be recovered by entering the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl master-recover</pre> <p>This will start up the configured services and the Chef server will be master on this host.</p> <p>If the original primary can be brought back online, the cluster management script run by Keepalived will try to do a DRBD takeover, based on that host’s original primary Chef server master status.</p> <p>The first thing it will do is attempt to promote itself to DRBD primary, which will fail if the disk has been written to at all while this host was down, and Keepalived will be unable to transition back to the original master. This leaves the pair of servers in a good state, with the second back-end box as the DRBD primary Chef server master.</p> <p>DRBD on the first back-end server will sync to the second back-end server and will become the clean secondary FQDN.</p>   <h4 id=\"scenario-4\">Scenario 4</h4> <p>So far, the scenarios have not described any data loss. When the hosts in the high availability pair are synced, either can be lost and the data will be safe.</p> <p>If you get to a situation in which the primary host is lost and unrecoverable, but the last status of the DRBD pair was reporting that the secondary node was in an <code class=\"docutils literal\">Inconsistent</code> state, it is very likely that some data will be lost. The DRBD status on the remaining host will look something like the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">version: 8.4.0 (api:1/proto:86-100)\nGIT-hash: 28753f559ab51b549d16bcf487fe625d5919c49c build by root@localhost.localdomain, 2012-02-06 12:59:36\n0: cs:WFConnection ro:Secondary/Unknown ds:Inconsistent/DUnknown C r-----\n   ns:0 nr:210572 dw:210572 dr:0 al:0 bm:13 lo:0 pe:0 ua:0 ap:0 ep:1 wo:b oos:40552</pre> <p>As long as good source code management is practiced with cookbooks and other files in the chef-repo, any missing bits can be re-uploaded after there is a working cluster. In some cases, newly-created users or organizations will need to be re-created. Other actions, such as chef-client runs and uploads may fail while the cluster is in an <code class=\"docutils literal\">Inconsistent</code> state, but will be fine after there is a working cluster.</p> <p>When the primary back-end server has been lost while the secondary back-end server is in an <code class=\"docutils literal\">Inconsistent</code> state and it’s not going to be back online quickly, the best thing to do is to provision another host to become the new Chef server cluster partner for the secondary back-end server, and then build it out. If the new host has an IP address that is different from the primary back-end server, change the configuration on the secondary back-end server, and then reconfigure.</p> <p>In this situation, the Chef server may be freaking out a bit, so turn off the daemons using the <code class=\"docutils literal\">chef-server-ctl stop</code> command.</p> <p>Once the new host is identified and the DRBD devices on that host are ready, bring up DRBD and get it talking to the secondary back-end server. This secondary server should not want to be the primary server; it should be waiting for the old primary server to return. Start up DRBD on the new host and verify that it is listening on the correct port and that the status in <code class=\"docutils literal\">/proc/drbd</code> is reporting that the host is up, but in the <code class=\"docutils literal\">WFConnect: waiting for connection</code> state.</p> <p>By the time you get the new node is up, the secondary back-end server may have taken itself into <code class=\"docutils literal\">standalone</code> mode, which means that it is no longer listening on the network port. In this situation, run the following commands to get the secondary back-end server to talk to the new node:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ drbdadm primary --force pc0</pre> <p>and:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ drbdadm connect pc0</pre> <p>At this point, the new host should be synchronizing with the secondary back-end server. The secondary back-end server will forget all about the data it was missing from the now-gone primary back-end server, and the process of bringing the Chef server back online can begin.</p> <p>Running a fast network between the primary and secondary hosts, and keeping it full throttle for DRBD transfers, will go a long way to mitigating the any damage that may be done in the event of a loss of the primary from an un-synced cluster.</p>   <h4 id=\"scenario-5\">Scenario 5</h4> <p>Sometimes DRBD hedges its bets, and puts both nodes in a pair into secondary mode. When this happens, you can look at the contents of <code class=\"docutils literal\">/proc/drbd</code> on both hosts and see if either of them is showing out of sync. If they are both <code class=\"docutils literal\">oos:0</code>, just pick one and promote it to primary using the <code class=\"docutils literal\">drbdadm primary pc0</code> command. If one or both of the hosts is out of sync, choose the one with the lower amount of <code class=\"docutils literal\">oos</code> and promote it to primary.</p> <p>If the chosen node won’t promote, run the following commands on the other host to reset its disk state:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ drbdadm wipe-md pc0</pre> <p>and:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ drbdadm create-md pc0</pre> <p>That will tell DRBD to abandon what is on the node and start over, and should allow it to sync with the primary.</p>     <h2 id=\"aws\">AWS</h2> <p>Amazon Web Services (AWS) is a supported high availability configuration option for the Chef server.</p> <img src=\"https://docs.chef.io/release/server_12-5/_images/chef_server_ha_aws.svg\" width=\"600px\">  <p>Backend servers make use of a single Amazon Elastic Block Store (EBS) volume.</p> <p>For more information about Amazon Elastic Block Store (EBS), see <a class=\"reference external\" href=\"http://aws.amazon.com/ebs/\">http://aws.amazon.com/ebs/</a>.</p> <p>View the topic <a class=\"reference internal\" href=\"install_server_ha_aws\">High Availability: AWS</a> for more information about how to set up the Chef server for high availability in Amazon Web Services (AWS).</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is a premium feature of Chef. Access to premium features is free (up to 25 nodes) when a premium feature is installed on-premises. For higher node counts, access is <a class=\"reference external\" href=\"https://www.chef.io/pricing/\">available via subscription</a>.</p> </div>   <h2 id=\"check-ha-status\">Check HA Status</h2> <p>The <code class=\"docutils literal\">/_status</code> endpoint can be used to check the status of communications between the front and back end servers. This endpoint is located at <code class=\"docutils literal\">/_status</code> on the front end servers.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">api.get(\"https://chef_server.front_end.url/_status\")</pre> <p>This method has no request body.</p> <p><strong>Response</strong></p> <p>The response will return something like the following:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"status\" =&gt; \"pong\",\n  \"upstreams\" =&gt;\n    {\n      \"service_name\" =&gt; \"pong\",\n      \"service_name\" =&gt; \"pong\",\n      ...\n    }\n }</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>All communications are OK.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">500</code></td> <td>\n<p class=\"first\">One (or more) services are down. For example:</p> <pre class=\"last highlight-javascript\" data-language=\"javascript\">{\n  \"status\":\"fail\",\n  \"upstreams\":\n    {\n      \"service_name\":\"fail\",\n      \"service_name\":\"pong\",\n      ...\n    }\n}</pre> </td> </tr> </tbody> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_high_availability.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_high_availability.html</a>\n  </p>\n</div>\n","server_12-5/server_monitor":"<h1 id=\"monitor\">Monitor</h1> <p>Monitoring the Chef server involves two types of checks: application and system. In addition monitoring the HTTP requests that workstations and nodes are making to the Chef server and per-disk data storage volumes is recommended.</p>  <h2 id=\"monitoring-priorities\">Monitoring Priorities</h2> <p>The following sections describe the priorities for monitoring of the Chef server. In particular, running out of disk space is the primary cause of failure.</p>  <h3 id=\"disks\">Disks</h3> <p>Over time, and with enough data, disks will fill up or exceed the per-disk quotas that may have been set for them and they will not be able to write data. A disk that is not able to write data will not be able to support certain components of the Chef server, such as PostgreSQL, RabbitMQ, service log files, and deleted file handles. Monitoring disk usage is the best way to ensure that disks don’t fill up or exceed their quota.</p> <p>Use the following commands to monitor global disk usage on a Chef server with a typical installation:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ du -sh /var/opt/opscode</pre> <p>and:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ du -sh /var/log/opscode</pre> <p>To keep the Chef server healthy, both <code class=\"docutils literal\">/var/opt/opscode</code> and <code class=\"docutils literal\">/var/log/opscode</code> should never exceed 80% use. In situations where disk space grows at a rapid pace, it may be preferable to shut down the Chef server and contact Chef support.</p> <p>The following components should be monitored for signs that disks may be rapidly filling up:</p> <ul class=\"simple\"> <li>\n<strong>PostgreSQL</strong> PostgreSQL is the data store for the Chef server.</li> <li>\n<strong>RabbitMQ</strong> The RabbitMQ data folder can fill up if the <strong>opscode-expander</strong> service is not able to keep up with the data being moved into the search database by RabbitMQ. When the <strong>opscode-expander</strong> service falls behind, RabbitMQ will start storing the individual messages on-disk while it waits for the <strong>opscode-expander</strong> service to catch up. If the RabbitMQ disk fills up completely, RabbitMQ will need to be restarted to free up the disk space and any data that was stored on-disk will be lost.</li> <li>\n<strong>Log files</strong> If <code class=\"docutils literal\">/var/log/opscode</code> is taking up a lot of disk space, ensure that the Chef server log rotation cron job is running without errors. These errors can be found in <code class=\"docutils literal\">/var/log/messages</code>, <code class=\"docutils literal\">/var/log/syslog</code> and/or the root user’s local mail.</li> <li>\n<strong>Deleted file handles</strong> Running processes with file handles associated with one (or more) deleted files will prevent the disk space being used by the deleted files from being reclaimed. Use the <code class=\"docutils literal\">sudo lsof | grep '(deleted)'</code> command to find all deleted file handles.</li> </ul>   <h3 id=\"high-availability\">High Availability</h3> <p>All components of computer systems fail, and ethernet networks, while being generally very robust, are no exception. A high availability configuration of the Chef server that uses DRBD depends on a functioning network to begin and maintain replication between the back end servers on which the Chef server is running.</p> <p>To become aware of failure at the earliest opportunity, the <code class=\"docutils literal\">/proc/drbd</code> psuedo file should be monitored for signs that cluster replication has stopped or is falling behind:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ cat /proc/drbd</pre> <p>A healthy connection state is similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">version: 8.4.0 (api:1/proto:86-100)\nGIT-hash: 09b6d528b3b3de50462cd7831c0a3791abc665c3 build by linbit@buildsystem.linbit, 2011-10-12 09:07:35\n 0: cs:Connected ro:Secondary/Secondary ds:UpToDate/UpToDate C r-----\n    ns:0 nr:0 dw:0 dr:656 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:b oos:0</pre> <p>An unhealthy connection state from the perspective of the initial primary machine is similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">version: 8.4.0 (api:1/proto:86-100)\nGIT-hash: 09b6d528b3b3de50462cd7831c0a3791abc665c3 build by linbit@buildsystem.linbit, 2011-10-12 09:07:35\n 0: cs:WFConnection ro:Primary/Secondary ds:UpToDate/Unknown C r---\n    ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:b oos:54192</pre> <p>where this shows lost communication with the secondary machine and <code class=\"docutils literal\">oos:</code> at non-zero (and increasing). This connection state is not fatal, but does represent a degraded state for the cluster where the machines are no longer in sync and are building up a queue of unwritten writes on the originating side that must eventually be synchronized to the secondary machine after the network stabilizes.</p>    <h2 id=\"application-checks\">Application Checks</h2> <p>Application-level checks should be done periodically to ensure that there is enough disk space, enough memory, and that the front-end and back-end services are communicating.</p>  <h3 id=\"drbd\">DRBD</h3> <p>Drbdadm is the management tool for DRBD. It can be used to obtain status information and to alter the state of the DRBD cluster. For more information about Drbdadm, see <a class=\"reference external\" href=\"http://www.drbd.org/users-guide/re-drbdadm.html\">http://www.drbd.org/users-guide/re-drbdadm.html</a>.</p> <p><code class=\"docutils literal\">/proc/drbd</code> is a virtual file that displays real-time status information about all currently-configured DRBD resources. Use the following command to view the contents of this virtual file:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ cat /proc/drbd</pre> <p>Use <code class=\"docutils literal\">chef-server-ctl ha-status</code> along with <code class=\"docutils literal\">/proc/drbd</code> to help evaluate the current state of the cluster. Follow the split-brain recovery procedures for DRBD if the cluster becomes two unconnected pieces.</p>   <h3 id=\"erlang\">Erlang</h3> <p>Many components of the Chef server are written using Erlang and run on the BEAM virtual machine. One feature of Erlang and BEAM is the ability to interact with the running service using a command shell. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ cd /opt/opscode/embedded\n  export PATH=$PATH:/opt/opscode/bin:/opt/opscode/embedded/bin\n  bin/erl -setcookie service_name -name me@127.0.0.1 -remsh service_name@127.0.0.1</pre> <p>where <code class=\"docutils literal\">service_name</code> is <code class=\"docutils literal\">bifrost</code> or <code class=\"docutils literal\">erchef</code>. This command will then open a shell that is connected to the Erchef processes:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ Erlang R15B02 (erts-5.9.2) [source] [64-bit] ...</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Connecting to the Erlang processes should only be done when directed by Chef support services.</p> </div> <p>To connect to the <strong>oc_bifrost</strong> service, use the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ erl -setcookie oc_bifrost -name me@127.0.0.1 -remsh oc_bifrost@127.0.0.1</pre> <p>To connect to the <strong>opscode-erchef</strong> service, use the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ erl -setcookie erchef -name me@127.0.0.1 -remsh erchef@127.0.0.1</pre> <p>To disconnect from the shell, use the following key sequence <code class=\"docutils literal\">CTRL-g</code>, <code class=\"docutils literal\">q</code>, and then <code class=\"docutils literal\">ENTER</code>.</p> <p>The output from the shell after the <code class=\"docutils literal\">CTRL-g</code> looks similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">(erchef@127.0.0.1)1&gt;\nUser switch command</pre> <p>then enter <code class=\"docutils literal\">q</code>, and then hit <code class=\"docutils literal\">ENTER</code> to exit the shell.</p> <p>Some commands should not be entered when interacting with a running service while using the command shell, including:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">q()</code> kills the Erlang node</li> <li><code class=\"docutils literal\">init:stop()</code></li> <li>\n<code class=\"docutils literal\">exit</code> or <code class=\"docutils literal\">exit()</code> does nothing</li> </ul>  <h4 id=\"eper-tools\">\n<code class=\"docutils literal\">eper</code> tools</h4> <p>As root on the Chef server, point to the bundled <code class=\"docutils literal\">eper</code> package of debugging tools. Replace the 2nd and 5th path entries and the <code class=\"docutils literal\">X.XX.X</code> value in the following path with the items that occur on the system.</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ export ERL_LIB=:/opt/{chef-server,opscode}/embedded/service/{erchef,opscode-erchef}/lib/eper-X.XX.X/ebin/</pre> <p>Open an Erlang command shell to begin diagnosing service issues on the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Eshell V5.10.4  (abort with ^G)\n(erchef@127.0.0.1)1&gt;</pre> <p>The <code class=\"docutils literal\">dtop</code> tool presents a view on the Erlang virtual machine that is similar to the <code class=\"docutils literal\">linuxdagnostic</code> command. The period at the end of the dtop command is required for the command to take effect.</p> <pre class=\"highlight-bash\" data-language=\"bash\">(erchef@127.0.0.1)1&gt; dtop:start().</pre> <p>To stop the <code class=\"docutils literal\">dtop</code> command, run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">(erchef@127.0.0.1)1&gt; dtop:stop().</pre> <p>To disconnect from the shell, use the following key sequence <code class=\"docutils literal\">CTRL-g</code>, <code class=\"docutils literal\">q</code>, and then <code class=\"docutils literal\">ENTER</code>.</p> <p>The output from the shell after the <code class=\"docutils literal\">CTRL-g</code> looks similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">(erchef@127.0.0.1)1&gt;\nUser switch command</pre> <p>then enter <code class=\"docutils literal\">q</code>, and then hit <code class=\"docutils literal\">ENTER</code> to exit the shell.</p>    <h3 id=\"nginx\">Nginx</h3> <p>Use Nginx to monitor for services that may be returning 504 errors. Use the following command on a front-end machine:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ grep 'HTTP/1.1\" 504' /var/log/opscode/nginx/access.log</pre> <p>and then extract the URLs and sort them by <code class=\"docutils literal\">uniq</code> count:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ grep 'HTTP/1.1\" 504' nginx-access.log | cut -d' ' -f8 | sort | uniq -c | sort</pre> <p>In a large installation, restricting these results to a subset of results may be necessary:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ tail -10000 nginx-access.log | grep 'HTTP/1.1\" 504' | cut -d' ' -f8 | sort | uniq -c | sort</pre>   <h3 id=\"postgresql\">PostgreSQL</h3> <p>psql is the management tool for PostgreSQL. It can be used to obtain information about data stored in PostgreSQL. For more information about psql, see <a class=\"reference external\" href=\"http://www.postgresql.org/docs/manuals/\">http://www.postgresql.org/docs/manuals/</a>, and then the doc set appropriate for the version of PostgreSQL being used.</p> <p>To connect to the PostgreSQL database, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ cd /opt/opscode/embedded/service/postgresql/\n  export PATH=$PATH:/opt/opscode/bin:/opt/opscode/embedded/bin\n  bin/psql -U opscode_chef</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Connecting to the PostgreSQL database should only be done when directed by Chef support services.</p> </div>   <h3 id=\"rabbitmq\">RabbitMQ</h3> <p>rabbitmqctl is the management tool for RabbitMQ. It can be used to obtain status information and to ensure that message queuing is running properly. For more information about rabbitmqctl, see <a class=\"reference external\" href=\"https://www.rabbitmq.com/man/rabbitmqctl.1.man.html\">https://www.rabbitmq.com/man/rabbitmqctl.1.man.html</a>.</p> <p>To obtain status information for message queues, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ cd /opt/opscode/embedded/service/rabbitmq/\n  export PATH=$PATH:/opt/opscode/bin:/opt/opscode/embedded/bin\n  bin/rabbitmqctl status</pre> <p>to return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Status of node rabbit@localhost ...\n[{pid,3044},\n {running_applications, [{rabbit,\"RabbitMQ\",\"2.7.1\"},\n                         {mnesia,\"MNESIA CXC 138 12\",\"4.7.1},\n                         {os_mon,\"CPO CXC 138 46\",\"2.2.10},\n                         ...\n                         {kernel,\"ERTS CXC 138 10\",\"2.15.2\"}]},\n {os,{unix,linux}},\n {erlang_version,\"Erlang R15B02 (erts-5.9.2) [source] [64-bit] ...\"},\n {memory,[{total,96955896},\n          {processes,38634560},\n          ...\n          {ets,5850336}]},\n {vm_memory_high_watermark,0.39999999995176794},\n {vm_memory_limit,1658647347}]\n ... done</pre>   <h3 id=\"redis\">Redis</h3> <p>The <strong>redis_lb</strong> service located on the back end machine handles requests that are made from the Nginx service that is located on all front end machines in a Chef server cluster.</p> <p>In the event of a disk full condition for the Redis data store, the <code class=\"docutils literal\">dump.rdb</code> (the primary data store <code class=\"docutils literal\">.rdb</code> used by Redis) can become corrupt and saved as a zero byte file.</p> <p>When this occurs, after the <strong>redis_lb</strong> service started, it’s logs will show a statement similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">2015-03-23_16:11:31.44256 [11529] 23 Mar 16:10:09.624 # Server started, Redis version 2.8.2\n2015-03-23_16:11:31.44256 [11529] 23 Mar 16:10:09.624 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.\n2015-03-23_16:11:31.44257 [11529] 23 Mar 16:11:31.438 # Short read or OOM loading DB. Unrecoverable error, aborting now.</pre> <p>The <code class=\"docutils literal\">dump.rdb</code> file will be empty:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ls -al /var/opt/opscode/redis_lb/data/\ntotal 20\ndrwxr-x--- 2 opscode opscode 4096 Mar 23 15:58 .\ndrwxr-x--- 4 opscode opscode 4096 Dec 22 18:59 ..\n-rw-r--r-- 1 opscode opscode    0 Mar 23 15:58 dump.rdb</pre> <p>This situation is caused by a bug in Redis where saves are allowed to succeed even when the disk has been full for some time, and not just on edge cases where the disk becomes full as Redis is writing. To fix this issue, do the following:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Stop the <strong>redis_lb</strong> service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">chef-server-ctl stop redis_lb</pre> </li> <li>\n<p class=\"first\">Remove the corrupt files:</p> <pre class=\"highlight-bash\" data-language=\"bash\">cd /var/opt/opscode/redis_lb/data\nrm -fr *rdb</pre> </li> <li>\n<p class=\"first\">Start the <strong>redis_lb</strong> service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">chef-server-ctl start redis_lb\n\nless /var/log/opscode/redis_lb/current\n2015-03-23_17:05:18.82516 [28676] 23 Mar 17:05:18.825 * The server is now ready to accept connections on port 16379</pre> </li> <li>\n<p class=\"first\">Reconfigure the Chef server to re-populate Redis:</p> <pre class=\"highlight-bash\" data-language=\"bash\">chef-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Verify that Redis is re-populated, as indicated by the key <code class=\"docutils literal\">dl_default</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">/opt/opscode/embedded/bin/redis-cli -p 16379 keys \\*\n1) \"dl_default\"</pre> </li> </ol>   <h3 id=\"apache-solr\">Apache Solr</h3> <p>The <strong>opscode-solr4</strong> service located on the primary back end machine handles requests that are made from the Erchef service that is located on all front end machines in a Chef server cluster.</p> <p>Under normal circumstances, opscode-solr4 will need access to a total of 2x the space used for the index.</p> <p>The thread at <a class=\"reference external\" href=\"http://comments.gmane.org/gmane.comp.jakarta.lucene.solr.user/99149\">http://comments.gmane.org/gmane.comp.jakarta.lucene.solr.user/99149</a> explains more fully, including describing an extreme case where it’s possible that 3x the storage might be necessary. Chef server usage of Apache Solr via the <strong>opscode-solr4</strong> service will generally only require the used storage for the index + 1x that amount of storage in free space.</p> <p>For example, a 2GB search index will require about 2GB of free space available in the <strong>opscode-solr4</strong> service’s storage area. The standard storage area for the <strong>opscode-solr4</strong> service in a standalone topology Chef server install is <code class=\"docutils literal\">/var/opt/opscode/opscode-solr4/data</code>.</p>    <h2 id=\"system-checks\">System Checks</h2> <p>System-level checks should be done for the following components: ports, services, and high availability status.</p>  <h3 id=\"ha-status\">ha-status</h3> <p>The <code class=\"docutils literal\">ha-status</code> subcommand is used to check the status for services running in a high availability topology. This command will verify the following:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>The Keepalived daemon is enabled in the config</li> <li>The DRBD process is enabled in the config</li> <li>The underlying block device or logical volume for DRBD has been created and configured</li> <li>The DRBD device exists</li> <li>The current state of the server is <code class=\"docutils literal\">master</code> or <code class=\"docutils literal\">backup</code>; any migration processes have completed</li> <li>The failover virtual IP address is correctly attached to only the <code class=\"docutils literal\">master</code> node</li> <li>The DRBD state is correct based on the state of the server being <code class=\"docutils literal\">master</code> or <code class=\"docutils literal\">backup</code>\n</li> <li>The DRBD mount point is correctly mounted to only the <code class=\"docutils literal\">master</code> node</li> <li>The DRBD replication IP addresses are pingable</li> <li>The <code class=\"docutils literal\">runit</code> status of the services are correct (up or down) based on the <code class=\"docutils literal\">master</code> or <code class=\"docutils literal\">backup</code> state of the server</li> </ul> </div>\n</blockquote> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ private-chef-ctl ha-status</pre> <p>If this command runs successfully, it will return the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ [OK] all checks passed.</pre> <p>Otherwise it will print out a list of errors, similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">...\n[OK] nginx is running correctly, and I am master.\n[ERROR] nrpe is not running.\n[OK] opscode-account is running correctly, and I am master.\n...\n[ERROR] ERRORS WERE DETECTED.</pre> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">[OK] keepalived HA services enabled\n[OK] DRBD disk replication enabled\n[OK] DRBD partition /dev/opscode/drbd found\n[OK] DRBD device /dev/drbd0 found\n[OK] cluster status = master\n[OK] found VIP IP address and I am master\n[OK] found VRRP communications interface eth1\n[OK] my DRBD status is Connected/Primary/UpToDate and I am master\n[OK] my DRBD partition is mounted and I am master\n[OK] DRBD primary IP address pings\n[OK] DRBD secondary IP address pings\n...\n[OK] all checks passed.</pre>   <h3 id=\"opscode-authz\">opscode-authz</h3> <p>The authz API provides a high-level view of the health of the <strong>opscode-authz</strong> service with a simple endpoint: <code class=\"docutils literal\">_ping</code>. This endpoint can be accessed using cURL and GNU Wget. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ curl http://localhost:9463/_ping</pre> <p>This command typically prints a lot of information. Use Python to use pretty-print output:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ curl http://localhost:9463/_ping | python -mjson.tool</pre>   <h3 id=\"opscode-erchef\">opscode-erchef</h3> <p>The status API provides a high-level view of the health of the system with a simple endpoint: <code class=\"docutils literal\">_status</code>. This endpoint can be accessed using cURL and GNU Wget. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ curl http://localhost:8000/_status</pre> <p>which will return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">{\n  \"status\":\"pong\",\n  \"upstreams\":{\"upstream_service\":\"pong\",\"upstream_service\":\"fail\",...},\n}</pre> <p>For each of the upstream services, <code class=\"docutils literal\">pong</code> or <code class=\"docutils literal\">fail</code> is returned. The possible upstream names are:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">chef_solr</code> (for the <strong>opscode-solr4</strong> service)</li> <li>\n<code class=\"docutils literal\">chef_sql</code> (for the <strong>postgresql</strong> service)</li> <li>\n<code class=\"docutils literal\">oc_chef_authz</code> (for the <strong>opscode-authz</strong> service)</li> </ul> <p>If any of the status values return <code class=\"docutils literal\">fail</code>, this typically means the Chef server is unavailable for that service.</p>   <h3 id=\"opscode-expander\">opscode-expander</h3> <p>As the queue depth increases it may take longer for updates posted to the Chef server by each chef-client to be added to the search indexes on the Chef server. The depth of this queue should be monitored using the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ cd /opt/opscode/embedded/service/opscode-expander/\n  export PATH=$PATH:/opt/opscode/bin:/opt/opscode/embedded/bin</pre>  <h4 id=\"search-indexes\">Search Indexes</h4> <p>Search indexes allow queries to be made for any type of data that is indexed by the Chef server, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the <code class=\"docutils literal\">search</code> subcommand in knife, the <code class=\"docutils literal\">search</code> method in the Recipe DSL, the search box in the Chef management console, and by using the <code class=\"docutils literal\">/search</code> or <code class=\"docutils literal\">/search/INDEX</code> endpoints in the Chef server API. The search engine is based on Apache Solr and is run from the Chef server.</p> <p>If the search indexes are not being updated properly, first ensure that the <strong>opscode-expander</strong> service is running on the backend machine:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl status opscode-expander</pre> <p>and then (if it is not running), start the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start opscode-expander</pre> <p>If the <strong>opscode-expander</strong> does not start correctly, then take a look at the <code class=\"docutils literal\">/var/log/opscode/opscode-expander/current</code> log file for error messages.</p> <p>If the <strong>opscode-expander</strong> is running, check the queue length:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ watch -n1 sudo -E bin/opscode-expanderctl queue-depth</pre> <p>If the number of total messages continues to increase, increase the number of workers available to the <strong>opscode-expander</strong> service.</p>   <h4 id=\"opscode-expander-ctl\">opscode-expander-ctl</h4> <p>The opscode-expander-ctl executable can be used to generate status information for the <strong>opscode-expander</strong> service. The opscode-expander-ctl executable is run as a command-line tool from the master backend machine.</p> <p>This tool has the following syntax:</p> <pre class=\"highlight-python\" data-language=\"python\">opscode-expanderctl OPTION</pre> <p>This tool has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">log-level</code></dt> <dd>Use to show the log level for all nodes in the cluster.</dd> <dt><code class=\"docutils literal\">node-status</code></dt> <dd>Use to show the status for all nodes in the cluster.</dd> <dt><code class=\"docutils literal\">queue-depth</code></dt> <dd>Use to display the aggregate queue backlog.</dd> <dt><code class=\"docutils literal\">queue-status</code></dt> <dd>Use to show the backlog and consumer counts for each vnode queue.</dd> </dl> <p>For example, to view the aggregate queue backlog, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ cd /opt/opscode/embedded/service/opscode-expander/\n  export PATH=$PATH:/opt/opscode/bin:/opt/opscode/embedded/bin\n  bin/opscode-expanderctl queue-depth</pre> <p>to return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">total messages:       0\naverage queue depth:  0.0\nmax queue depth:      0\nmin queue depth:      0</pre>     <h2 id=\"nodes-workstations\">Nodes, Workstations</h2> <p>If a client makes an HTTP request to the server that returns a non-specific error message, this is typically an issue with the <strong>opscode-chef</strong> or <strong>opscode-erchef</strong> services. View the full error message for these services in their respective log files. The error is most often a stacktrace from the application error. In some cases, the error message will clearly indicate a problem with another service, which can then be investigated further. For non-obvious errors, please contact Chef support services.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_monitor.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_monitor.html</a>\n  </p>\n</div>\n","server_12-5/server_data":"<h1 id=\"server-data-storage\">Server Data Storage</h1> <p>Managing how data is stored on the Chef server is sometimes necessary, such as rezising DRBD logical volumes, volume groups, and space available on the primary backend machine.</p>  <h2 id=\"resize-drbd\">Resize DRBD</h2> <p>DRBD may be resized. First, make a backup of the Chef server data.</p> <ul class=\"simple\"> <li>The mounted filesystem on the primary backend server is <code class=\"docutils literal\">ext4</code>\n</li> <li>The backing device for the mounted <code class=\"docutils literal\">ext4</code> filesystem is an LVM2 volume named <code class=\"docutils literal\">/dev/opscode/drbd</code>\n</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">For more information about logical volume manager (LVM), see <a class=\"reference external\" href=\"http://www.tldp.org/HOWTO/LVM-HOWTO/\">http://www.tldp.org/HOWTO/LVM-HOWTO/</a>. For more information about DRBD, see <a class=\"reference external\" href=\"http://drbd.linbit.com/users-guide/s-resizing.html\">http://drbd.linbit.com/users-guide/s-resizing.html</a>.</p> </div>  <h3 id=\"devices\">Devices</h3> <p>After backing up the Chef server data, make a note of the current size of the <code class=\"docutils literal\">/dev/opscode/drbd</code> logical volume and mountpoint. Run the following commands:</p> <pre class=\"highlight-bash\" data-language=\"bash\">sudo lvdisplay -v --units 4096k /dev/opscode/drbd</pre> <p>and then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">df -k /var/opt/opscode/drbd/data</pre> <p>Verify that DRBD is in good shape on both backend machines. Both the primary and secondary machines should show states similar to <code class=\"docutils literal\">Primary/Secondary UpToDate/UpToDate</code>.</p> <p>Run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">cat /proc/drbd</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Save these results to compare them to the same data post-resize.</p> </div>   <h3 id=\"volume-groups\">Volume Groups</h3> <p>Resize the volume group on both backend systems. Run the following commands and replace <code class=\"docutils literal\">sdb1</code> for the correct device name:</p> <pre class=\"highlight-bash\" data-language=\"bash\">pvcreate /dev/sdb1</pre> <p>and then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">vgextend opscode /dev/sdb1</pre>   <h3 id=\"logical-volumes\">Logical Volumes</h3> <p>Resize the logical volumes identically on both backend machines. Due to differences in the space available for logical volumes on the primary and secondary backend machines (which is typically caused by existing snapshots), the size of the logical volume should be specified in absolute terms on both sides of the DRBD link, rathern than in percentages. Be sure to leave about 20% of the total available space free on both sides of the DRBD link, minus any existing snapshots. Run the following command and replace <code class=\"docutils literal\">SIZE</code> with a value similar to <code class=\"docutils literal\">10GiB</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">lvextend -LSIZE /dev/opscode/drbd</pre> <p>For example, if the volume group has 10GB total, only 8GB should be allocated to the logical volume, which leaves 20% of the volume group available:</p> <pre class=\"highlight-bash\" data-language=\"bash\">lvextend -L8GiB /dev/opscode/drbd</pre>   <h3 id=\"primary-backend\">Primary Backend</h3> <p>Resize DRBD on the current primary backend to extend the size of the DRBD device. Run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">sudo drbdadm resize pc0</pre> <p>The size of the <code class=\"docutils literal\">/dev/drbd0</code> backing device’s mountpoint should grow. This change may take some time to complete, as DRBD may want to synchronize the changes across the network, even though they are empty blocks.</p>   <h3 id=\"primary-file-system\">Primary File System</h3> <p>Resize the file system only on the current primary backend. Run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">sudo resize2fs /dev/drbd/by-disk/opscode/drbd</pre>   <h3 id=\"verify-resize\">Verify Resize</h3> <p>To verify the results of resizing DRBD, run the following commands and compare the results to the same data that was collected prior to resizing DRBD:</p> <pre class=\"highlight-bash\" data-language=\"bash\">sudo lvdisplay -v --units 4096k /dev/opscode/drbd</pre> <p>and then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">df -k /var/opt/opscode/drbd/data</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_data.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_data.html</a>\n  </p>\n</div>\n","server_12-5/server_security":"<h1 id=\"security\">Security</h1> <p>Configuration of SSL for the Chef server using certificate authority-verified certificates is done by placing the certificate and private key file obtained from the certifying authority in the correct files after the initial configuration of Chef server.</p> <p>Initial configuration of the Chef server is done automatically using a self-signed certificate to create the certificate and private key files for Nginx.</p> <p>The locations of the certificate and private key files are</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">/var/opt/opscode/nginx/ca/FQDN.crt</code></li> <li><code class=\"docutils literal\">/var/opt/opscode/nginx/ca/FQDN.key</code></li> </ul> <p>Because the FQDN has already been configured, do the following:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Replace the contents of <code class=\"docutils literal\">/var/opt/opscode/nginx/ca/FQDN.crt</code> and <code class=\"docutils literal\">/var/opt/opscode/nginx/ca/FQDN.key</code> with the certifying authority’s files.</p> </li> <li>\n<p class=\"first\">Reconfigure the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Restart the Nginx service to load the new key and certificate:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restart nginx</pre> </li> </ol> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The FQDN for the Chef server should not exceed 64 characters when using OpenSSL. OpenSSL requires the <code class=\"docutils literal\">CN</code> in a certificate to be no longer than 64 characters.</p> </div> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">By default, the Chef server uses the FQDN to determine the common name (<code class=\"docutils literal\">CN</code>). If the FQDN of the Chef server is longer than 64 characters, the <code class=\"docutils literal\">reconfigure</code> command will not fail, but an empty certificate file will be created. Nginx will not start if a certificate file is empty.</p> </div>  <h2 id=\"ssl-certificates\">SSL Certificates</h2> <p>The Chef server can be configured to use SSL certificates by adding the following settings to the server configuration file:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">nginx['ssl_certificate']</code></td> <td>The SSL certificate used to verify communication over HTTPS.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">nginx['ssl_certificate_key']</code></td> <td>The certificate key used for SSL communication.</td> </tr> </tbody> </table> <p>and then setting their values to define the paths to the certificate and key.</p> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">nginx['ssl_certificate']  = \"/etc/pki/tls/certs/your-host.crt\"\nnginx['ssl_certificate_key']  = \"/etc/pki/tls/private/your-host.key\"</pre> <p>Save the file, and then run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl reconfigure</pre> <p>For more information about the server configuration file, see <a class=\"reference internal\" href=\"config_rb_server\">chef-server.rb</a>.</p>  <h3 id=\"ssl-protocols\">SSL Protocols</h3> <p>The following settings are often modified from the default as part of the tuning effort for the <strong>nginx</strong> service and to configure the Chef server to use SSL certificates:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">nginx['ssl_certificate']</code></dt> <dd>The SSL certificate used to verify communication over HTTPS. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">nginx['ssl_certificate_key']</code></dt> <dd>The certificate key used for SSL communication. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">nginx['ssl_ciphers']</code></dt> <dd>\n<p class=\"first\">The list of supported cipher suites that are used to establish a secure connection. To favor AES256 with ECDHE forward security, drop the <code class=\"docutils literal\">RC4-SHA:RC4-MD5:RC4:RSA</code> prefix. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">nginx['ssl_ciphers'] =  \"HIGH:MEDIUM:!LOW:!kEDH: \\\n                         !aNULL:!ADH:!eNULL:!EXP: \\\n                         !SSLv2:!SEED:!CAMELLIA: \\\n                         !PSK\"</pre> </dd> <dt><code class=\"docutils literal\">nginx['ssl_protocols']</code></dt> <dd>\n<p class=\"first\">The SSL protocol versions that are enabled. SSL 3.0 is supported by the Chef server; however, SSL 3.0 is an obsolete and insecure protocol. Transport Layer Security (TLS)—TLS 1.0, TLS 1.1, and TLS 1.2—has effectively replaced SSL 3.0, which provides for authenticated version negotiation between the chef-client and Chef server, which ensures the latest version of the TLS protocol is used. For the highest possible security, it is recommended to disable SSL 3.0 and allow all versions of the TLS protocol. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">nginx['ssl_protocols'] = \"TLSv1 TLSv1.1 TLSv1.2\"</pre> </dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference external\" href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">https://wiki.mozilla.org/Security/Server_Side_TLS</a> for more information about the values used with the <code class=\"docutils literal\">nginx['ssl_ciphers']</code> and <code class=\"docutils literal\">nginx['ssl_protocols']</code> settings.</p> </div> <p>For example, after copying the SSL certificate files to the Chef server, update the <code class=\"docutils literal\">nginx['ssl_certificate']</code> and <code class=\"docutils literal\">nginx['ssl_certificate_key']</code> settings to specify the paths to those files, and then (optionally) update the <code class=\"docutils literal\">nginx['ssl_ciphers']</code> and <code class=\"docutils literal\">nginx['ssl_protocols']</code> settings to reflect the desired level of hardness for the Chef server:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">nginx['ssl_certificate'] = \"/etc/pki/tls/private/name.of.pem\"\nnginx['ssl_certificate_key'] = \"/etc/pki/tls/private/name.of.key\"\nnginx['ssl_ciphers'] = \"HIGH:MEDIUM:!LOW:!kEDH:!aNULL:!ADH:!eNULL:!EXP:!SSLv2:!SEED:!CAMELLIA:!PSK\"\nnginx['ssl_protocols'] = \"TLSv1 TLSv1.1 TLSv1.2\"</pre> <p><strong>Example: Configure SSL Keys for Nginx</strong></p> <p>The following example shows how the Chef server sets up and configures SSL certificates for Nginx. The cipher suite used by Nginx <a class=\"reference external\" href=\"https://docs.chef.io/config_rb_server.html#ssl-protocols\">is configurable</a> using the <code class=\"docutils literal\">ssl_protocols</code> and <code class=\"docutils literal\">ssl_ciphers</code> settings.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ssl_keyfile = File.join(nginx_ca_dir, \"#{node['private_chef']['nginx']['server_name']}.key\")\nssl_crtfile = File.join(nginx_ca_dir, \"#{node['private_chef']['nginx']['server_name']}.crt\")\nssl_signing_conf = File.join(nginx_ca_dir, \"#{node['private_chef']['nginx']['server_name']}-ssl.conf\")\n\nunless File.exists?(ssl_keyfile) &amp;&amp; File.exists?(ssl_crtfile) &amp;&amp; File.exists?(ssl_signing_conf)\n  file ssl_keyfile do\n    owner 'root'\n    group 'root'\n    mode '0755'\n    content '/opt/opscode/embedded/bin/openssl genrsa 2048'\n    not_if { File.exist?(ssl_keyfile) }\n  end\n\n  file ssl_signing_conf do\n    owner 'root'\n    group 'root'\n    mode '0755'\n    not_if { File.exist?(ssl_signing_conf) }\n    content &lt;&lt;-EOH\n  [ req ]\n  distinguished_name = req_distinguished_name\n  prompt = no\n  [ req_distinguished_name ]\n  C                      = #{node['private_chef']['nginx']['ssl_country_name']}\n  ST                     = #{node['private_chef']['nginx']['ssl_state_name']}\n  L                      = #{node['private_chef']['nginx']['ssl_locality_name']}\n  O                      = #{node['private_chef']['nginx']['ssl_company_name']}\n  OU                     = #{node['private_chef']['nginx']['ssl_organizational_unit_name']}\n  CN                     = #{node['private_chef']['nginx']['server_name']}\n  emailAddress           = #{node['private_chef']['nginx']['ssl_email_address']}\n  EOH\n  end\n\n  ruby_block 'create crtfile' do\n    block do\n      r = Chef::Resource::File.new(ssl_crtfile, run_context)\n      r.owner 'root'\n      r.group 'root'\n      r.mode '0755'\n      r.content \"/opt/opscode/embedded/bin/openssl req -config '#{ssl_signing_conf}' -new -x509 -nodes -sha1 -days 3650 -key '#{ssl_keyfile}'\"\n      r.not_if { File.exist?(ssl_crtfile) }\n      r.run_action(:create)\n    end\n  end\nend</pre>   <h3 id=\"chef-analytics-title\">Chef Analytics</h3> <p>The Chef Analytics server can be configured to use SSL certificates by adding the following settings in the server configuration file:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">ssl['certificate']</code></td> <td>The SSL certificate used to verify communication over HTTPS.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">ssl['certificate_key']</code></td> <td>The certificate key used for SSL communication.</td> </tr> </tbody> </table> <p>and then setting their values to define the paths to the certificate and key.</p> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ssl['certificate']  = \"/etc/pki/tls/certs/your-host.crt\"\nssl['certificate_key']  = \"/etc/pki/tls/private/your-host.key\"</pre> <p>Save the file, and then run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo opscode-analytics-ctl reconfigure</pre>   <h3 id=\"knife-title-chef-client-title\">Knife, chef-client</h3> <p>Chef server 12 enables SSL verification by default for all requests made to the server, such as those made by knife and the chef-client. The certificate that is generated during the installation of the Chef server is self-signed, which means the certificate is not signed by a trusted certificate authority (CA) that ships with the chef-client. The certificate generated by the Chef server must be downloaded to any machine from which knife and/or the chef-client will make requests to the Chef server.</p> <p>For example, without downloading the SSL certificate, the following knife command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client list</pre> <p>responds with an error similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ERROR: SSL Validation failure connecting to host: chef-server.example.com ...\nERROR: OpenSSL::SSL::SSLError: SSL_connect returned=1 errno=0 state=SSLv3 ...</pre> <p>This is by design and will occur until a verifiable certificate is added to the machine from which the request is sent.</p> <p>See <a class=\"reference external\" href=\"https://docs.chef.io/chef_client_security.html#ssl-certificates\">SSL Certificates</a> for more information about how knife and the chef-client use SSL certificates generated by the Chef server.</p>   <h3 id=\"private-certificate-authority\">Private Certificate Authority</h3> <p>If an organization is using an internal certificate authority, then the root certificate will not appear in any <code class=\"docutils literal\">cacerts.pem</code> file that ships by default with operating systems and web browsers. Because of this, no currently deployed system will be able to verify certificates that are issued in this manner. To allow other systems to trust certificates from an internal certificate authority, this root certificate will need to be configured so that other systems can follow the chain of authority back to the root certificate. (An intermediate certificate is not enough becuase the root certificate is not already globally known.)</p> <p>To use an internal certificate authority, append both the server and root certificates into a single <code class=\"docutils literal\">.crt</code> file. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ cat server.crt root.crt &gt;&gt; /var/opt/opscode/nginx/ca/FQDN.crt</pre>   <h3 id=\"intermediate-certificates\">Intermediate Certificates</h3> <p>To use an intermediate certificate, append both the server and intermediate certificates into a single <code class=\"docutils literal\">.crt</code> file. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ cat server.crt intermediate.crt &gt;&gt; /var/opt/opscode/nginx/ca/FQDN.crt</pre>   <h3 id=\"regenerate-certificates\">Regenerate Certificates</h3> <p>SSL certificates should be regenerated periodically. This is an important part of protecting the Chef server from vulnerabilities and helps to prevent the information stored on the Chef server from being compromised.</p> <p>To regenerate SSL certificates:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop</pre> </li> <li>\n<p class=\"first\">The Chef server can regenerate them. These certificates will be located in <code class=\"docutils literal\">/var/opt/opscode/nginx/ca/</code> and will be named after the FQDN for the Chef server. To determine the FQDN for the server, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ hostname -f</pre> <p>Please delete the files found in the ca directory with names like this <code class=\"docutils literal\">$FQDN.crt</code> and <code class=\"docutils literal\">$FQDN.key</code>.</p> </li> <li>\n<p class=\"first\">If your organization has provided custom SSL certificates to the Chef server, the locations of that custom certificate and private key are defined in <code class=\"docutils literal\">/etc/opscode/chef-server.rb</code> as values for the <code class=\"docutils literal\">nginx['ssl_certificate']</code> and <code class=\"docutils literal\">nginx['ssl_certificate_key']</code> settings. Delete the files referenced in those two settings and regenerate new keys using the same authority.</p> </li> <li>\n<p class=\"first\">Run the following command, Chef server-generated SSL certificates will automatically be created if necessary:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start</pre> </li> </ol>    <h2 id=\"key-rotation\">Key Rotation</h2> <p>Use the following commands to manage public and private key rotation for users and clients.</p>  <h3 id=\"add-client-key\">add-client-key</h3> <p>Use the <code class=\"docutils literal\">add-client-key</code> subcommand to add a client key.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl add-client-key ORG_NAME CLIENT_NAME [--public-key-path PATH] [--expiration-date DATE] [--key-name NAME]</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">All options for this subcommand must follow all arguments.</p> </div> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">CLIENT_NAME</code></dt> <dd>The name of the client that you wish to add a key for.</dd> <dt>\n<code class=\"docutils literal\">-e DATE</code> <code class=\"docutils literal\">--expiration-date DATE</code>\n</dt> <dd>An ISO 8601 formatted string: <code class=\"docutils literal\">YYYY-MM-DDTHH:MM:SSZ</code>. For example: <code class=\"docutils literal\">2013-12-24T21:00:00Z</code>. If not passed, expiration will default to infinity.</dd> <dt>\n<code class=\"docutils literal\">-k NAME</code> <code class=\"docutils literal\">--key-name NAME</code>\n</dt> <dd>String defining the name of your new key for this client. If not passed, it will default to the fingerprint of the public key.</dd> <dt><code class=\"docutils literal\">ORG_NAME</code></dt> <dd>The short name for the organization to which the client belongs.</dd> <dt>\n<code class=\"docutils literal\">-p PATH</code> <code class=\"docutils literal\">--public-key-path PATH</code>\n</dt> <dd>The location to a file containing valid PKCS#1 public key to be added. If not passed, then the server will generate a new one for you and return the private key to STDOUT.</dd> </dl>   <h3 id=\"add-user-key\">add-user-key</h3> <p>Use the <code class=\"docutils literal\">add-user-key</code> subcommand to add a user key.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl add-user-key USER_NAME [--public-key-path PATH] [--expiration-date DATE] [--key-name NAME]</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">All options for this subcommand must follow all arguments.</p> </div> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-e DATE</code> <code class=\"docutils literal\">--expiration-date DATE</code>\n</dt> <dd>An ISO 8601 formatted string: <code class=\"docutils literal\">YYYY-MM-DDTHH:MM:SSZ</code>. For example: <code class=\"docutils literal\">2013-12-24T21:00:00Z</code>. If not passed, expiration will default to infinity.</dd> <dt>\n<code class=\"docutils literal\">-k NAME</code> <code class=\"docutils literal\">--key-name NAME</code>\n</dt> <dd>String defining the name of your new key for this user. If not passed, it will default to the fingerprint of the public key.</dd> <dt>\n<code class=\"docutils literal\">-p PATH</code> <code class=\"docutils literal\">--public-key-path PATH</code>\n</dt> <dd>The location to a file containing valid PKCS#1 public key to be added. If not passed, then the server will generate a new one for you and return the private key to STDOUT.</dd> <dt><code class=\"docutils literal\">USER_NAME</code></dt> <dd>The user name for the user for which a key is added.</dd> </dl>   <h3 id=\"delete-client-key\">delete-client-key</h3> <p>Use the <code class=\"docutils literal\">delete-client-key</code> subcommand to delete a client key.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl delete-client-key ORG_NAME CLIENT_NAME KEY_NAME</pre> <p><strong>Options</strong></p> <p>This subcommand has the following arguments:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ORG_NAME</code></dt> <dd>The short name for the organization to which the client belongs.</dd> <dt><code class=\"docutils literal\">CLIENT_NAME</code></dt> <dd>The name of the client.</dd> <dt><code class=\"docutils literal\">KEY_NAME</code></dt> <dd>The unique name to be assigned to the key you wish to delete.</dd> </dl>   <h3 id=\"delete-user-key\">delete-user-key</h3> <p>Use the <code class=\"docutils literal\">delete-user-key</code> subcommand to delete a user key.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl delete-user-key USER_NAME KEY_NAME</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The parameters for this subcommand must be in the order specified above.</p> </div> <p><strong>Options</strong></p> <p>This subcommand has the following arguments:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">USER_NAME</code></dt> <dd>The user name.</dd> <dt><code class=\"docutils literal\">KEY_NAME</code></dt> <dd>The unique name to be assigned to the key you wish to delete.</dd> </dl>   <h3 id=\"list-client-key\">list-client-key</h3> <p>Use the <code class=\"docutils literal\">list-client-keys</code> subcommand to list client keys.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl list-client-keys ORG_NAME CLIENT_NAME [--verbose]</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">All options for this subcommand must follow all arguments.</p> </div> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">CLIENT_NAME</code></dt> <dd>The name of the client.</dd> <dt><code class=\"docutils literal\">ORG_NAME</code></dt> <dd>The short name for the organization to which the client belongs.</dd> <dt><code class=\"docutils literal\">--verbose</code></dt> <dd>Use to show the full public key strings in command output.</dd> </dl>   <h3 id=\"list-user-key\">list-user-key</h3> <p>Use the <code class=\"docutils literal\">list-user-keys</code> subcommand to list client keys.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl list-user-keys USER_NAME [--verbose]</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">All options for this subcommand must follow all arguments.</p> </div> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">USER_NAME</code></dt> <dd>The user name you wish to list keys for.</dd> <dt><code class=\"docutils literal\">--verbose</code></dt> <dd>Use to show the full public key strings in command output.</dd> </dl> <p><strong>Example</strong></p> <p>To view a list of user keys (including public key output):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl list-user-keys applejack --verbose</pre> <p>Returns:</p> <pre class=\"highlight-bash\" data-language=\"bash\">2 total key(s) found for user applejack\n\nkey_name: test-key\nexpires_at: Infinity\npublic_key:\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4q9Dh+bwJSjhU/VI4Y8s\n9WsbIPfpmBpoZoZVPL7V6JDfIaPUkdcSdZpynhRLhQwv9ScTFh65JwxC7wNhVspB\n4bKZeW6vugNGwCyBIemMfxMlpKZQDOc5dnBiRMMOgXSIimeiFtL+NmMXnGBBHDaE\nb+XXI8oCZRx5MTnzEs90mkaCRSIUlWxOUFzZvnv4jBrhWsd/yBM/h7YmVfmwVAjL\nVST0QG4MnbCjNtbzToMj55NAGwSdKHCzvvpWYkd62ZOquY9f2UZKxYCX0bFPNVQM\nEvBQGdNG39XYSEeF4LneYQKPHEZDdqe7TZdVE8ooU/syxlZgADtvkqEoc4zp1Im3\n2wIDAQAB\n-----END PUBLIC KEY-----\n\nkey_name: default\nexpires_at: Infinity\npublic_key:\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4q9Dh+bwJSjhU/VI4Y8s\n9WsbIPfpmBpoZoZVPL7V6JDfIaPUkdcSdZpynhRLhQwv9ScTFh65JwxC7wNhVspB\n4bKZeW6vugNGwCyBIemMfxMlpKZQDOc5dnBiRMMOgXSIimeiFtL+NmMXnGBBHDaE\nb+XXI8oCZRx5MTnzEs90mkaCRSIUlWxOUFzZvnv4jBrhWsd/yBM/h7YmVfmwVAjL\nVST0QG4MnbCjNtbzToMj55NAGwSdKHCzvvpWYkd62ZOquY9f2UZKxYCX0bFPNVQM\nEvBQGdNG39XYSEeF4LneYQKPHEZDdqe7TZdVE8ooU/syxlZgADtvkqEoc4zp1Im3\n2wIDAQAB\n-----END PUBLIC KEY-----</pre>    <h2 id=\"chef-client-title-settings\">chef-client Settings</h2> <p>Use following client.rb settings to manage SSL certificate preferences:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">local_key_generation</code></td> <td>Whether the Chef server or chef-client generates the private/public key pair. When <code class=\"docutils literal\">true</code>, the chef-client generates the key pair, and then sends the public key to the Chef server. Default value: <code class=\"docutils literal\">true</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">ssl_ca_file</code></td> <td>The file in which the OpenSSL key is saved. This setting is generated automatically by the chef-client and most users do not need to modify it.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">ssl_ca_path</code></td> <td>The path to where the OpenSSL key is located. This setting is generated automatically by the chef-client and most users do not need to modify it.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">ssl_client_cert</code></td> <td>The OpenSSL X.509 certificate used for mutual certificate validation. This setting is only necessary when mutual certificate validation is configured on the Chef server. Default value: <code class=\"docutils literal\">nil</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">ssl_client_key</code></td> <td>The OpenSSL X.509 key used for mutual certificate validation. This setting is only necessary when mutual certificate validation is configured on the Chef server. Default value: <code class=\"docutils literal\">nil</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">ssl_verify_mode</code></td> <td>\n<p class=\"first\">Set the verify mode for HTTPS requests.</p> <ul class=\"simple\"> <li>Use <code class=\"docutils literal\">:verify_none</code> to do no validation of SSL certificates.</li> <li>Use <code class=\"docutils literal\">:verify_peer</code> to do validation of all SSL certificates, including the Chef server connections, S3 connections, and any HTTPS <strong>remote_file</strong> resource URLs used in the chef-client run. This is the recommended setting.</li> </ul> <p class=\"last\">Depending on how OpenSSL is configured, the <code class=\"docutils literal\">ssl_ca_path</code> may need to be specified. Default value: <code class=\"docutils literal\">:verify_peer</code>.</p> </td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">verify_api_cert</code></td> <td>Verify the SSL certificate on the Chef server. When <code class=\"docutils literal\">true</code>, the chef-client always verifies the SSL certificate. When <code class=\"docutils literal\">false</code>, the chef-client uses the value of <code class=\"docutils literal\">ssl_verify_mode</code> to determine if the SSL certificate requires verification. Default value: <code class=\"docutils literal\">false</code>.</td> </tr> </tbody> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_security.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_security.html</a>\n  </p>\n</div>\n","server_12-5/server_backup_restore":"<h1 id=\"backup-and-restore\">Backup and Restore</h1> <p>Periodic backups of Chef server data are an essential part of managing and maintaining a healthy configuration and to help ensure that important data can be restored, if required.</p>  <h2 id=\"high-availability\">High Availability</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This section only applies to the Enterprise Chef server, version 11.x.</p> </div> <p>To configure backups on the backend servers in a high availability configuration, set a cron job in <code class=\"docutils literal\">/etc/cron.d/opc_snapshot</code> similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\"># Add to /etc/cron.d/opc_snapshot, and then remove comment below MAILTO to activate the cron job\nSHELL=/bin/bash\nHOME=/opt/opscode/bin\nPATH=/usr/bin:/usr/sbin:/bin:/opt/opscode/embedded/bin:/opt/opscode/bin\nMAILTO=SOMEONE@payingattention\n#17 23 * * * root drbd-backups -g opscode -l drbd &gt; /dev/null 2&gt;&amp;1</pre> <p>A cron job similar to the previous example will mount a new snapshot logical volume named:</p> <pre class=\"highlight-python\" data-language=\"python\">/dev/opscode/backup-{+%Y-%m-%d-%H-%M-%S}</pre> <p>where <code class=\"docutils literal\">{+%Y-%m-%d-%H-%M-%S}</code> is a format string for year, month, day, so on.</p> <p>After the cron job has run successfully, the <code class=\"docutils literal\">mount</code> command will show the new logical volume mounted on the <code class=\"docutils literal\">/var/opt/opscode/drbd-backups</code> mount point. The backup script will create a snapshot logical volume in unused space in the <code class=\"docutils literal\">/opscode</code> volume group. After the snapshot is created, the backup script will attempt to mount the snapshot logical volume, after which the snapshot will stay mounted for 24 hours. Upon the next cron job run, the backup script will attempt to unmount, destroy the snapshot, and then repeat the sequence.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">drbd-backups</code> script with default settings requires at least 40 GB free space in the <code class=\"docutils literal\">/opscode</code> volume group on the backend servers.</p> </div>   <h2 id=\"required-directories\">Required Directories</h2> <p>Data stored in the following directories should be backed up periodically:</p> <ul class=\"simple\"> <li>/etc/opscode</li> <li>/var/opt/opscode</li> </ul> <p>This data is also essential when any type of backup and restore operation is done for the Chef server.</p>  <h3 id=\"backup\">Backup</h3> <p>When backing up Chef server data, be sure that the system is shut down (or otherwise quiet) at the time of the backup. Perform all activities as root unless otherwise directed.</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Make a postgres export using the following commands:</p> <blockquote> <div>\n<pre class=\"highlight-bash\" data-language=\"bash\">export THEDATE=`date '+%Y-%m-%d-%H-%M-%S'`\nsudo -E -u opscode-pgsql bash\n/opt/opscode/embedded/bin/pg_dumpall -c | gzip --fast &gt; /tmp/postgresql-dump-$THEDATE.gz\nCtrl-d</pre> </div>\n</blockquote> </li> <li>\n<p class=\"first\">Synchronize to make sure that all of the data is present on-disk:</p> <blockquote> <div>\n<pre class=\"highlight-bash\" data-language=\"bash\">sync</pre> </div>\n</blockquote> </li> <li>\n<p class=\"first\">Backup the /etc/opscode and /var/opt/opscode directories and include the postgres export file as root</p> <blockquote> <div>\n<pre class=\"highlight-bash\" data-language=\"bash\">tar cvfzp var-opt-opscode-$THEDATE.tar.gz /etc/opscode /var/opt/opscode /tmp/postgresql-dump-$THEDATE.gz</pre> </div>\n</blockquote> </li> </ol>   <h3 id=\"restore\">Restore</h3> <p>When restoring Chef server data, the previously backed-up files will be required, along with the Chef server running only the <strong>postgresql</strong> service. Perform all activities as root unless otherwise directed.</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Stop the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop</pre> </li> <li>\n<p class=\"first\">Restore the previously backed-up files to the following locations:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">/etc/opscode</code></li> <li><code class=\"docutils literal\">/var/opt/opscode</code></li> </ul> <p>by using the following command, which will exclude PostgreSQL files:</p> <pre class=\"highlight-bash\" data-language=\"bash\">tar xvfzp var-opt-opscode-$THEDATE.tar.gz --exclude='var/opt/opscode/drbd/data/postgresql_9.2' -C /</pre> </li> <li>\n<p class=\"first\">Start the <strong>postgresql</strong> service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start postgresql</pre> </li> <li>\n<p class=\"first\">Restore the PostgreSQL database:</p> <blockquote> <div>\n<pre class=\"highlight-bash\" data-language=\"bash\">su - opscode-pgsql\ngunzip -c postgresql-dump-$THEDATE.gz | /opt/opscode/embedded/bin/psql -U \"opscode-pgsql\" -d postgres</pre> <p>Ignore the following error messages:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">ERROR: current user cannot be dropped</code></li> <li><code class=\"docutils literal\">ERROR: role \"opscode-pgsql\" already exists</code></li> </ul> </div>\n</blockquote> </li> <li>\n<p class=\"first\">Reconfigure the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Start the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start</pre> </li> <li>\n<p class=\"first\">Reconfigure the Chef management console:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-manage-ctl reconfigure</pre> </li> </ol>    <h2 id=\"chef-server-ctl\">chef-server-ctl</h2> <p>Use the following commands to manage backups of Chef server data, and then to restore those backups.</p>  <h3 id=\"id1\">backup</h3> <p>The <code class=\"docutils literal\">backup</code> subcommand is used to back up all Chef server data. This subcommand:</p> <ul class=\"simple\"> <li>Requires rsync to be installed on the Chef server prior to running the command</li> <li>Requires a <code class=\"docutils literal\">chef-server-ctl reconfigure</code> prior to running the command</li> <li>Should not be run in a Chef server configuration with an external PostgreSQL database; <a class=\"reference external\" href=\"https://github.com/chef/knife-ec-backup\">use knife ec backup</a> instead</li> <li>Puts the initial backup in the <code class=\"docutils literal\">/var/opt/chef-backup</code> directory as a tar.gz file; move this backup to a new location for safe keeping</li> </ul> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-y</code>, <code class=\"docutils literal\">--yes</code>\n</dt> <dd>Use to specify if the Chef server can go offline during tar.gz-based backups.</dd> </dl> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl backup</pre>   <h3 id=\"id2\">restore</h3> <p>The <code class=\"docutils literal\">restore</code> subcommand is used to restore Chef server data from a backup that was created by the <code class=\"docutils literal\">backup</code> subcommand. This subcommand may also be used to add Chef server data to a newly-installed server. This subcommand:</p> <ul class=\"simple\"> <li>Requires rsync to be installed on the Chef server prior to running the command</li> <li>Requires a <code class=\"docutils literal\">chef-server-ctl reconfigure</code> prior to running the command</li> <li>Should not be run in a Chef server configuration with an external PostgreSQL database; <a class=\"reference external\" href=\"https://github.com/chef/knife-ec-backup\">use knife ec backup</a> instead</li> <li>May restore backed up data to any version of the Chef server that supports this command, starting with Chef server 12.2 (which is the first version of the Chef server in which the <code class=\"docutils literal\">chef-server-ctl restore</code> command is available)</li> </ul> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-c</code>, <code class=\"docutils literal\">--cleanse</code>\n</dt> <dd>Use to remove all existing data on the Chef server; it will be replaced by the data in the backup archive.</dd> <dt>\n<code class=\"docutils literal\">-d DIRECTORY</code>, <code class=\"docutils literal\">--staging-dir DIRECTORY</code>\n</dt> <dd>Use to specify that the path to an empty directory to be used during the restore process. This directory must have enough disk space to expand all data in the backup archive.</dd> </dl> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restore PATH_TO_BACKUP (options)</pre> <p><strong>Examples</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restore /path/to/tar/archive.tar.gz</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_backup_restore.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_backup_restore.html</a>\n  </p>\n</div>\n","server_12-5/server_orgs":"<h1 id=\"organizations-and-groups\">Organizations and Groups</h1> <p>The Chef server uses role-based access control (RBAC) to restrict access to objects—nodes, environments, roles, data bags, cookbooks, and so on. This ensures that only authorized user and/or chef-client requests to the Chef server are allowed. Access to objects on the Chef server is fine-grained, allowing access to be defined by object type, object, group, user, and organization. The Chef server uses permissions to define how a user may interact with an object, after they have been authorized to do so.</p> <p>The Chef server uses organizations, groups, and users to define role-based access control:</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/server_12-5/_images/icon_server_organization.svg\" width=\"100px\">  </td> <td>An organization is the top-level entity for role-based access control in the Chef server. Each organization contains the default groups (<code class=\"docutils literal\">admins</code>, <code class=\"docutils literal\">clients</code>, and <code class=\"docutils literal\">users</code>, plus <code class=\"docutils literal\">billing_admins</code> for the hosted Chef server), at least one user and at least one node (on which the chef-client is installed). The Chef server supports multiple organizations. The Chef server includes a single default organization that is defined during setup. Additional organizations can be created after the initial setup and configuration of the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/server_12-5/_images/icon_server_groups.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">A group is used to define access to object types and objects in the Chef server and also to assign permissions that determine what types of tasks are available to members of that group who are authorized to perform them. Groups are configured per-organization.</p> <p class=\"last\">Individual users who are members of a group will inherit the permissions assigned to the group. The Chef server includes the following default groups: <code class=\"docutils literal\">admins</code>, <code class=\"docutils literal\">clients</code>, and <code class=\"docutils literal\">users</code>. For users of the hosted Chef server, an additional default group is provided: <code class=\"docutils literal\">billing_admins</code>.</p> </td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/server_12-5/_images/icon_server_users.svg\" width=\"100px\">  </td> <td>A user is any non-administrator human being who will manage data that is uploaded to the Chef server from a workstation or who will log on to the Chef management console web user interface. The Chef server includes a single default user that is defined during setup and is automatically assigned to the <code class=\"docutils literal\">admins</code> group.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/server_12-5/_images/icon_chef_client.svg\" width=\"100px\">  </td> <td>A client is an actor that has permission to access the Chef server. A client is most often a node (on which the chef-client runs), but is also a workstation (on which knife runs), or some other machine that is configured to use the Chef server API. Each request to the Chef server that is made by a client uses a private key for authentication that must be authorized by the public key on the Chef server.</td> </tr> </tbody> </table> <p>When a user makes a request to the Chef server using the Chef server API, permission to perform that action is determined by the following process:</p> <ol class=\"arabic simple\"> <li>Check if the user has permission to the object type</li> <li>If no, recursively check if the user is a member of a security group that has permission to that object</li> <li>If yes, allow the user to perform the action</li> </ol> <p>Permissions are managed using the Chef management console add-on in the Chef server web user interface.</p>  <h2 id=\"multiple-organizations\">Multiple Organizations</h2> <p>A single instance of the Chef server can support many organizations. Each organization has a unique set of groups and users. Each organization manages a unique set of nodes, on which a chef-client is installed and configured so that it may interact with a single organization on the Chef server.</p> <img alt=\"_images/server_rbac_orgs_groups_and_users.png\" src=\"https://docs.chef.io/release/server_12-5/_images/server_rbac_orgs_groups_and_users.png\"> <p>A user may belong to multiple organizations under the following conditions:</p> <ul class=\"simple\"> <li>Role-based access control is configured per-organization</li> <li>For a single user to interact with the Chef server using knife from the same chef-repo, that user may need to edit their knife.rb file prior to that interaction</li> </ul> <p>Using multiple organizations within the Chef server ensures that the same toolset, coding patterns and practices, physical hardware, and product support effort is being applied across the entire company, even when:</p> <ul class=\"simple\"> <li>Multiple product groups must be supported—each product group can have its own security requirements, schedule, and goals</li> <li>Updates occur on different schedules—the nodes in one organization are managed completely independently from the nodes in another</li> <li>Individual teams have competing needs for object and object types—data bags, environments, roles, and cookbooks are unique to each organization, even if they share the same name</li> </ul>   <h2 id=\"permissions\">Permissions</h2> <p>Permissions are used in the Chef server to define how users and groups can interact with objects on the server. Permissions are configured per-organization.</p>  <h3 id=\"object-permissions\">Object Permissions</h3> <p>The Chef server includes the following object permissions:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Permission</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><strong>Delete</strong></td> <td>Use the <strong>Delete</strong> permission to define which users and groups may delete an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] delete [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Grant</strong></td> <td>Use the <strong>Grant</strong> permission to define which users and groups may configure permissions on an object. This permission is required for any user who configures permissions using the <strong>Administration</strong> tab in the Chef management console.</td> </tr> <tr class=\"row-even\">\n<td><strong>Read</strong></td> <td>Use the <strong>Read</strong> permission to define which users and groups may view the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] show [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Update</strong></td> <td>Use the <strong>Update</strong> permission to define which users and groups may edit the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] edit [object_name]</code> argument to interact with objects on the Chef server and for any chef-client to save node data to the Chef server at the conclusion of a chef-client run.</td> </tr> </tbody> </table>   <h3 id=\"global-permissions\">Global Permissions</h3> <p>The Chef server includes the following global permissions:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Permission</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><strong>Create</strong></td> <td>Use the <strong>Create</strong> global permission to define which users and groups may create the following server object types: cookbooks, data bags, environments, nodes, roles, and tags. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] create</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>List</strong></td> <td>Use the <strong>List</strong> global permission to define which users and groups may view the following server object types: cookbooks, data bags, environments, nodes, roles, and tags. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] list</code> argument to interact with objects on the Chef server.</td> </tr> </tbody> </table> <p>These permissions set the default permissions for the following Chef server object types: clients, cookbooks, data bags, environments, groups, nodes, roles, and sandboxes.</p>   <h3 id=\"client-key-permissions\">Client Key Permissions</h3> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is only necessary after migrating a client from one Chef server to another. Permissions must be reset for client keys after the migration.</p> </div> <p>A client is an actor that has permission to access the Chef server. A client is most often a node (on which the chef-client runs), but is also a workstation (on which knife runs), or some other machine that is configured to use the Chef server API. Each request to the Chef server that is made by a client uses a private key for authentication that must be authorized by the public key on the Chef server.</p> <p>Keys should have <code class=\"docutils literal\">DELETE</code>, <code class=\"docutils literal\">GRANT</code>, <code class=\"docutils literal\">READ</code> and <code class=\"docutils literal\">UPDATE</code> permissions.</p> <p>Use the following code to set the correct permissions:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">#!/usr/bin/env ruby\nrequire 'rubygems'\nrequire 'chef/knife'\n\nChef::Config.from_file(File.join(Chef::Knife.chef_config_dir, 'knife.rb'))\n\nrest = Chef::REST.new(Chef::Config[:chef_server_url])\n\nChef::Node.list.each do |node|\n  %w{read update delete grant}.each do |perm|\n    ace = rest.get(\"nodes/#{node[0]}/_acl\")[perm]\n    ace['actors'] &lt;&lt; node[0] unless ace['actors'].include?(node[0])\n    rest.put(\"nodes/#{node[0]}/_acl/#{perm}\", perm =&gt; ace)\n    puts \"Client \\\"#{node[0]}\\\" granted \\\"#{perm}\\\" access on node \\\"#{node[0]}\\\"\"\n  end\nend</pre> <p>Save it as a Ruby script—<code class=\"docutils literal\">chef_server_permissions.rb</code>, for example—in the <code class=\"docutils literal\">.chef/scripts</code> directory located in the chef-repo, and then run a knife command similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife exec chef_server_permissions.rb</pre>   <h3 id=\"default-permissions\">Default Permissions</h3> <p>A group is used to define access to object types and objects in the Chef server and also to assign permissions that determine what types of tasks are available to members of that group who are authorized to perform them. Groups are configured per-organization.</p> <p>Individual users who are members of a group will inherit the permissions assigned to the group. The Chef server includes the following default groups: <code class=\"docutils literal\">admins</code>, <code class=\"docutils literal\">clients</code>, and <code class=\"docutils literal\">users</code>. For users of the hosted Chef server, an additional default group is provided: <code class=\"docutils literal\">billing_admins</code>.</p>    <h2 id=\"groups\">Groups</h2> <p>A group is used to define access to object types and objects in the Chef server and also to assign permissions that determine what types of tasks are available to members of that group who are authorized to perform them. Groups are configured per-organization.</p> <p>Individual users who are members of a group will inherit the permissions assigned to the group. The Chef server includes the following default groups: <code class=\"docutils literal\">admins</code>, <code class=\"docutils literal\">clients</code>, and <code class=\"docutils literal\">users</code>. For users of the hosted Chef server, an additional default group is provided: <code class=\"docutils literal\">billing_admins</code>.</p>  <h3 id=\"default-groups\">Default Groups</h3> <p>The following sections show the default permissions assigned by the Chef server to the <code class=\"docutils literal\">admins</code>, <code class=\"docutils literal\">billing_admins</code>, <code class=\"docutils literal\">clients</code>, and <code class=\"docutils literal\">users</code> groups.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The creator of an object on the Chef server is assigned <code class=\"docutils literal\">create</code>, <code class=\"docutils literal\">delete</code>, <code class=\"docutils literal\">grant</code>, <code class=\"docutils literal\">read</code>, and <code class=\"docutils literal\">update</code> permission to that object.</p> </div>  <h4 id=\"admins\">admins</h4> <p>The <code class=\"docutils literal\">admins</code> group is assigned the following:</p> <table class=\"docutils\"> <colgroup> <col width=\"24%\"> <col width=\"15%\"> <col width=\"15%\"> <col width=\"15%\"> <col width=\"15%\"> <col width=\"15%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Group</th> <th class=\"head\">Create</th> <th class=\"head\">Delete</th> <th class=\"head\">Grant</th> <th class=\"head\">Read</th> <th class=\"head\">Update</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>admins</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>clients</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> </tr> <tr class=\"row-even\">\n<td>users</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> </tr> </tbody> </table>   <h4 id=\"billing-admins\">billing_admins</h4> <p>The <code class=\"docutils literal\">billing_admins</code> group is assigned the following:</p> <table class=\"docutils\"> <colgroup> <col width=\"29%\"> <col width=\"18%\"> <col width=\"18%\"> <col width=\"18%\"> <col width=\"18%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Group</th> <th class=\"head\">Create</th> <th class=\"head\">Delete</th> <th class=\"head\">Read</th> <th class=\"head\">Update</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>billing_admins</td> <td>no</td> <td>no</td> <td>yes</td> <td>yes</td> </tr> </tbody> </table>   <h4 id=\"clients\">clients</h4> <p>The <code class=\"docutils literal\">clients</code> group is assigned the following:</p> <table class=\"docutils\"> <colgroup> <col width=\"29%\"> <col width=\"18%\"> <col width=\"18%\"> <col width=\"18%\"> <col width=\"18%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Object</th> <th class=\"head\">Create</th> <th class=\"head\">Delete</th> <th class=\"head\">Read</th> <th class=\"head\">Update</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>clients</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> </tr> <tr class=\"row-odd\">\n<td>cookbooks</td> <td>no</td> <td>no</td> <td>yes</td> <td>no</td> </tr> <tr class=\"row-even\">\n<td>cookbook_artifacts</td> <td>no</td> <td>no</td> <td>yes</td> <td>no</td> </tr> <tr class=\"row-odd\">\n<td>data</td> <td>no</td> <td>no</td> <td>yes</td> <td>no</td> </tr> <tr class=\"row-even\">\n<td>environments</td> <td>no</td> <td>no</td> <td>yes</td> <td>no</td> </tr> <tr class=\"row-odd\">\n<td>nodes</td> <td>yes</td> <td>no</td> <td>yes</td> <td>no</td> </tr> <tr class=\"row-even\">\n<td>organization</td> <td>no</td> <td>no</td> <td>yes</td> <td>no</td> </tr> <tr class=\"row-odd\">\n<td>policies</td> <td>no</td> <td>no</td> <td>yes</td> <td>no</td> </tr> <tr class=\"row-even\">\n<td>policy_groups</td> <td>no</td> <td>no</td> <td>yes</td> <td>no</td> </tr> <tr class=\"row-odd\">\n<td>roles</td> <td>no</td> <td>no</td> <td>yes</td> <td>no</td> </tr> <tr class=\"row-even\">\n<td>sandboxes</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> </tr> </tbody> </table>   <h4 id=\"public-key-read-access\">public_key_read_access</h4> <p>The <code class=\"docutils literal\">public_key_read_access</code> group controls which users and clients have <a class=\"reference internal\" href=\"api_chef_server\">read permissions to the following endpoints</a>:</p> <ul class=\"simple\"> <li>GET /clients/CLIENT/keys</li> <li>GET /clients/CLIENT/keys/KEY</li> <li>GET /users/USER/keys</li> <li>GET /users/USER/keys/</li> </ul> <p>By default, the <code class=\"docutils literal\">public_key_read_access</code> assigns all members of the <code class=\"docutils literal\">users</code> and <code class=\"docutils literal\">clients</code> group permission to these endpoints:</p> <table class=\"docutils\"> <colgroup> <col width=\"24%\"> <col width=\"15%\"> <col width=\"15%\"> <col width=\"15%\"> <col width=\"15%\"> <col width=\"15%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Group</th> <th class=\"head\">Create</th> <th class=\"head\">Delete</th> <th class=\"head\">Grant</th> <th class=\"head\">Read</th> <th class=\"head\">Update</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>admins</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> <td>no</td> </tr> <tr class=\"row-odd\">\n<td>clients</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> </tr> <tr class=\"row-even\">\n<td>users</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> </tr> </tbody> </table>   <h4 id=\"users\">users</h4> <p>The <code class=\"docutils literal\">users</code> group is assigned the following:</p> <table class=\"docutils\"> <colgroup> <col width=\"29%\"> <col width=\"18%\"> <col width=\"18%\"> <col width=\"18%\"> <col width=\"18%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Object</th> <th class=\"head\">Create</th> <th class=\"head\">Delete</th> <th class=\"head\">Read</th> <th class=\"head\">Update</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>clients</td> <td>no</td> <td>yes</td> <td>yes</td> <td>no</td> </tr> <tr class=\"row-odd\">\n<td>cookbooks</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> </tr> <tr class=\"row-even\">\n<td>cookbook_artifacts</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>data</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> </tr> <tr class=\"row-even\">\n<td>environments</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>nodes</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> </tr> <tr class=\"row-even\">\n<td>organization</td> <td>no</td> <td>no</td> <td>yes</td> <td>no</td> </tr> <tr class=\"row-odd\">\n<td>policies</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> </tr> <tr class=\"row-even\">\n<td>policy_groups</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>roles</td> <td>yes</td> <td>yes</td> <td>yes</td> <td>yes</td> </tr> <tr class=\"row-even\">\n<td>sandboxes</td> <td>yes</td> <td>no</td> <td>no</td> <td>no</td> </tr> </tbody> </table>   <h4 id=\"chef-validator\">chef-validator</h4> <p>Every request made by the chef-client to the Chef server must be an authenticated request using the Chef server API and a private key. When the chef-client makes a request to the Chef server, the chef-client authenticates each request using a private key located in <code class=\"docutils literal\">/etc/chef/client.pem</code>.</p> <p>However, during the first chef-client run, this private key does not exist. Instead, the chef-client will attempt to use the private key assigned to the chef-validator, located in <code class=\"docutils literal\">/etc/chef/validation.pem</code>. (If, for any reason, the chef-validator is unable to make an authenticated request to the Chef server, the initial chef-client run will fail.)</p> <p>During the initial chef-client run, the chef-client will register with the Chef server using the private key assigned to the chef-validator, after which the chef-client will obtain a <code class=\"docutils literal\">client.pem</code> private key for all future authentication requests to the Chef server.</p> <p>After the initial chef-client run has completed successfully, the chef-validator is no longer required and may be deleted from the node. Use the <code class=\"docutils literal\">delete_validation</code> recipe found in the <code class=\"docutils literal\">chef-client</code> cookbook (<a class=\"reference external\" href=\"https://github.com/chef-cookbooks/chef-client\">https://github.com/chef-cookbooks/chef-client</a>) to remove the chef-validator.</p> <p>The chef-validator is allowed to do the following at the start of a chef-client run. After the chef-client is registered with Chef server, that chef-client is added to the <code class=\"docutils literal\">clients</code> group:</p> <table class=\"docutils\"> <colgroup> <col width=\"29%\"> <col width=\"18%\"> <col width=\"18%\"> <col width=\"18%\"> <col width=\"18%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Object</th> <th class=\"head\">Create</th> <th class=\"head\">Delete</th> <th class=\"head\">Read</th> <th class=\"head\">Update</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>clients</td> <td>yes</td> <td>no</td> <td>no</td> <td>no</td> </tr> </tbody> </table>    <h3 id=\"push-jobs-title-groups\">Chef Push Jobs Groups</h3> <p>Chef push jobs is an extension of the Chef server that allows jobs to be run against nodes independently of a chef-client run. A job is an action or a command to be executed against a subset of nodes; the nodes against which a job is run are determined by the results of a search query made to the Chef server.</p> <p>Chef push jobs uses the Chef server API and a Ruby client to initiate all connections to the Chef server. Connections use the same authentication and authorization model as any other request made to the Chef server. A knife plugin is used to initiate job creation and job tracking.</p> <p>It is possible to initiate jobs from the chef-client, such as from within a recipe based on an action to be determined as the recipe runs. For a chef-client to be able to create, initiate, or read jobs, the chef-client on which Chef push jobs is configured must belong to one (or both) of the following groups:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Group</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">pushy_job_readers</code></td> <td>Use to view the status of jobs.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">pushy_job_writers</code></td> <td>Use to create and initiate jobs.</td> </tr> </tbody> </table> <p>These groups do not exist by default, even after Chef push jobs has been installed to the Chef server. If these groups are not created, only members of the <code class=\"docutils literal\">admin</code> security group will be able to create, initiate, and view jobs.</p>   <h3 id=\"reporting-groups\">Reporting Groups</h3> <p>Use Reporting to keep track of what happens during the execution of chef-client runs across all of the machines that are under management by Chef. Reports can be generated for the entire organization and they can be generated for specific nodes.</p> <p>Reporting data is collected during the chef-client run and the results are posted to the Chef server at the end of the chef-client run at the same time the node object is uploaded to the Chef server.</p> <p>A chef-client on which Reporting is configured always sends data to the Chef server. Users of the Chef management console web user interface must belong to the following group:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Group</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">reporting_readers</code></td> <td>Use to view and configure reports.</td> </tr> </tbody> </table> <p>This group does not exist by default, even after Reporting has been installed to the Chef server. If this group is not created, all members of the organization will be unable to view reports.</p>    <h2 id=\"server-admins\">Server Admins</h2> <p>The <code class=\"docutils literal\">server-admins</code> group is a global group that grants its members permission to create, read, update, and delete user accounts, with the exception of superuser accounts. The <code class=\"docutils literal\">server-admins</code> group is useful for users who are responsible for day-to-day administration of the Chef server, especially user management via the <code class=\"docutils literal\">knife user</code> subcommand. Before members can be added to the <code class=\"docutils literal\">server-admins</code> group, they must already have a user account on the Chef server.</p>  <h3 id=\"scenario\">Scenario</h3> <p>The following user accounts exist on the Chef server: <code class=\"docutils literal\">pivotal</code> (a superuser account), <code class=\"docutils literal\">alice</code>, <code class=\"docutils literal\">bob</code>, <code class=\"docutils literal\">carol</code>, and <code class=\"docutils literal\">dan</code>. Run the following command to view a list of users on the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-list</pre> <p>and it returns the same list of users:</p> <pre class=\"highlight-bash\" data-language=\"bash\">pivotal\nalice\nbob\ncarol\ndan</pre> <p>Alice is a member of the IT team whose responsibilities include day-to-day administration of the Chef server, in particular managing the user accounts on the Chef server that are used by the rest of the organization. From a workstation, Alice runs the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user list -c ~/.chef/alice.rb</pre> <p>and it returns the following error:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ERROR: You authenticated successfully to &lt;chef_server_url&gt; as alice\n       but you are not authorized for this action\nResponse: Missing read permission</pre> <p>Alice is not a superuser and does not have permissions on other users because user accounts are global to organizations in the Chef server. Let’s add Alice to the <code class=\"docutils literal\">server-admins</code> group:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl grant-server-admin-permissions alice</pre> <p>and it returns the following response:</p> <pre class=\"highlight-bash\" data-language=\"bash\">User alice was added to server-admins.</pre> <p>Alice can now create, read, update, and delete user accounts on the Chef server, even for organizations to which Alice is not a member. From a workstation, Alice re-runs the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user list -c ~/.chef/alice.rb</pre> <p>which now returns:</p> <pre class=\"highlight-bash\" data-language=\"bash\">pivotal\nalice\nbob\ncarol\ndan</pre> <p>Alice is now a server administrator and can use the following knife subcommands to manage users on the Chef server:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">knife user-create</code></li> <li><code class=\"docutils literal\">knife user-delete</code></li> <li><code class=\"docutils literal\">knife user-edit</code></li> <li><code class=\"docutils literal\">knife user-list</code></li> <li><code class=\"docutils literal\">knife user-show</code></li> </ul> <p>For example, Alice runs the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user edit carol -c ~/.chef/alice.rb</pre> <p>and the $EDITOR opens in which Alice makes changes, and then saves them.</p>  <h4 id=\"superuser-accounts\">Superuser Accounts</h4> <p>Superuser accounts may not be managed by users who belong to the <code class=\"docutils literal\">server-admins</code> group. For example, Alice attempts to delete the <code class=\"docutils literal\">pivotal</code> superuser account:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user delete pivotal -c ~/.chef/alice.rb</pre> <p>and the following error is returned:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ERROR: You authenticated successfully to &lt;chef_server_url&gt; as user1\n       but you are not authorized for this action\nResponse: Missing read permission</pre> <p>Alice’s action is unauthorized even with membership in the <code class=\"docutils literal\">server-admins</code> group.</p>    <h3 id=\"manage-server-admins-group\">Manage server-admins Group</h3> <p>Membership of the <code class=\"docutils literal\">server-admins</code> group is managed with a set of <code class=\"docutils literal\">chef-server-ctl</code> subcommands:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">chef-server-ctl grant-server-admin-permissions</code></li> <li><code class=\"docutils literal\">chef-server-ctl list-server-admins</code></li> <li><code class=\"docutils literal\">chef-server-ctl remove-server-admin-permissions</code></li> </ul>  <h4 id=\"add-members\">Add Members</h4> <p>The <code class=\"docutils literal\">grant-server-admin-permissions</code> subcommand is used to add a user to the <code class=\"docutils literal\">server-admins</code> group. Run the command once per user added.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl grant-server-admin-permissions USER_NAME</pre> <p>where <code class=\"docutils literal\">USER_NAME</code> is the user to add to the list of server administrators.</p> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl grant-server-admin-permissions bob</pre> <p>returns:</p> <pre class=\"highlight-bash\" data-language=\"bash\">User bob was added to server-admins. This user can now list,\nread, and create users (even for orgs they are not members of)\nfor this Chef Server.</pre>   <h4 id=\"remove-members\">Remove Members</h4> <p>The <code class=\"docutils literal\">remove-server-admin-permissions</code> subcommand is used to remove a user from the <code class=\"docutils literal\">server-admins</code> group. Run the command once per user removed.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl remove-server-admin-permissions USER_NAME</pre> <p>where <code class=\"docutils literal\">USER_NAME</code> is the user to remove from the list of server administrators.</p> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl remove-server-admin-permissions bob</pre> <p>returns:</p> <pre class=\"highlight-bash\" data-language=\"bash\">User bob was removed from server-admins. This user can no longer\nlist, read, and create users for this Chef Server except for where\nthey have default permissions (such as within an org).</pre>   <h4 id=\"list-membership\">List Membership</h4> <p>The <code class=\"docutils literal\">list-server-admins</code> subcommand is used to return a list of users who are members of the <code class=\"docutils literal\">server-admins</code> group.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl list-server-admins</pre> <p>and will return a list of users similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">pivotal\nalice\nbob\ncarol\ndan</pre>     <h2 id=\"manage-organizations\">Manage Organizations</h2> <p>Use the <code class=\"docutils literal\">org-create</code>, <code class=\"docutils literal\">org-delete</code>, <code class=\"docutils literal\">org-list</code>, <code class=\"docutils literal\">org-show</code>, <code class=\"docutils literal\">org-user-add</code> and <code class=\"docutils literal\">org-user-remove</code> commands to manage organizations.</p>  <h3 id=\"org-create\">org-create</h3> <p>The <code class=\"docutils literal\">org-create</code> subcommand is used to create an organization. (The validation key for the organization is returned to <code class=\"docutils literal\">STDOUT</code> when creating an organization with this command.)</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-create ORG_NAME \"ORG_FULL_NAME\" (options)</pre> <p>where:</p> <ul class=\"simple\"> <li>The name must begin with a lower-case letter or digit, may only contain lower-case letters, digits, hyphens, and underscores, and must be between 1 and 255 characters. For example: <code class=\"docutils literal\">chef</code>.</li> <li>The full name must begin with a non-white space character and must be between 1 and 1023 characters. For example: <code class=\"docutils literal\">\"Chef Software, Inc.\"</code>.</li> </ul> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a USER_NAME</code>, <code class=\"docutils literal\">--association_user USER_NAME</code>\n</dt> <dd>Associate a user with an organization and add them to the <code class=\"docutils literal\">admins</code> and <code class=\"docutils literal\">billing_admins</code> security groups.</dd> <dt>\n<code class=\"docutils literal\">-f FILE_NAME</code>, <code class=\"docutils literal\">--filename FILE_NAME</code>\n</dt> <dd>Write the ORGANIZATION-validator.pem to <code class=\"docutils literal\">FILE_NAME</code> instead of printing it to <code class=\"docutils literal\">STDOUT</code>.</dd> </dl>   <h3 id=\"org-delete\">org-delete</h3> <p>The <code class=\"docutils literal\">org-delete</code> subcommand is used to delete an organization.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-delete ORG_NAME</pre>   <h3 id=\"org-list\">org-list</h3> <p>The <code class=\"docutils literal\">org-list</code> subcommand is used to list all of the organizations currently present on the Chef server.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-list (options)</pre> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--all-orgs</code>\n</dt> <dd>Show all organizations.</dd> <dt>\n<code class=\"docutils literal\">-w</code>, <code class=\"docutils literal\">--with-uri</code>\n</dt> <dd>Show the corresponding URIs.</dd> </dl>   <h3 id=\"org-show\">org-show</h3> <p>The <code class=\"docutils literal\">org-show</code> subcommand is used to show the details for an organization.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-show ORG_NAME</pre>   <h3 id=\"org-user-add\">org-user-add</h3> <p>The <code class=\"docutils literal\">org-user-add</code> subcommand is used to add a user to an organization.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-user-add ORG_NAME USER_NAME (options)</pre> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--admin</code></dt> <dd>Add the user to the <code class=\"docutils literal\">admins</code> group.</dd> </dl>   <h3 id=\"org-user-remove\">org-user-remove</h3> <p>The <code class=\"docutils literal\">org-user-remove</code> subcommand is used to remove a user from an organization.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-user-remove ORG_NAME USER_NAME (options)</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_orgs.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_orgs.html</a>\n  </p>\n</div>\n","server_12-5/server_services":"<h1 id=\"services\">Services</h1> <p>The Chef server has a built in process supervisor, which ensures that all of the required services are in the appropriate state at any given time. The supervisor starts two processes per service.</p>  <h2 id=\"service-subcommands\">Service Subcommands</h2> <p>This command has a built in process supervisor that ensures all of the required services are in the appropriate state at any given time. The supervisor starts two processes per service and provides the following subcommands for managing services: <code class=\"docutils literal\">hup</code>, <code class=\"docutils literal\">int</code>, <code class=\"docutils literal\">kill</code>, <code class=\"docutils literal\">once</code>, <code class=\"docutils literal\">restart</code>, <code class=\"docutils literal\">service-list</code>, <code class=\"docutils literal\">start</code>, <code class=\"docutils literal\">status</code>, <code class=\"docutils literal\">stop</code>, <code class=\"docutils literal\">tail</code>, and <code class=\"docutils literal\">term</code>.</p>  <h3 id=\"hup\">hup</h3> <p>The <code class=\"docutils literal\">hup</code> subcommand is used to send a <code class=\"docutils literal\">SIGHUP</code> to all services. This command can also be run for an individual service by specifying the name of the service in the command.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl hup SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand.</p>   <h3 id=\"int\">int</h3> <p>The <code class=\"docutils literal\">int</code> subcommand is used to send a <code class=\"docutils literal\">SIGINT</code> to all services. This command can also be run for an individual service by specifying the name of the service in the command.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl int SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand.</p>   <h3 id=\"kill\">kill</h3> <p>The <code class=\"docutils literal\">kill</code> subcommand is used to send a <code class=\"docutils literal\">SIGKILL</code> to all services. This command can also be run for an individual service by specifying the name of the service in the command.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl kill SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand.</p>   <h3 id=\"once\">once</h3> <p>The supervisor for the Chef server is configured to restart any service that fails, unless that service has been asked to change its state. The <code class=\"docutils literal\">once</code> subcommand is used to tell the supervisor to not attempt to restart any service that fails.</p> <p>This command is useful when troubleshooting configuration errors that prevent a service from starting. Run the <code class=\"docutils literal\">once</code> subcommand followed by the <code class=\"docutils literal\">status</code> subcommand to look for services in a down state and/or to identify which services are in trouble. This command can also be run for an individual service by specifying the name of the service in the command.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl once SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand.</p>   <h3 id=\"restart\">restart</h3> <p>The <code class=\"docutils literal\">restart</code> subcommand is used to restart all services enabled on the Chef server or to restart an individual service by specifying the name of that service in the command.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">When running the Chef server in a high availability configuration, restarting all services may trigger failover.</p> </div> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restart SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand. When a service is successfully restarted the output should be similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ok: run: service_name: (pid 12345) 1s</pre>   <h3 id=\"service-list\">service-list</h3> <p>The <code class=\"docutils literal\">service-list</code> subcommand is used to display a list of all available services. A service that is enabled is labeled with an asterisk (*).</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl service-list</pre>   <h3 id=\"start\">start</h3> <p>The <code class=\"docutils literal\">start</code> subcommand is used to start all services that are enabled in the Chef server. This command can also be run for an individual service by specifying the name of the service in the command.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand. When a service is successfully started the output should be similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ok: run: service_name: (pid 12345) 1s</pre> <p>The supervisor for the Chef server is configured to wait seven seconds for a service to respond to a command from the supervisor. If you see output that references a timeout, it means that a signal has been sent to the process, but that the process has yet to actually comply. In general, processes that have timed out are not a big concern, unless they are failing to respond to the signals at all. If a process is not responding, use a command like the <code class=\"docutils literal\">kill</code> subcommand to stop the process, investigate the cause (if required), and then use the <code class=\"docutils literal\">start</code> subcommand to re-enable it.</p>   <h3 id=\"status\">status</h3> <p>The <code class=\"docutils literal\">status</code> subcommand is used to show the status of all services available to the Chef server. The results will vary based on the configuration of a given server. This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl status</pre> <p>and will return the status for all services. Status can be returned for individual services by specifying the name of the service as part of the command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl status SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand.</p> <p>When service status is requested, the output should be similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ run: service_name: (pid 12345) 12345s; run: log: (pid 1234) 67890s</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">run:</code> is the state of the service (<code class=\"docutils literal\">run:</code> or <code class=\"docutils literal\">down:</code>)</li> <li>\n<code class=\"docutils literal\">service_name:</code> is the name of the service for which status is returned</li> <li>\n<code class=\"docutils literal\">(pid 12345)</code> is the process identifier</li> <li>\n<code class=\"docutils literal\">12345s</code> is the uptime of the service, in seconds</li> </ul> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ down: opscode-erchef: (pid 35546) 10s</pre> <p>By default, runit will restart services automatically when the services fail. Therefore, runit may report the status of a service as <code class=\"docutils literal\">run:</code> even when there is an issue with that service. When investigating why a particular service is not running as it should be, look for the services with the shortest uptimes. For example, the list below indicates that the <strong>opscode-erchef</strong> should be investigated further:</p> <pre class=\"highlight-bash\" data-language=\"bash\">run: oc-id\nrun: opscode-chef: (pid 4327) 13671s; run: log: (pid 4326) 13671s\nrun: opscode-erchef: (pid 5383) 5s; run: log: (pid 4382) 13669s\nrun: opscode-expander: (pid 4078) 13694s; run: log: (pid 4077) 13694s\nrun: opscode-expander-reindexer: (pid 4130) 13692s; run: log: (pid 4114) 13692s</pre>  <h4 id=\"high-availability\">High Availability</h4> <p>On back-end servers in a high availability topology, Keepalived is used by the clustering service to determine whether a service should be running. If the <code class=\"docutils literal\">status</code> subcommand is run against any of these nodes, a few things change:</p> <ul class=\"simple\"> <li>On the back-end node that is currently the backup server, it is normal to see only one running process: Keepalived</li> <li>On the back-end node that is currently the master server, it is normal to see all services running. It is also normal to see some services in a down state if the server, on reboot, did not attempt to start the services because Keepalived determines which services are restarted based on the state of the cluster</li> </ul> <p>A sample status line for a service that is running on the master server in a high availability topology:</p> <pre class=\"highlight-bash\" data-language=\"bash\">run: opscode-solr4: (pid 25341) 239s, normally down; run: log: (pid 5700) 145308s</pre>   <h4 id=\"log-files\">Log Files</h4> <p>A typical status line for a service that is running any of the Chef server front-end services is similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">run: name_of_service: (pid 1486) 7819s; run: log: (pid 1485) 7819s</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">run</code> describes the state in which the supervisor attempts to keep processes. This state is either <code class=\"docutils literal\">run</code> or <code class=\"docutils literal\">down</code>. If a service is in a <code class=\"docutils literal\">down</code> state, it should be stopped</li> <li>\n<code class=\"docutils literal\">name_of_service</code> is the service name, for example: <code class=\"docutils literal\">opscode-solr4</code>\n</li> <li>\n<code class=\"docutils literal\">(pid 1486) 7819s;</code> is the process identifier followed by the amount of time (in seconds) the service has been running</li> <li>\n<code class=\"docutils literal\">run: log: (pid 1485) 7819s</code> is the log process. It is typical for a log process to have a longer run time than a service; this is because the supervisor does not need to restart the log process in order to connect the supervised process</li> </ul> <p>If the service is down, the status line will appear similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">down: opscode-solr4: 3s, normally up; run: log: (pid 1485) 8526s</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">down</code> indicates that the service is in a down state</li> <li>\n<code class=\"docutils literal\">3s, normally up;</code> indicates that the service is normally in a run state and that the supervisor would attempt to restart this service after a reboot</li> </ul>    <h3 id=\"stop\">stop</h3> <p>The <code class=\"docutils literal\">stop</code> subcommand is used to stop all services enabled on the Chef server. This command can also be run for an individual service by specifying the name of the service in the command.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand. When a service is successfully stopped the output should be similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ok: diwb: service_name: 0s, normally up</pre> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop</pre> <p>will return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ok: down: nginx: 393s, normally up\nok: down: opscode-chef: 391s, normally up\nok: down: opscode-erchef: 391s, normally up\nok: down: opscode-expander: 390s, normally up\nok: down: opscode-expander-reindexer: 389s, normally up\nok: down: opscode-solr4: 389s, normally up\nok: down: postgresql: 388s, normally up\nok: down: rabbitmq: 388s, normally up\nok: down: redis_lb: 387s, normally up</pre>   <h3 id=\"tail\">tail</h3> <p>The <code class=\"docutils literal\">tail</code> subcommand is used to follow all of the Chef server logs for all services. This command can also be run for an individual service by specifying the name of the service in the command.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl tail SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand.</p>   <h3 id=\"term\">term</h3> <p>The <code class=\"docutils literal\">term</code> subcommand is used to send a <code class=\"docutils literal\">SIGTERM</code> to all services. This command can also be run for an individual service by specifying the name of the service in the command.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl term SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand.</p>    <h2 id=\"list-of-services\">List of Services</h2> <p>The following services are part of the Chef server:</p> <ul class=\"simple\"> <li>bifrost</li> <li>bookshelf</li> <li>keepalived</li> <li>nginx</li> <li>opscode-erchef</li> <li>opscode-expander</li> <li>opscode-solr4</li> <li>postgresql</li> <li>rabbitmq</li> <li>redis-lb</li> </ul>  <h3 id=\"bifrost\">bifrost</h3> <p>The <strong>oc_bifrost</strong> service ensures that every request to view or manage objects stored on the Chef server is authorized.</p>  <h4 id=\"id1\">status</h4> <p>To view the status for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl status bifrost</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ run: bifrost: (pid 1234) 123456s; run: log: (pid 5678) 789012s</pre>   <h4 id=\"id2\">start</h4> <p>To start the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start bifrost</pre>   <h4 id=\"id3\">stop</h4> <p>To stop the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop bifrost</pre>   <h4 id=\"id4\">restart</h4> <p>To restart the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restart bifrost</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ok: run: bifrost: (pid 1234) 1234s</pre>   <h4 id=\"id5\">kill</h4> <p>To kill the service (send a <code class=\"docutils literal\">SIGKILL</code> command):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl kill bifrost</pre>   <h4 id=\"run-once\">run once</h4> <p>To run the service, but not restart it (if the service fails):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl once bifrost</pre>   <h4 id=\"id6\">tail</h4> <p>To follow the logs for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl tail bifrost</pre>    <h3 id=\"bookshelf\">bookshelf</h3> <p>The <strong>bookshelf</strong> service is an Amazon Simple Storage Service (S3)-compatible service that is used to store cookbooks, including all of the files—recipes, templates, and so on—that are associated with each cookbook.</p>  <h4 id=\"id7\">status</h4> <p>To view the status for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl status bookshelf</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ run: bookshelf: (pid 1234) 123456s; run: log: (pid 5678) 789012s</pre>   <h4 id=\"id8\">start</h4> <p>To start the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start bookshelf</pre>   <h4 id=\"id9\">stop</h4> <p>To stop the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop bookshelf</pre>   <h4 id=\"id10\">restart</h4> <p>To restart the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restart bookshelf</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ok: run: bookshelf: (pid 1234) 1234s</pre>   <h4 id=\"id11\">kill</h4> <p>To kill the service (send a <code class=\"docutils literal\">SIGKILL</code> command):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl kill bookshelf</pre>   <h4 id=\"id12\">run once</h4> <p>To run the service, but not restart it (if the service fails):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl once bookshelf</pre>   <h4 id=\"id13\">tail</h4> <p>To follow the logs for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl tail bookshelf</pre>    <h3 id=\"keepalived\">keepalived</h3> <p>The <strong>keepalived</strong> service manages the virtual IP address (VIP) between the backend machines in a high availability topology that uses DRBD.</p>  <h4 id=\"id14\">status</h4> <p>To view the status for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl status keepalived</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ run: keepalived: (pid 1234) 123456s; run: log: (pid 5678) 789012s</pre>   <h4 id=\"id15\">start</h4> <p>To start the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start keepalived</pre>   <h4 id=\"id16\">stop</h4> <p>To stop the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop keepalived</pre>   <h4 id=\"id17\">restart</h4> <p>To restart the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restart keepalived</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ok: run: keepalived: (pid 1234) 1234s</pre>   <h4 id=\"id18\">kill</h4> <p>To kill the service (send a <code class=\"docutils literal\">SIGKILL</code> command):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl kill keepalived</pre>   <h4 id=\"id19\">run once</h4> <p>To run the service, but not restart it (if the service fails):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl once keepalived</pre>   <h4 id=\"id20\">tail</h4> <p>To follow the logs for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl tail keepalived</pre>    <h3 id=\"nginx\">nginx</h3> <p>The <strong>nginx</strong> service is used to manage traffic to the Chef server, including virtual hosts for internal and external API request/response routing, external add-on request routing, and routing between front- and back-end components.</p>  <h4 id=\"id21\">status</h4> <p>To view the status for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl status nginx</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ run: nginx: (pid 1234) 123456s; run: log: (pid 5678) 789012s</pre>   <h4 id=\"id22\">start</h4> <p>To start the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start nginx</pre>   <h4 id=\"id23\">stop</h4> <p>To stop the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop nginx</pre>   <h4 id=\"id24\">restart</h4> <p>To restart the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restart nginx</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ok: run: nginx: (pid 1234) 1234s</pre>   <h4 id=\"id25\">kill</h4> <p>To kill the service (send a <code class=\"docutils literal\">SIGKILL</code> command):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl kill nginx</pre>   <h4 id=\"id26\">run once</h4> <p>To run the service, but not restart it (if the service fails):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl once nginx</pre>   <h4 id=\"id27\">tail</h4> <p>To follow the logs for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl tail nginx</pre>    <h3 id=\"opscode-erchef\">opscode-erchef</h3> <p>The <strong>opscode-erchef</strong> service is an Erlang-based service that is used to handle Chef server API requests to the following areas within the Chef server:</p> <ul class=\"simple\"> <li>Cookbooks</li> <li>Data bags</li> <li>Environments</li> <li>Nodes</li> <li>Roles</li> <li>Sandboxes</li> <li>Search</li> </ul>  <h4 id=\"id28\">status</h4> <p>To view the status for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl status opscode-erchef</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ run: opscode-erchefs: (pid 1234) 123456s; run: log: (pid 5678) 789012s</pre>   <h4 id=\"id29\">start</h4> <p>To start the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start opscode-erchef</pre>   <h4 id=\"id30\">stop</h4> <p>To stop the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop opscode-erchef</pre>   <h4 id=\"id31\">restart</h4> <p>To restart the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restart opscode-erchef</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ok: run: opscode-erchef: (pid 1234) 1234s</pre>   <h4 id=\"id32\">kill</h4> <p>To kill the service (send a <code class=\"docutils literal\">SIGKILL</code> command):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl kill opscode-erchef</pre>   <h4 id=\"id33\">run once</h4> <p>To run the service, but not restart it (if the service fails):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl once opscode-erchef</pre>   <h4 id=\"id34\">tail</h4> <p>To follow the logs for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl tail opscode-erchef</pre>    <h3 id=\"opscode-expander\">opscode-expander</h3> <p>The <strong>opscode-expander</strong> service is used to process data (pulled from the <strong>rabbitmq</strong> service’s message queue) so that it can be properly indexed by the <strong>opscode-solr4</strong> service.</p>  <h4 id=\"id35\">status</h4> <p>To view the status for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl status opscode-expander</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ run: opscode-expander: (pid 1234) 123456s; run: log: (pid 5678) 789012s</pre>   <h4 id=\"id36\">start</h4> <p>To start the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start opscode-expander</pre>   <h4 id=\"id37\">stop</h4> <p>To stop the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop opscode-expander</pre>   <h4 id=\"id38\">restart</h4> <p>To restart the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restart opscode-expander</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ok: run: opscode-expander: (pid 1234) 1234s</pre>   <h4 id=\"id39\">kill</h4> <p>To kill the service (send a <code class=\"docutils literal\">SIGKILL</code> command):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl kill opscode-expander</pre>   <h4 id=\"id40\">run once</h4> <p>To run the service, but not restart it (if the service fails):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl once opscode-expander</pre>   <h4 id=\"id41\">tail</h4> <p>To follow the logs for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl tail opscode-expander</pre>    <h3 id=\"opscode-solr4\">opscode-solr4</h3> <p>The <strong>opscode-solr4</strong> service is used to create the search indexes used for searching objects like nodes, data bags, and cookbooks. (This service ensures timely search results via the Chef server API; data that is used by the Chef platform is stored in PostgreSQL.)</p>  <h4 id=\"id42\">status</h4> <p>To view the status for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl status opscode-solr</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ run: opscode-solr: (pid 1234) 123456s; run: log: (pid 5678) 789012s</pre>   <h4 id=\"id43\">start</h4> <p>To start the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start opscode-solr</pre>   <h4 id=\"id44\">stop</h4> <p>To stop the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop opscode-solr</pre>   <h4 id=\"id45\">restart</h4> <p>To restart the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restart opscode-solr</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ok: run: opscode-solr: (pid 1234) 1234s</pre>   <h4 id=\"id46\">kill</h4> <p>To kill the service (send a <code class=\"docutils literal\">SIGKILL</code> command):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl kill opscode-solr</pre>   <h4 id=\"id47\">run once</h4> <p>To run the service, but not restart it (if the service fails):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl once opscode-solr</pre>   <h4 id=\"id48\">tail</h4> <p>To follow the logs for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl tail opscode-solr</pre>    <h3 id=\"postgresql\">postgresql</h3> <p>The <strong>postgresql</strong> service is used to store node, object, and user data.</p>  <h4 id=\"id49\">status</h4> <p>To view the status for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl status postgresql</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ run: postgresql: (pid 1234) 123456s; run: log: (pid 5678) 789012s</pre>   <h4 id=\"id50\">start</h4> <p>To start the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start postgresql</pre>   <h4 id=\"id51\">stop</h4> <p>To stop the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop postgresql</pre>   <h4 id=\"id52\">restart</h4> <p>To restart the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restart postgresql</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ok: run: postgresql: (pid 1234) 1234s</pre>   <h4 id=\"id53\">kill</h4> <p>To kill the service (send a <code class=\"docutils literal\">SIGKILL</code> command):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl kill postgresql</pre>   <h4 id=\"id54\">run once</h4> <p>To run the service, but not restart it (if the service fails):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl once postgresqls</pre>   <h4 id=\"id55\">tail</h4> <p>To follow the logs for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl tail postgresql</pre>    <h3 id=\"rabbitmq\">rabbitmq</h3> <p>The <strong>rabbitmq</strong> service is used to provide the message queue that is used by the Chef server to get search data to Apache Solr so that it can be indexed for search. When Chef Analytics is confiugred, the <strong>rabbitmq</strong> service is also used to send data from the Chef server to the Chef Analytics server.</p>  <h4 id=\"id56\">status</h4> <p>To view the status for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl status rabbitmq</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ run: rabbitmq: (pid 1234) 123456s; run: log: (pid 5678) 789012s</pre>   <h4 id=\"id57\">start</h4> <p>To start the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start rabbitmq</pre>   <h4 id=\"id58\">stop</h4> <p>To stop the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop rabbitmq</pre>   <h4 id=\"id59\">restart</h4> <p>To restart the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restart rabbitmq</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ok: run: rabbitmq: (pid 1234) 1234s</pre>   <h4 id=\"id60\">kill</h4> <p>To kill the service (send a <code class=\"docutils literal\">SIGKILL</code> command):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl kill rabbitmq</pre>   <h4 id=\"id61\">run once</h4> <p>To run the service, but not restart it (if the service fails):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl once rabbitmq</pre>   <h4 id=\"id62\">tail</h4> <p>To follow the logs for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl tail rabbitmq</pre>    <h3 id=\"redis\">redis</h3> <p>Key-value store used in conjunction with Nginx to route requests and populate request data used by the Chef server.</p>  <h4 id=\"id63\">status</h4> <p>To view the status for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl status redis</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ run: redis: (pid 1234) 123456s; run: log: (pid 5678) 789012s</pre>   <h4 id=\"id64\">start</h4> <p>To start the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start redis</pre>   <h4 id=\"id65\">stop</h4> <p>To stop the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop redis</pre>   <h4 id=\"id66\">restart</h4> <p>To restart the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restart redis</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ok: run: redis: (pid 1234) 1234s</pre>   <h4 id=\"id67\">kill</h4> <p>To kill the service (send a <code class=\"docutils literal\">SIGKILL</code> command):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl kill name_of_service</pre>   <h4 id=\"id68\">run once</h4> <p>To run the service, but not restart it (if the service fails):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl once redis</pre>   <h4 id=\"id69\">tail</h4> <p>To follow the logs for the service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl tail name_of_service</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_services.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_services.html</a>\n  </p>\n</div>\n","server_12-5/server_manage_cookbooks":"<h1 id=\"manage-cookbooks\">Manage Cookbooks</h1> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This topic is about using the Chef management console to manage cookbooks.</p> </div> <p>A cookbook is the fundamental unit of configuration and policy distribution. A cookbook defines a scenario and contains everything that is required to support that scenario:</p> <ul class=\"simple\"> <li>Recipes that specify the resources to use and the order in which they are to be applied</li> <li>Attribute values</li> <li>File distributions</li> <li>Templates</li> <li>Extensions to Chef, such as libraries, definitions, and custom resources</li> </ul>  <h2 id=\"manage\">Manage</h2> <p>Cookbooks can be viewed from the Chef management console web user interface. Cookbooks are managed using knife.</p>  <h3 id=\"view-cookbook-details\">View Cookbook Details</h3> <p>To view cookbook details:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Cookbooks</strong>.</p> </li> <li>\n<p class=\"first\">Select a cookbook.</p> </li> <li>\n<p class=\"first\">Click the <strong>Details</strong> tab:</p> <img alt=\"_images/step_manage_webui_policy_cookbook_view_details.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_cookbook_view_details.png\"> </li> </ol>    <h2 id=\"cookbook-files\">Cookbook Files</h2> <p>A cookbook can contain the following types of files:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">File Type</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Attributes</td> <td>An attribute can be defined in a cookbook (or a recipe) and then used to override the default settings on a node. When a cookbook is loaded during a chef-client run, these attributes are compared to the attributes that are already present on the node. Attributes that are defined in attribute files are first loaded according to cookbook order. For each cookbook, attributes in the <code class=\"docutils literal\">default.rb</code> file are loaded first, and then additional attribute files (if present) are loaded in lexical sort order. When the cookbook attributes take precedence over the default attributes, the chef-client will apply those new settings and values during the chef-client run on the node.</td> </tr> <tr class=\"row-odd\">\n<td>Definitions</td> <td>\n<p class=\"first\">A definition is code that is reused across recipes, similar to a compile-time macro. A definition is created using arbitrary code wrapped around built-in chef-client resources—<strong>file</strong>, <strong>execute</strong>, <strong>template</strong>, and so on—by declaring those resources into the definition as if they were declared in a recipe. A definition is then used in one (or more) recipes as if it were a resource.</p> <p>Though a definition behaves like a resource, some key differences exist. A definition:</p> <ul class=\"simple\"> <li>Is not a resource or a custom resource</li> <li>Is defined from within the <code class=\"docutils literal\">/definitions</code> directory of a cookbook</li> <li>Is loaded before resources during the chef-client run; this ensures the definition is available to all of the resources that may need it</li> <li>May not notify resources in the resource collection because a definition is loaded <strong>before</strong> the resource collection itself is created; however, a resource in a definition <strong>may</strong> notify a resource that exists within the same definition</li> <li>Automatically supports why-run mode, unlike custom resources</li> </ul> <p>Use a defintion when repeating patterns exist across resources and/or when a simple, direct approach is desired. There is no limit to the number of resources that may be included in a definition: use as many built-in chef-client resources as necessary.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Starting with chef-client 12.5, it is recommended to <a class=\"reference external\" href=\"https://docs.chef.io/custom_resources.html\">build custom resources</a> instead of definitions and to <a class=\"reference external\" href=\"https://docs.chef.io/definitions.html\">migrate existing definitions to be custom resources</a>.</p> </div> </td> </tr> <tr class=\"row-even\">\n<td>Files</td> <td>Use the <strong>cookbook_file</strong> resource to transfer files from a sub-directory of <code class=\"docutils literal\">COOKBOOK_NAME/files/</code> to a specified path located on a host that is running the chef-client. The file is selected according to file specificity, which allows different source files to be used based on the hostname, host platform (operating system, distro, or as appropriate), or platform version. Files that are located in the <code class=\"docutils literal\">COOKBOOK_NAME/files/default</code> sub-directory may be used on any platform.</td> </tr> <tr class=\"row-odd\">\n<td>Libraries</td> <td>A library allows arbitrary Ruby code to be included in a cookbook, either as a way of extending the classes that are built-in to the chef-client—<code class=\"docutils literal\">Chef::Recipe</code>, for example—or for implementing entirely new functionality, similar to a mixin in Ruby. A library file is a Ruby file that is located within a cookbook’s <code class=\"docutils literal\">/libraries</code> directory. Because a library is built using Ruby, anything that can be done with Ruby can be done in a library file.</td> </tr> <tr class=\"row-even\">\n<td>Recipes</td> <td>\n<p class=\"first\">A recipe is the most fundamental configuration element within the organization. A recipe:</p> <ul class=\"last simple\"> <li>Is authored using Ruby, which is a programming language designed to read and behave in a predictable manner</li> <li>Is mostly a collection of resources, defined using patterns (resource names, attribute-value pairs, and actions); helper code is added around this using Ruby, when needed</li> <li>Must define everything that is required to configure part of a system</li> <li>Must be stored in a cookbook</li> <li>May be included in a recipe</li> <li>May use the results of a search query and read the contents of a data bag (including an encrypted data bag)</li> <li>May have a dependency on one (or more) recipes</li> <li>May tag a node to facilitate the creation of arbitrary groupings</li> <li>Must be added to a run-list before it can be used by the chef-client</li> <li>Is always executed in the same order as listed in a run-list</li> </ul> </td> </tr> <tr class=\"row-odd\">\n<td>Resources</td> <td>\n<p class=\"first\">A resource is a statement of configuration policy that:</p> <ul class=\"last simple\"> <li>Describes the desired state for a configuration item</li> <li>Declares the steps needed to bring that item to the desired state</li> <li>Specifies a resource type—such as <code class=\"docutils literal\">package</code>, <code class=\"docutils literal\">template</code>, or <code class=\"docutils literal\">service</code>\n</li> <li>Lists additional details (also known as resource properties), as necessary</li> <li>Are grouped into recipes, which describe working configurations</li> </ul> </td> </tr> <tr class=\"row-even\">\n<td>Templates</td> <td>A cookbook template is an Embedded Ruby (ERB) template that is used to dynamically generate static text files. Templates may contain Ruby expressions and statements, and are a great way to manage configuration files. Use the <strong>template</strong> resource to add cookbook templates to recipes; place the corresponding Embedded Ruby (ERB) template file in a cookbook’s <code class=\"docutils literal\">/templates</code> directory.</td> </tr> </tbody> </table> <p>All of the file types that are part of any cookbook uploaded to the Chef server are visible from the Chef management console.</p>  <h3 id=\"download-file\">Download File</h3> <p>To download a file that is located in a cookbook:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Cookbooks</strong>.</p> </li> <li>\n<p class=\"first\">Select the file type: <strong>Attributes</strong>, <strong>Definitions</strong>, <strong>Files</strong>, <strong>Recipes</strong>, <strong>Templates</strong>, or <strong>Root Files</strong>.</p> </li> <li>\n<p class=\"first\">Select a file.</p> </li> <li>\n<p class=\"first\">Click <strong>Download File</strong>:</p> <img alt=\"_images/step_manage_webui_policy_cookbook_download.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_cookbook_download.png\"> </li> <li>\n<p class=\"first\">Specify the location to which the file should be saved.</p> </li> </ol>   <h3 id=\"view-a-file\">View a File</h3> <p>To view a cookbook file:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Cookbooks</strong>.</p> </li> <li>\n<p class=\"first\">Select a cookbook.</p> </li> <li>\n<p class=\"first\">Click the <strong>Content</strong> tab.</p> </li> <li>\n<p class=\"first\">Select the file type: <strong>Attributes</strong>, <strong>Definitions</strong>, <strong>Files</strong>, <strong>Recipes</strong>, <strong>Templates</strong>, or <strong>Root Files</strong>.</p> </li> <li>\n<p class=\"first\">Select a file:</p> <img alt=\"_images/step_manage_webui_policy_cookbook_file_view.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_cookbook_file_view.png\"> </li> </ol>    <h2 id=\"permissions\">Permissions</h2> <p>Permissions are used in the Chef server to define how users and groups can interact with objects on the server. Permissions are configured per-organization.</p> <p>The Chef server includes the following object permissions:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Permission</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><strong>Delete</strong></td> <td>Use the <strong>Delete</strong> permission to define which users and groups may delete an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] delete [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Grant</strong></td> <td>Use the <strong>Grant</strong> permission to define which users and groups may configure permissions on an object. This permission is required for any user who configures permissions using the <strong>Administration</strong> tab in the Chef management console.</td> </tr> <tr class=\"row-even\">\n<td><strong>Read</strong></td> <td>Use the <strong>Read</strong> permission to define which users and groups may view the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] show [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Update</strong></td> <td>Use the <strong>Update</strong> permission to define which users and groups may edit the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] edit [object_name]</code> argument to interact with objects on the Chef server and for any chef-client to save node data to the Chef server at the conclusion of a chef-client run.</td> </tr> </tbody> </table>  <h3 id=\"set\">Set</h3> <p>To set permissions list for a cookbook object:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Cookbooks</strong>.</li> <li>Select a cookbook.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>For each group listed under <strong>Name</strong>, select or de-select the <strong>Read</strong>, <strong>Update</strong>, <strong>Delete</strong>, and <strong>Grant</strong> permissions.</li> </ol>   <h3 id=\"update\">Update</h3> <p>To update the permissions list for a cookbook object:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Cookbooks</strong>.</li> <li>Select a cookbook.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>Click the <strong>+ Add</strong> button and enter the name of the user or group to be added.</li> <li>Select or de-select <strong>Read</strong>, <strong>Update</strong>, <strong>Delete</strong>, and <strong>Grant</strong> to update the permissions list for the user or group.</li> </ol>   <h3 id=\"view\">View</h3> <p>To view permissions for a cookbook object:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Cookbooks</strong>.</li> <li>Select a cookbook.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>Set the appropriate permissions: <strong>Delete</strong>, <strong>Grant</strong>, <strong>Read</strong>, and/or <strong>Update</strong>.</li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_manage_cookbooks.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_manage_cookbooks.html</a>\n  </p>\n</div>\n","server_12-5/install_server_ha_aws":"<h1 id=\"high-availability-aws\">High Availability: AWS</h1> <p>This topic describes how to set up the Chef server for high availability in Amazon Web Services (AWS).</p> <img src=\"https://docs.chef.io/release/server_12-5/_images/chef_server_ha_aws.svg\" width=\"600px\">  <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is a premium feature of Chef. Access to premium features is free (up to 25 nodes) when a premium feature is installed on-premises. For higher node counts, access is <a class=\"reference external\" href=\"https://www.chef.io/pricing/\">available via subscription</a>.</p> </div>  <h2 id=\"prerequisites\">Prerequisites</h2> <p>Before installing the Chef server software, perform the following steps:</p> <ol class=\"arabic simple\"> <li>Use an Amazon Virtual Private Cloud (VPC). Amazon EC2-Classic is not supported.</li> <li>Create appropriate security groups to contain the backend instances. The only requirement for the Chef server is that ICMP is permitted between the two backend instances; Keepalived requires it for communication and heartbeat.</li> <li>Launch two servers, one for the primary backend Chef server and the other for the secondary backend Chef server. Use the same Amazon Machine Images (AMI) so that both backend servers have identical platform and versions. The servers must be in the same availability zones.</li> <li>Create an Amazon Elastic Block Store (EBS) volume to store the Chef server‘s data. It is recommended that you use an EBS Provisioned IOPS volume type, with the maximum IOPS ratio for the size of volume.</li> <li>Choose an IP address for the backend virtual IP (VIP). It must reside in the same network segment as the backend instances and must be <a class=\"reference external\" href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/MultipleIP.html\">assignable as a secondary private IP address</a> to the primary backend Chef server. The IP address is specified in the chef-server.rb file. During installation, the high-availability plugin will automatically assign the VIP to the elastic network interface (ENI) for the primary instance.</li> <li>Create an Identity and Access Management (IAM) user with at least the permissions documented in the reference section. Record this user’s access and secret keys; these will be used in the chef-server.rb configuration file.</li> <li>Enable sticky sessions on the load balancer. Configure all instances of the Chef management console to point to one Redis load balancer instance.</li> </ol>   <h2 id=\"primary-backend\">Primary Backend</h2> <p>Use the following steps to set up the primary backend Chef server:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Create an Amazon Elastic Block Store (EBS) volume and attach it to the primary backend.</p> </li> <li>\n<p class=\"first\">Download the packages from <a class=\"reference external\" href=\"http://downloads.chef.io/chef-server/\">http://downloads.chef.io/chef-server/</a> and <a class=\"reference external\" href=\"http://downloads.chef.io/chef-ha/\">http://downloads.chef.io/chef-ha/</a>.</p> </li> <li>\n<p class=\"first\">Install the <code class=\"docutils literal\">chef-server-core</code> package. For Red Hat and CentOS 6:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh /tmp/chef-server-core-&lt;version&gt;.rpm</pre> <p>For Ubuntu:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -i /tmp/chef-server-core-&lt;version&gt;.deb</pre> <p>After a few minutes, the Chef server will be installed.</p> </li> <li>\n<p class=\"first\">Install <code class=\"docutils literal\">chef-ha</code> package. For Red Hat and CentOS 6:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh /tmp/chef-ha-&lt;version&gt;.rpm</pre> <p>For Ubuntu:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -i /tmp/chef-ha-&lt;version&gt;.deb</pre> </li> <li>\n<p class=\"first\">Create a file named chef-server.rb that is located in the <code class=\"docutils literal\">/etc/opscode/</code> directory. See the chef-server.rb section below for an example of the settings and values that are required. The <code class=\"docutils literal\">ha['ebs_device']</code> setting must specify the actual <code class=\"docutils literal\">/dev</code> device name that is reported by the machine’s kernel, which may not be the same value that is reported by Amazon Web Services (AWS). For example, Amazon Web Services (AWS) may refer to a volume as <code class=\"docutils literal\">/dev/sdf</code> through the management console, but to the Linux kernel on the instance, it may appear as <code class=\"docutils literal\">/dev/xvdf</code>.</p> </li> <li>\n<p class=\"first\">Install logical volume manager (LVM) tools. For Red Hat and CentOS 6:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo yum install lvm2</pre> <p>For Ubuntu:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo apt-get install lvm2</pre> </li> <li>\n<p class=\"first\">Create a physical volume, volume group, and logical volume with the following series of commands. The volume group and logical volume names must be <code class=\"docutils literal\">chef</code> and <code class=\"docutils literal\">data</code>, respectively.</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo pvcreate /dev/xvdf</pre> <p>then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo vgcreate chef /dev/xvdf</pre> <p>then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo lvcreate -l 85%VG -n data chef</pre> </li> <li>\n<p class=\"first\">Format and mount the new volume with the following series of commands:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo mkdir -p /var/opt/opscode/drbd/data</pre> <p>then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo mkfs.ext4 /dev/mapper/chef-data</pre> <p>and then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo mount /dev/mapper/chef-data /var/opt/opscode/drbd/data</pre> </li> <li>\n<p>Reconfigure the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl reconfigure</pre> <p>This will reconfigure the Chef server, start Keepalived, assign the VIP IP address as a secondary address on the elastic network interface (ENI), and then configure the machine as the primary backend server.</p> </li> <li>\n<p class=\"first\">Verify the machine is the primary backend server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl ha-status</pre> <p>This should display a screen of output indicating that the server is <code class=\"docutils literal\">PRIMARY</code> and that all services are running.</p> <p>Additionally, you may run the following command to verify that the VIP IP address is configured on the Ethernet interface:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ip addr list dev eth0</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Do not use the <code class=\"docutils literal\">ifconfig</code> command as it will not show all aliases.</p> </div> </li> </ol>   <h2 id=\"chef-server-rb\">chef-server.rb</h2> <p>Each Chef server in a high availabilty configuration must have an identical chef-server.rb file that is located in the <code class=\"docutils literal\">/etc/opscode/</code> directory on each server. This file describes the topology of the high availability configuration. On the primary backend server, create a file named chef-server.rb and save it in the <code class=\"docutils literal\">/etc/opscode/</code> directory.</p> <p>Add the following settings to the chef-server.rb file:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Define the topology type:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">topology \"ha\"</pre> </li> <li>\n<p class=\"first\">Define the primary backend server:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">server \"FQDN\",\n  :ipaddress =&gt; \"IP_ADDRESS\",\n  :role =&gt; \"backend\",\n  :bootstrap =&gt; true,\n  :cluster_ipaddress =&gt; \"CLUSTER_IPADDRESS\"</pre> <p>Replace <code class=\"docutils literal\">FQDN</code> with the FQDN of the server and <code class=\"docutils literal\">IP_ADDRESS</code> with the IP address of the server. The role is a backend server is <code class=\"docutils literal\">\"backend\"</code>. If the backend server is used to bootstrap the Chef server installation, replace <code class=\"docutils literal\">CLUSTER_IPADDRESS</code> with the IP address of the interface that is used for cluster communications. For example, the same IP address that is used by Keepalived and DRBD. If the Chef server is not used to bootstrap the Chef server installation, exclude the <code class=\"docutils literal\">:cluster_ipaddress</code> entry.</p> </li> <li>\n<p class=\"first\">Define the secondary backend server:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">server \"FQDN\",\n  :ipaddress =&gt; \"IPADDRESS\",\n  :role =&gt; \"backend\",\n  :cluster_ipaddress =&gt; \"CLUSTER_IPADDRESS\"</pre> <p>Replace <code class=\"docutils literal\">FQDN</code> with the FQDN of the server, and <code class=\"docutils literal\">IPADDRESS</code> with the IP address of the server. Replace <code class=\"docutils literal\">CLUSTER_IPADDRESS</code> with the IP address of the server’s interface assigned for cluster communications. If no such interface is configured, exclude the <code class=\"docutils literal\">cluster_ipaddress</code> entry.</p> </li> <li>\n<p class=\"first\">Define the backend virtual IP address:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">backend_vip \"FQDN\",\n  :ipaddress =&gt; \"IP_ADDRESS\",\n  :device =&gt; \"eth0\",</pre> <p>Replace <code class=\"docutils literal\">FQDN</code> with the FQDN of the server. Replace <code class=\"docutils literal\">IP_ADDRESS</code> with the virtual IP address of the server. The <code class=\"docutils literal\">:device</code> parameter should be the ethernet interface to which the floater virtual IP address will bind. This is typically the public interface of the server.</p> </li> <li>\n<p class=\"first\">Define each frontend server:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">server \"FQDN\",\n  :ipaddress =&gt; \"IP_ADDRESS\",\n  :role =&gt; \"frontend\"</pre> <p>Replace <code class=\"docutils literal\">FQDN</code> with the FQDN of the frontend server. Replace <code class=\"docutils literal\">IP_ADDRESS</code> with the IP address of the frontend server. Set <code class=\"docutils literal\">:role</code> to <code class=\"docutils literal\">\"frontend\"</code>.</p> <p>Add separate entry in the chef-server.rb file for each frontend server.</p> </li> <li>\n<p class=\"first\">Define the API FQDN:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">api_fqdn \"FQDN\"</pre> <p>Replace <code class=\"docutils literal\">FQDN</code> with the FQDN of the load balanced virtual IP address, which should be equal to the FQDN for the service URI that is used by the Chef server.</p> </li> <li>\n<p>Reconfigure the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl reconfigure</pre> </li> </ol>   <h2 id=\"secondary-backend\">Secondary Backend</h2> <p>Use the following steps to set up the secondary backend Chef server:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Install the <code class=\"docutils literal\">chef-server-core</code> package. For Red Hat and CentOS 6:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh /tmp/chef-server-core-&lt;version&gt;.rpm</pre> <p>For Ubuntu:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -i /tmp/chef-server-core-&lt;version&gt;.deb</pre> <p>After a few minutes, the Chef server will be installed.</p> </li> <li>\n<p class=\"first\">Install <code class=\"docutils literal\">chef-ha</code> package. For Red Hat and CentOS 6:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh /tmp/chef-ha-&lt;version&gt;.rpm</pre> <p>For Ubuntu:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -i /tmp/chef-ha-&lt;version&gt;.deb</pre> </li> <li>\n<p class=\"first\">Install logical volume manager (LVM) tools. For Red Hat and CentOS 6:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo yum install lvm2</pre> <p>For Ubuntu:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo apt-get install lvm2</pre> </li> <li>\n<p class=\"first\">Create the <code class=\"docutils literal\">/etc/opscode/</code> directory, and then copy the contents of the entire <code class=\"docutils literal\">/etc/opscode</code> directory from the primary server, including all certificates and the chef-server.rb.</p> </li> <li>\n<p>Reconfigure the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl reconfigure</pre> <p>This will reconfigure the Chef server, start Keepalived, and configure it as the secondary backend server.</p> </li> <li>\n<p class=\"first\">Verify the secondary backend server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl ha-status</pre> <p>This should indicate that the server is <code class=\"docutils literal\">BACKUP</code>.</p> </li> </ol>   <h2 id=\"verify-failover\">Verify Failover</h2> <p>To verify that failover is working, stop Keepalived on the primary server.</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">To watch the failover occur as it happens, run the following command in terminal windows on both the primary and secondary backend servers prior to stopping Keepalived:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ watch -n1 sudo chef-server-ctl ha-status</pre> <p>in terminal windows on both the primary and secondary servers prior to stopping Keepalived.</p> </li> <li>\n<p class=\"first\">Stop Keepalived on the primary backend server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl stop keepalived</pre> <p>A cluster failover should occur.</p> </li> <li>\n<p class=\"first\">After a successful failover, restart Keepalived on the primary backend server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl start keepalived</pre> <p>The primary has now become the secondary, and vice-versa. If you wish to fail back to the original primary, repeat these using the new primary.</p> </li> </ol>   <h2 id=\"frontend-installation\">Frontend Installation</h2> <p>Use the following steps to set up each frontend Chef server:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Install the <code class=\"docutils literal\">chef-server-core</code> package. For Red Hat and CentOS 6:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh /tmp/chef-server-core-&lt;version&gt;.rpm</pre> <p>For Ubuntu:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -i /tmp/chef-server-core-&lt;version&gt;.deb</pre> <p>After a few minutes, the Chef server will be installed. The Chef high availability package is <strong>not</strong> required on front end machines.</p> </li> <li>\n<p class=\"first\">Create the <code class=\"docutils literal\">/etc/opscode/</code> directory, and then copy the entire contents of the <code class=\"docutils literal\">/etc/opscode</code> directory from the primary backend server, including all certificates and the chef-server.rb file.</p> </li> <li>\n<p>Reconfigure the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl start</pre> </li> <li>\n<p>Run the following command to create an administrator:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-create USER_NAME FIRST_NAME LAST_NAME EMAIL 'PASSWORD' --filename FILE_NAME</pre> <p>An RSA private key is generated automatically. This is the user’s private key and should be saved to a safe location. The <code class=\"docutils literal\">--filename</code> option will save the RSA private key to a specified path.</p> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-create stevedanno Steve Danno steved@chef.io 'abc123' --filename /path/to/stevedanno.pem</pre> </li> <li>\n<p>Run the following command to create an organization:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-create short_name 'full_organization_name' --association_user user_name --filename ORGANIZATION-validator.pem</pre> <p>The name must begin with a lower-case letter or digit, may only contain lower-case letters, digits, hyphens, and underscores, and must be between 1 and 255 characters. For example: <code class=\"docutils literal\">4thcoffee</code>.</p> <p>The full name must begin with a non-white space character and must be between 1 and 1023 characters. For example: <code class=\"docutils literal\">'Fourth Coffee, Inc.'</code>.</p> <p>The <code class=\"docutils literal\">--association_user</code> option will associate the <code class=\"docutils literal\">user_name</code> with the <code class=\"docutils literal\">admins</code> security group on the Chef server.</p> <p>An RSA private key is generated automatically. This is the chef-validator key and should be saved to a safe location. The <code class=\"docutils literal\">--filename</code> option will save the RSA private key to a specified path.</p> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-create 4thcoffee 'Fourth Coffee, Inc.' --association_user stevedanno --filename /path/to/4thcoffee-validator.pem</pre> </li> <li>\n<p>Reconfigure the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl reconfigure</pre> </li> </ol>   <h2 id=\"enable-features\">Enable Features</h2> <p>Enable additional features of the Chef server! The packages may be downloaded directly as part of the installation process or they may be first downloaded to a local directory, and then installed.</p> <p><strong>Use Downloads</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are not behind a firewall (and have connectivity to <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a>), these packages can be installed as described below.</p> <table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"80%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Command</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Chef Manage</td> <td>\n<p class=\"first\">Use Chef management console to manage data bags, attributes, run-lists, roles, environments, and cookbooks from a web user interface.</p> <p>On each front end server in the Chef server configuration, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-manage</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-manage-ctl reconfigure</pre> <p class=\"last\">This updates the Chef server and creates the <code class=\"docutils literal\">/etc/opscode-manage/secrets.rb</code> file. When running the Chef management console 1.11 (or higher), copy the <code class=\"docutils literal\">secrets.rb</code> file in the <code class=\"docutils literal\">/etc/opscode-manage</code> directory on one of the frontend servers to the same directory on each of the other frontend servers, and then rerun <code class=\"docutils literal\">chef-manage-ctl reconfigure</code> so the copied <code class=\"docutils literal\">/etc/opscode-manage/secrets.rb</code> file gets used correctly.</p> </td> </tr> <tr class=\"row-odd\">\n<td>Chef Replication</td> <td>\n<p class=\"first\">Use Chef replication to asynchronously distribute cookbook, environment, role, and data bag data from a single, primary Chef server to one (or more) replicas of that Chef server.</p> <p>On all servers in the Chef server configuration, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-sync</pre> <p>On the primary Chef server, create the chef-sync.rb file in the <code class=\"docutils literal\">/etc/chef-sync/</code> directory, and then add the following setting:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">role :master</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ chef-sync-ctl reconfigure</pre> </td> </tr> </tbody> </table> <p><strong>Use Local Packages</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are behind a firewall (and may not have connectivity to packages.chef.io), these packages can be downloaded from <a class=\"reference external\" href=\"https://downloads.chef.io/chef-manage/\">https://downloads.chef.io/chef-manage/</a>, and then installed manually. First download the package that is appropriate for the platform, save it to a local path, and then run the <code class=\"docutils literal\">install</code> command using the <code class=\"docutils literal\">--path</code> option to specify the directory in which the package is located:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install PACKAGE_NAME --path /path/to/package/directory</pre> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install chef-manage --path /root/packages</pre> <p>The <code class=\"docutils literal\">chef-server-ctl</code> command will install the first <code class=\"docutils literal\">chef-manage</code> package found in the <code class=\"docutils literal\">/root/packages</code> directory.</p> <p><strong>Install Reporting</strong></p> <p>To set up the Reporting server:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Install the package on each frontend and backend Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install opscode-reporting</pre> </li> <li>\n<p class=\"first\">Reconfigure the Chef server on the backend primary server (bootstrap):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Reconfigure the Reporting server on the backend primary server (bootstrap):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-reporting-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Copy the entire <code class=\"docutils literal\">/etc/opscode-reporting</code> directory from the backend primary server to all frontend and backend servers. For example, from each server run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ scp -r &lt;Bootstrap server IP&gt;:/etc/opscode-reporting /etc</pre> <p>or from the backend primary server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ scp -r /etc/opscode-reporting &lt;each servers IP&gt;:/etc</pre> </li> <li>\n<p class=\"first\">Reconfigure any Chef server on which Reporting services have been installed:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Reconfigure Reporting services on each server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-reporting-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Verify the installation:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-reporting-ctl test</pre> </li> </ol> <p><strong>Install Push Jobs</strong></p> <p>To set up the Chef push jobs server for a high availability configuration:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Install the package on all servers that are running the Chef server. For example on Ubuntu:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -i opscode-push-jobs-server_&lt;package&gt;.ubuntu.10.04_amd64.deb</pre> </li> <li>\n<p class=\"first\">Reconfigure the primary backend Chef push jobs server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-push-jobs-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Copy the entire <code class=\"docutils literal\">/etc/opscode-push-jobs-server</code> directory from the backend primary to all frontend and backend servers. For example, from each server run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ scp -r &lt;Bootstrap server IP&gt;:/etc/opscode-push-jobs-server /etc</pre> <p>or from the backend primary server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ scp -r /etc/opscode-push-jobs-server &lt;each servers IP&gt;:/etc</pre> </li> <li>\n<p class=\"first\">TCP protocol ports 10000 and 10003 must be open. These are the heartbeat and command ports respectively. They allow the Chef push jobs server to communicate with the Chef push jobs clients. In a configuration with both frontend and backend servers, these ports only need to be open on the backend servers. The Chef push jobs server waits for connections from the Chef push jobs client (and never makes a connection to a Chef push jobs client).</p> </li> <li>\n<p class=\"first\">Reconfigure the remaining Chef push jobs servers:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-push-jobs-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Run the following command on each of the backend servers:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> <p>This ensures that the Keepalived scripts are regenerated so they are aware of Chef push jobs.</p> </li> <li>\n<p class=\"first\">Restart all servers on which Chef push jobs will run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restart opscode-pushy-server</pre> </li> <li>\n<p class=\"first\">Verify the installation:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-push-jobs-server-ctl test</pre> </li> </ol>   <h2 id=\"reference\">Reference</h2> <p>The following sections show the Chef high availability settings as they appear in a chef-server.rb file and required permissions of the user in Identity and Access Management (IAM).</p>  <h3 id=\"id1\">chef-server.rb</h3> <p>The following example shows a chef-server.rb file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">topology \"ha\"\nha['provider'] = 'aws'\nha['aws_access_key_id'] = '[DELETED]'\nha['aws_secret_access_key'] = '[DELETED]'\nha['ebs_volume_id'] = 'vol-xxxxx'\nha['ebs_device'] = '/dev/xvdf'\n\nserver 'ip-172-31-24-97.us-west-1.compute.internal',\n  :ipaddress =&gt; '172.31.24.97',\n  :role =&gt; 'backend',\n  :bootstrap =&gt; true\n\nserver 'ip-172-31-24-98.us-west-1.compute.internal',\n  :ipaddress =&gt; '172.31.24.98',\n  :role =&gt; 'backend'\n\nbackend_vip 'ip-172-31-24-180.us-west-1.compute.internal',\n  :ipaddress =&gt; '172.31.24.180',\n  :device =&gt; 'eth0',\n  :heartbeat_device =&gt; 'eth0'\n\nserver 'ip-172-31-30-47.us-west-1.compute.internal',\n  :ipaddress =&gt; '172.31.30.47',\n  :role =&gt; 'frontend'\n\napi_fqdn 'ec2-54-183-175-188.us-west-1.compute.amazonaws.com'</pre>   <h3 id=\"amazon-iam\">Identity and Access Management (IAM)</h3> <p>The following example shows Identity and Access Management (IAM) access management settings that are required for Chef high availability:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeInstances\",\n        \"ec2:DescribeVolumes\",\n        \"ec2:AttachVolume\",\n        \"ec2:DetachVolume\",\n        \"ec2:AssignPrivateIpAddresses\"\n      ],\n      \"Resource\": [\n        \"*\"\n      ]\n    }\n  ]\n}</pre> <p>It is possible to further restrict access using a more sophisticated policy document. For example, administrators may choose to permit the Identity and Access Management (IAM) user only to attach/detach the volume ID associated with the Chef server data volume, and not all volumes.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/install_server_ha_aws.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/install_server_ha_aws.html</a>\n  </p>\n</div>\n","server_12-5/server_firewalls_and_ports":"<h1 id=\"firewalls-and-ports\">Firewalls and Ports</h1> <p>All of the ports used by the Chef server are TCP ports. Refer to the operating system’s manual or site systems administrators for instructions on how to enable changes to ports, if necessary.</p> <p>All services must be listening on the appropriate ports. Most monitoring systems provide a means of testing whether a given port is accepting connections and service-specific tools may also be available. In addition, the generic system tool Telnet can also be used to initiate the connection:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ telnet HOST_NAME PORT</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">An “external” port is external from the perspective of a workstation (such as knife), a machine (the chef-client), or any other user that accesses the Chef server via the Chef server API.</p> </div>  <h2 id=\"standalone\">Standalone</h2> <p>The following sections describe the ports that are required by the Chef server in a standalone configuration:</p> <img alt=\"_images/chef_server_ports_standalone.png\" src=\"https://docs.chef.io/release/server_12-5/_images/chef_server_ports_standalone.png\"> <p>A single loopback interface should be configured using the <code class=\"docutils literal\">127.0.0.1</code> address. This ensures that all of the services are available to the Chef server, in the event that the Chef server attempts to contact itself from within a front or back end machine. All ports should be accessible through the loopback interface of their respective hosts.</p> <p>For a standalone installation, ensure that ports marked as external (marked as <code class=\"docutils literal\">yes</code> in the <strong>External</strong> column) are open and accessible via any firewalls that are in use:</p> <table class=\"docutils\"> <colgroup> <col width=\"11%\"> <col width=\"78%\"> <col width=\"11%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Port</th> <th class=\"head\">Service Name, Description</th> <th class=\"head\">External</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>4321</td> <td>\n<p class=\"first\"><strong>bookshelf</strong></p> <p class=\"last\">The <strong>bookshelf</strong> service is an Amazon Simple Storage Service (S3)-compatible service that is used to store cookbooks, including all of the files—recipes, templates, and so on—that are associated with each cookbook.</p> </td> <td>no</td> </tr> <tr class=\"row-odd\">\n<td>80, 443, 9683</td> <td>\n<p class=\"first\"><strong>nginx</strong></p> <p>The <strong>nginx</strong> service is used to manage traffic to the Chef server, including virtual hosts for internal and external API request/response routing, external add-on request routing, and routing between front- and back-end components.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Port 9683 is used to internally load balance the <strong>oc_bifrost</strong> service.</p> </div> </td> <td>yes</td> </tr> <tr class=\"row-even\">\n<td>9463</td> <td>\n<p class=\"first\"><strong>oc_bifrost</strong></p> <p class=\"last\">The <strong>oc_bifrost</strong> service ensures that every request to view or manage objects stored on the Chef server is authorized.</p> </td> <td> </td> </tr> <tr class=\"row-odd\">\n<td>9090</td> <td>\n<p class=\"first\"><strong>oc-id</strong></p> <p class=\"last\">The <strong>oc-id</strong> service enables OAuth 2.0 authentication to the Chef server by external applications, including Chef Supermarket and Chef Analytics. OAuth 2.0 uses token-based authentication, where external applications use tokens that are issued by the <strong>oc-id</strong> provider. No special credentials—<code class=\"docutils literal\">webui_priv.pem</code> or privileged keys—are stored on the external application.</p> </td> <td> </td> </tr> <tr class=\"row-even\">\n<td>8000</td> <td>\n<p class=\"first\"><strong>opscode-erchef</strong></p> <p>The <strong>opscode-erchef</strong> service is an Erlang-based service that is used to handle Chef server API requests to the following areas within the Chef server:</p> <ul class=\"last simple\"> <li>Cookbooks</li> <li>Data bags</li> <li>Environments</li> <li>Nodes</li> <li>Roles</li> <li>Sandboxes</li> <li>Search</li> </ul> </td> <td> </td> </tr> <tr class=\"row-odd\">\n<td>8983</td> <td>\n<p class=\"first\"><strong>opscode-solr4</strong></p> <p class=\"last\">The <strong>opscode-solr4</strong> service is used to create the search indexes used for searching objects like nodes, data bags, and cookbooks. (This service ensures timely search results via the Chef server API; data that is used by the Chef platform is stored in PostgreSQL.)</p> </td> <td> </td> </tr> <tr class=\"row-even\">\n<td>5432</td> <td>\n<p class=\"first\"><strong>postgresql</strong></p> <p class=\"last\">The <strong>postgresql</strong> service is used to store node, object, and user data.</p> </td> <td> </td> </tr> <tr class=\"row-odd\">\n<td>5672</td> <td>\n<p class=\"first\"><strong>rabbitmq</strong></p> <p class=\"last\">The <strong>rabbitmq</strong> service is used to provide the message queue that is used by the Chef server to get search data to Apache Solr so that it can be indexed for search. When Chef Analytics is confiugred, the <strong>rabbitmq</strong> service is also used to send data from the Chef server to the Chef Analytics server.</p> </td> <td> </td> </tr> <tr class=\"row-even\">\n<td>16379</td> <td>\n<p class=\"first\"><strong>redis_lb</strong></p> <p class=\"last\">Key-value store used in conjunction with Nginx to route requests and populate request data used by the Chef server.</p> </td> <td> </td> </tr> </tbody> </table>   <h2 id=\"high-availability\">High Availability</h2> <p>The following sections describe the ports that are required by the Chef server in a high availability configuration that is running DRBD and Keepalived to manage the active/passive backend servers:</p> <img alt=\"_images/chef_server_ports_ha_drbd.png\" src=\"https://docs.chef.io/release/server_12-5/_images/chef_server_ports_ha_drbd.png\"> <p>A single loopback interface should be configured using the <code class=\"docutils literal\">127.0.0.1</code> address. This ensures that all of the services are available to the Chef server, in the event that the Chef server attempts to contact itself from within a front or back end machine. All ports should be accessible through the loopback interface of their respective hosts.</p>  <h3 id=\"front-end\">Front End</h3> <p>For front-end servers, ensure that ports marked as external (marked as <code class=\"docutils literal\">yes</code> in the <strong>External</strong> column) are open and accessible via any firewalls that are in use:</p> <table class=\"docutils\"> <colgroup> <col width=\"11%\"> <col width=\"78%\"> <col width=\"11%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Port</th> <th class=\"head\">Service Name, Description</th> <th class=\"head\">External</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>80, 443, 9683</td> <td>\n<p class=\"first\"><strong>nginx</strong></p> <p>The <strong>nginx</strong> service is used to manage traffic to the Chef server, including virtual hosts for internal and external API request/response routing, external add-on request routing, and routing between front- and back-end components.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Port 9683 is used to internally load balance the <strong>oc_bifrost</strong> service.</p> </div> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>9463</td> <td>\n<p class=\"first\"><strong>oc_bifrost</strong></p> <p class=\"last\">The <strong>oc_bifrost</strong> service ensures that every request to view or manage objects stored on the Chef server is authorized.</p> </td> <td> </td> </tr> <tr class=\"row-even\">\n<td>9090</td> <td>\n<p class=\"first\"><strong>oc-id</strong></p> <p class=\"last\">The <strong>oc-id</strong> service enables OAuth 2.0 authentication to the Chef server by external applications, including Chef Supermarket and Chef Analytics. OAuth 2.0 uses token-based authentication, where external applications use tokens that are issued by the <strong>oc-id</strong> provider. No special credentials—<code class=\"docutils literal\">webui_priv.pem</code> or privileged keys—are stored on the external application.</p> </td> <td> </td> </tr> <tr class=\"row-odd\">\n<td>8000</td> <td>\n<p class=\"first\"><strong>opscode-erchef</strong></p> <p>The <strong>opscode-erchef</strong> service is an Erlang-based service that is used to handle Chef server API requests to the following areas within the Chef server:</p> <ul class=\"last simple\"> <li>Cookbooks</li> <li>Data bags</li> <li>Environments</li> <li>Nodes</li> <li>Roles</li> <li>Sandboxes</li> <li>Search</li> </ul> </td> <td> </td> </tr> </tbody> </table>   <h3 id=\"back-end\">Back End</h3> <p>For back-end servers, ensure that ports marked as external (marked as <code class=\"docutils literal\">yes</code> in the <strong>External</strong> column) are open and accessible via any firewalls that are in use:</p> <table class=\"docutils\"> <colgroup> <col width=\"11%\"> <col width=\"78%\"> <col width=\"11%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Port</th> <th class=\"head\">Service Name, Description</th> <th class=\"head\">External</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>4321</td> <td>\n<p class=\"first\"><strong>bookshelf</strong></p> <p class=\"last\">The <strong>bookshelf</strong> service is an Amazon Simple Storage Service (S3)-compatible service that is used to store cookbooks, including all of the files—recipes, templates, and so on—that are associated with each cookbook.</p> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>112</td> <td>\n<p class=\"first\"><strong>keepalived</strong></p> <p class=\"last\">The <strong>keepalived</strong> service manages the virtual IP address (VIP) between the backend machines in a high availability topology that uses DRBD.</p> </td> <td>yes</td> </tr> <tr class=\"row-even\">\n<td>80, 443, 9683</td> <td>\n<p class=\"first\"><strong>nginx</strong></p> <p>The <strong>nginx</strong> service is used to manage traffic to the Chef server, including virtual hosts for internal and external API request/response routing, external add-on request routing, and routing between front- and back-end components.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Port 9683 is used to internally load balance the <strong>oc_bifrost</strong> service.</p> </div> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>9683</td> <td>\n<p class=\"first\"><strong>oc_bifrost</strong></p> <p class=\"last\">The <strong>oc_bifrost</strong> service ensures that every request to view or manage objects stored on the Chef server is authorized.</p> </td> <td>yes</td> </tr> <tr class=\"row-even\">\n<td>9090</td> <td>\n<p class=\"first\"><strong>oc-id</strong></p> <p class=\"last\">The <strong>oc-id</strong> service enables OAuth 2.0 authentication to the Chef server by external applications, including Chef Supermarket and Chef Analytics. OAuth 2.0 uses token-based authentication, where external applications use tokens that are issued by the <strong>oc-id</strong> provider. No special credentials—<code class=\"docutils literal\">webui_priv.pem</code> or privileged keys—are stored on the external application.</p> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>8000</td> <td>\n<p class=\"first\"><strong>opscode-erchef</strong></p> <p>The <strong>opscode-erchef</strong> service is an Erlang-based service that is used to handle Chef server API requests to the following areas within the Chef server:</p> <ul class=\"last simple\"> <li>Cookbooks</li> <li>Data bags</li> <li>Environments</li> <li>Nodes</li> <li>Roles</li> <li>Sandboxes</li> <li>Search</li> </ul> </td> <td>yes</td> </tr> <tr class=\"row-even\">\n<td> </td> <td>\n<p class=\"first\"><strong>opscode-expander</strong></p> <p class=\"last\">The <strong>opscode-expander</strong> service is used to process data (pulled from the <strong>rabbitmq</strong> service’s message queue) so that it can be properly indexed by the <strong>opscode-solr4</strong> service.</p> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>8983</td> <td>\n<p class=\"first\"><strong>opscode-solr4</strong></p> <p class=\"last\">The <strong>opscode-solr4</strong> service is used to create the search indexes used for searching objects like nodes, data bags, and cookbooks. (This service ensures timely search results via the Chef server API; data that is used by the Chef platform is stored in PostgreSQL.)</p> </td> <td> </td> </tr> <tr class=\"row-even\">\n<td>5432</td> <td>\n<p class=\"first\"><strong>postgresql</strong></p> <p class=\"last\">The <strong>postgresql</strong> service is used to store node, object, and user data.</p> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>5672, 15672</td> <td>\n<p class=\"first\"><strong>rabbitmq</strong></p> <p class=\"last\">The <strong>rabbitmq</strong> service is used to provide the message queue that is used by the Chef server to get search data to Apache Solr so that it can be indexed for search. When Chef Analytics is confiugred, the <strong>rabbitmq</strong> service is also used to send data from the Chef server to the Chef Analytics server.</p> </td> <td>yes</td> </tr> <tr class=\"row-even\">\n<td>16379</td> <td>\n<p class=\"first\"><strong>redis_lb</strong></p> <p class=\"last\">Key-value store used in conjunction with Nginx to route requests and populate request data used by the Chef server.</p> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>7788-7799</td> <td>DRBD This port range must be open between all back end servers in a high availability configuration that uses DRBD.</td> <td> </td> </tr> </tbody> </table>    <h2 id=\"tiered\">Tiered</h2> <p>The following sections describe the ports that are required by the Chef server in a tiered configuration:</p> <img alt=\"_images/chef_server_ports_tiered.png\" src=\"https://docs.chef.io/release/server_12-5/_images/chef_server_ports_tiered.png\"> <p>A single loopback interface should be configured using the <code class=\"docutils literal\">127.0.0.1</code> address. This ensures that all of the services are available to the Chef server, in the event that the Chef server attempts to contact itself from within a front or back end machine. All ports should be accessible through the loopback interface of their respective hosts.</p>  <h3 id=\"id1\">Front End</h3> <p>For front-end servers, ensure that ports marked as external (marked as <code class=\"docutils literal\">yes</code> in the <strong>External</strong> column) are open and accessible via any firewalls that are in use:</p> <table class=\"docutils\"> <colgroup> <col width=\"11%\"> <col width=\"78%\"> <col width=\"11%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Port</th> <th class=\"head\">Service Name, Description</th> <th class=\"head\">External</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>80, 443, 9683</td> <td>\n<p class=\"first\"><strong>nginx</strong></p> <p>The <strong>nginx</strong> service is used to manage traffic to the Chef server, including virtual hosts for internal and external API request/response routing, external add-on request routing, and routing between front- and back-end components.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Port 9683 is used to internally load balance the <strong>oc_bifrost</strong> service.</p> </div> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>9463</td> <td>\n<p class=\"first\"><strong>oc_bifrost</strong></p> <p class=\"last\">The <strong>oc_bifrost</strong> service ensures that every request to view or manage objects stored on the Chef server is authorized.</p> </td> <td> </td> </tr> <tr class=\"row-even\">\n<td>9090</td> <td>\n<p class=\"first\"><strong>oc-id</strong></p> <p class=\"last\">The <strong>oc-id</strong> service enables OAuth 2.0 authentication to the Chef server by external applications, including Chef Supermarket and Chef Analytics. OAuth 2.0 uses token-based authentication, where external applications use tokens that are issued by the <strong>oc-id</strong> provider. No special credentials—<code class=\"docutils literal\">webui_priv.pem</code> or privileged keys—are stored on the external application.</p> </td> <td> </td> </tr> <tr class=\"row-odd\">\n<td>8000</td> <td>\n<p class=\"first\"><strong>opscode-erchef</strong></p> <p>The <strong>opscode-erchef</strong> service is an Erlang-based service that is used to handle Chef server API requests to the following areas within the Chef server:</p> <ul class=\"last simple\"> <li>Cookbooks</li> <li>Data bags</li> <li>Environments</li> <li>Nodes</li> <li>Roles</li> <li>Sandboxes</li> <li>Search</li> </ul> </td> <td> </td> </tr> </tbody> </table>   <h3 id=\"id2\">Back End</h3> <p>For back-end servers in a tiered Chef server installation, ensure that ports marked as external (marked as <code class=\"docutils literal\">yes</code> in the <strong>External</strong> column) are open and accessible via any firewalls that are in use:</p> <table class=\"docutils\"> <colgroup> <col width=\"11%\"> <col width=\"78%\"> <col width=\"11%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Port</th> <th class=\"head\">Service Name, Description</th> <th class=\"head\">External</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>80, 443, 9683</td> <td>\n<p class=\"first\"><strong>nginx</strong></p> <p>The <strong>nginx</strong> service is used to manage traffic to the Chef server, including virtual hosts for internal and external API request/response routing, external add-on request routing, and routing between front- and back-end components.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Port 9683 is used to internally load balance the <strong>oc_bifrost</strong> service.</p> </div> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>9463</td> <td>\n<p class=\"first\"><strong>oc_bifrost</strong></p> <p class=\"last\">The <strong>oc_bifrost</strong> service ensures that every request to view or manage objects stored on the Chef server is authorized.</p> </td> <td> </td> </tr> <tr class=\"row-even\">\n<td>8983</td> <td>\n<p class=\"first\"><strong>opscode-solr4</strong></p> <p class=\"last\">The <strong>opscode-solr4</strong> service is used to create the search indexes used for searching objects like nodes, data bags, and cookbooks. (This service ensures timely search results via the Chef server API; data that is used by the Chef platform is stored in PostgreSQL.)</p> </td> <td> </td> </tr> <tr class=\"row-odd\">\n<td>5432</td> <td>\n<p class=\"first\"><strong>postgresql</strong></p> <p class=\"last\">The <strong>postgresql</strong> service is used to store node, object, and user data.</p> </td> <td> </td> </tr> <tr class=\"row-even\">\n<td>5672, 15672</td> <td>\n<p class=\"first\"><strong>rabbitmq</strong></p> <p class=\"last\">The <strong>rabbitmq</strong> service is used to provide the message queue that is used by the Chef server to get search data to Apache Solr so that it can be indexed for search. When Chef Analytics is confiugred, the <strong>rabbitmq</strong> service is also used to send data from the Chef server to the Chef Analytics server.</p> </td> <td> </td> </tr> <tr class=\"row-odd\">\n<td>16379</td> <td>\n<p class=\"first\"><strong>redis_lb</strong></p> <p class=\"last\">Key-value store used in conjunction with Nginx to route requests and populate request data used by the Chef server.</p> </td> <td> </td> </tr> <tr class=\"row-even\">\n<td>4321</td> <td>\n<p class=\"first\"><strong>bookshelf</strong></p> <p class=\"last\">The <strong>bookshelf</strong> service is an Amazon Simple Storage Service (S3)-compatible service that is used to store cookbooks, including all of the files—recipes, templates, and so on—that are associated with each cookbook.</p> </td> <td> </td> </tr> <tr class=\"row-odd\">\n<td>8000</td> <td>\n<p class=\"first\"><strong>opscode-erchef</strong></p> <p>The <strong>opscode-erchef</strong> service is an Erlang-based service that is used to handle Chef server API requests to the following areas within the Chef server:</p> <ul class=\"last simple\"> <li>Cookbooks</li> <li>Data bags</li> <li>Environments</li> <li>Nodes</li> <li>Roles</li> <li>Sandboxes</li> <li>Search</li> </ul> </td> <td> </td> </tr> </tbody> </table>    <h2 id=\"chef-analytics-title\">Chef Analytics</h2> <p>The following sections describe the ports that are required by Chef Analytics:</p> <p>For communication between Chef Analytics and the Chef server, ensure that ports marked as external (<code class=\"docutils literal\">yes</code>) are open and accessible via any firewalls that are in use:</p> <table class=\"docutils\"> <colgroup> <col width=\"11%\"> <col width=\"78%\"> <col width=\"11%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Port</th> <th class=\"head\">Service</th> <th class=\"head\">External</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>80</td> <td><strong>nginx</strong></td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>443</td> <td><strong>nginx</strong></td> <td>yes</td> </tr> <tr class=\"row-even\">\n<td>5672</td> <td>\n<p class=\"first\"><strong>rabbitmq</strong></p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The RabbitMQ port on the Chef server must alow inbound traffic from Chef Analytics.</p> </div> </td> <td>no</td> </tr> <tr class=\"row-odd\">\n<td>10011</td> <td>actions</td> <td>no</td> </tr> <tr class=\"row-even\">\n<td>10012</td> <td>actions_messages</td> <td>no</td> </tr> <tr class=\"row-odd\">\n<td>10013</td> <td>notifier_config</td> <td>no</td> </tr> </tbody> </table>   <h2 id=\"push-jobs-title\">Chef Push Jobs</h2> <p>TCP protocol ports 10000 is the default heartbeat port. It may be configured in the Chef push jobs <a class=\"reference external\" href=\"https://docs.chef.io/config_rb_push_jobs_server.html\">configuration file</a>. This port allows Chef push jobs clients to communicate with the Chef push jobs server. In a configuration with both front and back ends, this port only needs to be open on the back end servers. The Chef push jobs server waits for connections from the Chef push jobs client, and never initiates a connection to a Chef push jobs client.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_firewalls_and_ports.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_firewalls_and_ports.html</a>\n  </p>\n</div>\n","server_12-5/server_tuning":"<h1 id=\"server-tuning\">Server Tuning</h1> <p>The server configuration file contains a list of all configuration options that are available for the Chef server. Some of these values should be modified for large-scale installations.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This topic contains general information about how settings can be tuned. In many cases, this topic suggests specific values to be used for tuning. That said, every organization and configuration is different, so please don’t hesitate to contact Chef support to discuss your tuning effort so as to help ensure the right value is identified for any particular setting.</p> </div>  <h2 id=\"customize-the-config-file\">Customize the Config File</h2> <p>The chef-server.rb file contains all of the non-default configuration settings used by the Chef server. (The default settings are built-in to the Chef server configuration and should only be added to the chef-server.rb file to apply non-default values.) These configuration settings are processed when the <code class=\"docutils literal\">chef-server-ctl reconfigure</code> command is run, such as immediately after setting up the Chef server or after making a change to the underlying configuration settings after the server has been deployed. The chef-server.rb file is a Ruby file, which means that conditional statements can be used in the configuration file.</p>  <h3 id=\"use-conditions\">Use Conditions</h3> <p>Use a <code class=\"docutils literal\">case</code> statement to apply different values based on whether the setting exists on the front-end or back-end servers. Add code to the server configuration file similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">role_name = ChefServer[\"servers\"][node['fqdn']][\"role\"]\ncase role_name\nwhen \"backend\"\n  # backend-specific configuration here\nwhen \"frontend\"\n  # frontend-specific configuration here\nend</pre>    <h2 id=\"recommended-settings\">Recommended Settings</h2> <p>The following settings are typically added to the server configuration file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">api_fqdn</code></dt> <dd>The FQDN for the Chef server. This setting is not in the server configuration file by default. When added, its value should be equal to the FQDN for the service URI used by the Chef server. For example: <code class=\"docutils literal\">api_fqdn \"chef.example.com\"</code>.</dd> <dt><code class=\"docutils literal\">bootstrap</code></dt> <dd>Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">ip_version</code></dt> <dd>Use to set the IP version: <code class=\"docutils literal\">\"ipv4\"</code> or <code class=\"docutils literal\">\"ipv6\"</code>. When set to <code class=\"docutils literal\">\"ipv6\"</code>, the API listens on IPv6 and front end and back end services communicate via IPv6 when a high availability configuration is used. When configuring for IPv6 in a high availability configuration, be sure to set the netmask on the IPv6 <code class=\"docutils literal\">backend_vip</code> attribute. Default value: <code class=\"docutils literal\">\"ipv4\"</code>.</dd> <dt><code class=\"docutils literal\">notification_email</code></dt> <dd>Default value: <code class=\"docutils literal\">info@example.com</code>.</dd> </dl>  <h3 id=\"ssl-protocols\">SSL Protocols</h3> <p>The following settings are often modified from the default as part of the tuning effort for the <strong>nginx</strong> service and to configure the Chef server to use SSL certificates:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">nginx['ssl_certificate']</code></dt> <dd>The SSL certificate used to verify communication over HTTPS. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">nginx['ssl_certificate_key']</code></dt> <dd>The certificate key used for SSL communication. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">nginx['ssl_ciphers']</code></dt> <dd>\n<p class=\"first\">The list of supported cipher suites that are used to establish a secure connection. To favor AES256 with ECDHE forward security, drop the <code class=\"docutils literal\">RC4-SHA:RC4-MD5:RC4:RSA</code> prefix. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">nginx['ssl_ciphers'] =  \"HIGH:MEDIUM:!LOW:!kEDH: \\\n                         !aNULL:!ADH:!eNULL:!EXP: \\\n                         !SSLv2:!SEED:!CAMELLIA: \\\n                         !PSK\"</pre> </dd> <dt><code class=\"docutils literal\">nginx['ssl_protocols']</code></dt> <dd>\n<p class=\"first\">The SSL protocol versions that are enabled. SSL 3.0 is supported by the Chef server; however, SSL 3.0 is an obsolete and insecure protocol. Transport Layer Security (TLS)—TLS 1.0, TLS 1.1, and TLS 1.2—has effectively replaced SSL 3.0, which provides for authenticated version negotiation between the chef-client and Chef server, which ensures the latest version of the TLS protocol is used. For the highest possible security, it is recommended to disable SSL 3.0 and allow all versions of the TLS protocol. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">nginx['ssl_protocols'] = \"TLSv1 TLSv1.1 TLSv1.2\"</pre> </dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference external\" href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">https://wiki.mozilla.org/Security/Server_Side_TLS</a> for more information about the values used with the <code class=\"docutils literal\">nginx['ssl_ciphers']</code> and <code class=\"docutils literal\">nginx['ssl_protocols']</code> settings.</p> </div> <p>For example, after copying the SSL certificate files to the Chef server, update the <code class=\"docutils literal\">nginx['ssl_certificate']</code> and <code class=\"docutils literal\">nginx['ssl_certificate_key']</code> settings to specify the paths to those files, and then (optionally) update the <code class=\"docutils literal\">nginx['ssl_ciphers']</code> and <code class=\"docutils literal\">nginx['ssl_protocols']</code> settings to reflect the desired level of hardness for the Chef server:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">nginx['ssl_certificate'] = \"/etc/pki/tls/private/name.of.pem\"\nnginx['ssl_certificate_key'] = \"/etc/pki/tls/private/name.of.key\"\nnginx['ssl_ciphers'] = \"HIGH:MEDIUM:!LOW:!kEDH:!aNULL:!ADH:!eNULL:!EXP:!SSLv2:!SEED:!CAMELLIA:!PSK\"\nnginx['ssl_protocols'] = \"TLSv1 TLSv1.1 TLSv1.2\"</pre>    <h2 id=\"optional-services-tuning\">Optional Services Tuning</h2> <p>The following settings are often used to for performance tuning of the Chef server in larger installations.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>When changes are made to the chef-server.rb file the Chef server must be reconfigured by running the following command:</p> <pre class=\"last highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> </div>  <h3 id=\"bookshelf\">bookshelf</h3> <p>The following setting is often modified from the default as part of the tuning effort for the <strong>bookshelf</strong> service:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">bookshelf['vip']</code></dt> <dd>The virtual IP address. Default value: <code class=\"docutils literal\">node['fqdn']</code>.</dd> </dl>   <h3 id=\"opscode-erchef\">opscode-erchef</h3> <p>The following settings are often modified from the default as part of the tuning effort for the <strong>opscode-erchef</strong> service:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">opscode_erchef['db_pool_size']</code></dt> <dd>The number of open connections to PostgreSQL that are maintained by the service. If failures indicate that the <strong>opscode-erchef</strong> service ran out of connections, try increasing the <code class=\"docutils literal\">postgresql['max_connections']</code> setting. If failures persist, then increase this value (in small increments) and also increase the value for <code class=\"docutils literal\">postgresql['max_connections']</code>. Default value: <code class=\"docutils literal\">20</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['s3_url_ttl']</code></dt> <dd>The amount of time (in seconds) before connections to the server expire. If chef-client runs are timing out, increase this setting to <code class=\"docutils literal\">3600</code>, and then adjust again if necessary. Default value: <code class=\"docutils literal\">900</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['strict_search_result_acls']</code></dt> <dd>\n<p class=\"first\">Use to specify that search results only return objects to which an actor (user, client, etc.) has read access, as determined by ACL settings. This affects all searches. When <code class=\"docutils literal\">true</code>, the performance of the Chef management console may increase because it enables the Chef management console to skip redundant ACL checks. To ensure the Chef management console is configured properly, after this setting has been applied with a <code class=\"docutils literal\">chef-server-ctl reconfigure</code> run <code class=\"docutils literal\">chef-manage-ctl reconfigure</code> to ensure the Chef management console also picks up the setting. Default value: <code class=\"docutils literal\">false</code>.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">When <code class=\"docutils literal\">true</code>, <code class=\"docutils literal\">opscode_erchef['strict_search_result_acls']</code> affects all search results and any actor (user, client, etc.) that does not have read access to a search result will not be able to view it. For example, this could affect search results returned during chef-client runs if a chef-client does not have permission to read the information.</p> </div> </dd> </dl>   <h3 id=\"opscode-expander\">opscode-expander</h3> <p>The following setting is often modified from the default as part of the tuning effort for the <strong>opscode-expander</strong> service:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">opscode_expander['nodes']</code></dt> <dd>The number of allowed worker processes. The <strong>opscode-expander</strong> service runs on the back-end and feeds data to the <strong>opscode-solr</strong> service, which creates and maintains search data used by the Chef server. Additional memory may be required by these worker processes depending on the frequency and volume of chef-client runs across the organization, but only if the back-end machines have available CPU and RAM. Default value: <code class=\"docutils literal\">2</code>.</dd> </dl>   <h3 id=\"opscode-solr4\">opscode-solr4</h3> <p>The following sections describe ways of tuning the <strong>opscode-solr4</strong> service to improve performance around large node sizes, available memory, and update frequencies.</p>  <h4 id=\"available-memory\">Available Memory</h4> <p>Use the following configuration setting to help ensure that Apache Solr does not run out of memory:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">opscode_solr4['heap_size']</code></dt> <dd>The amount of memory (in MBs) available to Apache Solr. If there is not enough memory available, search queries made by nodes to Apache Solr may fail. The amount of memory that must be available also depends on the number of nodes in the organization, the frequency of search queries, and other characteristics that are unique to each organization. In general, as the number of nodes increases, so does the amount of memory.</dd> </dl> <p>If Apache Solr is running out of memory, the <code class=\"docutils literal\">/var/log/opscode/opscode-solr4/current</code> log file will contain a message similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">SEVERE: java.lang.OutOfMemoryError: Java heap space</pre> <p>The default value for <code class=\"docutils literal\">opscode_solr4['heap_size']</code> should work for many organizations, especially those with fewer than 25 nodes. For organizations with more than 25 nodes, set this value to 25% of system memory or <code class=\"docutils literal\">1024</code>, whichever is smaller. For very large configurations, increase this value to 25% of system memory or <code class=\"docutils literal\">4096</code>, whichever is smaller. This value should not exceed <code class=\"docutils literal\">8192</code>.</p>   <h4 id=\"large-node-sizes\">Large Node Sizes</h4> <p>The maximum field length setting for Apache Solr should be greater than any expected node object file sizes in order for them to be successfully added to the search index. If a node object file is greater than the maximum field length, the node object will be indexed up to the maximum, but the part of the file past that limit will not be indexed. If this occurs, it will seem as if nodes disappear from the search index. To ensure that large node file sizes are indexed properly, verify the following configuration settings:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">nginx['client_max_body_size']</code></dt> <dd>The maximum accepted body size for a client request, as indicated by the <code class=\"docutils literal\">Content-Length</code> request header. When the maximum accepted body size is greater than this value, a <code class=\"docutils literal\">413 Request Entity Too Large</code> error is returned. Default value: <code class=\"docutils literal\">250m</code>.</dd> </dl> <p>and</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">opscode-erchef']['max_request_size']</code></dt> <dd>Default value: <code class=\"docutils literal\">1000000</code>.</dd> </dl> <p>to ensure that those settings are not part of the reasons for incomplete indexing, and then update the following setting so that its value is greater than the expected node file sizes:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">opscode_solr4['max_field_length']</code></dt> <dd>The maximum field length (in number of tokens/terms). If a field length exceeds this value, Apache Solr may not be able to complete building the index. Default value: <code class=\"docutils literal\">100000</code> (increased from the Apache Solr default value of <code class=\"docutils literal\">10000</code>).</dd> </dl> <p>Use the <code class=\"docutils literal\">wc</code> command to get the character count of a large node object file. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ wc -w NODE_NAME.json</pre> <p>and then ensure there is a buffer beyond that value. For example, verify the size of the largest node object file:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ wc -w nodebsp2016.json</pre> <p>which returns <code class=\"docutils literal\">154516</code>. Update the <code class=\"docutils literal\">opscode_solr4['max_field_length']</code> setting to have a value greater than the returned value. For example: <code class=\"docutils literal\">180000</code>.</p>   <h4 id=\"update-frequency\">Update Frequency</h4> <p>At the end of every chef-client run, the node object is saved to the Chef server. From the Chef server, each node object is then added to the <code class=\"docutils literal\">SOLR</code> search index. This process is asynchronous. By default, node objects are committed to the search index every 60 seconds or per 1000 node objects, whichever occurs first.</p> <p>When data is committed to the Apache Solr index, all incoming updates are blocked. If the duration between updates is too short, it is possible for the rate at which updates are asked to occur to be faster than the rate at which objects can be actually committed.</p> <p>Use the following configuration setting to improve the indexing performance of node objects:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">opscode_solr4['commit_interval']</code></dt> <dd>The frequency (in seconds) at which node objects are added to the Apache Solr search index. Default value: <code class=\"docutils literal\">60000</code> (every 60 seconds).</dd> <dt><code class=\"docutils literal\">opscode_solr4['max_commit_docs']</code></dt> <dd>The frequency (in documents) at which node objects are added to the Apache Solr search index. Default value: <code class=\"docutils literal\">1000</code> (every 1000 documents).</dd> </dl>    <h3 id=\"postgresql\">postgresql</h3> <p>The following setting is often modified from the default as part of the tuning effort for the <strong>postgresql</strong> service:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">postgresql['max_connections']</code></dt> <dd>\n<p class=\"first\">The maximum number of allowed concurrent connections. This value should only be tuned when the <code class=\"docutils literal\">opscode_erchef['db_pool_size']</code> value used by the <strong>opscode-erchef</strong> service is modified. Default value: <code class=\"docutils literal\">350</code>.</p> <p>If there are more than two front end machines in a cluster, the <code class=\"docutils literal\">postgresql['max_connections']</code> setting should be increased. The increased value depends on the number of machines in the front end, but also the number of services that are running on each of these machines.</p> <ul class=\"simple\"> <li>Each front end machine always runs the <strong>oc_bifrost</strong> and <strong>opscode-erchef</strong> services.</li> <li>The Reporting add-on adds the <strong>reporting</strong> service.</li> <li>The Chef push jobs service adds the <strong>push_jobs</strong> service.</li> </ul> <p>Each of these services requires 25 connections, above the default value.</p> <p>Use the following formula to help determine what the increased value should be:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">new_value = current_value + [\n            (# of front end machines - 2) * (25 * # of services)\n                        ]</pre> <p>For example, if the current value is 350, there are four front end machines, and all add-ons are installed, then the formula looks like:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">550 = 350 + [(4 - 2) * (25 * 4)]</pre> </dd> </dl>   <h3 id=\"rabbitmq\">rabbitmq</h3> <p>The following settings must be modified when the Chef Analytics server is configured as a standalone server:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">rabbitmq['node_ip_address']</code></dt> <dd>\n<p class=\"first\">The bind IP address for RabbitMQ. Default value: <code class=\"docutils literal\">\"127.0.0.1\"</code>.</p> <p class=\"last\">Chef Analytics uses the same RabbitMQ service that is configured on the Chef server. When the Chef Analytics server is configured as a standalone server, the default settings for <code class=\"docutils literal\">rabbitmq['node_ip_address']</code> and <code class=\"docutils literal\">rabbitmq['vip']</code> must be updated. When the Chef Analytics server is configured as a standalone server, change this value to <code class=\"docutils literal\">0.0.0.0</code>.</p> </dd> <dt><code class=\"docutils literal\">rabbitmq['vip']</code></dt> <dd>\n<p class=\"first\">The virtual IP address. Default value: <code class=\"docutils literal\">\"127.0.0.1\"</code>.</p> <p class=\"last\">Chef Analytics uses the same RabbitMQ service that is configured on the Chef server. When the Chef Analytics server is configured as a standalone server, the default settings for <code class=\"docutils literal\">rabbitmq['node_ip_address']</code> and <code class=\"docutils literal\">rabbitmq['vip']</code> must be updated. When the Chef Analytics server is configured as a standalone server, change this value to the backend VIP address for the Chef server.</p> </dd> </dl>  <h4 id=\"analytics-queues\">Analytics Queues</h4> <p>If the RabbitMQ queue that is used by Chef Analytics stops consuming messages, the Chef server data partition will fill up and may affect the overall performance of the Chef server application itself. The settings for the RabbitMQ queue are tunable, including for queue length monitoring, queue capacity, maximum number of messages that can be in the queue before messages are dropped, the point at which messages are dropped, for settings used by the rabbitmq-management plugin, and so on.</p> <p>The following settings may be used for tuning RabbitMQ queues used by Chef Analytics and the Chef server:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">rabbitmq['analytics_max_length']</code></dt> <dd>The maximum number of messages that can be queued before RabbitMQ automatically drops messages from the front of the queue to make room for new messages. Default value: <code class=\"docutils literal\">10000</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['drop_on_full_capacity']</code></dt> <dd>Specify if messages will stop being sent to the RabbitMQ queue when it is at capacity. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['management_enabled']</code></dt> <dd>Specify if the rabbitmq-management plugin is enabled. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['management_password']</code></dt> <dd>The rabbitmq-management plugin password. Default value: <code class=\"docutils literal\">'chefrocks'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['management_port']</code></dt> <dd>The rabbitmq-management plugin port. Default value: <code class=\"docutils literal\">15672</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['management_user']</code></dt> <dd>The rabbitmq-management plugin user. Default value: <code class=\"docutils literal\">'rabbitmgmt'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['prevent_erchef_startup_on_full_capacity']</code></dt> <dd>Specify if the Chef server will start when the monitored RabbitMQ queue is full. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['queue_at_capacity_affects_overall_status']</code></dt> <dd>Specify if the <code class=\"docutils literal\">_status</code> endpoint in the Chef server API will fail if the monitored queue is at capacity. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['queue_length_monitor_enabled']</code></dt> <dd>Specify if the queue length monitor is enabled. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['queue_length_monitor_millis']</code></dt> <dd>The frequency (in milliseconds) at which the length of the RabbitMQ queue is checked. Default value: <code class=\"docutils literal\">30000</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['queue_length_monitor_timeout_millis']</code></dt> <dd>The timeout (in milliseconds) at which calls to the queue length monitor will stop if the Chef server is overloaded. Default value: <code class=\"docutils literal\">5000</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['queue_length_monitor_queue']</code></dt> <dd>The RabbitMQ queue that is observed by queue length monitor. Default value: <code class=\"docutils literal\">'alaska'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['queue_length_monitor_vhost']</code></dt> <dd>The virtual host for the RabbitMQ queue that is observed by queue length monitor. Default value: <code class=\"docutils literal\">'/analytics'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['rabbit_mgmt_http_cull_interval']</code></dt> <dd>The maximum cull interval (in seconds) for the HTTP connection pool that is used by the rabbitmq-management plugin. Default value: <code class=\"docutils literal\">60</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['rabbit_mgmt_http_init_count']</code></dt> <dd>The initial worker count for the HTTP connection pool that is used by the rabbitmq-management plugin. Default value: <code class=\"docutils literal\">25</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['rabbit_mgmt_http_max_age']</code></dt> <dd>The maximum connection worker age (in seconds) for the HTTP connection pool that is used by the rabbitmq-management plugin. Default value: <code class=\"docutils literal\">70</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['rabbit_mgmt_http_max_connection_duration']</code></dt> <dd>The maximum connection duration (in seconds) for the HTTP connection pool that is used by the rabbitmq-management plugin. Default value: <code class=\"docutils literal\">70</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['rabbit_mgmt_http_max_count']</code></dt> <dd>The maximum worker count for the HTTP connection pool that is used by the rabbitmq-management plugin. Default value: <code class=\"docutils literal\">100</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['rabbit_mgmt_ibrowse_options']</code></dt> <dd>An array of comma-separated key-value pairs of ibrowse options for the HTTP connection pool that is used by the rabbitmq-management plugin. Default value: <code class=\"docutils literal\">'{connect_timeout, 10000}'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['rabbit_mgmt_timeout']</code></dt> <dd>The timeout for the HTTP connection pool that is used by the rabbitmq-management plugin. Default value: <code class=\"docutils literal\">30000</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['ssl_versions']</code></dt> <dd>The SSL versions used by the rabbitmq-management plugin. (See also <a class=\"reference external\" href=\"https://www.rabbitmq.com/ssl.html\">https://www.rabbitmq.com/ssl.html</a>.) Default value: <code class=\"docutils literal\">['tlsv1.2', 'tlsv1.1']</code>.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_tuning.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_tuning.html</a>\n  </p>\n</div>\n","server_12-5/server_manage_data_bags":"<h1 id=\"manage-data-bags\">Manage Data Bags</h1> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This topic is about using the Chef management console to manage data bags.</p> </div> <p>A data bag is a global variable that is stored as JSON data and is accessible from a Chef server. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search.</p>  <h2 id=\"manage\">Manage</h2> <p>Data bags can be managed from the Chef management console web user interface.</p>  <h3 id=\"add-data-bag\">Add Data Bag</h3> <p>To add a data bag:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Data Bags</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Create</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Create a Data Bag</strong> dialog box, enter the name of the data bag.</p> <img alt=\"_images/step_manage_webui_policy_data_bag_add.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_data_bag_add.png\"> </li> <li>\n<p class=\"first\">Click <strong>Create Data Bag</strong>.</p> </li> </ol>   <h3 id=\"delete-data-bag\">Delete Data Bag</h3> <p>To delete a data bag:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Data Bags</strong>.</p> </li> <li>\n<p class=\"first\">Select a data bag.</p> </li> <li>\n<p class=\"first\">Click <strong>Delete</strong>.</p> <img alt=\"_images/step_manage_webui_policy_data_bag_delete.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_data_bag_delete.png\"> </li> </ol>    <h2 id=\"manage-items\">Manage Items</h2> <p>A data bag is a container of related data bag items, where each individual data bag item is a JSON file. knife can load a data bag item by specifying the name of the data bag to which the item belongs and then the filename of the data bag item. The only structural requirement of a data bag item is that it must have an <code class=\"docutils literal\">id</code>:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  /* This is a supported comment style */\n  // This style is also supported\n  \"id\": \"ITEM_NAME\",\n  \"key\": \"value\"\n}</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">key</code> and <code class=\"docutils literal\">value</code> are the <code class=\"docutils literal\">key:value</code> pair for each additional attribute within the data bag item</li> <li>\n<code class=\"docutils literal\">/* ... */</code> and <code class=\"docutils literal\">// ...</code> show two ways to add comments to the data bag item</li> </ul>  <h3 id=\"add-item\">Add Item</h3> <p>To add a data bag item:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Data Bags</strong>.</p> </li> <li>\n<p class=\"first\">Select a data bag.</p> </li> <li>\n<p class=\"first\">Click <strong>Create Item</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Create a Data Bag Item</strong> dialog box, enter the data bag identifier, and then JSON data that defines the data bag item.</p> <img alt=\"_images/step_manage_webui_policy_data_bag_add_item.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_data_bag_add_item.png\"> </li> <li>\n<p class=\"first\">Click <strong>Create Data Bag Item</strong>.</p> </li> </ol>   <h3 id=\"delete-item\">Delete Item</h3> <p>To delete a data bag item:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Data Bags</strong>.</p> </li> <li>\n<p class=\"first\">Select a data bag.</p> </li> <li>\n<p class=\"first\">Select the <strong>Items</strong> tab.</p> </li> <li>\n<p class=\"first\">Select a data bag.</p> </li> <li>\n<p class=\"first\">Click <strong>Delete</strong>.</p> <img alt=\"_images/step_manage_webui_policy_data_bag_delete_item.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_data_bag_delete_item.png\"> </li> </ol>   <h3 id=\"edit-item\">Edit Item</h3> <p>To edit a data bag item:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Data Bags</strong>.</p> </li> <li>\n<p class=\"first\">Select a data bag.</p> </li> <li>\n<p class=\"first\">Select the <strong>Items</strong> tab.</p> </li> <li>\n<p class=\"first\">Select a data bag.</p> </li> <li>\n<p class=\"first\">Click <strong>Edit</strong>.</p> <img alt=\"_images/step_manage_webui_policy_data_bag_edit_item.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_data_bag_edit_item.png\"> </li> <li>\n<p class=\"first\">Make your changes.</p> </li> <li>\n<p class=\"first\">Click <strong>Save Item</strong>.</p> </li> </ol>   <h3 id=\"view-item\">View Item</h3> <p>To view data bag items for a data bag:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Data Bags</strong>.</li> <li>Select a data bag.</li> <li>Select the <strong>Items</strong> tab.</li> </ol>    <h2 id=\"manage-permissions\">Manage Permissions</h2> <p>Permissions are used in the Chef server to define how users and groups can interact with objects on the server. Permissions are configured per-organization.</p> <p>The Chef server includes the following object permissions:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Permission</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><strong>Delete</strong></td> <td>Use the <strong>Delete</strong> permission to define which users and groups may delete an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] delete [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Grant</strong></td> <td>Use the <strong>Grant</strong> permission to define which users and groups may configure permissions on an object. This permission is required for any user who configures permissions using the <strong>Administration</strong> tab in the Chef management console.</td> </tr> <tr class=\"row-even\">\n<td><strong>Read</strong></td> <td>Use the <strong>Read</strong> permission to define which users and groups may view the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] show [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Update</strong></td> <td>Use the <strong>Update</strong> permission to define which users and groups may edit the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] edit [object_name]</code> argument to interact with objects on the Chef server and for any chef-client to save node data to the Chef server at the conclusion of a chef-client run.</td> </tr> </tbody> </table>  <h3 id=\"set\">Set</h3> <p>To set permissions list for a data bag object:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Data Bags</strong>.</li> <li>Select a data bag.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>For each group listed under <strong>Name</strong>, select or de-select the <strong>Read</strong>, <strong>Update</strong>, <strong>Delete</strong>, and <strong>Grant</strong> permissions.</li> </ol>   <h3 id=\"update\">Update</h3> <p>To update the permissions list for a data bag object:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Data Bags</strong>.</li> <li>Select a data bag.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>Click the <strong>+ Add</strong> button and enter the name of the user or group to be added.</li> <li>Select or de-select <strong>Read</strong>, <strong>Update</strong>, <strong>Delete</strong>, and <strong>Grant</strong> to update the permissions list for the user or group.</li> </ol>   <h3 id=\"view\">View</h3> <p>To view permissions for a data bag object:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Data Bags</strong>.</li> <li>Select a data bag.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>Set the appropriate permissions: <strong>Read</strong>, <strong>Update</strong>, <strong>Delete</strong>, and <strong>Grant</strong>.</li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_manage_data_bags.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_manage_data_bags.html</a>\n  </p>\n</div>\n","server_12-5/server_manage_environments":"<h1 id=\"manage-environments\">Manage Environments</h1> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This topic is about using the Chef management console to manage environments.</p> </div> <p>An environment is a way to map an organization’s real-life workflow to what can be configured and managed when using Chef server. Every organization begins with a single environment called the <code class=\"docutils literal\">_default</code> environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization’s patterns and workflow. For example, creating <code class=\"docutils literal\">production</code>, <code class=\"docutils literal\">staging</code>, <code class=\"docutils literal\">testing</code>, and <code class=\"docutils literal\">development</code> environments. Generally, an environment is also associated with one (or more) cookbook versions.</p>  <h2 id=\"manage\">Manage</h2> <p>Environments can be managed from the Chef management console web user interface.</p>  <h3 id=\"add-environment\">Add Environment</h3> <p>To add an environment:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Environments</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Create</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Create an Environment</strong> dialog box, enter the name of the environment and a description.</p> <img alt=\"_images/step_manage_webui_policy_environment_add.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_environment_add.png\"> <p>Click <strong>Next</strong>.</p> </li> <li>\n<p class=\"first\">Optional. Set a constraint by choosing a name, an operator, and a version:</p> <img alt=\"_images/step_manage_webui_policy_environment_add_constraint.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_environment_add_constraint.png\"> <p>Click <strong>Add</strong>. Continue this process until all constraints are added. When finished, click <strong>Next</strong>.</p> </li> <li>\n<p class=\"first\">Optional. Add default attributes as JSON data:</p> <img alt=\"_images/step_manage_webui_policy_environment_add_default_attribute.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_environment_add_default_attribute.png\"> <p>Click <strong>Next</strong>.</p> </li> <li>\n<p class=\"first\">Optional. Add override attributes as JSON data:</p> <img alt=\"_images/step_manage_webui_policy_environment_add_override_attribute.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_environment_add_override_attribute.png\"> </li> <li>\n<p class=\"first\">Click <strong>Create Environment</strong>.</p> </li> </ol>   <h3 id=\"delete-environment\">Delete Environment</h3> <p>To delete an environment:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Environments</strong>.</p> </li> <li>\n<p class=\"first\">Select an environment.</p> </li> <li>\n<p class=\"first\">Click <strong>Delete</strong>.</p> <img alt=\"_images/step_manage_webui_policy_environment_delete.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_environment_delete.png\"> </li> </ol>   <h3 id=\"edit-details\">Edit Details</h3> <p>To edit the details of an environment:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Environments</strong>.</li> <li>Select an environment.</li> <li>Click the <strong>Details</strong> tab.</li> <li>Click <strong>Edit</strong>.</li> </ol>   <h3 id=\"set\">Set</h3> <p>To set the environment for a node:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Nodes</strong>.</p> </li> <li>\n<p class=\"first\">Select a node.</p> </li> <li>\n<p class=\"first\">Click the <strong>Details</strong> tab.</p> </li> <li>\n<p class=\"first\">In the top right, from the <strong>Environment</strong> drop-down, select the environment:</p> <img alt=\"_images/step_manage_webui_node_details_set_environment.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_node_details_set_environment.png\"> </li> <li>\n<p class=\"first\">Click <strong>Save</strong>.</p> </li> </ol>   <h3 id=\"view-details\">View Details</h3> <p>To view environment details:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Environments</strong>.</li> <li>Select an environment.</li> <li>Click the <strong>Details</strong> tab.</li> </ol>    <h2 id=\"default-attributes\">Default Attributes</h2> <p>A <code class=\"docutils literal\">default</code> attribute is automatically reset at the start of every chef-client run and has the lowest attribute precedence. Use <code class=\"docutils literal\">default</code> attributes as often as possible in cookbooks.</p>  <h3 id=\"edit\">Edit</h3> <p>To edit default attributes for an environment:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Environments</strong>.</p> </li> <li>\n<p class=\"first\">Select an environment.</p> </li> <li>\n<p class=\"first\">Click the <strong>Attributes</strong> tab.</p> </li> <li>\n<p class=\"first\">Under <strong>Default Attributes</strong>, click <strong>Edit</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Edit Environment Attributes</strong> dialog box, enter the JSON data that defines the attribute (or attributes).</p> <img alt=\"_images/step_manage_webui_policy_environment_edit_attribute.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_environment_edit_attribute.png\"> </li> <li>\n<p class=\"first\">Click <strong>Save</strong>.</p> </li> </ol>   <h3 id=\"view\">View</h3> <p>To view default attributes for an environment:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Environments</strong>.</li> <li>Select an environment.</li> <li>Click the <strong>Attributes</strong> tab.</li> </ol>    <h2 id=\"override-attributes\">Override Attributes</h2> <p>An <code class=\"docutils literal\">override</code> attribute is automatically reset at the start of every chef-client run and has a higher attribute precedence than <code class=\"docutils literal\">default</code>, <code class=\"docutils literal\">force_default</code>, and <code class=\"docutils literal\">normal</code> attributes. An <code class=\"docutils literal\">override</code> attribute is most often specified in a recipe, but can be specified in an attribute file, for a role, and/or for an environment. A cookbook should be authored so that it uses <code class=\"docutils literal\">override</code> attributes only when required.</p>  <h3 id=\"id1\">Edit</h3> <p>To edit override attributes for an environment:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Environments</strong>.</p> </li> <li>\n<p class=\"first\">Select an environment.</p> </li> <li>\n<p class=\"first\">Click the <strong>Attributes</strong> tab.</p> </li> <li>\n<p class=\"first\">Under <strong>Override Attributes</strong>, click <strong>Edit</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Edit Environment Attributes</strong> dialog box, enter the JSON data that defines the attribute (or attributes).</p> <img alt=\"_images/step_manage_webui_policy_environment_edit_attribute.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_environment_edit_attribute.png\"> </li> <li>\n<p class=\"first\">Click <strong>Save Attributes</strong>.</p> </li> </ol>   <h3 id=\"id2\">View</h3> <p>To view override attributes for an environment:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Environments</strong>.</li> <li>Select an environment.</li> <li>Click the <strong>Attributes</strong> tab.</li> </ol>    <h2 id=\"permissions\">Permissions</h2> <p>Permissions are used in the Chef server to define how users and groups can interact with objects on the server. Permissions are configured per-organization.</p> <p>The Chef server includes the following object permissions:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Permission</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><strong>Delete</strong></td> <td>Use the <strong>Delete</strong> permission to define which users and groups may delete an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] delete [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Grant</strong></td> <td>Use the <strong>Grant</strong> permission to define which users and groups may configure permissions on an object. This permission is required for any user who configures permissions using the <strong>Administration</strong> tab in the Chef management console.</td> </tr> <tr class=\"row-even\">\n<td><strong>Read</strong></td> <td>Use the <strong>Read</strong> permission to define which users and groups may view the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] show [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Update</strong></td> <td>Use the <strong>Update</strong> permission to define which users and groups may edit the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] edit [object_name]</code> argument to interact with objects on the Chef server and for any chef-client to save node data to the Chef server at the conclusion of a chef-client run.</td> </tr> </tbody> </table>  <h3 id=\"id3\">Set</h3> <p>To set permissions list for an environment object:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Environments</strong>.</li> <li>Select an environment.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>For each group listed under <strong>Name</strong>, select or de-select the <strong>Read</strong>, <strong>Update</strong>, <strong>Delete</strong>, and <strong>Grant</strong> permissions.</li> </ol>   <h3 id=\"update\">Update</h3> <p>To update the permissions list for an environment object:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Environments</strong>.</li> <li>Select an environment.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>Click the <strong>+ Add</strong> button and enter the name of the user or group to be added.</li> <li>Select or de-select <strong>Read</strong>, <strong>Update</strong>, <strong>Delete</strong>, and <strong>Grant</strong> to update the permissions list for the user or group.</li> </ol>   <h3 id=\"id4\">View</h3> <p>To view permissions for an environment object:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Environments</strong>.</li> <li>Select an enviromnent.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>Set the appropriate permissions: <strong>Read</strong>, <strong>Update</strong>, <strong>Delete</strong>, and <strong>Grant</strong>.</li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_manage_environments.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_manage_environments.html</a>\n  </p>\n</div>\n","server_12-5/server_manage_nodes":"<h1 id=\"manage-nodes\">Manage Nodes</h1> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This topic is about using the Chef management console to manage nodes.</p> </div> <p>A node is any machine—physical, virtual, cloud, network device, etc.—that is under management by Chef.</p>  <h2 id=\"manage\">Manage</h2> <p>Nodes can be managed from the Chef management console web user interface.</p>  <h3 id=\"delete\">Delete</h3> <p>To delete a node:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Nodes</strong>.</p> </li> <li>\n<p class=\"first\">Select a node.</p> </li> <li>\n<p class=\"first\">Click <strong>Delete</strong>.</p> </li> <li>\n<p class=\"first\">Confirm:</p> <img alt=\"_images/step_manage_webui_node_delete.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_node_delete.png\"> </li> </ol>   <h3 id=\"reset-key\">Reset Key</h3> <p>To reset the validation key for a node:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Nodes</strong>.</p> </li> <li>\n<p class=\"first\">Select a node.</p> </li> <li>\n<p class=\"first\">Click <strong>Edit Run List</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Reset Key</strong> dialog box, confirm that the key should be regenerated and click the <strong>Regenerate Key</strong> button:</p> <img alt=\"_images/step_manage_webui_admin_organization_reset_key.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_admin_organization_reset_key.png\"> </li> <li>\n<p class=\"first\">In the <strong>Reset Key</strong> dialog box, copy the key directly from the dialog box or click the <strong>Download</strong> button to download the key to your local machine:</p> <img alt=\"_images/step_manage_webui_admin_organization_reset_key_regenerated.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_admin_organization_reset_key_regenerated.png\"> </li> </ol>   <h3 id=\"search\">Search</h3> <p>To search nodes:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Nodes</strong>.</p> </li> <li>\n<p class=\"first\">In the search box in the upper right, enter the search query and click the search icon.</p> <img alt=\"_images/step_manage_webui_nodes_search.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_nodes_search.png\"> </li> <li>\n<p class=\"first\">The results will appear in the list below.</p> </li> </ol>    <h2 id=\"node-attributes\">Node Attributes</h2> <p>An attribute is a specific detail about a node. Attributes are used by the chef-client to understand:</p> <ul class=\"simple\"> <li>The current state of the node</li> <li>What the state of the node was at the end of the previous chef-client run</li> <li>What the state of the node should be at the end of the current chef-client run</li> </ul> <p>Attributes are defined by:</p> <ul class=\"simple\"> <li>The state of the node itself</li> <li>Cookbooks (in attribute files and/or recipes)</li> <li>Roles</li> <li>Environments</li> </ul> <p>During every chef-client run, the chef-client builds the attribute list using:</p> <ul class=\"simple\"> <li>Data about the node collected by Ohai</li> <li>The node object that was saved to the Chef server at the end of the previous chef-client run</li> <li>The rebuilt node object from the current chef-client run, after it is updated for changes to cookbooks (attribute files and/or recipes), roles, and/or environments, and updated for any changes to the state of the node itself</li> </ul> <p>After the node object is rebuilt, all of attributes are compared, and then the node is updated based on attribute precedence. At the end of every chef-client run, the node object that defines the current state of the node is uploaded to the Chef server so that it can be indexed for search.</p>  <h3 id=\"edit-attribute\">Edit Attribute</h3> <p>To edit node attributes:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Nodes</strong>.</p> </li> <li>\n<p class=\"first\">Select a node.</p> </li> <li>\n<p class=\"first\">Click the <strong>Attributes</strong> tab.</p> </li> <li>\n<p class=\"first\">Click <strong>Edit</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Edit Node Attributes</strong> dialog box, make your changes:</p> <img alt=\"_images/step_manage_webui_node_attributes_edit.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_node_attributes_edit.png\"> </li> <li>\n<p class=\"first\">Click <strong>Save Attributes</strong>.</p> </li> </ol>   <h3 id=\"view-attributes\">View Attributes</h3> <p>To view the attributes for a node:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Nodes</strong>.</li> <li>Select a node.</li> <li>Click the <strong>Attributes</strong> tab.</li> <li>Click <strong>Edit</strong>.</li> </ol>    <h2 id=\"run-lists\">Run-lists</h2> <p>A run-list defines all of the information necessary for Chef to configure a node into the desired state. A run-list is:</p> <ul class=\"simple\"> <li>An ordered list of roles and/or recipes that are run in the exact order defined in the run-list; if a recipe appears more than once in the run-list, the chef-client will not run it twice</li> <li>Always specific to the node on which it runs; nodes may have a run-list that is identical to the run-list used by other nodes</li> <li>Stored as part of the node object on the Chef server</li> <li>Maintained using knife, and then uploaded from the workstation to the Chef server, or is maintained using the Chef management console</li> </ul>  <h3 id=\"add-recipe-to\">Add Recipe to</h3> <p>To add a role or recipe to a run-list:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Nodes</strong>.</p> </li> <li>\n<p class=\"first\">Select a node.</p> </li> <li>\n<p class=\"first\">Click <strong>Edit Run List</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Edit Node Run List</strong> dialog box, drag the role or recipe from the <strong>Available Roles</strong> or <strong>Available Recipes</strong> lists to the current run-list.</p> <img alt=\"_images/step_manage_webui_node_run_list_add_role_or_recipe.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_node_run_list_add_role_or_recipe.png\"> </li> <li>\n<p class=\"first\">Click <strong>Save Run List</strong>.</p> </li> </ol>   <h3 id=\"add-role-to\">Add Role to</h3> <p>To add a role or recipe to a run-list:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Nodes</strong>.</p> </li> <li>\n<p class=\"first\">Select a node.</p> </li> <li>\n<p class=\"first\">Click <strong>Edit Run List</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Edit Node Run List</strong> dialog box, drag the role or recipe from the <strong>Available Roles</strong> or <strong>Available Recipes</strong> lists to the current run-list.</p> <img alt=\"_images/step_manage_webui_node_run_list_add_role_or_recipe.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_node_run_list_add_role_or_recipe.png\"> </li> <li>\n<p class=\"first\">Click <strong>Save Run List</strong>.</p> </li> </ol>   <h3 id=\"edit\">Edit</h3> <p>To edit a run-list:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Nodes</strong>.</li> <li>Select a node.</li> <li>Click <strong>Edit Run List</strong>.</li> <li>In the <strong>Edit Node Run List</strong> dialog box, make your changes.</li> <li>Click <strong>Save Run List</strong>.</li> </ol>   <h3 id=\"remove-recipe-from\">Remove Recipe from</h3> <p>To remove a role or recipe from a run-list:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Nodes</strong>.</p> </li> <li>\n<p class=\"first\">Select a node.</p> </li> <li>\n<p class=\"first\">Click <strong>Edit Run List</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Edit Node Run List</strong> dialog box, drag the role or recipe from the <strong>Current Run List</strong> to the list of available roles or recipes.</p> <img alt=\"_images/step_manage_webui_node_run_list_remove_role_or_recipe.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_node_run_list_remove_role_or_recipe.png\"> </li> <li>\n<p class=\"first\">Click <strong>Save Run List</strong>.</p> </li> </ol>   <h3 id=\"remove-role-from\">Remove Role from</h3> <p>To remove a role or recipe from a run-list:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Nodes</strong>.</p> </li> <li>\n<p class=\"first\">Select a node.</p> </li> <li>\n<p class=\"first\">Click <strong>Edit Run List</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Edit Node Run List</strong> dialog box, drag the role or recipe from the <strong>Current Run List</strong> to the list of available roles or recipes.</p> <img alt=\"_images/step_manage_webui_node_run_list_remove_role_or_recipe.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_node_run_list_remove_role_or_recipe.png\"> </li> <li>\n<p class=\"first\">Click <strong>Save Run List</strong>.</p> </li> </ol>   <h3 id=\"view-current\">View Current</h3> <p>To view the current run-list for a node:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Nodes</strong>.</p> </li> <li>\n<p class=\"first\">Select a node.</p> </li> <li>\n<p class=\"first\">Click the <strong>Details</strong> tab.</p> </li> <li>\n<p class=\"first\">The current run-list is shown in the lower right:</p> <img alt=\"_images/step_manage_webui_node_run_list_view_current.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_node_run_list_view_current.png\"> </li> </ol>    <h2 id=\"permissions\">Permissions</h2> <p>Permissions are used in the Chef server to define how users and groups can interact with objects on the server. Permissions are configured per-organization.</p> <p>The Chef server includes the following object permissions:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Permission</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><strong>Delete</strong></td> <td>Use the <strong>Delete</strong> permission to define which users and groups may delete an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] delete [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Grant</strong></td> <td>Use the <strong>Grant</strong> permission to define which users and groups may configure permissions on an object. This permission is required for any user who configures permissions using the <strong>Administration</strong> tab in the Chef management console.</td> </tr> <tr class=\"row-even\">\n<td><strong>Read</strong></td> <td>Use the <strong>Read</strong> permission to define which users and groups may view the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] show [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Update</strong></td> <td>Use the <strong>Update</strong> permission to define which users and groups may edit the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] edit [object_name]</code> argument to interact with objects on the Chef server and for any chef-client to save node data to the Chef server at the conclusion of a chef-client run.</td> </tr> </tbody> </table>  <h3 id=\"set\">Set</h3> <p>To set permissions list for a node object:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Nodes</strong>.</li> <li>Select a node.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>For each group listed under <strong>Name</strong>, select or de-select the <strong>Read</strong>, <strong>Update</strong>, <strong>Delete</strong>, and <strong>Grant</strong> permissions.</li> </ol>   <h3 id=\"update\">Update</h3> <p>To update the permissions list for a node object:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Nodes</strong>.</li> <li>Select a node.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>Click the <strong>+ Add</strong> button and enter the name of the user or group to be added.</li> <li>Select or de-select <strong>Read</strong>, <strong>Update</strong>, <strong>Delete</strong>, and <strong>Grant</strong> to update the permissions list for the user or group.</li> </ol>   <h3 id=\"view\">View</h3> <p>To view permissions for a node:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Nodes</strong>.</li> <li>Select a node.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>Set the appropriate permissions: <strong>Delete</strong>, <strong>Grant</strong>, <strong>Read</strong>, and/or <strong>Update</strong>.</li> </ol>    <h2 id=\"manage-tags\">Manage Tags</h2> <p>A tag is a custom description that is applied to a node. A tag, once applied, can be helpful when managing nodes using knife or when building recipes by providing alternate methods of grouping similar types of information.</p>  <h3 id=\"add\">Add</h3> <p>To add tags to a node (or a group of nodes):</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Nodes</strong>.</p> </li> <li>\n<p class=\"first\">Select a node (or a group of nodes).</p> </li> <li>\n<p class=\"first\">Click <strong>Manage Tags</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Manage Node Tags</strong> dialog box, enter the name of the tag and then select <strong>Add Tags</strong> from the drop-down.</p> <img alt=\"_images/step_manage_webui_node_tags_add.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_node_tags_add.png\"> </li> <li>\n<p class=\"first\">Click <strong>Update Tags</strong>.</p> </li> </ol>   <h3 id=\"id1\">Delete</h3> <p>To delete tags for a node (or a group of nodes):</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Nodes</strong>.</p> </li> <li>\n<p class=\"first\">Select a node (or a group of nodes).</p> </li> <li>\n<p class=\"first\">Click <strong>Manage Tags</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Manage Node Tags</strong> dialog box, enter the name of the tag and then select <strong>Delete Tags</strong> from the drop-down.</p> <img alt=\"_images/step_manage_webui_node_tags_delete.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_node_tags_delete.png\"> </li> <li>\n<p class=\"first\">Click <strong>Update Tags</strong>.</p> </li> </ol>   <h3 id=\"id2\">View</h3> <p>To view all of the nodes:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Nodes</strong>.</p> </li> <li>\n<p class=\"first\">Select a node.</p> </li> <li>\n<p class=\"first\">Select the <strong>Details</strong> tab.</p> </li> <li>\n<p class=\"first\">The tags for the node appear under the <strong>Tags</strong> header:</p> <img alt=\"_images/step_manage_webui_nodes_view_tags.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_nodes_view_tags.png\"> </li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_manage_nodes.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_manage_nodes.html</a>\n  </p>\n</div>\n","server_12-5/server_manage_reports":"<h1 id=\"manage-reports\">Manage Reports</h1> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This topic is about using the Chef management console to manage reports.</p> </div> <p>Use Reporting to keep track of what happens during the execution of chef-client runs across all of the machines that are under management by Chef. Reports can be generated for the entire organization and they can be generated for specific nodes.</p> <p>Reporting data is collected during the chef-client run and the results are posted to the Chef server at the end of the chef-client run at the same time the node object is uploaded to the Chef server.</p>  <h2 id=\"configure-reports\">Configure Reports</h2> <p>Reports can be built based on environments, by report status, by date range, and by organization.</p>  <h3 id=\"filter-by-environment\">Filter by Environment</h3> <p>To filter report histories by environment:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Reports</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Run History</strong>.</p> </li> <li>\n<p class=\"first\">From the <strong>Filter by environment</strong> drop-down, select <code class=\"docutils literal\">All Environments</code>, <code class=\"docutils literal\">_default</code>, or any custom environment:</p> <img alt=\"_images/step_manage_webui_reports_history_filter_by_environment.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_reports_history_filter_by_environment.png\"> </li> </ol>   <h3 id=\"filter-by-status\">Filter by Status</h3> <p>To filter report histories by chef-client run status:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Reports</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Run History</strong>.</p> </li> <li>\n<p class=\"first\">From the <strong>Filter by status</strong> drop-down, select <code class=\"docutils literal\">All</code>, <code class=\"docutils literal\">Success</code>, <code class=\"docutils literal\">Failure</code>, or <code class=\"docutils literal\">Started</code>:</p> <img alt=\"_images/step_manage_webui_reports_history_filter_by_status.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_reports_history_filter_by_status.png\"> </li> </ol>   <h3 id=\"show-runs-by-date-range\">Show Runs by Date Range</h3> <p>To show a specific set of chef-client runs:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Reports</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Dashboard</strong>.</p> </li> <li>\n<p class=\"first\">Select the range for which runs will be shown: all runs that occurred in the last 3 months, the last month, the last week, the last twenty-four hours, after a specific date, or between two specific dates:</p> <img alt=\"_images/step_manage_webui_reports_dashboard_show_runs.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_reports_dashboard_show_runs.png\"> </li> </ol>   <h3 id=\"show-runs-for-org\">Show Runs for Org</h3> <p>To show a specific set of chef-client run histories:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Reports</strong>.</li> <li>Click <strong>Run History</strong>.</li> <li>Select the range for which run histories will be shown: all runs that occurred in the last 3 months, the last month, the last week, the last twenty-four hours, after a specific date, or between two specific dates.</li> </ol>    <h2 id=\"view-reports\">View Reports</h2> <p>The following report types are available:</p>  <h3 id=\"dashboard\">Dashboard</h3> <p>To view the reports dashboard:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Reports</strong>.</li> <li>Click <strong>Dashboard</strong>.</li> </ol>   <h3 id=\"error-log\">Error Log</h3> <p>To view chef-client run error logs:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Reports</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Run History</strong>.</p> </li> <li>\n<p class=\"first\">Select the range of chef-client runs to show, the correct environment, and correct status.</p> </li> <li>\n<p class=\"first\">Select a chef-client run.</p> </li> <li>\n<p class=\"first\">Select the <strong>Error Log</strong> tab:</p> <img alt=\"_images/step_manage_webui_reports_history_view_error_log.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_reports_history_view_error_log.png\"> </li> </ol>   <h3 id=\"history\">History</h3> <p>To report histories:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Reports</strong>.</li> <li>Click <strong>Run History</strong>.</li> </ol>   <h3 id=\"run-counts\">Run Counts</h3> <p>To view chef-client runs still running:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Reports</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Dashboard</strong>.</p> </li> <li>\n<p class=\"first\">The chef-client runs that are still running are shown under the <strong>Run Counts</strong> header:</p> <img alt=\"_images/step_manage_webui_reports_dashboard_view_run_counts.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_reports_dashboard_view_run_counts.png\"> <p>Select (or de-select) <code class=\"docutils literal\">success</code>, <code class=\"docutils literal\">failure</code>, and <code class=\"docutils literal\">aborted</code> to filter the view to only specific run outcomes:</p> <img alt=\"_images/step_manage_webui_reports_dashboard_view_dashboard_common_outcomes.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_reports_dashboard_view_dashboard_common_outcomes.png\"> </li> </ol>   <h3 id=\"run-details\">Run Details</h3> <p>To view chef-client details:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Reports</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Run History</strong>.</p> </li> <li>\n<p class=\"first\">Select the range of chef-client runs to show, the correct environment, and correct status.</p> </li> <li>\n<p class=\"first\">Select a chef-client run.</p> </li> <li>\n<p class=\"first\">Select the <strong>Details</strong> tab:</p> <img alt=\"_images/step_manage_webui_reports_history_view_details.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_reports_history_view_details.png\"> <p>where:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">Step</code></td> <td>The order in which resources were executed during the chef-client run.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">Type</code></td> <td>The type of resource. <a class=\"reference external\" href=\"https://docs.chef.io/resource.html#resources\">https://docs.chef.io/resource.html#resources</a>\n</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">Name</code></td> <td>A string that describes the action taken. For example, a log entry or the name of the service that is enabled.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">Action</code></td> <td>The action taken by the resource type.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">Duration</code></td> <td>The amount of time required to complete the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">Diff</code></td> <td>The difference between the current state and the previous state. This setting is available for files managed by the <strong>cookbook_file</strong>, <strong>file</strong>, <strong>remote_file</strong>, and <strong>template</strong> resources.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">Parameters</code></td> <td>Opens the <strong>Run Details</strong> dialog box, which lists all of the parameters on the node that were changed during the chef-client run.</td> </tr> </tbody> </table> </li> </ol>   <h3 id=\"run-durations\">Run Durations</h3> <p>To view chef-client runs with errors:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Reports</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Dashboard</strong>.</p> </li> <li>\n<p class=\"first\">The chef-client runs with errors are shown under the <strong>Run Durations</strong> header:</p> <img alt=\"_images/step_manage_webui_reports_dashboard_view_run_durations.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_reports_dashboard_view_run_durations.png\"> <p>Hover over duration values to see the number of associated runs:</p> <img alt=\"_images/step_manage_webui_reports_dashboard_view_run_durations_hover.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_reports_dashboard_view_run_durations_hover.png\"> <p>Select (or de-select) <code class=\"docutils literal\">success</code>, <code class=\"docutils literal\">failure</code>, and <code class=\"docutils literal\">aborted</code> to filter the view to only specific run outcomes:</p> <img alt=\"_images/step_manage_webui_reports_dashboard_view_dashboard_common_outcomes.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_reports_dashboard_view_dashboard_common_outcomes.png\"> </li> </ol>   <h3 id=\"run-specific-details\">Run-specific Details</h3> <p>To view chef-client run-specific details:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Reports</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Run History</strong>.</p> </li> <li>\n<p class=\"first\">Select the range of chef-client runs to show, the correct environment, and correct status.</p> </li> <li>\n<p class=\"first\">Select a chef-client run.</p> </li> <li>\n<p class=\"first\">Select the <strong>Details</strong> tab.</p> </li> <li>\n<p class=\"first\">For a specific step, from the <strong>Parameters</strong> column, click the view icon to open the <strong>Run Details</strong> dialog box:</p> <img alt=\"_images/step_manage_webui_reports_history_view_details_run_details.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_reports_history_view_details_run_details.png\"> <p>where:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">Parameters</code></td> <td>The parameters that were set by the resource during the chef-client run.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">Initial State</code></td> <td>The state of the parameter at the start of the chef-client run.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">Final State</code></td> <td>The state of the parameter at the end of the chef-client run.</td> </tr> </tbody> </table> </li> </ol>   <h3 id=\"run-list\">Run-list</h3> <p>To view chef-client run-list details:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Reports</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Run History</strong>.</p> </li> <li>\n<p class=\"first\">Select the range of chef-client runs to show, the correct environment, and correct status.</p> </li> <li>\n<p class=\"first\">Select a chef-client run.</p> </li> <li>\n<p class=\"first\">Select the <strong>Run List</strong> tab:</p> <img alt=\"_images/step_manage_webui_reports_history_view_run_list.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_reports_history_view_run_list.png\"> </li> </ol>   <h3 id=\"runs-summary\">Runs Summary</h3> <p>To view the chef-client runs summary:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Reports</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Dashboard</strong>.</p> </li> <li>\n<p class=\"first\">The chef-client runs summaries are shown under the <strong>Runs Summary</strong> header:</p> <img alt=\"_images/step_manage_webui_reports_dashboard_view_run_summary.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_reports_dashboard_view_run_summary.png\"> </li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_manage_reports.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_manage_reports.html</a>\n  </p>\n</div>\n","server_12-5/ctl_opscode_expander":"<h1 id=\"opscode-expander-ctl-executable\">opscode-expander-ctl (executable)</h1> <p>The opscode-expander-ctl executable can be used to generate status information for the <strong>opscode-expander</strong> service. The opscode-expander-ctl executable is run as a command-line tool from the master backend machine.</p>  <h2 id=\"options\">Options</h2> <p>This tool has the following syntax:</p> <pre class=\"highlight-python\" data-language=\"python\">opscode-expanderctl OPTION</pre> <p>This tool has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">log-level</code></dt> <dd>Use to show the log level for all nodes in the cluster.</dd> <dt><code class=\"docutils literal\">node-status</code></dt> <dd>Use to show the status for all nodes in the cluster.</dd> <dt><code class=\"docutils literal\">queue-depth</code></dt> <dd>Use to display the aggregate queue backlog.</dd> <dt><code class=\"docutils literal\">queue-status</code></dt> <dd>Use to show the backlog and consumer counts for each vnode queue.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>For example, to view the aggregate queue backlog, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ cd /opt/opscode/embedded/service/opscode-expander/\n  export PATH=$PATH:/opt/opscode/bin:/opt/opscode/embedded/bin\n  bin/opscode-expanderctl queue-depth</pre> <p>to return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">total messages:       0\naverage queue depth:  0.0\nmax queue depth:      0\nmin queue depth:      0</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/ctl_opscode_expander.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/ctl_opscode_expander.html</a>\n  </p>\n</div>\n","server_12-5/install_server_ha_drbd":"<h1 id=\"high-availability-drbd\">High Availability: DRBD</h1> <p>This topic describes how to set up the Chef server for high availability using physical machines and DRBD.</p> <img src=\"https://docs.chef.io/release/server_12-5/_images/chef_server_ha_drbd.svg\" width=\"600px\">   <h2 id=\"prerequisites\">Prerequisites</h2> <p>Before installing the Chef server software, perform the following steps:</p> <ul class=\"simple\"> <li>Backend servers <a class=\"reference external\" href=\"http://www.drbd.org/users-guide/s-prepare-network.html\">should have a dedicated connection</a>. This is required for replication between the two servers.</li> <li>Backend servers will share a virtual IP address that must also be accessible from each frontend server. This virtual IP address is created and managed by the Chef server, but will also need to be added to the DNS so that all servers in the high availability configuration may access it.</li> <li>Persistent data on backend servers of the Chef server is primarily composed of cookbook files and directories. Separate disks should be dedicated entirely to storing this data prior to installing the Chef server.</li> <li>Load-balancing should be used with frontend machines, along with a DNS entry for the virtual IP address used for load balancing. This virtual IP address is added to the chef-server.rb file as the <code class=\"docutils literal\">api_fqdn</code>.</li> <li>All required ports must be open. See the Firewalls section (below) for the list of ports. All connections to and from the Chef server are accomplished via TCP. Refer to the operating system’s manual or your systems administrators for instructions on how to configure to ports, if necessary.</li> <li>The hostname for the Chef server must be an FQDN, including the domain suffix, and must be resolvable by the other backend and frontend servers. See <a class=\"reference external\" href=\"https://docs.chef.io/install_server_pre.html#hostnames\">Hostnames, FQDNs</a> for more information.</li> </ul>   <h2 id=\"disk-configuration\">Disk Configuration</h2> <p>Persistent data on a backend Chef server is primarily composed of cookbook files and directories. Separate disks should be dedicated entirely to storing this data prior to installing the Chef server. These disks should:</p> <ul class=\"simple\"> <li>Utilize hardware RAID</li> <li>Be configured in either RAID1 or RAID5</li> <li>Be identical across both of your backend servers</li> </ul> <p>The recommended configuration utilizes the Linux logical volume manager (LVM) as the backing store for DRBD. This assumes that:</p> <ul class=\"simple\"> <li>~300GB of raw, unpartitioned disk space is available</li> <li>The disk space presents as a single device, <code class=\"docutils literal\">/dev/sdb</code>\n</li> <li>The storage is added to a volume group named <code class=\"docutils literal\">opscode</code>\n</li> <li>The storage is added in a logical volume group named <code class=\"docutils literal\">drbd</code>\n</li> <li>The volume group should have adequate space to enable logical volume manager (LVM) snapshots to be used for backups; this amount depends on many factors, including how much changes in-between snapshots, how long the snapshots will be kept, and the (eventual) size of the Chef server database; a decent starting point when sizing logical volume manager (LVM) snapshots is ~10% of the raw, unpartitioned disk space</li> </ul> <p>The following commands would properly set up the backend disk configuration for DRBD:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ pvcreate /dev/sdb</pre> <p>and:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ vgcreate opscode /dev/sdb</pre> <p>and:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ lvcreate -l 80%VG -n drbd opscode</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Talk with your systems administrators about disk configuration if you are at all uncertain of how to configure a new logical volume with logical volume manager (LVM), as the operations can be destructive.</p> </div>   <h2 id=\"chef-server-rb\">chef-server.rb</h2> <p>Each Chef server in a high availabilty configuration must have an identical chef-server.rb file that is located in the <code class=\"docutils literal\">/etc/opscode/</code> directory on each server. This file describes the topology of the high availability configuration. On the primary backend server, create a file named chef-server.rb and save it in the <code class=\"docutils literal\">/etc/opscode/</code> directory.</p> <p>Add the following settings to the chef-server.rb file:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Define the topology type:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">topology \"ha\"</pre> </li> <li>\n<p class=\"first\">Define the primary backend server:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">server \"FQDN\",\n  :ipaddress =&gt; \"IP_ADDRESS\",\n  :role =&gt; \"backend\",\n  :bootstrap =&gt; true,\n  :cluster_ipaddress =&gt; \"CLUSTER_IPADDRESS\"</pre> <p>Replace <code class=\"docutils literal\">FQDN</code> with the FQDN of the server and <code class=\"docutils literal\">IP_ADDRESS</code> with the IP address of the server. The role is a backend server is <code class=\"docutils literal\">\"backend\"</code>. If the backend server is used to bootstrap the Chef server installation, replace <code class=\"docutils literal\">CLUSTER_IPADDRESS</code> with the IP address of the interface that is used for cluster communications. For example, the same IP address that is used by Keepalived and DRBD. If the Chef server is not used to bootstrap the Chef server installation, exclude the <code class=\"docutils literal\">:cluster_ipaddress</code> entry.</p> </li> <li>\n<p class=\"first\">Define the secondary backend server:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">server \"FQDN\",\n  :ipaddress =&gt; \"IPADDRESS\",\n  :role =&gt; \"backend\",\n  :cluster_ipaddress =&gt; \"CLUSTER_IPADDRESS\"</pre> <p>Replace <code class=\"docutils literal\">FQDN</code> with the FQDN of the server, and <code class=\"docutils literal\">IPADDRESS</code> with the IP address of the server. Replace <code class=\"docutils literal\">CLUSTER_IPADDRESS</code> with the IP address of the server’s interface assigned for cluster communications. If no such interface is configured, exclude the <code class=\"docutils literal\">cluster_ipaddress</code> entry.</p> </li> <li>\n<p class=\"first\">Define the backend virtual IP address:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">backend_vip \"FQDN\",\n  :ipaddress =&gt; \"IP_ADDRESS\",\n  :device =&gt; \"eth0\"</pre> <p>Replace <code class=\"docutils literal\">FQDN</code> with the FQDN of the server. Replace <code class=\"docutils literal\">IP_ADDRESS</code> with the virtual IP address of the server. The <code class=\"docutils literal\">:device</code> parameter should be the ethernet interface to which the floater virtual IP address will bind. This is typically the public interface of the server.</p> </li> <li>\n<p class=\"first\">Define each frontend server:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">server \"FQDN\",\n  :ipaddress =&gt; \"IP_ADDRESS\",\n  :role =&gt; \"frontend\"</pre> <p>Replace <code class=\"docutils literal\">FQDN</code> with the FQDN of the frontend server. Replace <code class=\"docutils literal\">IP_ADDRESS</code> with the IP address of the frontend server. Set <code class=\"docutils literal\">:role</code> to <code class=\"docutils literal\">\"frontend\"</code>.</p> <p>Add separate entry in the chef-server.rb file for each frontend server.</p> </li> <li>\n<p class=\"first\">Define the API FQDN:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">api_fqdn \"FQDN\"</pre> <p>Replace <code class=\"docutils literal\">FQDN</code> with the FQDN of the load balanced virtual IP address, which should be equal to the FQDN for the service URI that is used by the Chef server.</p> </li> <li>\n<p>Reconfigure the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl reconfigure</pre> </li> </ol>   <h2 id=\"primary-backend\">Primary Backend</h2> <p>Use the following steps to set up the primary backend Chef server:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Download the packages from <a class=\"reference external\" href=\"http://downloads.chef.io/chef-server/\">http://downloads.chef.io/chef-server/</a>. For Red Hat and CentOS 6:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh /tmp/chef-server-core-&lt;version&gt;.rpm</pre> <p>For Ubuntu:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -i /tmp/chef-server-core-&lt;version&gt;.deb</pre> <p>After a few minutes, the Chef server will be installed.</p> </li> <li>\n<p class=\"first\">Create a file named chef-server.rb that is located in the <code class=\"docutils literal\">/etc/opscode/</code> directory. See the chef-server.rb section below for an example of the settings and values that are required.</p> </li> <li>\n<p class=\"first\">Install DRBD. These steps vary, depending on the platform.</p> <p><strong>For Ubuntu</strong>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ apt-get install drbd8-utils</pre> <p><strong>For RedHat and CentOS (all versions)</strong>, first check for the <code class=\"docutils literal\">xen</code> kernel:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -qa kernel\\* | grep -ci xen</pre> <p>If anything other than <code class=\"docutils literal\">0</code> is returned, the machine is running the <code class=\"docutils literal\">xen</code> kernel.</p> <p><strong>For RedHat and CentOS 6.6</strong>, install ELRepo:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm --import http://elrepo.org/RPM-GPG-KEY-elrepo.org</pre> <p>and then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh http://elrepo.org/elrepo-release-6-5.el6.elrepo.noarch.rpm</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The ELRepo provides updated drivers for the Linux family of enterprise distributions (based on Red Hat Enterprise Linux.) With the introduction of Red Hat Enterprise Linux 6, Red Hat no longer distributes DRBD within the kernel. These modules provide properly built, community tested releases of the required kernel and DRBD userland.</p> </div> <p>If the server returned <code class=\"docutils literal\">0</code> for the <code class=\"docutils literal\">xen</code> kernel, run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ yum install -y drbd84-utils kmod-drbd84</pre> <p>If the server returned something other than <code class=\"docutils literal\">0</code>, run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ yum install -y drbd84-utils kmod-drbd84-xen</pre> <p><strong>For RedHat and CentOS 6.5</strong>, install ELRepo:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm --import http://elrepo.org/RPM-GPG-KEY-elrepo.org</pre> <p>and then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh http://elrepo.org/elrepo-release-6-5.el6.elrepo.noarch.rpm</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The ELRepo provides updated drivers for the Linux family of enterprise distributions (based on Red Hat Enterprise Linux.) With the introduction of Red Hat Enterprise Linux 6, Red Hat no longer distributes DRBD within the kernel. These modules provide properly built, community tested releases of the required kernel and DRBD userland.</p> </div> <p>If the server returned <code class=\"docutils literal\">0</code> for the <code class=\"docutils literal\">xen</code> kernel, run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ yum install -y drbd84-utils kmod-drbd84-8.4.5-1.el6.elrepo</pre> <p>If the server returned something other than <code class=\"docutils literal\">0</code>, run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ yum install -y drbd84-utils kmod-drbd84-xen-8.4.5-1.el6.elrepo</pre> <p><strong>For RedHat and CentOS 5.11</strong>, install ELRepo:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm --import http://elrepo.org/RPM-GPG-KEY-elrepo.org</pre> <p>and then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh http://www.elrepo.org/elrepo-release-5-5.el5.elrepo.noarch.rpm</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The ELRepo provides updated drivers for the Linux family of enterprise distributions (based on Red Hat Enterprise Linux.) With the introduction of Red Hat Enterprise Linux 6, Red Hat no longer distributes DRBD within the kernel. These modules provide properly built, community tested releases of the required kernel and DRBD userland.</p> </div> <p>If the server returned <code class=\"docutils literal\">0</code> for the <code class=\"docutils literal\">xen</code> kernel, run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ yum install -y drbd84-utils kmod-drbd84</pre> <p>If the server returned something other than <code class=\"docutils literal\">0</code>, run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ yum install -y drbd84-utils kmod-drbd84-xen</pre> </li> <li>\n<p>Reconfigure the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl reconfigure</pre> <p>This will configure DRBD. The installer will pause and ask for confirmation that DRBD has been set up. Confirm (<code class=\"docutils literal\">CTRL-C</code>), and then run the following commands:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ drbdadm create-md pc0</pre> <p>then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ drbdadm up pc0</pre> </li> </ol>   <h2 id=\"secondary-backend\">Secondary Backend</h2> <p>Use the following steps to set up the secondary backend Chef server:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Repeat the same steps as described for the primary backend server.</p> </li> <li>\n<p class=\"first\">Create the <code class=\"docutils literal\">/etc/opscode/</code> directory, and then copy the entire contents of the <code class=\"docutils literal\">/etc/opscode</code> directory from the primary backend server, including all certificates and the chef-server.rb file.</p> </li> <li>\n<p>Reconfigure the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl reconfigure</pre> <p>This will configure DRBD. The installer will pause and ask for confirmation that DRBD has been set up. Confirm (<code class=\"docutils literal\">CTRL-C</code>), and then run the following commands:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ drbdadm create-md pc0</pre> <p>then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ drbdadm up pc0</pre> </li> </ol>   <h2 id=\"establish-failover\">Establish Failover</h2> <p>To establish failover between the two backend servers, do the following:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">On the primary backend server, define it as the primary shared device. For Red Hat and CentOS 6:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ drbdadm primary --force pc0</pre> <p>For Ubuntu:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ drbdadm -- --overwrite-data-of-peer primary pc0</pre> </li> <li>\n<p class=\"first\">On the primary backend server, mount the file system. For example, a file system named <code class=\"docutils literal\">ext4</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ mkfs.ext4 /dev/drbd0</pre> <p>then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ mkdir -p /var/opt/opscode/drbd/data</pre> <p>and then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ mount /dev/drbd0 /var/opt/opscode/drbd/data</pre> </li> <li>\n<p class=\"first\">Synchronize DRBD. This process <strong>MUST</strong> be allowed to complete to ensure that DRBD is synchronized with all devices.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Under normal operation, DRBD dedicates only a portion of the available disk bandwidth to initial/complete re-synchronization. This ensures that new data written to the shared device is also synchronized.</p> </div> <p>DRBD can be configured to utilize more bandwidth during the initial synchronization. For Red Hat and CentOS 6:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ drbdadm disk-options --resync-rate=1100M pc0</pre> <p>For Ubuntu:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ drbdsetup /dev/drbd0 syncer -r 1100M</pre> <p>To observe the synchronization process, run the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ watch -n1 cat /proc/drbd</pre> <p>Output similar to the following will be shown:</p> <pre class=\"highlight-bash\" data-language=\"bash\">cat /proc/drbd output\n\nversion: 8.4.1 (api:1/proto:86[STRIKEOUT:100)\nGIT-hash: 91b4c048c1a0e06777b5f65d312b38d47abaea80 build by\ndag@Build64R6, 2011]12[STRIKEOUT:21 06:08:50\n  0: cs:SyncSource ro:Primary/Secondary ds:UpToDate/Inconsistent C r]—-\n  ns:3071368 nr:0 dw:0 dr:3075736 al:0 bm:187 lo:0 pe:13 ua:4 ap:0 ep:1\n  wo:b oos:12685660\n  [==&gt;……………..] sync'ed: 19.5% (12388/15372)M\n  finish: 0:11:00 speed: 19,188 (24,468) K/sec</pre> <p>Synchronization is complete hen the <code class=\"docutils literal\">ds:</code> section reads <code class=\"docutils literal\">UpToDate/UpToDate</code>.</p> </li> <li>\n<p class=\"first\">When synchronization is complete, run the following command on the primary backend server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ touch /var/opt/opscode/drbd/drbd_ready</pre> </li> <li>\n<p class=\"first\">Reconfigure the primary Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Run the following command on the secondary backend server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ touch /var/opt/opscode/drbd/drbd_ready</pre> </li> <li>\n<p class=\"first\">Reconfigure the secondary Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl reconfigure</pre> </li> </ol>   <h2 id=\"frontend\">Frontend</h2> <p>For each frontend server, use the following steps to set up the Chef server:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Install the Chef server package. For Red Hat and CentOS 6:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh /tmp/chef-server-core-&lt;version&gt;.rpm</pre> <p>For Ubuntu:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -i /tmp/chef-server-core-&lt;version&gt;.deb</pre> <p>After a few minutes, the Chef server will be installed.</p> </li> <li>\n<p class=\"first\">Create the <code class=\"docutils literal\">/etc/opscode/</code> directory, and then copy the entire contents of the <code class=\"docutils literal\">/etc/opscode</code> directory from the primary backend server, including all certificates and the chef-server.rb file.</p> </li> <li>\n<p>Reconfigure the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl reconfigure</pre> </li> <li>\n<p>Start the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl start</pre> </li> <li>\n<p>Run the following command to create an administrator:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-create USER_NAME FIRST_NAME LAST_NAME EMAIL 'PASSWORD' --filename FILE_NAME</pre> <p>An RSA private key is generated automatically. This is the user’s private key and should be saved to a safe location. The <code class=\"docutils literal\">--filename</code> option will save the RSA private key to a specified path.</p> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-create stevedanno Steve Danno steved@chef.io 'abc123' --filename /path/to/stevedanno.pem</pre> </li> <li>\n<p>Run the following command to create an organization:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-create short_name 'full_organization_name' --association_user user_name --filename ORGANIZATION-validator.pem</pre> <p>The name must begin with a lower-case letter or digit, may only contain lower-case letters, digits, hyphens, and underscores, and must be between 1 and 255 characters. For example: <code class=\"docutils literal\">4thcoffee</code>.</p> <p>The full name must begin with a non-white space character and must be between 1 and 1023 characters. For example: <code class=\"docutils literal\">'Fourth Coffee, Inc.'</code>.</p> <p>The <code class=\"docutils literal\">--association_user</code> option will associate the <code class=\"docutils literal\">user_name</code> with the <code class=\"docutils literal\">admins</code> security group on the Chef server.</p> <p>An RSA private key is generated automatically. This is the chef-validator key and should be saved to a safe location. The <code class=\"docutils literal\">--filename</code> option will save the RSA private key to a specified path.</p> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-create 4thcoffee 'Fourth Coffee, Inc.' --association_user stevedanno --filename /path/to/4thcoffee-validator.pem</pre> </li> <li>\n<p>Reconfigure the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-server-ctl reconfigure</pre> </li> </ol>   <h2 id=\"enable-features\">Enable Features</h2> <p>Enable additional features of the Chef server! The packages may be downloaded directly as part of the installation process or they may be first downloaded to a local directory, and then installed.</p> <p><strong>Use Downloads</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are not behind a firewall (and have connectivity to <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a>), these packages can be installed as described below.</p> <table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"80%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Command</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Chef Manage</td> <td>\n<p class=\"first\">Use Chef management console to manage data bags, attributes, run-lists, roles, environments, and cookbooks from a web user interface.</p> <p>On each front end server in the Chef server configuration, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-manage</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-manage-ctl reconfigure</pre> <p class=\"last\">This updates the Chef server and creates the <code class=\"docutils literal\">/etc/opscode-manage/secrets.rb</code> file. When running the Chef management console 1.11 (or higher), copy the <code class=\"docutils literal\">secrets.rb</code> file in the <code class=\"docutils literal\">/etc/opscode-manage</code> directory on one of the frontend servers to the same directory on each of the other frontend servers, and then rerun <code class=\"docutils literal\">chef-manage-ctl reconfigure</code> so the copied <code class=\"docutils literal\">/etc/opscode-manage/secrets.rb</code> file gets used correctly.</p> </td> </tr> <tr class=\"row-odd\">\n<td>Chef Replication</td> <td>\n<p class=\"first\">Use Chef replication to asynchronously distribute cookbook, environment, role, and data bag data from a single, primary Chef server to one (or more) replicas of that Chef server.</p> <p>On all servers in the Chef server configuration, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-sync</pre> <p>On the primary Chef server, create the chef-sync.rb file in the <code class=\"docutils literal\">/etc/chef-sync/</code> directory, and then add the following setting:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">role :master</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ chef-sync-ctl reconfigure</pre> </td> </tr> </tbody> </table> <p><strong>Use Local Packages</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are behind a firewall (and may not have connectivity to packages.chef.io), these packages can be downloaded from <a class=\"reference external\" href=\"https://downloads.chef.io/chef-manage/\">https://downloads.chef.io/chef-manage/</a>, and then installed manually. First download the package that is appropriate for the platform, save it to a local path, and then run the <code class=\"docutils literal\">install</code> command using the <code class=\"docutils literal\">--path</code> option to specify the directory in which the package is located:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install PACKAGE_NAME --path /path/to/package/directory</pre> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install chef-manage --path /root/packages</pre> <p>The <code class=\"docutils literal\">chef-server-ctl</code> command will install the first <code class=\"docutils literal\">chef-manage</code> package found in the <code class=\"docutils literal\">/root/packages</code> directory.</p> <p><strong>Install Reporting</strong></p> <p>To set up the Reporting server:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Install the package on each frontend and backend Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install opscode-reporting</pre> </li> <li>\n<p class=\"first\">Reconfigure the Chef server on the backend primary server (bootstrap):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Reconfigure the Reporting server on the backend primary server (bootstrap):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-reporting-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Copy the entire <code class=\"docutils literal\">/etc/opscode-reporting</code> directory from the backend primary server to all frontend and backend servers. For example, from each server run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ scp -r &lt;Bootstrap server IP&gt;:/etc/opscode-reporting /etc</pre> <p>or from the backend primary server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ scp -r /etc/opscode-reporting &lt;each servers IP&gt;:/etc</pre> </li> <li>\n<p class=\"first\">Reconfigure any Chef server on which Reporting services have been installed:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Reconfigure Reporting services on each server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-reporting-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Verify the installation:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-reporting-ctl test</pre> </li> </ol> <p><strong>Install Push Jobs</strong></p> <p>To set up the Chef push jobs server for a high availability configuration:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Install the package on all servers that are running the Chef server. For example on Ubuntu:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -i opscode-push-jobs-server_&lt;package&gt;.ubuntu.10.04_amd64.deb</pre> </li> <li>\n<p class=\"first\">Reconfigure the primary backend Chef push jobs server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-push-jobs-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Copy the entire <code class=\"docutils literal\">/etc/opscode-push-jobs-server</code> directory from the backend primary to all frontend and backend servers. For example, from each server run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ scp -r &lt;Bootstrap server IP&gt;:/etc/opscode-push-jobs-server /etc</pre> <p>or from the backend primary server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ scp -r /etc/opscode-push-jobs-server &lt;each servers IP&gt;:/etc</pre> </li> <li>\n<p class=\"first\">TCP protocol ports 10000 and 10003 must be open. These are the heartbeat and command ports respectively. They allow the Chef push jobs server to communicate with the Chef push jobs clients. In a configuration with both frontend and backend servers, these ports only need to be open on the backend servers. The Chef push jobs server waits for connections from the Chef push jobs client (and never makes a connection to a Chef push jobs client).</p> </li> <li>\n<p class=\"first\">Reconfigure the remaining Chef push jobs servers:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-push-jobs-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Run the following command on each of the backend servers:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> <p>This ensures that the Keepalived scripts are regenerated so they are aware of Chef push jobs.</p> </li> <li>\n<p class=\"first\">Restart all servers on which Chef push jobs will run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restart opscode-pushy-server</pre> </li> <li>\n<p class=\"first\">Verify the installation:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-push-jobs-server-ctl test</pre> </li> </ol>   <h2 id=\"reference\">Reference</h2> <p>The following sections show an example chef-server.rb file and a list of the ports that are required by the Chef server.</p>  <h3 id=\"id1\">chef-server.rb</h3> <p>A completed chef-server.rb configuration file for a four server tiered Chef server cluster, consisting of:</p> <table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"30%\"> <col width=\"30%\"> <col width=\"20%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">FQDN</th> <th class=\"head\">Real IP Address</th> <th class=\"head\">Cluster IP Address</th> <th class=\"head\">Role</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>be1.example.com</td> <td>192.168.4.1</td> <td>10.1.2.10</td> <td>backend</td> </tr> <tr class=\"row-odd\">\n<td>be2.example.com</td> <td>192.168.4.6</td> <td>10.1.2.12</td> <td>backend</td> </tr> <tr class=\"row-even\">\n<td>fe1.example.com</td> <td>192.168.4.2</td> <td> </td> <td>frontend</td> </tr> <tr class=\"row-odd\">\n<td>fe2.example.com</td> <td>192.168.4.3</td> <td> </td> <td>frontend</td> </tr> <tr class=\"row-even\">\n<td>fe3.example.com</td> <td>192.168.4.4</td> <td> </td> <td>frontend</td> </tr> <tr class=\"row-odd\">\n<td>chef.example.com</td> <td>192.168.4.5</td> <td> </td> <td>load balanced frontend VIP</td> </tr> <tr class=\"row-even\">\n<td>be.example.com</td> <td>192.168.4.7</td> <td> </td> <td>load balanced backend VIP</td> </tr> </tbody> </table> <p>Looks like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">topology \"ha\"\n\nserver \"be1.example.com\",\n  :ipaddress =&gt; \"192.168.4.1\",\n  :role =&gt; \"backend\",\n  :bootstrap =&gt; true,\n  :cluster_ipaddress =&gt; \"10.1.2.10\"\n\nserver \"be2.example.com\",\n  :ipaddress =&gt; \"192.168.4.6\",\n  :role =&gt; \"backend\",\n  :cluster_ipaddress =&gt; \"10.1.2.12\"\n\nbackend_vip \"be.example.com\",\n  :ipaddress =&gt; \"192.168.4.7\",\n  :device =&gt; \"eth0\"\n\nserver \"fe1.example.com\",\n  :ipaddress =&gt; \"192.168.4.2\",\n  :role =&gt; \"frontend\"\n\nserver \"fe2.example.com\",\n  :ipaddress =&gt; \"192.168.4.3\",\n  :role =&gt; \"frontend\"\n\nserver \"fe3.example.com\",\n  :ipaddress =&gt; \"192.168.4.4\",\n  :role =&gt; \"frontend\"\n\napi_fqdn \"chef.example.com\"</pre>   <h3 id=\"firewalls-and-ports\">Firewalls and Ports</h3> <p>All of the ports used by the Chef server are TCP ports. Refer to the operating system’s manual or site systems administrators for instructions on how to enable changes to ports, if necessary.</p> <p>All services must be listening on the appropriate ports. Most monitoring systems provide a means of testing whether a given port is accepting connections and service-specific tools may also be available. In addition, the generic system tool Telnet can also be used to initiate the connection:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ telnet HOST_NAME PORT</pre> <p>A single loopback interface should be configured using the <code class=\"docutils literal\">127.0.0.1</code> address. This ensures that all of the services are available to the Chef server, in the event that the Chef server attempts to contact itself from within a front or back end machine. All ports should be accessible through the loopback interface of their respective hosts.</p>  <h4 id=\"backend\">Backend</h4> <p>For back-end servers, ensure that ports marked as external (marked as <code class=\"docutils literal\">yes</code> in the <strong>External</strong> column) are open and accessible via any firewalls that are in use:</p> <table class=\"docutils\"> <colgroup> <col width=\"11%\"> <col width=\"78%\"> <col width=\"11%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Port</th> <th class=\"head\">Service Name, Description</th> <th class=\"head\">External</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>4321</td> <td>\n<p class=\"first\"><strong>bookshelf</strong></p> <p class=\"last\">The <strong>bookshelf</strong> service is an Amazon Simple Storage Service (S3)-compatible service that is used to store cookbooks, including all of the files—recipes, templates, and so on—that are associated with each cookbook.</p> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>112</td> <td>\n<p class=\"first\"><strong>keepalived</strong></p> <p class=\"last\">The <strong>keepalived</strong> service manages the virtual IP address (VIP) between the backend machines in a high availability topology that uses DRBD.</p> </td> <td>yes</td> </tr> <tr class=\"row-even\">\n<td>80, 443, 9683</td> <td>\n<p class=\"first\"><strong>nginx</strong></p> <p>The <strong>nginx</strong> service is used to manage traffic to the Chef server, including virtual hosts for internal and external API request/response routing, external add-on request routing, and routing between front- and back-end components.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Port 9683 is used to internally load balance the <strong>oc_bifrost</strong> service.</p> </div> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>9683</td> <td>\n<p class=\"first\"><strong>oc_bifrost</strong></p> <p class=\"last\">The <strong>oc_bifrost</strong> service ensures that every request to view or manage objects stored on the Chef server is authorized.</p> </td> <td>yes</td> </tr> <tr class=\"row-even\">\n<td>9090</td> <td>\n<p class=\"first\"><strong>oc-id</strong></p> <p class=\"last\">The <strong>oc-id</strong> service enables OAuth 2.0 authentication to the Chef server by external applications, including Chef Supermarket and Chef Analytics. OAuth 2.0 uses token-based authentication, where external applications use tokens that are issued by the <strong>oc-id</strong> provider. No special credentials—<code class=\"docutils literal\">webui_priv.pem</code> or privileged keys—are stored on the external application.</p> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>8000</td> <td>\n<p class=\"first\"><strong>opscode-erchef</strong></p> <p>The <strong>opscode-erchef</strong> service is an Erlang-based service that is used to handle Chef server API requests to the following areas within the Chef server:</p> <ul class=\"last simple\"> <li>Cookbooks</li> <li>Data bags</li> <li>Environments</li> <li>Nodes</li> <li>Roles</li> <li>Sandboxes</li> <li>Search</li> </ul> </td> <td>yes</td> </tr> <tr class=\"row-even\">\n<td> </td> <td>\n<p class=\"first\"><strong>opscode-expander</strong></p> <p class=\"last\">The <strong>opscode-expander</strong> service is used to process data (pulled from the <strong>rabbitmq</strong> service’s message queue) so that it can be properly indexed by the <strong>opscode-solr4</strong> service.</p> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>8983</td> <td>\n<p class=\"first\"><strong>opscode-solr4</strong></p> <p class=\"last\">The <strong>opscode-solr4</strong> service is used to create the search indexes used for searching objects like nodes, data bags, and cookbooks. (This service ensures timely search results via the Chef server API; data that is used by the Chef platform is stored in PostgreSQL.)</p> </td> <td> </td> </tr> <tr class=\"row-even\">\n<td>5432</td> <td>\n<p class=\"first\"><strong>postgresql</strong></p> <p class=\"last\">The <strong>postgresql</strong> service is used to store node, object, and user data.</p> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>5672, 15672</td> <td>\n<p class=\"first\"><strong>rabbitmq</strong></p> <p class=\"last\">The <strong>rabbitmq</strong> service is used to provide the message queue that is used by the Chef server to get search data to Apache Solr so that it can be indexed for search. When Chef Analytics is confiugred, the <strong>rabbitmq</strong> service is also used to send data from the Chef server to the Chef Analytics server.</p> </td> <td>yes</td> </tr> <tr class=\"row-even\">\n<td>16379</td> <td>\n<p class=\"first\"><strong>redis_lb</strong></p> <p class=\"last\">Key-value store used in conjunction with Nginx to route requests and populate request data used by the Chef server.</p> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>7788-7799</td> <td>DRBD This port range must be open between all back end servers in a high availability configuration that uses DRBD.</td> <td> </td> </tr> </tbody> </table>   <h4 id=\"id2\">Frontend</h4> <p>For front-end servers, ensure that ports marked as external (marked as <code class=\"docutils literal\">yes</code> in the <strong>External</strong> column) are open and accessible via any firewalls that are in use:</p> <table class=\"docutils\"> <colgroup> <col width=\"11%\"> <col width=\"78%\"> <col width=\"11%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Port</th> <th class=\"head\">Service Name, Description</th> <th class=\"head\">External</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>80, 443, 9683</td> <td>\n<p class=\"first\"><strong>nginx</strong></p> <p>The <strong>nginx</strong> service is used to manage traffic to the Chef server, including virtual hosts for internal and external API request/response routing, external add-on request routing, and routing between front- and back-end components.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Port 9683 is used to internally load balance the <strong>oc_bifrost</strong> service.</p> </div> </td> <td>yes</td> </tr> <tr class=\"row-odd\">\n<td>9463</td> <td>\n<p class=\"first\"><strong>oc_bifrost</strong></p> <p class=\"last\">The <strong>oc_bifrost</strong> service ensures that every request to view or manage objects stored on the Chef server is authorized.</p> </td> <td> </td> </tr> <tr class=\"row-even\">\n<td>9090</td> <td>\n<p class=\"first\"><strong>oc-id</strong></p> <p class=\"last\">The <strong>oc-id</strong> service enables OAuth 2.0 authentication to the Chef server by external applications, including Chef Supermarket and Chef Analytics. OAuth 2.0 uses token-based authentication, where external applications use tokens that are issued by the <strong>oc-id</strong> provider. No special credentials—<code class=\"docutils literal\">webui_priv.pem</code> or privileged keys—are stored on the external application.</p> </td> <td> </td> </tr> <tr class=\"row-odd\">\n<td>8000</td> <td>\n<p class=\"first\"><strong>opscode-erchef</strong></p> <p>The <strong>opscode-erchef</strong> service is an Erlang-based service that is used to handle Chef server API requests to the following areas within the Chef server:</p> <ul class=\"last simple\"> <li>Cookbooks</li> <li>Data bags</li> <li>Environments</li> <li>Nodes</li> <li>Roles</li> <li>Sandboxes</li> <li>Search</li> </ul> </td> <td> </td> </tr> </tbody> </table>    <h3 id=\"gre-tunnels\">GRE Tunnels</h3> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">This option is sometimes necessary when the Chef server is configured for high availability using DRBD.</p> </div> <p>Occasionally, a GRE tunnel will be required to handle the VRRP traffic. To accomplish this, set the following in <code class=\"docutils literal\">/var/opt/opscode/keepalived/bin/tunnel.sh</code> on the back-end server that will be used for bootstrapping:</p> <pre class=\"highlight-bash\" data-language=\"bash\">#!/bin/sh\nip tunnel add pc mode gre remote VRRP_IP_OF_PEER local MY_IP ttl 25\nip link set pc up\nip addr add 172.18.16.1 dev pc\nip route add 172.18.16.0/24 dev pc</pre> <p>Replace <code class=\"docutils literal\">VRRP_IP_OF_PEER</code> with the IP address of the server on the other end of the tunnel, and <code class=\"docutils literal\">MY_IP</code> with the IP address of the server on which the script will be located.</p> <p>The <code class=\"docutils literal\">172.17.16.**</code> network addresses used in the previous examples could be any unused reserved IP address space.</p> <p>Set the following in <code class=\"docutils literal\">/etc/opscode/chef-server.rb</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">backend_vip \"192.168.141.108\",\n  :ipaddress =&gt; \"192.168.141.108\",\n  :device =&gt; \"eth0\"</pre> <p>And set the Keepalived unicast addresses to the GRE tunnel addresses.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/install_server_ha_drbd.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/install_server_ha_drbd.html</a>\n  </p>\n</div>\n","server_12-5/upgrade_server":"<h1 id=\"upgrade-to-chef-server-title-12\">Upgrade to Chef Server 12</h1> <p>The following sections describe the upgrade process for Chef server 12.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Be sure to back up the Chef server data before starting the upgrade process.</p> </div>  <h2 id=\"from-chef-server-title-12\">From Chef Server 12</h2> <p>There are two upgrade scenarios for upgrades from earlier versions of Chef server 12 to a newer version of Chef server 12:</p> <ul class=\"simple\"> <li><a class=\"reference external\" href=\"https://docs.chef.io/upgrade_server.html#standalone\">Standalone</a></li> <li><a class=\"reference external\" href=\"https://docs.chef.io/upgrade_server.html#high-availability\">High availability</a></li> </ul>  <h3 id=\"standalone\">Standalone</h3> <p>This section describes the upgrade process for a standalone configuration. The upgrade process will require downtime equal to the amount of time it takes to stop the server, run dpkg or RPM Package Manager, and then upgrade the server.</p> <p>To upgrade to Chef server 12 from a standalone Chef server server, do the following:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Verify that the <code class=\"docutils literal\">make</code> command is available on the Chef server server. If it is not available, install the <code class=\"docutils literal\">make</code> command.</p> </li> <li>\n<p class=\"first\">Run the following command to make sure all services are in a sane state.</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Stop the server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop</pre> </li> <li>\n<p class=\"first\">Run dpkg or RPM Package Manager. For dpkg:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -D10 -i /path/to/chef-server-core-&lt;version&gt;.deb</pre> <p>where <code class=\"docutils literal\">-D</code> enables debugging and <code class=\"docutils literal\">10</code> creates output for each file that is processed during the upgrade. See the man pages for dpkg for more information about this option.</p> <p>For RPM Package Manager:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh --nopostun /path/to/chef-server-core-&lt;version&gt;.rpm</pre> </li> <li>\n<p class=\"first\">Upgrade the server with the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl upgrade</pre> </li> <li>\n<p class=\"first\">Start Chef server 12:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start</pre> </li> <li>\n<p class=\"first\">After the upgrade process is complete and everything is tested and verified to be working properly, clean up the server by removing all of the old data:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl cleanup</pre> </li> <li>\n<p>Enable additional features of the Chef server! The packages may be downloaded directly as part of the installation process or they may be first downloaded to a local directory, and then installed.</p> <p><strong>Use Downloads</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are not behind a firewall (and have connectivity to <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a>), these packages can be installed as described below.</p> <table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"80%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Command</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Chef Manage</td> <td>\n<p class=\"first\">Use Chef management console to manage data bags, attributes, run-lists, roles, environments, and cookbooks from a web user interface.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-manage</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ chef-manage-ctl reconfigure</pre> </td> </tr> <tr class=\"row-odd\">\n<td>Chef Push Jobs</td> <td>\n<p class=\"first\">Use Chef push jobs to run jobs—an action or a command to be executed—against nodes independently of a chef-client run.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install opscode-push-jobs-server</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ opscode-push-jobs-server-ctl reconfigure</pre> </td> </tr> <tr class=\"row-even\">\n<td>Chef Replication</td> <td>\n<p class=\"first\">Use Chef replication to asynchronously distribute cookbook, environment, role, and data bag data from a single, primary Chef server to one (or more) replicas of that Chef server.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-sync</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ chef-sync-ctl reconfigure</pre> </td> </tr> <tr class=\"row-odd\">\n<td>Reporting</td> <td>\n<p class=\"first\">Use Reporting to keep track of what happens during every chef-client runs across all of the infrastructure being managed by Chef. Run Reporting with Chef management console to view reports from a web user interface.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install opscode-reporting</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ opscode-reporting-ctl reconfigure</pre> </td> </tr> </tbody> </table> <p><strong>Use Local Packages</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are behind a firewall (and may not have connectivity to packages.chef.io), these packages can be downloaded from <a class=\"reference external\" href=\"https://downloads.chef.io/chef-manage/\">https://downloads.chef.io/chef-manage/</a>, and then installed manually. First download the package that is appropriate for the platform, save it to a local path, and then run the <code class=\"docutils literal\">install</code> command using the <code class=\"docutils literal\">--path</code> option to specify the directory in which the package is located:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install PACKAGE_NAME --path /path/to/package/directory</pre> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install chef-manage --path /root/packages</pre> <p>The <code class=\"docutils literal\">chef-server-ctl</code> command will install the first <code class=\"docutils literal\">chef-manage</code> package found in the <code class=\"docutils literal\">/root/packages</code> directory.</p> </li> </ol>   <h3 id=\"high-availability\">High Availability</h3> <p>This section describes the upgrade process from a high availability configuration. The upgrade process will require downtime equal to the amount of time it takes to stop the server, run dpkg or RPM Package Manager, and then upgrade the server.</p> <p>To upgrade to Chef server 12 from a high availability Chef server server, do the following:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Verify that the <code class=\"docutils literal\">make</code> command is available on the primary backend Chef server server. If it is not available, install the <code class=\"docutils literal\">make</code> command.</p> </li> <li>\n<p class=\"first\">Run the following on all servers to make sure all services are in a sane state.</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Stop all of the front end servers:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop</pre> </li> <li>\n<p class=\"first\">Identify the name of the original non-bootstrap backend server. This is the back end server that does <strong>not</strong> have <code class=\"docutils literal\">:bootstrap =&gt; true</code> in <code class=\"docutils literal\">/etc/opscode/private-chef.rb</code>.</p> </li> <li>\n<p class=\"first\">Stop Keepalived on the original non-bootstrap backend server. This will ensure that the bootstrap back end server is the active server. This action may trigger a failover.</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop keepalived</pre> </li> <li>\n<p class=\"first\">Run dpkg or RPM Package Manager on all servers. For dpkg:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -D10 -i /path/to/chef-server-core-&lt;version&gt;.deb</pre> <p>where <code class=\"docutils literal\">-D</code> enables debugging and <code class=\"docutils literal\">10</code> creates output for each file that is processed during the upgrade. See the man pages for dpkg for more information about this option.</p> <p>For RPM Package Manager:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh --nopostun /path/to/chef-server-core-&lt;version&gt;.rpm</pre> </li> <li>\n<p class=\"first\">On the primary back end server, stop all services except Keepalived. With Chef server 12, the Keepalived service will not be stopped with the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop</pre> <p>If the upgrade process times out, re-run the command until it finishes successfully.</p> </li> <li>\n<p class=\"first\">Upgrade the back end primary server with the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl upgrade</pre> <p>If the upgrade process times out, re-run the command until it finishes successfully.</p> </li> <li>\n<p class=\"first\">Copy the entire <code class=\"docutils literal\">/etc/opscode</code> directory from the back end primary server to all front and back end nodes. For example, from each server run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ scp -r &lt;Bootstrap server IP&gt;:/etc/opscode /etc</pre> <p>or from the back end primary server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ scp -r /etc/opscode &lt;each servers IP&gt;:/etc</pre> </li> <li>\n<p class=\"first\">Upgrade the back end secondary server with the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl upgrade</pre> <p>In some instances, after the upgrade processes is complete, it may be required to stop Keepalived on the back end secondary server, then restart Keepalived on the back end primary server, and then restart Keepalived on the back end secondary server.</p> </li> <li>\n<p class=\"first\">Upgrade all front end servers with the following commands:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl upgrade</pre> </li> <li>\n<p class=\"first\">Run the following command on all front end servers and the primary back end server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Do not run this command on the secondary back-end server!</p> </div> </li> <li>\n<p class=\"first\">After the upgrade process is complete, the state of the system after the upgrade has been tested and verified, and everything looks satisfactory, remove old data, services, and configuration by running the following command on each server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl cleanup</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The message <code class=\"docutils literal\">[ERROR] opscode-chef-mover is not running</code> is expected, does not indicate an actual error, and is safe to ignore.</p> </div> </li> <li>\n<p>Enable additional features of the Chef server! The packages may be downloaded directly as part of the installation process or they may be first downloaded to a local directory, and then installed.</p> <p><strong>Use Downloads</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are not behind a firewall (and have connectivity to <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a>), these packages can be installed as described below.</p> <table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"80%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Command</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Chef Manage</td> <td>\n<p class=\"first\">Use Chef management console to manage data bags, attributes, run-lists, roles, environments, and cookbooks from a web user interface.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-manage</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ chef-manage-ctl reconfigure</pre> </td> </tr> <tr class=\"row-odd\">\n<td>Chef Push Jobs</td> <td>\n<p class=\"first\">Use Chef push jobs to run jobs—an action or a command to be executed—against nodes independently of a chef-client run.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install opscode-push-jobs-server</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ opscode-push-jobs-server-ctl reconfigure</pre> </td> </tr> <tr class=\"row-even\">\n<td>Chef Replication</td> <td>\n<p class=\"first\">Use Chef replication to asynchronously distribute cookbook, environment, role, and data bag data from a single, primary Chef server to one (or more) replicas of that Chef server.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-sync</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ chef-sync-ctl reconfigure</pre> </td> </tr> <tr class=\"row-odd\">\n<td>Reporting</td> <td>\n<p class=\"first\">Use Reporting to keep track of what happens during every chef-client runs across all of the infrastructure being managed by Chef. Run Reporting with Chef management console to view reports from a web user interface.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install opscode-reporting</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ opscode-reporting-ctl reconfigure</pre> </td> </tr> </tbody> </table> <p><strong>Use Local Packages</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are behind a firewall (and may not have connectivity to packages.chef.io), these packages can be downloaded from <a class=\"reference external\" href=\"https://downloads.chef.io/chef-manage/\">https://downloads.chef.io/chef-manage/</a>, and then installed manually. First download the package that is appropriate for the platform, save it to a local path, and then run the <code class=\"docutils literal\">install</code> command using the <code class=\"docutils literal\">--path</code> option to specify the directory in which the package is located:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install PACKAGE_NAME --path /path/to/package/directory</pre> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install chef-manage --path /root/packages</pre> <p>The <code class=\"docutils literal\">chef-server-ctl</code> command will install the first <code class=\"docutils literal\">chef-manage</code> package found in the <code class=\"docutils literal\">/root/packages</code> directory.</p> </li> </ol>    <h2 id=\"from-chef-server-oec\">From Enterprise Chef</h2> <p>There are two upgrade scenarios for upgrades from Enterprise Chef 11 to Chef server 12:</p> <ul class=\"simple\"> <li><a class=\"reference external\" href=\"https://docs.chef.io/upgrade_server.html#id1\">Standalone</a></li> <li><a class=\"reference external\" href=\"https://docs.chef.io/upgrade_server.html#id2\">High availability</a></li> </ul> <p>Before upgrading, please <a class=\"reference external\" href=\"https://docs.chef.io/upgrade_server_notes.html\">view the notes</a> for more background on the upgrade process from Enterprise Chef 11 to Chef server 12.</p>  <h3 id=\"id1\">Standalone</h3> <p>This section describes the upgrade process from a standalone Enterprise Chef 11 to Chef server 12. The upgrade process will require downtime equal to the amount of time it takes to stop the server, run dpkg or RPM Package Manager, and then upgrade the server. The final step will remove older components (like CouchDB) and will destroy the data after the upgrade process is complete.</p> <p>To upgrade to Chef server 12 from a standalone Enterprise Chef server, do the following:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Verify that the <code class=\"docutils literal\">make</code> command is available on the Enterprise Chef server. If it is not available, install the <code class=\"docutils literal\">make</code> command.</p> </li> <li>\n<p class=\"first\">Run the following command to make sure all services are in a sane state.</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ private-chef-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Stop the server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ private-chef-ctl stop</pre> </li> <li>\n<p class=\"first\">Run dpkg or RPM Package Manager. For dpkg:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -D10 -i /path/to/chef-server-core-&lt;version&gt;.deb</pre> <p>where <code class=\"docutils literal\">-D</code> enables debugging and <code class=\"docutils literal\">10</code> creates output for each file that is processed during the upgrade. See the man pages for dpkg for more information about this option.</p> <p>For RPM Package Manager:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh --nopostun /path/to/chef-server-core-&lt;version&gt;.rpm</pre> </li> <li>\n<p class=\"first\">Upgrade the server with the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl upgrade</pre> </li> <li>\n<p class=\"first\">Start Chef server 12:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start</pre> </li> <li>\n<p class=\"first\">After the upgrade process is complete and everything is tested and verified to be working properly, clean up the server by removing all of the old data:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl cleanup</pre> </li> <li>\n<p>Enable additional features of the Chef server! The packages may be downloaded directly as part of the installation process or they may be first downloaded to a local directory, and then installed.</p> <p><strong>Use Downloads</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are not behind a firewall (and have connectivity to <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a>), these packages can be installed as described below.</p> <table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"80%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Command</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Chef Manage</td> <td>\n<p class=\"first\">Use Chef management console to manage data bags, attributes, run-lists, roles, environments, and cookbooks from a web user interface.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-manage</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ chef-manage-ctl reconfigure</pre> </td> </tr> <tr class=\"row-odd\">\n<td>Chef Push Jobs</td> <td>\n<p class=\"first\">Use Chef push jobs to run jobs—an action or a command to be executed—against nodes independently of a chef-client run.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install opscode-push-jobs-server</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ opscode-push-jobs-server-ctl reconfigure</pre> </td> </tr> <tr class=\"row-even\">\n<td>Chef Replication</td> <td>\n<p class=\"first\">Use Chef replication to asynchronously distribute cookbook, environment, role, and data bag data from a single, primary Chef server to one (or more) replicas of that Chef server.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-sync</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ chef-sync-ctl reconfigure</pre> </td> </tr> <tr class=\"row-odd\">\n<td>Reporting</td> <td>\n<p class=\"first\">Use Reporting to keep track of what happens during every chef-client runs across all of the infrastructure being managed by Chef. Run Reporting with Chef management console to view reports from a web user interface.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install opscode-reporting</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ opscode-reporting-ctl reconfigure</pre> </td> </tr> </tbody> </table> <p><strong>Use Local Packages</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are behind a firewall (and may not have connectivity to packages.chef.io), these packages can be downloaded from <a class=\"reference external\" href=\"https://downloads.chef.io/chef-manage/\">https://downloads.chef.io/chef-manage/</a>, and then installed manually. First download the package that is appropriate for the platform, save it to a local path, and then run the <code class=\"docutils literal\">install</code> command using the <code class=\"docutils literal\">--path</code> option to specify the directory in which the package is located:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install PACKAGE_NAME --path /path/to/package/directory</pre> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install chef-manage --path /root/packages</pre> <p>The <code class=\"docutils literal\">chef-server-ctl</code> command will install the first <code class=\"docutils literal\">chef-manage</code> package found in the <code class=\"docutils literal\">/root/packages</code> directory.</p> </li> </ol>   <h3 id=\"id2\">High Availability</h3> <p>This section describes the upgrade process from a high availability Enterprise Chef 11 to Chef server 12. The upgrade process will require downtime equal to the amount of time it takes to stop the server, run dpkg or RPM Package Manager, and then upgrade the server. The final step will remove older components (like CouchDB) and will destroy the data after the upgrade process is complete.</p> <p>To upgrade to Chef server 12 from a high availability Enterprise Chef server, do the following:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Verify that the <code class=\"docutils literal\">make</code> command is available on the primary backend Enterprise Chef server. If it is not available, install the <code class=\"docutils literal\">make</code> command.</p> </li> <li>\n<p class=\"first\">Run the following on all servers to make sure all services are in a sane state.</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ private-chef-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Stop all of the front end servers:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ private-chef-ctl stop</pre> </li> <li>\n<p class=\"first\">Identify the name of the original non-bootstrap backend server. This is the back end server that does <strong>not</strong> have <code class=\"docutils literal\">:bootstrap =&gt; true</code> in <code class=\"docutils literal\">/etc/opscode/private-chef.rb</code>.</p> </li> <li>\n<p class=\"first\">Stop Keepalived on the original non-bootstrap backend server. This will ensure that the bootstrap back end server is the active server. This action may trigger a failover.</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ private-chef-ctl stop keepalived</pre> </li> <li>\n<p class=\"first\">Run dpkg or RPM Package Manager on all servers. For dpkg:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -D10 -i /path/to/chef-server-core-&lt;version&gt;.deb</pre> <p>where <code class=\"docutils literal\">-D</code> enables debugging and <code class=\"docutils literal\">10</code> creates output for each file that is processed during the upgrade. See the man pages for dpkg for more information about this option.</p> <p>For RPM Package Manager:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh --nopostun /path/to/chef-server-core-&lt;version&gt;.rpm</pre> </li> <li>\n<p class=\"first\">On the primary back end server, stop all services except Keepalived. With Chef server 12, the Keepalived service will not be stopped with the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop</pre> <p>If the upgrade process times out, re-run the command until it finishes successfully.</p> </li> <li>\n<p class=\"first\">Upgrade the back end primary server with the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl upgrade</pre> <p>If the upgrade process times out, re-run the command until it finishes successfully.</p> </li> <li>\n<p class=\"first\">Copy the entire <code class=\"docutils literal\">/etc/opscode</code> directory from the back end primary server to all front and back end nodes. For example, from each server run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ scp -r &lt;Bootstrap server IP&gt;:/etc/opscode /etc</pre> <p>or from the back end primary server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ scp -r /etc/opscode &lt;each servers IP&gt;:/etc</pre> </li> <li>\n<p class=\"first\">Upgrade the back end secondary server with the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl upgrade</pre> <p>In some instances, after the upgrade processes is complete, it may be required to stop Keepalived on the back end secondary server, then restart Keepalived on the back end primary server, and then restart Keepalived on the back end secondary server.</p> </li> <li>\n<p class=\"first\">Upgrade all front end servers with the following commands:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl upgrade</pre> </li> <li>\n<p class=\"first\">Run the following command on all front end servers and the primary back end server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Do not run this command on the secondary back-end server!</p> </div> </li> <li>\n<p class=\"first\">After the upgrade process is complete, the state of the system after the upgrade has been tested and verified, and everything looks satisfactory, remove old data, services, and configuration by running the following command on each server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl cleanup</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The message <code class=\"docutils literal\">[ERROR] opscode-chef-mover is not running</code> is expected, does not indicate an actual error, and is safe to ignore.</p> </div> </li> <li>\n<p>Enable additional features of the Chef server! The packages may be downloaded directly as part of the installation process or they may be first downloaded to a local directory, and then installed.</p> <p><strong>Use Downloads</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are not behind a firewall (and have connectivity to <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a>), these packages can be installed as described below.</p> <table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"80%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Command</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Chef Manage</td> <td>\n<p class=\"first\">Use Chef management console to manage data bags, attributes, run-lists, roles, environments, and cookbooks from a web user interface.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-manage</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ chef-manage-ctl reconfigure</pre> </td> </tr> <tr class=\"row-odd\">\n<td>Chef Push Jobs</td> <td>\n<p class=\"first\">Use Chef push jobs to run jobs—an action or a command to be executed—against nodes independently of a chef-client run.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install opscode-push-jobs-server</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ opscode-push-jobs-server-ctl reconfigure</pre> </td> </tr> <tr class=\"row-even\">\n<td>Chef Replication</td> <td>\n<p class=\"first\">Use Chef replication to asynchronously distribute cookbook, environment, role, and data bag data from a single, primary Chef server to one (or more) replicas of that Chef server.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-sync</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ chef-sync-ctl reconfigure</pre> </td> </tr> <tr class=\"row-odd\">\n<td>Reporting</td> <td>\n<p class=\"first\">Use Reporting to keep track of what happens during every chef-client runs across all of the infrastructure being managed by Chef. Run Reporting with Chef management console to view reports from a web user interface.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install opscode-reporting</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ opscode-reporting-ctl reconfigure</pre> </td> </tr> </tbody> </table> <p><strong>Use Local Packages</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are behind a firewall (and may not have connectivity to packages.chef.io), these packages can be downloaded from <a class=\"reference external\" href=\"https://downloads.chef.io/chef-manage/\">https://downloads.chef.io/chef-manage/</a>, and then installed manually. First download the package that is appropriate for the platform, save it to a local path, and then run the <code class=\"docutils literal\">install</code> command using the <code class=\"docutils literal\">--path</code> option to specify the directory in which the package is located:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install PACKAGE_NAME --path /path/to/package/directory</pre> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install chef-manage --path /root/packages</pre> <p>The <code class=\"docutils literal\">chef-server-ctl</code> command will install the first <code class=\"docutils literal\">chef-manage</code> package found in the <code class=\"docutils literal\">/root/packages</code> directory.</p> </li> </ol>    <h2 id=\"from-chef-server-osc\">From Open Source Chef</h2> <p>This section describes the upgrade process from a standalone configuration of Open Source Chef 11.1.0 (or higher) to a standalone configuration of Chef server 12. The upgrade process will require downtime equal to the amount of time it takes to stop the server, run dpkg or RPM Package Manager, and then upgrade the server.</p> <p>Please <a class=\"reference external\" href=\"https://docs.chef.io/upgrade_server_open_source_notes.html\">view the notes</a> for more background on the upgrade process from Open Source Chef 11 to Chef server 12.</p> <p>To upgrade to Chef server 12 from the Open Source Chef server, do the following:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Run the following to make sure all services are in a sane state.</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Stop the Open Source Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop</pre> </li> <li>\n<p class=\"first\">Run dpkg or RPM Package Manager on the server to install Chef server 12. For dpkg:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -D10 -i /path/to/chef-server-core-&lt;version&gt;.deb</pre> <p>where <code class=\"docutils literal\">-D</code> enables debugging and <code class=\"docutils literal\">10</code> creates output for each file that is processed during the upgrade. See the man pages for dpkg for more information about this option.</p> <p>For RPM Package Manager:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -Uvh /path/to/chef-server-core-&lt;version&gt;.rpm</pre> <p>Chef server 12 is installed to <code class=\"docutils literal\">/opt/opscode</code>. (The existing Open Source Chef remains at <code class=\"docutils literal\">/opt/chef-server</code>.) From this point, the <code class=\"docutils literal\">chef-server-ctl</code> commands are running against the <code class=\"docutils literal\">/opt/opscode</code> location.</p> </li> <li>\n<p class=\"first\">Upgrade the server with the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl upgrade</pre> <p>The upgrade process will automatically detect the presence of Open Source Chef 11, and will step through the migration process, prompting for organization name details along the way.</p> <p>The migration process will first download the existing data from the Open Source Chef server, transform that data into the format required for Chef server 12, and then upload that data to the server.</p> </li> <li>\n<p class=\"first\">Before data can be uploaded, an organization must be created. When prompted, enter the organization name, and then a full organization name.</p> <p>The name must begin with a lower-case letter or digit, may only contain lower-case letters, digits, hyphens, and underscores, and must be between 1 and 255 characters. For example: <code class=\"docutils literal\">chef</code>.</p> <p>The full name must begin with a non-white space character and must be between 1 and 1023 characters. For example: <code class=\"docutils literal\">\"Chef Software, Inc.\"</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The upgrade process will automatically assign the organization name to the <code class=\"docutils literal\">default_orgname</code> setting in the chef-server.rb file. This setting ensures the new organization name is available for Chef server API requests, such as those made by the chef-client and by knife.</p> </div> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>If you receive a <code class=\"docutils literal\">missing read permission</code> error when running the <code class=\"docutils literal\">knife user list</code> subcommand after the upgrade process is finished, you will need to update the value for the <code class=\"docutils literal\">chef_server_url</code> setting in the knife.rb file. The default value for that setting is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_server_url 'https://CHEF_SERVER_NAME:443/'</pre> <p>and should be updated to add <code class=\"docutils literal\">organizations/ORG_NAME</code>:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">chef_server_url 'https://CHEF_SERVER_NAME:443/organizations/ORG_NAME'</pre> </div> </li> <li>\n<p class=\"first\">The Chef server is automatically restarted. A prompt is displayed that contains details about how to remove any temporary data that was created during the upgrade process.</p> </li> <li>\n<p>Enable additional features of the Chef server! The packages may be downloaded directly as part of the installation process or they may be first downloaded to a local directory, and then installed.</p> <p><strong>Update the Chef server URL</strong></p> <p>The URL for the Chef server needs to be updated on all nodes and workstations. In the client.rb file on each node and in the knife.rb file on each workstation, update the following setting:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_server_url \"https://url.for.server\"</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Any node that is bootstrapped from a workstation with the updated URL will automatically be assigned the new URL for the Chef server. Only existing nodes prior to the upgrade require the URL update.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Any chef-client or knife user that tries to access the Chef server after the upgrade will be able to do so as long as the <code class=\"docutils literal\">default_orgname</code> is set and is part of the default organization on the upgraded Chef server.</p> </div> <p><strong>Use Downloads</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are not behind a firewall (and have connectivity to <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a>), these packages can be installed as described below.</p> <table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"80%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Command</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Chef Manage</td> <td>\n<p class=\"first\">Use Chef management console to manage data bags, attributes, run-lists, roles, environments, and cookbooks from a web user interface.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-manage</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ chef-manage-ctl reconfigure</pre> </td> </tr> <tr class=\"row-odd\">\n<td>Chef Push Jobs</td> <td>\n<p class=\"first\">Use Chef push jobs to run jobs—an action or a command to be executed—against nodes independently of a chef-client run.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install opscode-push-jobs-server</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ opscode-push-jobs-server-ctl reconfigure</pre> </td> </tr> <tr class=\"row-even\">\n<td>Chef Replication</td> <td>\n<p class=\"first\">Use Chef replication to asynchronously distribute cookbook, environment, role, and data bag data from a single, primary Chef server to one (or more) replicas of that Chef server.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-sync</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ chef-sync-ctl reconfigure</pre> </td> </tr> <tr class=\"row-odd\">\n<td>Reporting</td> <td>\n<p class=\"first\">Use Reporting to keep track of what happens during every chef-client runs across all of the infrastructure being managed by Chef. Run Reporting with Chef management console to view reports from a web user interface.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install opscode-reporting</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ opscode-reporting-ctl reconfigure</pre> </td> </tr> </tbody> </table> <p><strong>Use Local Packages</strong></p> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are behind a firewall (and may not have connectivity to packages.chef.io), these packages can be downloaded from <a class=\"reference external\" href=\"https://downloads.chef.io/chef-manage/\">https://downloads.chef.io/chef-manage/</a>, and then installed manually. First download the package that is appropriate for the platform, save it to a local path, and then run the <code class=\"docutils literal\">install</code> command using the <code class=\"docutils literal\">--path</code> option to specify the directory in which the package is located:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install PACKAGE_NAME --path /path/to/package/directory</pre> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install chef-manage --path /root/packages</pre> <p>The <code class=\"docutils literal\">chef-server-ctl</code> command will install the first <code class=\"docutils literal\">chef-manage</code> package found in the <code class=\"docutils literal\">/root/packages</code> directory.</p> </li> </ol>   <h2 id=\"chef-manage-title\">Chef Manage</h2> <p>Chef management console can be upgraded as part of a standalone or high availability configuration:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">After upgrading the Chef server, upgrade each of the front end servers. For Red Hat and CentOS 6:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install opscode-manage</pre> <p>For Ubuntu, for the Chef management console 1.x to 2.x:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ apt-get install chef-manage</pre> </li> <li>\n<p class=\"first\">Reconfigure each of the front end servers:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-manage-ctl reconfigure</pre> </li> </ol>   <h2 id=\"push-jobs-title\">Chef Push Jobs</h2> <p>Chef push jobs can be upgraded as part of a standalone or high availability configuration:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">After upgrading the Chef server, run the following command on all front and back end servers:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install opscode-push-jobs-server</pre> </li> <li>\n<p class=\"first\">TCP protocol ports 10000-10003 must be open. This allows the Chef push jobs clients to communicate with the Chef push jobs server. In a configuration with both front and back ends, these ports only need to be open on the back end servers. The Chef push jobs server waits for connections from the Chef push jobs client (and never makes a connection to a Chef push jobs client).</p> </li> <li>\n<p class=\"first\">Reconfigure the Chef push jobs servers:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-push-jobs-server-ctl reconfigure</pre> </li> <li>\n<p class=\"first\">Run the following command on each of the back end servers:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> <p>This ensures that the Keepalived scripts are regenerated so they are aware of Chef push jobs.</p> </li> <li>\n<p class=\"first\">Restart the Chef push jobs components:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restart opscode-pushy-server</pre> </li> <li>\n<p class=\"first\">Verify the installation:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ opscode-push-jobs-server-ctl test</pre> </li> <li>\n<p class=\"first\">Install the Chef push jobs client on all nodes using the <strong>push-jobs</strong> cookbook, as needed.</p> </li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/upgrade_server.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/upgrade_server.html</a>\n  </p>\n</div>\n","server_12-5/server_manage_roles":"<h1 id=\"manage-roles\">Manage Roles</h1> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This topic is about using the Chef management console to manage roles.</p> </div> <p>A role is a way to define certain patterns and processes that exist across nodes in an organization as belonging to a single job function. Each role consists of zero (or more) attributes and a run-list. Each node can have zero (or more) roles assigned to it. When a role is run against a node, the configuration details of that node are compared against the attributes of the role, and then the contents of that role’s run-list are applied to the node’s configuration details. When a chef-client runs, it merges its own attributes and run-lists with those contained within each assigned role.</p>  <h2 id=\"manage\">Manage</h2> <p>Roles can be managed from the Chef management console web user interface.</p>  <h3 id=\"add-role\">Add Role</h3> <p>To add a role:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Roles</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Create</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Create Role</strong> dialog box, enter the name of the role and a description.</p> <img alt=\"_images/step_manage_webui_policy_role_add.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_role_add.png\"> <p>Click <strong>Next</strong>.</p> </li> <li>\n<p class=\"first\">Optional. Build the run-list from the list of available roles and recipes:</p> <img alt=\"_images/step_manage_webui_policy_role_add_run_list.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_role_add_run_list.png\"> <p>Click <strong>Next</strong>.</p> </li> <li>\n<p class=\"first\">Optional. Add default attributes as JSON data:</p> <img alt=\"_images/step_manage_webui_policy_role_add_default_attribute.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_role_add_default_attribute.png\"> <p>Click <strong>Next</strong>.</p> </li> <li>\n<p class=\"first\">Optional. Add override attributes as JSON data:</p> <img alt=\"_images/step_manage_webui_policy_role_add_override_attribute.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_role_add_override_attribute.png\"> </li> <li>\n<p class=\"first\">Click <strong>Create Role</strong>.</p> </li> </ol>   <h3 id=\"delete-role\">Delete Role</h3> <p>To delete a role:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Roles</strong>.</p> </li> <li>\n<p class=\"first\">Select a role.</p> </li> <li>\n<p class=\"first\">Click <strong>Delete</strong>.</p> <img alt=\"_images/step_manage_webui_policy_role_delete.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_role_delete.png\"> </li> </ol>   <h3 id=\"view-all-roles\">View All Roles</h3> <p>To view all roles uploaded to the Chef server organization:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Roles</strong>.</li> </ol>    <h2 id=\"run-lists\">Run-lists</h2> <p>A run-list defines all of the information necessary for Chef to configure a node into the desired state. A run-list is:</p> <ul class=\"simple\"> <li>An ordered list of roles and/or recipes that are run in the exact order defined in the run-list; if a recipe appears more than once in the run-list, the chef-client will not run it twice</li> <li>Always specific to the node on which it runs; nodes may have a run-list that is identical to the run-list used by other nodes</li> <li>Stored as part of the node object on the Chef server</li> <li>Maintained using knife, and then uploaded from the workstation to the Chef server, or is maintained using the Chef management console</li> </ul>  <h3 id=\"edit-role-run-list\">Edit Role Run-list</h3> <p>To edit the run-list for a role:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Roles</strong>.</p> </li> <li>\n<p class=\"first\">Select a role.</p> </li> <li>\n<p class=\"first\">Click <strong>Edit Run List</strong>.</p> <img alt=\"_images/step_manage_webui_policy_role_edit_run_list.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_role_edit_run_list.png\"> </li> <li>\n<p class=\"first\">Make your changes.</p> </li> <li>\n<p class=\"first\">Click <strong>Save Run List</strong>.</p> </li> </ol>    <h2 id=\"default-attributes\">Default Attributes</h2> <p>A <code class=\"docutils literal\">default</code> attribute is automatically reset at the start of every chef-client run and has the lowest attribute precedence. Use <code class=\"docutils literal\">default</code> attributes as often as possible in cookbooks.</p>  <h3 id=\"edit-default-attributes\">Edit Default Attributes</h3> <p>To edit default attributes for a role:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Roles</strong>.</p> </li> <li>\n<p class=\"first\">Select a role.</p> </li> <li>\n<p class=\"first\">Click the <strong>Attributes</strong> tab.</p> </li> <li>\n<p class=\"first\">Under <strong>Default Attributes</strong>, click <strong>Edit</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Edit Role Attributes</strong> dialog box, enter the JSON data that defines the attribute (or attributes).</p> <img alt=\"_images/step_manage_webui_policy_role_edit_attribute.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_role_edit_attribute.png\"> </li> <li>\n<p class=\"first\">Click <strong>Save Attributes</strong>.</p> </li> </ol>   <h3 id=\"view-default-attributes\">View Default Attributes</h3> <p>To view default attributes for a role:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Roles</strong>.</li> <li>Select a role.</li> <li>Click the <strong>Attributes</strong> tab.</li> </ol>    <h2 id=\"override-attributes\">Override Attributes</h2> <p>An <code class=\"docutils literal\">override</code> attribute is automatically reset at the start of every chef-client run and has a higher attribute precedence than <code class=\"docutils literal\">default</code>, <code class=\"docutils literal\">force_default</code>, and <code class=\"docutils literal\">normal</code> attributes. An <code class=\"docutils literal\">override</code> attribute is most often specified in a recipe, but can be specified in an attribute file, for a role, and/or for an environment. A cookbook should be authored so that it uses <code class=\"docutils literal\">override</code> attributes only when required.</p>  <h3 id=\"edit-override-attributes\">Edit Override Attributes</h3> <p>To edit override attributes for a role:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open the Chef management console.</p> </li> <li>\n<p class=\"first\">Click <strong>Policy</strong>.</p> </li> <li>\n<p class=\"first\">Click <strong>Roles</strong>.</p> </li> <li>\n<p class=\"first\">Select a role.</p> </li> <li>\n<p class=\"first\">Click the <strong>Attributes</strong> tab.</p> </li> <li>\n<p class=\"first\">Under <strong>Override Attributes</strong>, click <strong>Edit</strong>.</p> </li> <li>\n<p class=\"first\">In the <strong>Edit Role Attributes</strong> dialog box, enter the JSON data that defines the attribute (or attributes).</p> <img alt=\"_images/step_manage_webui_policy_role_edit_attribute.png\" src=\"https://docs.chef.io/release/server_12-5/_images/step_manage_webui_policy_role_edit_attribute.png\"> </li> <li>\n<p class=\"first\">Click <strong>Save Attributes</strong>.</p> </li> </ol>   <h3 id=\"view-override-attributes\">View Override Attributes</h3> <p>To view role details:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Roles</strong>.</li> <li>Select a role.</li> <li>Click the <strong>Details</strong> tab.</li> </ol>    <h2 id=\"permissions\">Permissions</h2> <p>Permissions are used in the Chef server to define how users and groups can interact with objects on the server. Permissions are configured per-organization.</p> <p>The Chef server includes the following object permissions:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Permission</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><strong>Delete</strong></td> <td>Use the <strong>Delete</strong> permission to define which users and groups may delete an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] delete [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Grant</strong></td> <td>Use the <strong>Grant</strong> permission to define which users and groups may configure permissions on an object. This permission is required for any user who configures permissions using the <strong>Administration</strong> tab in the Chef management console.</td> </tr> <tr class=\"row-even\">\n<td><strong>Read</strong></td> <td>Use the <strong>Read</strong> permission to define which users and groups may view the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] show [object_name]</code> argument to interact with objects on the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Update</strong></td> <td>Use the <strong>Update</strong> permission to define which users and groups may edit the details of an object. This permission is required for any user who uses the <code class=\"docutils literal\">knife [object] edit [object_name]</code> argument to interact with objects on the Chef server and for any chef-client to save node data to the Chef server at the conclusion of a chef-client run.</td> </tr> </tbody> </table>  <h3 id=\"set\">Set</h3> <p>To set permissions list for a role object:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Roles</strong>.</li> <li>Select a role.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>For each group listed under <strong>Name</strong>, select or de-select the <strong>Read</strong>, <strong>Update</strong>, <strong>Delete</strong>, and <strong>Grant</strong> permissions.</li> </ol>   <h3 id=\"update\">Update</h3> <p>To update the permissions list for a role object:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Roles</strong>.</li> <li>Select a role.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>Click the <strong>+ Add</strong> button and enter the name of the user or group to be added.</li> <li>Select or de-select <strong>Read</strong>, <strong>Update</strong>, <strong>Delete</strong>, and <strong>Grant</strong> to update the permissions list for the user or group.</li> </ol>   <h3 id=\"view\">View</h3> <p>To view permissions for a role object:</p> <ol class=\"arabic simple\"> <li>Open the Chef management console.</li> <li>Click <strong>Policy</strong>.</li> <li>Click <strong>Roles</strong>.</li> <li>Select a role.</li> <li>Click the <strong>Permissions</strong> tab.</li> <li>Set the appropriate permissions: <strong>Delete</strong>, <strong>Grant</strong>, <strong>Read</strong>, and/or <strong>Update</strong>.</li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/server_manage_roles.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/server_manage_roles.html</a>\n  </p>\n</div>\n","server_12-5/chef_search":"<h1 id=\"about-search\">About Search</h1> <p>Search indexes allow queries to be made for any type of data that is indexed by the Chef server, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the <code class=\"docutils literal\">search</code> subcommand in knife, the <code class=\"docutils literal\">search</code> method in the Recipe DSL, the search box in the Chef management console, and by using the <code class=\"docutils literal\">/search</code> or <code class=\"docutils literal\">/search/INDEX</code> endpoints in the Chef server API. The search engine is based on Apache Solr and is run from the Chef server.</p> <p>Many of the examples in this section use knife, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the Chef server API.</p>  <h2 id=\"search-indexes\">Search Indexes</h2> <p>A search index is a full-text list of objects that are stored on the Chef server, against which search queries can be made. The following search indexes are built:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Search Index Name</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">client</code></td> <td>API client</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">DATA_BAG_NAME</code></td> <td>A data bag is a global variable that is stored as JSON data and is accessible from a Chef server. The name of the search index is the name of the data bag. For example, if the name of the data bag was “admins” then a corresponding search query might look something like <code class=\"docutils literal\">search(:admins, \"*:*\")</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">environment</code></td> <td>An environment is a way to map an organization’s real-life workflow to what can be configured and managed when using Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">node</code></td> <td>A node is any server or virtual server that is configured to be maintained by a chef-client.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">role</code></td> <td>A role is a way to define certain patterns and processes that exist across nodes in an organization as belonging to a single job function.</td> </tr> </tbody> </table>  <h3 id=\"using-knife\">Using Knife</h3> <p>Use the <code class=\"docutils literal\">knife search</code> subcommand run a search query for information that is indexed on a Chef server.</p> <p><strong>Search by platform ID</strong></p> <p>To search for the IDs of all nodes running on the Amazon EC2 platform, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'ec2:*' -i</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">4 items found\n\nip-0A7CA19F.ec2.internal\n\nip-0A58CF8E.ec2.internal\n\nip-0A58E134.ec2.internal\n\nip-0A7CFFD5.ec2.internal</pre> <p><strong>Search by instance type</strong></p> <p>To search for the instance type (flavor) of all nodes running on the Amazon EC2 platform, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'ec2:*' -a ec2.instance_type</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">4 items found\n\nec2.instance_type:  m1.large\nid:                 ip-0A7CA19F.ec2.internal\n\nec2.instance_type:  m1.large\nid:                 ip-0A58CF8E.ec2.internal\n\nec2.instance_type:  m1.large\nid:                 ip-0A58E134.ec2.internal\n\nec2.instance_type:  m1.large\nid:                 ip-0A7CFFD5.ec2.internal</pre> <p><strong>Search by recipe</strong></p> <p>To search for recipes that are used by a node, use the <code class=\"docutils literal\">recipes</code> attribute to search for the recipe names, enter something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'recipes:recipe_name'</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node '*:*' -a recipes | grep 'recipe_name'</pre> <p><strong>Search by cookbook, then recipe</strong></p> <p>To search for cookbooks on a node, use the <code class=\"docutils literal\">recipes</code> attribute followed by the <code class=\"docutils literal\">cookbook::recipe</code> pattern, escaping both of the <code class=\"docutils literal\">:</code> characters. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'recipes:cookbook_name\\:\\:recipe_name'</pre> <p><strong>Search by node</strong></p> <p>To search for all nodes running Ubuntu, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'platform:ubuntu'</pre> <p><strong>Search by node and environment</strong></p> <p>To search for all nodes running CentOS in the production environment, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'chef_environment:production AND platform:centos'</pre> <p><strong>Search for nested attributes</strong></p> <p>To find a nested attribute, use a pattern similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node &lt;query_to_run&gt; -a &lt;main_attribute&gt;.&lt;nested_attribute&gt;</pre> <p><strong>Search for multiple attributes</strong></p> <p>To build a search query to use more than one attribute, use an underscore (<code class=\"docutils literal\">_</code>) to separate each attribute. For example, the following query will search for all nodes running a specific version of Ruby:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node \"languages_ruby_version:1.9.3\"</pre> <p><strong>Search for nested attributes using a search query</strong></p> <p>To build a search query that can find a nested attribute:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node name:&lt;node_name&gt; -a kernel.machine</pre> <p><strong>Use a test query</strong></p> <p>To test a search query that will be used in a <code class=\"docutils literal\">knife ssh</code> subcommand:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node \"role:web NOT name:web03\"</pre> <p>where the query in the previous example will search all servers that have the <code class=\"docutils literal\">web</code> role, but not on the server named <code class=\"docutils literal\">web03</code>.</p>    <h2 id=\"query-syntax\">Query Syntax</h2> <p>A search query is comprised of two parts: the key and the search pattern. A search query has the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">key:search_pattern</pre> <p>where <code class=\"docutils literal\">key</code> is a field name that is found in the JSON description of an indexable object on the Chef server (a role, node, client, environment, or data bag) and <code class=\"docutils literal\">search_pattern</code> defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both <code class=\"docutils literal\">key</code> and <code class=\"docutils literal\">search_pattern</code> are case-sensitive; <code class=\"docutils literal\">key</code> has limited support for multiple character wildcard matching using an asterisk (“*”) (and as long as it is not the first character).</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Search queries may not contain newlines.</p> </div>   <h2 id=\"filter-search-results\">Filter Search Results</h2> <p>Use <code class=\"docutils literal\">:filter_result</code> as part of a search query to filter the search output based on the pattern specified by a Hash. Only attributes in the Hash will be returned.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Prior to chef-client 12.0, this functionality was available from the <code class=\"docutils literal\">partial_search</code> cookbook and was referred to as “partial search”.</p> </div> <p>The syntax for the <code class=\"docutils literal\">search</code> method that uses <code class=\"docutils literal\">:filter_result</code> is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:index, 'query',\n  :filter_result =&gt; { 'foo' =&gt; [ 'abc' ],\n                      'bar' =&gt; [ '123' ],\n                      'baz' =&gt; [ 'sea', 'power' ]\n                    }\n      ).each do |result|\n  puts result['foo']\n  puts result['bar']\n  puts result['baz']\nend</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">:index</code> is of name of the index on the Chef server against which the search query will run: <code class=\"docutils literal\">:client</code>, <code class=\"docutils literal\">:data_bag_name</code>, <code class=\"docutils literal\">:environment</code>, <code class=\"docutils literal\">:node</code>, and <code class=\"docutils literal\">:role</code>\n</li> <li>\n<code class=\"docutils literal\">'query'</code> is a valid search query against an object on the Chef server</li> <li>\n<code class=\"docutils literal\">:filter_result</code> defines a Hash of values to be returned</li> </ul> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:node, 'role:web',\n  :filter_result =&gt; { 'name' =&gt; [ 'name' ],\n                      'ip' =&gt; [ 'ipaddress' ],\n                      'kernel_version' =&gt; [ 'kernel', 'version' ]\n                    }\n      ).each do |result|\n  puts result['name']\n  puts result['ip']\n  puts result['kernel_version']\nend</pre>   <h2 id=\"keys\">Keys</h2> <p>A field name/description pair is available in the JSON object. Use the field name when searching for this information in the JSON object. Any field that exists in any JSON description for any role, node, chef-client, environment, or data bag can be searched.</p>  <h3 id=\"nested-fields\">Nested Fields</h3> <p>A nested field appears deeper in the JSON data structure. For example, information about a network interface might be several layers deep: <code class=\"docutils literal\">node[:network][:interfaces][:en1]</code>. When nested fields are present in a JSON structure, the chef-client will extract those nested fields to the top-level, flattening them into compound fields that support wildcard search patterns.</p> <p>By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor.</p> <p>Consider the following snippet of JSON data:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\"network\":\n  [\n  //snipped...\n    \"interfaces\",\n      {\"en1\": {\n        \"number\": \"1\",\n        \"flags\": [\n          \"UP\",\n          \"BROADCAST\",\n          \"SMART\",\n          \"RUNNING\",\n          \"SIMPLEX\",\n          \"MULTICAST\"\n        ],\n        \"addresses\": {\n          \"fe80::fa1e:dfff:fed8:63a2\": {\n            \"scope\": \"Link\",\n            \"prefixlen\": \"64\",\n            \"family\": \"inet6\"\n          },\n          \"f8:1e:df:d8:63:a2\": {\n            \"family\": \"lladdr\"\n          },\n          \"192.168.0.195\": {\n            \"netmask\": \"255.255.255.0\",\n            \"broadcast\": \"192.168.0.255\",\n            \"family\": \"inet\"\n          }\n        },\n        \"mtu\": \"1500\",\n        \"media\": {\n          \"supported\": {\n            \"autoselect\": {\n              \"options\": [\n\n              ]\n            }\n          },\n          \"selected\": {\n            \"autoselect\": {\n              \"options\": [\n\n              ]\n            }\n          }\n        },\n        \"type\": \"en\",\n        \"status\": \"active\",\n        \"encapsulation\": \"Ethernet\"\n      },\n  //snipped...</pre> <p>Before this data is indexed on the Chef server, the nested fields are extracted into the top level, similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">\"broadcast\" =&gt; \"192.168.0.255\",\n\"flags\"     =&gt; [\"UP\", \"BROADCAST\", \"SMART\", \"RUNNING\", \"SIMPLEX\", \"MULTICAST\"]\n\"mtu\"       =&gt; \"1500\"</pre> <p>which allows searches like the following to find data that is present in this node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"broadcast:192.168.0.*\"</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"mtu:1500\"</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"flags:UP\"</pre> <p>This data is also flattened into various compound fields, which follow the same pattern as the JSON hierarchy and use underscores (<code class=\"docutils literal\">_</code>) to separate the levels of data, similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\"># ...snip...\n\"network_interfaces_en1_addresses_192.168.0.195_broadcast\" =&gt; \"192.168.0.255\",\n\"network_interfaces_en1_addresses_fe80::fa1e:tldr_family\"  =&gt; \"inet6\",\n\"network_interfaces_en1_addresses\"                         =&gt; [\"fe80::fa1e:tldr\",\"f8:1e:df:tldr\",\"192.168.0.195\"]\n# ...snip...</pre> <p>which allows searches like the following to find data that is present in this node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"network_interfaces_en1_addresses:192.168.0.195\"</pre> <p>This flattened data structure also supports using wildcard compound fields, which allow searches to omit levels within the JSON data structure that are not important to the search query. In the following example, an asterisk (<code class=\"docutils literal\">*</code>) is used to show where the wildcard can exist when searching for a nested field:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">\"network_interfaces_*_flags\"     =&gt; [\"UP\", \"BROADCAST\", \"SMART\", \"RUNNING\", \"SIMPLEX\", \"MULTICAST\"]\n\"network_interfaces_*_addresses\" =&gt; [\"fe80::fa1e:dfff:fed8:63a2\", \"192.168.0.195\", \"f8:1e:df:d8:63:a2\"]\n\"network_interfaces_en0_media_*\" =&gt; [\"autoselect\", \"none\", \"1000baseT\", \"10baseT/UTP\", \"100baseTX\"]\n\"network_interfaces_en1_*\"       =&gt; [\"1\", \"UP\", \"BROADCAST\", \"SMART\", \"RUNNING\", \"SIMPLEX\", \"MULTICAST\",\n                                     \"fe80::fa1e:dfff:fed8:63a2\", \"f8:1e:df:d8:63:a2\", \"192.168.0.195\",\n                                     \"1500\", \"supported\", \"selected\", \"en\", \"active\", \"Ethernet\"]</pre> <p>For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">network_interfaces__flags</pre> <p>This query will search within the <code class=\"docutils literal\">flags</code> node, within the JSON structure, for each of <code class=\"docutils literal\">UP</code>, <code class=\"docutils literal\">BROADCAST</code>, <code class=\"docutils literal\">SMART</code>, <code class=\"docutils literal\">RUNNING</code>, <code class=\"docutils literal\">SIMPLEX</code>, and <code class=\"docutils literal\">MULTICAST</code>.</p>   <h3 id=\"examples\">Examples</h3> <p>To see the available keys for a node, enter the following (for a node named <code class=\"docutils literal\">staging</code>):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node show staging -Fj | less</pre> <p>to return a full JSON description of the node and to view the available keys with which any search query can be based.</p> <p>To use a question mark (<code class=\"docutils literal\">?</code>) to replace a single character in a wildcard search, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'platfor?:ubuntu'</pre> <p>To use an asterisk (<code class=\"docutils literal\">*</code>) to replace zero (or more) characters in a wildcard search, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'platfo*:ubuntu'</pre> <p>To find all IP address that are on the same network, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'network_interfaces__addresses:192.168*'</pre> <p>where <code class=\"docutils literal\">192.168*</code> is the network address for which the search will be run.</p> <p>To use a range search to find IP addresses within a subnet, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'network_interfaces_X_addresses:[192.168.0.* TO 192.168.127.*]'</pre> <p>where <code class=\"docutils literal\">192.168.0.* TO 192.168.127.*</code> defines the subnet range.</p>    <h2 id=\"patterns\">Patterns</h2> <p>A search pattern is a way to fine-tune search results by returning anything that matches some type of incomplete search query. There are four types of search patterns that can be used when searching the search indexes on the Chef server: exact, wildcard, range, and fuzzy.</p>  <h3 id=\"exact-matching\">Exact Matching</h3> <p>An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by Ruby or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (‘ ‘) and a search pattern with double quotes (” ”).</p> <p>To search in a specific data bag for a specific data bag item, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search admins 'id:charlie'</pre> <p>where <code class=\"docutils literal\">admins</code> is the name of the data bag and <code class=\"docutils literal\">charlie</code> is the name of the data bag item. Something similar to the following will be returned:</p> <pre class=\"highlight-bash\" data-language=\"bash\">1 items found\n_rev:       1-39ff4099f2510f477b4c26bef81f75b9\nchef_type:  data_bag_item\ncomment:    Charlie the Unicorn\ndata_bag:   admins\ngid:        ops\nid:         charlie\nshell:      /bin/zsh\nuid:        1005</pre> <p>To search in a specific data bag using a string to find any matching data bag item, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search admins 'comment:\"Charlie the Unicorn\"'</pre> <p>where <code class=\"docutils literal\">admins</code> is the name of the data bag and <code class=\"docutils literal\">Charlie the Unicorn</code> is the string that will be used during the search. Something similar to the following will be returned:</p> <pre class=\"highlight-bash\" data-language=\"bash\">1 items found\n_rev:       1-39ff4099f2510f477b4c26bef81f75b9\nchef_type:  data_bag_item\ncomment:    Charlie the Unicorn\ndata_bag:   admins\ngid:        ops\nid:         charlie\nshell:      /bin/zsh\nuid:        1005</pre>   <h3 id=\"wildcard-matching\">Wildcard Matching</h3> <p>A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:</p> <ul class=\"simple\"> <li>A question mark (<code class=\"docutils literal\">?</code>) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)</li> <li>An asterisk (<code class=\"docutils literal\">*</code>) can be used to replace any number of characters (including zero)</li> </ul> <p>To search for any node that contains the specified key, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'foo:*'</pre> <p>where <code class=\"docutils literal\">foo</code> is the name of the node.</p> <p>To search for a node using a partial name, enter one of the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'name:app*'</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'name:app1*.example.com'</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'name:app?.example.com'</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'name:app1.example.???'</pre> <p>to return <code class=\"docutils literal\">app1.example.com</code> (and any other node that matches any of the string searches above).</p>   <h3 id=\"range-matching\">Range Matching</h3> <p>A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (“[ ]”) to denote inclusive boundaries and curly braces (“{ }”) to denote exclusive boundaries and with the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">boundary TO boundary</pre> <p>where <code class=\"docutils literal\">TO</code> is required (and must be capitalized).</p> <p>A data bag named <code class=\"docutils literal\">sample</code> contains four data bag items: <code class=\"docutils literal\">abc</code>, <code class=\"docutils literal\">bar</code>, <code class=\"docutils literal\">baz</code>, and <code class=\"docutils literal\">quz</code>. All of the items in-between <code class=\"docutils literal\">bar</code> and <code class=\"docutils literal\">foo</code>, inclusive, can be searched for using an inclusive search pattern.</p> <p>To search using an inclusive range, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search sample \"id:[bar TO foo]\"</pre> <p>where square brackets (<code class=\"docutils literal\">[ ]</code>) are used to define the range.</p> <p>A data bag named <code class=\"docutils literal\">sample</code> contains four data bag items: <code class=\"docutils literal\">abc</code>, <code class=\"docutils literal\">bar</code>, <code class=\"docutils literal\">baz</code>, and <code class=\"docutils literal\">quz</code>. All of the items that are exclusive to <code class=\"docutils literal\">bar</code> and <code class=\"docutils literal\">foo</code> can be searched for using an exclusive search pattern.</p> <p>To search using an exclusive range, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search sample \"id:{bar TO foo}\"</pre> <p>where curly braces (<code class=\"docutils literal\">{ }</code>) are used to define the range.</p>   <h3 id=\"fuzzy-matching\">Fuzzy Matching</h3> <p>A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">\"search_query\"~edit_distance</pre> <p>where <code class=\"docutils literal\">search_query</code> is the string that will be used during the search and <code class=\"docutils literal\">edit_distance</code> is the proximity. A tilde (“~”) is used to separate the edit distance from the search query.</p> <p>To use a fuzzy search pattern enter something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search client \"name:boo~\"</pre> <p>where <code class=\"docutils literal\">boo~</code> defines the fuzzy search pattern. This will return something similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"total\": 1,\n  \"start\": 0,\n  \"rows\": [\n    {\n      \"public_key\": \"too long didn't read\",\n      \"name\": \"foo\",\n      \"_rev\": \"1-f11a58043906e33d39a686e9b58cd92f\",\n      \"json_class\": \"Chef::ApiClient\",\n      \"admin\": false,\n      \"chef_type\": \"client\"\n    }\n  ]\n}</pre>    <h2 id=\"operators\">Operators</h2> <p>An operator can be used to ensure that certain terms are included in the results, are excluded from the results, or are not included even when other aspects of the query match. Searches can use the following operators:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operator</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">AND</code></td> <td>Use to find a match when both terms exist.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">OR</code></td> <td>Use to find a match if either term exists.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">NOT</code></td> <td>Use to exclude the term after <code class=\"docutils literal\">NOT</code> from the search results.</td> </tr> </tbody> </table> <p>Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>Using <code class=\"docutils literal\">AND NOT</code> together may trigger an error. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ERROR: knife search failed: invalid search query:\n'datacenter%3A123%20AND%20NOT%20hostname%3Adev-%20AND%20NOT%20hostanem%3Asyslog-'\nParse error at offset: 38 Reason: Expected one of \\ at line 1, column 42 (byte 42) after AND</pre> <p>Use <code class=\"docutils literal\">-</code> instead of <code class=\"docutils literal\">NOT</code>. For example:</p> <pre class=\"last highlight-bash\" data-language=\"bash\">$ knife search sample \"id:foo AND -id:bar\"</pre> </div>  <h3 id=\"and\">AND</h3> <p>To join queries using the <code class=\"docutils literal\">AND</code> boolean operator, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search sample \"id:b* AND animal:dog\"</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">{\n  \"total\": 1,\n  \"start\": 0,\n  \"rows\": [\n    {\n      \"comment\": \"an item named baz\",\n      \"id\": \"baz\",\n      \"animal\": \"dog\"\n    }\n  ]\n}</pre> <p>Or, to find all of the computers running on the Microsoft Windows platform that are associated with a role named <code class=\"docutils literal\">jenkins</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'platform:windows AND roles:jenkins'</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">2 items found\n\nNode Name:   windows-server-2008r2.domain.com\nEnvironment: _default\nFQDN:        windows-server-2008r2\nIP:          0000::0000:0000:0000:0000\nRun List:    role[jenkins-windows]\nRoles:       jenkins-windows, jenkins\nRecipes:     jenkins-client::windows, jenkins::node_windows\nPlatform:    windows 6.1.7601\nTags:\n\nNode Name:   123-windows-2008r2-amd64-builder\nEnvironment: _default\nFQDN:        ABC-1234567890AB\nIP:          123.45.6.78\nRun List:    role[123-windows-2008r2-amd64-builder]\nRoles:       123-windows-2008r2-amd64-builder, jenkins\nRecipes:     jenkins::node_windows, git_windows\nPlatform:    windows 6.1.7601\nTags:</pre>   <h3 id=\"not\">NOT</h3> <p>To negate search results using the <code class=\"docutils literal\">NOT</code> boolean operator, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search sample \"(NOT id:foo)\"</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">{\n  \"total\": 4,\n  \"start\": 0,\n  \"rows\": [\n    {\n      \"comment\": \"an item named bar\",\n      \"id\": \"bar\",\n      \"animal\": \"cat\"\n    },\n    {\n      \"comment\": \"an item named baz\",\n      \"id\": \"baz\"\n      \"animal\": \"dog\"\n    },\n    {\n      \"comment\": \"an item named abc\",\n      \"id\": \"abc\",\n      \"animal\": \"unicorn\"\n    },\n    {\n      \"comment\": \"an item named qux\",\n      \"id\": \"qux\",\n      \"animal\", \"penguin\"\n    }\n  ]\n}</pre>   <h3 id=\"or\">OR</h3> <p>To join queries using the <code class=\"docutils literal\">OR</code> boolean operator, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search sample \"id:foo OR id:abc\"</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">{\n  \"total\": 2,\n  \"start\": 0,\n  \"rows\": [\n    {\n      \"comment\": \"an item named foo\",\n      \"id\": \"foo\",\n      \"animal\": \"pony\"\n    },\n    {\n      \"comment\": \"an item named abc\",\n      \"id\": \"abc\",\n      \"animal\": \"unicorn\"\n    }\n  ]\n}</pre>    <h2 id=\"special-characters\">Special Characters</h2> <p>A special character can be used to fine-tune a search query and to increase the accuracy of the search results. The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (<code class=\"docutils literal\">\\</code>):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">+  -  &amp;&amp;  | |  !  ( )  { }  [ ]  ^  \"  ~  *  ?  :  \\</pre> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">\\(1\\+1\\)\\:2</pre>   <h2 id=\"targets\">Targets</h2> <p>A search target is any object that has been indexed on the Chef server, including roles (and run-lists), nodes, environments, data bags, and any API client.</p>  <h3 id=\"roles-in-run-lists\">Roles in Run-lists</h3> <p>A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">roles</code> field is updated each time the chef-client is run; changes to a run-list will not affect <code class=\"docutils literal\">roles</code> until the next time the chef-client is run on the node.</p> </div> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Role Location</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Top-level</td> <td>\n<p class=\"first\">To find a node with a role in the top-level of its run-list, search within the <code class=\"docutils literal\">role</code> field (and escaping any special characters with the slash symbol) using the following syntax:</p> <pre class=\"highlight-python\" data-language=\"python\">role:ROLE_NAME</pre> <p class=\"last\">where <code class=\"docutils literal\">role</code> (singlular!) indicates the top-level run-list.</p> </td> </tr> <tr class=\"row-odd\">\n<td>Expanded</td> <td>\n<p class=\"first\">To find a node with a role in an expanded run-list, search within the <code class=\"docutils literal\">roles</code> field (and escaping any special characters with the slash symbol) using the following syntax:</p> <pre class=\"highlight-python\" data-language=\"python\">roles:ROLE_NAME</pre> <p class=\"last\">where <code class=\"docutils literal\">roles</code> (plural!) indicates the expanded run-list.</p> </td> </tr> </tbody> </table> <p>To search a top-level run-list for a role named <code class=\"docutils literal\">load_balancer</code> use the <code class=\"docutils literal\">knife search</code> subcommand from the command line or the <code class=\"docutils literal\">search</code> method in a recipe. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node role:load_balancer</pre> <p>and from within a recipe:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:node, 'role:load_balancer')</pre> <p>To search an expanded run-list for all nodes with the role <code class=\"docutils literal\">load_balancer</code> use the <code class=\"docutils literal\">knife search</code> subcommand from the command line or the <code class=\"docutils literal\">search</code> method in a recipe. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node roles:load_balancer</pre> <p>and from within a recipe:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:node, 'roles:load_balancer')</pre>   <h3 id=\"nodes\">Nodes</h3> <p>A node can be searched from a recipe by using the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:node, \"key:attribute\")</pre> <p>A wildcard can be used to replace characters within the search query.</p> <p>Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the Chef server. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">recipes</code> field is updated each time the chef-client is run; changes to a run-list will not affect <code class=\"docutils literal\">recipes</code> until the next time the chef-client is run on the node.</p> </div> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Node Location</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>In a specified recipe</td> <td>\n<p class=\"first\">To find a node with a specified recipe in the run-list, search within the <code class=\"docutils literal\">run_list</code> field (and escaping any special characters with the slash symbol) using the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:node, 'run_list:recipe\\[foo\\:\\:bar\\]')</pre> <p>where <code class=\"docutils literal\">recipe</code> (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the Ruby alternate quoting syntax:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">search(:node, %Q{run_list:\"recipe[#{the_recipe}]\"} )</pre> </td> </tr> <tr class=\"row-odd\">\n<td>In an expanded run-list</td> <td>\n<p class=\"first\">To find a node with a recipe in an expanded run-list, search within the <code class=\"docutils literal\">recipes</code> field (and escaping any special characters with the slash symbol) using the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">recipes:RECIPE_NAME</pre> <p class=\"last\">where <code class=\"docutils literal\">recipes</code> (plural!) indicates to search within an expanded run-list.</p> </td> </tr> </tbody> </table> <p>If you just want to use each result of the search and don’t care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># Print every node matching the search pattern\nsearch(:node, \"*:*\").each do |matching_node|\n  puts matching_node.to_s\nend</pre>   <h3 id=\"api-clients\">API Clients</h3> <p>An API client is any machine that has permission to use the Chef server API to communicate with the Chef server. An API client is typically a node (on which the chef-client runs) or a workstation (on which knife runs), but can also be any other machine configured to use the Chef server API.</p> <p>Sometimes when a role isn’t fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">username: \"mysql\"\npassword: \"MoveAlong\"\nhost:     \"10.40.64.202\"\nport:     \"3306\"</pre> <p>where <code class=\"docutils literal\">host</code> is the private IP address of the database server. Use the following knife query to view information about the node:</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife search node \"name:name_of_database_server\" --long</pre> <p>To access these settings as part of a recipe that is run on the web server, use code similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">db_server = search(:node, \"name:name_of_database_server\")\nprivate_ip = \"#{db_server[0][:rackspace][:private_ip]}\"\nputs private_ip</pre> <p>where the “[0]” is the 0 (zero) index for the <code class=\"docutils literal\">db_server</code> identifier. A single document is returned because the node is being searched on its unique name. The identifier <code class=\"docutils literal\">private_ip</code> will now have the value of the private IP address of the database server (<code class=\"docutils literal\">10.40.64.202</code>) and can then be used in templates as a variable, among other possible uses.</p>   <h3 id=\"environments\">Environments</h3> <p>An environment is a way to map an organization’s real-life workflow to what can be configured and managed when using Chef server. Every organization begins with a single environment called the <code class=\"docutils literal\">_default</code> environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization’s patterns and workflow. For example, creating <code class=\"docutils literal\">production</code>, <code class=\"docutils literal\">staging</code>, <code class=\"docutils literal\">testing</code>, and <code class=\"docutils literal\">development</code> environments. Generally, an environment is also associated with one (or more) cookbook versions.</p> <p>When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use knife to search for all of the servers running CentOS in an environment named “QA”, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife search node \"chef_environment:QA AND platform:centos\"</pre> <p>Or, to include the same search in a recipe, use a code block similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">qa_nodes = search(:node,\"chef_environment:QA\")\nqa_nodes.each do |qa_node|\n    # Do useful work specific to qa nodes only\nend</pre>   <h3 id=\"data-bags\">Data Bags</h3> <p>A data bag is a global variable that is stored as JSON data and is accessible from a Chef server. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search.</p> <p>Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use knife to search within a data bag named “admin_data” across all items, except for the “admin_users” item, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search admin_data \"(NOT id:admin_users)\"</pre> <p>Or, to include the same search query in a recipe, use a code block similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:admin_data, \"NOT id:admin_users\")</pre> <p>It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what “everything” is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named “admins”. For example, to find every administrator:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:admins, \"*:*\")</pre> <p>Or to search for an administrator named “charlie”:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:admins, \"id:charlie\")</pre> <p>Or to search for an administrator with a group identifier of “ops”:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:admins, \"gid:ops\")</pre> <p>Or to search for an administrator whose name begins with the letter “c”:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:admins, \"id:c*\")</pre> <p>Data bag items that are returned by a search query can be used as if they were a hash. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">charlie = search(:admins, \"id:charlie\").first\n# =&gt; variable 'charlie' is set to the charlie data bag item\ncharlie[\"gid\"]\n# =&gt; \"ops\"\ncharlie[\"shell\"]\n# =&gt; \"/bin/zsh\"</pre> <p>The following recipe can be used to create a user for each administrator by loading all of the items from the “admins” data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">admins = data_bag('admins')\n\nadmins.each do |login|\n  admin = data_bag_item('admins', login)\n  home = \"/home/#{login}\"\n\n  user(login) do\n    uid       admin['uid']\n    gid       admin['gid']\n    shell     admin['shell']\n    comment   admin['comment']\n    home      home\n    supports  :manage_home =&gt; true\n  end\n\nend</pre> <p>And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">admins = []\n\nsearch(:admins, \"*:*\").each do |admin|\n  login = admin[\"id\"]\n\n  admins &lt;&lt; login\n\n  home = \"/home/#{login}\"\n\n  user(login) do\n    uid       admin['uid']\n    gid       admin['gid']\n    shell     admin['shell']\n    comment   admin['comment']\n\n    home      home\n    supports  :manage_home =&gt; true\n  end\n\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/chef_search.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/chef_search.html</a>\n  </p>\n</div>\n","server_12-5/config_rb_server":"<h1 id=\"chef-server-rb-settings\">chef-server.rb Settings</h1> <p>The chef-server.rb file contains all of the non-default configuration settings used by the Chef server. (The default settings are built-in to the Chef server configuration and should only be added to the chef-server.rb file to apply non-default values.) These configuration settings are processed when the <code class=\"docutils literal\">chef-server-ctl reconfigure</code> command is run, such as immediately after setting up the Chef server or after making a change to the underlying configuration settings after the server has been deployed. The chef-server.rb file is a Ruby file, which means that conditional statements can be used in the configuration file.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The chef-server.rb file does not exist by default. To modify the settings for the Chef server, create a file named <code class=\"docutils literal\">chef-server.rb</code> in the <code class=\"docutils literal\">/etc/opscode/</code> directory.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This file was named private-chef.rb in previous versions of Enterprise Chef. After an upgrade to Chef server 12 from Enterprise Chef, the private-chef.rb file is symlinked to chef-server.rb. The private-chef.rb file is deprecated, starting with Chef server 12.</p> </div>  <h2 id=\"use-conditions\">Use Conditions</h2> <p>Use a <code class=\"docutils literal\">case</code> statement to apply different values based on whether the setting exists on the front-end or back-end servers. Add code to the server configuration file similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">role_name = ChefServer[\"servers\"][node['fqdn']][\"role\"]\ncase role_name\nwhen \"backend\"\n  # backend-specific configuration here\nwhen \"frontend\"\n  # frontend-specific configuration here\nend</pre>   <h2 id=\"recommended-settings\">Recommended Settings</h2> <p>The following settings are typically added to the server configuration file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">api_fqdn</code></dt> <dd>The FQDN for the Chef server. This setting is not in the server configuration file by default. When added, its value should be equal to the FQDN for the service URI used by the Chef server. For example: <code class=\"docutils literal\">api_fqdn \"chef.example.com\"</code>.</dd> <dt><code class=\"docutils literal\">bootstrap</code></dt> <dd>Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">ip_version</code></dt> <dd>Use to set the IP version: <code class=\"docutils literal\">\"ipv4\"</code> or <code class=\"docutils literal\">\"ipv6\"</code>. When set to <code class=\"docutils literal\">\"ipv6\"</code>, the API listens on IPv6 and front end and back end services communicate via IPv6 when a high availability configuration is used. When configuring for IPv6 in a high availability configuration, be sure to set the netmask on the IPv6 <code class=\"docutils literal\">backend_vip</code> attribute. Default value: <code class=\"docutils literal\">\"ipv4\"</code>.</dd> <dt><code class=\"docutils literal\">notification_email</code></dt> <dd>Default value: <code class=\"docutils literal\">info@example.com</code>.</dd> </dl>  <h3 id=\"ssl-protocols\">SSL Protocols</h3> <p>The following settings are often modified from the default as part of the tuning effort for the <strong>nginx</strong> service and to configure the Chef server to use SSL certificates:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">nginx['ssl_certificate']</code></dt> <dd>The SSL certificate used to verify communication over HTTPS. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">nginx['ssl_certificate_key']</code></dt> <dd>The certificate key used for SSL communication. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">nginx['ssl_ciphers']</code></dt> <dd>\n<p class=\"first\">The list of supported cipher suites that are used to establish a secure connection. To favor AES256 with ECDHE forward security, drop the <code class=\"docutils literal\">RC4-SHA:RC4-MD5:RC4:RSA</code> prefix. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">nginx['ssl_ciphers'] =  \"HIGH:MEDIUM:!LOW:!kEDH: \\\n                         !aNULL:!ADH:!eNULL:!EXP: \\\n                         !SSLv2:!SEED:!CAMELLIA: \\\n                         !PSK\"</pre> </dd> <dt><code class=\"docutils literal\">nginx['ssl_protocols']</code></dt> <dd>\n<p class=\"first\">The SSL protocol versions that are enabled. SSL 3.0 is supported by the Chef server; however, SSL 3.0 is an obsolete and insecure protocol. Transport Layer Security (TLS)—TLS 1.0, TLS 1.1, and TLS 1.2—has effectively replaced SSL 3.0, which provides for authenticated version negotiation between the chef-client and Chef server, which ensures the latest version of the TLS protocol is used. For the highest possible security, it is recommended to disable SSL 3.0 and allow all versions of the TLS protocol. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">nginx['ssl_protocols'] = \"TLSv1 TLSv1.1 TLSv1.2\"</pre> </dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference external\" href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">https://wiki.mozilla.org/Security/Server_Side_TLS</a> for more information about the values used with the <code class=\"docutils literal\">nginx['ssl_ciphers']</code> and <code class=\"docutils literal\">nginx['ssl_protocols']</code> settings.</p> </div> <p>For example, after copying the SSL certificate files to the Chef server, update the <code class=\"docutils literal\">nginx['ssl_certificate']</code> and <code class=\"docutils literal\">nginx['ssl_certificate_key']</code> settings to specify the paths to those files, and then (optionally) update the <code class=\"docutils literal\">nginx['ssl_ciphers']</code> and <code class=\"docutils literal\">nginx['ssl_protocols']</code> settings to reflect the desired level of hardness for the Chef server:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">nginx['ssl_certificate'] = \"/etc/pki/tls/private/name.of.pem\"\nnginx['ssl_certificate_key'] = \"/etc/pki/tls/private/name.of.key\"\nnginx['ssl_ciphers'] = \"HIGH:MEDIUM:!LOW:!kEDH:!aNULL:!ADH:!eNULL:!EXP:!SSLv2:!SEED:!CAMELLIA:!PSK\"\nnginx['ssl_protocols'] = \"TLSv1 TLSv1.1 TLSv1.2\"</pre>    <h2 id=\"optional-settings\">Optional Settings</h2> <p>The following settings are often used for performance tuning of the Chef server in larger installations.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>When changes are made to the chef-server.rb file the Chef server must be reconfigured by running the following command:</p> <pre class=\"last highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> </div> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Review the full list of <a class=\"reference internal\" href=\"config_rb_server_optional_settings\">optional settings</a> that can be added to the chef-server.rb file. Many of these optional settings should not be added without first consulting with Chef support.</p> </div>  <h3 id=\"bookshelf\">bookshelf</h3> <p>The following setting is often modified from the default as part of the tuning effort for the <strong>bookshelf</strong> service:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">bookshelf['vip']</code></dt> <dd>The virtual IP address. Default value: <code class=\"docutils literal\">node['fqdn']</code>.</dd> </dl>   <h3 id=\"opscode-account\">opscode-account</h3> <p>The following setting is often modified from the default as part of the tuning effort for the <strong>opscode-account</strong> service:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">opscode_account['worker_processes']</code></dt> <dd>The number of allowed worker processes. This value should be increased if requests made to the <strong>opscode-account</strong> service are timing out, but only if the front-end machines have available CPU and RAM. Default value: <code class=\"docutils literal\">4</code>.</dd> </dl>   <h3 id=\"opscode-erchef\">opscode-erchef</h3> <p>The following settings are often modified from the default as part of the tuning effort for the <strong>opscode-erchef</strong> service:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">opscode_erchef['db_pool_size']</code></dt> <dd>The number of open connections to PostgreSQL that are maintained by the service. If failures indicate that the <strong>opscode-erchef</strong> service ran out of connections, try increasing the <code class=\"docutils literal\">postgresql['max_connections']</code> setting. If failures persist, then increase this value (in small increments) and also increase the value for <code class=\"docutils literal\">postgresql['max_connections']</code>. Default value: <code class=\"docutils literal\">20</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['s3_url_ttl']</code></dt> <dd>The amount of time (in seconds) before connections to the server expire. If chef-client runs are timing out, increase this setting to <code class=\"docutils literal\">3600</code>, and then adjust again if necessary. Default value: <code class=\"docutils literal\">900</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['strict_search_result_acls']</code></dt> <dd>\n<p class=\"first\">Use to specify that search results only return objects to which an actor (user, client, etc.) has read access, as determined by ACL settings. This affects all searches. When <code class=\"docutils literal\">true</code>, the performance of the Chef management console may increase because it enables the Chef management console to skip redundant ACL checks. To ensure the Chef management console is configured properly, after this setting has been applied with a <code class=\"docutils literal\">chef-server-ctl reconfigure</code> run <code class=\"docutils literal\">chef-manage-ctl reconfigure</code> to ensure the Chef management console also picks up the setting. Default value: <code class=\"docutils literal\">false</code>.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">When <code class=\"docutils literal\">true</code>, <code class=\"docutils literal\">opscode_erchef['strict_search_result_acls']</code> affects all search results and any actor (user, client, etc.) that does not have read access to a search result will not be able to view it. For example, this could affect search results returned during chef-client runs if a chef-client does not have permission to read the information.</p> </div> </dd> </dl>   <h3 id=\"opscode-expander\">opscode-expander</h3> <p>The following setting is often modified from the default as part of the tuning effort for the <strong>opscode-expander</strong> service:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">opscode_expander['nodes']</code></dt> <dd>The number of allowed worker processes. The <strong>opscode-expander</strong> service runs on the back-end and feeds data to the <strong>opscode-solr</strong> service, which creates and maintains search data used by the Chef server. Additional memory may be required by these worker processes depending on the frequency and volume of chef-client runs across the organization, but only if the back-end machines have available CPU and RAM. Default value: <code class=\"docutils literal\">2</code>.</dd> </dl>   <h3 id=\"opscode-solr4\">opscode-solr4</h3> <p>The following sections describe ways of tuning the <strong>opscode-solr4</strong> service to improve performance around large node sizes, available memory, and update frequencies.</p>  <h4 id=\"update-frequency\">Update Frequency</h4> <p>At the end of every chef-client run, the node object is saved to the Chef server. From the Chef server, each node object is then added to the <code class=\"docutils literal\">SOLR</code> search index. This process is asynchronous. By default, node objects are committed to the search index every 60 seconds or per 1000 node objects, whichever occurs first.</p> <p>When data is committed to the Apache Solr index, all incoming updates are blocked. If the duration between updates is too short, it is possible for the rate at which updates are asked to occur to be faster than the rate at which objects can be actually committed.</p> <p>Use the following configuration setting to improve the indexing performance of node objects:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">opscode_solr4['commit_interval']</code></dt> <dd>The frequency (in seconds) at which node objects are added to the Apache Solr search index. Default value: <code class=\"docutils literal\">60000</code> (every 60 seconds).</dd> <dt><code class=\"docutils literal\">opscode_solr4['max_commit_docs']</code></dt> <dd>The frequency (in documents) at which node objects are added to the Apache Solr search index. Default value: <code class=\"docutils literal\">1000</code> (every 1000 documents).</dd> </dl>    <h3 id=\"postgresql\">postgresql</h3> <p>The following setting is often modified from the default as part of the tuning effort for the <strong>postgresql</strong> service:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">postgresql['max_connections']</code></dt> <dd>\n<p class=\"first\">The maximum number of allowed concurrent connections. This value should only be tuned when the <code class=\"docutils literal\">opscode_erchef['db_pool_size']</code> value used by the <strong>opscode-erchef</strong> service is modified. Default value: <code class=\"docutils literal\">350</code>.</p> <p>If there are more than two front end machines in a cluster, the <code class=\"docutils literal\">postgresql['max_connections']</code> setting should be increased. The increased value depends on the number of machines in the front end, but also the number of services that are running on each of these machines.</p> <ul class=\"simple\"> <li>Each front end machine always runs the <strong>oc_bifrost</strong> and <strong>opscode-erchef</strong> services.</li> <li>The Reporting add-on adds the <strong>reporting</strong> service.</li> <li>The Chef push jobs service adds the <strong>push_jobs</strong> service.</li> </ul> <p>Each of these services requires 25 connections, above the default value.</p> <p>Use the following formula to help determine what the increased value should be:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">new_value = current_value + [\n            (# of front end machines - 2) * (25 * # of services)\n                        ]</pre> <p>For example, if the current value is 350, there are four front end machines, and all add-ons are installed, then the formula looks like:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">550 = 350 + [(4 - 2) * (25 * 4)]</pre> </dd> </dl>   <h3 id=\"rabbitmq\">rabbitmq</h3> <p>The following settings must be modified when the Chef Analytics server is configured as a standalone server:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">rabbitmq['node_ip_address']</code></dt> <dd>\n<p class=\"first\">The bind IP address for RabbitMQ. Default value: <code class=\"docutils literal\">\"127.0.0.1\"</code>.</p> <p class=\"last\">Chef Analytics uses the same RabbitMQ service that is configured on the Chef server. When the Chef Analytics server is configured as a standalone server, the default settings for <code class=\"docutils literal\">rabbitmq['node_ip_address']</code> and <code class=\"docutils literal\">rabbitmq['vip']</code> must be updated. When the Chef Analytics server is configured as a standalone server, change this value to <code class=\"docutils literal\">0.0.0.0</code>.</p> </dd> <dt><code class=\"docutils literal\">rabbitmq['vip']</code></dt> <dd>\n<p class=\"first\">The virtual IP address. Default value: <code class=\"docutils literal\">\"127.0.0.1\"</code>.</p> <p class=\"last\">Chef Analytics uses the same RabbitMQ service that is configured on the Chef server. When the Chef Analytics server is configured as a standalone server, the default settings for <code class=\"docutils literal\">rabbitmq['node_ip_address']</code> and <code class=\"docutils literal\">rabbitmq['vip']</code> must be updated. When the Chef Analytics server is configured as a standalone server, change this value to the backend VIP address for the Chef server.</p> </dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/config_rb_server.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/config_rb_server.html</a>\n  </p>\n</div>\n","server_12-5/config_rb_manage":"<h1 id=\"manage-rb\">manage.rb</h1> <p>Chef management console is a web-based interface for the Chef server that provides users a way to manage the following objects:</p> <ul class=\"simple\"> <li>Nodes</li> <li>Cookbooks and recipes</li> <li>Roles</li> <li>Stores of JSON data (data bags), including encrypted data</li> <li>Environments</li> <li>Searching of indexed data</li> <li>User accounts and user data for the individuals who have permission to log on to and access the Chef server</li> </ul> <p>The manage.rb file is the default configuration file used by Chef management console. These settings are applied every time <code class=\"docutils literal\">chef-manage-ctl reconfigure</code> is run.</p> <p>The configuration file is located at: <code class=\"docutils literal\">/etc/chef-manage/manage.rb</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is a premium feature of Chef. Access to premium features is free (up to 25 nodes) when a premium feature is installed on-premises. For higher node counts, access is <a class=\"reference external\" href=\"https://www.chef.io/pricing/\">available via subscription</a>.</p> </div>  <h2 id=\"settings\">Settings</h2> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>All of the following settings should be specified without using the equals symbol (<code class=\"docutils literal\">=</code>). For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">chef_documentation_url 'https://docs.chef.io'</pre> </div> <p>This configuration file has the following settings:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">backbone_paginator_timeout</code></dt> <dd>The amount of time (in milliseconds) after which search requests made via the web client will timeout and cause an error. Default value: <code class=\"docutils literal\">120000</code>.</dd> <dt><code class=\"docutils literal\">chef_documentation_url</code></dt> <dd>The URL at which documentation for Chef is located. Default value: <code class=\"docutils literal\">https://docs.chef.io</code>.</dd> <dt><code class=\"docutils literal\">disable_sign_up</code></dt> <dd>Use to disable sign-up and only allow sign-in. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">email_from_address</code></dt> <dd>The email address from which Chef server notifications are sent. Default value: <code class=\"docutils literal\">'Chef Notifications &lt;notifications@chef.io&gt;'</code>.</dd> <dt><code class=\"docutils literal\">events.port</code></dt> <dd>The port on which the events services run. Default value: <code class=\"docutils literal\">11001</code>.</dd> <dt><code class=\"docutils literal\">logging.chef_log_level</code></dt> <dd>The log level used for requests to the Chef server from the web application. Default value: <code class=\"docutils literal\">info</code>.</dd> <dt><code class=\"docutils literal\">logging.log_level</code></dt> <dd>The log level for Ruby on Rails services. Default value: <code class=\"docutils literal\">info</code>.</dd> <dt><code class=\"docutils literal\">max_login_failures</code></dt> <dd>The the maximim number of failed login attempts allowed before the user must use the password reset link to reset their password (has no effect when using external authentication/LDAP). Default value: <code class=\"docutils literal\">7</code>.</dd> <dt><code class=\"docutils literal\">nginx_addon_prefix</code></dt> <dd>The prefix used by Chef management console. Default value: <code class=\"docutils literal\">30</code>.</dd> <dt><code class=\"docutils literal\">org_creation_enabled</code></dt> <dd>Whether or not users can create new organizations from Chef management console. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">platform.user</code></dt> <dd>The name of the privileged user that manages requests to the Chef server. Default value: <code class=\"docutils literal\">'pivotal'</code>.</dd> <dt><code class=\"docutils literal\">platform.key_file</code></dt> <dd>The key file used by the privileged user. Default value: <code class=\"docutils literal\">'/etc/opscode/webui_priv.pem'</code>.</dd> <dt><code class=\"docutils literal\">public_port</code></dt> <dd>The port on which the external load balancer will listen. Default value: <code class=\"docutils literal\">443</code>.</dd> <dt><code class=\"docutils literal\">redis.host</code></dt> <dd>The host on which Redis runs. Default value: <code class=\"docutils literal\">localhost</code>.</dd> <dt><code class=\"docutils literal\">redis.port</code></dt> <dd>The port on which Redis listens. Default value: <code class=\"docutils literal\">11002</code>.</dd> <dt><code class=\"docutils literal\">redis.url</code></dt> <dd>The URL used by Redis. Default value: <code class=\"docutils literal\">redis://#{redis.host}:#{redis.port}/0</code>.</dd> <dt><code class=\"docutils literal\">runit_timeout</code></dt> <dd>The amount of time (in seconds) to wait before timing out. Default value: <code class=\"docutils literal\">30</code>.</dd> <dt><code class=\"docutils literal\">secret_token</code></dt> <dd>The secret token used by Ruby on Rails to prevent session tampering. See: <a class=\"reference external\" href=\"http://guides.rubyonrails.org/security.html#session-storage\">http://guides.rubyonrails.org/security.html#session-storage</a>. Default value: (a token).</dd> <dt><code class=\"docutils literal\">services['opscode-manage-events'].enable</code></dt> <dd>Use to enable the <code class=\"docutils literal\">opscode-manage-events</code> service. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">services['opscode-manage-webapp'].enable</code></dt> <dd>Use to enable the <code class=\"docutils literal\">opscode-manage-webapp</code> service. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">services['opscode-manage-worker'].enable</code></dt> <dd>Use to enable the <code class=\"docutils literal\">opscode-manage-worker</code> service. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">session_timeout</code></dt> <dd>The amount of time (in minutes) of inactivity before a user is logged out. When not set (or set to 0), a browser session will not have a timed expiration and will expire when the browser session ends, quits, or when the computer restarts, or when the absolute session time limit is hit (see <code class=\"docutils literal\">session_timeout_absolute</code>). Default value: <code class=\"docutils literal\">1440</code> (one day).</dd> <dt><code class=\"docutils literal\">session_timeout_absolute</code></dt> <dd>The amount of time (in minutes) after which a user will be logged out, regardless of activity. When not set (or set to 0), a browser session will not have a timed expiration unless a session is inactive longer than the session time limit (see <code class=\"docutils literal\">session_timeout</code>). Default value: <code class=\"docutils literal\">10080</code> (one week).</dd> <dt><code class=\"docutils literal\">sign_in_page_message</code></dt> <dd>A message to display on the sign-in page. If present, the message will show up in a box on the sign in page. Any valid HTML is allowed here. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">support_email_address</code></dt> <dd>The email address used to send feedback. Default value: <code class=\"docutils literal\">support@chef.io</code>.</dd> <dt><code class=\"docutils literal\">support_site_url</code></dt> <dd>The URL at which links to Chef support are located. Default value: <code class=\"docutils literal\">http://chef.io/support</code>.</dd> <dt><code class=\"docutils literal\">support_tickets_url</code></dt> <dd>The URL at which Chef support tickets are created. Default value: <code class=\"docutils literal\">https://chef.io/support/tickets</code>.</dd> <dt><code class=\"docutils literal\">webapp.backlog</code></dt> <dd>The size of the backlog. Default value: <code class=\"docutils literal\">1024</code>.</dd> <dt><code class=\"docutils literal\">webapp.listen</code></dt> <dd>The port on which Chef management console services listen. Default value: <code class=\"docutils literal\">{ '127.0.0.1:#{port}' }</code>.</dd> <dt><code class=\"docutils literal\">webapp.port</code></dt> <dd>The port on which Chef management console services run. Default value: <code class=\"docutils literal\">9462</code>.</dd> <dt><code class=\"docutils literal\">webapp.tcp_nodelay</code></dt> <dd>Enable the Nagle buffering algorithm. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">webapp.worker_processes</code></dt> <dd>The number of allowed worker processes. Default value: <code class=\"docutils literal\">node['cpu.total'].to_i</code>.</dd> <dt><code class=\"docutils literal\">webapp.worker_timeout</code></dt> <dd>The amount of time (in seconds) that a worker can be silent before it is killed and restarted. Default value: <code class=\"docutils literal\">3600</code>.</dd> </dl>   <h2 id=\"example\">Example</h2> <p>The following example shows how the settings look when added to the configuration file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_documentation_url 'https://docs.chef.io'\ndisable_sign_up false\nevents.port 11001\nlogging.chef_log_level 'info'\nlogging.log_level 'info'\nnginx_addon_prefix 30\nplatform.user 'pivotal'\nplatform.key_file '/etc/opscode/webui_priv.pem'\npublic_port 443\nredis.host 'localhost'\nredis.port 11002\n# redis.url derived from redis.host and redis.port\nrunit_timeout 30\nsecret_token 'abcdefghij1234567890KLMNOPQRST1234567890uvwxyzabcd'\nservices['opscode-manage-events'].enable true\nservices['opscode-manage-webapp'].enable true\nservices['opscode-manage-worker'].enable true\nsupport_email_address 'support@chef.io'\nsupport_site_url 'http://chef.io/support'\nsupport_tickets_url 'https://chef.io/support/tickets'\nwebapp.backlog 1024\n# webapp.listen derived from webapp.port\nwebapp.port 9462\nwebapp.tcp_nodelay true\nwebapp.worker_processes 2\nwebapp.worker_timeout 3600</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/config_rb_manage.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/config_rb_manage.html</a>\n  </p>\n</div>\n","12-9/workstation":"<h1 id=\"workstations\">Workstations</h1> <p>A workstation is a computer that is configured to run various Chef command-line tools that synchronize with a chef-repo, author cookbooks, interact with the Chef server, interact with nodes, or applications like Delivery.</p> <p>The workstation is the location from which most users do most of their work, including:</p> <ul class=\"simple\"> <li>Developing cookbooks and recipes (and authoring them using Ruby syntax and patterns)</li> <li>Keeping the chef-repo synchronized with version source control</li> <li>Using command-line tools</li> <li>Configuring organizational policy, including defining roles and environments and ensuring that critical data is stored in data bags</li> <li>Interacting with nodes, as (or when) required, such as performing a bootstrap operation</li> </ul> <p>Some important components of workstations include:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"knife\">Knife</a></td> <td>\n<p class=\"first\">knife is a command-line tool that provides an interface between a local chef-repo and the Chef server. knife helps users to manage:</p> <ul class=\"last simple\"> <li>Nodes</li> <li>Cookbooks and recipes</li> <li>Roles</li> <li>Stores of JSON data (data bags), including encrypted data</li> <li>Environments</li> <li>Cloud resources, including provisioning</li> <li>The installation of the chef-client on management workstations</li> <li>Searching of indexed data on the Chef server</li> </ul> </td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"chef_repo\">The chef-repo</a></td> <td>\n<p class=\"first\">The chef-repo is the repository structure in which cookbooks are authored, tested, and maintained:</p> <ul class=\"simple\"> <li>Cookbooks contain recipes, attributes, custom resources, libraries, definitions, files, templates, tests, and metadata</li> <li>The chef-repo should be synchronized with a version control system (such as git), and then managed as if it were source code</li> </ul> <p class=\"last\">The directory structure within the chef-repo varies. Some organizations prefer to keep all of their cookbooks in a single chef-repo, while other organizations prefer to use a chef-repo for every cookbook.</p> </td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"config_rb_knife\">knife.rb</a></td> <td>A knife.rb file is used to specify the chef-repo-specific configuration details for knife.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"config_rb_metadata\">metadata.rb</a></td> <td>Every cookbook requires a small amount of metadata. A file named metadata.rb is located at the top of every cookbook directory structure. The contents of the metadata.rb file provides hints to the Chef server to help ensure that cookbooks are deployed to each node correctly.</td> </tr> </tbody> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/workstation.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/workstation.html</a>\n  </p>\n</div>\n","server_12-5/ctl_chef_server":"<h1 id=\"chef-server-ctl-executable\">chef-server-ctl (executable)</h1> <p>The Chef server includes a command-line utility named chef-server-ctl. This command-line tool is used to start and stop individual services, reconfigure the Chef server, run chef-pedant, and then tail Chef server log files.</p>  <h2 id=\"backup-restore\">Backup / Restore</h2> <p>Use the following commands to manage backups of Chef server data, and then to restore those backups.</p>  <h3 id=\"backup\">backup</h3> <p>The <code class=\"docutils literal\">backup</code> subcommand is used to back up all Chef server data. This subcommand:</p> <ul class=\"simple\"> <li>Requires rsync to be installed on the Chef server prior to running the command</li> <li>Requires a <code class=\"docutils literal\">chef-server-ctl reconfigure</code> prior to running the command</li> <li>Should not be run in a Chef server configuration with an external PostgreSQL database; <a class=\"reference external\" href=\"https://github.com/chef/knife-ec-backup\">use knife ec backup</a> instead</li> <li>Puts the initial backup in the <code class=\"docutils literal\">/var/opt/chef-backup</code> directory as a tar.gz file; move this backup to a new location for safe keeping</li> </ul> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-y</code>, <code class=\"docutils literal\">--yes</code>\n</dt> <dd>Use to specify if the Chef server can go offline during tar.gz-based backups.</dd> </dl> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl backup</pre>   <h3 id=\"restore\">restore</h3> <p>The <code class=\"docutils literal\">restore</code> subcommand is used to restore Chef server data from a backup that was created by the <code class=\"docutils literal\">backup</code> subcommand. This subcommand may also be used to add Chef server data to a newly-installed server. This subcommand:</p> <ul class=\"simple\"> <li>Requires rsync to be installed on the Chef server prior to running the command</li> <li>Requires a <code class=\"docutils literal\">chef-server-ctl reconfigure</code> prior to running the command</li> <li>Should not be run in a Chef server configuration with an external PostgreSQL database; <a class=\"reference external\" href=\"https://github.com/chef/knife-ec-backup\">use knife ec backup</a> instead</li> <li>May restore backed up data to any version of the Chef server that supports this command, starting with Chef server 12.2 (which is the first version of the Chef server in which the <code class=\"docutils literal\">chef-server-ctl restore</code> command is available)</li> </ul> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-c</code>, <code class=\"docutils literal\">--cleanse</code>\n</dt> <dd>Use to remove all existing data on the Chef server; it will be replaced by the data in the backup archive.</dd> <dt>\n<code class=\"docutils literal\">-d DIRECTORY</code>, <code class=\"docutils literal\">--staging-dir DIRECTORY</code>\n</dt> <dd>Use to specify that the path to an empty directory to be used during the restore process. This directory must have enough disk space to expand all data in the backup archive.</dd> </dl> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restore PATH_TO_BACKUP (options)</pre> <p><strong>Examples</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restore /path/to/tar/archive.tar.gz</pre>    <h2 id=\"backup-recover\">backup-recover</h2> <p>The <code class=\"docutils literal\">backup-recover</code> subcommand is used to force the Chef server to attempt to become the backup server. This is the opposite of the <code class=\"docutils literal\">master-recover</code> subcommand.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">If this command is run on both back-end servers, it will put the back-end cluster into a state where no server holds the DRBD resource.</p> </div> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl backup-recover</pre>   <h2 id=\"cleanse\">cleanse</h2> <p>The <code class=\"docutils literal\">cleanse</code> subcommand is used to re-set the Chef server to the state it was in prior to the first time the <code class=\"docutils literal\">reconfigure</code> subcommand is run. This command will destroy all data, configuration files, and logs. The software that was put on-disk by the package installation will remain; re-run <code class=\"docutils literal\">chef-server-ctl reconfigure</code> to recreate the default data and configuration files.</p> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--with-external</code></dt> <dd>Use to specify that Chef server data on an external PostgreSQL database should be removed.</dd> </dl> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl cleanse</pre>   <h2 id=\"gather-logs\">gather-logs</h2> <p>The <code class=\"docutils literal\">gather-logs</code> subcommand is used to gather the Chef server log files into a tarball that contains all of the important log files and system information.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl gather-logs</pre>   <h2 id=\"ha-status\">ha-status</h2> <p>The <code class=\"docutils literal\">ha-status</code> subcommand is used to check the status for services running in a high availability topology. This command will verify the following:</p> <ul class=\"simple\"> <li>The Keepalived daemon is enabled in the config</li> <li>The DRBD process is enabled in the config</li> <li>The underlying block device or logical volume for DRBD has been created and configured</li> <li>The DRBD device exists</li> <li>The current state of the server is <code class=\"docutils literal\">master</code> or <code class=\"docutils literal\">backup</code>; any migration processes have completed</li> <li>The failover virtual IP address is correctly attached to only the <code class=\"docutils literal\">master</code> node</li> <li>The DRBD state is correct based on the state of the server being <code class=\"docutils literal\">master</code> or <code class=\"docutils literal\">backup</code>\n</li> <li>The DRBD mount point is correctly mounted to only the <code class=\"docutils literal\">master</code> node</li> <li>The DRBD replication IP addresses are pingable</li> <li>The <code class=\"docutils literal\">runit</code> status of the services are correct (up or down) based on the <code class=\"docutils literal\">master</code> or <code class=\"docutils literal\">backup</code> state of the server</li> </ul> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl ha-status</pre> <p>If this command runs successfully, it will return the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ [OK] all checks passed.</pre> <p>Otherwise it will print out a list of errors, similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">...\n[OK] nginx is running correctly, and I am master.\n[ERROR] redis_lb is not running.\n[OK] opscode-erchef is running correctly, and I am master.\n...\n[ERROR] ERRORS WERE DETECTED.</pre> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">[OK] keepalived HA services enabled\n[OK] DRBD disk replication enabled\n[OK] DRBD partition /dev/opscode/drbd found\n[OK] DRBD device /dev/drbd0 found\n[OK] cluster status = master\n[OK] found VIP IP address and I am master\n[OK] found VRRP communications interface eth1\n[OK] my DRBD status is Connected/Primary/UpToDate and I am master\n[OK] my DRBD partition is mounted and I am master\n[OK] DRBD primary IP address pings\n[OK] DRBD secondary IP address pings\n...\n[OK] all checks passed.</pre>   <h2 id=\"help\">help</h2> <p>The <code class=\"docutils literal\">help</code> subcommand is used to print a list of all available chef-server-ctl commands.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl help</pre>   <h2 id=\"install\">install</h2> <p>The <code class=\"docutils literal\">install</code> subcommand is used to install premium features of the Chef server: Chef management console, Chef Analytics, chef-client run reporting, high availability configurations, Chef push jobs, and Chef server replication.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install name_of_premium_feature (options)</pre> <p>where <code class=\"docutils literal\">name_of_premium_feature</code> represents the command line value associated with the premium feature.</p> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--path PATH</code></dt> <dd>Use to specify the location of a package. This option is not required when packages are downloaded from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a>.</dd> </dl>  <h3 id=\"use-downloads\">Use Downloads</h3> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are not behind a firewall (and have connectivity to <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a>), these packages can be installed as described below.</p> <table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"80%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Command</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Chef Manage</td> <td>\n<p class=\"first\">Use Chef management console to manage data bags, attributes, run-lists, roles, environments, and cookbooks from a web user interface.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-manage</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ chef-manage-ctl reconfigure</pre> </td> </tr> <tr class=\"row-odd\">\n<td>Chef Push Jobs</td> <td>\n<p class=\"first\">Use Chef push jobs to run jobs—an action or a command to be executed—against nodes independently of a chef-client run.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install opscode-push-jobs-server</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ opscode-push-jobs-server-ctl reconfigure</pre> </td> </tr> <tr class=\"row-even\">\n<td>Chef Replication</td> <td>\n<p class=\"first\">Use Chef replication to asynchronously distribute cookbook, environment, role, and data bag data from a single, primary Chef server to one (or more) replicas of that Chef server.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install chef-sync</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ chef-sync-ctl reconfigure</pre> </td> </tr> <tr class=\"row-odd\">\n<td>Reporting</td> <td>\n<p class=\"first\">Use Reporting to keep track of what happens during every chef-client runs across all of the infrastructure being managed by Chef. Run Reporting with Chef management console to view reports from a web user interface.</p> <p>On the Chef server, run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl install opscode-reporting</pre> <p>then:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ chef-server-ctl reconfigure</pre> <p>and then:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">$ opscode-reporting-ctl reconfigure</pre> </td> </tr> </tbody> </table>   <h3 id=\"use-local-packages\">Use Local Packages</h3> <p>The <code class=\"docutils literal\">install</code> subcommand downloads packages from <a class=\"reference external\" href=\"https://packages.chef.io/\">https://packages.chef.io/</a> by default. For systems that are behind a firewall (and may not have connectivity to packages.chef.io), these packages can be downloaded from <a class=\"reference external\" href=\"https://downloads.chef.io/chef-manage/\">https://downloads.chef.io/chef-manage/</a>, and then installed manually. First download the package that is appropriate for the platform, save it to a local path, and then run the <code class=\"docutils literal\">install</code> command using the <code class=\"docutils literal\">--path</code> option to specify the directory in which the package is located:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install PACKAGE_NAME --path /path/to/package/directory</pre> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl install chef-manage --path /root/packages</pre> <p>The <code class=\"docutils literal\">chef-server-ctl</code> command will install the first <code class=\"docutils literal\">chef-manage</code> package found in the <code class=\"docutils literal\">/root/packages</code> directory.</p>    <h2 id=\"key-rotation\">Key Rotation</h2> <p>Use the following commands to manage public and private key rotation for users and clients.</p>  <h3 id=\"add-client-key\">add-client-key</h3> <p>Use the <code class=\"docutils literal\">add-client-key</code> subcommand to add a client key.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl add-client-key ORG_NAME CLIENT_NAME [--public-key-path PATH] [--expiration-date DATE] [--key-name NAME]</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">All options for this subcommand must follow all arguments.</p> </div> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">CLIENT_NAME</code></dt> <dd>The name of the client that you wish to add a key for.</dd> <dt>\n<code class=\"docutils literal\">-e DATE</code> <code class=\"docutils literal\">--expiration-date DATE</code>\n</dt> <dd>An ISO 8601 formatted string: <code class=\"docutils literal\">YYYY-MM-DDTHH:MM:SSZ</code>. For example: <code class=\"docutils literal\">2013-12-24T21:00:00Z</code>. If not passed, expiration will default to infinity.</dd> <dt>\n<code class=\"docutils literal\">-k NAME</code> <code class=\"docutils literal\">--key-name NAME</code>\n</dt> <dd>String defining the name of your new key for this client. If not passed, it will default to the fingerprint of the public key.</dd> <dt><code class=\"docutils literal\">ORG_NAME</code></dt> <dd>The short name for the organization to which the client belongs.</dd> <dt>\n<code class=\"docutils literal\">-p PATH</code> <code class=\"docutils literal\">--public-key-path PATH</code>\n</dt> <dd>The location to a file containing valid PKCS#1 public key to be added. If not passed, then the server will generate a new one for you and return the private key to STDOUT.</dd> </dl>   <h3 id=\"add-user-key\">add-user-key</h3> <p>Use the <code class=\"docutils literal\">add-user-key</code> subcommand to add a user key.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl add-user-key USER_NAME [--public-key-path PATH] [--expiration-date DATE] [--key-name NAME]</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">All options for this subcommand must follow all arguments.</p> </div> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-e DATE</code> <code class=\"docutils literal\">--expiration-date DATE</code>\n</dt> <dd>An ISO 8601 formatted string: <code class=\"docutils literal\">YYYY-MM-DDTHH:MM:SSZ</code>. For example: <code class=\"docutils literal\">2013-12-24T21:00:00Z</code>. If not passed, expiration will default to infinity.</dd> <dt>\n<code class=\"docutils literal\">-k NAME</code> <code class=\"docutils literal\">--key-name NAME</code>\n</dt> <dd>String defining the name of your new key for this user. If not passed, it will default to the fingerprint of the public key.</dd> <dt>\n<code class=\"docutils literal\">-p PATH</code> <code class=\"docutils literal\">--public-key-path PATH</code>\n</dt> <dd>The location to a file containing valid PKCS#1 public key to be added. If not passed, then the server will generate a new one for you and return the private key to STDOUT.</dd> <dt><code class=\"docutils literal\">USER_NAME</code></dt> <dd>The user name for the user for which a key is added.</dd> </dl>   <h3 id=\"delete-client-key\">delete-client-key</h3> <p>Use the <code class=\"docutils literal\">delete-client-key</code> subcommand to delete a client key.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl delete-client-key ORG_NAME CLIENT_NAME KEY_NAME</pre> <p><strong>Options</strong></p> <p>This subcommand has the following arguments:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ORG_NAME</code></dt> <dd>The short name for the organization to which the client belongs.</dd> <dt><code class=\"docutils literal\">CLIENT_NAME</code></dt> <dd>The name of the client.</dd> <dt><code class=\"docutils literal\">KEY_NAME</code></dt> <dd>The unique name to be assigned to the key you wish to delete.</dd> </dl>   <h3 id=\"delete-user-key\">delete-user-key</h3> <p>Use the <code class=\"docutils literal\">delete-user-key</code> subcommand to delete a user key.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl delete-user-key USER_NAME KEY_NAME</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The parameters for this subcommand must be in the order specified above.</p> </div> <p><strong>Options</strong></p> <p>This subcommand has the following arguments:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">USER_NAME</code></dt> <dd>The user name.</dd> <dt><code class=\"docutils literal\">KEY_NAME</code></dt> <dd>The unique name to be assigned to the key you wish to delete.</dd> </dl>   <h3 id=\"list-client-keys\">list-client-keys</h3> <p>Use the <code class=\"docutils literal\">list-client-keys</code> subcommand to list client keys.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl list-client-keys ORG_NAME CLIENT_NAME [--verbose]</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">All options for this subcommand must follow all arguments.</p> </div> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">CLIENT_NAME</code></dt> <dd>The name of the client.</dd> <dt><code class=\"docutils literal\">ORG_NAME</code></dt> <dd>The short name for the organization to which the client belongs.</dd> <dt><code class=\"docutils literal\">--verbose</code></dt> <dd>Use to show the full public key strings in command output.</dd> </dl>   <h3 id=\"list-user-keys\">list-user-keys</h3> <p>Use the <code class=\"docutils literal\">list-user-keys</code> subcommand to list client keys.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl list-user-keys USER_NAME [--verbose]</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">All options for this subcommand must follow all arguments.</p> </div> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">USER_NAME</code></dt> <dd>The user name you wish to list keys for.</dd> <dt><code class=\"docutils literal\">--verbose</code></dt> <dd>Use to show the full public key strings in command output.</dd> </dl> <p><strong>Example</strong></p> <p>To view a list of user keys (including public key output):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl list-user-keys applejack --verbose</pre> <p>Returns:</p> <pre class=\"highlight-bash\" data-language=\"bash\">2 total key(s) found for user applejack\n\nkey_name: test-key\nexpires_at: Infinity\npublic_key:\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4q9Dh+bwJSjhU/VI4Y8s\n9WsbIPfpmBpoZoZVPL7V6JDfIaPUkdcSdZpynhRLhQwv9ScTFh65JwxC7wNhVspB\n4bKZeW6vugNGwCyBIemMfxMlpKZQDOc5dnBiRMMOgXSIimeiFtL+NmMXnGBBHDaE\nb+XXI8oCZRx5MTnzEs90mkaCRSIUlWxOUFzZvnv4jBrhWsd/yBM/h7YmVfmwVAjL\nVST0QG4MnbCjNtbzToMj55NAGwSdKHCzvvpWYkd62ZOquY9f2UZKxYCX0bFPNVQM\nEvBQGdNG39XYSEeF4LneYQKPHEZDdqe7TZdVE8ooU/syxlZgADtvkqEoc4zp1Im3\n2wIDAQAB\n-----END PUBLIC KEY-----\n\nkey_name: default\nexpires_at: Infinity\npublic_key:\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4q9Dh+bwJSjhU/VI4Y8s\n9WsbIPfpmBpoZoZVPL7V6JDfIaPUkdcSdZpynhRLhQwv9ScTFh65JwxC7wNhVspB\n4bKZeW6vugNGwCyBIemMfxMlpKZQDOc5dnBiRMMOgXSIimeiFtL+NmMXnGBBHDaE\nb+XXI8oCZRx5MTnzEs90mkaCRSIUlWxOUFzZvnv4jBrhWsd/yBM/h7YmVfmwVAjL\nVST0QG4MnbCjNtbzToMj55NAGwSdKHCzvvpWYkd62ZOquY9f2UZKxYCX0bFPNVQM\nEvBQGdNG39XYSEeF4LneYQKPHEZDdqe7TZdVE8ooU/syxlZgADtvkqEoc4zp1Im3\n2wIDAQAB\n-----END PUBLIC KEY-----</pre>    <h2 id=\"master-recover\">master-recover</h2> <p>The <code class=\"docutils literal\">master-recover</code> subcommand is used to force the Chef server to attempt to become the master server. This command is typically run in tandem with the <code class=\"docutils literal\">backup-recover</code> subcommand on the back-end peer, unless the back-end peer is no longer available.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl master-recover</pre>   <h2 id=\"organization-management\">Organization Management</h2> <p>Use the <code class=\"docutils literal\">org-create</code>, <code class=\"docutils literal\">org-delete</code>, <code class=\"docutils literal\">org-list</code>, <code class=\"docutils literal\">org-show</code>, <code class=\"docutils literal\">org-user-add</code> and <code class=\"docutils literal\">org-user-remove</code> commands to manage organizations.</p>  <h3 id=\"org-create\">org-create</h3> <p>The <code class=\"docutils literal\">org-create</code> subcommand is used to create an organization. (The validation key for the organization is returned to <code class=\"docutils literal\">STDOUT</code> when creating an organization with this command.)</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-create ORG_NAME \"ORG_FULL_NAME\" (options)</pre> <p>where:</p> <ul class=\"simple\"> <li>The name must begin with a lower-case letter or digit, may only contain lower-case letters, digits, hyphens, and underscores, and must be between 1 and 255 characters. For example: <code class=\"docutils literal\">chef</code>.</li> <li>The full name must begin with a non-white space character and must be between 1 and 1023 characters. For example: <code class=\"docutils literal\">\"Chef Software, Inc.\"</code>.</li> </ul> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a USER_NAME</code>, <code class=\"docutils literal\">--association_user USER_NAME</code>\n</dt> <dd>Associate a user with an organization and add them to the <code class=\"docutils literal\">admins</code> and <code class=\"docutils literal\">billing_admins</code> security groups.</dd> <dt>\n<code class=\"docutils literal\">-f FILE_NAME</code>, <code class=\"docutils literal\">--filename FILE_NAME</code>\n</dt> <dd>Write the ORGANIZATION-validator.pem to <code class=\"docutils literal\">FILE_NAME</code> instead of printing it to <code class=\"docutils literal\">STDOUT</code>.</dd> </dl> <p><strong>Examples</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-create prod Production</pre> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-create staging Staging -a chef-admin</pre> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-create dev Development -f /tmp/id-dev.key</pre> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-create dev Development --association_user grantmc</pre>   <h3 id=\"org-delete\">org-delete</h3> <p>The <code class=\"docutils literal\">org-delete</code> subcommand is used to delete an organization.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-delete ORG_NAME</pre> <p><strong>Examples</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-delete infra-testing-20140909</pre> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-delete pedant-testing-org</pre>   <h3 id=\"org-list\">org-list</h3> <p>The <code class=\"docutils literal\">org-list</code> subcommand is used to list all of the organizations currently present on the Chef server.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-list (options)</pre> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--all-orgs</code>\n</dt> <dd>Show all organizations.</dd> <dt>\n<code class=\"docutils literal\">-w</code>, <code class=\"docutils literal\">--with-uri</code>\n</dt> <dd>Show the corresponding URIs.</dd> </dl>   <h3 id=\"org-show\">org-show</h3> <p>The <code class=\"docutils literal\">org-show</code> subcommand is used to show the details for an organization.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-show ORG_NAME</pre>   <h3 id=\"org-user-add\">org-user-add</h3> <p>The <code class=\"docutils literal\">org-user-add</code> subcommand is used to add a user to an organization.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-user-add ORG_NAME USER_NAME (options)</pre> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--admin</code></dt> <dd>Add the user to the <code class=\"docutils literal\">admins</code> group.</dd> </dl> <p><strong>Examples</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-user-add prod john_smith</pre> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-user-add preprod testmaster</pre> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-user-add dev grantmc --admin</pre>   <h3 id=\"org-user-remove\">org-user-remove</h3> <p>The <code class=\"docutils literal\">org-user-remove</code> subcommand is used to remove a user from an organization.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>A user who belongs to the <code class=\"docutils literal\">admins</code> group must be removed from the group before they may be removed from an organization. To remove a user from the <code class=\"docutils literal\">admins</code> group, run the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ EDITOR=vi knife edit /groups/admins.json</pre> <p class=\"last\">make the required changes, and then save the file.</p> </div> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-user-remove ORG_NAME USER_NAME (options)</pre> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--force</code></dt> <dd>Force the removal of a user from the organization’s <code class=\"docutils literal\">admins</code> and <code class=\"docutils literal\">billing-admins</code> groups.</dd> </dl> <p><strong>Examples</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-user-remove prod john_smith</pre> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-user-remove prod testmaster</pre> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-user-remove grantmc --force</pre>    <h2 id=\"password\">password</h2> <p>The <code class=\"docutils literal\">password</code> subcommand is used to change a user’s password. When Active Directory or LDAP is enabled, this command enables (or disables) the system recovery password for that user. For example:</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl password USERNAME</pre> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--disable</code></dt> <dd>Use this option to disable a user’s system recovery password.</dd> </dl> <p><strong>Examples</strong></p> <p>For example, to change a user’s password, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl password adamjacobs</pre> <p>and then enter the password and confirm it:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Enter the new password:  ******\nEnter the new password again:  ******</pre> <p>to return:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Password for adamjacobs successfully set.</pre> <p>To disable a system recovery password:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl password adamjacobs --disable</pre> <p>to return:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Password for adamjacobs successfully disabled for System Recovery.</pre>   <h2 id=\"psql\">psql</h2> <p>The <code class=\"docutils literal\">psql</code> subcommand is used to log into the PostgreSQL database associated with the named service. This subcommand:</p> <ul class=\"simple\"> <li>Uses <code class=\"docutils literal\">psql</code> (the interactive terminal for PostgreSQL)</li> <li>Has read-only access by default</li> <li>Is the recommended way to interact with any PostgreSQL database that is part of the Chef server</li> <li>Automatically handles authentication</li> </ul> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl psql SERVICE_NAME (options)</pre> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--write</code></dt> <dd>Use to enable write access to the PostgreSQL database.</dd> </dl>   <h2 id=\"reconfigure\">reconfigure</h2> <p>The <code class=\"docutils literal\">reconfigure</code> subcommand is used when changes are made to the chef-server.rb file to reconfigure the server. When changes are made to the chef-server.rb file, they will not be applied to the Chef server configuration until after this command is run. This subcommand will also restart any services for which the <code class=\"docutils literal\">service_name['enabled']</code> setting is set to <code class=\"docutils literal\">true</code>.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre>   <h2 id=\"reindex\">reindex</h2> <p>The <code class=\"docutils literal\">reindex</code> subcommand is used to reload Chef server data from PostgreSQL to Apache Solr.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl reindex</pre> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--all-orgs</code>\n</dt> <dd>Use to reindex all organizations on the Chef server. This option will override any organization specified as part of the command, i.e. <code class=\"docutils literal\">chef-server-ctl reindex ORG_NAME -a</code> will reindex all organizations and not just the specified organization.</dd> <dt>\n<code class=\"docutils literal\">-d</code>, <code class=\"docutils literal\">--disable-api</code>\n</dt> <dd>Use to disable the Chef server API to prevent writes during reindexing.</dd> <dt>\n<code class=\"docutils literal\">-t</code>, <code class=\"docutils literal\">--with-timing</code>\n</dt> <dd>Use to print timing information for the reindex processes.</dd> <dt>\n<code class=\"docutils literal\">-w</code>, <code class=\"docutils literal\">--wait</code>\n</dt> <dd>Use to wait for the reindexing queue to clear before exiting.</dd> </dl>   <h2 id=\"server-admins\">Server Admins</h2> <p>The <code class=\"docutils literal\">server-admins</code> group is a global group that grants its members permission to create, read, update, and delete user accounts, with the exception of superuser accounts. The <code class=\"docutils literal\">server-admins</code> group is useful for users who are responsible for day-to-day administration of the Chef server, especially user management via the <code class=\"docutils literal\">knife user</code> subcommand. Before members can be added to the <code class=\"docutils literal\">server-admins</code> group, they must already have a user account on the Chef server.</p>  <h3 id=\"scenario\">Scenario</h3> <p>The following user accounts exist on the Chef server: <code class=\"docutils literal\">pivotal</code> (a superuser account), <code class=\"docutils literal\">alice</code>, <code class=\"docutils literal\">bob</code>, <code class=\"docutils literal\">carol</code>, and <code class=\"docutils literal\">dan</code>. Run the following command to view a list of users on the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-list</pre> <p>and it returns the same list of users:</p> <pre class=\"highlight-bash\" data-language=\"bash\">pivotal\nalice\nbob\ncarol\ndan</pre> <p>Alice is a member of the IT team whose responsibilities include day-to-day administration of the Chef server, in particular managing the user accounts on the Chef server that are used by the rest of the organization. From a workstation, Alice runs the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user list -c ~/.chef/alice.rb</pre> <p>and it returns the following error:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ERROR: You authenticated successfully to &lt;chef_server_url&gt; as alice\n       but you are not authorized for this action\nResponse: Missing read permission</pre> <p>Alice is not a superuser and does not have permissions on other users because user accounts are global to organizations in the Chef server. Let’s add Alice to the <code class=\"docutils literal\">server-admins</code> group:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl grant-server-admin-permissions alice</pre> <p>and it returns the following response:</p> <pre class=\"highlight-bash\" data-language=\"bash\">User alice was added to server-admins.</pre> <p>Alice can now create, read, update, and delete user accounts on the Chef server, even for organizations to which Alice is not a member. From a workstation, Alice re-runs the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user list -c ~/.chef/alice.rb</pre> <p>which now returns:</p> <pre class=\"highlight-bash\" data-language=\"bash\">pivotal\nalice\nbob\ncarol\ndan</pre> <p>Alice is now a server administrator and can use the following knife subcommands to manage users on the Chef server:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">knife user-create</code></li> <li><code class=\"docutils literal\">knife user-delete</code></li> <li><code class=\"docutils literal\">knife user-edit</code></li> <li><code class=\"docutils literal\">knife user-list</code></li> <li><code class=\"docutils literal\">knife user-show</code></li> </ul> <p>For example, Alice runs the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user edit carol -c ~/.chef/alice.rb</pre> <p>and the $EDITOR opens in which Alice makes changes, and then saves them.</p>  <h4 id=\"superuser-accounts\">Superuser Accounts</h4> <p>Superuser accounts may not be managed by users who belong to the <code class=\"docutils literal\">server-admins</code> group. For example, Alice attempts to delete the <code class=\"docutils literal\">pivotal</code> superuser account:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user delete pivotal -c ~/.chef/alice.rb</pre> <p>and the following error is returned:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ERROR: You authenticated successfully to &lt;chef_server_url&gt; as user1\n       but you are not authorized for this action\nResponse: Missing read permission</pre> <p>Alice’s action is unauthorized even with membership in the <code class=\"docutils literal\">server-admins</code> group.</p>    <h3 id=\"manage-server-admins-group\">Manage server-admins Group</h3> <p>Membership of the <code class=\"docutils literal\">server-admins</code> group is managed with a set of <code class=\"docutils literal\">chef-server-ctl</code> subcommands:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">chef-server-ctl grant-server-admin-permissions</code></li> <li><code class=\"docutils literal\">chef-server-ctl list-server-admins</code></li> <li><code class=\"docutils literal\">chef-server-ctl remove-server-admin-permissions</code></li> </ul>  <h4 id=\"add-members\">Add Members</h4> <p>The <code class=\"docutils literal\">grant-server-admin-permissions</code> subcommand is used to add a user to the <code class=\"docutils literal\">server-admins</code> group. Run the command once per user added.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl grant-server-admin-permissions USER_NAME</pre> <p>where <code class=\"docutils literal\">USER_NAME</code> is the user to add to the list of server administrators.</p> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl grant-server-admin-permissions bob</pre> <p>returns:</p> <pre class=\"highlight-bash\" data-language=\"bash\">User bob was added to server-admins. This user can now list,\nread, and create users (even for orgs they are not members of)\nfor this Chef Server.</pre>   <h4 id=\"remove-members\">Remove Members</h4> <p>The <code class=\"docutils literal\">remove-server-admin-permissions</code> subcommand is used to remove a user from the <code class=\"docutils literal\">server-admins</code> group. Run the command once per user removed.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl remove-server-admin-permissions USER_NAME</pre> <p>where <code class=\"docutils literal\">USER_NAME</code> is the user to remove from the list of server administrators.</p> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl remove-server-admin-permissions bob</pre> <p>returns:</p> <pre class=\"highlight-bash\" data-language=\"bash\">User bob was removed from server-admins. This user can no longer\nlist, read, and create users for this Chef Server except for where\nthey have default permissions (such as within an org).</pre>   <h4 id=\"list-membership\">List Membership</h4> <p>The <code class=\"docutils literal\">list-server-admins</code> subcommand is used to return a list of users who are members of the <code class=\"docutils literal\">server-admins</code> group.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl list-server-admins</pre> <p>and will return a list of users similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">pivotal\nalice\nbob\ncarol\ndan</pre>     <h2 id=\"show-config\">show-config</h2> <p>The <code class=\"docutils literal\">show-config</code> subcommand is used to view the configuration that will be generated by the <code class=\"docutils literal\">reconfigure</code> subcommand. This command is most useful in the early stages of a deployment to ensure that everything is built properly prior to installation.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl show-config</pre>   <h2 id=\"uninstall\">uninstall</h2> <p>The <code class=\"docutils literal\">uninstall</code> subcommand is used to remove the Chef server application, but without removing any of the data. This subcommand will shut down all services (including the <code class=\"docutils literal\">runit</code> process supervisor).</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl uninstall</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">To revert the <code class=\"docutils literal\">uninstall</code> subcommand, run the <code class=\"docutils literal\">reconfigure</code> subcommand (because the <code class=\"docutils literal\">start</code> subcommand is disabled by the <code class=\"docutils literal\">uninstall</code> command).</p> </div>   <h2 id=\"upgrade\">upgrade</h2> <p>The <code class=\"docutils literal\">upgrade</code> subcommand is used to upgrade the Chef server.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl upgrade (options)</pre> <p><strong>Options</strong></p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Options for the <code class=\"docutils literal\">upgrade</code> subcommand may only be used when upgrading from Open Source Chef 11 to Chef server 12.</p> </div> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-d DIRECTORY</code>, <code class=\"docutils literal\">--chef11-data-dir DIRECTORY</code>\n</dt> <dd>The directory in which Open Source Chef 11 data is located. Default value: a temporary directory.</dd> <dt>\n<code class=\"docutils literal\">-e DIRECTORY</code>, <code class=\"docutils literal\">--chef12-data-dir DIRECTORY</code>\n</dt> <dd>The directory in which Chef server 12 data is located. Default value: a temporary directory.</dd> <dt>\n<code class=\"docutils literal\">-f FULL_NAME</code>, <code class=\"docutils literal\">--full-org-name FULL_NAME</code>\n</dt> <dd>The full name of the Chef server organization. The full name must begin with a non-white space character and must be between 1 and 1023 characters. For example: <code class=\"docutils literal\">Chef Software, Inc.</code>. If this option is not specified, the <code class=\"docutils literal\">upgrade</code> command will prompt for it.</dd> <dt>\n<code class=\"docutils literal\">-h</code>, <code class=\"docutils literal\">--help</code>\n</dt> <dd>Use to show help for the <code class=\"docutils literal\">chef-server-ctl upgrade</code> subcommand.</dd> <dt>\n<code class=\"docutils literal\">-k KEY</code>, <code class=\"docutils literal\">--key KEY</code>\n</dt> <dd>Save a public key to the specified file name. Default value: <code class=\"docutils literal\">/etc/chef-server/admin.pem</code>.</dd> <dt>\n<code class=\"docutils literal\">-o ORG_NAME</code>, <code class=\"docutils literal\">--org-name ORG_NAME</code>\n</dt> <dd>The name of the Chef server organization. The name must begin with a lower-case letter or digit, may only contain lower-case letters, digits, hyphens, and underscores, and must be between 1 and 255 characters. For example: <code class=\"docutils literal\">chef</code>. If this option is not specified, the <code class=\"docutils literal\">upgrade</code> command will prompt for it.</dd> <dt>\n<code class=\"docutils literal\">-s URL</code>, <code class=\"docutils literal\">--chef11-server-url URL</code>\n</dt> <dd>The URL for the Open Source Chef or Enterprise Chef server, version 11. Default value: <code class=\"docutils literal\">https://localhost</code>.</dd> <dt>\n<code class=\"docutils literal\">-t NUMBER</code>, <code class=\"docutils literal\">--upload-threads NUMBER</code>\n</dt> <dd>The number of threads to use when migrating cookbooks. Default value: <code class=\"docutils literal\">10</code>.</dd> <dt>\n<code class=\"docutils literal\">-u USER</code>, <code class=\"docutils literal\">--user</code>\n</dt> <dd>Create a client as an admin client. This is required for any user to access Open Source Chef as an administrator.</dd> <dt>\n<code class=\"docutils literal\">-x URL</code>, <code class=\"docutils literal\">--chef12-server-url URL</code>\n</dt> <dd>The URL for the Chef server, version 12. Default value: <code class=\"docutils literal\">https://localhost</code>.</dd> <dt>\n<code class=\"docutils literal\">-y</code>, <code class=\"docutils literal\">--yes</code>\n</dt> <dd>Use to skip confirmation prompts during the upgrade process.</dd> </dl>   <h2 id=\"user-management\">User Management</h2> <p>Use the <code class=\"docutils literal\">user-create</code>, <code class=\"docutils literal\">user-delete</code>, <code class=\"docutils literal\">user-edit</code>, <code class=\"docutils literal\">user-list</code> and <code class=\"docutils literal\">user-show</code> subcommands to manage users.</p>  <h3 id=\"user-create\">user-create</h3> <p>The <code class=\"docutils literal\">user-create</code> subcommand is used to create a user. (The validation key for the organization may be returned to <code class=\"docutils literal\">STDOUT</code> when creating a user with this command.)</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-create USER_NAME FIRST_NAME [MIDDLE_NAME] LAST_NAME EMAIL 'PASSWORD' (options)</pre> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-f FILE_NAME</code>, <code class=\"docutils literal\">--filename FILE_NAME</code>\n</dt> <dd>Write the USER.pem to a file instead of <code class=\"docutils literal\">STDOUT</code>.</dd> </dl> <p><strong>Examples</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-create john_smith John Smith john_smith@example.com p@s5w0rD!</pre> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-create jane_doe Jane Doe jane_doe@example.com p@s5w0rD! -f /tmp/jane_doe.key</pre> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-create waldendude Henry David Thoreau waldendude@example.com excursions</pre>   <h3 id=\"user-delete\">user-delete</h3> <p>The <code class=\"docutils literal\">user-delete</code> subcommand is used to delete a user.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-delete USER_NAME</pre> <p><strong>Examples</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-delete john_smith</pre> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-delete jane_doe</pre>   <h3 id=\"user-edit\">user-edit</h3> <p>The <code class=\"docutils literal\">user-edit</code> subcommand is used to edit the details for a user. The data will be made available in the $EDITOR for editing.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-edit USER_NAME</pre> <p><strong>Examples</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-edit john_smith</pre> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-edit jane_doe</pre>   <h3 id=\"user-list\">user-list</h3> <p>The <code class=\"docutils literal\">user-list</code> subcommand is used to view a list of users.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-list (options)</pre> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-w</code>, <code class=\"docutils literal\">--with-uri</code>\n</dt> <dd>Show the corresponding URIs.</dd> </dl>   <h3 id=\"user-show\">user-show</h3> <p>The <code class=\"docutils literal\">user-show</code> subcommand is used to show the details for a user.</p> <p><strong>Syntax</strong></p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-show USER_NAME (options)</pre> <p><strong>Options</strong></p> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-l</code>, <code class=\"docutils literal\">--with-orgs</code>\n</dt> <dd>Show all organizations.</dd> </dl>    <h2 id=\"service-subcommands\">Service Subcommands</h2> <p>This command has a built in process supervisor that ensures all of the required services are in the appropriate state at any given time. The supervisor starts two processes per service and provides the following subcommands for managing services: <code class=\"docutils literal\">hup</code>, <code class=\"docutils literal\">int</code>, <code class=\"docutils literal\">kill</code>, <code class=\"docutils literal\">once</code>, <code class=\"docutils literal\">restart</code>, <code class=\"docutils literal\">service-list</code>, <code class=\"docutils literal\">start</code>, <code class=\"docutils literal\">status</code>, <code class=\"docutils literal\">stop</code>, <code class=\"docutils literal\">tail</code>, and <code class=\"docutils literal\">term</code>.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The following commands are disabled when an external PostgreSQL database is configured for the Chef server: <code class=\"docutils literal\">hup</code>, <code class=\"docutils literal\">int</code>, <code class=\"docutils literal\">kill</code>, <code class=\"docutils literal\">once</code>, <code class=\"docutils literal\">restart</code>, <code class=\"docutils literal\">start</code>, <code class=\"docutils literal\">stop</code>, <code class=\"docutils literal\">tail</code>, and <code class=\"docutils literal\">term</code>.</p> </div>  <h3 id=\"hup\">hup</h3> <p>The <code class=\"docutils literal\">hup</code> subcommand is used to send a <code class=\"docutils literal\">SIGHUP</code> to all services. This command can also be run for an individual service by specifying the name of the service in the command.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl hup SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand.</p>   <h3 id=\"int\">int</h3> <p>The <code class=\"docutils literal\">int</code> subcommand is used to send a <code class=\"docutils literal\">SIGINT</code> to all services. This command can also be run for an individual service by specifying the name of the service in the command.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl int SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand.</p>   <h3 id=\"kill\">kill</h3> <p>The <code class=\"docutils literal\">kill</code> subcommand is used to send a <code class=\"docutils literal\">SIGKILL</code> to all services. This command can also be run for an individual service by specifying the name of the service in the command.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl kill SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand.</p>   <h3 id=\"once\">once</h3> <p>The supervisor for the Chef server is configured to restart any service that fails, unless that service has been asked to change its state. The <code class=\"docutils literal\">once</code> subcommand is used to tell the supervisor to not attempt to restart any service that fails.</p> <p>This command is useful when troubleshooting configuration errors that prevent a service from starting. Run the <code class=\"docutils literal\">once</code> subcommand followed by the <code class=\"docutils literal\">status</code> subcommand to look for services in a down state and/or to identify which services are in trouble. This command can also be run for an individual service by specifying the name of the service in the command.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl once SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand.</p>   <h3 id=\"restart\">restart</h3> <p>The <code class=\"docutils literal\">restart</code> subcommand is used to restart all services enabled on the Chef server or to restart an individual service by specifying the name of that service in the command.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">When running the Chef server in a high availability configuration, restarting all services may trigger failover.</p> </div> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl restart SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand. When a service is successfully restarted the output should be similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ok: run: service_name: (pid 12345) 1s</pre>   <h3 id=\"service-list\">service-list</h3> <p>The <code class=\"docutils literal\">service-list</code> subcommand is used to display a list of all available services. A service that is enabled is labeled with an asterisk (*).</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl service-list</pre>   <h3 id=\"start\">start</h3> <p>The <code class=\"docutils literal\">start</code> subcommand is used to start all services that are enabled in the Chef server. This command can also be run for an individual service by specifying the name of the service in the command.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl start SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand. When a service is successfully started the output should be similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ok: run: service_name: (pid 12345) 1s</pre> <p>The supervisor for the Chef server is configured to wait seven seconds for a service to respond to a command from the supervisor. If you see output that references a timeout, it means that a signal has been sent to the process, but that the process has yet to actually comply. In general, processes that have timed out are not a big concern, unless they are failing to respond to the signals at all. If a process is not responding, use a command like the <code class=\"docutils literal\">kill</code> subcommand to stop the process, investigate the cause (if required), and then use the <code class=\"docutils literal\">start</code> subcommand to re-enable it.</p>   <h3 id=\"status\">status</h3> <p>The <code class=\"docutils literal\">status</code> subcommand is used to show the status of all services available to the Chef server. The results will vary based on the configuration of a given server. This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl status</pre> <p>and will return the status for all services. Status can be returned for individual services by specifying the name of the service as part of the command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl status SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand.</p> <p>When service status is requested, the output should be similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ run: service_name: (pid 12345) 12345s; run: log: (pid 1234) 67890s</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">run:</code> is the state of the service (<code class=\"docutils literal\">run:</code> or <code class=\"docutils literal\">down:</code>)</li> <li>\n<code class=\"docutils literal\">service_name:</code> is the name of the service for which status is returned</li> <li>\n<code class=\"docutils literal\">(pid 12345)</code> is the process identifier</li> <li>\n<code class=\"docutils literal\">12345s</code> is the uptime of the service, in seconds</li> </ul> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ down: opscode-erchef: (pid 35546) 10s</pre> <p>By default, runit will restart services automatically when the services fail. Therefore, runit may report the status of a service as <code class=\"docutils literal\">run:</code> even when there is an issue with that service. When investigating why a particular service is not running as it should be, look for the services with the shortest uptimes. For example, the list below indicates that the <strong>opscode-erchef</strong> should be investigated further:</p> <pre class=\"highlight-bash\" data-language=\"bash\">run: oc-id\nrun: opscode-chef: (pid 4327) 13671s; run: log: (pid 4326) 13671s\nrun: opscode-erchef: (pid 5383) 5s; run: log: (pid 4382) 13669s\nrun: opscode-expander: (pid 4078) 13694s; run: log: (pid 4077) 13694s\nrun: opscode-expander-reindexer: (pid 4130) 13692s; run: log: (pid 4114) 13692s</pre>  <h4 id=\"high-availability\">High Availability</h4> <p>On back-end servers in a high availability topology, Keepalived is used by the clustering service to determine whether a service should be running. If the <code class=\"docutils literal\">status</code> subcommand is run against any of these nodes, a few things change:</p> <ul class=\"simple\"> <li>On the back-end node that is currently the backup server, it is normal to see only one running process: Keepalived</li> <li>On the back-end node that is currently the master server, it is normal to see all services running. It is also normal to see some services in a down state if the server, on reboot, did not attempt to start the services because Keepalived determines which services are restarted based on the state of the cluster</li> </ul> <p>A sample status line for a service that is running on the master server in a high availability topology:</p> <pre class=\"highlight-bash\" data-language=\"bash\">run: opscode-solr4: (pid 25341) 239s, normally down; run: log: (pid 5700) 145308s</pre>   <h4 id=\"log-files\">Log Files</h4> <p>A typical status line for a service that is running any of the Chef server front-end services is similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">run: name_of_service: (pid 1486) 7819s; run: log: (pid 1485) 7819s</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">run</code> describes the state in which the supervisor attempts to keep processes. This state is either <code class=\"docutils literal\">run</code> or <code class=\"docutils literal\">down</code>. If a service is in a <code class=\"docutils literal\">down</code> state, it should be stopped</li> <li>\n<code class=\"docutils literal\">name_of_service</code> is the service name, for example: <code class=\"docutils literal\">opscode-solr4</code>\n</li> <li>\n<code class=\"docutils literal\">(pid 1486) 7819s;</code> is the process identifier followed by the amount of time (in seconds) the service has been running</li> <li>\n<code class=\"docutils literal\">run: log: (pid 1485) 7819s</code> is the log process. It is typical for a log process to have a longer run time than a service; this is because the supervisor does not need to restart the log process in order to connect the supervised process</li> </ul> <p>If the service is down, the status line will appear similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">down: opscode-solr4: 3s, normally up; run: log: (pid 1485) 8526s</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">down</code> indicates that the service is in a down state</li> <li>\n<code class=\"docutils literal\">3s, normally up;</code> indicates that the service is normally in a run state and that the supervisor would attempt to restart this service after a reboot</li> </ul>    <h3 id=\"stop\">stop</h3> <p>The <code class=\"docutils literal\">stop</code> subcommand is used to stop all services enabled on the Chef server. This command can also be run for an individual service by specifying the name of the service in the command.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand. When a service is successfully stopped the output should be similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ok: diwb: service_name: 0s, normally up</pre> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl stop</pre> <p>will return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ok: down: nginx: 393s, normally up\nok: down: opscode-chef: 391s, normally up\nok: down: opscode-erchef: 391s, normally up\nok: down: opscode-expander: 390s, normally up\nok: down: opscode-expander-reindexer: 389s, normally up\nok: down: opscode-solr4: 389s, normally up\nok: down: postgresql: 388s, normally up\nok: down: rabbitmq: 388s, normally up\nok: down: redis_lb: 387s, normally up</pre>   <h3 id=\"tail\">tail</h3> <p>The <code class=\"docutils literal\">tail</code> subcommand is used to follow all of the Chef server logs for all services. This command can also be run for an individual service by specifying the name of the service in the command.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl tail SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand.</p>   <h3 id=\"term\">term</h3> <p>The <code class=\"docutils literal\">term</code> subcommand is used to send a <code class=\"docutils literal\">SIGTERM</code> to all services. This command can also be run for an individual service by specifying the name of the service in the command.</p> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl term SERVICE_NAME</pre> <p>where <code class=\"docutils literal\">SERVICE_NAME</code> represents the name of any service that is listed after running the <code class=\"docutils literal\">service-list</code> subcommand.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/ctl_chef_server.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/ctl_chef_server.html</a>\n  </p>\n</div>\n","12-9/knife":"<h1 id=\"about-knife\">About Knife</h1> <p>knife is a command-line tool that provides an interface between a local chef-repo and the Chef server. knife helps users to manage:</p> <ul class=\"simple\"> <li>Nodes</li> <li>Cookbooks and recipes</li> <li>Roles</li> <li>Stores of JSON data (data bags), including encrypted data</li> <li>Environments</li> <li>Cloud resources, including provisioning</li> <li>The installation of the chef-client on management workstations</li> <li>Searching of indexed data on the Chef server</li> </ul> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Topic</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"knife_using\">Working with Knife</a></td> <td>knife runs from a management workstation and sits in-between a Chef server and an organization’s infrastructure.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"knife_common_options\">Common Options</a></td> <td>There are many options that are available for all knife subcommands.</td> </tr> </tbody> </table> <p>knife includes the following subcommands:</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Subcommand</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"knife_bootstrap\">knife bootstrap</a></td> <td>Use the <code class=\"docutils literal\">knife bootstrap</code> subcommand to run a bootstrap operation that installs the chef-client on the target system. The bootstrap operation must specify the IP address or FQDN of the target system.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"knife_client\">knife client</a></td> <td>The <code class=\"docutils literal\">knife client</code> subcommand is used to manage an API client list and their associated RSA public key-pairs. This allows authentication requests to be made to the Chef server by any entity that uses the Chef server API, such as the chef-client and knife.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"knife_configure\">knife configure</a></td> <td>Use the <code class=\"docutils literal\">knife configure</code> subcommand to create the knife.rb and client.rb files so that they can be distributed to workstations and nodes.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"knife_cookbook\">knife cookbook</a></td> <td>The <code class=\"docutils literal\">knife cookbook</code> subcommand is used to interact with cookbooks that are located on the Chef server or the local chef-repo.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"knife_cookbook_site\">knife cookbook site</a></td> <td>The <code class=\"docutils literal\">knife cookbook site</code> subcommand is used to interact with cookbooks that are located at <a class=\"reference external\" href=\"https://supermarket.chef.io\">https://supermarket.chef.io</a>. A user account is required for any community actions that write data to this site. The following arguments do not require a user account: <code class=\"docutils literal\">download</code>, <code class=\"docutils literal\">search</code>, <code class=\"docutils literal\">install</code>, and <code class=\"docutils literal\">list</code>.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"knife_data_bag\">knife data bag</a></td> <td>The <code class=\"docutils literal\">knife data bag</code> subcommand is used to manage arbitrary stores of globally available JSON data.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"knife_delete\">knife delete</a></td> <td>Use the <code class=\"docutils literal\">knife delete</code> subcommand to delete an object from a Chef server. This subcommand works similar to <code class=\"docutils literal\">knife cookbook delete</code>, <code class=\"docutils literal\">knife data bag delete</code>, <code class=\"docutils literal\">knife environment delete</code>, <code class=\"docutils literal\">knife node delete</code>, and <code class=\"docutils literal\">knife role delete</code>, but with a single verb (and a single action).</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"knife_deps\">knife deps</a></td> <td>Use the <code class=\"docutils literal\">knife deps</code> subcommand to identify dependencies for a node, role, or cookbook.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"knife_diff\">knife diff</a></td> <td>Use the <code class=\"docutils literal\">knife diff</code> subcommand to compare the differences between files and directories on the Chef server and in the chef-repo. For example, to compare files on the Chef server prior to an uploading or downloading files using the <code class=\"docutils literal\">knife download</code> and <code class=\"docutils literal\">knife upload</code> subcommands, or to ensure that certain files in multiple production environments are the same. This subcommand is similar to the <code class=\"docutils literal\">git diff</code> command that can be used to diff what is in the chef-repo with what is synced to a git repository.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"knife_download\">knife download</a></td> <td>Use the <code class=\"docutils literal\">knife download</code> subcommand to download roles, cookbooks, environments, nodes, and data bags from the Chef server to the current working directory. It can be used to back up data on the Chef server, inspect the state of one or more files, or to extract out-of-process changes users may have made to files on the Chef server, such as if a user made a change that bypassed version source control. This subcommand is often used in conjunction with <code class=\"docutils literal\">knife diff</code>, which can be used to see exactly what changes will be downloaded, and then <code class=\"docutils literal\">knife upload</code>, which does the opposite of <code class=\"docutils literal\">knife download</code>.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"knife_edit\">knife edit</a></td> <td>Use the <code class=\"docutils literal\">knife edit</code> subcommand to edit objects on the Chef server. This subcommand works similar to <code class=\"docutils literal\">knife cookbook edit</code>, <code class=\"docutils literal\">knife data bag edit</code>, <code class=\"docutils literal\">knife environment edit</code>, <code class=\"docutils literal\">knife node edit</code>, and <code class=\"docutils literal\">knife role edit</code>, but with a single verb (and a single action).</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"knife_environment\">knife environment</a></td> <td>The <code class=\"docutils literal\">knife environment</code> subcommand is used to manage environments within a single organization on the Chef server.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"knife_exec\">knife exec</a></td> <td>The <code class=\"docutils literal\">knife exec</code> subcommand uses the knife configuration file to execute Ruby scripts in the context of a fully configured chef-client. Use this subcommand to run scripts that will only access Chef server one time (or otherwise very infrequently) or any time that an operation does not warrant full usage of the knife subcommand library.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"knife_list\">knife list</a></td> <td>Use the <code class=\"docutils literal\">knife list</code> subcommand to view a list of objects on the Chef server. This subcommand works similar to <code class=\"docutils literal\">knife cookbook list</code>, <code class=\"docutils literal\">knife data bag list</code>, <code class=\"docutils literal\">knife environment list</code>, <code class=\"docutils literal\">knife node list</code>, and <code class=\"docutils literal\">knife role list</code>, but with a single verb (and a single action).</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"knife_node\">knife node</a></td> <td>The <code class=\"docutils literal\">knife node</code> subcommand is used to manage the nodes that exist on a Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"knife_raw\">knife raw</a></td> <td>Use the <code class=\"docutils literal\">knife raw</code> subcommand to send a REST request to an endpoint in the Chef server API.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"knife_recipe_list\">knife recipe list</a></td> <td>Use the <code class=\"docutils literal\">knife recipe list</code> subcommand to view all of the recipes that are on a Chef server. A regular expression can be used to limit the results to recipes that match a specific pattern. The regular expression must be within quotes and not be surrounded by forward slashes (/).</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"knife_role\">knife role</a></td> <td>The <code class=\"docutils literal\">knife role</code> subcommand is used to manage the roles that are associated with one or more nodes on a Chef server.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"knife_search\">knife search</a></td> <td>Use the <code class=\"docutils literal\">knife search</code> subcommand run a search query for information that is indexed on a Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"knife_serve\">knife serve</a></td> <td>Use the <code class=\"docutils literal\">knife serve</code> subcommand to run a persistent chef-zero against the local chef-repo. (chef-zero is a lightweight Chef server that runs in-memory on the local machine.) This is the same as running the chef-client executable with the <code class=\"docutils literal\">--local-mode</code> option. The <code class=\"docutils literal\">chef_repo_path</code> is located automatically and the Chef server will bind to the first available port between <code class=\"docutils literal\">8889</code> and <code class=\"docutils literal\">9999</code>. <code class=\"docutils literal\">knife serve</code> will print the URL for the local Chef server, so that it may be added to the knife.rb file.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"knife_show\">knife show</a></td> <td>Use the <code class=\"docutils literal\">knife show</code> subcommand to view the details of one (or more) objects on the Chef server. This subcommand works similar to <code class=\"docutils literal\">knife cookbook show</code>, <code class=\"docutils literal\">knife data bag show</code>, <code class=\"docutils literal\">knife environment show</code>, <code class=\"docutils literal\">knife node show</code>, and <code class=\"docutils literal\">knife role show</code>, but with a single verb (and a single action).</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"knife_ssl_check\">knife ssl check</a></td> <td>\n<p class=\"first\">Use the <code class=\"docutils literal\">knife ssl check</code> subcommand to verify the SSL configuration for the Chef server or a location specified by a URL or URI. Invalid certificates will not be used by OpenSSL.</p> <p>When this command is run, the certificate files (<code class=\"docutils literal\">*.crt</code> and/or <code class=\"docutils literal\">*.pem</code>) that are located in the <code class=\"docutils literal\">/.chef/trusted_certs</code> directory are checked to see if they have valid X.509 certificate properties. A warning is returned when certificates do not have valid X.509 certificate properties or if the <code class=\"docutils literal\">/.chef/trusted_certs</code> directory does not contain any certificates.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">When verification of a remote server’s SSL certificate is disabled, the chef-client will issue a warning similar to “SSL validation of HTTPS requests is disabled. HTTPS connections are still encrypted, but the chef-client is not able to detect forged replies or man-in-the-middle attacks.” To configure SSL for the chef-client, set <code class=\"docutils literal\">ssl_verify_mode</code> to <code class=\"docutils literal\">:verify_peer</code> (recommended) <strong>or</strong> <code class=\"docutils literal\">verify_api_cert</code> to <code class=\"docutils literal\">true</code> in the client.rb file.</p> </div> </td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"knife_ssl_fetch\">knife ssl_fetch</a></td> <td>\n<p class=\"first\">Use the <code class=\"docutils literal\">knife ssl fetch</code> subcommand to copy SSL certificates from an HTTPS server to the <code class=\"docutils literal\">trusted_certs_dir</code> directory that is used by knife and the chef-client to store trusted SSL certificates. When these certificates match the hostname of the remote server, running <code class=\"docutils literal\">knife ssl fetch</code> is the only step required to verify a remote server that is accessed by either knife or the chef-client.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">It is the user’s responsibility to verify the authenticity of every SSL certificate before downloading it to the <code class=\"docutils literal\">/.chef/trusted_certs</code> directory. knife will use any certificate in that directory as if it is a 100% trusted and authentic SSL certificate. knife will not be able to determine if any certificate in this directory has been tampered with, is forged, malicious, or otherwise harmful. Therefore it is essential that users take the proper steps before downloading certificates into this directory.</p> </div> </td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"knife_ssh\">knife ssh</a></td> <td>Use the <code class=\"docutils literal\">knife ssh</code> subcommand to invoke SSH commands (in parallel) on a subset of nodes within an organization, based on the results of a <a class=\"reference external\" href=\"https://docs.chef.io/essentials_search.html\">search query</a> made to the Chef server.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"knife_status\">knife status</a></td> <td>Use the <code class=\"docutils literal\">knife status</code> subcommand to display a brief summary of the nodes on a Chef server, including the time of the most recent successful chef-client run.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"knife_tag\">knife tag</a></td> <td>The <code class=\"docutils literal\">knife tag</code> subcommand is used to apply tags to nodes on a Chef server.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"knife_upload\">knife upload</a></td> <td>\n<p class=\"first\">Use the <code class=\"docutils literal\">knife upload</code> subcommand to upload data to the Chef server from the current working directory in the chef-repo. The following types of data may be uploaded with this subcommand:</p> <ul class=\"simple\"> <li>Cookbooks</li> <li>Data bags</li> <li>Roles stored as JSON data</li> <li>Environments stored as JSON data</li> </ul> <p class=\"last\">(Roles and environments stored as Ruby data will not be uploaded.) This subcommand is often used in conjunction with <code class=\"docutils literal\">knife diff</code>, which can be used to see exactly what changes will be uploaded, and then <code class=\"docutils literal\">knife download</code>, which does the opposite of <code class=\"docutils literal\">knife upload</code>.</p> </td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"knife_user\">knife user</a></td> <td>The <code class=\"docutils literal\">knife user</code> subcommand is used to manage the list of users and their associated RSA public key-pairs.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"knife_xargs\">knife xargs</a></td> <td>Use the <code class=\"docutils literal\">knife xargs</code> subcommand to take patterns from standard input, download as JSON, run a command against the downloaded JSON, and then upload any changes.</td> </tr> </tbody> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife.html</a>\n  </p>\n</div>\n","12-9/chef_repo":"<h1 id=\"about-the-chef-repo\">About the chef-repo</h1> <p>The chef-repo is the location in which the following data objects are stored:</p> <ul class=\"simple\"> <li>Cookbooks (including recipes, versions, cookbook attributes, resources, providers, libraries, and templates)</li> <li>Roles</li> <li>Data bags</li> <li>Environments</li> <li>Configuration files (for clients, workstations, and servers)</li> </ul> <p>The chef-repo is located on a workstation and should be synchronized with a version control system, such as git. All of the data in the chef-repo should be treated like source code.</p> <p>knife is used to upload data to the Chef server from the chef-repo. Once uploaded, that data is used by the chef-client to manage all of the nodes that are registered with the Chef server and to ensure that the correct cookbooks, environments, roles, and other settings are applied to nodes correctly.</p>  <h2 id=\"directory-structure\">Directory Structure</h2> <p>The chef-repo contains several directories, each with a README file that describes what it is for and how to use that directory when managing systems.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This document describes the default directory that is present in most instances of the chef-repo.</p> </div> <p>The sub-directories in the chef-repo are:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Directory</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">.chef/</code></td> <td>A hidden directory that is used to store validation key files and the knife.rb file.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">cookbooks/</code></td> <td>Contains cookbooks that have been downloaded from the <a class=\"reference external\" href=\"https://supermarket.chef.io\">https://supermarket.chef.io</a> or created locally.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">data_bags/</code></td> <td>Stores data bags (and data bag items) in JSON (.json).</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">environments/</code></td> <td>Stores environment in Ruby (.rb) or JSON (.json).</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">roles/</code></td> <td>Stores roles in Ruby (.rb) or JSON (.json).</td> </tr> </tbody> </table>  <h3 id=\"chef\">.chef/</h3> <p>The .chef directory is a hidden directory that is used to store validation key files and the knife.rb file. These files are required for interaction with a Chef server.</p>   <h3 id=\"cookbooks\">cookbooks/</h3> <p>The <code class=\"docutils literal\">cookbooks/</code> directory is used to store the cookbooks that are used by the chef-client when configuring the various systems in the organization. This directory contains the cookbooks that are used to configure systems in the infrastructure. Each cookbook can be configured to contain cookbook-specific copyright, email, and license data.</p>   <h3 id=\"data-bags\">data_bags/</h3> <p>The <code class=\"docutils literal\">data_bags/</code> directory is used to store all of the data bags that exist for an organization. Each sub-directory corresponds to a single data bag on the Chef server and contains a JSON file for each data bag item. If a sub-directory does not exist, then create it using SSL commands. After a data bag item is created, it can then be uploaded to the Chef server.</p>   <h3 id=\"environments\">environments/</h3> <p>The <code class=\"docutils literal\">environments/</code> directory is used to store the files that define the environments that are available to the Chef server. The environments files can be Ruby DSL files (.rb) or they can be JSON files (.json). Use knife to install environment files to the Chef server.</p>   <h3 id=\"roles\">roles/</h3> <p>The <code class=\"docutils literal\">roles/</code> directory is used to store the files that define the roles that are available to the Chef server. The roles files can be Ruby DSL files (.rb) or they can be JSON files (.json). Use knife to install role files to the Chef server.</p>    <h2 id=\"chefignore-files\">chefignore Files</h2> <p>The chefignore file is used to tell knife which cookbook files in the chef-repo should be ignored when uploading data to the Chef server. The type of data that should be ignored includes swap files, version control data, build output data, and so on. The chefignore file uses the <code class=\"docutils literal\">File.fnmatch</code> Ruby syntax to define the ignore patterns using <code class=\"docutils literal\">*</code>, <code class=\"docutils literal\">**</code>, and <code class=\"docutils literal\">?</code> wildcards.</p> <ul class=\"simple\"> <li>A pattern is relative to the cookbook root</li> <li>A pattern may contain relative directory names</li> <li>A pattern may match all files in a directory</li> </ul> <p>The chefignore file is located at the root of the <code class=\"docutils literal\">/cookbooks</code> subdirectory in the chef-repo. It should contain sections similar to the following:</p> <pre class=\"highlight-basemake\" data-language=\"basemake\"># section\n*ignore_pattern\n\n# section\nignore_pattern*\n\n# section\n**ignore_pattern\n\n# section\nignore_pattern**\n\n# section\n?ignore_pattern\n\n# section\nignore_pattern?</pre>  <h3 id=\"examples\">Examples</h3> <p>The following examples show how to add entries to the <code class=\"docutils literal\">chefignore</code> file.</p> <p><strong>Ignore editor swap files</strong></p> <p>Many text editors leave files behind. To prevent these files from being uploaded to the Chef server, add an entry to the chefignore file. For Emacs, do something like:</p> <pre class=\"highlight-basemake\" data-language=\"basemake\">*~</pre> <p>and for vim, do something like:</p> <pre class=\"highlight-basemake\" data-language=\"basemake\">*.sw[a-z]</pre> <p><strong>Ignore top-level Subversion data</strong></p> <p>If Subversion is being used as the version source control application, it is important not to upload certain files that Subversion uses to maintain the version history of each file. This is because the chef-client will never use it while configuring nodes, plus the amount of data in an upload that includes top-level Subversion data could be significant.</p> <p>To prevent the upload of top-level Subversion data, add something like the following to the chefignore file:</p> <pre class=\"highlight-basemake\" data-language=\"basemake\">*/.svn/*</pre> <p>To verify that the top-level Subversion data is not being uploaded to the Chef server, use knife and run a command similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook show name_of_cookbook cookbook_version | grep .svn</pre> <p><strong>Ignore all files in a directory</strong></p> <p>The chefignore file can be used to ignore all of the files in a directory. For example:</p> <pre class=\"highlight-basemake\" data-language=\"basemake\">files/default/subdirectory/*</pre> <p>or:</p> <pre class=\"highlight-basemake\" data-language=\"basemake\">files/default/subdirectory/**</pre>    <h2 id=\"many-users-same-repo\">Many Users, Same Repo</h2> <p>It is possible for multiple users to access the Chef server using the same knife.rb file. (A user can even access multiple organizations if, for example, each instance of the chef-repo contained the same copy of the knife.rb file.) This can be done by adding the knife.rb file to the chef-repo, and then using environment variables to handle the user-specific credential details and/or sensitive values. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">current_dir = File.dirname(__FILE__)\n  user = ENV['OPSCODE_USER'] || ENV['USER']\n  node_name                user\n  client_key               \"#{ENV['HOME']}/chef-repo/.chef/#{user}.pem\"\n  validation_client_name   \"#{ENV['ORGNAME']}-validator\"\n  validation_key           \"#{ENV['HOME']}/chef-repo/.chef/#{ENV['ORGNAME']}-validator.pem\"\n  chef_server_url          \"https://api.opscode.com/organizations/#{ENV['ORGNAME']}\"\n  syntax_check_cache_path  \"#{ENV['HOME']}/chef-repo/.chef/syntax_check_cache\"\n  cookbook_path            [\"#{current_dir}/../cookbooks\"]\n  cookbook_copyright       'Your Company, Inc.'\n  cookbook_license         'apachev2\"\n  cookbook_email           'cookbooks@yourcompany.com'\n\n  # Amazon AWS\n  knife[:aws_access_key_id] = ENV['AWS_ACCESS_KEY_ID']\n  knife[:aws_secret_access_key] = ENV['AWS_SECRET_ACCESS_KEY']\n\n  # Rackspace Cloud\n  knife[:rackspace_api_username] = ENV['RACKSPACE_USERNAME']\n  knife[:rackspace_api_key] = ENV['RACKSPACE_API_KEY']</pre>   <h2 id=\"create-the-chef-repo\">Create the chef-repo</h2> <p>There are two ways to create a chef-repo when using the Chef boilerplate repository as a base:</p> <ul class=\"simple\"> <li>Clone the chef-repo from GitHub</li> <li>Download the chef-repo as a tar.gz file and place it into local version source control.</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Chef strongly recommends using some type of version control tool to manage the source code in the chef-repo. Chef uses git for everything, including for cookbooks. git and/or GitHub is not required to use Chef. If another version source control system is preferred over git (such as Subversion, Mercurial, or Bazaar) that is just fine.</p> </div>  <h3 id=\"generate\">Generate</h3> <p>To create a chef-repo, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef generate repo REPO_NAME</pre> <p>This command uses the <code class=\"docutils literal\">chef</code> command-line tool that is packaged as part of the Chef development kit to create a chef-repo.</p>    <h2 id=\"use-git\">Use git</h2> <p>Chef is maintained on GitHub. To contribute to Chef, such as submitting a pull request, requires using GitHub and git. The sections below describe how to use git to set up the Chef repository, keep it current and synchronized, and how to use branches to submit pull requests.</p>  <h3 id=\"set-up-repo\">Set Up Repo</h3> <p>Use the following steps to set up a development repository for Chef:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Setup a GitHub account.</p> </li> <li>\n<p class=\"first\">Fork the <a class=\"reference external\" href=\"https://github.com/chef/chef\">https://github.com/chef/chef</a> repository to your GitHub account.</p> </li> <li>\n<p class=\"first\">Clone the <a class=\"reference external\" href=\"https://github.com/chef/chef\">https://github.com/chef/chef</a> repository:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git clone git@github.com:yourgithubusername/chef.git</pre> </li> <li>\n<p class=\"first\">From the command line, browse to the <code class=\"docutils literal\">chef/</code> directory:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ cd chef/</pre> </li> <li>\n<p class=\"first\">From the <code class=\"docutils literal\">chef/</code> directory, add a remote named <code class=\"docutils literal\">chef</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git remote add chef git://github.com/chef/chef.git</pre> </li> <li>\n<p class=\"first\">Verify:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git config --get-regexp \"^remote\\.chef\"</pre> <p>which should return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">remote.chef.url git://github.com/chef/chef.git\nremote.chef.fetch +refs/heads/*:refs/remotes/chef/*</pre> </li> <li>\n<p class=\"first\">Adjust your branch to track the <code class=\"docutils literal\">chef/master</code> remote branch:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git config --get-regexp \"^branch\\.master\"</pre> <p>which should return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">branch.master.remote origin\nbranch.master.merge refs/heads/master</pre> <p>and then change it:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git config branch.master.remote chef</pre> </li> </ol>   <h3 id=\"keep-master-current\">Keep Master Current</h3> <p>Use the following steps to keep the master branch up to date.</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git checkout master</pre> </li> <li>\n<p class=\"first\">And then run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git pull --rebase</pre> </li> </ol> <p>The following <code class=\"docutils literal\">rakefile</code> can be used to update Chef, Ohai, and cookbooks. Edit as necessary:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">projects = %w[chef cookbooks ohai]\nchef = \"#{ENV['HOME']}/projects/chef\"\n\ndesc 'Update local repositories from upstream'\ntask :update do\n  projects.each do |p|\n    Dir.chdir('#{chef}/#{p}') do\n      sh 'git fetch chef'\n      sh 'git rebase chef/master master'\n    end\n  end\nend</pre>   <h3 id=\"sync-master\">Sync Master</h3> <p>Use the following steps to synchronize the master branch.</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git fetch chef</pre> </li> <li>\n<p class=\"first\">And then run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git rebase chef/master master</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Use <code class=\"docutils literal\">rebase</code> instead of <code class=\"docutils literal\">merge</code> to ensure that a linear history is maintained that does not include unnecessary merge commits. <code class=\"docutils literal\">rebase</code> will also rewind, apply, and then reapply commits to the <code class=\"docutils literal\">master</code> branch.</p> </div> </li> </ol>   <h3 id=\"use-branch\">Use Branch</h3> <p>Commits to the Chef repositories should never be made agains the master branch. Use a topic branch instead. A topic branch solves a single and unique problem and often maps closely to an issue being tracked in the repository. For example, a topic branch to add support for a new init system or a topic branch to resolve a bug that occurs in a specific version of CentOS. Ideally, a topic branch is named in a way that associates it closely with the issue it is attempting to resolve. This helps ensure that others may easily find it.</p> <p>Use the following steps to create a topic branch:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">For a brand new clone of the Chef repository (that was created using the steps listed earlier), fetch the <code class=\"docutils literal\">opscode</code> remote:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git fetch chef</pre> </li> <li>\n<p class=\"first\">Create an appropriately named tracking branch:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git checkout --track -b CHEF-XX chef/master</pre> <p>Set up a topic branch to track <code class=\"docutils literal\">chef/master</code>. This allows commits to be easily rebased prior to merging.</p> </li> <li>\n<p class=\"first\">Make your changes, and then commit them:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git status</pre> </li> <li>\n<p class=\"first\">And then run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git commit &lt;filespec&gt;</pre> </li> <li>\n<p class=\"first\">Rebase the commits against <code class=\"docutils literal\">chef/master</code>. After work in the topic branch is finished, rebase these commits against the upstream master. Do this manually with <code class=\"docutils literal\">git fetch</code> followed by a <code class=\"docutils literal\">git rebase</code> or use <code class=\"docutils literal\">git pull --rebase</code>.</p> <p>git will let you know if there are any problems. In the event of problems, fix them as directed, and then mark as fixed with a <code class=\"docutils literal\">git add</code>, and then continue the rebase process using <code class=\"docutils literal\">git rebase --continue</code>.</p> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git fetch chef</pre> <p>followed by:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git rebase chef/master CHEF-XX</pre> <p>Or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git pull --rebase</pre> </li> <li>\n<p class=\"first\">Push the local topic branch to GitHub:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git push origin CHEF-XX</pre> </li> <li>\n<p class=\"first\">Send a GitHub pull request for the changes, and then update the Chef ticket with the appropriate information.</p> </li> </ol>   <h3 id=\"delete-branch\">Delete Branch</h3> <p>After work has been merged by the branch maintainer, the topic branch is no longer necessary and should be removed.</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Synchronize the local master:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git checkout master</pre> <p>followed by:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git pull --rebase</pre> </li> <li>\n<p class=\"first\">Remove the local branch using <code class=\"docutils literal\">-d</code> to ensure that it has been merged by upstream. This option will not delete a branch that is not an ancestor of the current <code class=\"docutils literal\">HEAD</code>. From the git man page:</p> <pre class=\"highlight-bash\" data-language=\"bash\">-d\n  Delete a branch. The branch must be fully merged in HEAD.\n-D\n  Delete a branch irrespective of its merged status.</pre> </li> <li>\n<p class=\"first\">Remove the local branch:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git branch -d CHEF-XX</pre> <p>Or remove the remote branch by using the full syntax to <code class=\"docutils literal\">push</code> and by omitting a source branch:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ git push origin :CHEF-XX</pre> </li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/chef_repo.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/chef_repo.html</a>\n  </p>\n</div>\n","12-9/server_components":"<h1 id=\"about-the-chef-server-title\">About the Chef Server</h1> <p>The Chef server acts as a hub for configuration data. The Chef server stores cookbooks, the policies that are applied to nodes, and metadata that describes each registered node that is being managed by the chef-client. Nodes use the chef-client to ask the Chef server for configuration details, such as recipes, templates, and file distributions. The chef-client then does as much of the configuration work as possible on the nodes themselves (and not on the Chef server). This scalable approach distributes the configuration effort throughout the organization.</p> <p>Starting with the release of Chef server 11, the front-end for the Chef server is written using <a class=\"reference external\" href=\"http://www.erlang.org/\">Erlang</a>, which is a programming language that <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Erlang_%28programming_language%29\">first appeared in 1986</a>, was open sourced in 1998, and is excellent with critical enterprise concerns like concurrency, fault-tolerance, and distributed environments. The Chef server can scale to the size of any enterprise and is sometimes referred to as Erchef.</p> <p>The following diagram shows the various components that are part of a Chef server deployment and how they relate to one another.</p> <img src=\"https://docs.chef.io/release/12-9/_images/server_components.svg\" width=\"500px\"> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Component</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Clients</td> <td>The Chef server is accessed primarily by nodes that are under management by Chef, as the chef-client runs occur. It is also accessed by individuals who maintain cookbooks and policy that is stored on the Chef server, typically from a workstation. And also by individual users with credentials to Chef server components, such as the Chef management console.</td> </tr> <tr class=\"row-odd\">\n<td>Load Balancer</td> <td>Nginx is an open-source HTTP and reverse proxy server that is used as the front-end load balancer for the Chef server. All requests to the Chef server API are routed through Nginx.</td> </tr> <tr class=\"row-even\">\n<td>Chef Manage</td> <td>\n<p class=\"first\">chef-server-webui is a Ruby on Rails 3.0 application that hosts the web interface for the Chef server.</p> <p class=\"last\">The Chef management console uses the Chef server API for all communication to the Chef server.</p> </td> </tr> <tr class=\"row-odd\">\n<td>Chef Server</td> <td>\n<p class=\"first\">Erchef is a complete rewrite of the core API for the Chef server, which allows it to be faster and more scalable than previous versions. The API itself is still compatible with the original Ruby-based Chef server, which means that cookbooks and recipes that were authored for the Ruby-based Chef server will continue to work on the Erlang-based Chef server. The chef-client is still written in Ruby.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Even though the Chef server is authored in Erlang, writing code in Erlang is NOT a requirement for using Chef.</p> </div> </td> </tr> <tr class=\"row-even\">\n<td>Bookshelf</td> <td>\n<p class=\"first\">Bookshelf is used to store cookbook content—files, templates, and so on—that have been uploaded to the Chef server as part of a cookbook version. Cookbook content is stored by content checksum. If two different cookbooks or different versions of the same cookbook include the same file or template, Bookshelf will store that file only once. The cookbook content managed by Bookshelf is stored in flat files and is separated from the Chef server and search index repositories.</p> <p class=\"last\">All cookbooks are stored in a dedicated repository.</p> </td> </tr> <tr class=\"row-odd\">\n<td>Message Queues</td> <td>\n<p class=\"first\">Messages are sent to the search index using the following components:</p> <blockquote> <div>\n<ol class=\"arabic simple\"> <li>RabbitMQ is used as the message queue for the Chef server. All items that will be added to the search index repository are first added to a queue.</li> <li>chef-expander is used to pull messages from the RabbitMQ queue, process them into the required format, and then post them to chef-solr for indexing.</li> <li>chef-solr wraps Apache Solr and exposes its REST API for indexing and search.</li> </ol> </div>\n</blockquote> <p class=\"last\">All messages are added to a dedicated search index repository.</p> </td> </tr> <tr class=\"row-even\">\n<td>PostgreSQL</td> <td>PostgreSQL is the data storage repository for the Chef server.</td> </tr> </tbody> </table>  <h2 id=\"capacity-planning\">Capacity Planning</h2> <p>This section provides guidance for capacity planning and how to choose the right configuration–standalone, high availability, or tiered–for the Chef server. This section provides guidance and not hard/fast rules. This is because some requests to the Chef server API are more computationally expensive than others. In general, it’s better to start small and then scale the Chef server as needed. Premature optimization can hinder more than help because it may introduce unnecessary complexity.</p>  <h3 id=\"scaling-the-chef-server\">Scaling the Chef Server</h3> <p>The Chef server itself is highly scalable. A single virtual machine running the Chef server can handle requests for many thousands of nodes. As the scale increases, it’s a straightforward process to expand into a tiered front-end, back-end architecture with horizontally scaled front-ends to relieve pressure on system bottlenecks.</p> <p>That said, it’s best to isolate failure domains with their own Chef server, rather than trying to run every node in an infrastructure from a single central, monolithic Chef server instance/cluster.</p> <p>For instance, if there are West coast and East coast data centers, it is best to have one Chef server instance in each datacenter. Deploys to each Chef server can be synchronized upstream by CI software. The primary limiting bottleneck for Chef server installations is almost always input/output operations per second (IOPS) performance for the database filesystem.</p>   <h3 id=\"ccrs-min\">CCRs/min</h3> <p>The key unit of measure for scaling the Chef server is the number of chef-client runs per minute: CCRs/min. For example, 500 nodes set to check in every 30 minutes is equivalent to 16.66 CCRs/min.</p> <p>Typically, the Chef server does not require a high availability or tiered topology until the number of CCRs/min is higher than 333/min (approximately 10k nodes).</p> <p>While synthetic benchmarks should be taken with a grain of salt, as they don’t typically represent real-world performance, internal synthetic benchmarks at Chef have seen a standalone Chef server installed on a <code class=\"docutils literal\">c3.2xlarge</code> Amazon Web Services (AWS) instance handle more than 1,000 CCRs/min (30k nodes).</p>   <h3 id=\"assumptions\">Assumptions</h3> <p>Several factors may influence server scalability. All server sizing recommendations are based on these assumptions:</p> <ul class=\"simple\"> <li>chef-client runs are daemonized, and are not initiated by a cron job. Using cron to schedule runs can create “thundering herd” problems</li> <li>chef-client runs are set to a default 30-minute interval with a 5-minute splay</li> <li>Search and <code class=\"docutils literal\">partial_search</code> are utilized, but not heavily</li> <li>The number of cookbooks per organization, across all versions, on the Chef server is under 500. (Multiple organizations with fewer than 500 cookbooks each, that still add up to a total of more than 500 cookbooks server-wide, is fine.)</li> <li>The default maximum allowable size for a node object is 1MB, although it is rare for nodes to exceed 150KB. Though compressed, this data is replicated twice, once in Apache Solr, and once in PostgreSQL. In practice, allowing a conservative 2MB of storage on the disk partition per node should be sufficient</li> <li>Disk space estimates assume that the Reporting add-on is not installed</li> </ul>   <h3 id=\"host-specifications\">Host Specifications</h3> <p>The following sections describe the host specifications for various sizes of CCRs/min and help show when to consider moving from a standalone topology to a high availability or tiered topology.</p> <p><strong>UP TO 33 CCRs/Min (approx. 1,000 nodes):</strong></p> <ul class=\"simple\"> <li>Chef recommends a single virtual machine instance</li> <li>Start with 2 CPU cores and 8GB of RAM, which is equivalent to an Amazon EC2 <code class=\"docutils literal\">m3.large</code> instance</li> <li>Allocate 2MB of disk space on the data partition per managed node</li> </ul> <p><strong>UP TO 167 CCRs/Min (approx. 5,000 nodes):</strong></p> <ul class=\"simple\"> <li>Chef recommends a single virtual machine instance</li> <li>Start with 4 CPU cores and 16GB of RAM, which is equivalent to an Amazon EC2 <code class=\"docutils literal\">m3.xlarge</code> instance</li> </ul> <p><strong>UP TO 333 CCRs/Min (Approx. 10,000 nodes):</strong></p> <ul class=\"simple\"> <li>Chef recommends a single virtual machine instance</li> <li>Start with 8 CPU cores and 32GB of RAM, which is equivalent to an Amazon EC2 <code class=\"docutils literal\">m3.2xlarge</code> instance</li> </ul> <p><strong>UP TO 667 CCRs/Min (Approx. 20,000 nodes):</strong></p> <ul class=\"simple\"> <li>Chef recommends two hosts, one front-end and one back-end</li> <li>The disk requirement for the front-end server is negligible</li> <li>Start with 8 CPU cores and 32GB of RAM for each host, which is equivalent to an Amazon EC2 <code class=\"docutils literal\">m3.2xlarge</code> instance</li> </ul> <p><strong>Scaling beyond 20,000 nodes on a single cluster:</strong></p> <ul class=\"simple\"> <li>Additional capacity can be gained by placing the front-end node behind an HTTP load balancer, and then scaling front-end nodes horizontally</li> <li>Chef recommends that Chef professional services be engaged to help with capacity and architectural planning at this size</li> </ul>    <h2 id=\"external-cookbooks\">External Cookbooks</h2> <p>The following diagram highlights the specific changes that occur when cookbooks are stored at an external location, such as Amazon Simple Storage Service (S3).</p> <img src=\"https://docs.chef.io/release/12-9/_images/server_components_s3.svg\" width=\"500px\"> <p>The following table describes the components that are different from the default configuration of the Chef server when cookbooks are stored at an external location:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Component</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Clients</td> <td>The Chef server will provide signed URLs for cookbook requests made by the various clients (individual users, knife requests, and from the chef-client that is installed on nodes under management by Chef).</td> </tr> <tr class=\"row-odd\">\n<td>Load Balancer</td> <td>The signed URLs for cookbooks are pointed here, and then routed to cookbook storage, as required.</td> </tr> <tr class=\"row-even\">\n<td>Chef Server</td> <td>\n<p class=\"first\">Erchef is a complete rewrite of the core API for the Chef server, which allows it to be faster and more scalable than previous versions. The API itself is still compatible with the original Ruby-based Chef server, which means that cookbooks and recipes that were authored for the Ruby-based Chef server will continue to work on the Erlang-based Chef server. The chef-client is still written in Ruby.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Even though the Chef server is authored in Erlang, writing code in Erlang is NOT a requirement for using Chef.</p> </div> </td> </tr> <tr class=\"row-odd\">\n<td>Amazon Simple Storage Service (S3)</td> <td>\n<p class=\"first\">Bookshelf is used to store cookbook content—files, templates, and so on—that have been uploaded to the Chef server as part of a cookbook version. Cookbook content is stored by content checksum. If two different cookbooks or different versions of the same cookbook include the same file or template, Bookshelf will store that file only once. The cookbook content managed by Bookshelf is stored in flat files and is separated from the Chef server and search index repositories.</p> <p class=\"last\">This represents external cookbooks storage at Amazon Simple Storage Service (S3).</p> </td> </tr> </tbody> </table>  <h3 id=\"aws-settings\">AWS Settings</h3> <p>Use the following configuration settings in the chef-server.rb file to configure external cookbook storage using Amazon Simple Storage Service (S3):</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">bookshelf['access_key_id']</code></td> <td>The access key identifier. (This is configurable and may be pointed at external storage locations, such as Amazon EC2. Four settings require configuration when pointing at an external cookbook storage location: <code class=\"docutils literal\">bookshelf['vip']</code>, for the endpoint used by the chef-client; <code class=\"docutils literal\">bookshelf['external_url']</code>, for the endpoint used by the Chef server; <code class=\"docutils literal\">bookshelf['access_key_id']</code>, for user access key; <code class=\"docutils literal\">bookshelf['secret_access_key']</code>, for secret key; and <code class=\"docutils literal\">opscode_erchef['s3_bucket']</code>, for the bucket name. Reconfigure the Chef server after changing these settings. Default value: generated by default.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">bookshelf['secret_access_key']</code></td> <td>The secret key. (This is configurable and may be pointed at external storage locations, such as Amazon EC2. Four settings require configuration when pointing at an external cookbook storage location: <code class=\"docutils literal\">bookshelf['vip']</code>, for the endpoint used by the chef-client; <code class=\"docutils literal\">bookshelf['external_url']</code>, for the endpoint used by the Chef server; <code class=\"docutils literal\">bookshelf['access_key_id']</code>, for user access key; <code class=\"docutils literal\">bookshelf['secret_access_key']</code>, for secret key; and <code class=\"docutils literal\">opscode_erchef['s3_bucket']</code>, for the bucket name. Reconfigure the Chef server after changing these settings. Default value: generated by default.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">bookshelf['vip']</code></td> <td>The virtual IP address. Default value: <code class=\"docutils literal\">127.0.0.1</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">opscode_erchef['nginx_bookshelf_caching']</code></td> <td>Whether Nginx is used to cache cookbooks. When <code class=\"docutils literal\">:on</code>, Nginx serves up the cached content instead of forwarding the request. Default value: <code class=\"docutils literal\">:off</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">opscode_erchef['s3_bucket']</code></td> <td>The name of the Amazon Simple Storage Service (S3) bucket. (This is configurable and may be pointed at external storage locations, such as Amazon EC2. Four settings require configuration when pointing at an external cookbook storage location: <code class=\"docutils literal\">bookshelf['vip']</code>, for the endpoint used by the chef-client; <code class=\"docutils literal\">bookshelf['external_url']</code>, for the endpoint used by the Chef server; <code class=\"docutils literal\">bookshelf['access_key_id']</code>, for user access key; <code class=\"docutils literal\">bookshelf['secret_access_key']</code>, for secret key; and <code class=\"docutils literal\">opscode_erchef['s3_bucket']</code>, for the bucket name. Reconfigure the Chef server after changing these settings. Default value: <code class=\"docutils literal\">bookshelf</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">opscode_erchef['s3_parallel_ops_fanout']</code></td> <td>Default value: <code class=\"docutils literal\">20</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">opscode_erchef['s3_parallel_ops_timeout']</code></td> <td>Default value: <code class=\"docutils literal\">5000</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">opscode_erchef['s3_url_expiry_window_size']</code></td> <td>The frequency at which unique URLs are generated. This value may be a specific amount of time, i.e. <code class=\"docutils literal\">15m</code> (fifteen minutes) or a percentage of the value of <code class=\"docutils literal\">s3_url_ttl</code>, i.e. <code class=\"docutils literal\">10%</code>. Default value: <code class=\"docutils literal\">:off</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">opscode_erchef['s3_url_ttl']</code></td> <td>The amount of time (in seconds) before connections to the server expire. If node bootstraps are timing out, increase this setting. Default value: <code class=\"docutils literal\">28800</code>.</td> </tr> </tbody> </table>    <h2 id=\"external-postgresql\">External PostgreSQL</h2> <p>The following diagram highlights the specific changes that occur when PostgreSQL is configured and managed independently of the Chef server configuration.</p> <img src=\"https://docs.chef.io/release/12-9/_images/server_components_postgresql.svg\" width=\"500px\"> <p>The following table describes the components in an external PostgreSQL configuration that are different from the default configuration of the Chef server:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Component</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Chef Server</td> <td>The Chef server configuration file is updated to point to an independently configured set of servers for PostgreSQL.</td> </tr> <tr class=\"row-odd\">\n<td>PostgreSQL</td> <td>\n<p class=\"first\">PostgreSQL is the data storage repository for the Chef server.</p> <p class=\"last\">This represents the independently configured set of servers that are running PostgreSQL and are configured to act as the data store for the Chef server.</p> </td> </tr> </tbody> </table>  <h3 id=\"postgresql-settings\">PostgreSQL Settings</h3> <p>Use the following configuration settings in the chef-server.rb file to configure PostgreSQL for use with the Chef server:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">postgresql['db_superuser']</code></td> <td>Required when <code class=\"docutils literal\">postgresql['external']</code> is set to <code class=\"docutils literal\">true</code>. The PostgreSQL user name. This user must be granted either the <code class=\"docutils literal\">CREATE ROLE</code> and <code class=\"docutils literal\">CREATE DATABASE</code> permissions in PostgreSQL or be granted <code class=\"docutils literal\">SUPERUSER</code> permission. This user must also have an entry in the host-based authentication configuration file used by PostgreSQL (traditionally named <code class=\"docutils literal\">pg_hba.conf</code>). Default value: <code class=\"docutils literal\">'superuser_userid'</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">postgresql['db_superuser_password']</code></td> <td>Required when <code class=\"docutils literal\">postgresql['external']</code> is set to <code class=\"docutils literal\">true</code>. The password for the user specified by <code class=\"docutils literal\">postgresql['db_superuser']</code>. Default value: <code class=\"docutils literal\">'the password'</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">postgresql['external']</code></td> <td>Required. Set to <code class=\"docutils literal\">true</code> to run PostgreSQL external to the Chef server. Must be set once only on a new installation of the Chef server before the first <code class=\"docutils literal\">chef-server-ctl reconfigure</code> command is run. If this is set after a reconfigure or set to <code class=\"docutils literal\">false</code>, any reconfigure of the Chef server will return an error. Default value: <code class=\"docutils literal\">false</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">postgresql['port']</code></td> <td>Optional when <code class=\"docutils literal\">postgresql['external']</code> is set to <code class=\"docutils literal\">true</code>. The port on which the service is to listen. The port used by PostgreSQL if that port is <strong>not</strong> 5432. Default value: <code class=\"docutils literal\">5432</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">postgresql['vip']</code></td> <td>Required when <code class=\"docutils literal\">postgresql['external']</code> is set to <code class=\"docutils literal\">true</code>. The virtual IP address. The host for this IP address must be online and reachable from the Chef server via the port specified by <code class=\"docutils literal\">postgresql['port']</code>. Set this value to the IP address or hostname for the machine on which external PostgreSQL is located when <code class=\"docutils literal\">postgresql['external']</code> is set to <code class=\"docutils literal\">true</code>.</td> </tr> </tbody> </table> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference external\" href=\"https://docs.chef.io/error_messages.html#external-postgresql\">https://docs.chef.io/error_messages.html#external-postgresql</a> for information about error messages may be present when configuring the Chef server to use a remote PostgreSQL server.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/server_components.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/server_components.html</a>\n  </p>\n</div>\n","12-9/install_dk":"<h1 id=\"install-the-chef-dk-title\">Install the Chef DK</h1> <p>The omnibus installer is used to set up the Chef development kit on a workstation, including the chef-client itself, an embedded version of Ruby, RubyGems, OpenSSL, key-value stores, parsers, libraries, command line utilities, and community tools such as Kitchen, Berkshelf, and ChefSpec. The omnibus installer puts everything into a unique directory (<code class=\"docutils literal\">opt/chefdk/</code>) so that these components will not interfere with other applications that may be running on the target machine. Once installed, the chef-client requires a few more configuration steps before it can be run as a workstation.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The omnibus installer requires that an installation be done as a root user.</p> </div>  <h2 id=\"install-on-a-workstation\">Install on a Workstation</h2> <p>The following sections describe how to install the Chef development kit on a workstation:</p> <ol class=\"arabic simple\"> <li>Identify the Chef server type: hosted or on-premises</li> <li>Review the prerequisites</li> <li>Select the omnibus installer for the desired platform</li> <li>Run the omnibus installer</li> <li>Set the system Ruby</li> <li>Install git</li> <li>Set up the chef-repo</li> <li>Create the .chef directory</li> <li>Get the .pem files and knife.rb files</li> <li>Move files to the .chef directory</li> <li>Add omnibus Ruby to the $PATH environment variable</li> <li>Get SSL certificates from the Chef server</li> <li>Verify the chef-client install</li> </ol> <p>See the following sections for more information about each step.</p>  <h3 id=\"review-prerequisites\">Review prerequisites</h3> <p>Ensure that the workstation meets all of the software prerequisites and that it has access to a Chef server and to a machine that can host a node.</p> <p>The following items are prerequisites for installing the chef-client on a workstation:</p> <ul class=\"simple\"> <li>A computer running UNIX, Linux, Mac OS X or Microsoft Windows</li> <li>Apple XCode is installed on machines running Mac OS X; this application can be downloaded from Apple for free</li> <li>A GitHub account; the chef-repo must be downloaded and/or cloned from GitHub</li> <li>Access to a Chef server: a hosted Chef server account or an on-premises Chef server. If you have a proxy, information on configuring chef-client to work with it is <a class=\"reference internal\" href=\"proxies\">here</a>\n</li> <li>Access to a machine (physical or virtual) that can be used as the first node; the FQDN or IP address for a machine is required by the <code class=\"docutils literal\">knife bootstrap</code> subcommand during a bootstrap operation</li> </ul>   <h3 id=\"get-package-run-installer\">Get Package, Run Installer</h3> <p>To install the Chef development kit:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Visit this page: <a class=\"reference external\" href=\"http://downloads.chef.io/chef-dk/\">http://downloads.chef.io/chef-dk/</a>. The Chef development kit supports Mac OS X, Red Hat Enterprise Linux, Ubuntu, and Microsoft Windows.</p> </li> <li>\n<p class=\"first\">Select a platform, and then a package. (chef-docs uses the Mac OS X setup within the documentation.)</p> </li> <li>\n<p class=\"first\">Click the download button.</p> </li> <li>\n<p class=\"first\">Follow the steps in the installer and install the Chef development kit to your machine. The Chef development kit is installed to <code class=\"docutils literal\">/opt/chefdk/</code> on UNIX and Linux systems.</p> </li> <li>\n<p class=\"first\">When finished, open a command window and enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef verify</pre> <p>This will verify the main components of the Chef development kit: the chef-client, the Chef development kit library, and the tools that are built into the Chef development kit. The output should be similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Running verification for component '...'\n..........\n---------------------------------------------\nVerification of component '...' succeeded.</pre> </li> <li>\n<p class=\"first\">Optional. Set the default shell. On Microsoft Windows it is strongly recommended to use Windows PowerShell and cmd.exe.</p> </li> </ol>   <h3 id=\"set-system-ruby\">Set System Ruby</h3> <p>For many users of Chef, the Chef development kit version of Ruby that is included in the Chef development kit should be configured as the default version of Ruby.</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Open a command window and enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ which ruby</pre> <p>which will return something like <code class=\"docutils literal\">/usr/bin/ruby</code>.</p> </li> <li>\n<p class=\"first\">To use the Chef development kit version of Ruby as the default Ruby, edit the <code class=\"docutils literal\">$PATH</code> and <code class=\"docutils literal\">GEM</code> environment variables to include paths to the Chef development kit. For example, on a machine that runs Bash, run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">echo 'eval \"$(chef shell-init bash)\"' &gt;&gt; ~/.bash_profile</pre> <p>where <code class=\"docutils literal\">bash</code> and <code class=\"docutils literal\">~/.bash_profile</code> represents the name of the shell.</p> <p>If zsh is your preferred shell then run the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">echo 'eval \"$(chef shell-init zsh)\"' &gt;&gt; ~/.zshrc</pre> </li> <li>\n<p class=\"first\">Run <code class=\"docutils literal\">which ruby</code> again. It should return <code class=\"docutils literal\">/opt/chefdk/embedded/bin/ruby</code>.</p> </li> </ol> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Using the Chef development kit-provided Ruby as your system Ruby is optional. This just depends on how you are using Ruby on your system. For many users, Ruby is primarily used for authoring Chef cookbooks and recipes. If that’s true for you, then using the Chef development kit-provided Ruby as your system Ruby is recommended. But for other users who are already using tools like rbenv to manage Ruby versions, then that’s OK too.</p> </div>  <h4 id=\"powershell\">PowerShell</h4> <p>You can use <code class=\"docutils literal\">chef shell-init</code> with Windows PowerShell.</p> <p>To try it in your current session:</p> <pre class=\"highlight-bash\" data-language=\"bash\">chef shell-init powershell | Invoke-Expression</pre> <p>To enable it permanently:</p> <pre class=\"highlight-bash\" data-language=\"bash\">\"chef shell-init powershell | Invoke-Expression\" &gt;&gt; $PROFILE</pre> <p><strong>Set the execution policy on new machines</strong></p> <p>For new Microsoft Windows machines, Windows PowerShell scripts will not work until an administrator runs the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Set-ExecutionPolicy RemoteSigned</pre> <p><strong>Create a $PROFILE on new machines</strong></p> <p>For new Microsoft Windows machines, commands cannot be appended to <code class=\"docutils literal\">$PROFILE</code> if the folder does not exist or if there is a new user profile, an error similar to the following may be returned:</p> <pre class=\"highlight-bash\" data-language=\"bash\">PS C:\\Users\\Stuart&gt; \"chef shell-init powershell | Invoke-Expression\" &gt;&gt; $PROFILE\nout-file : Could not find a part of the path\n'C:\\Users\\Stuart\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1'.\nAt line:1 char:1\n+ \"chef shell-init powershell | Invoke-Expression\" &gt;&gt; $PROFILE\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : OpenError: (:) [Out-File], DirectoryNotFoundException\n    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.OutFileCommand</pre> <p>In this situation, run the following <code class=\"docutils literal\">chef shell-init</code> command instead:</p> <pre class=\"highlight-bash\" data-language=\"bash\">if(Test-Path $PROFILE){ chef shell-init powershell | Add-Content $PROFILE } else { New-Item -Force -ItemType File $PROFILE; chef shell-init powershell | Add-Content $PROFILE }</pre>   <h4 id=\"windows\">Microsoft Windows</h4> <p>To set the system Ruby for the Microsoft Windows platform <a class=\"reference external\" href=\"https://docs.chef.io/install_dk.html#set-system-ruby\">the steps described for all platforms are true</a>, but then require the following manual edits to the <code class=\"docutils literal\">chef shell-init bash</code> output for the Microsoft Windows platform:</p> <ol class=\"arabic simple\"> <li>Add quotes around the variable assignment strings.</li> <li>Convert <code class=\"docutils literal\">C:/</code> to <code class=\"docutils literal\">/c/</code>.</li> <li>Save those changes.</li> </ol>    <h3 id=\"install-git\">Install git</h3> <p>An open source distributed version control system called git must be installed before the chef-repo can be cloned to the workstation from GitHub.</p> <p>To install git:</p> <ol class=\"arabic simple\"> <li>Go to the following URL: <a class=\"reference external\" href=\"https://help.github.com/articles/set-up-git\">https://help.github.com/articles/set-up-git</a>.</li> <li>Follow the directions, install git (<a class=\"reference external\" href=\"http://git-scm.com/downloads\">http://git-scm.com/downloads</a>), and then complete the remaining configuration steps on that page.</li> </ol> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">It is not necessary to create or fork a repository in order to clone the chef-repo from GitHub.</p> </div>   <h3 id=\"set-up-the-chef-repo\">Set up the chef-repo</h3> <p>There are two ways to create the chef-repo:</p> <ul class=\"simple\"> <li>Use the starter kit built into the Chef server web user interface</li> <li>Manually, by using the <code class=\"docutils literal\">chef generate app</code> subcommand in the chef command-line tool that is packaged in the Chef development kit</li> </ul>  <h4 id=\"starter-kit\">Starter Kit</h4> <p>If you have access to Chef server (hosted or on premises), you can download the starter kit. The starter kit will create the necessary configuration files—the .chef directory, knife.rb, the ORGANIZATION-validator.pem, and USER.pem files) with the correct information that is required to interact with the Chef server. Simply download the starter kit and then move it to the desired location on your workstation.</p>   <h4 id=\"manually-w-webui\">Manually (w/ Webui)</h4> <p>Use the following steps to manually set up the chef-repo and to use the Chef management console to get the .pem and knife.rb files.</p> <p><strong>Create the chef-repo</strong></p> <p>Use <a class=\"reference external\" href=\"https://docs.chef.io/ctl_chef.html#chef-generate-app\">the chef generate app command</a> to create the chef-repo.</p> <p><strong>Create .chef Directory</strong></p> <p>The .chef directory is used to store three files:</p> <ul class=\"simple\"> <li>knife.rb</li> <li>ORGANIZATION-validator.pem</li> <li>USER.pem</li> </ul> <p>Where <code class=\"docutils literal\">ORGANIZATION</code> and <code class=\"docutils literal\">USER</code> represent strings that are unique to each organization. These files must be present in the .chef directory in order for a workstation to be able to connect to a Chef server.</p> <p>To create the .chef directory:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">In a command window, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">mkdir -p ~/chef-repo/.chef</pre> </li> <li>\n<p class=\"first\">After the .chef directory has been created, the following folder structure will be present on the local machine:</p> <pre class=\"highlight-python\" data-language=\"python\">chef-repo/\n   .chef/        &lt;&lt; the hidden directory\n   certificates/\n   config/\n   cookbooks/\n   data_bags\n   environments/\n   roles/</pre> </li> <li>\n<p class=\"first\">Add <code class=\"docutils literal\">.chef</code> to the <code class=\"docutils literal\">.gitignore</code> file to prevent uploading the contents of the <code class=\"docutils literal\">.chef</code> folder to GitHub. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ echo '.chef' &gt;&gt; ~/chef-repo/.gitignore</pre> </li> </ol> <p><strong>Get Config Files</strong></p> <p>For a workstation that will interact with the Chef server (including the hosted Chef server), log on and download the following files:</p> <ul class=\"simple\"> <li>knife.rb. This configuration file can be downloaded from the <strong>Organizations</strong> page.</li> <li>ORGANIZATION-validator.pem. This private key can be downloaded from the <strong>Organizations</strong> page.</li> <li>USER.pem. This private key an be downloaded from the <strong>Change Password</strong> section of the <strong>Account Management</strong> page.</li> </ul> <p><strong>Move Config Files</strong></p> <p>The knife.rb, ORGANIZATION-validator.pem, and USER.pem files must be moved to the .chef directory after they are downloaded from the Chef server.</p> <p>To move files to the .chef directory:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">In a command window, enter each of the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">cp /path/to/knife.rb ~/chef-repo/.chef</pre> <p>and:</p> <pre class=\"highlight-bash\" data-language=\"bash\">cp /path/to/ORGANIZATION-validator.pem ~/chef-repo/.chef</pre> <p>and:</p> <pre class=\"highlight-bash\" data-language=\"bash\">cp /path/to/USERNAME.pem ~/chef-repo/.chef</pre> <p>where <code class=\"docutils literal\">/path/to/</code> represents the path to the location in which these three files were placed after they were downloaded.</p> </li> <li>\n<p class=\"first\">Verify that the files are in the .chef folder.</p> </li> </ol>   <h4 id=\"manually-w-o-webui\">Manually (w/o Webui)</h4> <p>Use the following steps to manually set up the chef-repo, create the ORGANIZATION-validator.pem and USER.pem files with the chef-server-ctl command line tool, and then create the knife.rb file.</p> <p><strong>Create the chef-repo</strong></p> <p>Use <a class=\"reference external\" href=\"https://docs.chef.io/ctl_chef.html#chef-generate-app\">the chef generate app command</a> to create the chef-repo.</p> <p><strong>Create .chef Directory</strong></p> <p>The .chef directory is used to store three files:</p> <ul class=\"simple\"> <li>knife.rb</li> <li>ORGANIZATION-validator.pem</li> <li>USER.pem</li> </ul> <p>Where <code class=\"docutils literal\">ORGANIZATION</code> and <code class=\"docutils literal\">USER</code> represent strings that are unique to each organization. These files must be present in the .chef directory in order for a workstation to be able to connect to a Chef server.</p> <p>To create the .chef directory:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">In a command window, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">mkdir -p ~/chef-repo/.chef</pre> </li> <li>\n<p class=\"first\">After the .chef directory has been created, the following folder structure will be present on the local machine:</p> <pre class=\"highlight-python\" data-language=\"python\">chef-repo/\n   .chef/        &lt;&lt; the hidden directory\n   certificates/\n   config/\n   cookbooks/\n   data_bags\n   environments/\n   roles/</pre> </li> <li>\n<p class=\"first\">Add <code class=\"docutils literal\">.chef</code> to the <code class=\"docutils literal\">.gitignore</code> file to prevent uploading the contents of the <code class=\"docutils literal\">.chef</code> folder to GitHub. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ echo '.chef' &gt;&gt; ~/chef-repo/.gitignore</pre> </li> </ol> <p><strong>Create an Organization</strong></p> <p>On the Chef server machine create the ORGANIZATION-validator.pem from the command line using chef-server-ctl. Run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-create ORG_NAME ORG_FULL_NAME -f FILE_NAME</pre> <p>where</p> <ul class=\"simple\"> <li>The name must begin with a lower-case letter or digit, may only contain lower-case letters, digits, hyphens, and underscores, and must be between 1 and 255 characters. For example: <code class=\"docutils literal\">chef</code>\n</li> <li>The full name must begin with a non-white space character and must be between 1 and 1023 characters. For example: <code class=\"docutils literal\">\"Chef Software, Inc.\"</code>\n</li> <li>\n<code class=\"docutils literal\">-f FILE_NAME</code>: Write the ORGANIZATION-validator.pem to <code class=\"docutils literal\">FILE_NAME</code> instead of printing it to <code class=\"docutils literal\">STDOUT</code>. For example: <code class=\"docutils literal\">/tmp/chef.key</code>.</li> </ul> <p>For example, an organization named <code class=\"docutils literal\">chef</code>, with a full name of <code class=\"docutils literal\">Chef Software, Inc.</code>, and with the ORGANIZATION-validator.pem file saved to <code class=\"docutils literal\">/tmp/chef.key</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl org-create chef \"Chef Software, Inc.\" -f /tmp/chef.key</pre> <p><strong>Create a User</strong></p> <p>On the Chef server machine create the USER.pem from the command line using chef-server-ctl. Run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-create USER_NAME FIRST_NAME LAST_NAME EMAIL PASSWORD -f FILE_NAME</pre> <p>where</p> <ul class=\"simple\"> <li>Write the USER.pem to a file instead of <code class=\"docutils literal\">STDOUT</code>. For example: <code class=\"docutils literal\">/tmp/grantmc.key</code>.</li> </ul> <p>For example, a user named <code class=\"docutils literal\">grantmc</code>, with a first and last name of <code class=\"docutils literal\">Grant McLennan</code>, an email address of <code class=\"docutils literal\">grantmc@chef.io</code>, a poorly-chosen password, and with the USER.pem file saved to <code class=\"docutils literal\">/tmp/grantmc.key</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-server-ctl user-create grantmc Grant McLennan grantmc@chef.io p@s5w0rD! -f /tmp/grantmc.key</pre> <p><strong>Move .pem Files</strong></p> <p>The ORGANIZATION-validator.pem and USER.pem files must be moved to the .chef directory after they are downloaded from the Chef server.</p> <p>To move files to the .chef directory:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">In a command window, enter each of the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">cp /path/to/ORGANIZATION-validator.pem ~/chef-repo/.chef</pre> <p>and:</p> <pre class=\"highlight-bash\" data-language=\"bash\">cp /path/to/USERNAME.pem ~/chef-repo/.chef</pre> <p>where <code class=\"docutils literal\">/path/to/</code> represents the path to the location in which these three files were placed after they were downloaded.</p> </li> <li>\n<p class=\"first\">Verify that the files are in the .chef folder.</p> </li> </ol> <p><strong>Create the knife.rb File</strong></p> <p>The knife.rb file must be created in the .chef folder. It should look similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">current_dir = File.dirname(__FILE__)\nlog_level                :info\nlog_location             STDOUT\nnode_name                'node_name'\nclient_key               \"#{current_dir}/USER.pem\"\nvalidation_client_name   'chef-validator'\nvalidation_key           \"#{current_dir}/ORGANIZATION-validator.pem\"\nchef_server_url          'https://api.chef.io/organizations/ORG_NAME'\ncache_type               'BasicFile'\ncache_options( :path =&gt; \"#{ENV['HOME']}/.chef/checksums\" )\ncookbook_path            [\"#{current_dir}/../cookbooks\"]</pre>    <h3 id=\"add-ruby-to-path\">Add Ruby to $PATH</h3> <p>The chef-client includes a stable version of Ruby as part of the omnibus installer. The path to this version of Ruby must be added to the <code class=\"docutils literal\">$PATH</code> environment variable and saved in the configuration file for the command shell (Bash, csh, and so on) that is used on the workstation. In a command window, type the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">echo 'export PATH=\"/opt/chefdk/embedded/bin:$PATH\"' &gt;&gt; ~/.configuration_file &amp;&amp; source ~/.configuration_file</pre> <p>where <code class=\"docutils literal\">configuration_file</code> is the name of the configuration file for the specific command shell. For example, if Bash were the command shell and the configuration file were named <code class=\"docutils literal\">bash_profile</code>, the command would look something like the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">echo 'export PATH=\"/opt/chefdk/embedded/bin:$PATH\"' &gt;&gt; ~/.bash_profile &amp;&amp; source ~/.bash_profile</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">On Microsoft Windows, <code class=\"docutils literal\">C:/opscode/chefdk/bin</code> must be before <code class=\"docutils literal\">C:/opscode/chefdk/embedded/bin</code> in the <code class=\"docutils literal\">PATH</code>.</p> </div>   <h3 id=\"get-ssl-certificates\">Get SSL Certificates</h3> <p>Chef server 12 enables SSL verification by default for all requests made to the server, such as those made by knife and the chef-client. The certificate that is generated during the installation of the Chef server is self-signed, which means there isn’t a signing certificate authority (CA) to verify. In addition, this certificate must be downloaded to any machine from which knife and/or the chef-client will make requests to the Chef server.</p> <p>Use the <code class=\"docutils literal\">knife ssl fetch</code> subcommand to pull the SSL certificate down from the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife ssl fetch</pre> <p>See <a class=\"reference external\" href=\"https://docs.chef.io/chef_client_security.html#ssl-certificates\">SSL Certificates</a> for more information about how knife and the chef-client use SSL certificates generated by the Chef server.</p>   <h3 id=\"verify-install\">Verify Install</h3> <p>A workstation is installed correctly when it is able to use knife to communicate with the Chef server.</p> <p>To verify that a workstation can connect to the Chef server:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">In a command window, navigate to the chef-repo:</p> <pre class=\"highlight-bash\" data-language=\"bash\">cd ~/chef-repo</pre> </li> <li>\n<p class=\"first\">In a command window, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife client list</pre> <p>to return a list of clients (registered nodes and workstations) that have access to the Chef server. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">workstation\nregistered_node</pre> </li> </ol>    <h2 id=\"chef-dk-title-and-windows\">Chef DK and Windows</h2> <p>The following sections describe issues that are known to users of the Chef development kit on the Microsoft Windows platform.</p>  <h3 id=\"spaces-and-directories\">Spaces and Directories</h3> <p>Directories that are used by Chef on the Microsoft Windows platform cannot have spaces. For example, <code class=\"docutils literal\">/c/Users/Steven Danno</code> will not work, but <code class=\"docutils literal\">/c/Users/StevenDanno</code> will.</p> <p>A different issue exists with the knife command line tool that is also related to spaces and directories. The <code class=\"docutils literal\">knife cookbook site install</code> subcommand will fail when the Microsoft Windows directory contains a space.</p>   <h3 id=\"top-level-directory-names\">Top-level Directory Names</h3> <p>Paths can be longer in UNIX and Linux environments than they can be in Microsoft Windows. Microsoft Windows will throw errors when path name lengths are too long. For this reason, it’s often helpful to use a very short top-level directory in Microsoft Windows, much like what is done in UNIX and Linux. For example, Chef uses <code class=\"docutils literal\">/opt/</code> to install the Chef development kit on Mac OS X. A similar approach can be done on Microsoft Windows, by creating a top-level directory with a short name. For example: <code class=\"docutils literal\">c:\\chef</code>.</p>    <h2 id=\"uninstall\">Uninstall</h2> <p>The Chef development kit can be uninstalled using the steps below that are appropriate for the platform on which the Chef development kit is installed.</p>  <h3 id=\"debian\">Debian</h3> <p>Use the following command to remove the Chef development kit on Debian-based platforms:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ dpkg -P chefdk</pre>   <h3 id=\"mac-os-x\">Mac OS X</h3> <p>Use the following commands to remove the Chef development kit on Mac OS X.</p> <p>To remove installed files:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo rm -rf /opt/chefdk</pre> <p>To remove the system installation entry:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo pkgutil --forget com.getchef.pkg.chefdk</pre> <p>To remove symlinks:</p> <ul> <li>\n<p class=\"first\">For chef-client version 12.x, under <code class=\"docutils literal\">/usr/local/bin</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo find /usr/local/bin -lname '/opt/chefdk/*' -delete</pre> </li> <li>\n<p class=\"first\">For chef-client version 11.x, under <code class=\"docutils literal\">/usr/bin</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo find /usr/bin -lname '/opt/chefdk/*' -delete</pre> </li> </ul>   <h3 id=\"redhat-enterprise-linux\">Red Hat Enterprise Linux</h3> <p>Use the following commands to remove the Chef development kit on Red Hat Enterprise Linux-based platforms:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -qa *chefdk*</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ yum remove &lt;package&gt;</pre>   <h3 id=\"id1\">Microsoft Windows</h3> <p>Use <strong>Add / Remove Programs</strong> to remove the Chef development kit on the Microsoft Windows platform.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/install_dk.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/install_dk.html</a>\n  </p>\n</div>\n","12-9/proxies":"<h1 id=\"about-proxies\">About Proxies</h1> <p>In an environment that requires proxies to reach the Internet, many Chef commands will not work until they are configured correctly. To configure Chef to work in an environment that requires proxies, set the <code class=\"docutils literal\">http_proxy</code>, <code class=\"docutils literal\">https_proxy</code>, <code class=\"docutils literal\">ftp_proxy</code>, and/or <code class=\"docutils literal\">no_proxy</code> environment variables to specify the proxy settings using a lowercase value.</p>  <h2 id=\"windows\">Microsoft Windows</h2> <p>To determine the current proxy server on the Microsoft Windows platform:</p> <ol class=\"arabic simple\"> <li>Open <strong>Internet Properties</strong>.</li> <li>Open <strong>Connections</strong>.</li> <li>Open <strong>LAN settings</strong>.</li> <li>View the <strong>Proxy server</strong> setting. If this setting is blank, then a proxy server may not be available.</li> </ol> <p>To configure proxy settings in Microsoft Windows:</p> <ol class=\"arabic simple\"> <li>Open <strong>System Properties</strong>.</li> <li>Open <strong>Environment Variables</strong>.</li> <li>Open <strong>System variables</strong>.</li> <li>Set <code class=\"docutils literal\">http_proxy</code> and <code class=\"docutils literal\">https_proxy</code> to the location of your proxy server. This value <strong>MUST</strong> be lowercase.</li> </ol>   <h2 id=\"linux\">Linux</h2> <p>To determine the current proxy server on the Mac OS X and Linux platforms, check the environment variables. Run the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">env | grep -i http_proxy</pre> <p>If an environment variable is set, it <strong>MUST</strong> be lowercase. If it is not, add a lowercase version of that proxy variable to the shell (e.g. <code class=\"docutils literal\">~/.bashrc</code>) using one (or more) the following commands.</p> <p>For HTTP:</p> <pre class=\"highlight-bash\" data-language=\"bash\">export http_proxy=http://myproxy.com:3168</pre> <p>For HTTPS:</p> <pre class=\"highlight-bash\" data-language=\"bash\">export https_proxy=http://myproxy.com:3168</pre> <p>For FTP:</p> <pre class=\"highlight-bash\" data-language=\"bash\">export ftp_proxy=http://myproxy.com:3168</pre>   <h2 id=\"proxy-settings\">Proxy Settings</h2> <p>Proxy settings are defined in configuration files for the chef-client and for knife and may be specified for HTTP, HTTPS, and FTP.</p>  <h3 id=\"http\">HTTP</h3> <p>Use the following settings in the client.rb or knife.rb files for environments that use an HTTP proxy:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">http_proxy</code></td> <td>The proxy server for HTTP connections. Default value: <code class=\"docutils literal\">nil</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">http_proxy_pass</code></td> <td>The password for the proxy server when the proxy server is using an HTTP connection. Default value: <code class=\"docutils literal\">nil</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">http_proxy_user</code></td> <td>The user name for the proxy server when the proxy server is using an HTTP connection. Default value: <code class=\"docutils literal\">nil</code>.</td> </tr> </tbody> </table>   <h3 id=\"https\">HTTPS</h3> <p>Use the following settings in the client.rb or knife.rb files for environments that use an HTTPS proxy:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">https_proxy</code></td> <td>The proxy server for HTTPS connections. Default value: <code class=\"docutils literal\">nil</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">https_proxy_pass</code></td> <td>The password for the proxy server when the proxy server is using an HTTPS connection. Default value: <code class=\"docutils literal\">nil</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">https_proxy_user</code></td> <td>The user name for the proxy server when the proxy server is using an HTTPS connection. Default value: <code class=\"docutils literal\">nil</code>.</td> </tr> </tbody> </table>   <h3 id=\"ftp\">FTP</h3> <p>Use the following settings in the client.rb or knife.rb files for environments that use an FTP proxy:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">ftp_proxy</code></td> <td>The proxy server for FTP connections.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">ftp_proxy_pass</code></td> <td>The password for the proxy server when the proxy server is using an FTP connection. Default value: <code class=\"docutils literal\">nil</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">ftp_proxy_user</code></td> <td>The user name for the proxy server when the proxy server is using an FTP connection. Default value: <code class=\"docutils literal\">nil</code>.</td> </tr> </tbody> </table>   <h3 id=\"no-proxy\">No Proxy</h3> <p>The <code class=\"docutils literal\">no_proxy</code> setting is used to specify addresses for which the proxy should not be used. This can be a single address or a comma-separated list of addresses. Wildcard matching may be used in this list; however, some situations require hostnames to be specified without wildcards.</p> <p>Example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">no_proxy 'test1.example.com,*.example2.com,*.*.example3.*'</pre>    <h2 id=\"environment-variables\">Environment Variables</h2> <p>Consider the following for situations where environment variables are used to set the proxy:</p> <ul class=\"simple\"> <li>Proxy settings may not be honored by all applications. For example, proxy settings may be ignored by the underlying application when specifying a <code class=\"docutils literal\">ftp</code> source with a <code class=\"docutils literal\">remote_file</code> resource. Consider a workaround. For example, in this situation try doing a <code class=\"docutils literal\">wget</code> with an <code class=\"docutils literal\">ftp</code> URL instead.</li> <li>Proxy settings may be honored inconsistently by applications. For example, the behavior of the <code class=\"docutils literal\">no_proxy</code> setting may not work with certain applications when wildcards are specified. Consider specifying the hostnames without using wildcards.</li> </ul>  <h3 id=\"env\">ENV</h3> <p>If <code class=\"docutils literal\">http_proxy</code>, <code class=\"docutils literal\">https_proxy</code>, <code class=\"docutils literal\">ftp_proxy</code>, or <code class=\"docutils literal\">no_proxy</code> is set in the client.rb file, the chef-client will configure the <code class=\"docutils literal\">ENV</code> variable based on these (and related) settings. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">http_proxy 'http://proxy.example.org:8080'\nhttp_proxy_user 'myself'\nhttp_proxy_pass 'Password1'</pre> <p>will be set to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ENV['http_proxy'] = 'http://myself:Password1@proxy.example.org:8080'</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/proxies.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/proxies.html</a>\n  </p>\n</div>\n","12-9/install_windows":"<h1 id=\"install-the-chef-client-title-on-windows\">Install the chef-client on Microsoft Windows</h1> <p>The chef-client can be installed on machines running Microsoft Windows in the following ways:</p> <ul class=\"simple\"> <li>By using the <a class=\"reference external\" href=\"https://docs.chef.io/plugin_knife_windows.html\">knife windows</a> plugin to bootstrap the chef-client; this process requires the target node be available via SSH (port 22) or by using the HTTP or HTTPS ports that are required by WinRM</li> <li>By downloading the chef-client to the target node, and then running the Microsoft Installer Package (MSI) locally</li> <li>By using an existing process already in place for managing Microsoft Windows machines, such as System Center</li> </ul> <p>To run the chef-client at periodic intervals (so that it can check in with the Chef server automatically), configure the chef-client to run as a service or as a scheduled task. (The chef-client can be configured to run as a service during the setup process.)</p>  <h2 id=\"use-knife-windows\">Use knife windows</h2> <p>The <code class=\"docutils literal\">knife windows</code> subcommand is used to configure and interact with nodes that exist on server and/or desktop machines that are running Microsoft Windows. Nodes are configured using WinRM, which allows native objects—batch scripts, Windows PowerShell scripts, or scripting library variables—to be called by external applications. The <code class=\"docutils literal\">knife windows</code> subcommand supports NTLM and Kerberos methods of authentication.</p>  <h3 id=\"ports\">Ports</h3> <p>WinRM requires that a target node be accessible via the ports configured to support access via HTTP or HTTPS.</p>   <h3 id=\"microsoft-msiexec\">Msiexec.exe</h3> <p>Msiexec.exe is used to install the chef-client on a node as part of a bootstrap operation. The actual command that is run by the default bootstrap script is:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ msiexec /qn /i \"%LOCAL_DESTINATION_MSI_PATH%\"</pre> <p>where <code class=\"docutils literal\">/qn</code> is used to set the user interface level to “No UI”, <code class=\"docutils literal\">/i</code> is used to define the location in which the chef-client is installed, and <code class=\"docutils literal\">\"%LOCAL_DESTINATION_MSI_PATH%\"</code> is a variable defined in the default <a class=\"reference external\" href=\"https://github.com/chef/knife-windows/blob/master/lib/chef/knife/bootstrap/windows-chef-client-msi.erb\">windows-chef-client-msi.erb</a> bootstrap template. See <a class=\"reference external\" href=\"http://msdn.microsoft.com/en-us/library/aa367988%28v=vs.85%29.aspx\">http://msdn.microsoft.com/en-us/library/aa367988%28v=vs.85%29.aspx</a> for more information about the options available to Msiexec.exe.</p>   <h3 id=\"addlocal-options\">ADDLOCAL Options</h3> <p>The <code class=\"docutils literal\">ADDLOCAL</code> parameter adds two setup options that are specific to the chef-client. These options can be passed along with an Msiexec.exe command:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">ChefClientFeature</code></td> <td>Use to install the chef-client.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">ChefServiceFeature</code></td> <td>Use to configure the chef-client as a service in Microsoft Windows.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">ChefPSModuleFeature</code></td> <td>Used to install the chef PowerShell module. This will enable chef command line utilities within PowerShell.</td> </tr> </tbody> </table> <p>First install the chef-client, and then enable it to run as a service. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ msiexec /qn /i C:\\inst\\chef-client-12.4.3-1.windows.msi ADDLOCAL=\"ChefClientFeature,ChefServiceFeature,ChefPSModuleFeature\"</pre>    <h2 id=\"use-msi-installer\">Use MSI Installer</h2> <p>A Microsoft Installer Package (MSI) is available for installing the chef-client on a Microsoft Windows machine.</p> <p>To install the chef-client on Microsoft Windows, do the following:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Go to <a class=\"reference external\" href=\"http://www.chef.io/chef/install\">http://www.chef.io/chef/install</a>.</p> </li> <li>\n<p class=\"first\">Click the <strong>Chef Client</strong> tab.</p> </li> <li>\n<p class=\"first\">Select <strong>Windows</strong>, a version, and an architecture.</p> </li> <li>\n<p class=\"first\">Under <strong>Downloads</strong>, select the version of the chef-client to download, and then click the link that appears below to download the package.</p> </li> <li>\n<p class=\"first\">Ensure that the MSI is on the target node.</p> </li> <li>\n<p class=\"first\">Run the MSI package and use all the default options:</p> <img alt=\"_images/step_install_windows_01.png\" src=\"https://docs.chef.io/release/12-9/_images/step_install_windows_01.png\"> </li> </ol> <p>then:</p> <blockquote> <div>\n<img alt=\"_images/step_install_windows_02.png\" src=\"https://docs.chef.io/release/12-9/_images/step_install_windows_02.png\"> </div>\n</blockquote> <p>then:</p> <blockquote> <div>\n<img alt=\"_images/step_install_windows_03.png\" src=\"https://docs.chef.io/release/12-9/_images/step_install_windows_03.png\"> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The chef-client must be run as a service for it to be able to regularly check in with the Chef server. Select the <strong>Chef Client Service</strong> option to have the MSI configure the chef-client as a service.</p> </div> </div>\n</blockquote> <p>then:</p> <blockquote> <div>\n<img alt=\"_images/step_install_windows_04.png\" src=\"https://docs.chef.io/release/12-9/_images/step_install_windows_04.png\"> </div>\n</blockquote> <p>then:</p> <blockquote> <div>\n<img alt=\"_images/step_install_windows_05.png\" src=\"https://docs.chef.io/release/12-9/_images/step_install_windows_05.png\"> </div>\n</blockquote> <p>then:</p> <blockquote> <div>\n<img alt=\"_images/step_install_windows_06.png\" src=\"https://docs.chef.io/release/12-9/_images/step_install_windows_06.png\"> </div>\n</blockquote>  <h3 id=\"run-as-a-service\">Run as a Service</h3> <p>To run the chef-client at periodic intervals (so that it can check in with the Chef server automatically), configure the chef-client to run as a service or as a scheduled task. This can be done via the MSI, by selecting the <strong>Chef Client Service</strong> option on the <strong>Custom Setup</strong> page or by running the following command after the chef-client is installed:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-service-manager -a install</pre> <p>and then start the chef-client as a service:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-service-manager -a start</pre> <p>After the chef-client is configured to run as a service, the default file path is: <code class=\"docutils literal\">c:\\chef\\chef-client.log</code>.</p>   <h3 id=\"run-as-a-scheduled-task\">Run as a Scheduled Task</h3> <p>The chef-client can be run as a scheduled task. On the Microsoft Windows platform, a scheduled task provides more visibility, configurability, and reliability around log rotation and permissions, as compared to running the chef-client as a service. A scheduled task:</p> <ul class=\"simple\"> <li>Prevents log rotation issues, such as filling a disk partition</li> <li>Does not have an indeterminate status, such as a service for which only the watcher is “running”</li> <li>Prevents insufficient permissions related to service context</li> <li>Prevents issues related to a system reboot</li> </ul>    <h2 id=\"use-an-existing-process\">Use an Existing Process</h2> <p>Many organizations already have processes in place for managing the applications and settings on various Microsoft Windows machines. For example, System Center. The chef-client can be installed using this method.</p>   <h2 id=\"path-system-variable\">PATH System Variable</h2> <p>On Microsoft Windows, the chef-client must have two entries added to the <code class=\"docutils literal\">PATH</code> environment variable:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">C:\\opscode\\chef\\bin</code></li> <li><code class=\"docutils literal\">C:\\opscode\\chef\\embedded\\bin</code></li> </ul> <p>This is typically done during the installation of the chef-client automatically. If these values (for any reason) are not in the <code class=\"docutils literal\">PATH</code> environment variable, the chef-client will not run properly.</p> <img alt=\"_images/includes_windows_environment_variable_path.png\" src=\"https://docs.chef.io/release/12-9/_images/includes_windows_environment_variable_path.png\"> <p>This value can be set from a recipe. For example, from the <code class=\"docutils literal\">php</code> cookbook:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">#  the following code sample comes from the ``package`` recipe in the ``php`` cookbook: https://github.com/chef-cookbooks/php\n\nif platform?('windows')\n\n  include_recipe 'iis::mod_cgi'\n\n  install_dir = File.expand_path(node['php']['conf_dir']).gsub('/', '\\\\')\n  windows_package node['php']['windows']['msi_name'] do\n    source node['php']['windows']['msi_source']\n    installer_type :msi\n\n    options %W[\n      /quiet\n      INSTALLDIR=\"#{install_dir}\"\n      ADDLOCAL=#{node['php']['packages'].join(',')}\n    ].join(' ')\nend\n\n...\n\nENV['PATH'] += \";#{install_dir}\"\nwindows_path install_dir\n\n...</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/install_windows.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/install_windows.html</a>\n  </p>\n</div>\n","12-9/nodes":"<h1 id=\"about-nodes\">About Nodes</h1> <p>A node is any machine—physical, virtual, cloud, network device, etc.—that is under management by Chef.</p> <p>The types of nodes that can be managed by Chef include, but are not limited to, the following:</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Node Type</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_node_type_server.svg\" width=\"100px\">  </td> <td>A physical node is typically a server or a virtual machine, but it can be any active device attached to a network that is capable of sending, receiving, and forwarding information over a communications channel. In other words, a physical node is any active device attached to a network that can run a chef-client and also allow that chef-client to communicate with a Chef server.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_node_type_cloud_public.svg\" width=\"100px\">  </td> <td>A cloud-based node is hosted in an external cloud-based service, such as Amazon Web Services (AWS), OpenStack, Rackspace, Google Compute Engine, or Microsoft Azure. Plugins are available for knife that provide support for external cloud-based services. knife can use these plugins to create instances on cloud-based services. Once created, the chef-client can be used to deploy, configure, and maintain those instances.</td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_node_virtual_machine.svg\" width=\"100px\">  </td> <td>A virtual node is a machine that runs only as a software implementation, but otherwise behaves much like a physical machine.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_node_type_network_device.svg\" width=\"100px\">  </td> <td>A network node is any networking device—a switch, a router—that is being managed by a chef-client, such as networking devices by Juniper Networks, Arista, Cisco, and F5. Use Chef to automate common network configurations, such physical and logical Ethernet link properties and VLANs, on these devices.</td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_node_type_container.svg\" width=\"100px\">  </td> <td>Containers are an approach to virtualization that allows a single operating system to host many working configurations, where each working configuration—a container—is assigned a single responsibility that is isolated from all other responsibilities. Containers are popular as a way to manage distributed and scalable applications and services.</td> </tr> </tbody> </table> <p>The key components of nodes that are under management by Chef include:</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Component</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_chef_client.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">A chef-client is an agent that runs locally on every node that is under management by Chef. When a chef-client is run, it will perform all of the steps that are required to bring the node into the expected state, including:</p> <ul class=\"simple\"> <li>Registering and authenticating the node with the Chef server</li> <li>Building the node object</li> <li>Synchronizing cookbooks</li> <li>Compiling the resource collection by loading each of the required cookbooks, including recipes, attributes, and all other dependencies</li> <li>Taking the appropriate and required actions to configure the node</li> <li>Looking for exceptions and notifications, handling each as required</li> </ul> <p class=\"last\">RSA public key-pairs are used to authenticate the chef-client with the Chef server every time a chef-client needs access to data that is stored on the Chef server. This prevents any node from accessing data that it shouldn’t and it ensures that only nodes that are properly registered with the Chef server can be managed.</p> </td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_ohai.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">Ohai is a tool that is used to detect attributes on a node, and then provide these attributes to the chef-client at the start of every chef-client run. Ohai is required by the chef-client and must be present on a node. (Ohai is installed on a node as part of the chef-client install process.)</p> <p>The types of attributes Ohai collects include (but are not limited to):</p> <ul class=\"simple\"> <li>Platform details</li> <li>Network usage</li> <li>Memory usage</li> <li>CPU data</li> <li>Kernel data</li> <li>Host names</li> <li>Fully qualified domain names</li> <li>Other configuration details</li> </ul> <p class=\"last\">Attributes that are collected by Ohai are automatic attributes, in that these attributes are used by the chef-client to ensure that these attributes remain unchanged after the chef-client is done configuring the node.</p> </td> </tr> </tbody> </table>  <h2 id=\"the-chef-client-title-run\">The chef-client Run</h2> <p>A “chef-client run” is the term used to describe a series of steps that are taken by the chef-client when it is configuring a node. The following diagram shows the various stages that occur during the chef-client run, and then the list below the diagram describes in greater detail each of those stages.</p> <img alt=\"_images/chef_run.png\" src=\"https://docs.chef.io/release/12-9/_images/chef_run.png\"> <p>During every chef-client run, the following happens:</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Stages</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><strong>Get configuration data</strong></td> <td>The chef-client gets process configuration data from the client.rb file on the node, and then gets node configuration data from Ohai. One important piece of configuration data is the name of the node, which is found in the <code class=\"docutils literal\">node_name</code> attribute in the client.rb file or is provided by Ohai. If Ohai provides the name of a node, it is typically the FQDN for the node, which is always unique within an organization.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Authenticate to the Chef Server</strong></td> <td>The chef-client authenticates to the Chef server using an RSA private key and the Chef server API. The name of the node is required as part of the authentication process to the Chef server. If this is the first chef-client run for a node, the chef-validator will be used to generate the RSA private key.</td> </tr> <tr class=\"row-even\">\n<td><strong>Get, rebuild the node object</strong></td> <td>The chef-client pulls down the node object from the Chef server. If this is the first chef-client run for the node, there will not be a node object to pull down from the Chef server. After the node object is pulled down from the Chef server, the chef-client rebuilds the node object. If this is the first chef-client run for the node, the rebuilt node object will contain only the default run-list. For any subsequent chef-client run, the rebuilt node object will also contain the run-list from the previous chef-client run.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Expand the run-list</strong></td> <td>The chef-client expands the run-list from the rebuilt node object, compiling a full and complete list of roles and recipes that will be applied to the node, placing the roles and recipes in the same exact order they will be applied. (The run-list is stored in each node object’s JSON file, grouped under <code class=\"docutils literal\">run_list</code>.)</td> </tr> <tr class=\"row-even\">\n<td><strong>Synchronize cookbooks</strong></td> <td>The chef-client asks the Chef server for a list of all cookbook files (including recipes, templates, resources, providers, attributes, libraries, and definitions) that will be required to do every action identified in the run-list for the rebuilt node object. The Chef server provides to the chef-client a list of all of those files. The chef-client compares this list to the cookbook files cached on the node (from previous chef-client runs), and then downloads a copy of every file that has changed since the previous chef-client run, along with any new files.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Reset node attributes</strong></td> <td>All attributes in the rebuilt node object are reset. All attributes from attribute files, environments, roles, and Ohai are loaded. Attributes that are defined in attribute files are first loaded according to cookbook order. For each cookbook, attributes in the <code class=\"docutils literal\">default.rb</code> file are loaded first, and then additional attribute files (if present) are loaded in lexical sort order. All attributes in the rebuilt node object are updated with the attribute data according to attribute precedence. When all of the attributes are updated, the rebuilt node object is complete.</td> </tr> <tr class=\"row-even\">\n<td><strong>Compile the resource collection</strong></td> <td>The chef-client identifies each resource in the node object and builds the resource collection. Libraries are loaded first to ensure that all language extensions and Ruby classes are available to all resources. Next, attributes are loaded, followed by lightweight resources, and then all definitions (to ensure that any pseudo-resources within definitions are available). Finally, all recipes are loaded in the order specified by the expanded run-list. This is also referred to as the “compile phase”.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Converge the node</strong></td> <td>The chef-client configures the system based on the information that has been collected. Each resource is executed in the order identified by the run-list, and then by the order in which each resource is listed in each recipe. Each resource in the resource collection is mapped to a provider. The provider examines the node, and then does the steps necessary to complete the action. And then the next resource is processed. Each action configures a specific part of the system. This process is also referred to as convergence. This is also referred to as the “execution phase”.</td> </tr> <tr class=\"row-even\">\n<td><strong>Update the node object, process exception and report handlers</strong></td> <td>\n<p class=\"first\">When all of the actions identified by resources in the resource collection have been done, and when the chef-client run finished successfully, the chef-client updates the node object on the Chef server with the node object that was built during this chef-client run. (This node object will be pulled down by the chef-client during the next chef-client run.) This makes the node object (and the data in the node object) available for search.</p> <p class=\"last\">The chef-client always checks the resource collection for the presence of exception and report handlers. If any are present, each one is processed appropriately.</p> </td> </tr> <tr class=\"row-odd\">\n<td><strong>Stop, wait for the next run</strong></td> <td>When everything is configured and the chef-client run is complete, the chef-client stops and waits until the next time it is asked to run.</td> </tr> </tbody> </table>  <h3 id=\"about-run-lists\">About Run-lists</h3> <p>A run-list defines all of the information necessary for Chef to configure a node into the desired state. A run-list is:</p> <ul class=\"simple\"> <li>An ordered list of roles and/or recipes that are run in the exact order defined in the run-list; if a recipe appears more than once in the run-list, the chef-client will not run it twice</li> <li>Always specific to the node on which it runs; nodes may have a run-list that is identical to the run-list used by other nodes</li> <li>Stored as part of the node object on the Chef server</li> <li>Maintained using knife, and then uploaded from the workstation to the Chef server, or is maintained using the Chef management console</li> </ul>  <h4 id=\"run-list-format\">Run-list Format</h4> <p>A run-list must be in one of the following formats: fully qualified, cookbook, or default. Both roles and recipes must be in quotes, for example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">'role[NAME]'</pre> <p>or</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">'recipe[COOKBOOK::RECIPE]'</pre> <p>Use a comma to separate roles and recipes when adding more than one item the run-list:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">'recipe[COOKBOOK::RECIPE],COOKBOOK::RECIPE,role[NAME]'</pre>   <h4 id=\"empty-run-lists\">Empty Run-lists</h4> <p>Use an empty run-list to determine if a failed chef-client run has anything to do with the recipes that are defined within that run-list. This is a quick way to discover if the underlying cause of a chef-client run failure is a configuration issue. If a failure persists even if the run-list is empty, check the following:</p> <ul class=\"simple\"> <li>Configuration settings in the knife.rb file</li> <li>Permissions for the user to both the Chef server and to the node on which the chef-client run is to take place</li> </ul>     <h2 id=\"about-why-run-mode\">About why-run Mode</h2> <p>why-run mode is a way to see what the chef-client would have configured, had an actual chef-client run occurred. This approach is similar to the concept of “no-operation” (or “no-op”): decide what should be done, but then don’t actually do anything until it’s done right. This approach to configuration management can help identify where complexity exists in the system, where inter-dependencies may be located, and to verify that everything will be configured in the desired manner.</p> <p>When why-run mode is enabled, a chef-client run will occur that does everything up to the point at which configuration would normally occur. This includes getting the configuration data, authenticating to the Chef server, rebuilding the node object, expanding the run-list, getting the necessary cookbook files, resetting node attributes, identifying the resources, and building the resource collection and does not include mapping each resource to a provider or configuring any part of the system.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">why-run mode is not a replacement for running cookbooks in a test environment that mirrors the production environment. Chef uses why-run mode to learn more about what is going on, but also Kitchen on developer systems, along with an internal OpenStack cloud and external cloud providers to test more thoroughly.</p> </div> <p>When the chef-client is run in why-run mode, certain assumptions are made:</p> <ul class=\"simple\"> <li>If the <strong>service</strong> resource cannot find the appropriate command to verify the status of a service, why-run mode will assume that the command would have been installed by a previous resource and that the service would not be running</li> <li>For <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> attribute, why-run mode will assume these are commands or blocks that are safe to run. These conditions are not designed to be used to change the state of the system, but rather to help facilitate idempotency for the resource itself. That said, it may be possible that these attributes are being used in a way that modifies the system state</li> <li>The closer the current state of the system is to the desired state, the more useful why-run mode will be. For example, if a full run-list is run against a fresh system, that run-list may not be completely correct on the first try, but also that run-list will produce more output than a smaller run-list</li> </ul> <p>For example, the <strong>service</strong> resource can be used to start a service. If the action is <code class=\"docutils literal\">:start</code> and the service is not running, then start the service (if it is not running) and do nothing (if it is running). What about a service that is installed from a package? The chef-client cannot check to see if the service is running until after the package is installed. A simple question that why-run mode can answer is what the chef-client would say about the state of the service after installing the package because service actions often trigger notifications to other resources. So it can be important to know in advance that any notifications are being triggered correctly.</p> <p>For a detailed explanation of the dry-run concept and how it relates to the why-run mode, see <a class=\"reference external\" href=\"http://blog.afistfulofservers.net/post/2012/12/21/promises-lies-and-dryrun-mode/\">this blog post</a>.</p>   <h2 id=\"about-node-names\">About Node Names</h2> <p>The name of a node is required as part of the authentication process to the Chef server. The name of each node must be unique within an organization, but otherwise can be any string that matches the following regular expression:</p> <pre class=\"highlight-python\" data-language=\"python\">/^[\\-[:alnum:]_:.]+$/</pre> <p>The name of a node can be obtained from the <code class=\"docutils literal\">node_name</code> attribute in the client.rb file or by allowing Ohai to collect this data during the chef-client run. When Ohai collects this data during the chef-client run, it uses the FQDN name of the node (which is always unique within an organization) as the name of the node.</p> <p>Using the FQDN as the node name, and then allowing Ohai to collect this information during each chef-client run, is the recommended approach and the easiest way to ensure that the names of all nodes across the organization are unique.</p>   <h2 id=\"manage-nodes\">Manage Nodes</h2> <p>There are several ways to manage nodes directly, including by using knife, the Chef management console add-on for the Chef server, or by using command-line tools that are specific to chef-client.</p> <ul class=\"simple\"> <li>knife can be used to create, edit, view, list, tag, and delete nodes.</li> <li>knife plug-ins can be used to create, edit, and manage nodes that are located on cloud providers.</li> <li>The Chef management console add-on can be used to create, edit, view, list, tag, and delete nodes. In addition, node attributes can be modified and nodes can be moved between environments.</li> <li>The chef-client can be used to manage node data using the command line and JSON files. Each JSON file contains a hash, the elements of which are added as node attributes. In addition, the <code class=\"docutils literal\">run_list</code> setting allows roles and/or recipes to be added to the node.</li> <li>chef-solo can be used to manage node data using the command line and JSON files. Each JSON file contains a hash, the elements of which are added as node attributes. In addition, the <code class=\"docutils literal\">run_list</code> setting allows roles and/or recipes to be added to the node.</li> <li>The command line can also be used to edit JSON files and files that are related to third-party services, such as Amazon EC2, where the JSON files can contain per-instance metadata that is stored in a file on-disk and then read by chef-solo or chef-client as required.</li> </ul>   <h2 id=\"node-objects\">Node Objects</h2> <p>For the chef-client, two important aspects of nodes are groups of attributes and run-lists. An attribute is a specific piece of data about the node, such as a network interface, a file system, the number of clients a service running on a node is capable of accepting, and so on. A run-list is an ordered list of recipes and/or roles that are run in an exact order. The node object consists of the run-list and node attributes, which is a JSON file that is stored on the Chef server. The chef-client gets a copy of the node object from the Chef server during each chef-client run and places an updated copy on the Chef server at the end of each chef-client run.</p> <p>An attribute is a specific detail about a node. Attributes are used by the chef-client to understand:</p> <ul class=\"simple\"> <li>The current state of the node</li> <li>What the state of the node was at the end of the previous chef-client run</li> <li>What the state of the node should be at the end of the current chef-client run</li> </ul> <p>Attributes are defined by:</p> <ul class=\"simple\"> <li>The state of the node itself</li> <li>Cookbooks (in attribute files and/or recipes)</li> <li>Roles</li> <li>Environments</li> </ul> <p>During every chef-client run, the chef-client builds the attribute list using:</p> <ul class=\"simple\"> <li>Data about the node collected by Ohai</li> <li>The node object that was saved to the Chef server at the end of the previous chef-client run</li> <li>The rebuilt node object from the current chef-client run, after it is updated for changes to cookbooks (attribute files and/or recipes), roles, and/or environments, and updated for any changes to the state of the node itself</li> </ul> <p>After the node object is rebuilt, all of attributes are compared, and then the node is updated based on attribute precedence. At the end of every chef-client run, the node object that defines the current state of the node is uploaded to the Chef server so that it can be indexed for search.</p>   <h2 id=\"attributes\">Attributes</h2> <p>An attribute is a specific detail about a node, such as an IP address, a host name, a list of loaded kernel modules, the version(s) of available programming languages that are available, and so on. An attribute may be unique to a specific node or it can be identical across every node in the organization. Attributes are most commonly set from a cookbook, by using knife, or are retrieved by Ohai from each node prior to every chef-client run. All attributes are indexed for search on the Chef server. Good candidates for attributes include:</p> <ul class=\"simple\"> <li>any cross-platform abstraction for an application, such as the path to a configuration files</li> <li>default values for tunable settings, such as the amount of memory assigned to a process or the number of workers to spawn</li> <li>anything that may need to be persisted in node data between chef-client runs</li> </ul> <p>In general, attribute precedence is set to enable cookbooks and roles to define attribute defaults, for normal attributes to define the values that should be specific for a node, and for override attributes to force a certain value, even when a node already has that value specified.</p> <p>One approach is to set attributes at the same precedence level by setting attributes in a cookbook’s attribute files, and then also setting the same default attributes (but with different values) using a role. The attributes set in the role will be deep merged on top of the attributes from the attribute file, and the attributes set by the role will take precedence over the attributes specified in the cookbook’s attribute files.</p> <p>Another (much less common) approach is to set a value only if an attribute has no value. This can be done by using the <code class=\"docutils literal\">_unless</code> variants of the attribute priority methods:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">default_unless</code></li> <li>\n<code class=\"docutils literal\">set_unless</code> (<code class=\"docutils literal\">normal_unless</code> is an alias of <code class=\"docutils literal\">set_unless</code>; use either alias to set an attribute with a normal attribute precedence.)</li> <li><code class=\"docutils literal\">override_unless</code></li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Use the <code class=\"docutils literal\">_unless</code> variants carefully (and only when necessary) because when they are used, attributes applied to nodes may become out of sync with the values in the cookbooks as these cookbooks are updated. This approach can create situations where two otherwise identical nodes end up having slightly different configurations and can also be a challenge to debug.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Attributes can be configured in cookbooks (attribute files and recipes), roles, and environments. In addition, Ohai collects attribute data about each node at the start of the chef-client run. See <a class=\"reference external\" href=\"https://docs.chef.io/attributes.html\">https://docs.chef.io/attributes.html</a> for more information about how all of these attributes fit together.</p> </div>  <h3 id=\"attribute-types\">Attribute Types</h3> <p>The chef-client uses six types of attributes to determine the value that is applied to a node during the chef-client run. In addition, the chef-client sources attribute values from up to five locations. The combination of attribute types and sources allows for up to 15 different competing values to be available to the chef-client during the chef-client run:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Attribute Type</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">default</code></td> <td>A <code class=\"docutils literal\">default</code> attribute is automatically reset at the start of every chef-client run and has the lowest attribute precedence. Use <code class=\"docutils literal\">default</code> attributes as often as possible in cookbooks.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">force_default</code></td> <td>Use the <code class=\"docutils literal\">force_default</code> attribute to ensure that an attribute defined in a cookbook (by an attribute file or by a recipe) takes precedence over a <code class=\"docutils literal\">default</code> attribute set by a role or an environment.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">normal</code></td> <td>A <code class=\"docutils literal\">normal</code> attribute is a setting that persists in the node object. A <code class=\"docutils literal\">normal</code> attribute has a higher attribute precedence than a <code class=\"docutils literal\">default</code> attribute.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">override</code></td> <td>An <code class=\"docutils literal\">override</code> attribute is automatically reset at the start of every chef-client run and has a higher attribute precedence than <code class=\"docutils literal\">default</code>, <code class=\"docutils literal\">force_default</code>, and <code class=\"docutils literal\">normal</code> attributes. An <code class=\"docutils literal\">override</code> attribute is most often specified in a recipe, but can be specified in an attribute file, for a role, and/or for an environment. A cookbook should be authored so that it uses <code class=\"docutils literal\">override</code> attributes only when required.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">force_override</code></td> <td>Use the <code class=\"docutils literal\">force_override</code> attribute to ensure that an attribute defined in a cookbook (by an attribute file or by a recipe) takes precedence over an <code class=\"docutils literal\">override</code> attribute set by a role or an environment.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">automatic</code></td> <td>An <code class=\"docutils literal\">automatic</code> attribute contains data that is identified by Ohai at the beginning of every chef-client run. An <code class=\"docutils literal\">automatic</code> attribute cannot be modified and always has the highest attribute precedence.</td> </tr> </tbody> </table>   <h3 id=\"attribute-persistence\">Attribute Persistence</h3> <p>At the beginning of a chef-client run, all attributes are reset. The chef-client rebuilds them using automatic attributes collected by Ohai at the beginning of the chef-client run and then using default and override attributes that are specified in cookbooks or by roles and environments. Normal attributes are never reset. All attributes are then merged and applied to the node according to attribute precedence. At the conclusion of the chef-client run, the attributes that were applied to the node are saved to the Chef server as part of the node object.</p>   <h3 id=\"attribute-precedence\">Attribute Precedence</h3> <p>Attributes are always applied by the chef-client in the following order:</p> <ol class=\"arabic simple\"> <li>A <code class=\"docutils literal\">default</code> attribute located in a cookbook attribute file</li> <li>A <code class=\"docutils literal\">default</code> attribute located in a recipe</li> <li>A <code class=\"docutils literal\">default</code> attribute located in an environment</li> <li>A <code class=\"docutils literal\">default</code> attribute located in role</li> <li>A <code class=\"docutils literal\">force_default</code> attribute located in a cookbook attribute file</li> <li>A <code class=\"docutils literal\">force_default</code> attribute located in a recipe</li> <li>A <code class=\"docutils literal\">normal</code> attribute located in a cookbook attribute file</li> <li>A <code class=\"docutils literal\">normal</code> attribute located in a recipe</li> <li>An <code class=\"docutils literal\">override</code> attribute located in a cookbook attribute file</li> <li>An <code class=\"docutils literal\">override</code> attribute located in a recipe</li> <li>An <code class=\"docutils literal\">override</code> attribute located in a role</li> <li>An <code class=\"docutils literal\">override</code> attribute located in an environment</li> <li>A <code class=\"docutils literal\">force_override</code> attribute located in a cookbook attribute file</li> <li>A <code class=\"docutils literal\">force_override</code> attribute located in a recipe</li> <li>An <code class=\"docutils literal\">automatic</code> attribute identified by Ohai at the start of the chef-client run</li> </ol> <p>where the last attribute in the list is the one that is applied to the node.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The attribute precedence order for roles and environments is reversed for <code class=\"docutils literal\">default</code> and <code class=\"docutils literal\">override</code> attributes. The precedence order for <code class=\"docutils literal\">default</code> attributes is environment, then role. The precedence order for <code class=\"docutils literal\">override</code> attributes is role, then environment. Applying environment <code class=\"docutils literal\">override</code> attributes after role <code class=\"docutils literal\">override</code> attributes allows the same role to be used across multiple environments, yet ensuring that values can be set that are specific to each environment (when required). For example, the role for an application server may exist in all environments, yet one environment may use a database server that is different from other environments.</p> </div> <p>Attribute precedence, viewed from the same perspective as the overview diagram, where the numbers in the diagram match the order of attribute precedence:</p> <img alt=\"_images/overview_chef_attributes_precedence.png\" src=\"https://docs.chef.io/release/12-9/_images/overview_chef_attributes_precedence.png\"> <p>Attribute precedence, when viewed as a table:</p> <img alt=\"_images/overview_chef_attributes_table.png\" src=\"https://docs.chef.io/release/12-9/_images/overview_chef_attributes_table.png\">  <h4 id=\"whitelist-attributes\">Whitelist Attributes</h4> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">When these settings are used, any attribute not defined in a whitelist will not be saved. Each attribute type is whitelisted independently of the other attribute types. For example, if <code class=\"docutils literal\">automatic_attribute_whitelist</code> defines attributes to be saved, but <code class=\"docutils literal\">normal_attribute_whitelist</code>, <code class=\"docutils literal\">default_attribute_whitelist</code>, and <code class=\"docutils literal\">override_attribute_whitelist</code> are not defined, then all normal, default and override attributes are saved, along with only the specified automatic attributes.</p> </div> <p>Attributes that should be saved by a node may be whitelisted in the client.rb file. The whitelist is a Hash of keys that specify each attribute to be saved.</p> <p>Attribute are whitelisted by attribute type, with each attribute type being whitelisted independently. Each attribute type—<code class=\"docutils literal\">automatic</code>, <code class=\"docutils literal\">default</code>, <code class=\"docutils literal\">normal</code>, and <code class=\"docutils literal\">override</code>—may define whitelists by using the following settings in the client.rb file:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">automatic_attribute_whitelist</code></td> <td>A Hash that whitelists <code class=\"docutils literal\">automatic</code> attributes, preventing non-whitelisted attributes from being saved. For example: <code class=\"docutils literal\">['network/interfaces/eth0']</code>. Default value: all attributes are saved. If the Hash is empty, no attributes are saved.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">default_attribute_whitelist</code></td> <td>A Hash that whitelists <code class=\"docutils literal\">default</code> attributes, preventing non-whitelisted attributes from being saved. For example: <code class=\"docutils literal\">['filesystem/dev/disk0s2/size']</code>. Default value: all attributes are saved. If the Hash is empty, no attributes are saved.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">normal_attribute_whitelist</code></td> <td>A Hash that whitelists <code class=\"docutils literal\">normal</code> attributes, preventing non-whitelisted attributes from being saved. For example: <code class=\"docutils literal\">['filesystem/dev/disk0s2/size']</code>. Default value: all attributes are saved. If the Hash is empty, no attributes are saved.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">override_attribute_whitelist</code></td> <td>A Hash that whitelists <code class=\"docutils literal\">override</code> attributes, preventing non-whitelisted attributes from being saved. For example: <code class=\"docutils literal\">['map - autohome/size']</code>. Default value: all attributes are saved. If the Hash is empty, no attributes are saved.</td> </tr> </tbody> </table> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">It is recommended that only <code class=\"docutils literal\">automatic_attribute_whitelist</code> be used to whitelist attributes. This is primarily because automatic attributes generate the most data, but also that normal, default, and override attributes are typically much more important attributes and are more likely to cause issues if they are whitelisted incorrectly.</p> </div> <p>For example, normal attribute data similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"filesystem\" =&gt; {\n    \"/dev/disk0s2\" =&gt; {\n      \"size\" =&gt; \"10mb\"\n    },\n    \"map - autohome\" =&gt; {\n      \"size\" =&gt; \"10mb\"\n    }\n  },\n  \"network\" =&gt; {\n    \"interfaces\" =&gt; {\n      \"eth0\" =&gt; {...},\n      \"eth1\" =&gt; {...},\n    }\n  }\n}</pre> <p>To whitelist the <code class=\"docutils literal\">network</code> attributes and prevent the other attributes from being saved, update the client.rb file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">normal_attribute_whitelist ['network/interfaces/']</pre> <p>When a whitelist is defined, any attribute of that type that is not specified in that attribute whitelist <strong>will not</strong> be saved. So based on the previous whitelist for normal attributes, the <code class=\"docutils literal\">filesystem</code> and <code class=\"docutils literal\">map - autohome</code> attributes will not be saved, but the <code class=\"docutils literal\">network</code> attributes will.</p> <p>Leave the value empty to prevent all attributes of that attribute type from being saved:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">normal_attribute_whitelist []</pre> <p>For attributes that contain slashes (<code class=\"docutils literal\">/</code>) within the attribute value, such as the <code class=\"docutils literal\">filesystem</code> attribute <code class=\"docutils literal\">'/dev/diskos2'</code>, use an array. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">automatic_attribute_whitelist [['filesystem','/dev/diskos2']]</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/nodes.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/nodes.html</a>\n  </p>\n</div>\n","12-9/chef_client":"<h1 id=\"chef-client-title\">chef-client</h1> <p>A chef-client is an agent that runs locally on every node that is under management by Chef. When a chef-client is run, it will perform all of the steps that are required to bring the node into the expected state, including:</p> <ul class=\"simple\"> <li>Registering and authenticating the node with the Chef server</li> <li>Building the node object</li> <li>Synchronizing cookbooks</li> <li>Compiling the resource collection by loading each of the required cookbooks, including recipes, attributes, and all other dependencies</li> <li>Taking the appropriate and required actions to configure the node</li> <li>Looking for exceptions and notifications, handling each as required</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The chef-client executable can be run as a daemon.</p> </div>  <h2 id=\"node-types\">Node Types</h2> <p>A node is any machine—physical, virtual, cloud, network device, etc.—that is under management by Chef.</p> <p>The types of nodes that can be managed by Chef include, but are not limited to, the following:</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Node Type</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_node_type_server.svg\" width=\"100px\">  </td> <td>A physical node is typically a server or a virtual machine, but it can be any active device attached to a network that is capable of sending, receiving, and forwarding information over a communications channel. In other words, a physical node is any active device attached to a network that can run a chef-client and also allow that chef-client to communicate with a Chef server.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_node_type_cloud_public.svg\" width=\"100px\">  </td> <td>A cloud-based node is hosted in an external cloud-based service, such as Amazon Web Services (AWS), OpenStack, Rackspace, Google Compute Engine, or Microsoft Azure. Plugins are available for knife that provide support for external cloud-based services. knife can use these plugins to create instances on cloud-based services. Once created, the chef-client can be used to deploy, configure, and maintain those instances.</td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_node_virtual_machine.svg\" width=\"100px\">  </td> <td>A virtual node is a machine that runs only as a software implementation, but otherwise behaves much like a physical machine.</td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_node_type_network_device.svg\" width=\"100px\">  </td> <td>A network node is any networking device—a switch, a router—that is being managed by a chef-client, such as networking devices by Juniper Networks, Arista, Cisco, and F5. Use Chef to automate common network configurations, such physical and logical Ethernet link properties and VLANs, on these devices.</td> </tr> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_node_type_container.svg\" width=\"100px\">  </td> <td>Containers are an approach to virtualization that allows a single operating system to host many working configurations, where each working configuration—a container—is assigned a single responsibility that is isolated from all other responsibilities. Containers are popular as a way to manage distributed and scalable applications and services.</td> </tr> </tbody> </table> <p>The key components of nodes that are under management by Chef include:</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Component</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_chef_client.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">A chef-client is an agent that runs locally on every node that is under management by Chef. When a chef-client is run, it will perform all of the steps that are required to bring the node into the expected state, including:</p> <ul class=\"simple\"> <li>Registering and authenticating the node with the Chef server</li> <li>Building the node object</li> <li>Synchronizing cookbooks</li> <li>Compiling the resource collection by loading each of the required cookbooks, including recipes, attributes, and all other dependencies</li> <li>Taking the appropriate and required actions to configure the node</li> <li>Looking for exceptions and notifications, handling each as required</li> </ul> <p class=\"last\">RSA public key-pairs are used to authenticate the chef-client with the Chef server every time a chef-client needs access to data that is stored on the Chef server. This prevents any node from accessing data that it shouldn’t and it ensures that only nodes that are properly registered with the Chef server can be managed.</p> </td> </tr> <tr class=\"row-odd\">\n<td>\n<img src=\"https://docs.chef.io/release/12-9/_images/icon_ohai.svg\" width=\"100px\">  </td> <td>\n<p class=\"first\">Ohai is a tool that is used to detect attributes on a node, and then provide these attributes to the chef-client at the start of every chef-client run. Ohai is required by the chef-client and must be present on a node. (Ohai is installed on a node as part of the chef-client install process.)</p> <p>The types of attributes Ohai collects include (but are not limited to):</p> <ul class=\"simple\"> <li>Platform details</li> <li>Network usage</li> <li>Memory usage</li> <li>CPU data</li> <li>Kernel data</li> <li>Host names</li> <li>Fully qualified domain names</li> <li>Other configuration details</li> </ul> <p class=\"last\">Attributes that are collected by Ohai are automatic attributes, in that these attributes are used by the chef-client to ensure that these attributes remain unchanged after the chef-client is done configuring the node.</p> </td> </tr> </tbody> </table>   <h2 id=\"the-chef-client-title-run\">The chef-client Run</h2> <p>A “chef-client run” is the term used to describe a series of steps that are taken by the chef-client when it is configuring a node. The following diagram shows the various stages that occur during the chef-client run, and then the list below the diagram describes in greater detail each of those stages.</p> <img alt=\"_images/chef_run.png\" src=\"https://docs.chef.io/release/12-9/_images/chef_run.png\"> <p>During every chef-client run, the following happens:</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Stages</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><strong>Get configuration data</strong></td> <td>The chef-client gets process configuration data from the client.rb file on the node, and then gets node configuration data from Ohai. One important piece of configuration data is the name of the node, which is found in the <code class=\"docutils literal\">node_name</code> attribute in the client.rb file or is provided by Ohai. If Ohai provides the name of a node, it is typically the FQDN for the node, which is always unique within an organization.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Authenticate to the Chef Server</strong></td> <td>The chef-client authenticates to the Chef server using an RSA private key and the Chef server API. The name of the node is required as part of the authentication process to the Chef server. If this is the first chef-client run for a node, the chef-validator will be used to generate the RSA private key.</td> </tr> <tr class=\"row-even\">\n<td><strong>Get, rebuild the node object</strong></td> <td>The chef-client pulls down the node object from the Chef server. If this is the first chef-client run for the node, there will not be a node object to pull down from the Chef server. After the node object is pulled down from the Chef server, the chef-client rebuilds the node object. If this is the first chef-client run for the node, the rebuilt node object will contain only the default run-list. For any subsequent chef-client run, the rebuilt node object will also contain the run-list from the previous chef-client run.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Expand the run-list</strong></td> <td>The chef-client expands the run-list from the rebuilt node object, compiling a full and complete list of roles and recipes that will be applied to the node, placing the roles and recipes in the same exact order they will be applied. (The run-list is stored in each node object’s JSON file, grouped under <code class=\"docutils literal\">run_list</code>.)</td> </tr> <tr class=\"row-even\">\n<td><strong>Synchronize cookbooks</strong></td> <td>The chef-client asks the Chef server for a list of all cookbook files (including recipes, templates, resources, providers, attributes, libraries, and definitions) that will be required to do every action identified in the run-list for the rebuilt node object. The Chef server provides to the chef-client a list of all of those files. The chef-client compares this list to the cookbook files cached on the node (from previous chef-client runs), and then downloads a copy of every file that has changed since the previous chef-client run, along with any new files.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Reset node attributes</strong></td> <td>All attributes in the rebuilt node object are reset. All attributes from attribute files, environments, roles, and Ohai are loaded. Attributes that are defined in attribute files are first loaded according to cookbook order. For each cookbook, attributes in the <code class=\"docutils literal\">default.rb</code> file are loaded first, and then additional attribute files (if present) are loaded in lexical sort order. All attributes in the rebuilt node object are updated with the attribute data according to attribute precedence. When all of the attributes are updated, the rebuilt node object is complete.</td> </tr> <tr class=\"row-even\">\n<td><strong>Compile the resource collection</strong></td> <td>The chef-client identifies each resource in the node object and builds the resource collection. Libraries are loaded first to ensure that all language extensions and Ruby classes are available to all resources. Next, attributes are loaded, followed by lightweight resources, and then all definitions (to ensure that any pseudo-resources within definitions are available). Finally, all recipes are loaded in the order specified by the expanded run-list. This is also referred to as the “compile phase”.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Converge the node</strong></td> <td>The chef-client configures the system based on the information that has been collected. Each resource is executed in the order identified by the run-list, and then by the order in which each resource is listed in each recipe. Each resource in the resource collection is mapped to a provider. The provider examines the node, and then does the steps necessary to complete the action. And then the next resource is processed. Each action configures a specific part of the system. This process is also referred to as convergence. This is also referred to as the “execution phase”.</td> </tr> <tr class=\"row-even\">\n<td><strong>Update the node object, process exception and report handlers</strong></td> <td>\n<p class=\"first\">When all of the actions identified by resources in the resource collection have been done, and when the chef-client run finished successfully, the chef-client updates the node object on the Chef server with the node object that was built during this chef-client run. (This node object will be pulled down by the chef-client during the next chef-client run.) This makes the node object (and the data in the node object) available for search.</p> <p class=\"last\">The chef-client always checks the resource collection for the presence of exception and report handlers. If any are present, each one is processed appropriately.</p> </td> </tr> <tr class=\"row-odd\">\n<td><strong>Stop, wait for the next run</strong></td> <td>When everything is configured and the chef-client run is complete, the chef-client stops and waits until the next time it is asked to run.</td> </tr> </tbody> </table>  <h3 id=\"authentication\">Authentication</h3> <p>All communication with the Chef server must be authenticated using the Chef server API, which is a REST API that allows requests to made to the Chef server. Only authenticated requests will be authorized. Most of the time, and especially when using knife, the chef-client, or the Chef server web interface, the use of the Chef server API is transparent. In some cases, the use of the Chef server API requires more detail, such as when making the request in Ruby code, with a knife plugin, or when using cURL.</p> <p>The authentication process ensures the Chef server responds only to requests made by trusted users. Public key encryption is used by the Chef server. When a node and/or a workstation is configured to run the chef-client, both public and private keys are created. The public key is stored on the Chef server, while the private key is returned to the user for safe keeping. (The private key is a .pem file located in the <code class=\"docutils literal\">.chef</code> directory or in <code class=\"docutils literal\">/etc/chef</code>.)</p> <p>Both the chef-client and knife use the Chef server API when communicating with the Chef server. The chef-validator uses the Chef server API, but only during the first chef-client run on a node.</p> <p>Each request to the Chef server from those executables sign a special group of HTTP headers with the private key. The Chef server then uses the public key to verify the headers and verify the contents.</p>   <h3 id=\"chef-validator\">chef-validator</h3> <p>Every request made by the chef-client to the Chef server must be an authenticated request using the Chef server API and a private key. When the chef-client makes a request to the Chef server, the chef-client authenticates each request using a private key located in <code class=\"docutils literal\">/etc/chef/client.pem</code>.</p> <p>However, during the first chef-client run, this private key does not exist. Instead, the chef-client will attempt to use the private key assigned to the chef-validator, located in <code class=\"docutils literal\">/etc/chef/validation.pem</code>. (If, for any reason, the chef-validator is unable to make an authenticated request to the Chef server, the initial chef-client run will fail.)</p> <p>During the initial chef-client run, the chef-client will register with the Chef server using the private key assigned to the chef-validator, after which the chef-client will obtain a <code class=\"docutils literal\">client.pem</code> private key for all future authentication requests to the Chef server.</p> <p>After the initial chef-client run has completed successfully, the chef-validator is no longer required and may be deleted from the node. Use the <code class=\"docutils literal\">delete_validation</code> recipe found in the <code class=\"docutils literal\">chef-client</code> cookbook (<a class=\"reference external\" href=\"https://github.com/chef-cookbooks/chef-client\">https://github.com/chef-cookbooks/chef-client</a>) to remove the chef-validator.</p>    <h2 id=\"ssl-certificates\">SSL Certificates</h2> <p>An SSL certificate is used between the chef-client and the Chef server to ensure that each node has access to the right data.</p>  <h3 id=\"signed-headers\">Signed Headers</h3> <p>Signed header authentication is used to validate communications between the Chef server and any node that is being managed by the Chef server. An API client manages each authentication request. A public and private key pair is used for the authentication itself. The public key is stored in the database on the Chef server. The private key is stored locally on each node and is kept separate from node data (typically in the <code class=\"docutils literal\">/etc/chef/client.pem</code> directory). Each request to the Chef server by a node must include a request signature in the HTTP headers. This signature is computed from a hash of request content and is encrypted using the private key.</p>   <h3 id=\"during-a-chef-client-title-run\">During a chef-client Run</h3> <p>As part of <a class=\"reference external\" href=\"https://docs.chef.io/chef_client.html#the-chef-client-title-run\">every chef-client run</a>, the chef-client authenticates to the Chef server using an RSA private key and the Chef server API.</p>    <h2 id=\"ssl-verification\">SSL Verification</h2> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The following information does not apply to hosted Chef server 12, only to on-premises Chef server 12.</p> </div> <p>Chef server 12 enables SSL verification by default for all requests made to the server, such as those made by knife and the chef-client. The certificate that is generated during the installation of the Chef server is self-signed, which means the certificate is not signed by a trusted certificate authority (CA) that ships with the chef-client. The certificate generated by the Chef server must be downloaded to any machine from which knife and/or the chef-client will make requests to the Chef server.</p> <p>For example, without downloading the SSL certificate, the following knife command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client list</pre> <p>responds with an error similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ERROR: SSL Validation failure connecting to host: chef-server.example.com ...\nERROR: OpenSSL::SSL::SSLError: SSL_connect returned=1 errno=0 state=SSLv3 ...</pre> <p>This is by design and will occur until a verifiable certificate is added to the machine from which the request is sent.</p>  <h3 id=\"changes-prior-to-chef-12\">Changes Prior to Chef 12</h3> <p>The following changes were made during certain chef-client release prior to the chef-client 12 release:</p> <ul> <li>\n<p class=\"first\">In the chef-client 11.8 release, the <code class=\"docutils literal\">verify_api_cert</code> setting was added to the client.rb file with a default value of <code class=\"docutils literal\">false</code>.</p> </li> <li>\n<p class=\"first\">In the chef-client 11.12 release, the <code class=\"docutils literal\">local_key_generation</code> setting was added to the client.rb file.</p> <p>The <code class=\"docutils literal\">ssl_verify_mode</code> continued to default to <code class=\"docutils literal\">:verify_none</code>, but now returned a warning: <code class=\"docutils literal\">SSL validation of HTTPS requests is disabled...</code>, followed by steps for how to configure SSL certificate validation for the chef-client.</p> <p>Two knife commands—<code class=\"docutils literal\">knife ssl check</code> and <code class=\"docutils literal\">knife ssl fetch</code> were added.</p> <p>A new directory in the chef-repo—<code class=\"docutils literal\">/.chef/trusted_certs</code>—was added.</p> <p>These new settings and tools enabled users who wanted to use stronger SSL settings to generate the private/public key pair from the chef-client, verify HTTPS requests, verify SSL certificates, and pull the SSL certificate from the Chef server down to the <code class=\"docutils literal\">/.chef/trusted_certs</code> directory.</p> </li> <li>\n<p class=\"first\">In the chef-client 12 release, the default value for <code class=\"docutils literal\">local_key_generation</code> was changed to <code class=\"docutils literal\">true</code> and the default value for <code class=\"docutils literal\">ssl_verify_mode</code> was changed to <code class=\"docutils literal\">:verify_peer</code>.</p> </li> </ul> <p>Starting with chef-client 12, SSL certificate validation is enabled by default and the <code class=\"docutils literal\">knife ssl fetch</code> is a necessary <a class=\"reference external\" href=\"https://docs.chef.io/install_dk.html#get-ssl-certificates\">part of the setup process</a> for every workstation.</p>   <h3 id=\"path-trusted-certs\"><code class=\"docutils literal\">/.chef/trusted_certs</code></h3> <p>The <code class=\"docutils literal\">/.chef/trusted_certs</code> directory stores trusted SSL certificates used to access the Chef server:</p> <ul class=\"simple\"> <li>On each workstation, this directory is the location into which SSL certificates are placed after they are downloaded from the Chef server using the <code class=\"docutils literal\">knife ssl fetch</code> subcommand</li> <li>On every node, this directory is the location into which SSL certificates are placed when a node has been bootstrapped with the chef-client from a workstation</li> </ul>   <h3 id=\"ssl-cert-file\">SSL_CERT_FILE</h3> <p>Use the <code class=\"docutils literal\">SSL_CERT_FILE</code> environment variable to specify the location for the SSL certificate authority (CA) bundle that is used by the chef-client.</p> <p>A value for <code class=\"docutils literal\">SSL_CERT_FILE</code> is not set by default. Unless updated, the locations in which Chef will look for SSL certificates are:</p> <ul class=\"simple\"> <li>chef-client: <code class=\"docutils literal\">/opt/chef/embedded/ssl/certs/cacert.pem</code>\n</li> <li>Chef development kit: <code class=\"docutils literal\">/opt/chefdk/embedded/ssl/certs/cacert.pem</code>\n</li> </ul> <p>Keeping the default behavior is recommended. To use a custom CA bundle, update the environment variable to specify the path to the custom CA bundle. If (for some reason) SSL certificate verification stops working, ensure the correct value is specified for <code class=\"docutils literal\">SSL_CERT_FILE</code>.</p>   <h3 id=\"client-rb-settings\">client.rb Settings</h3> <p>Use following client.rb settings to manage SSL certificate preferences:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">local_key_generation</code></td> <td>Whether the Chef server or chef-client generates the private/public key pair. When <code class=\"docutils literal\">true</code>, the chef-client generates the key pair, and then sends the public key to the Chef server. Default value: <code class=\"docutils literal\">true</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">ssl_ca_file</code></td> <td>The file in which the OpenSSL key is saved. This setting is generated automatically by the chef-client and most users do not need to modify it.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">ssl_ca_path</code></td> <td>The path to where the OpenSSL key is located. This setting is generated automatically by the chef-client and most users do not need to modify it.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">ssl_client_cert</code></td> <td>The OpenSSL X.509 certificate used for mutual certificate validation. This setting is only necessary when mutual certificate validation is configured on the Chef server. Default value: <code class=\"docutils literal\">nil</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">ssl_client_key</code></td> <td>The OpenSSL X.509 key used for mutual certificate validation. This setting is only necessary when mutual certificate validation is configured on the Chef server. Default value: <code class=\"docutils literal\">nil</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">ssl_verify_mode</code></td> <td>\n<p class=\"first\">Set the verify mode for HTTPS requests.</p> <ul class=\"simple\"> <li>Use <code class=\"docutils literal\">:verify_none</code> to do no validation of SSL certificates.</li> <li>Use <code class=\"docutils literal\">:verify_peer</code> to do validation of all SSL certificates, including the Chef server connections, S3 connections, and any HTTPS <strong>remote_file</strong> resource URLs used in the chef-client run. This is the recommended setting.</li> </ul> <p class=\"last\">Depending on how OpenSSL is configured, the <code class=\"docutils literal\">ssl_ca_path</code> may need to be specified. Default value: <code class=\"docutils literal\">:verify_peer</code>.</p> </td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">verify_api_cert</code></td> <td>Verify the SSL certificate on the Chef server. When <code class=\"docutils literal\">true</code>, the chef-client always verifies the SSL certificate. When <code class=\"docutils literal\">false</code>, the chef-client uses the value of <code class=\"docutils literal\">ssl_verify_mode</code> to determine if the SSL certificate requires verification. Default value: <code class=\"docutils literal\">false</code>.</td> </tr> </tbody> </table>   <h3 id=\"knife-title-subcommands\">Knife Subcommands</h3> <p>The chef-client includes two knife commands for managing SSL certificates:</p> <ul class=\"simple\"> <li>Use <a class=\"reference internal\" href=\"knife_ssl_check\">knife ssl check</a> to troubleshoot SSL certificate issues</li> <li>Use <a class=\"reference internal\" href=\"knife_ssl_fetch\">knife ssl fetch</a> to pull down a certificate from the Chef server to the <code class=\"docutils literal\">/.chef/trusted_certs</code> directory on the workstation.</li> </ul> <p>After the workstation has the correct SSL certificate, bootstrap operations from that workstation will use the certificate in the <code class=\"docutils literal\">/.chef/trusted_certs</code> directory during the bootstrap operation.</p>  <h4 id=\"knife-ssl-check\">knife ssl check</h4> <p>Run the <code class=\"docutils literal\">knife ssl check</code> subcommand to verify the state of the SSL certificate, and then use the reponse to help troubleshoot issues that may be present.</p> <p><strong>Verified</strong></p> <p>If the SSL certificate can be verified, the response to</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssl check</pre> <p>is similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Connecting to host chef-server.example.com:443\nSuccessfully verified certificates from 'chef-server.example.com'</pre> <p><strong>Unverified</strong></p> <p>If the SSL certificate cannot be verified, the response to</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssl check</pre> <p>is similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Connecting to host chef-server.example.com:443\nERROR: The SSL certificate of chef-server.example.com could not be verified\nCertificate issuer data:\n  /C=US/ST=WA/L=S/O=Corp/OU=Ops/CN=chef-server.example.com/emailAddress=you@example.com\n\nConfiguration Info:\n\nOpenSSL Configuration:\n* Version: OpenSSL 1.0.1j 15 Oct 2014\n* Certificate file: /opt/chefdk/embedded/ssl/cert.pem\n* Certificate directory: /opt/chefdk/embedded/ssl/certs\nChef SSL Configuration:\n* ssl_ca_path: nil\n* ssl_ca_file: nil\n* trusted_certs_dir: \"/Users/grantmc/Downloads/chef-repo/.chef/trusted_certs\"\n\nTO FIX THIS ERROR:\n\nIf the server you are connecting to uses a self-signed certificate,\nyou must configure chef to trust that certificate.\n\nBy default, the certificate is stored in the following location on the\nhost where your chef-server runs:\n\n  /var/opt/opscode/nginx/ca/SERVER_HOSTNAME.crt\n\nCopy that file to your trusted_certs_dir (currently:\n\n  /Users/grantmc/Downloads/chef-repo/.chef/trusted_certs)\n\nusing SSH/SCP or some other secure method, then re-run this command to\nconfirm that the certificate is now trusted.</pre>   <h4 id=\"knife-ssl-fetch\">knife ssl fetch</h4> <p>Run the <code class=\"docutils literal\">knife ssl fetch</code> to download the self-signed certificate from the Chef server to the <code class=\"docutils literal\">/.chef/trusted_certs</code> directory on a workstation. For example:</p> <p>The SSL certificate that is downloaded to the <code class=\"docutils literal\">/.chef/trusted_certs</code> directory should be verified to ensure that it is, in fact, the same certificate as the one located on the Chef server. This can be done by comparing the SHA-256 checksums.</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">View the checksum on the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ssh ubuntu@chef-server.example.com sudo sha256sum /var/opt/opscode/nginx/ca/chef-server.example.com.crt</pre> <p>The response is similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">&lt;ABC123checksum&gt;  /var/opt/opscode/nginx/ca/chef-server.example.com.crt</pre> </li> <li>\n<p class=\"first\">View the checksum on the workstation:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ gsha256sum .chef/trusted_certs/chef-server.example.com.crt</pre> <p>The response is similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">&lt;ABC123checksum&gt;  .chef/trusted_certs/chef-server.example.com.crt</pre> </li> <li>\n<p class=\"first\">Verify that the checksum values are identical.</p> </li> </ol> <p><strong>Verify Checksums</strong></p> <p>The SSL certificate that is downloaded to the <code class=\"docutils literal\">/.chef/trusted_certs</code> directory should be verified to ensure that it is, in fact, the same certificate as the one located on the Chef server. This can be done by comparing the SHA-256 checksums.</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">View the checksum on the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ssh ubuntu@chef-server.example.com sudo sha256sum /var/opt/opscode/nginx/ca/chef-server.example.com.crt</pre> <p>The response is similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">&lt;ABC123checksum&gt;  /var/opt/opscode/nginx/ca/chef-server.example.com.crt</pre> </li> <li>\n<p class=\"first\">View the checksum on the workstation:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ gsha256sum .chef/trusted_certs/chef-server.example.com.crt</pre> <p>The response is similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">&lt;ABC123checksum&gt;  .chef/trusted_certs/chef-server.example.com.crt</pre> </li> <li>\n<p class=\"first\">Verify that the checksum values are identical.</p> </li> </ol>     <h2 id=\"bootstrap-operations\">Bootstrap Operations</h2> <p>The <code class=\"docutils literal\">knife bootstrap</code> command is a common way to install the chef-client on a node. The default for this approach assumes that node can access the Chef website so that it may download the chef-client package from that location.</p> <p>The omnibus installer will detect the version of the operating system, and then install the appropriate version of the chef-client using a single command to install the chef-client and all of its dependencies, including an embedded version of Ruby, RubyGems, OpenSSL, key-value stores, parsers, libraries, and command line utilities.</p> <p>The omnibus installer puts everything into a unique directory (<code class=\"docutils literal\">/opt/chef/</code>) so that the chef-client will not interfere with other applications that may be running on the target machine. Once installed, the chef-client requires a few more configuration steps before it can perform its first chef-client run on a node.</p> <p>A node is any physical, virtual, or cloud machine that is configured to be maintained by a chef-client. A bootstrap is a process that installs the chef-client on a target system so that it can run as a chef-client and communicate with a Chef server. There are two ways to do this:</p> <ul class=\"simple\"> <li>Use the <code class=\"docutils literal\">knife bootstrap</code> subcommand to <a class=\"reference internal\" href=\"install_bootstrap\">bootstrap a node using the omnibus installer</a>\n</li> <li>Use an unattended install to bootstrap a node from itself, without using SSH or WinRM</li> </ul> <p>The following diagram shows the stages of the bootstrap operation, and then the list below the diagram describes in greater detail each of those stages.</p> <img alt=\"_images/chef_bootstrap.png\" src=\"https://docs.chef.io/release/12-9/_images/chef_bootstrap.png\"> <p>During a <code class=\"docutils literal\">knife bootstrap</code> bootstrap operation, the following happens:</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Stages</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><strong>$ knife bootstrap</strong></td> <td>\n<p class=\"first\">On UNIX- and Linux-based machines: The <code class=\"docutils literal\">knife bootstrap</code> subcommand is issued from a workstation. The hostname, IP address, or FQDN of the target node is issued as part of this command. An SSH connection is established with the target node using port 22. A shell script is assembled using the chef-full.erb (the default bootstrap template), and is then executed on the target node.</p> <p class=\"last\">On Microsoft Windows machines: The <code class=\"docutils literal\">knife bootstrap windows winrm</code> subcommand is issued from a workstation. (This command is part of the <a class=\"reference external\" href=\"https://docs.chef.io/plugin_knife_windows.html\">knife windows plugin</a>.) The hostname, IP address, or FQDN of the target node is issued as part of this command. A connection is established with the target node using WinRM over port 5985. (WinRM must be enabled with the corresponding firewall rules in place.)</p> </td> </tr> <tr class=\"row-odd\">\n<td><strong>Get the install script from Chef</strong></td> <td>\n<p class=\"first\">On UNIX- and Linux-based machines: The shell script that is derived from the chef-full.erb bootstrap template will make a request to the Chef website to get the most recent version of a second shell script (<code class=\"docutils literal\">install.sh</code>).</p> <p class=\"last\">On Microsoft Windows machines: The batch file that is derived from the windows-chef-client-msi.erb bootstrap template will make a request to the Chef website to get the .msi installer.</p> </td> </tr> <tr class=\"row-even\">\n<td><strong>Get the chef-client package from Chef</strong></td> <td>The second shell script (or batch file) then gathers system-specific information and determines the correct package for the chef-client. The second shell script (or batch file) makes a request to the Chef website, and then downloads the appropriate package from s3.amazonaws.com.</td> </tr> <tr class=\"row-odd\">\n<td><strong>Install the chef-client</strong></td> <td>The chef-client is installed on the target node.</td> </tr> <tr class=\"row-even\">\n<td><strong>Start the chef-client run</strong></td> <td>\n<p class=\"first\">On UNIX- and Linux-based machines: The second shell script executes the <code class=\"docutils literal\">chef-client</code> binary with a set of initial settings stored within <code class=\"docutils literal\">first-boot.json</code> on the node. <code class=\"docutils literal\">first-boot.json</code> is generated from the workstation as part of the initial <code class=\"docutils literal\">knife bootstrap</code> subcommand.</p> <p class=\"last\">On Microsoft Windows machines: The batch file that is derived from the windows-chef-client-msi.erb bootstrap template executes the <code class=\"docutils literal\">chef-client</code> binary with a set of initial settings stored within <code class=\"docutils literal\">first-boot.json</code> on the node. <code class=\"docutils literal\">first-boot.json</code> is generated from the workstation as part of the initial <code class=\"docutils literal\">knife bootstrap</code> subcommand.</p> </td> </tr> <tr class=\"row-odd\">\n<td><strong>Complete the chef-client run</strong></td> <td>\n<p class=\"first\">The chef-client run proceeds, using HTTPS (port 443), and registers the node with the Chef server.</p> <p class=\"last\">The first chef-client run, by default, contains an empty run-list. A <a class=\"reference external\" href=\"https://docs.chef.io/knife_bootstrap.html\">run-list can be specified</a> as part of the initial bootstrap operation using the <code class=\"docutils literal\">--run-list</code> option as part of the <code class=\"docutils literal\">knife bootstrap</code> subcommand.</p> </td> </tr> </tbody> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/chef_client.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/chef_client.html</a>\n  </p>\n</div>\n","12-9/install_bootstrap":"<h1 id=\"bootstrap-a-node\">Bootstrap a Node</h1> <p>A node is any physical, virtual, or cloud machine that is configured to be maintained by a chef-client. A bootstrap is a process that installs the chef-client on a target system so that it can run as a chef-client and communicate with a Chef server. There are two ways to do this:</p> <ul class=\"simple\"> <li>Use the <code class=\"docutils literal\">knife bootstrap</code> subcommand to <a class=\"reference internal\" href=\"install_bootstrap\">bootstrap a node using the omnibus installer</a>\n</li> <li>Use an unattended install to bootstrap a node from itself, without using SSH or WinRM</li> </ul>  <h2 id=\"knife-bootstrap\">knife bootstrap</h2> <p>The <code class=\"docutils literal\">knife bootstrap</code> command is a common way to install the chef-client on a node. The default for this approach assumes that node can access the Chef website so that it may download the chef-client package from that location.</p> <p>The omnibus installer will detect the version of the operating system, and then install the appropriate version of the chef-client using a single command to install the chef-client and all of its dependencies, including an embedded version of Ruby, RubyGems, OpenSSL, key-value stores, parsers, libraries, and command line utilities.</p> <p>The omnibus installer puts everything into a unique directory (<code class=\"docutils literal\">/opt/chef/</code>) so that the chef-client will not interfere with other applications that may be running on the target machine. Once installed, the chef-client requires a few more configuration steps before it can perform its first chef-client run on a node.</p> <p><strong>Run the bootstrap command</strong></p> <p>The <code class=\"docutils literal\">knife bootstrap</code> subcommand is used to run a bootstrap operation that installs the chef-client on the target node. The following steps describe how to bootstrap a node using knife.</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Identify the FQDN or IP address of the target node. The <code class=\"docutils literal\">knife bootstrap</code> command requires the FQDN or the IP address for the node in order to complete the bootstrap operation.</p> </li> <li>\n<p class=\"first\">Once the workstation machine is configured, it can be used to install the chef-client on one (or more) nodes across the organization using a knife bootstrap operation. The <code class=\"docutils literal\">knife bootstrap</code> command is used to SSH into the target machine, and then do what is needed to allow the chef-client to run on the node. It will install the chef-client executable (if necessary), generate keys, and register the node with the Chef server. The bootstrap operation requires the IP address or FQDN of the target system, the SSH credentials (username, password or identity file) for an account that has root access to the node, and (if the operating system is not Ubuntu, which is the default distribution used by <code class=\"docutils literal\">knife bootstrap</code>) the operating system running on the target system.</p> <p>In a command window, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife bootstrap 123.45.6.789 -x username -P password --sudo</pre> <p>where <code class=\"docutils literal\">123.45.6.789</code> is the IP address or the FQDN for the node. Use the <code class=\"docutils literal\">--distro</code> option to specify a non-default distribution. For more information about the options available to the <code class=\"docutils literal\">knife bootstrap</code> command for Ubuntu- and Linux-based platforms, see <a class=\"reference external\" href=\"https://docs.chef.io/knife_bootstrap.html\">knife bootstrap</a>. For Microsoft Windows, the <code class=\"docutils literal\">knife windows</code> plugin is required, see <a class=\"reference external\" href=\"https://docs.chef.io/plugin_knife_windows.html\">knife windows</a>.</p> <p>And then while the bootstrap operation is running, the command window will show something like the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Bootstrapping Chef on 123.45.6.789\n123.45.6.789 knife sudo password:\nEnter your password:\n123.45.6.789\n123.45.6.789 [Fri, 07 Sep 2012 11:05:05 -0700] INFO: *** Chef 10.12.0 ***\n123.45.6.789\n123.45.6.789 [Fri, 07 Sep 2012 11:05:07 -0700] INFO: Client key /etc/chef/client.pem is not present - registering\n123.45.6.789\n123.45.6.789 [Fri, 07 Sep 2012 11:05:15 -0700] INFO: Setting the run_list to [] from JSON\n123.45.6.789\n123.45.6.789 [Fri, 07 Sep 2012 11:05:15 -0700] INFO: Run List is []\n123.45.6.789\n123.45.6.789 [Fri, 07 Sep 2012 11:05:15 -0700] INFO: Run List expands to []\n123.45.6.789\n123.45.6.789 [Fri, 07 Sep 2012 11:05:15 -0700] INFO: Starting Chef Run for name_of_node\n123.45.6.789\n123.45.6.789 [Fri, 07 Sep 2012 11:05:15 -0700] INFO: Running start handlers\n123.45.6.789\n123.45.6.789 [Fri, 07 Sep 2012 11:05:15 -0700] INFO: Start handlers complete.\n123.45.6.789\n123.45.6.789 [Fri, 07 Sep 2012 11:05:17 -0700] INFO: Loading cookbooks []\n123.45.6.789\n123.45.6.789 [Fri, 07 Sep 2012 11:05:17 -0700] WARN: Node name_of_node has an empty run list.\n123.45.6.789\n123.45.6.789 [Fri, 07 Sep 2012 11:05:19 -0700] INFO: Chef Run complete in 3.986283452 seconds\n123.45.6.789\n123.45.6.789 [Fri, 07 Sep 2012 11:05:19 -0700] INFO: Running report handlers\n123.45.6.789\n123.45.6.789 [Fri, 07 Sep 2012 11:05:19 -0700] INFO: Report handlers complete\n123.45.6.789</pre> </li> <li>\n<p class=\"first\">After the bootstrap operation has finished, verify that the node is recognized by the Chef server. To show only the node that was just bootstrapped, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client show name_of_node</pre> <p>where <code class=\"docutils literal\">name_of_node</code> is the name of the node that was just bootstrapped. The Chef server will return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">admin:       false\nchef_type:   client\njson_class:  Chef::ApiClient\nname:        name_of_node\npublic_key:</pre> <p>and to show the full list of nodes (and workstations) that are registered with the Chef server, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife client list</pre> <p>The Chef server will return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">workstation\nworkstation\n...\nclient\nname_of_node\n...\nclient</pre> </li> </ol>   <h2 id=\"validatorless-bootstrap\">Validatorless Bootstrap</h2> <p>The ORGANIZATION-validator.pem is typically added to the .chef directory on the workstation. When a node is bootstrapped from that workstation, the ORGANIZATION-validator.pem is used to authenticate the newly-created node to the Chef server during the initial chef-client run. Starting with chef-client version 12.1, it is possible to bootstrap a node using the USER.pem file instead of the ORGANIZATION-validator.pem file. This is known as a “validatorless bootstrap”.</p> <p>To create a node via the USER.pem file, simply delete the ORGANIZATION-validator.pem file on the workstation. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rm -f /home/lamont/.chef/myorg-validator.pem</pre> <p>and then make the following changes in the knife.rb file:</p> <ul class=\"simple\"> <li>Remove the <code class=\"docutils literal\">validation_client_name</code> setting</li> <li>Edit the <code class=\"docutils literal\">validation_key</code> setting to be something that isn’t a path to an existent ORGANIZATION-validator.pem file. For example: <code class=\"docutils literal\">/nonexist</code>.</li> </ul> <p>As long as a USER.pem is also present on the workstation from which the validatorless bootstrap operation will be initiated, the bootstrap operation will run and will use the USER.pem file instead of the ORGANIZATION-validator.pem file.</p> <p>When running a validatorless <code class=\"docutils literal\">knife bootstrap</code> operation, the output is similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">desktop% knife bootstrap 10.1.1.1 -N foo01.acme.org \\\n  -E dev -r 'role[base]' -j '{ \"foo\": \"bar\" }' \\\n  --ssh-user vagrant --sudo\nNode foo01.acme.org exists, overwrite it? (Y/N)\nClient foo01.acme.org exists, overwrite it? (Y/N)\nCreating new client for foo01.acme.org\nCreating new node for foo01.acme.org\nConnecting to 10.1.1.1\n10.1.1.1 Starting first Chef Client run...\n[....etc...]</pre>  <h3 id=\"knife-bootstrap-options\">knife bootstrap Options</h3> <p>Use the following options with a validatorless bootstrap to specify items that are stored in chef-vault:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--bootstrap-vault-file VAULT_FILE</code></dt> <dd>The path to a JSON file that contains a list of vaults and items to be updated.</dd> <dt><code class=\"docutils literal\">--bootstrap-vault-item VAULT_ITEM</code></dt> <dd>A single vault and item to update as <code class=\"docutils literal\">vault:item</code>.</dd> <dt><code class=\"docutils literal\">--bootstrap-vault-json VAULT_JSON</code></dt> <dd>\n<p class=\"first\">A JSON string that contains a list of vaults and items to be updated.</p> <p>For example:</p> <pre class=\"last highlight-bash\" data-language=\"bash\">--bootstrap-vault-json '{ \"vault1\": [\"item1\", \"item2\"], \"vault2\": \"item2\" }'</pre> </dd> </dl>    <h2 id=\"examples\">Examples</h2> <p>The <code class=\"docutils literal\">--bootstrap-vault-*</code> options add the client identify of the bootstrapping node to the permissions list of the specified vault item. This enables the newly-bootstrapped chef-client to be able to read items from the vault. Only a single client is authorized at a time for acces to the vault. (The <code class=\"docutils literal\">-S</code> search query option with the <code class=\"docutils literal\">knife vault create</code> subcommand does the same.)</p>  <h3 id=\"recreate-a-data-bag-item\">Recreate a data bag item</h3> <p>The following example shows how to recreate a data bag item:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife vault delete sea power\nDo you really want to delete sea/power? (Y/N) Y\nDeleted chef_vault_item[sea/power]\n\n$ echo \"{\\\"some\\\":\\\"content for them\\\"}\" &gt; sea-power-content.json\n\n$ cat sea-power-content.json\n{\"some\":\"content for them\"}\n\n$ knife vault create sea power -M client -A sean_horn,angle -J sea-power-content.json</pre> <p>No clients, because the <code class=\"docutils literal\">-S</code> option was not specified while creating the vault.</p> <p>At this time, only the users <code class=\"docutils literal\">sean_horn</code> and <code class=\"docutils literal\">angle</code> are authorized to read and manage the vault.</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife vault show sea power  --mode client -p all\nadmins:\n  sean_horn\n  angle\nclients:\nid:           power\nsearch_query:\nsome:         content for them</pre> <p>It is definitely an encrypted databag, see?</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data_bag show sea power\nWARNING: Encrypted data bag detected, but no secret provided for decoding.  Displaying encrypted data.\nid:   power\nsome:\ncipher:         aes-256-cbc\nencrypted_data: c7Axnyg+1KDxBPOZdYN9QuIYx6dmSmK70unAQbn12Lygvsv2g9DPJJbueXVh\n+yxL\niv:             ONoVR7OjPZiAzaqOZ30bjg==\nversion:        1</pre>   <h3 id=\"use-bootstrap-vault-file\">Use –bootstrap-vault-file</h3> <p>Use the <code class=\"docutils literal\">sea:power</code> recreation step above first, to follow the difference in the vault permissions.</p> <pre class=\"highlight-bash\" data-language=\"bash\">echo \"{\\\"sea\\\":\\\"power\\\"}\" &gt; sea-power-bootstrap-vault-file.json\n\n$ knife bootstrap localhost -p 2200 -N ubuntu-12.04 -r 'role[group1]' --ssh-user vagrant --sudo --bootstrap-vault-file sea-power-bootstrap-vault-file.json\nNode ubuntu-12.04 exists, overwrite it? (Y/N) Y\nClient ubuntu-12.04 exists, overwrite it? (Y/N) Y\nCreating new client for ubuntu-12.04\nCreating new node for ubuntu-12.04\nConnecting to localhost\nlocalhost -----&gt; Existing Chef installation detected\nlocalhost Starting first Chef Client run...\nlocalhost Starting Chef Client, version 12.2.1\nlocalhost resolving cookbooks for run list: [\"delay-test-reporting\"]\nlocalhost Synchronizing Cookbooks:\nlocalhost   - delay-test-reporting\nlocalhost Compiling Cookbooks...\nlocalhost Converging 1 resources\nlocalhost Recipe: delay-test-reporting::default\nlocalhost   * execute[sleep 30] action run\nlocalhost     - execute sleep 30\nlocalhost\nlocalhost Running handlers:\nlocalhost Running handlers complete\nlocalhost Chef Client finished, 1/1 resources updated in 34.307257232 seconds</pre> <p>The client <code class=\"docutils literal\">ubuntu-12.04</code> was added to the <code class=\"docutils literal\">chef-vault</code> during the bootstrap.</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife vault show sea power  --mode client -p all\nadmins:\n  sean_horn\n  angle\nclients:      ubuntu-12.04\nid:           power\nsearch_query:\nsome:         content for them</pre>   <h3 id=\"use-bootstrap-vault-item\">Use –bootstrap-vault-item</h3> <p>Use the <code class=\"docutils literal\">sea:power</code> re-creation step above first, to follow the difference in the vault permissions.</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife bootstrap localhost -p 2200 -N ubuntu-12.04 -r 'role[group1]' --ssh-user vagrant --sudo --bootstrap-vault-item sea:power\nNode ubuntu-12.04 exists, overwrite it? (Y/N) Y\nClient ubuntu-12.04 exists, overwrite it? (Y/N) Y\nCreating new client for ubuntu-12.04\nCreating new node for ubuntu-12.04\nConnecting to localhost\nlocalhost -----&gt; Existing Chef installation detected\nlocalhost Starting first Chef Client run...\nlocalhost Starting Chef Client, version 12.2.1\nlocalhost resolving cookbooks for run list: [\"delay-test-reporting\"]\nlocalhost Synchronizing Cookbooks:\nlocalhost   - delay-test-reporting\nlocalhost Compiling Cookbooks...\nlocalhost Converging 1 resources\nlocalhost Recipe: delay-test-reporting::default\nlocalhost   * execute[sleep 30] action run\nlocalhost     - execute sleep 30\nlocalhost\nlocalhost Running handlers:\nlocalhost Running handlers complete\nlocalhost Chef Client finished, 1/1 resources updated in 34.322229474\nseconds</pre> <p>During the above run, the <code class=\"docutils literal\">sea:power</code> vault item was updated with the <code class=\"docutils literal\">ubuntu-12.04</code> client during the validatorless bootstrap. Previously, it only had the two admins authorized to view the content</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife vault show sea power -p all\nadmins:\n  sean_horn\n  angle\nclients:      ubuntu-12.04\nid:           power\nsearch_query: role:stuff\nsome:         secret stuff for them</pre> <p>Then, let’s check the <code class=\"docutils literal\">ubuntu-12.04</code> client. Install the <code class=\"docutils literal\">chef-vault</code> gem in the embedded chef-client:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo /opt/chef/embedded/bin/gem install chef-vault --no-ri --no-rdoc\nFetching: chef-vault-2.6.1.gem (100%)\nSuccessfully installed chef-vault-2.6.1\n1 gem installed</pre> <p>The client itself can decrypt and read the encrypted databag contents as well.</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo /opt/chef/bin/knife vault show sea power -c /etc/chef/client.rb -M client -p all\nadmins:\n  sean_horn\n  angle\nclients:      ubuntu-12.04\nid:           power\nsearch_query: role:group1\nsome:         secret stuff for them</pre> <p>Success! The client is authorized to view the content of the <code class=\"docutils literal\">sea:power</code> databag item</p>   <h3 id=\"use-bootstrap-vault-json\">Use –bootstrap-vault-json</h3> <p>Use the <code class=\"docutils literal\">sea:power</code> re-creation step above first, to follow the difference in the vault permissions.</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife bootstrap localhost -p 2200 -N ubuntu-12.04 -r 'role[group1]' --ssh-user vagrant --sudo --bootstrap-vault-json '{\"sea\": \"power\"}'\nNode ubuntu-12.04 exists, overwrite it? (Y/N) Y\nClient ubuntu-12.04 exists, overwrite it? (Y/N) Y\nCreating new client for ubuntu-12.04\nCreating new node for ubuntu-12.04\nConnecting to localhost\nlocalhost -----&gt; Existing Chef installation detected\nlocalhost Starting first Chef Client run...\nlocalhost Starting Chef Client, version 12.2.1\nlocalhost resolving cookbooks for run list: [\"delay-test-reporting\"]\nlocalhost Synchronizing Cookbooks:\nlocalhost   - delay-test-reporting\nlocalhost Compiling Cookbooks...\nlocalhost Converging 1 resources\nlocalhost Recipe: delay-test-reporting::default\n\nlocalhost   * execute[sleep 30] action run\nlocalhost     - execute sleep 30\nlocalhost\nlocalhost Running handlers:\nlocalhost Running handlers complete\nlocalhost Chef Client finished, 1/1 resources updated in 33.732784033 seconds</pre> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife vault show sea power -M client -p all\nadmins:\n  sean_horn\n  angle\nclients:      ubuntu-12.04\nid:           power\nsearch_query:\nsome:         content for them</pre>    <h2 id=\"unattended-installs\">Unattended Installs</h2> <p>The chef-client can be installed using an unattended bootstrap. This allows the chef-client to be installed from itself, without using SSH. For example, machines are often created using environments like AWS Auto Scaling, AWS CloudFormation, Rackspace Auto Scale, and PXE. In this scenario, using tooling for attended, single-machine installs like <code class=\"docutils literal\">knife bootstrap</code> or <code class=\"docutils literal\">knife CLOUD_PLUGIN create</code> is not practical because the machines are created automatically and someone cannot always be on-hand to initiate the bootstrap process.</p> <p>When the chef-client is installed using an unattended bootstrap, remember that the chef-client:</p> <ul class=\"simple\"> <li>Must be able to authenticate to the Chef server</li> <li>Must be able to configure a run-list</li> <li>May require custom attributes, depending on the cookbooks that are being used</li> <li>Must be able to access the chef-validator.pem so that it may create a new identity on the Chef server</li> <li>Must have a unique node name; the chef-client will use the FQDN for the host system by default</li> </ul> <p>When the chef-client is installed using an unattended bootstrap, it is typically built into an image that starts the chef-client on boot. The type of image used depends on the platform on which the unattended bootstrap will take place.</p> <p>Use settings in the <a class=\"reference external\" href=\"https://docs.chef.io/config_rb_client.html\">client.rb file</a>—<code class=\"docutils literal\">chef_server_url</code>, <code class=\"docutils literal\">http_proxy</code>, and so on—to ensure that configuration details are built into the unattended bootstrap process.</p> <p><strong>Setting the initial run-list</strong></p> <p>A node’s initial run-list is specified using a JSON file on the host system. When running the chef-client as an executable, use the <code class=\"docutils literal\">-j</code> option to tell the chef-client which JSON file to use. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-client -j /etc/chef/file.json --environment _default</pre> <p>where <code class=\"docutils literal\">file.json</code> is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"resolver\": {\n    \"nameservers\": [ \"10.0.0.1\" ],\n    \"search\":\"int.example.com\"\n  },\n  \"run_list\": [ \"recipe[resolver]\" ]\n}</pre> <p>and where <code class=\"docutils literal\">_default</code> is the name of the environment that is assigned to the node.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">This approach may be used to update <code class=\"docutils literal\">normal</code> attributes, but should never be used to update any other attribute type, as all attributes updated using this option are treated as <code class=\"docutils literal\">normal</code> attributes.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/install_bootstrap.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/install_bootstrap.html</a>\n  </p>\n</div>\n","12-9/files":"<h1 id=\"about-files\">About Files</h1> <p>Files are managed using the following resources:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>Use the <a class=\"reference external\" href=\"https://docs.chef.io/resource_cookbook_file.html\">cookbook_file</a> resource to manage files that are added to nodes based on files that are located in the <code class=\"docutils literal\">/files</code> directory in a cookbook.</li> <li>Use the <a class=\"reference external\" href=\"https://docs.chef.io/resource_file.html\">file</a> resource to manage files directly on a node.</li> <li>Use the <a class=\"reference external\" href=\"https://docs.chef.io/resource_remote_file.html\">remote_file</a> resource to transfer files to nodes from remote locations.</li> <li>Use the <a class=\"reference external\" href=\"https://docs.chef.io/resource_template.html\">template</a> resource to manage files that are added to nodes based on files that are located in the <code class=\"docutils literal\">/templates</code> directory in a cookbook.</li> </ul> </div>\n</blockquote><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/files.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/files.html</a>\n  </p>\n</div>\n","12-9/chef_search":"<h1 id=\"about-search\">About Search</h1> <p>Search indexes allow queries to be made for any type of data that is indexed by the Chef server, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the <code class=\"docutils literal\">search</code> subcommand in knife, the <code class=\"docutils literal\">search</code> method in the Recipe DSL, the search box in the Chef management console, and by using the <code class=\"docutils literal\">/search</code> or <code class=\"docutils literal\">/search/INDEX</code> endpoints in the Chef server API. The search engine is based on Apache Solr and is run from the Chef server.</p> <p>Many of the examples in this section use knife, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the Chef server API.</p>  <h2 id=\"search-indexes\">Search Indexes</h2> <p>A search index is a full-text list of objects that are stored on the Chef server, against which search queries can be made. The following search indexes are built:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Search Index Name</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">client</code></td> <td>API client</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">DATA_BAG_NAME</code></td> <td>A data bag is a global variable that is stored as JSON data and is accessible from a Chef server. The name of the search index is the name of the data bag. For example, if the name of the data bag was “admins” then a corresponding search query might look something like <code class=\"docutils literal\">search(:admins, \"*:*\")</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">environment</code></td> <td>An environment is a way to map an organization’s real-life workflow to what can be configured and managed when using Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">node</code></td> <td>A node is any server or virtual server that is configured to be maintained by a chef-client.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">role</code></td> <td>A role is a way to define certain patterns and processes that exist across nodes in an organization as belonging to a single job function.</td> </tr> </tbody> </table>  <h3 id=\"using-knife\">Using Knife</h3> <p>Use the <code class=\"docutils literal\">knife search</code> subcommand run a search query for information that is indexed on a Chef server.</p> <p><strong>Search by platform ID</strong></p> <p>To search for the IDs of all nodes running on the Amazon EC2 platform, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'ec2:*' -i</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">4 items found\n\nip-0A7CA19F.ec2.internal\n\nip-0A58CF8E.ec2.internal\n\nip-0A58E134.ec2.internal\n\nip-0A7CFFD5.ec2.internal</pre> <p><strong>Search by instance type</strong></p> <p>To search for the instance type (flavor) of all nodes running on the Amazon EC2 platform, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'ec2:*' -a ec2.instance_type</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">4 items found\n\nec2.instance_type:  m1.large\nid:                 ip-0A7CA19F.ec2.internal\n\nec2.instance_type:  m1.large\nid:                 ip-0A58CF8E.ec2.internal\n\nec2.instance_type:  m1.large\nid:                 ip-0A58E134.ec2.internal\n\nec2.instance_type:  m1.large\nid:                 ip-0A7CFFD5.ec2.internal</pre> <p><strong>Search by recipe</strong></p> <p>To search for recipes that are used by a node, use the <code class=\"docutils literal\">recipes</code> attribute to search for the recipe names, enter something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'recipes:recipe_name'</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node '*:*' -a recipes | grep 'recipe_name'</pre> <p><strong>Search by cookbook, then recipe</strong></p> <p>To search for cookbooks on a node, use the <code class=\"docutils literal\">recipes</code> attribute followed by the <code class=\"docutils literal\">cookbook::recipe</code> pattern, escaping both of the <code class=\"docutils literal\">:</code> characters. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'recipes:cookbook_name\\:\\:recipe_name'</pre> <p><strong>Search by node</strong></p> <p>To search for all nodes running Ubuntu, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'platform:ubuntu'</pre> <p><strong>Search by node and environment</strong></p> <p>To search for all nodes running CentOS in the production environment, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'chef_environment:production AND platform:centos'</pre> <p><strong>Search for nested attributes</strong></p> <p>To find a nested attribute, use a pattern similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node &lt;query_to_run&gt; -a &lt;main_attribute&gt;.&lt;nested_attribute&gt;</pre> <p><strong>Search for multiple attributes</strong></p> <p>To build a search query to use more than one attribute, use an underscore (<code class=\"docutils literal\">_</code>) to separate each attribute. For example, the following query will search for all nodes running a specific version of Ruby:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node \"languages_ruby_version:1.9.3\"</pre> <p><strong>Search for nested attributes using a search query</strong></p> <p>To build a search query that can find a nested attribute:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node name:&lt;node_name&gt; -a kernel.machine</pre> <p><strong>Use a test query</strong></p> <p>To test a search query that will be used in a <code class=\"docutils literal\">knife ssh</code> subcommand:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node \"role:web NOT name:web03\"</pre> <p>where the query in the previous example will search all servers that have the <code class=\"docutils literal\">web</code> role, but not on the server named <code class=\"docutils literal\">web03</code>.</p>    <h2 id=\"query-syntax\">Query Syntax</h2> <p>A search query is comprised of two parts: the key and the search pattern. A search query has the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">key:search_pattern</pre> <p>where <code class=\"docutils literal\">key</code> is a field name that is found in the JSON description of an indexable object on the Chef server (a role, node, client, environment, or data bag) and <code class=\"docutils literal\">search_pattern</code> defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both <code class=\"docutils literal\">key</code> and <code class=\"docutils literal\">search_pattern</code> are case-sensitive; <code class=\"docutils literal\">key</code> has limited support for multiple character wildcard matching using an asterisk (“*”) (and as long as it is not the first character).</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Search queries may not contain newlines.</p> </div>   <h2 id=\"filter-search-results\">Filter Search Results</h2> <p>Use <code class=\"docutils literal\">:filter_result</code> as part of a search query to filter the search output based on the pattern specified by a Hash. Only attributes in the Hash will be returned.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Prior to chef-client 12.0, this functionality was available from the <code class=\"docutils literal\">partial_search</code> cookbook and was referred to as “partial search”.</p> </div> <p>The syntax for the <code class=\"docutils literal\">search</code> method that uses <code class=\"docutils literal\">:filter_result</code> is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:index, 'query',\n  :filter_result =&gt; { 'foo' =&gt; [ 'abc' ],\n                      'bar' =&gt; [ '123' ],\n                      'baz' =&gt; [ 'sea', 'power' ]\n                    }\n      ).each do |result|\n  puts result['foo']\n  puts result['bar']\n  puts result['baz']\nend</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">:index</code> is of name of the index on the Chef server against which the search query will run: <code class=\"docutils literal\">:client</code>, <code class=\"docutils literal\">:data_bag_name</code>, <code class=\"docutils literal\">:environment</code>, <code class=\"docutils literal\">:node</code>, and <code class=\"docutils literal\">:role</code>\n</li> <li>\n<code class=\"docutils literal\">'query'</code> is a valid search query against an object on the Chef server</li> <li>\n<code class=\"docutils literal\">:filter_result</code> defines a Hash of values to be returned</li> </ul> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:node, 'role:web',\n  :filter_result =&gt; { 'name' =&gt; [ 'name' ],\n                      'ip' =&gt; [ 'ipaddress' ],\n                      'kernel_version' =&gt; [ 'kernel', 'version' ]\n                    }\n      ).each do |result|\n  puts result['name']\n  puts result['ip']\n  puts result['kernel_version']\nend</pre>   <h2 id=\"keys\">Keys</h2> <p>A field name/description pair is available in the JSON object. Use the field name when searching for this information in the JSON object. Any field that exists in any JSON description for any role, node, chef-client, environment, or data bag can be searched.</p>  <h3 id=\"nested-fields\">Nested Fields</h3> <p>A nested field appears deeper in the JSON data structure. For example, information about a network interface might be several layers deep: <code class=\"docutils literal\">node[:network][:interfaces][:en1]</code>. When nested fields are present in a JSON structure, the chef-client will extract those nested fields to the top-level, flattening them into compound fields that support wildcard search patterns.</p> <p>By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor.</p> <p>Consider the following snippet of JSON data:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\"network\":\n  [\n  //snipped...\n    \"interfaces\",\n      {\"en1\": {\n        \"number\": \"1\",\n        \"flags\": [\n          \"UP\",\n          \"BROADCAST\",\n          \"SMART\",\n          \"RUNNING\",\n          \"SIMPLEX\",\n          \"MULTICAST\"\n        ],\n        \"addresses\": {\n          \"fe80::fa1e:dfff:fed8:63a2\": {\n            \"scope\": \"Link\",\n            \"prefixlen\": \"64\",\n            \"family\": \"inet6\"\n          },\n          \"f8:1e:df:d8:63:a2\": {\n            \"family\": \"lladdr\"\n          },\n          \"192.168.0.195\": {\n            \"netmask\": \"255.255.255.0\",\n            \"broadcast\": \"192.168.0.255\",\n            \"family\": \"inet\"\n          }\n        },\n        \"mtu\": \"1500\",\n        \"media\": {\n          \"supported\": {\n            \"autoselect\": {\n              \"options\": [\n\n              ]\n            }\n          },\n          \"selected\": {\n            \"autoselect\": {\n              \"options\": [\n\n              ]\n            }\n          }\n        },\n        \"type\": \"en\",\n        \"status\": \"active\",\n        \"encapsulation\": \"Ethernet\"\n      },\n  //snipped...</pre> <p>Before this data is indexed on the Chef server, the nested fields are extracted into the top level, similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">\"broadcast\" =&gt; \"192.168.0.255\",\n\"flags\"     =&gt; [\"UP\", \"BROADCAST\", \"SMART\", \"RUNNING\", \"SIMPLEX\", \"MULTICAST\"]\n\"mtu\"       =&gt; \"1500\"</pre> <p>which allows searches like the following to find data that is present in this node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"broadcast:192.168.0.*\"</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"mtu:1500\"</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"flags:UP\"</pre> <p>This data is also flattened into various compound fields, which follow the same pattern as the JSON hierarchy and use underscores (<code class=\"docutils literal\">_</code>) to separate the levels of data, similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\"># ...snip...\n\"network_interfaces_en1_addresses_192.168.0.195_broadcast\" =&gt; \"192.168.0.255\",\n\"network_interfaces_en1_addresses_fe80::fa1e:tldr_family\"  =&gt; \"inet6\",\n\"network_interfaces_en1_addresses\"                         =&gt; [\"fe80::fa1e:tldr\",\"f8:1e:df:tldr\",\"192.168.0.195\"]\n# ...snip...</pre> <p>which allows searches like the following to find data that is present in this node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"network_interfaces_en1_addresses:192.168.0.195\"</pre> <p>This flattened data structure also supports using wildcard compound fields, which allow searches to omit levels within the JSON data structure that are not important to the search query. In the following example, an asterisk (<code class=\"docutils literal\">*</code>) is used to show where the wildcard can exist when searching for a nested field:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">\"network_interfaces_*_flags\"     =&gt; [\"UP\", \"BROADCAST\", \"SMART\", \"RUNNING\", \"SIMPLEX\", \"MULTICAST\"]\n\"network_interfaces_*_addresses\" =&gt; [\"fe80::fa1e:dfff:fed8:63a2\", \"192.168.0.195\", \"f8:1e:df:d8:63:a2\"]\n\"network_interfaces_en0_media_*\" =&gt; [\"autoselect\", \"none\", \"1000baseT\", \"10baseT/UTP\", \"100baseTX\"]\n\"network_interfaces_en1_*\"       =&gt; [\"1\", \"UP\", \"BROADCAST\", \"SMART\", \"RUNNING\", \"SIMPLEX\", \"MULTICAST\",\n                                     \"fe80::fa1e:dfff:fed8:63a2\", \"f8:1e:df:d8:63:a2\", \"192.168.0.195\",\n                                     \"1500\", \"supported\", \"selected\", \"en\", \"active\", \"Ethernet\"]</pre> <p>For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">network_interfaces__flags</pre> <p>This query will search within the <code class=\"docutils literal\">flags</code> node, within the JSON structure, for each of <code class=\"docutils literal\">UP</code>, <code class=\"docutils literal\">BROADCAST</code>, <code class=\"docutils literal\">SMART</code>, <code class=\"docutils literal\">RUNNING</code>, <code class=\"docutils literal\">SIMPLEX</code>, and <code class=\"docutils literal\">MULTICAST</code>.</p>   <h3 id=\"examples\">Examples</h3> <p>To see the available keys for a node, enter the following (for a node named <code class=\"docutils literal\">staging</code>):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node show staging -Fj | less</pre> <p>to return a full JSON description of the node and to view the available keys with which any search query can be based.</p> <p>To use a question mark (<code class=\"docutils literal\">?</code>) to replace a single character in a wildcard search, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'platfor?:ubuntu'</pre> <p>To use an asterisk (<code class=\"docutils literal\">*</code>) to replace zero (or more) characters in a wildcard search, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'platfo*:ubuntu'</pre> <p>To find all IP address that are on the same network, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'network_interfaces__addresses:192.168*'</pre> <p>where <code class=\"docutils literal\">192.168*</code> is the network address for which the search will be run.</p> <p>To use a range search to find IP addresses within a subnet, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'network_interfaces_X_addresses:[192.168.0.* TO 192.168.127.*]'</pre> <p>where <code class=\"docutils literal\">192.168.0.* TO 192.168.127.*</code> defines the subnet range.</p>    <h2 id=\"patterns\">Patterns</h2> <p>A search pattern is a way to fine-tune search results by returning anything that matches some type of incomplete search query. There are four types of search patterns that can be used when searching the search indexes on the Chef server: exact, wildcard, range, and fuzzy.</p>  <h3 id=\"exact-matching\">Exact Matching</h3> <p>An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by Ruby or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (‘ ‘) and a search pattern with double quotes (” ”).</p> <p>To search in a specific data bag for a specific data bag item, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search admins 'id:charlie'</pre> <p>where <code class=\"docutils literal\">admins</code> is the name of the data bag and <code class=\"docutils literal\">charlie</code> is the name of the data bag item. Something similar to the following will be returned:</p> <pre class=\"highlight-bash\" data-language=\"bash\">1 items found\n_rev:       1-39ff4099f2510f477b4c26bef81f75b9\nchef_type:  data_bag_item\ncomment:    Charlie the Unicorn\ndata_bag:   admins\ngid:        ops\nid:         charlie\nshell:      /bin/zsh\nuid:        1005</pre> <p>To search in a specific data bag using a string to find any matching data bag item, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search admins 'comment:\"Charlie the Unicorn\"'</pre> <p>where <code class=\"docutils literal\">admins</code> is the name of the data bag and <code class=\"docutils literal\">Charlie the Unicorn</code> is the string that will be used during the search. Something similar to the following will be returned:</p> <pre class=\"highlight-bash\" data-language=\"bash\">1 items found\n_rev:       1-39ff4099f2510f477b4c26bef81f75b9\nchef_type:  data_bag_item\ncomment:    Charlie the Unicorn\ndata_bag:   admins\ngid:        ops\nid:         charlie\nshell:      /bin/zsh\nuid:        1005</pre>   <h3 id=\"wildcard-matching\">Wildcard Matching</h3> <p>A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:</p> <ul class=\"simple\"> <li>A question mark (<code class=\"docutils literal\">?</code>) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)</li> <li>An asterisk (<code class=\"docutils literal\">*</code>) can be used to replace any number of characters (including zero)</li> </ul> <p>To search for any node that contains the specified key, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'foo:*'</pre> <p>where <code class=\"docutils literal\">foo</code> is the name of the node.</p> <p>To search for a node using a partial name, enter one of the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'name:app*'</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'name:app1*.example.com'</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'name:app?.example.com'</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'name:app1.example.???'</pre> <p>to return <code class=\"docutils literal\">app1.example.com</code> (and any other node that matches any of the string searches above).</p>   <h3 id=\"range-matching\">Range Matching</h3> <p>A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (“[ ]”) to denote inclusive boundaries and curly braces (“{ }”) to denote exclusive boundaries and with the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">boundary TO boundary</pre> <p>where <code class=\"docutils literal\">TO</code> is required (and must be capitalized).</p> <p>A data bag named <code class=\"docutils literal\">sample</code> contains four data bag items: <code class=\"docutils literal\">abc</code>, <code class=\"docutils literal\">bar</code>, <code class=\"docutils literal\">baz</code>, and <code class=\"docutils literal\">quz</code>. All of the items in-between <code class=\"docutils literal\">bar</code> and <code class=\"docutils literal\">foo</code>, inclusive, can be searched for using an inclusive search pattern.</p> <p>To search using an inclusive range, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search sample \"id:[bar TO foo]\"</pre> <p>where square brackets (<code class=\"docutils literal\">[ ]</code>) are used to define the range.</p> <p>A data bag named <code class=\"docutils literal\">sample</code> contains four data bag items: <code class=\"docutils literal\">abc</code>, <code class=\"docutils literal\">bar</code>, <code class=\"docutils literal\">baz</code>, and <code class=\"docutils literal\">quz</code>. All of the items that are exclusive to <code class=\"docutils literal\">bar</code> and <code class=\"docutils literal\">foo</code> can be searched for using an exclusive search pattern.</p> <p>To search using an exclusive range, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search sample \"id:{bar TO foo}\"</pre> <p>where curly braces (<code class=\"docutils literal\">{ }</code>) are used to define the range.</p>   <h3 id=\"fuzzy-matching\">Fuzzy Matching</h3> <p>A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">\"search_query\"~edit_distance</pre> <p>where <code class=\"docutils literal\">search_query</code> is the string that will be used during the search and <code class=\"docutils literal\">edit_distance</code> is the proximity. A tilde (“~”) is used to separate the edit distance from the search query.</p> <p>To use a fuzzy search pattern enter something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search client \"name:boo~\"</pre> <p>where <code class=\"docutils literal\">boo~</code> defines the fuzzy search pattern. This will return something similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"total\": 1,\n  \"start\": 0,\n  \"rows\": [\n    {\n      \"public_key\": \"too long didn't read\",\n      \"name\": \"foo\",\n      \"_rev\": \"1-f11a58043906e33d39a686e9b58cd92f\",\n      \"json_class\": \"Chef::ApiClient\",\n      \"admin\": false,\n      \"chef_type\": \"client\"\n    }\n  ]\n}</pre>    <h2 id=\"operators\">Operators</h2> <p>An operator can be used to ensure that certain terms are included in the results, are excluded from the results, or are not included even when other aspects of the query match. Searches can use the following operators:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operator</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">AND</code></td> <td>Use to find a match when both terms exist.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">OR</code></td> <td>Use to find a match if either term exists.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">NOT</code></td> <td>Use to exclude the term after <code class=\"docutils literal\">NOT</code> from the search results.</td> </tr> </tbody> </table> <p>Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>Using <code class=\"docutils literal\">AND NOT</code> together may trigger an error. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ERROR: knife search failed: invalid search query:\n'datacenter%3A123%20AND%20NOT%20hostname%3Adev-%20AND%20NOT%20hostanem%3Asyslog-'\nParse error at offset: 38 Reason: Expected one of \\ at line 1, column 42 (byte 42) after AND</pre> <p>Use <code class=\"docutils literal\">-</code> instead of <code class=\"docutils literal\">NOT</code>. For example:</p> <pre class=\"last highlight-bash\" data-language=\"bash\">$ knife search sample \"id:foo AND -id:bar\"</pre> </div>  <h3 id=\"and\">AND</h3> <p>To join queries using the <code class=\"docutils literal\">AND</code> boolean operator, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search sample \"id:b* AND animal:dog\"</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">{\n  \"total\": 1,\n  \"start\": 0,\n  \"rows\": [\n    {\n      \"comment\": \"an item named baz\",\n      \"id\": \"baz\",\n      \"animal\": \"dog\"\n    }\n  ]\n}</pre> <p>Or, to find all of the computers running on the Microsoft Windows platform that are associated with a role named <code class=\"docutils literal\">jenkins</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'platform:windows AND roles:jenkins'</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">2 items found\n\nNode Name:   windows-server-2008r2.domain.com\nEnvironment: _default\nFQDN:        windows-server-2008r2\nIP:          0000::0000:0000:0000:0000\nRun List:    role[jenkins-windows]\nRoles:       jenkins-windows, jenkins\nRecipes:     jenkins-client::windows, jenkins::node_windows\nPlatform:    windows 6.1.7601\nTags:\n\nNode Name:   123-windows-2008r2-amd64-builder\nEnvironment: _default\nFQDN:        ABC-1234567890AB\nIP:          123.45.6.78\nRun List:    role[123-windows-2008r2-amd64-builder]\nRoles:       123-windows-2008r2-amd64-builder, jenkins\nRecipes:     jenkins::node_windows, git_windows\nPlatform:    windows 6.1.7601\nTags:</pre>   <h3 id=\"not\">NOT</h3> <p>To negate search results using the <code class=\"docutils literal\">NOT</code> boolean operator, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search sample \"(NOT id:foo)\"</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">{\n  \"total\": 4,\n  \"start\": 0,\n  \"rows\": [\n    {\n      \"comment\": \"an item named bar\",\n      \"id\": \"bar\",\n      \"animal\": \"cat\"\n    },\n    {\n      \"comment\": \"an item named baz\",\n      \"id\": \"baz\"\n      \"animal\": \"dog\"\n    },\n    {\n      \"comment\": \"an item named abc\",\n      \"id\": \"abc\",\n      \"animal\": \"unicorn\"\n    },\n    {\n      \"comment\": \"an item named qux\",\n      \"id\": \"qux\",\n      \"animal\", \"penguin\"\n    }\n  ]\n}</pre>   <h3 id=\"or\">OR</h3> <p>To join queries using the <code class=\"docutils literal\">OR</code> boolean operator, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search sample \"id:foo OR id:abc\"</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">{\n  \"total\": 2,\n  \"start\": 0,\n  \"rows\": [\n    {\n      \"comment\": \"an item named foo\",\n      \"id\": \"foo\",\n      \"animal\": \"pony\"\n    },\n    {\n      \"comment\": \"an item named abc\",\n      \"id\": \"abc\",\n      \"animal\": \"unicorn\"\n    }\n  ]\n}</pre>    <h2 id=\"special-characters\">Special Characters</h2> <p>A special character can be used to fine-tune a search query and to increase the accuracy of the search results. The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (<code class=\"docutils literal\">\\</code>):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">+  -  &amp;&amp;  | |  !  ( )  { }  [ ]  ^  \"  ~  *  ?  :  \\</pre> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">\\(1\\+1\\)\\:2</pre>   <h2 id=\"targets\">Targets</h2> <p>A search target is any object that has been indexed on the Chef server, including roles (and run-lists), nodes, environments, data bags, and any API client.</p>  <h3 id=\"roles-in-run-lists\">Roles in Run-lists</h3> <p>A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">roles</code> field is updated each time the chef-client is run; changes to a run-list will not affect <code class=\"docutils literal\">roles</code> until the next time the chef-client is run on the node.</p> </div> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Role Location</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Top-level</td> <td>\n<p class=\"first\">To find a node with a role in the top-level of its run-list, search within the <code class=\"docutils literal\">role</code> field (and escaping any special characters with the slash symbol) using the following syntax:</p> <pre class=\"highlight-python\" data-language=\"python\">role:ROLE_NAME</pre> <p class=\"last\">where <code class=\"docutils literal\">role</code> (singlular!) indicates the top-level run-list.</p> </td> </tr> <tr class=\"row-odd\">\n<td>Expanded</td> <td>\n<p class=\"first\">To find a node with a role in an expanded run-list, search within the <code class=\"docutils literal\">roles</code> field (and escaping any special characters with the slash symbol) using the following syntax:</p> <pre class=\"highlight-python\" data-language=\"python\">roles:ROLE_NAME</pre> <p class=\"last\">where <code class=\"docutils literal\">roles</code> (plural!) indicates the expanded run-list.</p> </td> </tr> </tbody> </table> <p>To search a top-level run-list for a role named <code class=\"docutils literal\">load_balancer</code> use the <code class=\"docutils literal\">knife search</code> subcommand from the command line or the <code class=\"docutils literal\">search</code> method in a recipe. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node role:load_balancer</pre> <p>and from within a recipe:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:node, 'role:load_balancer')</pre> <p>To search an expanded run-list for all nodes with the role <code class=\"docutils literal\">load_balancer</code> use the <code class=\"docutils literal\">knife search</code> subcommand from the command line or the <code class=\"docutils literal\">search</code> method in a recipe. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node roles:load_balancer</pre> <p>and from within a recipe:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:node, 'roles:load_balancer')</pre>   <h3 id=\"nodes\">Nodes</h3> <p>A node can be searched from a recipe by using the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:node, \"key:attribute\")</pre> <p>A wildcard can be used to replace characters within the search query.</p> <p>Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the Chef server. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">recipes</code> field is updated each time the chef-client is run; changes to a run-list will not affect <code class=\"docutils literal\">recipes</code> until the next time the chef-client is run on the node.</p> </div> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Node Location</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>In a specified recipe</td> <td>\n<p class=\"first\">To find a node with a specified recipe in the run-list, search within the <code class=\"docutils literal\">run_list</code> field (and escaping any special characters with the slash symbol) using the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:node, 'run_list:recipe\\[foo\\:\\:bar\\]')</pre> <p>where <code class=\"docutils literal\">recipe</code> (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the Ruby alternate quoting syntax:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">search(:node, %Q{run_list:\"recipe[#{the_recipe}]\"} )</pre> </td> </tr> <tr class=\"row-odd\">\n<td>In an expanded run-list</td> <td>\n<p class=\"first\">To find a node with a recipe in an expanded run-list, search within the <code class=\"docutils literal\">recipes</code> field (and escaping any special characters with the slash symbol) using the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">recipes:RECIPE_NAME</pre> <p class=\"last\">where <code class=\"docutils literal\">recipes</code> (plural!) indicates to search within an expanded run-list.</p> </td> </tr> </tbody> </table> <p>If you just want to use each result of the search and don’t care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># Print every node matching the search pattern\nsearch(:node, \"*:*\").each do |matching_node|\n  puts matching_node.to_s\nend</pre>   <h3 id=\"api-clients\">API Clients</h3> <p>An API client is any machine that has permission to use the Chef server API to communicate with the Chef server. An API client is typically a node (on which the chef-client runs) or a workstation (on which knife runs), but can also be any other machine configured to use the Chef server API.</p> <p>Sometimes when a role isn’t fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">username: \"mysql\"\npassword: \"MoveAlong\"\nhost:     \"10.40.64.202\"\nport:     \"3306\"</pre> <p>where <code class=\"docutils literal\">host</code> is the private IP address of the database server. Use the following knife query to view information about the node:</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife search node \"name:name_of_database_server\" --long</pre> <p>To access these settings as part of a recipe that is run on the web server, use code similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">db_server = search(:node, \"name:name_of_database_server\")\nprivate_ip = \"#{db_server[0][:rackspace][:private_ip]}\"\nputs private_ip</pre> <p>where the “[0]” is the 0 (zero) index for the <code class=\"docutils literal\">db_server</code> identifier. A single document is returned because the node is being searched on its unique name. The identifier <code class=\"docutils literal\">private_ip</code> will now have the value of the private IP address of the database server (<code class=\"docutils literal\">10.40.64.202</code>) and can then be used in templates as a variable, among other possible uses.</p>   <h3 id=\"environments\">Environments</h3> <p>An environment is a way to map an organization’s real-life workflow to what can be configured and managed when using Chef server. Every organization begins with a single environment called the <code class=\"docutils literal\">_default</code> environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization’s patterns and workflow. For example, creating <code class=\"docutils literal\">production</code>, <code class=\"docutils literal\">staging</code>, <code class=\"docutils literal\">testing</code>, and <code class=\"docutils literal\">development</code> environments. Generally, an environment is also associated with one (or more) cookbook versions.</p> <p>When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use knife to search for all of the servers running CentOS in an environment named “QA”, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife search node \"chef_environment:QA AND platform:centos\"</pre> <p>Or, to include the same search in a recipe, use a code block similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">qa_nodes = search(:node,\"chef_environment:QA\")\nqa_nodes.each do |qa_node|\n    # Do useful work specific to qa nodes only\nend</pre>   <h3 id=\"data-bags\">Data Bags</h3> <p>A data bag is a global variable that is stored as JSON data and is accessible from a Chef server. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search.</p> <p>Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use knife to search within a data bag named “admin_data” across all items, except for the “admin_users” item, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search admin_data \"(NOT id:admin_users)\"</pre> <p>Or, to include the same search query in a recipe, use a code block similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:admin_data, \"NOT id:admin_users\")</pre> <p>It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what “everything” is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named “admins”. For example, to find every administrator:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:admins, \"*:*\")</pre> <p>Or to search for an administrator named “charlie”:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:admins, \"id:charlie\")</pre> <p>Or to search for an administrator with a group identifier of “ops”:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:admins, \"gid:ops\")</pre> <p>Or to search for an administrator whose name begins with the letter “c”:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:admins, \"id:c*\")</pre> <p>Data bag items that are returned by a search query can be used as if they were a hash. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">charlie = search(:admins, \"id:charlie\").first\n# =&gt; variable 'charlie' is set to the charlie data bag item\ncharlie[\"gid\"]\n# =&gt; \"ops\"\ncharlie[\"shell\"]\n# =&gt; \"/bin/zsh\"</pre> <p>The following recipe can be used to create a user for each administrator by loading all of the items from the “admins” data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">admins = data_bag('admins')\n\nadmins.each do |login|\n  admin = data_bag_item('admins', login)\n  home = \"/home/#{login}\"\n\n  user(login) do\n    uid       admin['uid']\n    gid       admin['gid']\n    shell     admin['shell']\n    comment   admin['comment']\n    home      home\n    supports  :manage_home =&gt; true\n  end\n\nend</pre> <p>And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">admins = []\n\nsearch(:admins, \"*:*\").each do |admin|\n  login = admin[\"id\"]\n\n  admins &lt;&lt; login\n\n  home = \"/home/#{login}\"\n\n  user(login) do\n    uid       admin['uid']\n    gid       admin['gid']\n    shell     admin['shell']\n    comment   admin['comment']\n\n    home      home\n    supports  :manage_home =&gt; true\n  end\n\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/chef_search.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/chef_search.html</a>\n  </p>\n</div>\n","12-9/cookbooks":"<h1 id=\"about-cookbooks\">About Cookbooks</h1> <p>A cookbook is the fundamental unit of configuration and policy distribution. A cookbook defines a scenario and contains everything that is required to support that scenario:</p> <ul class=\"simple\"> <li>Recipes that specify the resources to use and the order in which they are to be applied</li> <li>Attribute values</li> <li>File distributions</li> <li>Templates</li> <li>Extensions to Chef, such as libraries, definitions, and custom resources</li> </ul> <p>The chef-client uses Ruby as its reference language for creating cookbooks and defining recipes, with an extended DSL for specific resources. The chef-client provides a reasonable set of resources, enough to support many of the most common infrastructure automation scenarios; however, this DSL can also be extended when additional resources and capabilities are required.</p>  <h2 id=\"components\">Components</h2> <p>Some important components of cookbooks include:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"attributes\">Attributes</a></td> <td>An attribute can be defined in a cookbook (or a recipe) and then used to override the default settings on a node. When a cookbook is loaded during a chef-client run, these attributes are compared to the attributes that are already present on the node. Attributes that are defined in attribute files are first loaded according to cookbook order. For each cookbook, attributes in the <code class=\"docutils literal\">default.rb</code> file are loaded first, and then additional attribute files (if present) are loaded in lexical sort order. When the cookbook attributes take precedence over the default attributes, the chef-client will apply those new settings and values during the chef-client run on the node.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"recipes\">Recipes</a></td> <td>\n<p class=\"first\">A recipe is the most fundamental configuration element within the organization. A recipe:</p> <ul class=\"last simple\"> <li>Is authored using Ruby, which is a programming language designed to read and behave in a predictable manner</li> <li>Is mostly a collection of resources, defined using patterns (resource names, attribute-value pairs, and actions); helper code is added around this using Ruby, when needed</li> <li>Must define everything that is required to configure part of a system</li> <li>Must be stored in a cookbook</li> <li>May be included in a recipe</li> <li>May use the results of a search query and read the contents of a data bag (including an encrypted data bag)</li> <li>May have a dependency on one (or more) recipes</li> <li>May tag a node to facilitate the creation of arbitrary groupings</li> <li>Must be added to a run-list before it can be used by the chef-client</li> <li>Is always executed in the same order as listed in a run-list</li> </ul> </td> </tr> </tbody> </table> <p>The chef-client will run a recipe only when asked. When the chef-client runs the same recipe more than once, the results will be the same system state each time. When a recipe is run against a system, but nothing has changed on either the system or in the recipe, the chef-client won’t change anything.</p> <p>In addition to attributes and recipes, the following items are also part of cookbooks:</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Components</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"definitions\">Definitions</a></td> <td>A definition is used to create new resources by stringing together one (or more) existing resources.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"files\">Files</a></td> <td>A file distribution is a specific type of resource that tells a cookbook how to distribute files, including by node, by platform, or by file version.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"libraries\">Libraries</a></td> <td>A library allows the use of arbitrary Ruby code in a cookbook, either as a way to extend the chef-client language or to implement a new class.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"custom_resources\">Custom Resources</a></td> <td>A custom resource is an abstract approach for defining a set of actions and (for each action) a set of properties and validation parameters.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cookbook_repo\">Metadata</a></td> <td>A metadata file is used to ensure that each cookbook is correctly deployed to each node.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource\">Resources and Providers</a></td> <td>A resource is a package, a service, a group of users, and so on. A resource tells the chef-client which provider to use during a chef-client run for various tasks like installing packages, running Ruby code, or accessing directories and file systems. The resource is generic: “install program A” while the provider knows what to do with that process on Debian and Ubuntu and Microsoft Windows. A provider defines the steps that are required to bring that piece of the system into the desired state. The chef-client includes default providers that cover all of the most common scenarios. For the full list of resources that are built-in to the chef-client, see <a class=\"reference external\" href=\"https://docs.chef.io/resources.html\">https://docs.chef.io/resources.html</a>.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"templates\">Templates</a></td> <td>A template is a file written in markup language that uses Ruby statements to solve complex configuration scenarios.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"cookbook_versions\">Cookbook Versions</a></td> <td>\n<p class=\"first\">A cookbook version represents a set of functionality that is different from the cookbook on which it is based. A version may exist for many reasons, such as ensuring the correct use of a third-party component, updating a bug fix, or adding an improvement. A cookbook version is defined using syntax and operators, may be associated with environments, cookbook metadata, and/or run-lists, and may be frozen (to prevent unwanted updates from being made).</p> <p class=\"last\">A cookbook version is maintained just like a cookbook, with regard to source control, uploading it to the Chef server, and how the chef-client applies that cookbook when configuring nodes.</p> </td> </tr> </tbody> </table>   <h2 id=\"community-cookbooks\">Community Cookbooks</h2> <p>Chef maintains a large collection of cookbooks. In addition, there are thousands of cookbooks created and maintained by the community:</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Components</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">Cookbooks Maintained by Chef</a></td> <td>Chef maintains a collection of cookbooks that are widely used by the community.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference external\" href=\"https://supermarket.chef.io/cookbooks\">Cookbooks Maintained by the Community</a></td> <td>The community has authored thousands of cookbooks, ranging from niche cookbooks that are used by only a few organizations to cookbooks that are some of the most popular and are used by nearly everyone.</td> </tr> </tbody> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/cookbooks.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/cookbooks.html</a>\n  </p>\n</div>\n","12-9/definitions":"<h1 id=\"about-definitions\">About Definitions</h1> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Starting with chef-client 12.5, it is recommended to <a class=\"reference internal\" href=\"custom_resources\">build custom resources</a> instead of definitions. While the use of definitions is not deprecated—all existing definitions will continue to work—it is recommended to also migrate existing definitions to the new custom resource patterns. This topic introduces definitions as they once were (and still can be, if desired), but deprecates all but one example of using them in favor of showing how to migrate an existing definition to the new custom resource pattern.</p> </div> <p>A definition behaves like a compile-time macro that is reusable across recipes. A definition is typically created by wrapping arbitrary code around resources that are declared as if they were in a recipe. A definition is then used in one (or more) actual recipes as if the definition were a resource.</p> <p>Though a definition looks like a resource, and at first glance seems like it could be used interchangeably, some important differences exist. A definition:</p> <ul class=\"simple\"> <li>Is not a resource or a custom resource</li> <li>Is processed while the resource collection is compiled (whereas resources are processed while a node is converged)</li> <li>Does not support common resource properties, such as <code class=\"docutils literal\">notifies</code>, <code class=\"docutils literal\">subscribes</code>, <code class=\"docutils literal\">only_if</code>, and <code class=\"docutils literal\">not_if</code>\n</li> <li>Is defined from within the <code class=\"docutils literal\">/definitions</code> directory of a cookbook</li> <li>Does not support why-run mode</li> </ul>  <h2 id=\"syntax-pre-12-5\">Syntax (pre-12.5)</h2> <p>A definition has four components:</p> <ul class=\"simple\"> <li>A resource name</li> <li>Zero or more arguments that define parameters their default values; if a default value is not specified, it is assumed to be <code class=\"docutils literal\">nil</code>\n</li> <li>A hash that can be used within a definition’s body to provide access to parameters and their values</li> <li>The body of the definition</li> </ul> <p>The basic syntax of a definition is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">define :resource_name do\n  body\nend</pre> <p>More commonly, the usage incorporates arguments to the definition:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">define :resource_name, :parameter =&gt; :argument, :parameter =&gt; :argument do\n  body (likely referencing the params hash)\nend</pre> <p>The following simplistic example shows a definition with no arguments (a parameterless macro in the truest sense):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">define :prime_myfile do\n  file '/etc/myfile' do\n    content 'some content'\n  end\nend</pre> <p>An example showing the use of parameters, with a parameter named <code class=\"docutils literal\">port</code> that defaults to <code class=\"docutils literal\">4000</code> rendered into a <strong>template</strong> resource, would look like:</p> <blockquote> <div>\n<pre class=\"highlight-ruby\" data-language=\"ruby\">define :prime_myfile, port: 4000 do\n  template '/etc/myfile' do\n    source 'myfile.erb'\n    variables({\n      port: params[:port],\n    })\n  end\nend</pre> </div>\n</blockquote> <p>Or the following definition, which looks like a resource when used in a recipe, but also contains resources—<strong>directory</strong> and <strong>file</strong>—that are repeated, but with slightly different parameters:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">define :host_porter, :port =&gt; 4000, :hostname =&gt; nil do\n  params[:hostname] ||= params[:name]\n\n  directory '/etc/#{params[:hostname]}' do\n    recursive true\n  end\n\n  file '/etc/#{params[:hostname]}/#{params[:port]}' do\n    content 'some content'\n  end\nend</pre> <p>which is then used in a recipe like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">host_porter node['hostname'] do\n port 4000\nend\n\nhost_porter 'www1' do\n  port 4001\nend</pre>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use cookbook definitions.</p>  <h3 id=\"many-recipes-one-definition\">Many Recipes, One Definition</h3> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">With the improved custom resource pattern available starting with chef-client 12.5, the need to use definitions is greatly minimized. In every case when considering to use a definition, first evaluate whether that defintion is better represented as a custom resource.</p> </div> <p>Data can be passed to a definition from more than one recipe. Use a definition to create a compile-time macro that can be referenced by resources during the converge phase. For example, when both <code class=\"docutils literal\">/etc/aliases</code> and <code class=\"docutils literal\">/etc/sudoers</code> require updates from multiple recipes during a single chef-client run.</p> <p>A definition that reopens resources would look something like:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># example provided by community member \"Mithrandir\". Thank you!\n\ndefine :email_alias, :recipients =&gt; [] do\n  execute 'newaliases' do\n    action :nothing\n  end\n\n  t = nil\n  begin\n    t = resources(:template =&gt; '/etc/aliases')\n  rescue Chef::Exceptions::ResourceNotFound\n    t = template '/etc/aliases' do\n      source 'aliases.erb'\n      cookbook 'aliases'\n      variables({:aliases =&gt; {} })\n      notifies :run, 'execute[newaliases]'\n    end\n  end\n\n  if not t.variables[:aliases].has_key?(params[:name])\n    t.variables[:aliases][params[:name]] = []\n  end\n  t.variables[:aliases][params[:name]] &lt;&lt; [ params[:recipients] ]\nend</pre>    <h2 id=\"definition-vs-resource\">Definition vs. Resource</h2> <p>The following examples show:</p> <ol class=\"arabic simple\"> <li>A definition</li> <li>The same definition rewritten as a custom resource</li> <li>The same definition, rewritten again to use a <a class=\"reference internal\" href=\"resource_common\">common resource property</a>\n</li> </ol>  <h3 id=\"as-a-definition\">As a Definition</h3> <p>The following definition processes unique hostnames and ports, passed on as parameters:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">define :host_porter, :port =&gt; 4000, :hostname =&gt; nil do\n  params[:hostname] ||= params[:name]\n\n  directory '/etc/#{params[:hostname]}' do\n    recursive true\n  end\n\n  file '/etc/#{params[:hostname]}/#{params[:port]}' do\n    content 'some content'\n  end\nend</pre>   <h3 id=\"as-a-resource\">As a Resource</h3> <p>The definition is improved by rewriting it as a custom resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :port, Integer, default: 4000\nproperty :hostname, String, name_property: true\n\naction :create do\n\n  directory \"/etc/#{hostname}\" do\n    recursive true\n  end\n\n  file \"/etc/#{hostname}/#{port}\" do\n    content 'some content'\n  end\n\nend</pre> <p>Once built, the custom resource may be used in a recipe just like the any of the resources that are built into Chef. The resource gets its name from the cookbook and from the file name in the <code class=\"docutils literal\">/resources</code> directory, with an underscore (<code class=\"docutils literal\">_</code>) separating them. For example, a cookbook named <code class=\"docutils literal\">host</code> with a custom resource in the <code class=\"docutils literal\">/resources</code> directory named <code class=\"docutils literal\">porter.rb</code>. Use it in a recipe like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">host_porter node['hostname'] do\n  port 4000\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">host_porter 'www1' do\n  port 4001\nend</pre>   <h3 id=\"use-common-properties\">Use Common Properties</h3> <p>Unlike definitions, custom resources are able to use <a class=\"reference internal\" href=\"resource_common\">common resource properties</a>. For example, <code class=\"docutils literal\">only_if</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">host_porter 'www1' do\n  port 4001\n  only_if '{ node['hostname'] == 'foo.bar.com' }'\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/definitions.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/definitions.html</a>\n  </p>\n</div>\n","12-9/libraries":"<h1 id=\"about-libraries\">About Libraries</h1> <p>A library allows arbitrary Ruby code to be included in a cookbook, either as a way of extending the classes that are built-in to the chef-client—<code class=\"docutils literal\">Chef::Recipe</code>, for example—or for implementing entirely new functionality, similar to a mixin in Ruby. A library file is a Ruby file that is located within a cookbook’s <code class=\"docutils literal\">/libraries</code> directory. Because a library is built using Ruby, anything that can be done with Ruby can be done in a library file.</p> <p>Use a library to:</p> <ul class=\"simple\"> <li>Define a custom resource</li> <li>Create a custom class or module; for example, create a subclass of <code class=\"docutils literal\">Chef::Recipe</code>\n</li> <li>Access attributes that are stored in files</li> <li>Connect to a database</li> <li>Talk to an LDAP provider</li> <li>Do anything that can be done with Ruby</li> </ul>  <h2 id=\"syntax\">Syntax</h2> <p>The syntax for a library varies because library files are created using Ruby and are designed to handle custom situations. See the Examples section below for some ideas. Also, the <a class=\"reference external\" href=\"https://github.com/chef-cookbooks/database\">https://github.com/chef-cookbooks/database</a> and <a class=\"reference external\" href=\"https://github.com/chef-cookbooks/chef-splunk\">https://github.com/chef-cookbooks/chef-splunk</a> cookbooks contain more detailed and complex examples.</p>   <h2 id=\"chef-provider\">Chef::Provider</h2> <p>Cookbooks that contain custom resources in the <code class=\"docutils literal\">/libraries</code> directory of a cookbook should:</p> <ul class=\"simple\"> <li>Be inspected for instances of a) the <code class=\"docutils literal\">Chef::Provider</code> base class, and then b) for the presence of any core resources from the chef-client</li> <li>Be updated to use the <code class=\"docutils literal\">LWRPBase</code> base class</li> </ul> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">class Chef\n  class Provider\n    class LvmLogicalVolume &lt; Chef::Provider::LWRPBase\n      include Chef::Mixin::ShellOut\n\n      ...\n      if new_resource.mount_point\n        if new_resource.mount_point.is_a?(String)\n          mount_spec = { :location =&gt; new_resource.mount_point }\n        else\n          mount_spec = new_resource.mount_point\n        end\n\n        dir_resource = directory mount_spec[:location] do\n          mode 0755\n          owner 'root'\n          group 'root'\n          recursive true\n          action :nothing\n          not_if { Pathname.new(mount_spec[:location]).mountpoint? }\n        end\n        dir_resource.run_action(:create)\n        updates &lt;&lt; dir_resource.updated?\n\n        mount_resource = mount mount_spec[:location] do\n          options mount_spec[:options]\n          dump mount_spec[:dump]\n          pass mount_spec[:pass]\n          device device_name\n          fstype fs_type\n          action :nothing\n        end\n        mount_resource.run_action(:mount)\n        mount_resource.run_action(:enable)\n        updates &lt;&lt; mount_resource.updated?\n      end\n      new_resource.updated_by_last_action(updates.any?)\n    end</pre>   <h2 id=\"dynamic-resolution\">Dynamic Resolution</h2> <p>Resources and providers are resolved dynamically and can handle multiple <code class=\"docutils literal\">provides</code> lines for a specific platform. When multiple <code class=\"docutils literal\">provides</code> lines exist, such as <code class=\"docutils literal\">Homebrew</code> and <code class=\"docutils literal\">MacPorts</code> packages for the Mac OS X platform, then one is selected based on resource priority mapping performed by the chef-client during the chef-client run.</p> <p>Use the following helpers in a library file to get and/or set resource and/or provider priority mapping before any recipes are compiled:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">Chef.get_provider_priority_array(resource_name)</code></dt> <dd>Get the priority mapping for a provider.</dd> <dt><code class=\"docutils literal\">Chef.get_resource_priority_array(resource_name)</code></dt> <dd>Get the priority mapping for a resource.</dd> <dt><code class=\"docutils literal\">Chef.set_provider_priority_array(resource_name, Array&lt;Class&gt;, *filter)</code></dt> <dd>Set the priority mapping for a provider.</dd> <dt><code class=\"docutils literal\">Chef.set_resource_priority_array(resource_name, Array&lt;Class&gt;, *filter)</code></dt> <dd>Set the priority mapping for a resource.</dd> </dl> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef.set_resource_priority_array(:package, [ Chef::Resource::MacportsPackage ], os: 'darwin')</pre>   <h2 id=\"template-helper-modules\">Template Helper Modules</h2> <p>A template helper module can be defined in a library. This is useful when extensions need to be reused across recipes or to make it easier to manage code that would otherwise be defined inline on a per-recipe basis.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/path/to/template.erb' do\n  helpers(MyHelperModule)\nend</pre>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use cookbook libraries.</p>  <h3 id=\"library-resources\">Library Resources</h3> <p>A resource can also be defined in <code class=\"docutils literal\">/libraries</code> directory. Some advantages of this approach include more control over how resources behave in the provider, the ability to control the name of the resource directly, and more options available for writing tests. The resources and providers for a library resource, similar to lightweight resources (defined in the <code class=\"docutils literal\">/resources</code> and <code class=\"docutils literal\">/providers</code> folders) typically have a separate file for the resource and the provider, but this is not requirement. The main disadvantage of this approach is that resources defined in the <code class=\"docutils literal\">/libraries</code> directory may not use the Recipe DSL.</p> <p>A resource that is defined in the <code class=\"docutils literal\">/libraries</code> directory may leverage core chef-client resources by using the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef::Resource::name_of_resource.new('name', run_context)</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef::Resource::name_of_resource.new(:action)</pre> <p>For example, the following definition leverages the <strong>directory</strong> resource to create a new directory, and then evaluate that within the context of the custom resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">def env_dir\n  return @env_dir unless @env_dir.nil?\n  @env_dir = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'env'), run_context)\n  @env_dir.owner(new_resource.owner)\n  @env_dir.group(new_resource.group)\n  @env_dir.mode(00755)\n  @env_dir\nend</pre> <p>The following definition uses the <strong>template</strong> resource for Debian-specific cases, but then the <strong>link</strong> resource for everything else:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">def lsb_init\n  return @lsb_init unless @lsb_init.nil?\n  initfile = ::File.join(new_resource.lsb_init_dir, new_resource.service_name)\n  if node['platform'] == 'debian'\n    ::File.unlink(initfile) if ::File.symlink?(initfile)\n    @lsb_init = Chef::Resource::Template.new(initfile, run_context)\n    @lsb_init.owner('root')\n    @lsb_init.group('root')\n    @lsb_init.mode(00755)\n    @lsb_init.cookbook('runit')\n    @lsb_init.source('init.d.erb')\n    @lsb_init.variables(:name =&gt; new_resource.service_name)\n  else\n    @lsb_init = Chef::Resource::Link.new(initfile, run_context)\n    @lsb_init.to(new_resource.sv_bin)\n  end\n  @lsb_init\nend</pre> <p>Otherwise, a resource defined in the <code class=\"docutils literal\">/libraries</code> directory is done using Ruby, is added to recipes as if it were any other resource, and is processed by the chef-client in the same way as any other resource. See the <code class=\"docutils literal\">/libraries</code> directory in the <a class=\"reference external\" href=\"https://github.com/chef-cookbooks/database\">database</a> and <a class=\"reference external\" href=\"https://github.com/hw-cookbooks/runit\">runit</a> cookbooks for complete examples of how to use this approach when defining a resource.</p>   <h3 id=\"create-a-namespace\">Create a Namespace</h3> <p>A database can contain a list of virtual hosts that are used by customers. A custom namespace could be created that looks something like:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># Sample provided by \"Arjuna (fujin)\". Thank you!\n\nrequire 'sequel'\n\nclass Chef::Recipe::ISP\n  # We can call this with ISP.vhosts\n  def self.vhosts\n    v = []\n    @db = Sequel.mysql(\n      'web',\n      :user =&gt; 'example',\n      :password =&gt; 'example_pw',\n      :host =&gt; 'dbserver.example.com'\n    )\n    @db[\n      \"SELECT virtualhost.domainname,\n           usertable.userid,\n           usertable.uid,\n           usertable.gid,\n           usertable.homedir\n       FROM usertable, virtualhost\n       WHERE usertable.userid = virtualhost.user_name\"\n      ].all do |query|\n      vhost_data = {\n        :servername   =&gt; query[:domainname],\n        :documentroot =&gt; query[:homedir],\n        :uid          =&gt; query[:uid],\n        :gid          =&gt; query[:gid],\n      }\n      v.push(vhost_data)\n    end\n    Chef::Log.debug('About to provision #{v.length} vhosts')\n    v\n  end\nend</pre> <p>After the custom namespace is created, it could then be used in a recipe, like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ISP.vhosts.each do |vhost|\n  directory vhost[:documentroot] do\n    owner 'vhost[:uid]'\n    group 'vhost[:gid]'\n    mode '0755'\n    action :create\n  end\n\n  directory '#{vhost[:documentroot]}/#{vhost[:domainname]}' do\n    owner 'vhost[:uid]'\n    group 'vhost[:gid]'\n    mode '0755'\n    action :create\n  end\nend</pre>   <h3 id=\"extend-a-recipe\">Extend a Recipe</h3> <p>A customer record is stored in an attribute file that looks like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">mycompany_customers({\n  :bob =&gt; {\n    :homedir =&gt; '/home/bob',\n    :webdir =&gt; '/home/bob/web'\n  }\n}\n)</pre> <p>A simple recipe may contain something like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory node[:mycompany_customers][:bob][:webdir] do\n  owner 'bob'\n  group 'bob'\n  action :create\nend</pre> <p>Or a less verbose version of the same simple recipe:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory customer(:bob)[:webdir] do\n  owner 'bob'\n  group 'bob'\n  action :create\nend</pre> <p>A simple library could be created that extends <code class=\"docutils literal\">Chef::Recipe::</code>, like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">class Chef\n  class Recipe\n    # A shortcut to a customer\n    def customer(name)\n      node[:mycompany_customers][name]\n    end\n  end\nend</pre>   <h3 id=\"loop-over-a-record\">Loop Over a Record</h3> <p>A customer record is stored in an attribute file that looks like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">mycompany_customers({\n  :bob =&gt; {\n    :homedir =&gt; '/home/bob',\n    :webdir =&gt; '/home/bob/web'\n  }\n}\n)</pre> <p>If there are many customer records in an environment, a simple recipe can be used to loop over every customer, like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">all_customers do |name, info|\n  directory info[:webdir] do\n    owner 'name'\n    group 'name'\n    action :create\n  end\nend</pre> <p>A simple library could be created that extends <code class=\"docutils literal\">Chef::Recipe::</code>, like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">class Chef\n  class Recipe\n    def all_customers(&amp;block)\n      node[:mycompany_customers].each do |name, info|\n        block.call(name, info)\n      end\n    end\n  end\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/libraries.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/libraries.html</a>\n  </p>\n</div>\n","12-9/recipes":"<h1 id=\"about-recipes\">About Recipes</h1> <p>A recipe is the most fundamental configuration element within the organization. A recipe:</p> <ul class=\"simple\"> <li>Is authored using Ruby, which is a programming language designed to read and behave in a predictable manner</li> <li>Is mostly a collection of resources, defined using patterns (resource names, attribute-value pairs, and actions); helper code is added around this using Ruby, when needed</li> <li>Must define everything that is required to configure part of a system</li> <li>Must be stored in a cookbook</li> <li>May be included in a recipe</li> <li>May use the results of a search query and read the contents of a data bag (including an encrypted data bag)</li> <li>May have a dependency on one (or more) recipes</li> <li>May tag a node to facilitate the creation of arbitrary groupings</li> <li>Must be added to a run-list before it can be used by the chef-client</li> <li>Is always executed in the same order as listed in a run-list</li> </ul>  <h2 id=\"recipe-attributes\">Recipe Attributes</h2> <p>An attribute can be defined in a cookbook (or a recipe) and then used to override the default settings on a node. When a cookbook is loaded during a chef-client run, these attributes are compared to the attributes that are already present on the node. Attributes that are defined in attribute files are first loaded according to cookbook order. For each cookbook, attributes in the <code class=\"docutils literal\">default.rb</code> file are loaded first, and then additional attribute files (if present) are loaded in lexical sort order. When the cookbook attributes take precedence over the default attributes, the chef-client will apply those new settings and values during the chef-client run on the node.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Attributes can be configured in cookbooks (attribute files and recipes), roles, and environments. In addition, Ohai collects attribute data about each node at the start of the chef-client run. See <a class=\"reference external\" href=\"https://docs.chef.io/attributes.html\">https://docs.chef.io/attributes.html</a> for more information about how all of these attributes fit together.</p> </div>  <h3 id=\"attribute-types\">Attribute Types</h3> <p>The chef-client uses six types of attributes to determine the value that is applied to a node during the chef-client run. In addition, the chef-client sources attribute values from up to five locations. The combination of attribute types and sources allows for up to 15 different competing values to be available to the chef-client during the chef-client run:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Attribute Type</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">default</code></td> <td>A <code class=\"docutils literal\">default</code> attribute is automatically reset at the start of every chef-client run and has the lowest attribute precedence. Use <code class=\"docutils literal\">default</code> attributes as often as possible in cookbooks.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">force_default</code></td> <td>Use the <code class=\"docutils literal\">force_default</code> attribute to ensure that an attribute defined in a cookbook (by an attribute file or by a recipe) takes precedence over a <code class=\"docutils literal\">default</code> attribute set by a role or an environment.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">normal</code></td> <td>A <code class=\"docutils literal\">normal</code> attribute is a setting that persists in the node object. A <code class=\"docutils literal\">normal</code> attribute has a higher attribute precedence than a <code class=\"docutils literal\">default</code> attribute.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">override</code></td> <td>An <code class=\"docutils literal\">override</code> attribute is automatically reset at the start of every chef-client run and has a higher attribute precedence than <code class=\"docutils literal\">default</code>, <code class=\"docutils literal\">force_default</code>, and <code class=\"docutils literal\">normal</code> attributes. An <code class=\"docutils literal\">override</code> attribute is most often specified in a recipe, but can be specified in an attribute file, for a role, and/or for an environment. A cookbook should be authored so that it uses <code class=\"docutils literal\">override</code> attributes only when required.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">force_override</code></td> <td>Use the <code class=\"docutils literal\">force_override</code> attribute to ensure that an attribute defined in a cookbook (by an attribute file or by a recipe) takes precedence over an <code class=\"docutils literal\">override</code> attribute set by a role or an environment.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">automatic</code></td> <td>An <code class=\"docutils literal\">automatic</code> attribute contains data that is identified by Ohai at the beginning of every chef-client run. An <code class=\"docutils literal\">automatic</code> attribute cannot be modified and always has the highest attribute precedence.</td> </tr> </tbody> </table>   <h3 id=\"attribute-persistence\">Attribute Persistence</h3> <p>At the beginning of a chef-client run, all attributes are reset. The chef-client rebuilds them using automatic attributes collected by Ohai at the beginning of the chef-client run and then using default and override attributes that are specified in cookbooks or by roles and environments. Normal attributes are never reset. All attributes are then merged and applied to the node according to attribute precedence. At the conclusion of the chef-client run, the attributes that were applied to the node are saved to the Chef server as part of the node object.</p>   <h3 id=\"attribute-precedence\">Attribute Precedence</h3> <p>Attributes are always applied by the chef-client in the following order:</p> <ol class=\"arabic simple\"> <li>A <code class=\"docutils literal\">default</code> attribute located in a cookbook attribute file</li> <li>A <code class=\"docutils literal\">default</code> attribute located in a recipe</li> <li>A <code class=\"docutils literal\">default</code> attribute located in an environment</li> <li>A <code class=\"docutils literal\">default</code> attribute located in role</li> <li>A <code class=\"docutils literal\">force_default</code> attribute located in a cookbook attribute file</li> <li>A <code class=\"docutils literal\">force_default</code> attribute located in a recipe</li> <li>A <code class=\"docutils literal\">normal</code> attribute located in a cookbook attribute file</li> <li>A <code class=\"docutils literal\">normal</code> attribute located in a recipe</li> <li>An <code class=\"docutils literal\">override</code> attribute located in a cookbook attribute file</li> <li>An <code class=\"docutils literal\">override</code> attribute located in a recipe</li> <li>An <code class=\"docutils literal\">override</code> attribute located in a role</li> <li>An <code class=\"docutils literal\">override</code> attribute located in an environment</li> <li>A <code class=\"docutils literal\">force_override</code> attribute located in a cookbook attribute file</li> <li>A <code class=\"docutils literal\">force_override</code> attribute located in a recipe</li> <li>An <code class=\"docutils literal\">automatic</code> attribute identified by Ohai at the start of the chef-client run</li> </ol> <p>where the last attribute in the list is the one that is applied to the node.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The attribute precedence order for roles and environments is reversed for <code class=\"docutils literal\">default</code> and <code class=\"docutils literal\">override</code> attributes. The precedence order for <code class=\"docutils literal\">default</code> attributes is environment, then role. The precedence order for <code class=\"docutils literal\">override</code> attributes is role, then environment. Applying environment <code class=\"docutils literal\">override</code> attributes after role <code class=\"docutils literal\">override</code> attributes allows the same role to be used across multiple environments, yet ensuring that values can be set that are specific to each environment (when required). For example, the role for an application server may exist in all environments, yet one environment may use a database server that is different from other environments.</p> </div> <p>Attribute precedence, viewed from the same perspective as the overview diagram, where the numbers in the diagram match the order of attribute precedence:</p> <img alt=\"_images/overview_chef_attributes_precedence.png\" src=\"https://docs.chef.io/release/12-9/_images/overview_chef_attributes_precedence.png\"> <p>Attribute precedence, when viewed as a table:</p> <img alt=\"_images/overview_chef_attributes_table.png\" src=\"https://docs.chef.io/release/12-9/_images/overview_chef_attributes_table.png\">  <h4 id=\"whitelist-attributes\">Whitelist Attributes</h4> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">When these settings are used, any attribute not defined in a whitelist will not be saved. Each attribute type is whitelisted independently of the other attribute types. For example, if <code class=\"docutils literal\">automatic_attribute_whitelist</code> defines attributes to be saved, but <code class=\"docutils literal\">normal_attribute_whitelist</code>, <code class=\"docutils literal\">default_attribute_whitelist</code>, and <code class=\"docutils literal\">override_attribute_whitelist</code> are not defined, then all normal, default and override attributes are saved, along with only the specified automatic attributes.</p> </div> <p>Attributes that should be saved by a node may be whitelisted in the client.rb file. The whitelist is a Hash of keys that specify each attribute to be saved.</p> <p>Attribute are whitelisted by attribute type, with each attribute type being whitelisted independently. Each attribute type—<code class=\"docutils literal\">automatic</code>, <code class=\"docutils literal\">default</code>, <code class=\"docutils literal\">normal</code>, and <code class=\"docutils literal\">override</code>—may define whitelists by using the following settings in the client.rb file:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">automatic_attribute_whitelist</code></td> <td>A Hash that whitelists <code class=\"docutils literal\">automatic</code> attributes, preventing non-whitelisted attributes from being saved. For example: <code class=\"docutils literal\">['network/interfaces/eth0']</code>. Default value: all attributes are saved. If the Hash is empty, no attributes are saved.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">default_attribute_whitelist</code></td> <td>A Hash that whitelists <code class=\"docutils literal\">default</code> attributes, preventing non-whitelisted attributes from being saved. For example: <code class=\"docutils literal\">['filesystem/dev/disk0s2/size']</code>. Default value: all attributes are saved. If the Hash is empty, no attributes are saved.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">normal_attribute_whitelist</code></td> <td>A Hash that whitelists <code class=\"docutils literal\">normal</code> attributes, preventing non-whitelisted attributes from being saved. For example: <code class=\"docutils literal\">['filesystem/dev/disk0s2/size']</code>. Default value: all attributes are saved. If the Hash is empty, no attributes are saved.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">override_attribute_whitelist</code></td> <td>A Hash that whitelists <code class=\"docutils literal\">override</code> attributes, preventing non-whitelisted attributes from being saved. For example: <code class=\"docutils literal\">['map - autohome/size']</code>. Default value: all attributes are saved. If the Hash is empty, no attributes are saved.</td> </tr> </tbody> </table> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">It is recommended that only <code class=\"docutils literal\">automatic_attribute_whitelist</code> be used to whitelist attributes. This is primarily because automatic attributes generate the most data, but also that normal, default, and override attributes are typically much more important attributes and are more likely to cause issues if they are whitelisted incorrectly.</p> </div> <p>For example, normal attribute data similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"filesystem\" =&gt; {\n    \"/dev/disk0s2\" =&gt; {\n      \"size\" =&gt; \"10mb\"\n    },\n    \"map - autohome\" =&gt; {\n      \"size\" =&gt; \"10mb\"\n    }\n  },\n  \"network\" =&gt; {\n    \"interfaces\" =&gt; {\n      \"eth0\" =&gt; {...},\n      \"eth1\" =&gt; {...},\n    }\n  }\n}</pre> <p>To whitelist the <code class=\"docutils literal\">network</code> attributes and prevent the other attributes from being saved, update the client.rb file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">normal_attribute_whitelist ['network/interfaces/']</pre> <p>When a whitelist is defined, any attribute of that type that is not specified in that attribute whitelist <strong>will not</strong> be saved. So based on the previous whitelist for normal attributes, the <code class=\"docutils literal\">filesystem</code> and <code class=\"docutils literal\">map - autohome</code> attributes will not be saved, but the <code class=\"docutils literal\">network</code> attributes will.</p> <p>Leave the value empty to prevent all attributes of that attribute type from being saved:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">normal_attribute_whitelist []</pre> <p>For attributes that contain slashes (<code class=\"docutils literal\">/</code>) within the attribute value, such as the <code class=\"docutils literal\">filesystem</code> attribute <code class=\"docutils literal\">'/dev/diskos2'</code>, use an array. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">automatic_attribute_whitelist [['filesystem','/dev/diskos2']]</pre>     <h2 id=\"file-methods\">File Methods</h2> <p>Use the following methods within the attributes file for a cookbook or within a recipe. These methods correspond to the attribute type of the same name:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">override</code></li> <li><code class=\"docutils literal\">default</code></li> <li>\n<code class=\"docutils literal\">normal</code> (or <code class=\"docutils literal\">set</code>, where <code class=\"docutils literal\">set</code> is an alias for <code class=\"docutils literal\">normal</code>)</li> <li><code class=\"docutils literal\">_unless</code></li> <li><code class=\"docutils literal\">attribute?</code></li> </ul>   <h2 id=\"environment-variables\">Environment Variables</h2> <p>In UNIX, a process environment is a set of key-value pairs made available to a process. Programs expect their environment to contain information required for the program to run. The details of how these key-value pairs are accessed depends on the API of the language being used.</p> <p>If processes is started by using the <strong>execute</strong> or <strong>script</strong> resources (or any of the resources based on those two resources, such as <strong>bash</strong>), use the <code class=\"docutils literal\">environment</code> attribute to alter the environment that will be passed to the process.</p> <pre class=\"highlight-bash\" data-language=\"bash\">bash 'env_test' do\n  code &lt;&lt;-EOF\n  echo $FOO\nEOF\n  environment { 'FOO' =&gt; 'bar' }\nend</pre> <p>The only environment being altered is the one being passed to the child process that is started by the <strong>bash</strong> resource. This will not affect the environment of the chef-client or any child processes.</p>   <h2 id=\"work-with-recipes\">Work with Recipes</h2> <p>The following sections show approaches to working with recipes.</p>  <h3 id=\"use-data-bags\">Use Data Bags</h3> <p>A data bag is a global variable that is stored as JSON data and is accessible from a Chef server. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search.</p> <p>The contents of a data bag can be loaded into a recipe. For example, a data bag named <code class=\"docutils literal\">apps</code> and a data bag item named <code class=\"docutils literal\">my_app</code>:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"id\": \"my_app\",\n  \"repository\": \"git://github.com/company/my_app.git\"\n}</pre> <p>can be accessed in a recipe, like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">my_bag = data_bag_item('apps', 'my_app')</pre> <p>The data bag item’s keys and values can be accessed with a Hash:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">my_bag['repository'] #=&gt; 'git://github.com/company/my_app.git'</pre>  <h4 id=\"secret-keys\">Secret Keys</h4> <p>Encrypting a data bag item requires a secret key. A secret key can be created in any number of ways. For example, OpenSSL can be used to generate a random number, which can then be used as the secret key:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ openssl rand -base64 512 | tr -d '\\r\\n' &gt; encrypted_data_bag_secret</pre> <p>where <code class=\"docutils literal\">encrypted_data_bag_secret</code> is the name of the file which will contain the secret key. For example, to create a secret key named “my_secret_key”:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ openssl rand -base64 512 | tr -d '\\r\\n' &gt; my_secret_key</pre> <p>The <code class=\"docutils literal\">tr</code> command eliminates any trailing line feeds. Doing so avoids key corruption when transferring the file between platforms with different line endings.</p>   <h4 id=\"store-keys-on-nodes\">Store Keys on Nodes</h4> <p>An encryption key can also be stored in an alternate file on the nodes that need it and specify the path location to the file inside an attribute; however, <code class=\"docutils literal\">EncryptedDataBagItem.load</code> expects to see the actual secret as the third argument, rather than a path to the secret file. In this case, you can use <code class=\"docutils literal\">EncryptedDataBagItem.load_secret</code> to slurp the secret file contents and then pass them:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># inside your attribute file:\n# default[:mysql][:secretpath] = 'C:\\\\chef\\\\any_secret_filename'\n#\n# inside your recipe:\n# look for secret in file pointed to by mysql attribute :secretpath\nmysql_secret = Chef::EncryptedDataBagItem.load_secret('#{node[:mysql][:secretpath]}')\nmysql_creds = Chef::EncryptedDataBagItem.load('passwords', 'mysql', mysql_secret)\nmysql_creds['pass'] # will be decrypted</pre>    <h3 id=\"assign-dependencies\">Assign Dependencies</h3> <p>If a cookbook has a dependency on a recipe that is located in another cookbook, that dependency must be declared in the metadata.rb file for that cookbook using the <code class=\"docutils literal\">depends</code> keyword.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Declaring cookbook dependencies is not required with chef-solo.</p> </div> <p>For example, if the following recipe is included in a cookbook named <code class=\"docutils literal\">my_app</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">include_recipe 'apache2::mod_ssl'</pre> <p>Then the metadata.rb file for that cookbook would have:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">depends 'apache2'</pre>   <h3 id=\"include-recipes\">Include Recipes</h3> <p>A recipe can include one (or more) recipes located in external cookbooks by using the <code class=\"docutils literal\">include_recipe</code> method. When a recipe is included, the resources found in that recipe will be inserted (in the same exact order) at the point where the <code class=\"docutils literal\">include_recipe</code> keyword is located.</p> <p>The syntax for including a recipe is like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">include_recipe 'recipe'</pre> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">include_recipe 'apache2::mod_ssl'</pre> <p>If the <code class=\"docutils literal\">include_recipe</code> method is used more than once to include a recipe, only the first inclusion is processed and any subsequent inclusions are ignored.</p>   <h3 id=\"reload-attributes\">Reload Attributes</h3> <p>Attributes sometimes depend on actions taken from within recipes, so it may be necessary to reload a given attribute from within a recipe. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ruby_block 'some_code' do\n  block do\n    node.from_file(run_context.resolve_attribute('COOKBOOK_NAME', 'ATTR_FILE'))\n  end\n  action :nothing\nend</pre>   <h3 id=\"accessor-methods\">Accessor Methods</h3> <p>Attribute accessor methods are automatically created and the method invocation can be used interchangeably with the keys. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default.apache.dir          = '/etc/apache2'\ndefault.apache.listen_ports = [ '80','443' ]</pre> <p>This is a matter of style and preference for how attributes are reloaded from recipes, and may be seen when retrieving the value of an attribute.</p>   <h3 id=\"use-ruby\">Use Ruby</h3> <p>Anything that can be done with Ruby can be used within a recipe, such as expressions (if, unless, etc.), case statements, loop statements, arrays, hashes, and variables. In Ruby, the conditionals <code class=\"docutils literal\">nil</code> and <code class=\"docutils literal\">false</code> are false; every other conditional is <code class=\"docutils literal\">true</code>.</p>  <h4 id=\"assign-a-value\">Assign a value</h4> <p>A variable uses an equals sign (<code class=\"docutils literal\">=</code>) to assign a value.</p> <p>To assign a value to a variable:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package_name = \"apache2\"</pre>   <h4 id=\"use-case-statement\">Use Case Statement</h4> <p>A case statement can be used to compare an expression, and then execute the code that matches.</p> <p>To select a package name based on platform:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package \"apache2\" do\n  case node[:platform]\n  when \"centos\",\"redhat\",\"fedora\",\"suse\"\n    package_name \"httpd\"\n  when \"debian\",\"ubuntu\"\n    package_name \"apache2\"\n  when \"arch\"\n    package_name \"apache\"\n  end\n  action :install\nend</pre>   <h4 id=\"check-conditions\">Check Conditions</h4> <p>An if expression can be used to check for conditions (true or false).</p> <p>To check for condition only for Debian and Ubuntu platforms:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if platform?(\"debian\", \"ubuntu\")\n  # do something if node['platform'] is debian or ubuntu\nelse\n  # do other stuff\nend</pre>   <h4 id=\"execute-conditions\">Execute Conditions</h4> <p>An unless expression can be used to execute code when a condition returns a false value (effectively, an unless expression is the opposite of an if statement).</p> <p>To use an expression to execute when a condition returns a false value:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">unless node[:platform_version] == \"5.0\"\n  # do stuff on everything but 5.0\nend</pre>   <h4 id=\"loop-over-array\">Loop over Array</h4> <p>A loop statement is used to execute a block of code one (or more) times. A loop statement is created when <code class=\"docutils literal\">.each</code> is added to an expression that defines an array or a hash. An array is an integer-indexed collection of objects. Each element in an array can be associated with and referred to by an index.</p> <p>To loop over an array of package names by platform:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">[\"apache2\", \"apache2-mpm\"].each do |p|\n  package p\nend</pre>   <h4 id=\"loop-over-hash\">Loop over Hash</h4> <p>A hash is a collection of key-value pairs. Indexing for a hash is done using arbitrary keys of any object (as opposed to the indexing done by an array). The syntax for a hash is: <code class=\"docutils literal\">key =&gt; \"value\"</code>.</p> <p>To loop over a hash of gem package names:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">{\"fog\" =&gt; \"0.6.0\", \"highline\" =&gt; \"1.6.0\"}.each do |g,v|\n  gem_package g do\n    version v\n  end\nend</pre>    <h3 id=\"apply-to-run-lists\">Apply to Run-lists</h3> <p>A recipe must be assigned to a run-list using the appropriate name, as defined by the cookbook directory and namespace. For example, a cookbook directory has the following structure:</p> <pre class=\"highlight-python\" data-language=\"python\">cookbooks/\n  apache2/\n    recipes/\n      default.rb\n      mod_ssl.rb</pre> <p>There are two recipes: a default recipe (that has the same name as the cookbook) and a recipe named <code class=\"docutils literal\">mod_ssl</code>. The syntax that applies a recipe to a run-list is similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">{\n  'run_list': [\n  'recipe[cookbook_name::default_recipe]',\n  'recipe[cookbook_name::recipe_name]'\n  ]\n}</pre> <p>where <code class=\"docutils literal\">::default_recipe</code> is implied (and does not need to be specified). On a node, these recipes can be assigned to a node’s run-list similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">{\n  'run_list': [\n  'recipe[apache2]',\n  'recipe[apache2::mod_ssl]'\n  ]\n}</pre>  <h4 id=\"chef-server-title\">Chef Server</h4> <p>Use knife to add a recipe to the run-list for a node. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node run list add NODENAME \"recipe[apache2]\"</pre> <p>More than one recipe can be added:</p> <pre class=\"highlight-bash\" data-language=\"bash\">% knife node run list add NODENAME \"recipe[apache2],recipe[mysql],role[ssh]\"</pre> <p>which creates a run-list similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">run_list:\n   recipe[apache2]\n   recipe[mysql]\n   role[ssh]</pre>   <h4 id=\"chef-solo\">chef-solo</h4> <p>Use a JSON file to pass run-list details to chef-solo as long as the cookbook in which the recipe is located is available to the system on which chef-solo is running. For example, a file named <code class=\"docutils literal\">dna.json</code> contains the following details:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"run_list\": [\"recipe[apache2]\"]\n}</pre> <p>To add the run-list to the node, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-solo -j /etc/chef/dna.json</pre>    <h3 id=\"use-search-results\">Use Search Results</h3> <p>Search indexes allow queries to be made for any type of data that is indexed by the Chef server, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the <code class=\"docutils literal\">search</code> subcommand in knife, the <code class=\"docutils literal\">search</code> method in the Recipe DSL, the search box in the Chef management console, and by using the <code class=\"docutils literal\">/search</code> or <code class=\"docutils literal\">/search/INDEX</code> endpoints in the Chef server API. The search engine is based on Apache Solr and is run from the Chef server.</p> <p>The results of a search query can be loaded into a recipe. For example, a very simple search query (in a recipe) might look like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:node, 'attribute:value')</pre> <p>A search query can be assigned to variables and then used elsewhere in a recipe. For example, to search for all nodes that have a role assignment named <code class=\"docutils literal\">webserver</code>, and then render a template which includes those role assignments:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">webservers = search(:node, 'role:webserver')\n\ntemplate '/tmp/list_of_webservers' do\n  source 'list_of_webservers.erb'\n  variables(:webservers =&gt; webservers)\nend</pre>   <h3 id=\"use-tags\">Use Tags</h3> <p>A tag is a custom description that is applied to a node. A tag, once applied, can be helpful when managing nodes using knife or when building recipes by providing alternate methods of grouping similar types of information.</p> <p>Tags can be added and removed. Machines can be checked to see if they already have a specific tag. To use tags in your recipe simply add the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">tag('mytag')</pre> <p>To test if a machine is tagged, add the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">tagged?('mytag')</pre> <p>to return <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. <code class=\"docutils literal\">tagged?</code> can also use an array as an argument.</p> <p>To remove a tag:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">untag('mytag')</pre> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">tag('machine')\n\nif tagged?('machine')\n   Chef::Log.info('Hey I'm #{node[:tags]}')\nend\n\nuntag('machine')\n\nif not tagged?('machine')\n   Chef::Log.info('I has no tagz')\nend</pre> <p>Will return something like this:</p> <pre class=\"highlight-bash\" data-language=\"bash\">[Thu, 22 Jul 2010 18:01:45 +0000] INFO: Hey I'm machine\n[Thu, 22 Jul 2010 18:01:45 +0000] INFO: I has no tagz</pre>   <h3 id=\"end-chef-client-title-run\">End chef-client Run</h3> <p>Sometimes it may be necessary to stop processing a recipe and/or stop processing the entire chef-client run. There are a few ways to do this:</p> <ul class=\"simple\"> <li>Use the <code class=\"docutils literal\">return</code> keyword to stop processing a recipe based on a condition, but continue processing the chef-client run</li> <li>Use the <code class=\"docutils literal\">raise</code> keyword to stop a chef-client run by triggering an unhandled exception</li> <li>Use a <code class=\"docutils literal\">rescue</code> block in Ruby code</li> <li>Use an <a class=\"reference external\" href=\"https://docs.chef.io/handlers.html\">exception handler</a>\n</li> <li>Use <code class=\"docutils literal\">Chef::Application.fatal!</code> to log a fatal message to the logger and <code class=\"docutils literal\">STDERR</code>, and then stop the chef-client run</li> </ul> <p>The following sections show various approaches to ending a chef-client run.</p>  <h4 id=\"return-keyword\">return Keyword</h4> <p>The <code class=\"docutils literal\">return</code> keyword can be used to stop processing a recipe based on a condition, but continue processing the chef-client run. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file '/tmp/name_of_file' do\n  action :create\nend\n\nreturn if node['platform'] == 'windows'\n\npackage 'name_of_package' do\n  action :install\nend</pre> <p>where <code class=\"docutils literal\">node['platform'] == 'windows'</code> is the condition set on the <code class=\"docutils literal\">return</code> keyword. When the condition is met, stop processing the recipe. This approach is useful when there is no need to continue processing, such as when a package cannot be installed. In this situation, it’s OK for a recipe to stop processing.</p>   <h4 id=\"fail-raise-keywords\">fail/raise Keywords</h4> <p>In certain situations it may be useful to stop a chef-client run entirely by using an unhandled exception. The <code class=\"docutils literal\">raise</code> and <code class=\"docutils literal\">fail</code> keywords can be used to stop a chef-client run in both the compile and execute phases.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Both <code class=\"docutils literal\">raise</code> and <code class=\"docutils literal\">fail</code> behave the same way when triggering unhandled exceptions and may be used interchangeably.</p> </div> <p>Use these keywords in a recipe—but outside of any resource blocks—to trigger an unhandled exception during the compile phase. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file '/tmp/name_of_file' do\n  action :create\nend\n\nraise \"message\" if node['platform'] == 'windows'\n\npackage 'name_of_package' do\n  action :install\nend</pre> <p>where <code class=\"docutils literal\">node['platform'] == 'windows'</code> is the condition that will trigger the unhandled exception.</p> <p>Use these keywords in the <strong>ruby_block</strong> resource to trigger an unhandled exception during the execute phase. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ruby_block \"name\" do\n  block do\n    # Ruby code with a condition, e.g. if ::File.exist?(::File.join(path, \"/tmp\"))\n    fail \"message\"  # e.g. \"Ordering issue with file path, expected foo\"\n  end\nend</pre> <p>Use these keywords in a class. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">class CustomError &lt; StandardError; end</pre> <p>and then later on:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">def custom_error\n  raise CustomError, \"error message\"\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">def custom_error\n  fail CustomError, \"error message\"\nend</pre>   <h4 id=\"rescue-blocks\">Rescue Blocks</h4> <p>Since recipes are written in Ruby, they can be written to attempt to handle error conditions using the <code class=\"docutils literal\">rescue</code> block.</p> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">begin\n  dater = data_bag_item(:basket, \"flowers\")\n  rescue Net::HTTPServerException\n    # maybe some retry code here?\n  raise \"message_to_be_raised\"\nend</pre> <p>where <code class=\"docutils literal\">data_bag_item</code> makes an HTTP request to the Chef server to get a data bag item named <code class=\"docutils literal\">flowers</code>. If there is a problem, the request will return a <code class=\"docutils literal\">Net::HTTPServerException</code>. The <code class=\"docutils literal\">rescue</code> block can be used to try to retry or otherwise handle the situation. If the <code class=\"docutils literal\">rescue</code> block is unable to handle the situation, then the <code class=\"docutils literal\">raise</code> keyword is used to specify the message to be raised.</p>   <h4 id=\"fatal-messages\">Fatal Messages</h4> <p>A chef-client run is stopped after a fatal message is sent to the logger and <code class=\"docutils literal\">STDERR</code>. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef::Application.fatal!(\"log_message\", error_code) if condition</pre> <p>where <code class=\"docutils literal\">condition</code> defines when a <code class=\"docutils literal\">\"log_message\"</code> and an <code class=\"docutils literal\">error_code</code> are sent to the logger and <code class=\"docutils literal\">STDERR</code>, after which the chef-client will exit. The <code class=\"docutils literal\">error_code</code> itself is arbitrary and is assigned by the individual who writes the code that triggers the fatal message. Assigning an error code is optional, but they can be useful during log file analysis.</p> <p>This approach is used within the chef-client itself to help ensure consistent messaging around certain behaviors. That said, this approach is not recommended for use within recipes and cookbooks and should only be used when the other approaches are not applicable.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This approach should be used carefully when the chef-client is run as a daemonized service. Some services—such as a runit service—should restart, but others—such as an init.d services—likely will not.</p> </div>    <h3 id=\"node-run-state\">node.run_state</h3> <p>Use <code class=\"docutils literal\">node.run_state</code> to stash transient data during a chef-client run. This data may be passed between resources, and then evaluated during the execution phase. <code class=\"docutils literal\">run_state</code> is an empty Hash that is always discarded at the end of the chef-client run.</p> <p>For example, the following recipe will install the Apache web server, randomly choose PHP or Perl as the scripting language, and then install that scripting language:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'httpd' do\n  action :install\nend\n\nruby_block 'randomly_choose_language' do\n  block do\n    if Random.rand &gt; 0.5\n      node.run_state['scripting_language'] = 'php'\n    else\n      node.run_state['scripting_language'] = 'perl'\n    end\n  end\nend\n\npackage 'scripting_language' do\n  package_name lazy { node.run_state['scripting_language'] }\n  action :install\nend</pre> <p>where:</p> <ul class=\"simple\"> <li>The <strong>ruby_block</strong> resource declares a <code class=\"docutils literal\">block</code> of Ruby code that is run during the execution phase of the chef-client run</li> <li>The <code class=\"docutils literal\">if</code> statement randomly chooses PHP or Perl, saving the choice to <code class=\"docutils literal\">node.run_state['scripting_language']</code>\n</li> <li>When the <strong>package</strong> resource has to install the package for the scripting language, it looks up the scripting language and uses the one defined in <code class=\"docutils literal\">node.run_state['scripting_language']</code>\n</li> <li>\n<code class=\"docutils literal\">lazy {}</code> ensures that the <strong>package</strong> resource evaluates this during the execution phase of the chef-client run (as opposed to during the compile phase)</li> </ul> <p>When this recipe runs, the chef-client will print something like the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">* ruby_block[randomly_choose_language] action run\n - execute the ruby block randomly_choose_language\n\n* package[scripting_language] action install\n - install version 5.3.3-27.el6_5 of package php</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/recipes.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/recipes.html</a>\n  </p>\n</div>\n","12-9/resource":"<h1 id=\"about-resources\">About Resources</h1> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you want to see all of the information about resources in a single document, see: <a class=\"reference external\" href=\"https://docs.chef.io/resources.html\">https://docs.chef.io/resources.html</a>. Keep reading this page for topics about individual resources.</p> </div> <p>A resource is a statement of configuration policy that:</p> <ul class=\"simple\"> <li>Describes the desired state for a configuration item</li> <li>Declares the steps needed to bring that item to the desired state</li> <li>Specifies a resource type—such as <code class=\"docutils literal\">package</code>, <code class=\"docutils literal\">template</code>, or <code class=\"docutils literal\">service</code>\n</li> <li>Lists additional details (also known as resource properties), as necessary</li> <li>Are grouped into recipes, which describe working configurations</li> </ul> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The <code class=\"docutils literal\">Chef::Platform</code> class maps providers to platforms (and platform versions). At the beginning of every chef-client run, Ohai verifies the <code class=\"docutils literal\">platform</code> and <code class=\"docutils literal\">platform_version</code> attributes on each node. The chef-client then uses those values to identify the correct provider, build an instance of that provider, identify the current state of the resource, do the specified action, and then mark the resource as updated (if changes were made).</p> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory '/tmp/folder' do\n  owner 'root'\n  group 'root'\n  mode '0755'\n  action :create\nend</pre> <p>The chef-client will look up the provider for the <code class=\"docutils literal\">directory</code> resource, which happens to be <code class=\"docutils literal\">Chef::Provider::Directory</code>, call <code class=\"docutils literal\">load_current_resource</code> to create a <code class=\"docutils literal\">directory[\"/tmp/folder\"]</code> resource, and then, based on the current state of the directory, do the specified action, which in this case is to create a directory called <code class=\"docutils literal\">/tmp/folder</code>. If the directory already exists, nothing will happen. If the directory was changed in any way, the resource is marked as updated.</p>  <h2 id=\"resources-syntax\">Resources Syntax</h2> <p>A resource is a Ruby block with four components: a type, a name, one (or more) properties (with values), and one (or more) actions. The syntax for a resource is like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">type 'name' do\n   attribute 'value'\n   action :type_of_action\nend</pre> <p>Every resource has its own set of actions and properties. Most properties have default values. Some properties are available to all resources, for example those used to send notifications to other resources and guards that help ensure that some resources are idempotent.</p> <p>For example, a resource that is used to install a tar.gz package for version 1.16.1 may look something like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'tar' do\n  version '1.16.1'\n  action :install\nend</pre> <p>All actions have a default value. Only non-default behaviors of actions and properties need to be specified. For example, the <strong>package</strong> resource’s default action is <code class=\"docutils literal\">:install</code> and the name of the package defaults to the <code class=\"docutils literal\">name</code> of the resource. Therefore, it is possible to write a resource block that installs the latest tar.gz package like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'tar'</pre> <p>and a resource block that installs a tar.gz package for version 1.6.1 like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'tar' do\n  version '1.16.1'\nend</pre> <p>In both cases, the chef-client will use the default action (<code class=\"docutils literal\">:install</code>) to install the <code class=\"docutils literal\">tar</code> package.</p>   <h2 id=\"common-functionality\">Common Functionality</h2> <p>All resources (including custom resources) share a set of common actions, properties, conditional executions, notifications, and relative path options.</p> <table class=\"docutils\"> <colgroup> <col width=\"27%\"> <col width=\"73%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Common Item</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_common#resource-common-actions\">Actions</a></td> <td>The <code class=\"docutils literal\">:nothing</code> action can be used with any resource or custom resource.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_common#resource-common-properties\">Properties</a></td> <td>The <code class=\"docutils literal\">ignore_failure</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">retries</code>, <code class=\"docutils literal\">retry_delay</code>, and <code class=\"docutils literal\">supports</code> properties can be used with any resource or custom resources.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_common#resource-common-guards\">Guards</a></td> <td>The <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> conditional executions can be used to put additional guards around certain resources so that they are only run when the condition is met.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_common#resource-common-notifications\">Notifications</a></td> <td>The <code class=\"docutils literal\">notifies</code> and <code class=\"docutils literal\">subscribes</code> notifications can be used with any resource.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_common#resource-common-relative-paths\">Relative Paths</a></td> <td>The <code class=\"docutils literal\">#{ENV['HOME']}</code> relative path can be used with any resource.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_common#resource-common-windows-file-security\">Windows File Security</a></td> <td>The <strong>template</strong>, <strong>file</strong>, <strong>remote_file</strong>, <strong>cookbook_file</strong>, <strong>directory</strong>, and <strong>remote_directory</strong> resources support the use of inheritance and access control lists (ACLs) within recipes.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_common#resource-common-run-in-compile-phase\">Run in Compile Phase</a></td> <td>Sometimes a resource needs to be run before every other resource or after all resources have been added to the resource collection.</td> </tr> </tbody> </table>   <h2 id=\"resources\">Resources</h2> <p>The following resources are platform resources (i.e. “are available from the chef-client directly and do not require a cookbook”):</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Resource</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_apt_package\">apt_package</a></td> <td>Use the <strong>apt_package</strong> resource to manage packages for the Debian and Ubuntu platforms.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_bash\">bash</a></td> <td>\n<p class=\"first\">Use the <strong>bash</strong> resource to execute scripts using the Bash interpreter. This resource may also use any of the actions and properties that are available to the <strong>execute</strong> resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <strong>bash</strong> script resource (which is based on the <strong>script</strong> resource) is different from the <strong>ruby_block</strong> resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</p> </div> </td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_batch\">batch</a></td> <td>Use the <strong>batch</strong> resource to execute a batch script using the cmd.exe interpreter. The <strong>batch</strong> resource creates and executes a temporary file (similar to how the <strong>script</strong> resource behaves), rather than running the command inline. This resource inherits actions (<code class=\"docutils literal\">:run</code> and <code class=\"docutils literal\">:nothing</code>) and properties (<code class=\"docutils literal\">creates</code>, <code class=\"docutils literal\">cwd</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">user</code>) from the <strong>execute</strong> resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_bff_package\">bff_package</a></td> <td>\n<p class=\"first\">Use the <strong>bff_package</strong> resource to manage packages for the AIX platform using the installp utility. When a package is installed from a local file, it must be added to the node using the <strong>remote_file</strong> or <strong>cookbook_file</strong> resources.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">A Backup File Format (BFF) package may not have a <code class=\"docutils literal\">.bff</code> file extension. The chef-client will still identify the correct provider to use based on the platform, regardless of the file extension.</p> </div> </td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_breakpoint\">breakpoint</a></td> <td>Use the <strong>breakpoint</strong> resource to add breakpoints to recipes. Run the chef-shell in chef-client mode, and then use those breakpoints to debug recipes. Breakpoints are ignored by the chef-client during an actual chef-client run. That said, breakpoints are typically used to debug recipes only when running them in a non-production environment, after which they are removed from those recipes before the parent cookbook is uploaded to the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_chef_gem\">chef_gem</a></td> <td>\n<p class=\"first\">Use the <strong>chef_gem</strong> resource to install a gem only for the instance of Ruby that is dedicated to the chef-client. When a package is installed from a local file, it must be added to the node using the <strong>remote_file</strong> or <strong>cookbook_file</strong> resources.</p> <p>The <strong>chef_gem</strong> resource works with all of the same properties and options as the <strong>gem_package</strong> resource, but does not accept the <code class=\"docutils literal\">gem_binary</code> property because it always uses the <code class=\"docutils literal\">CurrentGemEnvironment</code> under which the chef-client is running. In addition to performing actions similar to the <strong>gem_package</strong> resource, the <strong>chef_gem</strong> resource does the following:</p> <ul class=\"last simple\"> <li>Runs its actions immediately, before convergence, allowing a gem to be used in a recipe immediately after it is installed</li> <li>Runs <code class=\"docutils literal\">Gem.clear_paths</code> after the action, ensuring that gem is aware of changes so that it can be required immediately after it is installed</li> </ul> </td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_cookbook_file\">cookbook_file</a></td> <td>Use the <strong>cookbook_file</strong> resource to transfer files from a sub-directory of <code class=\"docutils literal\">COOKBOOK_NAME/files/</code> to a specified path located on a host that is running the chef-client. The file is selected according to file specificity, which allows different source files to be used based on the hostname, host platform (operating system, distro, or as appropriate), or platform version. Files that are located in the <code class=\"docutils literal\">COOKBOOK_NAME/files/default</code> sub-directory may be used on any platform.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_cron\">cron</a></td> <td>\n<p class=\"first\">Use the <strong>cron</strong> resource to manage cron entries for time-based job scheduling. Properties for a schedule will default to <code class=\"docutils literal\">*</code> if not provided. The <strong>cron</strong> resource requires access to a crontab program, typically cron.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The <strong>cron</strong> resource should only be used to modify an entry in a crontab file. Use the <strong>cookbook_file</strong> or <strong>template</strong> resources to add a crontab file to the cron.d directory. The <code class=\"docutils literal\">cron_d</code> lightweight resource (found in the <a class=\"reference external\" href=\"https://github.com/chef-cookbooks/cron\">cron</a> cookbook) is another option for managing crontab files.</p> </div> </td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_csh\">csh</a></td> <td>\n<p class=\"first\">Use the <strong>csh</strong> resource to execute scripts using the csh interpreter. This resource may also use any of the actions and properties that are available to the <strong>execute</strong> resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <strong>csh</strong> script resource (which is based on the <strong>script</strong> resource) is different from the <strong>ruby_block</strong> resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</p> </div> </td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_deploy\">deploy</a></td> <td>Use the <strong>deploy</strong> resource to manage and control deployments. This is a popular resource, but is also complex, having the most properties, multiple providers, the added complexity of callbacks, plus four attributes that support layout modifications from within a recipe.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_directory\">directory</a></td> <td>Use the <strong>directory</strong> resource to manage a directory, which is a hierarchy of folders that comprises all of the information stored on a computer. The root directory is the top-level, under which the rest of the directory is organized. The <strong>directory</strong> resource uses the <code class=\"docutils literal\">name</code> property to specify the path to a location in a directory. Typically, permission to access that location in the directory is required.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_dpkg_package\">dpkg_package</a></td> <td>Use the <strong>dpkg_package</strong> resource to manage packages for the dpkg platform. When a package is installed from a local file, it must be added to the node using the <strong>remote_file</strong> or <strong>cookbook_file</strong> resources.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_dsc_script\">dsc_script</a></td> <td>Many DSC resources are comparable to built-in Chef resources. For example, both DSC and Chef have <strong>file</strong>, <strong>package</strong>, and <strong>service</strong> resources. The <strong>dsc_script</strong> resource is most useful for those DSC resources that do not have a direct comparison to a resource in Chef, such as the <code class=\"docutils literal\">Archive</code> resource, a custom DSC resource, an existing DSC script that performs an important task, and so on. Use the <strong>dsc_script</strong> resource to embed the code that defines a DSC configuration directly within a Chef recipe.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_easy_install_package\">easy_install_package</a></td> <td>Use the <strong>easy_install_package</strong> resource to manage packages for the Python platform.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_env\">env</a></td> <td>Use the <strong>env</strong> resource to manage environment keys in Microsoft Windows. After an environment key is set, Microsoft Windows must be restarted before the environment key will be available to the Task Scheduler.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_erlang_call\">erl_call</a></td> <td>Use the <strong>erl_call</strong> resource to connect to a node located within a distributed Erlang system. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_execute\">execute</a></td> <td>Use the <strong>execute</strong> resource to execute a single command. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_file\">file</a></td> <td>Use the <strong>file</strong> resource to manage files directly on a node.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_freebsd_package\">freebsd_package</a></td> <td>Use the <strong>freebsd_package</strong> resource to manage packages for the FreeBSD platform.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_dpkg_package\">dpkg_package</a></td> <td>Use the <strong>gem_package</strong> resource to manage gem packages that are only included in recipes. When a package is installed from a local file, it must be added to the node using the <strong>remote_file</strong> or <strong>cookbook_file</strong> resources.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_git\">git</a></td> <td>Use the <strong>git</strong> resource to manage source control resources that exist in a git repository. git version 1.6.5 (or higher) is required to use all of the functionality in the <strong>git</strong> resource.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_group\">group</a></td> <td>Use the <strong>group</strong> resource to manage a local group.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_homebrew_package\">homebrew_package</a></td> <td>Use the <strong>homebrew_package</strong> resource to manage packages for the Mac OS X platform.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_http_request\">http_request</a></td> <td>Use the <strong>http_request</strong> resource to send an HTTP request (<code class=\"docutils literal\">GET</code>, <code class=\"docutils literal\">PUT</code>, <code class=\"docutils literal\">POST</code>, <code class=\"docutils literal\">DELETE</code>, <code class=\"docutils literal\">HEAD</code>, or <code class=\"docutils literal\">OPTIONS</code>) with an arbitrary message. This resource is often useful when custom callbacks are necessary.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_ifconfig\">ifconfig</a></td> <td>Use the <strong>ifconfig</strong> resource to manage interfaces.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_ips_package\">ips_package</a></td> <td>Use the <strong>ips_package</strong> resource to manage packages (using Image Packaging System (IPS)) on the Solaris 11 platform.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_link\">link</a></td> <td>Use the <strong>link</strong> resource to create symbolic or hard links.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_log\">log</a></td> <td>Use the <strong>log</strong> resource to create log entries. The <strong>log</strong> resource behaves like any other resource: built into the resource collection during the compile phase, and then run during the execution phase. (To create a log entry that is not built into the resource collection, use <code class=\"docutils literal\">Chef::Log</code> instead of the <strong>log</strong> resource.)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_macports_package\">macports_package</a></td> <td>Use the <strong>macports_package</strong> resource to manage packages for the Mac OS X platform.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_mdadm\">mdadm</a></td> <td>Use the <strong>mdadm</strong> resource to manage RAID devices in a Linux environment using the mdadm utility. The <strong>mdadm</strong> provider will create and assemble an array, but it will not create the config file that is used to persist the array upon reboot. If the config file is required, it must be done by specifying a template with the correct array layout, and then by using the <strong>mount</strong> provider to create a file systems table (fstab) entry.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_mount\">mount</a></td> <td>Use the <strong>mount</strong> resource to manage a mounted file system.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_ohai\">ohai</a></td> <td>Use the <strong>ohai</strong> resource to reload the Ohai configuration on a node. This allows recipes that change system attributes (like a recipe that adds a user) to refer to those attributes later on during the chef-client run.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_package\">package</a></td> <td>Use the <strong>package</strong> resource to manage packages. When the package is installed from a local file (such as with RubyGems, dpkg, or RPM Package Manager), the file must be added to the node using the <strong>remote_file</strong> or <strong>cookbook_file</strong> resources.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_pacman_package\">pacman_package</a></td> <td>Use the <strong>pacman_package</strong> resource to manage packages (using pacman) on the Arch Linux platform.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_perl\">perl</a></td> <td>\n<p class=\"first\">Use the <strong>perl</strong> resource to execute scripts using the Perl interpreter. This resource may also use any of the actions and properties that are available to the <strong>execute</strong> resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <strong>perl</strong> script resource (which is based on the <strong>script</strong> resource) is different from the <strong>ruby_block</strong> resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</p> </div> </td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_portage_package\">portage_package</a></td> <td>Use the <strong>portage_package</strong> resource to manage packages for the Gentoo platform.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_powershell_script\">powershell_script</a></td> <td>\n<p class=\"first\">Use the <strong>powershell_script</strong> resource to execute a script using the Windows PowerShell interpreter, much like how the <strong>script</strong> and <strong>script</strong>-based resources—<strong>bash</strong>, <strong>csh</strong>, <strong>perl</strong>, <strong>python</strong>, and <strong>ruby</strong>—are used. The <strong>powershell_script</strong> is specific to the Microsoft Windows platform and the Windows PowerShell interpreter.</p> <p class=\"last\">The <strong>powershell_script</strong> resource creates and executes a temporary file (similar to how the <strong>script</strong> resource behaves), rather than running the command inline. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p> </td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_python\">python</a></td> <td>\n<p class=\"first\">Use the <strong>python</strong> resource to execute scripts using the Python interpreter. This resource may also use any of the actions and properties that are available to the <strong>execute</strong> resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <strong>python</strong> script resource (which is based on the <strong>script</strong> resource) is different from the <strong>ruby_block</strong> resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</p> </div> </td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_reboot\">reboot</a></td> <td>Use the <strong>reboot</strong> resource to reboot a node, a necessary step with some installations on certain platforms. This resource is supported for use on the Microsoft Windows, Mac OS X, and Linux platforms.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_registry_key\">registry_key</a></td> <td>Use the <strong>registry_key</strong> resource to create and delete registry keys in Microsoft Windows.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_remote_directory\">remote_directory</a></td> <td>Use the <strong>remote_directory</strong> resource to incrementally transfer a directory from a cookbook to a node. The directory that is copied from the cookbook should be located under <code class=\"docutils literal\">COOKBOOK_NAME/files/default/REMOTE_DIRECTORY</code>. The <strong>remote_directory</strong> resource will obey file specificity.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_remote_file\">remote_file</a></td> <td>Use the <strong>remote_file</strong> resource to transfer a file from a remote location using file specificity. This resource is similar to the <strong>file</strong> resource.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_route\">route</a></td> <td>Use the <strong>route</strong> resource to manage the system routing table in a Linux environment.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_rpm_package\">rpm_package</a></td> <td>Use the <strong>rpm_package</strong> resource to manage packages for the RPM Package Manager platform.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_ruby\">ruby</a></td> <td>\n<p class=\"first\">Use the <strong>ruby</strong> resource to execute scripts using the Ruby interpreter. This resource may also use any of the actions and properties that are available to the <strong>execute</strong> resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <strong>ruby</strong> script resource (which is based on the <strong>script</strong> resource) is different from the <strong>ruby_block</strong> resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</p> </div> </td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_ruby_block\">ruby_block</a></td> <td>Use the <strong>ruby_block</strong> resource to execute Ruby code during a chef-client run. Ruby code in the <code class=\"docutils literal\">ruby_block</code> resource is evaluated with other resources during convergence, whereas Ruby code outside of a <code class=\"docutils literal\">ruby_block</code> resource is evaluated before other resources, as the recipe is compiled.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_script\">script</a></td> <td>\n<p class=\"first\">Use the <strong>script</strong> resource to execute scripts using a specified interpreter, such as Bash, csh, Perl, Python, or Ruby. This resource may also use any of the actions and properties that are available to the <strong>execute</strong> resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <strong>script</strong> resource is different from the <strong>ruby_block</strong> resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</p> </div> </td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_service\">service</a></td> <td>Use the <strong>service</strong> resource to manage a service.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_smartos_package\">smart_os_package</a></td> <td>Use the <strong>smartos_package</strong> resource to manage packages for the SmartOS platform.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_solaris_package\">solaris_package</a></td> <td>The <strong>solaris_package</strong> resource is used to manage packages for the Solaris platform.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_subversion\">subversion</a></td> <td>Use the <strong>subversion</strong> resource to manage source control resources that exist in a Subversion repository.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_template\">template</a></td> <td>Use the <strong>template</strong> resource to manage the contents of a file using an Embedded Ruby (ERB) template by transferring files from a sub-directory of <code class=\"docutils literal\">COOKBOOK_NAME/templates/</code> to a specified path located on a host that is running the chef-client. This resource includes actions and properties from the <strong>file</strong> resource. Template files managed by the <strong>template</strong> resource follow the same file specificity rules as the <strong>remote_file</strong> and <strong>file</strong> resources.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_user\">user</a></td> <td>\n<p class=\"first\">Use the <strong>user</strong> resource to add users, update existing users, remove users, and to lock/unlock user passwords.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">System attributes are collected by Ohai at the start of every chef-client run. By design, the actions available to the <strong>user</strong> resource are processed <strong>after</strong> the start of the chef-client run. This means that system attributes added or modified by the <strong>user</strong> resource during the chef-client run must be reloaded before they can be available to the chef-client. These system attributes can be reloaded in two ways: by picking up the values at the start of the (next) chef-client run or by using the <a class=\"reference external\" href=\"https://docs.chef.io/resource_ohai.html\">ohai resource</a> to reload the system attributes during the current chef-client run.</p> </div> </td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_windows_package\">windows_package</a></td> <td>\n<p class=\"first\">Use the <strong>windows_package</strong> resource to manage Microsoft Installer Package (MSI) packages for the Microsoft Windows platform.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This resource effectively replaces the <code class=\"docutils literal\">windows_package</code> resource found in the <strong>windows</strong> cookbook by moving that functionality into the chef-client. The <strong>windows</strong> cookbook may still be used, but in that situation use the generic <strong>package</strong> resource instead of the <strong>windows_package</strong> resource.</p> </div> </td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"resource_windows_service\">windows_service</a></td> <td>Use the <strong>windows_service</strong> resource to manage a service on the Microsoft Windows platform.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"resource_yum\">yum_package</a></td> <td>Use the <strong>yum_package</strong> resource to install, upgrade, and remove packages with Yum for the Red Hat and CentOS platforms. The <strong>yum_package</strong> resource is able to resolve <code class=\"docutils literal\">provides</code> data for packages much like Yum can do when it is run from the command line. This allows a variety of options for installing packages, like minimum versions, virtual provides, and library names.</td> </tr> </tbody> </table> <p>In addition, the <a class=\"reference internal\" href=\"resource_chef_handler\">chef_handler</a> resource is configured and run using the <strong>chef_handler</strong> cookbook, which is the location in which custom handlers are defined and maintained. Despite being defined in a cookbook (as a custom resource), the <strong>chef_handler</strong> resource should otherwise be considered a “platform resource”.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource.html</a>\n  </p>\n</div>\n","12-9/templates":"<h1 id=\"about-templates\">About Templates</h1> <p>A cookbook template is an Embedded Ruby (ERB) template that is used to dynamically generate static text files. Templates may contain Ruby expressions and statements, and are a great way to manage configuration files. Use the <strong>template</strong> resource to add cookbook templates to recipes; place the corresponding Embedded Ruby (ERB) template file in a cookbook’s <code class=\"docutils literal\">/templates</code> directory.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The chef-client uses Erubis for templates, which is a fast, secure, and extensible implementation of embedded Ruby. Erubis should be familiar to members of the Ruby on Rails, Merb, or Puppet communities. For more information about Erubis, see: <a class=\"reference external\" href=\"http://www.kuwata-lab.com/erubis/\">http://www.kuwata-lab.com/erubis/</a>.</p> </div>  <h2 id=\"requirements\">Requirements</h2> <p>To use a template, two things must happen:</p> <ol class=\"arabic simple\"> <li>A template resource must be added to a recipe</li> <li>An Embedded Ruby (ERB) template must be added to a cookbook</li> </ol> <p>For example, the following template file and template resource settings can be used to manage a configuration file named <code class=\"docutils literal\">/etc/sudoers</code>. Within a cookbook that uses sudo, the following resource could be added to <code class=\"docutils literal\">/recipes/default.rb</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/etc/sudoers' do\n  source 'sudoers.erb'\n  mode '0440'\n  owner 'root'\n  group 'root'\n  variables({\n     :sudoers_groups =&gt; node[:authorization][:sudo][:groups],\n     :sudoers_users =&gt; node[:authorization][:sudo][:users]\n  })\nend</pre> <p>And then create a template called <code class=\"docutils literal\">sudoers.erb</code> and save it to <code class=\"docutils literal\">templates/default/sudoers.erb</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">#\n# /etc/sudoers\n#\n# Generated by Chef for &lt;%= node[:fqdn] %&gt;\n#\n\nDefaults        !lecture,tty_tickets,!fqdn\n\n# User privilege specification\nroot          ALL=(ALL) ALL\n\n&lt;% @sudoers_users.each do |user| -%&gt;\n&lt;%= user %&gt;   ALL=(ALL) &lt;%= \"NOPASSWD:\" if @passwordless %&gt;ALL\n&lt;% end -%&gt;\n\n# Members of the sysadmin group may gain root privileges\n%sysadmin     ALL=(ALL) &lt;%= \"NOPASSWD:\" if @passwordless %&gt;ALL\n\n&lt;% @sudoers_groups.each do |group| -%&gt;\n# Members of the group '&lt;%= group %&gt;' may gain root privileges\n%&lt;%= group %&gt; ALL=(ALL) &lt;%= \"NOPASSWD:\" if @passwordless %&gt;ALL\n&lt;% end -%&gt;</pre> <p>And then set the default attributes in <code class=\"docutils literal\">attributes/default.rb</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default['authorization']['sudo']['groups'] = [ 'sysadmin', 'wheel', 'admin' ]\ndefault['authorization']['sudo']['users']  = [ 'jerry', 'greg']</pre>   <h2 id=\"variables\">Variables</h2> <p>A template is an Embedded Ruby (ERB) template. An Embedded Ruby (ERB) template allows Ruby code to be embedded inside a text file within specially formatted tags. Ruby code can be embedded using expressions and statements. An expression is delimited by <code class=\"docutils literal\">&lt;%=</code> and <code class=\"docutils literal\">%&gt;</code>. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">&lt;%= \"my name is #{$ruby}\" %&gt;</pre> <p>A statement is delimited by a modifier, such as <code class=\"docutils literal\">if</code>, <code class=\"docutils literal\">elseif</code>, and <code class=\"docutils literal\">else</code>. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if false\n   # this won't happen\nelsif nil\n   # this won't either\nelse\n   # code here will run though\nend</pre> <p>Using a Ruby expression is the most common approach for defining template variables because this is how all variables that are sent to a template are referenced. Whenever a template needs to use an <code class=\"docutils literal\">each</code>, <code class=\"docutils literal\">if</code>, or <code class=\"docutils literal\">end</code>, use a Ruby statement.</p> <p>When a template is rendered, Ruby expressions and statements are evaluated by the chef-client. The variables listed in the <strong>template</strong> resource’s <code class=\"docutils literal\">variables</code> parameter and in the node object are evaluated. The chef-client then passes these variables to the template, where they will be accessible as instance variables within the template. The node object can be accessed just as if it were part of a recipe, using the same syntax.</p> <p>For example, a simple template resource like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node[:fqdn] = 'latte'\ntemplate '/tmp/foo' do\n  source 'foo.erb'\n  variables({\n    :x_men =&gt; 'are keen'\n  })\nend</pre> <p>And a simple Embedded Ruby (ERB) template like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">The node &lt;%= node[:fqdn] %&gt; thinks the x-men &lt;%= @x_men %&gt;</pre> <p>Would render something like:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">The node latte thinks the x-men are keen</pre> <p>Even though this is a very simple example, the full capabilities of Ruby can be used to tackle even the most complex and demanding template requirements.</p>   <h2 id=\"file-specificity\">File Specificity</h2> <p>A cookbook is frequently designed to work across many platforms and is often required to distribute a specific template to a specific platform. A cookbook can be designed to support the distribution of templates across platforms, while ensuring that the correct template ends up on each system.</p> <p>The pattern for template specificity depends on two things: the lookup path and the source. The first pattern that matches is used:</p> <ol class=\"arabic simple\"> <li>/host-$fqdn/$source</li> <li>/$platform-$platform_version/$source</li> <li>/$platform/$source</li> <li>/default/$source</li> <li>/$source</li> </ol> <p>Use an array with the <code class=\"docutils literal\">source</code> property to define an explicit lookup path. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/test' do\n  source ['#{node.chef_environment}.erb', 'default.erb']\nend</pre> <p>The following example emulates the entire file specificity pattern by defining it as an explicit path:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/test' do\n  source %W{\n    host-#{node['fqdn']}/test.erb\n    #{node['platform']}-#{node['platform_version']}/test.erb\n    #{node['platform']}/test.erb\n    default/test.erb\n  }\nend</pre> <p>A cookbook may have a <code class=\"docutils literal\">/templates</code> directory structure like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">/templates/\n  windows-6.2\n  windows-6.1\n  windows-6.0\n  windows\n  default</pre> <p>and a resource that looks something like the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template 'C:\\path\\to\\file\\text_file.txt' do\n  source 'text_file.txt'\n  mode '0755'\n  owner 'root'\n  group 'root'\nend</pre> <p>This resource would be matched in the same order as the <code class=\"docutils literal\">/templates</code> directory structure. For a node named <code class=\"docutils literal\">host-node-desktop</code> that is running Windows 7, the second item would be the matching item and the location:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">/templates\n  windows-6.2/text_file.txt\n  windows-6.1/text_file.txt\n  windows-6.0/text_file.txt\n  windows/text_file.txt\n  default/text_file.txt</pre>   <h2 id=\"host-notation\">Host Notation</h2> <p>The naming of folders within cookbook directories must literally match the host notation used for template specificity matching. For example, if a host is named <code class=\"docutils literal\">foo.example.com</code>, then the folder must be named <code class=\"docutils literal\">host-foo.example.com</code>.</p>   <h2 id=\"transfer-frequency\">Transfer Frequency</h2> <p>The chef-client caches a template when it is first requested. On each subsequent request for that template, the chef-client compares that request to the template located on the Chef server. If the templates are the same, no transfer occurs.</p>   <h2 id=\"partial-templates\">Partial Templates</h2> <p>A template can be built in a way that allows it to contain references to one (or more) smaller template files. (These smaller template files are also referred to as partials.) A partial can be referenced from a template file in one of the following ways:</p> <ul class=\"simple\"> <li>By using the <code class=\"docutils literal\">render</code> method in the template file</li> <li>By using the <strong>template</strong> resource and the <code class=\"docutils literal\">variables</code> property.</li> </ul>  <h3 id=\"variables-attribute\">variables Attribute</h3> <p>The <code class=\"docutils literal\">variables</code> property of the <strong>template</strong> resource can be used to reference a partial template file by using a Hash. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/file/name.txt' do\n  variables :partials =&gt; {\n    'partial_name_1.txt.erb' =&gt; 'message',\n    'partial_name_2.txt.erb' =&gt; 'message',\n    'partial_name_3.txt.erb' =&gt; 'message'\n  }\nend</pre> <p>where each of the partial template files can then be combined using normal Ruby template patterns within a template file, such as:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">&lt;% @partials.each do |partial, message| %&gt;\n  Here is &lt;%= partial %&gt;\n  &lt;%= render partial, :variables =&gt; {:message =&gt; message} %&gt;\n&lt;% end %&gt;</pre>   <h3 id=\"render-method\">render Method</h3> <p>Use the <code class=\"docutils literal\">render</code> method in a template to reference a partial template file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">&lt;%= render \"partial_name.txt.erb\", :option =&gt; {} %&gt;</pre> <p>where <code class=\"docutils literal\">partial_name</code> is the name of the partial template file and <code class=\"docutils literal\">:option</code> is one (or more) of the following:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:cookbook</code></td> <td>By default, a partial template file is assumed to be located in the cookbook that contains the top-level template. Use this option to specify the path to a different cookbook</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:local</code></td> <td>Indicates that the name of the partial template file should be interpreted as a path to a file in the local file system or looked up in a cookbook using the normal rules for template files. Set to <code class=\"docutils literal\">true</code> to interpret as a path to a file in the local file system and to <code class=\"docutils literal\">false</code> to use the normal rules for template files</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:source</code></td> <td>By default, a partial template file is identified by its file name. Use this option to specify a different name or a local path to use (instead of the name of the partial template file)</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:variables</code></td> <td>A hash of <code class=\"docutils literal\">variable_name =&gt; value</code> that will be made available to the partial template file. When this option is used, any variables that are defined in the top-level template that are required by the partial template file must have them defined explicitly using this option</td> </tr> </tbody> </table> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">&lt;%= render \"simple.txt.erb\", :variables =&gt; {:user =&gt; Etc.getlogin }, :local =&gt; true %&gt;</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/templates.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/templates.html</a>\n  </p>\n</div>\n","12-9/cookbook_repo":"<h1 id=\"cookbook-directories-and-metadata\">Cookbook Directories and Metadata</h1> <p>The <code class=\"docutils literal\">cookbooks/</code> directory is used to store the cookbooks that are used by the chef-client when configuring the various systems in the organization. This directory contains the cookbooks that are used to configure systems in the infrastructure. Each cookbook can be configured to contain cookbook-specific copyright, email, and license data.</p> <p>To configure cookbook-specific copyright, email, and license data, add the following to the knife.rb file in the chef-repo:</p> <pre class=\"highlight-bash\" data-language=\"bash\">cookbook_copyright \"Example, Com.\"\ncookbook_email     \"cookbooks@example.com\"\ncookbook_license   \"apachev2\"</pre> <p>where the <code class=\"docutils literal\">cookbook_copyright</code> and <code class=\"docutils literal\">cookbook_email</code> are specific to the organization and <code class=\"docutils literal\">cookbook_license</code> is either <code class=\"docutils literal\">apachev2</code> or <code class=\"docutils literal\">none</code>. These settings will be used in the default recipe and in corresponding values in the metadata.rb file, but can be modified in those locations as well (if they should be different from the default values contained in the knife.rb file.)</p> <p>To create a cookbook (including all default components), run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook create COOKBOOK_NAME</pre> <p>where <code class=\"docutils literal\">COOKBOOK_NAME</code> is the name of the cookbook that will be created. Any unneeded directory components can be left unused or deleted, if preferred.</p> <p>To download a cookbook when git is used for version source control, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site install COOKBOOK_NAME</pre> <p>where <code class=\"docutils literal\">COOKBOOK_NAME</code> is the name of a cookbook on <a class=\"reference external\" href=\"https://supermarket.chef.io\">https://supermarket.chef.io</a>. This will start a process that:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>downloads the cookbook from <a class=\"reference external\" href=\"https://supermarket.chef.io\">https://supermarket.chef.io</a> as a tar.gz archive</li> <li>ensures that its using the git master branch, and then checks out the cookbook from a vendor branch (creating a new vendor branch, if required)</li> <li>removes the old (existing) version</li> <li>expands the tar.gz archive and adds the expanded files to the git index and commits</li> <li>creates a tag for the version that was downloaded</li> <li>checks out the master branch</li> <li>merges the cookbook into the master (to ensure that any local changes or modifications are preserved)</li> </ul> </div>\n</blockquote> <p>To download a cookbook when git is not used for version source control, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site download COOKBOOK_NAME</pre> <p>where <code class=\"docutils literal\">COOKBOOK_NAME</code> is the name of a cookbook on <a class=\"reference external\" href=\"https://supermarket.chef.io\">https://supermarket.chef.io</a>. This will download the tar.gz file associated with the cookbook and will create a file named <code class=\"docutils literal\">COOKBOOK_NAME.tar.gz</code> in the current directory (e.g., <code class=\"docutils literal\">~/chef-repo</code>). Once downloaded, using a version source control system is recommended.</p>  <h2 id=\"about-cookbook-metadata\">About Cookbook Metadata</h2> <p>Every cookbook requires a small amount of metadata. A file named metadata.rb is located at the top of every cookbook directory structure. The contents of the metadata.rb file provides hints to the Chef server to help ensure that cookbooks are deployed to each node correctly.</p>  <h3 id=\"error-messages\">Error Messages</h3> <p>The Chef server will only try to distribute the cookbooks that are needed to configure an individual node. This is determined by identifying the roles and recipes that are assigned directly to that system, and then to expand the list of dependencies, and then to deliver that entire set to the node. In some cases, if the dependency is not specified in the cookbook’s metadata, the Chef server may not treat that dependency as a requirement, which will result in an error message. If an error message is received from the Chef server about cookbook distribution, verify the <code class=\"docutils literal\">depends</code> entries in the metadata.rb file, and then try again.</p>   <h3 id=\"metadata-rb\">metadata.rb</h3> <p>Every cookbook requires a small amount of metadata. A file named metadata.rb is located at the top of every cookbook directory structure. The contents of the metadata.rb file provides hints to the Chef server to help ensure that cookbooks are deployed to each node correctly.</p> <p>A metadata.rb file is:</p> <ul class=\"simple\"> <li>Located at the top level of a cookbook’s directory structure</li> <li>Compiled whenever a cookbook is uploaded to the Chef server or when the <code class=\"docutils literal\">knife cookbook metadata</code> subcommand is run, and then stored as JSON data</li> <li>Created automatically by knife whenever the <code class=\"docutils literal\">knife cookbook create</code> subcommand is run</li> <li>Edited using a text editor, and then re-uploaded to the Chef server as part of a cookbook upload</li> </ul>  <h4 id=\"settings\">Settings</h4> <p>This configuration file has the following settings:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">attribute</code></dt> <dd>\n<p class=\"first\">The list of attributes that are required to configure a cookbook. An attribute name is required, followed by any of these options: <code class=\"docutils literal\">display_name</code> (the name that appears in the user interface), <code class=\"docutils literal\">description</code> (a short description), <code class=\"docutils literal\">choice</code> (an array of choices that are presented to a user), <code class=\"docutils literal\">calculated</code> (the default value is calculated by the recipe), <code class=\"docutils literal\">type</code> (the type of value, either <code class=\"docutils literal\">string</code>, <code class=\"docutils literal\">array</code>, or <code class=\"docutils literal\">hash</code>), <code class=\"docutils literal\">required</code> (the level of user input, either <code class=\"docutils literal\">required</code>, <code class=\"docutils literal\">recommended</code>, or <code class=\"docutils literal\">optional</code>), <code class=\"docutils literal\">recipes</code> (an array of recipes), or <code class=\"docutils literal\">default</code> (the attribute’s default value).</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">attribute 'pets/cat/name',\n  :display_name =&gt; 'Cat Name',\n  :description =&gt; 'The name of your cat',\n  :choice =&gt; \\[\n    'kitty kitty',\n    'peanut',\n    'einstein',\n    'honey' \\],\n  :type =&gt; 'string',\n  :required =&gt; 'recommended',\n  :recipes =&gt; \\[ 'cats::eat' \\],\n  :default =&gt; 'kitty kitty'</pre> </dd> <dt><code class=\"docutils literal\">chef_version</code></dt> <dd>\n<p class=\"first\">A range of chef-client versions that are supported by this cookbook.</p> <p>For example, to match any 12.x version of the chef-client, but not 11.x or 13.x:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_version \"~&gt; 12\"</pre> <p>Or matches any 12.x (or higher) version of the chef-client:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_version \"&gt;= 12\"</pre> <p>Or matches any version of the chef-client greater than 12.5.1, any 13.x version, but no 14.x versions:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_version \"&gt;= 12.5.1\", \"&lt; 14.0\"</pre> <p>Or matches any version of the chef-client greater than or equal to 11.18.4 and less than 12.0 and also any version of the chef-client greater than or equal to 12.5.1, but less than 13.0:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_version \"&gt;= 11.18.12\", \"&lt; 12.0\"\nchef_version \"&gt;= 12.5.1\", \"&lt; 13.0\"</pre> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This setting is not visible in Chef Supermarket.</p> </div> </dd> <dt><code class=\"docutils literal\">conflicts</code></dt> <dd>\n<p class=\"first\">For information only; not used outside this file. A cookbook conflicts with another cookbook or cookbook version. Use a version constraint to define constraints for cookbook versions: <code class=\"docutils literal\">&lt;</code> (less than), <code class=\"docutils literal\">&lt;=</code> (less than or equal to), <code class=\"docutils literal\">=</code> (equal to), <code class=\"docutils literal\">&gt;=</code> (greater than or equal to), <code class=\"docutils literal\">~&gt;</code> (approximately greater than), or <code class=\"docutils literal\">&gt;</code> (greater than). This field requires that a cookbook with a matching name and version does not exist on the Chef server. When the match exists, the Chef server ensures that any conflicted cookbooks are not included with the set of cookbooks that are sent to the node when the chef-client runs.</p> <p>For example, if a cookbook conflicts with another cookbook named <code class=\"docutils literal\">dogs</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">conflicts 'dogs'</pre> <p>Or if the cookbook conflicted with a cookbook named <code class=\"docutils literal\">dogs</code> and greater than version 1.0:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">conflicts 'dogs', '&gt; 1.0'</pre> </dd> <dt><code class=\"docutils literal\">depends</code></dt> <dd>\n<p class=\"first\">Show that a cookbook has a dependency on another cookbook. Use a version constraint to define dependencies for cookbook versions: <code class=\"docutils literal\">&lt;</code> (less than), <code class=\"docutils literal\">&lt;=</code> (less than or equal to), <code class=\"docutils literal\">=</code> (equal to), <code class=\"docutils literal\">&gt;=</code> (greater than or equal to; also known as “optimistically greater than”, or “optimistic”), <code class=\"docutils literal\">~&gt;</code> (approximately greater than; also known as “pessimistically greater than”, or “pessimistic”), or <code class=\"docutils literal\">&gt;</code> (greater than). This field requires that a cookbook with a matching name and version exists on the Chef server. When the match exists, the Chef server includes the dependency as part of the set of cookbooks that are sent to the node when the chef-client runs. It is very important that the <code class=\"docutils literal\">depends</code> field contain accurate data. If a dependency statement is inaccurate, the chef-client may not be able to complete the configuration of the system.</p> <p>For example, to set a dependency a cookbook named <code class=\"docutils literal\">cats</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">depends 'cats'</pre> <p>or, to set a dependency on the same cookbook, but only when the version is less than 1.0:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">depends 'cats', '&lt; 1.0'</pre> </dd> <dt><code class=\"docutils literal\">description</code></dt> <dd>\n<p class=\"first\">A short description of a cookbook and its functionality.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">description 'A fancy cookbook that manages a herd of cats!'</pre> </dd> <dt><code class=\"docutils literal\">gem</code></dt> <dd>\n<p class=\"first\">Specifies a gem dependency to be installed via the <strong>chef_gem</strong> resource after all cookbooks are synchronized, but before any other cookbook loading is done. Use this attribute once per gem dependency. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">gem \"poise\"\ngem \"chef-sugar\"\ngem \"chef-provisioning\"</pre> </dd> <dt><code class=\"docutils literal\">grouping</code></dt> <dd>\n<p class=\"first\">Add a title and description to a group of attributes within a namespace. Takes a name (along with the / notation that defines a nested grouping), a title, and a short description.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">grouping 'pets/cat',\n :title =&gt; 'Cat Options',\n :description =&gt; 'Describe your cat using the options below'</pre> </dd> <dt><code class=\"docutils literal\">issues_url</code></dt> <dd>\n<p class=\"first\">The URL for the location in which a cookbook’s issue tracking is maintained. This setting is also used by Chef Supermarket. In Chef Supermarket, this value is used to define the destination for the “View Issues” link.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">issues_url 'https://github.com/chef-cookbooks/chef-client/issues'</pre> </dd> <dt><code class=\"docutils literal\">license</code></dt> <dd>\n<p class=\"first\">The type of license under which a cookbook is distributed: <code class=\"docutils literal\">Apache v2.0</code>, <code class=\"docutils literal\">GPL v2</code>, <code class=\"docutils literal\">GPL v3</code>, <code class=\"docutils literal\">MIT</code>, or <code class=\"docutils literal\">license 'Proprietary - All Rights Reserved</code> (default). Please be aware of the licenses for files inside of a cookbook and be sure to follow any restrictions they describe.</p> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">license 'Apache v2.0'</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">license 'GPL v3'</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">license 'MIT'</pre> <p>or:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">license 'Proprietary - All Rights Reserved'</pre> </dd> <dt><code class=\"docutils literal\">long_description</code></dt> <dd>\n<p class=\"first\">A longer description that ideally contains full instructions on the proper use of a cookbook, including definitions, libraries, dependencies, and so on. There are two ways to use this field: with the contents embedded in the field itself or with the contents pulled from a file at a specified path, such as a README.rdoc located at the top of a cookbook directory.</p> <p>For example, to embed the long description within the field itself:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">long_description &lt;&lt;-EOH\n= DESCRIPTION:\n\nComplete Debian/Ubuntu style Apache2 configuration.\n\n= REQUIREMENTS:\n\nDebian or Ubuntu preferred.\n\nRed Hat/CentOS and Fedora can be used but will be converted to\na Debian/Ubuntu style Apache as it's far easier to manage\nwith Chef.\n\n= ATTRIBUTES:\n\nThe file attributes/apache.rb contains the following attribute\ntypes:\n\n* platform specific locations and settings.\n* general settings\n* pre-fork attributes\n* worker attributes\n\nGeneral settings and pre-fork/worker attributes are tunable.\nEOH</pre> <p>Or to read the contents from a specified file:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">long_description IO.read(File.join\n  (File.dirname(__FILE__), 'README.rdoc')\n)</pre> </dd> <dt><code class=\"docutils literal\">maintainer</code></dt> <dd>\n<p class=\"first\">The name of the person responsible for maintaining a cookbook, either an individual or an organization.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">maintainer 'Adam Jacob'</pre> </dd> <dt><code class=\"docutils literal\">maintainer_email</code></dt> <dd>\n<p class=\"first\">The email address for the person responsible for maintaining a cookbook. Only one email can be listed here, so if this needs to be forwarded to multiple people consider using an email address that is already setup for mail forwarding.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">maintainer_email 'adam@example.com'</pre> </dd> <dt><code class=\"docutils literal\">name</code></dt> <dd>\n<p class=\"first\">Required. The name of the cookbook.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">name 'cats'</pre> </dd> <dt><code class=\"docutils literal\">ohai_version</code></dt> <dd>\n<p class=\"first\">A range of chef-client versions that are supported by this cookbook.</p> <p>For example, to match any 8.x version of Ohai, but not 7.x or 9.x:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_version \"~&gt; 8\"</pre> <p>Or matches any 8.x (or higher) version of Ohai:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_version \"&gt;= 8\"</pre> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This setting is not visible in Chef Supermarket.</p> </div> </dd> <dt><code class=\"docutils literal\">privacy</code></dt> <dd>Specify that a cookbook is private.</dd> <dt><code class=\"docutils literal\">provides</code></dt> <dd>\n<p class=\"first\">Add a recipe, definition, or resource that is provided by this cookbook, should the auto-populated list be insufficient.</p> <p>For example, for recipes:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">provides 'cats::sleep'\nprovides 'cats::eat'</pre> <p>For definitions:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">provides 'here(:kitty, :time_to_eat)'</pre> <p>And for resources:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">provides 'service[snuggle]'</pre> </dd> <dt><code class=\"docutils literal\">recipe</code></dt> <dd>\n<p class=\"first\">A description for a recipe, mostly for cosmetic value within the Chef server user interface.</p> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">recipe 'cats::sleep', 'For a crazy 20 hours a day.'</pre> <p>or:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">recipe 'cats::eat', 'When they are not sleeping.'</pre> </dd> <dt><code class=\"docutils literal\">recommends</code></dt> <dd>\n<p class=\"first\">For information only; not used outside this file. Add a dependency on another cookbook that is recommended, but not required. A cookbook will still work even if recommended dependencies are not available.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">When running automated tests using Foodcritic, this setting will trigger FC053.</p> </div> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">recommends 'dogs'</pre> <p>or, to recommend a cookbook named <code class=\"docutils literal\">dogs</code> and for version 1.0 (or higher):</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">recommends 'dogs', '&gt; 1.0'</pre> </dd> <dt><code class=\"docutils literal\">replaces</code></dt> <dd>\n<p class=\"first\">For information only; not used outside this file. Whether this cookbook should replace another (and can be used in-place of that cookbook).</p> <p>For example, to replace a cookbook named <code class=\"docutils literal\">dogs</code> with this cookbook:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">replaces 'dogs'</pre> <p>or to replace a cookbook named <code class=\"docutils literal\">dogs</code>, but only for versions prior to 4.0:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">replaces 'dogs', '&lt; 4.0'</pre> </dd> <dt><code class=\"docutils literal\">source_url</code></dt> <dd>\n<p class=\"first\">The URL for the location in which a cookbook’s source code is maintained. This setting is also used by Chef Supermarket. In Chef Supermarket, this value is used to define the destination for the “View Source” link.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">source_url 'https://github.com/chef-cookbooks/chef-client'</pre> </dd> <dt><code class=\"docutils literal\">suggests</code></dt> <dd>\n<p class=\"first\">For information only; not used outside this file. Add a dependency on another cookbook that is suggested, but not required. This field is weaker than <code class=\"docutils literal\">recommends</code>; a cookbook will still work even when suggested dependencies are not available.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">When running automated tests using Foodcritic, this setting will trigger FC052.</p> </div> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">suggests 'cats'</pre> <p>or, to suggest a cookbook named <code class=\"docutils literal\">cats</code>, but only for versions 1.0 and higher:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">suggests 'cats', '&gt; 1.0'</pre> </dd> <dt><code class=\"docutils literal\">supports</code></dt> <dd>\n<p class=\"first\">Show that a cookbook has a supported platform. Use a version constraint to define dependencies for platform versions: <code class=\"docutils literal\">&lt;</code> (less than), <code class=\"docutils literal\">&lt;=</code> (less than or equal to), <code class=\"docutils literal\">=</code> (equal to), <code class=\"docutils literal\">&gt;=</code> (greater than or equal to), <code class=\"docutils literal\">~&gt;</code> (approximately greater than), or <code class=\"docutils literal\">&gt;</code> (greater than). To specify more than one platform, use more than one <code class=\"docutils literal\">supports</code> field, once for each platform.</p> <p>For example, to support every version of Ubuntu:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">supports 'ubuntu'</pre> <p>or, to support versions of Ubuntu greater than or equal to 12.04:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">supports 'ubuntu', '&gt;= 12.04'</pre> <p>or, to support only Ubuntu 14.10:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">supports 'ubuntu', '= 14.10'</pre> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\">The current version of a cookbook. Version numbers always follow a simple three-number version sequence.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">version '2.0.0'</pre> </dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/cookbook_repo.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/cookbook_repo.html</a>\n  </p>\n</div>\n","12-9/cookbook_versions":"<h1 id=\"about-cookbook-versions\">About Cookbook Versions</h1> <p>A cookbook version represents a set of functionality that is different from the cookbook on which it is based. A version may exist for many reasons, such as ensuring the correct use of a third-party component, updating a bug fix, or adding an improvement. A cookbook version is defined using syntax and operators, may be associated with environments, cookbook metadata, and/or run-lists, and may be frozen (to prevent unwanted updates from being made).</p> <p>A cookbook version is maintained just like a cookbook, with regard to source control, uploading it to the Chef server, and how the chef-client applies that cookbook when configuring nodes.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A cookbook version always takes the form x.y.z, where x, y, and z are decimal numbers that are used to represent major (x), minor (y), and patch (z) versions. A two-part version (x.y) is also allowed. Alphanumeric version numbers (1.2.a3) and version numbers with more than three parts (1.2.3.4) are not allowed.</p>   <h2 id=\"constraints\">Constraints</h2> <p>A version constraint is a string that combines the cookbook version syntax with an operator, in the following format:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">operator cookbook_version_syntax</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Single digit cookbook versions are not allowed. Cookbook versions must specify at least the major and minor version. For example, use <code class=\"docutils literal\">1.0</code> or <code class=\"docutils literal\">1.0.1</code>; do not use <code class=\"docutils literal\">1</code>.</p> </div> <p>The following operators can be used with cookbook versions:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operator</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">=</code></td> <td>equal to</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">&gt;</code></td> <td>greater than</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">&lt;</code></td> <td>less than</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">&gt;=</code></td> <td>greater than or equal to; also known as “optimistically greater than”, or “optimistic”</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">&lt;=</code></td> <td>less than or equal to</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">~&gt;</code></td> <td>approximately greater than; also known as “pessimistically greater than”, or “pessimistic”</td> </tr> </tbody> </table> <p>For example, a version constraint for “equals version 1.0.7” is expressed like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">= 1.0.7</pre> <p>A version constraint for “greater than version 1.0.2” is expressed like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">&gt; 1.0.2</pre> <p>An optimistic version constraint is one that looks for versions greater than or equal to the specified version. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">&gt;= 2.6.5</pre> <p>will match cookbooks greater than or equal to 2.6.5, such as 2.6.5, 2.6.7 or 3.1.1.</p> <p>A pessimistic version constraint is one that will find the upper limit version number within the range specified by the minor version number or patch version number. For example, a pessimistic version constraint for minor version numbers:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">~&gt; 2.6</pre> <p>will match cookbooks that are greater than or equal to version 2.6, but less than version 3.0.</p> <p>Or, a pessimistic version constraint for patch version numbers:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">~&gt; 2.6.5</pre> <p>will match cookbooks that are greater than or equal to version 2.6.5, but less than version 2.7.0.</p> <p>Or, a pessimistic version constraint that matches cookbooks less than a version number:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">&lt; 2.3.4</pre> <p>or will match cookbooks less than or equal to a specific version number:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">&lt;= 2.6.5</pre> <p>The following operators may be used:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operator</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">=</code></td> <td>equal to</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">&gt;</code></td> <td>greater than</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">&lt;</code></td> <td>less than</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">&gt;=</code></td> <td>greater than or equal to; also known as “optimistically greater than”, or “optimistic”</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">&lt;=</code></td> <td>less than or equal to</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">~&gt;</code></td> <td>approximately greater than; also known as “pessimistically greater than”, or “pessimistic”</td> </tr> </tbody> </table> <p>For example, a version constraint for “equals version 1.0.7” is expressed like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">= 1.0.7</pre> <p>A version constraint for “greater than version 1.0.2” is expressed like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">&gt; 1.0.2</pre> <p>An optimistic version constraint is one that looks for versions greater than or equal to the specified version. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">&gt;= 2.6.5</pre> <p>will match cookbooks greater than or equal to 2.6.5, such as 2.6.5, 2.6.7 or 3.1.1.</p> <p>A pessimistic version constraint is one that will find the upper limit version number within the range specified by the minor version number or patch version number. For example, a pessimistic version constraint for minor version numbers:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">~&gt; 2.6</pre> <p>will match cookbooks that are greater than or equal to version 2.6, but less than version 3.0.</p> <p>Or, a pessimistic version constraint for patch version numbers:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">~&gt; 2.6.5</pre> <p>will match cookbooks that are greater than or equal to version 2.6.5, but less than version 2.7.0.</p> <p>Or, a pessimistic version constraint that matches cookbooks less than a version number:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">&lt; 2.3.4</pre> <p>or will match cookbooks less than or equal to a specific version number:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">&lt;= 2.6.5</pre>   <h2 id=\"metadata\">Metadata</h2> <p>Every cookbook requires a small amount of metadata. A file named metadata.rb is located at the top of every cookbook directory structure. The contents of the metadata.rb file provides hints to the Chef server to help ensure that cookbooks are deployed to each node correctly.</p> <p>Versions and version constraints can be specified in a cookbook’s metadata.rb file by using the following functions. Each function accepts a name and an optional version constraint; if a version constraint is not provided, <code class=\"docutils literal\">&gt;= 0.0.0</code> is used as the default.</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Function</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">conflicts</code></td> <td>\n<p class=\"first\">A cookbook conflicts with another cookbook or cookbook version. Use a version constraint to define constraints for cookbook versions: <code class=\"docutils literal\">&lt;</code> (less than), <code class=\"docutils literal\">&lt;=</code> (less than or equal to), <code class=\"docutils literal\">=</code> (equal to), <code class=\"docutils literal\">&gt;=</code> (greater than or equal to), <code class=\"docutils literal\">~&gt;</code> (approximately greater than), or <code class=\"docutils literal\">&gt;</code> (greater than). This field requires that a cookbook with a matching name and version does not exist on the Chef server. When the match exists, the Chef server ensures that any conflicted cookbooks are not included with the set of cookbooks that are sent to the node when the chef-client runs. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">conflicts 'apache2', '&lt; 3.0'</pre> <p>or:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">conflicts 'daemon-tools'</pre> </td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">depends</code></td> <td>\n<p class=\"first\">Show that a cookbook has a dependency on another cookbook. Use a version constraint to define dependencies for cookbook versions: <code class=\"docutils literal\">&lt;</code> (less than), <code class=\"docutils literal\">&lt;=</code> (less than or equal to), <code class=\"docutils literal\">=</code> (equal to), <code class=\"docutils literal\">&gt;=</code> (greater than or equal to; also known as “optimistically greater than”, or “optimistic”), <code class=\"docutils literal\">~&gt;</code> (approximately greater than; also known as “pessimistically greater than”, or “pessimistic”), or <code class=\"docutils literal\">&gt;</code> (greater than). This field requires that a cookbook with a matching name and version exists on the Chef server. When the match exists, the Chef server includes the dependency as part of the set of cookbooks that are sent to the node when the chef-client runs. It is very important that the <code class=\"docutils literal\">depends</code> field contain accurate data. If a dependency statement is inaccurate, the chef-client may not be able to complete the configuration of the system. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">depends 'opscode-base'</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">depends 'opscode-github', '&gt; 1.0.0'</pre> <p>or:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">depends 'runit', '~&gt; 1.2.3'</pre> </td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">provides</code></td> <td>Add a recipe, definition, or resource that is provided by this cookbook, should the auto-populated list be insufficient.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">recommends</code></td> <td>Add a dependency on another cookbook that is recommended, but not required. A cookbook will still work even if recommended dependencies are not available.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">replaces</code></td> <td>Whether this cookbook should replace another (and can be used in-place of that cookbook).</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">suggests</code></td> <td>Add a dependency on another cookbook that is suggested, but not required. This field is weaker than <code class=\"docutils literal\">recommends</code>; a cookbook will still work even when suggested dependencies are not available.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">supports</code></td> <td>Show that a cookbook has a supported platform. Use a version constraint to define dependencies for platform versions: <code class=\"docutils literal\">&lt;</code> (less than), <code class=\"docutils literal\">&lt;=</code> (less than or equal to), <code class=\"docutils literal\">=</code> (equal to), <code class=\"docutils literal\">&gt;=</code> (greater than or equal to), <code class=\"docutils literal\">~&gt;</code> (approximately greater than), or <code class=\"docutils literal\">&gt;</code> (greater than). To specify more than one platform, use more than one <code class=\"docutils literal\">supports</code> field, once for each platform.</td> </tr> </tbody> </table>   <h2 id=\"environments\">Environments</h2> <p>An environment can use version constraints to specify a list of allowed cookbook versions by specifying the cookbook’s name, along with the version constraint. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cookbook 'apache2', '~&gt; 1.2.3'</pre> <p>Or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cookbook 'runit', '= 4.2.0'</pre> <p>If a cookbook is not explicitly given a version constraint the environment will assume the cookbook has no version constraint and will use any version of that cookbook with any node in the environment.</p>   <h2 id=\"freeze-versions\">Freeze Versions</h2> <p>A cookbook version can be frozen, which will prevent updates from being made to that version of a cookbook. (A user can always upload a new version of a cookbook.) Using cookbook versions that are frozen within environments is a reliable way to keep a production environment safe from accidental updates while testing changes that are made to a development infrastructure.</p> <p>For example, to freeze a cookbook version using knife, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook upload redis --freeze</pre> <p>To return:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Uploading redis...\nUpload completed</pre> <p>Once a cookbook version is frozen, only by using the <code class=\"docutils literal\">--force</code> option can an update be made. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook upload redis --force</pre> <p>Without the <code class=\"docutils literal\">--force</code> option specified, an error will be returned similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Version 0.0.0 of cookbook redis is frozen. Use --force to override</pre>   <h2 id=\"version-source-control\">Version Source Control</h2> <p>There are two strategies to consider when using version control as part of the cookbook management process:</p> <ul class=\"simple\"> <li>Use maximum version control when it is important to keep every bit of data within version control</li> <li>Use branch tracking when cookbooks are being managed in separate environments using git branches and the versioning policy information is already stored in a cookbook’s metadata.</li> </ul>  <h3 id=\"branch-tracking\">Branch Tracking</h3> <p>Using a branch tracking strategy requires that a branch for each environment exists in the source control and that each cookbook’s versioning policy is tracked at the branch level. This approach is relatively simple and lightweight: for development environments that track the latest cookbooks, just bump the version before a cookbook is uploaded for testing. For any cookbooks that require higher levels of version control, knife allows cookbooks to be uploaded to specific environments and for cookbooks to be frozen (which prevents others from being able to make changes to that cookbook).</p> <p>The typical workflow with a branch tracking version control strategy includes:</p> <ol class=\"arabic simple\"> <li>Bumping the version number as appropriate.</li> <li>Making changes to a cookbook.</li> <li>Uploading and testing a cookbook.</li> <li>Moving a tested cookbook to production.</li> </ol> <p>For example, to bump a version number, first make changes to the cookbook, and then upload and test it. Repeat this process as required, and then upload it using a knife command similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook upload my-app</pre> <p>When the cookbook is finished, move those changes to the production environment and use the <code class=\"docutils literal\">--freeze</code> option to prevent others from making further changes:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook upload  my-app -E production --freeze</pre>   <h3 id=\"maximum-versions\">Maximum Versions</h3> <p>Using a maximum version control strategy is required when everything needs to be tracked in source control. This approach is very similar to a branch tracking strategy while the cookbook is in development and being tested, but is more complicated and time-consuming (and requires file-level editing for environment data) in order to get the cookbook deployed to a production environment.</p> <p>The typical workflow with a maximum version control strategy includes:</p> <ol class=\"arabic simple\"> <li>Bumping the version number as appropriate.</li> <li>Making changes to a cookbook.</li> <li>Uploading and testing a cookbook.</li> <li>Moving a tested cookbook to production.</li> </ol> <p>For example, to bump a version number, first make changes to the cookbook, and then upload and test it. Repeat this process as required, and then upload it using a knife command similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook upload my-app</pre> <p>When the cookbook is finished, move those changes to the production environment and use the <code class=\"docutils literal\">--freeze</code> option to prevent others from making further changes:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook upload  my-app -E production --freeze</pre> <p>Then modify the environment so that it prefers the newly uploaded version:</p> <pre class=\"highlight-bash\" data-language=\"bash\">(vim|emacs|mate|ed) YOUR_REPO/environments/production.rb</pre> <p>Upload the updated environment:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment from file production.rb</pre> <p>And then deploy the new cookbook version.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/cookbook_versions.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/cookbook_versions.html</a>\n  </p>\n</div>\n","12-9/resource_apt_package":"<h1 id=\"apt-package\">apt_package</h1> <p>Use the <strong>apt_package</strong> resource to manage packages for the Debian and Ubuntu platforms.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>apt_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>apt_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">apt_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>apt_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">apt_package 'name' do\n  default_release            String\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::Apt\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">apt_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">default_release</code>, <code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:purge</code></dt> <dd>Purge a package. This action typically removes the configuration files as well as the package.</dd> <dt><code class=\"docutils literal\">:reconfig</code></dt> <dd>Reconfigure a package. This action requires a response file.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> <dt><code class=\"docutils literal\">:upgrade</code></dt> <dd>Install a package and/or ensure that a package is the latest version.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">default_release</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The default release. For example: <code class=\"docutils literal\">stable</code>.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command. For example, common apt-get directives, such as <code class=\"docutils literal\">--no-install-recommends</code>. See the <a class=\"reference external\" href=\"http://manpages.debian.net/cgi-bin/man.cgi?query=apt-get\">apt-get man page</a> for the full list.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The direct path to a dpkg or deb package.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>  <h3 id=\"multiple-packages\">Multiple Packages</h3> <p>A resource may specify multiple packages and/or versions for platforms that use Yum, Apt, Zypper, or Chocolatey package managers. Specifing multiple packages and/or versions allows a single transaction to:</p> <ul class=\"simple\"> <li>Download the specified packages and versions via a single HTTP transaction</li> <li>Update or install multiple packages with a single resource during the chef-client run</li> </ul> <p>For example, installing multiple packages:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package ['package1', 'package2']</pre> <p>Upgrading multiple packages:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package ['package1', 'package2']  do\n  action :upgrade\nend</pre> <p>Removing multiple packages:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package ['package1', 'package2']  do\n  action :remove\nend</pre> <p>Purging multiple packages:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package ['package1', 'package2']  do\n  action :purge\nend</pre> <p>Notifications, via an implicit name:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package ['package1', 'package2']  do\n  action :nothing\nend\n\nlog 'call a notification' do\n  notifies :install, 'package[package1, package2]', :immediately\nend</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Notifications and subscriptions do not need to be updated when packages and versions are added or removed from the <code class=\"docutils literal\">package_name</code> or <code class=\"docutils literal\">version</code> properties.</p> </div>    <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Apt</code>, <code class=\"docutils literal\">apt_package</code>\n</dt> <dd>The provider for the Debian and Ubuntu platforms.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a package using package manager</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">apt_package 'name of package' do\n  action :install\nend</pre> <p><strong>Install a package using local file</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">apt_package 'jwhois' do\n  action :install\n  source '/path/to/jwhois.deb'\nend</pre> <p><strong>Install without using recommend packages as a dependency</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'apache2' do\n  options '--no-install-recommends'\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_apt_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_apt_package.html</a>\n  </p>\n</div>\n","12-9/resource_apt_update":"<h1 id=\"apt-update\">apt_update</h1> <p>Use the <strong>apt_update</strong> resource to manage Apt repository updates on Debian and Ubuntu platforms.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>apt_update</strong> resource block defines the update frequency for Apt repositories:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">apt_update 'name' do\n  frequency                  Integer\n  action                     Symbol # defaults to :periodic if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">apt_update</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">frequency</code> is a property of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:periodic</code></dt> <dd>Update the Apt repository at the interval specified by the <code class=\"docutils literal\">frequency</code> property.</dd> <dt><code class=\"docutils literal\">:update</code></dt> <dd>Update the Apt repository at the start of the chef-client run.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">frequency</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The frequency at which Apt repository updates are made. Use this property when the <code class=\"docutils literal\">:periodic</code> action is specified. Default value: <code class=\"docutils literal\">86400</code>.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Update the Apt repository at a specified interval</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">apt_update 'all platforms' do\n  frequency 86400\n  action :periodic\nend</pre> <p><strong>Update the Apt repository at the start of a chef-client run</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">apt_update if node['platform_family'] == 'debian' do\n  action :update\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_apt_update.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_apt_update.html</a>\n  </p>\n</div>\n","12-9/attributes":"<h1 id=\"about-attributes\">About Attributes</h1> <p>An attribute is a specific detail about a node. Attributes are used by the chef-client to understand:</p> <ul class=\"simple\"> <li>The current state of the node</li> <li>What the state of the node was at the end of the previous chef-client run</li> <li>What the state of the node should be at the end of the current chef-client run</li> </ul> <p>Attributes are defined by:</p> <ul class=\"simple\"> <li>The state of the node itself</li> <li>Cookbooks (in attribute files and/or recipes)</li> <li>Roles</li> <li>Environments</li> </ul> <p>During every chef-client run, the chef-client builds the attribute list using:</p> <ul class=\"simple\"> <li>Data about the node collected by Ohai</li> <li>The node object that was saved to the Chef server at the end of the previous chef-client run</li> <li>The rebuilt node object from the current chef-client run, after it is updated for changes to cookbooks (attribute files and/or recipes), roles, and/or environments, and updated for any changes to the state of the node itself</li> </ul> <p>After the node object is rebuilt, all of attributes are compared, and then the node is updated based on attribute precedence. At the end of every chef-client run, the node object that defines the current state of the node is uploaded to the Chef server so that it can be indexed for search.</p> <p>So how does the chef-client determine which value should be applied? Keep reading to learn more about how attributes work, including more about the types of attributes, where attributes are saved, and how the chef-client chooses which attribute to apply.</p>  <h2 id=\"attribute-persistence\">Attribute Persistence</h2> <p>At the beginning of a chef-client run, all attributes are reset. The chef-client rebuilds them using automatic attributes collected by Ohai at the beginning of the chef-client run and then using default and override attributes that are specified in cookbooks or by roles and environments. Normal attributes are never reset. All attributes are then merged and applied to the node according to attribute precedence. At the conclusion of the chef-client run, the attributes that were applied to the node are saved to the Chef server as part of the node object.</p>   <h2 id=\"attribute-types\">Attribute Types</h2> <p>The chef-client uses six types of attributes to determine the value that is applied to a node during the chef-client run. In addition, the chef-client sources attribute values from up to five locations. The combination of attribute types and sources allows for up to 15 different competing values to be available to the chef-client during the chef-client run:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Attribute Type</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">default</code></td> <td>A <code class=\"docutils literal\">default</code> attribute is automatically reset at the start of every chef-client run and has the lowest attribute precedence. Use <code class=\"docutils literal\">default</code> attributes as often as possible in cookbooks.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">force_default</code></td> <td>Use the <code class=\"docutils literal\">force_default</code> attribute to ensure that an attribute defined in a cookbook (by an attribute file or by a recipe) takes precedence over a <code class=\"docutils literal\">default</code> attribute set by a role or an environment.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">normal</code></td> <td>A <code class=\"docutils literal\">normal</code> attribute is a setting that persists in the node object. A <code class=\"docutils literal\">normal</code> attribute has a higher attribute precedence than a <code class=\"docutils literal\">default</code> attribute.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">override</code></td> <td>An <code class=\"docutils literal\">override</code> attribute is automatically reset at the start of every chef-client run and has a higher attribute precedence than <code class=\"docutils literal\">default</code>, <code class=\"docutils literal\">force_default</code>, and <code class=\"docutils literal\">normal</code> attributes. An <code class=\"docutils literal\">override</code> attribute is most often specified in a recipe, but can be specified in an attribute file, for a role, and/or for an environment. A cookbook should be authored so that it uses <code class=\"docutils literal\">override</code> attributes only when required.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">force_override</code></td> <td>Use the <code class=\"docutils literal\">force_override</code> attribute to ensure that an attribute defined in a cookbook (by an attribute file or by a recipe) takes precedence over an <code class=\"docutils literal\">override</code> attribute set by a role or an environment.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">automatic</code></td> <td>An <code class=\"docutils literal\">automatic</code> attribute contains data that is identified by Ohai at the beginning of every chef-client run. An <code class=\"docutils literal\">automatic</code> attribute cannot be modified and always has the highest attribute precedence.</td> </tr> </tbody> </table>   <h2 id=\"attribute-sources\">Attribute Sources</h2> <p>Attributes are provided to the chef-client from the following locations:</p> <ul class=\"simple\"> <li>Nodes (collected by Ohai at the start of each chef-client run)</li> <li>Attribute files (in cookbooks)</li> <li>Recipes (in cookbooks)</li> <li>Environments</li> <li>Roles</li> </ul> <p>If we go back to the <a class=\"reference external\" href=\"https://docs.chef.io/release/11-18/chef_overview.html\">overview of Chef</a>, but then focus only on where attributes are located, it looks something like this:</p> <img alt=\"_images/overview_chef_11x_attributes.png\" src=\"https://docs.chef.io/release/12-9/_images/overview_chef_11x_attributes.png\"> <p>where</p> <ul class=\"simple\"> <li>Many attributes are maintained in the chef-repo for environments, roles, and cookbooks (attribute files and recipes)</li> <li>Many attributes are collected by Ohai on each individual node at the start of every chef-client run</li> <li>The attributes that are maintained in the chef-repo are uploaded to the Chef server from the workstation, periodically</li> <li>The chef-client will pull down the node object from the Chef server (which contains the attribute data from the previous chef-client run), after which all attributes (except <code class=\"docutils literal\">normal</code> are reset)</li> <li>The chef-client will update the cookbooks on the node (if required), which updates the attributes contained in attribute files and recipes</li> <li>The chef-client will update the role and environment data (if required)</li> <li>The chef-client will rebuild the attribute list and apply attribute precedence while configuring the node</li> <li>The chef-client pushes the node object to the Chef server at the end of the chef-client run; the updated node object on the Chef server is then indexed for search and is stored until the next chef-client run</li> </ul>  <h3 id=\"automatic-ohai\">Automatic (Ohai)</h3> <p>An automatic attribute is a specific detail about a node, such as an IP address, a host name, a list of loaded kernel modules, and so on. Automatic attributes are detected by Ohai and are then used by the chef-client to ensure that they are handled properly during every chef-client run. The most commonly accessed automatic attributes are:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Attribute</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">node['platform']</code></td> <td>The platform on which a node is running. This attribute helps determine which providers will be used.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">node['platform_version']</code></td> <td>The version of the platform. This attribute helps determine which providers will be used.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">node['ipaddress']</code></td> <td>The IP address for a node. If the node has a default route, this is the IPV4 address for the interface. If the node does not have a default route, the value for this attribute should be <code class=\"docutils literal\">nil</code>. The IP address for default route is the recommended default value.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">node['macaddress']</code></td> <td>The MAC address for a node, determined by the same interface that detects the <code class=\"docutils literal\">node['ipaddress']</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">node['fqdn']</code></td> <td>The fully qualified domain name for a node. This is used as the name of a node unless otherwise set.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">node['hostname']</code></td> <td>The host name for the node.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">node['domain']</code></td> <td>The domain for the node.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">node['recipes']</code></td> <td>A list of recipes associated with a node (and part of that node’s run-list).</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">node['roles']</code></td> <td>A list of roles associated with a node (and part of that node’s run-list).</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">node['ohai_time']</code></td> <td>The time at which Ohai was last run. This attribute is not commonly used in recipes, but it is saved to the Chef server and can be accessed using the <code class=\"docutils literal\">knife status</code> subcommand.</td> </tr> </tbody> </table> <p>The list of automatic attributes that are collected by Ohai at the start of each chef-client run vary from organization to organization, and will often vary between the various server types being configured and the platforms on which those servers are run. All attributes collected by Ohai are unmodifiable by the chef-client. To see which automatic attributes are collected by Ohai for a particular node, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ohai$ grep -R \"provides\" -h lib/ohai/plugins|sed 's/^\\s*//g'|sed \"s/\\\\\\\"/\\'/g\"|sort|uniq|grep ^provides</pre>   <h3 id=\"attribute-files\">Attribute Files</h3> <p>An attribute file is located in the <code class=\"docutils literal\">attributes/</code> sub-directory for a cookbook. When a cookbook is run against a node, the attributes contained in all attribute files are evaluated in the context of the node object. Node methods (when present) are used to set attribute values on a node. For example, the <code class=\"docutils literal\">apache2</code> cookbook contains an attribute file called <code class=\"docutils literal\">default.rb</code>, which contains the following attributes:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default['apache']['dir']          = '/etc/apache2'\ndefault['apache']['listen_ports'] = [ '80','443' ]</pre> <p>The use of the node object (<code class=\"docutils literal\">node</code>) is implicit in the previous example; the following example defines the node object itself as part of the attribute:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.default['apache']['dir']          = '/etc/apache2'\nnode.default['apache']['listen_ports'] = [ '80','443' ]</pre>   <h3 id=\"attribute-evaluation-order\">Attribute Evaluation Order</h3> <p>The chef-client evaluates attributes in the order defined by the run-list, including any attributes that are in the run-list because of cookbook dependencies.</p>  <h4 id=\"accessor-methods\">Accessor Methods</h4> <p>Attribute accessor methods are automatically created and the method invocation can be used interchangeably with the keys. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default.apache.dir          = '/etc/apache2'\ndefault.apache.listen_ports = [ '80','443' ]</pre> <p>This is a matter of style and preference for how attributes are reloaded from recipes, and may be seen when retrieving the value of an attribute.</p>   <h4 id=\"use-attribute-files\">Use Attribute Files</h4> <p>An attribute is a specific detail about a node, such as an IP address, a host name, a list of loaded kernel modules, the version(s) of available programming languages that are available, and so on. An attribute may be unique to a specific node or it can be identical across every node in the organization. Attributes are most commonly set from a cookbook, by using knife, or are retrieved by Ohai from each node prior to every chef-client run. All attributes are indexed for search on the Chef server. Good candidates for attributes include:</p> <ul class=\"simple\"> <li>any cross-platform abstraction for an application, such as the path to a configuration files</li> <li>default values for tunable settings, such as the amount of memory assigned to a process or the number of workers to spawn</li> <li>anything that may need to be persisted in node data between chef-client runs</li> </ul> <p>In general, attribute precedence is set to enable cookbooks and roles to define attribute defaults, for normal attributes to define the values that should be specific for a node, and for override attributes to force a certain value, even when a node already has that value specified.</p> <p>One approach is to set attributes at the same precedence level by setting attributes in a cookbook’s attribute files, and then also setting the same default attributes (but with different values) using a role. The attributes set in the role will be deep merged on top of the attributes from the attribute file, and the attributes set by the role will take precedence over the attributes specified in the cookbook’s attribute files.</p> <p>Another (much less common) approach is to set a value only if an attribute has no value. This can be done by using the <code class=\"docutils literal\">_unless</code> variants of the attribute priority methods:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">default_unless</code></li> <li>\n<code class=\"docutils literal\">set_unless</code> (<code class=\"docutils literal\">normal_unless</code> is an alias of <code class=\"docutils literal\">set_unless</code>; use either alias to set an attribute with a normal attribute precedence.)</li> <li><code class=\"docutils literal\">override_unless</code></li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Use the <code class=\"docutils literal\">_unless</code> variants carefully (and only when necessary) because when they are used, attributes applied to nodes may become out of sync with the values in the cookbooks as these cookbooks are updated. This approach can create situations where two otherwise identical nodes end up having slightly different configurations and can also be a challenge to debug.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Attributes can be configured in cookbooks (attribute files and recipes), roles, and environments. In addition, Ohai collects attribute data about each node at the start of the chef-client run. See <a class=\"reference external\" href=\"https://docs.chef.io/attributes.html\">https://docs.chef.io/attributes.html</a> for more information about how all of these attributes fit together.</p> </div>  <h5 id=\"file-methods\">File Methods</h5> <p>Use the following methods within the attributes file for a cookbook or within a recipe. These methods correspond to the attribute type of the same name:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">override</code></li> <li><code class=\"docutils literal\">default</code></li> <li>\n<code class=\"docutils literal\">normal</code> (or <code class=\"docutils literal\">set</code>, where <code class=\"docutils literal\">set</code> is an alias for <code class=\"docutils literal\">normal</code>)</li> <li><code class=\"docutils literal\">_unless</code></li> <li><code class=\"docutils literal\">attribute?</code></li> </ul> <p><strong>attribute?</strong></p> <p>A useful method that is related to attributes is the <code class=\"docutils literal\">attribute?</code> method. This method will check for the existence of an attribute, so that processing can be done in an attributes file or recipe, but only if a specific attribute exists.</p> <p>Using <code class=\"docutils literal\">attribute?()</code> in an attributes file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if attribute?('ec2')\n  # ... set stuff related to EC2\nend</pre> <p>Using <code class=\"docutils literal\">attribute?()</code> in a recipe:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if node.attribute?('ec2')\n  # ... do stuff on EC2 nodes\nend</pre>     <h3 id=\"recipes\">Recipes</h3> <p>A recipe is the most fundamental configuration element within the organization. A recipe:</p> <ul class=\"simple\"> <li>Is authored using Ruby, which is a programming language designed to read and behave in a predictable manner</li> <li>Is mostly a collection of resources, defined using patterns (resource names, attribute-value pairs, and actions); helper code is added around this using Ruby, when needed</li> <li>Must define everything that is required to configure part of a system</li> <li>Must be stored in a cookbook</li> <li>May be included in a recipe</li> <li>May use the results of a search query and read the contents of a data bag (including an encrypted data bag)</li> <li>May have a dependency on one (or more) recipes</li> <li>May tag a node to facilitate the creation of arbitrary groupings</li> <li>Must be added to a run-list before it can be used by the chef-client</li> <li>Is always executed in the same order as listed in a run-list</li> </ul> <p>An attribute can be defined in a cookbook (or a recipe) and then used to override the default settings on a node. When a cookbook is loaded during a chef-client run, these attributes are compared to the attributes that are already present on the node. Attributes that are defined in attribute files are first loaded according to cookbook order. For each cookbook, attributes in the <code class=\"docutils literal\">default.rb</code> file are loaded first, and then additional attribute files (if present) are loaded in lexical sort order. When the cookbook attributes take precedence over the default attributes, the chef-client will apply those new settings and values during the chef-client run on the node.</p>   <h3 id=\"roles\">Roles</h3> <p>A role is a way to define certain patterns and processes that exist across nodes in an organization as belonging to a single job function. Each role consists of zero (or more) attributes and a run-list. Each node can have zero (or more) roles assigned to it. When a role is run against a node, the configuration details of that node are compared against the attributes of the role, and then the contents of that role’s run-list are applied to the node’s configuration details. When a chef-client runs, it merges its own attributes and run-lists with those contained within each assigned role.</p> <p>An attribute can be defined in a role and then used to override the default settings on a node. When a role is applied during a chef-client run, these attributes are compared to the attributes that are already present on the node. When the role attributes take precedence over the default attributes, the chef-client will apply those new settings and values during the chef-client run on the node.</p> <p>A role attribute can only be set to be a default attribute or an override attribute. A role attribute cannot be set to be a normal attribute. Use the <code class=\"docutils literal\">default_attribute</code> and <code class=\"docutils literal\">override_attribute</code> methods in the Ruby DSL file or the <code class=\"docutils literal\">default_attributes</code> and <code class=\"docutils literal\">override_attributes</code> hashes in a JSON data file.</p>   <h3 id=\"environments\">Environments</h3> <p>An environment is a way to map an organization’s real-life workflow to what can be configured and managed when using Chef server. Every organization begins with a single environment called the <code class=\"docutils literal\">_default</code> environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization’s patterns and workflow. For example, creating <code class=\"docutils literal\">production</code>, <code class=\"docutils literal\">staging</code>, <code class=\"docutils literal\">testing</code>, and <code class=\"docutils literal\">development</code> environments. Generally, an environment is also associated with one (or more) cookbook versions.</p> <p>An attribute can be defined in an environment and then used to override the default settings on a node. When an environment is applied during a chef-client run, these attributes are compared to the attributes that are already present on the node. When the environment attributes take precedence over the default attributes, the chef-client will apply those new settings and values during the chef-client run on the node.</p> <p>An environment attribute can only be set to be a default attribute or an override attribute. An environment attribute cannot be set to be a <code class=\"docutils literal\">normal</code> attribute. Use the <code class=\"docutils literal\">default_attribute</code> and <code class=\"docutils literal\">override_attribute</code> methods in the Ruby DSL file or the <code class=\"docutils literal\">default_attributes</code> and <code class=\"docutils literal\">override_attributes</code> hashes in a JSON data file.</p>    <h2 id=\"attribute-precedence\">Attribute Precedence</h2> <p>Attributes are always applied by the chef-client in the following order:</p> <ol class=\"arabic simple\"> <li>A <code class=\"docutils literal\">default</code> attribute located in a cookbook attribute file</li> <li>A <code class=\"docutils literal\">default</code> attribute located in a recipe</li> <li>A <code class=\"docutils literal\">default</code> attribute located in an environment</li> <li>A <code class=\"docutils literal\">default</code> attribute located in role</li> <li>A <code class=\"docutils literal\">force_default</code> attribute located in a cookbook attribute file</li> <li>A <code class=\"docutils literal\">force_default</code> attribute located in a recipe</li> <li>A <code class=\"docutils literal\">normal</code> attribute located in a cookbook attribute file</li> <li>A <code class=\"docutils literal\">normal</code> attribute located in a recipe</li> <li>An <code class=\"docutils literal\">override</code> attribute located in a cookbook attribute file</li> <li>An <code class=\"docutils literal\">override</code> attribute located in a recipe</li> <li>An <code class=\"docutils literal\">override</code> attribute located in a role</li> <li>An <code class=\"docutils literal\">override</code> attribute located in an environment</li> <li>A <code class=\"docutils literal\">force_override</code> attribute located in a cookbook attribute file</li> <li>A <code class=\"docutils literal\">force_override</code> attribute located in a recipe</li> <li>An <code class=\"docutils literal\">automatic</code> attribute identified by Ohai at the start of the chef-client run</li> </ol> <p>where the last attribute in the list is the one that is applied to the node.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The attribute precedence order for roles and environments is reversed for <code class=\"docutils literal\">default</code> and <code class=\"docutils literal\">override</code> attributes. The precedence order for <code class=\"docutils literal\">default</code> attributes is environment, then role. The precedence order for <code class=\"docutils literal\">override</code> attributes is role, then environment. Applying environment <code class=\"docutils literal\">override</code> attributes after role <code class=\"docutils literal\">override</code> attributes allows the same role to be used across multiple environments, yet ensuring that values can be set that are specific to each environment (when required). For example, the role for an application server may exist in all environments, yet one environment may use a database server that is different from other environments.</p> </div> <p>Attribute precedence, viewed from the same perspective as the overview diagram, where the numbers in the diagram match the order of attribute precedence:</p> <img alt=\"_images/overview_chef_attributes_precedence.png\" src=\"https://docs.chef.io/release/12-9/_images/overview_chef_attributes_precedence.png\"> <p>Attribute precedence, when viewed as a table:</p> <img alt=\"_images/overview_chef_attributes_table.png\" src=\"https://docs.chef.io/release/12-9/_images/overview_chef_attributes_table.png\">  <h3 id=\"whitelist-attributes\">Whitelist Attributes</h3> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">When these settings are used, any attribute not defined in a whitelist will not be saved. Each attribute type is whitelisted independently of the other attribute types. For example, if <code class=\"docutils literal\">automatic_attribute_whitelist</code> defines attributes to be saved, but <code class=\"docutils literal\">normal_attribute_whitelist</code>, <code class=\"docutils literal\">default_attribute_whitelist</code>, and <code class=\"docutils literal\">override_attribute_whitelist</code> are not defined, then all normal, default and override attributes are saved, along with only the specified automatic attributes.</p> </div> <p>Attributes that should be saved by a node may be whitelisted in the client.rb file. The whitelist is a Hash of keys that specify each attribute to be saved.</p> <p>Attribute are whitelisted by attribute type, with each attribute type being whitelisted independently. Each attribute type—<code class=\"docutils literal\">automatic</code>, <code class=\"docutils literal\">default</code>, <code class=\"docutils literal\">normal</code>, and <code class=\"docutils literal\">override</code>—may define whitelists by using the following settings in the client.rb file:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">automatic_attribute_whitelist</code></td> <td>A Hash that whitelists <code class=\"docutils literal\">automatic</code> attributes, preventing non-whitelisted attributes from being saved. For example: <code class=\"docutils literal\">['network/interfaces/eth0']</code>. Default value: all attributes are saved. If the Hash is empty, no attributes are saved.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">default_attribute_whitelist</code></td> <td>A Hash that whitelists <code class=\"docutils literal\">default</code> attributes, preventing non-whitelisted attributes from being saved. For example: <code class=\"docutils literal\">['filesystem/dev/disk0s2/size']</code>. Default value: all attributes are saved. If the Hash is empty, no attributes are saved.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">normal_attribute_whitelist</code></td> <td>A Hash that whitelists <code class=\"docutils literal\">normal</code> attributes, preventing non-whitelisted attributes from being saved. For example: <code class=\"docutils literal\">['filesystem/dev/disk0s2/size']</code>. Default value: all attributes are saved. If the Hash is empty, no attributes are saved.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">override_attribute_whitelist</code></td> <td>A Hash that whitelists <code class=\"docutils literal\">override</code> attributes, preventing non-whitelisted attributes from being saved. For example: <code class=\"docutils literal\">['map - autohome/size']</code>. Default value: all attributes are saved. If the Hash is empty, no attributes are saved.</td> </tr> </tbody> </table> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">It is recommended that only <code class=\"docutils literal\">automatic_attribute_whitelist</code> be used to whitelist attributes. This is primarily because automatic attributes generate the most data, but also that normal, default, and override attributes are typically much more important attributes and are more likely to cause issues if they are whitelisted incorrectly.</p> </div> <p>For example, normal attribute data similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"filesystem\" =&gt; {\n    \"/dev/disk0s2\" =&gt; {\n      \"size\" =&gt; \"10mb\"\n    },\n    \"map - autohome\" =&gt; {\n      \"size\" =&gt; \"10mb\"\n    }\n  },\n  \"network\" =&gt; {\n    \"interfaces\" =&gt; {\n      \"eth0\" =&gt; {...},\n      \"eth1\" =&gt; {...},\n    }\n  }\n}</pre> <p>To whitelist the <code class=\"docutils literal\">network</code> attributes and prevent the other attributes from being saved, update the client.rb file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">normal_attribute_whitelist ['network/interfaces/']</pre> <p>When a whitelist is defined, any attribute of that type that is not specified in that attribute whitelist <strong>will not</strong> be saved. So based on the previous whitelist for normal attributes, the <code class=\"docutils literal\">filesystem</code> and <code class=\"docutils literal\">map - autohome</code> attributes will not be saved, but the <code class=\"docutils literal\">network</code> attributes will.</p> <p>Leave the value empty to prevent all attributes of that attribute type from being saved:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">normal_attribute_whitelist []</pre> <p>For attributes that contain slashes (<code class=\"docutils literal\">/</code>) within the attribute value, such as the <code class=\"docutils literal\">filesystem</code> attribute <code class=\"docutils literal\">'/dev/diskos2'</code>, use an array. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">automatic_attribute_whitelist [['filesystem','/dev/diskos2']]</pre>   <h3 id=\"examples\">Examples</h3> <p>The following examples are listed from low to high precedence.</p> <p><strong>Default attribute in /attributes/default.rb</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default['apache']['dir'] = '/etc/apache2'</pre> <p><strong>Default attribute in node object in recipe</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.default['apache']['dir'] = '/etc/apache2'</pre> <p><strong>Default attribute in /environments/environment_name.rb</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default_attributes({ 'apache' =&gt; {'dir' =&gt; '/etc/apache2'}})</pre> <p><strong>Default attribute in /roles/role_name.rb</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default_attributes({ 'apache' =&gt; {'dir' =&gt; '/etc/apache2'}})</pre> <p><strong>Normal attribute set as a cookbook attribute</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">set['apache']['dir'] = '/etc/apache2'\nnormal['apache']['dir'] = '/etc/apache2'  #set is an alias of normal.</pre> <p><strong>Normal attribute set in a recipe</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.set['apache']['dir'] = '/etc/apache2'\n\nnode.normal['apache']['dir'] = '/etc/apache2' # Same as above\nnode['apache']['dir'] = '/etc/apache2'       # Same as above</pre> <p><strong>Override attribute in /attributes/default.rb</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">override['apache']['dir'] = '/etc/apache2'</pre> <p><strong>Override attribute in /roles/role_name.rb</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">override_attributes({ 'apache' =&gt; {'dir' =&gt; '/etc/apache2'}})</pre> <p><strong>Override attribute in /environments/environment_name.rb</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">override_attributes({ 'apache' =&gt; {'dir' =&gt; '/etc/apache2'}})</pre> <p><strong>Override attribute in a node object (from a recipe)</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.override['apache']['dir'] = '/etc/apache2'</pre> <p><strong>Ensure that a default attribute has precedence over other attributes</strong></p> <p>When a default attribute is set like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default['attribute'] = 'value'</pre> <p>any value set by a role or an environment will replace it. To prevent this value from being replaced, use the <code class=\"docutils literal\">force_default</code> attribute precedence:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">force_default['attribute'] = 'I will crush you, role or environment attribute'</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default!['attribute'] = \"The '!' means I win!\"</pre> <p><strong>Ensure that an override attribute has precedence over other attributes</strong></p> <p>When an override attribute is set like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">override['attribute'] = 'value'</pre> <p>any value set by a role or an environment will replace it. To prevent this value from being replaced, use the <code class=\"docutils literal\">force_override</code> attribute precedence:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">force_override['attribute'] = 'I will crush you, role or environment attribute'</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">override!['attribute'] = \"The '!' means I win!\"</pre>    <h2 id=\"change-attributes\">Change Attributes</h2> <p>Starting with chef-client 12.0, attribute precedence levels may be</p> <ul class=\"simple\"> <li>Removed for a specific, named attribute precedence level</li> <li>Removed for all attribute precedence levels</li> <li>Fully assigned attributes</li> </ul>  <h3 id=\"remove-precedence-level\">Remove Precedence Level</h3> <p>A specific attribute precedence level for default, normal, and override attributes may be removed by using one of the following syntax patterns.</p> <p>For default attributes:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">node.rm_default('foo', 'bar')</code></li> </ul> <p>For normal attributes:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">node.rm_normal('foo', 'bar')</code></li> </ul> <p>For override attributes:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">node.rm_override('foo', 'bar')</code></li> </ul> <p>These patterns return the computed value of the key being deleted for the specified precedence level.</p>  <h4 id=\"id1\">Examples</h4> <p>The following examples show how to remove a specific, named attribute precedence level.</p> <p><strong>Delete a default value when only default values exist</strong></p> <p>Given the following code structure under <code class=\"docutils literal\">'foo'</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.default['foo'] = {\n  'bar' =&gt; {\n    'baz' =&gt; 52,\n    'thing' =&gt; 'stuff',\n  },\n  'bat' =&gt; {\n    'things' =&gt; [5, 6],\n  },\n}</pre> <p>And some role attributes:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># Please don't ever do this in real code :)\nnode.role_default['foo']['bar']['thing'] = 'otherstuff'</pre> <p>And a force attribute:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.force_default['foo']['bar']['thing'] = 'allthestuff'</pre> <p>When the default attribute precedence <code class=\"docutils literal\">node['foo']['bar']</code> is removed:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.rm_default('foo', 'bar') #=&gt; {'baz' =&gt; 52, 'thing' =&gt; 'allthestuff'}</pre> <p>What is left under <code class=\"docutils literal\">'foo'</code> is only <code class=\"docutils literal\">'bat'</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.attributes.combined_default['foo'] #=&gt; {'bat' =&gt; { 'things' =&gt; [5,6] } }</pre> <p><strong>Delete default without touching higher precedence attributes</strong></p> <p>Given the following code structure:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.default['foo'] = {\n  'bar' =&gt; {\n    'baz' =&gt; 52,\n    'thing' =&gt; 'stuff',\n  },\n  'bat' =&gt; {\n    'things' =&gt; [5, 6],\n  },\n}</pre> <p>And some role attributes:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># Please don't ever do this in real code :)\nnode.role_default['foo']['bar']['thing'] = 'otherstuff'</pre> <p>And a force attribute:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.force_default['foo']['bar']['thing'] = 'allthestuff'</pre> <p>And also some override attributes:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.override['foo']['bar']['baz'] = 99</pre> <p>Same delete as before:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.rm_default('foo', 'bar') #=&gt; { 'baz' =&gt; 52, 'thing' =&gt; 'allthestuff' }</pre> <p>The other attribute precedence levels are unaffected:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.attributes.combined_override['foo'] #=&gt; { 'bar' =&gt; {'baz' =&gt; 99} }\nnode['foo'] #=&gt; { 'bar' =&gt; {'baz' =&gt; 99}, 'bat' =&gt; { 'things' =&gt; [5,6] }</pre> <p><strong>Delete override without touching lower precedence attributes</strong></p> <p>Given the following code structure, which has an override attribute:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.override['foo'] = {\n  'bar' =&gt; {\n    'baz' =&gt; 52,\n    'thing' =&gt; 'stuff',\n  },\n  'bat' =&gt; {\n    'things' =&gt; [5, 6],\n  },\n}</pre> <p>with a single default value:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.default['foo']['bar']['baz'] = 11</pre> <p>and a force at each attribute precedence:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.force_default['foo']['bar']['baz'] = 55\nnode.force_override['foo']['bar']['baz'] = 99</pre> <p>Delete the override:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.rm_override('foo', 'bar') #=&gt; { 'baz' =&gt; 99, 'thing' =&gt; 'stuff' }</pre> <p>The other attribute precedence levels are unaffected:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.attributes.combined_default['foo'] #=&gt; { 'bar' =&gt; {'baz' =&gt; 55} }</pre> <p><strong>Non-existent key deletes return nil</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.rm_default(\"no\", \"such\", \"thing\") #=&gt; nil</pre>    <h3 id=\"remove-all-levels\">Remove All Levels</h3> <p>All attribute precedence levels may be removed by using the following syntax pattern:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">node.rm('foo', 'bar')</code></li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Using <code class=\"docutils literal\">node['foo'].delete('bar')</code> will throw an exception that points to the new API.</p> </div>  <h4 id=\"id2\">Examples</h4> <p>The following examples show how to remove all attribute precedence levels.</p> <p><strong>Delete all attribute precedence levels</strong></p> <p>Given the following code structure:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.default['foo'] = {\n  'bar' =&gt; {\n    'baz' =&gt; 52,\n    'thing' =&gt; 'stuff',\n  },\n  'bat' =&gt; {\n    'things' =&gt; [5, 6],\n  },\n}</pre> <p>With override attributes:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.override['foo']['bar']['baz'] = 999</pre> <p>Removing the <code class=\"docutils literal\">'bar'</code> key returns the computed value:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.rm('foo', 'bar') #=&gt; {'baz' =&gt; 999, 'thing' =&gt; 'stuff'}</pre> <p>Looking at <code class=\"docutils literal\">'foo'</code>, all that’s left is the <code class=\"docutils literal\">'bat'</code> entry:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node['foo'] #=&gt; {'bat' =&gt; { 'things' =&gt; [5,6] } }</pre> <p><strong>Non-existent key deletes return nil</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.rm_default(\"no\", \"such\", \"thing\") #=&gt; nil</pre>    <h3 id=\"full-assignment\">Full Assignment</h3> <p>Use <code class=\"docutils literal\">!</code> to clear out the key for the named attribute precedence level, and then complete the write by using one of the following syntax patterns:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">node.default!['foo']['bar'] = {...}</code></li> <li><code class=\"docutils literal\">node.force_default!['foo']['bar'] = {...}</code></li> <li><code class=\"docutils literal\">node.normal!['foo']['bar'] = {...}</code></li> <li><code class=\"docutils literal\">node.override!['foo']['bar'] = {...}</code></li> <li><code class=\"docutils literal\">node.force_override!['foo']['bar'] = {...}</code></li> </ul>  <h4 id=\"id3\">Examples</h4> <p>The following examples show how to remove all attribute precedence levels.</p> <p><strong>Just one component</strong></p> <p>Given the following code structure:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.default['foo']['bar'] = {'a' =&gt; 'b'}\nnode.default!['foo']['bar'] = {'c' =&gt; 'd'}</pre> <p>The <code class=\"docutils literal\">'!'</code> caused the entire ‘bar’ key to be overwritten: .. code-block:: ruby</p> <blockquote> <div>node[‘foo’] #=&gt; {‘bar’ =&gt; {‘c’ =&gt; ‘d’}</div>\n</blockquote> <p><strong>Multiple components; one “after”</strong></p> <p>Given the following code structure:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.default['foo']['bar'] = {'a' =&gt; 'b'}\n# Please don't ever do this in real code :)\nnode.role_default['foo']['bar'] = {'c' =&gt; 'd'}\nnode.default!['foo']['bar'] = {'d' =&gt; 'e'}</pre> <p>The <code class=\"docutils literal\">'!'</code> write overwrote the “cookbook-default” value of <code class=\"docutils literal\">'bar'</code>, but since role data is later in the resolution list, it was unaffected:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node['foo'] #=&gt; {'bar' =&gt; {'c' =&gt; 'd', 'd' =&gt; 'e'}</pre> <p><strong>Multiple components; all “before”</strong></p> <p>Given the following code structure:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.default['foo']['bar'] = {'a' =&gt; 'b'}\n# Please don't ever do this in real code :)\nnode.role_default['foo']['bar'] = {'c' =&gt; 'd'}\nnode.force_default!['foo']['bar'] = {'d' =&gt; 'e'}</pre> <p>With <code class=\"docutils literal\">force_default!</code> there is no other data under <code class=\"docutils literal\">'bar'</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node['foo'] #=&gt; {'bar' =&gt; {'d' =&gt; 'e'}</pre> <p><strong>Multiple precedence levels</strong></p> <p>Given the following code structure:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.default['foo'] = {\n  'bar' =&gt; {\n    'baz' =&gt; 52,\n    'thing' =&gt; 'stuff',\n  },\n  'bat' =&gt; {\n   'things' =&gt; [5, 6],\n  },\n}</pre> <p>And some attributes:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># Please don't ever do this in real code :)\nnode.role_default['foo']['bar']['baz'] = 55\nnode.force_default['foo']['bar']['baz'] = 66</pre> <p>And other precedence levels:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.normal['foo']['bar']['baz'] = 88\nnode.override['foo']['bar']['baz'] = 99</pre> <p>With a full assignment:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.default!['foo']['bar'] = {}</pre> <p>Role default and force default are left in default, plus other precedence levels:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.attributes.combined_default['foo'] #=&gt; {'bar' =&gt; {'baz' =&gt; 66}, 'bat'=&gt;{'things'=&gt;[5, 6]}}\nnode.attributes.normal['foo'] #=&gt; {'bar' =&gt; {'baz' =&gt; 88}}\nnode.attributes.combined_override['foo'] #=&gt; {'bar' =&gt; {'baz' =&gt; 99}}\nnode['foo']['bar'] #=&gt; {'baz' =&gt; 99}</pre> <p>If <code class=\"docutils literal\">force_default!</code> is written:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.force_default!['foo']['bar'] = {}</pre> <p>the difference is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.attributes.combined_default['foo'] #=&gt; {'bat'=&gt;{'things'=&gt;[5, 6]}, 'bar' =&gt; {}}\nnode.attributes.normal['foo'] #=&gt; {'bar' =&gt; {'baz' =&gt; 88}}\nnode.attributes.combined_override['foo'] #=&gt; {'bar' =&gt; {'baz' =&gt; 99}}\nnode['foo']['bar'] #=&gt; {'baz' =&gt; 99}</pre>     <h2 id=\"about-deep-merge\">About Deep Merge</h2> <p>Attributes are typically defined in cookbooks, recipes, roles, and environments. These attributes are rolled-up to the node level during a chef-client run. A recipe can store attribute values using a multi-level Hash or array.</p> <p>For example, a group of attributes for web servers might be:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">override_attributes(\n  :apache =&gt; {\n    :listen_ports =&gt; [ 80 ],\n    :prefork =&gt; {\n      :startservers =&gt; 20,\n      :minspareservers =&gt; 20,\n      :maxspareservers =&gt; 40\n    }\n  }\n)</pre> <p>But what if all of the web servers are not the same? What if some of the web servers required a single attribute to have a different value? You could store these settings in two locations, once just like the preceding example and once just like the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">override_attributes(\n  :apache =&gt; {\n    :listen_ports =&gt; [ 80 ],\n    :prefork =&gt; {\n      :startservers =&gt; 30,\n      :minspareservers =&gt; 20,\n      :maxspareservers =&gt; 40\n    }\n  }\n)</pre> <p>But that is not very efficient, especially because most of them are identical. The deep merge capabilities of the chef-client allows attributes to be layered across cookbooks, recipes, roles, and environments. This allows an attribute to be reused across nodes, making use of default attributes set at the cookbook level, but also providing a way for certain attributes (with a higher attribute precedence) to be applied only when they are supposed to be.</p> <p>For example, a role named <code class=\"docutils literal\">baseline.rb</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">name \"baseline\"\ndescription \"The most basic role for all configurations\"\nrun_list \"recipe[baseline]\"\n\noverride_attributes(\n  :apache =&gt; {\n    :listen_ports =&gt; [ 80 ],\n    :prefork =&gt; {\n      :startservers =&gt; 20,\n      :minspareservers =&gt; 20,\n      :maxspareservers =&gt; 40\n    }\n  }\n)</pre> <p>and then a role named <code class=\"docutils literal\">web.rb</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">name 'web'\ndescription 'Web server config'\nrun_list 'role[baseline]'\n\noverride_attributes(\n  :apache =&gt; {\n    :prefork =&gt; {\n      :startservers =&gt; 30\n    }\n  }\n)</pre> <p>Both of these files are similar. They share the same structure. When an attribute is of the same type of data, such as a hash or an array, that data is merged when the attribute precedence levels are the same and is replaced when the attribute precedence levels are different.</p> <p>For example, the <code class=\"docutils literal\">web.rb</code> references the <code class=\"docutils literal\">baseline.rb</code> role. The <code class=\"docutils literal\">web.rb</code> file only provides a value for one attribute: <code class=\"docutils literal\">:startservers</code>. When the chef-client compares these attributes, the deep merge feature will ensure that <code class=\"docutils literal\">:startservers</code> (and its value of <code class=\"docutils literal\">30</code>) will be applied to any node for which the <code class=\"docutils literal\">web.rb</code> attribute structure should be applied.</p> <p>This approach will allow a recipe like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">include_recipe 'apache2'\nChef::Log.info(node['apache']['prefork'].to_hash)</pre> <p>and a <code class=\"docutils literal\">run_list</code> like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">run_list/web.json\n{\n  \"run_list\": [ \"role[web]\" ]\n}</pre> <p>to produce results like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">[Tue, 16 Aug 2011 14:44:26 -0700] INFO:\n         {\n           \"startservers\"=&gt;30,\n           \"minspareservers\"=&gt;20,\n           \"maxspareservers\"=&gt;40,\n           \"serverlimit\"=&gt;400,\n           \"maxclients\"=&gt;400,\n           \"maxrequestsperchild\"=&gt;10000\n         }</pre> <p>Even though the <code class=\"docutils literal\">web.rb</code> file does not contain attributes and values for <code class=\"docutils literal\">minspareservers</code>, <code class=\"docutils literal\">maxspareservers</code>, <code class=\"docutils literal\">serverlimit</code>, <code class=\"docutils literal\">maxclients</code>, and <code class=\"docutils literal\">maxrequestsperchild</code>, the deep merge capabilities pulled them in.</p> <p>The following sections show how the logic works for using deep merge to perform substitutions and additions of attributes.</p>  <h3 id=\"substitution\">Substitution</h3> <p>The following examples show how the logic works for substituting an existing string using a hash:</p> <pre class=\"highlight-python\" data-language=\"python\">role_or_environment 1 { :x =&gt; '1', :y =&gt; '2' }\n+\nrole_or_environment 2 { :y =&gt; '3' }\n=\n{ :x =&gt; '1', :y =&gt; '3' }</pre> <p>For substituting an existing boolean using a hash:</p> <pre class=\"highlight-python\" data-language=\"python\">role_or_environment 1 { :x =&gt; true, :y =&gt; false }\n+\nrole_or_environment 2 { :y =&gt; true }\n=\n{ :x =&gt; true, :y =&gt; true }</pre> <p>For substituting an array with a hash:</p> <pre class=\"highlight-python\" data-language=\"python\">role_or_environment 1 [ '1', '2', '3' ]\n+\nrole_or_environment 2 { :x =&gt; '1' , :y =&gt; '2' }\n=\n{ :x =&gt; '1', :y =&gt; '2' }</pre> <p>When items cannot be merged through substitution, the original data is overwritten.</p>   <h3 id=\"addition\">Addition</h3> <p>The following examples show how the logic works for adding a string using a hash:</p> <pre class=\"highlight-python\" data-language=\"python\">role_or_environment 1 { :x =&gt; '1', :y =&gt; '2' }\n+\nrole_or_environment 2 { :z =&gt; '3' }\n=\n{ :x =&gt; '1', :y =&gt; '2', :z =&gt; '3' }</pre> <p>For adding a string using an array:</p> <pre class=\"highlight-python\" data-language=\"python\">role_or_environment 1 [ '1', '2' ]\n+\nrole_or_environment 2 [ '3' ]\n=\n[ '1', '2', '3' ]</pre> <p>For adding a string using a multi-level hash:</p> <pre class=\"highlight-python\" data-language=\"python\">role_or_environment 1 { :x =&gt; { :y =&gt; '2' } }\n+\nrole_or_environment 2 { :x =&gt; { :z =&gt; '3' } }\n=\n{ :x =&gt; { :y =&gt; '2', :z =&gt; '3' } }</pre> <p>For adding a string using a multi-level array:</p> <pre class=\"highlight-python\" data-language=\"python\">role_or_environment 1 [ [ 1, 2 ] ]\n+\nrole_or_environment 2 [ [ 3 ] ]\n=\n[ [ 1, 2 ], [ 3 ] ]</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/attributes.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/attributes.html</a>\n  </p>\n</div>\n","12-9/ruby":"<h1 id=\"chef-style-guide\">Chef Style Guide</h1> <p>Ruby is a simple programming language:</p> <ul class=\"simple\"> <li>Chef uses Ruby as its reference language to define the patterns that are found in resources, recipes, and cookbooks</li> <li>Use these patterns to configure, deploy, and manage nodes across the network</li> </ul> <p>Ruby is also a powerful and complete programming language:</p> <ul class=\"simple\"> <li>Use the Ruby programming language to make decisions about what should happen to specific resources and recipes</li> <li>Extend Chef in any manner that your organization requires</li> </ul>  <h2 id=\"ruby-basics\">Ruby Basics</h2> <p>This section covers the basics of Ruby.</p>  <h3 id=\"verify-syntax\">Verify Syntax</h3> <p>Many people who are new to Ruby often find that it doesn’t take very long to get up to speed with the basics. For example, it’s useful to know how to check the syntax of a Ruby file, such as the contents of a cookbook named <code class=\"docutils literal\">my_cookbook.rb</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ruby -c my_cookbook_file.rb</pre> <p>to return:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Syntax OK</pre>   <h3 id=\"comments\">Comments</h3> <p>Use a comment to explain code that exists in a cookbook or recipe. Anything after a <code class=\"docutils literal\">#</code> is a comment.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># This is a comment.</pre>   <h3 id=\"local-variables\">Local Variables</h3> <p>Assign a local variable:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">x = 1</pre>   <h3 id=\"math\">Math</h3> <p>Do some basic arithmetic:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">1 + 2           # =&gt; 3\n2 * 7           # =&gt; 14\n5 / 2           # =&gt; 2   (because both arguments are whole numbers)\n5 / 2.0         # =&gt; 2.5 (because one of the numbers had a decimal place)\n1 + (2 * 3)     # =&gt; 7   (you can use parens to group expressions)</pre>   <h3 id=\"strings\">Strings</h3> <p>Work with strings:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">'single quoted'   # =&gt; \"single quoted\"\n\"double quoted\"   # =&gt; \"double quoted\"\n'It\\'s alive!'    # =&gt; \"It's alive!\" (the \\ is an escape character)\n'1 + 2 = 5'       # =&gt; \"1 + 2 = 5\" (numbers surrounded by quotes behave like strings)</pre> <p>Convert a string to uppercase or lowercase. For example, a hostname named “Foo”:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node['hostname'].downcase    # =&gt; \"foo\"\nnode['hostname'].upcase      # =&gt; \"FOO\"</pre>  <h4 id=\"ruby-in-strings\">Ruby in Strings</h4> <p>Embed Ruby in a string:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">x = 'Bob'\n\"Hi, #{x}\"      # =&gt; \"Hi, Bob\"\n'Hello, #{x}'   # =&gt; \"Hello, \\#{x}\" Notice that single quotes don't work with #{}</pre>   <h4 id=\"escape-character\">Escape Character</h4> <p>Use the backslash character (<code class=\"docutils literal\">\\</code>) as an escape character when quotes must appear within strings. However, you do not need to escape single quotes inside double quotes. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">'It\\'s alive!'                        # =&gt; \"It's alive!\"\n\"Won\\'t you read Grant\\'s book?\"      # =&gt; \"Won't you read Grant's book?\"</pre>   <h4 id=\"interpolation\">Interpolation</h4> <p>When strings have quotes within quotes, use double quotes (<code class=\"docutils literal\">\" \"</code>) on the outer quotes, and then single quotes (<code class=\"docutils literal\">' '</code>) for the inner quotes. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef::Log.info(\"Loaded from aws[#{aws['id']}]\")</pre> <pre class=\"highlight-ruby\" data-language=\"ruby\">\"node['mysql']['secretpath']\"</pre> <pre class=\"highlight-ruby\" data-language=\"ruby\">\"#{ENV['HOME']}/chef.txt\"</pre> <pre class=\"highlight-ruby\" data-language=\"ruby\">antarctica_hint = hint?('antarctica')\nif antarctica_hint['snow']\n  \"There are #{antarctica_hint['penguins']} penguins here.\"\nelse\n  'There is no snow here, and penguins like snow.'\nend</pre>    <h3 id=\"truths\">Truths</h3> <p>Work with basic truths:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">true            # =&gt; true\nfalse           # =&gt; false\nnil             # =&gt; nil\n0               # =&gt; true ( the only false values in Ruby are false\n                #    and nil; in other words: if it exists in Ruby,\n                #    even if it exists as zero, then it is true.)\n1 == 1          # =&gt; true ( == tests for equality )\n1 == true       # =&gt; false ( == tests for equality )</pre>  <h4 id=\"untruths\">Untruths</h4> <p>Work with basic untruths (<code class=\"docutils literal\">!</code> means not!):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">!true           # =&gt; false\n!false          # =&gt; true\n!nil            # =&gt; true\n1 != 2          # =&gt; true (1 is not equal to 2)\n1 != 1          # =&gt; false (1 is not not equal to itself)</pre>   <h4 id=\"convert-truths\">Convert Truths</h4> <p>Convert something to either true or false (<code class=\"docutils literal\">!!</code> means not not!!):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">!!true          # =&gt; true\n!!false         # =&gt; false\n!!nil           # =&gt; false (when pressed, nil is false)\n!!0             # =&gt; true (zero is NOT false).</pre>    <h3 id=\"arrays\">Arrays</h3> <p>Create lists using arrays:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">x = ['a', 'b', 'c']   # =&gt; [\"a\", \"b\", \"c\"]\nx[0]                  # =&gt; \"a\" (zero is the first index)\nx.first               # =&gt; \"a\" (see?)\nx.last                # =&gt; \"c\"\nx + ['d']             # =&gt; [\"a\", \"b\", \"c\", \"d\"]\nx                     # =&gt; [\"a\", \"b\", \"c\"] ( x is unchanged)\nx = x + ['d']         # =&gt; [\"a\", \"b\", \"c\", \"d\"]\nx                     # =&gt; [\"a\", \"b\", \"c\", \"d\"]</pre>  <h4 id=\"whitespace-arrays\">Whitespace Arrays</h4> <p>The <code class=\"docutils literal\">%w</code> syntax is a Ruby shortcut for creating an array without requiring quotes and commas around the elements.</p> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if %w{debian ubuntu}.include?(node['platform'])\n  # do debian/ubuntu things with the Ruby array %w{} shortcut\nend</pre> <p>When <code class=\"docutils literal\">%w</code> syntax uses a variable, such as <code class=\"docutils literal\">|foo|</code>, double quoted strings should be used.</p> <p>Right:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">%w{openssl.cnf pkitool vars Rakefile}.each do |foo|\n  template \"/etc/openvpn/easy-rsa/#{foo}\" do\n    source \"#{foo}.erb\"\n    ...\n  end\nend</pre> <p>Wrong:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">%w{openssl.cnf pkitool vars Rakefile}.each do |foo|\n  template '/etc/openvpn/easy-rsa/#{foo}' do\n    source '#{foo}.erb'\n    ...\n  end\nend</pre>    <h3 id=\"ruby-hash\">Hash</h3> <p>A Hash is a list with keys and values. Sometimes they don’t have a set order:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">h = {\n  'first_name' =&gt; \"Bob\",\n  'last_name'  =&gt; \"Jones\"\n}</pre> <p>And sometimes they do. For example, first name then last name:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">h.keys              # =&gt; [\"first_name\", \"last_name\"]\nh['first_name']     # =&gt; \"Bob\"\nh['last_name']      # =&gt; \"Jones\"\nh['age'] = 23\nh.keys              # =&gt; [\"first_name\", \"age\", \"last_name\"]\nh.values            # =&gt; [\"Jones\", \"Bob\", 23]</pre>   <h3 id=\"regular-expressions\">Regular Expressions</h3> <p>Use Perl-style regular expressions:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">'I believe'  =~ /I/                       # =&gt; 0 (matches at the first character)\n'I believe'  =~ /lie/                     # =&gt; 4 (matches at the 5th character)\n'I am human' =~ /bacon/                   # =&gt; nil (no match - bacon comes from pigs)\n'I am human' !~ /bacon/                   # =&gt; true (correct, no bacon here)\n/give me a ([0-9]+)/ =~ 'give me a 7'     # =&gt; 0 (matched)</pre>   <h3 id=\"statements\">Statements</h3> <p>Use conditions! For example, an <code class=\"docutils literal\">if</code> statement</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if false\n  # this won't happen\nelsif nil\n  # this won't either\nelse\n  # code here will run though\nend</pre> <p>or a <code class=\"docutils literal\">case</code> statement:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">x = 'dog'\ncase x\nwhen 'fish'\n # this won't happen\nwhen 'dog', 'cat', 'monkey'\n  # this will run\nelse\n  # the else is an optional catch-all\nend</pre>  <h4 id=\"if\">if</h4> <p>An <code class=\"docutils literal\">if</code> statement can be used to specify part of a recipe to be used when certain conditions are met. <code class=\"docutils literal\">else</code> and <code class=\"docutils literal\">elseif</code> statements can be used to handle situations where either the initial condition is not met or when there are other possible conditions that can be met. Since this behavior is 100% Ruby, do this in a recipe the same way here as anywhere else.</p> <p>For example, using an <code class=\"docutils literal\">if</code> statement with the <code class=\"docutils literal\">platform</code> node attribute:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if node['platform'] == 'ubuntu'\n  # do ubuntu things\nend</pre>   <h4 id=\"case\">case</h4> <p>A <code class=\"docutils literal\">case</code> statement can be used to handle a situation where there are a lot of conditions. Use the <code class=\"docutils literal\">when</code> statement for each condition, as many as are required.</p> <p>For example, using a <code class=\"docutils literal\">case</code> statement with the <code class=\"docutils literal\">platform</code> node attribute:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">case node['platform']\nwhen 'debian', 'ubuntu'\n  # do debian/ubuntu things\nwhen 'redhat', 'centos', 'fedora'\n  # do redhat/centos/fedora things\nend</pre> <p>For example, using a <code class=\"docutils literal\">case</code> statement with the <code class=\"docutils literal\">platform_family</code> node attribute:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">case node['platform_family']\nwhen 'debian'\n  # do things on debian-ish platforms (debian, ubuntu, linuxmint)\nwhen 'rhel'\n  # do things on RHEL platforms (redhat, centos, scientific, etc)\nend</pre>    <h3 id=\"call-a-method\">Call a Method</h3> <p>Call a method on something with <code class=\"docutils literal\">.method_name()</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">x = 'My String'\nx.split(' ')            # =&gt; [\"My\", \"String\"]\nx.split(' ').join(', ') # =&gt; \"My, String\"</pre>   <h3 id=\"define-a-method\">Define a Method</h3> <p>Define a method (or a function, if you like):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">def do_something_useless( first_argument, second_argument)\n  puts \"You gave me #{first_argument} and #{second_argument}\"\nend\n\ndo_something_useless( 'apple', 'banana')\n# =&gt; \"You gave me apple and banana\"\ndo_something_useless 1, 2\n# =&gt; \"You gave me 1 and 2\"\n# see how the parens are optional if there's no confusion about what to do</pre>   <h3 id=\"ruby-class\">Ruby Class</h3> <p>Use the Ruby <code class=\"docutils literal\">File</code> class in a recipe. Because Chef has the <strong>file</strong> resource, use <code class=\"docutils literal\">File</code> to use the Ruby <code class=\"docutils literal\">File</code> class. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'apt-get-update' do\n  command 'apt-get update'\n  ignore_failure true\n  only_if { apt_installed? }\n  not_if { File.exist?('/var/lib/apt/periodic/update-success-stamp') }\nend</pre>   <h3 id=\"include-a-class\">Include a Class</h3> <p>Use <code class=\"docutils literal\">:include</code> to include another Ruby class. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">::Chef::Recipe.send(:include, Opscode::OpenSSL::Password)</pre> <p>In non-Chef Ruby, the syntax is <code class=\"docutils literal\">include</code> (without the <code class=\"docutils literal\">:</code> prefix), but without the <code class=\"docutils literal\">:</code> prefix the chef-client will try to find a provider named <code class=\"docutils literal\">include</code>. Using the <code class=\"docutils literal\">:</code> prefix tells the chef-client to look for the specified class that follows.</p>   <h3 id=\"include-a-parameter\">Include a Parameter</h3> <p>The <code class=\"docutils literal\">include?</code> method can be used to ensure that a specific parameter is included before an action is taken. For example, using the <code class=\"docutils literal\">include?</code> method to find a specific parameter:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if ['debian', 'ubuntu'].include?(node['platform'])\n  # do debian/ubuntu things\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if %w{rhel}.include?(node['platform_family'])\n  # do RHEL things\nend</pre>   <h3 id=\"log-entries\">Log Entries</h3> <p><code class=\"docutils literal\">Chef::Log</code> extends <code class=\"docutils literal\">Mixlib::Log</code> and will print log entries to the default logger that is configured for the machine on which the chef-client is running. (To create a log entry that is built into the resource collection, use the <strong>log</strong> resource instead of <code class=\"docutils literal\">Chef::Log</code>.)</p> <p>The following log levels are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Log Level</th> <th class=\"head\">Syntax</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Debug</td> <td><code class=\"docutils literal\">Chef::Log.debug('string')</code></td> </tr> <tr class=\"row-odd\">\n<td>Error</td> <td><code class=\"docutils literal\">Chef::Log.error('string')</code></td> </tr> <tr class=\"row-even\">\n<td>Fatal</td> <td><code class=\"docutils literal\">Chef::Log.fatal('string')</code></td> </tr> <tr class=\"row-odd\">\n<td>Info</td> <td><code class=\"docutils literal\">Chef::Log.info('string')</code></td> </tr> <tr class=\"row-even\">\n<td>Warn</td> <td><code class=\"docutils literal\">Chef::Log.warn('string')</code></td> </tr> </tbody> </table> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The parentheses are optional, e.g. <code class=\"docutils literal\">Chef::Log.info 'string'</code> may be used instead of <code class=\"docutils literal\">Chef::Log.info('string')</code>.</p> </div> <p>The following examples show using <code class=\"docutils literal\">Chef::Log</code> entries in a recipe.</p> <p>The following example shows a series of fatal <code class=\"docutils literal\">Chef::Log</code> entries:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">unless node['splunk']['upgrade_enabled']\n  Chef::Log.fatal('The chef-splunk::upgrade recipe was added to the node,')\n  Chef::Log.fatal('but the attribute `node[\"splunk\"][\"upgrade_enabled\"]` was not set.')\n  Chef::Log.fatal('I am bailing here so this node does not upgrade.')\n  raise\nend\n\nservice 'splunk_stop' do\n  service_name 'splunk'\n  supports :status =&gt; true\n  provider Chef::Provider::Service::Init\n  action :stop\nend\n\nif node['splunk']['is_server']\n  splunk_package = 'splunk'\n  url_type = 'server'\nelse\n  splunk_package = 'splunkforwarder'\n  url_type = 'forwarder'\nend\n\nsplunk_installer splunk_package do\n  url node['splunk']['upgrade'][\"#{url_type}_url\"]\nend\n\nif node['splunk']['accept_license']\n  execute 'splunk-unattended-upgrade' do\n    command \"#{splunk_cmd} start --accept-license --answer-yes\"\n  end\nelse\n  Chef::Log.fatal('You did not accept the license (set node[\"splunk\"][\"accept_license\"] to true)')\n  Chef::Log.fatal('Splunk is stopped and cannot be restarted until the license is accepted!')\n  raise\nend</pre> <p>The full recipe is the <code class=\"docutils literal\">upgrade.rb</code> recipe of the <a class=\"reference external\" href=\"https://github.com/chef-cookbooks/chef-splunk/\">chef-splunk cookbook</a> that is maintained by Chef.</p> <p>The following example shows using multiple <code class=\"docutils literal\">Chef::Log</code> entry types:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">...\n\nbegin\n  aws = Chef::DataBagItem.load(:aws, :main)\n  Chef::Log.info(\"Loaded AWS information from DataBagItem aws[#{aws['id']}]\")\nrescue\n  Chef::Log.fatal(\"Could not find the 'main' item in the 'aws' data bag\")\n  raise\nend\n\n...</pre> <p>The full recipe is in the <code class=\"docutils literal\">ebs_volume.rb</code> recipe of the <a class=\"reference external\" href=\"https://github.com/chef-cookbooks/database/\">database cookbook</a> that is maintained by Chef.</p>    <h2 id=\"patterns-to-follow\">Patterns to Follow</h2> <p>This section covers best practices for cookbook and recipe authoring.</p>  <h3 id=\"git-etiquette\">git Etiquette</h3> <p>Although not strictly a Chef style thing, please always ensure your <code class=\"docutils literal\">user.name</code> and <code class=\"docutils literal\">user.email</code> are set properly in your <code class=\"docutils literal\">.gitconfig</code> file.</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">user.name</code> should be your given name (e.g., “Julian Dunn”)</li> <li>\n<code class=\"docutils literal\">user.email</code> should be an actual, working e-mail address</li> </ul> <p>This will prevent commit log entries similar to <code class=\"docutils literal\">\"guestuser &lt;login@Bobs-Macbook-Pro.local&gt;\"</code>, which are unhelpful.</p>   <h3 id=\"use-of-hyphens\">Use of Hyphens</h3> <p>Cookbook and custom resource names should contain only alphanumeric characters. A hyphen (<code class=\"docutils literal\">-</code>) is a valid character and may be used in cookbook and custom resource names, but it is discouraged. The chef-client will return an error if a hyphen is not converted to an underscore (<code class=\"docutils literal\">_</code>) when referencing from a recipe the name of a custom resource in which a hyphen is located.</p>   <h3 id=\"cookbook-naming\">Cookbook Naming</h3> <p>Use a short organizational prefix for application cookbooks that are part of your organization. For exanple, if your organization is named SecondMarket, use <code class=\"docutils literal\">sm</code> as a prefix: <code class=\"docutils literal\">sm_postgresql</code> or <code class=\"docutils literal\">sm_httpd</code>.</p>   <h3 id=\"cookbook-versioning\">Cookbook Versioning</h3> <ul class=\"simple\"> <li>Use semantic versioning when numbering cookbooks.</li> <li>Only upload stable cookbooks from master.</li> <li>Only upload unstable cookbooks from the dev branch. Merge to master and bump the version when stable.</li> <li>Always update CHANGELOG.md with any changes, with the JIRA ticket and a brief description.</li> </ul>   <h3 id=\"cookbook-patterns\">Cookbook Patterns</h3> <p>Good cookbook examples:</p> <ul class=\"simple\"> <li><a class=\"reference external\" href=\"https://github.com/chef-cookbooks/yum\">https://github.com/chef-cookbooks/yum</a></li> <li><a class=\"reference external\" href=\"https://github.com/chef-cookbooks/mysql\">https://github.com/chef-cookbooks/mysql</a></li> <li><a class=\"reference external\" href=\"https://github.com/chef-cookbooks/httpd\">https://github.com/chef-cookbooks/httpd</a></li> <li><a class=\"reference external\" href=\"https://github.com/chef-cookbooks/php\">https://github.com/chef-cookbooks/php</a></li> <li><a class=\"reference external\" href=\"https://github.com/someara/wordpress-uberdemo\">https://github.com/someara/wordpress-uberdemo</a></li> <li><a class=\"reference external\" href=\"https://github.com/jtimberman/smartmontools-cookbook/\">https://github.com/jtimberman/smartmontools-cookbook/</a></li> </ul>   <h3 id=\"naming\">Naming</h3> <p>Name things uniformly for their system and component. For example:</p> <ul class=\"simple\"> <li>attributes: <code class=\"docutils literal\">node['foo']['bar']</code>\n</li> <li>recipe: <code class=\"docutils literal\">foo::bar</code>\n</li> <li>role: <code class=\"docutils literal\">foo-bar</code>\n</li> <li>directories: <code class=\"docutils literal\">foo/bar</code> (if specific to component), <code class=\"docutils literal\">foo</code> (if not). For example: <code class=\"docutils literal\">/var/log/foo/bar</code>.</li> </ul> <p>Name attributes after the recipe in which they are primarily used. e.g. <code class=\"docutils literal\">node['postgresql']['server']</code>.</p>   <h3 id=\"default-recipe\">Default Recipe</h3> <p>Don’t use the default recipe (leave it blank). Instead, create recipes called server or client (or other).</p>   <h3 id=\"parameter-order\">Parameter Order</h3> <p>Follow this order for information in each resource declaration:</p> <ul class=\"simple\"> <li>Source</li> <li>Cookbook</li> <li>Resource ownership</li> <li>Permissions</li> <li>Notifications</li> <li>Action</li> </ul> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/foobar.txt' do\n  source 'foobar.txt.erb'\n  owner  'someuser'\n  group  'somegroup'\n  mode   '0644'\n  variables(\n    :foo =&gt; 'bar'\n  )\n  notifies :reload, 'service[whatever]'\n  action :create\nend</pre>   <h3 id=\"file-modes\">File Modes</h3> <p>Always specify the file mode with a quoted 3-5 character string that defines the octal mode:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">mode '755'</pre> <pre class=\"highlight-ruby\" data-language=\"ruby\">mode '0755'</pre> <pre class=\"highlight-ruby\" data-language=\"ruby\">mode '00755'</pre>   <h3 id=\"specify-resource-action\">Specify Resource Action?</h3> <p>A resource declaration does not require the action to be specified because the chef-client will apply the default action for a resource automatically if it’s not specified within the resource block. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'monit'</pre> <p>will install the <code class=\"docutils literal\">monit</code> package because the <code class=\"docutils literal\">:install</code> action is the default action for the <strong>package</strong> resource.</p> <p>However, if readability of code is desired, such as ensuring that a reader understands what the default action is for a custom resource or stating the action for a resource whose default may not be immediately obvious to the reader, specifying the default action is recommended:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ohai 'apache_modules' do\n  action :reload\nend</pre>   <h3 id=\"symbols-or-strings\">Symbols or Strings?</h3> <p>Prefer strings over symbols, because they’re easier to read and you don’t need to explain to non-Rubyists what a symbol is. Please retrofit old cookbooks as you come across them.</p> <p>Right:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default['foo']['bar'] = 'baz'</pre> <p>Wrong:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default[:foo][:bar] = 'baz'</pre>   <h3 id=\"string-quoting\">String Quoting</h3> <p>Use single-quoted strings in all situations where the string doesn’t need interpolation.</p>  <h4 id=\"id1\">Whitespace Arrays</h4> <p>When <code class=\"docutils literal\">%w</code> syntax uses a variable, such as <code class=\"docutils literal\">|foo|</code>, double quoted strings should be used.</p> <p>Right:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">%w{openssl.cnf pkitool vars Rakefile}.each do |foo|\n  template \"/etc/openvpn/easy-rsa/#{foo}\" do\n    source \"#{foo}.erb\"\n    ...\n  end\nend</pre> <p>Wrong:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">%w{openssl.cnf pkitool vars Rakefile}.each do |foo|\n  template '/etc/openvpn/easy-rsa/#{foo}' do\n    source '#{foo}.erb'\n    ...\n  end\nend</pre>    <h3 id=\"shelling-out\">Shelling Out</h3> <p>Always use <code class=\"docutils literal\">mixlib-shellout</code> to shell out. Never use backticks, Process.spawn, popen4, or anything else!</p> <p>The <a class=\"reference external\" href=\"https://github.com/chef/mixlib-shellout/blob/master/README.md\">mixlib-shellout module</a> provides a simplified interface to shelling out while still collecting both standard out and standard error and providing full control over environment, working directory, uid, gid, etc.</p> <p>Starting with chef-client version 12.0 you can use the <code class=\"docutils literal\">shell_out</code>, <code class=\"docutils literal\">shell_out!</code> and <code class=\"docutils literal\">shell_out_with_system_locale</code> <a class=\"reference internal\" href=\"dsl_recipe\">Recipe DSL methods</a> to interface directly with <code class=\"docutils literal\">mixlib-shellout</code>.</p>   <h3 id=\"constructs-to-avoid\">Constructs to Avoid</h3> <p>Avoid the following patterns:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">node.set</code> / <code class=\"docutils literal\">normal_attributes</code> - Avoid using attributes at normal precedence since they are set directly on the node object itself, rather than implied (computed) at runtime.</li> <li>\n<code class=\"docutils literal\">node.set_unless</code> - Can lead to weird behavior if the node object had something set. Avoid unless altogether necessary (one example where it’s necessary is in <code class=\"docutils literal\">node['postgresql']['server']['password']</code>)</li> <li>if <code class=\"docutils literal\">node.run_list.include?('foo')</code> i.e. branching in recipes based on what’s in the node’s run-list. Better and more readable to use a feature flag and set its precedence appropriately.</li> <li>\n<code class=\"docutils literal\">node['foo']['bar']</code> i.e. setting normal attributes without specifying precedence. This is deprecated in Chef 11, so either use <code class=\"docutils literal\">node.set['foo']['bar']</code> to replace its precedence in-place or choose the precedence to suit.</li> </ul>   <h3 id=\"recipes\">Recipes</h3> <p>A recipe should be clean and well-commented. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">###########\n# variables\n###########\n\nconnection_info = {\n  host: '127.0.0.1',\n  port: '3306',\n  username: 'root',\n  password: 'm3y3sqlr00t'\n}\n\n#################\n# Mysql resources\n#################\n\nmysql_service 'default' do\n  port '3306'\n  initial_root_password 'm3y3sqlr00t'\n  action [:create, :start]\nend\n\nmysql_database 'wordpress_demo' do\n  connection connection_info\n  action :create\nend\n\nmysql_database_user 'wordpress_user' do\n  connection connection_info\n  database_name 'wordpress_demo'\n  password 'w0rdpr3ssdem0'\n  privileges [:create, :delete, :select, :update, :insert]\n  action :grant\nend\n\n##################\n# Apache resources\n##################\n\nhttpd_service 'default' do\n  listen_ports %w(80)\n  mpm 'prefork'\n  action [:create, :start]\nend\n\nhttpd_module 'php' do\n  notifies :restart, 'httpd_service[default]'\n  action :create\nend\n\n###############\n# Php resources\n###############\n\n# php_runtime 'default' do\n#   action :install\n# end\n\npackage 'php-gd' do\n  action :install\nend\n\npackage 'php-mysql' do\n  action :install\nend\n\ndirectory '/etc/php.d' do\n  action :create\nend\n\ntemplate '/etc/php.d/mysql.ini' do\n  source 'mysql.ini.erb'\n  action :create\nend\n\nhttpd_config 'php' do\n  source 'php.conf.erb'\n  notifies :restart, 'httpd_service[default]'\n  action :create\nend\n\n#####################\n# wordpress resources\n#####################\n\ndirectory '/srv/wordpress_demo' do\n  user 'apache'\n  recursive true\n  action :create\nend\n\ntar_extract 'https://wordpress.org/wordpress-4.1.tar.gz' do\n  target_dir '/srv/wordpress_demo'\n  tar_flags ['--strip-components 1']\n  user 'apache'\n  creates '/srv/wordpress_demo/index.php'\n  action :extract\nend\n\ndirectory '/srv/wordpress_demo/wp-content' do\n  user 'apache'\n  action :create\nend\n\nhttpd_config 'wordpress' do\n  source 'wordpress.conf.erb'\n  variables(\n    servername: 'wordpress',\n    server_aliases: %w(computers.biz www.computers.biz),\n    document_root: '/srv/wordpress_demo'\n    )\n  notifies :restart, 'httpd_service[default]'\n  action :create\nend\n\ntemplate '/srv/wordpress_demo/wp-config.php' do\n  source 'wp-config.php.erb'\n  owner 'apache'\n  variables(\n    db_name: 'wordpress_demo',\n    db_user: 'wordpress_user',\n    db_password: 'w0rdpr3ssdem0',\n    db_host: '127.0.0.1',\n    db_prefix: 'wp_',\n    db_charset: 'utf8',\n    auth_key: 'You should probably use randomly',\n    secure_auth_key: 'generated strings. These can be hard',\n    logged_in_key: 'coded, pulled from encrypted databags,',\n    nonce_key: 'or a ruby function that accessed an',\n    auth_salt: 'arbitrary data source, such as a password',\n    secure_auth_salt: 'vault. Node attributes could work',\n    logged_in_salt: 'as well, but you take special care',\n    nonce_salt: 'so they are not saved to your chef-server.',\n    allow_multisite: 'false'\n    )\n  action :create\nend</pre>    <h2 id=\"patterns-to-avoid\">Patterns to Avoid</h2> <p>This section covers things that should be avoided when authoring cookbooks and recipes.</p>  <h3 id=\"node-set\">node.set</h3> <p>Use <code class=\"docutils literal\">node.default</code> (or maybe <code class=\"docutils literal\">node.override</code>) instead of <code class=\"docutils literal\">node.set</code> because <code class=\"docutils literal\">node.set</code> is an alias for <code class=\"docutils literal\">node.normal</code>. Normal data is persisted on the node object. Therefore, using <code class=\"docutils literal\">node.set</code> will persist data in the node object. If the code that uses <code class=\"docutils literal\">node.set</code> is later removed, if that data has already been set on the node, it will remain.</p> <p>Normal and override attributes are cleared at the start of the chef-client run, and are then rebuilt as part of the run based on the code in the cookbooks and recipes at that time.</p> <p><code class=\"docutils literal\">node.set</code> (and <code class=\"docutils literal\">node.normal</code>) should only be used to do something like generate a password for a database on the first chef-client run, after which it’s remembered (instead of persisted). Even this case should be avoided, as using a data bag is the recommended way to store this type of data.</p>    <h2 id=\"use-the-chef-dk-title\">Use the Chef DK</h2> <p>This section covers best practices for cookbook and recipe authoring.</p>  <h3 id=\"foodcritic-linting\">Foodcritic Linting</h3> <p>All cookbooks should pass Foodcritic rules before being uploaded.</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ foodcritic -f all your-cookbook</pre> <p>should return nothing.</p>    <h2 id=\"more-about-ruby\">More about Ruby</h2> <p>To learn more about Ruby, see the following:</p> <ul class=\"simple\"> <li><a class=\"reference external\" href=\"http://www.ruby-lang.org/en/documentation/\">http://www.ruby-lang.org/en/documentation/</a></li> <li><a class=\"reference external\" href=\"http://blog.loftninjas.org/2011/02/16/the-power-of-chef-and-ruby/\">http://blog.loftninjas.org/2011/02/16/the-power-of-chef-and-ruby/</a></li> <li><a class=\"reference external\" href=\"http://www.codecademy.com/tracks/ruby\">http://www.codecademy.com/tracks/ruby</a></li> <li><a class=\"reference external\" href=\"http://www.ruby-doc.org/stdlib/\">http://www.ruby-doc.org/stdlib/</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/ruby.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/ruby.html</a>\n  </p>\n</div>\n","12-9/resource_bash":"<h1 id=\"bash\">bash</h1> <p>Use the <strong>bash</strong> resource to execute scripts using the Bash interpreter. This resource may also use any of the actions and properties that are available to the <strong>execute</strong> resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <strong>bash</strong> script resource (which is based on the <strong>script</strong> resource) is different from the <strong>ruby_block</strong> resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>bash</strong> resource block executes scripts using Bash:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">bash 'extract_module' do\n  cwd ::File.dirname(src_filepath)\n  code &lt;&lt;-EOH\n    mkdir -p #{extract_path}\n    tar xzf #{src_filename} -C #{extract_path}\n    mv #{extract_path}/*/* #{extract_path}/\n    EOH\n  not_if { ::File.exists?(extract_path) }\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">cwd</code> specifies the directory from which the command is run</li> <li>\n<code class=\"docutils literal\">code</code> specifies the command to run</li> </ul> <p>The full syntax for all of the properties that are available to the <strong>bash</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">bash 'name' do\n  code                       String\n  creates                    String\n  cwd                        String\n  environment                Hash\n  flags                      String\n  group                      String, Integer\n  notifies                   # see description\n  path                       Array\n  provider                   Chef::Provider::Script::Bash\n  returns                    Integer, Array\n  subscribes                 # see description\n  timeout                    Integer, Float\n  user                       String, Integer\n  umask                      String, Integer\n  action                     Symbol # defaults to :run if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">bash</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">cwd</code> is the location from which the command is run</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">code</code>, <code class=\"docutils literal\">creates</code>, <code class=\"docutils literal\">cwd</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">flags</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">returns</code>, <code class=\"docutils literal\">timeout</code>, <code class=\"docutils literal\">user</code>, and <code class=\"docutils literal\">umask</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Prevent a command from running. This action is used to specify that a command is run only when another resource notifies it.</dd> <dt><code class=\"docutils literal\">:run</code></dt> <dd>Default. Run a script.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">code</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">A quoted (” ”) string of code to be executed.</p> </dd> <dt><code class=\"docutils literal\">creates</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Prevent a command from creating a file when that file already exists.</p> </dd> <dt><code class=\"docutils literal\">cwd</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The current working directory.</p> </dd> <dt><code class=\"docutils literal\">environment</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A Hash of environment variables in the form of <code class=\"docutils literal\">{\"ENV_VARIABLE\" =&gt; \"VALUE\"}</code>. (These variables must exist for a command to be run successfully.)</p> </dd> <dt><code class=\"docutils literal\">flags</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One or more command line flags that are passed to the interpreter when a command is invoked.</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The group name or group ID that must be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p>An array of paths to use when searching for a command. These paths are not added to the command’s environment $PATH. The default value uses the system path.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>The <code class=\"docutils literal\">path</code> property is not implemented by any provider in any version of the chef-client. Starting with chef-client 12, using the <code class=\"docutils literal\">path</code> property will return a warning. Starting with chef-client 13, the <code class=\"docutils literal\">path</code> property is deprecated and using it will return an exception. Cookbooks that currently use the <code class=\"docutils literal\">path</code> property should be updated to use the <code class=\"docutils literal\">environment</code> property instead.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">bash 'mycommand' do\n  environment 'PATH' =&gt; \"/my/path/to/bin:#{ENV['PATH']}\"\nend</pre> </div> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">returns</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Array</p> <p class=\"last\">The return value for a command. This may be an array of accepted values. An exception is raised when the return value(s) do not match. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Float</p> <p class=\"last\">The amount of time (in seconds) a command is to wait before timing out. Default value: <code class=\"docutils literal\">3600</code>.</p> </dd> <dt><code class=\"docutils literal\">user</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The user name or user ID that should be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">umask</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The file mode creation mask, or umask.</p> </dd> </dl>  <h3 id=\"guards\">Guards</h3> <p>A guard property can be used to evaluate the state of a node during the execution phase of the chef-client run. Based on the results of this evaluation, a guard property is then used to tell the chef-client if it should continue executing a resource. A guard property accepts either a string value or a Ruby block value:</p> <ul class=\"simple\"> <li>A string is executed as a shell command. If the command returns <code class=\"docutils literal\">0</code>, the guard is applied. If the command returns any other value, then the guard property is not applied. String guards in a <strong>powershell_script</strong> run Windows PowerShell commands and may return <code class=\"docutils literal\">true</code> in addition to <code class=\"docutils literal\">0</code>.</li> <li>A block is executed as Ruby code that must return either <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. If the block returns <code class=\"docutils literal\">true</code>, the guard property is applied. If the block returns <code class=\"docutils literal\">false</code>, the guard property is not applied.</li> </ul> <p>A guard property is useful for ensuring that a resource is idempotent by allowing that resource to test for the desired state as it is being executed, and then if the desired state is present, for the chef-client to do nothing.</p> <p><strong>Attributes</strong></p> <p>The following properties can be used to define a guard that is evaluated during the execution phase of the chef-client run:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">not_if</code></dt> <dd>Prevent a resource from executing when the condition returns <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">only_if</code></dt> <dd>Allow a resource to execute only if the condition returns <code class=\"docutils literal\">true</code>.</dd> </dl> <p><strong>Arguments</strong></p> <p>The following arguments can be used with the <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code> guard properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:user</code></dt> <dd>\n<p class=\"first\">Specify the user that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :user =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:group</code></dt> <dd>\n<p class=\"first\">Specify the group that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :group =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:environment</code></dt> <dd>\n<p class=\"first\">Specify a Hash of environment variables to be set. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :environment =&gt; {\n  'HOME' =&gt; '/home/adam'\n}</pre> </dd> <dt><code class=\"docutils literal\">:cwd</code></dt> <dd>\n<p class=\"first\">Set the current working directory before running a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam passwd', :cwd =&gt; '/etc'</pre> </dd> <dt><code class=\"docutils literal\">:timeout</code></dt> <dd>\n<p class=\"first\">Set a timeout for a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'sleep 10000', :timeout =&gt; 10</pre> </dd> </dl>    <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script</code>, <code class=\"docutils literal\">script</code>\n</dt> <dd>When this short name is used, the chef-client will determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script::Bash</code>, <code class=\"docutils literal\">bash</code>\n</dt> <dd>The provider for the Bash command interpreter.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Use a named provider to run a script</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">bash 'install_something' do\n  user 'root'\n  cwd '/tmp'\n  code &lt;&lt;-EOH\n  wget http://www.example.com/tarball.tar.gz\n  tar -zxf tarball.tar.gz\n  cd tarball\n  ./configure\n  make\n  make install\n  EOH\nend</pre> <p><strong>Install a file from a remote location using bash</strong></p> <p>The following is an example of how to install the <code class=\"docutils literal\">foo123</code> module for Nginx. This module adds shell-style functionality to an Nginx configuration file and does the following:</p> <ul class=\"simple\"> <li>Declares three variables</li> <li>Gets the Nginx file from a remote location</li> <li>Installs the file using Bash to the path specified by the <code class=\"docutils literal\">src_filepath</code> variable</li> </ul> <pre class=\"highlight-ruby\" data-language=\"ruby\"># the following code sample is similar to the ``upload_progress_module``\n# recipe in the ``nginx`` cookbook:\n# https://github.com/chef-cookbooks/nginx\n\nsrc_filename = \"foo123-nginx-module-v#{\n  node['nginx']['foo123']['version']\n}.tar.gz\"\nsrc_filepath = \"#{Chef::Config['file_cache_path']}/#{src_filename}\"\nextract_path = \"#{\n  Chef::Config['file_cache_path']\n  }/nginx_foo123_module/#{\n  node['nginx']['foo123']['checksum']\n}\"\n\nremote_file 'src_filepath' do\n  source node['nginx']['foo123']['url']\n  checksum node['nginx']['foo123']['checksum']\n  owner 'root'\n  group 'root'\n  mode '0755'\nend\n\nbash 'extract_module' do\n  cwd ::File.dirname(src_filepath)\n  code &lt;&lt;-EOH\n    mkdir -p #{extract_path}\n    tar xzf #{src_filename} -C #{extract_path}\n    mv #{extract_path}/*/* #{extract_path}/\n    EOH\n  not_if { ::File.exists?(extract_path) }\nend</pre> <p><strong>Install an application from git using bash</strong></p> <p>The following example shows how Bash can be used to install a plug-in for rbenv named <code class=\"docutils literal\">ruby-build</code>, which is located in git version source control. First, the application is synchronized, and then Bash changes its working directory to the location in which <code class=\"docutils literal\">ruby-build</code> is located, and then runs a command.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">git \"#{Chef::Config[:file_cache_path]}/ruby-build\" do\n   repository 'git://github.com/sstephenson/ruby-build.git'\n   reference 'master'\n   action :sync\n end\n\n bash 'install_ruby_build' do\n   cwd '#{Chef::Config[:file_cache_path]}/ruby-build'\n   user 'rbenv'\n   group 'rbenv'\n   code &lt;&lt;-EOH\n     ./install.sh\n     EOH\n   environment 'PREFIX' =&gt; '/usr/local'\nend</pre> <p>To read more about <code class=\"docutils literal\">ruby-build</code>, see here: <a class=\"reference external\" href=\"https://github.com/sstephenson/ruby-build\">https://github.com/sstephenson/ruby-build</a>.</p> <p><strong>Store certain settings</strong></p> <p>The following recipe shows how an attributes file can be used to store certain settings. An attributes file is located in the <code class=\"docutils literal\">attributes/</code> directory in the same cookbook as the recipe which calls the attributes file. In this example, the attributes file specifies certain settings for Python that are then used across all nodes against which this recipe will run.</p> <p>Python packages have versions, installation directories, URLs, and checksum files. An attributes file that exists to support this type of recipe would include settings like the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default['python']['version'] = '2.7.1'\n\nif python['install_method'] == 'package'\n  default['python']['prefix_dir'] = '/usr'\nelse\n  default['python']['prefix_dir'] = '/usr/local'\nend\n\ndefault['python']['url'] = 'http://www.python.org/ftp/python'\ndefault['python']['checksum'] = '80e387...85fd61'</pre> <p>and then the methods in the recipe may refer to these values. A recipe that is used to install Python will need to do the following:</p> <ul class=\"simple\"> <li>Identify each package to be installed (implied in this example, not shown)</li> <li>Define variables for the package <code class=\"docutils literal\">version</code> and the <code class=\"docutils literal\">install_path</code>\n</li> <li>Get the package from a remote location, but only if the package does not already exist on the target system</li> <li>Use the <strong>bash</strong> resource to install the package on the node, but only when the package is not already installed</li> </ul> <pre class=\"highlight-ruby\" data-language=\"ruby\">#  the following code sample comes from the ``oc-nginx`` cookbook on |github|: https://github.com/cookbooks/oc-nginx\n\nversion = node['python']['version']\ninstall_path = \"#{node['python']['prefix_dir']}/lib/python#{version.split(/(^\\d+\\.\\d+)/)[1]}\"\n\nremote_file \"#{Chef::Config[:file_cache_path]}/Python-#{version}.tar.bz2\" do\n  source \"#{node['python']['url']}/#{version}/Python-#{version}.tar.bz2\"\n  checksum node['python']['checksum']\n  mode '0755'\n  not_if { ::File.exists?(install_path) }\nend\n\nbash 'build-and-install-python' do\n  cwd Chef::Config[:file_cache_path]\n  code &lt;&lt;-EOF\n    tar -jxvf Python-#{version}.tar.bz2\n    (cd Python-#{version} &amp;&amp; ./configure #{configure_options})\n    (cd Python-#{version} &amp;&amp; make &amp;&amp; make install)\n  EOF\n  not_if { ::File.exists?(install_path) }\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_bash.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_bash.html</a>\n  </p>\n</div>\n","12-9/resource_bff_package":"<h1 id=\"bff-package\">bff_package</h1> <p>Use the <strong>bff_package</strong> resource to manage packages for the AIX platform using the installp utility. When a package is installed from a local file, it must be added to the node using the <strong>remote_file</strong> or <strong>cookbook_file</strong> resources.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">A Backup File Format (BFF) package may not have a <code class=\"docutils literal\">.bff</code> file extension. The chef-client will still identify the correct provider to use based on the platform, regardless of the file extension.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>bff_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>bff_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">bff_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>bff_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">bff_package 'name' do\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::Aix\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">bff_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:purge</code></dt> <dd>Purge a package. This action typically removes the configuration files as well as the package.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Required. The path to a package in the local file system. The AIX platform requires <code class=\"docutils literal\">source</code> to be a local file system path because <code class=\"docutils literal\">installp</code> does not retrieve packages using HTTP or FTP.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Aix</code>, <code class=\"docutils literal\">bff_package</code>\n</dt> <dd>The provider for the AIX platform. Can be used with the <code class=\"docutils literal\">options</code> attribute.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a package</strong></p> <p>The <strong>bff_package</strong> resource is the default package provider on the AIX platform. The base <strong>package</strong> resource may be used, and then when the platform is AIX, the chef-client will identify the correct package provider. The following examples show how to install part of the IBM XL C/C++ compiler.</p> <p>Using the base <strong>package</strong> resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'xlccmp.13.1.0' do\n  source '/var/tmp/IBM_XL_C_13.1.0/usr/sys/inst.images/xlccmp.13.1.0'\n  action :install\nend</pre> <p>Using the <strong>bff_package</strong> resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">bff_package 'xlccmp.13.1.0' do\n  source '/var/tmp/IBM_XL_C_13.1.0/usr/sys/inst.images/xlccmp.13.1.0'\n  action :install\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_bff_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_bff_package.html</a>\n  </p>\n</div>\n","12-9/resource_breakpoint":"<h1 id=\"breakpoint\">breakpoint</h1> <p>Use the <strong>breakpoint</strong> resource to add breakpoints to recipes. Run the chef-shell in chef-client mode, and then use those breakpoints to debug recipes. Breakpoints are ignored by the chef-client during an actual chef-client run. That said, breakpoints are typically used to debug recipes only when running them in a non-production environment, after which they are removed from those recipes before the parent cookbook is uploaded to the Chef server.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>breakpoint</strong> resource block creates a breakpoint in a recipe:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">breakpoint 'name' do\n  action :break\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">:break</code> will tell the chef-client to stop running a recipe; can only be used when the chef-client is being run in chef-shell mode</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:break</code></dt> <dd>Use to add a breakpoint to a recipe.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource does not have any properties.</p>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>A recipe without a breakpoint</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_key node['yum']['elrepo']['key'] do\n  url  node['yum']['elrepo']['key_url']\n  action :add\nend\n\nyum_repository 'elrepo' do\n  description 'ELRepo.org Community Enterprise Linux Extras Repository'\n  key node['yum']['elrepo']['key']\n  mirrorlist node['yum']['elrepo']['url']\n  includepkgs node['yum']['elrepo']['includepkgs']\n  exclude node['yum']['elrepo']['exclude']\n  action :create\nend</pre> <p><strong>The same recipe with breakpoints</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">breakpoint \"before yum_key node['yum']['repo_name']['key']\" do\n  action :break\nend\n\nyum_key node['yum']['repo_name']['key'] do\n  url  node['yum']['repo_name']['key_url']\n  action :add\nend\n\nbreakpoint \"after yum_key node['yum']['repo_name']['key']\" do\n  action :break\nend\n\nbreakpoint \"before yum_repository 'repo_name'\" do\n  action :break\nend\n\nyum_repository 'repo_name' do\n  description 'description'\n  key node['yum']['repo_name']['key']\n  mirrorlist node['yum']['repo_name']['url']\n  includepkgs node['yum']['repo_name']['includepkgs']\n  exclude node['yum']['repo_name']['exclude']\n  action :create\nend\n\nbreakpoint \"after yum_repository 'repo_name'\" do\n  action :break\nend</pre> <p>where the name of each breakpoint is an arbitrary string. In the previous examples, the names are used to indicate if the breakpoint is before or after a resource, and then also to specify which resource.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_breakpoint.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_breakpoint.html</a>\n  </p>\n</div>\n","12-9/custom_resources":"<h1 id=\"custom-resources\">Custom Resources</h1> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">This approach to building custom resources was introduced in chef-client, version 12.5. If you are using an older version of the chef-client, please use the version picker (in the top left of the navigation) to select your version, and then choose the same topic from the navigation tree (“Extend Chef &gt; Custom Resources”). See also <a class=\"reference external\" href=\"https://github.com/chef-cookbooks/compat_resource\">https://github.com/chef-cookbooks/compat_resource</a> for using this features with previous versions of the chef-client.</p> </div> <p>A custom resource:</p> <ul class=\"simple\"> <li>Is a simple extension of Chef</li> <li>Is implemented as part of a cookbook</li> <li>Follows easy, repeatable syntax patterns</li> <li>Effectively leverages resources that are built into Chef</li> <li>Is reusable in the same way as resources that are built into Chef</li> </ul> <p>For example, Chef includes built-in resources to manage files, packages, templates, and services, but it does not include a resource that manages websites.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A custom resource is defined as a Ruby file and is located in a cookbook’s <code class=\"docutils literal\">/resources</code> directory. This file</p> <ul class=\"simple\"> <li>Declares the properties of the custom resource</li> <li>Loads current properties, if the resource already exists</li> <li>Defines each action the custom resource may take</li> </ul> <p>The syntax for a custom resource is. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :name, RubyType, default: 'value'\n\nload_current_value do\n  # some Ruby\nend\n\naction :name do\n # a mix of built-in Chef resources and Ruby\nend\n\naction :name do\n # a mix of built-in Chef resources and Ruby\nend</pre> <p>where the first action listed is the default action.</p>  <h3 id=\"example\">Example</h3> <p>For example, the <code class=\"docutils literal\">site.rb</code> file in the <code class=\"docutils literal\">exampleco</code> cookbook could be similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :homepage, String, default: '&lt;h1&gt;Hello world!&lt;/h1&gt;'\n\nload_current_value do\n  if ::File.exist?('/var/www/html/index.html')\n    homepage IO.read('/var/www/html/index.html')\n  end\nend\n\naction :create do\n  package 'httpd'\n\n  service 'httpd' do\n    action [:enable, :start]\n  end\n\n  file '/var/www/html/index.html' do\n    content homepage\n  end\nend\n\naction :delete do\n  package 'httpd' do\n    action :delete\n  end\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">homepage</code> is a property that sets the default HTML for the <code class=\"docutils literal\">index.html</code> file with a default value of <code class=\"docutils literal\">'&lt;h1&gt;Hello world!&lt;/h1&gt;'</code>\n</li> <li>the (optional) <code class=\"docutils literal\">load_current_value</code> block loads the current values for all specified properties, in this example there is just a single property: <code class=\"docutils literal\">homepage</code>\n</li> <li>the <code class=\"docutils literal\">if</code> statement checks to see if the <code class=\"docutils literal\">index.html</code> file is already present on the node. If that file is already present, its contents are loaded <strong>instead</strong> of the default value for <code class=\"docutils literal\">homepage</code>\n</li> <li>the <code class=\"docutils literal\">action</code> block uses the built-in collection of resources to tell the chef-client how to install Apache, start the service, and then create the contents of the file located at <code class=\"docutils literal\">/var/www/html/index.html</code>\n</li> <li>\n<code class=\"docutils literal\">action :create</code> is the default resource; <code class=\"docutils literal\">action :delete</code> must be called specifically (because it is not the default resource)</li> </ul> <p>Once built, the custom resource may be used in a recipe just like the any of the resources that are built into Chef. The resource gets its name from the cookbook and from the file name in the <code class=\"docutils literal\">/resources</code> directory, with an underscore (<code class=\"docutils literal\">_</code>) separating them. For example, a cookbook named <code class=\"docutils literal\">exampleco</code> with a custom resource named <code class=\"docutils literal\">site.rb</code> is used in a recipe like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">exampleco_site 'httpd' do\n  homepage '&lt;h1&gt;Welcome to the Example Co. website!&lt;/h1&gt;'\n  action :create\nend</pre> <p>and to delete the exampleco website, do the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">exampleco_site 'httpd' do\n  action :delete\nend</pre>   <h3 id=\"resource-name\">resource_name</h3> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Cookbook and custom resource names should contain only alphanumeric characters. A hyphen (<code class=\"docutils literal\">-</code>) is a valid character and may be used in cookbook and custom resource names, but it is discouraged. The chef-client will return an error if a hyphen is not converted to an underscore (<code class=\"docutils literal\">_</code>) when referencing from a recipe the name of a custom resource in which a hyphen is located.</p> </div> <p>Use the <code class=\"docutils literal\">resource_name</code> method at the top of a custom resource to declare a custom name for that resource. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource_name :custom_name</pre> <p>where <code class=\"docutils literal\">:custom_name</code> is the resource name as it may be used in a recipe. For example, a cookbook named <code class=\"docutils literal\">website</code> and a custom resource file named <code class=\"docutils literal\">httpd</code> is by default used in a recipe with <code class=\"docutils literal\">website_httpd</code>. If <code class=\"docutils literal\">:custom_name</code> is <code class=\"docutils literal\">web_httpd</code> then it may be used like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">web_httpd 'name' do\n  # properties\nend</pre> <p>For example, the <code class=\"docutils literal\">httpd.rb</code> file in the <code class=\"docutils literal\">website</code> cookbook could be assigned a custom resource name like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource_name :httpd\n\nproperty :homepage, String, default: '&lt;h1&gt;Hello world!&lt;/h1&gt;'\n\nload_current_value do\n  if ::File.exist?('/var/www/html/index.html')\n    homepage IO.read('/var/www/html/index.html')\n  end\nend\n\naction :create do\n  package 'httpd'\n\n  service 'httpd' do\n    action [:enable, :start]\n  end\n\n  file '/var/www/html/index.html' do\n    content homepage\n  end\nend</pre> <p>and is then usable in a recipe like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">httpd 'build website' do\n  homepage '&lt;h1&gt;Welcome to the Example Co. website!&lt;/h1&gt;'\n  action :create\nend</pre>    <h2 id=\"scenario-website-resource\">Scenario: website Resource</h2> <p>Create a resource that configures Apache httpd for Red Hat Enterprise Linux 7 and CentOS 7.</p> <p>This scenario covers the following:</p> <ol class=\"arabic simple\"> <li>Defining a cookbook named <code class=\"docutils literal\">website</code>\n</li> <li>Defining two properties</li> <li>Defining an action</li> <li>For the action, defining the steps to configure the system using resources that are built into Chef</li> <li>Creating two templates that support the custom resource</li> <li>Adding the resource to a recipe</li> </ol> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Read this scenario as an HTML presentation at <a class=\"reference external\" href=\"https://docs.chef.io/decks/custom_resources.html\">https://docs.chef.io/decks/custom_resources.html</a>.</p> </div>  <h3 id=\"create-a-cookbook\">Create a Cookbook</h3> <p>This article assumes that a cookbook directory named <code class=\"docutils literal\">website</code> exists in a chef-repo with (at least) the following directories:</p> <pre class=\"highlight-text\" data-language=\"text\">/website\n  /recipes\n  /resources\n  /templates</pre> <p>You may use a cookbook that already exists or you may create a new cookbook.</p> <p>See <a class=\"reference external\" href=\"https://docs.chef.io/ctl_chef.html\">https://docs.chef.io/ctl_chef.html</a> for more information about how to use the <code class=\"docutils literal\">chef</code> command-line tool that is packaged with the Chef development kit to build the chef-repo, plus related cookbook sub-directories.</p>   <h3 id=\"objectives\">Objectives</h3> <p>Define a custom resource!</p> <p>A custom resource typically contains:</p> <ul class=\"simple\"> <li>A list of defined custom properties (property values are specified in recipes)</li> <li>At least one action (actions tell the chef-client what to do)</li> <li>For each action, use a collection of resources that are built into Chef to define the steps required to complete the action</li> </ul>  <h4 id=\"what-is-needed\">What is needed?</h4> <p>This custom resource requires:</p> <ul class=\"simple\"> <li>Two template files</li> <li>Two properties</li> <li>An action that defines all of the steps necessary to create the website</li> </ul>    <h3 id=\"define-properties\">Define Properties</h3> <p>Custom properties are defined in the resource. This custom resource needs two:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">instance_name</code></li> <li><code class=\"docutils literal\">port</code></li> </ul> <p>These properties are defined as variables in the <code class=\"docutils literal\">httpd.conf.erb</code> file. A <strong>template</strong> block in recipes will tell the chef-client how to apply these variables.</p> <p>In the custom resource, add the following custom properties:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :instance_name, String, name_property: true\nproperty :port, Fixnum, required: true</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">String</code> and <code class=\"docutils literal\">Fixnum</code> are Ruby types (all custom properties must have an assigned Ruby type)</li> <li>\n<code class=\"docutils literal\">name_property: true</code> allows the value for this property to be equal to the <code class=\"docutils literal\">'name'</code> of the resource block</li> </ul> <p>The <code class=\"docutils literal\">instance_name</code> property is then used within the custom resource in many locations, including defining paths to configuration files, services, and virtual hosts.</p>   <h3 id=\"define-actions\">Define Actions</h3> <p>Each custom resource must have at least one action that is defined within an <code class=\"docutils literal\">action</code> block:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">action :create do\n  # the steps that define the action\nend</pre> <p>where <code class=\"docutils literal\">:create</code> is a value that may be assigned to the <code class=\"docutils literal\">action</code> property for when this resource is used in a recipe.</p> <p>For example, the <code class=\"docutils literal\">action</code> appears as a property when this custom resource is used in a recipe:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">custom_resource 'name' do\n  # some properties\n  action :create\nend</pre>   <h3 id=\"define-resource\">Define Resource</h3> <p>Use the <strong>package</strong>, <strong>template</strong> (two times), <strong>directory</strong>, and <strong>service</strong> resources to define the <code class=\"docutils literal\">website</code> resource. Remember: <a class=\"reference external\" href=\"https://docs.chef.io/decks/recipe_order_matters.html\">order matters</a>!</p>  <h4 id=\"package\">package</h4> <p>Use the <strong>package</strong> resource to install httpd:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'httpd' do\n  action :install\nend</pre>   <h4 id=\"template-httpd-service\">template, httpd.service</h4> <p>Use the <strong>template</strong> resource to create an <code class=\"docutils literal\">httpd.service</code> on the node based on the <code class=\"docutils literal\">httpd.service.erb</code> template located in the cookbook:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template \"/lib/systemd/system/httpd-#{instance_name}.service\" do\n  source 'httpd.service.erb'\n  variables(\n    :instance_name =&gt; instance_name\n  )\n  owner 'root'\n  group 'root'\n  mode '0644'\n  action :create\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">source</code> gets the <code class=\"docutils literal\">httpd.service.erb</code> template from this cookbook</li> <li>\n<code class=\"docutils literal\">variables</code> assigns the <code class=\"docutils literal\">instance_name</code> property to a variable in the template</li> </ul>   <h4 id=\"template-httpd-conf\">template, httpd.conf</h4> <p>Use the <strong>template</strong> resource to configure httpd on the node based on the <code class=\"docutils literal\">httpd.conf.erb</code> template located in the cookbook:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template \"/etc/httpd/conf/httpd-#{instance_name}.conf\" do\n  source 'httpd.conf.erb'\n  variables(\n    :instance_name =&gt; instance_name,\n    :port =&gt; port\n  )\n  owner 'root'\n  group 'root'\n  mode '0644'\n  action :create\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">source</code> gets the <code class=\"docutils literal\">httpd.conf.erb</code> template from this cookbook</li> <li>\n<code class=\"docutils literal\">variables</code> assigns the <code class=\"docutils literal\">instance_name</code> and <code class=\"docutils literal\">port</code> properties to variables in the template</li> </ul>   <h4 id=\"directory\">directory</h4> <p>Use the <strong>directory</strong> resource to create the <code class=\"docutils literal\">/var/www/vhosts</code> directory on the node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory \"/var/www/vhosts/#{instance_name}\" do\n  recursive true\n  owner 'root'\n  group 'root'\n  mode '0755'\n  action :create\nend</pre>   <h4 id=\"service\">service</h4> <p>Use the <strong>service</strong> resource to enable, and then start the service:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service \"httpd-#{instance_name}\" do\n  action [:enable, :start]\nend</pre>    <h3 id=\"create-templates\">Create Templates</h3> <p>The <code class=\"docutils literal\">/templates</code> directory must contain two templates:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">httpd.conf.erb</code> to configure Apache httpd</li> <li>\n<code class=\"docutils literal\">httpd.service.erb</code> to tell systemd how to start and stop the website</li> </ul>  <h4 id=\"httpd-conf-erb\">httpd.conf.erb</h4> <p><code class=\"docutils literal\">httpd.conf.erb</code> stores information about the website and is typically located under the <code class=\"docutils literal\">/etc/httpd</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ServerRoot \"/etc/httpd\"\nListen &lt;%= @port %&gt;\nInclude conf.modules.d/*.conf\nUser apache\nGroup apache\n&lt;Directory /&gt;\n  AllowOverride none\n  Require all denied\n&lt;/Directory&gt;\nDocumentRoot \"/var/www/vhosts/&lt;%= @instance_name %&gt;\"\n&lt;IfModule mime_module&gt;\n  TypesConfig /etc/mime.types\n&lt;/IfModule&gt;</pre> <p>Copy it as shown, add it under <code class=\"docutils literal\">/templates/default</code>, and then name the file <code class=\"docutils literal\">httpd.conf.erb</code>.</p>  <h5 id=\"template-variables\">Template Variables</h5> <p>The <code class=\"docutils literal\">httpd.conf.erb</code> template has two variables:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">&lt;%= @instance_name %&gt;</code></li> <li><code class=\"docutils literal\">&lt;%= @port %&gt;</code></li> </ul> <p>They are:</p> <ul class=\"simple\"> <li>Declared as properties of the custom resource</li> <li>Defined as variables in a <strong>template</strong> resource block within the custom resource</li> <li>Tunable from a recipe when using <code class=\"docutils literal\">port</code> and <code class=\"docutils literal\">instance_name</code> as properties in that recipe</li> <li>\n<code class=\"docutils literal\">instance_name</code> defaults to the <code class=\"docutils literal\">'name'</code> of the custom resource if not specified as a property</li> </ul>    <h4 id=\"httpd-service-erb\">httpd.service.erb</h4> <p><code class=\"docutils literal\">httpd.service.erb</code> tells systemd how to start and stop the website:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">[Unit]\nDescription=The Apache HTTP Server - instance &lt;%= @instance_name %&gt;\nAfter=network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=notify\n\nExecStart=/usr/sbin/httpd -f /etc/httpd/conf/httpd-&lt;%= @instance_name %&gt;.conf -DFOREGROUND\nExecReload=/usr/sbin/httpd -f /etc/httpd/conf/httpd-&lt;%= @instance_name %&gt;.conf -k graceful\nExecStop=/bin/kill -WINCH ${MAINPID}\n\nKillSignal=SIGCONT\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target</pre> <p>Copy it as shown, add it under <code class=\"docutils literal\">/templates/default</code>, and then name it <code class=\"docutils literal\">httpd.service.erb</code>.</p>    <h3 id=\"final-resource\">Final Resource</h3> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :instance_name, String, name_property: true\nproperty :port, Fixnum, required: true\n\naction :create do\n  package 'httpd' do\n    action :install\n  end\n\n  template \"/lib/systemd/system/httpd-#{instance_name}.service\" do\n    source 'httpd.service.erb'\n    variables(\n      :instance_name =&gt; instance_name\n    )\n    owner 'root'\n    group 'root'\n    mode '0644'\n    action :create\n  end\n\n  template \"/etc/httpd/conf/httpd-#{instance_name}.conf\" do\n    source 'httpd.conf.erb'\n    variables(\n      :instance_name =&gt; instance_name,\n      :port =&gt; port\n    )\n    owner 'root'\n    group 'root'\n    mode '0644'\n    action :create\n  end\n\n  directory \"/var/www/vhosts/#{instance_name}\" do\n    recursive true\n    owner 'root'\n    group 'root'\n    mode '0755'\n    action :create\n  end\n\n  service \"httpd-#{instance_name}\" do\n    action [:enable, :start]\n  end\n\nend</pre>   <h3 id=\"final-cookbook-directory\">Final Cookbook Directory</h3> <p>When finished adding the templates and building the custom resource, the cookbook directory structure should look like this:</p> <pre class=\"highlight-text\" data-language=\"text\">/website\n  metadata.rb\n  /recipes\n    default.rb\n  README.md\n  /resources\n    httpd.rb\n  /templates\n    /default\n      httpd.conf.erb\n      httpd.service.erb</pre>   <h3 id=\"recipe\">Recipe</h3> <p>The custom resource name is inferred from the name of the cookbook (<code class=\"docutils literal\">website</code>), the name of the recipe (<code class=\"docutils literal\">httpd</code>), and is separated by an underscore(<code class=\"docutils literal\">_</code>): <code class=\"docutils literal\">website_httpd</code>.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">website_httpd 'httpd_site' do\n  port 81\n  action :create\nend</pre> <p>which does the following:</p> <ul class=\"simple\"> <li>Installs Apache httpd</li> <li>Assigns an instance name of <code class=\"docutils literal\">httpd_site</code> that uses port 81</li> <li>Configures httpd and systemd from a template</li> <li>Creates the virtual host for the website</li> <li>Starts the website using systemd</li> </ul>    <h2 id=\"custom-resource-dsl\">Custom Resource DSL</h2> <p>The following sections describe additional Custom Resource DSL methods that were not used in the preceding scenario:</p>  <h3 id=\"converge-if-changed\">converge_if_changed</h3> <p>Use the <code class=\"docutils literal\">converge_if_changed</code> method inside an <code class=\"docutils literal\">action</code> block in a custom resource to compare the desired property values against the current property values (as loaded by the <code class=\"docutils literal\">load_current_value</code> method). Use the <code class=\"docutils literal\">converge_if_changed</code> method to ensure that updates only occur when property values on the system are not the desired property values and to otherwise prevent a resource from being converged.</p> <p>To use the <code class=\"docutils literal\">converge_if_changed</code> method, wrap it around the part of a recipe or custom resource that should only be converged when the current state is not the desired state:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">action :some_action do\n\n  converge_if_changed\n    # some property\n  end\n\nend</pre> <p>For example, a custom resource defines two properties (<code class=\"docutils literal\">content</code> and <code class=\"docutils literal\">path</code>) and a single action (<code class=\"docutils literal\">:create</code>). Use the <code class=\"docutils literal\">load_current_value</code> method to load the property value to be compared, and then use the <code class=\"docutils literal\">converge_if_changed</code> method to tell the chef-client what to do if that value is not the desired value:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :content, String\nproperty :path, String, name_property: true\n\nload_current_value do\n  if File.exist?(path)\n    content IO.read(path)\n  end\nend\n\naction :create do\n  converge_if_changed do\n    IO.write(path, content)\n  end\nend</pre> <p>When the file does not exist, the <code class=\"docutils literal\">IO.write(path, content)</code> code is executed and the chef-client output will print something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Recipe: recipe_name::block\n  * resource_name[blah] action create\n    - update my_file[blah]\n    -   set content to \"hola mundo\" (was \"hello world\")</pre>  <h4 id=\"multiple-properties\">Multiple Properties</h4> <p>The <code class=\"docutils literal\">converge_if_changed</code> method may be used multiple times. The following example shows how to use the <code class=\"docutils literal\">converge_if_changed</code> method to compare the multiple desired property values against the current property values (as loaded by the <code class=\"docutils literal\">load_current_value</code> method).</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :path, String, name_property: true\nproperty :content, String\nproperty :mode, String\n\nload_current_value do\n  if File.exist?(path)\n    content IO.read(path)\n    mode File.stat(path).mode\n  end\nend\n\naction :create do\n  converge_if_changed :content do\n    IO.write(path, content)\n  end\n  converge_if_changed :mode do\n    File.chmod(mode, path)\n  end\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">load_current_value</code> loads the property values for both <code class=\"docutils literal\">content</code> and <code class=\"docutils literal\">mode</code>\n</li> <li>A <code class=\"docutils literal\">converge_if_changed</code> block tests only <code class=\"docutils literal\">content</code>\n</li> <li>A <code class=\"docutils literal\">converge_if_changed</code> block tests only <code class=\"docutils literal\">mode</code>\n</li> </ul> <p>The chef-client will only update the property values that require updates and will not make changes when the property values are already in the desired state</p>    <h3 id=\"default-action\">default_action</h3> <p>The default action in a custom resource is, by default, the first action listed in the custom resource. For example, action <code class=\"docutils literal\">aaaaa</code> is the default resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :name, RubyType, default: 'value'\n\n...\n\naction :aaaaa do\n # the first action listed in the custom resource\nend\n\naction :bbbbb do\n # the second action listed in the custom resource\nend</pre> <p>The <code class=\"docutils literal\">default_action</code> method may also be used to specify the default action. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :name, RubyType, default: 'value'\n\ndefault_action :aaaaa\n\naction :aaaaa do\n # the first action listed in the custom resource\nend\n\naction :bbbbb do\n # the second action listed in the custom resource\nend</pre> <p>defines action <code class=\"docutils literal\">aaaaa</code> as the default action. If <code class=\"docutils literal\">default_action :bbbbb</code> is specified, then action <code class=\"docutils literal\">bbbbb</code> is the default action. Use this method for clarity in custom resources, if deliberately stating the default resource is desired, or to specify a default action that is not listed first in the custom resource.</p>   <h3 id=\"load-current-value\">load_current_value</h3> <p>Use the <code class=\"docutils literal\">load_current_value</code> method to load the specified property values from the node, and then use those values when the resource is converged. This method may take a block argument.</p> <p>Use the <code class=\"docutils literal\">load_current_value</code> method to guard against property values being replaced. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">action :some_action do\n\n  load_current_value do\n    if File.exist?('/var/www/html/index.html')\n      homepage IO.read('/var/www/html/index.html')\n    end\n    if File.exist?('/var/www/html/404.html')\n      page_not_found IO.read('/var/www/html/404.html')\n    end\n  end\n\nend</pre> <p>This ensures the values for <code class=\"docutils literal\">homepage</code> and <code class=\"docutils literal\">page_not_found</code> are not changed to the default values when the chef-client configures the node.</p>   <h3 id=\"new-resource-property\">new_resource.property</h3> <p>Custom resources are designed to use core resources that are built into Chef. In some cases, it may be necessary to specify a property in the custom resource that is the same as a property in a core resource, for the purpose of overriding that property when used with the custom resource. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource_name :node_execute\n\nproperty :command, kind_of: String, name_property: true\nproperty :version, kind_of: String\n\n# Useful properties from the `execute` resource\nproperty :cwd, kind_of: String\nproperty :environment, kind_of: Hash, default: {}\nproperty :user, kind_of: [String, Integer]\nproperty :sensitive, kind_of: [TrueClass, FalseClass], default: false\n\nprefix = '/opt/languages/node'\n\nload_current_value do\n  current_value_does_not_exist! if node.run_state['nodejs'].nil?\n  version node.run_state['nodejs'][:version]\nend\n\naction :run do\n  execute 'execute-node' do\n    cwd cwd\n    environment environment\n    user user\n    sensitive sensitive\n    # gsub replaces 10+ spaces at the beginning of the line with nothing\n    command &lt;&lt;-CODE.gsub(/^ {10}/, '')\n      #{prefix}/#{version}/#{command}\n    CODE\n  end\nend</pre> <p>where the <code class=\"docutils literal\">property :cwd</code>, <code class=\"docutils literal\">property :environment</code>, <code class=\"docutils literal\">property :user</code>, and <code class=\"docutils literal\">property :sensitive</code> are identical to properties in the <strong>execute</strong> resource, embedded as part of the <code class=\"docutils literal\">action :run</code> action. Because both the custom properties and the <strong>execute</strong> properties are identical, this will result in an error message similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ArgumentError\n-------------\nwrong number of arguments (0 for 1)</pre> <p>To prevent this behavior, use <code class=\"docutils literal\">new_resource.</code> to tell the chef-client to process the properties from the core resource instead of the properties in the custom resource. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource_name :node_execute\n\nproperty :command, kind_of: String, name_property: true\nproperty :version, kind_of: String\n\n# Useful properties from the `execute` resource\nproperty :cwd, kind_of: String\nproperty :environment, kind_of: Hash, default: {}\nproperty :user, kind_of: [String, Integer]\nproperty :sensitive, kind_of: [TrueClass, FalseClass], default: false\n\nprefix = '/opt/languages/node'\n\nload_current_value do\n  current_value_does_not_exist! if node.run_state['nodejs'].nil?\n  version node.run_state['nodejs'][:version]\nend\n\naction :run do\n  execute 'execute-node' do\n    cwd new_resource.cwd\n    environment new_resource.environment\n    user new_resource.user\n    sensitive new_resource.sensitive\n    # gsub replaces 10+ spaces at the beginning of the line with nothing\n    command &lt;&lt;-CODE.gsub(/^ {10}/, '')\n      #{prefix}/#{new_resource.version}/#{new_resource.command}\n    CODE\n  end\nend</pre> <p>where <code class=\"docutils literal\">cwd new_resource.cwd</code>, <code class=\"docutils literal\">environment new_resource.environment</code>, <code class=\"docutils literal\">user new_resource.user</code>, and <code class=\"docutils literal\">sensitive new_resource.sensitive</code> correctly use the properties of the <strong>execute</strong> resource and not the identically-named override properties of the custom resource.</p>   <h3 id=\"property\">property</h3> <p>Use the <code class=\"docutils literal\">property</code> method to define properties for the custom resource. The syntax is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :name, ruby_type, default: 'value'</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">:name</code> is the name of the property</li> <li>\n<code class=\"docutils literal\">ruby_type</code> is the Ruby type, such as <code class=\"docutils literal\">String</code>, <code class=\"docutils literal\">Integer</code>, <code class=\"docutils literal\">TrueClass</code>, or <code class=\"docutils literal\">FalseClass</code>\n</li> <li>\n<code class=\"docutils literal\">default: 'value'</code> is the default value loaded into the resource</li> </ul> <p>For example, the following properties define <code class=\"docutils literal\">username</code> and <code class=\"docutils literal\">password</code> properties with no default values specified:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :username, String\nproperty :password, String</pre>  <h4 id=\"desired-state\">desired_state</h4> <p>Add <code class=\"docutils literal\">desired_state:</code> to get or set the list of desired state properties for a resource, which describe the desired state of the node, such as permissions on an existing file. This value may be <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>.</p> <ul class=\"simple\"> <li>When <code class=\"docutils literal\">true</code>, the state of the system will determine the value.</li> <li>When <code class=\"docutils literal\">false</code>, the values defined by the recipe or custom resource will determine the value, i.e. “the desired state of this system includes setting the value defined in this custom resource or recipe”</li> </ul> <p>For example, the following properties define the <code class=\"docutils literal\">owner</code>, <code class=\"docutils literal\">group</code>, and <code class=\"docutils literal\">mode</code> properties for a file that already exists on the node, and with <code class=\"docutils literal\">desired_state</code> set to <code class=\"docutils literal\">false</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :owner, String, default: 'root', desired_state: false\nproperty :group, String, default: 'root', desired_state: false\nproperty :mode, String, default: '0755', desired_state: false</pre>   <h4 id=\"identity\">identity</h4> <p>Add <code class=\"docutils literal\">identity:</code> to set a resource to a particular set of properties. This value may be <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>.</p> <ul class=\"simple\"> <li>When <code class=\"docutils literal\">true</code>, data for that property is returned as part of the resource data set and may be available to external applications, such as reporting</li> <li>When <code class=\"docutils literal\">false</code>, no data for that property is returned.</li> </ul> <p>If no properties are marked <code class=\"docutils literal\">true</code>, the property that defaults to the <code class=\"docutils literal\">name</code> of the resource is marked <code class=\"docutils literal\">true</code>.</p> <p>For example, the following properties define <code class=\"docutils literal\">username</code> and <code class=\"docutils literal\">password</code> properties with no default values specified, but with <code class=\"docutils literal\">identity</code> set to <code class=\"docutils literal\">true</code> for the user name:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :username, String, identity: true\nproperty :password, String</pre>   <h4 id=\"block-arguments\">Block Arguments</h4> <p>Any properties that are marked <code class=\"docutils literal\">identity: true</code> or <code class=\"docutils literal\">desired_state: false</code> will be available from <code class=\"docutils literal\">load_current_value</code>. If access to other properties of a resource is needed, use a block argument that contains all of the properties of the requested resource. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource_name :file\n\nload_current_value do |desired|\n  puts \"The user typed content = #{desired.content} in the resource\"\nend</pre>    <h3 id=\"property-is-set\">property_is_set?</h3> <p>Use the <code class=\"docutils literal\">property_is_set?</code> method to check if the value for a property is set. The syntax is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property_is_set?(:property_name)</pre> <p>The <code class=\"docutils literal\">property_is_set?</code> method will return <code class=\"docutils literal\">true</code> if the property is set.</p> <p>For example, the following custom resource creates and/or updates user properties, but not their password. The <code class=\"docutils literal\">property_is_set?</code> method checks if the user has specified a password and then tells the chef-client what to do if the password is not identical:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">action :create do\n  converge_if_changed do\n    system(\"rabbitmqctl create_or_update_user #{username} --prop1 #{prop1} ... \")\n  end\n\n  if property_is_set?(:password)\n    if system(\"rabbitmqctl authenticate_user #{username} #{password}\") != 0 do\n      converge_by \"Updating password for user #{username} ...\" do\n    system(\"rabbitmqctl update_user #{username} --password #{password}\")\n  end\nend</pre>   <h3 id=\"provides\">provides</h3> <p>Use the <code class=\"docutils literal\">provides</code> method to associate a custom resource with the Recipe DSL on different operating systems. When multiple custom resources use the same DSL, specificity rules are applied to determine the priority, from highest to lowest:</p> <ol class=\"arabic simple\"> <li>provides :resource_name, platform_version: ‘0.1.2’</li> <li>provides :resource_name, platform: ‘platform_name’</li> <li>provides :resource_name, platform_family: ‘platform_family’</li> <li>provides :resource_name, os: ‘operating_system’</li> <li>provides :resource_name</li> </ol> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">class GenericFile &lt; Chef::Resource\n  provides :file\nend\n\nclass LinuxFile &lt; Chef::Resource\n  provides :file, os: 'linux'\nend\n\nclass DebianFile &lt; Chef::Resource\n  provides :file, platform_family: 'debian'\nend</pre> <p>If the following recipe is run on Ubuntu, <code class=\"docutils literal\">DebianFile</code> is selected:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file 'x' do\n  ...\nend</pre> <p>because it is the most specific rule. If the platform is Linux, but not Debian, <code class=\"docutils literal\">LinuxFile</code> is selected because it is less specific.</p>  <h4 id=\"override\">override</h4> <p>Chef will warn you if the Recipe DSL is provided by another custom resource or built-in resource. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">class X &lt; Chef::Resource\n  provides :file\nend\n\nclass Y &lt; Chef::Resource\n  provides :file\nend</pre> <p>This will emit a warning that <code class=\"docutils literal\">Y</code> is overriding <code class=\"docutils literal\">X</code>. To disable this warning, use <code class=\"docutils literal\">override: true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">class X &lt; Chef::Resource\n  provides :file\nend\n\nclass Y &lt; Chef::Resource\n  provides :file, override: true\nend</pre>    <h3 id=\"reset-property\">reset_property</h3> <p>Use the <code class=\"docutils literal\">reset_property</code> method to clear the value for a property as if it had never been set, and then use the default value. For example, to clear the value for a property named <code class=\"docutils literal\">password</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">reset_property(:password)</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/custom_resources.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/custom_resources.html</a>\n  </p>\n</div>\n","12-9/resource_batch":"<h1 id=\"batch\">batch</h1> <p>Use the <strong>batch</strong> resource to execute a batch script using the cmd.exe interpreter. The <strong>batch</strong> resource creates and executes a temporary file (similar to how the <strong>script</strong> resource behaves), rather than running the command inline. This resource inherits actions (<code class=\"docutils literal\">:run</code> and <code class=\"docutils literal\">:nothing</code>) and properties (<code class=\"docutils literal\">creates</code>, <code class=\"docutils literal\">cwd</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">user</code>) from the <strong>execute</strong> resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>batch</strong> resource block executes a batch script using the cmd.exe interpreter:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">batch 'echo some env vars' do\n  code &lt;&lt;-EOH\n    echo %TEMP%\n    echo %SYSTEMDRIVE%\n    echo %PATH%\n    echo %WINDIR%\n    EOH\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>batch</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">batch 'name' do\n  architecture               Symbol\n  code                       String\n  command                    String, Array\n  creates                    String\n  cwd                        String\n  flags                      String\n  group                      String, Integer\n  guard_interpreter          Symbol\n  interpreter                String\n  notifies                   # see description\n  provider                   Chef::Provider::Batch\n  returns                    Integer, Array\n  subscribes                 # see description\n  timeout                    Integer, Float\n  user                       String, Integer\n  action                     Symbol # defaults to :run if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">batch</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">command</code> is the command to be run and <code class=\"docutils literal\">cwd</code> is the location from which the command is run</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">architecture</code>, <code class=\"docutils literal\">code</code>, <code class=\"docutils literal\">command</code>, <code class=\"docutils literal\">creates</code>, <code class=\"docutils literal\">cwd</code>, <code class=\"docutils literal\">flags</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">guard_interpreter</code>, <code class=\"docutils literal\">interpreter</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">returns</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">user</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:run</code></dt> <dd>Run a batch file.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">architecture</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol</p> <p class=\"last\">The architecture of the process under which a script is executed. If a value is not provided, the chef-client defaults to the correct value for the architecture, as determined by Ohai. An exception is raised when anything other than <code class=\"docutils literal\">:i386</code> is specified for a 32-bit process. Possible values: <code class=\"docutils literal\">:i386</code> (for 32-bit processes) and <code class=\"docutils literal\">:x86_64</code> (for 64-bit processes).</p> </dd> <dt><code class=\"docutils literal\">code</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">A quoted (” ”) string of code to be executed.</p> </dd> <dt><code class=\"docutils literal\">command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the command to be executed.</p> </dd> <dt><code class=\"docutils literal\">creates</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Prevent a command from creating a file when that file already exists.</p> </dd> <dt><code class=\"docutils literal\">cwd</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The current working directory from which a command is run.</p> </dd> <dt><code class=\"docutils literal\">flags</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One or more command line flags that are passed to the interpreter when a command is invoked.</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The group name or group ID that must be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">guard_interpreter</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol</p> <p class=\"last\">Default value: <code class=\"docutils literal\">:batch</code>. When this property is set to <code class=\"docutils literal\">:batch</code>, the 64-bit version of the cmd.exe shell will be used to evaluate strings values for the <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> properties. Set this value to <code class=\"docutils literal\">:default</code> to use the 32-bit version of the cmd.exe shell.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">interpreter</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The script interpreter to use during code execution. Changing the default value of this property is not supported.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">returns</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Array</p> <p class=\"last\">The return value for a command. This may be an array of accepted values. An exception is raised when the return value(s) do not match. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Float</p> <p class=\"last\">The amount of time (in seconds) a command is to wait before timing out. Default value: <code class=\"docutils literal\">3600</code>.</p> </dd> <dt><code class=\"docutils literal\">user</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">A user name or identifier that must be changed before running a command.</p> </dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference external\" href=\"http://technet.microsoft.com/en-us/library/bb490880.aspx\">http://technet.microsoft.com/en-us/library/bb490880.aspx</a> for more information about the cmd.exe interpreter.</p> </div>  <h3 id=\"guards\">Guards</h3> <p>A guard property can be used to evaluate the state of a node during the execution phase of the chef-client run. Based on the results of this evaluation, a guard property is then used to tell the chef-client if it should continue executing a resource. A guard property accepts either a string value or a Ruby block value:</p> <ul class=\"simple\"> <li>A string is executed as a shell command. If the command returns <code class=\"docutils literal\">0</code>, the guard is applied. If the command returns any other value, then the guard property is not applied. String guards in a <strong>powershell_script</strong> run Windows PowerShell commands and may return <code class=\"docutils literal\">true</code> in addition to <code class=\"docutils literal\">0</code>.</li> <li>A block is executed as Ruby code that must return either <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. If the block returns <code class=\"docutils literal\">true</code>, the guard property is applied. If the block returns <code class=\"docutils literal\">false</code>, the guard property is not applied.</li> </ul> <p>A guard property is useful for ensuring that a resource is idempotent by allowing that resource to test for the desired state as it is being executed, and then if the desired state is present, for the chef-client to do nothing.</p> <p><strong>Attributes</strong></p> <p>The following properties can be used to define a guard that is evaluated during the execution phase of the chef-client run:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">not_if</code></dt> <dd>Prevent a resource from executing when the condition returns <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">only_if</code></dt> <dd>Allow a resource to execute only if the condition returns <code class=\"docutils literal\">true</code>.</dd> </dl> <p><strong>Arguments</strong></p> <p>The following arguments can be used with the <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code> guard properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:user</code></dt> <dd>\n<p class=\"first\">Specify the user that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :user =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:group</code></dt> <dd>\n<p class=\"first\">Specify the group that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :group =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:environment</code></dt> <dd>\n<p class=\"first\">Specify a Hash of environment variables to be set. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :environment =&gt; {\n  'HOME' =&gt; '/home/adam'\n}</pre> </dd> <dt><code class=\"docutils literal\">:cwd</code></dt> <dd>\n<p class=\"first\">Set the current working directory before running a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam passwd', :cwd =&gt; '/etc'</pre> </dd> <dt><code class=\"docutils literal\">:timeout</code></dt> <dd>\n<p class=\"first\">Set a timeout for a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'sleep 10000', :timeout =&gt; 10</pre> </dd> </dl>    <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Unzip a file, and then move it</strong></p> <p>To run a batch file that unzips and then moves Ruby, do something like:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">batch 'unzip_and_move_ruby' do\n  code &lt;&lt;-EOH\n    7z.exe x #{Chef::Config[:file_cache_path]}/ruby-1.8.7-p352-i386-mingw32.7z\n      -oC:\\\\source -r -y\n    xcopy C:\\\\source\\\\ruby-1.8.7-p352-i386-mingw32 C:\\\\ruby /e /y\n    EOH\nend\n\nbatch 'echo some env vars' do\n  code &lt;&lt;-EOH\n    echo %TEMP%\n    echo %SYSTEMDRIVE%\n    echo %PATH%\n    echo %WINDIR%\n    EOH\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">batch 'unzip_and_move_ruby' do\n  code &lt;&lt;-EOH\n    7z.exe x #{Chef::Config[:file_cache_path]}/ruby-1.8.7-p352-i386-mingw32.7z\n      -oC:\\\\source -r -y\n    xcopy C:\\\\source\\\\ruby-1.8.7-p352-i386-mingw32 C:\\\\ruby /e /y\n    EOH\nend\n\nbatch 'echo some env vars' do\n  code 'echo %TEMP%\\\\necho %SYSTEMDRIVE%\\\\necho %PATH%\\\\necho %WINDIR%'\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_batch.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_batch.html</a>\n  </p>\n</div>\n","12-9/debug":"<h1 id=\"debug-recipes-and-chef-client-title-runs\">Debug Recipes and chef-client Runs</h1> <p>Chef is a powerful automation platform that transforms complex infrastructure into code, bringing your servers and services to life. Whether you’re operating in the cloud, on-premises, or a hybrid, Chef automates how applications are configured, deployed, and managed across your network, no matter its size.</p> <p>Chef is built around simple concepts: achieving desired state, centralized modeling of IT infrastructure, and resource primitives that serve as building blocks. These concepts enable you to quickly manage any infrastructure with Chef. These very same concepts allow Chef to handle the most difficult infrastructure challenges on the planet. Anything that can run the chef-client can be managed by Chef.</p> <p>Elements of good approaches to building cookbooks and recipes that are reliable include:</p> <ul class=\"simple\"> <li>A consistent syntax pattern when constructing recipes</li> <li>Using the same patterns in Ruby</li> <li>Using platform resources before creating custom ones</li> <li>Using community-authored lightweight resources before creating custom ones</li> </ul> <p>Ideally, the best way to debug a recipe is to not have to debug it in the first place. That said, the following sections discuss various approaches to debugging recipes and failed chef-client runs.</p>  <h2 id=\"basic\">Basic</h2> <p>Some simple ways to quickly identify common issues that can trigger recipe and/or chef-client run failures include:</p> <ul class=\"simple\"> <li>Using an empty run-list</li> <li>Using verbose logging with knife</li> <li>Using logging with the chef-client</li> <li>Using the <strong>log</strong> resource in a recipe to define custom logging</li> </ul>  <h3 id=\"empty-run-lists\">Empty Run-lists</h3> <p>Use an empty run-list to determine if a failed chef-client run has anything to do with the recipes that are defined within that run-list. This is a quick way to discover if the underlying cause of a chef-client run failure is a configuration issue. If a failure persists even if the run-list is empty, check the following:</p> <ul class=\"simple\"> <li>Configuration settings in the knife.rb file</li> <li>Permissions for the user to both the Chef server and to the node on which the chef-client run is to take place</li> </ul>   <h3 id=\"knife-title\">Knife</h3> <p>Use the verbose logging that is built into knife:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-V</code>, <code class=\"docutils literal\">--verbose</code>\n</dt> <dd>Set for more verbose outputs. Use <code class=\"docutils literal\">-VV</code> for maximum verbosity.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Plugins do not always support verbose logging.</p> </div>   <h3 id=\"chef-client-title\">chef-client</h3> <p>Use the verbose logging that is built into the chef-client:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-l LEVEL</code>, <code class=\"docutils literal\">--log_level LEVEL</code>\n</dt> <dd>The level of logging to be stored in a log file.</dd> <dt>\n<code class=\"docutils literal\">-L LOGLOCATION</code>, <code class=\"docutils literal\">--logfile c</code>\n</dt> <dd>The location of the log file. This is recommended when starting any executable as a daemon. Default value: <code class=\"docutils literal\">STDOUT</code>.</dd> </dl>   <h3 id=\"log-resource\">log Resource</h3> <p>Use the <strong>log</strong> resource to create log entries. The <strong>log</strong> resource behaves like any other resource: built into the resource collection during the compile phase, and then run during the execution phase. (To create a log entry that is not built into the resource collection, use <code class=\"docutils literal\">Chef::Log</code> instead of the <strong>log</strong> resource.)</p>  <h4 id=\"syntax\">Syntax</h4> <p>A <strong>log</strong> resource block adds messages to the log file based on events that occur during the chef-client run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">log 'message' do\n  message 'A message add to the log.'\n  level :info\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>log</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">log 'name' do\n  level                      Symbol\n  message                    String # defaults to 'name' if not specified\n  notifies                   # see description\n  provider                   Chef::Provider::ChefLog\n  subscribes                 # see description\n  action                     Symbol # defaults to :write if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">log</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">message</code> is the log message to write</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">level</code>, <code class=\"docutils literal\">message</code>, and <code class=\"docutils literal\">provider</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h4 id=\"actions\">Actions</h4> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:write</code></dt> <dd>Default. Write to log.</dd> </dl>   <h4 id=\"attributes\">Attributes</h4> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">level</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol</p> <p class=\"last\">The level of logging that is to be displayed by the chef-client. The chef-client uses the <code class=\"docutils literal\">mixlib-log</code> (<a class=\"reference external\" href=\"https://github.com/chef/mixlib-log\">https://github.com/chef/mixlib-log</a>) to handle logging behavior. Options (in order of priority): <code class=\"docutils literal\">:debug</code>, <code class=\"docutils literal\">:info</code>, <code class=\"docutils literal\">:warn</code>, <code class=\"docutils literal\">:error</code>, and <code class=\"docutils literal\">:fatal</code>. Default value: <code class=\"docutils literal\">:info</code>.</p> </dd> <dt><code class=\"docutils literal\">message</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The message to be added to a log file. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> </dl>   <h4 id=\"providers\">Providers</h4> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Log::ChefLog</code>, <code class=\"docutils literal\">log</code>\n</dt> <dd>The default provider for all platforms.</dd> </dl>   <h4 id=\"examples\">Examples</h4> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Specify a log entry</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">log 'a string to log'</pre> <p><strong>Set debug logging level</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">log 'a debug string' do\n  level :debug\nend</pre> <p><strong>Create log entry when the contents of a data bag are used</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">log 'a debug string' do\n  level :debug\nend</pre> <p><strong>Add a message to a log file</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">log 'message' do\n  message 'This is the message that will be added to the log.'\n  level :info\nend</pre>     <h2 id=\"advanced\">Advanced</h2> <p>Some more complex ways to debug issues with a chef-client run include:</p> <ul class=\"simple\"> <li>Using the <strong>chef_handler</strong> cookbook</li> <li>Using the chef-shell and the <strong>breakpoint</strong> resource to add breakpoints to recipes, and to then step through the recipes using the breakpoints</li> <li>Using the <code class=\"docutils literal\">debug_value</code> method from chef-shell to indentify the location(s) from which attribute values are being set</li> <li>Using the <code class=\"docutils literal\">ignore_failure</code> method in a recipe to force the chef-client to move past an error to see what else is going on in the recipe, outside of a known failure</li> <li>Using chef-solo to run targeted chef-client runs for specific scenarios</li> </ul>  <h3 id=\"chef-handler\">chef_handler</h3> <p>Use a handler to identify situations that arise during a chef-client run, and then tell the chef-client how to handle these situations when they occur.</p> <p>There are three types of handlers:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Handler</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>exception</td> <td>An exception handler is used to identify situations that have caused a chef-client run to fail. An exception handler can be loaded at the start of a chef-client run by adding a recipe that contains the <strong>chef_handler</strong> resource to a node’s run-list. An exception handler runs when the <code class=\"docutils literal\">failed?</code> property for the <code class=\"docutils literal\">run_status</code> object returns <code class=\"docutils literal\">true</code>.</td> </tr> <tr class=\"row-odd\">\n<td>report</td> <td>A report handler is used when a chef-client run succeeds and reports back on certain details about that chef-client run. A report handler can be loaded at the start of a chef-client run by adding a recipe that contains the <strong>chef_handler</strong> resource to a node’s run-list. A report handler runs when the <code class=\"docutils literal\">success?</code> property for the <code class=\"docutils literal\">run_status</code> object returns <code class=\"docutils literal\">true</code>.</td> </tr> <tr class=\"row-even\">\n<td>start</td> <td>A start handler is used to run events at the beginning of the chef-client run. A start handler can be loaded at the start of a chef-client run by adding the start handler to the <code class=\"docutils literal\">start_handlers</code> setting in the client.rb file or by installing the gem that contains the start handler by using the <strong>chef_gem</strong> resource in a recipe in the <strong>chef-client</strong> cookbook. (A start handler may not be loaded using the <code class=\"docutils literal\">chef_handler</code> resource.)</td> </tr> </tbody> </table> <p>Read more <a class=\"reference internal\" href=\"handlers\">about exception, report, and start handlers</a>.</p>   <h3 id=\"chef-shell\">chef-shell</h3> <p>chef-shell is a recipe debugging tool that allows the use of breakpoints within recipes. chef-shell runs as an Interactive Ruby (IRb) session. chef-shell supports both recipe and attribute file syntax, as well as interactive debugging features.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">chef-shell is the new name for Shef as of chef-client version 11.0. chef-shell is backwards compatible and aside from the name change, has the same set of functionality as with previous releases.</p> </div> <p>chef-shell is tool that is run using an Interactive Ruby (IRb) session. chef-shell currently supports recipe and attribute file syntax, as well as interactive debugging features. chef-shell has three run modes:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Mode</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Standalone</td> <td>Default. No cookbooks are loaded, and the run-list is empty.</td> </tr> <tr class=\"row-odd\">\n<td>Solo</td> <td>chef-shell acts as a chef-solo client. It attempts to load the chef-solo configuration file and JSON attributes. If the JSON attributes set a run-list, it will be honored. Cookbooks will be loaded in the same way that chef-solo loads them. chef-solo mode is activated with the <code class=\"docutils literal\">-s</code> or <code class=\"docutils literal\">--solo</code> command line option, and JSON attributes are specified in the same way as for chef-solo, with <code class=\"docutils literal\">-j /path/to/chef-solo.json</code>.</td> </tr> <tr class=\"row-even\">\n<td>Client</td> <td>chef-shell acts as a chef-client. During startup, it reads the chef-client configuration file and contacts the Chef server to get attributes and cookbooks. The run-list will be set in the same way as normal chef-client runs. chef-client mode is activated with the <code class=\"docutils literal\">-z</code> or <code class=\"docutils literal\">--client</code> options. You can also specify the configuration file with <code class=\"docutils literal\">-c CONFIG</code> and the server URL with <code class=\"docutils literal\">-S SERVER_URL</code>.</td> </tr> </tbody> </table>  <h4 id=\"configure\">Configure</h4> <p>chef-shell determines which configuration file to load based on the following:</p> <ol class=\"arabic simple\"> <li>If a configuration file is specified using the <code class=\"docutils literal\">-c</code> option, chef-shell will use the specified configuration file</li> <li>When chef-shell is started using a named configuration as an argument, chef-shell will search for a chef-shell.rb file in that directory under <code class=\"docutils literal\">~/.chef</code>. For example, if chef-shell is started using <code class=\"docutils literal\">production</code> as the named configuration, the chef-shell will load a configuration file from <code class=\"docutils literal\">~/.chef/production/chef_shell.rb</code>\n</li> <li>If a named configuration is not provided, chef-shell will attempt to load the chef-shell.rb file from the <code class=\"docutils literal\">.chef</code> directory. For example: <code class=\"docutils literal\">~/.chef/chef_shell.rb</code>\n</li> <li>If a chef-shell.rb file is not found, chef-shell will attempt to load the client.rb file</li> <li>If a chef-shell.rb file is not found, chef-shell will attempt to load the solo.rb file</li> </ol>   <h4 id=\"chef-shell-rb\">chef-shell.rb</h4> <p>The chef-shell.rb file can be used to configure chef-shell in the same way as the client.rb file is used to configure the chef-client. For example, to configure chef-shell to authenticate to the Chef server, copy the <code class=\"docutils literal\">node_name</code>, <code class=\"docutils literal\">client_key</code>, and <code class=\"docutils literal\">chef_server_url</code> settings from the knife.rb file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node_name                'your-knife-clientname'\nclient_key               File.expand_path('~/.chef/my-client.pem')\nchef_server_url          'https://api.opscode.com/organizations/myorg'</pre> <p>and then add them to the chef-shell.rb file. Other configuration possibilities include disabling Ohai plugins (which will speed up the chef-shell boot process) or including arbitrary Ruby code in the chef-shell.rb file.</p>   <h4 id=\"run-as-a-chef-client-title\">Run as a chef-client</h4> <p>By default, chef-shell loads in standalone mode and does not connect to the Chef server. The chef-shell can be run as a chef-client to verify functionality that is only available when the chef-client connects to the Chef server, such as search functionality or accessing data stored in data bags.</p> <p>chef-shell can use the same credentials as knife when connecting to a Chef server. Make sure that the settings in chef-shell.rb are the same as those in knife.rb, and then use the <code class=\"docutils literal\">-z</code> option as part of the command. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-shell -z</pre>   <h4 id=\"manage\">Manage</h4> <p>When chef-shell is configured to access a Chef server, chef-shell can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags.</p> <p>The syntax for managing objects on the Chef server is as follows:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef (named_configuration) &gt; items.command</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">named_configuration</code> is a named configuration, such as <code class=\"docutils literal\">production</code>, <code class=\"docutils literal\">staging</code>, or <code class=\"docutils literal\">test</code>\n</li> <li>\n<code class=\"docutils literal\">items</code> is the type of item to search for: <code class=\"docutils literal\">cookbooks</code>, <code class=\"docutils literal\">clients</code>, <code class=\"docutils literal\">nodes</code>, <code class=\"docutils literal\">roles</code>, <code class=\"docutils literal\">environments</code> or a data bag</li> <li>\n<code class=\"docutils literal\">command</code> is the command: <code class=\"docutils literal\">list</code>, <code class=\"docutils literal\">show</code>, <code class=\"docutils literal\">find</code>, or <code class=\"docutils literal\">edit</code>\n</li> </ul> <p>For example, to list all of the nodes in a configuration named “preprod”:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef (preprod) &gt; nodes.list</pre> <p>to return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ =&gt; [node[i-f09a939b], node[i-049a936f], node[i-eaaaa581], node[i-9154b1fb],\n     node[i-6a213101], node[i-c2687aa9], node[i-7abeaa11], node[i-4eb8ac25],\n     node[i-9a2030f1], node[i-a06875cb], node[i-145f457f], node[i-e032398b],\n     node[i-dc8c98b7], node[i-6afdf401], node[i-f49b119c], node[i-5abfab31],\n     node[i-78b8ac13], node[i-d99678b3], node[i-02322269], node[i-feb4a695],\n     node[i-9e2232f5], node[i-6e213105], node[i-cdde3ba7], node[i-e8bfb083],\n     node[i-743c2c1f], node[i-2eaca345], node[i-aa7f74c1], node[i-72fdf419],\n     node[i-140e1e7f], node[i-f9d43193], node[i-bd2dc8d7], node[i-8e7f70e5],\n     node[i-78f2e213], node[i-962232fd], node[i-4c322227], node[i-922232f9],\n     node[i-c02728ab], node[i-f06c7b9b]]</pre> <p>The <code class=\"docutils literal\">list</code> command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef (preprod) &gt; nodes.list {|n| puts \"#{n.name}: #{n.run_list}\" }</pre> <p>to return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ =&gt; i-f09a939b: role[lb], role[preprod], recipe[aws]\n     i-049a936f: role[lb], role[preprod], recipe[aws]\n     i-9154b1fb: recipe[erlang], role[base], role[couchdb], role[preprod],\n     i-6a213101: role[chef], role[preprod]\n     # more...</pre> <p>The <code class=\"docutils literal\">show</code> command can be used to display a specific node. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef (preprod) &gt; load_balancer = nodes.show('i-f09a939b')</pre> <p>to return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ =&gt; node[i-f09a939b]</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef (preprod) &gt; load_balancer.ec2.public_hostname</pre> <p>to return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ =&gt; \"ec2-111-22-333-44.compute-1.amazonaws.com\"</pre> <p>The <code class=\"docutils literal\">find</code> command can be used to search the Chef server from the chef-shell. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef (preprod) &gt; pp nodes.find(:ec2_public_hostname =&gt; 'ec2*')</pre> <p>A code block can be used to format the results. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef (preprod) &gt; pp nodes.find(:ec2_public_hostname =&gt; 'ec2*') {|n| n.ec2.ami_id } and nil</pre> <p>to return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ =&gt; [\"ami-f8927a91\",\n      \"ami-f8927a91\",\n      \"ami-a89870c1\",\n      \"ami-a89870c1\",\n      \"ami-a89870c1\",\n      \"ami-a89870c1\",\n      \"ami-a89870c1\"\n      # and more...</pre> <p>Or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">chef (preprod) &gt; amis = nodes.find(:ec2_public_hostname =&gt; 'ec2*') {|n| n.ec2.ami_id }\nchef (preprod) &gt; puts amis.uniq.sort</pre> <p>to return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ =&gt; ami-4b4ba522\n     ami-a89870c1\n     ami-eef61587\n     ami-f8927a91</pre>    <h3 id=\"breakpoint-resource\">breakpoint Resource</h3> <p>chef-shell allows the current position in a run-list to be manipulated during a chef-client run. Add breakpoints to a recipe to take advantage of this functionality.</p> <p>Use the <strong>breakpoint</strong> resource to add breakpoints to recipes. Run the chef-shell in chef-client mode, and then use those breakpoints to debug recipes. Breakpoints are ignored by the chef-client during an actual chef-client run. That said, breakpoints are typically used to debug recipes only when running them in a non-production environment, after which they are removed from those recipes before the parent cookbook is uploaded to the Chef server.</p>  <h4 id=\"id1\">Syntax</h4> <p>A <strong>breakpoint</strong> resource block creates a breakpoint in a recipe:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">breakpoint 'name' do\n  action :break\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">:break</code> will tell the chef-client to stop running a recipe; can only be used when the chef-client is being run in chef-shell mode</li> </ul>   <h4 id=\"id2\">Actions</h4> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:break</code></dt> <dd>Use to add a breakpoint to a recipe.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> </dl>   <h4 id=\"id3\">Attributes</h4> <p>This resource does not have any properties.</p>   <h4 id=\"id4\">Providers</h4> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Breakpoint</code>, <code class=\"docutils literal\">breakpoint</code>\n</dt> <dd>The default provider for all recipes.</dd> </dl>   <h4 id=\"id5\">Examples</h4> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>A recipe without a breakpoint</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_key node['yum']['elrepo']['key'] do\n  url  node['yum']['elrepo']['key_url']\n  action :add\nend\n\nyum_repository 'elrepo' do\n  description 'ELRepo.org Community Enterprise Linux Extras Repository'\n  key node['yum']['elrepo']['key']\n  mirrorlist node['yum']['elrepo']['url']\n  includepkgs node['yum']['elrepo']['includepkgs']\n  exclude node['yum']['elrepo']['exclude']\n  action :create\nend</pre> <p><strong>The same recipe with breakpoints</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">breakpoint \"before yum_key node['yum']['repo_name']['key']\" do\n  action :break\nend\n\nyum_key node['yum']['repo_name']['key'] do\n  url  node['yum']['repo_name']['key_url']\n  action :add\nend\n\nbreakpoint \"after yum_key node['yum']['repo_name']['key']\" do\n  action :break\nend\n\nbreakpoint \"before yum_repository 'repo_name'\" do\n  action :break\nend\n\nyum_repository 'repo_name' do\n  description 'description'\n  key node['yum']['repo_name']['key']\n  mirrorlist node['yum']['repo_name']['url']\n  includepkgs node['yum']['repo_name']['includepkgs']\n  exclude node['yum']['repo_name']['exclude']\n  action :create\nend\n\nbreakpoint \"after yum_repository 'repo_name'\" do\n  action :break\nend</pre> <p>where the name of each breakpoint is an arbitrary string. In the previous examples, the names are used to indicate if the breakpoint is before or after a resource, and then also to specify which resource.</p>    <h3 id=\"step-through-run-list\">Step Through Run-list</h3> <p>To explore how using the <strong>breakpoint</strong> to manually step through a chef-client run, create a simple recipe in chef-shell:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef &gt; recipe_mode\n  chef:recipe &gt; echo off\n  chef:recipe &gt; file \"/tmp/before-breakpoint\"\n  chef:recipe &gt; breakpoint \"foo\"\n  chef:recipe &gt; file \"/tmp/after-breakpoint\"</pre> <p>and then run the chef-client:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef:recipe &gt; run_chef\n  [Fri, 15 Jan 2010 14:17:49 -0800] DEBUG: Processing file[/tmp/before-breakpoint]\n  [Fri, 15 Jan 2010 14:17:49 -0800] DEBUG: file[/tmp/before-breakpoint] using Chef::Provider::File\n  [Fri, 15 Jan 2010 14:17:49 -0800] INFO: Creating file[/tmp/before-breakpoint] at /tmp/before-breakpoint\n  [Fri, 15 Jan 2010 14:17:49 -0800] DEBUG: Processing [./bin/../lib/chef/mixin/recipe_definition_dsl_core.rb:56:in 'new']\n  [Fri, 15 Jan 2010 14:17:49 -0800] DEBUG: [./bin/../lib/chef/mixin/recipe_definition_dsl_core.rb:56:in 'new'] using Chef::Provider::Breakpoint</pre> <p>The chef-client ran the first resource before the breakpoint (<code class=\"docutils literal\">file[/tmp/before-breakpoint]</code>), but then stopped after execution. The chef-client attempted to name the breakpoint after its position in the source file, but the chef-client was confused because the resource was entered interactively. From here, chef-shell can resume the chef-client run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef:recipe &gt; chef_run.resume\n  [Fri, 15 Jan 2010 14:27:08 -0800] INFO: Creating file[/tmp/after-breakpoint] at /tmp/after-breakpoint</pre> <p>A quick view of the <code class=\"docutils literal\">/tmp</code> directory shows that the following files were created:</p> <pre class=\"highlight-bash\" data-language=\"bash\">after-breakpoint\nbefore-breakpoint</pre> <p>The chef-client run can also be rewound, and then stepped through.</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef:recipe &gt; Chef::Log.level = :debug # debug logging won't turn on automatically in this case\n    =&gt; :debug\n  chef:recipe &gt; chef_run.rewind\n    =&gt; 0\n  chef:recipe &gt; chef_run.step\n  [Fri, 15 Jan 2010 14:40:52 -0800] DEBUG: Processing file[/tmp/before-breakpoint]\n  [Fri, 15 Jan 2010 14:40:52 -0800] DEBUG: file[/tmp/before-breakpoint] using Chef::Provider::File\n    =&gt; 1\n  chef:recipe &gt; chef_run.step\n  [Fri, 15 Jan 2010 14:40:54 -0800] DEBUG: Processing [./bin/../lib/chef/mixin/recipe_definition_dsl_core.rb:56:in 'new']\n  [Fri, 15 Jan 2010 14:40:54 -0800] DEBUG: [./bin/../lib/chef/mixin/recipe_definition_dsl_core.rb:56:in 'new'] using Chef::Provider::Breakpoint\n    =&gt; 2\n  chef:recipe &gt; chef_run.step\n  [Fri, 15 Jan 2010 14:40:56 -0800] DEBUG: Processing file[/tmp/after-breakpoint]\n  [Fri, 15 Jan 2010 14:40:56 -0800] DEBUG: file[/tmp/after-breakpoint] using Chef::Provider::File\n    =&gt; 3</pre> <p>From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the chef-client will skip creating them. If the files are deleted, then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef:recipe &gt; ls(\"/tmp\").grep(/breakpoint/).each {|f| rm \"/tmp/#{f}\" }\n    =&gt; [\"after-breakpoint\", \"before-breakpoint\"]</pre> <p>Rewind, and then resume the chef-client run to get the expected results:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef:recipe &gt; chef_run.rewind\n  chef:recipe &gt; chef_run.resume\n  [Fri, 15 Jan 2010 14:48:56 -0800] DEBUG: Processing file[/tmp/before-breakpoint]\n  [Fri, 15 Jan 2010 14:48:56 -0800] DEBUG: file[/tmp/before-breakpoint] using Chef::Provider::File\n  [Fri, 15 Jan 2010 14:48:56 -0800] INFO: Creating file[/tmp/before-breakpoint] at /tmp/before-breakpoint\n  [Fri, 15 Jan 2010 14:48:56 -0800] DEBUG: Processing [./bin/../lib/chef/mixin/recipe_definition_dsl_core.rb:56:in 'new']\n  [Fri, 15 Jan 2010 14:48:56 -0800] DEBUG: [./bin/../lib/chef/mixin/recipe_definition_dsl_core.rb:56:in 'new'] using Chef::Provider::Breakpoint\n  chef:recipe &gt; chef_run.resume\n  [Fri, 15 Jan 2010 14:49:20 -0800] DEBUG: Processing file[/tmp/after-breakpoint]\n  [Fri, 15 Jan 2010 14:49:20 -0800] DEBUG: file[/tmp/after-breakpoint] using Chef::Provider::File\n  [Fri, 15 Jan 2010 14:49:20 -0800] INFO: Creating file[/tmp/after-breakpoint] at /tmp/after-breakpoint</pre>   <h3 id=\"debug-existing-recipe\">Debug Existing Recipe</h3> <p>chef-shell can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting chef-shell and then used for debugging. chef-shell will report which recipes are being cached when it is started:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Loading....[Fri, 18 May 2012 11:30:08 -0700] INFO: Run List is [recipe[getting-started]]\n[Fri, 18 May 2012 11:30:08 -0700] INFO: Run List expands to [getting-started]\n[Fri, 18 May 2012 11:30:09 -0700] INFO: Loading cookbooks [getting-started]\ndone.\n\nThis is chef-shell, the Chef shell.\n Chef Version: 0.10.10\n http://www.opscode.com/chef\n docs.opscode.com\n\nrun `help' for help, `exit' or ^D to quit.\n\nOhai2u NODENAME!\nchef &gt;</pre> <p>To just load one recipe from the run-list, go into the recipe and use the <code class=\"docutils literal\">include_recipe</code> command. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef &gt; recipe_mode\n  chef:recipe &gt; include_recipe \"getting-started\"\n    =&gt; [#&lt;Chef::Recipe:0x10256f9e8 @cookbook_name=\"getting-started\",\n  ... output truncated ...</pre> <p>To load all of the recipes from a run-list, use code similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.run_list.expand(node.chef_environment).recipes.each do |r|\n  include_recipe r\nend</pre> <p>After the recipes that are to be debugged have been loaded, use the <code class=\"docutils literal\">run_chef</code> command to run them.</p>   <h3 id=\"advanced-debugging\">Advanced Debugging</h3> <p>In chef-shell, it is possible to get extremely verbose debugging using the tracing feature in Interactive Ruby (IRb). chef-shell provides a shortcut for turning tracing on and off. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef &gt; tracing on\n  /Users/danielsdeleo/.rvm/ree-1.8.7-2009.10/lib/ruby/1.8/tracer.rb:150: warning: tried to create Proc object without a block\n  /Users/danielsdeleo/.rvm/ree-1.8.7-2009.10/lib/ruby/1.8/tracer.rb:146: warning: tried to create Proc object without a block\n  tracing is on\n    =&gt; nil</pre> <p>and:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef &gt; tracing off\n  #0:(irb):3:Object:-: tracing off\n  #0:/opt/chef/embedded/lib/ruby/gems/1.9.3/gems/chef-11.4.4/lib/chef/shell/ext.rb:108:Shell::Extensions::ObjectCoreExtensions:&gt;:       def off\n  #0:/opt/chef/embedded/lib/ruby/gems/1.9.3/gems/chef-11.4.4/lib/chef/shell/ext.rb:109:Shell::Extensions::ObjectCoreExtensions:-:         :off\n  #0:/opt/chef/embedded/lib/ruby/gems/1.9.3/gems/chef-11.4.4/lib/chef/shell/ext.rb:110:Shell::Extensions::ObjectCoreExtensions:&lt;:       end\n  #0:/opt/chef/embedded/lib/ruby/gems/1.9.3/gems/chef-11.4.4/lib/chef/shell/ext.rb:273:main:&gt;:       def tracing(on_or_off)\n  #0:/opt/chef/embedded/lib/ruby/gems/1.9.3/gems/chef-11.4.4/lib/chef/shell/ext.rb:274:main:-:         conf.use_tracer = on_or_off.on_off_to_bool\n  #0:/opt/chef/embedded/lib/ruby/gems/1.9.3/gems/chef-11.4.4/lib/chef/shell/ext.rb:161:Shell::Extensions::Symbol:&gt;:       def on_off_to_bool\n  #0:/opt/chef/embedded/lib/ruby/gems/1.9.3/gems/chef-11.4.4/lib/chef/shell/ext.rb:162:Shell::Extensions::Symbol:-:         self.to_s.on_off_to_bool\n  #0:/opt/chef/embedded/lib/ruby/gems/1.9.3/gems/chef-11.4.4/lib/chef/shell/ext.rb:148:Shell::Extensions::String:&gt;:       def on_off_to_bool\n  #0:/opt/chef/embedded/lib/ruby/gems/1.9.3/gems/chef-11.4.4/lib/chef/shell/ext.rb:149:Shell::Extensions::String:-:         case self\n  #0:/opt/chef/embedded/lib/ruby/gems/1.9.3/gems/chef-11.4.4/lib/chef/shell/ext.rb:153:Shell::Extensions::String:-:           false\n  #0:/opt/chef/embedded/lib/ruby/gems/1.9.3/gems/chef-11.4.4/lib/chef/shell/ext.rb:157:Shell::Extensions::String:&lt;:       end\n  #0:/opt/chef/embedded/lib/ruby/gems/1.9.3/gems/chef-11.4.4/lib/chef/shell/ext.rb:163:Shell::Extensions::Symbol:&lt;:       end\n  tracing is off\n   =&gt; nil\n  chef &gt;</pre>   <h3 id=\"debug-value\">debug_value</h3> <p>Use the <code class=\"docutils literal\">debug_value</code> method to discover the location within the attribute precedence hierarchy from which a particular attribute (or sub-attribute) is set. This method is available when running chef-shell in chef-client mode:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-shell -z</pre> <p>For example, the following attributes exist in a cookbook. Some are defined in a role file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default_attributes 'test' =&gt; {'source' =&gt; 'role default'}\noverride_attributes 'test' =&gt; {'source' =&gt; 'role override'}</pre> <p>And others are defined in an attributes file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default[:test][:source]  = 'attributes default'\nset[:test][:source]      = 'attributes normal'\noverride[:test][:source] = 'attributes override'</pre> <p>To debug the location in which the value of <code class=\"docutils literal\">node[:test][:source]</code> is set, use chef-shell and run a command similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">$ pp node.debug_value('test', 'source')</pre> <p>This will pretty-print return all of the attributes and sub-attributes as an array of arrays; <code class=\"docutils literal\">:not_present</code> is returned for any attribute without a value:</p> <pre class=\"highlight-bash\" data-language=\"bash\">[['set_unless_enabled?', false],\n ['default', 'attributes default'],\n ['env_default', :not_present],\n ['role_default', 'role default'],\n ['force_default', :not_present],\n ['normal', 'attributes normal'],\n ['override', 'attributes override'],\n ['role_override', 'role override'],\n ['env_override', :not_present],\n ['force_override', :not_present],\n ['automatic', :not_present]]</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">set_unless_enabled</code> indicates if the attribute collection is in <code class=\"docutils literal\">set_unless</code> mode; this typically returns <code class=\"docutils literal\">false</code>\n</li> <li>Each attribute type is listed in order of precedence</li> <li>Each attribute value shown is the value that is set for that precedence level</li> <li>\n<code class=\"docutils literal\">:not_present</code> is shown for any attribute precedence level that has no attributes</li> </ul> <p>A <a class=\"reference external\" href=\"http://jtimberman.housepub.org/blog/2014/09/02/chef-node-dot-debug-value/\">blog post by Joshua Timberman</a> provides another example of using this method.</p>   <h3 id=\"ignore-failure-method\">ignore_failure Method</h3> <p>All resources share a set of common actions, attributes, and so on. Use the following attribute in a resource to help identify where an issue within a recipe may be located:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Attribute</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">ignore_failure</code></td> <td>Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</td> </tr> </tbody> </table>   <h3 id=\"chef-solo\">chef-solo</h3> <p>chef-solo is an open source version of the chef-client that allows using cookbooks with nodes without requiring access to a Chef server. chef-solo runs locally and requires that a cookbook (and any of its dependencies) be on the same physical disk as the node. chef-solo is a limited-functionality version of the chef-client and <strong>does not support</strong> the following:</p> <ul class=\"simple\"> <li>Node data storage</li> <li>Search indexes</li> <li>Centralized distribution of cookbooks</li> <li>A centralized API that interacts with and integrates infrastructure components</li> <li>Authentication or authorization</li> <li>Persistent attributes</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">chef-solo can be run as a daemon.</p> </div> <p>The chef-solo executable is run as a command-line tool.</p>  <h4 id=\"options\">Options</h4> <p>This command has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">chef-solo OPTION VALUE OPTION VALUE ...</pre> <p>This command has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-c CONFIG</code>, <code class=\"docutils literal\">--config CONFIG</code>\n</dt> <dd>The configuration file to use.</dd> <dt>\n<code class=\"docutils literal\">-d</code>, <code class=\"docutils literal\">--daemonize</code>\n</dt> <dd>\n<p class=\"first\">Run the executable as a daemon.</p> <p class=\"last\">This option is only available on machines that run in UNIX or Linux environments. For machines that are running Microsoft Windows that require similar functionality, use the <code class=\"docutils literal\">chef-client::service</code> recipe in the <code class=\"docutils literal\">chef-client</code> cookbook: <a class=\"reference external\" href=\"https://supermarket.chef.io/cookbooks/chef-client\">https://supermarket.chef.io/cookbooks/chef-client</a>. This will install a chef-client service under Microsoft Windows using the Windows Service Wrapper.</p> </dd> <dt>\n<code class=\"docutils literal\">-E ENVIRONMENT_NAME</code>, <code class=\"docutils literal\">--environment ENVIRONMENT_NAME</code>\n</dt> <dd>The name of the environment.</dd> <dt>\n<code class=\"docutils literal\">-f</code>, <code class=\"docutils literal\">--[no-]fork</code>\n</dt> <dd>Contain the chef-client run in a secondary process with dedicated RAM. When the chef-client run is complete, the RAM is returned to the master process. This option helps ensure that a chef-client uses a steady amount of RAM over time because the master process does not run recipes. This option also helps prevent memory leaks such as those that can be introduced by the code contained within a poorly designed cookbook. Use <code class=\"docutils literal\">--no-fork</code> to disable running the chef-client in fork node. Default value: <code class=\"docutils literal\">--fork</code>.</dd> <dt>\n<code class=\"docutils literal\">-F FORMAT</code>, <code class=\"docutils literal\">--format FORMAT</code>\n</dt> <dd>\n<p class=\"first\">The output format: <code class=\"docutils literal\">doc</code> (default) or <code class=\"docutils literal\">min</code>.</p> <ul class=\"simple\"> <li>Use <code class=\"docutils literal\">doc</code> to print the progress of the chef-client run using full strings that display a summary of updates as they occur.</li> <li>Use <code class=\"docutils literal\">min</code> to print the progress of the chef-client run using single characters.</li> </ul> <p>A summary of updates is printed at the end of the chef-client run. A dot (<code class=\"docutils literal\">.</code>) is printed for events that do not have meaningful status information, such as loading a file or synchronizing a cookbook. For resources, a dot (<code class=\"docutils literal\">.</code>) is printed when the resource is up to date, an <code class=\"docutils literal\">S</code> is printed when the resource is skipped by <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code>, and a <code class=\"docutils literal\">U</code> is printed when the resource is updated.</p> <p class=\"last\">Other formatting options are available when those formatters are configured in the client.rb file using the <code class=\"docutils literal\">add_formatter</code> option.</p> </dd> <dt><code class=\"docutils literal\">--force-formatter</code></dt> <dd>Show formatter output instead of logger output.</dd> <dt><code class=\"docutils literal\">--force-logger</code></dt> <dd>Show logger output instead of formatter output.</dd> <dt>\n<code class=\"docutils literal\">-g GROUP</code>, <code class=\"docutils literal\">--group GROUP</code>\n</dt> <dd>The name of the group that owns a process. This is required when starting any executable as a daemon.</dd> <dt>\n<code class=\"docutils literal\">-h</code>, <code class=\"docutils literal\">--help</code>\n</dt> <dd>Show help for the command.</dd> <dt>\n<code class=\"docutils literal\">-i SECONDS</code>, <code class=\"docutils literal\">--interval SECONDS</code>\n</dt> <dd>The frequency (in seconds) at which the chef-client runs. When the chef-client is run at intervals, <code class=\"docutils literal\">--splay</code> values are applied first, then the chef-client run occurs, and then <code class=\"docutils literal\">--interval</code> values are applied.</dd> <dt>\n<code class=\"docutils literal\">-j PATH</code>, <code class=\"docutils literal\">--json-attributes PATH</code>\n</dt> <dd>\n<p class=\"first\">The path to a file that contains JSON data.</p> <p>Use this option to define a <code class=\"docutils literal\">run_list</code> object. For example, a JSON file similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">\"run_list\": [\n  \"recipe[base]\",\n  \"recipe[foo]\",\n  \"recipe[bar]\",\n  \"role[webserver]\"\n],</pre> <p>may be used by running <code class=\"docutils literal\">chef-client -j path/to/file.json</code>.</p> <p>In certain situations this option may be used to update <code class=\"docutils literal\">normal</code> attributes.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>Any other attribute type that is contained in this JSON file will be treated as a <code class=\"docutils literal\">normal</code> attribute. For example, attempting to update <code class=\"docutils literal\">override</code> attributes using the <code class=\"docutils literal\">-j</code> option:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"dev-99\",\n  \"description\": \"Install some stuff\",\n  \"override_attributes\": {\n    \"apptastic\": {\n      \"enable_apptastic\": \"false\",\n      \"apptastic_tier_name\": \"dev-99.bomb.com\"\n    }\n  }\n}</pre> <p>will result in a node object similar to:</p> <pre class=\"last highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"maybe-dev-99\",\n  \"normal\": {\n  \"name\": \"dev-99\",\n    \"description\": \"Install some stuff\",\n    \"override_attributes\": {\n      \"apptastic\": {\n        \"enable_apptastic\": \"false\",\n        \"apptastic_tier_name\": \"dev-99.bomb.com\"\n      }\n    }\n  }\n}</pre> </div> </dd> <dt>\n<code class=\"docutils literal\">-l LEVEL</code>, <code class=\"docutils literal\">--log_level LEVEL</code>\n</dt> <dd>The level of logging to be stored in a log file.</dd> <dt>\n<code class=\"docutils literal\">-L LOGLOCATION</code>, <code class=\"docutils literal\">--logfile c</code>\n</dt> <dd>The location of the log file. This is recommended when starting any executable as a daemon.</dd> <dt><code class=\"docutils literal\">--[no-]color</code></dt> <dd>View colored output. Default setting: <code class=\"docutils literal\">--color</code>.</dd> <dt>\n<code class=\"docutils literal\">-N NODE_NAME</code>, <code class=\"docutils literal\">--node-name NODE_NAME</code>\n</dt> <dd>The name of the node.</dd> <dt>\n<code class=\"docutils literal\">-o RUN_LIST_ITEM</code>, <code class=\"docutils literal\">--override-runlist RUN_LIST_ITEM</code>\n</dt> <dd>Replace the current run-list with the specified items.</dd> <dt>\n<code class=\"docutils literal\">-r RECIPE_URL</code>, <code class=\"docutils literal\">--recipe-url RECIPE_URL</code>\n</dt> <dd>The URL location from which a remote cookbook tar.gz is to be downloaded.</dd> <dt>\n<code class=\"docutils literal\">-s SECONDS</code>, <code class=\"docutils literal\">--splay SECONDS</code>\n</dt> <dd>A random number between zero and <code class=\"docutils literal\">splay</code> that is added to <code class=\"docutils literal\">interval</code>. Use splay to help balance the load on the Chef server by ensuring that many chef-client runs are not occuring at the same interval. When the chef-client is run at intervals, <code class=\"docutils literal\">--splay</code> values are applied first, then the chef-client run occurs, and then <code class=\"docutils literal\">--interval</code> values are applied.</dd> <dt>\n<code class=\"docutils literal\">-u USER</code>, <code class=\"docutils literal\">--user USER</code>\n</dt> <dd>The user that owns a process. This is required when starting any executable as a daemon.</dd> <dt>\n<code class=\"docutils literal\">-v</code>, <code class=\"docutils literal\">--version</code>\n</dt> <dd>The version of the chef-client.</dd> <dt>\n<code class=\"docutils literal\">-W</code>, <code class=\"docutils literal\">--why-run</code>\n</dt> <dd>Run the executable in why-run mode, which is a type of chef-client run that does everything except modify the system. Use why-run mode to understand why the chef-client makes the decisions that it makes and to learn more about the current and proposed state of the system.</dd> </dl>   <h4 id=\"id6\">Examples</h4> <p><strong>Use a URL</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-solo -c ~/solo.rb -j ~/node.json -r http://www.example.com/chef-solo.tar.gz</pre> <p>The tar.gz is archived into the <code class=\"docutils literal\">file_cache_path</code>, and then extracted to <code class=\"docutils literal\">cookbooks_path</code>.</p> <p><strong>Use a directory</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-solo -c ~/solo.rb -j ~/node.json</pre> <p>chef-solo will look in the solo.rb file to determine the directory in which cookbooks are located.</p> <p><strong>Use a URL for cookbook and JSON data</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-solo -c ~/solo.rb -j http://www.example.com/node.json -r http://www.example.com/chef-solo.tar.gz</pre> <p>where <code class=\"docutils literal\">-r</code> corresponds to <code class=\"docutils literal\">recipe_url</code> and <code class=\"docutils literal\">-j</code> corresponds to <code class=\"docutils literal\">json_attribs</code>, both of which are configuration options in solo.rb.</p> <p><strong>“Hello World”</strong></p> <p>This example shows how to run chef-shell in standalone mode. (For chef-solo or chef-client modes, you would need to run chef-shell using the <code class=\"docutils literal\">-s</code> or <code class=\"docutils literal\">-z</code> command line options, and then take into consideration the necessary configuration settings.)</p> <p>When the chef-client is installed using RubyGems or a package manager, chef-shell should already be installed. When the chef-client is run from a git clone, it will be located in <code class=\"docutils literal\">chef/bin/chef shell</code>. To start chef-shell, just run it without any options. You’ll see the loading message, then the banner, and then the chef-shell prompt:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ bin/shef\n  ./bin/../lib/chef.rb:30: warning: already initialized constant VERSION\n  loading configuration: none (standalone shef session)\n  Loading.......done.\n\n  This is shef, the Chef shell.\n   Chef Version: 0.10.4\n   http://www.opscode.com/chef\n   http://wiki.opscode.com/display/chef/Home\n\nrun `help' for help, `exit' or ^D to quit.\n\nOhai2u danielsdeleo@eigenstate.local!\nchef &gt;</pre> <p>(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef &gt; recipe_mode\n  chef:recipe_mode &gt;</pre> <p>Typing is evaluated in the same context as recipes. Create a file resource:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef:recipe_mode &gt; file \"/tmp/ohai2u_shef\"\n    =&gt; #&lt;Chef::Resource::File:0x1b691ac\n       @enclosing_provider=nil,\n       @resource_name=:file,\n       @before=nil,\n       @supports={},\n       @backup=5,\n       @allowed_actions=[:nothing, :create, :delete, :touch, :create_if_missing],\n       @only_if=nil,\n       @noop=nil,\n       @collection=#&lt;Chef::ResourceCollection:0x1b9926c\n       @insert_after_idx=nil,\n       @resources_by_name={\"file[/tmp/ohai2u_shef]\"=&gt;0},\n       @resources=[#&lt;Chef::Resource::File:0x1b691ac ...&gt;]&gt;,\n       @updated=false,\n       @provider=nil,\n       @node=&lt;Chef::Node:0xdeeaae\n       @name=\"eigenstate.local\"&gt;,\n       @recipe_name=nil,\n       @not_if=nil,\n       @name=\"/tmp/ohai2u_shef\",\n       @action=\"create\",\n       @path=\"/tmp/ohai2u_shef\",\n       @source_line=\"/Users/danielsdeleo/ruby/chef/chef/(irb#1) line 1\",\n       @params={},\n       @actions={},\n       @cookbook_name=nil,\n       @ignore_failure=false&gt;</pre> <p>(The previous example was formatted for presentation.) At this point, chef-shell has created the resource and put it in the run-list, but not yet created the file. To initiate the chef-client run, use the <code class=\"docutils literal\">run_chef</code> command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef:recipe_mode &gt; run_chef\n  [Fri, 15 Jan 2010 10:42:47 -0800] DEBUG: Processing file[/tmp/ohai2u_shef]\n  [Fri, 15 Jan 2010 10:42:47 -0800] DEBUG: file[/tmp/ohai2u_shef] using Chef::Provider::File\n  [Fri, 15 Jan 2010 10:42:47 -0800] INFO: Creating file[/tmp/ohai2u_shef] at /tmp/ohai2u_shef\n    =&gt; true</pre> <p>chef-shell can also switch to the same context as attribute files. Set an attribute with the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef:recipe_mode &gt; attributes_mode\n  chef:attributes &gt; set[:hello] = \"ohai2u-again\"\n    =&gt; \"ohai2u-again\"\n  chef:attributes &gt;</pre> <p>Switch back to recipe_mode context and use the attributes:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef:attributes &gt; recipe_mode\n    =&gt; :attributes\n  chef:recipe_mode &gt; file \"/tmp/#{node.hello}\"</pre> <p>Now, run the chef-client again:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef:recipe_mode &gt; run_chef\n  [Fri, 15 Jan 2010 10:53:22 -0800] DEBUG: Processing file[/tmp/ohai2u_shef]\n  [Fri, 15 Jan 2010 10:53:22 -0800] DEBUG: file[/tmp/ohai2u_shef] using Chef::Provider::File\n  [Fri, 15 Jan 2010 10:53:22 -0800] DEBUG: Processing file[/tmp/ohai2u-again]\n  [Fri, 15 Jan 2010 10:53:22 -0800] DEBUG: file[/tmp/ohai2u-again] using Chef::Provider::File\n  [Fri, 15 Jan 2010 10:53:22 -0800] INFO: Creating file[/tmp/ohai2u-again] at /tmp/ohai2u-again\n    =&gt; true\n  chef:recipe_mode &gt;</pre> <p>Because the first resource (<code class=\"docutils literal\">file[/tmp/ohai2u_shef]</code>) is still in the run-list, it gets executed again. And because that file already exists, the chef-client doesn’t attempt to re-create it. Finally, the files were created using the <code class=\"docutils literal\">ls</code> method:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef:recipe_mode &gt; ls(\"/tmp\").grep(/ohai/)\n    =&gt; [\"ohai2u-again\", \"ohai2u_shef\"]\n      Shell Tutorial</pre> <p><strong>Get Specific Nodes</strong></p> <p>To get a list of nodes using a recipe named <code class=\"docutils literal\">postfix</code> use <code class=\"docutils literal\">search(:node,\"recipe:postfix\")</code>. To get a list of nodes using a sub-recipe named <code class=\"docutils literal\">delivery</code>, use chef-shell. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:node, 'recipes:postfix\\:\\:delivery')</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Single (‘ ‘) vs. double (” ”) is important. This is because a backslash () needs to be included in the string, instead of having Ruby interpret it as an escape.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/debug.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/debug.html</a>\n  </p>\n</div>\n","12-9/handlers":"<h1 id=\"about-handlers\">About Handlers</h1> <p>Use a handler to identify situations that arise during a chef-client run, and then tell the chef-client how to handle these situations when they occur.</p> <p>There are three types of handlers:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Handler</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>exception</td> <td>An exception handler is used to identify situations that have caused a chef-client run to fail. An exception handler can be loaded at the start of a chef-client run by adding a recipe that contains the <strong>chef_handler</strong> resource to a node’s run-list. An exception handler runs when the <code class=\"docutils literal\">failed?</code> property for the <code class=\"docutils literal\">run_status</code> object returns <code class=\"docutils literal\">true</code>.</td> </tr> <tr class=\"row-odd\">\n<td>report</td> <td>A report handler is used when a chef-client run succeeds and reports back on certain details about that chef-client run. A report handler can be loaded at the start of a chef-client run by adding a recipe that contains the <strong>chef_handler</strong> resource to a node’s run-list. A report handler runs when the <code class=\"docutils literal\">success?</code> property for the <code class=\"docutils literal\">run_status</code> object returns <code class=\"docutils literal\">true</code>.</td> </tr> <tr class=\"row-even\">\n<td>start</td> <td>A start handler is used to run events at the beginning of the chef-client run. A start handler can be loaded at the start of a chef-client run by adding the start handler to the <code class=\"docutils literal\">start_handlers</code> setting in the client.rb file or by installing the gem that contains the start handler by using the <strong>chef_gem</strong> resource in a recipe in the <strong>chef-client</strong> cookbook. (A start handler may not be loaded using the <code class=\"docutils literal\">chef_handler</code> resource.)</td> </tr> </tbody> </table>  <h2 id=\"exception-report-handlers\">Exception/Report Handlers</h2> <p>Exception and report handlers are used to trigger certain behaviors in response to specific situations, typically identified during a chef-client run.</p> <ul class=\"simple\"> <li>An exception handler is used to trigger behaviors when a defined aspect of a chef-client run fails.</li> <li>A report handler is used to trigger behaviors when a defined aspect of a chef-client run is successful.</li> </ul> <p>Both types of handlers can be used to gather data about a chef-client run and can provide rich levels of data about all types of usage, which can be used later for trending and analysis across the entire organization.</p> <p>Exception and report handlers are made available to the chef-client run in one of the following ways:</p> <ul class=\"simple\"> <li>By adding the <strong>chef_handler</strong> resource to a recipe, and then adding that recipe to the run-list for a node. (The <strong>chef_handler</strong> resource is available from the <strong>chef_handler</strong> cookbook.)</li> <li>By adding the handler to one of the following settings in the node’s client.rb file: <code class=\"docutils literal\">exception_handlers</code> and/or <code class=\"docutils literal\">report_handlers</code>\n</li> </ul>  <h3 id=\"run-from-recipes\">Run from Recipes</h3> <p>The <strong>chef_handler</strong> resource allows exception and report handlers to be enabled from within recipes, which can then added to the run-list for any node on which the exception or report handler should run. The <strong>chef_handler</strong> resource is available from the <strong>chef_handler</strong> cookbook.</p> <p>To use the <strong>chef_handler</strong> resource in a recipe, add code similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_handler 'name_of_handler' do\n  source '/path/to/handler/handler_name'\n  action :enable\nend</pre> <p>For example, a handler for Growl needs to be enabled at the beginning of the chef-client run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_gem 'chef-handler-growl'</pre> <p>and then is activated in a recipe by using the <strong>chef_handler</strong> resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_handler 'Chef::Handler::Growl' do\n  source 'chef/handler/growl'\n  action :enable\nend</pre>   <h3 id=\"run-from-client-rb\">Run from client.rb</h3> <p>A simple exception or report handler may be installed and configured at run-time. This requires editing of a node’s client.rb file to add the appropriate setting and information about that handler to the client.rb or solo.rb files. Depending on the handler type, one (or more) of the following settings must be added:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">exception_handlers</code></td> <td>A list of exception handlers that are available to the chef-client during a chef-client run.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">report_handlers</code></td> <td>A list of report handlers that are available to the chef-client during a chef-client run.</td> </tr> </tbody> </table> <p>When this approach is used, the client.rb file must also tell the chef-client how to install and run the handler. There is no default install location for handlers. The simplest way to distribute and install them is via RubyGems, though other methods such as GitHub or HTTP will also work. Once the handler is installed on the system, enable it in the client.rb file by requiring it. After the handler is installed, it may require additional configuration. This will vary from handler to handler. If a handler is a very simple handler, it may only require the creation of a new instance. For example, if a handler named <code class=\"docutils literal\">MyOrg::EmailMe</code> is hardcoded for all of the values required to send email, a new instance is required. And then the custom handler must be associated with each of the handler types for which it will run.</p> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'rubygems'\nrequire '/var/chef/handlers/email_me'         # the installation path\n\nemail_handler = MyOrg::EmailMe.new            # a simple handler\n\nstart_handlers &lt;&lt; email_handler               # run at the start of the run\nreport_handlers &lt;&lt; email_handler              # run at the end of a successful run\nexception_handlers &lt;&lt; email_handler           # run at the end of a failed run</pre>    <h2 id=\"start-handlers\">Start Handlers</h2> <p>A start handler is not loaded into the chef-client run from a recipe, but is instead listed in the client.rb file using the <code class=\"docutils literal\">start_handlers</code> attribute. The start handler must be installed on the node and be available to the chef-client prior to the start of the chef-client run. Use the <strong>chef-client</strong> cookbook to install the start handler.</p> <p>Start handlers are made available to the chef-client run in one of the following ways:</p> <ul class=\"simple\"> <li>By adding a start handler to the <strong>chef-client</strong> cookbook, which installs the handler on the node so that it is available to the chef-client at the start of the chef-client run</li> <li>By adding the handler to one of the following settings in the node’s client.rb file: <code class=\"docutils literal\">start_handlers</code>\n</li> </ul>  <h3 id=\"id1\">Run from Recipes</h3> <p>The <strong>chef-client</strong> cookbook can be configured to automatically install and configure gems that are required by a start handler. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.set['chef_client']['load_gems']['chef-reporting'] = {\n  :require_name =&gt; 'chef_reporting',\n  :action =&gt; :install\n}\n\nnode.set['chef_client']['config']['start_handlers'] = [\n  {\n    :class =&gt; 'Chef::Reporting::StartHandler',\n    :arguments =&gt; []\n  }\n]\n\ninclude_recipe 'chef-client::config'</pre>   <h3 id=\"id2\">Run from client.rb</h3> <p>A start handler can be configured in the client.rb file by adding the following setting:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">start_handlers</code></td> <td>A list of start handlers that are available to the chef-client at the start of a chef-client run.</td> </tr> </tbody> </table> <p>For example, the Reporting start handler adds the following code to the top of the client.rb file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">begin\n  require 'chef_reporting'\n  start_handlers &lt;&lt; Chef::Reporting::StartHandler.new()\nrescue LoadError\n  Chef::Log.warn 'Failed to load #{lib}. This should be resolved after a chef run.'\nend</pre> <p>This ensures that when the chef-client run begins the <code class=\"docutils literal\">chef_reporting</code> event handler is enabled. The <code class=\"docutils literal\">chef_reporting</code> event handler is part of a gem named <code class=\"docutils literal\">chef-reporting</code>. The <strong>chef_gem</strong> resource is used to install this gem:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_gem 'chef-reporting' do\n  action :install\nend</pre>    <h2 id=\"event-handlers\">Event Handlers</h2> <p>Use the Handler DSL to attach a callback to an event. If the event occurs during the chef-client run, the associated callback is executed. For example:</p> <ul class=\"simple\"> <li>Sending email if a chef-client run fails</li> <li>Sending a notification to chat application if an audit run fails</li> <li>Aggregating statistics about resources updated during a chef-client runs to StatsD</li> </ul>  <h3 id=\"on-method\">on Method</h3> <p>Use the <code class=\"docutils literal\">on</code> method to associate an event type with a callback. The callback defines what steps are taken if the event occurs during the chef-client run and is defined using arbitrary Ruby code. The syntax is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef.event_handler do\n  on :event_type do\n    # some Ruby\n  end\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">Chef.event_handler</code> declares a block of code within a recipe that is processed when the named event occurs during a chef-client run</li> <li>\n<code class=\"docutils literal\">on</code> defines the block of code that will tell the chef-client how to handle the event</li> <li>\n<code class=\"docutils literal\">:event_type</code> is a valid exception event type, such as <code class=\"docutils literal\">:run_start</code>, <code class=\"docutils literal\">:run_failed</code>, <code class=\"docutils literal\">:converge_failed</code>, <code class=\"docutils literal\">:resource_failed</code>, or <code class=\"docutils literal\">:recipe_not_found</code>\n</li> </ul> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Chef.event_handler do\n  on :converge_start do\n    puts \"Ohai! I have started a converge.\"\n  end\nend</pre>   <h3 id=\"event-types\">Event Types</h3> <p>The following table describes the events that may occur during a chef-client run. Each of these events may be referenced in an <code class=\"docutils literal\">on</code> method block by declaring it as the event type.</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Event</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:run_start</code></td> <td>The start of the chef-client run.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:run_started</code></td> <td>The chef-client run has started.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:ohai_completed</code></td> <td>The Ohai run has completed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:skipping_registration</code></td> <td>The chef-client is not registering with the Chef server because it already has a private key or because it does not need one.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:registration_start</code></td> <td>The chef-client is attempting to create a private key with which to register to the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:registration_completed</code></td> <td>The chef-client created its private key successfully.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:registration_failed</code></td> <td>The chef-client encountered an error and was unable to register with the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:node_load_start</code></td> <td>The chef-client is attempting to load node data from the Chef server.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:node_load_failed</code></td> <td>The chef-client encountered an error and was unable to load node data from the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:run_list_expand_failed</code></td> <td>The chef-client failed to expand the run-list.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:node_load_completed</code></td> <td>The chef-client successfully loaded node data from the Chef server. Default and override attributes for roles have been computed, but are not yet applied.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:policyfile_loaded</code></td> <td>The policy file was loaded.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:cookbook_resolution_start</code></td> <td>The chef-client is attempting to pull down the cookbook collection from the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:cookbook_resolution_failed</code></td> <td>The chef-client failed to pull down the cookbook collection from the Chef server.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:cookbook_resolution_complete</code></td> <td>The chef-client successfully pulled down the cookbook collection from the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:cookbook_clean_start</code></td> <td>The chef-client is attempting to remove unneeded cookbooks.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:removed_cookbook_file</code></td> <td>The chef-client removed a file from a cookbook.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:cookbook_clean_complete</code></td> <td>The chef-client is done removing cookbooks and/or cookbook files.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:cookbook_sync_start</code></td> <td>The chef-client is attempting to synchronize cookbooks.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:synchronized_cookbook</code></td> <td>The chef-client is attempting to synchronize the named cookbook.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:updated_cookbook_file</code></td> <td>The chef-client updated the named file in the named cookbook.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:cookbook_sync_failed</code></td> <td>The chef-client was unable to synchronize cookbooks.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:cookbook_sync_complete</code></td> <td>The chef-client is finished synchronizing cookbooks.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:library_load_start</code></td> <td>The chef-client is loading library files.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:library_file_loaded</code></td> <td>The chef-client successfully loaded the named library file.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:library_file_load_failed</code></td> <td>The chef-client was unable to load the named library file.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:library_load_complete</code></td> <td>The chef-client is finished loading library files.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:lwrp_load_start</code></td> <td>The chef-client is loading custom resources.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:lwrp_file_loaded</code></td> <td>The chef-client successfully loaded the named custom resource.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:lwrp_file_load_failed</code></td> <td>The chef-client was unable to load the named custom resource.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:lwrp_load_complete</code></td> <td>The chef-client is finished loading custom resources.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:attribute_load_start</code></td> <td>The chef-client is loading attribute files.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:attribute_file_loaded</code></td> <td>The chef-client successfully loaded the named attribute file.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:attribute_file_load_failed</code></td> <td>The chef-client was unable to load the named attribute file.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:attribute_load_complete</code></td> <td>The chef-client is finished loading attribute files.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:definition_load_start</code></td> <td>The chef-client is loading definitions.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:definition_file_loaded</code></td> <td>The chef-client successfully loaded the named definition.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:definition_file_load_failed</code></td> <td>The chef-client was unable to load the named definition.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:definition_load_complete</code></td> <td>The chef-client is finished loading definitions.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:recipe_load_start</code></td> <td>The chef-client is loading recipes.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:recipe_file_loaded</code></td> <td>The chef-client successfully loaded the named recipe.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:recipe_file_load_failed</code></td> <td>The chef-client was unable to load the named recipe.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:recipe_not_found</code></td> <td>The chef-client was unable to find the named recipe.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:recipe_load_complete</code></td> <td>The chef-client is finished loading recipes.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:converge_start</code></td> <td>The chef-client run converge phase has started.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:converge_complete</code></td> <td>The chef-client run converge phase is complete.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:converge_failed</code></td> <td>The chef-client run converge phase has failed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:audit_phase_start</code></td> <td>The chef-client run audit phase has started.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:audit_phase_complete</code></td> <td>The chef-client run audit phase is finished.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:audit_phase_failed</code></td> <td>The chef-client run audit phase has failed.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:control_group_started</code></td> <td>The named control group is being processed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:control_example_success</code></td> <td>The named control group has been processed.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:control_example_failure</code></td> <td>The named control group’s processing has failed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_action_start</code></td> <td>A resource action is starting.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:resource_skipped</code></td> <td>A resource action was skipped.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_current_state_loaded</code></td> <td>A resource’s current state was loaded.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:resource_current_state_load_bypassed</code></td> <td>A resource’s current state was not loaded because the resource does not support why-run mode.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_bypassed</code></td> <td>A resource action was skipped because the resource does not support why-run mode.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:resource_update_applied</code></td> <td>A change has been made to a resource. (This event occurs for each change made to a resource.)</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_failed_retriable</code></td> <td>A resource action has failed and will be retried.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:resource_failed</code></td> <td>A resource action has failed and will not be retried.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_updated</code></td> <td>A resource requires modification.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:resource_up_to_date</code></td> <td>A resource is already correct.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_completed</code></td> <td>All actions for the resource are complete.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:stream_opened</code></td> <td>A stream has opened.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:stream_closed</code></td> <td>A stream has closed.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:stream_output</code></td> <td>A chunk of data from a single named stream.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:handlers_start</code></td> <td>The handler processing phase of the chef-client run has started.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:handler_executed</code></td> <td>The named handler was processed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:handlers_completed</code></td> <td>The handler processing phase of the chef-client run is complete.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:provider_requirement_failed</code></td> <td>An assertion declared by a provider has failed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:whyrun_assumption</code></td> <td>An assertion declared by a provider has failed, but execution is allowed to continue because the chef-client is running in why-run mode.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:run_completed</code></td> <td>The chef-client run has completed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:run_failed</code></td> <td>The chef-client run has failed.</td> </tr> </tbody> </table>   <h3 id=\"examples\">Examples</h3> <p>The following examples show ways to use the Handler DSL.</p>  <h4 id=\"send-email\">Send Email</h4> <p>Use the <code class=\"docutils literal\">on</code> method to create an event handler that sends email when the chef-client run fails. This will require:</p> <ul class=\"simple\"> <li>A way to tell the chef-client how to send email</li> <li>An event handler that describes what to do when the <code class=\"docutils literal\">:run_failed</code> event is triggered</li> <li>A way to trigger the exception and test the behavior of the event handler</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Read this scenario as an HTML presentation at <a class=\"reference external\" href=\"https://docs.chef.io/decks/event_handlers.html\">https://docs.chef.io/decks/event_handlers.html</a>.</p> </div> <p><strong>Define How Email is Sent</strong></p> <p>Use a library to define the code that sends email when a chef-client run fails. Name the file <code class=\"docutils literal\">helper.rb</code> and add it to a cookbook’s <code class=\"docutils literal\">/libraries</code> directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'net/smtp'\n\nmodule HandlerSendEmail\n  class Helper\n\n    def send_email_on_run_failure(node_name)\n\n      message = \"From: Chef &lt;chef@chef.io&gt;\\n\"\n      message &lt;&lt; \"To: Grant &lt;grantmc@chef.io&gt;\\n\"\n      message &lt;&lt; \"Subject: Chef run failed\\n\"\n      message &lt;&lt; \"Date: #{Time.now.rfc2822}\\n\\n\"\n      message &lt;&lt; \"Chef run failed on #{node.name}\\n\"\n      Net::SMTP.start('localhost', 25) do |smtp|\n        smtp.send_message message, 'chef@chef.io', 'grantmc@chef.io'\n      end\n    end\n  end\nend</pre> <p><strong>Add the Handler</strong></p> <p>Invoke the library helper in a recipe:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef.event_handler do\n  on :run_failed do\n    HandlerSendEmail::Helper.new.send_email_on_run_failure(\n      Chef.run_context.node.name\n    )\n  end\nend</pre> <ul class=\"simple\"> <li>Use <code class=\"docutils literal\">Chef.event_handler</code> to define the event handler</li> <li>Use the <code class=\"docutils literal\">on</code> method to specify the event type</li> </ul> <p>Within the <code class=\"docutils literal\">on</code> block, tell the chef-client how to handle the event when it’s triggered.</p> <p><strong>Test the Handler</strong></p> <p>Use the following code block to trigger the exception and have the chef-client send email to the specified email address:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ruby_block 'fail the run' do\n  block do\n    fail 'deliberately fail the run'\n  end\nend</pre>   <h4 id=\"etcd-locks\">etcd Locks</h4> <p>The following example shows how to prevent concurrent chef-client runs from both holding a lock on etcd:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">lock_key = \"#{node.chef_environment}/#{node.name}\"\n\nChef.event_handler do\n  on :converge_start do |run_context|\n    Etcd.lock_acquire(lock_key)\n  end\nend\n\nChef.event_handler do\n  on :converge_complete do\n    Etcd.lock_release(lock_key)\n  end\nend</pre>   <h4 id=\"hipchat-notifications\">HipChat Notifications</h4> <p>Event messages can be sent to a team communication tool like HipChat. For example, if a chef-client run fails:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef.event_handler do\n  on :run_failed do |exception|\n    hipchat_notify exception.message\n  end\nend</pre> <p>or send an alert on a configuration change:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef.event_handler do\n  on :resource_updated do |resource, action|\n    if resource.to_s == 'template[/etc/nginx/nginx.conf]'\n      Helper.hipchat_message(\"#{resource} was updated by chef\")\n    end\n  end\nend</pre>     <h2 id=\"handlers-and-cookbooks\">Handlers and Cookbooks</h2> <p>The following cookbooks can be used to load handlers during the chef-client run.</p>  <h3 id=\"chef-handler\">chef_handler</h3> <p>Exception and report handlers can be distributed using the <strong>chef_handler</strong> cookbook. This cookbook is authored and maintained by Chef and exposes a custom resource that can be used to enable custom handlers from within recipes and to include product-specific handlers from cookbooks. The <strong>chef_handler</strong> cookbook can be accessed here: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks/chef_handler\">https://github.com/chef-cookbooks/chef_handler</a>. See the <code class=\"docutils literal\">README.md</code> for additional information.</p>   <h3 id=\"chef-client\">chef-client</h3> <p>Start handlers can be distributed using the <strong>chef-client</strong> cookbook, which will install the handler on the target node during the initial configuration of the node. This ensures that the start handler is always present on the node so that it is available to the chef-client at the start of every run.</p>    <h2 id=\"custom-handlers\">Custom Handlers</h2> <p>A custom handler can be created to support any situation. The easiest way to build a custom handler:</p> <ol class=\"arabic simple\"> <li>Download the <strong>chef_handler</strong> cookbook</li> <li>Create a custom handler</li> <li>Write a recipe using the <strong>chef_handler</strong> resource</li> <li>Add that recipe to a node’s run-list, often as the first recipe in that run-list</li> </ol>  <h3 id=\"syntax\">Syntax</h3> <p>The syntax for a handler can vary, depending on what the the situations the handler is being asked to track, the type of handler being used, and so on. All custom exception and report handlers are defined using Ruby and must be a subclass of the <code class=\"docutils literal\">Chef::Handler</code> class.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'chef/log'\n\nmodule ModuleName\n  class HandlerName &lt; Chef::Handler\n    def report\n      # Ruby code goes here\n    end\n  end\nend</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">require</code> ensures that the logging functionality of the chef-client is available to the handler</li> <li>\n<code class=\"docutils literal\">ModuleName</code> is the name of the module as it exists within the <code class=\"docutils literal\">Chef</code> library</li> <li>\n<code class=\"docutils literal\">HandlerName</code> is the name of the handler as it is used in a recipe</li> <li>\n<code class=\"docutils literal\">report</code> is an interface that is used to define the custom handler</li> </ul> <p>For example, the following shows a custom handler that sends an email that contains the exception data when a chef-client run fails:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'net/smtp'\n\nmodule OrgName\n  class SendEmail &lt; Chef::Handler\n    def report\n      if run_status.failed? then\n        message  = \"From: sender_name &lt;sender@example.com&gt;\\n\"\n        message &lt;&lt; \"To: recipient_address &lt;recipient@example.com&gt;\\n\"\n        message &lt;&lt; \"Subject: chef-client Run Failed\\n\"\n        message &lt;&lt; \"Date: #{Time.now.rfc2822}\\n\\n\"\n        message &lt;&lt; \"Chef run failed on #{node.name}\\n\"\n        message &lt;&lt; \"#{run_status.formatted_exception}\\n\"\n        message &lt;&lt; Array(backtrace).join('\\n')\n        Net::SMTP.start('your.smtp.server', 25) do |smtp|\n          smtp.send_message message, 'sender@example', 'recipient@example'\n        end\n      end\n    end\n  end\nend</pre> <p>and then is used in a recipe like:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">send_email 'blah' do\n  # recipe code\nend</pre>   <h3 id=\"report-interface\">report Interface</h3> <p>The <code class=\"docutils literal\">report</code> interface is used to define how a handler will behave and is a required part of any custom handler. The syntax for the <code class=\"docutils literal\">report</code> interface is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">def report\n  # Ruby code\nend</pre> <p>The Ruby code used to define a custom handler will vary significantly from handler to handler. The chef-client includes two default handlers: <code class=\"docutils literal\">error_report</code> and <code class=\"docutils literal\">json_file</code>. Their use of the <code class=\"docutils literal\">report</code> interface is shown below.</p> <p>The <a class=\"reference external\" href=\"https://github.com/chef/chef/blob/master/lib/chef/handler/error_report.rb\">error_report</a> handler:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'chef/handler'\nrequire 'chef/resource/directory'\n\nclass Chef\n  class Handler\n    class ErrorReport &lt; ::Chef::Handler\n      def report\n        Chef::FileCache.store('failed-run-data.json', Chef::JSONCompat.to_json_pretty(data), 0640)\n        Chef::Log.fatal(\"Saving node information to #{Chef::FileCache.load('failed-run-data.json', false)}\")\n      end\n    end\n end\nend</pre> <p>The <a class=\"reference external\" href=\"https://github.com/chef/chef/blob/master/lib/chef/handler/json_file.rb\">json_file</a> handler:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'chef/handler'\nrequire 'chef/resource/directory'\n\nclass Chef\n  class Handler\n    class JsonFile &lt; ::Chef::Handler\n      attr_reader :config\n      def initialize(config={})\n        @config = config\n        @config[:path] ||= '/var/chef/reports'\n        @config\n      end\n      def report\n        if exception\n          Chef::Log.error('Creating JSON exception report')\n        else\n          Chef::Log.info('Creating JSON run report')\n        end\n        build_report_dir\n        savetime = Time.now.strftime('%Y%m%d%H%M%S')\n        File.open(File.join(config[:path], 'chef-run-report-#{savetime}.json'), 'w') do |file|\n          run_data = data\n          run_data[:start_time] = run_data[:start_time].to_s\n          run_data[:end_time] = run_data[:end_time].to_s\n          file.puts Chef::JSONCompat.to_json_pretty(run_data)\n        end\n      end\n      def build_report_dir\n        unless File.exists?(config[:path])\n          FileUtils.mkdir_p(config[:path])\n          File.chmod(00700, config[:path])\n        end\n      end\n    end\n  end\nend</pre>   <h3 id=\"optional-interfaces\">Optional Interfaces</h3> <p>The following interfaces may be used in a handler in the same way as the <code class=\"docutils literal\">report</code> interface to override the default handler behavior in the chef-client. That said, the following interfaces are not typically used in a handler and, for the most part, are completely unnecessary for a handler to work properly and/or as desired.</p>  <h4 id=\"data\">data</h4> <p>The <code class=\"docutils literal\">data</code> method is used to return the Hash representation of the <code class=\"docutils literal\">run_status</code> object. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">def data\n  @run_status.to_hash\nend</pre>   <h4 id=\"run-report-safely\">run_report_safely</h4> <p>The <code class=\"docutils literal\">run_report_safely</code> method is used to run the report handler, rescuing and logging errors that may arise as the handler runs and ensuring that all handlers get a chance to run during the chef-client run (even if some handlers fail during that run). In general, this method should never be used as an interface in a custom handler unless this default behavior simply must be overridden.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">def run_report_safely(run_status)\n  run_report_unsafe(run_status)\nrescue Exception =&gt; e\n  Chef::Log.error('Report handler #{self.class.name} raised #{e.inspect}')\n  Array(e.backtrace).each { |line| Chef::Log.error(line) }\nensure\n  @run_status = nil\nend</pre>   <h4 id=\"run-report-unsafe\">run_report_unsafe</h4> <p>The <code class=\"docutils literal\">run_report_unsafe</code> method is used to run the report handler without any error handling. This method should never be used directly in any handler, except during testing of that handler. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">def run_report_unsafe(run_status)\n  @run_status = run_status\n  report\nend</pre>    <h3 id=\"run-status-object\">run_status Object</h3> <p>The <code class=\"docutils literal\">run_status</code> object is initialized by the chef-client before the <code class=\"docutils literal\">report</code> interface is run for any handler. The <code class=\"docutils literal\">run_status</code> object keeps track of the status of the chef-client run and will contain some (or all) of the following properties:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">all_resources</code></td> <td>A list of all resources that are included in the <code class=\"docutils literal\">resource_collection</code> property for the current chef-client run.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">backtrace</code></td> <td>A backtrace associated with the uncaught exception data that caused a chef-client run to fail, if present; <code class=\"docutils literal\">nil</code> for a successful chef-client run.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">elapsed_time</code></td> <td>The amount of time between the start (<code class=\"docutils literal\">start_time</code>) and end (<code class=\"docutils literal\">end_time</code>) of a chef-client run.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">end_time</code></td> <td>The time at which a chef-client run ended.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">exception</code></td> <td>The uncaught exception data which caused a chef-client run to fail; <code class=\"docutils literal\">nil</code> for a successful chef-client run.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">failed?</code></td> <td>Show that a chef-client run has failed when uncaught exceptions were raised during a chef-client run. An exception handler runs when the <code class=\"docutils literal\">failed?</code> indicator is <code class=\"docutils literal\">true</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">node</code></td> <td>The node on which the chef-client run occurred.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">run_context</code></td> <td>An instance of the <code class=\"docutils literal\">Chef::RunContext</code> object; used by the chef-client to track the context of the run; provides access to the <code class=\"docutils literal\">cookbook_collection</code>, <code class=\"docutils literal\">resource_collection</code>, and <code class=\"docutils literal\">definitions</code> properties.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">start_time</code></td> <td>The time at which a chef-client run started.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">success?</code></td> <td>Show that a chef-client run succeeded when uncaught exceptions were not raised during a chef-client run. A report handler runs when the <code class=\"docutils literal\">success?</code> indicator is <code class=\"docutils literal\">true</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">updated_resources</code></td> <td>A list of resources that were marked as updated as a result of the chef-client run.</td> </tr> </tbody> </table> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">These properties are not always available. For example, a start handler runs at the beginning of the chef-client run, which means that properties like <code class=\"docutils literal\">end_time</code> and <code class=\"docutils literal\">elapsed_time</code> are still unknown and will be unavailable to the <code class=\"docutils literal\">run_status</code> object.</p> </div>    <h2 id=\"id3\">Examples</h2> <p>The following sections show examples of handlers.</p>  <h3 id=\"cookbook-versions\">Cookbook Versions</h3> <p>Community member <code class=\"docutils literal\">juliandunn</code> created a custom <a class=\"reference external\" href=\"https://github.com/juliandunn/cookbook_versions_handler\">report handler that logs all of the cookbooks and cookbook versions</a> that were used during the chef-client run, and then reports after the run is complete. This handler requires the <strong>chef_handler</strong> resource (which is available from the <strong>chef_handler</strong> cookbook).</p>  <h4 id=\"cookbook-versions-rb\">cookbook_versions.rb</h4> <p>The following custom handler defines how cookbooks and cookbook versions that are used during the chef-client run will be compiled into a report using the <code class=\"docutils literal\">Chef::Log</code> class in the chef-client:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'chef/log'\n\nmodule Opscode\n  class CookbookVersionsHandler &lt; Chef::Handler\n\n    def report\n      cookbooks = run_context.cookbook_collection\n      Chef::Log.info('Cookbooks and versions run: #{cookbooks.keys.map {|x| cookbooks[x].name.to_s + ' ' + cookbooks[x].version} }')\n    end\n  end\nend</pre>   <h4 id=\"default-rb\">default.rb</h4> <p>The following recipe is added to the run-list for every node on which a list of cookbooks and versions will be generated as report output after every chef-client run.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">include_recipe 'chef_handler'\n\ncookbook_file \"#{node['chef_handler']['handler_path']}/cookbook_versions.rb\" do\n  source 'cookbook_versions.rb'\n  owner 'root'\n  group 'root'\n  mode '0755'\n  action :create\nend\n\nchef_handler 'Opscode::CookbookVersionsHandler' do\n  source \"#{node['chef_handler']['handler_path']}/cookbook_versions.rb\"\n  supports :report =&gt; true\n  action :enable\nend</pre> <p>This recipe will generate report output similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">[2013-11-26T03:11:06+00:00] INFO: Chef Run complete in 0.300029878 seconds\n[2013-11-26T03:11:06+00:00] INFO: Running report handlers\n[2013-11-26T03:11:06+00:00] INFO: Cookbooks and versions run: [\"chef_handler 1.1.4\", \"cookbook_versions_handler 1.0.0\"]\n[2013-11-26T03:11:06+00:00] INFO: Report handlers complete</pre>    <h3 id=\"reporting\">Reporting</h3> <p>Start handler functionality was added when Chef started building add-ons for the Chef server. The Reporting add-on is designed to create reporting data based on a chef-client run. And since Reporting needs to be able to collect data for the entire chef-client run, Reporting needs to be enabled before anything else happens at the start of the chef-client run.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The start handler used by the Reporting add-on for the Chef server is always installed using the <strong>chef-client</strong> cookbook.</p> </div>  <h4 id=\"start-handler-rb\">start_handler.rb</h4> <p>The following code shows the start handler used by the Reporting add-in for the Chef server:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'chef/handler'\nrequire 'chef/rest'\nrequire 'chef/version_constraint'\n\nclass Chef\n  class Reporting\n    class StartHandler &lt; ::Chef::Handler\n\n      attr_reader :config\n\n      def initialize(config={})\n        @config = config\n      end\n\n      def report\n        version_checker = Chef::VersionConstraint.new('&lt; 11.6.0')\n        if version_checker.include?(Chef::VERSION)\n          Chef::Log.info('Enabling backported resource reporting Handler')\n          rest = Chef::REST.new(Chef::Config[:chef_server_url], @run_status.node.name, Chef::Config[:client_key])\n          resource_reporter = Chef::Reporting::ResourceReporter.new(rest)\n          @run_status.events.register(resource_reporter)\n\n          resource_reporter.run_started(@run_status)\n        else\n         Chef::Log.debug('Chef Version already has new Resource Reporter - skipping startup of backport version')\n        end\n      end\n    end\n  end\nend</pre>    <h3 id=\"json-file-handler\">json_file Handler</h3> <p>The <a class=\"reference external\" href=\"https://github.com/chef/chef/blob/master/lib/chef/handler/json_file.rb\">json_file</a> handler is available from the <strong>chef_handler</strong> cookbook and can be used with exceptions and reports. It serializes run status data to a JSON file. This handler may be enabled in one of the following ways.</p> <p>By adding the following lines of Ruby code to either the client.rb file or the solo.rb file, depending on how the chef-client is being run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'chef/handler/json_file'\nreport_handlers &lt;&lt; Chef::Handler::JsonFile.new(:path =&gt; '/var/chef/reports')\nexception_handlers &lt;&lt; Chef::Handler::JsonFile.new(:path =&gt; '/var/chef/reports')</pre> <p>By using the <strong>chef_handler</strong> resource in a recipe, similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_handler 'Chef::Handler::JsonFile' do\n  source 'chef/handler/json_file'\n  arguments :path =&gt; '/var/chef/reports'\n  action :enable\nend</pre> <p>After it has run, the run status data can be loaded and inspected via Interactive Ruby (IRb):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">irb(main):001:0&gt; require 'rubygems' =&gt; true\nirb(main):002:0&gt; require 'json' =&gt; true\nirb(main):003:0&gt; require 'chef' =&gt; true\nirb(main):004:0&gt; r = JSON.parse(IO.read('/var/chef/reports/chef-run-report-20110322060731.json')) =&gt; ... output truncated\nirb(main):005:0&gt; r.keys =&gt; ['end_time', 'node', 'updated_resources', 'exception', 'all_resources', 'success', 'elapsed_time', 'start_time', 'backtrace']\nirb(main):006:0&gt; r['elapsed_time'] =&gt; 0.00246</pre>   <h3 id=\"error-report-handler\">error_report Handler</h3> <p>The <a class=\"reference external\" href=\"https://github.com/chef/chef/blob/master/lib/chef/handler/error_report.rb\">error_report</a> handler is built into the chef-client and can be used for both exceptions and reports. It serializes error report data to a JSON file. This handler may be enabled in one of the following ways.</p> <p>By adding the following lines of Ruby code to either the client.rb file or the solo.rb file, depending on how the chef-client is being run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'chef/handler/error_report'\nreport_handlers &lt;&lt; Chef::Handler::ErrorReport.new()\nexception_handlers &lt;&lt; Chef::Handler::ErrorReport.new()</pre> <p>By using the <a class=\"reference external\" href=\"https://docs.chef.io/resource_chef_handler.html\">chef_handler</a> resource in a recipe, similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_handler 'Chef::Handler::ErrorReport' do\n  source 'chef/handler/error_report'\n  action :enable\nend</pre>   <h3 id=\"community-handlers\">Community Handlers</h3> <p>The following open source handlers are available from the Chef community:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Handler</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference external\" href=\"https://github.com/timops/ohai-plugins/blob/master/win32_svc.rb\">Airbrake</a></td> <td>A handler that sends exceptions (only) to Airbrake, an application that collects data and aggregates it for review.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference external\" href=\"https://github.com/rottenbytes/chef/tree/master/async_handler\">Asynchronous Resources</a></td> <td>A handler that asynchronously pushes exception and report handler data to a STOMP queue, from which data can be processed into data storage.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference external\" href=\"https://github.com/ampledata/chef-handler-campfire\">Campfire</a></td> <td>A handler that collects exception and report handler data and reports it to Campfire, a web-based group chat tool.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference external\" href=\"https://github.com/ampledata/chef-handler-campfire\">Cloudkick</a></td> <td>A handler that collects exception and report handler data and sends it to Cloudkick, a set of cloud server monitoring and management tools.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference external\" href=\"https://github.com/DataDog/chef-handler-datadog\">Datadog</a></td> <td>A handler that collects chef-client stats and sends them into a DATADOG newsfeed.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference external\" href=\"https://github.com/mmarschall/chef-handler-flowdock\">Flowdock</a></td> <td>A handler that collects exception and report handler data and sends it to users via the Flowdock API..</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference external\" href=\"https://github.com/imeyer/chef-handler-graphite/wiki\">Graphite</a></td> <td>A handler that collects exception and report handler data and reports it to Graphite, a graphic rendering application.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference external\" href=\"https://github.com/jellybob/chef-gelf/\">Graylog2 GELF</a></td> <td>A handler that provides exception and report handler status (including changes) to a Graylog2 server, so that the data can be viewed using Graylog Extended Log Format (GELF).</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference external\" href=\"http://rubygems.org/gems/chef-handler-growl\">Growl</a></td> <td>A handler that collects exception and report handler data and then sends it as a Growl notification.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference external\" href=\"https://github.com/mojotech/hipchat/blob/master/lib/hipchat/chef.rb\">HipChat</a></td> <td>A handler that collects exception handler data and sends it to HipChat, a hosted private chat service for companies and teams.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference external\" href=\"https://rubygems.org/gems/chef-irc-snitch\">IRC Snitch</a></td> <td>A handler that notifies administrators (via Internet Relay Chat (IRC)) when a chef-client run fails.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference external\" href=\"https://github.com/marktheunissen/chef-handler-journald\">Journald</a></td> <td>A handler that logs an entry to the systemd journal with the chef-client run status, exception details, configurable priority, and custom details.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference external\" href=\"https://rubygems.org/gems/chef-handler-mail\">Simple Email</a></td> <td>A handler that collects exception and report handler data and then uses pony to send email reports that are based on Erubis templates.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference external\" href=\"http://onddo.github.io/chef-handler-sns/\">SNS</a></td> <td>A handler that notifies exception and report handler data and sends it to a SNS topic.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference external\" href=\"https://github.com/rackspace-cookbooks/chef-slack_handler\">Slack</a></td> <td>A handler to send chef-client run notifications to a Slack channel.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference external\" href=\"http://ampledata.org/splunk_storm_chef_handler.html\">Splunk Storm</a></td> <td>A handler that supports exceptions and reports for Splunk Storm.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference external\" href=\"https://github.com/jblaine/syslog_handler\">Syslog</a></td> <td>A handler that logs basic essential information, such as about the success or failure of a chef-client run.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference external\" href=\"https://rubygems.org/gems/chef-handler-updated-resources\">Updated Resources</a></td> <td>A handler that provides a simple way to display resources that were updated during a chef-client run.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference external\" href=\"http://onddo.github.io/chef-handler-zookeeper/\">ZooKeeper</a></td> <td>A Chef report handler to send Chef run notifications to ZooKeeper.</td> </tr> </tbody> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/handlers.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/handlers.html</a>\n  </p>\n</div>\n","12-9/resource_chef_gem":"<h1 id=\"chef-gem\">chef_gem</h1> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The <strong>chef_gem</strong> and <strong>gem_package</strong> resources are both used to install Ruby gems. For any machine on which the chef-client is installed, there are two instances of Ruby. One is the standard, system-wide instance of Ruby and the other is a dedicated instance that is available only to the chef-client. Use the <strong>chef_gem</strong> resource to install gems into the instance of Ruby that is dedicated to the chef-client. Use the <strong>gem_package</strong> resource to install all other gems (i.e. install gems system-wide).</p> </div> <p>Use the <strong>chef_gem</strong> resource to install a gem only for the instance of Ruby that is dedicated to the chef-client. When a package is installed from a local file, it must be added to the node using the <strong>remote_file</strong> or <strong>cookbook_file</strong> resources.</p> <p>The <strong>chef_gem</strong> resource works with all of the same properties and options as the <strong>gem_package</strong> resource, but does not accept the <code class=\"docutils literal\">gem_binary</code> property because it always uses the <code class=\"docutils literal\">CurrentGemEnvironment</code> under which the chef-client is running. In addition to performing actions similar to the <strong>gem_package</strong> resource, the <strong>chef_gem</strong> resource does the following:</p> <ul class=\"simple\"> <li>Runs its actions immediately, before convergence, allowing a gem to be used in a recipe immediately after it is installed</li> <li>Runs <code class=\"docutils literal\">Gem.clear_paths</code> after the action, ensuring that gem is aware of changes so that it can be required immediately after it is installed</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>chef_gem</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>chef_gem</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_gem 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>chef_gem</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_gem 'name' do\n  clear_sources              TrueClass, FalseClass\n  compile_time               TrueClass, FalseClass\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::Rubygems\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">chef_gem</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">clear_sources</code>, <code class=\"docutils literal\">compile_time</code>, <code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:purge</code></dt> <dd>Purge a package. This action typically removes the configuration files as well as the package.</dd> <dt><code class=\"docutils literal\">:reconfig</code></dt> <dd>Reconfigure a package. This action requires a response file.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> <dt><code class=\"docutils literal\">:upgrade</code></dt> <dd>Install a package and/or ensure that a package is the latest version.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">clear_sources</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p>Set to <code class=\"docutils literal\">true</code> to download a gem from the path specified by the <code class=\"docutils literal\">source</code> property (and not from RubyGems). Default value: <code class=\"docutils literal\">false</code>.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p>Another approach is to use the <strong>gem_package</strong> resource, and then specify the <code class=\"docutils literal\">gem_binary</code> location to the RubyGems directory that is used by Chef. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">gem_package 'package' do\n  gem_binary Chef::Util::PathHelper.join(Chef::Config.embedded_dir,'bin','gem')\n  action :install\nend</pre> </div> </dd> <dt><code class=\"docutils literal\">compile_time</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p>Controls the phase during which a gem is installed on a node. Set to <code class=\"docutils literal\">true</code> to install a gem while the resource collection is being built (the “compile phase”). Set to <code class=\"docutils literal\">false</code> to install a gem while the chef-client is configuring the node (the “converge phase”). Possible values: <code class=\"docutils literal\">nil</code> (for verbose warnings), <code class=\"docutils literal\">true</code> (to warn once per chef-client run), or <code class=\"docutils literal\">false</code> (to remove all warnings). Recommended value: <code class=\"docutils literal\">false</code>.</p> <p>To suppress warnings for cookbooks authored prior to chef-client 12.1, use a <code class=\"docutils literal\">respond_to?</code> check to ensure backward compatibility. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_gem 'aws-sdk' do\n  compile_time false if respond_to?(:compile_time)\nend</pre> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>If you are using <code class=\"docutils literal\">chef-sugar</code>—a <a class=\"reference external\" href=\"https://supermarket.chef.io/cookbooks/chef-sugar\">community cookbook</a>—it must be version 3.0.1 (or higher) to use the previous example. If you are using an older version of <code class=\"docutils literal\">chef-sugar</code>, the following workaround is required:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_gem 'gem_name' do\n  compile_time true if Chef::Resource::ChefGem.instance_methods(false).include?(:compile_time)\nend</pre> <p class=\"last\">See this <a class=\"reference external\" href=\"http://jtimberman.housepub.org/blog/2015/03/20/chef-gem-compile-time-compatibility/\">blog post</a> for more background on this behavior.</p> </div> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The path to a package in the local file system.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Rubygems</code>, <code class=\"docutils literal\">chef_gem</code>\n</dt> <dd>Can be used with the <code class=\"docutils literal\">options</code> attribute.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Compile time vs. converge time installation of gems</strong></p> <p>To install a gem while the chef-client is configuring the node (the “converge phase”), set the <code class=\"docutils literal\">compile_time</code> property to <code class=\"docutils literal\">false</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_gem 'right_aws' do\n  compile_time false\n  action :install\nend</pre> <p>To install a gem while the resource collection is being built (the “compile phase”), set the <code class=\"docutils literal\">compile_time</code> property to <code class=\"docutils literal\">true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_gem 'right_aws' do\n  compile_time true\n  action :install\nend</pre> <p><strong>Install MySQL for Chef</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'apt-get update' do\n  ignore_failure true\n  action :nothing\nend.run_action(:run) if node['platform_family'] == 'debian'\n\nnode.set['build_essential']['compiletime'] = true\ninclude_recipe 'build-essential'\ninclude_recipe 'mysql::client'\n\nnode['mysql']['client']['packages'].each do |mysql_pack|\n  resources(\"package[#{mysql_pack}]\").run_action(:install)\nend\n\nchef_gem 'mysql'</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_chef_gem.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_chef_gem.html</a>\n  </p>\n</div>\n","12-9/resource_chocolatey_package":"<h1 id=\"chocolatey-package\">chocolatey_package</h1> <p>Use the <strong>chocolatey_package</strong> resource to manage packages using Chocolatey for the Microsoft Windows platform.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>chocolatey_package</strong> resource block manages packages using Chocolatey for the Microsoft Windows platform. The simplest use of the <strong>chocolatey_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chocolatey_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>chocolatey_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chocolatey_package 'name' do\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::Chocolatey\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">chocolatey_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:purge</code></dt> <dd>Purge a package. This action typically removes the configuration files as well as the package.</dd> <dt><code class=\"docutils literal\">:reconfig</code></dt> <dd>Reconfigure a package. This action requires a response file.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> <dt><code class=\"docutils literal\">:uninstall</code></dt> <dd>Uninstall a package.</dd> <dt><code class=\"docutils literal\">:upgrade</code></dt> <dd>Install a package and/or ensure that a package is the latest version.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>.rst.. The contents of this file may be included in multiple topics (using the includes directive). .. The contents of this file should be modified in a way that preserves its ability to appear in multiple topics.</p> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The path to a package in the local file system.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Chocolatey</code>, <code class=\"docutils literal\">chocolatey_package</code>\n</dt> <dd>The provider for the Chocolatey package manager for the Microsoft Windows platform.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chocolatey_package 'name of package' do\n  action :install\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_chocolatey_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_chocolatey_package.html</a>\n  </p>\n</div>\n","12-9/resource_cron":"<h1 id=\"cron\">cron</h1> <p>Use the <strong>cron</strong> resource to manage cron entries for time-based job scheduling. Properties for a schedule will default to <code class=\"docutils literal\">*</code> if not provided. The <strong>cron</strong> resource requires access to a crontab program, typically cron.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The <strong>cron</strong> resource should only be used to modify an entry in a crontab file. Use the <strong>cookbook_file</strong> or <strong>template</strong> resources to add a crontab file to the cron.d directory. The <code class=\"docutils literal\">cron_d</code> lightweight resource (found in the <a class=\"reference external\" href=\"https://github.com/chef-cookbooks/cron\">cron</a> cookbook) is another option for managing crontab files.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>cron</strong> resource block manage cron entries. For example, to get a weekly cookbook report from the Chef Supermarket:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cron 'cookbooks_report' do\n  action node.tags.include?('cookbooks-report') ? :create : :delete\n  minute '0'\n  hour '0'\n  weekday '1'\n  user 'getchef'\n  mailto 'sysadmin@example.com'\n  home '/srv/supermarket/shared/system'\n  command %W{\n    cd /srv/supermarket/current &amp;&amp;\n    env RUBYLIB=\"/srv/supermarket/current/lib\"\n    RAILS_ASSET_ID=`git rev-parse HEAD` RAILS_ENV=\"#{rails_env}\"\n    bundle exec rake cookbooks_report\n  }.join(' ')\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>cron</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cron 'name' do\n  command                    String\n  day                        String\n  environment                Hash\n  home                       String\n  hour                       String\n  mailto                     String\n  minute                     String\n  month                      String\n  notifies                   # see description\n  path                       String\n  provider                   Chef::Provider::Cron\n  shell                      String\n  subscribes                 # see description\n  time                       Symbol\n  user                       String\n  weekday                    String, Symbol\n  action                     Symbol # defaults to :create if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">cron</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">command</code> is the command to be run</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">command</code>, <code class=\"docutils literal\">day</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">home</code>, <code class=\"docutils literal\">hour</code>, <code class=\"docutils literal\">mailto</code>, <code class=\"docutils literal\">minute</code>, <code class=\"docutils literal\">month</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">shell</code>, <code class=\"docutils literal\">time</code>, <code class=\"docutils literal\">user</code>, and <code class=\"docutils literal\">weekday</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:create</code></dt> <dd>Default. Create an entry in a cron table file (crontab). If an entry already exists (but does not match), update that entry to match.</dd> <dt><code class=\"docutils literal\">:delete</code></dt> <dd>Delete an entry from a cron table file (crontab).</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p>The command to be run, or the path to a file that contains the command to be run.</p> <p>Some examples:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">command if [ -x /usr/share/mdadm/checkarray ] &amp;&amp; [ $(date +\\%d) -le 7 ];\nthen /usr/share/mdadm/checkarray --cron --all --idle --quiet; fi</pre> <p>and:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">command %w{\n  cd /srv/opscode-community-site/current &amp;&amp;\n  env RUBYLIB=\"/srv/opscode-community-site/current/lib\"\n  RAILS_ASSET_ID=`git rev-parse HEAD` RAILS_ENV=\"#{rails_env}\"\n  bundle exec rake cookbooks_report\n}.join(' ')</pre> <p>and:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">command \"/srv/app/scripts/daily_report\"</pre> </dd> <dt><code class=\"docutils literal\">day</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The day of month at which the cron entry should run (1 - 31). Default value: <code class=\"docutils literal\">*</code>.</p> </dd> <dt><code class=\"docutils literal\">environment</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A Hash of environment variables in the form of <code class=\"docutils literal\">{\"ENV_VARIABLE\" =&gt; \"VALUE\"}</code>. (These variables must exist for a command to be run successfully.)</p> </dd> <dt><code class=\"docutils literal\">home</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Set the <code class=\"docutils literal\">HOME</code> environment variable.</p> </dd> <dt><code class=\"docutils literal\">hour</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The hour at which the cron entry is to run (0 - 23). Default value: <code class=\"docutils literal\">*</code>.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">mailto</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Set the <code class=\"docutils literal\">MAILTO</code> environment variable.</p> </dd> <dt><code class=\"docutils literal\">minute</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The minute at which the cron entry should run (0 - 59). Default value: <code class=\"docutils literal\">*</code>.</p> </dd> <dt><code class=\"docutils literal\">month</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The month in the year on which a cron entry is to run (1 - 12). Default value: <code class=\"docutils literal\">*</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Set the <code class=\"docutils literal\">PATH</code> environment variable.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">shell</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Set the <code class=\"docutils literal\">SHELL</code> environment variable.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">time</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol</p> <p class=\"last\">A time interval. Possible values: <code class=\"docutils literal\">:annually</code>, <code class=\"docutils literal\">:daily</code>, <code class=\"docutils literal\">:hourly</code>, <code class=\"docutils literal\">:midnight</code>, <code class=\"docutils literal\">:monthly</code>, <code class=\"docutils literal\">:reboot</code>, <code class=\"docutils literal\">:weekly</code>, or <code class=\"docutils literal\">:yearly</code>.</p> </dd> <dt><code class=\"docutils literal\">user</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">This attribute is not applicable on the AIX platform. The name of the user that runs the command. If the <code class=\"docutils literal\">user</code> property is changed, the original <code class=\"docutils literal\">user</code> for the crontab program continues to run until that crontab program is deleted. Default value: <code class=\"docutils literal\">root</code>.</p> </dd> <dt><code class=\"docutils literal\">weekday</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The day of the week on which this entry is to run (0 - 6), where Sunday = 0. Default value: <code class=\"docutils literal\">*</code>.</p> </dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Run a program at a specified interval</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cron 'noop' do\n  hour '5'\n  minute '0'\n  command '/bin/true'\nend</pre> <p><strong>Run an entry if a folder exists</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cron 'ganglia_tomcat_thread_max' do\n  command \"/usr/bin/gmetric\n    -n 'tomcat threads max'\n    -t uint32\n    -v '/usr/local/bin/tomcat-stat\n    --thread-max'\"\n  only_if do File.exist?('/home/jboss') end\nend</pre> <p><strong>Run every Saturday, 8:00 AM</strong></p> <p>The following example shows a schedule that will run every hour at 8:00 each Saturday morning, and will then send an email to “<a class=\"reference external\" href=\"mailto:admin%40example.com\">admin<span>@</span>example<span>.</span>com</a>” after each run.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cron 'name_of_cron_entry' do\n  minute '0'\n  hour '8'\n  weekday '6'\n  mailto 'admin@example.com'\n  action :create\nend</pre> <p><strong>Run only in November</strong></p> <p>The following example shows a schedule that will run at 8:00 PM, every weekday (Monday through Friday), but only in November:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cron 'name_of_cron_entry' do\n  minute '0'\n  hour '20'\n  day '*'\n  month '11'\n  weekday '1-5'\n  action :create\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_cron.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_cron.html</a>\n  </p>\n</div>\n","12-9/resource_csh":"<h1 id=\"csh\">csh</h1> <p>Use the <strong>csh</strong> resource to execute scripts using the csh interpreter. This resource may also use any of the actions and properties that are available to the <strong>execute</strong> resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <strong>csh</strong> script resource (which is based on the <strong>script</strong> resource) is different from the <strong>ruby_block</strong> resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>csh</strong> resource block executes scripts using csh:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">csh 'hello world' do\n  code &lt;&lt;-EOH\n    echo \"Hello world!\"\n    echo \"Current directory: \" $cwd\n    EOH\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">code</code> specifies the command to run</li> </ul> <p>The full syntax for all of the properties that are available to the <strong>csh</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">csh 'name' do\n  code                       String\n  creates                    String\n  cwd                        String\n  environment                Hash\n  flags                      String\n  group                      String, Integer\n  notifies                   # see description\n  path                       Array\n  provider                   Chef::Provider::Script::Csh\n  returns                    Integer, Array\n  subscribes                 # see description\n  timeout                    Integer, Float\n  user                       String, Integer\n  umask                      String, Integer\n  action                     Symbol # defaults to :run if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">csh</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">code</code>, <code class=\"docutils literal\">creates</code>, <code class=\"docutils literal\">cwd</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">flags</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">returns</code>, <code class=\"docutils literal\">timeout</code>, <code class=\"docutils literal\">user</code>, and <code class=\"docutils literal\">umask</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Prevent a command from running. This action is used to specify that a command is run only when another resource notifies it.</dd> <dt><code class=\"docutils literal\">:run</code></dt> <dd>Default. Run a script.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">code</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">A quoted (” ”) string of code to be executed.</p> </dd> <dt><code class=\"docutils literal\">creates</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Prevent a command from creating a file when that file already exists.</p> </dd> <dt><code class=\"docutils literal\">cwd</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The current working directory.</p> </dd> <dt><code class=\"docutils literal\">environment</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A Hash of environment variables in the form of <code class=\"docutils literal\">{\"ENV_VARIABLE\" =&gt; \"VALUE\"}</code>. (These variables must exist for a command to be run successfully.)</p> </dd> <dt><code class=\"docutils literal\">flags</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One or more command line flags that are passed to the interpreter when a command is invoked.</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The group name or group ID that must be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p>An array of paths to use when searching for a command. These paths are not added to the command’s environment $PATH. The default value uses the system path.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>The <code class=\"docutils literal\">path</code> property is not implemented by any provider in any version of the chef-client. Starting with chef-client 12, using the <code class=\"docutils literal\">path</code> property will return a warning. Starting with chef-client 13, the <code class=\"docutils literal\">path</code> property is deprecated and using it will return an exception. Cookbooks that currently use the <code class=\"docutils literal\">path</code> property should be updated to use the <code class=\"docutils literal\">environment</code> property instead.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">csh 'mycommand' do\n  environment 'PATH' =&gt; \"/my/path/to/bin:#{ENV['PATH']}\"\nend</pre> </div> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">returns</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Array</p> <p class=\"last\">The return value for a command. This may be an array of accepted values. An exception is raised when the return value(s) do not match. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Float</p> <p class=\"last\">The amount of time (in seconds) a command is to wait before timing out. Default value: <code class=\"docutils literal\">3600</code>.</p> </dd> <dt><code class=\"docutils literal\">user</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The user name or user ID that should be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">umask</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The file mode creation mask, or umask.</p> </dd> </dl>  <h3 id=\"guards\">Guards</h3> <p>A guard property can be used to evaluate the state of a node during the execution phase of the chef-client run. Based on the results of this evaluation, a guard property is then used to tell the chef-client if it should continue executing a resource. A guard property accepts either a string value or a Ruby block value:</p> <ul class=\"simple\"> <li>A string is executed as a shell command. If the command returns <code class=\"docutils literal\">0</code>, the guard is applied. If the command returns any other value, then the guard property is not applied. String guards in a <strong>powershell_script</strong> run Windows PowerShell commands and may return <code class=\"docutils literal\">true</code> in addition to <code class=\"docutils literal\">0</code>.</li> <li>A block is executed as Ruby code that must return either <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. If the block returns <code class=\"docutils literal\">true</code>, the guard property is applied. If the block returns <code class=\"docutils literal\">false</code>, the guard property is not applied.</li> </ul> <p>A guard property is useful for ensuring that a resource is idempotent by allowing that resource to test for the desired state as it is being executed, and then if the desired state is present, for the chef-client to do nothing.</p> <p><strong>Attributes</strong></p> <p>The following properties can be used to define a guard that is evaluated during the execution phase of the chef-client run:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">not_if</code></dt> <dd>Prevent a resource from executing when the condition returns <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">only_if</code></dt> <dd>Allow a resource to execute only if the condition returns <code class=\"docutils literal\">true</code>.</dd> </dl> <p><strong>Arguments</strong></p> <p>The following arguments can be used with the <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code> guard properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:user</code></dt> <dd>\n<p class=\"first\">Specify the user that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :user =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:group</code></dt> <dd>\n<p class=\"first\">Specify the group that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :group =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:environment</code></dt> <dd>\n<p class=\"first\">Specify a Hash of environment variables to be set. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :environment =&gt; {\n  'HOME' =&gt; '/home/adam'\n}</pre> </dd> <dt><code class=\"docutils literal\">:cwd</code></dt> <dd>\n<p class=\"first\">Set the current working directory before running a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam passwd', :cwd =&gt; '/etc'</pre> </dd> <dt><code class=\"docutils literal\">:timeout</code></dt> <dd>\n<p class=\"first\">Set a timeout for a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'sleep 10000', :timeout =&gt; 10</pre> </dd> </dl>    <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script</code>, <code class=\"docutils literal\">script</code>\n</dt> <dd>When this short name is used, the chef-client will determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script::Csh</code>, <code class=\"docutils literal\">csh</code>\n</dt> <dd>The provider for the csh command interpreter.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>None.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_csh.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_csh.html</a>\n  </p>\n</div>\n","12-9/resource_dpkg_package":"<h1 id=\"dpkg-package\">dpkg_package</h1> <p>Use the <strong>dpkg_package</strong> resource to manage packages for the dpkg platform. When a package is installed from a local file, it must be added to the node using the <strong>remote_file</strong> or <strong>cookbook_file</strong> resources.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>dpkg_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>dpkg_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">dpkg_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>dpkg_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">dpkg_package 'name' do\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::Dpkg\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">dpkg_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package; this may be an array of packages</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:purge</code></dt> <dd>Purge a package. This action typically removes the configuration files as well as the package.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The path to a package in the local file system.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Dpkg</code>, <code class=\"docutils literal\">dpkg_package</code>\n</dt> <dd>The provider for the dpkg platform. Can be used with the <code class=\"docutils literal\">options</code> attribute.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">dpkg_package 'name of package' do\n  action :install\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_dpkg_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_dpkg_package.html</a>\n  </p>\n</div>\n","12-9/resource_chef_handler":"<h1 id=\"chef-handler\">chef_handler</h1> <p>Use the <strong>chef_handler</strong> resource to enable handlers during a chef-client run. The resource allows arguments to be passed to the chef-client, which then applies the conditions defined by the custom handler to the node attribute data collected during the chef-client run, and then processes the handler based on that data.</p> <p>The <strong>chef_handler</strong> resource is typically defined early in a node’s run-list (often being the first item). This ensures that all of the handlers will be available for the entire chef-client run.</p> <p>The <strong>chef_handler</strong> resource is included with the <strong>chef_handler</strong> cookbook. This cookbook defines the the resource itself and also provides the location in which the chef-client looks for custom handlers. All custom handlers should be added to the <code class=\"docutils literal\">files/default/handlers</code> directory in the <strong>chef_handler</strong> cookbook.</p>  <h2 id=\"handler-types\">Handler Types</h2> <p>There are three types of handlers:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Handler</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>exception</td> <td>An exception handler is used to identify situations that have caused a chef-client run to fail. An exception handler can be loaded at the start of a chef-client run by adding a recipe that contains the <strong>chef_handler</strong> resource to a node’s run-list. An exception handler runs when the <code class=\"docutils literal\">failed?</code> property for the <code class=\"docutils literal\">run_status</code> object returns <code class=\"docutils literal\">true</code>.</td> </tr> <tr class=\"row-odd\">\n<td>report</td> <td>A report handler is used when a chef-client run succeeds and reports back on certain details about that chef-client run. A report handler can be loaded at the start of a chef-client run by adding a recipe that contains the <strong>chef_handler</strong> resource to a node’s run-list. A report handler runs when the <code class=\"docutils literal\">success?</code> property for the <code class=\"docutils literal\">run_status</code> object returns <code class=\"docutils literal\">true</code>.</td> </tr> <tr class=\"row-even\">\n<td>start</td> <td>A start handler is used to run events at the beginning of the chef-client run. A start handler can be loaded at the start of a chef-client run by adding the start handler to the <code class=\"docutils literal\">start_handlers</code> setting in the client.rb file or by installing the gem that contains the start handler by using the <strong>chef_gem</strong> resource in a recipe in the <strong>chef-client</strong> cookbook. (A start handler may not be loaded using the <code class=\"docutils literal\">chef_handler</code> resource.)</td> </tr> </tbody> </table>  <h3 id=\"exception-report\">Exception / Report</h3> <p>Exception and report handlers are used to trigger certain behaviors in response to specific situations, typically identified during a chef-client run.</p> <ul class=\"simple\"> <li>An exception handler is used to trigger behaviors when a defined aspect of a chef-client run fails.</li> <li>A report handler is used to trigger behaviors when a defined aspect of a chef-client run is successful.</li> </ul> <p>Both types of handlers can be used to gather data about a chef-client run and can provide rich levels of data about all types of usage, which can be used later for trending and analysis across the entire organization.</p> <p>Exception and report handlers are made available to the chef-client run in one of the following ways:</p> <ul class=\"simple\"> <li>By adding the <strong>chef_handler</strong> resource to a recipe, and then adding that recipe to the run-list for a node. (The <strong>chef_handler</strong> resource is available from the <strong>chef_handler</strong> cookbook.)</li> <li>By adding the handler to one of the following settings in the node’s client.rb file: <code class=\"docutils literal\">exception_handlers</code> and/or <code class=\"docutils literal\">report_handlers</code>\n</li> </ul> <p>The <strong>chef_handler</strong> resource allows exception and report handlers to be enabled from within recipes, which can then added to the run-list for any node on which the exception or report handler should run. The <strong>chef_handler</strong> resource is available from the <strong>chef_handler</strong> cookbook.</p> <p>To use the <strong>chef_handler</strong> resource in a recipe, add code similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_handler 'name_of_handler' do\n  source '/path/to/handler/handler_name'\n  action :enable\nend</pre> <p>For example, a handler for Growl needs to be enabled at the beginning of the chef-client run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_gem 'chef-handler-growl'</pre> <p>and then is activated in a recipe by using the <strong>chef_handler</strong> resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_handler 'Chef::Handler::Growl' do\n  source 'chef/handler/growl'\n  action :enable\nend</pre>   <h3 id=\"start\">Start</h3> <p>A start handler is not loaded into the chef-client run from a recipe, but is instead listed in the client.rb file using the <code class=\"docutils literal\">start_handlers</code> attribute. The start handler must be installed on the node and be available to the chef-client prior to the start of the chef-client run. Use the <strong>chef-client</strong> cookbook to install the start handler.</p> <p>Start handlers are made available to the chef-client run in one of the following ways:</p> <ul class=\"simple\"> <li>By adding a start handler to the <strong>chef-client</strong> cookbook, which installs the handler on the node so that it is available to the chef-client at the start of the chef-client run</li> <li>By adding the handler to one of the following settings in the node’s client.rb file: <code class=\"docutils literal\">start_handlers</code>\n</li> </ul> <p>The <strong>chef-client</strong> cookbook can be configured to automatically install and configure gems that are required by a start handler. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.set['chef_client']['load_gems']['chef-reporting'] = {\n  :require_name =&gt; 'chef_reporting',\n  :action =&gt; :install\n}\n\nnode.set['chef_client']['config']['start_handlers'] = [\n  {\n    :class =&gt; 'Chef::Reporting::StartHandler',\n    :arguments =&gt; []\n  }\n]\n\ninclude_recipe 'chef-client::config'</pre>    <h2 id=\"syntax\">Syntax</h2> <p>A <strong>chef_handler</strong> resource block enables handlers during a chef-client run. Two handlers—<code class=\"docutils literal\">JsonFile</code> and <code class=\"docutils literal\">ErrorReport</code>—are built into Chef:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_handler 'Chef::Handler::JsonFile' do\n  source 'chef/handler/json_file'\n  arguments :path =&gt; '/var/chef/reports'\n  action :enable\nend</pre> <p>and:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_handler 'Chef::Handler::ErrorReport' do\n  source 'chef/handler/error_report'\n  action :enable\nend</pre> <p>show how to enable those handlers in a recipe.</p> <p>The full syntax for all of the properties that are available to the <strong>chef_handler</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_handler 'name' do\n  arguments                  Array\n  class_name                 String\n  notifies                   # see description\n  source                     String\n  subscribes                 # see description\n  supports                   Hash\n  action                     Symbol\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">chef_handler</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">arguments</code>, <code class=\"docutils literal\">class_name</code>, <code class=\"docutils literal\">source</code>, and <code class=\"docutils literal\">supports</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:disable</code></dt> <dd>Disable the handler for the current chef-client run on the current node.</dd> <dt><code class=\"docutils literal\">:enable</code></dt> <dd>Enable the handler for the current chef-client run on the current node.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">arguments</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p>An array of arguments that are passed to the initializer for the handler class. Default value: <code class=\"docutils literal\">[]</code>. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">arguments :key1 =&gt; 'val1'</pre> <p>or:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">arguments [:key1 =&gt; 'val1', :key2 =&gt; 'val2']</pre> </dd> <dt><code class=\"docutils literal\">class_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The name of the handler class. This can be module name-spaced.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The full path to the handler file or the path to a gem (if the handler ships as part of a Ruby gem).</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">supports</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">The type of handler. Possible values: <code class=\"docutils literal\">:exception</code>, <code class=\"docutils literal\">:report</code>, or <code class=\"docutils literal\">:start</code>. Default value: <code class=\"docutils literal\">{ :report =&gt; true, :exception =&gt; true }</code>.</p> </dd> </dl>   <h2 id=\"custom-handlers\">Custom Handlers</h2> <p>A custom handler can be created to support any situation. The easiest way to build a custom handler:</p> <ol class=\"arabic simple\"> <li>Download the <strong>chef_handler</strong> cookbook</li> <li>Create a custom handler</li> <li>Write a recipe using the <strong>chef_handler</strong> resource</li> <li>Add that recipe to a node’s run-list, often as the first recipe in that run-list</li> </ol>  <h3 id=\"id1\">Syntax</h3> <p>The syntax for a handler can vary, depending on what the the situations the handler is being asked to track, the type of handler being used, and so on. All custom exception and report handlers are defined using Ruby and must be a subclass of the <code class=\"docutils literal\">Chef::Handler</code> class.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'chef/log'\n\nmodule ModuleName\n  class HandlerName &lt; Chef::Handler\n    def report\n      # Ruby code goes here\n    end\n  end\nend</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">require</code> ensures that the logging functionality of the chef-client is available to the handler</li> <li>\n<code class=\"docutils literal\">ModuleName</code> is the name of the module as it exists within the <code class=\"docutils literal\">Chef</code> library</li> <li>\n<code class=\"docutils literal\">HandlerName</code> is the name of the handler as it is used in a recipe</li> <li>\n<code class=\"docutils literal\">report</code> is an interface that is used to define the custom handler</li> </ul> <p>For example, the following shows a custom handler that sends an email that contains the exception data when a chef-client run fails:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'net/smtp'\n\nmodule OrgName\n  class SendEmail &lt; Chef::Handler\n    def report\n      if run_status.failed? then\n        message  = \"From: sender_name &lt;sender@example.com&gt;\\n\"\n        message &lt;&lt; \"To: recipient_address &lt;recipient@example.com&gt;\\n\"\n        message &lt;&lt; \"Subject: chef-client Run Failed\\n\"\n        message &lt;&lt; \"Date: #{Time.now.rfc2822}\\n\\n\"\n        message &lt;&lt; \"Chef run failed on #{node.name}\\n\"\n        message &lt;&lt; \"#{run_status.formatted_exception}\\n\"\n        message &lt;&lt; Array(backtrace).join('\\n')\n        Net::SMTP.start('your.smtp.server', 25) do |smtp|\n          smtp.send_message message, 'sender@example', 'recipient@example'\n        end\n      end\n    end\n  end\nend</pre> <p>and then is used in a recipe like:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">send_email 'blah' do\n  # recipe code\nend</pre>   <h3 id=\"report-interface\">report Interface</h3> <p>The <code class=\"docutils literal\">report</code> interface is used to define how a handler will behave and is a required part of any custom handler. The syntax for the <code class=\"docutils literal\">report</code> interface is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">def report\n  # Ruby code\nend</pre> <p>The Ruby code used to define a custom handler will vary significantly from handler to handler. The chef-client includes two default handlers: <code class=\"docutils literal\">error_report</code> and <code class=\"docutils literal\">json_file</code>. Their use of the <code class=\"docutils literal\">report</code> interface is shown below.</p> <p>The <a class=\"reference external\" href=\"https://github.com/chef/chef/blob/master/lib/chef/handler/error_report.rb\">error_report</a> handler:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'chef/handler'\nrequire 'chef/resource/directory'\n\nclass Chef\n  class Handler\n    class ErrorReport &lt; ::Chef::Handler\n      def report\n        Chef::FileCache.store('failed-run-data.json', Chef::JSONCompat.to_json_pretty(data), 0640)\n        Chef::Log.fatal(\"Saving node information to #{Chef::FileCache.load('failed-run-data.json', false)}\")\n      end\n    end\n end\nend</pre> <p>The <a class=\"reference external\" href=\"https://github.com/chef/chef/blob/master/lib/chef/handler/json_file.rb\">json_file</a> handler:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'chef/handler'\nrequire 'chef/resource/directory'\n\nclass Chef\n  class Handler\n    class JsonFile &lt; ::Chef::Handler\n      attr_reader :config\n      def initialize(config={})\n        @config = config\n        @config[:path] ||= '/var/chef/reports'\n        @config\n      end\n      def report\n        if exception\n          Chef::Log.error('Creating JSON exception report')\n        else\n          Chef::Log.info('Creating JSON run report')\n        end\n        build_report_dir\n        savetime = Time.now.strftime('%Y%m%d%H%M%S')\n        File.open(File.join(config[:path], 'chef-run-report-#{savetime}.json'), 'w') do |file|\n          run_data = data\n          run_data[:start_time] = run_data[:start_time].to_s\n          run_data[:end_time] = run_data[:end_time].to_s\n          file.puts Chef::JSONCompat.to_json_pretty(run_data)\n        end\n      end\n      def build_report_dir\n        unless File.exists?(config[:path])\n          FileUtils.mkdir_p(config[:path])\n          File.chmod(00700, config[:path])\n        end\n      end\n    end\n  end\nend</pre>   <h3 id=\"optional-interfaces\">Optional Interfaces</h3> <p>The following interfaces may be used in a handler in the same way as the <code class=\"docutils literal\">report</code> interface to override the default handler behavior in the chef-client. That said, the following interfaces are not typically used in a handler and, for the most part, are completely unnecessary for a handler to work properly and/or as desired.</p>  <h4 id=\"data\">data</h4> <p>The <code class=\"docutils literal\">data</code> method is used to return the Hash representation of the <code class=\"docutils literal\">run_status</code> object. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">def data\n  @run_status.to_hash\nend</pre>   <h4 id=\"run-report-safely\">run_report_safely</h4> <p>The <code class=\"docutils literal\">run_report_safely</code> method is used to run the report handler, rescuing and logging errors that may arise as the handler runs and ensuring that all handlers get a chance to run during the chef-client run (even if some handlers fail during that run). In general, this method should never be used as an interface in a custom handler unless this default behavior simply must be overridden.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">def run_report_safely(run_status)\n  run_report_unsafe(run_status)\nrescue Exception =&gt; e\n  Chef::Log.error('Report handler #{self.class.name} raised #{e.inspect}')\n  Array(e.backtrace).each { |line| Chef::Log.error(line) }\nensure\n  @run_status = nil\nend</pre>   <h4 id=\"run-report-unsafe\">run_report_unsafe</h4> <p>The <code class=\"docutils literal\">run_report_unsafe</code> method is used to run the report handler without any error handling. This method should never be used directly in any handler, except during testing of that handler. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">def run_report_unsafe(run_status)\n  @run_status = run_status\n  report\nend</pre>    <h3 id=\"run-status-object\">run_status Object</h3> <p>The <code class=\"docutils literal\">run_status</code> object is initialized by the chef-client before the <code class=\"docutils literal\">report</code> interface is run for any handler. The <code class=\"docutils literal\">run_status</code> object keeps track of the status of the chef-client run and will contain some (or all) of the following properties:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">all_resources</code></td> <td>A list of all resources that are included in the <code class=\"docutils literal\">resource_collection</code> property for the current chef-client run.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">backtrace</code></td> <td>A backtrace associated with the uncaught exception data that caused a chef-client run to fail, if present; <code class=\"docutils literal\">nil</code> for a successful chef-client run.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">elapsed_time</code></td> <td>The amount of time between the start (<code class=\"docutils literal\">start_time</code>) and end (<code class=\"docutils literal\">end_time</code>) of a chef-client run.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">end_time</code></td> <td>The time at which a chef-client run ended.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">exception</code></td> <td>The uncaught exception data which caused a chef-client run to fail; <code class=\"docutils literal\">nil</code> for a successful chef-client run.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">failed?</code></td> <td>Show that a chef-client run has failed when uncaught exceptions were raised during a chef-client run. An exception handler runs when the <code class=\"docutils literal\">failed?</code> indicator is <code class=\"docutils literal\">true</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">node</code></td> <td>The node on which the chef-client run occurred.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">run_context</code></td> <td>An instance of the <code class=\"docutils literal\">Chef::RunContext</code> object; used by the chef-client to track the context of the run; provides access to the <code class=\"docutils literal\">cookbook_collection</code>, <code class=\"docutils literal\">resource_collection</code>, and <code class=\"docutils literal\">definitions</code> properties.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">start_time</code></td> <td>The time at which a chef-client run started.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">success?</code></td> <td>Show that a chef-client run succeeded when uncaught exceptions were not raised during a chef-client run. A report handler runs when the <code class=\"docutils literal\">success?</code> indicator is <code class=\"docutils literal\">true</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">updated_resources</code></td> <td>A list of resources that were marked as updated as a result of the chef-client run.</td> </tr> </tbody> </table> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">These properties are not always available. For example, a start handler runs at the beginning of the chef-client run, which means that properties like <code class=\"docutils literal\">end_time</code> and <code class=\"docutils literal\">elapsed_time</code> are still unknown and will be unavailable to the <code class=\"docutils literal\">run_status</code> object.</p> </div>    <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Enable the CloudkickHandler handler</strong></p> <p>The following example shows how to enable the <code class=\"docutils literal\">CloudkickHandler</code> handler, which adds it to the default handler path and passes the <code class=\"docutils literal\">oauth</code> key/secret to the handler’s initializer:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_handler \"CloudkickHandler\" do\n  source \"#{node['chef_handler']['handler_path']}/cloudkick_handler.rb\"\n  arguments [node['cloudkick']['oauth_key'], node['cloudkick']['oauth_secret']]\n  action :enable\nend</pre> <p><strong>Enable handlers during the compile phase</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_handler \"Chef::Handler::JsonFile\" do\n  source \"chef/handler/json_file\"\n  arguments :path =&gt; '/var/chef/reports'\n  action :nothing\nend.run_action(:enable)</pre> <p><strong>Handle only exceptions</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_handler \"Chef::Handler::JsonFile\" do\n  source \"chef/handler/json_file\"\n  arguments :path =&gt; '/var/chef/reports'\n  supports :exception =&gt; true\n  action :enable\nend</pre> <p><strong>Cookbook Versions (a custom handler)</strong></p> <p>Community member <code class=\"docutils literal\">juliandunn</code> created a custom <a class=\"reference external\" href=\"https://github.com/juliandunn/cookbook_versions_handler\">report handler that logs all of the cookbooks and cookbook versions</a> that were used during the chef-client run, and then reports after the run is complete. This handler requires the <strong>chef_handler</strong> resource (which is available from the <strong>chef_handler</strong> cookbook).</p> <p>cookbook_versions.rb:</p> <p>The following custom handler defines how cookbooks and cookbook versions that are used during the chef-client run will be compiled into a report using the <code class=\"docutils literal\">Chef::Log</code> class in the chef-client:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'chef/log'\n\nmodule Opscode\n  class CookbookVersionsHandler &lt; Chef::Handler\n\n    def report\n      cookbooks = run_context.cookbook_collection\n      Chef::Log.info('Cookbooks and versions run: #{cookbooks.keys.map {|x| cookbooks[x].name.to_s + ' ' + cookbooks[x].version} }')\n    end\n  end\nend</pre> <p>default.rb:</p> <p>The following recipe is added to the run-list for every node on which a list of cookbooks and versions will be generated as report output after every chef-client run.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">include_recipe 'chef_handler'\n\ncookbook_file \"#{node['chef_handler']['handler_path']}/cookbook_versions.rb\" do\n  source 'cookbook_versions.rb'\n  owner 'root'\n  group 'root'\n  mode '0755'\n  action :create\nend\n\nchef_handler 'Opscode::CookbookVersionsHandler' do\n  source \"#{node['chef_handler']['handler_path']}/cookbook_versions.rb\"\n  supports :report =&gt; true\n  action :enable\nend</pre> <p>This recipe will generate report output similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">[2013-11-26T03:11:06+00:00] INFO: Chef Run complete in 0.300029878 seconds\n[2013-11-26T03:11:06+00:00] INFO: Running report handlers\n[2013-11-26T03:11:06+00:00] INFO: Cookbooks and versions run: [\"chef_handler 1.1.4\", \"cookbook_versions_handler 1.0.0\"]\n[2013-11-26T03:11:06+00:00] INFO: Report handlers complete</pre> <p><strong>JsonFile Handler</strong></p> <p>The <a class=\"reference external\" href=\"https://github.com/chef/chef/blob/master/lib/chef/handler/json_file.rb\">json_file</a> handler is available from the <strong>chef_handler</strong> cookbook and can be used with exceptions and reports. It serializes run status data to a JSON file. This handler may be enabled in one of the following ways.</p> <p>By adding the following lines of Ruby code to either the client.rb file or the solo.rb file, depending on how the chef-client is being run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'chef/handler/json_file'\nreport_handlers &lt;&lt; Chef::Handler::JsonFile.new(:path =&gt; '/var/chef/reports')\nexception_handlers &lt;&lt; Chef::Handler::JsonFile.new(:path =&gt; '/var/chef/reports')</pre> <p>By using the <strong>chef_handler</strong> resource in a recipe, similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_handler 'Chef::Handler::JsonFile' do\n  source 'chef/handler/json_file'\n  arguments :path =&gt; '/var/chef/reports'\n  action :enable\nend</pre> <p>After it has run, the run status data can be loaded and inspected via Interactive Ruby (IRb):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">irb(main):001:0&gt; require 'rubygems' =&gt; true\nirb(main):002:0&gt; require 'json' =&gt; true\nirb(main):003:0&gt; require 'chef' =&gt; true\nirb(main):004:0&gt; r = JSON.parse(IO.read('/var/chef/reports/chef-run-report-20110322060731.json')) =&gt; ... output truncated\nirb(main):005:0&gt; r.keys =&gt; ['end_time', 'node', 'updated_resources', 'exception', 'all_resources', 'success', 'elapsed_time', 'start_time', 'backtrace']\nirb(main):006:0&gt; r['elapsed_time'] =&gt; 0.00246</pre> <p><strong>Register the JsonFile handler</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_handler \"Chef::Handler::JsonFile\" do\n  source \"chef/handler/json_file\"\n  arguments :path =&gt; '/var/chef/reports'\n  action :enable\nend</pre> <p><strong>ErrorReport Handler</strong></p> <p>The <a class=\"reference external\" href=\"https://github.com/chef/chef/blob/master/lib/chef/handler/error_report.rb\">error_report</a> handler is built into the chef-client and can be used for both exceptions and reports. It serializes error report data to a JSON file. This handler may be enabled in one of the following ways.</p> <p>By adding the following lines of Ruby code to either the client.rb file or the solo.rb file, depending on how the chef-client is being run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'chef/handler/error_report'\nreport_handlers &lt;&lt; Chef::Handler::ErrorReport.new()\nexception_handlers &lt;&lt; Chef::Handler::ErrorReport.new()</pre> <p>By using the <a class=\"reference external\" href=\"https://docs.chef.io/resource_chef_handler.html\">chef_handler</a> resource in a recipe, similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_handler 'Chef::Handler::ErrorReport' do\n  source 'chef/handler/error_report'\n  action :enable\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_chef_handler.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_chef_handler.html</a>\n  </p>\n</div>\n","12-9/resource_cookbook_file":"<h1 id=\"cookbook-file\">cookbook_file</h1> <p>Use the <strong>cookbook_file</strong> resource to transfer files from a sub-directory of <code class=\"docutils literal\">COOKBOOK_NAME/files/</code> to a specified path located on a host that is running the chef-client. The file is selected according to file specificity, which allows different source files to be used based on the hostname, host platform (operating system, distro, or as appropriate), or platform version. Files that are located in the <code class=\"docutils literal\">COOKBOOK_NAME/files/default</code> sub-directory may be used on any platform.</p> <p>During a chef-client run, the checksum for each local file is calculated and then compared against the checksum for the same file as it currently exists in the cookbook on the Chef server. A file is not transferred when the checksums match. Only files that require an update are transferred from the Chef server to a node.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>cookbook_file</strong> resource block manages files by using files that exist within a cookbook’s <code class=\"docutils literal\">/files</code> directory. For example, to write the home page for an Apache website:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cookbook_file '/var/www/customers/public_html/index.php' do\n  source 'index.php'\n  owner 'web_admin'\n  group 'web_admin'\n  mode '0755'\n  action :create\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">'/var/www/customers/public_html/index.php'</code> is path to the file to be created</li> <li>\n<code class=\"docutils literal\">'index.php'</code> is a file in the <code class=\"docutils literal\">/files</code> directory in a cookbook that is used to create that file (the contents of the file in the cookbook will become the contents of the file on the node)</li> <li>\n<code class=\"docutils literal\">owner</code>, <code class=\"docutils literal\">group</code>, and <code class=\"docutils literal\">mode</code> define the permissions</li> </ul> <p>The full syntax for all of the properties that are available to the <strong>cookbook_file</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cookbook_file 'name' do\n  atomic_update              TrueClass, FalseClass\n  backup                     FalseClass, Integer\n  cookbook                   String\n  force_unlink               TrueClass, FalseClass\n  group                      String, Integer\n  inherits                   TrueClass, FalseClass\n  manage_symlink_source      TrueClass, FalseClass, NilClass\n  mode                       String, Integer\n  notifies                   # see description\n  owner                      String, Integer\n  path                       String # defaults to 'name' if not specified\n  provider                   Chef::Provider::CookbookFile\n  rights                     Hash\n  source                     String, Array\n  subscribes                 # see description\n  verify                     String, Block\n  action                     Symbol # defaults to :create if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">cookbook_file</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">atomic_update</code>, <code class=\"docutils literal\">backup</code>, <code class=\"docutils literal\">cookbook</code>, <code class=\"docutils literal\">force_unlink</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">inherits</code>, <code class=\"docutils literal\">manage_symlink_source</code>, <code class=\"docutils literal\">mode</code>, <code class=\"docutils literal\">owner</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">rights</code>, <code class=\"docutils literal\">source</code>, and <code class=\"docutils literal\">verify</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:create</code></dt> <dd>Default. Create a file. If a file already exists (but does not match), update that file to match.</dd> <dt><code class=\"docutils literal\">:create_if_missing</code></dt> <dd>Create a file only if the file does not exist. When the file exists, nothing happens.</dd> <dt><code class=\"docutils literal\">:delete</code></dt> <dd>Delete a file.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:touch</code></dt> <dd>Touch a file. This updates the access (atime) and file modification (mtime) times for a file. (This action may be used with this resource, but is typically only used with the <strong>file</strong> resource.)</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">atomic_update</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Perform atomic file updates on a per-resource basis. Set to <code class=\"docutils literal\">true</code> for atomic file updates. Set to <code class=\"docutils literal\">false</code> for non-atomic file updates. This setting overrides <code class=\"docutils literal\">file_atomic_update</code>, which is a global setting found in the client.rb file. Default value: <code class=\"docutils literal\">true</code>.</p> </dd> <dt><code class=\"docutils literal\">backup</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> FalseClass, Integer</p> <p class=\"last\">The number of backups to be kept in <code class=\"docutils literal\">/var/chef/backup</code> (for UNIX- and Linux-based platforms) or <code class=\"docutils literal\">C:/chef/backup</code> (for the Microsoft Windows platform). Set to <code class=\"docutils literal\">false</code> to prevent backups from being kept. Default value: <code class=\"docutils literal\">5</code>.</p> </dd> <dt><code class=\"docutils literal\">cookbook</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The cookbook in which a file is located (if it is not located in the current cookbook). The default value is the current cookbook.</p> </dd> <dt><code class=\"docutils literal\">force_unlink</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">How the chef-client handles certain situations when the target file turns out not to be a file. For example, when a target file is actually a symlink. Set to <code class=\"docutils literal\">true</code> for the chef-client delete the non-file target and replace it with the specified file. Set to <code class=\"docutils literal\">false</code> for the chef-client to raise an error. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">A string or ID that identifies the group owner by group name, including fully qualified group names such as <code class=\"docutils literal\">domain\\group</code> or <code class=\"docutils literal\">group@domain</code>. If this value is not specified, existing groups remain unchanged and new group assignments use the default <code class=\"docutils literal\">POSIX</code> group (if available).</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">inherits</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Microsoft Windows only. Whether a file inherits rights from its parent directory. Default value: <code class=\"docutils literal\">true</code>.</p> </dd> <dt><code class=\"docutils literal\">manage_symlink_source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass, NilClass</p> <p class=\"last\">Cause the chef-client to detect and manage the source file for a symlink. Possible values: <code class=\"docutils literal\">nil</code>, <code class=\"docutils literal\">true</code>, or <code class=\"docutils literal\">false</code>. When this value is set to <code class=\"docutils literal\">nil</code>, the chef-client will manage a symlink’s source file and emit a warning. When this value is set to <code class=\"docutils literal\">true</code>, the chef-client will manage a symlink’s source file and not emit a warning. Default value: <code class=\"docutils literal\">nil</code>. The default value will be changed to <code class=\"docutils literal\">false</code> in a future version.</p> </dd> <dt><code class=\"docutils literal\">mode</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p>If <code class=\"docutils literal\">mode</code> is not specified and if the file already exists, the existing mode on the file is used. If <code class=\"docutils literal\">mode</code> is not specified, the file does not exist, and the <code class=\"docutils literal\">:create</code> action is specified, the chef-client assumes a mask value of <code class=\"docutils literal\">'0777'</code> and then applies the umask for the system on which the file is to be created to the <code class=\"docutils literal\">mask</code> value. For example, if the umask on a system is <code class=\"docutils literal\">'022'</code>, the chef-client uses the default value of <code class=\"docutils literal\">'0755'</code>.</p> <p>The behavior is different depending on the platform.</p> <p>UNIX- and Linux-based systems: A quoted 3-5 character string that defines the octal mode that is passed to chmod. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. If the value is specified as a quoted string, it works exactly as if the <code class=\"docutils literal\">chmod</code> command was passed. If the value is specified as an integer, prepend a zero (<code class=\"docutils literal\">0</code>) to the value to ensure that it is interpreted as an octal number. For example, to assign read, write, and execute rights for all users, use <code class=\"docutils literal\">'0777'</code> or <code class=\"docutils literal\">'777'</code>; for the same rights, plus the sticky bit, use <code class=\"docutils literal\">'01777'</code> or <code class=\"docutils literal\">'1777'</code>.</p> <p class=\"last\">Microsoft Windows: A quoted 3-5 character string that defines the octal mode that is translated into rights for Microsoft Windows security. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. Values up to <code class=\"docutils literal\">'0777'</code> are allowed (no sticky bits) and mean the same in Microsoft Windows as they do in UNIX, where <code class=\"docutils literal\">4</code> equals <code class=\"docutils literal\">GENERIC_READ</code>, <code class=\"docutils literal\">2</code> equals <code class=\"docutils literal\">GENERIC_WRITE</code>, and <code class=\"docutils literal\">1</code> equals <code class=\"docutils literal\">GENERIC_EXECUTE</code>. This property cannot be used to set <code class=\"docutils literal\">:full_control</code>. This property has no effect if not specified, but when it and <code class=\"docutils literal\">rights</code> are both specified, the effects are cumulative.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">owner</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">A string or ID that identifies the group owner by user name, including fully qualified user names such as <code class=\"docutils literal\">domain\\user</code> or <code class=\"docutils literal\">user@domain</code>. If this value is not specified, existing owners remain unchanged and new owner assignments use the current user (when necessary).</p> </dd> <dt><code class=\"docutils literal\">path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p>The path to the destination at which a file is to be created. Default value: the <code class=\"docutils literal\">name</code> of the resource block For example: <code class=\"docutils literal\">file.txt</code>.</p> <p class=\"last\">Microsoft Windows: A path that begins with a forward slash (<code class=\"docutils literal\">/</code>) will point to the root of the current working directory of the chef-client process. This path can vary from system to system. Therefore, using a path that begins with a forward slash (<code class=\"docutils literal\">/</code>) is not recommended.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">rights</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">Microsoft Windows only. The permissions for users and groups in a Microsoft Windows environment. For example: <code class=\"docutils literal\">rights &lt;permissions&gt;, &lt;principal&gt;, &lt;options&gt;</code> where <code class=\"docutils literal\">&lt;permissions&gt;</code> specifies the rights granted to the principal, <code class=\"docutils literal\">&lt;principal&gt;</code> is the group or user name, and <code class=\"docutils literal\">&lt;options&gt;</code> is a Hash with one (or more) advanced rights options.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the file in <code class=\"docutils literal\">COOKBOOK_NAME/files/default</code> or the path to a file located in <code class=\"docutils literal\">COOKBOOK_NAME/files</code>. The path must include the file name and its extension. Can be used to distribute specific files to specific platforms. See “File Specificity” below for more information. See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">verify</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Block</p> <p>A block or a string that returns <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. A string, when <code class=\"docutils literal\">true</code> is executed as a system command.</p> <p>A block is arbitrary Ruby defined within the resource block by using the <code class=\"docutils literal\">verify</code> property. When a block is <code class=\"docutils literal\">true</code>, the chef-client will continue to update the file as appropriate.</p> <p>For example, this should return <code class=\"docutils literal\">true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cookbook_file '/tmp/baz' do\n  verify { 1 == 1 }\nend</pre> <p>This should return <code class=\"docutils literal\">true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cookbook_file '/etc/nginx.conf' do\n  verify 'nginx -t -c %{path}'\nend</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>For releases of the chef-client prior to 12.5 (chef-client 12.4 and earlier) the correct syntax is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cookbook_file '/etc/nginx.conf' do\n  verify 'nginx -t -c %{file}'\nend</pre> <p class=\"last\">See GitHub issues <a class=\"reference external\" href=\"https://github.com/chef/chef/issues/3232\">https://github.com/chef/chef/issues/3232</a> and <a class=\"reference external\" href=\"https://github.com/chef/chef/pull/3693\">https://github.com/chef/chef/pull/3693</a> for more information about these differences.</p> </div> <p>This should return <code class=\"docutils literal\">true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cookbook_file '/tmp/bar' do\n  verify { 1 == 1}\nend</pre> <p>And this should return <code class=\"docutils literal\">true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cookbook_file '/tmp/foo' do\n  verify do |path|\n    true\n  end\nend</pre> <p>Whereas, this should return <code class=\"docutils literal\">false</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cookbook_file '/tmp/turtle' do\n  verify '/usr/bin/false'\nend</pre> <p class=\"last\">If a string or a block return <code class=\"docutils literal\">false</code>, the chef-client run will stop and an error is returned.</p> </dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Use the <code class=\"docutils literal\">owner</code> and <code class=\"docutils literal\">right</code> properties and avoid the <code class=\"docutils literal\">group</code> and <code class=\"docutils literal\">mode</code> properties whenever possible. The <code class=\"docutils literal\">group</code> and <code class=\"docutils literal\">mode</code> properties are not true Microsoft Windows concepts and are provided more for backward compatibility than for best practice.</p> </div> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">For a machine on which SELinux is enabled, the chef-client will create files that correctly match the default policy settings only when the cookbook that defines the action also conforms to the same policy.</p> </div>  <h3 id=\"atomic-file-updates\">Atomic File Updates</h3> <p>Atomic updates are used with <strong>file</strong>-based resources to help ensure that file updates can be made when updating a binary or if disk space runs out.</p> <p>Atomic updates are enabled by default. They can be managed globally using the <code class=\"docutils literal\">file_atomic_update</code> setting in the client.rb file. They can be managed on a per-resource basis using the <code class=\"docutils literal\">atomic_update</code> property that is available with the <strong>cookbook_file</strong>, <strong>file</strong>, <strong>remote_file</strong>, and <strong>template</strong> resources.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">On certain platforms, and after a file has been moved into place, the chef-client may modify file permissions to support features specific to those platforms. On platforms with SELinux enabled, the chef-client will fix up the security contexts after a file has been moved into the correct location by running the <code class=\"docutils literal\">restorecon</code> command. On the Microsoft Windows platform, the chef-client will create files so that ACL inheritance works as expected.</p> </div>   <h3 id=\"windows-file-security\">Windows File Security</h3> <p>To support Microsoft Windows security, the <strong>template</strong>, <strong>file</strong>, <strong>remote_file</strong>, <strong>cookbook_file</strong>, <strong>directory</strong>, and <strong>remote_directory</strong> resources support the use of inheritance and access control lists (ACLs) within recipes.</p> <p><strong>Access Control Lists (ACLs)</strong></p> <p>The <code class=\"docutils literal\">rights</code> property can be used in a recipe to manage access control lists (ACLs), which allow permissions to be given to multiple users and groups. Use the <code class=\"docutils literal\">rights</code> property can be used as many times as necessary; the chef-client will apply them to the file or directory as required. The syntax for the <code class=\"docutils literal\">rights</code> property is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">rights permission, principal, option_type =&gt; value</pre> <p>where</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">permission</code></dt> <dd>\n<p class=\"first\">Use to specify which rights are granted to the <code class=\"docutils literal\">principal</code>. The possible values are: <code class=\"docutils literal\">:read</code>, <code class=\"docutils literal\">:write</code>, <code class=\"docutils literal\">read_execute</code>, <code class=\"docutils literal\">:modify</code>, and <code class=\"docutils literal\">:full_control</code>.</p> <p>These permissions are cumulative. If <code class=\"docutils literal\">:write</code> is specified, then it includes <code class=\"docutils literal\">:read</code>. If <code class=\"docutils literal\">:full_control</code> is specified, then it includes both <code class=\"docutils literal\">:write</code> and <code class=\"docutils literal\">:read</code>.</p> <p class=\"last\">(For those who know the Microsoft Windows API: <code class=\"docutils literal\">:read</code> corresponds to <code class=\"docutils literal\">GENERIC_READ</code>; <code class=\"docutils literal\">:write</code> corresponds to <code class=\"docutils literal\">GENERIC_WRITE</code>; <code class=\"docutils literal\">:read_execute</code> corresponds to <code class=\"docutils literal\">GENERIC_READ</code> and <code class=\"docutils literal\">GENERIC_EXECUTE</code>; <code class=\"docutils literal\">:modify</code> corresponds to <code class=\"docutils literal\">GENERIC_WRITE</code>, <code class=\"docutils literal\">GENERIC_READ</code>, <code class=\"docutils literal\">GENERIC_EXECUTE</code>, and <code class=\"docutils literal\">DELETE</code>; <code class=\"docutils literal\">:full_control</code> corresponds to <code class=\"docutils literal\">GENERIC_ALL</code>, which allows a user to change the owner and other metadata about a file.)</p> </dd> <dt><code class=\"docutils literal\">principal</code></dt> <dd>Use to specify a group or user name. This is identical to what is entered in the login box for Microsoft Windows, such as <code class=\"docutils literal\">user_name</code>, <code class=\"docutils literal\">domain\\user_name</code>, or <code class=\"docutils literal\">user_name@fully_qualified_domain_name</code>. The chef-client does not need to know if a principal is a user or a group.</dd> <dt><code class=\"docutils literal\">option_type</code></dt> <dd>\n<p class=\"first\">A hash that contains advanced rights options. For example, the rights to a directory that only applies to the first level of children might look something like: <code class=\"docutils literal\">rights :write, 'domain\\group_name', :one_level_deep =&gt; true</code>. Possible option types:</p> <table class=\"last docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option Type</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:applies_to_children</code></td> <td>Specify how permissions are applied to children. Possible values: <code class=\"docutils literal\">true</code> to inherit both child directories and files; <code class=\"docutils literal\">false</code> to not inherit any child directories or files; <code class=\"docutils literal\">:containers_only</code> to inherit only child directories (and not files); <code class=\"docutils literal\">:objects_only</code> to recursively inherit files (and not child directories).</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:applies_to_self</code></td> <td>Indicates whether a permission is applied to the parent directory. Possible values: <code class=\"docutils literal\">true</code> to apply to the parent directory or file and its children; <code class=\"docutils literal\">false</code> to not apply only to child directories and files.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:one_level_deep</code></td> <td>Indicates the depth to which permissions will be applied. Possible values: <code class=\"docutils literal\">true</code> to apply only to the first level of children; <code class=\"docutils literal\">false</code> to apply to all children.</td> </tr> </tbody> </table> </dd> </dl> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource 'x.txt' do\n  rights :read, 'Everyone'\n  rights :write, 'domain\\group'\n  rights :full_control, 'group_name_or_user_name'\n  rights :full_control, 'user_name', :applies_to_children =&gt; true\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">rights :read, ['Administrators','Everyone']\nrights :full_control, 'Users', :applies_to_children =&gt; true\nrights :write, 'Sally', :applies_to_children =&gt; :containers_only, :applies_to_self =&gt; false, :one_level_deep =&gt; true</pre> <p>Some other important things to know when using the <code class=\"docutils literal\">rights</code> attribute:</p> <ul class=\"simple\"> <li>Only inherited rights remain. All existing explicit rights on the object are removed and replaced.</li> <li>If rights are not specified, nothing will be changed. The chef-client does not clear out the rights on a file or directory if rights are not specified.</li> <li>Changing inherited rights can be expensive. Microsoft Windows will propagate rights to all children recursively due to inheritance. This is a normal aspect of Microsoft Windows, so consider the frequency with which this type of action is necessary and take steps to control this type of action if performance is the primary consideration.</li> </ul> <p>Use the <code class=\"docutils literal\">deny_rights</code> property to deny specific rights to specific users. The ordering is independent of using the <code class=\"docutils literal\">rights</code> property. For example, it doesn’t matter if rights are granted to everyone is placed before or after <code class=\"docutils literal\">deny_rights :read, ['Julian', 'Lewis']</code>, both Julian and Lewis will be unable to read the document. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource 'x.txt' do\n  rights :read, 'Everyone'\n  rights :write, 'domain\\group'\n  rights :full_control, 'group_name_or_user_name'\n  rights :full_control, 'user_name', :applies_to_children =&gt; true\n  deny_rights :read, ['Julian', 'Lewis']\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deny_rights :full_control, ['Sally']</pre> <p><strong>Inheritance</strong></p> <p>By default, a file or directory inherits rights from its parent directory. Most of the time this is the preferred behavior, but sometimes it may be necessary to take steps to more specifically control rights. The <code class=\"docutils literal\">inherits</code> property can be used to specifically tell the chef-client to apply (or not apply) inherited rights from its parent directory.</p> <p>For example, the following example specifies the rights for a directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor' do\n  rights :read, 'MORDOR\\Minions'\n  rights :full_control, 'MORDOR\\Sauron'\nend</pre> <p>and then the following example specifies how to use inheritance to deny access to the child directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor\\mount_doom' do\n  rights :full_control, 'MORDOR\\Sauron'\n  inherits false # Sauron is the only person who should have any sort of access\nend</pre> <p>If the <code class=\"docutils literal\">deny_rights</code> permission were to be used instead, something could slip through unless all users and groups were denied.</p> <p>Another example also shows how to specify rights for a directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor' do\n  rights :read, 'MORDOR\\Minions'\n  rights :full_control, 'MORDOR\\Sauron'\n  rights :write, 'SHIRE\\Frodo' # Who put that there I didn't put that there\nend</pre> <p>but then not use the <code class=\"docutils literal\">inherits</code> property to deny those rights on a child directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor\\mount_doom' do\n  deny_rights :read, 'MORDOR\\Minions' # Oops, not specific enough\nend</pre> <p>Because the <code class=\"docutils literal\">inherits</code> property is not specified, the chef-client will default it to <code class=\"docutils literal\">true</code>, which will ensure that security settings for existing files remain unchanged.</p>    <h2 id=\"file-specificity\">File Specificity</h2> <p>A cookbook is frequently designed to work across many platforms and is often required to distribute a specific file to a specific platform. A cookbook can be designed to support the distribution of files across platforms, while ensuring that the correct file ends up on each system.</p> <p>The pattern for file specificity depends on two things: the lookup path and the source attribute. The first pattern that matches is used:</p> <ol class=\"arabic simple\"> <li>/host-$fqdn/$source</li> <li>/$platform-$platform_version/$source</li> <li>/$platform/$source</li> <li>/default/$source</li> <li>/$source</li> </ol> <p>Use an array with the <code class=\"docutils literal\">source</code> attribute to define an explicit lookup path. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file '/conf.py' do\n  source ['#{node.chef_environment}.py', 'conf.py']\nend</pre> <p>The following example emulates the entire file specificity pattern by defining it as an explicit path:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file '/conf.py' do\n  source %W{\n    host-#{node['fqdn']}/conf.py\n    #{node['platform']}-#{node['platform_version']}/conf.py\n    #{node['platform']}/conf.py\n    default/conf.py\n  }\nend</pre> <p>A cookbook may have a <code class=\"docutils literal\">/files</code> directory structure like this:</p> <pre class=\"highlight-python\" data-language=\"python\">files/\n   host-foo.example.com\n   ubuntu-10.04\n   ubuntu-10\n   ubuntu\n   redhat-5.8\n   redhat-6.4\n   ...\n   default</pre> <p>and a resource that looks something like the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cookbook_file '/usr/local/bin/apache2_module_conf_generate.pl' do\n  source 'apache2_module_conf_generate.pl'\n  mode '0755'\n  owner 'root'\n  group 'root'\nend</pre> <p>This resource is matched in the same order as the <code class=\"docutils literal\">/files</code> directory structure. For a node that is running Ubuntu 10.04, the second item would be the matching item and the location to which the file identified in the <strong>cookbook_file</strong> resource would be distributed:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">host-foo.example.com/apache2_module_conf_generate.pl\nubuntu-10.04/apache2_module_conf_generate.pl\nubuntu-10/apache2_module_conf_generate.pl\nubuntu/apache2_module_conf_generate.pl\ndefault/apache2_module_conf_generate.pl</pre> <p>If the <code class=\"docutils literal\">apache2_module_conf_generate.pl</code> file was located in the cookbook directory under <code class=\"docutils literal\">files/host-foo.example.com/</code>, the specified file(s) would only be copied to the machine with the domain name foo.example.com.</p> <p><strong>Host Notation</strong></p> <p>The naming of folders within cookbook directories must literally match the host notation used for file specificity matching. For example, if a host is named <code class=\"docutils literal\">foo.example.com</code>, the folder must be named <code class=\"docutils literal\">host-foo.example.com</code>.</p>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Transfer a file</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cookbook_file 'file.txt' do\n  mode '0755'\nend</pre> <p><strong>Handle cookbook_file and yum_package resources in the same recipe</strong></p> <p>When a <strong>cookbook_file</strong> resource and a <strong>yum_package</strong> resource are both called from within the same recipe, use the <code class=\"docutils literal\">flush_cache</code> attribute to dump the in-memory Yum cache, and then use the repository immediately to ensure that the correct package is installed:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cookbook_file '/etc/yum.repos.d/custom.repo' do\n  source 'custom'\n  mode '0755'\nend\n\nyum_package 'only-in-custom-repo' do\n  action :install\n  flush_cache [ :before ]\nend</pre> <p><strong>Install repositories from a file, trigger a command, and force the internal cache to reload</strong></p> <p>The following example shows how to install new Yum repositories from a file, where the installation of the repository triggers a creation of the Yum cache that forces the internal cache for the chef-client to reload:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'create-yum-cache' do\n command 'yum -q makecache'\n action :nothing\nend\n\nruby_block 'reload-internal-yum-cache' do\n  block do\n    Chef::Provider::Package::Yum::YumCache.instance.reload\n  end\n  action :nothing\nend\n\ncookbook_file '/etc/yum.repos.d/custom.repo' do\n  source 'custom'\n  mode '0755'\n  notifies :run, 'execute[create-yum-cache]', :immediately\n  notifies :create, 'ruby_block[reload-internal-yum-cache]', :immediately\nend</pre> <p><strong>Use a case statement</strong></p> <p>The following example shows how a case statement can be used to handle a situation where an application needs to be installed on multiple platforms, but where the install directories are different paths, depending on the platform:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cookbook_file 'application.pm' do\n  path case node['platform']\n    when 'centos','redhat'\n      '/usr/lib/version/1.2.3/dir/application.pm'\n    when 'arch'\n      '/usr/share/version/core_version/dir/application.pm'\n    else\n      '/etc/version/dir/application.pm'\n    end\n  source \"application-#{node['languages']['perl']['version']}.pm\"\n  owner 'root'\n  group 'root'\n  mode '0755'\nend</pre> <p><strong>Manage dotfiles</strong></p> <p>The following example shows using the <strong>directory</strong> and <strong>cookbook_file</strong> resources to manage dotfiles. The dotfiles are defined by a JSON data structure similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">\"files\": {\n  \".zshrc\": {\n    \"mode\": '0755',\n    \"source\": \"dot-zshrc\"\n    },\n  \".bashrc\": {\n    \"mode\": '0755',\n    \"source\": \"dot-bashrc\"\n     },\n  \".bash_profile\": {\n    \"mode\": '0755',\n    \"source\": \"dot-bash_profile\"\n    },\n  }</pre> <p>and then the following resources manage the dotfiles:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if u.has_key?('files')\n  u['files'].each do |filename, file_data|\n\n  directory \"#{home_dir}/#{File.dirname(filename)}\" do\n    recursive true\n    mode '0755'\n  end if file_data['subdir']\n\n  cookbook_file \"#{home_dir}/#{filename}\" do\n    source \"#{u['id']}/#{file_data['source']}\"\n    owner 'u['id']'\n    group 'group_id'\n    mode 'file_data['mode']'\n    ignore_failure true\n    backup 0\n  end\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_cookbook_file.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_cookbook_file.html</a>\n  </p>\n</div>\n","12-9/resource_directory":"<h1 id=\"directory\">directory</h1> <p>Use the <strong>directory</strong> resource to manage a directory, which is a hierarchy of folders that comprises all of the information stored on a computer. The root directory is the top-level, under which the rest of the directory is organized. The <strong>directory</strong> resource uses the <code class=\"docutils literal\">name</code> property to specify the path to a location in a directory. Typically, permission to access that location in the directory is required.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>directory</strong> resource block declares a directory and the permissions needed on that directory. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory '/etc/apache2' do\n  owner 'root'\n  group 'root'\n  mode '0755'\n  action :create\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">'/etc/apache2'</code> specifies the directory</li> <li>\n<code class=\"docutils literal\">owner</code>, <code class=\"docutils literal\">group</code>, and <code class=\"docutils literal\">mode</code> define the permissions</li> </ul> <p>The full syntax for all of the properties that are available to the <strong>directory</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'name' do\n  group                      String, Integer\n  inherits                   TrueClass, FalseClass\n  mode                       String, Integer\n  notifies                   # see description\n  owner                      String, Integer\n  path                       String # defaults to 'name' if not specified\n  provider                   Chef::Provider::Directory\n  recursive                  TrueClass, FalseClass\n  rights                     Hash\n  subscribes                 # see description\n  action                     Symbol # defaults to :create if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">directory</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block; when the <code class=\"docutils literal\">path</code> property is not specified, <code class=\"docutils literal\">name</code> is also the path to the directory, from the root</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">inherits</code>, <code class=\"docutils literal\">mode</code>, <code class=\"docutils literal\">owner</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">recursive</code>, and <code class=\"docutils literal\">rights</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:create</code></dt> <dd>Default. Create a directory. If a directory already exists (but does not match), update that directory to match.</dd> <dt><code class=\"docutils literal\">:delete</code></dt> <dd>Delete a directory.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">A string or ID that identifies the group owner by group name, including fully qualified group names such as <code class=\"docutils literal\">domain\\group</code> or <code class=\"docutils literal\">group@domain</code>. If this value is not specified, existing groups remain unchanged and new group assignments use the default <code class=\"docutils literal\">POSIX</code> group (if available).</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">inherits</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Microsoft Windows only. Whether a file inherits rights from its parent directory. Default value: <code class=\"docutils literal\">true</code>.</p> </dd> <dt><code class=\"docutils literal\">mode</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p>A quoted 3-5 character string that defines the octal mode. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. If <code class=\"docutils literal\">mode</code> is not specified and if the directory already exists, the existing mode on the directory is used. If <code class=\"docutils literal\">mode</code> is not specified, the directory does not exist, and the <code class=\"docutils literal\">:create</code> action is specified, the chef-client assumes a mask value of <code class=\"docutils literal\">'0777'</code>, and then applies the umask for the system on which the directory is to be created to the <code class=\"docutils literal\">mask</code> value. For example, if the umask on a system is <code class=\"docutils literal\">'022'</code>, the chef-client uses the default value of <code class=\"docutils literal\">'0755'</code>.</p> <p>The behavior is different depending on the platform.</p> <p>UNIX- and Linux-based systems: A quoted 3-5 character string that defines the octal mode that is passed to chmod. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. If the value is specified as a quoted string, it works exactly as if the <code class=\"docutils literal\">chmod</code> command was passed. If the value is specified as an integer, prepend a zero (<code class=\"docutils literal\">0</code>) to the value to ensure that it is interpreted as an octal number. For example, to assign read, write, and execute rights for all users, use <code class=\"docutils literal\">'0777'</code> or <code class=\"docutils literal\">'777'</code>; for the same rights, plus the sticky bit, use <code class=\"docutils literal\">'01777'</code> or <code class=\"docutils literal\">'1777'</code>.</p> <p class=\"last\">Microsoft Windows: A quoted 3-5 character string that defines the octal mode that is translated into rights for Microsoft Windows security. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. Values up to <code class=\"docutils literal\">'0777'</code> are allowed (no sticky bits) and mean the same in Microsoft Windows as they do in UNIX, where <code class=\"docutils literal\">4</code> equals <code class=\"docutils literal\">GENERIC_READ</code>, <code class=\"docutils literal\">2</code> equals <code class=\"docutils literal\">GENERIC_WRITE</code>, and <code class=\"docutils literal\">1</code> equals <code class=\"docutils literal\">GENERIC_EXECUTE</code>. This property cannot be used to set <code class=\"docutils literal\">:full_control</code>. This property has no effect if not specified, but when it and <code class=\"docutils literal\">rights</code> are both specified, the effects are cumulative.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">owner</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">A string or ID that identifies the group owner by user name, including fully qualified user names such as <code class=\"docutils literal\">domain\\user</code> or <code class=\"docutils literal\">user@domain</code>. If this value is not specified, existing owners remain unchanged and new owner assignments use the current user (when necessary).</p> </dd> <dt><code class=\"docutils literal\">path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The path to the directory. Using a fully qualified path is recommended, but is not always required. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">recursive</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Create or delete parent directories recursively. For the <code class=\"docutils literal\">owner</code>, <code class=\"docutils literal\">group</code>, and <code class=\"docutils literal\">mode</code> properties, the value of this attribute applies only to the leaf directory. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">rights</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">Microsoft Windows only. The permissions for users and groups in a Microsoft Windows environment. For example: <code class=\"docutils literal\">rights &lt;permissions&gt;, &lt;principal&gt;, &lt;options&gt;</code> where <code class=\"docutils literal\">&lt;permissions&gt;</code> specifies the rights granted to the principal, <code class=\"docutils literal\">&lt;principal&gt;</code> is the group or user name, and <code class=\"docutils literal\">&lt;options&gt;</code> is a Hash with one (or more) advanced rights options.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> </dl>  <h3 id=\"recursive-directories\">Recursive Directories</h3> <p>The <strong>directory</strong> resource can be used to create directory structures, as long as each directory within that structure is created explicitly. This is because the <code class=\"docutils literal\">recursive</code> attribute only applies <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">mode</code>, and <code class=\"docutils literal\">owner</code> attribute values to the leaf directory.</p> <p>A directory structure:</p> <pre class=\"highlight-python\" data-language=\"python\">/foo\n  /bar\n    /baz</pre> <p>The following example shows a way create a file in the <code class=\"docutils literal\">/baz</code> directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory \"/foo/bar/baz\" do\n  owner 'root'\n  group 'root'\n  mode '0755'\n  action :create\nend</pre> <p>But with this example, the <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">mode</code>, and <code class=\"docutils literal\">owner</code> attribute values will only be applied to <code class=\"docutils literal\">/baz</code>. Which is fine, if that’s what you want. But most of the time, when the entire <code class=\"docutils literal\">/foo/bar/baz</code> directory structure is not there, you must be explicit about each directory. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">%w[ /foo /foo/bar /foo/bar/baz ].each do |path|\n  directory path do\n    owner 'root'\n    group 'root'\n    mode '0755'\n  end\nend</pre> <p>This approach will create the correct hierarchy—<code class=\"docutils literal\">/foo</code>, then <code class=\"docutils literal\">/bar</code> in <code class=\"docutils literal\">/foo</code>, and then <code class=\"docutils literal\">/baz</code> in <code class=\"docutils literal\">/bar</code>—and also with the correct attribute values for <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">mode</code>, and <code class=\"docutils literal\">owner</code>.</p>   <h3 id=\"windows-file-security\">Windows File Security</h3> <p>To support Microsoft Windows security, the <strong>template</strong>, <strong>file</strong>, <strong>remote_file</strong>, <strong>cookbook_file</strong>, <strong>directory</strong>, and <strong>remote_directory</strong> resources support the use of inheritance and access control lists (ACLs) within recipes.</p> <p><strong>Access Control Lists (ACLs)</strong></p> <p>The <code class=\"docutils literal\">rights</code> property can be used in a recipe to manage access control lists (ACLs), which allow permissions to be given to multiple users and groups. Use the <code class=\"docutils literal\">rights</code> property can be used as many times as necessary; the chef-client will apply them to the file or directory as required. The syntax for the <code class=\"docutils literal\">rights</code> property is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">rights permission, principal, option_type =&gt; value</pre> <p>where</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">permission</code></dt> <dd>\n<p class=\"first\">Use to specify which rights are granted to the <code class=\"docutils literal\">principal</code>. The possible values are: <code class=\"docutils literal\">:read</code>, <code class=\"docutils literal\">:write</code>, <code class=\"docutils literal\">read_execute</code>, <code class=\"docutils literal\">:modify</code>, and <code class=\"docutils literal\">:full_control</code>.</p> <p>These permissions are cumulative. If <code class=\"docutils literal\">:write</code> is specified, then it includes <code class=\"docutils literal\">:read</code>. If <code class=\"docutils literal\">:full_control</code> is specified, then it includes both <code class=\"docutils literal\">:write</code> and <code class=\"docutils literal\">:read</code>.</p> <p class=\"last\">(For those who know the Microsoft Windows API: <code class=\"docutils literal\">:read</code> corresponds to <code class=\"docutils literal\">GENERIC_READ</code>; <code class=\"docutils literal\">:write</code> corresponds to <code class=\"docutils literal\">GENERIC_WRITE</code>; <code class=\"docutils literal\">:read_execute</code> corresponds to <code class=\"docutils literal\">GENERIC_READ</code> and <code class=\"docutils literal\">GENERIC_EXECUTE</code>; <code class=\"docutils literal\">:modify</code> corresponds to <code class=\"docutils literal\">GENERIC_WRITE</code>, <code class=\"docutils literal\">GENERIC_READ</code>, <code class=\"docutils literal\">GENERIC_EXECUTE</code>, and <code class=\"docutils literal\">DELETE</code>; <code class=\"docutils literal\">:full_control</code> corresponds to <code class=\"docutils literal\">GENERIC_ALL</code>, which allows a user to change the owner and other metadata about a file.)</p> </dd> <dt><code class=\"docutils literal\">principal</code></dt> <dd>Use to specify a group or user name. This is identical to what is entered in the login box for Microsoft Windows, such as <code class=\"docutils literal\">user_name</code>, <code class=\"docutils literal\">domain\\user_name</code>, or <code class=\"docutils literal\">user_name@fully_qualified_domain_name</code>. The chef-client does not need to know if a principal is a user or a group.</dd> <dt><code class=\"docutils literal\">option_type</code></dt> <dd>\n<p class=\"first\">A hash that contains advanced rights options. For example, the rights to a directory that only applies to the first level of children might look something like: <code class=\"docutils literal\">rights :write, 'domain\\group_name', :one_level_deep =&gt; true</code>. Possible option types:</p> <table class=\"last docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option Type</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:applies_to_children</code></td> <td>Specify how permissions are applied to children. Possible values: <code class=\"docutils literal\">true</code> to inherit both child directories and files; <code class=\"docutils literal\">false</code> to not inherit any child directories or files; <code class=\"docutils literal\">:containers_only</code> to inherit only child directories (and not files); <code class=\"docutils literal\">:objects_only</code> to recursively inherit files (and not child directories).</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:applies_to_self</code></td> <td>Indicates whether a permission is applied to the parent directory. Possible values: <code class=\"docutils literal\">true</code> to apply to the parent directory or file and its children; <code class=\"docutils literal\">false</code> to not apply only to child directories and files.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:one_level_deep</code></td> <td>Indicates the depth to which permissions will be applied. Possible values: <code class=\"docutils literal\">true</code> to apply only to the first level of children; <code class=\"docutils literal\">false</code> to apply to all children.</td> </tr> </tbody> </table> </dd> </dl> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource 'x.txt' do\n  rights :read, 'Everyone'\n  rights :write, 'domain\\group'\n  rights :full_control, 'group_name_or_user_name'\n  rights :full_control, 'user_name', :applies_to_children =&gt; true\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">rights :read, ['Administrators','Everyone']\nrights :full_control, 'Users', :applies_to_children =&gt; true\nrights :write, 'Sally', :applies_to_children =&gt; :containers_only, :applies_to_self =&gt; false, :one_level_deep =&gt; true</pre> <p>Some other important things to know when using the <code class=\"docutils literal\">rights</code> attribute:</p> <ul class=\"simple\"> <li>Only inherited rights remain. All existing explicit rights on the object are removed and replaced.</li> <li>If rights are not specified, nothing will be changed. The chef-client does not clear out the rights on a file or directory if rights are not specified.</li> <li>Changing inherited rights can be expensive. Microsoft Windows will propagate rights to all children recursively due to inheritance. This is a normal aspect of Microsoft Windows, so consider the frequency with which this type of action is necessary and take steps to control this type of action if performance is the primary consideration.</li> </ul> <p>Use the <code class=\"docutils literal\">deny_rights</code> property to deny specific rights to specific users. The ordering is independent of using the <code class=\"docutils literal\">rights</code> property. For example, it doesn’t matter if rights are granted to everyone is placed before or after <code class=\"docutils literal\">deny_rights :read, ['Julian', 'Lewis']</code>, both Julian and Lewis will be unable to read the document. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource 'x.txt' do\n  rights :read, 'Everyone'\n  rights :write, 'domain\\group'\n  rights :full_control, 'group_name_or_user_name'\n  rights :full_control, 'user_name', :applies_to_children =&gt; true\n  deny_rights :read, ['Julian', 'Lewis']\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deny_rights :full_control, ['Sally']</pre> <p><strong>Inheritance</strong></p> <p>By default, a file or directory inherits rights from its parent directory. Most of the time this is the preferred behavior, but sometimes it may be necessary to take steps to more specifically control rights. The <code class=\"docutils literal\">inherits</code> property can be used to specifically tell the chef-client to apply (or not apply) inherited rights from its parent directory.</p> <p>For example, the following example specifies the rights for a directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor' do\n  rights :read, 'MORDOR\\Minions'\n  rights :full_control, 'MORDOR\\Sauron'\nend</pre> <p>and then the following example specifies how to use inheritance to deny access to the child directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor\\mount_doom' do\n  rights :full_control, 'MORDOR\\Sauron'\n  inherits false # Sauron is the only person who should have any sort of access\nend</pre> <p>If the <code class=\"docutils literal\">deny_rights</code> permission were to be used instead, something could slip through unless all users and groups were denied.</p> <p>Another example also shows how to specify rights for a directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor' do\n  rights :read, 'MORDOR\\Minions'\n  rights :full_control, 'MORDOR\\Sauron'\n  rights :write, 'SHIRE\\Frodo' # Who put that there I didn't put that there\nend</pre> <p>but then not use the <code class=\"docutils literal\">inherits</code> property to deny those rights on a child directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor\\mount_doom' do\n  deny_rights :read, 'MORDOR\\Minions' # Oops, not specific enough\nend</pre> <p>Because the <code class=\"docutils literal\">inherits</code> property is not specified, the chef-client will default it to <code class=\"docutils literal\">true</code>, which will ensure that security settings for existing files remain unchanged.</p>   <h3 id=\"windows-file-redirection\">Windows File Redirection</h3> <p>64-bit versions of Microsoft Windows have a 32-bit compatibility layer that redirects attempts by 32-bit application to access the <code class=\"docutils literal\">System32</code> directory to a different location. Starting with chef-client version 12.9, the 32-bit version of the chef-client is subject to the file redirection policy.</p> <p>For example, consider the following script:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">process_type = ENV['PROCESSOR_ARCHITECTURE'] == 'AMD64' ? '64-bit' : '32-bit'\nsystem32_dir = ::File.join(ENV['SYSTEMROOT'], 'system32')\ntest_dir = ::File.join(system32_dir, 'cheftest')\ntest_file = ::File.join(test_dir, 'chef_architecture.txt')\n\ndirectory test_dir do\n  # some directory\nend\n\nfile test_file do\n  content \"Chef made me, I come from a #{process_type} process.\"\nend</pre> <p>When running a 32-bit version of chef-client, the script will write the <code class=\"docutils literal\">chef_architecture</code> file to the <code class=\"docutils literal\">C:\\Windows\\SysWow64</code> directory. However, when running a native 64-bit version of the chef-client, the script will write a file to the <code class=\"docutils literal\">C:\\Windows\\System32</code> directory, as expected.</p> <p>For more information, see: <a class=\"reference external\" href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa384187(v=vs.85).aspx\">https://msdn.microsoft.com/en-us/library/windows/desktop/aa384187(v=vs.85).aspx</a>.</p>    <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Create a directory</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory '/tmp/something' do\n  owner 'root'\n  group 'root'\n  mode '0755'\n  action :create\nend</pre> <p><strong>Create a directory in Microsoft Windows</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory \"C:\\\\tmp\\\\something.txt\" do\n  rights :full_control, \"DOMAIN\\\\User\"\n  inherits false\n  action :create\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\tmp\\something.txt' do\n  rights :full_control, 'DOMAIN\\User'\n  inherits false\n  action :create\nend</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The difference between the two previous examples is the single- versus double-quoted strings, where if the double quotes are used, the backslash character (<code class=\"docutils literal\">\\</code>) must be escaped using the Ruby escape character (which is a backslash).</p> </div> <p><strong>Create a directory recursively</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">%w{dir1 dir2 dir3}.each do |dir|\n  directory \"/tmp/mydirs/#{dir}\" do\n    mode '0755'\n    owner 'root'\n    group 'root'\n    action :create\n    recursive true\n  end\nend</pre> <p><strong>Delete a directory</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory '/tmp/something' do\n  recursive true\n  action :delete\nend</pre> <p><strong>Set directory permissions using a variable</strong></p> <p>The following example shows how read/write/execute permissions can be set using a variable named <code class=\"docutils literal\">user_home</code>, and then for owners and groups on any matching node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">user_home = \"/#{node[:matching_node][:user]}\"\n\ndirectory user_home do\n  owner 'node[:matching_node][:user]'\n  group 'node[:matching_node][:group]'\n  mode '0755'\n  action :create\nend</pre> <p>where <code class=\"docutils literal\">matching_node</code> represents a type of node. For example, if the <code class=\"docutils literal\">user_home</code> variable specified <code class=\"docutils literal\">{node[:nginx]...}</code>, a recipe might look similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">user_home = \"/#{node[:nginx][:user]}\"\n\ndirectory user_home do\n  owner 'node[:nginx][:user]'\n  group 'node[:nginx][:group]'\n  mode '0755'\n  action :create\nend</pre> <p><strong>Set directory permissions for a specific type of node</strong></p> <p>The following example shows how permissions can be set for the <code class=\"docutils literal\">/certificates</code> directory on any node that is running Nginx. In this example, permissions are being set for the <code class=\"docutils literal\">owner</code> and <code class=\"docutils literal\">group</code> properties as <code class=\"docutils literal\">root</code>, and then read/write permissions are granted to the root.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory \"#{node[:nginx][:dir]}/shared/certificates\" do\n  owner 'root'\n  group 'root'\n  mode '0755'\n  recursive true\nend</pre> <p><strong>Reload the configuration</strong></p> <p>The following example shows how to reload the configuration of a chef-client using the <strong>remote_file</strong> resource to:</p> <ul class=\"simple\"> <li>using an if statement to check whether the plugins on a node are the latest versions</li> <li>identify the location from which Ohai plugins are stored</li> <li>using the <code class=\"docutils literal\">notifies</code> property and a <strong>ruby_block</strong> resource to trigger an update (if required) and to then reload the client.rb file.</li> </ul> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'node[:ohai][:plugin_path]' do\n  owner 'chef'\n  recursive true\nend\n\nruby_block 'reload_config' do\n  block do\n    Chef::Config.from_file('/etc/chef/client.rb')\n  end\n  action :nothing\nend\n\nif node[:ohai].key?(:plugins)\n  node[:ohai][:plugins].each do |plugin|\n    remote_file node[:ohai][:plugin_path] +\"/#{plugin}\" do\n      source plugin\n      owner 'chef'\n              notifies :run, 'ruby_block[reload_config]', :immediately\n    end\n  end\nend</pre> <p><strong>Manage dotfiles</strong></p> <p>The following example shows using the <strong>directory</strong> and <strong>cookbook_file</strong> resources to manage dotfiles. The dotfiles are defined by a JSON data structure similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">\"files\": {\n  \".zshrc\": {\n    \"mode\": '0755',\n    \"source\": \"dot-zshrc\"\n    },\n  \".bashrc\": {\n    \"mode\": '0755',\n    \"source\": \"dot-bashrc\"\n     },\n  \".bash_profile\": {\n    \"mode\": '0755',\n    \"source\": \"dot-bash_profile\"\n    },\n  }</pre> <p>and then the following resources manage the dotfiles:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if u.has_key?('files')\n  u['files'].each do |filename, file_data|\n\n  directory \"#{home_dir}/#{File.dirname(filename)}\" do\n    recursive true\n    mode '0755'\n  end if file_data['subdir']\n\n  cookbook_file \"#{home_dir}/#{filename}\" do\n    source \"#{u['id']}/#{file_data['source']}\"\n    owner 'u['id']'\n    group 'group_id'\n    mode 'file_data['mode']'\n    ignore_failure true\n    backup 0\n  end\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_directory.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_directory.html</a>\n  </p>\n</div>\n","12-9/resource_easy_install_package":"<h1 id=\"easy-install-package\">easy_install_package</h1> <p>Use the <strong>easy_install_package</strong> resource to manage packages for the Python platform.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>easy_install_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>easy_install_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">easy_install_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>easy_install_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">easy_install_package 'name' do\n  easy_install_binary        String\n  module_name                String\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::EasyInstall\n  python_binary              String\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">easy_install_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">easy_install_binary</code>, <code class=\"docutils literal\">module_name</code>, <code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">python_binary</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:purge</code></dt> <dd>Purge a package. This action typically removes the configuration files as well as the package.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> <dt><code class=\"docutils literal\">:upgrade</code></dt> <dd>Install a package and/or ensure that a package is the latest version.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">easy_install_binary</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The location of the Easy Install binary.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">module_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The name of the module.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">python_binary</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The location of the Python binary.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The path to a package in the local file system.</p> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::EasyInstall</code>, <code class=\"docutils literal\">easy_install_package</code>\n</dt> <dd>The provider for Python.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">easy_install_package 'name of package' do\n  action :install\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_easy_install_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_easy_install_package.html</a>\n  </p>\n</div>\n","12-9/resource_env":"<h1 id=\"env\">env</h1> <p>Use the <strong>env</strong> resource to manage environment keys in Microsoft Windows. After an environment key is set, Microsoft Windows must be restarted before the environment key will be available to the Task Scheduler.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">On UNIX-based systems, the best way to manipulate environment keys is with the <code class=\"docutils literal\">ENV</code> variable in Ruby; however, this approach does not have the same permanent effect as using the <strong>env</strong> resource.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>env</strong> resource block manages environment keys in Microsoft Windows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">env 'ComSpec' do\n  value 'C:\\\\Windows\\\\system32\\\\cmd.exe'\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>env</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">env 'name' do\n  delim                      String\n  key_name                   String # defaults to 'name' if not specified\n  notifies                   # see description\n  provider                   Chef::Provider::Env\n  subscribes                 # see description\n  value                      String\n  action                     Symbol # defaults to :create if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">env</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">delim</code>, <code class=\"docutils literal\">key_name</code>, <code class=\"docutils literal\">provider</code>, and <code class=\"docutils literal\">value</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:create</code></dt> <dd>Default. Create an environment variable. If an environment variable already exists (but does not match), update that environment variable to match.</dd> <dt><code class=\"docutils literal\">:delete</code></dt> <dd>Delete an environment variable.</dd> <dt><code class=\"docutils literal\">:modify</code></dt> <dd>Modify an existing environment variable. This prepends the new value to the existing value, using the delimiter specified by the <code class=\"docutils literal\">delim</code> property.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">delim</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The delimiter that is used to separate multiple values for a single key.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">key_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The name of the key that is to be created, deleted, or modified. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">value</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The value with which <code class=\"docutils literal\">key_name</code> is set.</p> </dd> </dl>  <h3 id=\"guards\">Guards</h3> <p>A guard property can be used to evaluate the state of a node during the execution phase of the chef-client run. Based on the results of this evaluation, a guard property is then used to tell the chef-client if it should continue executing a resource. A guard property accepts either a string value or a Ruby block value:</p> <ul class=\"simple\"> <li>A string is executed as a shell command. If the command returns <code class=\"docutils literal\">0</code>, the guard is applied. If the command returns any other value, then the guard property is not applied. String guards in a <strong>powershell_script</strong> run Windows PowerShell commands and may return <code class=\"docutils literal\">true</code> in addition to <code class=\"docutils literal\">0</code>.</li> <li>A block is executed as Ruby code that must return either <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. If the block returns <code class=\"docutils literal\">true</code>, the guard property is applied. If the block returns <code class=\"docutils literal\">false</code>, the guard property is not applied.</li> </ul> <p>A guard property is useful for ensuring that a resource is idempotent by allowing that resource to test for the desired state as it is being executed, and then if the desired state is present, for the chef-client to do nothing.</p> <p><strong>Attributes</strong></p> <p>The following properties can be used to define a guard that is evaluated during the execution phase of the chef-client run:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">not_if</code></dt> <dd>Prevent a resource from executing when the condition returns <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">only_if</code></dt> <dd>Allow a resource to execute only if the condition returns <code class=\"docutils literal\">true</code>.</dd> </dl> <p><strong>Arguments</strong></p> <p>The following arguments can be used with the <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code> guard properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:user</code></dt> <dd>\n<p class=\"first\">Specify the user that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :user =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:group</code></dt> <dd>\n<p class=\"first\">Specify the group that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :group =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:environment</code></dt> <dd>\n<p class=\"first\">Specify a Hash of environment variables to be set. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :environment =&gt; {\n  'HOME' =&gt; '/home/adam'\n}</pre> </dd> <dt><code class=\"docutils literal\">:cwd</code></dt> <dd>\n<p class=\"first\">Set the current working directory before running a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam passwd', :cwd =&gt; '/etc'</pre> </dd> <dt><code class=\"docutils literal\">:timeout</code></dt> <dd>\n<p class=\"first\">Set a timeout for a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'sleep 10000', :timeout =&gt; 10</pre> </dd> </dl>    <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Set an environment variable</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">env 'ComSpec' do\n  value \"C:\\\\Windows\\\\system32\\\\cmd.exe\"\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_env.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_env.html</a>\n  </p>\n</div>\n","12-9/resource_erlang_call":"<h1 id=\"erl-call\">erl_call</h1> <p>Use the <strong>erl_call</strong> resource to connect to a node located within a distributed Erlang system. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">erl_call</code> command needs to be on the path for this resource to work properly.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>erl_call</strong> resource block connects to a node located within a distributed Erlang system:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">erl_call 'list names' do\n  code 'net_adm:names().'\n  distributed true\n  node_name 'chef@latte'\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>erl_call</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">erl_call 'name' do\n  code                       String\n  cookie                     String\n  distributed                TrueClass, FalseClass\n  name_type                  String\n  node_name                  String\n  notifies                   # see description\n  provider                   Chef::Provider::ErlCall\n  subscribes                 # see description\n  action                     Symbol # defaults to :run if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">erl_call</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">code</code>, <code class=\"docutils literal\">cookie</code>, <code class=\"docutils literal\">distributed</code>, <code class=\"docutils literal\">name_type</code>, <code class=\"docutils literal\">node_name</code>, and <code class=\"docutils literal\">provider</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Prevent the Erlang call from running.</dd> <dt><code class=\"docutils literal\">:run</code></dt> <dd>Default. Run the Erlang call.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">code</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The code to be executed on a node located within a distributed Erlang system. Default value: <code class=\"docutils literal\">q()</code>.</p> </dd> <dt><code class=\"docutils literal\">cookie</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The magic cookie for the node to which a connection is made.</p> </dd> <dt><code class=\"docutils literal\">distributed</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">The node is a distributed Erlang node. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">name_type</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The <code class=\"docutils literal\">node_name</code> property as a short node name (<code class=\"docutils literal\">sname</code>) or a long node name (<code class=\"docutils literal\">name</code>). A node with a long node name cannot communicate with a node with a short node name. Default value: <code class=\"docutils literal\">sname</code>.</p> </dd> <dt><code class=\"docutils literal\">node_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The hostname to which the node is to connect. Default value: <code class=\"docutils literal\">chef@localhost</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> </dl>  <h3 id=\"guards\">Guards</h3> <p>A guard property can be used to evaluate the state of a node during the execution phase of the chef-client run. Based on the results of this evaluation, a guard property is then used to tell the chef-client if it should continue executing a resource. A guard property accepts either a string value or a Ruby block value:</p> <ul class=\"simple\"> <li>A string is executed as a shell command. If the command returns <code class=\"docutils literal\">0</code>, the guard is applied. If the command returns any other value, then the guard property is not applied. String guards in a <strong>powershell_script</strong> run Windows PowerShell commands and may return <code class=\"docutils literal\">true</code> in addition to <code class=\"docutils literal\">0</code>.</li> <li>A block is executed as Ruby code that must return either <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. If the block returns <code class=\"docutils literal\">true</code>, the guard property is applied. If the block returns <code class=\"docutils literal\">false</code>, the guard property is not applied.</li> </ul> <p>A guard property is useful for ensuring that a resource is idempotent by allowing that resource to test for the desired state as it is being executed, and then if the desired state is present, for the chef-client to do nothing.</p> <p><strong>Attributes</strong></p> <p>The following properties can be used to define a guard that is evaluated during the execution phase of the chef-client run:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">not_if</code></dt> <dd>Prevent a resource from executing when the condition returns <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">only_if</code></dt> <dd>Allow a resource to execute only if the condition returns <code class=\"docutils literal\">true</code>.</dd> </dl> <p><strong>Arguments</strong></p> <p>The following arguments can be used with the <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code> guard properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:user</code></dt> <dd>\n<p class=\"first\">Specify the user that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :user =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:group</code></dt> <dd>\n<p class=\"first\">Specify the group that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :group =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:environment</code></dt> <dd>\n<p class=\"first\">Specify a Hash of environment variables to be set. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :environment =&gt; {\n  'HOME' =&gt; '/home/adam'\n}</pre> </dd> <dt><code class=\"docutils literal\">:cwd</code></dt> <dd>\n<p class=\"first\">Set the current working directory before running a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam passwd', :cwd =&gt; '/etc'</pre> </dd> <dt><code class=\"docutils literal\">:timeout</code></dt> <dd>\n<p class=\"first\">Set a timeout for a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'sleep 10000', :timeout =&gt; 10</pre> </dd> </dl>    <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Run a command</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">erl_call 'list names' do\n  code 'net_adm:names().'\n  distributed true\n  node_name 'chef@latte'\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_erlang_call.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_erlang_call.html</a>\n  </p>\n</div>\n","server_12-5/api_chef_server":"<h1 id=\"api-chef-server-title\">Chef Server API</h1> <p>The Chef server API is a REST API that provides access to objects on the Chef server, including nodes, environments, roles, cookbooks (and cookbook versions), and to manage an API client list and the associated RSA public key-pairs.</p>  <h2 id=\"requirements\">Requirements</h2> <p>The Chef server API has the following requirements:</p> <ul class=\"simple\"> <li>Access to a Chef server running version 0.10.x or above</li> <li>The <code class=\"docutils literal\">Accept</code> header must be set to <code class=\"docutils literal\">application/json</code>\n</li> <li>For <code class=\"docutils literal\">PUT</code> and <code class=\"docutils literal\">POST</code> requests, the <code class=\"docutils literal\">Content-Type</code> header must be set to <code class=\"docutils literal\">application/json</code>\n</li> <li>The <code class=\"docutils literal\">X-Chef-Version</code> header must be set to the version of the Chef server API that is being used</li> <li>A request must be signed using <code class=\"docutils literal\">Mixlib::Authentication</code>\n</li> <li>A request must be well-formatted. The easiest way to ensure a well-formatted request is to use the <code class=\"docutils literal\">Chef::REST</code> library</li> </ul>   <h2 id=\"authentication-headers\">Authentication Headers</h2> <p>Authentication to the Chef server occurs when a specific set of HTTP headers are signed using a private key that is associated with the machine from which the request is made. The request is authorized if the Chef server can verify the signature using the public key. Only authorized actions are allowed.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Most authentication requests made to the Chef server are abstracted from the user. Such as when using knife or the Chef server user interface. In some cases, such as when using the <code class=\"docutils literal\">knife exec</code> subcommand, the authentication requests need to be made more explicitly, but still in a way that does not require authentication headers. In a few cases, such as when using arbitrary Ruby code or cURL, it may be necessary to include the full authentication header as part of the request to the Chef server.</p> </div>  <h3 id=\"header-format\">Header Format</h3> <p>All hashing is done using SHA-1 and encoded in Base64. Base64 encoding should have line breaks every 60 characters. Each canonical header should be encoded in the following format:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Method:HTTP_METHOD\nHashed Path:HASHED_PATH\nX-Ops-Content-Hash:HASHED_BODY\nX-Ops-Timestamp:TIME\nX-Ops-UserId:USERID</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">HTTP_METHOD</code> is the method used in the API request (<code class=\"docutils literal\">GET</code>, <code class=\"docutils literal\">POST</code>, and so on)</li> <li>\n<code class=\"docutils literal\">HASHED_PATH</code> is the path of the request: <code class=\"docutils literal\">/organizations/NAME/name_of_endpoint</code>. The <code class=\"docutils literal\">HASHED_PATH</code> must be hashed using SHA-1 and encoded using Base64, must not have repeated forward slashes (<code class=\"docutils literal\">/</code>), must not end in a forward slash (unless the path is <code class=\"docutils literal\">/</code>), and must not include a query string.</li> <li>The private key must be an RSA key in the SSL .pem file format. This signature is then broken into character strings (of not more than 60 characters per line) and placed in the header.</li> </ul> <p>The Chef server decrypts this header and ensures its content matches the content of the non-encrypted headers that were in the request. The timestamp of the message is checked to ensure the request was received within a reasonable amount of time. One approach generating the signed headers is to use <a class=\"reference external\" href=\"https://github.com/chef/mixlib-authentication\">mixlib-authentication</a>, which is a class-based header signing authentication object similar to the one used by the chef-client.</p>   <h3 id=\"required-headers\">Required Headers</h3> <p>The following authentication headers are required:</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Feature</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">Accept</code></td> <td>The format in which response data from the Chef server is provided. This header must be set to <code class=\"docutils literal\">application/json</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">Content-Type</code></td> <td>The format in which data is sent to the Chef server. This header is required for <code class=\"docutils literal\">PUT</code> and <code class=\"docutils literal\">POST</code> requests and must be set to <code class=\"docutils literal\">application/json</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">Host</code></td> <td>The host name (and port number) to which a request is sent. (Port number <code class=\"docutils literal\">80</code> does not need to be specified.) For example: <code class=\"docutils literal\">api.opscode.com</code> (which is the same as <code class=\"docutils literal\">api.opscode.com:80</code>) or <code class=\"docutils literal\">api.opscode.com:443</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">X-Chef-Version</code></td> <td>The version of the chef-client executable from which a request is made. This header ensures that responses are in the correct format. For example: <code class=\"docutils literal\">12.0.2</code> or <code class=\"docutils literal\">11.16.x</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">X-Ops-Authorization-N</code></td> <td>One (or more) 60 character segments that comprise the canonical header. A canonical header is signed with the private key used by the client machine from which the request is sent, and is also encoded using Base64. If more than one segment is required, each should be named sequentially, e.g. <code class=\"docutils literal\">X-Ops-Authorization-1</code>, <code class=\"docutils literal\">X-Ops-Authorization-2</code>, <code class=\"docutils literal\">X-Ops-Authorization-N</code>, where <code class=\"docutils literal\">N</code> represents the integer used by the last header that is part of the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">X-Ops-Content-Hash</code></td> <td>The body of the request. The body should be hashed using SHA-1 and encoded using Base64. All hashing is done using SHA-1 and encoded in Base64. Base64 encoding should have line breaks every 60 characters.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">X-Ops-Server-API-Version</code></td> <td>Use <code class=\"docutils literal\">X-Ops-Server-API-Version</code> to specify the version of the Chef server API. For example: <code class=\"docutils literal\">X-Ops-Server-API-Version: 1</code>. <code class=\"docutils literal\">X-Ops-Server-API-Version: 0</code> is supported for use with the version 12 Chef server, but will be deprecated as part of the next major release.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">X-Ops-Sign</code></td> <td>Set this header to the following value: <code class=\"docutils literal\">version=1.0</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">X-Ops-Timestamp</code></td> <td>The timestamp, in ISO-8601 format and with UTC indicated by a trailing <code class=\"docutils literal\">Z</code> and separated by the character <code class=\"docutils literal\">T</code>. For example: <code class=\"docutils literal\">2013-03-10T14:14:44Z</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">X-Ops-UserId</code></td> <td>The name of the API client whose private key will be used to create the authorization header.</td> </tr> </tbody> </table> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Use <code class=\"docutils literal\">X-Ops-Server-API-Info</code> to identify the version of the Chef server API.</p> </div>   <h3 id=\"example\">Example</h3> <p>The following example shows an authentication request:</p> <pre class=\"highlight-http\" data-language=\"http\">GET /organizations/NAME/nodes HTTP/1.1\n  Accept: application/json\n  Accept-Encoding: gzip;q=1.0,deflate;q=0.6,identity;q=0.3\n  X-Ops-Sign: algorithm=sha1;version=1.0;\n  X-Ops-Userid: user_id\n  X-Ops-Timestamp: 2014-12-12T17:13:28Z\n  X-Ops-Content-Hash: 2jmj7l5rfasfgSw0ygaVb/vlWAghYkK/YBwk=\n  X-Ops-Authorization-1: BE3NnBritishaf3ifuwLSPCCYasdfXaRN5oZb4c6hbW0aefI\n  X-Ops-Authorization-2: sL4j1qtEZzi/2WeF67UuytdsdfgbOc5CjgECQwqrym9gCUON\n  X-Ops-Authorization-3: yf0p7PrLRCNasdfaHhQ2LWSea+kTcu0dkasdfvaTghfCDC57\n  X-Ops-Authorization-4: 155i+ZlthfasfasdffukusbIUGBKUYFjhbvcds3k0i0gqs+V\n  X-Ops-Authorization-5: /sLcR7JjQky7sdafIHNfsBQrISktNPower1236hbFIayFBx3\n  X-Ops-Authorization-6: nodilAGMb166@haC/fttwlWQ2N1LasdqqGomRedtyhSqXA==\n  Host: api.opscode.com:443\n  X-Ops-Server-API-Info: 1\n  X-Chef-Version: 12.0.2\n  User-Agent: Chef Knife/12.0.2 (ruby-2.1.1-p320; ohai-8.0.0; x86_64-darwin12.0.2; +http://chef.io)</pre>   <h3 id=\"knife-api-requests\">Knife API Requests</h3> <p>A knife plugin is a set of one (or more) subcommands that can be added to knife to support additional functionality that is not built-in to the base set of knife subcommands. Many of the knife plugins are built by members of the Chef community and several of them are built and maintained by Chef. A knife plugin is installed to the <code class=\"docutils literal\">~/.chef/plugins/knife/</code> directory, from where it can be run just like any other knife subcommand.</p> <p>A knife plugin can be used to make authenticated API requests to the Chef server using the following methods:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Method</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">rest.delete_rest</code></td> <td>Use to delete an object from the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">rest.get_rest</code></td> <td>Use to get the details of an object on the Chef server.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">rest.post_rest</code></td> <td>Use to add an object to the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">rest.put_rest</code></td> <td>Use to update an object on the Chef server.</td> </tr> </tbody> </table> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">module MyCommands\n  class MyNodeDelete &lt; Chef::Knife\n    #An implementation of knife node delete\n    banner 'knife my node delete [NODE_NAME]'\n\n  def run\n    if name_args.length &lt; 1\n      show_usage\n      ui.fatal(\"You must specify a node name.\")\n      exit 1\n    end\n    nodename = name_args[0]\n       api_endpoint = \"nodes/#{nodename}\"\n       # Again, we could just call rest.delete_rest\n       nodey = rest.get_rest(api_endpoint)\n       ui.confirm(\"Do you really want to delete #{nodey}\")\n       nodey.destroy\n     end\n   end\nend</pre>    <h2 id=\"global-endpoints\">Global Endpoints</h2> <p>A global endpoint may be used to access all of the organizations on the Chef server.</p>  <h3 id=\"license\">/license</h3> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This endpoint is used for information purposes only and to trigger a notification in the Chef management console about the number of licenses owned vs. the number of licenses that should be owned. No other action is taken and the functionality and behavior of the Chef server and any added component does not change.</p> </div> <p>The <code class=\"docutils literal\">/license</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p>  <h4 id=\"get\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to get license information for the Chef server.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/license</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"limit_exceeded\": \"false\"\n  \"node_license\": \"25\"\n  \"node_count\": \"12\"\n  \"upgrade_url\": \"http://www.chef.io/contact/on-premises-simple\"\n}</pre> <p>When <code class=\"docutils literal\">node_count</code> is greater than <code class=\"docutils literal\">node_license</code>, then <code class=\"docutils literal\">limit_exceeded</code> is <code class=\"docutils literal\">true</code> and the Chef management console will display a notification about this status. The way to resolve this is to visit the upgrade URL, add the appropriate number of licenses, and then update the configuration settings appropriately.</p> <p>The chef-server.rb file contains settings that can be used to edit the number of nodes that are under license:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">license['nodes']</code></td> <td>The number of Chef server licenses. Default value: <code class=\"docutils literal\">25</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">license['upgrade_url']</code></td> <td>The URL to visit for more information about how to update the number of nodes licensed for an organization. Default value: <code class=\"docutils literal\">\"http://www.chef.io/contact/on-premises-simple\"</code>.</td> </tr> </tbody> </table> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"organizations\">/organizations</h3> <p>The Chef server may contain multiple organizations.</p> <p>The <code class=\"docutils literal\">/organizations</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code> and <code class=\"docutils literal\">POST</code>.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">This endpoint may only be accessed by the <code class=\"docutils literal\">pivotal</code> user, which is created as part of the installation process for the Chef server. (See the “Query for Users and Orgs” example below for an example of how to access this endpoint with the <code class=\"docutils literal\">pivotal</code> user.)</p> </div>  <h4 id=\"id1\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to get a list of organizations on the Chef server.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/organizations</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"org_name1\"=&gt;\"https://url/for/org_name1\"\n  \"org_name2\"=&gt;\"https://url/for/org_name2\"\n      ...\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> </tbody> </table>   <h4 id=\"post\">POST</h4> <p>The <code class=\"docutils literal\">POST</code> method is used to create an organization on the Chef server.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">POST /organizations</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"chef\",\n  \"full_name\": \"Chef Software, Inc.\",\n}</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">name</code> must begin with a lower-case letter or digit, may only contain lower-case letters, digits, hyphens, and underscores, and must be between 1 and 255 characters. For example: <code class=\"docutils literal\">chef</code>.</li> <li>\n<code class=\"docutils literal\">full_name</code> must begin with a non-white space character and must be between 1 and 1023 characters. For example: <code class=\"docutils literal\">Chef Software, Inc.</code>.</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">An organization isn’t usable until a user that belongs to the <code class=\"docutils literal\">admins</code> group is associated with the organization.</p> </div> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{ \"org_name\"=&gt;\"https://url/for/org_name\" }</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">400</code></td> <td>Bad request. The contents of the request are not formatted correctly.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">409</code></td> <td>Unauthorized. The user who made the request is not authorized to perform the action.</td> </tr> </tbody> </table>    <h3 id=\"organizations-name\">/organizations/NAME</h3> <p>An organization is a single instance of a Chef server, including all of the nodes that are managed by that Chef server and each of the workstations that will run knife and access the Chef server using the Chef server API.</p> <p>The <code class=\"docutils literal\">/organizations/NAME</code> endpoint has the following methods: <code class=\"docutils literal\">DELETE</code>, <code class=\"docutils literal\">GET</code>, and <code class=\"docutils literal\">PUT</code>.</p>  <h4 id=\"delete\">DELETE</h4> <p>The <code class=\"docutils literal\">DELETE</code> method is used to delete an organization.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">DELETE /organizations/NAME</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\"=&gt;\"chef\",\n  \"full_name\"=&gt;\"Chef Software, Inc\",\n  \"guid\"=&gt;\"f980d1asdfda0331235s00ff36862\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> </tbody> </table>   <h4 id=\"id2\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to get the details for the named organization.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\"=&gt;\"chef\",\n  \"full_name\"=&gt;\"Chef Software, Inc\",\n  \"guid\"=&gt;\"f980d1asdfda0331235s00ff36862\n      ...\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> </tbody> </table>   <h4 id=\"put\">PUT</h4> <p>The <code class=\"docutils literal\">PUT</code> method is used to create an organization.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">PUT /organizations/NAME</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"chef\",\n  \"full_name\"=&gt;\"Chef Software, Inc\",\n}</pre> <p><strong>Response</strong></p> <p>The response will return the JSON for the updated organization.</p> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">400</code></td> <td>Bad request. The contents of the request are not formatted correctly.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">410</code></td> <td>Gone. Unable to update private key.</td> </tr> </tbody> </table>    <h3 id=\"users\">/users</h3> <p>A user is an individual account that is created to allow access to the Chef server. For example:</p> <ul class=\"simple\"> <li>A hosted Chef server account</li> <li>The user that operates the workstation from which a Chef server will be managed</li> </ul> <p>The <code class=\"docutils literal\">/users</code> endpoint has the following methods: <code class=\"docutils literal\">`GET</code> and <code class=\"docutils literal\">POST</code>.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">This endpoint may only be accessed by the <code class=\"docutils literal\">pivotal</code> user, which is created as part of the installation process for the Chef server. (See the “Query for Users and Orgs” example below for an example of how to access this endpoint with the <code class=\"docutils literal\">pivotal</code> user.)</p> </div>  <h4 id=\"id3\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to get a list of users on the Chef server.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /users</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"user1\"=&gt;\"https://url/for/user1\"\n  \"user2\"=&gt;\"https://url/for/user2\"\n      ...\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id4\">POST</h4> <p>The <code class=\"docutils literal\">POST</code> method is used to create a user on the Chef server.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">POST /users</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{ \"user_name\"=&gt;\"https://url/for/user_name\" }</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">400</code></td> <td>Bad request. The contents of the request are not formatted correctly.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">409</code></td> <td>Conflict. The object already exists.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"users-name\">/users/NAME</h3> <p>The <code class=\"docutils literal\">/users/USER_NAME</code> endpoint has the following methods: <code class=\"docutils literal\">DELETE</code>, <code class=\"docutils literal\">GET</code>, <code class=\"docutils literal\">POST</code>, and <code class=\"docutils literal\">PUT</code>.</p>  <h4 id=\"id5\">DELETE</h4> <p>The <code class=\"docutils literal\">DELETE</code> method is used to delete a user.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">DELETE /users/USER_NAME</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"Grant McLennan\",\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id6\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return the details for a user.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /users/USER_NAME</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"Robert Forster\",\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> </tbody> </table>   <h4 id=\"id7\">POST</h4> <p>The <code class=\"docutils literal\">POST</code> method is used to create a new user. If a public key is not specified, both public and private keys will be generated and returned. If a public key is specified, only the public key will be returned.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">POST /users/USER_NAME</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"Robert Forster\"\n}</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"Robert Forster\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\n\n                MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCyVPW9YXa5PR0rgEW1updSxygB\\n\n                wmVpDnHurgQ7/gbh+PmY49EZsfrZSbKgSKy+rxdsVoSoU+krYtHvYIwVfr2tk0FP\\n\n                nhAWJaFH654KpuCNG6x6iMLtzGO1Ma/VzHnFqoOeSCKHXDhmHwJAjGDTPAgCJQiI\\n\n                eau6cDNJRiJ7j0/xBwIDAQAB\\n\n                -----END PRIVATE KEY-----\"\n  \"admin\": true\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">201</code></td> <td>Created. The object was created.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">400</code></td> <td>Bad request. The contents of the request are not formatted correctly.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">409</code></td> <td>Conflict. The object already exists.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>   <h4 id=\"id8\">PUT</h4> <p>The <code class=\"docutils literal\">PUT</code> method is used to update a specific user. If values are not specified for the <code class=\"docutils literal\">PUT</code> method, the Chef server will use the existing values rather than assign default values.</p> <p><code class=\"docutils literal\">PUT</code> accepts a boolean: <code class=\"docutils literal\">{ \"private_key\": \"true\" }</code>. If this is specified, a new private key is generated.</p> <p>If values are missing, they will not be overwritten. If <code class=\"docutils literal\">public_key</code> is null, the public key will not be overwritten.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\"><code class=\"docutils literal\">PUT</code> supports renames. If <code class=\"docutils literal\">PUT /users/foo</code> is requested with <code class=\"docutils literal\">{ \"name: \"bar\"\"}</code>, then it will rename <code class=\"docutils literal\">foo</code> to <code class=\"docutils literal\">bar</code> and all of the content previously associated with <code class=\"docutils literal\">foo</code> will be associated with <code class=\"docutils literal\">bar</code>.</p> </div> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">PUT /users/NAME</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">POST /users { \"name\": \"Grant McLennan\" }</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"Grant McLennan\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\n\n                MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCyVPW9YXa5PR0rgEW1updSxygB\\n\n                wmVpDnHurgQ7/gbh+PmY49EZsfrZSbKgSKy+rxdsVoSoU+krYtHvYIwVfr2tk0FP\\n\n                nhAWJaFH654KpuCNG6x6iMLtzGO1Ma/VzHnFqoOeSCKHXDhmHwJAjGDTPAgCJQiI\\n\n                eau6cDNJRiJ7j0/xBwIDAQAB\\n\n                -----END PRIVATE KEY-----\"\n  \"admin\": false\n}</pre> <p>If a new private key was generated, both the private and public keys are returned.</p> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">201</code></td> <td>Created. The object was created. (This response code is only returned when the user is renamed.)</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">409</code></td> <td>Unauthorized. The user who made the request is not authorized to perform the action. (This response code is only returned when a user is renamed, but a user already exists with that name.)</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"users-user-keys\">/users/USER/keys/</h3> <p>The <code class=\"docutils literal\">/users/USER/keys</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code> and <code class=\"docutils literal\">POST</code>.</p>  <h4 id=\"id9\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to retrieve all of the named user’s key identifiers, associated URIs, and expiry states.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /users/USER/keys/</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">[\n  { \"name\" : \"default\",\n             \"uri\" : \"https://chef.example/users/USER/keys/default\",\n             \"expired\" : false },\n  { \"name\" : \"key1\",\n             \"uri\" : \"https://chef.example/users/USER/keys/key1\",\n             \"expired\" : false}\n]</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id10\">POST</h4> <p>The <code class=\"docutils literal\">POST</code> method is used to add a key for the specified user.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">POST /users/USER/keys/</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\" : \"key1\",\n  \"public_key\" : \"-------- BEGIN PUBLIC KEY ----and a valid key here\",\n  \"expiration_date\" : \"infinity\"\n}</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"uri\" : \"https://chef.example/users/user1/keys/key1\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">201</code></td> <td>Created. The object was created.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"users-user-keys-key\">/users/USER/keys/KEY</h3> <p>The <code class=\"docutils literal\">/users/USER/keys/KEY</code> endpoint has the following methods: <code class=\"docutils literal\">DELETE</code>, <code class=\"docutils literal\">GET</code>, and <code class=\"docutils literal\">PUT</code>.</p>  <h4 id=\"id11\">DELETE</h4> <p>The <code class=\"docutils literal\">DELETE</code> method is used to delete the specified key for the specified user.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">DELETE /users/USER/keys/KEY</pre> <p><strong>Response</strong></p> <p>The response returns the information about the deleted key and is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\" : \"default\",\n  \"public_key\" : \"-------- BEGIN PUBLIC KEY --------- ...\",\n  \"expiration_date\" : \"2020-12-31T00:00:00Z\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id12\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return details for a specific key for a specific user.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /users/USER/keys/KEY</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\" : \"default\",\n  \"public_key\" : \"-------- BEGIN PUBLIC KEY --------- ...\",\n  \"expiration_date\" : \"2020-12-31T00:00:00Z\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id13\">PUT</h4> <p>The <code class=\"docutils literal\">PUT</code> method is used to update one or more properties for a specific key for a specific user.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">PUT /users/USER/keys/KEY</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\" : \"new_key_name\",\n  \"public_key\" : \"-------- BEGIN PUBLIC KEY ----and a valid key here\",\n  \"expiration_date\" : \"2020-12-31T00:00:00Z\"\n}</pre> <p><strong>Response</strong></p> <p>The response contains the updated inforamtion for the key, and is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\" : \"new_key_name\",\n  \"public_key\" : \"-------- BEGIN PUBLIC KEY --------- ...\",\n  \"expiration_date\" : \"2020-12-31T00:00:00Z\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">201</code></td> <td>Created. The object was created.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>     <h2 id=\"organization-endpoints\">Organization Endpoints</h2> <p>Each organization-specific authentication request must include <code class=\"docutils literal\">/organizations/NAME</code> as part of the name for the endpoint. For example, the full endpoint for getting a list of roles:</p> <pre class=\"highlight-html\" data-language=\"html\">GET /organizations/NAME/roles</pre> <p>where <code class=\"docutils literal\">ORG_NAME</code> is the name of the organization.</p>  <h3 id=\"association-requests\">/association_requests</h3> <p>Users may be invited to join organizations via the web user interface in the Chef management console or via the <code class=\"docutils literal\">POST</code> endpoint in the Chef server API.</p> <p>The <code class=\"docutils literal\">/association_requests</code> endpoint has the following methods: <code class=\"docutils literal\">DELETE</code>, <code class=\"docutils literal\">GET</code>, and <code class=\"docutils literal\">POST</code>.</p>  <h4 id=\"id14\">DELETE</h4> <p>The <code class=\"docutils literal\">DELETE</code> method is used to delete a pending invitation.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">DELETE /organizations/NAME/association_requests/ID</pre> <p>This method has no request body.</p> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id15\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to get a list of pending invitations.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/association_requests</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id16\">POST</h4> <p>The <code class=\"docutils literal\">POST</code> method is used to create an invitation.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">POST /organizations/NAME/association_requests</pre> <p><strong>Response</strong></p> <p>This method has no response body.</p> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">400</code></td> <td>Bad request. The contents of the request are not formatted correctly.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">409</code></td> <td>Conflict. The object already exists.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"authenticate-user\">/authenticate_user</h3> <p>The <code class=\"docutils literal\">/authenticate_user</code> endpoint has the following methods: <code class=\"docutils literal\">POST</code>.</p>  <h4 id=\"id17\">POST</h4> <p>The <code class=\"docutils literal\">POST</code> method is used to authenticate a user. This endpoint is used by the Chef Identity Service to authenticate users of Chef Supermarket and Chef Analytics to the Chef server.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">POST /organizations/NAME/authenticate_user</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"username\" : \"grantmc\"\n  \"password\" : \"p@ssw0rd\"\n}</pre> <p><strong>Response</strong></p> <p>This method has no response body.</p> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> </tbody> </table>    <h3 id=\"client-client-keys\">/client/CLIENT/keys/</h3> <p>The <code class=\"docutils literal\">/client/CLIENT/keys</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code> and <code class=\"docutils literal\">POST</code>.</p>  <h4 id=\"id18\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to retrieve all of the named client’s key identifiers, associated URIs, and expiry states.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/client/CLIENT/keys</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">[\n  { \"name\" : \"default\",\n             \"uri\" : \"https://chef.example/organizations/example/client/client1/keys/default\",\n             \"expired\" : false },\n  { \"name\" : \"key1\",\n             \"uri\" : \"https://chef.example/organizations/example/client/client1/keys/key1\",\n             \"expired\" : true }\n]</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id19\">POST</h4> <p>The <code class=\"docutils literal\">POST</code> method is used to add a key for the specified client.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">POST /organizations/NAME/client/CLIENT/keys</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\" : \"key1\",\n  \"public_key\" : \"-------- BEGIN PUBLIC KEY ----and a valid key here\",\n  \"expiration_date\" : \"infinity\"\n}</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"uri\" : \"https://chef.example/organizations/example/clients/client1/keys/key1\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">201</code></td> <td>Created. The object was created.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"client-client-keys-key\">/client/CLIENT/keys/KEY</h3> <p>The <code class=\"docutils literal\">/client/CLIENT/keys/KEY</code> endpoint has the following methods: <code class=\"docutils literal\">DELETE</code>, <code class=\"docutils literal\">GET</code>, and <code class=\"docutils literal\">PUT</code>.</p>  <h4 id=\"id20\">DELETE</h4> <p>The <code class=\"docutils literal\">DELETE</code> method is used to delete the specified key for the specified client.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">DELETE /organizations/NAME/client/CLIENT/keys/KEY</pre> <p><strong>Response</strong></p> <p>The response returns the information about the deleted key and is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\" : \"default\",\n  \"public_key\" : \"-------- BEGIN PUBLIC KEY --------- ...\",\n  \"expiration_date\" : \"2020-12-31T00:00:00Z\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id21\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return details for a specific key for a specific client.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/client/CLIENT/keys/KEY</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\" : \"default\",\n  \"public_key\" : \"-------- BEGIN PUBLIC KEY --------- ...\",\n  \"expiration_date\" : \"2020-12-31T00:00:00Z\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id22\">PUT</h4> <p>The <code class=\"docutils literal\">PUT</code> method is used to update one or more properties for a specific key for a specific client.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">PUT /organizations/NAME/client/CLIENT/keys/KEY</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\" : \"new_key_name\",\n  \"public_key\" : \"-------- BEGIN PUBLIC KEY ----and a valid key here\",\n  \"expiration_date\" : \"2020-12-31T00:00:00Z\"\n}</pre> <p><strong>Response</strong></p> <p>The response contains the updated inforamtion for the key, and is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\" : \"new_key_name\",\n  \"public_key\" : \"-------- BEGIN PUBLIC KEY --------- ...\",\n  \"expiration_date\" : \"2020-12-31T00:00:00Z\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">201</code></td> <td>Created. The object was created.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"clients\">/clients</h3> <p>Use the <code class=\"docutils literal\">/clients</code> endpoint to manage an API client list and their associated RSA public key-pairs. The <code class=\"docutils literal\">/clients</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code> and <code class=\"docutils literal\">POST</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In general, the API client list should be managed using knife or the Chef server management console, as opposed to the Chef server API.</p> </div>  <h4 id=\"id23\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return the API client list on the Chef server, including nodes that have been registered with the Chef server, the chef-validator clients, and the chef-server-webui clients for the entire organization.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/clients</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"org1-validator\" : \"https://chef.example/orgaizations/org1/clients/org1-validator\",\n  \"client1\" : \"https://chef.example/orgaizations/org1/clients/client1\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> </tbody> </table>   <h4 id=\"id24\">POST</h4> <p>The <code class=\"docutils literal\">POST</code> method is used to create a new API client.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">POST /organizations/NAME/clients</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"name_of_API_client\",\n  \"admin\": false,\n  \"create_key\": true\n}</pre> <p>where <code class=\"docutils literal\">name_of_API_client</code> is the name of the API client to be created and <code class=\"docutils literal\">admin</code> indicates whether the API client will be run as an admin API client.</p> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"uri\"=&gt;\"https://chef.example/orgaizations/org1/clients/client1\",\n  \"chef_key\" : {\n    \"name\" : \"default\",\n    \"public_key\" : \"-----BEGIN PUBLIC KEY-----\",\n    \"private_key\" : \"-----BEGIN RSA PRIVATE KEY-----\"\n}</pre> <p>Store the private key in a safe place. It will be required later (along with the client name) to access the Chef server when using the Chef server API.</p> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">201</code></td> <td>Created. The object was created.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">400</code></td> <td>Bad request. The contents of the request are not formatted correctly.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">409</code></td> <td>Conflict. The object already exists.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"clients-name\">/clients/NAME</h3> <p>The <code class=\"docutils literal\">/clients/NAME</code> endpoint is used to manage a specific API client. This endpoint has the following methods: <code class=\"docutils literal\">DELETE</code>, <code class=\"docutils literal\">GET</code>, and <code class=\"docutils literal\">PUT</code>.</p>  <h4 id=\"id25\">DELETE</h4> <p>The <code class=\"docutils literal\">DELETE</code> method is used to remove a specific API client.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">DELETE /organizations/NAME/clients/NAME</pre> <p>This method has no request body.</p> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\" : \"client1\",\n  \"validator\" : \"false\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id26\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return a specific API client.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/clients/NAME</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\" : \"user1\",\n  \"validator\" : \"false\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id27\">PUT</h4> <p>The <code class=\"docutils literal\">PUT</code> method is used to update a specific API client. If values are not specified for the <code class=\"docutils literal\">PUT</code> method, the Chef server will use the existing values rather than assign default values.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\"><code class=\"docutils literal\">PUT</code> supports renames. If <code class=\"docutils literal\">PUT /user/foo</code> is requested with <code class=\"docutils literal\">{ \"name: \"bar\"\"}</code>, then it will rename <code class=\"docutils literal\">foo</code> to <code class=\"docutils literal\">bar</code> and all of the content previously associated with <code class=\"docutils literal\">foo</code> will be associated with <code class=\"docutils literal\">bar</code>.</p> </div> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">PUT /organizations/NAME/clients/NAME</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"monkeypants\",\n  \"private_key\": true,\n  \"admin\": false\n}</pre> <p>where <code class=\"docutils literal\">private_key</code> (when <code class=\"docutils literal\">true</code>) will generate a new RSA private key for the API client. If <code class=\"docutils literal\">admin</code> is set to <code class=\"docutils literal\">true</code> the API client will be promoted to an admin API client.</p> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"uri\" : \"https://chef.example/orgaizations/org1/clients/client1\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">201</code></td> <td>Created. The object was created. (This response code is only returned when the client is renamed.)</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">409</code></td> <td>Unauthorized. The user who made the request is not authorized to perform the action. (This response code is only returned when a client is renamed, but a client already exists with that name.)</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"containers\">/containers</h3> <p>The <code class=\"docutils literal\">/containers</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p>  <h4 id=\"id28\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to get a list of containers.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/containers</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"clients\": \"https://url/for/containers/clients\",\n  \"containers\": \"https://url/for/containers/containers\",\n  \"cookbooks\": \"https://url/for/containers/cookbooks\",\n  \"data\": \"https://url/for/containers/data\",\n  \"environments\": \"https://url/for/containers/environments\",\n  \"groups\": \"https://url/for/containers/groups\",\n  \"nodes\": \"https://url/for/containers/nodes\",\n  \"roles\": \"https://url/for/containers/roles\",\n  \"sandboxes\": \"https://url/for/containers/sandboxes\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"cookbooks\">/cookbooks</h3> <p>A cookbook is the fundamental unit of configuration and policy distribution. A cookbook defines a scenario and contains everything that is required to support that scenario:</p> <ul class=\"simple\"> <li>Recipes that specify the resources to use and the order in which they are to be applied</li> <li>Attribute values</li> <li>File distributions</li> <li>Templates</li> <li>Extensions to Chef, such as libraries, definitions, and custom resources</li> </ul> <p>When a cookbook is uploaded, only files that are new or updated will be included. This approach minimizes the amount of storage and time that is required during the modify-upload-test cycle. To keep track of which files have already been uploaded, the chef-client uses a checksum and assigns a checksum to each file. These checksums are used in the cookbook version manifest, alongside the same records that store the file description (name, specificity, and so on), as well as the checksum and the URL from which the file’s contents can be retrieved.</p> <p>The <code class=\"docutils literal\">/cookbooks</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p>  <h4 id=\"id29\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return a hash of all cookbooks and cookbook versions.</p> <p>This method has the following parameters:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Parameter</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">num_versions=n</code></td> <td>The number of cookbook versions to include in the response, where <code class=\"docutils literal\">n</code> is the number of cookbook versions. For example: <code class=\"docutils literal\">num_versions=3</code> returns the three latest versions, in descending order (newest to oldest). Use <code class=\"docutils literal\">num_versions=all</code> to return all cookbook versions. If <code class=\"docutils literal\">num_versions</code> is not specified, a single cookbook version is returned. <code class=\"docutils literal\">0</code> is an invalid input (an empty array for the versions of each cookbook is returned).</td> </tr> </tbody> </table> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/cookbooks</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"apache2\" =&gt; {\n    \"url\" =&gt; \"https://localhost/cookbooks/apache2\",\n    \"versions\" =&gt; [\n      {\"url\" =&gt; \"https://localhost/cookbooks/apache2/5.1.0\",\n       \"version\" =&gt; \"5.1.0\"},\n      {\"url\" =&gt; \"https://localhost/cookbooks/apache2/4.2.0\",\n       \"version\" =&gt; \"4.2.0\"}\n    ]\n  },\n  \"nginx\" =&gt; {\n    \"url\" =&gt; \"https://localhost/cookbooks/nginx\",\n    \"versions\" =&gt; [\n      {\"url\" =&gt; \"https://localhost/cookbooks/nginx/1.0.0\",\n       \"version\" =&gt; \"1.0.0\"},\n      {\"url\" =&gt; \"https://localhost/cookbooks/nginx/0.3.0\",\n       \"version\" =&gt; \"0.3.0\"}\n    ]\n  }\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> </tbody> </table>    <h3 id=\"cookbooks-latest\">/cookbooks/_latest</h3> <p>The <code class=\"docutils literal\">/cookbooks/_latest</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p>  <h4 id=\"id30\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return a list of the most recent cookbook versions.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/cookbooks/_latest</pre> <p><strong>Response</strong></p> <p>For example, if cookbooks <code class=\"docutils literal\">foo</code> and <code class=\"docutils literal\">bar</code> both exist on the Chef server and both with versions <code class=\"docutils literal\">0.1.0</code> and <code class=\"docutils literal\">0.2.0</code>, the response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"foo\": \"https://localhost/cookbooks/foo/0.2.0\",\n  \"bar\": \"https://localhost/cookbooks/bar/0.2.0\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"cookbooks-recipes\">/cookbooks/_recipes</h3> <p>The <code class=\"docutils literal\">/cookbooks/_recipes</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p>  <h4 id=\"id31\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return the names of all recipes in the most recent cookbook versions.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/cookbooks/_recipes</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"cookbooks-name\">/cookbooks/NAME</h3> <p>The <code class=\"docutils literal\">/cookbooks/NAME</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p>  <h4 id=\"id32\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return a hash that contains a key-value pair that corresponds to the specified cookbook, with a URL for the cookbook and for each version of the cookbook.</p> <p>This method has the following parameters:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Parameter</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">num_versions=n</code></td> <td>The number of cookbook versions to include in the response, where <code class=\"docutils literal\">n</code> is the number of cookbook versions. For example: <code class=\"docutils literal\">num_versions=3</code> returns the three latest versions, in descending order (newest to oldest). Use <code class=\"docutils literal\">num_versions=all</code> to return all cookbook versions. If <code class=\"docutils literal\">num_versions</code> is not specified, a single cookbook version is returned. <code class=\"docutils literal\">0</code> is an invalid input (an empty array for the versions of each cookbook is returned).</td> </tr> </tbody> </table> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/cookbooks/NAME</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"apache2\" =&gt; {\n    \"url\" =&gt; \"https://localhost/cookbooks/apache2\",\n    \"versions\" =&gt; [\n      {\"url\" =&gt; \"https://localhost/cookbooks/apache2/5.1.0\",\n       \"version\" =&gt; \"5.1.0\"},\n      {\"url\" =&gt; \"https://localhost/cookbooks/apache2/4.2.0\",\n       \"version\" =&gt; \"4.2.0\"}\n    ]\n  }\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"cookbooks-name-version\">/cookbooks/NAME/version</h3> <p>A cookbook version represents a set of functionality that is different from the cookbook on which it is based. A version may exist for many reasons, such as ensuring the correct use of a third-party component, updating a bug fix, or adding an improvement. A cookbook version is defined using syntax and operators, may be associated with environments, cookbook metadata, and/or run-lists, and may be frozen (to prevent unwanted updates from being made).</p> <p>A cookbook version is maintained just like a cookbook, with regard to source control, uploading it to the Chef server, and how the chef-client applies that cookbook when configuring nodes.</p> <p>The <code class=\"docutils literal\">/cookbooks/NAME/VERSION</code> endpoint has the following methods: <code class=\"docutils literal\">DELETE</code>, <code class=\"docutils literal\">GET</code>, and <code class=\"docutils literal\">PUT</code>.</p>  <h4 id=\"id33\">DELETE</h4> <p>The <code class=\"docutils literal\">DELETE</code> method is used to delete a cookbook version.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">DELETE /organizations/NAME/cookbooks/NAME/VERSION</pre> <p><strong>Response</strong></p> <p>This method has no response body. Unused <code class=\"docutils literal\">checksum</code> values will be garbage collected.</p> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id34\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return a description of a cookbook, including its metadata and links to component files.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/cookbooks/NAME/VERSION</pre> <p>where <code class=\"docutils literal\">VERSION</code> can be <code class=\"docutils literal\">_latest</code> in order to float to head.</p> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"cookbook_name\": \"getting-started\",\n  \"files\": [\n\n  ],\n  \"chef_type\": \"cookbook_version\",\n  \"definitions\": [\n\n  ],\n  \"libraries\": [\n\n  ],\n  \"attributes\": [\n    {\n      \"url\": \"https://domain.com/org_name/(...rest of URL)\",\n      \"path\": \"attributes/default.rb\",\n      \"specificity\": \"default\",\n      \"name\": \"default.rb\",\n      \"checksum\": \"fa0fc4abf3f6787fdsaasadfrc5c35de667c\"\n    }\n  ],\n  \"recipes\": [\n    {\n      \"url\": \"https://domain.com/org_name/(...rest of URL)\",\n      \"path\": \"recipes/default.rb\",\n      \"specificity\": \"default\",\n      \"name\": \"default.rb\",\n      \"checksum\": \"7e79b1ace7728fdsadfsdaf857e60fc69\"\n    }\n  ],\n  \"providers\": [\n\n  ],\n  \"resources\": [\n\n  ],\n  \"templates\": [\n    {\n      \"url\": \"https://domain.com/org_name/(...rest of URL)\",\n      \"path\": \"templates/default/chef-getting-started.txt.erb\",\n      \"specificity\": \"default\",\n      \"name\": \"chef-getting-started.txt.erb\",\n      \"checksum\": \"a29d6f2545sdffds1f140c3a78b1fe\"\n    }\n  ],\n  \"root_files\": [\n    {\n      \"url\": \"https://domain.com/org_name/(...rest of URL)\",\n      \"path\": \".DS_Store\",\n      \"specificity\": \"default\",\n      \"name\": \".DS_Store\",\n      \"checksum\": \"c107b500aafd12asdffdsdf5c2a7d6\"\n    },\n    {\n      \"url\": \"https://domain.com/org_name/(...rest of URL)\",\n      \"path\": \"metadata.json\",\n      \"specificity\": \"default\",\n      \"name\": \"metadata.json\",\n      \"checksum\": \"20f09570e54dasdf0f3ae01e6401c90f\"\n    },\n    {\n      \"url\": \"https://domain.com/org_name/(...rest of URL)\",\n      \"path\": \"metadata.rb\",\n      \"specificity\": \"default\",\n      \"name\": \"metadata.rb\",\n      \"checksum\": \"71027aefasd487fdsa4cb6994b66ed\"\n    },\n    {\n      \"url\": \"https://domain.com/org_name/(...rest of URL)\",\n      \"path\": \"README.rdoc\",\n      \"specificity\": \"default\",\n      \"name\": \"README.rdoc\",\n      \"checksum\": \"8b9275e56fee974easdfasdfbb729\"\n    }\n  ],\n  \"name\": \"getting-started-0.4.0\",\n  \"frozen?\": false,\n  \"version\": \"0.4.0\",\n  \"json_class\": \"Chef::CookbookVersion\",\n  \"metadata\": {\n    \"maintainer\": \"Maintainer\",\n    \"attributes\": { },\n    \"suggestions\": { },\n    \"recipes\": { \"getting-started\": \"\" },\n    \"dependencies\": { },\n    \"platforms\": { },\n    \"groupings\": { },\n    \"recommendations\": { },\n    \"name\": \"getting-started\",\n    \"description\": \"description\",\n    \"version\": \"0.4.0\",\n    \"maintainer_email\": \"sysadmin@opscode.com\",\n    \"long_description\": \"= DESCRIPTION:\\n\\nThis cookbook is used to do some things.\\n\\n\",\n    \"providing\": { \"getting-started\": \"&gt;= 0.0.0\" },\n    \"replacing\": { },\n    \"conflicting\": { },\n    \"license\": \"Apache 2.0\"\n  }\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id35\">PUT</h4> <p>The <code class=\"docutils literal\">PUT</code> method is used to create or update a cookbook version.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">PUT /organizations/NAME/cookbooks/NAME/VERSION</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"definitions\": [\n    {\n      \"name\": \"unicorn_config.rb\",\n      \"checksum\": \"c92b659171552e896074caa58dada0c2\",\n      \"path\": \"definitions/unicorn_config.rb\",\n      \"specificity\": \"default\"\n    }\n  ],\n  \"name\": \"unicorn-0.1.2\",\n  \"attributes\": [],\n  \"files\": [],\n  \"json_class\": \"Chef::CookbookVersion\",\n  \"providers\": [],\n  \"metadata\": {\n    \"dependencies\": {\"ruby\": [], \"rubygems\": []},\n    \"name\": \"unicorn\",\n    \"maintainer_email\": \"ops@opscode.com\",\n    \"attributes\": {},\n    \"license\": \"Apache 2.0\",\n    \"suggestions\": {},\n    \"platforms\": {},\n    \"maintainer\": \"Opscode, Inc\",\n    \"long_description\": \"= LICENSE AND AUTHOR:\\n\\nAuthor:: Adam Jacob...\",\n    \"recommendations\": {},\n    \"version\": \"0.1.2\",\n    \"conflicting\": {},\n    \"recipes\": {\"unicorn\": \"Installs unicorn rubygem\"},\n    \"groupings\": {},\n    \"replacing\": {},\n    \"description\": \"Installs/Configures unicorn\",\n    \"providing\": {}\n  },\n  \"libraries\": [],\n  \"templates\": [\n    {\n      \"name\": \"unicorn.rb.erb\",\n      \"checksum\": \"36a1cc1b225708db96d48026c3f624b2\",\n      \"path\": \"templates/default/unicorn.rb.erb\",\n      \"specificity\": \"default\"\n    }\n  ],\n  \"resources\": [],\n  \"cookbook_name\": \"unicorn\",\n  \"version\": \"0.1.2\",\n  \"recipes\": [\n    {\n      \"name\": \"default.rb\",\n      \"checksum\": \"ba0dadcbca26710a521e0e3160cc5e20\",\n      \"path\": \"recipes/default.rb\",\n      \"specificity\": \"default\"\n    }\n  ],\n  \"root_files\": [\n    {\n      \"name\": \"README.rdoc\",\n      \"checksum\": \"d18c630c8a68ffa4852d13214d0525a6\",\n      \"path\": \"README.rdoc\",\n      \"specificity\": \"default\"\n    },\n    {\n      \"name\": \"metadata.rb\",\n      \"checksum\": \"967087a09f48f234028d3aa27a094882\",\n      \"path\": \"metadata.rb\",\n      \"specificity\": \"default\"\n    },\n    {\n      \"name\": \"metadata.json\",\n      \"checksum\": \"45b27c78955f6a738d2d42d88056c57c\",\n      \"path\": \"metadata.json\",\n      \"specificity\": \"default\"\n    }\n  ],\n  \"chef_type\": \"cookbook_version\"\n}</pre> <p>where the <code class=\"docutils literal\">checksum</code> values must have already been uploaded to the Chef server using the sandbox endpoint. Once a file with a particular checksum has been uploaded by the user, redundant uploads are not necessary. Unused <code class=\"docutils literal\">checksum</code> values will be garbage collected.</p> <p><strong>Response</strong></p> <p>This method has no response body.</p> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"data\">/data</h3> <p>A data bag is a global variable that is stored as JSON data and is accessible from a Chef server. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search.</p> <p>The <code class=\"docutils literal\">/data</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code> and <code class=\"docutils literal\">POST</code>.</p>  <h4 id=\"id36\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return a list of all data bags on the Chef server.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/data</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"users\": \"https://localhost/data/users\",\n  \"applications\": \"https://localhost/data/applications\"\n}</pre> <p>shown as a list of key-value pairs, where (in the example above) <code class=\"docutils literal\">users</code> and <code class=\"docutils literal\">applications</code> are the names of data bags and <code class=\"docutils literal\">https://localhost/data/foo</code> is the path to the data bag.</p> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> </tbody> </table>   <h4 id=\"id37\">POST</h4> <p>The <code class=\"docutils literal\">POST</code> method is used to create a new data bag on the Chef server.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">POST /organizations/NAME/data</pre> <p>with a request body that contains the key-value pair for the data bag and is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"users\"\n}</pre> <p>where (in the example above) <code class=\"docutils literal\">name</code> is the key and “users” is the value.</p> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n   \"chef_type\" =&gt; \"environment\"\n   \"data_bag\" =&gt; \"data123\"\n   \"id\" =&gt; \"12345\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">201</code></td> <td>Created. The object was created.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">400</code></td> <td>Bad request. The contents of the request are not formatted correctly.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">409</code></td> <td>Unauthorized. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"data-name\">/data/NAME</h3> <p>The <code class=\"docutils literal\">/data/NAME</code> endpoint is used to view and update data for a specific data bag. This endpoint has the following methods: <code class=\"docutils literal\">GET</code> and <code class=\"docutils literal\">POST</code>.</p>  <h4 id=\"id38\">DELETE</h4> <p>The <code class=\"docutils literal\">DELETE</code> method is used to delete a data bag.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">DELETE /organizations/NAME/data/NAME</pre> <p>This method has no request body.</p> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"id\": \"adam\",\n  \"real_name\": \"Adam Brent Jacob\"\n}</pre> <p>where the key-value pairs represent the last state of the data bag item.</p> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id39\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return a hash of all entries in the specified data bag.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/data/NAME</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n   \"adam\": \"https://localhost/data/users/adam\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id40\">POST</h4> <p>The <code class=\"docutils literal\">POST</code> method is used to create a new data bag item.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">POST /organizations/NAME/data/NAME</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"id\": \"adam\",\n  \"real_name\": \"Adam Jacob\"\n}</pre> <p>where <code class=\"docutils literal\">id</code> is required.</p> <p><strong>Response</strong></p> <p>This method has no response body.</p> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">400</code></td> <td>Bad request. The contents of the request are not formatted correctly.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">409</code></td> <td>Conflict. The object already exists.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"data-name-item\">/data/NAME/ITEM</h3> <p>A data bag is a container of related data bag items, where each individual data bag item is a JSON file. knife can load a data bag item by specifying the name of the data bag to which the item belongs and then the filename of the data bag item. The only structural requirement of a data bag item is that it must have an <code class=\"docutils literal\">id</code>:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  /* This is a supported comment style */\n  // This style is also supported\n  \"id\": \"ITEM_NAME\",\n  \"key\": \"value\"\n}</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">key</code> and <code class=\"docutils literal\">value</code> are the <code class=\"docutils literal\">key:value</code> pair for each additional attribute within the data bag item</li> <li>\n<code class=\"docutils literal\">/* ... */</code> and <code class=\"docutils literal\">// ...</code> show two ways to add comments to the data bag item</li> </ul> <p>The <code class=\"docutils literal\">/data/NAME/ITEM</code> endpoint allows the key-value pairs within a data bag item to be viewed and managed. This endpoint has the following methods: <code class=\"docutils literal\">DELETE</code>, <code class=\"docutils literal\">GET</code>, and <code class=\"docutils literal\">PUT</code>.</p>  <h4 id=\"id41\">DELETE</h4> <p>The <code class=\"docutils literal\">DELETE</code> method is used to delete a key-value pair in a data bag item.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">DELETE /organizations/NAME/data/NAME/ITEM</pre> <p>This method has no request body.</p> <p>For example, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife raw /data/dogs</pre> <p>which returns a list of data bags on the server:</p> <pre class=\"highlight-xml\" data-language=\"xml\">{\n  \"pomeranian\": \"https://api.opscode.com/organizations/ORG_NAME/data/dogs/pomeranian\",\n  \"shihtzu\": \"https://api.opscode.com/organizations/ORG_NAME/data/dogs/shihtzu\",\n  \"tibetanspaniel\": \"https://api.opscode.com/organizations/ORG_NAME/data/dogs/tibetanspaniel\"\n}</pre> <p>Run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife raw -m DELETE /data/dogs/shihtzu</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"data_bag_item_dogs_shihtzu\",\n  \"json_class\": \"Chef::DataBagItem\",\n  \"chef_type\": \"data_bag_item\",\n  \"data_bag\": \"dogs\",\n  \"raw_data\": {\n    \"description\": \"small annoying dog that doesn't bark all that often\",\n    \"id\": \"shihtzu\"\n  }\n}</pre> <p>Run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife raw /data/dogs</pre> <p>to view an updated list:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"pomeranian\": \"https://api.opscode.com/organizations/ORG_NAME/data/dogs/pomeranian\",\n  \"tibetanspaniel\": \"https://api.opscode.com/organizations/ORG_NAME/data/dogs/tibetanspaniel\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id42\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to view all of the key-value pairs in a data bag item.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/data/NAME/ITEM</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"real_name\": \"Adam Jacob\",\n  \"id\": \"adam\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id43\">PUT</h4> <p>The <code class=\"docutils literal\">PUT</code> method is used to replace the contents of a data bag item with the contents of this request.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">PUT /organizations/NAME/data/NAME/ITEM</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"real_name\": \"Adam Brent Jacob\",\n  \"id\": \"adam\"\n}</pre> <p>where <code class=\"docutils literal\">id</code> is required.</p> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"real_name\": \"Adam Brent Jacob\",\n  \"id\": \"adam\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"environments\">/environments</h3> <p>An environment is a way to map an organization’s real-life workflow to what can be configured and managed when using Chef server. Every organization begins with a single environment called the <code class=\"docutils literal\">_default</code> environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization’s patterns and workflow. For example, creating <code class=\"docutils literal\">production</code>, <code class=\"docutils literal\">staging</code>, <code class=\"docutils literal\">testing</code>, and <code class=\"docutils literal\">development</code> environments. Generally, an environment is also associated with one (or more) cookbook versions.</p> <p>The <code class=\"docutils literal\">/environments</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code> and <code class=\"docutils literal\">POST</code>.</p>  <h4 id=\"id44\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return a data structure that contains a link to each available environment.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/environments</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"_default\": \"https://api.opscode.com/organizations/org_name/environments/_default\",\n  \"webserver\": \"https://api.opscode.com/organizations/org_name/environments/webserver\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> </tbody> </table>   <h4 id=\"id45\">POST</h4> <p>The <code class=\"docutils literal\">POST</code> method is used to create a new environment.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">POST /organizations/NAME/environments</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"dev\",\n  \"default_attributes\": {},\n  \"json_class\": \"Chef::Environment\",\n  \"description\": \"\",\n  \"cookbook_versions\": {},\n  \"chef_type\": \"environment\"\n}</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{ \"uri\": \"https://localhost/environments/dev\" }</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">201</code></td> <td>Created. The object was created.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">400</code></td> <td>Bad request. The contents of the request are not formatted correctly.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">409</code></td> <td>Conflict. The object already exists.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"environments-default\">/environments/_default</h3> <p>The <code class=\"docutils literal\">/environments/_default</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p>  <h4 id=\"id46\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to get information about the <code class=\"docutils literal\">_default</code> environment on the Chef server.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/environments/_default</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"_default\",\n  \"description\": \"The default Chef environment\",\n  \"json_class\": \"Chef::Environment\",\n  \"chef_type\": \"environment\",\n  \"default_attributes\": {\n\n  },\n  \"override_attributes\": {\n\n  },\n  \"cookbook_versions\": {\n\n  }\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"environments-name\">/environments/NAME</h3> <p>The <code class=\"docutils literal\">/environments/NAME</code> endpoint has the following methods: <code class=\"docutils literal\">DELETE</code>, <code class=\"docutils literal\">GET</code>, and <code class=\"docutils literal\">PUT</code>.</p>  <h4 id=\"id47\">DELETE</h4> <p>The <code class=\"docutils literal\">DELETE</code> method is used to delete an environment.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">DELETE /organizations/NAME/environments/NAME</pre> <p><strong>Response</strong></p> <p>The response will return the JSON for the environment that was deleted, similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\":\"backend\",\n  \"description\":\"\",\n  \"cookbook_versions\":{},\n  \"json_class\":\"Chef::Environment\",\n  \"chef_type\":\"environment\",\n  \"default_attributes\":{},\n  \"override_attributes\":{}\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id48\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return the details for an environment as JSON.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/environments/NAME</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"_default\",\n  \"description\": \"The default Chef environment\",\n  \"json_class\": \"Chef::Environment\",\n  \"chef_type\": \"environment\",\n  \"default_attributes\": { }\n  \"override_attributes\": { },\n  \"cookbook_versions\": { },\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id49\">PUT</h4> <p>The <code class=\"docutils literal\">PUT</code> method is used to update the details of an environment on the Chef server.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">PUT /organizations/NAME/environments/NAME</pre> <p>with a request body that contains the updated JSON for the environment and is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"dev\",\n  \"attributes\": {},\n  \"json_class\": \"Chef::Environment\",\n  \"description\": \"The Dev Environment\",\n  \"cookbook_versions\": {},\n  \"chef_type\": \"environment\"\n}</pre> <p><strong>Response</strong></p> <p>The response will return the updated environment.</p> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"environments-name-cookbooks-name\">/environments/NAME/cookbooks/NAME</h3> <p>The <code class=\"docutils literal\">/environments/NAME/cookbooks/NAME</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p>  <h4 id=\"id50\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return a hash of key-value pairs for the requested cookbook.</p> <p>This method has the following parameters:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Parameter</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">num_versions=n</code></td> <td>The number of cookbook versions to include in the response, where <code class=\"docutils literal\">n</code> is the number of cookbook versions. For example: <code class=\"docutils literal\">num_versions=3</code> returns the three latest versions, in descending order (newest to oldest). Use <code class=\"docutils literal\">num_versions=all</code> to return all cookbook versions. If <code class=\"docutils literal\">num_versions</code> is not specified, a single cookbook version is returned. <code class=\"docutils literal\">0</code> is an invalid input (an empty array for the versions of each cookbook is returned).</td> </tr> </tbody> </table> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/environments/NAME/cookbooks/NAME</pre> <p>where the first instance of <code class=\"docutils literal\">NAME</code> is the name of the environment, and the second instance is the name of the cookbook.</p> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"apache2\" =&gt; {\n    \"url\" =&gt; \"https://localhost/cookbooks/apache2\",\n    \"versions\" =&gt; [\n      {\"url\" =&gt; \"https://localhost/cookbooks/apache2/5.1.0\",\n       \"version\" =&gt; \"5.1.0\"},\n      {\"url\" =&gt; \"https://localhost/cookbooks/apache2/4.2.0\",\n       \"version\" =&gt; \"4.2.0\"}\n    ]\n  }\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"environments-name-cookbook-versions\">/environments/NAME/cookbook_versions</h3> <p>The <code class=\"docutils literal\">/environments/NAME/cookbook_versions</code> endpoint has the following methods: <code class=\"docutils literal\">POST</code>.</p>  <h4 id=\"id51\">POST</h4> <p>The <code class=\"docutils literal\">POST</code> method is used to return a hash of the cookbooks and cookbook versions (including all dependencies) that are required by the <code class=\"docutils literal\">run_list</code> array. Version constraints may be specified using the <code class=\"docutils literal\">@</code> symbol after the cookbook name as a delimiter. Version constraints may also be present when the <code class=\"docutils literal\">cookbook_versions</code> attributes is specified for an environment or when dependencies are specified by a cookbook.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">POST /organizations/NAME/environments/NAME/cookbook_versions</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"run_list\": [\n    \"zed@0.0.1\",\n    \"bar\",\n    \"mysql\",\n    \"gem\",\n    \"nginx@0.99.2\",\n    \"cron\",\n    \"foo\"\n  ]\n}</pre> <p>where <code class=\"docutils literal\">@x.x.x</code> represents a constraint for a cookbook version.</p> <p><strong>Response</strong></p> <p>The response will return a list of cookbooks that are required by the <code class=\"docutils literal\">run_list</code> array contained in the request. The cookbooks that are returned are often the latest versions of each cookbook. Depending on any constraints present in the request or on dependencies a cookbook may have for specific cookbook versions, a request may not always return the latest cookbook version for each cookbook.</p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"cookbook_name\": {\n    \"recipes\": [\n      {\n        \"name\": \"default.rb\",\n        \"path\": \"recipes/default.rb\",\n        \"checksum\": \"12345efg78912346abcddefg789\",\n        \"specificity\": \"default\",\n        \"url\": \"https://URL\"\n      },\n      {\n        \"name\": \"recipe_name.rb\",\n        \"path\": \"recipes/recipe_name.rb\",\n        \"checksum\": \"12345efg78912346abcddefg789\",\n        \"specificity\": \"default\",\n        \"url\": \"https://URL\"\n      },\n      {\n        ...\n      }\n    ],\n    \"definitions\": [\n\n    ],\n    \"libraries\": [\n\n    ],\n    \"attributes\": [\n\n    ],\n    \"files\": [\n\n    ],\n    \"templates\": [\n      {\n        \"name\": \"template_name.erb\",\n        \"path\": \"templates/default/template_name.erb\",\n        \"checksum\": \"12345efg78912346abcddefg789\",\n        \"specificity\": \"default\",\n        \"url\": \"https://URL\"\n      },\n      {\n        ...\n      }\n    ],\n    \"resources\": [\n\n    ],\n    \"providers\": [\n\n    ],\n    \"root_files\": [\n      {\n        \"name\": \"metadata.rb\",\n        \"path\": \"metadata.rb\",\n        \"checksum\": \"12345efg78912346abcddefg789\",\n        \"specificity\": \"default\",\n        \"url\": \"https://URL\"\n      }\n    ],\n    \"cookbook_name\": \"cookbook_name-1.0.2\",\n    \"metadata\": {\n      \"name\": \"cookbook_name\",\n      \"description\": \"description\",\n      \"long_description\": \"\",\n      \"maintainer\": \"maintainer\",\n      \"maintainer_email\": \"maintainer@email.com\",\n      \"license\": \"license\",\n      \"platforms\": {\n      },\n      \"dependencies\": {\n        \"cookbook_name\": \"&gt;= 0.0.0\",\n        \"cookbook_name\": \"&gt;= 1.2.3\",\n        ...\n        \"cookbook_name\": \"&gt;= 0.1.0\"\n      },\n      \"recommendations\": {\n      },\n      \"suggestions\": {\n      },\n      \"conflicting\": {\n      },\n      \"providing\": {\n        \"cookbook_name\": \"&gt;= 0.0.0\",\n        \"cookbook_name::recipe_name\": \"&gt;= 0.0.0\",\n        \"cookbook_name::recipe_name\": \"&gt;= 1.2.3\",\n        \"cookbook_name::recipe_name\": \"&gt;= 0.1.0\"\n      },\n      \"replacing\": {\n      },\n      \"attributes\": {\n      },\n      \"groupings\": {\n      },\n      \"recipes\": {\n        \"cookbook_name\": \"description\",\n        \"cookbook_name::recipe_name\": \"\",\n        ...\n        \"cookbook_name::recipe_name\": \"\"\n      },\n      \"version\": \"0.0.0\"\n    },\n    \"version\": \"0.0.0\",\n    \"name\": \"cookbook_name-1.0.2\",\n    \"frozen?\": false,\n    \"chef_type\": \"cookbook_version\",\n    \"json_class\": \"Chef::CookbookVersion\"\n  },\n  \"cookbook_name\": {\n     \"recipes\": [\n      {\n        \"name\": \"default.rb\",\n        \"path\": \"recipes/default.rb\",\n        \"checksum\": \"12345efg78912346abcddefg789\",\n        \"specificity\": \"default\",\n        \"url\": \"https://URL\"\n      },\n    ],\n    \"definitions\": [\n\n    ],\n    \"libraries\": [\n      {\n        \"name\": \"library_file.rb\",\n        \"path\": \"libraries/library_file.rb\",\n        \"checksum\": \"12345efg78912346abcddefg789\",\n        \"specificity\": \"default\",\n        \"url\": \"https://URL\"\n      }\n    ],\n    \"attributes\": [\n      {\n        \"name\": \"default.rb\",\n        \"path\": \"attributes/default.rb\",\n        \"checksum\": \"12345efg78912346abcddefg789\",\n        \"specificity\": \"default\",\n        \"url\": \"https://URL\"\n      }\n    ],\n    \"files\": [\n\n    ],\n    \"templates\": [\n\n    ],\n    \"resources\": [\n\n    ],\n    \"providers\": [\n\n    ],\n    \"root_files\": [\n      {\n        \"name\": \".gitignore\",\n        \"path\": \".gitignore\",\n        \"checksum\": \"12345efg78912346abcddefg789\",\n        \"specificity\": \"default\",\n        \"url\": \"https://URL\"\n      },\n      {\n        \"name\": \".kitchen.yml\",\n        \"path\": \".kitchen.yml\",\n        \"checksum\": \"12345efg78912346abcddefg789\",\n        \"specificity\": \"default\",\n        \"url\": \"https://URL\"\n      },\n      {\n        \"name\": \"CHANGELOG.md\",\n        \"path\": \"CHANGELOG.md\",\n        \"checksum\": \"12345efg78912346abcddefg789\",\n        \"specificity\": \"default\",\n        \"url\": \"https://URL\"\n      },\n      {\n        \"name\": \"CONTRIBUTING\",\n        \"path\": \"CONTRIBUTING\",\n        \"checksum\": \"12345efg78912346abcddefg789\",\n        \"specificity\": \"default\",\n        \"url\": \"https://URL\"\n      },\n      {\n        \"name\": \"LICENSE\",\n        \"path\": \"LICENSE\",\n        \"checksum\": \"12345efg78912346abcddefg789\",\n        \"specificity\": \"default\",\n        \"url\": \"https://URL\"\n      },\n      {\n        \"name\": \"metadata.json\",\n        \"path\": \"metadata.json\",\n        \"checksum\": \"12345efg78912346abcddefg789\",\n        \"specificity\": \"default\",\n        \"url\": \"https://URL\"\n      },\n      {\n        \"name\": \"metadata.rb\",\n        \"path\": \"metadata.rb\",\n        \"checksum\": \"12345efg78912346abcddefg789\",\n        \"specificity\": \"default\",\n        \"url\": \"https://URL\"\n      },\n      {\n        \"name\": \"README.md\",\n        \"path\": \"README.md\",\n        \"checksum\": \"12345efg78912346abcddefg789\",\n        \"specificity\": \"default\",\n        \"url\": \"https://URL\"\n      },\n    ],\n    \"chef_type\": \"cookbook_version\",\n    \"name\": \"cookbook_name-1.0.2\",\n    \"cookbook_name\": \"cookbook_name\",\n    \"version\": \"1.0.2\",\n    \"metadata\": {\n      \"name\": \"cookbook_name\",\n      \"description\": \"description\",\n      \"long_description\": \"\",\n      \"maintainer\": \"maintainer\",\n      \"maintainer_email\": \"maintainer@email.com\",\n      \"license\": \"license\",\n      \"platforms\": {\n      },\n      \"dependencies\": {\n      },\n      \"recommendations\": {\n      },\n      \"suggestions\": {\n      },\n      \"conflicting\": {\n      },\n      \"providing\": {\n      },\n      \"replacing\": {\n      },\n      \"attributes\": {\n      },\n      \"groupings\": {\n      },\n      \"recipes\": {\n      },\n      \"version\": \"1.0.2\"\n    },\n    \"frozen?\": true,\n    \"json_class\": \"Chef::CookbookVersion\"\n  },\n  \"cookbook_name\": {\n   ...\n  }\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">400</code></td> <td>Bad request. The contents of the request are not formatted correctly.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">412</code></td> <td>Not allowed. A set of cookbooks and/or cookbook versions could not be found that met all of the requirements of the run-list. A cookbook in the run-list may not exist. A dependency may be present for a cookbook that does not exist. A constraint on a cookbook made by a run-list, environment, or cookbook version, may not match an available cookbook version.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"environments-name-cookbooks\">/environments/NAME/cookbooks</h3> <p>The <code class=\"docutils literal\">/environments/NAME/cookbooks</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p>  <h4 id=\"id52\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to get a list of cookbooks and cookbook versions that are available to the specified environment.</p> <p>This method has the following parameters:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Parameter</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">num_versions=n</code></td> <td>The number of cookbook versions to include in the response, where <code class=\"docutils literal\">n</code> is the number of cookbook versions. For example: <code class=\"docutils literal\">num_versions=3</code> returns the three latest versions, in descending order (newest to oldest). Use <code class=\"docutils literal\">num_versions=all</code> to return all cookbook versions. If <code class=\"docutils literal\">num_versions</code> is not specified, a single cookbook version is returned. <code class=\"docutils literal\">0</code> is an invalid input (an empty array for the versions of each cookbook is returned).</td> </tr> </tbody> </table> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/environments/NAME/cookbooks</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"apache2\" =&gt; {\n    \"url\" =&gt; \"https://localhost/cookbooks/apache2\",\n    \"versions\" =&gt; [\n      {\"url\" =&gt; \"https://localhost/cookbooks/apache2/5.1.0\",\n       \"version\" =&gt; \"5.1.0\"},\n      {\"url\" =&gt; \"https://localhost/cookbooks/apache2/4.2.0\",\n       \"version\" =&gt; \"4.2.0\"}\n    ]\n  },\n  \"nginx\" =&gt; {\n    \"url\" =&gt; \"https://localhost/cookbooks/nginx\",\n    \"versions\" =&gt; [\n      {\"url\" =&gt; \"https://localhost/cookbooks/nginx/1.0.0\",\n       \"version\" =&gt; \"1.0.0\"},\n      {\"url\" =&gt; \"https://localhost/cookbooks/nginx/0.3.0\",\n       \"version\" =&gt; \"0.3.0\"}\n    ]\n  }\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"environments-name-nodes\">/environments/NAME/nodes</h3> <p>The <code class=\"docutils literal\">/environments/NAME/nodes</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p>  <h4 id=\"id53\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return a list of nodes in a given environment.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/environments/NAME/nodes</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"blah\": \"https://api.opscode.com/org/org_name/nodes/_default\",\n  \"boxer\": \"https://api.opscode.com/org/org_name/nodes/frontend\",\n  \"blarrrrgh\": \"https://api.opscode.com/org/org_name/nodes/backend\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"environments-name-recipes\">/environments/NAME/recipes</h3> <p>The <code class=\"docutils literal\">/environments/NAME/recipes</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p>  <h4 id=\"id54\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return a list of recipes available to a given environment.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/environments/NAME/recipes</pre> <p>where the first instance of <code class=\"docutils literal\">NAME</code> is the name of the environment, and the second instance is the name of the recipe.</p> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">[\n  \"ant\",\n  \"apache2\",\n  \"apache2::mod_auth_openid\",\n  \"apache2::mod_authnz_ldap\",\n  \"apt\",\n  \"aws\",\n  \"capistrano\",\n  \"chef\",\n  \"chef::bootstrap_client\",\n  \"chef-client::config\",\n  \"chef-client\",\n  ...\n]</pre> <p>The list of recipes will be the default recipes for a given cookbook. If an environment has multiple versions of a cookbook that matches its constraints, only the recipes from the latest version of that cookbook will be reported.</p> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"environments-name-roles-name\">/environments/NAME/roles/NAME</h3> <p>The <code class=\"docutils literal\">/environments/NAME/roles/NAME</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p>  <h4 id=\"id55\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return the <code class=\"docutils literal\">run_list</code> attribute of the role (when the name of the environment is <code class=\"docutils literal\">_default</code>) or to return <code class=\"docutils literal\">env_run_lists[environment_name]</code> (for non-default environments).</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The behavior of this endpoint is identical to <code class=\"docutils literal\">GET /roles/NAME/environments/NAME</code>; it is recommended (but not required) that <code class=\"docutils literal\">GET /roles/NAME/environments/NAME</code> be used instead of this endpoint.</p> </div> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/environments/NAME/roles/NAME</pre> <p>where the first instance of <code class=\"docutils literal\">NAME</code> is the name of the environment, and the second instance is the name of the role.</p> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"run_list\": [\n    \"recipe[recipe_name]\",\n    \"role[role_name]\",\n    \"recipe[recipe_name]\",\n    \"role[role_name]\",\n    \"recipe[recipe_name]\",\n    \"role[role_name]\"\n  ]\n}</pre> <p>The chef-client will pick up the <code class=\"docutils literal\">_default</code> run-list if <code class=\"docutils literal\">env_run_list[environment_name]</code> is null or nonexistent.</p> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"groups\">/groups</h3> <p>The <code class=\"docutils literal\">/groups</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code> and <code class=\"docutils literal\">POST</code>.</p>  <h4 id=\"id56\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to get a list of groups on the Chef server for a single organization.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/groups</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"33a5c28a8efe11e195005fsaes25400298d3f\": \"https://url/for/group1\"\n  \"admins\": \"https://url/for/groups/admins\",\n  \"billing-admins\": \"https://url/for/billing-admins\",\n  \"clients\": \"https://url/for/clients\",\n  \"developers\": \"https://url/for/developers\",\n  \"users\": \"https://url/for/groups/users\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"groups-group-name\">/groups/GROUP_NAME</h3> <p>The <code class=\"docutils literal\">/groups/GROUP_NAME</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code> and <code class=\"docutils literal\">POST</code>.</p>  <h4 id=\"id57\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to get a list of users that belong to a group.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/groups/GROUP_NAME</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"actors\": [\n    \"pivotal\",\n    \"grantmc\"\n  ],\n  \"users\": [\n  \"pivotal\",\n    \"grantmc\"\n  ],\n  \"clients\": [\n\n  ],\n  \"groups\": [\n\n  ],\n  \"orgname\": \"inbetweens\",\n  \"name\": \"admins\",\n  \"groupname\": \"admins\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"nodes\">/nodes</h3> <p>A node is any machine—physical, virtual, cloud, network device, etc.—that is under management by Chef.</p> <p>The <code class=\"docutils literal\">/nodes</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code> and <code class=\"docutils literal\">POST</code>.</p>  <h4 id=\"id58\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return a hash of URIs for nodes on the Chef server.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/nodes</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"latte\": \"https://localhost/nodes/latte\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> </tbody> </table>   <h4 id=\"id59\">POST</h4> <p>The <code class=\"docutils literal\">POST</code> method is used to create a new node.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">POST /organizations/NAME/nodes</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"latte\",\n  \"chef_type\": \"node\",\n  \"json_class\": \"Chef::Node\",\n  \"attributes\": {\n    \"hardware_type\": \"laptop\"\n  },\n  \"overrides\": {},\n  \"defaults\": {},\n  \"run_list\": [ \"recipe[unicorn]\" ]\n}</pre> <p>where <code class=\"docutils literal\">name</code> is the name of the node. Other attributes are optional. The order of the <code class=\"docutils literal\">run_list</code> attribute matters.</p> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{ \"uri\": \"https://localhost/nodes/latte\" }</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">201</code></td> <td>Created. The object was created.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">400</code></td> <td>Bad request. The contents of the request are not formatted correctly.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">409</code></td> <td>Conflict. The object already exists.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"nodes-name\">/nodes/NAME</h3> <p>The <code class=\"docutils literal\">/nodes/NAME</code> endpoint has the following methods: <code class=\"docutils literal\">DELETE</code>, <code class=\"docutils literal\">GET</code>, and <code class=\"docutils literal\">PUT</code>.</p>  <h4 id=\"id60\">DELETE</h4> <p>The <code class=\"docutils literal\">DELETE</code> method is used to delete a node.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">DELETE /organizations/NAME/nodes/NAME</pre> <p><strong>Response</strong></p> <p>The response will return the last known state of the node, similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"overrides\": {},\n  \"name\": \"latte\",\n  \"chef_type\": \"node\",\n  \"json_class\": \"Chef::Node\",\n  \"attributes\": {\n    \"hardware_type\": \"laptop\"\n  },\n  \"run_list\": [\n    \"recipe[apache2]\"\n  ],\n  \"defaults\": {}\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id61\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return the details of a node as JSON.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/nodes/NAME</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"node_name\",\n  \"chef_environment\": \"_default\",\n  \"run_list\": [\n    \"recipe[recipe_name]\"\n  ]\n  \"json_class\": \"Chef::Node\",\n  \"chef_type\": \"node\",\n  \"automatic\": { ... },\n  \"normal\": { \"tags\": [ ] },\n  \"default\": { },\n  \"override\": { }\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id62\">PUT</h4> <p>The <code class=\"docutils literal\">PUT</code> method is used to update a node.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">PUT /organizations/NAME/nodes/NAME</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"overrides\": {},\n  \"name\": \"latte\",\n  \"chef_type\": \"node\",\n  \"json_class\": \"Chef::Node\",\n  \"attributes\": {\n    \"hardware_type\": \"laptop\"\n  },\n  \"run_list\": [\n    'recipe[cookbook_name::recipe_name],\n    role[role_name]'\n  ],\n  \"defaults\": {}\n}</pre> <p><strong>Response</strong></p> <p>The response will return the updated node.</p> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"policies\">/policies</h3> <p>The <code class=\"docutils literal\">/policies</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p>  <h4 id=\"id63\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to get a list of policies (including policy revisions) from the Chef server.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/policies</pre> <p><strong>Response</strong></p> <p>The response groups policies by name and revision and is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"aar\": {\n    \"uri\": \"https://chef.example/organizations/org1/policies/aar\",\n    \"revisions\": {\n      \"37f9b658cdd1d9319bac8920581723efcc2014304b5f3827ee0779e10ffbdcc9\": {\n      },\n      \"95040c199302c85c9ccf1bcc6746968b820b1fa25d92477ea2ec5386cd58b9c5\": {\n      },\n      \"d81e80ae9bb9778e8c4b7652d29b11d2111e763a840d0cadb34b46a8b2ca4347\": {\n      }\n    }\n  },\n  \"jenkins\": {\n    \"uri\": \"https://chef.example/organizations/org1/policies/jenkins\",\n    \"revisions\": {\n      \"613f803bdd035d574df7fa6da525b38df45a74ca82b38b79655efed8a189e073\": {\n      },\n      \"6fe753184c8946052d3231bb4212116df28d89a3a5f7ae52832ad408419dd5eb\": {\n      },\n      \"cc1a0801e75df1d1ea5b0d2c71ba7d31c539423b81478f65e6388b9ee415ad87\": {\n      }\n    }\n  }\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> </tbody> </table>    <h3 id=\"policy-groups\">/policy_groups</h3> <p>The <code class=\"docutils literal\">/policy_groups</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p> <p>Each node has a 1:many relationship with policy settings stored on the Chef server. This relationship is based on the policy group to which the node is associated, and then the policy settings assigned to that group:</p> <ul class=\"simple\"> <li>A policy is typically named after the functional role ahost performs, such as “application server”, “chat server”, “load balancer”, and so on</li> <li>A policy group defines a set of hosts in a deployed units, typically mapped to organizational requirements such as “dev”, “test”, “staging”, and “production”, but can also be mapped to more detailed requirements as needed</li> </ul>   <h3 id=\"principals-name\">/principals/NAME</h3> <p>The <code class=\"docutils literal\">/principals/NAME</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p>  <h4 id=\"id64\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to get a list of public keys for clients and users in order to ensure that enough information is present for authorized requests.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/principals/NAME</pre> <p><strong>Response</strong></p> <p>For a user, the response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"normal_user\",\n  \"type\": \"user\",\n  \"public_key\": \"-----BEGIN PUBLIC KEY-----\\n\n                MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCyVPW9YXa5PR0rgEW1updSxygB\\n\n                wmVpDnHurgQ7/gbh+PmY49EZsfrZSbKgSKy+rxdsVoSoU+krYtHvYIwVfr2tk0FP\\n\n                nhAWJaFH654KpuCNG6x6iMLtzGO1Ma/VzHnFqoOeSCKHXDhmHwJAjGDTPAgCJQiI\\n\n                eau6cDNJRiJ7j0/xBwIDAQAB\\n\n                -----END PUBLIC KEY-----\"\n}</pre> <p>and for a client, similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"client_node\",\n  \"type\": \"client\",\n  \"public_key\": \"-----BEGIN PUBLIC KEY-----\\n\n                MIEfGVG0GCSqGSIb3DQEBAQUAA4RRFEDCVgftg67j8dgsdfges0rgEW1updSxygB\\n\n                wmVpDnHuqwe7/gbh+PmY49EZsfrZSbKgSKy+rxKJHREGJ5tgCtHvYIwVfr2tk0FP\\n\n                nhAWJaFH654KpuCNG6x6iMLt5FGH1Ma/VzHnFqoOeSCKHDhmHwJAjGDTPAgCJQiI\\n\n                elk8UFCN45Jj0/xBwIDAQAB\\n\n                -----END PUBLIC KEY-----\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"roles\">/roles</h3> <p>A role is a way to define certain patterns and processes that exist across nodes in an organization as belonging to a single job function. Each role consists of zero (or more) attributes and a run-list. Each node can have zero (or more) roles assigned to it. When a role is run against a node, the configuration details of that node are compared against the attributes of the role, and then the contents of that role’s run-list are applied to the node’s configuration details. When a chef-client runs, it merges its own attributes and run-lists with those contained within each assigned role.</p> <p>The <code class=\"docutils literal\">/roles</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code> and <code class=\"docutils literal\">POST</code>.</p>  <h4 id=\"id65\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to get a list of roles along with their associated URIs.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/roles</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"webserver\": \"https://localhost/roles/webserver\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> </tbody> </table>   <h4 id=\"id66\">POST</h4> <p>The <code class=\"docutils literal\">POST</code> method is used to create a new role on the Chef server.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">POST /organizations/NAME/roles</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"webserver\",\n  \"chef_type\": \"role\",\n  \"json_class\": \"Chef::Role\",\n  \"default_attributes\": {},\n  \"description\": \"A webserver\",\n  \"run_list\": [\n    \"recipe[unicorn]\",\n    \"recipe[apache2]\"\n  ],\n  \"override_attributes\": {}\n}</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{ \"uri\": \"https://localhost/roles/webserver\" }</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">201</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">400</code></td> <td>Bad request. The contents of the request are not formatted correctly.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">409</code></td> <td>Conflict. The object already exists.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"roles-name\">/roles/NAME</h3> <p>The <code class=\"docutils literal\">/roles/NAME</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>, <code class=\"docutils literal\">DELETE</code>, and <code class=\"docutils literal\">PUT</code>.</p>  <h4 id=\"id67\">DELETE</h4> <p>The <code class=\"docutils literal\">DELETE</code> method is used to delete a role on the Chef server.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">DELETE /organizations/NAME/roles/NAME</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"webserver\",\n  \"chef_type\": \"role\",\n  \"json_class\": \"Chef::Role\",\n  \"default_attributes\": {},\n  \"description\": \"A webserver\",\n  \"run_list\": [\n    \"recipe[apache2]\"\n  ],\n  \"override_attributes\": {}\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id68\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return the details for a role as JSON.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/roles/NAME</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"webserver\",\n  \"chef_type\": \"role\",\n  \"json_class\": \"Chef::Role\",\n  \"default_attributes\": {},\n  \"description\": \"A webserver\",\n  \"run_list\": [\n    \"recipe[unicorn]\",\n    \"recipe[apache2]\"\n  ],\n  \"override_attributes\": {}\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id69\">PUT</h4> <p>The <code class=\"docutils literal\">PUT</code> method is used to update a role on the Chef server.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">PUT /organizations/NAME/roles/NAME</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"webserver\",\n  \"chef_type\": \"role\",\n  \"json_class\": \"Chef::Role\",\n  \"default_attributes\": {},\n  \"description\": \"A webserver\",\n  \"run_list\": [\n    \"recipe[apache2]\"\n  ],\n  \"override_attributes\": {}\n}</pre> <p><strong>Response</strong></p> <p>The response will return the JSON for the updated role.</p> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"roles-name-environments\">/roles/NAME/environments</h3> <p>The <code class=\"docutils literal\">/roles/NAME/environments</code> endpoint has the following method: <code class=\"docutils literal\">GET</code>.</p>  <h4 id=\"id70\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method returns a list of the environments that have environment-specific run-lists in the given role as JSON data.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/roles/NAME/environments</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">[\"_default\",\"production\",\"qa\"]</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"roles-name-environments-name\">/roles/NAME/environments/NAME</h3> <p>The <code class=\"docutils literal\">/roles/NAME/environments/NAME</code> endpoint has the following method: <code class=\"docutils literal\">GET</code>.</p>  <h4 id=\"id71\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method returns the environment-specific run-list (<code class=\"docutils literal\">env_run_lists[environment_name]</code>) for a role.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/roles/NAME/environments/NAME</pre> <p>where the first <code class=\"docutils literal\">NAME</code> is the name of the role and the second is the name of the environment.</p> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\"run_list\":[\"recipe[foo]\"]}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>    <h3 id=\"sandboxes\">/sandboxes</h3> <p>A sandbox is used to commit files so they only need to be updated one time, as opposed to every time a cookbook is uploaded. The <code class=\"docutils literal\">/sandboxes</code> endpoint has the following methods: <code class=\"docutils literal\">POST</code>.</p>  <h4 id=\"id72\">POST</h4> <p>The <code class=\"docutils literal\">POST</code> method is used to create a new sandbox. This method accepts a list of checksums as input and returns the URLs against which to <code class=\"docutils literal\">PUT</code> files that need to be uploaded.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">POST /organizations/NAME/sandboxes</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\"checksums\": {\n  \"385ea5490c86570c7de71070bce9384a\":null,\n  \"f6f73175e979bd90af6184ec277f760c\":null,\n  \"2e03dd7e5b2e6c8eab1cf41ac61396d5\":null\n  }\n}</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\"uri\":\n \"https://api.opscode.com/organizations/testorg/sandboxes/eff7b6f8b3ef44c6867216662d5eeb5f\",\n \"checksums\":\n   {\"385ea5490c86570c7de71070bce9384a\":\n     {\"url\":\n      \"https://s3.amazonaws.com/opscode-platform-production-data/organization-(...)\",\n       \"needs_upload\":true},\n       \"f6f73175e979bd90af6184ec277f760c\"=&gt;\n     {\"url\":\n       \"https://s3.amazonaws.com/opscode-platform-production-data/organization-(...)\",\n       \"needs_upload\":true},\n       \"2e03dd7e5b2e6c8eab1cf41ac61396d5\":\n     {\"url\":\n       \"https://s3.amazonaws.com/opscode-platform-production-data/organization-(...)\",\n       \"needs_upload\":true}\n   },\n \"sandbox_id\"=&gt;\"eff7b6f8b3ef44c6867216662d5eeb5f\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful. A hash that maps each checksum to a hash that contains a boolean <code class=\"docutils literal\">needs_upload</code> field and a URL if <code class=\"docutils literal\">needs_upload</code> is set to <code class=\"docutils literal\">true</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">400</code></td> <td>Bad request. The object has already been committed or one (or more) of the objects were not properly uploaded. The payload does not contain a well-formed <code class=\"docutils literal\">checksums</code> parameter that is a hash containing a key for each checksum.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"sandboxes-id\">/sandboxes/ID</h3> <p>Each sandbox has a unique identifier. The <code class=\"docutils literal\">/sandboxes/ID</code> endpoint has the following methods: <code class=\"docutils literal\">PUT</code>.</p>  <h4 id=\"id73\">PUT</h4> <p>The <code class=\"docutils literal\">PUT</code> method is used to commit files that are in a sandbox to their final location so that changes to cookbooks will not require re-uploading the same data.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">PUT /organizations/NAME/sandboxes/ID</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\"is_completed\":true}</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"guid\": guid,\n  \"name\": guid,\n  \"checksums\":\n    {\"385ea5490c86570c7de71070bce9384a\":\n    {\"url\":\n      \"https://s3.amazonaws.com/opscode-platform-production-data/organization-(...)\",\n      \"needs_upload\":true}\n  },\n  \"create_time\": &lt;get an example of time format&gt;,\n  \"is_completed\": true\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">400</code></td> <td>Bad request. The contents of the request are not formatted correctly.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"search\">/search</h3> <p>Search indexes allow queries to be made for any type of data that is indexed by the Chef server, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the <code class=\"docutils literal\">search</code> subcommand in knife, the <code class=\"docutils literal\">search</code> method in the Recipe DSL, the search box in the Chef management console, and by using the <code class=\"docutils literal\">/search</code> or <code class=\"docutils literal\">/search/INDEX</code> endpoints in the Chef server API. The search engine is based on Apache Solr and is run from the Chef server.</p> <p>The <code class=\"docutils literal\">/search</code> endpoint allows nodes, roles, data bags, environments to be searched. This endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">At the end of every chef-client run, the node object is saved to the Chef server. From the Chef server, each node object is then added to the Apache Solr search index. This process is asynchronous. By default, node objects are committed to the search index every 60 seconds or per 1000 node objects, whichever occurs first.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This endpoint does not have any ACL restrictions, which means it may be used by any user or client that is able to make the request to the Chef server.</p> </div>  <h4 id=\"id74\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return a data structure that contains links to each available search index. By default, the <code class=\"docutils literal\">role</code>, <code class=\"docutils literal\">node</code>, <code class=\"docutils literal\">client</code>, and <code class=\"docutils literal\">data bag</code> indexes will always be available (where the <code class=\"docutils literal\">data bag</code> index is the name of the data bag on the Chef server). Search indexes may lag behind the most current data at any given time. If a situation occurs where data needs to be written and then immediately searched, an artificial delay (of at least 10 seconds) is recommended.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/search</pre> <p>This method has no request body.</p> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"node\": \"https://localhost/search/node\",\n  \"role\": \"https://localhost/search/role\",\n  \"client\": \"https://localhost/search/client\",\n  \"users\": \"https://localhost/search/users\"\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> </tbody> </table>    <h3 id=\"search-index\">/search/INDEX</h3> <p>Use the <code class=\"docutils literal\">/search/INDEX</code> endpoint to access the search indexes on the Chef server. The <code class=\"docutils literal\">/search/INDEX</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code> and <code class=\"docutils literal\">POST</code>.</p> <p>A search query is comprised of two parts: the key and the search pattern. A search query has the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">key:search_pattern</pre> <p>where <code class=\"docutils literal\">key</code> is a field name that is found in the JSON description of an indexable object on the Chef server (a role, node, client, environment, or data bag) and <code class=\"docutils literal\">search_pattern</code> defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both <code class=\"docutils literal\">key</code> and <code class=\"docutils literal\">search_pattern</code> are case-sensitive; <code class=\"docutils literal\">key</code> has limited support for multiple character wildcard matching using an asterisk (“*”) (and as long as it is not the first character).</p>  <h4 id=\"id75\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return all of the data that matches the query in the <code class=\"docutils literal\">GET</code> request.</p> <p>This method has the following parameters:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Parameter</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">q</code></td> <td>The search query used to identify a list of items on a Chef server. This option uses the same syntax as the <code class=\"docutils literal\">search</code> subcommand.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">rows</code></td> <td>The number of rows to be returned.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">sort</code></td> <td>The order in which search results are to be sorted.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">start</code></td> <td>The row at which return results begin.</td> </tr> </tbody> </table> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/search/INDEX</pre> <p><strong>Response</strong></p> <p>The response contains the total number of rows that match the request and is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n \"total\": 1,\n \"start\": 0,\n \"rows\": [\n    {\n     \"overrides\": {\"hardware_type\": \"laptop\"},\n     \"name\": \"latte\",\n     \"chef_type\": \"node\",\n     \"json_class\": \"Chef::Node\",\n     \"attributes\": {\"hardware_type\": \"laptop\"},\n     \"run_list\": [\"recipe[unicorn]\"],\n     \"defaults\": {}\n    }\n  ]\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>   <h4 id=\"id76\">POST</h4> <p>A partial search query allows a search query to be made against specific attribute keys that are stored on the Chef server. A partial search query can search the same set of objects on the Chef server as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the chef-client processes the search results.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">To use the <code class=\"docutils literal\">partial_search</code> method in a recipe, that recipe must contain a dependency on the <code class=\"docutils literal\">partial_search</code> cookbook.</p> </div> <p>To create a partial search query, use the <code class=\"docutils literal\">partial_search</code> method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">partial_search(:node, 'role:web',\n  :keys =&gt; { 'name' =&gt; [ 'name' ],\n             'ip'   =&gt; [ 'ipaddress' ],\n             'kernel_version' =&gt; [ 'kernel', 'version' ]\n           }\n).each do |result|\n  puts result['name']\n  puts result['ip']\n  puts result['kernel_version']\nend</pre> <p>In the previous example, two attributes will be extracted (on the Chef server) from any node that matches the search query. The result will be a simple hash with keys <code class=\"docutils literal\">name</code>, <code class=\"docutils literal\">ip</code>, and <code class=\"docutils literal\">kernel_version</code>.</p> <p>The <code class=\"docutils literal\">POST</code> method is used to return partial search results. For example, if a node has the following:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  'x' =&gt; 'foo',\n  'kernel' =&gt; { 'a' =&gt; 1, 'foo' =&gt; 'bar', 'version' =&gt; [ 1, 2, 3 ] }\n}</pre> <p>a partial search query can be used to return something like:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{ 'kernel_version' =&gt; [ 1, 2, 3 ] }</pre> <p>This method has the following parameters:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Parameter</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">q</code></td> <td>The search query used to identify a list of items on a Chef server. This option uses the same syntax as the <code class=\"docutils literal\">search</code> subcommand.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">rows</code></td> <td>The number of rows to be returned.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">sort</code></td> <td>The order in which search results are to be sorted.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">start</code></td> <td>The row at which return results begin.</td> </tr> </tbody> </table> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/search</pre> <p>with a request body similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  'name' =&gt; [ 'name' ],\n  'ip'   =&gt; [ 'ipaddress' ],\n  'kernel_version' =&gt; [ 'kernel', 'version' ]\n}</pre> <p><strong>Response</strong></p> <p>The response is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"latte\",\n  \"ip\": \"123.4.5.6789\",\n  \"kernel_version\": {\"linux\": \"1.2.3\"},\n}</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">413</code></td> <td>Request entity too large. A request may not be larger than 1000000 bytes.</td> </tr> </tbody> </table>    <h3 id=\"status\">_status</h3> <p>The <code class=\"docutils literal\">/_status</code> endpoint can be used to check the status of communications between the front and back end servers. This endpoint is located at <code class=\"docutils literal\">/_status</code> on the front end servers.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">api.get(\"https://chef_server.front_end.url/_status\")</pre> <p>This method has no request body.</p> <p><strong>Response</strong></p> <p>The response will return something like the following:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"status\" =&gt; \"pong\",\n  \"upstreams\" =&gt;\n    {\n      \"service_name\" =&gt; \"pong\",\n      \"service_name\" =&gt; \"pong\",\n      ...\n    }\n }</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>All communications are OK.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">500</code></td> <td>\n<p class=\"first\">One (or more) services are down. For example:</p> <pre class=\"last highlight-javascript\" data-language=\"javascript\">{\n  \"status\":\"fail\",\n  \"upstreams\":\n    {\n      \"service_name\":\"fail\",\n      \"service_name\":\"pong\",\n      ...\n    }\n}</pre> </td> </tr> </tbody> </table>   <h3 id=\"universe\">/universe</h3> <p>Use the <code class=\"docutils literal\">/universe</code> endpoint to retrieve the known collection of cookbooks, and then use it with Berkshelf and Chef Supermarket.</p> <p>The <code class=\"docutils literal\">/universe</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p>  <h4 id=\"id77\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to retrieve the universe data.</p> <p>This method has no parameters.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /universe</pre> <p><strong>Response</strong></p> <p>The response will return an embedded hash, with the name of each cookbook as a top-level key. Each cookbook will list each version, along with its location information and dependencies:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"ffmpeg\": {\n    \"0.1.0\": {\n      \"location_path\": \"http://supermarket.chef.io/api/v1/cookbooks/ffmpeg/0.1.0/download\"\n      \"location_type\": \"supermarket\",\n      \"dependencies\": {\n        \"git\": \"&gt;= 0.0.0\",\n        \"build-essential\": \"&gt;= 0.0.0\",\n        \"libvpx\": \"~&gt; 0.1.1\",\n        \"x264\": \"~&gt; 0.1.1\"\n      },\n    },\n    \"0.1.1\": {\n      \"location_path\": \"http://supermarket.chef.io/api/v1/cookbooks/ffmpeg/0.1.1/download\"\n      \"location_type\": \"supermarket\",\n      \"dependencies\": {\n        \"git\": \"&gt;= 0.0.0\",\n        \"build-essential\": \"&gt;= 0.0.0\",\n        \"libvpx\": \"~&gt; 0.1.1\",\n        \"x264\": \"~&gt; 0.1.1\"\n      },\n    },\n   \"pssh\": {\n    \"0.1.0\": {\n      \"location_path\": \"http://supermarket.chef.io/api/v1/cookbooks/pssh.1.0/download\"\n      \"location_type\": \"supermarket\",\n      \"dependencies\": {},\n    }\n  }\n}</pre> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful. One (or more) cookbooks and associated cookbook version information was returned.</td> </tr> </tbody> </table>    <h3 id=\"updated-since\">/updated_since</h3> <p>The <code class=\"docutils literal\">/updated_since</code> endpoint ensures that replica instances of the Chef server are able to synchronize with the primary Chef server. The <code class=\"docutils literal\">/organizations/NAME/updated_since</code> endpoint has the following methods: <code class=\"docutils literal\">GET</code>.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">This update is available after Chef replication is installed on the Chef server.</p> </div>  <h4 id=\"id78\">GET</h4> <p>The <code class=\"docutils literal\">GET</code> method is used to return the details of an organization as JSON.</p> <p><strong>Request</strong></p> <pre class=\"highlight-xml\" data-language=\"xml\">GET /organizations/NAME/objects_since?seq=NUM</pre> <p>where <code class=\"docutils literal\">NUM</code> is the largest integer previously returned as an identifier.</p> <p><strong>Response</strong></p> <p>The response will return an array of paths for objects that have been created, updated, or deleted since <code class=\"docutils literal\">NUM</code>, similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">[\n  {\n    \"action\": \"create\",\n    \"id\": 1,\n    \"path\": \"/roles/foo\"\n  },\n  {\n    \"action\": \"create\",\n    \"id\": 2,\n    \"path\": \"/roles/foo2\"\n  },\n  {\n    \"action\": \"create\",\n    \"id\": 3,\n    \"path\": \"/roles/foo3\"\n  },\n  {\n    \"action\": \"update\",\n    \"id\": 4,\n    \"path\": \"/roles/foo3\"\n  }\n]</pre> <p><strong>Response Codes</strong></p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Response Code</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">200</code></td> <td>OK. The request was successful.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">401</code></td> <td>Unauthorized. The user or client who made the request could not be authenticated. Verify the user/client name, and that the correct key was used to sign the request.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">403</code></td> <td>Forbidden. The user who made the request is not authorized to perform the action.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">404</code></td> <td>Not found. The requested object does not exist.</td> </tr> </tbody> </table>     <h2 id=\"examples\">Examples</h2> <p>The following sections show examples of using the Chef server API.</p>  <h3 id=\"query-for-users-and-orgs\">Query for Users and Orgs</h3> <p>The following example shows how to query the Chef server API for a listing of organizations and users. The <code class=\"docutils literal\">/organizations</code> and <code class=\"docutils literal\">/users</code> endpoints may only be accessed by the <code class=\"docutils literal\">pivotal</code> user, which is a user account that is created by Chef during the installation of the Chef server.</p> <p>Run the following from a <code class=\"docutils literal\">.chef</code> directory that contains a <code class=\"docutils literal\">pivotal.rb</code> file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'chef'\nrequire 'chef/rest'\n\nChef::Config.from_file(\".chef/pivotal.rb\")\nrest = Chef::REST.new(Chef::Config[:chef_server_url])\norgs = rest.get_rest(\"/organizations\")\n\nputs \"\\n=== Listing of organizations\"\norgs.each do |org|\n  puts org\nend\n\nputs \"\\n=== Listing of Users\"\nusers = rest.get_rest(\"/users\")\nusers.each do |user|\n  puts user\nend</pre> <p>An examle of a <code class=\"docutils literal\">.chef/pivotal.rb</code> file is shown below:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">current_dir = File.dirname(__FILE__)\nnode_name \"pivotal\"\nchef_server_url \"https://192.168.1.2:443\"\nchef_server_root \"https://192.168.1.2:443\"\nclient_key \"#{current_dir}/pivotal.pem\"</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">pivotal.pem</code> file must exist in the specified location and the IP addresses must be correct for the Chef server.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/api_chef_server.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/api_chef_server.html</a>\n  </p>\n</div>\n","12-9/resource_dsc_resource":"<h1 id=\"dsc-resource\">dsc_resource</h1> <p>Windows PowerShell is a task-based command-line shell and scripting language developed by Microsoft. Windows PowerShell uses a document-oriented approach for managing Microsoft Windows-based machines, similar to the approach that is used for managing UNIX- and Linux-based machines. Windows PowerShell is <a class=\"reference external\" href=\"http://technet.microsoft.com/en-us/library/bb978526.aspx\">a tool-agnostic platform</a> that supports using Chef for configuration management.</p> <p>Desired State Configuration (DSC) is a feature of Windows PowerShell that provides <a class=\"reference external\" href=\"http://technet.microsoft.com/en-us/library/dn249912.aspx\">a set of language extensions, cmdlets, and resources</a> that can be used to declaratively configure software. DSC is similar to Chef, in that both tools are idempotent, take similar approaches to the concept of resources, describe the configuration of a system, and then take the steps required to do that configuration. The most important difference between Chef and DSC is that Chef uses Ruby and DSC is exposed as configuration data from within Windows PowerShell.</p> <p>The <strong>dsc_resource</strong> resource allows any DSC resource to be used in a Chef recipe, as well as any custom resources that have been added to your Windows PowerShell environment. Microsoft <a class=\"reference external\" href=\"http://github.com/powershell/DscResources\">frequently adds new resources</a> to the DSC resource collection.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>Using the <strong>dsc_resource</strong> has the following requirements:</p> <ul class=\"last\"> <li>\n<p class=\"first\">Windows Management Framework (WMF) 5.0 February Preview (or higher), which includes Windows PowerShell 5.0.10018.0 (or higher).</p> </li> <li>\n<p class=\"first\">The <code class=\"docutils literal\">RefreshMode</code> configuration setting in the Local Configuration Manager must be set to <code class=\"docutils literal\">Disabled</code>.</p> <p><strong>NOTE:</strong> Starting with the chef-client 12.6 release, this requirement applies only for versions of Windows PowerShell earlier than 5.0.10586.0. The latest version of Windows Management Framework (WMF) 5 has relaxed the limitation that prevented the chef-client from running in non-disabled refresh mode.</p> </li> <li>\n<p class=\"first\">The <strong>dsc_script</strong> resource may not be used in the same run-list with the <strong>dsc_resource</strong>. This is because the <strong>dsc_script</strong> resource requires that <code class=\"docutils literal\">RefreshMode</code> in the Local Configuration Manager be set to <code class=\"docutils literal\">Push</code>, whereas the <strong>dsc_resource</strong> resource requires it to be set to <code class=\"docutils literal\">Disabled</code>.</p> <p><strong>NOTE:</strong> Starting with the chef-client 12.6 release, this requirement applies only for versions of Windows PowerShell earlier than 5.0.10586.0. The latest version of Windows Management Framework (WMF) 5 has relaxed the limitation that prevented the chef-client from running in non-disabled refresh mode, which allows the Local Configuration Manager to be set to <code class=\"docutils literal\">Push</code>.</p> </li> </ul> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>dsc_resource</strong> resource block allows DSC resourcs to be used in a Chef recipe. For example, the DSC <code class=\"docutils literal\">Archive</code> resource:</p> <pre class=\"highlight-powershell\" data-language=\"powershell\">Archive ExampleArchive {\n  Ensure = \"Present\"\n  Path = \"C:\\Users\\Public\\Documents\\example.zip\"\n  Destination = \"C:\\Users\\Public\\Documents\\ExtractionPath\"\n}</pre> <p>and then the same <strong>dsc_resource</strong> with Chef:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">dsc_resource 'example' do\n   resource :archive\n   property :ensure, 'Present'\n   property :path, \"C:\\Users\\Public\\Documents\\example.zip\"\n   property :destination, \"C:\\Users\\Public\\Documents\\ExtractionPath\"\n end</pre> <p>The full syntax for all of the properties that are available to the <strong>dsc_resource</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">dsc_resource 'name' do\n  module_name                String\n  notifies                   # see description\n  property                   Symbol\n  resource                   String\n  subscribes                 # see description\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">dsc_resource</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">property</code> is zero (or more) properties in the DSC resource, where each property is entered on a separate line, <code class=\"docutils literal\">:dsc_property_name</code> is the case-insensitive name of that property, and <code class=\"docutils literal\">\"property_value\"</code> is a Ruby value to be applied by the chef-client</li> <li>\n<code class=\"docutils literal\">module_name</code>, <code class=\"docutils literal\">property</code>, and <code class=\"docutils literal\">resource</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Default. .. include:: ../../includes_resources_common/includes_resources_common_actions_nothing.rst</dd> <dt><code class=\"docutils literal\">:reboot_action</code></dt> <dd>Use to request an immediate reboot or to queue a reboot using the <code class=\"docutils literal\">:reboot_now</code> (immediate reboot) or <code class=\"docutils literal\">:request_reboot</code> (queued reboot) actions built into the <strong>reboot</strong> resource.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">module_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The name of the module from which a DSC resource originates. If this property is not specified, it will be inferred.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">property</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol</p> <p>A property from a Desired State Configuration (DSC) resource. Use this property multiple times, one for each property in the Desired State Configuration (DSC) resource. The format for this property must follow <code class=\"docutils literal\">property :dsc_property_name, \"property_value\"</code> for each DSC property added to the resource block.</p> <p>The <code class=\"docutils literal\">:dsc_property_name</code> must be a symbol.</p> <p>Use the following Ruby types to define <code class=\"docutils literal\">property_value</code>:</p> <table class=\"docutils\"> <colgroup> <col width=\"50%\"> <col width=\"50%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Ruby</th> <th class=\"head\">Windows PowerShell</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">Array</code></td> <td><code class=\"docutils literal\">Object[]</code></td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">Chef::Util::Powershell:PSCredential</code></td> <td><code class=\"docutils literal\">PSCredential</code></td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">FalseClass</code></td> <td><code class=\"docutils literal\">bool($false)</code></td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">Fixnum</code></td> <td><code class=\"docutils literal\">Integer</code></td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">Float</code></td> <td><code class=\"docutils literal\">Double</code></td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">Hash</code></td> <td><code class=\"docutils literal\">Hashtable</code></td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">TrueClass</code></td> <td><code class=\"docutils literal\">bool($true)</code></td> </tr> </tbody> </table> <p class=\"last\">These are converted into the corresponding Windows PowerShell type during the chef-client run.</p> </dd> <dt><code class=\"docutils literal\">resource</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p>The name of the DSC resource. This value is case-insensitive and must be a symbol that matches the name of the DSC resource.</p> <p>For built-in DSC resources, use the following values:</p> <table class=\"docutils\"> <colgroup> <col width=\"50%\"> <col width=\"50%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Value</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:archive</code></td> <td>Use to to <a class=\"reference external\" href=\"https://msdn.microsoft.com/en-us/powershell/dsc/archiveresource\">unpack archive (.zip) files</a>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:environment</code></td> <td>Use to to <a class=\"reference external\" href=\"https://msdn.microsoft.com/en-us/powershell/dsc/environmentresource\">manage system environment variables</a>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:file</code></td> <td>Use to to <a class=\"reference external\" href=\"https://msdn.microsoft.com/en-us/powershell/dsc/fileresource\">manage files and directories</a>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:group</code></td> <td>Use to to <a class=\"reference external\" href=\"https://msdn.microsoft.com/en-us/powershell/dsc/groupresource\">manage local groups</a>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:log</code></td> <td>Use to to <a class=\"reference external\" href=\"https://msdn.microsoft.com/en-us/powershell/dsc/logresource\">log configuration messages</a>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:package</code></td> <td>Use to to <a class=\"reference external\" href=\"https://msdn.microsoft.com/en-us/powershell/dsc/packageresource\">install and manage packages</a>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:registry</code></td> <td>Use to to <a class=\"reference external\" href=\"https://msdn.microsoft.com/en-us/powershell/dsc/registryresource\">manage registry keys and registry key values</a>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:script</code></td> <td>Use to to <a class=\"reference external\" href=\"https://msdn.microsoft.com/en-us/powershell/dsc/registryresource\">run Powershell script blocks</a>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:service</code></td> <td>Use to to <a class=\"reference external\" href=\"https://msdn.microsoft.com/en-us/powershell/dsc/registryresource\">manage services</a>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:user</code></td> <td>Use to to <a class=\"reference external\" href=\"https://msdn.microsoft.com/en-us/powershell/dsc/userresource\">manage local user accounts</a>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:windowsfeature</code></td> <td>Use to to <a class=\"reference external\" href=\"https://msdn.microsoft.com/en-us/powershell/dsc/windowsfeatureresource\">add or remove Windows features and roles</a>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:windowsoptionalfeature</code></td> <td>Use to configure Microsoft Windows optional features.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:windowsprocess</code></td> <td>Use to to <a class=\"reference external\" href=\"https://msdn.microsoft.com/en-us/powershell/dsc/windowsprocessresource\">configure Windows processes</a>.</td> </tr> </tbody> </table> <p class=\"last\">Any DSC resource may be used in a Chef recipe. For example, the DSC Resource Kit contains resources for <a class=\"reference external\" href=\"http://www.powershellgallery.com/packages/xActiveDirectory/2.8.0.0\">configuring Active Directory components</a>, such as <code class=\"docutils literal\">xADDomain</code>, <code class=\"docutils literal\">xADDomainController</code>, and <code class=\"docutils literal\">xADUser</code>. Assuming that these resources are available to the chef-client, the corresponding values for the <code class=\"docutils literal\">resource</code> attribute would be: <code class=\"docutils literal\">:xADDomain</code>, <code class=\"docutils literal\">:xADDomainController</code>, and <code class=\"docutils literal\">xADUser</code>.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Open a Zip file</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">dsc_resource 'example' do\n   resource :archive\n   property :ensure, 'Present'\n   property :path, 'C:\\Users\\Public\\Documents\\example.zip'\n   property :destination, 'C:\\Users\\Public\\Documents\\ExtractionPath'\n end</pre> <p><strong>Manage users and groups</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">dsc_resource 'demogroupremove' do\n  resource :group\n  property :groupname, 'demo1'\n  property :ensure, 'present'\nend\n\ndsc_resource 'useradd' do\n  resource :user\n  property :username, 'Foobar1'\n  property :fullname, 'Foobar1'\n  property :password, ps_credential('P@assword!')\n  property :ensure, 'present'\nend\n\ndsc_resource 'AddFoobar1ToUsers' do\n  resource :Group\n  property :GroupName, 'demo1'\n  property :MembersToInclude, ['Foobar1']\nend</pre> <p><strong>Create a test message queue</strong></p> <p>The following example creates a file on a node (based on one that is located in a cookbook), unpacks the <code class=\"docutils literal\">MessageQueue.zip</code> Windows PowerShell module, and then uses the <strong>dsc_resource</strong> to ensure that Message Queuing (MSMQ) sub-features are installed, a test queue is created, and that permissions are set on the test queue:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cookbook_file 'cMessageQueue.zip' do\n  path \"#{Chef::Config[:file_cache_path]}\\\\MessageQueue.zip\"\n  action :create_if_missing\nend\n\nwindows_zipfile \"#{ENV['PROGRAMW6432']}\\\\WindowsPowerShell\\\\Modules\" do\n  source \"#{Chef::Config[:file_cache_path]}\\\\MessageQueue.zip\"\n  action :unzip\nend\n\ndsc_resource 'install-sub-features' do\n  resource :windowsfeature\n  property :ensure, 'Present'\n  property :name, 'msmq'\n  property :IncludeAllSubFeature, true\nend\n\ndsc_resource 'create-test-queue' do\n  resource :cPrivateMsmqQueue\n  property :ensure, 'Present'\n  property :name, 'Test_Queue'\nend\n\ndsc_resource 'set-permissions' do\n  resource :cPrivateMsmqQueuePermissions\n  property :ensure, 'Present'\n  property :name, 'Test_Queue_Permissions'\n  property :QueueNames, 'Test_Queue'\n  property :ReadUsers, node['msmq']['read_user']\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_dsc_resource.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_dsc_resource.html</a>\n  </p>\n</div>\n","12-9/resource_dsc_script":"<h1 id=\"dsc-script\">dsc_script</h1> <p>Windows PowerShell is a task-based command-line shell and scripting language developed by Microsoft. Windows PowerShell uses a document-oriented approach for managing Microsoft Windows-based machines, similar to the approach that is used for managing UNIX- and Linux-based machines. Windows PowerShell is <a class=\"reference external\" href=\"http://technet.microsoft.com/en-us/library/bb978526.aspx\">a tool-agnostic platform</a> that supports using Chef for configuration management.</p> <p>Desired State Configuration (DSC) is a feature of Windows PowerShell that provides <a class=\"reference external\" href=\"http://technet.microsoft.com/en-us/library/dn249912.aspx\">a set of language extensions, cmdlets, and resources</a> that can be used to declaratively configure software. DSC is similar to Chef, in that both tools are idempotent, take similar approaches to the concept of resources, describe the configuration of a system, and then take the steps required to do that configuration. The most important difference between Chef and DSC is that Chef uses Ruby and DSC is exposed as configuration data from within Windows PowerShell.</p> <p>Many DSC resources are comparable to built-in Chef resources. For example, both DSC and Chef have <strong>file</strong>, <strong>package</strong>, and <strong>service</strong> resources. The <strong>dsc_script</strong> resource is most useful for those DSC resources that do not have a direct comparison to a resource in Chef, such as the <code class=\"docutils literal\">Archive</code> resource, a custom DSC resource, an existing DSC script that performs an important task, and so on. Use the <strong>dsc_script</strong> resource to embed the code that defines a DSC configuration directly within a Chef recipe.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Windows PowerShell 4.0 is required for using the <strong>dsc_script</strong> resource with Chef.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The WinRM service must be enabled. (Use <code class=\"docutils literal\">winrm quickconfig</code> to enable the service.)</p> </div> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The <strong>dsc_script</strong> resource may not be used in the same run-list with the <strong>dsc_resource</strong>. This is because the <strong>dsc_script</strong> resource requires that <code class=\"docutils literal\">RefreshMode</code> in the Local Configuration Manager be set to <code class=\"docutils literal\">Push</code>, whereas the <strong>dsc_resource</strong> resource requires it to be set to <code class=\"docutils literal\">Disabled</code>.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>dsc_script</strong> resource block embeds the code that defines a DSC configuration directly within a Chef recipe:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">dsc_script 'get-dsc-resource-kit' do\n  code &lt;&lt;-EOH\n    Archive reskit\n    {\n      ensure = 'Present'\n      path = \"#{Chef::Config[:file_cache_path]}\\\\DSCResourceKit620082014.zip\"\n      destination = \"#{ENV['PROGRAMW6432']}\\\\WindowsPowerShell\\\\Modules\"\n    }\n  EOH\nend</pre> <p>where the <strong>remote_file</strong> resource is first used to download the <code class=\"docutils literal\">DSCResourceKit620082014.zip</code> file.</p> <p>The full syntax for all of the properties that are available to the <strong>dsc_script</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">dsc_script 'name' do\n  code                       String\n  command                    String\n  configuration_data         String\n  configuration_data_script  String\n  configuration_name         String\n  cwd                        String\n  environment                Hash\n  flags                      Hash\n  imports                    Array\n  notifies                   # see description\n  subscribes                 # see description\n  timeout                    Integer\n  action                     Symbol # defaults to :run if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">dsc_script</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">code</code>, <code class=\"docutils literal\">command</code>, <code class=\"docutils literal\">configuration_data</code>, <code class=\"docutils literal\">configuration_data_script</code>, <code class=\"docutils literal\">configuration_name</code>, <code class=\"docutils literal\">cwd</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">flags</code>, <code class=\"docutils literal\">imports</code>, and <code class=\"docutils literal\">timeout</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:run</code></dt> <dd>Default. Use to run the DSC configuration defined as defined in this resource.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">code</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The code for the DSC configuration script. This property may not be used in the same recipe as the <code class=\"docutils literal\">command</code> property.</p> </dd> <dt><code class=\"docutils literal\">command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The path to a valid Windows PowerShell data file that contains the DSC configuration script. This data file must be capable of running independently of Chef and must generate a valid DSC configuration. This property may not be used in the same recipe as the <code class=\"docutils literal\">code</code> property.</p> </dd> <dt><code class=\"docutils literal\">configuration_data</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The configuration data for the DSC script. The configuration data must be <a class=\"reference external\" href=\"http://msdn.microsoft.com/en-us/library/dd878337(v=vs.85).aspx\">a valid Windows Powershell data file</a>. This property may not be used in the same recipe as the <code class=\"docutils literal\">configuration_data_script</code> property.</p> </dd> <dt><code class=\"docutils literal\">configuration_data_script</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The path to a valid Windows PowerShell data file that also contains a node called <code class=\"docutils literal\">localhost</code>. This property may not be used in the same recipe as the <code class=\"docutils literal\">configuration_data</code> property.</p> </dd> <dt><code class=\"docutils literal\">configuration_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The name of a valid Windows PowerShell cmdlet. The name may only contain letter (a-z, A-Z), number (0-9), and underscore (_) characters and should start with a letter. The name may not be null or empty. This property may not be used in the same recipe as the <code class=\"docutils literal\">code</code> property.</p> </dd> <dt><code class=\"docutils literal\">cwd</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The current working directory.</p> </dd> <dt><code class=\"docutils literal\">environment</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A Hash of environment variables in the form of <code class=\"docutils literal\">{\"ENV_VARIABLE\" =&gt; \"VALUE\"}</code>. (These variables must exist for a command to be run successfully.)</p> </dd> <dt><code class=\"docutils literal\">flags</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">Pass parameters to the DSC script that is specified by the <code class=\"docutils literal\">command</code> property. Parameters are defined as key-value pairs, where the value of each key is the parameter to pass. This property may not be used in the same recipe as the <code class=\"docutils literal\">code</code> property. For example: <code class=\"docutils literal\">flags ({ :EditorChoice =&gt; 'emacs', :EditorFlags =&gt; '--maximized' })</code>. Default value: <code class=\"docutils literal\">nil</code>.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">imports</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">This property <strong>MUST</strong> be used with the <code class=\"docutils literal\">code</code> attribute.</p> </div> <p>Use to import DSC resources from a module.</p> <p>To import all resources from a module, specify only the module name:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">imports 'module_name'</pre> <p>To import specific resources, specify the module name, and then specify the name for each resource in that module to import:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">imports 'module_name', 'resource_name_a', 'resource_name_b', ...</pre> <p>For example, to import all resources from a module named <code class=\"docutils literal\">cRDPEnabled</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">imports 'cRDPEnabled'</pre> <p>To import only the <code class=\"docutils literal\">PSHOrg_cRDPEnabled</code> resource:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">imports 'cRDPEnabled', 'PSHOrg_cRDPEnabled'</pre> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer</p> <p class=\"last\">The amount of time (in seconds) a command is to wait before timing out.</p> </dd> </dl>  <h3 id=\"ps-credential-helper\">ps_credential Helper</h3> <p>Use the <code class=\"docutils literal\">ps_credential</code> helper to embed a <code class=\"docutils literal\">PSCredential</code> object—<a class=\"reference external\" href=\"https://technet.microsoft.com/en-us/magazine/ff714574.aspx\">a set of security credentials, such as a user name or password</a>—within a script, which allows that script to be run using security credentials.</p> <p>For example, assuming the <code class=\"docutils literal\">CertificateID</code> is configured in the local configuration manager, the <code class=\"docutils literal\">SeaPower1@3</code> object is created and embedded within the <code class=\"docutils literal\">seapower-user</code> script:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">dsc_script 'seapower-user' do\n   code &lt;&lt;-EOH\n     User AlbertAtom\n     {\n       UserName = 'AlbertAtom'\n       Password = #{ps_credential('SeaPower1@3')}\n     }\n  EOH\n  configuration_data &lt;&lt;-EOH\n    @{\n      AllNodes = @(\n        @{\n          NodeName = \"localhost\";\n          CertificateID = 'A8D1234559F349F7EF19104678908F701D4167'\n        }\n      )\n    }\n  EOH\nend</pre>    <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Specify DSC code directly</strong></p> <p>DSC data can be specified directly in a recipe:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">dsc_script 'emacs' do\n  code &lt;&lt;-EOH\n  Environment 'texteditor'\n  {\n    Name = 'EDITOR'\n    Value = 'c:\\\\emacs\\\\bin\\\\emacs.exe'\n  }\n  EOH\nend</pre> <p><strong>Specify DSC code using a Windows Powershell data file</strong></p> <p>Use the <code class=\"docutils literal\">command</code> property to specify the path to a Windows PowerShell data file. For example, the following Windows PowerShell script defines the <code class=\"docutils literal\">DefaultEditor</code>:</p> <pre class=\"highlight-powershell\" data-language=\"powershell\">Configuration 'DefaultEditor'\n{\n  Environment 'texteditor'\n    {\n      Name = 'EDITOR'\n      Value = 'c:\\emacs\\bin\\emacs.exe'\n    }\n}</pre> <p>Use the following recipe to specify the location of that data file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">dsc_script 'DefaultEditor' do\n  command 'c:\\dsc_scripts\\emacs.ps1'\nend</pre> <p><strong>Pass parameters to DSC configurations</strong></p> <p>If a DSC script contains configuration data that takes parameters, those parameters may be passed using the <code class=\"docutils literal\">flags</code> property. For example, the following Windows PowerShell script takes parameters for the <code class=\"docutils literal\">EditorChoice</code> and <code class=\"docutils literal\">EditorFlags</code> settings:</p> <pre class=\"highlight-powershell\" data-language=\"powershell\">$choices = @{'emacs' = 'c:\\emacs\\bin\\emacs';'vi' = 'c:\\vim\\vim.exe';'powershell' = 'powershell_ise.exe'}\n  Configuration 'DefaultEditor'\n    {\n      [CmdletBinding()]\n      param\n        (\n          $EditorChoice,\n          $EditorFlags = ''\n        )\n      Environment 'TextEditor'\n      {\n        Name = 'EDITOR'\n        Value =  \"$($choices[$EditorChoice]) $EditorFlags\"\n      }\n    }</pre> <p>Use the following recipe to set those parameters:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">dsc_script 'DefaultEditor' do\n  flags ({ :EditorChoice =&gt; 'emacs', :EditorFlags =&gt; '--maximized' })\n  command 'c:\\dsc_scripts\\editors.ps1'\nend</pre> <p><strong>Use custom configuration data</strong></p> <p>Configuration data in DSC scripts may be customized from a recipe. For example, scripts are typically customized to set the behavior for Windows PowerShell credential data types. Configuration data may be specified in one of three ways:</p> <ul class=\"simple\"> <li>By using the <code class=\"docutils literal\">configuration_data</code> attribute</li> <li>By using the <code class=\"docutils literal\">configuration_data_script</code> attribute</li> <li>By specifying the path to a valid Windows PowerShell data file</li> </ul> <p>The following example shows how to specify custom configuration data using the <code class=\"docutils literal\">configuration_data</code> property:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">dsc_script 'BackupUser' do\n  configuration_data &lt;&lt;-EOH\n    @{\n     AllNodes = @(\n          @{\n          NodeName = \"localhost\";\n          PSDscAllowPlainTextPassword = $true\n          })\n     }\n  EOH\n  code &lt;&lt;-EOH\n    $user = 'backup'\n    $password = ConvertTo-SecureString -String \"YourPass$(random)\" -AsPlainText -Force\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $user, $password\n\n   User $user\n     {\n       UserName = $user\n       Password = $cred\n       Description = 'Backup operator'\n       Ensure = \"Present\"\n       Disabled = $false\n       PasswordNeverExpires = $true\n       PasswordChangeRequired = $false\n     }\n   EOH\n\n  configuration_data &lt;&lt;-EOH\n    @{\n      AllNodes = @(\n          @{\n          NodeName = \"localhost\";\n          PSDscAllowPlainTextPassword = $true\n          })\n      }\n    EOH\nend</pre> <p>The following example shows how to specify custom configuration data using the <code class=\"docutils literal\">configuration_name</code> property. For example, the following Windows PowerShell script defines the <code class=\"docutils literal\">vi</code> configuration:</p> <pre class=\"highlight-powershell\" data-language=\"powershell\">Configuration 'emacs'\n  {\n    Environment 'TextEditor'\n    {\n      Name = 'EDITOR'\n      Value = 'c:\\emacs\\bin\\emacs.exe'\n    }\n}\n\nConfiguration 'vi'\n{\n    Environment 'TextEditor'\n    {\n      Name = 'EDITOR'\n      Value = 'c:\\vim\\bin\\vim.exe'\n    }\n}</pre> <p>Use the following recipe to specify that configuration:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">dsc_script 'EDITOR' do\n  configuration_name 'vi'\n  command 'C:\\dsc_scripts\\editors.ps1'\nend</pre> <p><strong>Using DSC with other Chef resources</strong></p> <p>The <strong>dsc_script</strong> resource can be used with other resources. The following example shows how to download a file using the <strong>remote_file</strong> resource, and then uncompress it using the DSC <code class=\"docutils literal\">Archive</code> resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">remote_file \"#{Chef::Config[:file_cache_path]}\\\\DSCResourceKit620082014.zip\" do\n  source 'http://gallery.technet.microsoft.com/DSC-Resource-Kit-All-c449312d/file/124481/1/DSC%20Resource%20Kit%20Wave%206%2008282014.zip'\nend\n\ndsc_script 'get-dsc-resource-kit' do\n  code &lt;&lt;-EOH\n    Archive reskit\n    {\n      ensure = 'Present'\n      path = \"#{Chef::Config[:file_cache_path]}\\\\DSCResourceKit620082014.zip\"\n      destination = \"#{ENV['PROGRAMW6432']}\\\\WindowsPowerShell\\\\Modules\"\n    }\n  EOH\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_dsc_script.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_dsc_script.html</a>\n  </p>\n</div>\n","12-9/resource_deploy":"<h1 id=\"deploy\">deploy</h1> <p>Use the <strong>deploy</strong> resource to manage and control deployments. This is a popular resource, but is also complex, having the most properties, multiple providers, the added complexity of callbacks, plus four attributes that support layout modifications from within a recipe.</p> <p>The <strong>deploy</strong> resource is modeled after Capistrano, a utility and framework for executing commands in parallel on multiple remote machines via SSH. The <strong>deploy</strong> resource is designed to behave in a way that is similar to the <code class=\"docutils literal\">deploy</code> and <code class=\"docutils literal\">deploy:migration</code> tasks in Capistrano.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>deploy</strong> resource block manages and controls deployments:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deploy 'private_repo' do\n  repo 'git@github.com:acctname/private-repo.git'\n  user 'ubuntu'\n  deploy_to '/tmp/private_code'\n  ssh_wrapper '/tmp/private_code/wrap-ssh4git.sh'\n  action :deploy\nend</pre> <p>For example, an application that is deployed to a folder named <code class=\"docutils literal\">\"/path/to/application\"</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deploy_revision '/path/to/application' do\n  repo 'ssh://name-of-git-repo/repos/repo.git'\n  migrate false\n  purge_before_symlink %w{one two folder/three}\n  create_dirs_before_symlink []\n  symlinks{\n    \"one\"   =&gt; \"one\",\n    \"two\"   =&gt; \"two\",\n    \"three\" =&gt; \"folder/three\"\n  }\n  before_restart do\n    # some Ruby code\n  end\n  notifies :restart, 'service[foo]'\n  notifies :restart, 'service[bar]'\nend</pre> <p>For the example shown above:</p> <ul class=\"simple\"> <li>Because an action is not explicitly specified, the chef-client will use the default action: <code class=\"docutils literal\">:deploy</code>\n</li> <li>The <code class=\"docutils literal\">purge_before_symlink</code> application layout is an array of paths that will be cleared before the <code class=\"docutils literal\">symlinks</code> property is run</li> <li>The <code class=\"docutils literal\">create_dirs_before_symlink</code> property is empty, which is different from the default</li> <li>The <code class=\"docutils literal\">symlinks</code> property is creating three symbolic links</li> <li>The <code class=\"docutils literal\">before_restart</code> callback is being used to add custom actions that will occur at the end of the deployment process, but before any services have been notified</li> <li>At the end, the recipe is using the <code class=\"docutils literal\">notifies</code> property—a common attribute available to all resources—to alert two services (named “foo” and “bar”) that they should restart.</li> </ul> <p>The full syntax for all of the properties that are available to the <strong>deploy</strong> when used with git is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deploy 'name' do\n  after_restart              Proc, String\n  before_migrate             Proc, String\n  before_restart             Proc, String\n  before_symlink             Proc, String\n  branch                     String\n  create_dirs_before_symlink Array\n  deploy_to                  String # defaults to 'name' if not specified\n  depth                      Integer\n  enable_submodules          TrueClass, FalseClass\n  environment                Hash\n  git_ssh_wrapper            String\n  group                      String\n  keep_releases              Integer\n  migrate                    TrueClass, FalseClass\n  migration_command          String\n  notifies                   # see description\n  provider                   Chef::Provider::Deploy\n  purge_before_symlink       Array\n  remote                     String\n  repo                       String\n  repository                 String\n  repository_cache           String\n  restart_command            Proc, String\n  revision                   String\n  rollback_on_error          TrueClass, FalseClass\n  scm_provider               Chef::Provider::Git\n  shallow_clone              TrueClass, FalseClass\n  ssh_wrapper                String\n  symlinks                   Hash\n  symlink_before_migrate     Hash\n  timeout                    Integer\n  user                       String\n  action                     Symbol # defaults to :create if not specified\nend</pre> <p>and the full syntax for all of the properties that are available to the <strong>deploy</strong> when used with Subversion is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deploy 'name' do\n  after_restart              Proc, String\n  before_migrate             Proc, String\n  before_restart             Proc, String\n  before_symlink             Proc, String\n  branch                     String\n  create_dirs_before_symlink Array\n  deploy_to                  String # defaults to 'name' if not specified\n  environment                Hash\n  group                      String\n  keep_releases              Integer\n  migrate                    TrueClass, FalseClass\n  migration_command          String\n  notifies                   # see description\n  provider                   Chef::Provider::Deploy\n  purge_before_symlink       Array\n  repo                       String\n  repository                 String\n  repository_cache           String\n  restart_command            Proc, String\n  revision                   String\n  rollback_on_error          TrueClass, FalseClass\n  scm_provider               Chef::Provider::Subversion\n  subscribes                 # see description\n  svn_arguments              String\n  svn_password               String\n  svn_username               String\n  symlinks                   Hash\n  symlink_before_migrate     Hash\n  timeout                    Integer\n  user                       String\n  action                     Symbol # defaults to :create if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">deploy</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">after_restart</code>, <code class=\"docutils literal\">before_migrate</code>, <code class=\"docutils literal\">before_restart</code>, <code class=\"docutils literal\">before_symlink</code>, <code class=\"docutils literal\">branch</code>, <code class=\"docutils literal\">create_dirs_before_symlink</code>, <code class=\"docutils literal\">deploy_to</code>, <code class=\"docutils literal\">depth</code>, <code class=\"docutils literal\">enable_submodules</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">git_ssh_wrapper</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">keep_releases</code>, <code class=\"docutils literal\">migrate</code>, <code class=\"docutils literal\">migration_command</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">purge_before_symlink</code>, <code class=\"docutils literal\">remote</code>, <code class=\"docutils literal\">repo</code>, <code class=\"docutils literal\">repository</code>, <code class=\"docutils literal\">repository_cache</code>, <code class=\"docutils literal\">restart_command</code>, <code class=\"docutils literal\">revision</code>, <code class=\"docutils literal\">rollback_on_error</code>, <code class=\"docutils literal\">scm_provider</code>, <code class=\"docutils literal\">shallow_clone</code>, <code class=\"docutils literal\">ssh_wrapper</code>, <code class=\"docutils literal\">svn_arguments</code>, <code class=\"docutils literal\">svn_password</code>, <code class=\"docutils literal\">svn_username</code>, <code class=\"docutils literal\">symlinks</code>, <code class=\"docutils literal\">symlink_before_migrate</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">user</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"deploy-strategies\">Deploy Strategies</h2> <p>In the <code class=\"docutils literal\">deploy</code> directory, a sub-directory named <code class=\"docutils literal\">shared</code> must be created. This sub-directory is where configuration and temporary files will be kept. A typical Ruby on Rails application will have <code class=\"docutils literal\">config</code>, <code class=\"docutils literal\">log</code>, <code class=\"docutils literal\">pids</code>, and <code class=\"docutils literal\">system</code> directories within the <code class=\"docutils literal\">shared</code> directory to keep the files stored there independent of the code in the source repository.</p> <p>In addition to the <code class=\"docutils literal\">shared</code> sub-directory, the deploy process will create sub-directories named <code class=\"docutils literal\">releases</code> and <code class=\"docutils literal\">current</code> (also in the <code class=\"docutils literal\">deploy</code> directory). The <code class=\"docutils literal\">release</code> directory holds (up to) five most recently deployed versions of an application. The <code class=\"docutils literal\">current</code> directory holds the currently-released version.</p> <p>For example:</p> <pre class=\"highlight-python\" data-language=\"python\">deploy_directory/\n  current/\n  releases/\n  shared/\n    config/\n    log/\n    pids/\n    system/</pre>  <h3 id=\"deploy-phases\">Deploy Phases</h3> <p>A deployment happens in four phases:</p> <ol class=\"arabic simple\"> <li>\n<strong>Checkout</strong>—the chef-client uses the <strong>scm</strong> resource to get the specified application revision, placing a clone or checkout in the sub-directory of the <code class=\"docutils literal\">deploy</code> directory named <code class=\"docutils literal\">cached-copy</code>. A copy of the application is then placed in a sub-directory under <code class=\"docutils literal\">releases</code>.</li> <li>\n<strong>Migrate</strong>—If a migration is to be run, the chef-client symlinks the database configuration file into the checkout (<code class=\"docutils literal\">config/database.yml</code> by default) and runs the migration command. For a Ruby on Rails application, the <code class=\"docutils literal\">migration_command</code> is usually set to <code class=\"docutils literal\">rake db:migrate</code>.</li> <li>\n<strong>Symlink</strong>—Directories for shared and temporary files are removed from the checkout (<code class=\"docutils literal\">log</code>, <code class=\"docutils literal\">tmp/pids</code>, and <code class=\"docutils literal\">public/system</code> by default). After this step, any needed directories (<code class=\"docutils literal\">tmp</code>, <code class=\"docutils literal\">public</code>, and <code class=\"docutils literal\">config</code> by default) are created if they don’t already exist. This step is completed by symlinking shared directories into the current <code class=\"docutils literal\">release</code>, <code class=\"docutils literal\">public/system</code>, <code class=\"docutils literal\">tmp/pids</code>, and <code class=\"docutils literal\">log</code> directories, and then symlinking the <code class=\"docutils literal\">release</code> directory to <code class=\"docutils literal\">current</code>.</li> <li>\n<strong>Restart</strong>—The application is restarted according to the restart command set in the recipe.</li> </ol>  <h4 id=\"deploy-cache-file\">Deploy Cache File</h4> <p>The chef-client uses a cache file to keep track of the order in which each revision of an application is deployed. By default, the cache file is located at <code class=\"docutils literal\">/var/chef/cache/revision-deploys/APPNAME/</code>. To force a re-deploy, delete the deployment directory or delete the cache file.</p>    <h3 id=\"callbacks\">Callbacks</h3> <p>In-between each step in a deployment process, callbacks can be run using arbitrary Ruby code, including recipes. All callbacks support embedded recipes given in a block, but each callback assumes a shell command (instead of a deploy hook filename) when given a string.</p> <p>The following callback types are available:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Callback</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">after_restart</code></td> <td>A block of code, or a path to a file that contains code, that is run after restarting. Default value: <code class=\"docutils literal\">deploy/after_restart.rb</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">before_migrate</code></td> <td>A block of code, or a path to a file that contains code, that is run before a migration. Default value: <code class=\"docutils literal\">deploy/before_migrate.rb</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">before_restart</code></td> <td>A block of code, or a path to a file that contains code, that is run before restarting. Default value: <code class=\"docutils literal\">deploy/before_restart.rb</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">before_symlink</code></td> <td>A block of code, or a path to a file that contains code, that is run before symbolic linking. Default value: <code class=\"docutils literal\">deploy/before_symlink.rb</code>.</td> </tr> </tbody> </table> <p>Each of these callback types can be used in one of three ways:</p> <ul class=\"simple\"> <li>To pass a block of code, such as Ruby or Python</li> <li>To specify a file</li> <li>To do neither; the chef-client will look for a callback file named after one of the callback types (<code class=\"docutils literal\">before_migrate.rb</code>, for example) and if the file exists, to evaluate it as if it were a specified file</li> </ul> <p>Within a callback, there are two ways to get access to information about the deployment:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">release_path</code> can be used to get the path to the current release</li> <li>\n<code class=\"docutils literal\">new_resource</code> can be used to access the deploy resource, including environment variables that have been set there (using <code class=\"docutils literal\">new_resource</code> is a preferred approach over using the <code class=\"docutils literal\">@configuration</code> variable)</li> </ul> <p>Both of these options must be available at the top-level within the callback, along with any assigned values that will be used later in the callback.</p> <p><strong>Callbacks and Capistrano</strong></p> <p>If you are familiar with Capistrano, the following examples should help you know when to use the various callbacks that are available. If you are not familiar with Capistrano, then follow the semantic names of these callbacks to help you determine when to use each of the callbacks within a recipe that is built with the <strong>deploy</strong> resource.</p> <p>The following example shows where callbacks fit in relation to the steps taken by the <code class=\"docutils literal\">deploy</code> process in Capistrano:</p> <img alt=\"_images/includes_resource_deploy_strategy_callbacks_example1.png\" src=\"https://docs.chef.io/release/12-9/_images/includes_resource_deploy_strategy_callbacks_example1.png\"> <p>and the following example shows the same comparison, but with the <code class=\"docutils literal\">deploy:migrations</code> process:</p> <img alt=\"_images/includes_resource_deploy_strategy_callbacks_example2.png\" src=\"https://docs.chef.io/release/12-9/_images/includes_resource_deploy_strategy_callbacks_example2.png\">   <h3 id=\"layout-modifiers\">Layout Modifiers</h3> <p>The <strong>deploy</strong> resource expects an application to be structured like a Ruby on Rails application, but the layout can be modified to meet custom requirements as needed. Use the following attributes within a recipe to modify the layout of a recipe that is using the <strong>deploy</strong> resource:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Layout Modifiers</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">create_dirs_before_symlink</code></td> <td>Create directories in the release directory before symbolic links are created. This property runs after <code class=\"docutils literal\">purge_before_symlink</code> and before <code class=\"docutils literal\">symlink</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">purge_before_symlink</code></td> <td>An array of directories (relative to the application root) to be removed from a checkout before symbolic links are created. This attribute runs before <code class=\"docutils literal\">create_dirs_before_symlink</code> and before <code class=\"docutils literal\">symlink</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">symlink_before_migrate</code></td> <td>Map files in a shared directory to the current release directory. The symbolic links for these files are created before any migration is run. Use parentheses <code class=\"docutils literal\">( )</code> around curly braces <code class=\"docutils literal\">{ }</code> to ensure the contents within the curly braces are interpreted as a block and not as an empty Hash. Set to <code class=\"docutils literal\">symlink_before_migrate({})</code> to prevent the creation of symbolic links.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">symlinks</code></td> <td>Map files in a shared directory to their paths in the current release directory. This property runs after <code class=\"docutils literal\">create_dirs_before_symlink</code> and <code class=\"docutils literal\">purge_before_symlink</code>.</td> </tr> </tbody> </table>    <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:deploy</code></dt> <dd>Default. Deploy an application.</dd> <dt><code class=\"docutils literal\">:force_deploy</code></dt> <dd>Remove any existing release of the same code version and re-deploy a new one in its place.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:rollback</code></dt> <dd>Roll an application back to the previous release.</dd> </dl>  <h3 id=\"naming-resources\">Naming Resources</h3> <p>The chef-client caches deployment actions as they are taken. In order for the chef-client to be able to apply a subsequent deployment action—rolling back a release using the <code class=\"docutils literal\">:rollback</code> action, for example—all related deployment actions must be contained within resource blocks that have the same name. This ensures that the chef-client will be able to find the correct deployment from within the cached deployment actions.</p> <p>For example, a simple deployment:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deploy_revision 'name' do\n  ...\n  action :deploy\nend</pre> <p>In order to use the <code class=\"docutils literal\">:rollback</code> action with this deployment, the <code class=\"docutils literal\">:rollback</code> action must be in a resource block that has the same resource name as the initial deploy action. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deploy_revision 'name' do\n  ...\n  action :rollback\nend</pre>    <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">after_restart</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Proc, String</p> <p class=\"last\">A block of code, or a path to a file that contains code, that is run after restarting. Default value: <code class=\"docutils literal\">deploy/after_restart.rb</code>.</p> </dd> <dt><code class=\"docutils literal\">before_migrate</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Proc, String</p> <p class=\"last\">A block of code, or a path to a file that contains code, that is run before a migration. Default value: <code class=\"docutils literal\">deploy/before_migrate.rb</code>.</p> </dd> <dt><code class=\"docutils literal\">before_restart</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Proc, String</p> <p class=\"last\">A block of code, or a path to a file that contains code, that is run before restarting. Default value: <code class=\"docutils literal\">deploy/before_restart.rb</code>.</p> </dd> <dt><code class=\"docutils literal\">before_symlink</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Proc, String</p> <p class=\"last\">A block of code, or a path to a file that contains code, that is run before symbolic linking. Default value: <code class=\"docutils literal\">deploy/before_symlink.rb</code>.</p> </dd> <dt><code class=\"docutils literal\">branch</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The alias for the revision.</p> </dd> <dt><code class=\"docutils literal\">create_dirs_before_symlink</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p class=\"last\">Create directories in the release directory before symbolic links are created. This property runs after <code class=\"docutils literal\">purge_before_symlink</code> and before <code class=\"docutils literal\">symlink</code>. Default value: <code class=\"docutils literal\">%w{tmp public config}</code> (or the same as <code class=\"docutils literal\">[\"tmp\", \"public\", \"config\"]</code>).</p> </dd> <dt><code class=\"docutils literal\">deploy_to</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The “meta root” for the application, if different from the path that is used to specify the name of a resource. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">environment</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A Hash of environment variables in the form of <code class=\"docutils literal\">{\"ENV_VARIABLE\" =&gt; \"VALUE\"}</code>. (These variables must exist for a command to be run successfully.)</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The system group that is responsible for the checked-out code.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">keep_releases</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of releases for which a backup is kept. Default value: <code class=\"docutils literal\">5</code>.</p> </dd> <dt><code class=\"docutils literal\">migrate</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Run a migration command. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">migration_command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">A string that contains a shell command that can be executed to run a migration operation.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">purge_before_symlink</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p class=\"last\">An array of directories (relative to the application root) to be removed from a checkout before symbolic links are created. This attribute runs before <code class=\"docutils literal\">create_dirs_before_symlink</code> and before <code class=\"docutils literal\">symlink</code>. Default value: <code class=\"docutils literal\">%w{log tmp/pids public/system}</code> (or the same as <code class=\"docutils literal\">[\"log\", \"tmp/pids\", \"public/system\"]</code>.</p> </dd> <dt><code class=\"docutils literal\">repo</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The alias for the repository.</p> </dd> <dt><code class=\"docutils literal\">repository</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The URI for the repository.</p> </dd> <dt><code class=\"docutils literal\">repository_cache</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The name of the sub-directory in which the pristine copy of an application’s source is kept. Default value: <code class=\"docutils literal\">cached-copy</code>.</p> </dd> <dt><code class=\"docutils literal\">restart_command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Proc</p> <p class=\"last\">A string that contains a shell command that can be executed to run a restart operation.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">revision</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">A branch, tag, or commit to be synchronized with git. This can be symbolic, like <code class=\"docutils literal\">HEAD</code> or it can be a source control management-specific revision identifier. Default value: <code class=\"docutils literal\">HEAD</code>.</p> </dd> <dt><code class=\"docutils literal\">rollback_on_error</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Roll a resource back to a previously-deployed release if an error occurs when deploying a new release. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">scm_provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">The name of the source control management provider. Default value: <code class=\"docutils literal\">Chef::Provider::Git</code>. Optional values: <code class=\"docutils literal\">Chef::Provider::Subversion</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">symlinks</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">Map files in a shared directory to their paths in the current release directory. This property runs after <code class=\"docutils literal\">create_dirs_before_symlink</code> and <code class=\"docutils literal\">purge_before_symlink</code>. Default value: <code class=\"docutils literal\">{\"system\" =&gt; \"public/system\", \"pids\" =&gt; \"tmp/pids\", \"log\" =&gt; \"log\"}</code>.</p> </dd> <dt><code class=\"docutils literal\">symlink_before_migrate</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">Map files in a shared directory to the current release directory. The symbolic links for these files are created before any migration is run. Use parentheses <code class=\"docutils literal\">( )</code> around curly braces <code class=\"docutils literal\">{ }</code> to ensure the contents within the curly braces are interpreted as a block and not as an empty Hash. Set to <code class=\"docutils literal\">symlink_before_migrate({})</code> to prevent the creation of symbolic links. Default value: <code class=\"docutils literal\">{\"config/database.yml\" =&gt; \"config/database.yml\"}</code>.</p> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The amount of time (in seconds) to wait for a command to execute before timing out. When specified, this value is passed from the <strong>deploy</strong> resource to the <strong>git</strong> or <strong>subversion</strong> resources.</p> </dd> <dt><code class=\"docutils literal\">user</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The system user that is responsible for the checked-out code.</p> </dd> </dl> <p>The following properties are for use with git only:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">depth</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The depth of a git repository, truncated to the specified number of revisions. See <code class=\"docutils literal\">shallow_clone</code>.</p> </dd> <dt><code class=\"docutils literal\">enable_submodules</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Perform a sub-module initialization and update. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">git_ssh_wrapper</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The alias for the <code class=\"docutils literal\">ssh_wrapper</code>.</p> </dd> <dt><code class=\"docutils literal\">remote</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The remote repository to use when synchronizing an existing clone. Default value: <code class=\"docutils literal\">origin</code>.</p> </dd> <dt><code class=\"docutils literal\">shallow_clone</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Set the clone depth to <code class=\"docutils literal\">5</code>. If a depth other than <code class=\"docutils literal\">5</code> is required, use the <code class=\"docutils literal\">depth</code> property instead of <code class=\"docutils literal\">shallow_clone</code>. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">ssh_wrapper</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The path to the wrapper script used when running SSH with git. The <code class=\"docutils literal\">GIT_SSH</code> environment variable is set to this.</p> </dd> </dl> <p>The following properties are for use with Subversion only:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">svn_arguments</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The extra arguments that are passed to the Subversion command.</p> </dd> <dt><code class=\"docutils literal\">svn_password</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The password for a user that has access to the Subversion repository.</p> </dd> <dt><code class=\"docutils literal\">svn_username</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The user name for a user that has access to the Subversion repository.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Deploy</code>, <code class=\"docutils literal\">deploy</code>\n</dt> <dd>When this short name is used, the chef-client will determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Deploy::Branch</code>, <code class=\"docutils literal\">deploy_branch</code>\n</dt> <dd>See below for more information.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Deploy::Revision</code>, <code class=\"docutils literal\">deploy_revision</code>\n</dt> <dd>See below for more information.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Deploy::TimestampedDeploy</code>, <code class=\"docutils literal\">timestamped_deploy</code>\n</dt> <dd>The default provider for all platforms. See below for more information.</dd> </dl>  <h3 id=\"deploy-branch\">deploy_branch</h3> <p>The <strong>deploy_branch</strong> resource functions identically to the <strong>deploy_revision</strong> resource, in terms of how the chef-client processes the resource during the chef-client run. It uses the same <code class=\"docutils literal\">Deploy::Revision</code> provider, the same set of actions and attributes, and is (outside of the name itself) identical to the <strong>deploy_revision</strong> resource. Using the <strong>deploy_revision</strong> resource is preferred; however, the <strong>deploy_branch</strong> resource exists for those situations where, semantically, it is preferable to refer to a resource as a “branch” instead of a “revision”.</p>   <h3 id=\"deploy-revision\">deploy_revision</h3> <p>The <code class=\"docutils literal\">deploy_revision</code> provider is the recommended provider, even if it is not listed as the default. The <code class=\"docutils literal\">deploy_revision</code> provider is used to ensure that the name of a release sub-directory is based on a revision identifier. For users of git, this will be the familiar SHA checksum. For users of Subversion, it will be the integer revision number. If a name other than a revision identifier is provided—branch names, tags, and so on—the chef-client will ignore the alternate names and will look up the revision identifier and use it to name the release sub-directory. When the <code class=\"docutils literal\">deploy_revision</code> provider is given an exact revision to deploy, it will behave in an idempotent manner.</p> <p>The <code class=\"docutils literal\">deploy_revision</code> provider results in deployed components under the destination location that is owned by the user who runs the application. This is sometimes an issue for certain workflows. If issues arise, consider the following:</p> <ul class=\"simple\"> <li>Incorporate changing permissions to the desired end state from within a recipe</li> <li>Add a <code class=\"docutils literal\">before_restart</code> block to fix up the permissions</li> <li>Have an unprivileged user (for example: <code class=\"docutils literal\">opscode</code>) be the owner of the <code class=\"docutils literal\">deploy</code> directory and another unprivileged user (for example: <code class=\"docutils literal\">opscodeapp</code>) run the application. Most often, this is the solution that works best</li> </ul> <p>When using the <code class=\"docutils literal\">deploy_revision</code> provider, and when the deploy fails for any reason, and when the same code is used to re-deploy, the action should be set manually to <code class=\"docutils literal\">:force_deploy</code>. Forcing the re-deploy will remove the old release directory, after which the deploy can proceed as usual. (Forcing a re-deploy over the current release can cause some downtime.) Deployed revisions are stored in <code class=\"docutils literal\">(file_cache_path)/revision-deploys/(deploy_path)</code>.</p>   <h3 id=\"timestamped-deploy\">timestamped_deploy</h3> <p>The <code class=\"docutils literal\">timestamped_deploy</code> provider is the default <strong>deploy</strong> provider. It is used to name release directories with a timestamp in the form of <code class=\"docutils literal\">YYYYMMDDHHMMSS</code>. For example: <code class=\"docutils literal\">/my/deploy/dir/releases/20121120162342</code>. The <strong>deploy</strong> resource will determine whether or not to deploy code based on the existence of the release directory in which it is attempting to deploy. Because the timestamp is different for every chef-client run, the <code class=\"docutils literal\">timestamped_deploy</code> provider is not idempotent. When the <code class=\"docutils literal\">timestamped_deploy</code> provider is used, it requires that the action setting on a resource be managed manually in order to prevent unintended continuous deployment.</p>    <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Modify the layout of a Ruby on Rails application</strong></p> <p>The layout of the <strong>deploy</strong> resource matches a Ruby on Rails app by default, but this can be customized. To customize the layout, do something like the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deploy '/my/apps/dir/deploy' do\n  # Use a local repo if you prefer\n  repo '/path/to/gitrepo/typo/'\n  environment 'RAILS_ENV' =&gt; 'production'\n  revision 'HEAD'\n  action :deploy\n  migration_command 'rake db:migrate --trace'\n  migrate true\n  restart_command 'touch tmp/restart.txt'\n  create_dirs_before_symlink  %w{tmp public config deploy}\n\n  # You can use this to customize if your app has extra configuration files\n  # such as amqp.yml or app_config.yml\n  symlink_before_migrate  'config/database.yml' =&gt; 'config/database.yml'\n\n  # If your app has extra files in the shared folder, specify them here\n  symlinks  'system' =&gt; 'public/system',\n            'pids' =&gt; 'tmp/pids',\n            'log' =&gt; 'log',\n            'deploy/before_migrate.rb' =&gt; 'deploy/before_migrate.rb',\n            'deploy/before_symlink.rb' =&gt; 'deploy/before_symlink.rb',\n            'deploy/before_restart.rb' =&gt; 'deploy/before_restart.rb',\n            'deploy/after_restart.rb' =&gt; 'deploy/after_restart.rb'\nend</pre> <p><strong>Use resources within callbacks</strong></p> <p>Using resources from within your callbacks as blocks or within callback files distributed with your application’s source code. To use embedded recipes for callbacks:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deploy \"#{node['tmpdir']}/deploy\" do\n  repo \"#{node['tmpdir']}/gitrepo/typo/\"\n  environment 'RAILS_ENV' =&gt; 'production'\n  revision 'HEAD'\n  action :deploy\n  migration_command 'rake db:migrate --trace'\n  migrate true\n\n  # Callback awesomeness:\n  before_migrate do\n    current_release = release_path\n\n    directory \"#{current_release}/deploy\" do\n      mode '0755'\n    end\n\n    # creates a callback for before_symlink\n    template \"#{current_release}/deploy/before_symlink_callback.rb\" do\n      source 'embedded_recipe_before_symlink.rb.erb'\n      mode '0755'\n    end\n\n  end\n\n  # This file can contain Chef recipe code, plain ruby also works\n  before_symlink 'deploy/before_symlink_callback.rb'\n\n  restart do\n    current_release = release_path\n    file \"#{release_path}/tmp/restart.txt\" do\n      mode '0755'\n    end\n  end\n\nend</pre> <p><strong>Deploy from a private git repository without using the application cookbook</strong></p> <p>To deploy from a private git repository without using the <code class=\"docutils literal\">application</code> cookbook, first ensure that:</p> <ul class=\"simple\"> <li>the private key does not have a passphrase, as this will pause a chef-client run to wait for input</li> <li>an SSH wrapper is being used</li> <li>a private key has been added to the node</li> </ul> <p>and then remove a passphrase from a private key by using code similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ssh-keygen -p -P 'PASSPHRASE' -N '' -f id_deploy</pre> <p><strong>Use an SSH wrapper</strong></p> <p>To write a recipe that uses an SSH wrapper:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Create a file in the <code class=\"docutils literal\">cookbooks/COOKBOOK_NAME/files/default</code> directory that is named <code class=\"docutils literal\">wrap-ssh4git.sh</code> and which contains the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">#!/usr/bin/env bash\n/usr/bin/env ssh -o \"StrictHostKeyChecking=no\" -i \"/tmp/private_code/.ssh/id_deploy\" $1 $2</pre> </li> <li>\n<p class=\"first\">Set up the cookbook file.</p> </li> <li>\n<p class=\"first\">Add a recipe to the cookbook file similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory '/tmp/private_code/.ssh' do\n  owner 'ubuntu'\n  recursive true\nend\n\ncookbook_file '/tmp/private_code/wrap-ssh4git.sh' do\n  source 'wrap-ssh4git.sh'\n  owner 'ubuntu'\n  mode '0755'\nend\n\ndeploy 'private_repo' do\n  repo 'git@github.com:acctname/private-repo.git'\n  user 'ubuntu'\n  deploy_to '/tmp/private_code'\n  action :deploy\n  ssh_wrapper '/tmp/private_code/wrap-ssh4git.sh'\nend</pre> <p>This will deploy the git repository at <code class=\"docutils literal\">git@github.com:acctname/private-repo.git</code> in the <code class=\"docutils literal\">/tmp/private_code</code> directory.</p> </li> </ol> <p><strong>Use a callback to include a file that will be passed as a code block</strong></p> <p>The code in a file that is included in a recipe using a callback is evaluated exactly as if the code had been put in the recipe as a block. Files are searched relative to the current release.</p> <p>To specify a file that contains code to be used as a block:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deploy '/deploy/dir/' do\n  # ...\n\n  before_migrate 'callbacks/do_this_before_migrate.rb'\nend</pre> <p><strong>Use a callback to pass a code block</strong></p> <p>To pass a block of Python code before a migration is run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deploy_revision '/deploy/dir/' do\n  # other attributes\n  # ...\n\n  before_migrate do\n    # release_path is the path to the timestamp dir\n    # for the current release\n    current_release = release_path\n\n    # Create a local variable for the node so we'll have access to\n    # the attributes\n    deploy_node = node\n\n    # A local variable with the deploy resource.\n    deploy_resource = new_resource\n\n    python do\n      cwd current_release\n      user 'myappuser'\n      code&lt;&lt;-PYCODE\n        # Woah, callbacks in python!\n        # ...\n        # current_release, deploy_node, and deploy_resource are all available\n        # within the deploy hook now.\n      PYCODE\n    end\n  end\nend</pre> <p><strong>Use the same API for all recipes using the same gem</strong></p> <p>Any recipes using the <code class=\"docutils literal\">git-deploy</code> gem can continue using the same API. To include this behavior in a recipe, do something like the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deploy \"/srv/#{appname}\" do\n  repo 'git://github.com/radiant/radiant.git'\n  revision 'HEAD'\n  user 'railsdev'\n  enable_submodules false\n  migrate true\n  migration_command 'rake db:migrate'\n  # Giving a string for environment sets RAILS_ENV, MERB_ENV, RACK_ENV\n  environment 'production'\n  shallow_clone true\n  action :deploy\n  restart_command 'touch tmp/restart.txt'\nend</pre> <p><strong>Deploy without creating symbolic links to a shared folder</strong></p> <p>To deploy without creating symbolic links to a shared folder:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deploy '/my/apps/dir/deploy' do\n  symlinks {}\nend</pre> <p>When deploying code that is not Ruby on Rails and symbolic links to a shared folder are not wanted, use parentheses <code class=\"docutils literal\">()</code> or <code class=\"docutils literal\">Hash.new</code> to avoid ambiguity. For example, using parentheses:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deploy '/my/apps/dir/deploy' do\n  symlinks({})\nend</pre> <p>or using <code class=\"docutils literal\">Hash.new</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deploy '/my/apps/dir/deploy' do\n  symlinks Hash.new\nend</pre> <p><strong>Clear a layout modifier attribute</strong></p> <p>Using the default property values for the various resources is the recommended starting point when working with recipes. Then, depending on what each node requires, these default values can be overridden with node-, role-, environment-, and cookbook-specific values. The <strong>deploy</strong> resource has four layout modifiers: <code class=\"docutils literal\">create_dirs_before_symlink</code>, <code class=\"docutils literal\">purge_before_symlink</code>, <code class=\"docutils literal\">symlink_before_migrate</code>, and <code class=\"docutils literal\">symlinks</code>. Each of these is a Hash that behaves as a property of the <strong>deploy</strong> resource. When these layout modifiers are used in a recipe, they appear similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deploy 'name' do\n  ...\n  symlink_before_migrate       {'config/database.yml' =&gt; 'config/database.yml'}\n  create_dirs_before_symlink   %w{tmp public config}\n  purge_before_symlink         %w{log tmp/pids public/system}\n  symlinks                     { 'system' =&gt; 'public/system',\n                                 'pids' =&gt; 'tmp/pids',\n                                 'log' =&gt; 'log'\n                               }\n  ...\nend</pre> <p>and then what these layout modifiers look like if they were empty:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deploy 'name' do\n  ...\n  symlink_before_migrate       nil\n  create_dirs_before_symlink   []\n  purge_before_symlink         []\n  symlinks                     nil\n  ...\nend</pre> <p>In most cases, using the empty values for the layout modifiers will prevent the chef-client from passing symbolic linking information to a node during the chef-client run. However, in some cases, it may be preferable to ensure that one (or more) of these layout modifiers do not pass any symbolic linking information to a node during the chef-client run at all. Because each of these layout modifiers are a Hash, the <code class=\"docutils literal\">clear</code> instance method can be used to clear out these values.</p> <p>To clear the default values for a layout modifier:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deploy 'name' do\n  ...\n  symlink_before_migrate.clear\n  create_dirs_before_symlink.clear\n  purge_before_symlink.clear\n  symlinks.clear\n  ...\nend</pre> <p>In general, use this approach carefully and only after it is determined that nil or empty values won’t provide the expected result.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_deploy.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_deploy.html</a>\n  </p>\n</div>\n","12-9/resource_freebsd_package":"<h1 id=\"freebsd-package\">freebsd_package</h1> <p>Use the <strong>freebsd_package</strong> resource to manage packages for the FreeBSD platform.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>freebsd_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>freebsd_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">freebsd_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>freebsd_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">freebsd_package 'name' do\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::Freebsd\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">freebsd_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The path to a package in the local file system.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Freebsd</code>, <code class=\"docutils literal\">freebsd_package</code>\n</dt> <dd>The provider for the FreeBSD platform.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">freebsd_package 'name of package' do\n  action :install\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_freebsd_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_freebsd_package.html</a>\n  </p>\n</div>\n","12-9/resource_execute":"<h1 id=\"execute\">execute</h1> <p>Use the <strong>execute</strong> resource to execute a single command. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Use the <strong>script</strong> resource to execute a script using a specific interpreter (Ruby, Python, Perl, csh, or Bash).</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>execute</strong> resource block typically executes a single command that is unique to the environment in which a recipe will run. Some <strong>execute</strong> resource commands are run by themselves, but often they are run in combination with other Chef resources. For example, a single command that is run by itself:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'apache_configtest' do\n  command '/usr/sbin/apachectl configtest'\nend</pre> <p>where <code class=\"docutils literal\">'/usr/sbin/apachectl configtest'</code> is a command that tests if the configuration files for Apache are valid.</p> <p>Commands are often run in combination with other Chef resources. The following example shows the <strong>template</strong> resource run with the <strong>execute</strong> resource to add an entry to a LDAP Directory Interchange Format (LDIF) file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'slapadd' do\n  command 'slapadd &lt; /tmp/something.ldif'\n  creates '/var/lib/slapd/uid.bdb'\n  action :nothing\nend\n\ntemplate '/tmp/something.ldif' do\n  source 'something.ldif'\n  notifies :run, 'execute[slapadd]', :immediately\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">'/tmp/something.ldif'</code> specifies the location of the file</li> <li>\n<code class=\"docutils literal\">'something.ldif'</code> specifies template file from which <code class=\"docutils literal\">/tmp/something.ldif</code> is created</li> <li>\n<code class=\"docutils literal\">'slapadd &lt; /tmp/something.ldif'</code> is the command that is run</li> <li>\n<code class=\"docutils literal\">/var/lib/slapd/uid.bdb</code> prevents the <strong>execute</strong> resource block from running if that file already exists</li> </ul> <p>The full syntax for all of the properties that are available to the <strong>execute</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'name' do\n  command                    String, Array # defaults to 'name' if not specified\n  creates                    String\n  cwd                        String\n  environment                Hash\n  group                      String, Integer\n  notifies                   # see description\n  path                       Array\n  provider                   Chef::Provider::Execute\n  returns                    Integer, Array\n  sensitive                  TrueClass, FalseClass\n  subscribes                 # see description\n  timeout                    Integer, Float\n  umask                      String, Integer\n  user                       String, Integer\n  action                     Symbol # defaults to :run if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">execute</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">command</code> is the command to be run</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">command</code>, <code class=\"docutils literal\">creates</code>, <code class=\"docutils literal\">cwd</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">returns</code>, <code class=\"docutils literal\">sensitive</code>, <code class=\"docutils literal\">timeout</code>, <code class=\"docutils literal\">user</code>, and <code class=\"docutils literal\">umask</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Prevent a command from running. This action is used to specify that a command is run only when another resource notifies it.</dd> <dt><code class=\"docutils literal\">:run</code></dt> <dd>Default. Run a command.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p>The name of the command to be executed. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Use the <strong>execute</strong> resource to run a single command. Use multiple <strong>execute</strong> resource blocks to run multiple commands.</p> </div> </dd> <dt><code class=\"docutils literal\">creates</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Prevent a command from creating a file when that file already exists.</p> </dd> <dt><code class=\"docutils literal\">cwd</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The current working directory from which a command is run.</p> </dd> <dt><code class=\"docutils literal\">environment</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A Hash of environment variables in the form of <code class=\"docutils literal\">{\"ENV_VARIABLE\" =&gt; \"VALUE\"}</code>. (These variables must exist for a command to be run successfully.)</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The group name or group ID that must be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p>An array of paths to use when searching for a command. These paths are not added to the command’s environment $PATH. The default value uses the system path.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>The <code class=\"docutils literal\">path</code> property is not implemented by any provider in any version of the chef-client. Starting with chef-client 12, using the <code class=\"docutils literal\">path</code> property will return a warning. Starting with chef-client 13, the <code class=\"docutils literal\">path</code> property is deprecated and using it will return an exception. Cookbooks that currently use the <code class=\"docutils literal\">path</code> property should be updated to use the <code class=\"docutils literal\">environment</code> property instead.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">execute 'mycommand' do\n  environment 'PATH' =&gt; \"/my/path/to/bin:#{ENV['PATH']}\"\nend</pre> </div> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">returns</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Array</p> <p class=\"last\">The return value for a command. This may be an array of accepted values. An exception is raised when the return value(s) do not match. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">sensitive</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Ensure that sensitive resource data is not logged by the chef-client. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Float</p> <p class=\"last\">The amount of time (in seconds) a command is to wait before timing out. Default value: <code class=\"docutils literal\">3600</code>.</p> </dd> <dt><code class=\"docutils literal\">user</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The user name or user ID that should be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">umask</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The file mode creation mask, or umask.</p> </dd> </dl>  <h3 id=\"guards\">Guards</h3> <p>A guard property can be used to evaluate the state of a node during the execution phase of the chef-client run. Based on the results of this evaluation, a guard property is then used to tell the chef-client if it should continue executing a resource. A guard property accepts either a string value or a Ruby block value:</p> <ul class=\"simple\"> <li>A string is executed as a shell command. If the command returns <code class=\"docutils literal\">0</code>, the guard is applied. If the command returns any other value, then the guard property is not applied. String guards in a <strong>powershell_script</strong> run Windows PowerShell commands and may return <code class=\"docutils literal\">true</code> in addition to <code class=\"docutils literal\">0</code>.</li> <li>A block is executed as Ruby code that must return either <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. If the block returns <code class=\"docutils literal\">true</code>, the guard property is applied. If the block returns <code class=\"docutils literal\">false</code>, the guard property is not applied.</li> </ul> <p>A guard property is useful for ensuring that a resource is idempotent by allowing that resource to test for the desired state as it is being executed, and then if the desired state is present, for the chef-client to do nothing.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>When using the <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> guards with the <strong>execute</strong> resource, the current working directory property (<code class=\"docutils literal\">cwd</code>) is <strong>not</strong> inherited from the resource. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">execute 'bundle install' do\n  cwd '/myapp'\n  not_if 'bundle check' # This is not run inside /myapp\nend</pre> </div> <p><strong>Attributes</strong></p> <p>The following properties can be used to define a guard that is evaluated during the execution phase of the chef-client run:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">not_if</code></dt> <dd>Prevent a resource from executing when the condition returns <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">only_if</code></dt> <dd>Allow a resource to execute only if the condition returns <code class=\"docutils literal\">true</code>.</dd> </dl> <p><strong>Arguments</strong></p> <p>The following arguments can be used with the <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code> guard properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:user</code></dt> <dd>\n<p class=\"first\">Specify the user that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :user =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:group</code></dt> <dd>\n<p class=\"first\">Specify the group that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :group =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:environment</code></dt> <dd>\n<p class=\"first\">Specify a Hash of environment variables to be set. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :environment =&gt; {\n  'HOME' =&gt; '/home/adam'\n}</pre> </dd> <dt><code class=\"docutils literal\">:cwd</code></dt> <dd>\n<p class=\"first\">Set the current working directory before running a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam passwd', :cwd =&gt; '/etc'</pre> </dd> <dt><code class=\"docutils literal\">:timeout</code></dt> <dd>\n<p class=\"first\">Set a timeout for a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'sleep 10000', :timeout =&gt; 10</pre> </dd> </dl>    <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Run a command upon notification</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'slapadd' do\n  command 'slapadd &lt; /tmp/something.ldif'\n  creates '/var/lib/slapd/uid.bdb'\n  action :nothing\nend\n\ntemplate '/tmp/something.ldif' do\n  source 'something.ldif'\n  notifies :run, 'execute[slapadd]', :immediately\nend</pre> <p><strong>Run a touch file only once while running a command</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'upgrade script' do\n  command 'php upgrade-application.php &amp;&amp; touch /var/application/.upgraded'\n  creates '/var/application/.upgraded'\n  action :run\nend</pre> <p><strong>Run a command which requires an environment variable</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'slapadd' do\n  command 'slapadd &lt; /tmp/something.ldif'\n  creates '/var/lib/slapd/uid.bdb'\n  action :run\n  environment ({'HOME' =&gt; '/home/myhome'})\nend</pre> <p><strong>Delete a repository using yum to scrub the cache</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># the following code sample thanks to gaffneyc @ https://gist.github.com/918711\n\nexecute 'clean-yum-cache' do\n  command 'yum clean all'\n  action :nothing\nend\n\nfile '/etc/yum.repos.d/bad.repo' do\n  action :delete\n  notifies :run, 'execute[clean-yum-cache]', :immediately\n  notifies :create, 'ruby_block[reload-internal-yum-cache]', :immediately\nend</pre> <p><strong>Install repositories from a file, trigger a command, and force the internal cache to reload</strong></p> <p>The following example shows how to install new Yum repositories from a file, where the installation of the repository triggers a creation of the Yum cache that forces the internal cache for the chef-client to reload:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'create-yum-cache' do\n command 'yum -q makecache'\n action :nothing\nend\n\nruby_block 'reload-internal-yum-cache' do\n  block do\n    Chef::Provider::Package::Yum::YumCache.instance.reload\n  end\n  action :nothing\nend\n\ncookbook_file '/etc/yum.repos.d/custom.repo' do\n  source 'custom'\n  mode '0755'\n  notifies :run, 'execute[create-yum-cache]', :immediately\n  notifies :create, 'ruby_block[reload-internal-yum-cache]', :immediately\nend</pre> <p><strong>Prevent restart and reconfigure if configuration is broken</strong></p> <p>Use the <code class=\"docutils literal\">:nothing</code> action (common to all resources) to prevent an application from restarting, and then use the <code class=\"docutils literal\">subscribes</code> notification to ask the broken configuration to be reconfigured immediately:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'test-nagios-config' do\n  command 'nagios3 --verify-config'\n  action :nothing\n  subscribes :run, 'template[/etc/nagios3/configures-nagios.conf]', :immediately\nend</pre> <p><strong>Notify in a specific order</strong></p> <p>To notify multiple resources, and then have these resources run in a certain order, do something like the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'foo' do\n  command '...'\n  notifies :run, 'template[baz]', :immediately\n  notifies :install, 'package[bar]', :immediately\n  notifies :run, 'execute[final]', :immediately\nend\n\ntemplate 'baz' do\n  ...\n  notifies :run, 'execute[restart_baz]', :immediately\nend\n\npackage 'bar'\n\nexecute 'restart_baz'\n\nexecute 'final' do\n  command '...'\nend</pre> <p>where the sequencing will be in the same order as the resources are listed in the recipe: <code class=\"docutils literal\">execute 'foo'</code>, <code class=\"docutils literal\">template 'baz'</code>, <code class=\"docutils literal\">execute [restart_baz]</code>, <code class=\"docutils literal\">package 'bar'</code>, and <code class=\"docutils literal\">execute 'final'</code>.</p> <p><strong>Execute a command using a template</strong></p> <p>The following example shows how to set up IPv4 packet forwarding using the <strong>execute</strong> resource to run a command named <code class=\"docutils literal\">forward_ipv4</code> that uses a template defined by the <strong>template</strong> resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'forward_ipv4' do\n  command 'echo &gt; /proc/.../ipv4/ip_forward'\n  action :nothing\nend\n\ntemplate '/etc/file_name.conf' do\n  source 'routing/file_name.conf.erb'\n  notifies :run, 'execute[forward_ipv4]', :delayed\nend</pre> <p>where the <code class=\"docutils literal\">command</code> property for the <strong>execute</strong> resource contains the command that is to be run and the <code class=\"docutils literal\">source</code> property for the <strong>template</strong> resource specifies which template to use. The <code class=\"docutils literal\">notifies</code> property for the <strong>template</strong> specifies that the <code class=\"docutils literal\">execute[forward_ipv4]</code> (which is defined by the <strong>execute</strong> resource) should be queued up and run at the end of the chef-client run.</p> <p><strong>Add a rule to an IP table</strong></p> <p>The following example shows how to add a rule named <code class=\"docutils literal\">test_rule</code> to an IP table using the <strong>execute</strong> resource to run a command using a template that is defined by the <strong>template</strong> resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'test_rule' do\n  command 'command_to_run\n    --option value\n    ...\n    --option value\n    --source #{node[:name_of_node][:ipsec][:local][:subnet]}\n    -j test_rule'\n  action :nothing\nend\n\ntemplate '/etc/file_name.local' do\n  source 'routing/file_name.local.erb'\n  notifies :run, 'execute[test_rule]', :delayed\nend</pre> <p>where the <code class=\"docutils literal\">command</code> property for the <strong>execute</strong> resource contains the command that is to be run and the <code class=\"docutils literal\">source</code> property for the <strong>template</strong> resource specifies which template to use. The <code class=\"docutils literal\">notifies</code> property for the <strong>template</strong> specifies that the <code class=\"docutils literal\">execute[test_rule]</code> (which is defined by the <strong>execute</strong> resource) should be queued up and run at the end of the chef-client run.</p> <p><strong>Stop a service, do stuff, and then restart it</strong></p> <p>The following example shows how to use the <strong>execute</strong>, <strong>service</strong>, and <strong>mount</strong> resources together to ensure that a node running on Amazon EC2 is running MySQL. This example does the following:</p> <ul class=\"simple\"> <li>Checks to see if the Amazon EC2 node has MySQL</li> <li>If the node has MySQL, stops MySQL</li> <li>Installs MySQL</li> <li>Mounts the node</li> <li>Restarts MySQL</li> </ul> <pre class=\"highlight-ruby\" data-language=\"ruby\"># the following code sample comes from the ``server_ec2``\n# recipe in the following cookbook:\n# https://github.com/chef-cookbooks/mysql\n\nif (node.attribute?('ec2') &amp;&amp; ! FileTest.directory?(node['mysql']['ec2_path']))\n\n  service 'mysql' do\n    action :stop\n  end\n\n  execute 'install-mysql' do\n    command \"mv #{node['mysql']['data_dir']} #{node['mysql']['ec2_path']}\"\n    not_if do FileTest.directory?(node['mysql']['ec2_path']) end\n  end\n\n  [node['mysql']['ec2_path'], node['mysql']['data_dir']].each do |dir|\n    directory dir do\n      owner 'mysql'\n      group 'mysql'\n    end\n  end\n\n  mount node['mysql']['data_dir'] do\n    device node['mysql']['ec2_path']\n    fstype 'none'\n    options 'bind,rw'\n    action [:mount, :enable]\n  end\n\n  service 'mysql' do\n    action :start\n  end\n\nend</pre> <p>where</p> <ul class=\"simple\"> <li>the two <strong>service</strong> resources are used to stop, and then restart the MySQL service</li> <li>the <strong>execute</strong> resource is used to install MySQL</li> <li>the <strong>mount</strong> resource is used to mount the node and enable MySQL</li> </ul> <p><strong>Use the platform_family? method</strong></p> <p>The following is an example of using the <code class=\"docutils literal\">platform_family?</code> method in the Recipe DSL to create a variable that can be used with other resources in the same recipe. In this example, <code class=\"docutils literal\">platform_family?</code> is being used to ensure that a specific binary is used for a specific platform before using the <strong>remote_file</strong> resource to download a file from a remote location, and then using the <strong>execute</strong> resource to install that file by running a command.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if platform_family?('rhel')\n  pip_binary = '/usr/bin/pip'\nelse\n  pip_binary = '/usr/local/bin/pip'\nend\n\nremote_file \"#{Chef::Config[:file_cache_path]}/distribute_setup.py\" do\n  source 'http://python-distribute.org/distribute_setup.py'\n  mode '0755'\n  not_if { File.exist?(pip_binary) }\nend\n\nexecute 'install-pip' do\n  cwd Chef::Config[:file_cache_path]\n  command &lt;&lt;-EOF\n    # command for installing Python goes here\n    EOF\n  not_if { File.exists?(pip_binary) }\nend</pre> <p>where a command for installing Python might look something like:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">#{node['python']['binary']} distribute_setup.py\n#{::File.dirname(pip_binary)}/easy_install pip</pre> <p><strong>Control a service using the execute resource</strong></p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">This is an example of something that should NOT be done. Use the <strong>service</strong> resource to control a service, not the <strong>execute</strong> resource.</p> </div> <p>Do something like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'tomcat' do\n  action :start\nend</pre> <p>and NOT something like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'start-tomcat' do\n  command '/etc/init.d/tomcat6 start'\n  action :run\nend</pre> <p>There is no reason to use the <strong>execute</strong> resource to control a service because the <strong>service</strong> resource exposes the <code class=\"docutils literal\">start_command</code> property directly, which gives a recipe full control over the command issued in a much cleaner, more direct manner.</p> <p><strong>Use the search recipe DSL method to find users</strong></p> <p>The following example shows how to use the <code class=\"docutils literal\">search</code> method in the Recipe DSL to search for users:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">#  the following code sample comes from the openvpn cookbook: https://github.com/chef-cookbooks/openvpn\n\nsearch(\"users\", \"*:*\") do |u|\n  execute \"generate-openvpn-#{u['id']}\" do\n    command \"./pkitool #{u['id']}\"\n    cwd '/etc/openvpn/easy-rsa'\n    environment(\n      'EASY_RSA' =&gt; '/etc/openvpn/easy-rsa',\n      'KEY_CONFIG' =&gt; '/etc/openvpn/easy-rsa/openssl.cnf',\n      'KEY_DIR' =&gt; node['openvpn']['key_dir'],\n      'CA_EXPIRE' =&gt; node['openvpn']['key']['ca_expire'].to_s,\n      'KEY_EXPIRE' =&gt; node['openvpn']['key']['expire'].to_s,\n      'KEY_SIZE' =&gt; node['openvpn']['key']['size'].to_s,\n      'KEY_COUNTRY' =&gt; node['openvpn']['key']['country'],\n      'KEY_PROVINCE' =&gt; node['openvpn']['key']['province'],\n      'KEY_CITY' =&gt; node['openvpn']['key']['city'],\n      'KEY_ORG' =&gt; node['openvpn']['key']['org'],\n      'KEY_EMAIL' =&gt; node['openvpn']['key']['email']\n    )\n    not_if { File.exist?(\"#{node['openvpn']['key_dir']}/#{u['id']}.crt\") }\n  end\n\n  %w{ conf ovpn }.each do |ext|\n    template \"#{node['openvpn']['key_dir']}/#{u['id']}.#{ext}\" do\n      source 'client.conf.erb'\n      variables :username =&gt; u['id']\n    end\n  end\n\n  execute \"create-openvpn-tar-#{u['id']}\" do\n    cwd node['openvpn']['key_dir']\n    command &lt;&lt;-EOH\n      tar zcf #{u['id']}.tar.gz \\\n      ca.crt #{u['id']}.crt #{u['id']}.key \\\n      #{u['id']}.conf #{u['id']}.ovpn \\\n    EOH\n    not_if { File.exist?(\"#{node['openvpn']['key_dir']}/#{u['id']}.tar.gz\") }\n  end\nend</pre> <p>where</p> <ul class=\"simple\"> <li>the search will use both of the <strong>execute</strong> resources, unless the condition specified by the <code class=\"docutils literal\">not_if</code> commands are met</li> <li>the <code class=\"docutils literal\">environments</code> property in the first <strong>execute</strong> resource is being used to define values that appear as variables in the OpenVPN configuration</li> <li>the <strong>template</strong> resource tells the chef-client which template to use</li> </ul> <p><strong>Enable remote login for Mac OS X</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'enable ssh' do\n  command '/usr/sbin/systemsetup -setremotelogin on'\n  not_if '/usr/sbin/systemsetup -getremotelogin | /usr/bin/grep On'\n  action :run\nend</pre> <p><strong>Execute code immediately, based on the template resource</strong></p> <p>By default, notifications are <code class=\"docutils literal\">:delayed</code>, that is they are queued up as they are triggered, and then executed at the very end of a chef-client run. To run an action immediately, use <code class=\"docutils literal\">:immediately</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/etc/nagios3/configures-nagios.conf' do\n  # other parameters\n  notifies :run, 'execute[test-nagios-config]', :immediately\nend</pre> <p>and then the chef-client would immediately run the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'test-nagios-config' do\n  command 'nagios3 --verify-config'\n  action :nothing\nend</pre> <p><strong>Sourcing a file</strong></p> <p>The <strong>execute</strong> resource cannot be used to source a file (e.g. <code class=\"docutils literal\">command 'source filename'</code>). The following example will fail because <code class=\"docutils literal\">source</code> is not an executable:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'foo' do\n  command 'source /tmp/foo.sh'\nend</pre> <p>Instead, use the <strong>script</strong> resource or one of the <strong>script</strong>-based resources (<strong>bash</strong>, <strong>csh</strong>, <strong>perl</strong>, <strong>python</strong>, or <strong>ruby</strong>). For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">bash 'foo' do\n  code 'source /tmp/foo.sh'\nend</pre> <p><strong>Run a Knife command</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'create_user' do\n  command &lt;&lt;-EOM.gsub(/\\s+/, ' ').strip!\n        knife user create #{user}\n      --admin\n      --password password\n      --disable-editing\n      --file /home/vagrant/.chef/user.pem\n      --config /tmp/knife-admin.rb\n    EOM\nend</pre> <p><strong>Run install command into virtual environment</strong></p> <p>The following example shows how to install a lightweight JavaScript framework into Vagrant:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute \"install q and zombiejs\" do\n  cwd \"/home/vagrant\"\n  user \"vagrant\"\n  environment ({'HOME' =&gt; '/home/vagrant', 'USER' =&gt; 'vagrant'})\n  command \"npm install -g q zombie should mocha coffee-script\"\n  action :run\nend</pre> <p><strong>Run a command as a named user</strong></p> <p>The following example shows how to run <code class=\"docutils literal\">bundle install</code> from a chef-client run as a specific user. This will put the gem into the path of the user (<code class=\"docutils literal\">vagrant</code>) instead of the root user (under which the chef-client runs):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute '/opt/chefdk/embedded/bin/bundle install' do\n  cwd node['chef_workstation']['bundler_path']\n  user node['chef_workstation']['user']\n  environment ({\n    'HOME' =&gt; \"/home/#{node['chef_workstation']['user']}\",\n    'USER' =&gt; node['chef_workstation']['user']\n  })\n  not_if 'bundle check'\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_execute.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_execute.html</a>\n  </p>\n</div>\n","12-9/resource_file":"<h1 id=\"file\">file</h1> <p>Use the <strong>file</strong> resource to manage files directly on a node.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Use the <strong>cookbook_file</strong> resource to copy a file from a cookbook’s <code class=\"docutils literal\">/files</code> directory. Use the <strong>template</strong> resource to create a file based on a template in a cookbook’s <code class=\"docutils literal\">/templates</code> directory. And use the <strong>remote_file</strong> resource to transfer a file to a node from a remote location.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>file</strong> resource block manages files that exist on nodes. For example, to write the home page for an Apache website:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file '/var/www/customers/public_html/index.php' do\n  content '&lt;html&gt;This is a placeholder for the home page.&lt;/html&gt;'\n  mode '0755'\n  owner 'web_admin'\n  group 'web_admin'\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">'/var/www/customers/public_html/index.php'</code> is path to the file and also the filename to be managed</li> <li>\n<code class=\"docutils literal\">content</code> defines the contents of the file</li> </ul> <p>The full syntax for all of the properties that are available to the <strong>file</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file 'name' do\n  atomic_update              TrueClass, FalseClass\n  backup                     FalseClass, Integer\n  checksum                   String\n  content                    String\n  force_unlink               TrueClass, FalseClass\n  group                      String, Integer\n  inherits                   TrueClass, FalseClass\n  manage_symlink_source      TrueClass, FalseClass, NilClass\n  mode                       String, Integer\n  notifies                   # see description\n  owner                      String, Integer\n  path                       String # defaults to 'name' if not specified\n  provider                   Chef::Provider::File\n  rights                     Hash\n  sensitive                  TrueClass, FalseClass\n  subscribes                 # see description\n  verify                     String, Block\n  action                     Symbol # defaults to :create if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">file</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block; when the <code class=\"docutils literal\">path</code> property is not specified as part of a recipe, <code class=\"docutils literal\">name</code> is also the path to the file</li> <li>\n<code class=\"docutils literal\">content</code> specifies the contents of the file</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">atomic_update</code>, <code class=\"docutils literal\">backup</code>, <code class=\"docutils literal\">checksum</code>, <code class=\"docutils literal\">content</code>, <code class=\"docutils literal\">force_unlink</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">inherits</code>, <code class=\"docutils literal\">manage_symlink_source</code>, <code class=\"docutils literal\">mode</code>, <code class=\"docutils literal\">owner</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">rights</code>, <code class=\"docutils literal\">sensitive</code>, and <code class=\"docutils literal\">verify</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:create</code></dt> <dd>Default. Create a file. If a file already exists (but does not match), update that file to match.</dd> <dt><code class=\"docutils literal\">:create_if_missing</code></dt> <dd>Create a file only if the file does not exist. When the file exists, nothing happens.</dd> <dt><code class=\"docutils literal\">:delete</code></dt> <dd>Delete a file.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:touch</code></dt> <dd>Touch a file. This updates the access (atime) and file modification (mtime) times for a file.</dd> </dl> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">For a machine on which SELinux is enabled, the chef-client will create files that correctly match the default policy settings only when the cookbook that defines the action also conforms to the same policy.</p> </div>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">atomic_update</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Perform atomic file updates on a per-resource basis. Set to <code class=\"docutils literal\">true</code> for atomic file updates. Set to <code class=\"docutils literal\">false</code> for non-atomic file updates. This setting overrides <code class=\"docutils literal\">file_atomic_update</code>, which is a global setting found in the client.rb file. Default value: <code class=\"docutils literal\">true</code>.</p> </dd> <dt><code class=\"docutils literal\">backup</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> FalseClass, Integer</p> <p class=\"last\">The number of backups to be kept in <code class=\"docutils literal\">/var/chef/backup</code> (for UNIX- and Linux-based platforms) or <code class=\"docutils literal\">C:/chef/backup</code> (for the Microsoft Windows platform). Set to <code class=\"docutils literal\">false</code> to prevent backups from being kept. Default value: <code class=\"docutils literal\">5</code>.</p> </dd> <dt><code class=\"docutils literal\">checksum</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String</p> <p class=\"last\">The SHA-256 checksum of the file. Use to ensure that a specific file is used. If the checksum does not match, the file is not used. Default value: no checksum required.</p> </dd> <dt><code class=\"docutils literal\">content</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">A string that is written to the file. The contents of this property replace any previous content when this property has something other than the default value. The default behavior will not modify content.</p> </dd> <dt><code class=\"docutils literal\">force_unlink</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">How the chef-client handles certain situations when the target file turns out not to be a file. For example, when a target file is actually a symlink. Set to <code class=\"docutils literal\">true</code> for the chef-client delete the non-file target and replace it with the specified file. Set to <code class=\"docutils literal\">false</code> for the chef-client to raise an error. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">A string or ID that identifies the group owner by group name, including fully qualified group names such as <code class=\"docutils literal\">domain\\group</code> or <code class=\"docutils literal\">group@domain</code>. If this value is not specified, existing groups remain unchanged and new group assignments use the default <code class=\"docutils literal\">POSIX</code> group (if available).</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">inherits</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Microsoft Windows only. Whether a file inherits rights from its parent directory. Default value: <code class=\"docutils literal\">true</code>.</p> </dd> <dt><code class=\"docutils literal\">manage_symlink_source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass, NilClass</p> <p class=\"last\">Cause the chef-client to detect and manage the source file for a symlink. Possible values: <code class=\"docutils literal\">nil</code>, <code class=\"docutils literal\">true</code>, or <code class=\"docutils literal\">false</code>. When this value is set to <code class=\"docutils literal\">nil</code>, the chef-client will manage a symlink’s source file and emit a warning. When this value is set to <code class=\"docutils literal\">true</code>, the chef-client will manage a symlink’s source file and not emit a warning. Default value: <code class=\"docutils literal\">nil</code>. The default value will be changed to <code class=\"docutils literal\">false</code> in a future version.</p> </dd> <dt><code class=\"docutils literal\">mode</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p>A quoted 3-5 character string that defines the octal mode. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. If <code class=\"docutils literal\">mode</code> is not specified and if the file already exists, the existing mode on the file is used. If <code class=\"docutils literal\">mode</code> is not specified, the file does not exist, and the <code class=\"docutils literal\">:create</code> action is specified, the chef-client assumes a mask value of <code class=\"docutils literal\">'0777'</code> and then applies the umask for the system on which the file is to be created to the <code class=\"docutils literal\">mask</code> value. For example, if the umask on a system is <code class=\"docutils literal\">'022'</code>, the chef-client uses the default value of <code class=\"docutils literal\">'0755'</code>.</p> <p>The behavior is different depending on the platform.</p> <p>UNIX- and Linux-based systems: A quoted 3-5 character string that defines the octal mode that is passed to chmod. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. If the value is specified as a quoted string, it works exactly as if the <code class=\"docutils literal\">chmod</code> command was passed. If the value is specified as an integer, prepend a zero (<code class=\"docutils literal\">0</code>) to the value to ensure that it is interpreted as an octal number. For example, to assign read, write, and execute rights for all users, use <code class=\"docutils literal\">'0777'</code> or <code class=\"docutils literal\">'777'</code>; for the same rights, plus the sticky bit, use <code class=\"docutils literal\">'01777'</code> or <code class=\"docutils literal\">'1777'</code>.</p> <p class=\"last\">Microsoft Windows: A quoted 3-5 character string that defines the octal mode that is translated into rights for Microsoft Windows security. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. Values up to <code class=\"docutils literal\">'0777'</code> are allowed (no sticky bits) and mean the same in Microsoft Windows as they do in UNIX, where <code class=\"docutils literal\">4</code> equals <code class=\"docutils literal\">GENERIC_READ</code>, <code class=\"docutils literal\">2</code> equals <code class=\"docutils literal\">GENERIC_WRITE</code>, and <code class=\"docutils literal\">1</code> equals <code class=\"docutils literal\">GENERIC_EXECUTE</code>. This property cannot be used to set <code class=\"docutils literal\">:full_control</code>. This property has no effect if not specified, but when it and <code class=\"docutils literal\">rights</code> are both specified, the effects are cumulative.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">owner</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">A string or ID that identifies the group owner by user name, including fully qualified user names such as <code class=\"docutils literal\">domain\\user</code> or <code class=\"docutils literal\">user@domain</code>. If this value is not specified, existing owners remain unchanged and new owner assignments use the current user (when necessary).</p> </dd> <dt><code class=\"docutils literal\">path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p>The full path to the file, including the file name and its extension. For example: <code class=\"docutils literal\">/files/file.txt</code>. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> <p class=\"last\">Microsoft Windows: A path that begins with a forward slash (<code class=\"docutils literal\">/</code>) will point to the root of the current working directory of the chef-client process. This path can vary from system to system. Therefore, using a path that begins with a forward slash (<code class=\"docutils literal\">/</code>) is not recommended.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">rights</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">Microsoft Windows only. The permissions for users and groups in a Microsoft Windows environment. For example: <code class=\"docutils literal\">rights &lt;permissions&gt;, &lt;principal&gt;, &lt;options&gt;</code> where <code class=\"docutils literal\">&lt;permissions&gt;</code> specifies the rights granted to the principal, <code class=\"docutils literal\">&lt;principal&gt;</code> is the group or user name, and <code class=\"docutils literal\">&lt;options&gt;</code> is a Hash with one (or more) advanced rights options.</p> </dd> <dt><code class=\"docutils literal\">sensitive</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Ensure that sensitive resource data is not logged by the chef-client. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">verify</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Block</p> <p>A block or a string that returns <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. A string, when <code class=\"docutils literal\">true</code> is executed as a system command.</p> <p>A block is arbitrary Ruby defined within the resource block by using the <code class=\"docutils literal\">verify</code> property. When a block is <code class=\"docutils literal\">true</code>, the chef-client will continue to update the file as appropriate.</p> <p>For example, this should return <code class=\"docutils literal\">true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file '/tmp/baz' do\n  verify { 1 == 1 }\nend</pre> <p>This should return <code class=\"docutils literal\">true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file '/etc/nginx.conf' do\n  verify 'nginx -t -c %{path}'\nend</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>For releases of the chef-client prior to 12.5 (chef-client 12.4 and earlier) the correct syntax is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file '/etc/nginx.conf' do\n  verify 'nginx -t -c %{file}'\nend</pre> <p class=\"last\">See GitHub issues <a class=\"reference external\" href=\"https://github.com/chef/chef/issues/3232\">https://github.com/chef/chef/issues/3232</a> and <a class=\"reference external\" href=\"https://github.com/chef/chef/pull/3693\">https://github.com/chef/chef/pull/3693</a> for more information about these differences.</p> </div> <p>This should return <code class=\"docutils literal\">true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file '/tmp/bar' do\n  verify { 1 == 1}\nend</pre> <p>And this should return <code class=\"docutils literal\">true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file '/tmp/foo' do\n  verify do |path|\n    true\n  end\nend</pre> <p>Whereas, this should return <code class=\"docutils literal\">false</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file '/tmp/turtle' do\n  verify '/usr/bin/false'\nend</pre> <p class=\"last\">If a string or a block return <code class=\"docutils literal\">false</code>, the chef-client run will stop and an error is returned.</p> </dd> </dl>  <h3 id=\"atomic-file-updates\">Atomic File Updates</h3> <p>Atomic updates are used with <strong>file</strong>-based resources to help ensure that file updates can be made when updating a binary or if disk space runs out.</p> <p>Atomic updates are enabled by default. They can be managed globally using the <code class=\"docutils literal\">file_atomic_update</code> setting in the client.rb file. They can be managed on a per-resource basis using the <code class=\"docutils literal\">atomic_update</code> property that is available with the <strong>cookbook_file</strong>, <strong>file</strong>, <strong>remote_file</strong>, and <strong>template</strong> resources.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">On certain platforms, and after a file has been moved into place, the chef-client may modify file permissions to support features specific to those platforms. On platforms with SELinux enabled, the chef-client will fix up the security contexts after a file has been moved into the correct location by running the <code class=\"docutils literal\">restorecon</code> command. On the Microsoft Windows platform, the chef-client will create files so that ACL inheritance works as expected.</p> </div>   <h3 id=\"windows-file-security\">Windows File Security</h3> <p>To support Microsoft Windows security, the <strong>template</strong>, <strong>file</strong>, <strong>remote_file</strong>, <strong>cookbook_file</strong>, <strong>directory</strong>, and <strong>remote_directory</strong> resources support the use of inheritance and access control lists (ACLs) within recipes.</p> <p><strong>Access Control Lists (ACLs)</strong></p> <p>The <code class=\"docutils literal\">rights</code> property can be used in a recipe to manage access control lists (ACLs), which allow permissions to be given to multiple users and groups. Use the <code class=\"docutils literal\">rights</code> property can be used as many times as necessary; the chef-client will apply them to the file or directory as required. The syntax for the <code class=\"docutils literal\">rights</code> property is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">rights permission, principal, option_type =&gt; value</pre> <p>where</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">permission</code></dt> <dd>\n<p class=\"first\">Use to specify which rights are granted to the <code class=\"docutils literal\">principal</code>. The possible values are: <code class=\"docutils literal\">:read</code>, <code class=\"docutils literal\">:write</code>, <code class=\"docutils literal\">read_execute</code>, <code class=\"docutils literal\">:modify</code>, and <code class=\"docutils literal\">:full_control</code>.</p> <p>These permissions are cumulative. If <code class=\"docutils literal\">:write</code> is specified, then it includes <code class=\"docutils literal\">:read</code>. If <code class=\"docutils literal\">:full_control</code> is specified, then it includes both <code class=\"docutils literal\">:write</code> and <code class=\"docutils literal\">:read</code>.</p> <p class=\"last\">(For those who know the Microsoft Windows API: <code class=\"docutils literal\">:read</code> corresponds to <code class=\"docutils literal\">GENERIC_READ</code>; <code class=\"docutils literal\">:write</code> corresponds to <code class=\"docutils literal\">GENERIC_WRITE</code>; <code class=\"docutils literal\">:read_execute</code> corresponds to <code class=\"docutils literal\">GENERIC_READ</code> and <code class=\"docutils literal\">GENERIC_EXECUTE</code>; <code class=\"docutils literal\">:modify</code> corresponds to <code class=\"docutils literal\">GENERIC_WRITE</code>, <code class=\"docutils literal\">GENERIC_READ</code>, <code class=\"docutils literal\">GENERIC_EXECUTE</code>, and <code class=\"docutils literal\">DELETE</code>; <code class=\"docutils literal\">:full_control</code> corresponds to <code class=\"docutils literal\">GENERIC_ALL</code>, which allows a user to change the owner and other metadata about a file.)</p> </dd> <dt><code class=\"docutils literal\">principal</code></dt> <dd>Use to specify a group or user name. This is identical to what is entered in the login box for Microsoft Windows, such as <code class=\"docutils literal\">user_name</code>, <code class=\"docutils literal\">domain\\user_name</code>, or <code class=\"docutils literal\">user_name@fully_qualified_domain_name</code>. The chef-client does not need to know if a principal is a user or a group.</dd> <dt><code class=\"docutils literal\">option_type</code></dt> <dd>\n<p class=\"first\">A hash that contains advanced rights options. For example, the rights to a directory that only applies to the first level of children might look something like: <code class=\"docutils literal\">rights :write, 'domain\\group_name', :one_level_deep =&gt; true</code>. Possible option types:</p> <table class=\"last docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option Type</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:applies_to_children</code></td> <td>Specify how permissions are applied to children. Possible values: <code class=\"docutils literal\">true</code> to inherit both child directories and files; <code class=\"docutils literal\">false</code> to not inherit any child directories or files; <code class=\"docutils literal\">:containers_only</code> to inherit only child directories (and not files); <code class=\"docutils literal\">:objects_only</code> to recursively inherit files (and not child directories).</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:applies_to_self</code></td> <td>Indicates whether a permission is applied to the parent directory. Possible values: <code class=\"docutils literal\">true</code> to apply to the parent directory or file and its children; <code class=\"docutils literal\">false</code> to not apply only to child directories and files.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:one_level_deep</code></td> <td>Indicates the depth to which permissions will be applied. Possible values: <code class=\"docutils literal\">true</code> to apply only to the first level of children; <code class=\"docutils literal\">false</code> to apply to all children.</td> </tr> </tbody> </table> </dd> </dl> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource 'x.txt' do\n  rights :read, 'Everyone'\n  rights :write, 'domain\\group'\n  rights :full_control, 'group_name_or_user_name'\n  rights :full_control, 'user_name', :applies_to_children =&gt; true\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">rights :read, ['Administrators','Everyone']\nrights :full_control, 'Users', :applies_to_children =&gt; true\nrights :write, 'Sally', :applies_to_children =&gt; :containers_only, :applies_to_self =&gt; false, :one_level_deep =&gt; true</pre> <p>Some other important things to know when using the <code class=\"docutils literal\">rights</code> attribute:</p> <ul class=\"simple\"> <li>Only inherited rights remain. All existing explicit rights on the object are removed and replaced.</li> <li>If rights are not specified, nothing will be changed. The chef-client does not clear out the rights on a file or directory if rights are not specified.</li> <li>Changing inherited rights can be expensive. Microsoft Windows will propagate rights to all children recursively due to inheritance. This is a normal aspect of Microsoft Windows, so consider the frequency with which this type of action is necessary and take steps to control this type of action if performance is the primary consideration.</li> </ul> <p>Use the <code class=\"docutils literal\">deny_rights</code> property to deny specific rights to specific users. The ordering is independent of using the <code class=\"docutils literal\">rights</code> property. For example, it doesn’t matter if rights are granted to everyone is placed before or after <code class=\"docutils literal\">deny_rights :read, ['Julian', 'Lewis']</code>, both Julian and Lewis will be unable to read the document. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource 'x.txt' do\n  rights :read, 'Everyone'\n  rights :write, 'domain\\group'\n  rights :full_control, 'group_name_or_user_name'\n  rights :full_control, 'user_name', :applies_to_children =&gt; true\n  deny_rights :read, ['Julian', 'Lewis']\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deny_rights :full_control, ['Sally']</pre> <p><strong>Inheritance</strong></p> <p>By default, a file or directory inherits rights from its parent directory. Most of the time this is the preferred behavior, but sometimes it may be necessary to take steps to more specifically control rights. The <code class=\"docutils literal\">inherits</code> property can be used to specifically tell the chef-client to apply (or not apply) inherited rights from its parent directory.</p> <p>For example, the following example specifies the rights for a directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor' do\n  rights :read, 'MORDOR\\Minions'\n  rights :full_control, 'MORDOR\\Sauron'\nend</pre> <p>and then the following example specifies how to use inheritance to deny access to the child directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor\\mount_doom' do\n  rights :full_control, 'MORDOR\\Sauron'\n  inherits false # Sauron is the only person who should have any sort of access\nend</pre> <p>If the <code class=\"docutils literal\">deny_rights</code> permission were to be used instead, something could slip through unless all users and groups were denied.</p> <p>Another example also shows how to specify rights for a directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor' do\n  rights :read, 'MORDOR\\Minions'\n  rights :full_control, 'MORDOR\\Sauron'\n  rights :write, 'SHIRE\\Frodo' # Who put that there I didn't put that there\nend</pre> <p>but then not use the <code class=\"docutils literal\">inherits</code> property to deny those rights on a child directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor\\mount_doom' do\n  deny_rights :read, 'MORDOR\\Minions' # Oops, not specific enough\nend</pre> <p>Because the <code class=\"docutils literal\">inherits</code> property is not specified, the chef-client will default it to <code class=\"docutils literal\">true</code>, which will ensure that security settings for existing files remain unchanged.</p>   <h3 id=\"windows-file-redirection\">Windows File Redirection</h3> <p>64-bit versions of Microsoft Windows have a 32-bit compatibility layer that redirects attempts by 32-bit application to access the <code class=\"docutils literal\">System32</code> directory to a different location. Starting with chef-client version 12.9, the 32-bit version of the chef-client is subject to the file redirection policy.</p> <p>For example, consider the following script:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">process_type = ENV['PROCESSOR_ARCHITECTURE'] == 'AMD64' ? '64-bit' : '32-bit'\nsystem32_dir = ::File.join(ENV['SYSTEMROOT'], 'system32')\ntest_dir = ::File.join(system32_dir, 'cheftest')\ntest_file = ::File.join(test_dir, 'chef_architecture.txt')\n\ndirectory test_dir do\n  # some directory\nend\n\nfile test_file do\n  content \"Chef made me, I come from a #{process_type} process.\"\nend</pre> <p>When running a 32-bit version of chef-client, the script will write the <code class=\"docutils literal\">chef_architecture</code> file to the <code class=\"docutils literal\">C:\\Windows\\SysWow64</code> directory. However, when running a native 64-bit version of the chef-client, the script will write a file to the <code class=\"docutils literal\">C:\\Windows\\System32</code> directory, as expected.</p> <p>For more information, see: <a class=\"reference external\" href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa384187(v=vs.85).aspx\">https://msdn.microsoft.com/en-us/library/windows/desktop/aa384187(v=vs.85).aspx</a>.</p>    <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Create a file</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file '/tmp/something' do\n  owner 'root'\n  group 'root'\n  mode '0755'\n  action :create\nend</pre> <p><strong>Create a file in Microsoft Windows</strong></p> <p>To create a file in Microsoft Windows, be sure to add an escape character—<code class=\"docutils literal\">\\</code>—before the backslashes in the paths:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file 'C:\\\\tmp\\\\something.txt' do\n  rights :read, 'Everyone'\n  rights :full_control, 'DOMAIN\\\\User'\n  action :create\nend</pre> <p><strong>Remove a file</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file '/tmp/something' do\n  action :delete\nend</pre> <p><strong>Set file modes</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file '/tmp/something' do\n  mode '0755'\nend</pre> <p><strong>Delete a repository using yum to scrub the cache</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># the following code sample thanks to gaffneyc @ https://gist.github.com/918711\n\nexecute 'clean-yum-cache' do\n  command 'yum clean all'\n  action :nothing\nend\n\nfile '/etc/yum.repos.d/bad.repo' do\n  action :delete\n  notifies :run, 'execute[clean-yum-cache]', :immediately\n  notifies :create, 'ruby_block[reload-internal-yum-cache]', :immediately\nend</pre> <p><strong>Add the value of a data bag item to a file</strong></p> <p>The following example shows how to get the contents of a data bag item named <code class=\"docutils literal\">impossible_things</code>, create a .pem file located at <code class=\"docutils literal\">some/directory/path/</code>, and then use the <code class=\"docutils literal\">content</code> attribute to update the contents of that file with the value of the <code class=\"docutils literal\">impossible_things</code> data bag item:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">private_key = data_bag_item('impossible_things', private_key_name)['private_key']\n\nfile \"some/directory/path/#{private_key_name}.pem\" do\n  content private_key\n  owner 'root'\n  group 'group'\n  mode '0755'\nend</pre> <p><strong>Write a YAML file</strong></p> <p>The following example shows how to use the <code class=\"docutils literal\">content</code> property to write a YAML file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file \"#{app['deploy_to']}/shared/config/settings.yml\" do\n  owner \"app['owner']\"\n  group \"app['group']\"\n  mode '0755'\n  content app.to_yaml\nend</pre> <p><strong>Write a string to a file</strong></p> <p>The following example specifies a directory, and then uses the <code class=\"docutils literal\">content</code> property to add a string to the file created in that directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">status_file = '/path/to/file/status_file'\n\nfile status_file do\n  owner 'root'\n  group 'root'\n  mode '0755'\n  content 'My favourite foremost coastal Antarctic shelf, oh Larsen B!'\nend</pre> <p><strong>Create a file from a copy</strong></p> <p>The following example shows how to copy a file from one directory to another, locally on a node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file '/root/1.txt' do\n  content IO.read('/tmp/1.txt')\n  action :create\nend</pre> <p>where the <code class=\"docutils literal\">content</code> attribute uses the Ruby <code class=\"docutils literal\">IO.read</code> method to get the contents of the <code class=\"docutils literal\">/tmp/1.txt</code> file.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_file.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_file.html</a>\n  </p>\n</div>\n","12-9/resource_group":"<h1 id=\"group\">group</h1> <p>Use the <strong>group</strong> resource to manage a local group.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>group</strong> resource block manages groups on a node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">group 'www-data' do\n  action :modify\n  members 'maintenance'\n  append true\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>group</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">group 'name' do\n  append                     TrueClass, FalseClass\n  excluded_members           Array\n  gid                        String, Integer\n  group_name                 String # defaults to 'name' if not specified\n  members                    Array\n  non_unique                 TrueClass, FalseClass\n  notifies                   # see description\n  provider                   Chef::Provider::Group\n  subscribes                 # see description\n  system                     TrueClass, FalseClass\n  action                     Symbol # defaults to :create if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">group</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">append</code>, <code class=\"docutils literal\">excluded_members</code>, <code class=\"docutils literal\">gid</code>, <code class=\"docutils literal\">group_name</code>, <code class=\"docutils literal\">members</code>, <code class=\"docutils literal\">non_unique</code>, <code class=\"docutils literal\">provider</code>, and <code class=\"docutils literal\">system</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:create</code></dt> <dd>Default. Create a group. If a group already exists (but does not match), update that group to match.</dd> <dt><code class=\"docutils literal\">:manage</code></dt> <dd>Manage an existing group. This action does nothing if the group does not exist.</dd> <dt><code class=\"docutils literal\">:modify</code></dt> <dd>Modify an existing group. This action raises an exception if the group does not exist.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a group.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">append</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">How members should be appended and/or removed from a group. When <code class=\"docutils literal\">true</code>, <code class=\"docutils literal\">members</code> are appended and <code class=\"docutils literal\">excluded_members</code> are removed. When <code class=\"docutils literal\">false</code>, group members are reset to the value of the <code class=\"docutils literal\">members</code> property. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">excluded_members</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p class=\"last\">Remove users from a group. May only be used when <code class=\"docutils literal\">append</code> is set to <code class=\"docutils literal\">true</code>.</p> </dd> <dt><code class=\"docutils literal\">gid</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The identifier for the group.</p> </dd> <dt><code class=\"docutils literal\">group_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The name of the group. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">members</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p class=\"last\">Which users should be set or appended to a group. When more than one group member is identified, the list of members should be an array: <code class=\"docutils literal\">members ['user1', 'user2']</code>.</p> </dd> <dt><code class=\"docutils literal\">non_unique</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Allow <code class=\"docutils literal\">gid</code> duplication. May only be used with the <code class=\"docutils literal\">Groupadd</code> provider. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">system</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Show if a group belongs to a system group. Set to <code class=\"docutils literal\">true</code> if the group belongs to a system group.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Group</code>, <code class=\"docutils literal\">group</code>\n</dt> <dd>When this short name is used, the chef-client will determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Group::Aix</code>, <code class=\"docutils literal\">group</code>\n</dt> <dd>The provider for the AIX platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Group::Dscl</code>, <code class=\"docutils literal\">group</code>\n</dt> <dd>The provider for the Mac OS X platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Group::Gpasswd</code>, <code class=\"docutils literal\">group</code>\n</dt> <dd>The provider for the gpasswd command.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Group::Groupadd</code>, <code class=\"docutils literal\">group</code>\n</dt> <dd>The provider for the groupadd command.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Group::Groupmod</code>, <code class=\"docutils literal\">group</code>\n</dt> <dd>The provider for the groupmod command.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Group::Pw</code>, <code class=\"docutils literal\">group</code>\n</dt> <dd>The provider for the FreeBSD platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Group::Suse</code>, <code class=\"docutils literal\">group</code>\n</dt> <dd>The provider for the openSUSE platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Group::Usermod</code>, <code class=\"docutils literal\">group</code>\n</dt> <dd>The provider for the Solaris platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Group::Windows</code>, <code class=\"docutils literal\">group</code>\n</dt> <dd>The provider for the Microsoft Windows platform.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Append users to groups</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">group 'www-data' do\n  action :modify\n  members 'maintenance'\n  append true\nend</pre> <p><strong>Add a user to group on the Windows platform</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">group 'Administrators' do\n  members ['domain\\foo']\n  append true\n  action :modify\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_group.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_group.html</a>\n  </p>\n</div>\n","12-9/resource_homebrew_package":"<h1 id=\"homebrew-package\">homebrew_package</h1> <p>Use the <strong>homebrew_package</strong> resource to manage packages for the Mac OS X platform.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>homebrew_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>homebrew_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">homebrew_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>homebrew_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">homebrew_package 'name' do\n  homebrew_user              String, Integer\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::Homebrew\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">homebrew_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">homebrew_user</code>, <code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:purge</code></dt> <dd>Purge a package. This action typically removes the configuration files as well as the package.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> <dt><code class=\"docutils literal\">:upgrade</code></dt> <dd>Install a package and/or ensure that a package is the latest version.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">homebrew_user</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p>The name of the Homebrew owner to be used by the chef-client when executing a command.</p> <p class=\"last\">The chef-client, by default, will attempt to execute a Homebrew command as the owner of <code class=\"docutils literal\">/usr/local/bin/brew</code>. If that executable does not exist, the chef-client will attempt to find the user by executing <code class=\"docutils literal\">which brew</code>. If that executable cannot be found, the chef-client will print an error message: <code class=\"docutils literal\">Could not find the \"brew\" executable in /usr/local/bin or anywhere on the path.</code>. Use the <code class=\"docutils literal\">homebrew_user</code> attribute to specify the Homebrew owner for situations where the chef-client cannot automatically detect the correct owner.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The path to a package in the local file system.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Homebrew</code>, <code class=\"docutils literal\">homebrew_package</code>\n</dt> <dd>The provider for the Mac OS X platform.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">homebrew_package 'name of package' do\n  action :install\nend</pre> <p><strong>Specify the Homebrew user with a UUID</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">homebrew_package 'emacs' do\n  homebrew_user 1001\nend</pre> <p><strong>Specify the Homebrew user with a string</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">homebrew_package 'vim' do\n  homebrew_user 'user1'\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_homebrew_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_homebrew_package.html</a>\n  </p>\n</div>\n","12-9/dsl_recipe":"<h1 id=\"about-the-recipe-dsl\">About the Recipe DSL</h1> <p>The Recipe DSL is a Ruby DSL that is primarily used to declare resources from within a recipe. The Recipe DSL also helps ensure that recipes interact with nodes (and node properties) in the desired manner. Most of the methods in the Recipe DSL are used to find a specific parameter and then tell the chef-client what action(s) to take, based on whether that parameter is present on a node.</p> <p>Because the Recipe DSL is a Ruby DSL, then anything that can be done using Ruby can also be done in a recipe, including <code class=\"docutils literal\">if</code> and <code class=\"docutils literal\">case</code> statements, using the <code class=\"docutils literal\">include?</code> Ruby method, including recipes in recipes, and checking for dependencies.</p>  <h2 id=\"use-ruby\">Use Ruby</h2> <p>Common Ruby techniques can be used with the Recipe DSL methods.</p>  <h3 id=\"if-statements\">if Statements</h3> <p>An <code class=\"docutils literal\">if</code> statement can be used to specify part of a recipe to be used when certain conditions are met. <code class=\"docutils literal\">else</code> and <code class=\"docutils literal\">elseif</code> statements can be used to handle situations where either the initial condition is not met or when there are other possible conditions that can be met. Since this behavior is 100% Ruby, do this in a recipe the same way here as anywhere else.</p> <p>For example, using an <code class=\"docutils literal\">if</code> statement with the <code class=\"docutils literal\">platform</code> node attribute:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if node['platform'] == 'ubuntu'\n  # do ubuntu things\nend</pre>   <h3 id=\"case-statements\">case Statements</h3> <p>A <code class=\"docutils literal\">case</code> statement can be used to handle a situation where there are a lot of conditions. Use the <code class=\"docutils literal\">when</code> statement for each condition, as many as are required.</p> <p>For example, using a <code class=\"docutils literal\">case</code> statement with the <code class=\"docutils literal\">platform</code> node attribute:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">case node['platform']\nwhen 'debian', 'ubuntu'\n  # do debian/ubuntu things\nwhen 'redhat', 'centos', 'fedora'\n  # do redhat/centos/fedora things\nend</pre> <p>For example, using a <code class=\"docutils literal\">case</code> statement with the <code class=\"docutils literal\">platform_family</code> node attribute:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">case node['platform_family']\nwhen 'debian'\n  # do things on debian-ish platforms (debian, ubuntu, linuxmint)\nwhen 'rhel'\n  # do things on RHEL platforms (redhat, centos, scientific, etc)\nend</pre>   <h3 id=\"include-method\">include? Method</h3> <p>The <code class=\"docutils literal\">include?</code> method can be used to ensure that a specific parameter is included before an action is taken. For example, using the <code class=\"docutils literal\">include?</code> method to find a specific parameter:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if ['debian', 'ubuntu'].include?(node['platform'])\n  # do debian/ubuntu things\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if %w{rhel}.include?(node['platform_family'])\n  # do RHEL things\nend</pre>   <h3 id=\"array-syntax-shortcut\">Array Syntax Shortcut</h3> <p>The <code class=\"docutils literal\">%w</code> syntax is a Ruby shortcut for creating an array without requiring quotes and commas around the elements.</p> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if %w{debian ubuntu}.include?(node['platform'])\n  # do debian/ubuntu things with the Ruby array %w{} shortcut\nend</pre>    <h2 id=\"include-recipes\">Include Recipes</h2> <p>A recipe can include one (or more) recipes located in external cookbooks by using the <code class=\"docutils literal\">include_recipe</code> method. When a recipe is included, the resources found in that recipe will be inserted (in the same exact order) at the point where the <code class=\"docutils literal\">include_recipe</code> keyword is located.</p> <p>The syntax for including a recipe is like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">include_recipe 'recipe'</pre> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">include_recipe 'apache2::mod_ssl'</pre> <p>If the <code class=\"docutils literal\">include_recipe</code> method is used more than once to include a recipe, only the first inclusion is processed and any subsequent inclusions are ignored.</p>  <h3 id=\"reload-attributes\">Reload Attributes</h3> <p>Attributes sometimes depend on actions taken from within recipes, so it may be necessary to reload a given attribute from within a recipe. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ruby_block 'some_code' do\n  block do\n    node.from_file(run_context.resolve_attribute('COOKBOOK_NAME', 'ATTR_FILE'))\n  end\n  action :nothing\nend</pre>   <h3 id=\"accessor-methods\">Accessor Methods</h3> <p>Attribute accessor methods are automatically created and the method invocation can be used interchangeably with the keys. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default.apache.dir          = '/etc/apache2'\ndefault.apache.listen_ports = [ '80','443' ]</pre> <p>This is a matter of style and preference for how attributes are reloaded from recipes, and may be seen when retrieving the value of an attribute.</p>    <h2 id=\"dsl-recipe-methods\">Recipe DSL Methods</h2> <p>The Recipe DSL provides support for using attributes, data bags (and encrypted data), and search results in a recipe, as well as four helper methods that can be used to check for a node’s platform from the recipe to ensure that specific actions are taken for specific platforms. The helper methods are:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">platform?</code></li> <li><code class=\"docutils literal\">platform_family?</code></li> <li><code class=\"docutils literal\">value_for_platform</code></li> <li><code class=\"docutils literal\">value_for_platform_family</code></li> </ul>  <h3 id=\"attribute\">attribute?</h3> <p>Use the <code class=\"docutils literal\">attribute?</code> method to ensure that certain actions only execute in the presence of a particular node attribute. The <code class=\"docutils literal\">attribute?</code> method will return true if one of the listed node attributes matches a node attribute that is detected by Ohai during every chef-client run.</p> <p>The syntax for the <code class=\"docutils literal\">attribute?</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">attribute?('name_of_attribute')</pre> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if node.attribute?('ipaddress')\n  # the node has an ipaddress\nend</pre>   <h3 id=\"control\">control</h3> <p>A control is an automated test that is built into a cookbook, and then used to test the state of the system for compliance. Compliance can be many things. For example, ensuring that file and directory management meets specific internal IT policies—”Does the file exist?”, “Do the correct users or groups have access to this directory?”. Compliance may also be complex, such as helping to ensure goals defined by large-scale compliance frameworks such as PCI, HIPAA, and Sarbanes-Oxley can be met.</p> <p>Use the <code class=\"docutils literal\">control</code> method to define a specific series of tests that comprise an individual audit. A <code class=\"docutils literal\">control</code> method MUST be contained within a <code class=\"docutils literal\">control_group</code> block. A <code class=\"docutils literal\">control_group</code> block may contain multiple <code class=\"docutils literal\">control</code> methods.</p> <p>The syntax for the <code class=\"docutils literal\">control</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">control_group 'audit name' do\n  control 'name' do\n    it 'should do something' do\n      expect(something).to/.to_not be_something\n    end\n  end\nend</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">control_group</code> groups one (or more) <code class=\"docutils literal\">control</code> blocks</li> <li>\n<code class=\"docutils literal\">control 'name' do</code> defines an individual audit</li> <li>Each <code class=\"docutils literal\">control</code> block must define at least one validation</li> <li>Each <code class=\"docutils literal\">it</code> statement defines a single validation. <code class=\"docutils literal\">it</code> statements are processed individually when the chef-client is run in audit-mode</li> <li>An <code class=\"docutils literal\">expect(something).to/.to_not be_something</code> is a statement that represents the individual test. In other words, this statement tests if something is expected to be (or not be) something. For example, a test that expects the PostgreSQL pacakge to not be installed would be similar to <code class=\"docutils literal\">expect(package('postgresql')).to_not be_installed</code> and a test that ensures a service is enabled would be similar to <code class=\"docutils literal\">expect(service('init')).to be_enabled</code>\n</li> <li>An <code class=\"docutils literal\">it</code> statement may contain multiple <code class=\"docutils literal\">expect</code> statements</li> </ul>  <h4 id=\"directory-matcher\">directory Matcher</h4> <p>Matchers are available for directories. Use this matcher to define audits for directories that test if the directory exists, is mounted, and if it is linked to. This matcher uses the same matching syntax—<code class=\"docutils literal\">expect(file('foo'))</code>—as the files. The following matchers are available for directories:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Matcher</th> <th class=\"head\">Description, Example</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">be_directory</code></td> <td>\n<p class=\"first\">Use to test if directory exists. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be a directory' do\n  expect(file('/var/directory')).to be_directory\nend</pre> </td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">be_linked_to</code></td> <td>\n<p class=\"first\">Use to test if a subject is linked to the named directory. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be linked to the named directory' do\n  expect(file('/etc/directory')).to be_linked_to('/etc/some/other/directory')\nend</pre> </td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">be_mounted</code></td> <td>\n<p class=\"first\">Use to test if a directory is mounted. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be mounted' do\n  expect(file('/')).to be_mounted\nend</pre> <p>For directories with a single attribute that requires testing:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be mounted with an ext4 partition' do\n  expect(file('/')).to be_mounted.with( :type =&gt; 'ext4' )\nend</pre> <p>For directories with multiple attributes that require testing:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be mounted only with certain attributes' do\n  expect(file('/')).to be_mounted.only_with(\n    :attribute =&gt; 'value',\n    :attribute =&gt; 'value',\n)\nend</pre> </td> </tr> </tbody> </table>   <h4 id=\"file-matcher\">file Matcher</h4> <p>Matchers are available for files and directories. Use this matcher to define audits for files that test if the file exists, its version, if it is is executable, writable, or readable, who owns it, verify checksums (both MD5 and SHA-256) and so on. The following matchers are available for files:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Matcher</th> <th class=\"head\">Description, Example</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">be_executable</code></td> <td>\n<p class=\"first\">Use to test if a file is executable. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be executable' do\n  expect(file('/etc/file')).to be_executable\nend</pre> <p>For a file that is executable by its owner:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be executable by owner' do\n  expect(file('/etc/file')).to be_executable.by('owner')\nend</pre> <p>For a file that is executable by a group:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be executable by group members' do\n  expect(file('/etc/file')).to be_executable.by('group')\nend</pre> <p>For a file that is executable by a specific user:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be executable by user foo' do\n  expect(file('/etc/file')).to be_executable.by_user('foo')\nend</pre> </td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">be_file</code></td> <td>\n<p class=\"first\">Use to test if a file exists. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be a file' do\n  expect(file('/etc/file')).to be_file\nend</pre> </td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">be_grouped_into</code></td> <td>\n<p class=\"first\">Use to test if a file is grouped into the named group. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be grouped into foo' do\n  expect(file('/etc/file')).to be_grouped_into('foo')\nend</pre> </td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">be_linked_to</code></td> <td>\n<p class=\"first\">Use to test if a subject is linked to the named file. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be linked to the named file' do\n  expect(file('/etc/file')).to be_linked_to('/etc/some/other/file')\nend</pre> </td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">be_mode</code></td> <td>\n<p class=\"first\">Use to test if a file is set to the specified mode. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be mode 440' do\n  expect(file('/etc/file')).to be_mode(440)\nend</pre> </td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">be_owned_by</code></td> <td>\n<p class=\"first\">Use to test if a file is owned by the named owner. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be owned by the root user' do\n  expect(file('/etc/sudoers')).to be_owned_by('root')\nend</pre> </td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">be_readable</code></td> <td>\n<p class=\"first\">Use to test if a file is readable. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be readable' do\n  expect(file('/etc/file')).to be_readable\nend</pre> <p>For a file that is readable by its owner:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be readable by owner' do\n  expect(file('/etc/file')).to be_readable.by('owner')\nend</pre> <p>For a file that is readable by a group:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be readable by group members' do\n  expect(file('/etc/file')).to be_readable.by('group')\nend</pre> <p>For a file that is readable by a specific user:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be readable by user foo' do\n  expect(file('/etc/file')).to be_readable.by_user('foo')\nend</pre> </td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">be_socket</code></td> <td>\n<p class=\"first\">Use to test if a file exists as a socket. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be a socket' do\n  expect(file('/var/file.sock')).to be_socket\nend</pre> </td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">be_symlink</code></td> <td>\n<p class=\"first\">Use to test if a file exists as a symbolic link. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be a symlink' do\n  expect(file('/etc/file')).to be_symlink\nend</pre> </td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">be_version</code></td> <td>\n<p class=\"first\">Microsoft Windows only. Use to test if a file is the specified version. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be version 1.2' do\n  expect(file('C:\\\\Windows\\\\path\\\\to\\\\file')).to be_version('1.2')\nend</pre> </td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">be_writable</code></td> <td>\n<p class=\"first\">Use to test if a file is writable. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be writable' do\n  expect(file('/etc/file')).to be_writable\nend</pre> <p>For a file that is writable by its owner:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be writable by owner' do\n  expect(file('/etc/file')).to be_writable.by('owner')\nend</pre> <p>For a file that is writable by a group:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be writable by group members' do\n  expect(file('/etc/file')).to be_writable.by('group')\nend</pre> <p>For a file that is writable by a specific user:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be writable by user foo' do\n  expect(file('/etc/file')).to be_writable.by_user('foo')\nend</pre> </td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">contain</code></td> <td>\n<p class=\"first\">Use to test if a file contains specific contents. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should contain docs.chef.io' do\n  expect(file('/etc/file')).to contain('docs.chef.io')\nend</pre> </td> </tr> </tbody> </table>   <h4 id=\"package-matcher\">package Matcher</h4> <p>Matchers are available for packages and may be used to define audits that test if a package or a package version is installed. The following matchers are available:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Matcher</th> <th class=\"head\">Description, Example</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">be_installed</code></td> <td>\n<p class=\"first\">Use to test if the named package is installed. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be installed' do\n  expect(package('httpd')).to be_installed\nend</pre> <p>For a specific package version:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be installed' do\n  expect(package('httpd')).to be_installed.with_version('0.1.2')\nend</pre> </td> </tr> </tbody> </table>   <h4 id=\"port-matcher\">port Matcher</h4> <p>Matchers are available for ports and may be used to define audits that test if a port is listening. The following matchers are available:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Matcher</th> <th class=\"head\">Description, Example</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">be_listening</code></td> <td>\n<p class=\"first\">Use to test if the named port is listening. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be listening' do\n  expect(port(23)).to be_listening\nend</pre> <p>For a named port that is not listening:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should not be listening' do\n  expect(port(23)).to_not be_listening\nend</pre> <p>For a specific port type use <code class=\"docutils literal\">.with('port_type')</code>. For example, UDP:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be listening with UDP' do\n  expect(port(23)).to_not be_listening.with('udp')\nend</pre> <p>For UDP, version 6:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be listening with UDP6' do\n  expect(port(23)).to_not be_listening.with('udp6')\nend</pre> <p>For TCP/IP:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be listening with TCP' do\n  expect(port(23)).to_not be_listening.with('tcp')\nend</pre> <p>For TCP/IP, version 6:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be listening with TCP6' do\n  expect(port(23)).to_not be_listening.with('tcp6')\nend</pre> </td> </tr> </tbody> </table>   <h4 id=\"service-matcher\">service Matcher</h4> <p>Matchers are available for services and may be used to define audits that test for conditions related to services, such as if they are enabled, running, have the correct startup mode, and so on. The following matchers are available:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Matcher</th> <th class=\"head\">Description, Example</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">be_enabled</code></td> <td>\n<p class=\"first\">Use to test if the named service is enabled (i.e. will start up automatically). For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be enabled' do\n  expect(service('ntpd')).to be_enabled\nend</pre> <p>For a service that is enabled at a given run level:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be enabled at the specified run level' do\n  expect(service('ntpd')).to be_enabled.with_level(3)\nend</pre> </td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">be_installed</code></td> <td>\n<p class=\"first\">Microsoft Windows only. Use to test if the named service is installed on the Microsoft Windows platform. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be installed' do\n  expect(service('DNS Client')).to be_installed\nend</pre> </td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">be_running</code></td> <td>\n<p class=\"first\">Use to test if the named service is running. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be running' do\n  expect(service('ntpd')).to be_running\nend</pre> <p>For a service that is running under supervisor:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be running under supervisor' do\n  expect(service('ntpd')).to be_running.under('supervisor')\nend</pre> <p>or daemontools:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">it 'should be running under daemontools' do\n  expect(service('ntpd')).to be_running.under('daemontools')\nend</pre> <p>or Upstart:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be running under upstart' do\n  expect(service('ntpd')).to be_running.under('upstart')\nend</pre> </td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">be_monitored_by</code></td> <td>\n<p class=\"first\">Use to test if the named service is being monitored by the named monitoring application. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should be monitored by' do\n  expect(service('ntpd')).to be_monitored_by('monit')\nend</pre> </td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">have_start_mode</code></td> <td>\n<p class=\"first\">Microsoft Windows only. Use to test if the named service’s startup mode is correct on the Microsoft Windows platform. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">it 'should start manually' do\n  expect(service('DNS Client')).to have_start_mode.Manual\nend</pre> </td> </tr> </tbody> </table>   <h4 id=\"examples\">Examples</h4> <p><strong>A package is installed</strong></p> <p>For example, a package is installed:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">control_group 'audit name' do\n  control 'mysql package' do\n    it 'should be installed' do\n      expect(package('mysql')).to be_installed\n    end\n  end\nend</pre> <p>The <code class=\"docutils literal\">control_group</code> block is processed when the chef-client run is run in audit-mode. If the audit was successful, the chef-client will return output similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Audit Mode\n  mysql package\n    should be installed</pre> <p>If an audit was unsuccessful, the chef-client will return output similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Starting audit phase\n\nAudit Mode\n  mysql package\n  should be installed (FAILED - 1)\n\nFailures:\n\n1) Audit Mode mysql package should be installed\n  Failure/Error: expect(package('mysql')).to be_installed.with_version('5.6')\n    expected Package 'mysql' to be installed\n  # /var/chef/cache/cookbooks/grantmc/recipes/default.rb:22:in 'block (3 levels) in from_file'\n\nFinished in 0.5745 seconds (files took 0.46481 seconds to load)\n1 examples, 1 failures\n\nFailed examples:\n\nrspec /var/chef/cache/cookbooks/grantmc/recipes/default.rb:21 # Audit Mode mysql package should be installed</pre> <p><strong>A package version is installed</strong></p> <p>A package that is installed with a specific version:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">control_group 'audit name' do\n  control 'mysql package' do\n    it 'should be installed' do\n      expect(package('mysql')).to be_installed.with_version('5.6')\n    end\n  end\nend</pre> <p><strong>A package is not installed</strong></p> <p>A package that is not installed:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">control_group 'audit name' do\n  control 'postgres package' do\n    it 'should not be installed' do\n      expect(package('postgresql')).to_not be_installed\n    end\n  end\nend</pre> <p>If the audit was successful, the chef-client will return output similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Audit Mode\n  postgres audit\n    postgres package\n      is not installed</pre> <p><strong>A service is enabled</strong></p> <p>A service that is enabled and running:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">control_group 'audit name' do\n  control 'mysql service' do\n    let(:mysql_service) { service('mysql') }\n    it 'should be enabled' do\n      expect(mysql_service).to be_enabled\n    end\n    it 'should be running' do\n      expect(mysql_service).to be_running\n    end\n  end\nend</pre> <p>If the audit was successful, the chef-client will return output similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Audit Mode\n  mysql service audit\n    mysql service\n      is enabled\n      is running</pre> <p><strong>A configuration file contains specific settings</strong></p> <p>The following example shows how to verify <code class=\"docutils literal\">sshd</code> configration, including whether it’s installed, what the permissions are, and how it can be accessed:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">control_group 'check sshd configuration' do\n\n  control 'sshd package' do\n    it 'should be installed' do\n      expect(package('openssh-server')).to be_installed\n    end\n  end\n\n  control 'sshd configuration' do\n    let(:config_file) { file('/etc/ssh/sshd_config') }\n    it 'should exist with the right permissions' do\n      expect(config_file).to be_file\n      expect(config_file).to be_mode(644)\n      expect(config_file).to be_owned_by('root')\n      expect(config_file).to be_grouped_into('root')\n    end\n    it 'should not permit RootLogin' do\n      expect(config_file.content).to_not match(/^PermitRootLogin yes/)\n    end\n    it 'should explicitly not permit PasswordAuthentication' do\n      expect(config_file.content).to match(/^PasswordAuthentication no/)\n    end\n    it 'should force privilege separation' do\n      expect(config_file.content).to match(/^UsePrivilegeSeparation sandbox/)\n    end\n  end\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">let(:config_file) { file('/etc/ssh/sshd_config') }</code> uses the <code class=\"docutils literal\">file</code> matcher to test specific settings within the <code class=\"docutils literal\">sshd</code> configuration file</li> </ul> <p><strong>A file contains desired permissions and contents</strong></p> <p>The following example shows how to verify that a file has the desired permissions and contents:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">controls 'mysql config' do\n  control 'mysql config file' do\n    let(:config_file) { file('/etc/mysql/my.cnf') }\n    it 'exists with correct permissions' do\n      expect(config_file).to be_file\n      expect(config_file).to be_mode(0400)\n    end\n    it 'contains required configuration' do\n      expect(its(:contents)).to match(/default-time-zone='UTC'/)\n    end\n  end\nend</pre> <p>If the audit was successful, the chef-client will return output similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Audit Mode\n  mysql config\n    mysql config file\n      exists with correct permissions\n      contains required configuration</pre> <p><strong>Test an attribute value</strong></p> <p>To audit attribute values in a <code class=\"docutils literal\">control</code> block, first assign the attribute as a variable, and then use the variable within the <code class=\"docutils literal\">control</code> block to specify the test:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">memory_mb = node['memory']['total'].gsub(/kB$/i, '').to_i / 1024\ncontrol 'minimum memory check' do\n  it 'should be at least 400MB free' do\n    expect(memory_mb).to be &gt;= 400\n  end\nend</pre>    <h3 id=\"control-group\">control_group</h3> <p>Use the <code class=\"docutils literal\">control_group</code> method to define a group of <code class=\"docutils literal\">control</code> methods that comprise a single audit. The name of each <code class=\"docutils literal\">control_group</code> must be unique within the organization.</p> <p>The syntax for the <code class=\"docutils literal\">control_group</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">control_group 'name' do\n  control 'name' do\n    it 'should do something' do\n      expect(something).to/.to_not be_something\n    end\n  end\n  control 'name' do\n    ...\n  end\n  ...\nend</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">control_group</code> groups one (or more) <code class=\"docutils literal\">control</code> blocks</li> <li>\n<code class=\"docutils literal\">'name'</code> is the unique name for the <code class=\"docutils literal\">control_group</code>; the chef-client will raise an exception if duplicate <code class=\"docutils literal\">control_group</code> names are present</li> <li>\n<code class=\"docutils literal\">control</code> defines each individual audit within the <code class=\"docutils literal\">control_group</code> block. There is no limit to the number of <code class=\"docutils literal\">control</code> blocks that may defined within a <code class=\"docutils literal\">control_group</code> block</li> </ul>  <h4 id=\"id1\">Examples</h4> <p><strong>control_group block with multiple control blocks</strong></p> <p>The following <code class=\"docutils literal\">control_group</code> ensures that MySQL is installed, that PostgreSQL is not installed, and that the services and configuration files associated with MySQL are configured correctly:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">control_group 'Audit Mode' do\n\n  control 'mysql package' do\n    it 'should be installed' do\n      expect(package('mysql')).to be_installed.with_version('5.6')\n    end\n  end\n\n  control 'postgres package' do\n    it 'should not be installed' do\n      expect(package('postgresql')).to_not be_installed\n    end\n  end\n\n  control 'mysql service' do\n    let(:mysql_service) { service('mysql') }\n    it 'should be enabled' do\n      expect(mysql_service).to be_enabled\n    end\n    it 'should be running' do\n      expect(mysql_service).to be_running\n    end\n  end\n\n  control 'mysql config directory' do\n    let(:config_dir) { file('/etc/mysql') }\n    it 'should exist with correct permissions' do\n      expect(config_dir).to be_directory\n      expect(config_dir).to be_mode(0700)\n    end\n    it 'should be owned by the db user' do\n      expect(config_dir).to be_owned_by('db_service_user')\n    end\n  end\n\n  control 'mysql config file' do\n    let(:config_file) { file('/etc/mysql/my.cnf') }\n    it 'should exist with correct permissions' do\n      expect(config_file).to be_file\n      expect(config_file).to be_mode(0400)\n    end\n    it 'should contain required configuration' do\n      expect(config_file.content).to match(/default-time-zone='UTC'/)\n    end\n  end\n\nend</pre> <p>The <code class=\"docutils literal\">control_group</code> block is processed when the chef-client is run in audit-mode. If the chef-client run was successful, the chef-client will return output similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Audit Mode\n  mysql package\n    should be installed\n  postgres package\n    should not be installed\n  mysql service\n    should be enabled\n    should be running\n  mysql config directory\n    should exist with correct permissions\n    should be owned by the db user\n  mysql config file\n    should exist with correct permissions\n    should contain required configuration</pre> <p>If an audit was unsuccessful, the chef-client will return output similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Starting audit phase\n\nAudit Mode\n  mysql package\n  should be installed (FAILED - 1)\npostgres package\n  should not be installed\nmysql service\n  should be enabled (FAILED - 2)\n  should be running (FAILED - 3)\nmysql config directory\n  should exist with correct permissions (FAILED - 4)\n  should be owned by the db user (FAILED - 5)\nmysql config file\n  should exist with correct permissions (FAILED - 6)\n  should contain required configuration (FAILED - 7)\n\nFailures:\n\n1) Audit Mode mysql package should be installed\n  Failure/Error: expect(package('mysql')).to be_installed.with_version('5.6')\n    expected Package 'mysql' to be installed\n  # /var/chef/cache/cookbooks/grantmc/recipes/default.rb:22:in 'block (3 levels) in from_file'\n\n2) Audit Mode mysql service should be enabled\n  Failure/Error: expect(mysql_service).to be_enabled\n    expected Service 'mysql' to be enabled\n  # /var/chef/cache/cookbooks/grantmc/recipes/default.rb:35:in 'block (3 levels) in from_file'\n\n3) Audit Mode mysql service should be running\n   Failure/Error: expect(mysql_service).to be_running\n    expected Service 'mysql' to be running\n  # /var/chef/cache/cookbooks/grantmc/recipes/default.rb:38:in 'block (3 levels) in from_file'\n\n4) Audit Mode mysql config directory should exist with correct permissions\n  Failure/Error: expect(config_dir).to be_directory\n    expected `File '/etc/mysql'.directory?` to return true, got false\n  # /var/chef/cache/cookbooks/grantmc/recipes/default.rb:45:in 'block (3 levels) in from_file'\n\n5) Audit Mode mysql config directory should be owned by the db user\n  Failure/Error: expect(config_dir).to be_owned_by('db_service_user')\n    expected `File '/etc/mysql'.owned_by?('db_service_user')` to return true, got false\n  # /var/chef/cache/cookbooks/grantmc/recipes/default.rb:49:in 'block (3 levels) in from_file'\n\n6) Audit Mode mysql config file should exist with correct permissions\n  Failure/Error: expect(config_file).to be_file\n    expected `File '/etc/mysql/my.cnf'.file?` to return true, got false\n  # /var/chef/cache/cookbooks/grantmc/recipes/default.rb:56:in 'block (3 levels) in from_file'\n\n7) Audit Mode mysql config file should contain required configuration\n  Failure/Error: expect(config_file.content).to match(/default-time-zone='UTC'/)\n    expected '-n\\n' to match /default-time-zone='UTC'/\n    Diff:\n    @@ -1,2 +1,2 @@\n    -/default-time-zone='UTC'/\n    +-n\n  # /var/chef/cache/cookbooks/grantmc/recipes/default.rb:60:in 'block (3 levels) in from_file'\n\nFinished in 0.5745 seconds (files took 0.46481 seconds to load)\n8 examples, 7 failures\n\nFailed examples:\n\nrspec /var/chef/cache/cookbooks/grantmc/recipes/default.rb:21 # Audit Mode mysql package should be installed\nrspec /var/chef/cache/cookbooks/grantmc/recipes/default.rb:34 # Audit Mode mysql service should be enabled\nrspec /var/chef/cache/cookbooks/grantmc/recipes/default.rb:37 # Audit Mode mysql service should be running\nrspec /var/chef/cache/cookbooks/grantmc/recipes/default.rb:44 # Audit Mode mysql config directory should exist with correct permissions\nrspec /var/chef/cache/cookbooks/grantmc/recipes/default.rb:48 # Audit Mode mysql config directory should be owned by the db user\nrspec /var/chef/cache/cookbooks/grantmc/recipes/default.rb:55 # Audit Mode mysql config file should exist with correct permissions\nrspec /var/chef/cache/cookbooks/grantmc/recipes/default.rb:59 # Audit Mode mysql config file should contain required configuration\nAuditing complete</pre> <p><strong>Duplicate control_group names</strong></p> <p>If two <code class=\"docutils literal\">control_group</code> blocks have the same name, the chef-client will raise an exception. For example, the following <code class=\"docutils literal\">control_group</code> blocks exist in different cookbooks:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">control_group 'basic control group' do\n  it 'should pass' do\n    expect(2 - 2).to eq(0)\n  end\nend</pre> <pre class=\"highlight-ruby\" data-language=\"ruby\">control_group 'basic control group' do\n  it 'should pass' do\n    expect(3 - 2).to eq(1)\n  end\nend</pre> <p>Because the two <code class=\"docutils literal\">control_group</code> block names are identical, the chef-client will return an exception similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Synchronizing Cookbooks:\n  - audit_test\nCompiling Cookbooks...\n\n================================================================================\nRecipe Compile Error in /Users/grantmc/.cache/chef/cache/cookbooks\n                        /audit_test/recipes/error_duplicate_control_groups.rb\n================================================================================\n\nChef::Exceptions::AuditControlGroupDuplicate\n--------------------------------------------\nAudit control group with name 'basic control group' has already been defined\n\nCookbook Trace:\n---------------\n/Users/grantmc/.cache/chef/cache/cookbooks\n/audit_test/recipes/error_duplicate_control_groups.rb:13:in 'from_file'\n\nRelevant File Content:\n----------------------\n/Users/grantmc/.cache/chef/cache/cookbooks/audit_test/recipes/error_duplicate_control_groups.rb:\n\ncontrol_group 'basic control group' do\n  it 'should pass' do\n    expect(2 - 2).to eq(0)\n  end\nend\n\ncontrol_group 'basic control group' do\n  it 'should pass' do\n    expect(3 - 2).to eq(1)\n  end\nend\n\nRunning handlers:\n[2015-01-15T09:36:14-08:00] ERROR: Running exception handlers\nRunning handlers complete</pre> <p><strong>Verify a package is installed</strong></p> <p>The following <code class=\"docutils literal\">control_group</code> verifies that the <code class=\"docutils literal\">git</code> package has been installed:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'git' do\n  action :install\nend\n\nexecute 'list packages' do\n  command 'dpkg -l'\nend\n\nexecute 'list directory' do\n  command 'ls -R ~'\nend\n\ncontrol_group 'my audits' do\n  control 'check git' do\n    it 'should be installed' do\n      expect(package('git')).to be_installed\n    end\n  end\nend</pre>    <h3 id=\"cookbook-name\">cookbook_name</h3> <p>Use the <code class=\"docutils literal\">cookbook_name</code> method to return the name of a cookbook.</p> <p>The syntax for the <code class=\"docutils literal\">cookbook_name</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cookbook_name</pre> <p>This method is often used as part of a log entry. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef::Log.info('I am a message from the #{recipe_name} recipe in the #{cookbook_name} cookbook.')</pre>   <h3 id=\"data-bag\">data_bag</h3> <p>A data bag is a global variable that is stored as JSON data and is accessible from a Chef server. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search.</p> <p>Use the <code class=\"docutils literal\">data_bag</code> method to get a list of the contents of a data bag.</p> <p>The syntax for the <code class=\"docutils literal\">data_bag</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">data_bag(bag_name)</pre> <p><strong>Examples</strong></p> <p>The following example shows how the <code class=\"docutils literal\">data_bag</code> method can be used in a recipe.</p> <p><strong>Get a data bag, and then iterate through each data bag item</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">data_bag('users') #=&gt; ['sandy', 'jill']</pre> <p>Iterate over the contents of the data bag to get the associated <code class=\"docutils literal\">data_bag_item</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">data_bag('users').each do |user|\n  data_bag_item('users', user)\nend</pre> <p>The <code class=\"docutils literal\">id</code> for each data bag item will be returned as a string.</p>   <h3 id=\"data-bag-item\">data_bag_item</h3> <p>A data bag is a global variable that is stored as JSON data and is accessible from a Chef server. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search.</p> <p>The <code class=\"docutils literal\">data_bag_item</code> method can be used in a recipe to get the contents of a data bag item.</p> <p>The syntax for the <code class=\"docutils literal\">data_bag_item</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">data_bag_item(bag_name, item, secret)</pre> <p>where <code class=\"docutils literal\">secret</code> is the secret used to load an encrypted data bag. If <code class=\"docutils literal\">secret</code> is not specified, the chef-client looks for a secret at the path specified by the <code class=\"docutils literal\">encrypted_data_bag_secret</code> setting in the client.rb file.</p> <p><strong>Examples</strong></p> <p>The following examples show how the <code class=\"docutils literal\">data_bag_item</code> method can be used in a recipe.</p> <p><strong>Get a data bag, and then iterate through each data bag item</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">data_bag('users') #=&gt; ['sandy', 'jill']</pre> <p>Iterate over the contents of the data bag to get the associated <code class=\"docutils literal\">data_bag_item</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">data_bag('users').each do |user|\n  data_bag_item('users', user)\nend</pre> <p>The <code class=\"docutils literal\">id</code> for each data bag item will be returned as a string.</p> <p><strong>Use the contents of a data bag in a recipe</strong></p> <p>The following example shows how to use the <code class=\"docutils literal\">data_bag</code> and <code class=\"docutils literal\">data_bag_item</code> methods in a recipe, also using a data bag named <code class=\"docutils literal\">sea-power</code>):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'sea-power' do\n  action :install\nend\n\ndirectory node['sea-power']['base_path'] do\n  # attributes for owner, group, mode\nend\n\ngale_warnings = data_bag('sea-power').map do |viking_north|\n  data_bag_item('sea-power', viking_north)['source']\nend\n\ntemplate '/etc/seattle/power.list' do\n  source 'seattle-power.erb'\n  # attributes for owner, group, mode\n  variables(\n    :base_path =&gt; node['sea-power']['base_path'],\n    # more variables\n    :repo_location =&gt; gale_warnings\n  )\nend</pre> <p>For a more complete version of the previous example, see the default recipe in the <a class=\"reference external\" href=\"https://github.com/hw-cookbooks/apt-mirror\">https://github.com/hw-cookbooks/apt-mirror</a> community cookbook.</p>   <h3 id=\"platform\">platform?</h3> <p>Use the <code class=\"docutils literal\">platform?</code> method to ensure that certain actions are run for specific platform. The <code class=\"docutils literal\">platform?</code> method will return true if one of the listed parameters matches the <code class=\"docutils literal\">node['platform']</code> attribute that is detected by Ohai during every chef-client run.</p> <p>The syntax for the <code class=\"docutils literal\">platform?</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">platform?('parameter', 'parameter')</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">parameter</code> is a comma-separated list, each specifying a platform, such as Red Hat, CentOS, or Fedora</li> <li>\n<code class=\"docutils literal\">platform?</code> method is typically used with an <code class=\"docutils literal\">if</code>, <code class=\"docutils literal\">elseif</code>, or <code class=\"docutils literal\">case</code> statement that contains Ruby code that is specific for the platform, if detected</li> </ul>  <h4 id=\"parameters\">Parameters</h4> <p>The following parameters can be used with this method:</p> <table class=\"docutils\"> <colgroup> <col width=\"17%\"> <col width=\"83%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Parameter</th> <th class=\"head\">Platforms</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">aix</code></td> <td>AIX. All platform variants of AIX return <code class=\"docutils literal\">aix</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">arch</code></td> <td>Arch Linux</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">debian</code></td> <td>Debian, Linux Mint, Ubuntu</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">fedora</code></td> <td>Fedora</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">freebsd</code></td> <td>FreeBSD. All platform variants of FreeBSD return <code class=\"docutils literal\">freebsd</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">gentoo</code></td> <td>Gentoo</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">hpux</code></td> <td>HP-UX. All platform variants of HP-UX return <code class=\"docutils literal\">hpux</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">mac_os_x</code></td> <td>Mac OS X</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">netbsd</code></td> <td>NetBSD. All platform variants of NetBSD return <code class=\"docutils literal\">netbsd</code>.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">openbsd</code></td> <td>OpenBSD. All platform variants of OpenBSD return <code class=\"docutils literal\">openbsd</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">slackware</code></td> <td>Slackware</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">solaris</code></td> <td>Solaris. For Solaris-related platforms, the <code class=\"docutils literal\">platform_family</code> method does not support the Solaris platform family and will default back to <code class=\"docutils literal\">platform_family = platform</code>. For example, if the platform is OmniOS, the <code class=\"docutils literal\">platform_family</code> is <code class=\"docutils literal\">omnios</code>, if the platform is SmartOS, the <code class=\"docutils literal\">platform_family</code> is <code class=\"docutils literal\">smartos</code>, and so on. All platform variants of Solaris return <code class=\"docutils literal\">solaris</code>.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">suse</code></td> <td>openSUSE, SUSE Enterprise Linux Server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">windows</code></td> <td>Microsoft Windows. All platform variants of Microsoft Windows return <code class=\"docutils literal\">windows</code>.</td> </tr> </tbody> </table> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Ohai collects platform information at the start of the chef-client run and stores that information in the <code class=\"docutils literal\">node['platform']</code> attribute.</p> </div> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">platform?('debian')</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">platform?('rhel', 'debian')</pre>   <h4 id=\"id2\">Examples</h4> <p>The following example shows how the <code class=\"docutils literal\">platform?</code> method can be used in a recipe.</p> <p><strong>Use an if statement with the platform recipe DSL method</strong></p> <p>The following example shows how an if statement can be used with the <code class=\"docutils literal\">platform?</code> method in the Recipe DSL to run code specific to Microsoft Windows. The code is defined using the <strong>ruby_block</strong> resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># the following code sample comes from the ``client`` recipe\n# in the following cookbook: https://github.com/chef-cookbooks/mysql\n\nif platform?('windows')\n  ruby_block 'copy libmysql.dll into ruby path' do\n    block do\n      require 'fileutils'\n      FileUtils.cp \"#{node['mysql']['client']['lib_dir']}\\\\libmysql.dll\",\n        node['mysql']['client']['ruby_dir']\n    end\n    not_if { File.exist?(\"#{node['mysql']['client']['ruby_dir']}\\\\libmysql.dll\") }\n  end\nend</pre>    <h3 id=\"platform-family\">platform_family?</h3> <p>Use the <code class=\"docutils literal\">platform_family?</code> method to ensure that certain actions are run for specific platform family. The <code class=\"docutils literal\">platform_family?</code> method will return true if one of the listed parameters matches the <code class=\"docutils literal\">node['platform_family']</code> attribute that is detected by Ohai during every chef-client run.</p> <p>The syntax for the <code class=\"docutils literal\">platform_family?</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">platform_family?('parameter', 'parameter')</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">'parameter'</code> is a comma-separated list, each specifying a platform family, such as Debian, or Red Hat Enterprise Linux</li> <li>\n<code class=\"docutils literal\">platform_family?</code> method is typically used with an <code class=\"docutils literal\">if</code>, <code class=\"docutils literal\">elseif</code>, or <code class=\"docutils literal\">case</code> statement that contains Ruby code that is specific for the platform family, if detected</li> </ul> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if platform_family?('rhel')\n  # do RHEL things\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if platform_family?('debian', 'rhel')\n  # do things on debian and rhel families\nend</pre> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">platform_family?('gentoo')</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">platform_family?('slackware', 'suse', 'arch')</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\"><code class=\"docutils literal\">platform_family?</code> will default to <code class=\"docutils literal\">platform?</code> when <code class=\"docutils literal\">platform_family?</code> is not explicitly defined.</p> </div>  <h4 id=\"id3\">Examples</h4> <p>The following examples show how the <code class=\"docutils literal\">platform_family?</code> method can be used in a recipe.</p> <p><strong>Use a specific binary for a specific platform</strong></p> <p>The following is an example of using the <code class=\"docutils literal\">platform_family?</code> method in the Recipe DSL to create a variable that can be used with other resources in the same recipe. In this example, <code class=\"docutils literal\">platform_family?</code> is being used to ensure that a specific binary is used for a specific platform before using the <strong>remote_file</strong> resource to download a file from a remote location, and then using the <strong>execute</strong> resource to install that file by running a command.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if platform_family?('rhel')\n  pip_binary = '/usr/bin/pip'\nelse\n  pip_binary = '/usr/local/bin/pip'\nend\n\nremote_file \"#{Chef::Config[:file_cache_path]}/distribute_setup.py\" do\n  source 'http://python-distribute.org/distribute_setup.py'\n  mode '0755'\n  not_if { File.exist?(pip_binary) }\nend\n\nexecute 'install-pip' do\n  cwd Chef::Config[:file_cache_path]\n  command &lt;&lt;-EOF\n    # command for installing Python goes here\n    EOF\n  not_if { File.exists?(pip_binary) }\nend</pre> <p>where a command for installing Python might look something like:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">#{node['python']['binary']} distribute_setup.py\n#{::File.dirname(pip_binary)}/easy_install pip</pre>    <h3 id=\"reboot-pending\">reboot_pending?</h3> <p>Use the <code class=\"docutils literal\">reboot_pending?</code> method to test if a node needs a reboot, or is expected to reboot. <code class=\"docutils literal\">reboot_pending?</code> returns <code class=\"docutils literal\">true</code> when the node needs a reboot.</p> <p>The syntax for the <code class=\"docutils literal\">reboot_pending?</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">reboot_pending?</pre>   <h3 id=\"recipe-name\">recipe_name</h3> <p>Use the <code class=\"docutils literal\">recipe_name</code> method to return the name of a recipe.</p> <p>The syntax for the <code class=\"docutils literal\">recipe_name</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">recipe_name</pre> <p>This method is often used as part of a log entry. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef::Log.info('I am a message from the #{recipe_name} recipe in the #{cookbook_name} cookbook.')</pre>   <h3 id=\"resources\">resources</h3> <p>Use the <code class=\"docutils literal\">resources</code> method to look up a resource in the resource collection. The <code class=\"docutils literal\">resources</code> method returns the value for the resource that it finds in the resource collection. The preferred syntax for the <code class=\"docutils literal\">resources</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resources('resource_type[resource_name]')</pre> <p>but the following syntax can also be used:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resources(:resource_type =&gt; 'resource_name')</pre> <p>where in either approach <code class=\"docutils literal\">resource_type</code> is the name of a resource and <code class=\"docutils literal\">resource_name</code> is the name of a resource that can be configured by the chef-client.</p> <p>The <code class=\"docutils literal\">resources</code> method can be used to modify a resource later on in a recipe. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file '/etc/hosts' do\n  content '127.0.0.1 localhost.localdomain localhost'\nend</pre> <p>and then later in the same recipe, or elsewhere:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">f = resources('file[/etc/hosts]')\nf.mode '0644'</pre> <p>where <code class=\"docutils literal\">file</code> is the type of resource, <code class=\"docutils literal\">/etc/hosts</code> is the name, and <code class=\"docutils literal\">f.mode</code> is used to set the <code class=\"docutils literal\">mode</code> property on the <strong>file</strong> resource.</p>   <h3 id=\"search\">search</h3> <p>Search indexes allow queries to be made for any type of data that is indexed by the Chef server, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the <code class=\"docutils literal\">search</code> subcommand in knife, the <code class=\"docutils literal\">search</code> method in the Recipe DSL, the search box in the Chef management console, and by using the <code class=\"docutils literal\">/search</code> or <code class=\"docutils literal\">/search/INDEX</code> endpoints in the Chef server API. The search engine is based on Apache Solr and is run from the Chef server.</p> <p>Use the <code class=\"docutils literal\">search</code> method to perform a search query against the Chef server from within a recipe.</p> <p>The syntax for the <code class=\"docutils literal\">search</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:index, 'query')</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">:index</code> is of name of the index on the Chef server against which the search query will run: <code class=\"docutils literal\">:client</code>, <code class=\"docutils literal\">:data_bag_name</code>, <code class=\"docutils literal\">:environment</code>, <code class=\"docutils literal\">:node</code>, and <code class=\"docutils literal\">:role</code>\n</li> <li>\n<code class=\"docutils literal\">'query'</code> is a valid search query against an object on the Chef server (see below for more information about how to build the query)</li> </ul> <p>For example, using the results of a search query within a variable:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">webservers = search(:node, 'role:webserver')</pre> <p>and then using the results of that query to populate a template:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/list_of_webservers' do\n  source 'list_of_webservers.erb'\n  variables(:webservers =&gt; webservers)\nend</pre>  <h4 id=\"filter-result\">:filter_result</h4> <p>Use <code class=\"docutils literal\">:filter_result</code> as part of a search query to filter the search output based on the pattern specified by a Hash. Only attributes in the Hash will be returned.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Prior to chef-client 12.0, this functionality was available from the <code class=\"docutils literal\">partial_search</code> cookbook and was referred to as “partial search”.</p> </div> <p>The syntax for the <code class=\"docutils literal\">search</code> method that uses <code class=\"docutils literal\">:filter_result</code> is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:index, 'query',\n  :filter_result =&gt; { 'foo' =&gt; [ 'abc' ],\n                      'bar' =&gt; [ '123' ],\n                      'baz' =&gt; [ 'sea', 'power' ]\n                    }\n      ).each do |result|\n  puts result['foo']\n  puts result['bar']\n  puts result['baz']\nend</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">:index</code> is of name of the index on the Chef server against which the search query will run: <code class=\"docutils literal\">:client</code>, <code class=\"docutils literal\">:data_bag_name</code>, <code class=\"docutils literal\">:environment</code>, <code class=\"docutils literal\">:node</code>, and <code class=\"docutils literal\">:role</code>\n</li> <li>\n<code class=\"docutils literal\">'query'</code> is a valid search query against an object on the Chef server</li> <li>\n<code class=\"docutils literal\">:filter_result</code> defines a Hash of values to be returned</li> </ul> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">search(:node, 'role:web',\n  :filter_result =&gt; { 'name' =&gt; [ 'name' ],\n                      'ip' =&gt; [ 'ipaddress' ],\n                      'kernel_version' =&gt; [ 'kernel', 'version' ]\n                    }\n      ).each do |result|\n  puts result['name']\n  puts result['ip']\n  puts result['kernel_version']\nend</pre>   <h4 id=\"query-syntax\">Query Syntax</h4> <p>A search query is comprised of two parts: the key and the search pattern. A search query has the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">key:search_pattern</pre> <p>where <code class=\"docutils literal\">key</code> is a field name that is found in the JSON description of an indexable object on the Chef server (a role, node, client, environment, or data bag) and <code class=\"docutils literal\">search_pattern</code> defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both <code class=\"docutils literal\">key</code> and <code class=\"docutils literal\">search_pattern</code> are case-sensitive; <code class=\"docutils literal\">key</code> has limited support for multiple character wildcard matching using an asterisk (“*”) (and as long as it is not the first character).</p>  <h5 id=\"keys\">Keys</h5> <p>A field name/description pair is available in the JSON object. Use the field name when searching for this information in the JSON object. Any field that exists in any JSON description for any role, node, chef-client, environment, or data bag can be searched.</p> <p><strong>Nested Fields</strong></p> <p>A nested field appears deeper in the JSON data structure. For example, information about a network interface might be several layers deep: <code class=\"docutils literal\">node[:network][:interfaces][:en1]</code>. When nested fields are present in a JSON structure, the chef-client will extract those nested fields to the top-level, flattening them into compound fields that support wildcard search patterns.</p> <p>By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor.</p> <p>Consider the following snippet of JSON data:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\"network\":\n  [\n  //snipped...\n    \"interfaces\",\n      {\"en1\": {\n        \"number\": \"1\",\n        \"flags\": [\n          \"UP\",\n          \"BROADCAST\",\n          \"SMART\",\n          \"RUNNING\",\n          \"SIMPLEX\",\n          \"MULTICAST\"\n        ],\n        \"addresses\": {\n          \"fe80::fa1e:dfff:fed8:63a2\": {\n            \"scope\": \"Link\",\n            \"prefixlen\": \"64\",\n            \"family\": \"inet6\"\n          },\n          \"f8:1e:df:d8:63:a2\": {\n            \"family\": \"lladdr\"\n          },\n          \"192.168.0.195\": {\n            \"netmask\": \"255.255.255.0\",\n            \"broadcast\": \"192.168.0.255\",\n            \"family\": \"inet\"\n          }\n        },\n        \"mtu\": \"1500\",\n        \"media\": {\n          \"supported\": {\n            \"autoselect\": {\n              \"options\": [\n\n              ]\n            }\n          },\n          \"selected\": {\n            \"autoselect\": {\n              \"options\": [\n\n              ]\n            }\n          }\n        },\n        \"type\": \"en\",\n        \"status\": \"active\",\n        \"encapsulation\": \"Ethernet\"\n      },\n  //snipped...</pre> <p>Before this data is indexed on the Chef server, the nested fields are extracted into the top level, similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">\"broadcast\" =&gt; \"192.168.0.255\",\n\"flags\"     =&gt; [\"UP\", \"BROADCAST\", \"SMART\", \"RUNNING\", \"SIMPLEX\", \"MULTICAST\"]\n\"mtu\"       =&gt; \"1500\"</pre> <p>which allows searches like the following to find data that is present in this node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"broadcast:192.168.0.*\"</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"mtu:1500\"</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"flags:UP\"</pre> <p>This data is also flattened into various compound fields, which follow the same pattern as the JSON hierarchy and use underscores (<code class=\"docutils literal\">_</code>) to separate the levels of data, similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\"># ...snip...\n\"network_interfaces_en1_addresses_192.168.0.195_broadcast\" =&gt; \"192.168.0.255\",\n\"network_interfaces_en1_addresses_fe80::fa1e:tldr_family\"  =&gt; \"inet6\",\n\"network_interfaces_en1_addresses\"                         =&gt; [\"fe80::fa1e:tldr\",\"f8:1e:df:tldr\",\"192.168.0.195\"]\n# ...snip...</pre> <p>which allows searches like the following to find data that is present in this node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"network_interfaces_en1_addresses:192.168.0.195\"</pre> <p>This flattened data structure also supports using wildcard compound fields, which allow searches to omit levels within the JSON data structure that are not important to the search query. In the following example, an asterisk (<code class=\"docutils literal\">*</code>) is used to show where the wildcard can exist when searching for a nested field:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">\"network_interfaces_*_flags\"     =&gt; [\"UP\", \"BROADCAST\", \"SMART\", \"RUNNING\", \"SIMPLEX\", \"MULTICAST\"]\n\"network_interfaces_*_addresses\" =&gt; [\"fe80::fa1e:dfff:fed8:63a2\", \"192.168.0.195\", \"f8:1e:df:d8:63:a2\"]\n\"network_interfaces_en0_media_*\" =&gt; [\"autoselect\", \"none\", \"1000baseT\", \"10baseT/UTP\", \"100baseTX\"]\n\"network_interfaces_en1_*\"       =&gt; [\"1\", \"UP\", \"BROADCAST\", \"SMART\", \"RUNNING\", \"SIMPLEX\", \"MULTICAST\",\n                                     \"fe80::fa1e:dfff:fed8:63a2\", \"f8:1e:df:d8:63:a2\", \"192.168.0.195\",\n                                     \"1500\", \"supported\", \"selected\", \"en\", \"active\", \"Ethernet\"]</pre> <p>For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">network_interfaces__flags</pre> <p>This query will search within the <code class=\"docutils literal\">flags</code> node, within the JSON structure, for each of <code class=\"docutils literal\">UP</code>, <code class=\"docutils literal\">BROADCAST</code>, <code class=\"docutils literal\">SMART</code>, <code class=\"docutils literal\">RUNNING</code>, <code class=\"docutils literal\">SIMPLEX</code>, and <code class=\"docutils literal\">MULTICAST</code>.</p>   <h5 id=\"patterns\">Patterns</h5> <p>A search pattern is a way to fine-tune search results by returning anything that matches some type of incomplete search query. There are four types of search patterns that can be used when searching the search indexes on the Chef server: exact, wildcard, range, and fuzzy.</p> <p><strong>Exact Match</strong></p> <p>An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by Ruby or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (‘ ‘) and a search pattern with double quotes (” ”).</p> <p><strong>Wildcard Match</strong></p> <p>A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:</p> <ul class=\"simple\"> <li>A question mark (<code class=\"docutils literal\">?</code>) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)</li> <li>An asterisk (<code class=\"docutils literal\">*</code>) can be used to replace any number of characters (including zero)</li> </ul> <p><strong>Range Match</strong></p> <p>A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (“[ ]”) to denote inclusive boundaries and curly braces (“{ }”) to denote exclusive boundaries and with the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">boundary TO boundary</pre> <p>where <code class=\"docutils literal\">TO</code> is required (and must be capitalized).</p> <p><strong>Fuzzy Match</strong></p> <p>A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">\"search_query\"~edit_distance</pre> <p>where <code class=\"docutils literal\">search_query</code> is the string that will be used during the search and <code class=\"docutils literal\">edit_distance</code> is the proximity. A tilde (“~”) is used to separate the edit distance from the search query.</p>   <h5 id=\"operators\">Operators</h5> <p>An operator can be used to ensure that certain terms are included in the results, are excluded from the results, or are not included even when other aspects of the query match. Searches can use the following operators:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operator</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">AND</code></td> <td>Use to find a match when both terms exist.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">OR</code></td> <td>Use to find a match if either term exists.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">NOT</code></td> <td>Use to exclude the term after <code class=\"docutils literal\">NOT</code> from the search results.</td> </tr> </tbody> </table>   <h5 id=\"special-characters\">Special Characters</h5> <p>A special character can be used to fine-tune a search query and to increase the accuracy of the search results. The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (<code class=\"docutils literal\">\\</code>):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">+  -  &amp;&amp;  | |  !  ( )  { }  [ ]  ^  \"  ~  *  ?  :  \\</pre> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">\\(1\\+1\\)\\:2</pre>    <h4 id=\"id4\">Examples</h4> <p>The following examples show how the <code class=\"docutils literal\">search</code> method can be used in a recipe.</p> <p><strong>Use the search recipe DSL method to find users</strong></p> <p>The following example shows how to use the <code class=\"docutils literal\">search</code> method in the Recipe DSL to search for users:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">#  the following code sample comes from the openvpn cookbook: https://github.com/chef-cookbooks/openvpn\n\nsearch(\"users\", \"*:*\") do |u|\n  execute \"generate-openvpn-#{u['id']}\" do\n    command \"./pkitool #{u['id']}\"\n    cwd '/etc/openvpn/easy-rsa'\n    environment(\n      'EASY_RSA' =&gt; '/etc/openvpn/easy-rsa',\n      'KEY_CONFIG' =&gt; '/etc/openvpn/easy-rsa/openssl.cnf',\n      'KEY_DIR' =&gt; node['openvpn']['key_dir'],\n      'CA_EXPIRE' =&gt; node['openvpn']['key']['ca_expire'].to_s,\n      'KEY_EXPIRE' =&gt; node['openvpn']['key']['expire'].to_s,\n      'KEY_SIZE' =&gt; node['openvpn']['key']['size'].to_s,\n      'KEY_COUNTRY' =&gt; node['openvpn']['key']['country'],\n      'KEY_PROVINCE' =&gt; node['openvpn']['key']['province'],\n      'KEY_CITY' =&gt; node['openvpn']['key']['city'],\n      'KEY_ORG' =&gt; node['openvpn']['key']['org'],\n      'KEY_EMAIL' =&gt; node['openvpn']['key']['email']\n    )\n    not_if { File.exist?(\"#{node['openvpn']['key_dir']}/#{u['id']}.crt\") }\n  end\n\n  %w{ conf ovpn }.each do |ext|\n    template \"#{node['openvpn']['key_dir']}/#{u['id']}.#{ext}\" do\n      source 'client.conf.erb'\n      variables :username =&gt; u['id']\n    end\n  end\n\n  execute \"create-openvpn-tar-#{u['id']}\" do\n    cwd node['openvpn']['key_dir']\n    command &lt;&lt;-EOH\n      tar zcf #{u['id']}.tar.gz \\\n      ca.crt #{u['id']}.crt #{u['id']}.key \\\n      #{u['id']}.conf #{u['id']}.ovpn \\\n    EOH\n    not_if { File.exist?(\"#{node['openvpn']['key_dir']}/#{u['id']}.tar.gz\") }\n  end\nend</pre> <p>where</p> <ul class=\"simple\"> <li>the search will use both of the <strong>execute</strong> resources, unless the condition specified by the <code class=\"docutils literal\">not_if</code> commands are met</li> <li>the <code class=\"docutils literal\">environments</code> property in the first <strong>execute</strong> resource is being used to define values that appear as variables in the OpenVPN configuration</li> <li>the <strong>template</strong> resource tells the chef-client which template to use</li> </ul>    <h3 id=\"shell-out\">shell_out</h3> <p>The <code class=\"docutils literal\">shell_out</code> method can be used to run a command against the node, and then display the output to the console when the log level is set to <code class=\"docutils literal\">debug</code>.</p> <p>The syntax for the <code class=\"docutils literal\">shell_out</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">shell_out(command_args)</pre> <p>where <code class=\"docutils literal\">command_args</code> is the command that is run against the node.</p>   <h3 id=\"id5\">shell_out!</h3> <p>The <code class=\"docutils literal\">shell_out!</code> method can be used to run a command against the node, display the output to the console when the log level is set to <code class=\"docutils literal\">debug</code>, and then raise an error when the method returns <code class=\"docutils literal\">false</code>.</p> <p>The syntax for the <code class=\"docutils literal\">shell_out!</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">shell_out!(command_args)</pre> <p>where <code class=\"docutils literal\">command_args</code> is the command that is run against the node. This method will return <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>.</p>   <h3 id=\"shell-out-with-systems-locale\">shell_out_with_systems_locale</h3> <p>The <code class=\"docutils literal\">shell_out_with_systems_locale</code> method can be used to run a command against the node (via the <code class=\"docutils literal\">shell_out</code> method), but using the <code class=\"docutils literal\">LC_ALL</code> environment variable.</p> <p>The syntax for the <code class=\"docutils literal\">shell_out_with_systems_locale</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">shell_out_with_systems_locale(command_args)</pre> <p>where <code class=\"docutils literal\">command_args</code> is the command that is run against the node.</p>   <h3 id=\"tag-tagged-untag\">tag, tagged?, untag</h3> <p>A tag is a custom description that is applied to a node. A tag, once applied, can be helpful when managing nodes using knife or when building recipes by providing alternate methods of grouping similar types of information.</p> <p>Tags can be added and removed. Machines can be checked to see if they already have a specific tag. To use tags in your recipe simply add the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">tag('mytag')</pre> <p>To test if a machine is tagged, add the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">tagged?('mytag')</pre> <p>to return <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. <code class=\"docutils literal\">tagged?</code> can also use an array as an argument.</p> <p>To remove a tag:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">untag('mytag')</pre> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">tag('machine')\n\nif tagged?('machine')\n   Chef::Log.info('Hey I'm #{node[:tags]}')\nend\n\nuntag('machine')\n\nif not tagged?('machine')\n   Chef::Log.info('I has no tagz')\nend</pre> <p>Will return something like this:</p> <pre class=\"highlight-bash\" data-language=\"bash\">[Thu, 22 Jul 2010 18:01:45 +0000] INFO: Hey I'm machine\n[Thu, 22 Jul 2010 18:01:45 +0000] INFO: I has no tagz</pre>   <h3 id=\"value-for-platform\">value_for_platform</h3> <p>Use the <code class=\"docutils literal\">value_for_platform</code> method in a recipe to select a value based on the <code class=\"docutils literal\">node['platform']</code> and <code class=\"docutils literal\">node['platform_version']</code> attributes. These values are detected by Ohai during every chef-client run.</p> <p>The syntax for the <code class=\"docutils literal\">value_for_platform</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">value_for_platform( ['platform', ...] =&gt; { 'version' =&gt; 'value' } )</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">'platform', ...</code> is a comma-separated list of platforms, such as Red Hat, openSUSE, or Fedora</li> <li>\n<code class=\"docutils literal\">version</code> specifies the version of that platform</li> <li>Version constraints—<code class=\"docutils literal\">&gt;</code>, <code class=\"docutils literal\">&lt;</code>, <code class=\"docutils literal\">&gt;=</code>, <code class=\"docutils literal\">&lt;=</code>, <code class=\"docutils literal\">~&gt;</code>—may be used with <code class=\"docutils literal\">version</code>; an exception is raised if two version constraints match; an exact match will always take precedence over a match made from a version constraint</li> <li>\n<code class=\"docutils literal\">value</code> specifies the value that will be used if the node’s platform matches the <code class=\"docutils literal\">value_for_platform</code> method</li> </ul> <p>When each value only has a single platform, use the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">value_for_platform(\n  'platform' =&gt; { 'version' =&gt; 'value' },\n  'platform' =&gt; { 'version' =&gt; 'value' },\n  'platform' =&gt; 'value'\n)</pre> <p>When each value has more than one platform, the syntax changes to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">value_for_platform(\n  ['platform', 'platform', ... ] =&gt; {\n    'version' =&gt; 'value'\n  },\n)</pre>  <h4 id=\"id6\">Operators</h4> <p>The following operators may be used:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operator</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">=</code></td> <td>equal to</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">&gt;</code></td> <td>greater than</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">&lt;</code></td> <td>less than</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">&gt;=</code></td> <td>greater than or equal to; also known as “optimistically greater than”, or “optimistic”</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">&lt;=</code></td> <td>less than or equal to</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">~&gt;</code></td> <td>approximately greater than; also known as “pessimistically greater than”, or “pessimistic”</td> </tr> </tbody> </table>   <h4 id=\"id7\">Examples</h4> <p>The following example will set <code class=\"docutils literal\">package_name</code> to <code class=\"docutils literal\">httpd</code> for the Red Hat platform and to <code class=\"docutils literal\">apache2</code> for the Debian platform:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package_name = value_for_platform(\n  ['centos', 'redhat', 'suse', 'fedora' ] =&gt; {\n    'default' =&gt; 'httpd'\n  },\n  ['ubuntu', 'debian'] =&gt; {\n    'default' =&gt; 'apache2'\n  }\n)</pre> <p>The following example will set <code class=\"docutils literal\">package</code> to <code class=\"docutils literal\">apache-couchdb</code> for OpenBSD platforms, <code class=\"docutils literal\">dev-db/couchdb</code> for Gentoo platforms, and <code class=\"docutils literal\">couchdb</code> for all other platforms:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package = value_for_platform(\n  'openbsd' =&gt; { 'default' =&gt; 'apache-couchdb' },\n  'gentoo' =&gt; { 'default' =&gt; 'dev-db/couchdb' },\n  'default' =&gt; 'couchdb'\n)</pre> <p>The following example shows using version constraints to specify a value based on the version:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">value_for_platform(\n  'os1' =&gt; { '&lt; 1.0' =&gt; 'less than 1.0',\n             '~&gt; 2.0' =&gt; 'version 2.x',\n             '&gt;= 3.0' =&gt; 'version 3.0',\n             '3.0.1' =&gt; '3.0.1 will always use this value' }\n)</pre>    <h3 id=\"value-for-platform-family\">value_for_platform_family</h3> <p>Use the <code class=\"docutils literal\">value_for_platform_family</code> method in a recipe to select a value based on the <code class=\"docutils literal\">node['platform_family']</code> attribute. This value is detected by Ohai during every chef-client run.</p> <p>The syntax for the <code class=\"docutils literal\">value_for_platform_family</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">value_for_platform_family( 'platform_family' =&gt; { 'version' =&gt; 'value' }, ... )</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">'platform_family' =&gt; { 'version' =&gt; 'value' }, ...</code> is a comma-separated list of platforms, such as Fedora, openSUSE, or Red Hat Enterprise Linux</li> <li>\n<code class=\"docutils literal\">value</code> specifies the value that will be used if the node’s platform family matches the <code class=\"docutils literal\">value_for_platform_family</code> method</li> </ul> <p>When each value only has a single platform, use the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">value_for_platform_family(\n  'platform_family' =&gt; { 'version' =&gt; 'value' },\n  'platform_family' =&gt; { 'version' =&gt; 'value' },\n  'platform_family' =&gt; 'value'\n)</pre> <p>When each value has more than one platform, the syntax changes to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">value_for_platform_family(\n  ['platform_family', 'platform_family', 'platform_family', 'platform_family' ] =&gt; 'value',\n  ['platform_family', 'platform_family'] =&gt; 'value',\n  'default' =&gt; 'value'\n)</pre> <p>The following example will set <code class=\"docutils literal\">package</code> to <code class=\"docutils literal\">httpd-devel</code> for the Red Hat Enterprise Linux, Fedora, and openSUSE platforms and to <code class=\"docutils literal\">apache2-dev</code> for the Debian platform:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package = value_for_platform_family(\n  ['rhel', 'fedora', 'suse'] =&gt; 'httpd-devel',\n    'debian' =&gt; 'apache2-dev'\n)</pre>    <h2 id=\"event-handlers\">Event Handlers</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Event handlers are not specifically part of the Recipe DSL. An event handler is declared using the <code class=\"docutils literal\">Chef.event_hander</code> method, which declares the event handler within recipes in a similar manner to other Recipe DSL methods.</p> </div> <p>Use the Handler DSL to attach a callback to an event. If the event occurs during the chef-client run, the associated callback is executed. For example:</p> <ul class=\"simple\"> <li>Sending email if a chef-client run fails</li> <li>Sending a notification to chat application if an audit run fails</li> <li>Aggregating statistics about resources updated during a chef-client runs to StatsD</li> </ul>  <h3 id=\"on-method\">on Method</h3> <p>Use the <code class=\"docutils literal\">on</code> method to associate an event type with a callback. The callback defines what steps are taken if the event occurs during the chef-client run and is defined using arbitrary Ruby code. The syntax is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef.event_handler do\n  on :event_type do\n    # some Ruby\n  end\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">Chef.event_handler</code> declares a block of code within a recipe that is processed when the named event occurs during a chef-client run</li> <li>\n<code class=\"docutils literal\">on</code> defines the block of code that will tell the chef-client how to handle the event</li> <li>\n<code class=\"docutils literal\">:event_type</code> is a valid exception event type, such as <code class=\"docutils literal\">:run_start</code>, <code class=\"docutils literal\">:run_failed</code>, <code class=\"docutils literal\">:converge_failed</code>, <code class=\"docutils literal\">:resource_failed</code>, or <code class=\"docutils literal\">:recipe_not_found</code>\n</li> </ul> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Chef.event_handler do\n  on :converge_start do\n    puts \"Ohai! I have started a converge.\"\n  end\nend</pre>   <h3 id=\"event-types\">Event Types</h3> <p>The following table describes the events that may occur during a chef-client run. Each of these events may be referenced in an <code class=\"docutils literal\">on</code> method block by declaring it as the event type.</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Event</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:run_start</code></td> <td>The start of the chef-client run.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:run_started</code></td> <td>The chef-client run has started.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:ohai_completed</code></td> <td>The Ohai run has completed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:skipping_registration</code></td> <td>The chef-client is not registering with the Chef server because it already has a private key or because it does not need one.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:registration_start</code></td> <td>The chef-client is attempting to create a private key with which to register to the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:registration_completed</code></td> <td>The chef-client created its private key successfully.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:registration_failed</code></td> <td>The chef-client encountered an error and was unable to register with the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:node_load_start</code></td> <td>The chef-client is attempting to load node data from the Chef server.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:node_load_failed</code></td> <td>The chef-client encountered an error and was unable to load node data from the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:run_list_expand_failed</code></td> <td>The chef-client failed to expand the run-list.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:node_load_completed</code></td> <td>The chef-client successfully loaded node data from the Chef server. Default and override attributes for roles have been computed, but are not yet applied.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:policyfile_loaded</code></td> <td>The policy file was loaded.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:cookbook_resolution_start</code></td> <td>The chef-client is attempting to pull down the cookbook collection from the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:cookbook_resolution_failed</code></td> <td>The chef-client failed to pull down the cookbook collection from the Chef server.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:cookbook_resolution_complete</code></td> <td>The chef-client successfully pulled down the cookbook collection from the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:cookbook_clean_start</code></td> <td>The chef-client is attempting to remove unneeded cookbooks.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:removed_cookbook_file</code></td> <td>The chef-client removed a file from a cookbook.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:cookbook_clean_complete</code></td> <td>The chef-client is done removing cookbooks and/or cookbook files.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:cookbook_sync_start</code></td> <td>The chef-client is attempting to synchronize cookbooks.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:synchronized_cookbook</code></td> <td>The chef-client is attempting to synchronize the named cookbook.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:updated_cookbook_file</code></td> <td>The chef-client updated the named file in the named cookbook.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:cookbook_sync_failed</code></td> <td>The chef-client was unable to synchronize cookbooks.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:cookbook_sync_complete</code></td> <td>The chef-client is finished synchronizing cookbooks.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:library_load_start</code></td> <td>The chef-client is loading library files.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:library_file_loaded</code></td> <td>The chef-client successfully loaded the named library file.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:library_file_load_failed</code></td> <td>The chef-client was unable to load the named library file.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:library_load_complete</code></td> <td>The chef-client is finished loading library files.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:lwrp_load_start</code></td> <td>The chef-client is loading custom resources.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:lwrp_file_loaded</code></td> <td>The chef-client successfully loaded the named custom resource.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:lwrp_file_load_failed</code></td> <td>The chef-client was unable to load the named custom resource.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:lwrp_load_complete</code></td> <td>The chef-client is finished loading custom resources.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:attribute_load_start</code></td> <td>The chef-client is loading attribute files.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:attribute_file_loaded</code></td> <td>The chef-client successfully loaded the named attribute file.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:attribute_file_load_failed</code></td> <td>The chef-client was unable to load the named attribute file.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:attribute_load_complete</code></td> <td>The chef-client is finished loading attribute files.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:definition_load_start</code></td> <td>The chef-client is loading definitions.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:definition_file_loaded</code></td> <td>The chef-client successfully loaded the named definition.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:definition_file_load_failed</code></td> <td>The chef-client was unable to load the named definition.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:definition_load_complete</code></td> <td>The chef-client is finished loading definitions.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:recipe_load_start</code></td> <td>The chef-client is loading recipes.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:recipe_file_loaded</code></td> <td>The chef-client successfully loaded the named recipe.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:recipe_file_load_failed</code></td> <td>The chef-client was unable to load the named recipe.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:recipe_not_found</code></td> <td>The chef-client was unable to find the named recipe.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:recipe_load_complete</code></td> <td>The chef-client is finished loading recipes.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:converge_start</code></td> <td>The chef-client run converge phase has started.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:converge_complete</code></td> <td>The chef-client run converge phase is complete.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:converge_failed</code></td> <td>The chef-client run converge phase has failed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:audit_phase_start</code></td> <td>The chef-client run audit phase has started.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:audit_phase_complete</code></td> <td>The chef-client run audit phase is finished.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:audit_phase_failed</code></td> <td>The chef-client run audit phase has failed.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:control_group_started</code></td> <td>The named control group is being processed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:control_example_success</code></td> <td>The named control group has been processed.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:control_example_failure</code></td> <td>The named control group’s processing has failed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_action_start</code></td> <td>A resource action is starting.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:resource_skipped</code></td> <td>A resource action was skipped.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_current_state_loaded</code></td> <td>A resource’s current state was loaded.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:resource_current_state_load_bypassed</code></td> <td>A resource’s current state was not loaded because the resource does not support why-run mode.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_bypassed</code></td> <td>A resource action was skipped because the resource does not support why-run mode.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:resource_update_applied</code></td> <td>A change has been made to a resource. (This event occurs for each change made to a resource.)</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_failed_retriable</code></td> <td>A resource action has failed and will be retried.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:resource_failed</code></td> <td>A resource action has failed and will not be retried.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_updated</code></td> <td>A resource requires modification.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:resource_up_to_date</code></td> <td>A resource is already correct.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_completed</code></td> <td>All actions for the resource are complete.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:stream_opened</code></td> <td>A stream has opened.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:stream_closed</code></td> <td>A stream has closed.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:stream_output</code></td> <td>A chunk of data from a single named stream.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:handlers_start</code></td> <td>The handler processing phase of the chef-client run has started.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:handler_executed</code></td> <td>The named handler was processed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:handlers_completed</code></td> <td>The handler processing phase of the chef-client run is complete.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:provider_requirement_failed</code></td> <td>An assertion declared by a provider has failed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:whyrun_assumption</code></td> <td>An assertion declared by a provider has failed, but execution is allowed to continue because the chef-client is running in why-run mode.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:run_completed</code></td> <td>The chef-client run has completed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:run_failed</code></td> <td>The chef-client run has failed.</td> </tr> </tbody> </table>   <h3 id=\"id8\">Examples</h3> <p>The following examples show ways to use the Handler DSL.</p>  <h4 id=\"send-email\">Send Email</h4> <p>Use the <code class=\"docutils literal\">on</code> method to create an event handler that sends email when the chef-client run fails. This will require:</p> <ul class=\"simple\"> <li>A way to tell the chef-client how to send email</li> <li>An event handler that describes what to do when the <code class=\"docutils literal\">:run_failed</code> event is triggered</li> <li>A way to trigger the exception and test the behavior of the event handler</li> </ul> <p><strong>Define How Email is Sent</strong></p> <p>Use a library to define the code that sends email when a chef-client run fails. Name the file <code class=\"docutils literal\">helper.rb</code> and add it to a cookbook’s <code class=\"docutils literal\">/libraries</code> directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'net/smtp'\n\nmodule HandlerSendEmail\n  class Helper\n\n    def send_email_on_run_failure(node_name)\n\n      message = \"From: Chef &lt;chef@chef.io&gt;\\n\"\n      message &lt;&lt; \"To: Grant &lt;grantmc@chef.io&gt;\\n\"\n      message &lt;&lt; \"Subject: Chef run failed\\n\"\n      message &lt;&lt; \"Date: #{Time.now.rfc2822}\\n\\n\"\n      message &lt;&lt; \"Chef run failed on #{node.name}\\n\"\n      Net::SMTP.start('localhost', 25) do |smtp|\n        smtp.send_message message, 'chef@chef.io', 'grantmc@chef.io'\n      end\n    end\n  end\nend</pre> <p><strong>Add the Handler</strong></p> <p>Invoke the library helper in a recipe:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef.event_handler do\n  on :run_failed do\n    HandlerSendEmail::Helper.new.send_email_on_run_failure(\n      Chef.run_context.node.name\n    )\n  end\nend</pre> <ul class=\"simple\"> <li>Use <code class=\"docutils literal\">Chef.event_handler</code> to define the event handler</li> <li>Use the <code class=\"docutils literal\">on</code> method to specify the event type</li> </ul> <p>Within the <code class=\"docutils literal\">on</code> block, tell the chef-client how to handle the event when it’s triggered.</p> <p><strong>Test the Handler</strong></p> <p>Use the following code block to trigger the exception and have the chef-client send email to the specified email address:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ruby_block 'fail the run' do\n  block do\n    fail 'deliberately fail the run'\n  end\nend</pre>   <h4 id=\"etcd-locks\">etcd Locks</h4> <p>The following example shows how to prevent concurrent chef-client runs from both holding a lock on etcd:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">lock_key = \"#{node.chef_environment}/#{node.name}\"\n\nChef.event_handler do\n  on :converge_start do |run_context|\n    Etcd.lock_acquire(lock_key)\n  end\nend\n\nChef.event_handler do\n  on :converge_complete do\n    Etcd.lock_release(lock_key)\n  end\nend</pre>   <h4 id=\"hipchat-notifications\">HipChat Notifications</h4> <p>Event messages can be sent to a team communication tool like HipChat. For example, if a chef-client run fails:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef.event_handler do\n  on :run_failed do |exception|\n    hipchat_notify exception.message\n  end\nend</pre> <p>or send an alert on a configuration change:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef.event_handler do\n  on :resource_updated do |resource, action|\n    if resource.to_s == 'template[/etc/nginx/nginx.conf]'\n      Helper.hipchat_message(\"#{resource} was updated by chef\")\n    end\n  end\nend</pre>     <h2 id=\"windows-platform\">Windows Platform</h2> <p>Six methods are present in the Recipe DSL to help verify the registry during a chef-client run on the Microsoft Windows platform—<code class=\"docutils literal\">registry_data_exists?</code>, <code class=\"docutils literal\">registry_get_subkeys</code>, <code class=\"docutils literal\">registry_get_values</code>, <code class=\"docutils literal\">registry_has_subkeys?</code>, <code class=\"docutils literal\">registry_key_exists?</code>, and <code class=\"docutils literal\">registry_value_exists?</code>—these helpers ensure the <strong>powershell_script</strong> resource is idempotent.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The recommended order in which registry key-specific methods should be used within a recipe is: <code class=\"docutils literal\">key_exists?</code>, <code class=\"docutils literal\">value_exists?</code>, <code class=\"docutils literal\">data_exists?</code>, <code class=\"docutils literal\">get_values</code>, <code class=\"docutils literal\">has_subkeys?</code>, and then <code class=\"docutils literal\">get_subkeys</code>.</p> </div>  <h3 id=\"registry-data-exists\">registry_data_exists?</h3> <p>Use the <code class=\"docutils literal\">registry_data_exists?</code> method to find out if a Microsoft Windows registry key contains the specified data of the specified type under the value.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method can be used in recipes and from within the <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> blocks in resources. This method is not designed to create or modify a registry key. If a registry key needs to be modified, use the <strong>registry_key</strong> resource.</p> </div> <p>The syntax for the <code class=\"docutils literal\">registry_data_exists?</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_data_exists?(\n  KEY_PATH,\n  { :name =&gt; 'NAME', :type =&gt; TYPE, :data =&gt; DATA },\n  ARCHITECTURE\n)</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">KEY_PATH</code> is the path to the registry key value. The path must include the registry hive, which can be specified either as its full name or as the 3- or 4-letter abbreviation. For example, both <code class=\"docutils literal\">HKLM\\SECURITY</code> and <code class=\"docutils literal\">HKEY_LOCAL_MACHINE\\SECURITY</code> are both valid and equivalent. The following hives are valid: <code class=\"docutils literal\">HKEY_LOCAL_MACHINE</code>, <code class=\"docutils literal\">HKLM</code>, <code class=\"docutils literal\">HKEY_CURRENT_CONFIG</code>, <code class=\"docutils literal\">HKCC</code>, <code class=\"docutils literal\">HKEY_CLASSES_ROOT</code>, <code class=\"docutils literal\">HKCR</code>, <code class=\"docutils literal\">HKEY_USERS</code>, <code class=\"docutils literal\">HKU</code>, <code class=\"docutils literal\">HKEY_CURRENT_USER</code>, and <code class=\"docutils literal\">HKCU</code>.</li> <li>\n<code class=\"docutils literal\">{ :name =&gt; 'NAME', :type =&gt; TYPE, :data =&gt; DATA }</code> is a hash that contains the expected name, type, and data of the registry key value</li> <li>\n<code class=\"docutils literal\">:type</code> represents the values available for registry keys in Microsoft Windows. Use <code class=\"docutils literal\">:binary</code> for REG_BINARY, <code class=\"docutils literal\">:string</code> for REG_SZ, <code class=\"docutils literal\">:multi_string</code> for REG_MULTI_SZ, <code class=\"docutils literal\">:expand_string</code> for REG_EXPAND_SZ, <code class=\"docutils literal\">:dword</code> for REG_DWORD, <code class=\"docutils literal\">:dword_big_endian</code> for REG_DWORD_BIG_ENDIAN, or <code class=\"docutils literal\">:qword</code> for REG_QWORD.</li> <li>\n<code class=\"docutils literal\">ARCHITECTURE</code> is one of the following values: <code class=\"docutils literal\">:x86_64</code>, <code class=\"docutils literal\">:i386</code>, or <code class=\"docutils literal\">:machine</code>. In order to read or write 32-bit registry keys on 64-bit machines running Microsoft Windows, the <code class=\"docutils literal\">architecture</code> property must be set to <code class=\"docutils literal\">:i386</code>. The <code class=\"docutils literal\">:x86_64</code> value can be used to force writing to a 64-bit registry location, but this value is less useful than the default (<code class=\"docutils literal\">:machine</code>) because the chef-client returns an exception if <code class=\"docutils literal\">:x86_64</code> is used and the machine turns out to be a 32-bit machine (whereas with <code class=\"docutils literal\">:machine</code>, the chef-client is able to access the registry key on the 32-bit machine).</li> </ul> <p>This method will return <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">ARCHITECTURE</code> attribute should only specify <code class=\"docutils literal\">:x86_64</code> or <code class=\"docutils literal\">:i386</code> when it is necessary to write 32-bit (<code class=\"docutils literal\">:i386</code>) or 64-bit (<code class=\"docutils literal\">:x86_64</code>) values on a 64-bit machine. <code class=\"docutils literal\">ARCHITECTURE</code> will default to <code class=\"docutils literal\">:machine</code> unless a specific value is given.</p> </div>   <h3 id=\"registry-get-subkeys\">registry_get_subkeys</h3> <p>Use the <code class=\"docutils literal\">registry_get_subkeys</code> method to get a list of registry key values that are present for a Microsoft Windows registry key.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method can be used in recipes and from within the <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> blocks in resources. This method is not designed to create or modify a registry key. If a registry key needs to be modified, use the <strong>registry_key</strong> resource.</p> </div> <p>The syntax for the <code class=\"docutils literal\">registry_get_subkeys</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">subkey_array = registry_get_subkeys(KEY_PATH, ARCHITECTURE)</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">KEY_PATH</code> is the path to the registry key. The path must include the registry hive, which can be specified either as its full name or as the 3- or 4-letter abbreviation. For example, both <code class=\"docutils literal\">HKLM\\SECURITY</code> and <code class=\"docutils literal\">HKEY_LOCAL_MACHINE\\SECURITY</code> are both valid and equivalent. The following hives are valid: <code class=\"docutils literal\">HKEY_LOCAL_MACHINE</code>, <code class=\"docutils literal\">HKLM</code>, <code class=\"docutils literal\">HKEY_CURRENT_CONFIG</code>, <code class=\"docutils literal\">HKCC</code>, <code class=\"docutils literal\">HKEY_CLASSES_ROOT</code>, <code class=\"docutils literal\">HKCR</code>, <code class=\"docutils literal\">HKEY_USERS</code>, <code class=\"docutils literal\">HKU</code>, <code class=\"docutils literal\">HKEY_CURRENT_USER</code>, and <code class=\"docutils literal\">HKCU</code>.</li> <li>\n<code class=\"docutils literal\">ARCHITECTURE</code> is one of the following values: <code class=\"docutils literal\">:x86_64</code>, <code class=\"docutils literal\">:i386</code>, or <code class=\"docutils literal\">:machine</code>. In order to read or write 32-bit registry keys on 64-bit machines running Microsoft Windows, the <code class=\"docutils literal\">architecture</code> property must be set to <code class=\"docutils literal\">:i386</code>. The <code class=\"docutils literal\">:x86_64</code> value can be used to force writing to a 64-bit registry location, but this value is less useful than the default (<code class=\"docutils literal\">:machine</code>) because the chef-client returns an exception if <code class=\"docutils literal\">:x86_64</code> is used and the machine turns out to be a 32-bit machine (whereas with <code class=\"docutils literal\">:machine</code>, the chef-client is able to access the registry key on the 32-bit machine).</li> </ul> <p>This returns an array of registry key values.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">ARCHITECTURE</code> attribute should only specify <code class=\"docutils literal\">:x86_64</code> or <code class=\"docutils literal\">:i386</code> when it is necessary to write 32-bit (<code class=\"docutils literal\">:i386</code>) or 64-bit (<code class=\"docutils literal\">:x86_64</code>) values on a 64-bit machine. <code class=\"docutils literal\">ARCHITECTURE</code> will default to <code class=\"docutils literal\">:machine</code> unless a specific value is given.</p> </div>   <h3 id=\"registry-get-values\">registry_get_values</h3> <p>Use the <code class=\"docutils literal\">registry_get_values</code> method to get the registry key values (name, type, and data) for a Microsoft Windows registry key.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method can be used in recipes and from within the <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> blocks in resources. This method is not designed to create or modify a registry key. If a registry key needs to be modified, use the <strong>registry_key</strong> resource.</p> </div> <p>The syntax for the <code class=\"docutils literal\">registry_get_values</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">subkey_array = registry_get_values(KEY_PATH, ARCHITECTURE)</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">KEY_PATH</code> is the path to the registry key. The path must include the registry hive, which can be specified either as its full name or as the 3- or 4-letter abbreviation. For example, both <code class=\"docutils literal\">HKLM\\SECURITY</code> and <code class=\"docutils literal\">HKEY_LOCAL_MACHINE\\SECURITY</code> are both valid and equivalent. The following hives are valid: <code class=\"docutils literal\">HKEY_LOCAL_MACHINE</code>, <code class=\"docutils literal\">HKLM</code>, <code class=\"docutils literal\">HKEY_CURRENT_CONFIG</code>, <code class=\"docutils literal\">HKCC</code>, <code class=\"docutils literal\">HKEY_CLASSES_ROOT</code>, <code class=\"docutils literal\">HKCR</code>, <code class=\"docutils literal\">HKEY_USERS</code>, <code class=\"docutils literal\">HKU</code>, <code class=\"docutils literal\">HKEY_CURRENT_USER</code>, and <code class=\"docutils literal\">HKCU</code>.</li> <li>\n<code class=\"docutils literal\">ARCHITECTURE</code> is one of the following values: <code class=\"docutils literal\">:x86_64</code>, <code class=\"docutils literal\">:i386</code>, or <code class=\"docutils literal\">:machine</code>. In order to read or write 32-bit registry keys on 64-bit machines running Microsoft Windows, the <code class=\"docutils literal\">architecture</code> property must be set to <code class=\"docutils literal\">:i386</code>. The <code class=\"docutils literal\">:x86_64</code> value can be used to force writing to a 64-bit registry location, but this value is less useful than the default (<code class=\"docutils literal\">:machine</code>) because the chef-client returns an exception if <code class=\"docutils literal\">:x86_64</code> is used and the machine turns out to be a 32-bit machine (whereas with <code class=\"docutils literal\">:machine</code>, the chef-client is able to access the registry key on the 32-bit machine).</li> </ul> <p>This returns an array of registry key values.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">ARCHITECTURE</code> attribute should only specify <code class=\"docutils literal\">:x86_64</code> or <code class=\"docutils literal\">:i386</code> when it is necessary to write 32-bit (<code class=\"docutils literal\">:i386</code>) or 64-bit (<code class=\"docutils literal\">:x86_64</code>) values on a 64-bit machine. <code class=\"docutils literal\">ARCHITECTURE</code> will default to <code class=\"docutils literal\">:machine</code> unless a specific value is given.</p> </div>   <h3 id=\"registry-has-subkeys\">registry_has_subkeys?</h3> <p>Use the <code class=\"docutils literal\">registry_has_subkeys?</code> method to find out if a Microsoft Windows registry key has one (or more) values.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method can be used in recipes and from within the <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> blocks in resources. This method is not designed to create or modify a registry key. If a registry key needs to be modified, use the <strong>registry_key</strong> resource.</p> </div> <p>The syntax for the <code class=\"docutils literal\">registry_has_subkeys?</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_has_subkeys?(KEY_PATH, ARCHITECTURE)</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">KEY_PATH</code> is the path to the registry key. The path must include the registry hive, which can be specified either as its full name or as the 3- or 4-letter abbreviation. For example, both <code class=\"docutils literal\">HKLM\\SECURITY</code> and <code class=\"docutils literal\">HKEY_LOCAL_MACHINE\\SECURITY</code> are both valid and equivalent. The following hives are valid: <code class=\"docutils literal\">HKEY_LOCAL_MACHINE</code>, <code class=\"docutils literal\">HKLM</code>, <code class=\"docutils literal\">HKEY_CURRENT_CONFIG</code>, <code class=\"docutils literal\">HKCC</code>, <code class=\"docutils literal\">HKEY_CLASSES_ROOT</code>, <code class=\"docutils literal\">HKCR</code>, <code class=\"docutils literal\">HKEY_USERS</code>, <code class=\"docutils literal\">HKU</code>, <code class=\"docutils literal\">HKEY_CURRENT_USER</code>, and <code class=\"docutils literal\">HKCU</code>.</li> <li>\n<code class=\"docutils literal\">ARCHITECTURE</code> is one of the following values: <code class=\"docutils literal\">:x86_64</code>, <code class=\"docutils literal\">:i386</code>, or <code class=\"docutils literal\">:machine</code>. In order to read or write 32-bit registry keys on 64-bit machines running Microsoft Windows, the <code class=\"docutils literal\">architecture</code> property must be set to <code class=\"docutils literal\">:i386</code>. The <code class=\"docutils literal\">:x86_64</code> value can be used to force writing to a 64-bit registry location, but this value is less useful than the default (<code class=\"docutils literal\">:machine</code>) because the chef-client returns an exception if <code class=\"docutils literal\">:x86_64</code> is used and the machine turns out to be a 32-bit machine (whereas with <code class=\"docutils literal\">:machine</code>, the chef-client is able to access the registry key on the 32-bit machine).</li> </ul> <p>This method will return <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">ARCHITECTURE</code> attribute should only specify <code class=\"docutils literal\">:x86_64</code> or <code class=\"docutils literal\">:i386</code> when it is necessary to write 32-bit (<code class=\"docutils literal\">:i386</code>) or 64-bit (<code class=\"docutils literal\">:x86_64</code>) values on a 64-bit machine. <code class=\"docutils literal\">ARCHITECTURE</code> will default to <code class=\"docutils literal\">:machine</code> unless a specific value is given.</p> </div>   <h3 id=\"registry-key-exists\">registry_key_exists?</h3> <p>Use the <code class=\"docutils literal\">registry_key_exists?</code> method to find out if a Microsoft Windows registry key exists at the specified path.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method can be used in recipes and from within the <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> blocks in resources. This method is not designed to create or modify a registry key. If a registry key needs to be modified, use the <strong>registry_key</strong> resource.</p> </div> <p>The syntax for the <code class=\"docutils literal\">registry_key_exists?</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_key_exists?(KEY_PATH, ARCHITECTURE)</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">KEY_PATH</code> is the path to the registry key. The path must include the registry hive, which can be specified either as its full name or as the 3- or 4-letter abbreviation. For example, both <code class=\"docutils literal\">HKLM\\SECURITY</code> and <code class=\"docutils literal\">HKEY_LOCAL_MACHINE\\SECURITY</code> are both valid and equivalent. The following hives are valid: <code class=\"docutils literal\">HKEY_LOCAL_MACHINE</code>, <code class=\"docutils literal\">HKLM</code>, <code class=\"docutils literal\">HKEY_CURRENT_CONFIG</code>, <code class=\"docutils literal\">HKCC</code>, <code class=\"docutils literal\">HKEY_CLASSES_ROOT</code>, <code class=\"docutils literal\">HKCR</code>, <code class=\"docutils literal\">HKEY_USERS</code>, <code class=\"docutils literal\">HKU</code>, <code class=\"docutils literal\">HKEY_CURRENT_USER</code>, and <code class=\"docutils literal\">HKCU</code>.</li> <li>\n<code class=\"docutils literal\">ARCHITECTURE</code> is one of the following values: <code class=\"docutils literal\">:x86_64</code>, <code class=\"docutils literal\">:i386</code>, or <code class=\"docutils literal\">:machine</code>. In order to read or write 32-bit registry keys on 64-bit machines running Microsoft Windows, the <code class=\"docutils literal\">architecture</code> property must be set to <code class=\"docutils literal\">:i386</code>. The <code class=\"docutils literal\">:x86_64</code> value can be used to force writing to a 64-bit registry location, but this value is less useful than the default (<code class=\"docutils literal\">:machine</code>) because the chef-client returns an exception if <code class=\"docutils literal\">:x86_64</code> is used and the machine turns out to be a 32-bit machine (whereas with <code class=\"docutils literal\">:machine</code>, the chef-client is able to access the registry key on the 32-bit machine).</li> </ul> <p>This method will return <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. (Any registry key values that are associated with this registry key are ignored.)</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">ARCHITECTURE</code> attribute should only specify <code class=\"docutils literal\">:x86_64</code> or <code class=\"docutils literal\">:i386</code> when it is necessary to write 32-bit (<code class=\"docutils literal\">:i386</code>) or 64-bit (<code class=\"docutils literal\">:x86_64</code>) values on a 64-bit machine. <code class=\"docutils literal\">ARCHITECTURE</code> will default to <code class=\"docutils literal\">:machine</code> unless a specific value is given.</p> </div>   <h3 id=\"registry-value-exists\">registry_value_exists?</h3> <p>Use the <code class=\"docutils literal\">registry_value_exists?</code> method to find out if a registry key value exists. Use <code class=\"docutils literal\">registry_data_exists?</code> to test for the type and data of a registry key value.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method can be used in recipes and from within the <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> blocks in resources. This method is not designed to create or modify a registry key. If a registry key needs to be modified, use the <strong>registry_key</strong> resource.</p> </div> <p>The syntax for the <code class=\"docutils literal\">registry_value_exists?</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_value_exists?(\n  KEY_PATH,\n  { :name =&gt; 'NAME' },\n  ARCHITECTURE\n)</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">KEY_PATH</code> is the path to the registry key. The path must include the registry hive, which can be specified either as its full name or as the 3- or 4-letter abbreviation. For example, both <code class=\"docutils literal\">HKLM\\SECURITY</code> and <code class=\"docutils literal\">HKEY_LOCAL_MACHINE\\SECURITY</code> are both valid and equivalent. The following hives are valid: <code class=\"docutils literal\">HKEY_LOCAL_MACHINE</code>, <code class=\"docutils literal\">HKLM</code>, <code class=\"docutils literal\">HKEY_CURRENT_CONFIG</code>, <code class=\"docutils literal\">HKCC</code>, <code class=\"docutils literal\">HKEY_CLASSES_ROOT</code>, <code class=\"docutils literal\">HKCR</code>, <code class=\"docutils literal\">HKEY_USERS</code>, <code class=\"docutils literal\">HKU</code>, <code class=\"docutils literal\">HKEY_CURRENT_USER</code>, and <code class=\"docutils literal\">HKCU</code>.</li> <li>\n<code class=\"docutils literal\">{ :name =&gt; 'NAME' }</code> is a hash that contains the name of the registry key value; if either <code class=\"docutils literal\">:type</code> or <code class=\"docutils literal\">:value</code> are specified in the hash, they are ignored</li> <li>\n<code class=\"docutils literal\">:type</code> represents the values available for registry keys in Microsoft Windows. Use <code class=\"docutils literal\">:binary</code> for REG_BINARY, <code class=\"docutils literal\">:string</code> for REG_SZ, <code class=\"docutils literal\">:multi_string</code> for REG_MULTI_SZ, <code class=\"docutils literal\">:expand_string</code> for REG_EXPAND_SZ, <code class=\"docutils literal\">:dword</code> for REG_DWORD, <code class=\"docutils literal\">:dword_big_endian</code> for REG_DWORD_BIG_ENDIAN, or <code class=\"docutils literal\">:qword</code> for REG_QWORD.</li> <li>\n<code class=\"docutils literal\">ARCHITECTURE</code> is one of the following values: <code class=\"docutils literal\">:x86_64</code>, <code class=\"docutils literal\">:i386</code>, or <code class=\"docutils literal\">:machine</code>. In order to read or write 32-bit registry keys on 64-bit machines running Microsoft Windows, the <code class=\"docutils literal\">architecture</code> property must be set to <code class=\"docutils literal\">:i386</code>. The <code class=\"docutils literal\">:x86_64</code> value can be used to force writing to a 64-bit registry location, but this value is less useful than the default (<code class=\"docutils literal\">:machine</code>) because the chef-client returns an exception if <code class=\"docutils literal\">:x86_64</code> is used and the machine turns out to be a 32-bit machine (whereas with <code class=\"docutils literal\">:machine</code>, the chef-client is able to access the registry key on the 32-bit machine).</li> </ul> <p>This method will return <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">ARCHITECTURE</code> attribute should only specify <code class=\"docutils literal\">:x86_64</code> or <code class=\"docutils literal\">:i386</code> when it is necessary to write 32-bit (<code class=\"docutils literal\">:i386</code>) or 64-bit (<code class=\"docutils literal\">:x86_64</code>) values on a 64-bit machine. <code class=\"docutils literal\">ARCHITECTURE</code> will default to <code class=\"docutils literal\">:machine</code> unless a specific value is given.</p> </div>   <h3 id=\"helpers\">Helpers</h3> <p>A recipe can define specific behaviors for specific Microsoft Windows platform versions by using a series of helper methods. To enable these helper methods, add the following to a recipe:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'chef/win32/version'</pre> <p>Then declare a variable using the <code class=\"docutils literal\">Chef::ReservedNames::Win32::Version</code> class:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">variable_name = Chef::ReservedNames::Win32::Version.new</pre> <p>And then use this variable to define specific behaviors for specific Microsoft Windows platform versions. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if variable_name.helper_name?\n  # Ruby code goes here, such as\n  resource_name do\n    # resource block\n  end\n\nelsif variable_name.helper_name?\n  # Ruby code goes here\n  resource_name do\n    # resource block for something else\n  end\n\nelse variable_name.helper_name?\n  # Ruby code goes here, such as\n  log 'log entry' do\n    level :level\n  end\n\nend</pre> <p>The following Microsoft Windows platform-specific helpers can be used in recipes:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Helper</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">cluster?</code></td> <td>Use to test for a Cluster SKU (Windows Server 2003 and later).</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">core?</code></td> <td>Use to test for a Core SKU (Windows Server 2003 and later).</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">datacenter?</code></td> <td>Use to test for a Datacenter SKU.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">marketing_name</code></td> <td>Use to display the marketing name for a Microsoft Windows platform.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">windows_7?</code></td> <td>Use to test for Windows 7.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">windows_8?</code></td> <td>Use to test for Windows 8.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">windows_8_1?</code></td> <td>Use to test for Windows 8.1.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">windows_2000?</code></td> <td>Use to test for Windows 2000.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">windows_home_server?</code></td> <td>Use to test for Windows Home Server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">windows_server_2003?</code></td> <td>Use to test for Windows Server 2003.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">windows_server_2003_r2?</code></td> <td>Use to test for Windows Server 2003 R2.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">windows_server_2008?</code></td> <td>Use to test for Windows Server 2008.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">windows_server_2008_r2?</code></td> <td>Use to test for Windows Server 2008 R2.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">windows_server_2012?</code></td> <td>Use to test for Windows Server 2012.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">windows_server_2012_r2?</code></td> <td>Use to test for Windows Server 2012 R2.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">windows_vista?</code></td> <td>Use to test for Windows Vista.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">windows_xp?</code></td> <td>Use to test for Windows XP.</td> </tr> </tbody> </table> <p>The following example installs Windows PowerShell 2.0 on systems that do not already have it installed. Microsoft Windows platform helper methods are used to define specific behaviors for specific platform versions:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">case node['platform']\nwhen 'windows'\n\n  require 'chef/win32/version'\n  windows_version = Chef::ReservedNames::Win32::Version.new\n\n  if (windows_version.windows_server_2008_r2? || windows_version.windows_7?) &amp;&amp; windows_version.core?\n\n    windows_feature 'NetFx2-ServerCore' do\n      action :install\n    end\n    windows_feature 'NetFx2-ServerCore-WOW64' do\n      action :install\n      only_if { node['kernel']['machine'] == 'x86_64' }\n    end\n\n  elsif windows_version.windows_server_2008? || windows_version.windows_server_2003_r2? ||\n      windows_version.windows_server_2003? || windows_version.windows_xp?\n\n    if windows_version.windows_server_2008?\n      windows_feature 'NET-Framework-Core' do\n        action :install\n      end\n\n    else\n      windows_package 'Microsoft .NET Framework 2.0 Service Pack 2' do\n        source node['ms_dotnet2']['url']\n        checksum node['ms_dotnet2']['checksum']\n        installer_type :custom\n        options '/quiet /norestart'\n        action :install\n      end\n    end\n  else\n    log '.NET Framework 2.0 is already enabled on this version of Windows' do\n      level :warn\n    end\n  end\nelse\n  log '.NET Framework 2.0 cannot be installed on platforms other than Windows' do\n    level :warn\n  end\nend</pre> <p>The previous example is from the <a class=\"reference external\" href=\"https://github.com/juliandunn/ms_dotnet2\">ms_dotnet2 cookbook</a>, created by community member <code class=\"docutils literal\">juliandunn</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/dsl_recipe.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/dsl_recipe.html</a>\n  </p>\n</div>\n","12-9/resource_gem_package":"<h1 id=\"gem-package\">gem_package</h1> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The <strong>chef_gem</strong> and <strong>gem_package</strong> resources are both used to install Ruby gems. For any machine on which the chef-client is installed, there are two instances of Ruby. One is the standard, system-wide instance of Ruby and the other is a dedicated instance that is available only to the chef-client. Use the <strong>chef_gem</strong> resource to install gems into the instance of Ruby that is dedicated to the chef-client. Use the <strong>gem_package</strong> resource to install all other gems (i.e. install gems system-wide).</p> </div> <p>Use the <strong>gem_package</strong> resource to manage gem packages that are only included in recipes. When a package is installed from a local file, it must be added to the node using the <strong>remote_file</strong> or <strong>cookbook_file</strong> resources.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>gem_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>gem_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">gem_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>gem_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">gem_package 'name' do\n  clear_sources              TrueClass, FalseClass\n  gem_binary                 String\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::Rubygems\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">gem_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">clear_sources</code>, <code class=\"docutils literal\">gem_binary</code>, <code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"gem-package-options\">Gem Package Options</h2> <p>The RubyGems package provider attempts to use the RubyGems API to install gems without spawning a new process, whenever possible. A gems command to install will be spawned under the following conditions:</p> <ul class=\"simple\"> <li>When a <code class=\"docutils literal\">gem_binary</code> property is specified (as a hash, a string, or by a .gemrc file), the chef-client will run that command to examine its environment settings and then again to install the gem.</li> <li>When install options are specified as a string, the chef-client will span a gems command with those options when installing the gem.</li> <li>The omnibus installer will search the <code class=\"docutils literal\">PATH</code> for a gem command rather than defaulting to the current gem environment. As part of <code class=\"docutils literal\">enforce_path_sanity</code>, the <code class=\"docutils literal\">bin</code> directories area added to the <code class=\"docutils literal\">PATH</code>, which means when there are no other proceeding RubyGems, the installation will still be operated against it.</li> </ul>  <h3 id=\"specify-with-hash\">Specify with Hash</h3> <p>If an explicit <code class=\"docutils literal\">gem_binary</code> parameter is not being used with the <code class=\"docutils literal\">gem_package</code> resource, it is preferable to provide the install options as a hash. This approach allows the provider to install the gem without needing to spawn an external gem process.</p> <p>The following RubyGems options are available for inclusion within a hash and are passed to the RubyGems DependencyInstaller:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">:env_shebang</code></li> <li><code class=\"docutils literal\">:force</code></li> <li><code class=\"docutils literal\">:format_executable</code></li> <li><code class=\"docutils literal\">:ignore_dependencies</code></li> <li><code class=\"docutils literal\">:prerelease</code></li> <li><code class=\"docutils literal\">:security_policy</code></li> <li><code class=\"docutils literal\">:wrappers</code></li> </ul> <p>For more information about these options, see the RubyGems documentation: <a class=\"reference external\" href=\"http://rubygems.rubyforge.org/rubygems-update/Gem/DependencyInstaller.html\">http://rubygems.rubyforge.org/rubygems-update/Gem/DependencyInstaller.html</a>.</p> <p><strong>Example</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">gem_package 'bundler' do\n  options(:prerelease =&gt; true, :format_executable =&gt; false)\nend</pre>   <h3 id=\"specify-with-string\">Specify with String</h3> <p>When using an explicit <code class=\"docutils literal\">gem_binary</code>, options must be passed as a string. When not using an explicit <code class=\"docutils literal\">gem_binary</code>, the chef-client is forced to spawn a gems process to install the gems (which uses more system resources) when options are passed as a string. String options are passed verbatim to the gems command and should be specified just as if they were passed on a command line. For example, <code class=\"docutils literal\">--prerelease</code> for a pre-release gem.</p> <p><strong>Example</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">gem_package 'nokogiri' do\n  gem_binary('/opt/ree/bin/gem')\n  options('--prerelease --no-format-executable')\nend</pre>   <h3 id=\"specify-with-gemrc-file\">Specify with .gemrc File</h3> <p>Options can be specified in a .gemrc file. By default the <code class=\"docutils literal\">gem_package</code> resource will use the Ruby interface to install gems which will ignore the .gemrc file. The <code class=\"docutils literal\">gem_package</code> resource can be forced to use the gems command instead (and to read the .gemrc file) by adding the <code class=\"docutils literal\">gem_binary</code> attribute to a code block.</p> <p><strong>Example</strong></p> <p>A template named <code class=\"docutils literal\">gemrc.erb</code> is located in a cookbook’s <code class=\"docutils literal\">/templates</code> directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">:sources:\n- http://&lt;%= node['gem_file']['host'] %&gt;:&lt;%= node['gem_file']['port'] %&gt;/</pre> <p>A recipe can be built that does the following:</p> <ul class=\"simple\"> <li>Builds a <code class=\"docutils literal\">.gemrc</code> file based on a <code class=\"docutils literal\">gemrc.erb</code> template</li> <li>Runs a <code class=\"docutils literal\">Gem.configuration</code> command</li> <li>Installs a package using the <code class=\"docutils literal\">.gemrc</code> file</li> </ul> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/root/.gemrc' do\n  source 'gemrc.erb'\n  action :create\n  notifies :run, 'ruby_block[refresh_gemrc]', :immediately\nend\n\nruby_block 'refresh_gemrc' do\n  action :nothing\n  block do\n    Gem.configuration = Gem::ConfigFile.new []\n  end\nend\n\ngem_package 'di-ruby-lvm' do\n  gem_binary '/opt/chef/embedded/bin/gem'\n  action :install\nend</pre>    <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:purge</code></dt> <dd>Purge a package. This action typically removes the configuration files as well as the package.</dd> <dt><code class=\"docutils literal\">:reconfig</code></dt> <dd>Reconfigure a package. This action requires a response file.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> <dt><code class=\"docutils literal\">:upgrade</code></dt> <dd>Install a package and/or ensure that a package is the latest version.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">clear_sources</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Set to <code class=\"docutils literal\">true</code> to download a gem from the path specified by the <code class=\"docutils literal\">source</code> property (and not from RubyGems). Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">gem_binary</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">A property for the <code class=\"docutils literal\">gem_package</code> provider that is used to specify a gems binary. By default, the same version of Ruby that is used by the chef-client will be installed.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The URL at which the gem package is located.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Rubygems</code>, <code class=\"docutils literal\">gem_package</code>\n</dt> <dd>Can be used with the <code class=\"docutils literal\">options</code> attribute.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a gems file from the local file system</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">gem_package 'right_aws' do\n  source '/tmp/right_aws-1.11.0.gem'\n  action :install\nend</pre> <p><strong>Use the ignore_failure common attribute</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">gem_package 'syntax' do\n  action :install\n  ignore_failure true\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_gem_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_gem_package.html</a>\n  </p>\n</div>\n","12-9/resource_git":"<h1 id=\"git\">git</h1> <p>Use the <strong>git</strong> resource to manage source control resources that exist in a git repository. git version 1.6.5 (or higher) is required to use all of the functionality in the <strong>git</strong> resource.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This resource is often used in conjunction with the <strong>deploy</strong> resource.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>git</strong> resource block manages source control resources that exist in a git repository:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">git \"#{Chef::Config[:file_cache_path]}/app_name\" do\n  repository node[:app_name][:git_repository]\n  revision node[:app_name][:git_revision]\n  action :sync\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>git</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">git 'name' do\n  additional_remotes         Hash\n  checkout_branch            String\n  depth                      Integer\n  destination                String # defaults to 'name' if not specified\n  enable_checkout            TrueClass, FalseClass\n  enable_submodules          TrueClass, FalseClass\n  environment                Hash\n  group                      String, Integer\n  notifies                   # see description\n  provider                   Chef::Provider::Scm::Git\n  reference                  String\n  remote                     String\n  repository                 String\n  revision                   String\n  ssh_wrapper                String\n  subscribes                 # see description\n  timeout                    Integer\n  user                       String, Integer\n  action                     Symbol # defaults to :sync if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">git</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block and also (when the <code class=\"docutils literal\">destination</code> property is not specified) the location in which the source files will be placed and/or synchronized with the files under source control management</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">additional_remotes</code>, <code class=\"docutils literal\">checkout_branch</code>, <code class=\"docutils literal\">depth</code>, <code class=\"docutils literal\">destination</code>, <code class=\"docutils literal\">enable_checkout</code>, <code class=\"docutils literal\">enable_submodules</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">reference</code>, <code class=\"docutils literal\">remote</code>, <code class=\"docutils literal\">repository</code>, <code class=\"docutils literal\">revision</code>, <code class=\"docutils literal\">ssh_wrapper</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">user</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:checkout</code></dt> <dd>Clone or check out the source. When a checkout is available, this provider does nothing.</dd> <dt><code class=\"docutils literal\">:export</code></dt> <dd>Export the source, excluding or removing any version control artifacts.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:sync</code></dt> <dd>Default. Update the source to the specified version, or get a new clone or checkout. This action causes a hard reset of the index and working tree, discarding any uncommitted changes.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">additional_remotes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">An array of additional remotes that are added to the git repository configuration.</p> </dd> <dt><code class=\"docutils literal\">checkout_branch</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Do a one-time checkout from git <strong>or</strong> use when a branch in the upstream repository is named <code class=\"docutils literal\">deploy</code>. To prevent the <strong>git</strong> resource from attempting to check out master from master, set <code class=\"docutils literal\">enable_checkout</code> to <code class=\"docutils literal\">false</code> when using the <code class=\"docutils literal\">checkout_branch</code> property. See <code class=\"docutils literal\">revision</code>. Default value: <code class=\"docutils literal\">deploy</code>.</p> </dd> <dt><code class=\"docutils literal\">depth</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of past revisions to be included in the git shallow clone. The default behavior will do a full clone.</p> </dd> <dt><code class=\"docutils literal\">destination</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The location path to which the source is to be cloned, checked out, or exported. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">enable_checkout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Check out a repo from master. Set to <code class=\"docutils literal\">false</code> when using the <code class=\"docutils literal\">checkout_branch</code> attribute to prevent the <strong>git</strong> resource from attempting to check out master from master. Default value: <code class=\"docutils literal\">true</code>.</p> </dd> <dt><code class=\"docutils literal\">enable_submodules</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Perform a sub-module initialization and update. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">environment</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p>A Hash of environment variables in the form of <code class=\"docutils literal\">{\"ENV_VARIABLE\" =&gt; \"VALUE\"}</code>. (These variables must exist for a command to be run successfully.)</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <strong>git</strong> provider automatically sets the <code class=\"docutils literal\">ENV['HOME']</code> and <code class=\"docutils literal\">ENV['GIT_SSH']</code> environment variables. To override this behavior and provide different values, add <code class=\"docutils literal\">ENV['HOME']</code> and/or <code class=\"docutils literal\">ENV['GIT_SSH']</code> to the <code class=\"docutils literal\">environment</code> Hash.</p> </div> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The system group that is responsible for the checked-out code.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">reference</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The alias for revision.</p> </dd> <dt><code class=\"docutils literal\">remote</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The remote repository to use when synchronizing an existing clone.</p> </dd> <dt><code class=\"docutils literal\">repository</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The URI for the git repository.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">revision</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p>A branch, tag, or commit to be synchronized with git. This can be symbolic, like <code class=\"docutils literal\">HEAD</code> or it can be a source control management-specific revision identifier. See <code class=\"docutils literal\">checkout_branch</code>. Default value: <code class=\"docutils literal\">HEAD</code>.</p> <p>The value of the <code class=\"docutils literal\">revision</code> attribute may change over time. From one branch to another, to a tag, to a specific SHA for a commit, and then back to a branch. The <code class=\"docutils literal\">revision</code> attribute may even be changed in a way where history gets rewritten.</p> <p>Instead of tracking a specific branch or doing a headless checkout, the chef-client maintains its own branch (via the <strong>git</strong> resource) that does not exist in the upstream repository. The chef-client is then free to forcibly check out this branch to any commit without destroying the local history of an existing branch.</p> <p>For example, to explicitly track an upstream repository’s master branch:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">revision 'master'</pre> <p class=\"last\">Use the <code class=\"docutils literal\">git rev-parse</code> and <code class=\"docutils literal\">git ls-remote</code> commands to verify that the chef-client is synchronizing commits correctly. (The chef-client always runs <code class=\"docutils literal\">git ls-remote</code> on the upstream repository to verify the commit is made to the correct repository.)</p> </dd> <dt><code class=\"docutils literal\">ssh_wrapper</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The path to the wrapper script used when running SSH with git. The <code class=\"docutils literal\">GIT_SSH</code> environment variable is set to this.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The amount of time (in seconds) to wait for a command to execute before timing out. When this property is specified using the <strong>deploy</strong> resource, the value of the <code class=\"docutils literal\">timeout</code> property is passed from the <strong>deploy</strong> resource to the <strong>git</strong> resource.</p> </dd> <dt><code class=\"docutils literal\">user</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The system user that is responsible for the checked-out code. Default value: the home directory of this user, as indicated by the <code class=\"docutils literal\">HOME</code> environment variable.</p> </dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Use the git mirror</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">git '/opt/mysources/couch' do\n  repository 'git://git.apache.org/couchdb.git'\n  revision 'master'\n  action :sync\nend</pre> <p><strong>Use different branches</strong></p> <p>To use different branches, depending on the environment of the node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if node.chef_environment == 'QA'\n   branch_name = 'staging'\nelse\n   branch_name = 'master'\nend\n\ngit '/home/user/deployment' do\n   repository 'git@github.com:gitsite/deployment.git'\n   revision branch_name\n   action :sync\n   user 'user'\n   group 'test'\nend</pre> <p>where the <code class=\"docutils literal\">branch_name</code> variable is set to <code class=\"docutils literal\">staging</code> or <code class=\"docutils literal\">master</code>, depending on the environment of the node. Once this is determined, the <code class=\"docutils literal\">branch_name</code> variable is used to set the revision for the repository. If the <code class=\"docutils literal\">git status</code> command is used after running the example above, it will return the branch name as <code class=\"docutils literal\">deploy</code>, as this is the default value. Run the chef-client in debug mode to verify that the correct branches are being checked out:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-client -l debug</pre> <p><strong>Install an application from git using bash</strong></p> <p>The following example shows how Bash can be used to install a plug-in for rbenv named <code class=\"docutils literal\">ruby-build</code>, which is located in git version source control. First, the application is synchronized, and then Bash changes its working directory to the location in which <code class=\"docutils literal\">ruby-build</code> is located, and then runs a command.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">git \"#{Chef::Config[:file_cache_path]}/ruby-build\" do\n   repository 'git://github.com/sstephenson/ruby-build.git'\n   reference 'master'\n   action :sync\n end\n\n bash 'install_ruby_build' do\n   cwd '#{Chef::Config[:file_cache_path]}/ruby-build'\n   user 'rbenv'\n   group 'rbenv'\n   code &lt;&lt;-EOH\n     ./install.sh\n     EOH\n   environment 'PREFIX' =&gt; '/usr/local'\nend</pre> <p>To read more about <code class=\"docutils literal\">ruby-build</code>, see here: <a class=\"reference external\" href=\"https://github.com/sstephenson/ruby-build\">https://github.com/sstephenson/ruby-build</a>.</p> <p><strong>Upgrade packages from git</strong></p> <p>The following example uses the <strong>git</strong> resource to upgrade packages:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># the following code sample comes from the ``source`` recipe\n# in the ``libvpx-cookbook`` cookbook:\n# https://github.com/enmasse-entertainment/libvpx-cookbook\n\ngit \"#{Chef::Config[:file_cache_path]}/libvpx\" do\n  repository node[:libvpx][:git_repository]\n  revision node[:libvpx][:git_revision]\n  action :sync\n  notifies :run, 'bash[compile_libvpx]', :immediately\nend</pre> <p><strong>Pass in environment variables</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">git '/opt/mysources/couch' do\n  repository 'git://git.apache.org/couchdb.git'\n  revision 'master'\n  environment  { 'VAR' =&gt; 'whatever' }\n  action :sync\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_git.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_git.html</a>\n  </p>\n</div>\n","12-9/resource_http_request":"<h1 id=\"http-request\">http_request</h1> <p>Use the <strong>http_request</strong> resource to send an HTTP request (<code class=\"docutils literal\">GET</code>, <code class=\"docutils literal\">PUT</code>, <code class=\"docutils literal\">POST</code>, <code class=\"docutils literal\">DELETE</code>, <code class=\"docutils literal\">HEAD</code>, or <code class=\"docutils literal\">OPTIONS</code>) with an arbitrary message. This resource is often useful when custom callbacks are necessary.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>http_request</strong> resource block sends HTTP requests with an arbitrary message. For example, send a <code class=\"docutils literal\">DELETE</code> request to <code class=\"docutils literal\">'http://www.chef.io/some_page?message=please_delete_me'</code>.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">http_request 'please_delete_me' do\n  url 'http://www.chef.io/some_page'\n  action :delete\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>http_request</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">http_request 'name' do\n  headers                    Hash\n  message                    Object # defaults to 'name' if not specified\n  notifies                   # see description\n  provider                   Chef::Provider::HttpRequest\n  subscribes                 # see description\n  url                        String\n  action                     Symbol # defaults to :get if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">http_request</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">headers</code>, <code class=\"docutils literal\">message</code>, <code class=\"docutils literal\">provider</code>, and <code class=\"docutils literal\">url</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:delete</code></dt> <dd>Send a <code class=\"docutils literal\">DELETE</code> request.</dd> <dt><code class=\"docutils literal\">:get</code></dt> <dd>Default. Send a <code class=\"docutils literal\">GET</code> request.</dd> <dt><code class=\"docutils literal\">:head</code></dt> <dd>Send a <code class=\"docutils literal\">HEAD</code> request.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:options</code></dt> <dd>Send an <code class=\"docutils literal\">OPTIONS</code> request.</dd> <dt><code class=\"docutils literal\">:post</code></dt> <dd>Send a <code class=\"docutils literal\">POST</code> request.</dd> <dt><code class=\"docutils literal\">:put</code></dt> <dd>Send a <code class=\"docutils literal\">PUT</code> request.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">headers</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A Hash of custom headers. Default value: <code class=\"docutils literal\">{}</code>.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">message</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Object</p> <p class=\"last\">The message that is sent by the HTTP request. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">url</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The URL to which an HTTP request is sent.</p> </dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Send a GET request</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">http_request 'some_message' do\n  url 'http://example.com/check_in'\nend</pre> <p>The message is sent as <code class=\"docutils literal\">http://example.com/check_in?message=some_message</code>.</p> <p><strong>Send a POST request</strong></p> <p>To send a <code class=\"docutils literal\">POST</code> request as JSON data, convert the message to JSON and include the correct content-type header. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">http_request 'posting data' do\n  action :post\n  url 'http://example.com/check_in'\n  message ({:some =&gt; 'data'}.to_json)\n  headers({'AUTHORIZATION' =&gt; \"Basic #{\n    Base64.encode64('username:password')}\",\n    'Content-Type' =&gt; 'application/data'\n  })\nend</pre> <p><strong>Transfer a file only when the remote source changes</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">remote_file '/tmp/couch.png' do\n  source 'http://couchdb.apache.org/img/sketch.png'\n  action :nothing\nend\n\nhttp_request 'HEAD http://couchdb.apache.org/img/sketch.png' do\n  message ''\n  url 'http://couchdb.apache.org/img/sketch.png'\n  action :head\n  if File.exist?('/tmp/couch.png')\n    headers 'If-Modified-Since' =&gt; File.mtime('/tmp/couch.png').httpdate\n  end\n  notifies :create, 'remote_file[/tmp/couch.png]', :immediately\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_http_request.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_http_request.html</a>\n  </p>\n</div>\n","12-9/resource_ifconfig":"<h1 id=\"ifconfig\">ifconfig</h1> <p>Use the <strong>ifconfig</strong> resource to manage interfaces.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>ifconfig</strong> resource block manages interfaces, such as a static IP address:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ifconfig '33.33.33.80' do\n  device 'eth1'\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>ifconfig</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ifconfig 'name' do\n  bcast                      String\n  bootproto                  String\n  device                     String\n  hwaddr                     String\n  inet_addr                  String\n  mask                       String\n  metric                     String\n  mtu                        String\n  network                    String\n  notifies                   # see description\n  onboot                     String\n  onparent                   String\n  provider                   Chef::Provider::Ifconfig\n  subscribes                 # see description\n  target                     String # defaults to 'name' if not specified\n  action                     Symbol # defaults to :create if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">ifconfig</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">bcast</code>, <code class=\"docutils literal\">bootproto</code>, <code class=\"docutils literal\">device</code>, <code class=\"docutils literal\">hwaddr</code>, <code class=\"docutils literal\">inet_addr</code>, <code class=\"docutils literal\">mask</code>, <code class=\"docutils literal\">metric</code>, <code class=\"docutils literal\">mtu</code>, <code class=\"docutils literal\">network</code>, <code class=\"docutils literal\">onboot</code>, <code class=\"docutils literal\">onparent</code>, <code class=\"docutils literal\">provider</code>, and <code class=\"docutils literal\">target</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:add</code></dt> <dd>Default. Run ifconfig to configure a network interface and (on some platforms) write a configuration file for that network interface.</dd> <dt><code class=\"docutils literal\">:delete</code></dt> <dd>Run ifconfig to disable a network interface and (on some platforms) delete that network interface’s configuration file.</dd> <dt><code class=\"docutils literal\">:disable</code></dt> <dd>Run ifconfig to disable a network interface.</dd> <dt><code class=\"docutils literal\">:enable</code></dt> <dd>Run ifconfig to enable a network interface.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">bcast</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The broadcast address for a network interface. On some platforms this property is not set using ifconfig, but instead is added to the startup configuration file for the network interface.</p> </dd> <dt><code class=\"docutils literal\">bootproto</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The boot protocol used by a network interface.</p> </dd> <dt><code class=\"docutils literal\">device</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The network interface to be configured.</p> </dd> <dt><code class=\"docutils literal\">hwaddr</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The hardware address for the network interface.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">inet_addr</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The Internet host address for the network interface.</p> </dd> <dt><code class=\"docutils literal\">mask</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The decimal representation of the network mask. For example: <code class=\"docutils literal\">255.255.255.0</code>.</p> </dd> <dt><code class=\"docutils literal\">metric</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The routing metric for the interface.</p> </dd> <dt><code class=\"docutils literal\">mtu</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The maximum transmission unit (MTU) for the network interface.</p> </dd> <dt><code class=\"docutils literal\">network</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The address for the network interface.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">onboot</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Bring up the network interface on boot.</p> </dd> <dt><code class=\"docutils literal\">onparent</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Bring up the network interface when its parent interface is brought up.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">target</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The IP address that is to be assigned to the network interface. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Configure a network interface</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ifconfig \"33.33.33.80\" do\n  bootproto \"dhcp\"\n  device \"eth1\"\nend</pre> <p>will create the following interface:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">vagrant@default-ubuntu-1204:~$ cat /etc/network/interfaces.d/ifcfg-eth1\niface eth1 inet dhcp</pre> <p><strong>Specify a boot protocol</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ifconfig '192.186.0.1' do\n  device 'eth0'\nend</pre> <p><strong>Specify a static IP address</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ifconfig \"33.33.33.80\" do\n  device \"eth1\"\nend</pre> <p>will create the following interface:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">iface eth1 inet static\n  address 33.33.33.80</pre> <p><strong>Update a static IP address with a boot protocol</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ifconfig \"33.33.33.80\" do\n  bootproto \"dhcp\"\n  device \"eth1\"\nend</pre> <p>will update the interface from <code class=\"docutils literal\">static</code> to <code class=\"docutils literal\">dhcp</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">iface eth1 inet dhcp\n  address 33.33.33.80</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_ifconfig.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_ifconfig.html</a>\n  </p>\n</div>\n","12-9/resource_ips_package":"<h1 id=\"ips-package\">ips_package</h1> <p>Use the <strong>ips_package</strong> resource to manage packages (using Image Packaging System (IPS)) on the Solaris 11 platform.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>ips_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>ips_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ips_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>ips_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ips_package 'name' do\n  accept_license             TrueClass, FalseClass\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::Ips\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">ips_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">accept_license</code>, <code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> <dt><code class=\"docutils literal\">:upgrade</code></dt> <dd>Install a package and/or ensure that a package is the latest version.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">accept_license</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Accept an end-user license agreement, automatically. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The path to a package in the local file system.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Ips</code>, <code class=\"docutils literal\">ips_package</code>\n</dt> <dd>The provider for the ips platform.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ips_package 'name of package' do\n  action :install\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_ips_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_ips_package.html</a>\n  </p>\n</div>\n","12-9/resource_link":"<h1 id=\"link\">link</h1> <p>Use the <strong>link</strong> resource to create symbolic or hard links.</p> <p>A symbolic link—sometimes referred to as a soft link—is a directory entry that associates a file name with a string that contains an absolute or relative path to a file on any file system. In other words, “a file that contains a path that points to another file.” A symbolic link creates a new file with a new inode that points to the inode location of the original file.</p> <p>A hard link is a directory entry that associates a file with another file in the same file system. In other words, “multiple directory entries to the same file.” A hard link creates a new file that points to the same inode as the original file.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>link</strong> resource block creates symbolic or hard links. For example, to create a hard link from <code class=\"docutils literal\">/tmp/file</code> to <code class=\"docutils literal\">/etc/file</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">link '/tmp/file' do\n  to '/etc/file'\n  link_type :hard\nend</pre> <p>Because the default value for <code class=\"docutils literal\">link_type</code> is symbolic, and because properties that are not specified in the resource block will be assigned their default values, the following example creates a symbolic link:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">link '/tmp/file' do\n  to '/etc/file'\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>link</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">link 'name' do\n  group                      Integer, String\n  link_type                  Symbol\n  mode                       Integer, String\n  notifies                   # see description\n  owner                      Integer, String\n  provider                   Chef::Provider::Link\n  subscribes                 # see description\n  target_file                String # defaults to 'name' if not specified\n  to                         String\n  action                     Symbol # defaults to :create if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">link</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">link_type</code>, <code class=\"docutils literal\">mode</code>, <code class=\"docutils literal\">owner</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">target_file</code>, and <code class=\"docutils literal\">to</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:create</code></dt> <dd>Default. Create a link. If a link already exists (but does not match), update that link to match.</dd> <dt><code class=\"docutils literal\">:delete</code></dt> <dd>Delete a link.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">A string or ID that identifies the group associated with a symbolic link.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">link_type</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol</p> <p class=\"last\">The type of link: <code class=\"docutils literal\">:symbolic</code> or <code class=\"docutils literal\">:hard</code>. Default value: <code class=\"docutils literal\">:symbolic</code>.</p> </dd> <dt><code class=\"docutils literal\">mode</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p>If <code class=\"docutils literal\">mode</code> is not specified and if the file already exists, the existing mode on the file is used. If <code class=\"docutils literal\">mode</code> is not specified, the file does not exist, and the <code class=\"docutils literal\">:create</code> action is specified, the chef-client assumes a mask value of <code class=\"docutils literal\">'0777'</code> and then applies the umask for the system on which the file is to be created to the <code class=\"docutils literal\">mask</code> value. For example, if the umask on a system is <code class=\"docutils literal\">'022'</code>, the chef-client uses the default value of <code class=\"docutils literal\">'0755'</code>. Default value: <code class=\"docutils literal\">777</code>.</p> <p>The behavior is different depending on the platform.</p> <p>UNIX- and Linux-based systems: A quoted 3-5 character string that defines the octal mode that is passed to chmod. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. If the value is specified as a quoted string, it works exactly as if the <code class=\"docutils literal\">chmod</code> command was passed. If the value is specified as an integer, prepend a zero (<code class=\"docutils literal\">0</code>) to the value to ensure that it is interpreted as an octal number. For example, to assign read, write, and execute rights for all users, use <code class=\"docutils literal\">'0777'</code> or <code class=\"docutils literal\">'777'</code>; for the same rights, plus the sticky bit, use <code class=\"docutils literal\">'01777'</code> or <code class=\"docutils literal\">'1777'</code>.</p> <p class=\"last\">Microsoft Windows: A quoted 3-5 character string that defines the octal mode that is translated into rights for Microsoft Windows security. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. Values up to <code class=\"docutils literal\">'0777'</code> are allowed (no sticky bits) and mean the same in Microsoft Windows as they do in UNIX, where <code class=\"docutils literal\">4</code> equals <code class=\"docutils literal\">GENERIC_READ</code>, <code class=\"docutils literal\">2</code> equals <code class=\"docutils literal\">GENERIC_WRITE</code>, and <code class=\"docutils literal\">1</code> equals <code class=\"docutils literal\">GENERIC_EXECUTE</code>. This property cannot be used to set <code class=\"docutils literal\">:full_control</code>. This property has no effect if not specified, but when it and <code class=\"docutils literal\">rights</code> are both specified, the effects are cumulative.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">owner</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">The owner associated with a symbolic link.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">target_file</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The name of the link. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">to</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The actual file to which the link is to be created.</p> </dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Create symbolic links</strong></p> <p>The following example will create a symbolic link from <code class=\"docutils literal\">/tmp/file</code> to <code class=\"docutils literal\">/etc/file</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">link '/tmp/file' do\n  to '/etc/file'\nend</pre> <p><strong>Create hard links</strong></p> <p>The following example will create a hard link from <code class=\"docutils literal\">/tmp/file</code> to <code class=\"docutils literal\">/etc/file</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">link '/tmp/file' do\n  to '/etc/file'\n  link_type :hard\nend</pre> <p><strong>Delete links</strong></p> <p>The following example will delete the <code class=\"docutils literal\">/tmp/file</code> symbolic link and uses the <code class=\"docutils literal\">only_if</code> guard to run the <code class=\"docutils literal\">test -L</code> command, which verifies that <code class=\"docutils literal\">/tmp/file</code> is a symbolic link, and then only deletes <code class=\"docutils literal\">/tmp/file</code> if the test passes:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">link '/tmp/file' do\n  action :delete\n  only_if 'test -L /tmp/file'\nend</pre> <p><strong>Create multiple symbolic links</strong></p> <p>The following example creates symbolic links from two files in the <code class=\"docutils literal\">/vol/webserver/cert/</code> directory to files located in the <code class=\"docutils literal\">/etc/ssl/certs/</code> directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">link '/vol/webserver/cert/server.crt' do\n  to '/etc/ssl/certs/ssl-cert-name.pem'\nend\n\nlink '/vol/webserver/cert/server.key' do\n  to '/etc/ssl/certs/ssl-cert-name.key'\nend</pre> <p><strong>Create platform-specific symbolic links</strong></p> <p>The following example shows installing a filter module on Apache. The package name is different for different platforms, and for the Red Hat Enterprise Linux family, a symbolic link is required:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">include_recipe 'apache2::default'\n\ncase node['platform_family']\nwhen 'debian'\n  ...\nwhen 'suse'\n  ...\nwhen 'rhel', 'fedora'\n  ...\n\n\n  link '/usr/lib64/httpd/modules/mod_apreq.so' do\n    to      '/usr/lib64/httpd/modules/mod_apreq2.so'\n    only_if 'test -f /usr/lib64/httpd/modules/mod_apreq2.so'\n  end\n\n  link '/usr/lib/httpd/modules/mod_apreq.so' do\n    to      '/usr/lib/httpd/modules/mod_apreq2.so'\n    only_if 'test -f /usr/lib/httpd/modules/mod_apreq2.so'\n  end\nend\n\n...</pre> <p>For the entire recipe, see <a class=\"reference external\" href=\"https://github.com/onehealth-cookbooks/apache2/blob/68bdfba4680e70b3e90f77e40223dd535bf22c17/recipes/mod_apreq2.rb\">https://github.com/onehealth-cookbooks/apache2/blob/68bdfba4680e70b3e90f77e40223dd535bf22c17/recipes/mod_apreq2.rb</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_link.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_link.html</a>\n  </p>\n</div>\n","12-9/resource_log":"<h1 id=\"log\">log</h1> <p>Use the <strong>log</strong> resource to create log entries. The <strong>log</strong> resource behaves like any other resource: built into the resource collection during the compile phase, and then run during the execution phase. (To create a log entry that is not built into the resource collection, use <code class=\"docutils literal\">Chef::Log</code> instead of the <strong>log</strong> resource.)</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>log</strong> resource block adds messages to the log file based on events that occur during the chef-client run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">log 'message' do\n  message 'A message add to the log.'\n  level :info\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>log</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">log 'name' do\n  level                      Symbol\n  message                    String # defaults to 'name' if not specified\n  notifies                   # see description\n  provider                   Chef::Provider::ChefLog\n  subscribes                 # see description\n  action                     Symbol # defaults to :write if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">log</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">message</code> is the log message to write</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">level</code>, <code class=\"docutils literal\">message</code>, and <code class=\"docutils literal\">provider</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:write</code></dt> <dd>Default. Write to log.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">level</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol</p> <p class=\"last\">The level of logging that is to be displayed by the chef-client. The chef-client uses the <code class=\"docutils literal\">mixlib-log</code> (<a class=\"reference external\" href=\"https://github.com/chef/mixlib-log\">https://github.com/chef/mixlib-log</a>) to handle logging behavior. Options (in order of priority): <code class=\"docutils literal\">:debug</code>, <code class=\"docutils literal\">:info</code>, <code class=\"docutils literal\">:warn</code>, <code class=\"docutils literal\">:error</code>, and <code class=\"docutils literal\">:fatal</code>. Default value: <code class=\"docutils literal\">:info</code>.</p> </dd> <dt><code class=\"docutils literal\">message</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The message to be added to a log file. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> </dl>   <h2 id=\"chef-log-entries\">Chef::Log Entries</h2> <p><code class=\"docutils literal\">Chef::Log</code> extends <code class=\"docutils literal\">Mixlib::Log</code> and will print log entries to the default logger that is configured for the machine on which the chef-client is running. (To create a log entry that is built into the resource collection, use the <strong>log</strong> resource instead of <code class=\"docutils literal\">Chef::Log</code>.)</p> <p>The following log levels are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Log Level</th> <th class=\"head\">Syntax</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Debug</td> <td><code class=\"docutils literal\">Chef::Log.debug('string')</code></td> </tr> <tr class=\"row-odd\">\n<td>Error</td> <td><code class=\"docutils literal\">Chef::Log.error('string')</code></td> </tr> <tr class=\"row-even\">\n<td>Fatal</td> <td><code class=\"docutils literal\">Chef::Log.fatal('string')</code></td> </tr> <tr class=\"row-odd\">\n<td>Info</td> <td><code class=\"docutils literal\">Chef::Log.info('string')</code></td> </tr> <tr class=\"row-even\">\n<td>Warn</td> <td><code class=\"docutils literal\">Chef::Log.warn('string')</code></td> </tr> </tbody> </table> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The parentheses are optional, e.g. <code class=\"docutils literal\">Chef::Log.info 'string'</code> may be used instead of <code class=\"docutils literal\">Chef::Log.info('string')</code>.</p> </div> <p>The following example shows a series of fatal <code class=\"docutils literal\">Chef::Log</code> entries:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">unless node['splunk']['upgrade_enabled']\n  Chef::Log.fatal('The chef-splunk::upgrade recipe was added to the node,')\n  Chef::Log.fatal('but the attribute `node[\"splunk\"][\"upgrade_enabled\"]` was not set.')\n  Chef::Log.fatal('I am bailing here so this node does not upgrade.')\n  raise\nend\n\nservice 'splunk_stop' do\n  service_name 'splunk'\n  supports :status =&gt; true\n  provider Chef::Provider::Service::Init\n  action :stop\nend\n\nif node['splunk']['is_server']\n  splunk_package = 'splunk'\n  url_type = 'server'\nelse\n  splunk_package = 'splunkforwarder'\n  url_type = 'forwarder'\nend\n\nsplunk_installer splunk_package do\n  url node['splunk']['upgrade'][\"#{url_type}_url\"]\nend\n\nif node['splunk']['accept_license']\n  execute 'splunk-unattended-upgrade' do\n    command \"#{splunk_cmd} start --accept-license --answer-yes\"\n  end\nelse\n  Chef::Log.fatal('You did not accept the license (set node[\"splunk\"][\"accept_license\"] to true)')\n  Chef::Log.fatal('Splunk is stopped and cannot be restarted until the license is accepted!')\n  raise\nend</pre> <p>The full recipe is the <code class=\"docutils literal\">upgrade.rb</code> recipe of the <a class=\"reference external\" href=\"https://github.com/chef-cookbooks/chef-splunk/\">chef-splunk cookbook</a> that is maintained by Chef.</p> <p>The following example shows using multiple <code class=\"docutils literal\">Chef::Log</code> entry types:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">...\n\nbegin\n  aws = Chef::DataBagItem.load(:aws, :main)\n  Chef::Log.info(\"Loaded AWS information from DataBagItem aws[#{aws['id']}]\")\nrescue\n  Chef::Log.fatal(\"Could not find the 'main' item in the 'aws' data bag\")\n  raise\nend\n\n...</pre> <p>The full recipe is in the <code class=\"docutils literal\">ebs_volume.rb</code> recipe of the <a class=\"reference external\" href=\"https://github.com/chef-cookbooks/database/\">database cookbook</a> that is maintained by Chef.</p>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Set default logging level</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">log 'a string to log'</pre> <p><strong>Set debug logging level</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">log 'a debug string' do\n  level :debug\nend</pre> <p><strong>Add a message to a log file</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">log 'message' do\n  message 'This is the message that will be added to the log.'\n  level :info\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_log.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_log.html</a>\n  </p>\n</div>\n","12-9/resource_macports_package":"<h1 id=\"macports-package\">macports_package</h1> <p>Use the <strong>macports_package</strong> resource to manage packages for the Mac OS X platform.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>macports_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>macports_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">macports_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>macports_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">macports_package 'name' do\n  notifies                   # see description\n  options                    String\n  provider                   Chef::Provider::Package::Macports\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">macports_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:purge</code></dt> <dd>Purge a package. This action typically removes the configuration files as well as the package.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> <dt><code class=\"docutils literal\">:upgrade</code></dt> <dd>Install a package and/or ensure that a package is the latest version.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The path to a package in the local file system.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Macports</code>, <code class=\"docutils literal\">macports_package</code>\n</dt> <dd>The provider for the Mac OS X platform.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">macports_package 'name of package' do\n  action :install\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_macports_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_macports_package.html</a>\n  </p>\n</div>\n","12-9/resource_ksh":"<h1 id=\"ksh\">ksh</h1> <p>Use the <strong>ksh</strong> resource to execute scripts using the Korn shell (ksh) interpreter. This resource may also use any of the actions and properties that are available to the <strong>execute</strong> resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <strong>ksh</strong> script resource (which is based on the <strong>script</strong> resource) is different from the <strong>ruby_block</strong> resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>ksh</strong> resource block executes scripts using csh:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ksh 'hello world' do\n  code &lt;&lt;-EOH\n    echo \"Hello world!\"\n    echo \"Current directory: \" $cwd\n    EOH\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">code</code> specifies the command to run</li> </ul> <p>The full syntax for all of the properties that are available to the <strong>ksh</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ksh 'name' do\n  code                       String\n  creates                    String\n  cwd                        String\n  environment                Hash\n  flags                      String\n  group                      String, Integer\n  notifies                   # see description\n  path                       Array\n  provider                   Chef::Provider::Script::Ksh\n  returns                    Integer, Array\n  subscribes                 # see description\n  timeout                    Integer, Float\n  user                       String, Integer\n  umask                      String, Integer\n  action                     Symbol # defaults to :run if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">ksh</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">code</code>, <code class=\"docutils literal\">creates</code>, <code class=\"docutils literal\">cwd</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">flags</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">returns</code>, <code class=\"docutils literal\">timeout</code>, <code class=\"docutils literal\">user</code>, and <code class=\"docutils literal\">umask</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Prevent a command from running. This action is used to specify that a command is run only when another resource notifies it.</dd> <dt><code class=\"docutils literal\">:run</code></dt> <dd>Default. Run a script.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">code</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">A quoted (” ”) string of code to be executed.</p> </dd> <dt><code class=\"docutils literal\">creates</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Prevent a command from creating a file when that file already exists.</p> </dd> <dt><code class=\"docutils literal\">cwd</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The current working directory.</p> </dd> <dt><code class=\"docutils literal\">environment</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A Hash of environment variables in the form of <code class=\"docutils literal\">{\"ENV_VARIABLE\" =&gt; \"VALUE\"}</code>. (These variables must exist for a command to be run successfully.)</p> </dd> <dt><code class=\"docutils literal\">flags</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One or more command line flags that are passed to the interpreter when a command is invoked.</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The group name or group ID that must be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p>An array of paths to use when searching for a command. These paths are not added to the command’s environment $PATH. The default value uses the system path.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>The <code class=\"docutils literal\">path</code> property is not implemented by any provider in any version of the chef-client. Starting with chef-client 12, using the <code class=\"docutils literal\">path</code> property will return a warning. Starting with chef-client 13, the <code class=\"docutils literal\">path</code> property is deprecated and using it will return an exception. Cookbooks that currently use the <code class=\"docutils literal\">path</code> property should be updated to use the <code class=\"docutils literal\">environment</code> property instead.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">ksh 'mycommand' do\n  environment 'PATH' =&gt; \"/my/path/to/bin:#{ENV['PATH']}\"\nend</pre> </div> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">returns</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Array</p> <p class=\"last\">The return value for a command. This may be an array of accepted values. An exception is raised when the return value(s) do not match. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Float</p> <p class=\"last\">The amount of time (in seconds) a command is to wait before timing out. Default value: <code class=\"docutils literal\">3600</code>.</p> </dd> <dt><code class=\"docutils literal\">user</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The user name or user ID that should be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">umask</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The file mode creation mask, or umask.</p> </dd> </dl>  <h3 id=\"guards\">Guards</h3> <p>A guard property can be used to evaluate the state of a node during the execution phase of the chef-client run. Based on the results of this evaluation, a guard property is then used to tell the chef-client if it should continue executing a resource. A guard property accepts either a string value or a Ruby block value:</p> <ul class=\"simple\"> <li>A string is executed as a shell command. If the command returns <code class=\"docutils literal\">0</code>, the guard is applied. If the command returns any other value, then the guard property is not applied. String guards in a <strong>powershell_script</strong> run Windows PowerShell commands and may return <code class=\"docutils literal\">true</code> in addition to <code class=\"docutils literal\">0</code>.</li> <li>A block is executed as Ruby code that must return either <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. If the block returns <code class=\"docutils literal\">true</code>, the guard property is applied. If the block returns <code class=\"docutils literal\">false</code>, the guard property is not applied.</li> </ul> <p>A guard property is useful for ensuring that a resource is idempotent by allowing that resource to test for the desired state as it is being executed, and then if the desired state is present, for the chef-client to do nothing.</p> <p><strong>Attributes</strong></p> <p>The following properties can be used to define a guard that is evaluated during the execution phase of the chef-client run:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">not_if</code></dt> <dd>Prevent a resource from executing when the condition returns <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">only_if</code></dt> <dd>Allow a resource to execute only if the condition returns <code class=\"docutils literal\">true</code>.</dd> </dl> <p><strong>Arguments</strong></p> <p>The following arguments can be used with the <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code> guard properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:user</code></dt> <dd>\n<p class=\"first\">Specify the user that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :user =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:group</code></dt> <dd>\n<p class=\"first\">Specify the group that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :group =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:environment</code></dt> <dd>\n<p class=\"first\">Specify a Hash of environment variables to be set. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :environment =&gt; {\n  'HOME' =&gt; '/home/adam'\n}</pre> </dd> <dt><code class=\"docutils literal\">:cwd</code></dt> <dd>\n<p class=\"first\">Set the current working directory before running a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam passwd', :cwd =&gt; '/etc'</pre> </dd> <dt><code class=\"docutils literal\">:timeout</code></dt> <dd>\n<p class=\"first\">Set a timeout for a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'sleep 10000', :timeout =&gt; 10</pre> </dd> </dl>    <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script</code>, <code class=\"docutils literal\">script</code>\n</dt> <dd>When this short name is used, the chef-client will determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script::Ksh</code>, <code class=\"docutils literal\">ksh</code>\n</dt> <dd>The provider for the ksh command interpreter.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>None.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_ksh.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_ksh.html</a>\n  </p>\n</div>\n","12-9/resource_mdadm":"<h1 id=\"mdadm\">mdadm</h1> <p>Use the <strong>mdadm</strong> resource to manage RAID devices in a Linux environment using the mdadm utility. The <strong>mdadm</strong> provider will create and assemble an array, but it will not create the config file that is used to persist the array upon reboot. If the config file is required, it must be done by specifying a template with the correct array layout, and then by using the <strong>mount</strong> provider to create a file systems table (fstab) entry.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>mdadm</strong> resource block manages RAID devices in a Linux environment using the mdadm utility:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">mdadm '/dev/md0' do\n  devices [ '/dev/sda', '/dev/sdb' ]\n  level 1\n  action [ :create, :assemble ]\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>mdadm</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">mdadm 'name' do\n  bitmap                     String\n  chunk                      Integer\n  devices                    Array\n  exists                     TrueClass, FalseClass\n  level                      Integer\n  mdadm_defaults             TrueClass, FalseClass\n  metadata                   String\n  notifies                   # see description\n  provider                   Chef::Provider::Mdadm\n  raid_device                String # defaults to 'name' if not specified\n  subscribes                 # see description\n  action                     Symbol # defaults to :create if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">mdadm</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">bitmap</code>, <code class=\"docutils literal\">chunk</code>, <code class=\"docutils literal\">devices</code>, <code class=\"docutils literal\">exists</code>, <code class=\"docutils literal\">level</code>, <code class=\"docutils literal\">mdadm_defaults</code>, <code class=\"docutils literal\">metadata</code>, <code class=\"docutils literal\">provider</code>, and <code class=\"docutils literal\">raid_device</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:assemble</code></dt> <dd>Assemble a previously created array into an active array.</dd> <dt><code class=\"docutils literal\">:create</code></dt> <dd>Default. Create an array with per-device superblocks. If an array already exists (but does not match), update that array to match.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:stop</code></dt> <dd>Stop an active array.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">bitmap</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The path to a file in which a write-intent bitmap is stored.</p> </dd> <dt><code class=\"docutils literal\">chunk</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The chunk size. This property should not be used for a RAID 1 mirrored pair (i.e. when the <code class=\"docutils literal\">level</code> property is set to <code class=\"docutils literal\">1</code>). Default value: <code class=\"docutils literal\">16</code>.</p> </dd> <dt><code class=\"docutils literal\">devices</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p class=\"last\">A comma-separated list of devices to be part of a RAID array. Default value: <code class=\"docutils literal\">[]</code>.</p> </dd> <dt><code class=\"docutils literal\">exists</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Indicates whether the RAID array exists. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">level</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The RAID level. Default value: <code class=\"docutils literal\">1</code>.</p> </dd> <dt><code class=\"docutils literal\">mdadm_defaults</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">When <code class=\"docutils literal\">true</code> this property sets the default values for <code class=\"docutils literal\">chunk</code> and <code class=\"docutils literal\">metadata</code> to <code class=\"docutils literal\">nil</code> allowing mdadm to use its own default values. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">metadata</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The superblock type for RAID metadata. Default value: <code class=\"docutils literal\">0.90</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">raid_device</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The name of the RAID device. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Create and assemble a RAID 0 array</strong></p> <p>The mdadm command can be used to create RAID arrays. For example, a RAID 0 array named <code class=\"docutils literal\">/dev/md0</code> with 10 devices would have a command similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ mdadm --create /dev/md0 --level=0 --raid-devices=10 /dev/s01.../dev/s10</pre> <p>where <code class=\"docutils literal\">/dev/s01 .. /dev/s10</code> represents 10 devices (01, 02, 03, and so on). This same command, when expressed as a recipe using the <strong>mdadm</strong> resource, would be similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">mdadm '/dev/md0' do\n  devices [ '/dev/s01', ... '/dev/s10' ]\n  level 0\n  action :create\nend</pre> <p>(again, where <code class=\"docutils literal\">/dev/s01 .. /dev/s10</code> represents devices /dev/s01, /dev/s02, /dev/s03, and so on).</p> <p><strong>Create and assemble a RAID 1 array</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">mdadm '/dev/md0' do\n  devices [ '/dev/sda', '/dev/sdb' ]\n  level 1\n  action [ :create, :assemble ]\nend</pre> <p><strong>Create and assemble a RAID 5 array</strong></p> <p>The mdadm command can be used to create RAID arrays. For example, a RAID 5 array named <code class=\"docutils literal\">/dev/sd0</code> with 4, and a superblock type of <code class=\"docutils literal\">0.90</code> would be similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">mdadm '/dev/sd0' do\n  devices [ '/dev/s1', '/dev/s2', '/dev/s3', '/dev/s4' ]\n  level 5\n  metadata '0.90'\n  chunk 32\n  action :create\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_mdadm.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_mdadm.html</a>\n  </p>\n</div>\n","12-9/resource_ohai":"<h1 id=\"ohai\">ohai</h1> <p>Use the <strong>ohai</strong> resource to reload the Ohai configuration on a node. This allows recipes that change system attributes (like a recipe that adds a user) to refer to those attributes later on during the chef-client run.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>ohai</strong> resource block reloads the Ohai configuration on a node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ohai 'reload' do\n  action :reload\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>ohai</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ohai 'name' do\n  name                       String\n  notifies                   # see description\n  plugin                     String\n  provider                   Chef::Provider::Ohai\n  subscribes                 # see description\n  action                     Symbol # defaults to :reload if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">ohai</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">name</code>, <code class=\"docutils literal\">plugin</code>, and <code class=\"docutils literal\">provider</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:reload</code></dt> <dd>Default. Reload the Ohai configuration on a node.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Always the same value as the <code class=\"docutils literal\">name</code> of the resource block. See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">plugin</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The name of an Ohai plugin to be reloaded. If this property is not specified, the chef-client will reload all plugins.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Reload Ohai</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ohai 'reload' do\n  action :reload\nend</pre> <p><strong>Reload Ohai after a new user is created</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ohai 'reload_passwd' do\n  action :nothing\n  plugin 'etc'\nend\n\nuser 'daemonuser' do\n  home '/dev/null'\n  shell '/sbin/nologin'\n  system true\n  notifies :reload, 'ohai[reload_passwd]', :immediately\nend\n\nruby_block 'just an example' do\n  block do\n    # These variables will now have the new values\n    puts node['etc']['passwd']['daemonuser']['uid']\n    puts node['etc']['passwd']['daemonuser']['gid']\n  end\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_ohai.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_ohai.html</a>\n  </p>\n</div>\n","12-9/resource_launchd":"<h1 id=\"launchd\">launchd</h1> <p>Use the <strong>launchd</strong> resource to manage system-wide services (daemons) and per-user services (agents) on the Mac OS X platform.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>launchd</strong> resource manages system-wide services (daemons) and per-user services (agents) on the Mac OS X platform:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">launchd 'call.mom.weekly' do\n  program '/Library/scripts/call_mom.sh'\n  start_calendar_interval 'weekday' =&gt; 7, 'hourly' =&gt; 10\n  time_out 300\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>launchd</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">launchd 'name' do\n  abandon_process_group      TrueClass, FalseClass\n  backup                     Integer, FalseClass\n  cookbook                   String\n  debug                      TrueClass, FalseClass\n  disabled                   TrueClass, FalseClass\n  enable_globbing            TrueClass, FalseClass\n  enable_transactions        TrueClass, FalseClass\n  environment_variables      Hash\n  exit_timeout               Integer\n  group                      String, Integer\n  hard_resource_limits       Hash\n  hash                       Hash\n  ignore_failure             TrueClass, FalseClass\n  inetd_compatibility        Hash\n  init_groups                TrueClass, FalseClass\n  keep_alive                 TrueClass, FalseClass\n  label                      String\n  launch_only_once           TrueClass, FalseClass\n  limit_load_from_hosts      Array\n  limit_load_to_hosts        Array\n  limit_load_to_session_type String\n  low_priority_io            TrueClass, FalseClass\n  mach_services              Hash\n  mode                       Integer, String\n  nice                       Integer\n  notifies                   # see description\n  on_demand                  TrueClass, FalseClass\n  owner                      Integer, String\n  path                       String\n  process_type               String\n  program                    String\n  program_arguments          Array\n  provider                   Chef::Provider::Launchd\n  queue_directories          Array\n  retries                    Integer\n  retry_delay                Integer\n  root_directory             String\n  run_at_load                TrueClass, FalseClass\n  sockets                    Hash\n  soft_resource_limits       Array\n  standard_error_path        String\n  standard_in_path           String\n  standard_out_path          String\n  start_calendar_interval    Hash\n  start_interval             Integer\n  start_on_mount             TrueClass, FalseClass\n  subscribes                 # see description\n  throttle_interval          Integer\n  time_out                   Integer\n  type                       String\n  umask                      Integer\n  username                   String\n  wait_for_debugger          TrueClass, FalseClass\n  watch_paths                Array\n  working_directory          String\n  action                     Symbol # defaults to :create if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">launchd</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">abandon_process_group</code>, <code class=\"docutils literal\">backup</code>, <code class=\"docutils literal\">cookbook</code>, <code class=\"docutils literal\">debug</code>, <code class=\"docutils literal\">disabled</code>, <code class=\"docutils literal\">enable_globbing</code>, <code class=\"docutils literal\">enable_transactions</code>, <code class=\"docutils literal\">environment_variables</code>, <code class=\"docutils literal\">exit_timeout</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">hard_resource_limits</code>, <code class=\"docutils literal\">hash</code>, <code class=\"docutils literal\">inetd_compatibility</code>, <code class=\"docutils literal\">init_groups</code>, <code class=\"docutils literal\">keep_alive</code>, <code class=\"docutils literal\">label</code>, <code class=\"docutils literal\">launch_only_once</code>, <code class=\"docutils literal\">limit_load_from_hosts</code>, <code class=\"docutils literal\">limit_load_to_hosts</code>, <code class=\"docutils literal\">limit_load_to_session_type</code>, <code class=\"docutils literal\">low_priority_io</code>, <code class=\"docutils literal\">mach_services</code>, <code class=\"docutils literal\">mode</code>, <code class=\"docutils literal\">nice</code>, <code class=\"docutils literal\">on_demand</code>, <code class=\"docutils literal\">owner</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">process_type</code>, <code class=\"docutils literal\">program</code>, <code class=\"docutils literal\">program_arguments</code>, <code class=\"docutils literal\">queue_directories</code>, <code class=\"docutils literal\">retries</code>, <code class=\"docutils literal\">retry_delay</code>, <code class=\"docutils literal\">root_directory</code>, <code class=\"docutils literal\">run_at_load</code>, <code class=\"docutils literal\">sockets</code>, <code class=\"docutils literal\">soft_resource_limits</code>, <code class=\"docutils literal\">standard_error_path</code>, <code class=\"docutils literal\">standard_in_path</code>, <code class=\"docutils literal\">standard_out_path</code>, <code class=\"docutils literal\">start_calendar_interval</code>, <code class=\"docutils literal\">start_interval</code>, <code class=\"docutils literal\">start_on_mount</code>, <code class=\"docutils literal\">throttle_interval</code>, <code class=\"docutils literal\">time_out</code>, <code class=\"docutils literal\">type</code>, <code class=\"docutils literal\">umask</code>, <code class=\"docutils literal\">username</code>, <code class=\"docutils literal\">wait_for_debugger</code>, <code class=\"docutils literal\">watch_paths</code>, and <code class=\"docutils literal\">working_directory</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:create</code></dt> <dd>Default. Create a launchd property list.</dd> <dt><code class=\"docutils literal\">:create_if_missing</code></dt> <dd>Create a launchd property list, if it does not already exist.</dd> <dt><code class=\"docutils literal\">:delete</code></dt> <dd>Delete a launchd property list. This will unload a daemon or agent, if loaded.</dd> <dt><code class=\"docutils literal\">:disable</code></dt> <dd>Disable a launchd property list.</dd> <dt><code class=\"docutils literal\">:enable</code></dt> <dd>Create a launchd property list, and then ensure that it is enabled. If a launchd property list already exists, but does not match, updates the property list to match, and then restarts the daemon or agent.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">backup</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, FalseClass</p> <p class=\"last\">The number of backups to be kept in <code class=\"docutils literal\">/var/chef/backup</code>. Set to <code class=\"docutils literal\">false</code> to prevent backups from being kept.</p> </dd> <dt><code class=\"docutils literal\">cookbook</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The name of the cookbook in which the source files are located.</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">When launchd is run as the root user, the group to run the job as. If the <code class=\"docutils literal\">username</code> property is specified and this property is not, this value is set to the default group for the user.</p> </dd> <dt><code class=\"docutils literal\">hash</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A Hash of key value pairs used to create the launchd property list.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">label</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The unique identifier for the job.</p> </dd> <dt><code class=\"docutils literal\">mode</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p>A quoted 3-5 character string that defines the octal mode. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. If <code class=\"docutils literal\">mode</code> is not specified and if the directory already exists, the existing mode on the directory is used. If <code class=\"docutils literal\">mode</code> is not specified, the directory does not exist, and the <code class=\"docutils literal\">:create</code> action is specified, the chef-client assumes a mask value of <code class=\"docutils literal\">'0777'</code>, and then applies the umask for the system on which the directory is to be created to the <code class=\"docutils literal\">mask</code> value. For example, if the umask on a system is <code class=\"docutils literal\">'022'</code>, the chef-client uses the default value of <code class=\"docutils literal\">'0755'</code>.</p> <p>The behavior is different depending on the platform.</p> <p>UNIX- and Linux-based systems: A quoted 3-5 character string that defines the octal mode that is passed to chmod. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. If the value is specified as a quoted string, it works exactly as if the <code class=\"docutils literal\">chmod</code> command was passed. If the value is specified as an integer, prepend a zero (<code class=\"docutils literal\">0</code>) to the value to ensure that it is interpreted as an octal number. For example, to assign read, write, and execute rights for all users, use <code class=\"docutils literal\">'0777'</code> or <code class=\"docutils literal\">'777'</code>; for the same rights, plus the sticky bit, use <code class=\"docutils literal\">'01777'</code> or <code class=\"docutils literal\">'1777'</code>.</p> <p class=\"last\">Microsoft Windows: A quoted 3-5 character string that defines the octal mode that is translated into rights for Microsoft Windows security. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. Values up to <code class=\"docutils literal\">'0777'</code> are allowed (no sticky bits) and mean the same in Microsoft Windows as they do in UNIX, where <code class=\"docutils literal\">4</code> equals <code class=\"docutils literal\">GENERIC_READ</code>, <code class=\"docutils literal\">2</code> equals <code class=\"docutils literal\">GENERIC_WRITE</code>, and <code class=\"docutils literal\">1</code> equals <code class=\"docutils literal\">GENERIC_EXECUTE</code>. This property cannot be used to set <code class=\"docutils literal\">:full_control</code>. This property has no effect if not specified, but when it and <code class=\"docutils literal\">rights</code> are both specified, the effects are cumulative.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">owner</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">A string or ID that identifies the group owner by user name, including fully qualified user names such as <code class=\"docutils literal\">domain\\user</code> or <code class=\"docutils literal\">user@domain</code>. If this value is not specified, existing owners remain unchanged and new owner assignments use the current user (when necessary).</p> </dd> <dt><code class=\"docutils literal\">path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The path to the directory. Using a fully qualified path is recommended, but is not always required. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef::Provider::Launchd</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">session_type</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The type of launchd plist to be created. Possible values: <code class=\"docutils literal\">system</code> (default) or <code class=\"docutils literal\">user</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The path to the launchd property list.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">supports</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p class=\"last\">An array of options for supported mount features. Default value: <code class=\"docutils literal\">{ :remount =&gt; false }</code>.</p> </dd> <dt><code class=\"docutils literal\">type</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The type of resource. Possible values: <code class=\"docutils literal\">daemon</code> (default), <code class=\"docutils literal\">agent</code>.</p> </dd> </dl> <p>The following resource properties may be used to define keys in the XML property list for a daemon or agent. Please refer to the Apple man page documentation for launchd for more information about these keys:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">abandon_process_group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">If a job dies, all remaining processes with the same process ID may be kept running. Set to <code class=\"docutils literal\">true</code> to kill all remaining processes.</p> </dd> <dt><code class=\"docutils literal\">debug</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Sets the log mask to <code class=\"docutils literal\">LOG_DEBUG</code> for this job.</p> </dd> <dt><code class=\"docutils literal\">disabled</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Hints to <code class=\"docutils literal\">launchctl</code> to not submit this job to launchd. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">enable_globbing</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Update program arguments before invocation.</p> </dd> <dt><code class=\"docutils literal\">enable_transactions</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Track in-progress transactions; if none, then send the <code class=\"docutils literal\">SIGKILL</code> signal.</p> </dd> <dt><code class=\"docutils literal\">environment_variables</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">Additional environment variables to set before running a job.</p> </dd> <dt><code class=\"docutils literal\">exit_timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The amount of time (in seconds) launchd waits before sending a <code class=\"docutils literal\">SIGKILL</code> signal. Default value: <code class=\"docutils literal\">20</code>.</p> </dd> <dt><code class=\"docutils literal\">hard_resource_limits</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A Hash of resource limits to be imposed on a job.</p> </dd> <dt><code class=\"docutils literal\">inetd_compatibility</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">Specifies if a daemon expects to be run as if it were launched from <code class=\"docutils literal\">inetd</code>. Set to <code class=\"docutils literal\">wait =&gt; true</code> to pass standard input, output, and error file descriptors. Set to <code class=\"docutils literal\">wait =&gt; false</code> to call the <code class=\"docutils literal\">accept</code> system call on behalf of the job, and then pass standard input, output, and error file descriptors.</p> </dd> <dt><code class=\"docutils literal\">init_groups</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Specify if <code class=\"docutils literal\">initgroups</code> is called before running a job. Default value: <code class=\"docutils literal\">true</code> (starting with Mac OS X 10.5).</p> </dd> <dt><code class=\"docutils literal\">keep_alive</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Keep a job running continuously (<code class=\"docutils literal\">true</code>) or allow demand and conditions on the node to determine if the job keeps running (<code class=\"docutils literal\">false</code>). Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">launch_only_once</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Specify if a job can be run only one time. Set this value to <code class=\"docutils literal\">true</code> if a job cannot be restarted without a full machine reboot.</p> </dd> <dt><code class=\"docutils literal\">limit_load_from_hosts</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p class=\"last\">An array of hosts to which this configuration file does not apply, i.e. “apply this configuration file to all hosts not specified in this array”.</p> </dd> <dt><code class=\"docutils literal\">limit_load_to_hosts</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p class=\"last\">An array of hosts to which this configuration file applies.</p> </dd> <dt><code class=\"docutils literal\">limit_load_to_session_type</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The session type to which this configuration file applies.</p> </dd> <dt><code class=\"docutils literal\">low_priority_io</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Specify if the kernel on the node should consider this daemon to be low priority during file system I/O.</p> </dd> <dt><code class=\"docutils literal\">mach_services</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">Specify services to be registered with the bootstrap subsystem.</p> </dd> <dt><code class=\"docutils literal\">nice</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The program scheduling priority value in the range <code class=\"docutils literal\">-20</code> to <code class=\"docutils literal\">20</code>.</p> </dd> <dt><code class=\"docutils literal\">on_demand</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Keep a job alive. Only applies to Mac OS X version 10.4 (and earlier); use <code class=\"docutils literal\">keep_alive</code> instead for newer versions.</p> </dd> <dt><code class=\"docutils literal\">process_type</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The intended purpose of the job: <code class=\"docutils literal\">Adaptive</code>, <code class=\"docutils literal\">Background</code>, <code class=\"docutils literal\">Interactive</code>, or <code class=\"docutils literal\">Standard</code>.</p> </dd> <dt><code class=\"docutils literal\">program</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The first argument of <code class=\"docutils literal\">execvp</code>, typically the file name associated with the file to be executed. This value must be specified if <code class=\"docutils literal\">program_arguments</code> is not specified, and vice-versa.</p> </dd> <dt><code class=\"docutils literal\">program_arguments</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p class=\"last\">The second argument of <code class=\"docutils literal\">execvp</code>. If <code class=\"docutils literal\">program</code> is not specified, this property must be specified and will be handled as if it were the first argument.</p> </dd> <dt><code class=\"docutils literal\">queue_directories</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p class=\"last\">An array of non-empty directories which, if any are modified, will cause a job to be started.</p> </dd> <dt><code class=\"docutils literal\">root_directory</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\"><code class=\"docutils literal\">chroot</code> to this directory, and then run the job.</p> </dd> <dt><code class=\"docutils literal\">run_at_load</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Launch a job once (at the time it is loaded). Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">sockets</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A Hash of on-demand sockets that notify launchd when a job should be run.</p> </dd> <dt><code class=\"docutils literal\">soft_resource_limits</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p class=\"last\">A Hash of resource limits to be imposed on a job.</p> </dd> <dt><code class=\"docutils literal\">standard_error_path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The file to which standard error (<code class=\"docutils literal\">stderr</code>) is sent.</p> </dd> <dt><code class=\"docutils literal\">standard_in_path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The file to which standard input (<code class=\"docutils literal\">stdin</code>) is sent.</p> </dd> <dt><code class=\"docutils literal\">standard_out_path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The file to which standard output (<code class=\"docutils literal\">stdout</code>) is sent.</p> </dd> <dt><code class=\"docutils literal\">start_calendar_interval</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A Hash (similar to <code class=\"docutils literal\">crontab</code>) that defines the calendar frequency at which a job is started. For example: <code class=\"docutils literal\">{ minute =&gt; \"0\", hour =&gt; \"20\", day =&gt; \"*\", weekday =&gt; \"1-5\", month =&gt; \"*\" }</code> will run a job at 8:00 PM every day, Monday through Friday, every month of the year.</p> </dd> <dt><code class=\"docutils literal\">start_interval</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The frequency (in seconds) at which a job is started.</p> </dd> <dt><code class=\"docutils literal\">start_on_mount</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Start a job every time a file system is mounted.</p> </dd> <dt><code class=\"docutils literal\">throttle_interval</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The frequency (in seconds) at which jobs are allowed to spawn. Default value: <code class=\"docutils literal\">10</code>.</p> </dd> <dt><code class=\"docutils literal\">time_out</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The amount of time (in seconds) a job may be idle before it times out. If no value is specified, the default timeout value for launchd will be used.</p> </dd> <dt><code class=\"docutils literal\">umask</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">A decimal value to pass to <code class=\"docutils literal\">umask</code> before running a job.</p> </dd> <dt><code class=\"docutils literal\">username</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">When launchd is run as the root user, the user to run the job as.</p> </dd> <dt><code class=\"docutils literal\">wait_for_debugger</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Specify if launchd has a job wait for a debugger to attach before executing code.</p> </dd> <dt><code class=\"docutils literal\">watch_paths</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p class=\"last\">An array of paths which, if any are modified, will cause a job to be started.</p> </dd> <dt><code class=\"docutils literal\">working_directory</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\"><code class=\"docutils literal\">chdir</code> to this directory, and then run the job.</p> </dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Create a Launch Daemon from a cookbook file</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">launchd 'com.chef.every15' do\n  source 'com.chef.every15.plist'\nend</pre> <p><strong>Create a Launch Daemon using keys</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">launchd 'call.mom.weekly' do\n  program '/Library/scripts/call_mom.sh'\n  start_calendar_interval 'weekday' =&gt; 7, 'hourly' =&gt; 10\n  time_out 300\nend</pre> <p><strong>Remove a Launch Daemon</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">launchd 'com.chef.every15' do\n  action :delete\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_launchd.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_launchd.html</a>\n  </p>\n</div>\n","12-9/resource_mount":"<h1 id=\"mount\">mount</h1> <p>Use the <strong>mount</strong> resource to manage a mounted file system.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>mount</strong> resource block manages a mounted file system:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">mount node['mysql']['ec2_path'] do\n  device ebs_vol_dev\n  fstype 'xfs'\n  action :mount\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>mount</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">mount 'name' do\n  device                     String\n  device_type                Symbol\n  domain                     String\n  dump                       Integer, FalseClass\n  enabled                    TrueClass, FalseClass\n  fsck_device                String\n  fstype                     String\n  mount_point                String # defaults to 'name' if not specified\n  mounted                    TrueClass, FalseClass\n  notifies                   # see description\n  options                    Array, String\n  pass                       Integer, FalseClass\n  password                   String\n  provider                   Chef::Provider::Mount\n  subscribes                 # see description\n  supports                   Array\n  username                   String\n  action                     Symbol # defaults to :mount if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">mount</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">device</code>, <code class=\"docutils literal\">device_type</code>, <code class=\"docutils literal\">domain</code>, <code class=\"docutils literal\">dump</code>, <code class=\"docutils literal\">enabled</code>, <code class=\"docutils literal\">fsck_device</code>, <code class=\"docutils literal\">fstype</code>, <code class=\"docutils literal\">mount_point</code>, <code class=\"docutils literal\">mounted</code>, <code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">pass</code>, <code class=\"docutils literal\">password</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">supports</code>, and <code class=\"docutils literal\">username</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:disable</code></dt> <dd>Remove an entry from the file systems table (<code class=\"docutils literal\">fstab</code>).</dd> <dt><code class=\"docutils literal\">:enable</code></dt> <dd>Add an entry to the file systems table (<code class=\"docutils literal\">fstab</code>).</dd> <dt><code class=\"docutils literal\">:mount</code></dt> <dd>Default. Mount a device.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:remount</code></dt> <dd>Remount a device.</dd> <dt><code class=\"docutils literal\">:umount</code></dt> <dd>Unmount a device.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Order matters when passing multiple actions. For example: <code class=\"docutils literal\">action [:mount, :enable]</code> ensures that the file system is mounted before it is enabled.</p> </div>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">device</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Required for <code class=\"docutils literal\">:umount</code> and <code class=\"docutils literal\">:remount</code> actions (for the purpose of checking the mount command output for presence). The special block device or remote node, a label, or a uuid to be mounted.</p> </dd> <dt><code class=\"docutils literal\">device_type</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol</p> <p class=\"last\">The type of device: <code class=\"docutils literal\">:device</code>, <code class=\"docutils literal\">:label</code>, or <code class=\"docutils literal\">:uuid</code>. Default value: <code class=\"docutils literal\">:device</code>.</p> </dd> <dt><code class=\"docutils literal\">domain</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Microsoft Windows only. Use to specify the domain in which the <code class=\"docutils literal\">username</code> and <code class=\"docutils literal\">password</code> are located.</p> </dd> <dt><code class=\"docutils literal\">dump</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, FalseClass</p> <p class=\"last\">The dump frequency (in days) used while creating a file systems table (fstab) entry. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">enabled</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Use to specify if a mounted file system is enabled. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">fsck_device</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The fsck device on the Solaris platform. Default value: <code class=\"docutils literal\">-</code>.</p> </dd> <dt><code class=\"docutils literal\">fstype</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Required. The file system type (fstype) of the device.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">mount_point</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The directory (or path) in which the device is to be mounted. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">mounted</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Use to specify if a file system is already mounted. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Array, String</p> <p class=\"last\">An array or string that contains mount options. If this value is a string, it is converted to an array. Default value: <code class=\"docutils literal\">defaults</code>.</p> </dd> <dt><code class=\"docutils literal\">pass</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, FalseClass</p> <p class=\"last\">The pass number used by the file system check (<code class=\"docutils literal\">fsck</code>) command while creating a file systems table (<code class=\"docutils literal\">fstab</code>) entry. Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">password</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Microsoft Windows only. Use to specify the password for <code class=\"docutils literal\">username</code>.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">supports</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p class=\"last\">An array of options for supported mount features. Default value: <code class=\"docutils literal\">:remount</code>.</p> </dd> <dt><code class=\"docutils literal\">username</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Microsoft Windows only. Use to specify the user name.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Mount</code>, <code class=\"docutils literal\">mount</code>\n</dt> <dd>The default provider for all platforms, except for Microsoft Windows.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Mount::Windows</code>, <code class=\"docutils literal\">mount</code>\n</dt> <dd>The default provider for the Microsoft Windows platform.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Mount a labeled file system</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">mount '/mnt/volume1' do\n  device 'volume1'\n  device_type :label\n  fstype 'xfs'\n  options 'rw'\nend</pre> <p><strong>Mount a local block drive</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">mount '/mnt/local' do\n  device '/dev/sdb1'\n  fstype 'ext3'\nend</pre> <p><strong>Mount a non-block file system</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">mount '/mount/tmp' do\n  pass     0\n  fstype   'tmpfs'\n  device   '/dev/null'\n  options  'nr_inodes=999k,mode=755,size=500m'\n  action   [:mount, :enable]\nend</pre> <p><strong>Mount and add to the file systems table</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">mount '/export/www' do\n  device 'nas1prod:/export/web_sites'\n  fstype 'nfs'\n  options 'rw'\n  action [:mount, :enable]\nend</pre> <p><strong>Mount a remote file system</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">mount '/export/www' do\n  device 'nas1prod:/export/web_sites'\n  fstype 'nfs'\n  options 'rw'\nend</pre> <p><strong>Mount a remote folder in Microsoft Windows</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">mount 'T:' do\n  action :mount\n  device '\\\\\\\\hostname.example.com\\\\folder'\nend</pre> <p><strong>Unmount a remote folder in Microsoft Windows</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">mount 'T:' do\n  action :umount\n  device '\\\\\\\\hostname.example.com\\\\D$'\nend</pre> <p><strong>Stop a service, do stuff, and then restart it</strong></p> <p>The following example shows how to use the <strong>execute</strong>, <strong>service</strong>, and <strong>mount</strong> resources together to ensure that a node running on Amazon EC2 is running MySQL. This example does the following:</p> <ul class=\"simple\"> <li>Checks to see if the Amazon EC2 node has MySQL</li> <li>If the node has MySQL, stops MySQL</li> <li>Installs MySQL</li> <li>Mounts the node</li> <li>Restarts MySQL</li> </ul> <pre class=\"highlight-ruby\" data-language=\"ruby\"># the following code sample comes from the ``server_ec2``\n# recipe in the following cookbook:\n# https://github.com/chef-cookbooks/mysql\n\nif (node.attribute?('ec2') &amp;&amp; ! FileTest.directory?(node['mysql']['ec2_path']))\n\n  service 'mysql' do\n    action :stop\n  end\n\n  execute 'install-mysql' do\n    command \"mv #{node['mysql']['data_dir']} #{node['mysql']['ec2_path']}\"\n    not_if do FileTest.directory?(node['mysql']['ec2_path']) end\n  end\n\n  [node['mysql']['ec2_path'], node['mysql']['data_dir']].each do |dir|\n    directory dir do\n      owner 'mysql'\n      group 'mysql'\n    end\n  end\n\n  mount node['mysql']['data_dir'] do\n    device node['mysql']['ec2_path']\n    fstype 'none'\n    options 'bind,rw'\n    action [:mount, :enable]\n  end\n\n  service 'mysql' do\n    action :start\n  end\n\nend</pre> <p>where</p> <ul class=\"simple\"> <li>the two <strong>service</strong> resources are used to stop, and then restart the MySQL service</li> <li>the <strong>execute</strong> resource is used to install MySQL</li> <li>the <strong>mount</strong> resource is used to mount the node and enable MySQL</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_mount.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_mount.html</a>\n  </p>\n</div>\n","12-9/resource_osx_profile":"<h1 id=\"osx-profile\">osx_profile</h1> <p>Use the <strong>osx_profile</strong> resource to manage configuration profiles (<code class=\"docutils literal\">.mobileconfig</code> files) on the Mac OS X platform. The <strong>osx_profile</strong> resource installs profiles by using the <code class=\"docutils literal\">uuidgen</code> library to generate a unique <code class=\"docutils literal\">ProfileUUID</code>, and then using the <code class=\"docutils literal\">profiles</code> command to install the profile on the system.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>osx_profile</strong> resource block manages configuration profiles on the Mac OS X platform:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">osx_profile 'Install screensaver profile' do\n  profile 'com.company.screensaver.mobileconfig'\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>osx_profile</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">osx_profile 'name' do\n  path                       # set automatically\n  profile                    String, Hash\n  profile_name               String # defaults to 'name' if not specified\n  identifier                 String\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">osx_profile</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">profile</code>, <code class=\"docutils literal\">profile_name</code>, and <code class=\"docutils literal\">identifier</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install the specified configuration profile.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Default. .. include:: ../../includes_resources_common/includes_resources_common_actions_nothing.rst</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove the specified configuration profile.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">identifier</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Use to specify the identifier for the profile, such as <code class=\"docutils literal\">com.company.screensaver</code>.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">profile</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Hash</p> <p class=\"last\">Use to specify a profile. This may be the name of a profile contained in a cookbook or a Hash that contains the contents of the profile.</p> </dd> <dt><code class=\"docutils literal\">profile_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Use to specify the name of the profile, if different from the name of the resource block.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>One liner to install profile from cookbook file</strong></p> <p>The <code class=\"docutils literal\">profiles</code> command will be used to install the specified configuration profile.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">osx_profile 'com.company.screensaver.mobileconfig'</pre> <p><strong>Install profile from cookbook file</strong></p> <p>The <code class=\"docutils literal\">profiles</code> command will be used to install the specified configuration profile. It can be in sub-directory within a cookbook.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">osx_profile 'Install screensaver profile' do\n  profile 'screensaver/com.company.screensaver.mobileconfig'\nend</pre> <p><strong>Install profile from a hash</strong></p> <p>The <code class=\"docutils literal\">profiles</code> command will be used to install the configuration profile, which is provided as a hash.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">profile_hash = {\n  'PayloadIdentifier' =&gt; 'com.company.screensaver',\n  'PayloadRemovalDisallowed' =&gt; false,\n  'PayloadScope' =&gt; 'System',\n  'PayloadType' =&gt; 'Configuration',\n  'PayloadUUID' =&gt; '1781fbec-3325-565f-9022-8aa28135c3cc',\n  'PayloadOrganization' =&gt; 'Chef',\n  'PayloadVersion' =&gt; 1,\n  'PayloadDisplayName' =&gt; 'Screensaver Settings',\n  'PayloadContent'=&gt; [\n    {\n      'PayloadType' =&gt; 'com.apple.ManagedClient.preferences',\n      'PayloadVersion' =&gt; 1,\n      'PayloadIdentifier' =&gt; 'com.company.screensaver',\n      'PayloadUUID' =&gt; '73fc30e0-1e57-0131-c32d-000c2944c108',\n      'PayloadEnabled' =&gt; true,\n      'PayloadDisplayName' =&gt; 'com.apple.screensaver',\n      'PayloadContent' =&gt; {\n        'com.apple.screensaver' =&gt; {\n          'Forced' =&gt; [\n            {\n              'mcx_preference_settings' =&gt; {\n                'idleTime' =&gt; 0,\n              }\n            }\n          ]\n        }\n      }\n    }\n  ]\n}\n\nosx_profile 'Install screensaver profile' do\n  profile profile_hash\nend</pre> <p><strong>Remove profile using identifier in resource name</strong></p> <p>The <code class=\"docutils literal\">profiles</code> command will be used to remove the configuration profile specified by the provided <code class=\"docutils literal\">identifier</code> property.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">osx_profile 'com.company.screensaver' do\n  action :remove\nend</pre> <p><strong>Remove profile by identifier and user friendly resource name</strong></p> <p>The <code class=\"docutils literal\">profiles</code> command will be used to remove the configuration profile specified by the provided <code class=\"docutils literal\">identifier</code> property.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">osx_profile 'Remove screensaver profile' do\n  identifier 'com.company.screensaver'\n  action :remove\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_osx_profile.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_osx_profile.html</a>\n  </p>\n</div>\n","12-9/resource_openbsd_package":"<h1 id=\"openbsd-package\">openbsd_package</h1> <p>Use the <strong>openbsd_package</strong> resource to manage packages for the OpenBSD platform.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>openbsd_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>openbsd_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">openbsd_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>openbsd_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">openbsd_package 'name' do\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::Openbsd\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">openbsd_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The path to a package in the local file system.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Openbsd</code>, <code class=\"docutils literal\">openbsd_package</code>\n</dt> <dd>The provider for the OpenBSD platform.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">openbsd_package 'name of package' do\n  action :install\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_openbsd_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_openbsd_package.html</a>\n  </p>\n</div>\n","12-9/resource_pacman_package":"<h1 id=\"pacman-package\">pacman_package</h1> <p>Use the <strong>pacman_package</strong> resource to manage packages (using pacman) on the Arch Linux platform.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>pacman_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>pacman_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">pacman_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>pacman_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">pacman_package 'name' do\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::Pacman\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">pacman_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:purge</code></dt> <dd>Purge a package. This action typically removes the configuration files as well as the package.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> <dt><code class=\"docutils literal\">:upgrade</code></dt> <dd>Install a package and/or ensure that a package is the latest version.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The path to a package in the local file system.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Pacman</code>, <code class=\"docutils literal\">pacman_package</code>\n</dt> <dd>The provider for the Arch Linux platform.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">pacman_package 'name of package' do\n  action :install\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_pacman_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_pacman_package.html</a>\n  </p>\n</div>\n","12-9/resource_paludis_package":"<h1 id=\"paludis-package\">paludis_package</h1> <p>Use the <strong>paludis_package</strong> resource to manage packages for the Paludis platform.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>paludis_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>paludis_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">paludis_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>paludis_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">paludis_package 'name' do\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::Paludis\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">paludis_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">recursive</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> <dt><code class=\"docutils literal\">:upgrade</code></dt> <dd>Install a package and/or ensure that a package is the latest version.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The path to a package in the local file system.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Paludis</code>, <code class=\"docutils literal\">paludis_package</code>\n</dt> <dd>The provider for the Paludis platform.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">paludis_package 'name of package' do\n  action :install\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_paludis_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_paludis_package.html</a>\n  </p>\n</div>\n","12-9/resource_perl":"<h1 id=\"perl\">perl</h1> <p>Use the <strong>perl</strong> resource to execute scripts using the Perl interpreter. This resource may also use any of the actions and properties that are available to the <strong>execute</strong> resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <strong>perl</strong> script resource (which is based on the <strong>script</strong> resource) is different from the <strong>ruby_block</strong> resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>perl</strong> resource block executes scripts Perl:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">perl 'extract_module' do\n  cwd ::File.dirname(src_filepath)\n  code &lt;&lt;-EOH\n    mkdir -p #{extract_path}\n    tar xzf #{src_filename} -C #{extract_path}\n    mv #{extract_path}/*/* #{extract_path}/\n    EOH\n  not_if { ::File.exists?(extract_path) }\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">cwd</code> specifies the directory from which the command is run</li> <li>\n<code class=\"docutils literal\">code</code> specifies the command to run</li> </ul> <p>The full syntax for all of the properties that are available to the <strong>perl</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">perl 'name' do\n  code                       String\n  creates                    String\n  cwd                        String\n  environment                Hash\n  flags                      String\n  group                      String, Integer\n  notifies                   # see description\n  path                       Array\n  provider                   Chef::Provider::Script::Perl\n  returns                    Integer, Array\n  subscribes                 # see description\n  timeout                    Integer, Float\n  user                       String, Integer\n  umask                      String, Integer\n  action                     Symbol # defaults to :run if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">perl</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">cwd</code> is the location from which the command is run</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">code</code>, <code class=\"docutils literal\">creates</code>, <code class=\"docutils literal\">cwd</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">flags</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">returns</code>, <code class=\"docutils literal\">timeout</code>, <code class=\"docutils literal\">user</code>, and <code class=\"docutils literal\">umask</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Prevent a command from running. This action is used to specify that a command is run only when another resource notifies it.</dd> <dt><code class=\"docutils literal\">:run</code></dt> <dd>Default. Run a script.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">code</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">A quoted (” ”) string of code to be executed.</p> </dd> <dt><code class=\"docutils literal\">creates</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Prevent a command from creating a file when that file already exists.</p> </dd> <dt><code class=\"docutils literal\">cwd</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The current working directory.</p> </dd> <dt><code class=\"docutils literal\">environment</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A Hash of environment variables in the form of <code class=\"docutils literal\">{\"ENV_VARIABLE\" =&gt; \"VALUE\"}</code>. (These variables must exist for a command to be run successfully.)</p> </dd> <dt><code class=\"docutils literal\">flags</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One or more command line flags that are passed to the interpreter when a command is invoked.</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The group name or group ID that must be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p>An array of paths to use when searching for a command. These paths are not added to the command’s environment $PATH. The default value uses the system path.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>The <code class=\"docutils literal\">path</code> property is not implemented by any provider in any version of the chef-client. Starting with chef-client 12, using the <code class=\"docutils literal\">path</code> property will return a warning. Starting with chef-client 13, the <code class=\"docutils literal\">path</code> property is deprecated and using it will return an exception. Cookbooks that currently use the <code class=\"docutils literal\">path</code> property should be updated to use the <code class=\"docutils literal\">environment</code> property instead.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">perl 'mycommand' do\n  environment 'PATH' =&gt; \"/my/path/to/bin:#{ENV['PATH']}\"\nend</pre> </div> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">returns</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Array</p> <p class=\"last\">The return value for a command. This may be an array of accepted values. An exception is raised when the return value(s) do not match. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Float</p> <p class=\"last\">The amount of time (in seconds) a command is to wait before timing out. Default value: <code class=\"docutils literal\">3600</code>.</p> </dd> <dt><code class=\"docutils literal\">user</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The user name or user ID that should be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">umask</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The file mode creation mask, or umask.</p> </dd> </dl>  <h3 id=\"guards\">Guards</h3> <p>A guard property can be used to evaluate the state of a node during the execution phase of the chef-client run. Based on the results of this evaluation, a guard property is then used to tell the chef-client if it should continue executing a resource. A guard property accepts either a string value or a Ruby block value:</p> <ul class=\"simple\"> <li>A string is executed as a shell command. If the command returns <code class=\"docutils literal\">0</code>, the guard is applied. If the command returns any other value, then the guard property is not applied. String guards in a <strong>powershell_script</strong> run Windows PowerShell commands and may return <code class=\"docutils literal\">true</code> in addition to <code class=\"docutils literal\">0</code>.</li> <li>A block is executed as Ruby code that must return either <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. If the block returns <code class=\"docutils literal\">true</code>, the guard property is applied. If the block returns <code class=\"docutils literal\">false</code>, the guard property is not applied.</li> </ul> <p>A guard property is useful for ensuring that a resource is idempotent by allowing that resource to test for the desired state as it is being executed, and then if the desired state is present, for the chef-client to do nothing.</p> <p><strong>Attributes</strong></p> <p>The following properties can be used to define a guard that is evaluated during the execution phase of the chef-client run:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">not_if</code></dt> <dd>Prevent a resource from executing when the condition returns <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">only_if</code></dt> <dd>Allow a resource to execute only if the condition returns <code class=\"docutils literal\">true</code>.</dd> </dl> <p><strong>Arguments</strong></p> <p>The following arguments can be used with the <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code> guard properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:user</code></dt> <dd>\n<p class=\"first\">Specify the user that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :user =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:group</code></dt> <dd>\n<p class=\"first\">Specify the group that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :group =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:environment</code></dt> <dd>\n<p class=\"first\">Specify a Hash of environment variables to be set. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :environment =&gt; {\n  'HOME' =&gt; '/home/adam'\n}</pre> </dd> <dt><code class=\"docutils literal\">:cwd</code></dt> <dd>\n<p class=\"first\">Set the current working directory before running a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam passwd', :cwd =&gt; '/etc'</pre> </dd> <dt><code class=\"docutils literal\">:timeout</code></dt> <dd>\n<p class=\"first\">Set a timeout for a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'sleep 10000', :timeout =&gt; 10</pre> </dd> </dl>    <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script</code>, <code class=\"docutils literal\">script</code>\n</dt> <dd>When this short name is used, the chef-client will determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script::Perl</code>, <code class=\"docutils literal\">perl</code>\n</dt> <dd>The provider for the Perl command interpreter.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>None.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_perl.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_perl.html</a>\n  </p>\n</div>\n","12-9/resource_portage_package":"<h1 id=\"portage-package\">portage_package</h1> <p>Use the <strong>portage_package</strong> resource to manage packages for the Gentoo platform.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>portage_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>portage_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">portage_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>portage_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">portage_package 'name' do\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::Portage\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">portage_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:purge</code></dt> <dd>Purge a package. This action typically removes the configuration files as well as the package.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> <dt><code class=\"docutils literal\">:upgrade</code></dt> <dd>Install a package and/or ensure that a package is the latest version.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The path to a package in the local file system.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Portage</code>, <code class=\"docutils literal\">portage_package</code>\n</dt> <dd>The provider for the Gentoo platform. Can be used with the <code class=\"docutils literal\">options</code> attribute.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">portage_package 'name of package' do\n  action :install\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_portage_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_portage_package.html</a>\n  </p>\n</div>\n","12-9/resource_reboot":"<h1 id=\"reboot\">reboot</h1> <p>Use the <strong>reboot</strong> resource to reboot a node, a necessary step with some installations on certain platforms. This resource is supported for use on the Microsoft Windows, Mac OS X, and Linux platforms.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>reboot</strong> resource block reboots a node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">reboot 'app_requires_reboot' do\n  action :request_reboot\n  reason 'Need to reboot when the run completes successfully.'\n  delay_mins 5\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>reboot</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">reboot 'name' do\n  delay_mins                 Fixnum\n  notifies                   # see description\n  reason                     String\n  subscribes                 # see description\n  action                     Symbol\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">reboot</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">delay_mins</code> and <code class=\"docutils literal\">reason</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:cancel</code></dt> <dd>Cancel a reboot request.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:reboot_now</code></dt> <dd>Reboot a node so that the chef-client may continue the installation process.</dd> <dt><code class=\"docutils literal\">:request_reboot</code></dt> <dd>Reboot a node at the end of a chef-client run.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">delay_mins</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Fixnum</p> <p class=\"last\">The amount of time (in minutes) to delay a reboot request.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timer is available:</p> <dl class=\"last docutils\"> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> </dd> <dt><code class=\"docutils literal\">reason</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">A string that describes the reboot action.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timer is available:</p> <dl class=\"last docutils\"> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> </dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Reboot a node immediately</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">reboot 'now' do\n  action :nothing\n  reason 'Cannot continue Chef run without a reboot.'\n  delay_mins 2\nend\n\nexecute 'foo' do\n  command '...'\n  notifies :reboot_now, 'reboot[now]', :immediately\nend</pre> <p><strong>Reboot a node at the end of a chef-client run</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">reboot 'app_requires_reboot' do\n  action :request_reboot\n  reason 'Need to reboot when the run completes successfully.'\n  delay_mins 5\nend</pre> <p><strong>Cancel a reboot</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">reboot 'cancel_reboot_request' do\n  action :cancel\n  reason 'Cancel a previous end-of-run reboot request.'\nend</pre> <p><strong>Rename computer, join domain, reboot</strong></p> <p>The following example shows how to rename a computer, join a domain, and then reboot the computer:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">reboot 'Restart Computer' do\n  action :nothing\nend\n\npowershell_script 'Rename and Join Domain' do\n  code &lt;&lt;-EOH\n    ...your rename and domain join logic here...\n  EOH\n  not_if &lt;&lt;-EOH\n    $ComputerSystem = gwmi win32_computersystem\n    ($ComputerSystem.Name -like '#{node['some_attribute_that_has_the_new_name']}') -and\n      $ComputerSystem.partofdomain)\n  EOH\n  notifies :reboot_now, 'reboot[Restart Computer]', :immediately\nend</pre> <p>where:</p> <ul class=\"simple\"> <li>The <strong>powershell_script</strong> resource block renames a computer, and then joins a domain</li> <li>The <strong>reboot</strong> resource restarts the computer</li> <li>The <code class=\"docutils literal\">not_if</code> guard prevents the Windows PowerShell script from running when the settings in the <code class=\"docutils literal\">not_if</code> guard match the desired state</li> <li>The <code class=\"docutils literal\">notifies</code> statement tells the <strong>reboot</strong> resource block to run if the <strong>powershell_script</strong> block was executed during the chef-client run</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_reboot.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_reboot.html</a>\n  </p>\n</div>\n","12-9/resource_powershell_script":"<h1 id=\"powershell-script\">powershell_script</h1> <p>Use the <strong>powershell_script</strong> resource to execute a script using the Windows PowerShell interpreter, much like how the <strong>script</strong> and <strong>script</strong>-based resources—<strong>bash</strong>, <strong>csh</strong>, <strong>perl</strong>, <strong>python</strong>, and <strong>ruby</strong>—are used. The <strong>powershell_script</strong> is specific to the Microsoft Windows platform and the Windows PowerShell interpreter.</p> <p>The <strong>powershell_script</strong> resource creates and executes a temporary file (similar to how the <strong>script</strong> resource behaves), rather than running the command inline. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>powershell_script</strong> resource block executes a batch script using the Windows PowerShell interpreter. For example, writing to an interpolated path:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">powershell_script 'write-to-interpolated-path' do\n  code &lt;&lt;-EOH\n  $stream = [System.IO.StreamWriter] \"#{Chef::Config[:file_cache_path]}/powershell-test.txt\"\n  $stream.WriteLine(\"In #{Chef::Config[:file_cache_path]}...word.\")\n  $stream.close()\n  EOH\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>powershell_script</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">powershell_script 'name' do\n  architecture               Symbol\n  code                       String\n  command                    String, Array\n  convert_boolean_return     TrueClass, FalseClass\n  creates                    String\n  cwd                        String\n  environment                Hash\n  flags                      String\n  group                      String, Integer\n  guard_interpreter          Symbol\n  interpreter                String\n  notifies                   # see description\n  provider                   Chef::Provider::PowershellScript\n  returns                    Integer, Array\n  subscribes                 # see description\n  timeout                    Integer, Float\n  action                     Symbol # defaults to :run if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">powershell_script</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">command</code> is the command to be run and <code class=\"docutils literal\">cwd</code> is the location from which the command is run</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">architecture</code>, <code class=\"docutils literal\">code</code>, <code class=\"docutils literal\">command</code>, <code class=\"docutils literal\">convert_boolean_return</code>, <code class=\"docutils literal\">creates</code>, <code class=\"docutils literal\">cwd</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">flags</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">guard_interpreter</code>, <code class=\"docutils literal\">interpreter</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">returns</code>, and <code class=\"docutils literal\">timeout</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Inherited from <strong>execute</strong> resource. Prevent a command from running. This action is used to specify that a command is run only when another resource notifies it.</dd> <dt><code class=\"docutils literal\">:run</code></dt> <dd>Default. Run the script.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">architecture</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol</p> <p class=\"last\">The architecture of the process under which a script is executed. If a value is not provided, the chef-client defaults to the correct value for the architecture, as determined by Ohai. An exception is raised when anything other than <code class=\"docutils literal\">:i386</code> is specified for a 32-bit process. Possible values: <code class=\"docutils literal\">:i386</code> (for 32-bit processes) and <code class=\"docutils literal\">:x86_64</code> (for 64-bit processes).</p> </dd> <dt><code class=\"docutils literal\">code</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">A quoted (” ”) string of code to be executed.</p> </dd> <dt><code class=\"docutils literal\">command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the command to be executed. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">convert_boolean_return</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p>Return <code class=\"docutils literal\">0</code> if the last line of a command is evaluated to be true or to return <code class=\"docutils literal\">1</code> if the last line is evaluated to be false. Default value: <code class=\"docutils literal\">false</code>.</p> <p>When the <code class=\"docutils literal\">guard_intrepreter</code> common attribute is set to <code class=\"docutils literal\">:powershell_script</code>, a string command will be evaluated as if this value were set to <code class=\"docutils literal\">true</code>. This is because the behavior of this attribute is similar to the value of the <code class=\"docutils literal\">\"$?\"</code> expression common in UNIX interpreters. For example, this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">powershell_script 'make_safe_backup' do\n  guard_interpreter :powershell_script\n  code 'cp ~/data/nodes.json ~/data/nodes.bak'\n  not_if 'test-path ~/data/nodes.bak'\nend</pre> <p>is similar to:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">bash 'make_safe_backup' do\n  code 'cp ~/data/nodes.json ~/data/nodes.bak'\n  not_if 'test -e ~/data/nodes.bak'\nend</pre> </dd> <dt><code class=\"docutils literal\">creates</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Inherited from <strong>execute</strong> resource. Prevent a command from creating a file when that file already exists.</p> </dd> <dt><code class=\"docutils literal\">cwd</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Inherited from <strong>execute</strong> resource. The current working directory from which a command is run.</p> </dd> <dt><code class=\"docutils literal\">environment</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">Inherited from <strong>execute</strong> resource. A Hash of environment variables in the form of <code class=\"docutils literal\">{\"ENV_VARIABLE\" =&gt; \"VALUE\"}</code>. (These variables must exist for a command to be run successfully.)</p> </dd> <dt><code class=\"docutils literal\">flags</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">A string that is passed to the Windows PowerShell command. Default value: <code class=\"docutils literal\">-NoLogo, -NonInteractive, -NoProfile, -ExecutionPolicy RemoteSigned, -InputFormat None, -File</code>.</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">Inherited from <strong>execute</strong> resource. The group name or group ID that must be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">guard_interpreter</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol</p> <p class=\"last\">Default value: <code class=\"docutils literal\">:powershell_script</code>. When this property is set to <code class=\"docutils literal\">:powershell_script</code>, the 64-bit version of the Windows PowerShell shell will be used to evaluate strings values for the <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> properties. Set this value to <code class=\"docutils literal\">:default</code> to use the 32-bit version of the cmd.exe shell.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">interpreter</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The script interpreter to use during code execution. Changing the default value of this property is not supported.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">returns</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Array</p> <p class=\"last\">Inherited from <strong>execute</strong> resource. The return value for a command. This may be an array of accepted values. An exception is raised when the return value(s) do not match. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Float</p> <p class=\"last\">Inherited from <strong>execute</strong> resource. The amount of time (in seconds) a command is to wait before timing out. Default value: <code class=\"docutils literal\">3600</code>.</p> </dd> </dl>  <h3 id=\"guards\">Guards</h3> <p>A guard property can be used to evaluate the state of a node during the execution phase of the chef-client run. Based on the results of this evaluation, a guard property is then used to tell the chef-client if it should continue executing a resource. A guard property accepts either a string value or a Ruby block value:</p> <ul class=\"simple\"> <li>A string is executed as a shell command. If the command returns <code class=\"docutils literal\">0</code>, the guard is applied. If the command returns any other value, then the guard property is not applied. String guards in a <strong>powershell_script</strong> run Windows PowerShell commands and may return <code class=\"docutils literal\">true</code> in addition to <code class=\"docutils literal\">0</code>.</li> <li>A block is executed as Ruby code that must return either <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. If the block returns <code class=\"docutils literal\">true</code>, the guard property is applied. If the block returns <code class=\"docutils literal\">false</code>, the guard property is not applied.</li> </ul> <p>A guard property is useful for ensuring that a resource is idempotent by allowing that resource to test for the desired state as it is being executed, and then if the desired state is present, for the chef-client to do nothing.</p> <p><strong>Attributes</strong></p> <p>The following properties can be used to define a guard that is evaluated during the execution phase of the chef-client run:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">not_if</code></dt> <dd>Prevent a resource from executing when the condition returns <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">only_if</code></dt> <dd>Allow a resource to execute only if the condition returns <code class=\"docutils literal\">true</code>.</dd> </dl> <p><strong>Arguments</strong></p> <p>The following arguments can be used with the <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code> guard properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:user</code></dt> <dd>\n<p class=\"first\">Specify the user that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :user =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:group</code></dt> <dd>\n<p class=\"first\">Specify the group that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :group =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:environment</code></dt> <dd>\n<p class=\"first\">Specify a Hash of environment variables to be set. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :environment =&gt; {\n  'HOME' =&gt; '/home/adam'\n}</pre> </dd> <dt><code class=\"docutils literal\">:cwd</code></dt> <dd>\n<p class=\"first\">Set the current working directory before running a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam passwd', :cwd =&gt; '/etc'</pre> </dd> <dt><code class=\"docutils literal\">:timeout</code></dt> <dd>\n<p class=\"first\">Set a timeout for a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'sleep 10000', :timeout =&gt; 10</pre> </dd> </dl>    <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Write to an interpolated path</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">powershell_script 'write-to-interpolated-path' do\n  code &lt;&lt;-EOH\n  $stream = [System.IO.StreamWriter] \"#{Chef::Config[:file_cache_path]}/powershell-test.txt\"\n  $stream.WriteLine(\"In #{Chef::Config[:file_cache_path]}...word.\")\n  $stream.close()\n  EOH\nend</pre> <p><strong>Change the working directory</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">powershell_script 'cwd-then-write' do\n  cwd Chef::Config[:file_cache_path]\n  code &lt;&lt;-EOH\n  $stream = [System.IO.StreamWriter] \"C:/powershell-test2.txt\"\n  $pwd = pwd\n  $stream.WriteLine(\"This is the contents of: $pwd\")\n  $dirs = dir\n  foreach ($dir in $dirs) {\n    $stream.WriteLine($dir.fullname)\n  }\n  $stream.close()\n  EOH\nend</pre> <p><strong>Change the working directory in Microsoft Windows</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">powershell_script 'cwd-to-win-env-var' do\n  cwd '%TEMP%'\n  code &lt;&lt;-EOH\n  $stream = [System.IO.StreamWriter] \"./temp-write-from-chef.txt\"\n  $stream.WriteLine(\"chef on windows rox yo!\")\n  $stream.close()\n  EOH\nend</pre> <p><strong>Pass an environment variable to a script</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">powershell_script 'read-env-var' do\n  cwd Chef::Config[:file_cache_path]\n  environment ({'foo' =&gt; 'BAZ'})\n  code &lt;&lt;-EOH\n  $stream = [System.IO.StreamWriter] \"./test-read-env-var.txt\"\n  $stream.WriteLine(\"FOO is $env:foo\")\n  $stream.close()\n  EOH\nend</pre> <p><strong>Evaluate for true and/or false</strong></p> <p>Use the <code class=\"docutils literal\">convert_boolean_return</code> attribute to raise an exception when certain conditions are met. For example, the following fragments will run successfully without error:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">powershell_script 'false' do\n  code '$false'\nend</pre> <p>and:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">powershell_script 'true' do\n  code '$true'\nend</pre> <p>whereas the following will raise an exception:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">powershell_script 'false' do\n  convert_boolean_return true\n  code '$false'\nend</pre> <p><strong>Use the flags attribute</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">powershell_script 'Install IIS' do\n  code &lt;&lt;-EOH\n  Import-Module ServerManager\n  Add-WindowsFeature Web-Server\n  EOH\n  flags '-NoLogo, -NonInteractive, -NoProfile, -ExecutionPolicy Unrestricted, -InputFormat None, -File'\n  guard_interpreter :powershell_script\n  not_if '(Get-WindowsFeature -Name Web-Server).Installed'\nend</pre> <p><strong>Rename computer, join domain, reboot</strong></p> <p>The following example shows how to rename a computer, join a domain, and then reboot the computer:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">reboot 'Restart Computer' do\n  action :nothing\nend\n\npowershell_script 'Rename and Join Domain' do\n  code &lt;&lt;-EOH\n    ...your rename and domain join logic here...\n  EOH\n  not_if &lt;&lt;-EOH\n    $ComputerSystem = gwmi win32_computersystem\n    ($ComputerSystem.Name -like '#{node['some_attribute_that_has_the_new_name']}') -and\n      $ComputerSystem.partofdomain)\n  EOH\n  notifies :reboot_now, 'reboot[Restart Computer]', :immediately\nend</pre> <p>where:</p> <ul class=\"simple\"> <li>The <strong>powershell_script</strong> resource block renames a computer, and then joins a domain</li> <li>The <strong>reboot</strong> resource restarts the computer</li> <li>The <code class=\"docutils literal\">not_if</code> guard prevents the Windows PowerShell script from running when the settings in the <code class=\"docutils literal\">not_if</code> guard match the desired state</li> <li>The <code class=\"docutils literal\">notifies</code> statement tells the <strong>reboot</strong> resource block to run if the <strong>powershell_script</strong> block was executed during the chef-client run</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_powershell_script.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_powershell_script.html</a>\n  </p>\n</div>\n","12-9/resource_python":"<h1 id=\"python\">python</h1> <p>Use the <strong>python</strong> resource to execute scripts using the Python interpreter. This resource may also use any of the actions and properties that are available to the <strong>execute</strong> resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <strong>python</strong> script resource (which is based on the <strong>script</strong> resource) is different from the <strong>ruby_block</strong> resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>python</strong> resource block executes scripts using Python:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">python 'hello world' do\n  code &lt;&lt;-EOH\n    print \"Hello world! From Chef and Python.\"\n    EOH\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">code</code> specifies the command to run</li> </ul> <p>The full syntax for all of the properties that are available to the <strong>python</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">python 'name' do\n  code                       String\n  creates                    String\n  cwd                        String\n  environment                Hash\n  flags                      String\n  group                      String, Integer\n  notifies                   # see description\n  path                       Array\n  provider                   Chef::Provider::Script::Python\n  returns                    Integer, Array\n  subscribes                 # see description\n  timeout                    Integer, Float\n  user                       String, Integer\n  umask                      String, Integer\n  action                     Symbol # defaults to :run if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">python</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">code</code>, <code class=\"docutils literal\">creates</code>, <code class=\"docutils literal\">cwd</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">flags</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">returns</code>, <code class=\"docutils literal\">timeout</code>, <code class=\"docutils literal\">user</code>, and <code class=\"docutils literal\">umask</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Prevent a command from running. This action is used to specify that a command is run only when another resource notifies it.</dd> <dt><code class=\"docutils literal\">:run</code></dt> <dd>Default. Run a script.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">code</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">A quoted (” ”) string of code to be executed.</p> </dd> <dt><code class=\"docutils literal\">creates</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Prevent a command from creating a file when that file already exists.</p> </dd> <dt><code class=\"docutils literal\">cwd</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The current working directory.</p> </dd> <dt><code class=\"docutils literal\">environment</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A Hash of environment variables in the form of <code class=\"docutils literal\">{\"ENV_VARIABLE\" =&gt; \"VALUE\"}</code>. (These variables must exist for a command to be run successfully.)</p> </dd> <dt><code class=\"docutils literal\">flags</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One or more command line flags that are passed to the interpreter when a command is invoked.</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The group name or group ID that must be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p>An array of paths to use when searching for a command. These paths are not added to the command’s environment $PATH. The default value uses the system path.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>The <code class=\"docutils literal\">path</code> property is not implemented by any provider in any version of the chef-client. Starting with chef-client 12, using the <code class=\"docutils literal\">path</code> property will return a warning. Starting with chef-client 13, the <code class=\"docutils literal\">path</code> property is deprecated and using it will return an exception. Cookbooks that currently use the <code class=\"docutils literal\">path</code> property should be updated to use the <code class=\"docutils literal\">environment</code> property instead.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">python 'mycommand' do\n  environment 'PATH' =&gt; \"/my/path/to/bin:#{ENV['PATH']}\"\nend</pre> </div> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">returns</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Array</p> <p class=\"last\">The return value for a command. This may be an array of accepted values. An exception is raised when the return value(s) do not match. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Float</p> <p class=\"last\">The amount of time (in seconds) a command is to wait before timing out. Default value: <code class=\"docutils literal\">3600</code>.</p> </dd> <dt><code class=\"docutils literal\">user</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The user name or user ID that should be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">umask</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The file mode creation mask, or umask.</p> </dd> </dl>  <h3 id=\"guards\">Guards</h3> <p>A guard property can be used to evaluate the state of a node during the execution phase of the chef-client run. Based on the results of this evaluation, a guard property is then used to tell the chef-client if it should continue executing a resource. A guard property accepts either a string value or a Ruby block value:</p> <ul class=\"simple\"> <li>A string is executed as a shell command. If the command returns <code class=\"docutils literal\">0</code>, the guard is applied. If the command returns any other value, then the guard property is not applied. String guards in a <strong>powershell_script</strong> run Windows PowerShell commands and may return <code class=\"docutils literal\">true</code> in addition to <code class=\"docutils literal\">0</code>.</li> <li>A block is executed as Ruby code that must return either <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. If the block returns <code class=\"docutils literal\">true</code>, the guard property is applied. If the block returns <code class=\"docutils literal\">false</code>, the guard property is not applied.</li> </ul> <p>A guard property is useful for ensuring that a resource is idempotent by allowing that resource to test for the desired state as it is being executed, and then if the desired state is present, for the chef-client to do nothing.</p> <p><strong>Attributes</strong></p> <p>The following properties can be used to define a guard that is evaluated during the execution phase of the chef-client run:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">not_if</code></dt> <dd>Prevent a resource from executing when the condition returns <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">only_if</code></dt> <dd>Allow a resource to execute only if the condition returns <code class=\"docutils literal\">true</code>.</dd> </dl> <p><strong>Arguments</strong></p> <p>The following arguments can be used with the <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code> guard properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:user</code></dt> <dd>\n<p class=\"first\">Specify the user that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :user =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:group</code></dt> <dd>\n<p class=\"first\">Specify the group that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :group =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:environment</code></dt> <dd>\n<p class=\"first\">Specify a Hash of environment variables to be set. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :environment =&gt; {\n  'HOME' =&gt; '/home/adam'\n}</pre> </dd> <dt><code class=\"docutils literal\">:cwd</code></dt> <dd>\n<p class=\"first\">Set the current working directory before running a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam passwd', :cwd =&gt; '/etc'</pre> </dd> <dt><code class=\"docutils literal\">:timeout</code></dt> <dd>\n<p class=\"first\">Set a timeout for a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'sleep 10000', :timeout =&gt; 10</pre> </dd> </dl>    <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script</code>, <code class=\"docutils literal\">script</code>\n</dt> <dd>When this short name is used, the chef-client will determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script::Python</code>, <code class=\"docutils literal\">python</code>\n</dt> <dd>The provider for the Python command interpreter.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>None.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_python.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_python.html</a>\n  </p>\n</div>\n","12-9/resource_route":"<h1 id=\"route\">route</h1> <p>Use the <strong>route</strong> resource to manage the system routing table in a Linux environment.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>route</strong> resource block manages the system routing table in a Linux environment:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">route '10.0.1.10/32' do\n  gateway '10.0.0.20'\n  device 'eth1'\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>route</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">route 'name' do\n  device                     String\n  gateway                    String\n  netmask                    String\n  notifies                   # see description\n  provider                   Chef::Provider::Route\n  subscribes                 # see description\n  target                     String # defaults to 'name' if not specified\n  action                     Symbol # defaults to :add if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">route</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">device</code>, <code class=\"docutils literal\">gateway</code>, <code class=\"docutils literal\">netmask</code>, <code class=\"docutils literal\">provider</code> and <code class=\"docutils literal\">target</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:add</code></dt> <dd>Default. Add a route.</dd> <dt><code class=\"docutils literal\">:delete</code></dt> <dd>Delete a route.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">device</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The network interface to which the route applies.</p> </dd> <dt><code class=\"docutils literal\">gateway</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The gateway for the route.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">netmask</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The decimal representation of the network mask. For example: <code class=\"docutils literal\">255.255.255.0</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">target</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The IP address of the target route. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Add a host route</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">route '10.0.1.10/32' do\n  gateway '10.0.0.20'\n  device 'eth1'\nend</pre> <p><strong>Delete a network route</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">route '10.1.1.0/24' do\n  gateway '10.0.0.20'\n  action :delete\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_route.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_route.html</a>\n  </p>\n</div>\n","12-9/resource_rpm_package":"<h1 id=\"rpm-package\">rpm_package</h1> <p>Use the <strong>rpm_package</strong> resource to manage packages for the RPM Package Manager platform.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>rpm_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>rpm_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">rpm_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>rpm_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">rpm_package 'name' do\n  allow_downgrade            TrueClass, FalseClass\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::Rpm\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">rpm_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">allow_downgrade</code>, <code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> <dt><code class=\"docutils literal\">:upgrade</code></dt> <dd>Install a package and/or ensure that a package is the latest version.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">allow_downgrade</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Downgrade a package to satisfy requested version requirements.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The path to a package in the local file system.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Rpm</code>, <code class=\"docutils literal\">rpm_package</code>\n</dt> <dd>The provider for the RPM Package Manager platform. Can be used with the <code class=\"docutils literal\">options</code> attribute.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">rpm_package 'name of package' do\n  action :install\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_rpm_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_rpm_package.html</a>\n  </p>\n</div>\n","12-9/resource_package":"<h1 id=\"package\">package</h1> <p>Use the <strong>package</strong> resource to manage packages. When the package is installed from a local file (such as with RubyGems, dpkg, or RPM Package Manager), the file must be added to the node using the <strong>remote_file</strong> or <strong>cookbook_file</strong> resources.</p> <p>This resource is the base resource for several other resources used for package management on specific platforms. While it is possible to use each of these specific resources, it is recommended to use the <strong>package</strong> resource as often as possible.</p> <p>For more information about specific resources for specific platforms, see the following topics:</p> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"resource_apt_package\">apt_package</a></li> <li><a class=\"reference internal\" href=\"resource_bff_package\">bff_package</a></li> <li><a class=\"reference internal\" href=\"resource_chef_gem\">chef_gem</a></li> <li><a class=\"reference internal\" href=\"resource_chocolatey_package\">chocolatey_package</a></li> <li><a class=\"reference internal\" href=\"resource_dpkg_package\">dpkg_package</a></li> <li><a class=\"reference internal\" href=\"resource_easy_install_package\">easy_install_package</a></li> <li><a class=\"reference internal\" href=\"resource_freebsd_package\">freebsd_package</a></li> <li><a class=\"reference internal\" href=\"resource_gem_package\">gem_package</a></li> <li><a class=\"reference internal\" href=\"resource_homebrew_package\">homebrew_package</a></li> <li><a class=\"reference internal\" href=\"resource_ips_package\">ips_package</a></li> <li><a class=\"reference internal\" href=\"resource_macports_package\">macports_package</a></li> <li><a class=\"reference internal\" href=\"resource_openbsd_package\">openbsd_package</a></li> <li><a class=\"reference internal\" href=\"resource_pacman_package\">pacman_package</a></li> <li><a class=\"reference internal\" href=\"resource_paludis_package\">paludis_package</a></li> <li><a class=\"reference internal\" href=\"resource_portage_package\">portage_package</a></li> <li><a class=\"reference internal\" href=\"resource_rpm_package\">rpm_package</a></li> <li><a class=\"reference internal\" href=\"resource_smartos_package\">smartos_package</a></li> <li><a class=\"reference internal\" href=\"resource_solaris_package\">solaris_package</a></li> <li><a class=\"reference internal\" href=\"resource_windows_package\">windows_package</a></li> <li><a class=\"reference internal\" href=\"resource_yum\">yum_package</a></li> </ul>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'httpd'</pre> <p>which will install Apache using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>For a package that has different package names, depending on the platform, use a <code class=\"docutils literal\">case</code> statement within the <strong>package</strong>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'Install Apache' do\n  case node[:platform]\n  when 'redhat', 'centos'\n    package_name 'httpd'\n  when 'ubuntu', 'debian'\n    package_name 'apache2'\n  end\nend</pre> <p>where <code class=\"docutils literal\">'redhat', 'centos'</code> will install Apache using the <code class=\"docutils literal\">httpd</code> package and <code class=\"docutils literal\">'ubuntu', 'debian'</code> will install it using the <code class=\"docutils literal\">apache2</code> package</p> <p>The full syntax for all of the properties that are available to the <strong>package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'name' do\n  allow_downgrade            TrueClass, FalseClass # Yum, RPM packages only\n  arch                       String, Array # Yum packages only\n  default_release            String # Apt packages only\n  flush_cache                Array\n  gem_binary                 String\n  homebrew_user              String, Integer # Homebrew packages only\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package\n  response_file              String # Apt packages only\n  response_file_variables    Hash # Apt packages only\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">package</code> tells the chef-client to manage a package; the chef-client will determine the correct package provider to use based on the platform running on the node</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">allow_downgrade</code>, <code class=\"docutils literal\">arch</code>, <code class=\"docutils literal\">default_release</code>, <code class=\"docutils literal\">flush_cache</code>, <code class=\"docutils literal\">gem_binary</code>, <code class=\"docutils literal\">homebrew_user</code>, <code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">response_file</code>, <code class=\"docutils literal\">response_file_variables</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">recursive</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>  <h3 id=\"gem-package-options\">Gem Package Options</h3> <p>The RubyGems package provider attempts to use the RubyGems API to install gems without spawning a new process, whenever possible. A gems command to install will be spawned under the following conditions:</p> <ul class=\"simple\"> <li>When a <code class=\"docutils literal\">gem_binary</code> property is specified (as a hash, a string, or by a .gemrc file), the chef-client will run that command to examine its environment settings and then again to install the gem.</li> <li>When install options are specified as a string, the chef-client will span a gems command with those options when installing the gem.</li> <li>The omnibus installer will search the <code class=\"docutils literal\">PATH</code> for a gem command rather than defaulting to the current gem environment. As part of <code class=\"docutils literal\">enforce_path_sanity</code>, the <code class=\"docutils literal\">bin</code> directories area added to the <code class=\"docutils literal\">PATH</code>, which means when there are no other proceeding RubyGems, the installation will still be operated against it.</li> </ul> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Gem package options should only be used when gems are installed into the system-wide instance of Ruby, and not the instance of Ruby dedicated to the chef-client.</p> </div>  <h4 id=\"specify-with-hash\">Specify with Hash</h4> <p>If an explicit <code class=\"docutils literal\">gem_binary</code> parameter is not being used with the <code class=\"docutils literal\">gem_package</code> resource, it is preferable to provide the install options as a hash. This approach allows the provider to install the gem without needing to spawn an external gem process.</p> <p>The following RubyGems options are available for inclusion within a hash and are passed to the RubyGems DependencyInstaller:</p> <ul class=\"simple\"> <li><code class=\"docutils literal\">:env_shebang</code></li> <li><code class=\"docutils literal\">:force</code></li> <li><code class=\"docutils literal\">:format_executable</code></li> <li><code class=\"docutils literal\">:ignore_dependencies</code></li> <li><code class=\"docutils literal\">:prerelease</code></li> <li><code class=\"docutils literal\">:security_policy</code></li> <li><code class=\"docutils literal\">:wrappers</code></li> </ul> <p>For more information about these options, see the RubyGems documentation: <a class=\"reference external\" href=\"http://rubygems.rubyforge.org/rubygems-update/Gem/DependencyInstaller.html\">http://rubygems.rubyforge.org/rubygems-update/Gem/DependencyInstaller.html</a>.</p> <p><strong>Example</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">gem_package 'bundler' do\n  options(:prerelease =&gt; true, :format_executable =&gt; false)\nend</pre>   <h4 id=\"specify-with-string\">Specify with String</h4> <p>When using an explicit <code class=\"docutils literal\">gem_binary</code>, options must be passed as a string. When not using an explicit <code class=\"docutils literal\">gem_binary</code>, the chef-client is forced to spawn a gems process to install the gems (which uses more system resources) when options are passed as a string. String options are passed verbatim to the gems command and should be specified just as if they were passed on a command line. For example, <code class=\"docutils literal\">--prerelease</code> for a pre-release gem.</p> <p><strong>Example</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">gem_package 'nokogiri' do\n  gem_binary('/opt/ree/bin/gem')\n  options('--prerelease --no-format-executable')\nend</pre>   <h4 id=\"specify-with-gemrc-file\">Specify with .gemrc File</h4> <p>Options can be specified in a .gemrc file. By default the <code class=\"docutils literal\">gem_package</code> resource will use the Ruby interface to install gems which will ignore the .gemrc file. The <code class=\"docutils literal\">gem_package</code> resource can be forced to use the gems command instead (and to read the .gemrc file) by adding the <code class=\"docutils literal\">gem_binary</code> attribute to a code block.</p> <p><strong>Example</strong></p> <p>A template named <code class=\"docutils literal\">gemrc.erb</code> is located in a cookbook’s <code class=\"docutils literal\">/templates</code> directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">:sources:\n- http://&lt;%= node['gem_file']['host'] %&gt;:&lt;%= node['gem_file']['port'] %&gt;/</pre> <p>A recipe can be built that does the following:</p> <ul class=\"simple\"> <li>Builds a <code class=\"docutils literal\">.gemrc</code> file based on a <code class=\"docutils literal\">gemrc.erb</code> template</li> <li>Runs a <code class=\"docutils literal\">Gem.configuration</code> command</li> <li>Installs a package using the <code class=\"docutils literal\">.gemrc</code> file</li> </ul> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/root/.gemrc' do\n  source 'gemrc.erb'\n  action :create\n  notifies :run, 'ruby_block[refresh_gemrc]', :immediately\nend\n\nruby_block 'refresh_gemrc' do\n  action :nothing\n  block do\n    Gem.configuration = Gem::ConfigFile.new []\n  end\nend\n\ngem_package 'di-ruby-lvm' do\n  gem_binary '/opt/chef/embedded/bin/gem'\n  action :install\nend</pre>     <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:purge</code></dt> <dd>Purge a package. This action typically removes the configuration files as well as the package. (Debian platform only; for other platforms, use the <code class=\"docutils literal\">:remove</code> action.)</dd> <dt><code class=\"docutils literal\">:reconfig</code></dt> <dd>Reconfigure a package. This action requires a response file.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> <dt><code class=\"docutils literal\">:upgrade</code></dt> <dd>Install a package and/or ensure that a package is the latest version.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following attributes:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">allow_downgrade</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\"><strong>yum_package</strong> resource only. Downgrade a package to satisfy requested version requirements. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">arch</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\"><strong>yum_package</strong> resource only. The architecture of the package to be installed or upgraded. This value can also be passed as part of the package name.</p> </dd> <dt><code class=\"docutils literal\">default_release</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\"><strong>apt_package</strong> resource only. The default release. For example: <code class=\"docutils literal\">stable</code>.</p> </dd> <dt><code class=\"docutils literal\">flush_cache</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p>Flush the in-memory cache before or after a Yum operation that installs, upgrades, or removes a package. Default value: <code class=\"docutils literal\">[ :before, :after ]</code>. The value may also be a Hash: <code class=\"docutils literal\">( { :before =&gt; true/false, :after =&gt; true/false } )</code>.</p> <p>Yum automatically synchronizes remote metadata to a local cache. The chef-client creates a copy of the local cache, and then stores it in-memory during the chef-client run. The in-memory cache allows packages to be installed during the chef-client run without the need to continue synchronizing the remote metadata to the local cache while the chef-client run is in-progress.</p> <p>As an array:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_package 'some-package' do\n  #...\n  flush_cache [ :before ]\n  #...\nend</pre> <p>and as a Hash:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_package 'some-package' do\n  #...\n  flush_cache( { :after =&gt; true } )\n  #...\nend</pre> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">flush_cache</code> property does not flush the local Yum cache! Use Yum tools—<code class=\"docutils literal\">yum clean headers</code>, <code class=\"docutils literal\">yum clean packages</code>, <code class=\"docutils literal\">yum clean all</code>—to clean the local Yum cache.</p> </div> </dd> <dt><code class=\"docutils literal\">gem_binary</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">A property for the <code class=\"docutils literal\">gem_package</code> provider that is used to specify a gems binary.</p> </dd> <dt><code class=\"docutils literal\">homebrew_user</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\"><strong>homebrew_package</strong> resource only. The name of the Homebrew owner to be used by the chef-client when executing a command.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">response_file</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\"><strong>apt_package</strong> and <strong>dpkg_package</strong> resources only. The direct path to the file used to pre-seed a package.</p> </dd> <dt><code class=\"docutils literal\">response_file_variables</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\"><strong>apt_package</strong> and <strong>dpkg_package</strong> resources only. A Hash of response file variables in the form of <code class=\"docutils literal\">{\"VARIABLE\" =&gt; \"VALUE\"}</code>.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p>Optional. The path to a package in the local file system.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The AIX platform requires <code class=\"docutils literal\">source</code> to be a local file system path because <code class=\"docutils literal\">installp</code> does not retrieve packages using HTTP or FTP.</p> </div> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>  <h3 id=\"multiple-packages\">Multiple Packages</h3> <p>A resource may specify multiple packages and/or versions for platforms that use Yum, Apt, Zypper, or Chocolatey package managers. Specifing multiple packages and/or versions allows a single transaction to:</p> <ul class=\"simple\"> <li>Download the specified packages and versions via a single HTTP transaction</li> <li>Update or install multiple packages with a single resource during the chef-client run</li> </ul> <p>For example, installing multiple packages:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package ['package1', 'package2']</pre> <p>Upgrading multiple packages:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package ['package1', 'package2']  do\n  action :upgrade\nend</pre> <p>Removing multiple packages:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package ['package1', 'package2']  do\n  action :remove\nend</pre> <p>Purging multiple packages:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package ['package1', 'package2']  do\n  action :purge\nend</pre> <p>Notifications, via an implicit name:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package ['package1', 'package2']  do\n  action :nothing\nend\n\nlog 'call a notification' do\n  notifies :install, 'package[package1, package2]', :immediately\nend</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Notifications and subscriptions do not need to be updated when packages and versions are added or removed from the <code class=\"docutils literal\">package_name</code> or <code class=\"docutils literal\">version</code> properties.</p> </div>    <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Aix</code>, <code class=\"docutils literal\">bff_package</code>\n</dt> <dd>The provider for the AIX platform. Can be used with the <code class=\"docutils literal\">options</code> attribute.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Apt</code>, <code class=\"docutils literal\">apt_package</code>\n</dt> <dd>The provider for the Debian and Ubuntu platforms.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Dpkg</code>, <code class=\"docutils literal\">dpkg_package</code>\n</dt> <dd>The provider for the dpkg platform. Can be used with the <code class=\"docutils literal\">options</code> attribute.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::EasyInstall</code>, <code class=\"docutils literal\">easy_install_package</code>\n</dt> <dd>The provider for Python.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Freebsd</code>, <code class=\"docutils literal\">freebsd_package</code>\n</dt> <dd>The provider for the FreeBSD platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Homebrew</code>, <code class=\"docutils literal\">homebrew_package</code>\n</dt> <dd>The provider for the Mac OS X platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Ips</code>, <code class=\"docutils literal\">ips_package</code>\n</dt> <dd>The provider for the ips platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Macports</code>, <code class=\"docutils literal\">macports_package</code>\n</dt> <dd>The provider for the Mac OS X platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Openbsd</code>, <code class=\"docutils literal\">openbsd_package</code>\n</dt> <dd>The provider for the OpenBSD platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Pacman</code>, <code class=\"docutils literal\">pacman_package</code>\n</dt> <dd>The provider for the Arch Linux platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Paludis</code>, <code class=\"docutils literal\">paludis_package</code>\n</dt> <dd>The provider for the Paludis platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Portage</code>, <code class=\"docutils literal\">portage_package</code>\n</dt> <dd>The provider for the Gentoo platform. Can be used with the <code class=\"docutils literal\">options</code> attribute.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Rpm</code>, <code class=\"docutils literal\">rpm_package</code>\n</dt> <dd>The provider for the RPM Package Manager platform. Can be used with the <code class=\"docutils literal\">options</code> attribute.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Rubygems</code>, <code class=\"docutils literal\">gem_package</code>\n</dt> <dd>Can be used with the <code class=\"docutils literal\">options</code> attribute.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Rubygems</code>, <code class=\"docutils literal\">chef_gem</code>\n</dt> <dd>Can be used with the <code class=\"docutils literal\">options</code> attribute.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Smartos</code>, <code class=\"docutils literal\">smartos_package</code>\n</dt> <dd>The provider for the SmartOS platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Solaris</code>, <code class=\"docutils literal\">solaris_package</code>\n</dt> <dd>The provider for the Solaris platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Windows</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>The provider for the Microsoft Windows platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Yum</code>, <code class=\"docutils literal\">yum_package</code>\n</dt> <dd>The provider for the Yum package provider.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Zypper</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>The provider for the openSUSE platform.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a gems file for use in recipes</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_gem 'right_aws' do\n  action :install\nend\n\nrequire 'right_aws'</pre> <p><strong>Install a gems file from the local file system</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">gem_package 'right_aws' do\n  source '/tmp/right_aws-1.11.0.gem'\n  action :install\nend</pre> <p><strong>Install a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'tar' do\n  action :install\nend</pre> <p><strong>Install a package version</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'tar' do\n  version '1.16.1-1'\n  action :install\nend</pre> <p><strong>Install a package with options</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'debian-archive-keyring' do\n  action :install\n  options '--force-yes'\nend</pre> <p><strong>Install a package with a response_file</strong></p> <p>Use of a <code class=\"docutils literal\">response_file</code> is only supported on Debian and Ubuntu at this time. Custom resources must be written to support the use of a <code class=\"docutils literal\">response_file</code>, which contains debconf answers to questions normally asked by the package manager on installation. Put the file in <code class=\"docutils literal\">/files/default</code> of the cookbook where the package is specified and the chef-client will use the <strong>cookbook_file</strong> resource to retrieve it.</p> <p>To install a package with a <code class=\"docutils literal\">response_file</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'sun-java6-jdk' do\n  response_file 'java.seed'\nend</pre> <p><strong>Install a package using a specific provider</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'tar' do\n  action :install\n  source '/tmp/tar-1.16.1-1.rpm'\n  provider Chef::Provider::Package::Rpm\nend</pre> <p><strong>Install a specified architecture using a named provider</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_package 'glibc-devel' do\n  arch 'i386'\nend</pre> <p><strong>Purge a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'tar' do\n  action :purge\nend</pre> <p><strong>Remove a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'tar' do\n  action :remove\nend</pre> <p><strong>Upgrade a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'tar' do\n  action :upgrade\nend</pre> <p><strong>Use the ignore_failure common attribute</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">gem_package 'syntax' do\n  action :install\n  ignore_failure true\nend</pre> <p><strong>Use the provider common attribute</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'some_package' do\n  provider Chef::Provider::Package::Rubygems\nend</pre> <p><strong>Avoid unnecessary string interpolation</strong></p> <p>Do this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'mysql-server' do\n  version node['mysql']['version']\n  action :install\nend</pre> <p>and not this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'mysql-server' do\n  version \"#{node['mysql']['version']}\"\n  action :install\nend</pre> <p><strong>Install a package in a platform</strong></p> <p>The following example shows how to use the <strong>package</strong> resource to install an application named <code class=\"docutils literal\">app</code> and ensure that the correct packages are installed for the correct platform:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'app_name' do\n  action :install\nend\n\ncase node[:platform]\nwhen 'ubuntu','debian'\n  package 'app_name-doc' do\n    action :install\n  end\nwhen 'centos'\n  package 'app_name-html' do\n    action :install\n  end\nend</pre> <p><strong>Install sudo, then configure /etc/sudoers/ file</strong></p> <p>The following example shows how to install sudo and then configure the <code class=\"docutils literal\">/etc/sudoers</code> file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">#  the following code sample comes from the ``default`` recipe in the ``sudo`` cookbook: https://github.com/chef-cookbooks/sudo\n\npackage 'sudo' do\n  action :install\nend\n\nif node['authorization']['sudo']['include_sudoers_d']\n  directory '/etc/sudoers.d' do\n    mode        '0755'\n    owner       'root'\n    group       'root'\n    action      :create\n  end\n\n  cookbook_file '/etc/sudoers.d/README' do\n    source      'README'\n    mode        '0440'\n    owner       'root'\n    group       'root'\n    action      :create\n  end\nend\n\ntemplate '/etc/sudoers' do\n  source 'sudoers.erb'\n  mode '0440'\n  owner 'root'\n  group platform?('freebsd') ? 'wheel' : 'root'\n  variables(\n    :sudoers_groups =&gt; node['authorization']['sudo']['groups'],\n    :sudoers_users =&gt; node['authorization']['sudo']['users'],\n    :passwordless =&gt; node['authorization']['sudo']['passwordless']\n  )\nend</pre> <p>where</p> <ul class=\"simple\"> <li>the <strong>package</strong> resource is used to install sudo</li> <li>the <code class=\"docutils literal\">if</code> statement is used to ensure availability of the <code class=\"docutils literal\">/etc/sudoers.d</code> directory</li> <li>the <strong>template</strong> resource tells the chef-client where to find the <code class=\"docutils literal\">sudoers</code> template</li> <li>the <code class=\"docutils literal\">variables</code> property is a hash that passes values to template files (that are located in the <code class=\"docutils literal\">templates/</code> directory for the cookbook</li> </ul> <p><strong>Use a case statement to specify the platform</strong></p> <p>The following example shows how to use a case statement to tell the chef-client which platforms and packages to install using cURL.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'curl'\n  case node[:platform]\n  when 'redhat', 'centos'\n    package 'package_1'\n    package 'package_2'\n    package 'package_3'\n  when 'ubuntu', 'debian'\n    package 'package_a'\n    package 'package_b'\n    package 'package_c'\n  end\nend</pre> <p>where <code class=\"docutils literal\">node[:platform]</code> for each node is identified by Ohai during every chef-client run. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'curl'\n  case node[:platform]\n  when 'redhat', 'centos'\n    package 'zlib-devel'\n    package 'openssl-devel'\n    package 'libc6-dev'\n  when 'ubuntu', 'debian'\n    package 'openssl'\n    package 'pkg-config'\n    package 'subversion'\n  end\nend</pre> <p><strong>Use symbols to reference attributes</strong></p> <p>Symbols may be used to reference attributes:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'mysql-server' do\n  version node[:mysql][:version]\n  action :install\nend</pre> <p>instead of strings:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'mysql-server' do\n  version node['mysql']['version']\n  action :install\nend</pre> <p><strong>Use a whitespace array to simplify a recipe</strong></p> <p>The following examples show different ways of doing the same thing. The first shows a series of packages that will be upgraded:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'package-a' do\n  action :upgrade\nend\n\npackage 'package-b' do\n  action :upgrade\nend\n\npackage 'package-c' do\n  action :upgrade\nend\n\npackage 'package-d' do\n  action :upgrade\nend</pre> <p>and the next uses a single <strong>package</strong> resource and a whitespace array (<code class=\"docutils literal\">%w</code>):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">%w{package-a package-b package-c package-d}.each do |pkg|\n  package pkg do\n    action :upgrade\n  end\nend</pre> <p>where <code class=\"docutils literal\">|pkg|</code> is used to define the name of the resource, but also to ensure that each item in the whitespace array has its own name.</p> <p><strong>Specify the Homebrew user with a UUID</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">homebrew_package 'emacs' do\n  homebrew_user 1001\nend</pre> <p><strong>Specify the Homebrew user with a string</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">homebrew_package 'vim' do\n  homebrew_user 'user1'\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_package.html</a>\n  </p>\n</div>\n","12-9/resource_remote_directory":"<h1 id=\"remote-directory\">remote_directory</h1> <p>Use the <strong>remote_directory</strong> resource to incrementally transfer a directory from a cookbook to a node. The directory that is copied from the cookbook should be located under <code class=\"docutils literal\">COOKBOOK_NAME/files/default/REMOTE_DIRECTORY</code>. The <strong>remote_directory</strong> resource will obey file specificity.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>remote_directory</strong> resource block transfers a directory from a cookbook to a node, and then assigns the permissions needed on that directory. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">remote_directory '/etc/apache2' do\n  source 'apache2'\n  owner 'root'\n  group 'root'\n  mode '0755'\n  action :create\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">'/etc/apache2'</code> specifies the directory</li> <li>\n<code class=\"docutils literal\">source</code> specifies a directory in the current cookbook (use the <code class=\"docutils literal\">cookbook</code> property to specify a file that is in a different cookbook)</li> <li>\n<code class=\"docutils literal\">owner</code>, <code class=\"docutils literal\">group</code>, and <code class=\"docutils literal\">mode</code> define the permissions</li> </ul> <p>The full syntax for all of the properties that are available to the <strong>remote_directory</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">remote_directory 'name' do\n  cookbook                   String\n  files_backup               Integer, FalseClass\n  files_group                String\n  files_mode                 String\n  files_owner                String\n  group                      String, Integer\n  inherits                   TrueClass, FalseClass\n  mode                       String, Integer\n  notifies                   # see description\n  overwrite                  TrueClass, FalseClass\n  owner                      String, Integer\n  path                       String # defaults to 'name' if not specified\n  provider                   Chef::Provider::Directory::RemoteDirectory\n  purge                      TrueClass, FalseClass\n  recursive                  TrueClass, FalseClass\n  rights                     Hash\n  source                     String\n  subscribes                 # see description\n  action                     Symbol # defaults to :create if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">remote_directory</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block; when the <code class=\"docutils literal\">path</code> property is not specified, <code class=\"docutils literal\">name</code> is also the path to the directory, from the root</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">cookbook</code>, <code class=\"docutils literal\">files_backup</code>, <code class=\"docutils literal\">files_group</code>, <code class=\"docutils literal\">files_mode</code>, <code class=\"docutils literal\">files_owner</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">inherits</code>, <code class=\"docutils literal\">mode</code>, <code class=\"docutils literal\">overwrite</code>, <code class=\"docutils literal\">owner</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">recursive</code>, <code class=\"docutils literal\">rights</code>, and <code class=\"docutils literal\">source</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:create</code></dt> <dd>Default. Create a directory and/or the contents of that directory. If a directory or its contents already exist (but does not match), update that directory or its contents to match.</dd> <dt><code class=\"docutils literal\">:create_if_missing</code></dt> <dd>Create a directory and/or the contents of that directory, but only if it does not exist.</dd> <dt><code class=\"docutils literal\">:delete</code></dt> <dd>Delete a directory, including the contents of that directory.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">cookbook</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The cookbook in which a file is located (if it is not located in the current cookbook). The default value is the current cookbook.</p> </dd> <dt><code class=\"docutils literal\">files_backup</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, FalseClass</p> <p class=\"last\">The number of backup copies to keep for files in the directory. Default value: <code class=\"docutils literal\">5</code>.</p> </dd> <dt><code class=\"docutils literal\">files_group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Configure group permissions for files. A string or ID that identifies the group owner by group name, including fully qualified group names such as <code class=\"docutils literal\">domain\\group</code> or <code class=\"docutils literal\">group@domain</code>. If this value is not specified, existing groups remain unchanged and new group assignments use the default <code class=\"docutils literal\">POSIX</code> group (if available).</p> </dd> <dt><code class=\"docutils literal\">files_mode</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p>The octal mode for a file.</p> <p>UNIX- and Linux-based systems: A quoted 3-5 character string that defines the octal mode that is passed to chmod. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. If the value is specified as a quoted string, it works exactly as if the <code class=\"docutils literal\">chmod</code> command was passed. If the value is specified as an integer, prepend a zero (<code class=\"docutils literal\">0</code>) to the value to ensure that it is interpreted as an octal number. For example, to assign read, write, and execute rights for all users, use <code class=\"docutils literal\">'0777'</code> or <code class=\"docutils literal\">'777'</code>; for the same rights, plus the sticky bit, use <code class=\"docutils literal\">'01777'</code> or <code class=\"docutils literal\">'1777'</code>.</p> <p class=\"last\">Microsoft Windows: A quoted 3-5 character string that defines the octal mode that is translated into rights for Microsoft Windows security. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. Values up to <code class=\"docutils literal\">'0777'</code> are allowed (no sticky bits) and mean the same in Microsoft Windows as they do in UNIX, where <code class=\"docutils literal\">4</code> equals <code class=\"docutils literal\">GENERIC_READ</code>, <code class=\"docutils literal\">2</code> equals <code class=\"docutils literal\">GENERIC_WRITE</code>, and <code class=\"docutils literal\">1</code> equals <code class=\"docutils literal\">GENERIC_EXECUTE</code>. This property cannot be used to set <code class=\"docutils literal\">:full_control</code>. This property has no effect if not specified, but when it and <code class=\"docutils literal\">rights</code> are both specified, the effects are cumulative.</p> </dd> <dt><code class=\"docutils literal\">files_owner</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Configure owner permissions for files. A string or ID that identifies the group owner by user name, including fully qualified user names such as <code class=\"docutils literal\">domain\\user</code> or <code class=\"docutils literal\">user@domain</code>. If this value is not specified, existing owners remain unchanged and new owner assignments use the current user (when necessary).</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">Use to configure permissions for directories. A string or ID that identifies the group owner by group name, including fully qualified group names such as <code class=\"docutils literal\">domain\\group</code> or <code class=\"docutils literal\">group@domain</code>. If this value is not specified, existing groups remain unchanged and new group assignments use the default <code class=\"docutils literal\">POSIX</code> group (if available).</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">inherits</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Microsoft Windows only. Whether a file inherits rights from its parent directory. Default value: <code class=\"docutils literal\">true</code>.</p> </dd> <dt><code class=\"docutils literal\">mode</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p>A quoted 3-5 character string that defines the octal mode. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. If <code class=\"docutils literal\">mode</code> is not specified and if the directory already exists, the existing mode on the directory is used. If <code class=\"docutils literal\">mode</code> is not specified, the directory does not exist, and the <code class=\"docutils literal\">:create</code> action is specified, the chef-client assumes a mask value of <code class=\"docutils literal\">'0777'</code>, and then applies the umask for the system on which the directory is to be created to the <code class=\"docutils literal\">mask</code> value. For example, if the umask on a system is <code class=\"docutils literal\">'022'</code>, the chef-client uses the default value of <code class=\"docutils literal\">'0755'</code>.</p> <p>The behavior is different depending on the platform.</p> <p>UNIX- and Linux-based systems: A quoted 3-5 character string that defines the octal mode that is passed to chmod. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. If the value is specified as a quoted string, it works exactly as if the <code class=\"docutils literal\">chmod</code> command was passed. If the value is specified as an integer, prepend a zero (<code class=\"docutils literal\">0</code>) to the value to ensure that it is interpreted as an octal number. For example, to assign read, write, and execute rights for all users, use <code class=\"docutils literal\">'0777'</code> or <code class=\"docutils literal\">'777'</code>; for the same rights, plus the sticky bit, use <code class=\"docutils literal\">'01777'</code> or <code class=\"docutils literal\">'1777'</code>.</p> <p class=\"last\">Microsoft Windows: A quoted 3-5 character string that defines the octal mode that is translated into rights for Microsoft Windows security. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. Values up to <code class=\"docutils literal\">'0777'</code> are allowed (no sticky bits) and mean the same in Microsoft Windows as they do in UNIX, where <code class=\"docutils literal\">4</code> equals <code class=\"docutils literal\">GENERIC_READ</code>, <code class=\"docutils literal\">2</code> equals <code class=\"docutils literal\">GENERIC_WRITE</code>, and <code class=\"docutils literal\">1</code> equals <code class=\"docutils literal\">GENERIC_EXECUTE</code>. This property cannot be used to set <code class=\"docutils literal\">:full_control</code>. This property has no effect if not specified, but when it and <code class=\"docutils literal\">rights</code> are both specified, the effects are cumulative.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">overwrite</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Overwrite a file when it is different. Default value: <code class=\"docutils literal\">true</code>.</p> </dd> <dt><code class=\"docutils literal\">owner</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">Use to configure permissions for directories. A string or ID that identifies the group owner by user name, including fully qualified user names such as <code class=\"docutils literal\">domain\\user</code> or <code class=\"docutils literal\">user@domain</code>. If this value is not specified, existing owners remain unchanged and new owner assignments use the current user (when necessary).</p> </dd> <dt><code class=\"docutils literal\">path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The path to the directory. Using a fully qualified path is recommended, but is not always required. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">purge</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Purge extra files found in the target directory. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">recursive</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Create or delete directories recursively. Default value: <code class=\"docutils literal\">true</code>; the chef-client must be able to create the directory structure, including parent directories (if missing), as defined in <code class=\"docutils literal\">COOKBOOK_NAME/files/default/REMOTE_DIRECTORY</code>.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">rights</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">Microsoft Windows only. The permissions for users and groups in a Microsoft Windows environment. For example: <code class=\"docutils literal\">rights &lt;permissions&gt;, &lt;principal&gt;, &lt;options&gt;</code> where <code class=\"docutils literal\">&lt;permissions&gt;</code> specifies the rights granted to the principal, <code class=\"docutils literal\">&lt;principal&gt;</code> is the group or user name, and <code class=\"docutils literal\">&lt;options&gt;</code> is a Hash with one (or more) advanced rights options.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The base name of the source file (and inferred from the <code class=\"docutils literal\">path</code> property).</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> </dl>  <h3 id=\"recursive-directories\">Recursive Directories</h3> <p>The <strong>remote_directory</strong> resource can be used to recursively create the path outside of remote directory structures, but the permissions of those outside paths are not managed. This is because the <code class=\"docutils literal\">recursive</code> attribute only applies <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">mode</code>, and <code class=\"docutils literal\">owner</code> attribute values to the remote directory itself and any inner directories the resource copies.</p> <p>A directory structure:</p> <pre class=\"highlight-python\" data-language=\"python\">/foo\n  /bar\n    /baz</pre> <p>The following example shows a way create a file in the <code class=\"docutils literal\">/baz</code> directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">remote_directory \"/foo/bar/baz\" do\n  owner 'root'\n  group 'root'\n  mode '0755'\n  action :create\nend</pre> <p>But with this example, the <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">mode</code>, and <code class=\"docutils literal\">owner</code> attribute values will only be applied to <code class=\"docutils literal\">/baz</code>. Which is fine, if that’s what you want. But most of the time, when the entire <code class=\"docutils literal\">/foo/bar/baz</code> directory structure is not there, you must be explicit about each directory. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">%w[ /foo /foo/bar /foo/bar/baz ].each do |path|\n  remote_directory path do\n    owner 'root'\n    group 'root'\n    mode '0755'\n  end\nend</pre> <p>This approach will create the correct hierarchy—<code class=\"docutils literal\">/foo</code>, then <code class=\"docutils literal\">/bar</code> in <code class=\"docutils literal\">/foo</code>, and then <code class=\"docutils literal\">/baz</code> in <code class=\"docutils literal\">/bar</code>—and also with the correct attribute values for <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">mode</code>, and <code class=\"docutils literal\">owner</code>.</p>  <h4 id=\"example\">Example</h4> <p>This section contains a more detailed example of how the chef-client manages recursive directory structures:</p> <ul class=\"simple\"> <li>A cookbook named <code class=\"docutils literal\">cumbria</code> that is used to build a website</li> <li>A subfolder in the <code class=\"docutils literal\">/files/default</code> directory named <code class=\"docutils literal\">/website</code>\n</li> <li>A file named <code class=\"docutils literal\">index.html</code>, which is the root page for the website</li> <li>Directories within <code class=\"docutils literal\">/website</code> named <code class=\"docutils literal\">/cities</code>, <code class=\"docutils literal\">/places</code>, and <code class=\"docutils literal\">/football</code>, which contains pages about cities, places, and football teams</li> <li>A directory named <code class=\"docutils literal\">/images</code>, which contains images</li> </ul> <p>These files are placed in the <code class=\"docutils literal\">/files/default</code> directory in the <code class=\"docutils literal\">cumbria</code> cookbook, like this:</p> <pre class=\"highlight-text\" data-language=\"text\">cumbria\n  /files\n    /default\n      /website\n        index.html\n        /cities\n          carisle.html\n          kendal.html\n          penrith.html\n          windermere.html\n        /football\n          carisle_united.html\n        /images\n          carisle_united.png\n          furness_abbey.png\n          hadrians_wall.png\n          kendal.png\n        /places\n          furness_abbey.html\n          hadrians_wall.html</pre> <p>The <strong>remote_directory</strong> resource can be used to build a website using these files. This website is being run on an Apache web server. The resource would be similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">remote_directory \"/var/www/html\" do\n  files_mode '0440'\n  files_owner 'yan'\n  mode '0770'\n  owner 'hamilton'\n  source \"website\"\nend</pre> <p>When the chef-client runs, the <strong>remote_directory</strong> resource will tell the chef-client to copy the directory tree from the cookbook to the file system using the structure defined in cookbook:</p> <pre class=\"highlight-text\" data-language=\"text\">/var\n  /www\n    /html\n      index.html\n      /cities\n        carisle.html\n        kendal.html\n        penrith.html\n        windermere.html\n      /football\n        carisle_united.html\n      /images\n        carisle_united.png\n        furness_abbey.png\n        hadrians_wall.png\n        kendal.png\n      /places\n        furness_abbey.html\n        hadrians_wall.html</pre> <p>The chef-client will manage the permissions of the entire directory structure below <code class=\"docutils literal\">/html</code>, for a total of 12 files and 4 directories. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">dr-xr-xr-x 2 root     root 4096 /var/www/html\ndr--r----- 1 yan      root 4096 /var/www/html/index.html\ndrwxrwx--- 2 hamilton root 4096 /var/www/html/cities\ndr--r----- 1 yan      root 4096 /var/www/html/cities/carlisle.html\ndr--r----- 1 yan      root 4096 /var/www/html/cities/kendal.html\ndr--r----- 1 yan      root 4096 /var/www/html/cities/penrith.html\ndr--r----- 1 yan      root 4096 /var/www/html/cities/windermere.html\ndrwxrwx--- 2 hamilton root 4096 /var/www/html/football\ndr--r----- 1 yan      root 4096 /var/www/html/football/carlisle_united.html\ndrwxrwx--- 2 hamilton root 4096 /var/www/html/images\ndr--r----- 1 yan      root 4096 /var/www/html/images/carlisle_united/png\ndr--r----- 1 yan      root 4096 /var/www/html/images/furness_abbey/png\ndr--r----- 1 yan      root 4096 /var/www/html/images/hadrians_wall.png\ndr--r----- 1 yan      root 4096 /var/www/html/images/kendal.png\ndrwxrwx--- 2 hamilton root 4096 /var/www/html/places\ndr--r----- 1 yan      root 4096 /var/www/html/places/furness_abbey.html\ndr--r----- 1 yan      root 4096 /var/www/html/places/hadrians_wall.html</pre>    <h3 id=\"windows-file-security\">Windows File Security</h3> <p>To support Microsoft Windows security, the <strong>template</strong>, <strong>file</strong>, <strong>remote_file</strong>, <strong>cookbook_file</strong>, <strong>directory</strong>, and <strong>remote_directory</strong> resources support the use of inheritance and access control lists (ACLs) within recipes.</p> <p><strong>Access Control Lists (ACLs)</strong></p> <p>The <code class=\"docutils literal\">rights</code> property can be used in a recipe to manage access control lists (ACLs), which allow permissions to be given to multiple users and groups. Use the <code class=\"docutils literal\">rights</code> property can be used as many times as necessary; the chef-client will apply them to the file or directory as required. The syntax for the <code class=\"docutils literal\">rights</code> property is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">rights permission, principal, option_type =&gt; value</pre> <p>where</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">permission</code></dt> <dd>\n<p class=\"first\">Use to specify which rights are granted to the <code class=\"docutils literal\">principal</code>. The possible values are: <code class=\"docutils literal\">:read</code>, <code class=\"docutils literal\">:write</code>, <code class=\"docutils literal\">read_execute</code>, <code class=\"docutils literal\">:modify</code>, and <code class=\"docutils literal\">:full_control</code>.</p> <p>These permissions are cumulative. If <code class=\"docutils literal\">:write</code> is specified, then it includes <code class=\"docutils literal\">:read</code>. If <code class=\"docutils literal\">:full_control</code> is specified, then it includes both <code class=\"docutils literal\">:write</code> and <code class=\"docutils literal\">:read</code>.</p> <p class=\"last\">(For those who know the Microsoft Windows API: <code class=\"docutils literal\">:read</code> corresponds to <code class=\"docutils literal\">GENERIC_READ</code>; <code class=\"docutils literal\">:write</code> corresponds to <code class=\"docutils literal\">GENERIC_WRITE</code>; <code class=\"docutils literal\">:read_execute</code> corresponds to <code class=\"docutils literal\">GENERIC_READ</code> and <code class=\"docutils literal\">GENERIC_EXECUTE</code>; <code class=\"docutils literal\">:modify</code> corresponds to <code class=\"docutils literal\">GENERIC_WRITE</code>, <code class=\"docutils literal\">GENERIC_READ</code>, <code class=\"docutils literal\">GENERIC_EXECUTE</code>, and <code class=\"docutils literal\">DELETE</code>; <code class=\"docutils literal\">:full_control</code> corresponds to <code class=\"docutils literal\">GENERIC_ALL</code>, which allows a user to change the owner and other metadata about a file.)</p> </dd> <dt><code class=\"docutils literal\">principal</code></dt> <dd>Use to specify a group or user name. This is identical to what is entered in the login box for Microsoft Windows, such as <code class=\"docutils literal\">user_name</code>, <code class=\"docutils literal\">domain\\user_name</code>, or <code class=\"docutils literal\">user_name@fully_qualified_domain_name</code>. The chef-client does not need to know if a principal is a user or a group.</dd> <dt><code class=\"docutils literal\">option_type</code></dt> <dd>\n<p class=\"first\">A hash that contains advanced rights options. For example, the rights to a directory that only applies to the first level of children might look something like: <code class=\"docutils literal\">rights :write, 'domain\\group_name', :one_level_deep =&gt; true</code>. Possible option types:</p> <table class=\"last docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option Type</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:applies_to_children</code></td> <td>Specify how permissions are applied to children. Possible values: <code class=\"docutils literal\">true</code> to inherit both child directories and files; <code class=\"docutils literal\">false</code> to not inherit any child directories or files; <code class=\"docutils literal\">:containers_only</code> to inherit only child directories (and not files); <code class=\"docutils literal\">:objects_only</code> to recursively inherit files (and not child directories).</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:applies_to_self</code></td> <td>Indicates whether a permission is applied to the parent directory. Possible values: <code class=\"docutils literal\">true</code> to apply to the parent directory or file and its children; <code class=\"docutils literal\">false</code> to not apply only to child directories and files.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:one_level_deep</code></td> <td>Indicates the depth to which permissions will be applied. Possible values: <code class=\"docutils literal\">true</code> to apply only to the first level of children; <code class=\"docutils literal\">false</code> to apply to all children.</td> </tr> </tbody> </table> </dd> </dl> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource 'x.txt' do\n  rights :read, 'Everyone'\n  rights :write, 'domain\\group'\n  rights :full_control, 'group_name_or_user_name'\n  rights :full_control, 'user_name', :applies_to_children =&gt; true\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">rights :read, ['Administrators','Everyone']\nrights :full_control, 'Users', :applies_to_children =&gt; true\nrights :write, 'Sally', :applies_to_children =&gt; :containers_only, :applies_to_self =&gt; false, :one_level_deep =&gt; true</pre> <p>Some other important things to know when using the <code class=\"docutils literal\">rights</code> attribute:</p> <ul class=\"simple\"> <li>Only inherited rights remain. All existing explicit rights on the object are removed and replaced.</li> <li>If rights are not specified, nothing will be changed. The chef-client does not clear out the rights on a file or directory if rights are not specified.</li> <li>Changing inherited rights can be expensive. Microsoft Windows will propagate rights to all children recursively due to inheritance. This is a normal aspect of Microsoft Windows, so consider the frequency with which this type of action is necessary and take steps to control this type of action if performance is the primary consideration.</li> </ul> <p>Use the <code class=\"docutils literal\">deny_rights</code> property to deny specific rights to specific users. The ordering is independent of using the <code class=\"docutils literal\">rights</code> property. For example, it doesn’t matter if rights are granted to everyone is placed before or after <code class=\"docutils literal\">deny_rights :read, ['Julian', 'Lewis']</code>, both Julian and Lewis will be unable to read the document. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource 'x.txt' do\n  rights :read, 'Everyone'\n  rights :write, 'domain\\group'\n  rights :full_control, 'group_name_or_user_name'\n  rights :full_control, 'user_name', :applies_to_children =&gt; true\n  deny_rights :read, ['Julian', 'Lewis']\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deny_rights :full_control, ['Sally']</pre> <p><strong>Inheritance</strong></p> <p>By default, a file or directory inherits rights from its parent directory. Most of the time this is the preferred behavior, but sometimes it may be necessary to take steps to more specifically control rights. The <code class=\"docutils literal\">inherits</code> property can be used to specifically tell the chef-client to apply (or not apply) inherited rights from its parent directory.</p> <p>For example, the following example specifies the rights for a directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor' do\n  rights :read, 'MORDOR\\Minions'\n  rights :full_control, 'MORDOR\\Sauron'\nend</pre> <p>and then the following example specifies how to use inheritance to deny access to the child directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor\\mount_doom' do\n  rights :full_control, 'MORDOR\\Sauron'\n  inherits false # Sauron is the only person who should have any sort of access\nend</pre> <p>If the <code class=\"docutils literal\">deny_rights</code> permission were to be used instead, something could slip through unless all users and groups were denied.</p> <p>Another example also shows how to specify rights for a directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor' do\n  rights :read, 'MORDOR\\Minions'\n  rights :full_control, 'MORDOR\\Sauron'\n  rights :write, 'SHIRE\\Frodo' # Who put that there I didn't put that there\nend</pre> <p>but then not use the <code class=\"docutils literal\">inherits</code> property to deny those rights on a child directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor\\mount_doom' do\n  deny_rights :read, 'MORDOR\\Minions' # Oops, not specific enough\nend</pre> <p>Because the <code class=\"docutils literal\">inherits</code> property is not specified, the chef-client will default it to <code class=\"docutils literal\">true</code>, which will ensure that security settings for existing files remain unchanged.</p>    <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Recursively transfer a directory from a remote location</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># create up to 10 backups of the files\n# set the files owner different from the directory\nremote_directory '/tmp/remote_something' do\n  source 'something'\n  files_backup 10\n  files_owner 'root'\n  files_group 'root'\n  files_mode '0644'\n  owner 'nobody'\n  group 'nobody'\n  mode '0755'\nend</pre> <p><strong>Use with the chef_handler lightweight resource</strong></p> <p>The following example shows how to use the <strong>remote_directory</strong> resource and the <strong>chef_handler</strong> resource to reboot a handler named <code class=\"docutils literal\">WindowsRebootHandler</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># the following code sample comes from the\n# ``reboot_handler`` recipe in the ``windows`` cookbook:\n# https://github.com/chef-cookbooks/windows\n\nremote_directory node['chef_handler']['handler_path'] do\n  source 'handlers'\n  recursive true\n  action :create\nend\n\nchef_handler 'WindowsRebootHandler' do\n  source \"#{node['chef_handler']['handler_path']}/windows_reboot_handler.rb\"\n  arguments node['windows']['allow_pending_reboots']\n  supports :report =&gt; true, :exception =&gt; false\n  action :enable\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_remote_directory.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_remote_directory.html</a>\n  </p>\n</div>\n","12-9/resource_ruby":"<h1 id=\"ruby\">ruby</h1> <p>Use the <strong>ruby</strong> resource to execute scripts using the Ruby interpreter. This resource may also use any of the actions and properties that are available to the <strong>execute</strong> resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <strong>ruby</strong> script resource (which is based on the <strong>script</strong> resource) is different from the <strong>ruby_block</strong> resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>ruby</strong> resource block executes scripts using Ruby:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ruby 'extract_module' do\n  cwd ::File.dirname(src_filepath)\n  code &lt;&lt;-EOH\n    mkdir -p #{extract_path}\n    tar xzf #{src_filename} -C #{extract_path}\n    mv #{extract_path}/*/* #{extract_path}/\n    EOH\n  not_if { ::File.exists?(extract_path) }\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">cwd</code> specifies the directory from which the command is run</li> <li>\n<code class=\"docutils literal\">code</code> specifies the command to run</li> </ul> <p>The full syntax for all of the properties that are available to the <strong>ruby</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ruby 'name' do\n  code                       String\n  creates                    String\n  cwd                        String\n  environment                Hash\n  flags                      String\n  group                      String, Integer\n  notifies                   # see description\n  path                       Array\n  provider                   Chef::Provider::Script::Ruby\n  returns                    Integer, Array\n  subscribes                 # see description\n  timeout                    Integer, Float\n  user                       String, Integer\n  umask                      String, Integer\n  action                     Symbol # defaults to :run if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">ruby</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">cwd</code> is the location from which the command is run</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">code</code>, <code class=\"docutils literal\">creates</code>, <code class=\"docutils literal\">cwd</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">flags</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">returns</code>, <code class=\"docutils literal\">timeout</code>, <code class=\"docutils literal\">user</code>, and <code class=\"docutils literal\">umask</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Prevent a command from running. This action is used to specify that a command is run only when another resource notifies it.</dd> <dt><code class=\"docutils literal\">:run</code></dt> <dd>Default. Run a script.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">code</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">A quoted (” ”) string of code to be executed.</p> </dd> <dt><code class=\"docutils literal\">creates</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Prevent a command from creating a file when that file already exists.</p> </dd> <dt><code class=\"docutils literal\">cwd</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The current working directory.</p> </dd> <dt><code class=\"docutils literal\">environment</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A Hash of environment variables in the form of <code class=\"docutils literal\">{\"ENV_VARIABLE\" =&gt; \"VALUE\"}</code>. (These variables must exist for a command to be run successfully.)</p> </dd> <dt><code class=\"docutils literal\">flags</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One or more command line flags that are passed to the interpreter when a command is invoked.</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The group name or group ID that must be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p>An array of paths to use when searching for a command. These paths are not added to the command’s environment $PATH. The default value uses the system path.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>The <code class=\"docutils literal\">path</code> property is not implemented by any provider in any version of the chef-client. Starting with chef-client 12, using the <code class=\"docutils literal\">path</code> property will return a warning. Starting with chef-client 13, the <code class=\"docutils literal\">path</code> property is deprecated and using it will return an exception. Cookbooks that currently use the <code class=\"docutils literal\">path</code> property should be updated to use the <code class=\"docutils literal\">environment</code> property instead.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">ruby 'mycommand' do\n  environment 'PATH' =&gt; \"/my/path/to/bin:#{ENV['PATH']}\"\nend</pre> </div> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">returns</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Array</p> <p class=\"last\">The return value for a command. This may be an array of accepted values. An exception is raised when the return value(s) do not match. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Float</p> <p class=\"last\">The amount of time (in seconds) a command is to wait before timing out. Default value: <code class=\"docutils literal\">3600</code>.</p> </dd> <dt><code class=\"docutils literal\">user</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The user name or user ID that should be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">umask</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The file mode creation mask, or umask.</p> </dd> </dl>  <h3 id=\"guards\">Guards</h3> <p>A guard property can be used to evaluate the state of a node during the execution phase of the chef-client run. Based on the results of this evaluation, a guard property is then used to tell the chef-client if it should continue executing a resource. A guard property accepts either a string value or a Ruby block value:</p> <ul class=\"simple\"> <li>A string is executed as a shell command. If the command returns <code class=\"docutils literal\">0</code>, the guard is applied. If the command returns any other value, then the guard property is not applied. String guards in a <strong>powershell_script</strong> run Windows PowerShell commands and may return <code class=\"docutils literal\">true</code> in addition to <code class=\"docutils literal\">0</code>.</li> <li>A block is executed as Ruby code that must return either <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. If the block returns <code class=\"docutils literal\">true</code>, the guard property is applied. If the block returns <code class=\"docutils literal\">false</code>, the guard property is not applied.</li> </ul> <p>A guard property is useful for ensuring that a resource is idempotent by allowing that resource to test for the desired state as it is being executed, and then if the desired state is present, for the chef-client to do nothing.</p> <p><strong>Attributes</strong></p> <p>The following properties can be used to define a guard that is evaluated during the execution phase of the chef-client run:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">not_if</code></dt> <dd>Prevent a resource from executing when the condition returns <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">only_if</code></dt> <dd>Allow a resource to execute only if the condition returns <code class=\"docutils literal\">true</code>.</dd> </dl> <p><strong>Arguments</strong></p> <p>The following arguments can be used with the <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code> guard properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:user</code></dt> <dd>\n<p class=\"first\">Specify the user that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :user =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:group</code></dt> <dd>\n<p class=\"first\">Specify the group that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :group =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:environment</code></dt> <dd>\n<p class=\"first\">Specify a Hash of environment variables to be set. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :environment =&gt; {\n  'HOME' =&gt; '/home/adam'\n}</pre> </dd> <dt><code class=\"docutils literal\">:cwd</code></dt> <dd>\n<p class=\"first\">Set the current working directory before running a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam passwd', :cwd =&gt; '/etc'</pre> </dd> <dt><code class=\"docutils literal\">:timeout</code></dt> <dd>\n<p class=\"first\">Set a timeout for a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'sleep 10000', :timeout =&gt; 10</pre> </dd> </dl>    <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script</code>, <code class=\"docutils literal\">script</code>\n</dt> <dd>When this short name is used, the chef-client will determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script::Ruby</code>, <code class=\"docutils literal\">ruby</code>\n</dt> <dd>The provider for the Ruby command interpreter.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>None.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_ruby.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_ruby.html</a>\n  </p>\n</div>\n","12-9/resource_ruby_block":"<h1 id=\"ruby-block\">ruby_block</h1> <p>Use the <strong>ruby_block</strong> resource to execute Ruby code during a chef-client run. Ruby code in the <code class=\"docutils literal\">ruby_block</code> resource is evaluated with other resources during convergence, whereas Ruby code outside of a <code class=\"docutils literal\">ruby_block</code> resource is evaluated before other resources, as the recipe is compiled.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>ruby_block</strong> resource block executes a block of arbitrary Ruby code. For example, to reload the client.rb file during the chef-client run:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ruby_block 'reload_client_config' do\n  block do\n    Chef::Config.from_file(\"/etc/chef/client.rb\")\n  end\n  action :run\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>ruby_block</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ruby_block 'name' do\n  block                      Block\n  block_name                 String # defaults to 'name' if not specified\n  notifies                   # see description\n  provider                   Chef::Provider::RubyBlock\n  subscribes                 # see description\n  action                     Symbol # defaults to :run if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">ruby_block</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">block</code> is the block of Ruby code to be executed</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">block</code>, <code class=\"docutils literal\">block_name</code>, and <code class=\"docutils literal\">provider</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:create</code></dt> <dd>The same as <code class=\"docutils literal\">:run</code>.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:run</code></dt> <dd>Default. Run a Ruby block.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">block</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Block</p> <p class=\"last\">A block of Ruby code.</p> </dd> <dt><code class=\"docutils literal\">block_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The name of the Ruby block. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Re-read configuration data</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ruby_block 'reload_client_config' do\n  block do\n    Chef::Config.from_file('/etc/chef/client.rb')\n  end\n  action :run\nend</pre> <p><strong>Install repositories from a file, trigger a command, and force the internal cache to reload</strong></p> <p>The following example shows how to install new Yum repositories from a file, where the installation of the repository triggers a creation of the Yum cache that forces the internal cache for the chef-client to reload:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'create-yum-cache' do\n command 'yum -q makecache'\n action :nothing\nend\n\nruby_block 'reload-internal-yum-cache' do\n  block do\n    Chef::Provider::Package::Yum::YumCache.instance.reload\n  end\n  action :nothing\nend\n\ncookbook_file '/etc/yum.repos.d/custom.repo' do\n  source 'custom'\n  mode '0755'\n  notifies :run, 'execute[create-yum-cache]', :immediately\n  notifies :create, 'ruby_block[reload-internal-yum-cache]', :immediately\nend</pre> <p><strong>Use an if statement with the platform recipe DSL method</strong></p> <p>The following example shows how an if statement can be used with the <code class=\"docutils literal\">platform?</code> method in the Recipe DSL to run code specific to Microsoft Windows. The code is defined using the <strong>ruby_block</strong> resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># the following code sample comes from the ``client`` recipe\n# in the following cookbook: https://github.com/chef-cookbooks/mysql\n\nif platform?('windows')\n  ruby_block 'copy libmysql.dll into ruby path' do\n    block do\n      require 'fileutils'\n      FileUtils.cp \"#{node['mysql']['client']['lib_dir']}\\\\libmysql.dll\",\n        node['mysql']['client']['ruby_dir']\n    end\n    not_if { File.exist?(\"#{node['mysql']['client']['ruby_dir']}\\\\libmysql.dll\") }\n  end\nend</pre> <p><strong>Stash a file in a data bag</strong></p> <p>The following example shows how to use the <strong>ruby_block</strong> resource to stash a BitTorrent file in a data bag so that it can be distributed to nodes in the organization.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># the following code sample comes from the ``seed`` recipe\n# in the following cookbook: https://github.com/mattray/bittorrent-cookbook\n\nruby_block 'share the torrent file' do\n  block do\n    f = File.open(node['bittorrent']['torrent'],'rb')\n    #read the .torrent file and base64 encode it\n    enc = Base64.encode64(f.read)\n    data = {\n      'id'=&gt;bittorrent_item_id(node['bittorrent']['file']),\n      'seed'=&gt;node.ipaddress,\n      'torrent'=&gt;enc\n    }\n    item = Chef::DataBagItem.new\n    item.data_bag('bittorrent')\n    item.raw_data = data\n    item.save\n  end\n  action :nothing\n  subscribes :create, \"bittorrent_torrent[#{node['bittorrent']['torrent']}]\", :immediately\nend</pre> <p><strong>Update the /etc/hosts file</strong></p> <p>The following example shows how the <strong>ruby_block</strong> resource can be used to update the <code class=\"docutils literal\">/etc/hosts</code> file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># the following code sample comes from the ``ec2`` recipe\n# in the following cookbook: https://github.com/chef-cookbooks/dynect\n\nruby_block 'edit etc hosts' do\n  block do\n    rc = Chef::Util::FileEdit.new('/etc/hosts')\n    rc.search_file_replace_line(/^127\\.0\\.0\\.1 localhost$/,\n       '127.0.0.1 #{new_fqdn} #{new_hostname} localhost')\n    rc.write_file\n  end\nend</pre> <p><strong>Set environment variables</strong></p> <p>The following example shows how to use variables within a Ruby block to set environment variables using rbenv.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.set[:rbenv][:root] = rbenv_root\nnode.set[:ruby_build][:bin_path] = rbenv_binary_path\n\nruby_block 'initialize' do\n  block do\n    ENV['RBENV_ROOT'] = node[:rbenv][:root]\n    ENV['PATH'] = \"#{node[:rbenv][:root]}/bin:#{node[:ruby_build][:bin_path]}:#{ENV['PATH']}\"\n  end\nend</pre> <p><strong>Set JAVA_HOME</strong></p> <p>The following example shows how to use a variable within a Ruby block to set the <code class=\"docutils literal\">java_home</code> environment variable:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ruby_block 'set-env-java-home' do\n  block do\n    ENV['JAVA_HOME'] = java_home\n  end\nend</pre> <p><strong>Reload the configuration</strong></p> <p>The following example shows how to reload the configuration of a chef-client using the <strong>remote_file</strong> resource to:</p> <ul class=\"simple\"> <li>using an if statement to check whether the plugins on a node are the latest versions</li> <li>identify the location from which Ohai plugins are stored</li> <li>using the <code class=\"docutils literal\">notifies</code> property and a <strong>ruby_block</strong> resource to trigger an update (if required) and to then reload the client.rb file.</li> </ul> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'node[:ohai][:plugin_path]' do\n  owner 'chef'\n  recursive true\nend\n\nruby_block 'reload_config' do\n  block do\n    Chef::Config.from_file('/etc/chef/client.rb')\n  end\n  action :nothing\nend\n\nif node[:ohai].key?(:plugins)\n  node[:ohai][:plugins].each do |plugin|\n    remote_file node[:ohai][:plugin_path] +\"/#{plugin}\" do\n      source plugin\n      owner 'chef'\n              notifies :run, 'ruby_block[reload_config]', :immediately\n    end\n  end\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_ruby_block.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_ruby_block.html</a>\n  </p>\n</div>\n","12-9/resource_smartos_package":"<h1 id=\"smartos-package\">smartos_package</h1> <p>Use the <strong>smartos_package</strong> resource to manage packages for the SmartOS platform.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>smartos_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>smartos_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">smartos_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>smartos_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">smartos_package 'name' do\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::Smartos\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">smartos_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> <dt><code class=\"docutils literal\">:upgrade</code></dt> <dd>Install a package and/or ensure that a package is the latest version.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The path to a package in the local file system.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Smartos</code>, <code class=\"docutils literal\">smartos_package</code>\n</dt> <dd>The provider for the SmartOS platform.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">smartos_package 'name of package' do\n  action :install\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_smartos_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_smartos_package.html</a>\n  </p>\n</div>\n","12-9/resource_registry_key":"<h1 id=\"registry-key\">registry_key</h1> <p>Use the <strong>registry_key</strong> resource to create and delete registry keys in Microsoft Windows.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>64-bit versions of Microsoft Windows have a 32-bit compatibility layer in the registry that reflects and redirects certain keys (and their values) into specific locations (or logical views) of the registry hive.</p> <p>The chef-client can access any reflected or redirected registry key. The machine architecture of the system on which the chef-client is running is used as the default (non-redirected) location. Access to the <code class=\"docutils literal\">SysWow64</code> location is redirected must be specified. Typically, this is only necessary to ensure compatibility with 32-bit applications that are running on a 64-bit operating system.</p> <p>32-bit versions of the chef-client (12.8 and earlier) and 64-bit versions of the chef-client (12.9 and later) generally behave the same in this situation, with one exception: it is only possible to read and write from a redirected registry location using chef-client version 12.9 (and later).</p> <p class=\"last\">For more information, see: <a class=\"reference external\" href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/aa384235(v=vs.85).aspx\">http://msdn.microsoft.com/en-us/library/windows/desktop/aa384235(v=vs.85).aspx</a>.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>registry_key</strong> resource block creates and deletes registry keys in Microsoft Windows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_key \"HKEY_LOCAL_MACHINE\\\\...\\\\System\" do\n  values [{\n    :name =&gt; \"NewRegistryKeyValue\",\n    :type =&gt; :multi_string,\n    :data =&gt; ['foo\\0bar\\0\\0']\n  }]\n  action :create\nend</pre> <p>Use multiple registry key entries with key values that are based on node attributes:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_key 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\name_of_registry_key' do\n  values [{:name =&gt; 'key_name', :type =&gt; :string, :data =&gt; 'C:\\Windows\\System32\\file_name.bmp'},\n          {:name =&gt; 'key_name', :type =&gt; :string, :data =&gt; node['node_name']['attribute']['value']},\n          {:name =&gt; 'key_name', :type =&gt; :string, :data =&gt; node['node_name']['attribute']['value']}\n         ]\n  action :create\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>registry_key</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_key 'name' do\n  architecture               Symbol\n  key                        String # defaults to 'name' if not specified\n  notifies                   # see description\n  provider                   Chef::Provider::Windows::Registry\n  recursive                  TrueClass, FalseClass\n  subscribes                 # see description\n  values                     Hash, Array\n  action                     Symbol # defaults to :create if not specified\nend</pre> <p>where</p> <ul> <li>\n<p class=\"first\"><code class=\"docutils literal\">registry_key</code> is the resource</p> </li> <li>\n<p class=\"first\"><code class=\"docutils literal\">name</code> is the name of the resource block</p> </li> <li>\n<p class=\"first\"><code class=\"docutils literal\">values</code> is a hash that contains at least one registry key to be created or deleted. Each registry key in the hash is grouped by brackets in which the <code class=\"docutils literal\">:name</code>, <code class=\"docutils literal\">:type</code>, and <code class=\"docutils literal\">:data</code> values for that registry key are specified.</p> </li> <li>\n<p class=\"first\"><code class=\"docutils literal\">:type</code> represents the values available for registry keys in Microsoft Windows. Use <code class=\"docutils literal\">:binary</code> for REG_BINARY, <code class=\"docutils literal\">:string</code> for REG_SZ, <code class=\"docutils literal\">:multi_string</code> for REG_MULTI_SZ, <code class=\"docutils literal\">:expand_string</code> for REG_EXPAND_SZ, <code class=\"docutils literal\">:dword</code> for REG_DWORD, <code class=\"docutils literal\">:dword_big_endian</code> for REG_DWORD_BIG_ENDIAN, or <code class=\"docutils literal\">:qword</code> for REG_QWORD.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\"><code class=\"docutils literal\">:multi_string</code> must be an array, even if there is only a single string.</p> </div> </li> <li>\n<p class=\"first\"><code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</p> </li> <li>\n<p class=\"first\"><code class=\"docutils literal\">architecture</code>, <code class=\"docutils literal\">key</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">recursive</code> and <code class=\"docutils literal\">values</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</p> </li> </ul>  <h3 id=\"registry-key-path-separators\">Registry Key Path Separators</h3> <p>A Microsoft Windows registry key can be used as a string in Ruby code, such as when a registry key is used as the name of a recipe. In Ruby, when a registry key is enclosed in a double-quoted string (<code class=\"docutils literal\">\" \"</code>), the same backslash character (<code class=\"docutils literal\">\\</code>) that is used to define the registry key path separator is also used in Ruby to define an escape character. Therefore, the registry key path separators must be escaped when they are enclosed in a double-quoted string. For example, the following registry key:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\CurrentVersion\\Themes</pre> <p>may be encloused in a single-quoted string with a single backslash:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">'HKCU\\SOFTWARE\\path\\to\\key\\Themes'</pre> <p>or may be enclosed in a double-quoted string with an extra backslash as an escape character:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">\"HKCU\\\\SOFTWARE\\\\path\\\\to\\\\key\\\\Themes\"</pre>   <h3 id=\"recipe-dsl-methods\">Recipe DSL Methods</h3> <p>Six methods are present in the Recipe DSL to help verify the registry during a chef-client run on the Microsoft Windows platform—<code class=\"docutils literal\">registry_data_exists?</code>, <code class=\"docutils literal\">registry_get_subkeys</code>, <code class=\"docutils literal\">registry_get_values</code>, <code class=\"docutils literal\">registry_has_subkeys?</code>, <code class=\"docutils literal\">registry_key_exists?</code>, and <code class=\"docutils literal\">registry_value_exists?</code>—these helpers ensure the <strong>powershell_script</strong> resource is idempotent.</p> <p>The recommended order in which registry key-specific methods should be used within a recipe is: <code class=\"docutils literal\">key_exists?</code>, <code class=\"docutils literal\">value_exists?</code>, <code class=\"docutils literal\">data_exists?</code>, <code class=\"docutils literal\">get_values</code>, <code class=\"docutils literal\">has_subkeys?</code>, and then <code class=\"docutils literal\">get_subkeys</code>.</p>  <h4 id=\"registry-data-exists\">registry_data_exists?</h4> <p>Use the <code class=\"docutils literal\">registry_data_exists?</code> method to find out if a Microsoft Windows registry key contains the specified data of the specified type under the value.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method can be used in recipes and from within the <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> blocks in resources. This method is not designed to create or modify a registry key. If a registry key needs to be modified, use the <strong>registry_key</strong> resource.</p> </div> <p>The syntax for the <code class=\"docutils literal\">registry_data_exists?</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_data_exists?(\n  KEY_PATH,\n  { :name =&gt; 'NAME', :type =&gt; TYPE, :data =&gt; DATA },\n  ARCHITECTURE\n)</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">KEY_PATH</code> is the path to the registry key value. The path must include the registry hive, which can be specified either as its full name or as the 3- or 4-letter abbreviation. For example, both <code class=\"docutils literal\">HKLM\\SECURITY</code> and <code class=\"docutils literal\">HKEY_LOCAL_MACHINE\\SECURITY</code> are both valid and equivalent. The following hives are valid: <code class=\"docutils literal\">HKEY_LOCAL_MACHINE</code>, <code class=\"docutils literal\">HKLM</code>, <code class=\"docutils literal\">HKEY_CURRENT_CONFIG</code>, <code class=\"docutils literal\">HKCC</code>, <code class=\"docutils literal\">HKEY_CLASSES_ROOT</code>, <code class=\"docutils literal\">HKCR</code>, <code class=\"docutils literal\">HKEY_USERS</code>, <code class=\"docutils literal\">HKU</code>, <code class=\"docutils literal\">HKEY_CURRENT_USER</code>, and <code class=\"docutils literal\">HKCU</code>.</li> <li>\n<code class=\"docutils literal\">{ :name =&gt; 'NAME', :type =&gt; TYPE, :data =&gt; DATA }</code> is a hash that contains the expected name, type, and data of the registry key value</li> <li>\n<code class=\"docutils literal\">:type</code> represents the values available for registry keys in Microsoft Windows. Use <code class=\"docutils literal\">:binary</code> for REG_BINARY, <code class=\"docutils literal\">:string</code> for REG_SZ, <code class=\"docutils literal\">:multi_string</code> for REG_MULTI_SZ, <code class=\"docutils literal\">:expand_string</code> for REG_EXPAND_SZ, <code class=\"docutils literal\">:dword</code> for REG_DWORD, <code class=\"docutils literal\">:dword_big_endian</code> for REG_DWORD_BIG_ENDIAN, or <code class=\"docutils literal\">:qword</code> for REG_QWORD.</li> <li>\n<code class=\"docutils literal\">ARCHITECTURE</code> is one of the following values: <code class=\"docutils literal\">:x86_64</code>, <code class=\"docutils literal\">:i386</code>, or <code class=\"docutils literal\">:machine</code>. In order to read or write 32-bit registry keys on 64-bit machines running Microsoft Windows, the <code class=\"docutils literal\">architecture</code> property must be set to <code class=\"docutils literal\">:i386</code>. The <code class=\"docutils literal\">:x86_64</code> value can be used to force writing to a 64-bit registry location, but this value is less useful than the default (<code class=\"docutils literal\">:machine</code>) because the chef-client returns an exception if <code class=\"docutils literal\">:x86_64</code> is used and the machine turns out to be a 32-bit machine (whereas with <code class=\"docutils literal\">:machine</code>, the chef-client is able to access the registry key on the 32-bit machine).</li> </ul> <p>This method will return <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">ARCHITECTURE</code> attribute should only specify <code class=\"docutils literal\">:x86_64</code> or <code class=\"docutils literal\">:i386</code> when it is necessary to write 32-bit (<code class=\"docutils literal\">:i386</code>) or 64-bit (<code class=\"docutils literal\">:x86_64</code>) values on a 64-bit machine. <code class=\"docutils literal\">ARCHITECTURE</code> will default to <code class=\"docutils literal\">:machine</code> unless a specific value is given.</p> </div>   <h4 id=\"registry-get-subkeys\">registry_get_subkeys</h4> <p>Use the <code class=\"docutils literal\">registry_get_subkeys</code> method to get a list of registry key values that are present for a Microsoft Windows registry key.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method can be used in recipes and from within the <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> blocks in resources. This method is not designed to create or modify a registry key. If a registry key needs to be modified, use the <strong>registry_key</strong> resource.</p> </div> <p>The syntax for the <code class=\"docutils literal\">registry_get_subkeys</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">subkey_array = registry_get_subkeys(KEY_PATH, ARCHITECTURE)</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">KEY_PATH</code> is the path to the registry key. The path must include the registry hive, which can be specified either as its full name or as the 3- or 4-letter abbreviation. For example, both <code class=\"docutils literal\">HKLM\\SECURITY</code> and <code class=\"docutils literal\">HKEY_LOCAL_MACHINE\\SECURITY</code> are both valid and equivalent. The following hives are valid: <code class=\"docutils literal\">HKEY_LOCAL_MACHINE</code>, <code class=\"docutils literal\">HKLM</code>, <code class=\"docutils literal\">HKEY_CURRENT_CONFIG</code>, <code class=\"docutils literal\">HKCC</code>, <code class=\"docutils literal\">HKEY_CLASSES_ROOT</code>, <code class=\"docutils literal\">HKCR</code>, <code class=\"docutils literal\">HKEY_USERS</code>, <code class=\"docutils literal\">HKU</code>, <code class=\"docutils literal\">HKEY_CURRENT_USER</code>, and <code class=\"docutils literal\">HKCU</code>.</li> <li>\n<code class=\"docutils literal\">ARCHITECTURE</code> is one of the following values: <code class=\"docutils literal\">:x86_64</code>, <code class=\"docutils literal\">:i386</code>, or <code class=\"docutils literal\">:machine</code>. In order to read or write 32-bit registry keys on 64-bit machines running Microsoft Windows, the <code class=\"docutils literal\">architecture</code> property must be set to <code class=\"docutils literal\">:i386</code>. The <code class=\"docutils literal\">:x86_64</code> value can be used to force writing to a 64-bit registry location, but this value is less useful than the default (<code class=\"docutils literal\">:machine</code>) because the chef-client returns an exception if <code class=\"docutils literal\">:x86_64</code> is used and the machine turns out to be a 32-bit machine (whereas with <code class=\"docutils literal\">:machine</code>, the chef-client is able to access the registry key on the 32-bit machine).</li> </ul> <p>This returns an array of registry key values.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">ARCHITECTURE</code> attribute should only specify <code class=\"docutils literal\">:x86_64</code> or <code class=\"docutils literal\">:i386</code> when it is necessary to write 32-bit (<code class=\"docutils literal\">:i386</code>) or 64-bit (<code class=\"docutils literal\">:x86_64</code>) values on a 64-bit machine. <code class=\"docutils literal\">ARCHITECTURE</code> will default to <code class=\"docutils literal\">:machine</code> unless a specific value is given.</p> </div>   <h4 id=\"registry-get-values\">registry_get_values</h4> <p>Use the <code class=\"docutils literal\">registry_get_values</code> method to get the registry key values (name, type, and data) for a Microsoft Windows registry key.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method can be used in recipes and from within the <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> blocks in resources. This method is not designed to create or modify a registry key. If a registry key needs to be modified, use the <strong>registry_key</strong> resource.</p> </div> <p>The syntax for the <code class=\"docutils literal\">registry_get_values</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">subkey_array = registry_get_values(KEY_PATH, ARCHITECTURE)</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">KEY_PATH</code> is the path to the registry key. The path must include the registry hive, which can be specified either as its full name or as the 3- or 4-letter abbreviation. For example, both <code class=\"docutils literal\">HKLM\\SECURITY</code> and <code class=\"docutils literal\">HKEY_LOCAL_MACHINE\\SECURITY</code> are both valid and equivalent. The following hives are valid: <code class=\"docutils literal\">HKEY_LOCAL_MACHINE</code>, <code class=\"docutils literal\">HKLM</code>, <code class=\"docutils literal\">HKEY_CURRENT_CONFIG</code>, <code class=\"docutils literal\">HKCC</code>, <code class=\"docutils literal\">HKEY_CLASSES_ROOT</code>, <code class=\"docutils literal\">HKCR</code>, <code class=\"docutils literal\">HKEY_USERS</code>, <code class=\"docutils literal\">HKU</code>, <code class=\"docutils literal\">HKEY_CURRENT_USER</code>, and <code class=\"docutils literal\">HKCU</code>.</li> <li>\n<code class=\"docutils literal\">ARCHITECTURE</code> is one of the following values: <code class=\"docutils literal\">:x86_64</code>, <code class=\"docutils literal\">:i386</code>, or <code class=\"docutils literal\">:machine</code>. In order to read or write 32-bit registry keys on 64-bit machines running Microsoft Windows, the <code class=\"docutils literal\">architecture</code> property must be set to <code class=\"docutils literal\">:i386</code>. The <code class=\"docutils literal\">:x86_64</code> value can be used to force writing to a 64-bit registry location, but this value is less useful than the default (<code class=\"docutils literal\">:machine</code>) because the chef-client returns an exception if <code class=\"docutils literal\">:x86_64</code> is used and the machine turns out to be a 32-bit machine (whereas with <code class=\"docutils literal\">:machine</code>, the chef-client is able to access the registry key on the 32-bit machine).</li> </ul> <p>This returns an array of registry key values.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">ARCHITECTURE</code> attribute should only specify <code class=\"docutils literal\">:x86_64</code> or <code class=\"docutils literal\">:i386</code> when it is necessary to write 32-bit (<code class=\"docutils literal\">:i386</code>) or 64-bit (<code class=\"docutils literal\">:x86_64</code>) values on a 64-bit machine. <code class=\"docutils literal\">ARCHITECTURE</code> will default to <code class=\"docutils literal\">:machine</code> unless a specific value is given.</p> </div>   <h4 id=\"registry-has-subkeys\">registry_has_subkeys?</h4> <p>Use the <code class=\"docutils literal\">registry_has_subkeys?</code> method to find out if a Microsoft Windows registry key has one (or more) values.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method can be used in recipes and from within the <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> blocks in resources. This method is not designed to create or modify a registry key. If a registry key needs to be modified, use the <strong>registry_key</strong> resource.</p> </div> <p>The syntax for the <code class=\"docutils literal\">registry_has_subkeys?</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_has_subkeys?(KEY_PATH, ARCHITECTURE)</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">KEY_PATH</code> is the path to the registry key. The path must include the registry hive, which can be specified either as its full name or as the 3- or 4-letter abbreviation. For example, both <code class=\"docutils literal\">HKLM\\SECURITY</code> and <code class=\"docutils literal\">HKEY_LOCAL_MACHINE\\SECURITY</code> are both valid and equivalent. The following hives are valid: <code class=\"docutils literal\">HKEY_LOCAL_MACHINE</code>, <code class=\"docutils literal\">HKLM</code>, <code class=\"docutils literal\">HKEY_CURRENT_CONFIG</code>, <code class=\"docutils literal\">HKCC</code>, <code class=\"docutils literal\">HKEY_CLASSES_ROOT</code>, <code class=\"docutils literal\">HKCR</code>, <code class=\"docutils literal\">HKEY_USERS</code>, <code class=\"docutils literal\">HKU</code>, <code class=\"docutils literal\">HKEY_CURRENT_USER</code>, and <code class=\"docutils literal\">HKCU</code>.</li> <li>\n<code class=\"docutils literal\">ARCHITECTURE</code> is one of the following values: <code class=\"docutils literal\">:x86_64</code>, <code class=\"docutils literal\">:i386</code>, or <code class=\"docutils literal\">:machine</code>. In order to read or write 32-bit registry keys on 64-bit machines running Microsoft Windows, the <code class=\"docutils literal\">architecture</code> property must be set to <code class=\"docutils literal\">:i386</code>. The <code class=\"docutils literal\">:x86_64</code> value can be used to force writing to a 64-bit registry location, but this value is less useful than the default (<code class=\"docutils literal\">:machine</code>) because the chef-client returns an exception if <code class=\"docutils literal\">:x86_64</code> is used and the machine turns out to be a 32-bit machine (whereas with <code class=\"docutils literal\">:machine</code>, the chef-client is able to access the registry key on the 32-bit machine).</li> </ul> <p>This method will return <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">ARCHITECTURE</code> attribute should only specify <code class=\"docutils literal\">:x86_64</code> or <code class=\"docutils literal\">:i386</code> when it is necessary to write 32-bit (<code class=\"docutils literal\">:i386</code>) or 64-bit (<code class=\"docutils literal\">:x86_64</code>) values on a 64-bit machine. <code class=\"docutils literal\">ARCHITECTURE</code> will default to <code class=\"docutils literal\">:machine</code> unless a specific value is given.</p> </div>   <h4 id=\"registry-key-exists\">registry_key_exists?</h4> <p>Use the <code class=\"docutils literal\">registry_key_exists?</code> method to find out if a Microsoft Windows registry key exists at the specified path.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method can be used in recipes and from within the <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> blocks in resources. This method is not designed to create or modify a registry key. If a registry key needs to be modified, use the <strong>registry_key</strong> resource.</p> </div> <p>The syntax for the <code class=\"docutils literal\">registry_key_exists?</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_key_exists?(KEY_PATH, ARCHITECTURE)</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">KEY_PATH</code> is the path to the registry key. The path must include the registry hive, which can be specified either as its full name or as the 3- or 4-letter abbreviation. For example, both <code class=\"docutils literal\">HKLM\\SECURITY</code> and <code class=\"docutils literal\">HKEY_LOCAL_MACHINE\\SECURITY</code> are both valid and equivalent. The following hives are valid: <code class=\"docutils literal\">HKEY_LOCAL_MACHINE</code>, <code class=\"docutils literal\">HKLM</code>, <code class=\"docutils literal\">HKEY_CURRENT_CONFIG</code>, <code class=\"docutils literal\">HKCC</code>, <code class=\"docutils literal\">HKEY_CLASSES_ROOT</code>, <code class=\"docutils literal\">HKCR</code>, <code class=\"docutils literal\">HKEY_USERS</code>, <code class=\"docutils literal\">HKU</code>, <code class=\"docutils literal\">HKEY_CURRENT_USER</code>, and <code class=\"docutils literal\">HKCU</code>.</li> <li>\n<code class=\"docutils literal\">ARCHITECTURE</code> is one of the following values: <code class=\"docutils literal\">:x86_64</code>, <code class=\"docutils literal\">:i386</code>, or <code class=\"docutils literal\">:machine</code>. In order to read or write 32-bit registry keys on 64-bit machines running Microsoft Windows, the <code class=\"docutils literal\">architecture</code> property must be set to <code class=\"docutils literal\">:i386</code>. The <code class=\"docutils literal\">:x86_64</code> value can be used to force writing to a 64-bit registry location, but this value is less useful than the default (<code class=\"docutils literal\">:machine</code>) because the chef-client returns an exception if <code class=\"docutils literal\">:x86_64</code> is used and the machine turns out to be a 32-bit machine (whereas with <code class=\"docutils literal\">:machine</code>, the chef-client is able to access the registry key on the 32-bit machine).</li> </ul> <p>This method will return <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. (Any registry key values that are associated with this registry key are ignored.)</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">ARCHITECTURE</code> attribute should only specify <code class=\"docutils literal\">:x86_64</code> or <code class=\"docutils literal\">:i386</code> when it is necessary to write 32-bit (<code class=\"docutils literal\">:i386</code>) or 64-bit (<code class=\"docutils literal\">:x86_64</code>) values on a 64-bit machine. <code class=\"docutils literal\">ARCHITECTURE</code> will default to <code class=\"docutils literal\">:machine</code> unless a specific value is given.</p> </div>   <h4 id=\"registry-value-exists\">registry_value_exists?</h4> <p>Use the <code class=\"docutils literal\">registry_value_exists?</code> method to find out if a registry key value exists. Use <code class=\"docutils literal\">registry_data_exists?</code> to test for the type and data of a registry key value.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method can be used in recipes and from within the <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> blocks in resources. This method is not designed to create or modify a registry key. If a registry key needs to be modified, use the <strong>registry_key</strong> resource.</p> </div> <p>The syntax for the <code class=\"docutils literal\">registry_value_exists?</code> method is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_value_exists?(\n  KEY_PATH,\n  { :name =&gt; 'NAME' },\n  ARCHITECTURE\n)</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">KEY_PATH</code> is the path to the registry key. The path must include the registry hive, which can be specified either as its full name or as the 3- or 4-letter abbreviation. For example, both <code class=\"docutils literal\">HKLM\\SECURITY</code> and <code class=\"docutils literal\">HKEY_LOCAL_MACHINE\\SECURITY</code> are both valid and equivalent. The following hives are valid: <code class=\"docutils literal\">HKEY_LOCAL_MACHINE</code>, <code class=\"docutils literal\">HKLM</code>, <code class=\"docutils literal\">HKEY_CURRENT_CONFIG</code>, <code class=\"docutils literal\">HKCC</code>, <code class=\"docutils literal\">HKEY_CLASSES_ROOT</code>, <code class=\"docutils literal\">HKCR</code>, <code class=\"docutils literal\">HKEY_USERS</code>, <code class=\"docutils literal\">HKU</code>, <code class=\"docutils literal\">HKEY_CURRENT_USER</code>, and <code class=\"docutils literal\">HKCU</code>.</li> <li>\n<code class=\"docutils literal\">{ :name =&gt; 'NAME' }</code> is a hash that contains the name of the registry key value; if either <code class=\"docutils literal\">:type</code> or <code class=\"docutils literal\">:value</code> are specified in the hash, they are ignored</li> <li>\n<code class=\"docutils literal\">:type</code> represents the values available for registry keys in Microsoft Windows. Use <code class=\"docutils literal\">:binary</code> for REG_BINARY, <code class=\"docutils literal\">:string</code> for REG_SZ, <code class=\"docutils literal\">:multi_string</code> for REG_MULTI_SZ, <code class=\"docutils literal\">:expand_string</code> for REG_EXPAND_SZ, <code class=\"docutils literal\">:dword</code> for REG_DWORD, <code class=\"docutils literal\">:dword_big_endian</code> for REG_DWORD_BIG_ENDIAN, or <code class=\"docutils literal\">:qword</code> for REG_QWORD.</li> <li>\n<code class=\"docutils literal\">ARCHITECTURE</code> is one of the following values: <code class=\"docutils literal\">:x86_64</code>, <code class=\"docutils literal\">:i386</code>, or <code class=\"docutils literal\">:machine</code>. In order to read or write 32-bit registry keys on 64-bit machines running Microsoft Windows, the <code class=\"docutils literal\">architecture</code> property must be set to <code class=\"docutils literal\">:i386</code>. The <code class=\"docutils literal\">:x86_64</code> value can be used to force writing to a 64-bit registry location, but this value is less useful than the default (<code class=\"docutils literal\">:machine</code>) because the chef-client returns an exception if <code class=\"docutils literal\">:x86_64</code> is used and the machine turns out to be a 32-bit machine (whereas with <code class=\"docutils literal\">:machine</code>, the chef-client is able to access the registry key on the 32-bit machine).</li> </ul> <p>This method will return <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">ARCHITECTURE</code> attribute should only specify <code class=\"docutils literal\">:x86_64</code> or <code class=\"docutils literal\">:i386</code> when it is necessary to write 32-bit (<code class=\"docutils literal\">:i386</code>) or 64-bit (<code class=\"docutils literal\">:x86_64</code>) values on a 64-bit machine. <code class=\"docutils literal\">ARCHITECTURE</code> will default to <code class=\"docutils literal\">:machine</code> unless a specific value is given.</p> </div>     <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:create</code></dt> <dd>Default. Create a registry key. If a registry key already exists (but does not match), update that registry key to match.</dd> <dt><code class=\"docutils literal\">:create_if_missing</code></dt> <dd>Create a registry key if it does not exist. Also, create a registry key value if it does not exist.</dd> <dt><code class=\"docutils literal\">:delete</code></dt> <dd>Delete the specified values for a registry key.</dd> <dt><code class=\"docutils literal\">:delete_key</code></dt> <dd>Delete the specified registry key and all of its subkeys.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Be careful when using the <code class=\"docutils literal\">:delete_key</code> action with the <code class=\"docutils literal\">recursive</code> attribute. This will delete the registry key, all of its values and all of the names, types, and data associated with them. This cannot be undone by the chef-client.</p> </div>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">architecture</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol</p> <p>The architecture of the node for which keys are to be created or deleted. Possible values: <code class=\"docutils literal\">:i386</code> (for nodes with a 32-bit registry), <code class=\"docutils literal\">:x86_64</code> (for nodes with a 64-bit registry), and <code class=\"docutils literal\">:machine</code> (to have the chef-client determine the architecture during the chef-client run). Default value: <code class=\"docutils literal\">:machine</code>.</p> <p>In order to read or write 32-bit registry keys on 64-bit machines running Microsoft Windows, the <code class=\"docutils literal\">architecture</code> property must be set to <code class=\"docutils literal\">:i386</code>. The <code class=\"docutils literal\">:x86_64</code> value can be used to force writing to a 64-bit registry location, but this value is less useful than the default (<code class=\"docutils literal\">:machine</code>) because the chef-client returns an exception if <code class=\"docutils literal\">:x86_64</code> is used and the machine turns out to be a 32-bit machine (whereas with <code class=\"docutils literal\">:machine</code>, the chef-client is able to access the registry key on the 32-bit machine).</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">ARCHITECTURE</code> attribute should only specify <code class=\"docutils literal\">:x86_64</code> or <code class=\"docutils literal\">:i386</code> when it is necessary to write 32-bit (<code class=\"docutils literal\">:i386</code>) or 64-bit (<code class=\"docutils literal\">:x86_64</code>) values on a 64-bit machine. <code class=\"docutils literal\">ARCHITECTURE</code> will default to <code class=\"docutils literal\">:machine</code> unless a specific value is given.</p> </div> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">key</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The path to the location in which a registry key is to be created or from which a registry key is to be deleted. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information. The path must include the registry hive, which can be specified either as its full name or as the 3- or 4-letter abbreviation. For example, both <code class=\"docutils literal\">HKLM\\SECURITY</code> and <code class=\"docutils literal\">HKEY_LOCAL_MACHINE\\SECURITY</code> are both valid and equivalent. The following hives are valid: <code class=\"docutils literal\">HKEY_LOCAL_MACHINE</code>, <code class=\"docutils literal\">HKLM</code>, <code class=\"docutils literal\">HKEY_CURRENT_CONFIG</code>, <code class=\"docutils literal\">HKCC</code>, <code class=\"docutils literal\">HKEY_CLASSES_ROOT</code>, <code class=\"docutils literal\">HKCR</code>, <code class=\"docutils literal\">HKEY_USERS</code>, <code class=\"docutils literal\">HKU</code>, <code class=\"docutils literal\">HKEY_CURRENT_USER</code>, and <code class=\"docutils literal\">HKCU</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">recursive</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p>When creating a key, this value specifies that the required keys for the specified path are to be created. When using the <code class=\"docutils literal\">:delete_key</code> action in a recipe, and if the registry key has subkeys, then set the value for this property to <code class=\"docutils literal\">true</code>.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Be careful when using the <code class=\"docutils literal\">:delete_key</code> action with the <code class=\"docutils literal\">recursive</code> attribute. This will delete the registry key, all of its values and all of the names, types, and data associated with them. This cannot be undone by the chef-client.</p> </div> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">values</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Hash, Array</p> <p>An array of hashes, where each Hash contains the values that are to be set under a registry key. Each Hash must contain <code class=\"docutils literal\">:name</code>, <code class=\"docutils literal\">:type</code>, and <code class=\"docutils literal\">:data</code> (and must contain no other key values).</p> <p><code class=\"docutils literal\">:type</code> represents the values available for registry keys in Microsoft Windows. Use <code class=\"docutils literal\">:binary</code> for REG_BINARY, <code class=\"docutils literal\">:string</code> for REG_SZ, <code class=\"docutils literal\">:multi_string</code> for REG_MULTI_SZ, <code class=\"docutils literal\">:expand_string</code> for REG_EXPAND_SZ, <code class=\"docutils literal\">:dword</code> for REG_DWORD, <code class=\"docutils literal\">:dword_big_endian</code> for REG_DWORD_BIG_ENDIAN, or <code class=\"docutils literal\">:qword</code> for REG_QWORD.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\"><code class=\"docutils literal\">:multi_string</code> must be an array, even if there is only a single string.</p> </div> </dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Create a registry key</strong></p> <p>Use a double-quoted string:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_key \"HKEY_LOCAL_MACHINE\\\\path-to-key\\\\Policies\\\\System\" do\n  values [{\n    :name =&gt; 'EnableLUA',\n    :type =&gt; :dword,\n    :data =&gt; 0\n  }]\n  action :create\nend</pre> <p>or a single-quoted string:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_key 'HKEY_LOCAL_MACHINE\\path-to-key\\Policies\\System' do\n  values [{\n    :name =&gt; 'EnableLUA',\n    :type =&gt; :dword,\n    :data =&gt; 0\n  }]\n  action :create\nend</pre> <p><strong>Delete a registry key value</strong></p> <p>Use a double-quoted string:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_key \"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\path\\\\to\\\\key\\\\AU\" do\n  values [{\n    :name =&gt; 'NoAutoRebootWithLoggedOnUsers',\n    :type =&gt; :dword,\n    :data =&gt; ''\n    }]\n  action :delete\nend</pre> <p>or a single-quoted string:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_key 'HKEY_LOCAL_MACHINE\\SOFTWARE\\path\\to\\key\\AU' do\n  values [{\n    :name =&gt; 'NoAutoRebootWithLoggedOnUsers',\n    :type =&gt; :dword,\n    :data =&gt; ''\n    }]\n  action :delete\nend</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If <code class=\"docutils literal\">:data</code> is not specified, you get an error: <code class=\"docutils literal\">Missing data key in RegistryKey values hash</code></p> </div> <p><strong>Delete a registry key and its subkeys, recursively</strong></p> <p>Use a double-quoted string:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_key \"HKCU\\\\SOFTWARE\\\\Policies\\\\path\\\\to\\\\key\\\\Themes\" do\n  recursive true\n  action :delete_key\nend</pre> <p>or a single-quoted string:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_key 'HKCU\\SOFTWARE\\Policies\\path\\to\\key\\Themes' do\n  recursive true\n  action :delete_key\nend</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Be careful when using the <code class=\"docutils literal\">:delete_key</code> action with the <code class=\"docutils literal\">recursive</code> attribute. This will delete the registry key, all of its values and all of the names, types, and data associated with them. This cannot be undone by the chef-client.</p> </div> <p><strong>Use re-directed keys</strong></p> <p>In 64-bit versions of Microsoft Windows, <code class=\"docutils literal\">HKEY_LOCAL_MACHINE\\SOFTWARE\\Example</code> is a re-directed key. In the following examples, because <code class=\"docutils literal\">HKEY_LOCAL_MACHINE\\SOFTWARE\\Example</code> is a 32-bit key, the output will be “Found 32-bit key” if they are run on a version of Microsoft Windows that is 64-bit:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_key \"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Example\" do\n  architecture :i386\n  recursive true\n  action :create\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_key \"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Example\" do\n  architecture :x86_64\n  recursive true\n  action :delete_key\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ruby_block 'check 32-bit' do\n  block do\n    puts 'Found 32-bit key'\n  end\n  only_if {\n    registry_key_exists?(\"HKEY_LOCAL_MACHINE\\SOFTWARE\\\\Example\",\n    :i386)\n  }\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ruby_block 'check 64-bit' do\n  block do\n    puts 'Found 64-bit key'\n  end\n  only_if {\n    registry_key_exists?(\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Example\",\n    :x86_64)\n  }\nend</pre> <p><strong>Set proxy settings to be the same as those used by the chef-client</strong></p> <p>Use a double-quoted string:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">proxy = URI.parse(Chef::Config[:http_proxy])\nregistry_key \"HKCU\\Software\\Microsoft\\path\\to\\key\\Internet Settings\" do\n  values [{:name =&gt; 'ProxyEnable', :type =&gt; :reg_dword, :data =&gt; 1},\n          {:name =&gt; 'ProxyServer', :data =&gt; \"#{proxy.host}:#{proxy.port}\"},\n          {:name =&gt; 'ProxyOverride', :type =&gt; :reg_string, :data =&gt; &lt;local&gt;},\n         ]\n  action :create\nend</pre> <p>or a single-quoted string:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">proxy = URI.parse(Chef::Config[:http_proxy])\nregistry_key 'HKCU\\Software\\Microsoft\\path\\to\\key\\Internet Settings' do\n  values [{:name =&gt; 'ProxyEnable', :type =&gt; :reg_dword, :data =&gt; 1},\n          {:name =&gt; 'ProxyServer', :data =&gt; \"#{proxy.host}:#{proxy.port}\"},\n          {:name =&gt; 'ProxyOverride', :type =&gt; :reg_string, :data =&gt; &lt;local&gt;},\n         ]\n  action :create\nend</pre> <p><strong>Set the name of a registry key to “(Default)”</strong></p> <p>Use a double-quoted string:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_key 'Set (Default) value' do\n  action :create\n  key \"HKLM\\\\Software\\\\Test\\\\Key\\\\Path\"\n  values [\n    {:name =&gt; '', :type =&gt; :string, :data =&gt; 'test'},\n  ]\nend</pre> <p>or a single-quoted string:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">registry_key 'Set (Default) value' do\n  action :create\n  key 'HKLM\\Software\\Test\\Key\\Path'\n  values [\n    {:name =&gt; '', :type =&gt; :string, :data =&gt; 'test'},\n  ]\nend</pre> <p>where <code class=\"docutils literal\">:name =&gt; ''</code> contains an empty string, which will set the name of the registry key to <code class=\"docutils literal\">(Default)</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_registry_key.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_registry_key.html</a>\n  </p>\n</div>\n","12-9/resource_script":"<h1 id=\"script\">script</h1> <p>Use the <strong>script</strong> resource to execute scripts using a specified interpreter, such as Bash, csh, Perl, Python, or Ruby. This resource may also use any of the actions and properties that are available to the <strong>execute</strong> resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> to guard this resource for idempotence.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <strong>script</strong> resource is different from the <strong>ruby_block</strong> resource because Ruby code that is run with this resource is created as a temporary file and executed like other script resources, rather than run inline.</p> </div> <p>This resource is the base resource for several other resources used for scripting on specific platforms. For more information about specific resources for specific platforms, see the following topics:</p> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"resource_bash\">bash</a></li> <li><a class=\"reference internal\" href=\"resource_csh\">csh</a></li> <li><a class=\"reference internal\" href=\"resource_ksh\">ksh</a></li> <li><a class=\"reference internal\" href=\"resource_perl\">perl</a></li> <li><a class=\"reference internal\" href=\"resource_python\">python</a></li> <li><a class=\"reference internal\" href=\"resource_ruby\">ruby</a></li> </ul>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>script</strong> resource block typically executes scripts using a specified interpreter, such as Bash, csh, Perl, Python, or Ruby:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">script 'extract_module' do\n  interpreter \"bash\"\n  cwd ::File.dirname(src_filepath)\n  code &lt;&lt;-EOH\n    mkdir -p #{extract_path}\n    tar xzf #{src_filename} -C #{extract_path}\n    mv #{extract_path}/*/* #{extract_path}/\n    EOH\n  not_if { ::File.exists?(extract_path) }\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">interpreter</code> specifies the command shell to use</li> <li>\n<code class=\"docutils literal\">cwd</code> specifies the directory from which the command is run</li> <li>\n<code class=\"docutils literal\">code</code> specifies the command to run</li> </ul> <p>It is more common to use the <strong>script</strong>-based resource that is specific to the command shell. Chef has shell-specific resources for Bash, csh, Perl, Python, and Ruby.</p> <p>The same command as above, but run using the <strong>bash</strong> resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">bash 'extract_module' do\n  cwd ::File.dirname(src_filepath)\n  code &lt;&lt;-EOH\n    mkdir -p #{extract_path}\n    tar xzf #{src_filename} -C #{extract_path}\n    mv #{extract_path}/*/* #{extract_path}/\n    EOH\n  not_if { ::File.exists?(extract_path) }\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>script</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">script 'name' do\n  code                       String\n  creates                    String\n  cwd                        String\n  environment                Hash\n  flags                      String\n  group                      String, Integer\n  interpreter                String\n  notifies                   # see description\n  path                       Array\n  provider                   Chef::Provider::Script\n  returns                    Integer, Array\n  subscribes                 # see description\n  timeout                    Integer, Float\n  user                       String, Integer\n  umask                      String, Integer\n  action                     Symbol # defaults to :run if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">script</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">cwd</code> is the location from which the command is run</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">code</code>, <code class=\"docutils literal\">creates</code>, <code class=\"docutils literal\">cwd</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">flags</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">interpreter</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">returns</code>, <code class=\"docutils literal\">timeout</code>, <code class=\"docutils literal\">user</code>, and <code class=\"docutils literal\">umask</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Prevent a command from running. This action is used to specify that a command is run only when another resource notifies it.</dd> <dt><code class=\"docutils literal\">:run</code></dt> <dd>Default. Run a script.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following attributes:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">code</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">A quoted (” ”) string of code to be executed.</p> </dd> <dt><code class=\"docutils literal\">creates</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Prevent a command from creating a file when that file already exists.</p> </dd> <dt><code class=\"docutils literal\">cwd</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The current working directory.</p> </dd> <dt><code class=\"docutils literal\">environment</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A Hash of environment variables in the form of <code class=\"docutils literal\">{\"ENV_VARIABLE\" =&gt; \"VALUE\"}</code>. (These variables must exist for a command to be run successfully.)</p> </dd> <dt><code class=\"docutils literal\">flags</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One or more command line flags that are passed to the interpreter when a command is invoked.</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The group name or group ID that must be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">interpreter</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The script interpreter to use during code execution.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p>An array of paths to use when searching for a command. These paths are not added to the command’s environment $PATH. The default value uses the system path.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>The <code class=\"docutils literal\">path</code> property is not implemented by any provider in any version of the chef-client. Starting with chef-client 12, using the <code class=\"docutils literal\">path</code> property will return a warning. Starting with chef-client 13, the <code class=\"docutils literal\">path</code> property is deprecated and using it will return an exception. Cookbooks that currently use the <code class=\"docutils literal\">path</code> property should be updated to use the <code class=\"docutils literal\">environment</code> property instead.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">script 'mycommand' do\n  environment 'PATH' =&gt; \"/my/path/to/bin:#{ENV['PATH']}\"\nend</pre> </div> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">returns</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Array</p> <p class=\"last\">The return value for a command. This may be an array of accepted values. An exception is raised when the return value(s) do not match. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, Float</p> <p class=\"last\">The amount of time (in seconds) a command is to wait before timing out. Default value: <code class=\"docutils literal\">3600</code>.</p> </dd> <dt><code class=\"docutils literal\">user</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The user name or user ID that should be changed before running a command.</p> </dd> <dt><code class=\"docutils literal\">umask</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The file mode creation mask, or umask.</p> </dd> </dl>  <h3 id=\"guards\">Guards</h3> <p>A guard property can be used to evaluate the state of a node during the execution phase of the chef-client run. Based on the results of this evaluation, a guard property is then used to tell the chef-client if it should continue executing a resource. A guard property accepts either a string value or a Ruby block value:</p> <ul class=\"simple\"> <li>A string is executed as a shell command. If the command returns <code class=\"docutils literal\">0</code>, the guard is applied. If the command returns any other value, then the guard property is not applied. String guards in a <strong>powershell_script</strong> run Windows PowerShell commands and may return <code class=\"docutils literal\">true</code> in addition to <code class=\"docutils literal\">0</code>.</li> <li>A block is executed as Ruby code that must return either <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. If the block returns <code class=\"docutils literal\">true</code>, the guard property is applied. If the block returns <code class=\"docutils literal\">false</code>, the guard property is not applied.</li> </ul> <p>A guard property is useful for ensuring that a resource is idempotent by allowing that resource to test for the desired state as it is being executed, and then if the desired state is present, for the chef-client to do nothing.</p> <p><strong>Attributes</strong></p> <p>The following properties can be used to define a guard that is evaluated during the execution phase of the chef-client run:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">not_if</code></dt> <dd>Prevent a resource from executing when the condition returns <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">only_if</code></dt> <dd>Allow a resource to execute only if the condition returns <code class=\"docutils literal\">true</code>.</dd> </dl> <p><strong>Arguments</strong></p> <p>The following arguments can be used with the <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code> guard properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:user</code></dt> <dd>\n<p class=\"first\">Specify the user that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :user =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:group</code></dt> <dd>\n<p class=\"first\">Specify the group that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :group =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:environment</code></dt> <dd>\n<p class=\"first\">Specify a Hash of environment variables to be set. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :environment =&gt; {\n  'HOME' =&gt; '/home/adam'\n}</pre> </dd> <dt><code class=\"docutils literal\">:cwd</code></dt> <dd>\n<p class=\"first\">Set the current working directory before running a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam passwd', :cwd =&gt; '/etc'</pre> </dd> <dt><code class=\"docutils literal\">:timeout</code></dt> <dd>\n<p class=\"first\">Set a timeout for a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'sleep 10000', :timeout =&gt; 10</pre> </dd> </dl>   <h3 id=\"guard-interpreter\">Guard Interpreter</h3> <p>Any resource that passes a string command may also specify the interpreter that will be used to evaluate that string command. This is done by using the <code class=\"docutils literal\">guard_interpreter</code> property to specify a <strong>script</strong>-based resource.</p> <p><strong>Attributes</strong></p> <p>The <code class=\"docutils literal\">guard_interpreter</code> property may be set to any of the following values:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:bash</code></dt> <dd>Evaluates a string command using the <strong>bash</strong> resource.</dd> <dt><code class=\"docutils literal\">:batch</code></dt> <dd>Evaluates a string command using the <strong>batch</strong> resource. Default value (within a <strong>batch</strong> resource block): <code class=\"docutils literal\">:batch</code>.</dd> <dt><code class=\"docutils literal\">:csh</code></dt> <dd>Evaluates a string command using the <strong>csh</strong> resource.</dd> <dt><code class=\"docutils literal\">:default</code></dt> <dd>Default. Executes the default interpreter as identified by the chef-client.</dd> <dt><code class=\"docutils literal\">:perl</code></dt> <dd>Evaluates a string command using the <strong>perl</strong> resource.</dd> <dt><code class=\"docutils literal\">:powershell_script</code></dt> <dd>Evaluates a string command using the <strong>powershell_script</strong> resource. Default value (within a <strong>batch</strong> resource block): <code class=\"docutils literal\">:powershell_script</code>.</dd> <dt><code class=\"docutils literal\">:python</code></dt> <dd>Evaluates a string command using the <strong>python</strong> resource.</dd> <dt><code class=\"docutils literal\">:ruby</code></dt> <dd>Evaluates a string command using the <strong>ruby</strong> resource.</dd> </dl> <p><strong>Inheritance</strong></p> <p>The <code class=\"docutils literal\">guard_interpreter</code> property is set to <code class=\"docutils literal\">:default</code> by default for the <strong>bash</strong>, <strong>csh</strong>, <strong>perl</strong>, <strong>python</strong>, and <strong>ruby</strong> resources. When the <code class=\"docutils literal\">guard_interpreter</code> property is set to <code class=\"docutils literal\">:default</code>, <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code> guard statements <strong>do not inherit</strong> properties that are defined by the <strong>script</strong>-based resource.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The <strong>batch</strong> and <strong>powershell_script</strong> resources inherit properties by default. The <code class=\"docutils literal\">guard_interpreter</code> property is set to <code class=\"docutils literal\">:batch</code> or <code class=\"docutils literal\">:powershell_script</code> automatically when using a <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code> guard statement within a <strong>batch</strong> or <strong>powershell_script</strong> resource, respectively.</p> </div> <p>For example, the <code class=\"docutils literal\">not_if</code> guard statement in the following resource example <strong>does not inherit</strong> the <code class=\"docutils literal\">environment</code> property:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">bash 'javatooling' do\n  environment 'JAVA_HOME' =&gt; '/usr/lib/java/jdk1.7/home'\n  code 'java-based-daemon-ctl.sh -start'\n  not_if 'java-based-daemon-ctl.sh -test-started'\nend</pre> <p>and requires adding the <code class=\"docutils literal\">environment</code> property to the <code class=\"docutils literal\">not_if</code> guard statement so that it may use the <code class=\"docutils literal\">JAVA_HOME</code> path as part of its evaluation:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">bash 'javatooling' do\n  environment 'JAVA_HOME' =&gt; '/usr/lib/java/jdk1.7/home'\n  code 'java-based-daemon-ctl.sh -start'\n  not_if 'java-based-daemon-ctl.sh -test-started', :environment =&gt; 'JAVA_HOME' =&gt; '/usr/lib/java/jdk1.7/home'\nend</pre> <p>To inherit properties, add the <code class=\"docutils literal\">guard_interpreter</code> property to the resource block and set it to the appropriate value:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">:bash</code> for <strong>bash</strong>\n</li> <li>\n<code class=\"docutils literal\">:csh</code> for <strong>csh</strong>\n</li> <li>\n<code class=\"docutils literal\">:perl</code> for <strong>perl</strong>\n</li> <li>\n<code class=\"docutils literal\">:python</code> for <strong>python</strong>\n</li> <li>\n<code class=\"docutils literal\">:ruby</code> for <strong>ruby</strong>\n</li> </ul> <p>For example, using the same example as from above, but this time adding the <code class=\"docutils literal\">guard_interpreter</code> property and setting it to <code class=\"docutils literal\">:bash</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">bash 'javatooling' do\n  guard_interpreter :bash\n  environment 'JAVA_HOME' =&gt; '/usr/lib/java/jdk1.7/home'\n  code 'java-based-daemon-ctl.sh -start'\n  not_if 'java-based-daemon-ctl.sh -test-started'\nend</pre> <p>The <code class=\"docutils literal\">not_if</code> statement now inherits the <code class=\"docutils literal\">environment</code> property and will use the <code class=\"docutils literal\">JAVA_HOME</code> path as part of its evaluation.</p> <p><strong>Example</strong></p> <p>For example, the following code block will ensure the command is evaluated using the default intepreter as identified by the chef-client:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource 'name' do\n  guard_interpreter :default\n  # code\nend</pre>    <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script</code>, <code class=\"docutils literal\">script</code>\n</dt> <dd>When this short name is used, the chef-client will determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script::Bash</code>, <code class=\"docutils literal\">bash</code>\n</dt> <dd>The provider for the Bash command interpreter.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script::Csh</code>, <code class=\"docutils literal\">csh</code>\n</dt> <dd>The provider for the csh command interpreter.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script::Perl</code>, <code class=\"docutils literal\">perl</code>\n</dt> <dd>The provider for the Perl command interpreter.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script::Python</code>, <code class=\"docutils literal\">python</code>\n</dt> <dd>The provider for the Python command interpreter.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Script::Ruby</code>, <code class=\"docutils literal\">ruby</code>\n</dt> <dd>The provider for the Ruby command interpreter.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Use a named provider to run a script</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">bash 'install_something' do\n  user 'root'\n  cwd '/tmp'\n  code &lt;&lt;-EOH\n  wget http://www.example.com/tarball.tar.gz\n  tar -zxf tarball.tar.gz\n  cd tarball\n  ./configure\n  make\n  make install\n  EOH\nend</pre> <p><strong>Run a script</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">script 'install_something' do\n  interpreter 'bash'\n  user 'root'\n  cwd '/tmp'\n  code &lt;&lt;-EOH\n  wget http://www.example.com/tarball.tar.gz\n  tar -zxf tarball.tar.gz\n  cd tarball\n  ./configure\n  make\n  make install\n  EOH\nend</pre> <p>or something like:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">bash 'openvpn-server-key' do\n  environment('KEY_CN' =&gt; 'server')\n  code &lt;&lt;-EOF\n    openssl req -batch -days #{node['openvpn']['key']['expire']} \\\n      -nodes -new -newkey rsa:#{key_size} -keyout #{key_dir}/server.key \\\n      -out #{key_dir}/server.csr -extensions server \\\n      -config #{key_dir}/openssl.cnf\n  EOF\n  not_if { File.exist?('#{key_dir}/server.crt') }\nend</pre> <p>where <code class=\"docutils literal\">code</code> contains the OpenSSL command to be run. The <code class=\"docutils literal\">not_if</code> property tells the chef-client not to run the command if the file already exists.</p> <p><strong>Install a file from a remote location using bash</strong></p> <p>The following is an example of how to install the <code class=\"docutils literal\">foo123</code> module for Nginx. This module adds shell-style functionality to an Nginx configuration file and does the following:</p> <ul class=\"simple\"> <li>Declares three variables</li> <li>Gets the Nginx file from a remote location</li> <li>Installs the file using Bash to the path specified by the <code class=\"docutils literal\">src_filepath</code> variable</li> </ul> <pre class=\"highlight-ruby\" data-language=\"ruby\"># the following code sample is similar to the ``upload_progress_module``\n# recipe in the ``nginx`` cookbook:\n# https://github.com/chef-cookbooks/nginx\n\nsrc_filename = \"foo123-nginx-module-v#{\n  node['nginx']['foo123']['version']\n}.tar.gz\"\nsrc_filepath = \"#{Chef::Config['file_cache_path']}/#{src_filename}\"\nextract_path = \"#{\n  Chef::Config['file_cache_path']\n  }/nginx_foo123_module/#{\n  node['nginx']['foo123']['checksum']\n}\"\n\nremote_file 'src_filepath' do\n  source node['nginx']['foo123']['url']\n  checksum node['nginx']['foo123']['checksum']\n  owner 'root'\n  group 'root'\n  mode '0755'\nend\n\nbash 'extract_module' do\n  cwd ::File.dirname(src_filepath)\n  code &lt;&lt;-EOH\n    mkdir -p #{extract_path}\n    tar xzf #{src_filename} -C #{extract_path}\n    mv #{extract_path}/*/* #{extract_path}/\n    EOH\n  not_if { ::File.exists?(extract_path) }\nend</pre> <p><strong>Install an application from git using bash</strong></p> <p>The following example shows how Bash can be used to install a plug-in for rbenv named <code class=\"docutils literal\">ruby-build</code>, which is located in git version source control. First, the application is synchronized, and then Bash changes its working directory to the location in which <code class=\"docutils literal\">ruby-build</code> is located, and then runs a command.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">git \"#{Chef::Config[:file_cache_path]}/ruby-build\" do\n   repository 'git://github.com/sstephenson/ruby-build.git'\n   reference 'master'\n   action :sync\n end\n\n bash 'install_ruby_build' do\n   cwd '#{Chef::Config[:file_cache_path]}/ruby-build'\n   user 'rbenv'\n   group 'rbenv'\n   code &lt;&lt;-EOH\n     ./install.sh\n     EOH\n   environment 'PREFIX' =&gt; '/usr/local'\nend</pre> <p>To read more about <code class=\"docutils literal\">ruby-build</code>, see here: <a class=\"reference external\" href=\"https://github.com/sstephenson/ruby-build\">https://github.com/sstephenson/ruby-build</a>.</p> <p><strong>Store certain settings</strong></p> <p>The following recipe shows how an attributes file can be used to store certain settings. An attributes file is located in the <code class=\"docutils literal\">attributes/</code> directory in the same cookbook as the recipe which calls the attributes file. In this example, the attributes file specifies certain settings for Python that are then used across all nodes against which this recipe will run.</p> <p>Python packages have versions, installation directories, URLs, and checksum files. An attributes file that exists to support this type of recipe would include settings like the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default['python']['version'] = '2.7.1'\n\nif python['install_method'] == 'package'\n  default['python']['prefix_dir'] = '/usr'\nelse\n  default['python']['prefix_dir'] = '/usr/local'\nend\n\ndefault['python']['url'] = 'http://www.python.org/ftp/python'\ndefault['python']['checksum'] = '80e387...85fd61'</pre> <p>and then the methods in the recipe may refer to these values. A recipe that is used to install Python will need to do the following:</p> <ul class=\"simple\"> <li>Identify each package to be installed (implied in this example, not shown)</li> <li>Define variables for the package <code class=\"docutils literal\">version</code> and the <code class=\"docutils literal\">install_path</code>\n</li> <li>Get the package from a remote location, but only if the package does not already exist on the target system</li> <li>Use the <strong>bash</strong> resource to install the package on the node, but only when the package is not already installed</li> </ul> <pre class=\"highlight-ruby\" data-language=\"ruby\">#  the following code sample comes from the ``oc-nginx`` cookbook on |github|: https://github.com/cookbooks/oc-nginx\n\nversion = node['python']['version']\ninstall_path = \"#{node['python']['prefix_dir']}/lib/python#{version.split(/(^\\d+\\.\\d+)/)[1]}\"\n\nremote_file \"#{Chef::Config[:file_cache_path]}/Python-#{version}.tar.bz2\" do\n  source \"#{node['python']['url']}/#{version}/Python-#{version}.tar.bz2\"\n  checksum node['python']['checksum']\n  mode '0755'\n  not_if { ::File.exists?(install_path) }\nend\n\nbash 'build-and-install-python' do\n  cwd Chef::Config[:file_cache_path]\n  code &lt;&lt;-EOF\n    tar -jxvf Python-#{version}.tar.bz2\n    (cd Python-#{version} &amp;&amp; ./configure #{configure_options})\n    (cd Python-#{version} &amp;&amp; make &amp;&amp; make install)\n  EOF\n  not_if { ::File.exists?(install_path) }\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_script.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_script.html</a>\n  </p>\n</div>\n","12-9/resource_solaris_package":"<h1 id=\"solaris-package\">solaris_package</h1> <p>The <strong>solaris_package</strong> resource is used to manage packages for the Solaris platform.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>solaris_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>solaris_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">solaris_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>solaris_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">solaris_package 'name' do\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::Solaris\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">solaris_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The name of the package. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The path to a package in the local file system.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Solaris</code>, <code class=\"docutils literal\">solaris_package</code>\n</dt> <dd>The provider for the Solaris platform.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">solaris_package 'name of package' do\n  action :install\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_solaris_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_solaris_package.html</a>\n  </p>\n</div>\n","12-9/resource_subversion":"<h1 id=\"subversion\">subversion</h1> <p>Use the <strong>subversion</strong> resource to manage source control resources that exist in a Subversion repository.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This resource is often used in conjunction with the <strong>deploy</strong> resource.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>subversion</strong> resource block manages source control resources that exist in a Subversion repository:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">subversion 'CouchDB Edge' do\n  repository 'http://svn.apache.org/repos/asf/couchdb/trunk'\n  revision 'HEAD'\n  destination '/opt/mysources/couch'\n  action :sync\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>subversion</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">subversion 'name' do\n  destination                String # defaults to 'name' if not specified\n  group                      String, Integer\n  notifies                   # see description\n  provider                   Chef::Provider::Scm::Subversion\n  repository                 String\n  revision                   String\n  subscribes                 # see description\n  svn_arguments              String\n  svn_info_args              String\n  svn_password               String\n  svn_username               String\n  timeout                    Integer\n  user                       String, Integer\n  action                     Symbol # defaults to :sync if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">subversion</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block and also (when the <code class=\"docutils literal\">destination</code> property is not specified) the location in which the source files will be placed and/or synchronized with the files under source control management</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">destination</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">repository</code>, <code class=\"docutils literal\">revision</code>, <code class=\"docutils literal\">svn_arguments</code>, <code class=\"docutils literal\">svn_info_args</code>, <code class=\"docutils literal\">svn_password</code>, <code class=\"docutils literal\">svn_username</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">user</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:checkout</code></dt> <dd>Clone or check out the source. When a checkout is available, this provider does nothing.</dd> <dt><code class=\"docutils literal\">:export</code></dt> <dd>Export the source, excluding or removing any version control artifacts.</dd> <dt><code class=\"docutils literal\">:force_export</code></dt> <dd>Export the source, excluding or removing any version control artifacts and force an export of the source that is overwriting the existing copy (if it exists).</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:sync</code></dt> <dd>Default. Update the source to the specified version, or get a new clone or checkout. This action causes a hard reset of the index and working tree, discarding any uncommitted changes.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">destination</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The location path to which the source is to be cloned, checked out, or exported. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The system group that is responsible for the checked-out code.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">repository</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The URI for the Subversion repository.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">revision</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">A branch, tag, or commit to be synchronized with git. This can be symbolic, like <code class=\"docutils literal\">HEAD</code> or it can be a source control management-specific revision identifier. Default value: <code class=\"docutils literal\">HEAD</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">svn_arguments</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The extra arguments that are passed to the Subversion command.</p> </dd> <dt><code class=\"docutils literal\">svn_info_args</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Use when the <code class=\"docutils literal\">svn info</code> command is used by the chef-client and arguments need to be passed. The <code class=\"docutils literal\">svn_arguments</code> command does not work when the <code class=\"docutils literal\">svn info</code> command is used.</p> </dd> <dt><code class=\"docutils literal\">svn_password</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The password for a user that has access to the Subversion repository.</p> </dd> <dt><code class=\"docutils literal\">svn_username</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The user name for a user that has access to the Subversion repository.</p> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The amount of time (in seconds) to wait for a command to execute before timing out. When this property is specified using the <strong>deploy</strong> resource, the value of the <code class=\"docutils literal\">timeout</code> property is passed from the <strong>deploy</strong> resource to the <strong>subversion</strong> resource.</p> </dd> <dt><code class=\"docutils literal\">user</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The system user that is responsible for the checked-out code.</p> </dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Get the latest version of an application</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">subversion 'CouchDB Edge' do\n  repository 'http://svn.apache.org/repos/asf/couchdb/trunk'\n  revision 'HEAD'\n  destination '/opt/mysources/couch'\n  action :sync\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_subversion.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_subversion.html</a>\n  </p>\n</div>\n","12-9/resource_remote_file":"<h1 id=\"remote-file\">remote_file</h1> <p>Use the <strong>remote_file</strong> resource to transfer a file from a remote location using file specificity. This resource is similar to the <strong>file</strong> resource.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Fetching files from the <code class=\"docutils literal\">files/</code> directory in a cookbook should be done with the <strong>cookbook_file</strong> resource.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>remote_file</strong> resource block manages files by using files that exist remotely. For example, to write the home page for an Apache website:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">remote_file '/var/www/customers/public_html/index.php' do\n  source 'http://somesite.com/index.php'\n  owner 'web_admin'\n  group 'web_admin'\n  mode '0755'\n  action :create\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">'/var/www/customers/public_html/index.php'</code> is path to the file to be created</li> <li>\n<code class=\"docutils literal\">'http://somesite.com/index.php'</code> specifies the location of the remote file</li> <li>\n<code class=\"docutils literal\">owner</code>, <code class=\"docutils literal\">group</code>, and <code class=\"docutils literal\">mode</code> define the permissions</li> </ul> <p>The full syntax for all of the properties that are available to the <strong>remote_file</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">remote_file 'name' do\n  atomic_update              TrueClass, FalseClass\n  backup                     FalseClass, Integer\n  checksum                   String\n  force_unlink               TrueClass, FalseClass\n  ftp_active_mode            TrueClass, FalseClass\n  group                      String, Integer\n  headers                    Hash\n  inherits                   TrueClass, FalseClass\n  manage_symlink_source      TrueClass, FalseClass, NilClass\n  mode                       String, Integer\n  notifies                   # see description\n  owner                      String, Integer\n  path                       String # defaults to 'name' if not specified\n  provider                   Chef::Provider::File::RemoteFile\n  rights                     Hash\n  source                     String, Array\n  subscribes                 # see description\n  use_conditional_get        TrueClass, FalseClass\n  use_etag                   TrueClass, FalseClass\n  use_last_modified          TrueClass, FalseClass\n  verify                     String, Block\n  action                     Symbol # defaults to :create if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">remote_file</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">atomic_update</code>, <code class=\"docutils literal\">backup</code>, <code class=\"docutils literal\">checksum</code>, <code class=\"docutils literal\">force_unlink</code>, <code class=\"docutils literal\">ftp_active_mode</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">headers</code>, <code class=\"docutils literal\">inherits</code>, <code class=\"docutils literal\">manage_symlink_source</code>, <code class=\"docutils literal\">mode</code>, <code class=\"docutils literal\">owner</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">rights</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">use_conditional_get</code>, <code class=\"docutils literal\">use_etag</code>, <code class=\"docutils literal\">use_last_modified</code>, and <code class=\"docutils literal\">verify</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:create</code></dt> <dd>\n<p class=\"first\">Default. Create a file. If a file already exists (but does not match), update that file to match.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">For a machine on which SELinux is enabled, the chef-client will create files that correctly match the default policy settings only when the cookbook that defines the action also conforms to the same policy.</p> </div> </dd> <dt><code class=\"docutils literal\">:create_if_missing</code></dt> <dd>Create a file only if the file does not exist. When the file exists, nothing happens.</dd> <dt><code class=\"docutils literal\">:delete</code></dt> <dd>Delete a file.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:touch</code></dt> <dd>Touch a file. This updates the access (atime) and file modification (mtime) times for a file. (This action may be used with this resource, but is typically only used with the <strong>file</strong> resource.)</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">atomic_update</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Perform atomic file updates on a per-resource basis. Set to <code class=\"docutils literal\">true</code> for atomic file updates. Set to <code class=\"docutils literal\">false</code> for non-atomic file updates. This setting overrides <code class=\"docutils literal\">file_atomic_update</code>, which is a global setting found in the client.rb file. Default value: <code class=\"docutils literal\">true</code>.</p> </dd> <dt><code class=\"docutils literal\">backup</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> FalseClass, Integer</p> <p class=\"last\">The number of backups to be kept in <code class=\"docutils literal\">/var/chef/backup</code> (for UNIX- and Linux-based platforms) or <code class=\"docutils literal\">C:/chef/backup</code> (for the Microsoft Windows platform). Set to <code class=\"docutils literal\">false</code> to prevent backups from being kept. Default value: <code class=\"docutils literal\">5</code>.</p> </dd> <dt><code class=\"docutils literal\">checksum</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional, see <code class=\"docutils literal\">use_conditional_get</code>. The SHA-256 checksum of the file. Use to prevent a file from being re-downloaded. When the local file matches the checksum, the chef-client does not download it.</p> </dd> <dt><code class=\"docutils literal\">force_unlink</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">How the chef-client handles certain situations when the target file turns out not to be a file. For example, when a target file is actually a symlink. Set to <code class=\"docutils literal\">true</code> for the chef-client delete the non-file target and replace it with the specified file. Set to <code class=\"docutils literal\">false</code> for the chef-client to raise an error. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">ftp_active_mode</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Whether the chef-client uses active or passive FTP. Set to <code class=\"docutils literal\">true</code> to use active FTP. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">A string or ID that identifies the group owner by group name, including fully qualified group names such as <code class=\"docutils literal\">domain\\group</code> or <code class=\"docutils literal\">group@domain</code>. If this value is not specified, existing groups remain unchanged and new group assignments use the default <code class=\"docutils literal\">POSIX</code> group (if available).</p> </dd> <dt><code class=\"docutils literal\">headers()</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p>A Hash of custom headers. Default value: <code class=\"docutils literal\">{}</code>. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">headers({ \"Cookie\" =&gt; \"user=grantmc; pass=p@ssw0rd!\" })</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">headers({ \"Referer\" =&gt; \"#{header}\" })</pre> <p>or:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">headers( \"Authorization\"=&gt;\"Basic #{ Base64.encode64(\"#{username}:#{password}\").gsub(\"\\n\", \"\") }\" )</pre> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">inherits</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Microsoft Windows only. Whether a file inherits rights from its parent directory. Default value: <code class=\"docutils literal\">true</code>.</p> </dd> <dt><code class=\"docutils literal\">manage_symlink_source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass, NilClass</p> <p class=\"last\">Cause the chef-client to detect and manage the source file for a symlink. Possible values: <code class=\"docutils literal\">nil</code>, <code class=\"docutils literal\">true</code>, or <code class=\"docutils literal\">false</code>. When this value is set to <code class=\"docutils literal\">nil</code>, the chef-client will manage a symlink’s source file and emit a warning. When this value is set to <code class=\"docutils literal\">true</code>, the chef-client will manage a symlink’s source file and not emit a warning. Default value: <code class=\"docutils literal\">nil</code>. The default value will be changed to <code class=\"docutils literal\">false</code> in a future version.</p> </dd> <dt><code class=\"docutils literal\">mode</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p>A quoted 3-5 character string that defines the octal mode. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. If <code class=\"docutils literal\">mode</code> is not specified and if the file already exists, the existing mode on the file is used. If <code class=\"docutils literal\">mode</code> is not specified, the file does not exist, and the <code class=\"docutils literal\">:create</code> action is specified, the chef-client assumes a mask value of <code class=\"docutils literal\">'0777'</code> and then applies the umask for the system on which the file is to be created to the <code class=\"docutils literal\">mask</code> value. For example, if the umask on a system is <code class=\"docutils literal\">'022'</code>, the chef-client uses the default value of <code class=\"docutils literal\">'0755'</code>.</p> <p>The behavior is different depending on the platform.</p> <p>UNIX- and Linux-based systems: A quoted 3-5 character string that defines the octal mode that is passed to chmod. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. If the value is specified as a quoted string, it works exactly as if the <code class=\"docutils literal\">chmod</code> command was passed. If the value is specified as an integer, prepend a zero (<code class=\"docutils literal\">0</code>) to the value to ensure that it is interpreted as an octal number. For example, to assign read, write, and execute rights for all users, use <code class=\"docutils literal\">'0777'</code> or <code class=\"docutils literal\">'777'</code>; for the same rights, plus the sticky bit, use <code class=\"docutils literal\">'01777'</code> or <code class=\"docutils literal\">'1777'</code>.</p> <p class=\"last\">Microsoft Windows: A quoted 3-5 character string that defines the octal mode that is translated into rights for Microsoft Windows security. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. Values up to <code class=\"docutils literal\">'0777'</code> are allowed (no sticky bits) and mean the same in Microsoft Windows as they do in UNIX, where <code class=\"docutils literal\">4</code> equals <code class=\"docutils literal\">GENERIC_READ</code>, <code class=\"docutils literal\">2</code> equals <code class=\"docutils literal\">GENERIC_WRITE</code>, and <code class=\"docutils literal\">1</code> equals <code class=\"docutils literal\">GENERIC_EXECUTE</code>. This property cannot be used to set <code class=\"docutils literal\">:full_control</code>. This property has no effect if not specified, but when it and <code class=\"docutils literal\">rights</code> are both specified, the effects are cumulative.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">owner</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">A string or ID that identifies the group owner by user name, including fully qualified user names such as <code class=\"docutils literal\">domain\\user</code> or <code class=\"docutils literal\">user@domain</code>. If this value is not specified, existing owners remain unchanged and new owner assignments use the current user (when necessary).</p> </dd> <dt><code class=\"docutils literal\">path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The full path to the file, including the file name and its extension. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">rights</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">Microsoft Windows only. The permissions for users and groups in a Microsoft Windows environment. For example: <code class=\"docutils literal\">rights &lt;permissions&gt;, &lt;principal&gt;, &lt;options&gt;</code> where <code class=\"docutils literal\">&lt;permissions&gt;</code> specifies the rights granted to the principal, <code class=\"docutils literal\">&lt;principal&gt;</code> is the group or user name, and <code class=\"docutils literal\">&lt;options&gt;</code> is a Hash with one (or more) advanced rights options.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p>Required. The location of the source file. The location of the source file may be HTTP (<code class=\"docutils literal\">http://</code>), FTP (<code class=\"docutils literal\">ftp://</code>), local (<code class=\"docutils literal\">file:///</code>), or UNC (<code class=\"docutils literal\">\\\\\\\\host\\\\share\\\\file.tar.gz</code>).</p> <p>There are many ways to define the location of a source file. By using a path:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">source 'http://couchdb.apache.org/img/sketch.png'</pre> <p>By using FTP:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">source 'ftp://path/to/img/sketch.png'</pre> <p>By using a local path:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">source 'file:///path/to/img/sketch.png'</pre> <p>By using a Microsoft Windows UNC:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">source '\\\\\\\\path\\\\to\\\\img\\\\sketch.png'</pre> <p>By using a node attribute:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">source node['nginx']['foo123']['url']</pre> <p>By using attributes to define paths:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">source \"#{node['python']['url']}/#{version}/Python-#{version}.tar.bz2\"</pre> <p>By defining multiple paths for multiple locations:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">source 'http://seapower/spring.png', 'http://seapower/has_sprung.png'</pre> <p>By defining those same multiple paths as an array:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">source ['http://seapower/spring.png', 'http://seapower/has_sprung.png']</pre> <p class=\"last\">When multiple paths are specified, the chef-client will attempt to download the files in the order listed, stopping after the first successful download.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">use_conditional_get</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Enable conditional HTTP requests by using a conditional <code class=\"docutils literal\">GET</code> (with the If-Modified-Since header) or an opaque identifier (ETag). To use If-Modified-Since headers, <code class=\"docutils literal\">use_last_modified</code> must also be set to <code class=\"docutils literal\">true</code>. To use ETag headers, <code class=\"docutils literal\">use_etag</code> must also be set to <code class=\"docutils literal\">true</code>. Default value: <code class=\"docutils literal\">true</code>.</p> </dd> <dt><code class=\"docutils literal\">use_etag</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Enable ETag headers. Set to <code class=\"docutils literal\">false</code> to disable ETag headers. To use this setting, <code class=\"docutils literal\">use_conditional_get</code> must also be set to <code class=\"docutils literal\">true</code>. Default value: <code class=\"docutils literal\">true</code>.</p> </dd> <dt><code class=\"docutils literal\">use_last_modified</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Enable If-Modified-Since headers. Set to <code class=\"docutils literal\">false</code> to disable If-Modified-Since headers. To use this setting, <code class=\"docutils literal\">use_conditional_get</code> must also be set to <code class=\"docutils literal\">true</code>. Default value: <code class=\"docutils literal\">true</code>.</p> </dd> <dt><code class=\"docutils literal\">verify</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Block</p> <p>A block or a string that returns <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. A string, when <code class=\"docutils literal\">true</code> is executed as a system command.</p> <p>A block is arbitrary Ruby defined within the resource block by using the <code class=\"docutils literal\">verify</code> property. When a block is <code class=\"docutils literal\">true</code>, the chef-client will continue to update the file as appropriate.</p> <p>For example, this should return <code class=\"docutils literal\">true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">remote_file '/tmp/baz' do\n  verify { 1 == 1 }\nend</pre> <p>This should return <code class=\"docutils literal\">true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">remote_file '/etc/nginx.conf' do\n  verify 'nginx -t -c %{path}'\nend</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>For releases of the chef-client prior to 12.5 (chef-client 12.4 and earlier) the correct syntax is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">remote_file '/etc/nginx.conf' do\n  verify 'nginx -t -c %{file}'\nend</pre> <p class=\"last\">See GitHub issues <a class=\"reference external\" href=\"https://github.com/chef/chef/issues/3232\">https://github.com/chef/chef/issues/3232</a> and <a class=\"reference external\" href=\"https://github.com/chef/chef/pull/3693\">https://github.com/chef/chef/pull/3693</a> for more information about these differences.</p> </div> <p>This should return <code class=\"docutils literal\">true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">remote_file '/tmp/bar' do\n  verify { 1 == 1}\nend</pre> <p>And this should return <code class=\"docutils literal\">true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">remote_file '/tmp/foo' do\n  verify do |path|\n    true\n  end\nend</pre> <p>Whereas, this should return <code class=\"docutils literal\">false</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">remote_file '/tmp/turtle' do\n  verify '/usr/bin/false'\nend</pre> <p class=\"last\">If a string or a block return <code class=\"docutils literal\">false</code>, the chef-client run will stop and an error is returned.</p> </dd> </dl>  <h3 id=\"atomic-file-updates\">Atomic File Updates</h3> <p>Atomic updates are used with <strong>file</strong>-based resources to help ensure that file updates can be made when updating a binary or if disk space runs out.</p> <p>Atomic updates are enabled by default. They can be managed globally using the <code class=\"docutils literal\">file_atomic_update</code> setting in the client.rb file. They can be managed on a per-resource basis using the <code class=\"docutils literal\">atomic_update</code> property that is available with the <strong>cookbook_file</strong>, <strong>file</strong>, <strong>remote_file</strong>, and <strong>template</strong> resources.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">On certain platforms, and after a file has been moved into place, the chef-client may modify file permissions to support features specific to those platforms. On platforms with SELinux enabled, the chef-client will fix up the security contexts after a file has been moved into the correct location by running the <code class=\"docutils literal\">restorecon</code> command. On the Microsoft Windows platform, the chef-client will create files so that ACL inheritance works as expected.</p> </div>   <h3 id=\"windows-file-security\">Windows File Security</h3> <p>To support Microsoft Windows security, the <strong>template</strong>, <strong>file</strong>, <strong>remote_file</strong>, <strong>cookbook_file</strong>, <strong>directory</strong>, and <strong>remote_directory</strong> resources support the use of inheritance and access control lists (ACLs) within recipes.</p> <p><strong>Access Control Lists (ACLs)</strong></p> <p>The <code class=\"docutils literal\">rights</code> property can be used in a recipe to manage access control lists (ACLs), which allow permissions to be given to multiple users and groups. Use the <code class=\"docutils literal\">rights</code> property can be used as many times as necessary; the chef-client will apply them to the file or directory as required. The syntax for the <code class=\"docutils literal\">rights</code> property is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">rights permission, principal, option_type =&gt; value</pre> <p>where</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">permission</code></dt> <dd>\n<p class=\"first\">Use to specify which rights are granted to the <code class=\"docutils literal\">principal</code>. The possible values are: <code class=\"docutils literal\">:read</code>, <code class=\"docutils literal\">:write</code>, <code class=\"docutils literal\">read_execute</code>, <code class=\"docutils literal\">:modify</code>, and <code class=\"docutils literal\">:full_control</code>.</p> <p>These permissions are cumulative. If <code class=\"docutils literal\">:write</code> is specified, then it includes <code class=\"docutils literal\">:read</code>. If <code class=\"docutils literal\">:full_control</code> is specified, then it includes both <code class=\"docutils literal\">:write</code> and <code class=\"docutils literal\">:read</code>.</p> <p class=\"last\">(For those who know the Microsoft Windows API: <code class=\"docutils literal\">:read</code> corresponds to <code class=\"docutils literal\">GENERIC_READ</code>; <code class=\"docutils literal\">:write</code> corresponds to <code class=\"docutils literal\">GENERIC_WRITE</code>; <code class=\"docutils literal\">:read_execute</code> corresponds to <code class=\"docutils literal\">GENERIC_READ</code> and <code class=\"docutils literal\">GENERIC_EXECUTE</code>; <code class=\"docutils literal\">:modify</code> corresponds to <code class=\"docutils literal\">GENERIC_WRITE</code>, <code class=\"docutils literal\">GENERIC_READ</code>, <code class=\"docutils literal\">GENERIC_EXECUTE</code>, and <code class=\"docutils literal\">DELETE</code>; <code class=\"docutils literal\">:full_control</code> corresponds to <code class=\"docutils literal\">GENERIC_ALL</code>, which allows a user to change the owner and other metadata about a file.)</p> </dd> <dt><code class=\"docutils literal\">principal</code></dt> <dd>Use to specify a group or user name. This is identical to what is entered in the login box for Microsoft Windows, such as <code class=\"docutils literal\">user_name</code>, <code class=\"docutils literal\">domain\\user_name</code>, or <code class=\"docutils literal\">user_name@fully_qualified_domain_name</code>. The chef-client does not need to know if a principal is a user or a group.</dd> <dt><code class=\"docutils literal\">option_type</code></dt> <dd>\n<p class=\"first\">A hash that contains advanced rights options. For example, the rights to a directory that only applies to the first level of children might look something like: <code class=\"docutils literal\">rights :write, 'domain\\group_name', :one_level_deep =&gt; true</code>. Possible option types:</p> <table class=\"last docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option Type</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:applies_to_children</code></td> <td>Specify how permissions are applied to children. Possible values: <code class=\"docutils literal\">true</code> to inherit both child directories and files; <code class=\"docutils literal\">false</code> to not inherit any child directories or files; <code class=\"docutils literal\">:containers_only</code> to inherit only child directories (and not files); <code class=\"docutils literal\">:objects_only</code> to recursively inherit files (and not child directories).</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:applies_to_self</code></td> <td>Indicates whether a permission is applied to the parent directory. Possible values: <code class=\"docutils literal\">true</code> to apply to the parent directory or file and its children; <code class=\"docutils literal\">false</code> to not apply only to child directories and files.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:one_level_deep</code></td> <td>Indicates the depth to which permissions will be applied. Possible values: <code class=\"docutils literal\">true</code> to apply only to the first level of children; <code class=\"docutils literal\">false</code> to apply to all children.</td> </tr> </tbody> </table> </dd> </dl> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource 'x.txt' do\n  rights :read, 'Everyone'\n  rights :write, 'domain\\group'\n  rights :full_control, 'group_name_or_user_name'\n  rights :full_control, 'user_name', :applies_to_children =&gt; true\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">rights :read, ['Administrators','Everyone']\nrights :full_control, 'Users', :applies_to_children =&gt; true\nrights :write, 'Sally', :applies_to_children =&gt; :containers_only, :applies_to_self =&gt; false, :one_level_deep =&gt; true</pre> <p>Some other important things to know when using the <code class=\"docutils literal\">rights</code> attribute:</p> <ul class=\"simple\"> <li>Only inherited rights remain. All existing explicit rights on the object are removed and replaced.</li> <li>If rights are not specified, nothing will be changed. The chef-client does not clear out the rights on a file or directory if rights are not specified.</li> <li>Changing inherited rights can be expensive. Microsoft Windows will propagate rights to all children recursively due to inheritance. This is a normal aspect of Microsoft Windows, so consider the frequency with which this type of action is necessary and take steps to control this type of action if performance is the primary consideration.</li> </ul> <p>Use the <code class=\"docutils literal\">deny_rights</code> property to deny specific rights to specific users. The ordering is independent of using the <code class=\"docutils literal\">rights</code> property. For example, it doesn’t matter if rights are granted to everyone is placed before or after <code class=\"docutils literal\">deny_rights :read, ['Julian', 'Lewis']</code>, both Julian and Lewis will be unable to read the document. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource 'x.txt' do\n  rights :read, 'Everyone'\n  rights :write, 'domain\\group'\n  rights :full_control, 'group_name_or_user_name'\n  rights :full_control, 'user_name', :applies_to_children =&gt; true\n  deny_rights :read, ['Julian', 'Lewis']\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deny_rights :full_control, ['Sally']</pre> <p><strong>Inheritance</strong></p> <p>By default, a file or directory inherits rights from its parent directory. Most of the time this is the preferred behavior, but sometimes it may be necessary to take steps to more specifically control rights. The <code class=\"docutils literal\">inherits</code> property can be used to specifically tell the chef-client to apply (or not apply) inherited rights from its parent directory.</p> <p>For example, the following example specifies the rights for a directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor' do\n  rights :read, 'MORDOR\\Minions'\n  rights :full_control, 'MORDOR\\Sauron'\nend</pre> <p>and then the following example specifies how to use inheritance to deny access to the child directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor\\mount_doom' do\n  rights :full_control, 'MORDOR\\Sauron'\n  inherits false # Sauron is the only person who should have any sort of access\nend</pre> <p>If the <code class=\"docutils literal\">deny_rights</code> permission were to be used instead, something could slip through unless all users and groups were denied.</p> <p>Another example also shows how to specify rights for a directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor' do\n  rights :read, 'MORDOR\\Minions'\n  rights :full_control, 'MORDOR\\Sauron'\n  rights :write, 'SHIRE\\Frodo' # Who put that there I didn't put that there\nend</pre> <p>but then not use the <code class=\"docutils literal\">inherits</code> property to deny those rights on a child directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor\\mount_doom' do\n  deny_rights :read, 'MORDOR\\Minions' # Oops, not specific enough\nend</pre> <p>Because the <code class=\"docutils literal\">inherits</code> property is not specified, the chef-client will default it to <code class=\"docutils literal\">true</code>, which will ensure that security settings for existing files remain unchanged.</p>   <h3 id=\"prevent-re-downloads\">Prevent Re-downloads</h3> <p>To prevent the chef-client from re-downloading files that are already present on a node, use one of the following attributes in a recipe: <code class=\"docutils literal\">use_conditional_get</code> (default) or <code class=\"docutils literal\">checksum</code>.</p> <ul class=\"simple\"> <li>The <code class=\"docutils literal\">use_conditional_get</code> attribute is the default behavior of the chef-client. If the remote file is located on a server that supports ETag and/or If-Modified-Since headers, the chef-client will use a conditional <code class=\"docutils literal\">GET</code> to determine if the file has been updated. If the file has been updated, the chef-client will re-download the file.</li> <li>The <code class=\"docutils literal\">checksum</code> attribute will ask the chef-client to compare the checksum for the local file to the one at the remote location. If they match, the chef-client will not re-download the file. Using a local checksum for comparison requires that the local checksum be the correct checksum.</li> </ul> <p>The desired approach just depends on the desired workflow. For example, if a node requires a new file every day, using the checksum approach would require that the local checksum be updated and/or verified every day as well, in order to ensure that the local checksum was the correct one. Using a conditional <code class=\"docutils literal\">GET</code> in this scenario will greatly simplify the management required to ensure files are being updated accurately.</p>    <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::File::RemoteFile</code>, <code class=\"docutils literal\">remote_file</code>\n</dt> <dd>The default provider for all platforms.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Transfer a file from a URL</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">remote_file '/tmp/testfile' do\n  source 'http://www.example.com/tempfiles/testfile'\n  mode '0755'\n  checksum '3a7dac00b1' # A SHA256 (or portion thereof) of the file.\nend</pre> <p><strong>Install a file from a remote location using bash</strong></p> <p>The following is an example of how to install the <code class=\"docutils literal\">foo123</code> module for Nginx. This module adds shell-style functionality to an Nginx configuration file and does the following:</p> <ul class=\"simple\"> <li>Declares three variables</li> <li>Gets the Nginx file from a remote location</li> <li>Installs the file using Bash to the path specified by the <code class=\"docutils literal\">src_filepath</code> variable</li> </ul> <pre class=\"highlight-ruby\" data-language=\"ruby\"># the following code sample is similar to the ``upload_progress_module``\n# recipe in the ``nginx`` cookbook:\n# https://github.com/chef-cookbooks/nginx\n\nsrc_filename = \"foo123-nginx-module-v#{\n  node['nginx']['foo123']['version']\n}.tar.gz\"\nsrc_filepath = \"#{Chef::Config['file_cache_path']}/#{src_filename}\"\nextract_path = \"#{\n  Chef::Config['file_cache_path']\n  }/nginx_foo123_module/#{\n  node['nginx']['foo123']['checksum']\n}\"\n\nremote_file 'src_filepath' do\n  source node['nginx']['foo123']['url']\n  checksum node['nginx']['foo123']['checksum']\n  owner 'root'\n  group 'root'\n  mode '0755'\nend\n\nbash 'extract_module' do\n  cwd ::File.dirname(src_filepath)\n  code &lt;&lt;-EOH\n    mkdir -p #{extract_path}\n    tar xzf #{src_filename} -C #{extract_path}\n    mv #{extract_path}/*/* #{extract_path}/\n    EOH\n  not_if { ::File.exists?(extract_path) }\nend</pre> <p><strong>Store certain settings</strong></p> <p>The following recipe shows how an attributes file can be used to store certain settings. An attributes file is located in the <code class=\"docutils literal\">attributes/</code> directory in the same cookbook as the recipe which calls the attributes file. In this example, the attributes file specifies certain settings for Python that are then used across all nodes against which this recipe will run.</p> <p>Python packages have versions, installation directories, URLs, and checksum files. An attributes file that exists to support this type of recipe would include settings like the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default['python']['version'] = '2.7.1'\n\nif python['install_method'] == 'package'\n  default['python']['prefix_dir'] = '/usr'\nelse\n  default['python']['prefix_dir'] = '/usr/local'\nend\n\ndefault['python']['url'] = 'http://www.python.org/ftp/python'\ndefault['python']['checksum'] = '80e387...85fd61'</pre> <p>and then the methods in the recipe may refer to these values. A recipe that is used to install Python will need to do the following:</p> <ul class=\"simple\"> <li>Identify each package to be installed (implied in this example, not shown)</li> <li>Define variables for the package <code class=\"docutils literal\">version</code> and the <code class=\"docutils literal\">install_path</code>\n</li> <li>Get the package from a remote location, but only if the package does not already exist on the target system</li> <li>Use the <strong>bash</strong> resource to install the package on the node, but only when the package is not already installed</li> </ul> <pre class=\"highlight-ruby\" data-language=\"ruby\">#  the following code sample comes from the ``oc-nginx`` cookbook on |github|: https://github.com/cookbooks/oc-nginx\n\nversion = node['python']['version']\ninstall_path = \"#{node['python']['prefix_dir']}/lib/python#{version.split(/(^\\d+\\.\\d+)/)[1]}\"\n\nremote_file \"#{Chef::Config[:file_cache_path]}/Python-#{version}.tar.bz2\" do\n  source \"#{node['python']['url']}/#{version}/Python-#{version}.tar.bz2\"\n  checksum node['python']['checksum']\n  mode '0755'\n  not_if { ::File.exists?(install_path) }\nend\n\nbash 'build-and-install-python' do\n  cwd Chef::Config[:file_cache_path]\n  code &lt;&lt;-EOF\n    tar -jxvf Python-#{version}.tar.bz2\n    (cd Python-#{version} &amp;&amp; ./configure #{configure_options})\n    (cd Python-#{version} &amp;&amp; make &amp;&amp; make install)\n  EOF\n  not_if { ::File.exists?(install_path) }\nend</pre> <p><strong>Use the platform_family? method</strong></p> <p>The following is an example of using the <code class=\"docutils literal\">platform_family?</code> method in the Recipe DSL to create a variable that can be used with other resources in the same recipe. In this example, <code class=\"docutils literal\">platform_family?</code> is being used to ensure that a specific binary is used for a specific platform before using the <strong>remote_file</strong> resource to download a file from a remote location, and then using the <strong>execute</strong> resource to install that file by running a command.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if platform_family?('rhel')\n  pip_binary = '/usr/bin/pip'\nelse\n  pip_binary = '/usr/local/bin/pip'\nend\n\nremote_file \"#{Chef::Config[:file_cache_path]}/distribute_setup.py\" do\n  source 'http://python-distribute.org/distribute_setup.py'\n  mode '0755'\n  not_if { File.exist?(pip_binary) }\nend\n\nexecute 'install-pip' do\n  cwd Chef::Config[:file_cache_path]\n  command &lt;&lt;-EOF\n    # command for installing Python goes here\n    EOF\n  not_if { File.exists?(pip_binary) }\nend</pre> <p>where a command for installing Python might look something like:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">#{node['python']['binary']} distribute_setup.py\n#{::File.dirname(pip_binary)}/easy_install pip</pre> <p><strong>Specify local Windows file path as a valid URI</strong></p> <p>When specifying a local Microsoft Windows file path as a valid file URI, an additional forward slash (<code class=\"docutils literal\">/</code>) is required. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">remote_file 'file:///c:/path/to/file' do\n  ...       # other attributes\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_remote_file.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_remote_file.html</a>\n  </p>\n</div>\n","12-9/resource_service":"<h1 id=\"service\">service</h1> <p>Use the <strong>service</strong> resource to manage a service.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>service</strong> resource block manages the state of a service. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service \"tomcat\" do\n  action :start\nend</pre> <p>will start the Apache Tomcat service.</p> <p>The full syntax for all of the properties that are available to the <strong>service</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'name' do\n  init_command               String\n  notifies                   # see description\n  pattern                    String\n  priority                   Integer, String, Hash\n  provider                   Chef::Provider::Service\n  reload_command             String\n  restart_command            String\n  service_name               String # defaults to 'name' if not specified\n  start_command              String\n  status_command             String\n  stop_command               String\n  subscribes                 # see description\n  supports                   Hash\n  timeout                    Integer # Microsoft Windows only\n  action                     Symbol # defaults to :nothing if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">service</code> is the resource; depending on the platform, more specific providers are run: <code class=\"docutils literal\">Chef::Provider::Service::Init</code>, <code class=\"docutils literal\">Chef::Provider::Service::Init::Debian</code>, <code class=\"docutils literal\">Chef::Provider::Service::Upstart</code>, <code class=\"docutils literal\">Chef::Provider::Service::Init::Freebsd</code>, <code class=\"docutils literal\">Chef::Provider::Service::Init::Gentoo</code>, <code class=\"docutils literal\">Chef::Provider::Service::Init::Redhat</code>, <code class=\"docutils literal\">Chef::Provider::Service::Solaris</code>, <code class=\"docutils literal\">Chef::Provider::Service::Windows</code>, or <code class=\"docutils literal\">Chef::Provider::Service::Macosx</code>\n</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block; when the <code class=\"docutils literal\">path</code> property is not specified, <code class=\"docutils literal\">name</code> is also the path to the directory, from the root</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">init_command</code>, <code class=\"docutils literal\">pattern</code>, <code class=\"docutils literal\">priority</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">reload_command</code>, <code class=\"docutils literal\">restart_command</code>, <code class=\"docutils literal\">service_name</code>, <code class=\"docutils literal\">start_command</code>, <code class=\"docutils literal\">status_command</code>, <code class=\"docutils literal\">stop_command</code>, <code class=\"docutils literal\">supports</code>, and <code class=\"docutils literal\">timeout</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:disable</code></dt> <dd>Disable a service. This action is equivalent to a <code class=\"docutils literal\">Disabled</code> startup type on the Microsoft Windows platform. This action is not supported when using System Resource Controller (SRC) on the AIX platform because System Resource Controller (SRC) does not have a standard mechanism for enabling and disabling services on system boot.</dd> <dt><code class=\"docutils literal\">:enable</code></dt> <dd>Enable a service at boot. This action is equivalent to an <code class=\"docutils literal\">Automatic</code> startup type on the Microsoft Windows platform. This action is not supported when using System Resource Controller (SRC) on the AIX platform because System Resource Controller (SRC) does not have a standard mechanism for enabling and disabling services on system boot.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Default. Do nothing with a service.</dd> <dt><code class=\"docutils literal\">:reload</code></dt> <dd>Reload the configuration for this service.</dd> <dt><code class=\"docutils literal\">:restart</code></dt> <dd>Restart a service.</dd> <dt><code class=\"docutils literal\">:start</code></dt> <dd>Start a service, and keep it running until stopped or disabled.</dd> <dt><code class=\"docutils literal\">:stop</code></dt> <dd>Stop a service.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">To mange a Microsoft Windows service with a <code class=\"docutils literal\">Manual</code> startup type, the <strong>windows_service</strong> resource must be used.</p> </div>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">init_command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The path to the init script that is associated with the service. Use <code class=\"docutils literal\">init_command</code> to prevent the need to specify overrides for the <code class=\"docutils literal\">start_command</code>, <code class=\"docutils literal\">stop_command</code>, and <code class=\"docutils literal\">restart_command</code> properties. When this property is not specified, the chef-client will use the default init command for the service provider being used.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">pattern</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The pattern to look for in the process table. Default value: <code class=\"docutils literal\">service_name</code>.</p> </dd> <dt><code class=\"docutils literal\">priority</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String, Hash</p> <p class=\"last\">Debian platform only. The relative priority of the program for start and shutdown ordering. May be an integer or a Hash. An integer is used to define the start run levels; stop run levels are then 100-integer. A Hash is used to define values for specific run levels. For example, <code class=\"docutils literal\">{ 2 =&gt; [:start, 20], 3 =&gt; [:stop, 55] }</code> will set a priority of twenty for run level two and a priority of fifty-five for run level three.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">reload_command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The command used to tell a service to reload its configuration.</p> </dd> <dt><code class=\"docutils literal\">restart_command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The command used to restart a service.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">service_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The name of the service. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">start_command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The command used to start a service.</p> </dd> <dt><code class=\"docutils literal\">status_command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The command used to check the run status for a service.</p> </dd> <dt><code class=\"docutils literal\">stop_command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The command used to stop a service.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">supports</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A list of properties that controls how the chef-client is to attempt to manage a service: <code class=\"docutils literal\">:restart</code>, <code class=\"docutils literal\">:reload</code>, <code class=\"docutils literal\">:status</code>. For <code class=\"docutils literal\">:restart</code>, the init script or other service provider can use a restart command; if <code class=\"docutils literal\">:restart</code> is not specified, the chef-client attempts to stop and then start a service. For <code class=\"docutils literal\">:reload</code>, the init script or other service provider can use a reload command. For <code class=\"docutils literal\">:status</code>, the init script or other service provider can use a status command to determine if the service is running; if <code class=\"docutils literal\">:status</code> is not specified, the chef-client attempts to match the <code class=\"docutils literal\">service_name</code> against the process table as a regular expression, unless a pattern is specified as a parameter property. Default value: <code class=\"docutils literal\">{ :restart =&gt; false, :reload =&gt; false, :status =&gt; false }</code> for all platforms (except for the Red Hat platform family, which defaults to <code class=\"docutils literal\">{ :restart =&gt; false, :reload =&gt; false, :status =&gt; true }</code>.)</p> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">Microsoft Windows platform only. The amount of time (in seconds) to wait before timing out. Default value: <code class=\"docutils literal\">60</code>.</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>The <strong>service</strong> resource does not have service-specific short names. This is because the chef-client identifies the platform at the start of every chef-client run based on data collected by Ohai. The chef-client looks up the platform, and then determines the correct provider for that platform. In certain situations, such as when more than one init system is available on a node, a specific provider may need to be identified by using the <code class=\"docutils literal\">provider</code> attribute and the long name for that provider.</p> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Service::Init</code>, <code class=\"docutils literal\">service</code>\n</dt> <dd>When this short name is used, the chef-client will determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Service::Aix</code>, <code class=\"docutils literal\">service</code>\n</dt> <dd>Default on the AIX platform. The provider that is used to start, stop, and restart services with System Resource Controller (SRC).</dd> <dt><code class=\"docutils literal\">Chef::Provider::Service::AixInit</code></dt> <dd>Use the long name—<code class=\"docutils literal\">Chef::Provider::Service::AixInit</code>—in a recipe to manage services with BSD-based init systems on the AIX platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Service::Init::Debian</code>, <code class=\"docutils literal\">service</code>\n</dt> <dd>The provider for the Debian and Ubuntu platforms.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Service::Init::Freebsd</code>, <code class=\"docutils literal\">service</code>\n</dt> <dd>The provider for the FreeBSD platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Service::Init::Gentoo</code>, <code class=\"docutils literal\">service</code>\n</dt> <dd>The provider for the Gentoo platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Service::Init::Redhat</code>, <code class=\"docutils literal\">service</code>\n</dt> <dd>The provider for the Red Hat and CentOS platforms.</dd> <dt><code class=\"docutils literal\">Chef::Provider::Service::Simple</code></dt> <dd>A provider that is used to create custom service providers by defining the custom provider as a sub-class of this provider. This provider should not be used in recipes as a value of the <code class=\"docutils literal\">provider</code> attribute.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Service::Solaris</code>, <code class=\"docutils literal\">service</code>\n</dt> <dd>The provider for the Solaris platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Service::Systemd</code>, <code class=\"docutils literal\">systemd</code>\n</dt> <dd>The provider that is used when systemd is available on the platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Service::Upstart</code>, <code class=\"docutils literal\">service</code>\n</dt> <dd>The provider that is used when Upstart is available on the platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Service::Windows</code>, <code class=\"docutils literal\">service</code>\n</dt> <dd>The provider for the Microsoft Windows platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Service::Macosx</code>, <code class=\"docutils literal\">service</code>\n</dt> <dd>The provider for the Mac OS X platform.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Start a service</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'example_service' do\n  action :start\nend</pre> <p><strong>Start a service, enable it</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'example_service' do\n  supports :status =&gt; true, :restart =&gt; true, :reload =&gt; true\n  action [ :enable, :start ]\nend</pre> <p><strong>Use a pattern</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'samba' do\n  pattern 'smbd'\n  action [:enable, :start]\nend</pre> <p><strong>Use the :nothing common action</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'memcached' do\n  action :nothing\n  supports :status =&gt; true, :start =&gt; true, :stop =&gt; true, :restart =&gt; true\nend</pre> <p><strong>Use the supports common attribute</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'apache' do\n  supports :restart =&gt; true, :reload =&gt; true\n  action :enable\nend</pre> <p><strong>Use the supports and providers common attributes</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'some_service' do\n  provider Chef::Provider::Service::Upstart\n  supports :status =&gt; true, :restart =&gt; true, :reload =&gt; true\n  action [ :enable, :start ]\nend</pre> <p><strong>Manage a service, depending on the node platform</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'example_service' do\n  case node['platform']\n  when 'centos','redhat','fedora'\n    service_name 'redhat_name'\n  else\n    service_name 'other_name'\n  end\n  supports :restart =&gt; true\n  action [ :enable, :start ]\nend</pre> <p><strong>Change a service provider, depending on the node platform</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'example_service' do\n  case node['platform']\n  when 'ubuntu'\n    if node['platform_version'].to_f &gt;= 9.10\n      provider Chef::Provider::Service::Upstart\n    end\n  end\n  action [:enable, :start]\nend</pre> <p><strong>Reload a service using a template</strong></p> <p>To reload a service based on a template, use the <strong>template</strong> and <strong>service</strong> resources together in the same recipe, similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/somefile' do\n  mode '0755'\n  source 'somefile.erb'\nend\n\nservice 'apache' do\n  supports :restart =&gt; true, :reload =&gt; true\n  action :enable\n  subscribes :reload, 'template[/tmp/somefile]', :immediately\nend</pre> <p>where the <code class=\"docutils literal\">subscribes</code> notification is used to reload the service using the template specified by the <strong>template</strong> resource.</p> <p><strong>Enable a service after a restart or reload</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'apache' do\n  supports :restart =&gt; true, :reload =&gt; true\n  action :enable\nend</pre> <p><strong>Set an IP address using variables and a template</strong></p> <p>The following example shows how the <strong>template</strong> resource can be used in a recipe to combine settings stored in an attributes file, variables within a recipe, and a template to set the IP addresses that are used by the Nginx service. The attributes file contains the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default['nginx']['dir'] = '/etc/nginx'</pre> <p>The recipe then does the following to:</p> <ul class=\"simple\"> <li>Declare two variables at the beginning of the recipe, one for the remote IP address and the other for the authorized IP address</li> <li>Use the <strong>service</strong> resource to restart and reload the Nginx service</li> <li>Load a template named <code class=\"docutils literal\">authorized_ip.erb</code> from the <code class=\"docutils literal\">/templates</code> directory that is used to set the IP address values based on the variables specified in the recipe</li> </ul> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.default['nginx']['remote_ip_var'] = 'remote_addr'\nnode.default['nginx']['authorized_ips'] = ['127.0.0.1/32']\n\nservice 'nginx' do\n  supports :status =&gt; true, :restart =&gt; true, :reload =&gt; true\nend\n\ntemplate 'authorized_ip' do\n  path \"#{node['nginx']['dir']}/authorized_ip\"\n  source 'modules/authorized_ip.erb'\n  owner 'root'\n  group 'root'\n  mode '0755'\n  variables(\n    :remote_ip_var =&gt; node['nginx']['remote_ip_var'],\n    :authorized_ips =&gt; node['nginx']['authorized_ips']\n  )\n\n  notifies :reload, 'service[nginx]', :immediately\nend</pre> <p>where the <code class=\"docutils literal\">variables</code> property tells the template to use the variables set at the beginning of the recipe and the <code class=\"docutils literal\">source</code> property is used to call a template file located in the cookbook’s <code class=\"docutils literal\">/templates</code> directory. The template file looks similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">geo $&lt;%= @remote_ip_var %&gt; $authorized_ip {\n  default no;\n  &lt;% @authorized_ips.each do |ip| %&gt;\n  &lt;%= \"#{ip} yes;\" %&gt;\n  &lt;% end %&gt;\n}</pre> <p><strong>Use a cron timer to manage a service</strong></p> <p>The following example shows how to install the crond application using two resources and a variable:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># the following code sample comes from the ``cron`` cookbook:\n# https://github.com/chef-cookbooks/cron\n\ncron_package = case node['platform']\n  when 'redhat', 'centos', 'scientific', 'fedora', 'amazon'\n    node['platform_version'].to_f &gt;= 6.0 ? 'cronie' : 'vixie-cron'\n  else\n    'cron'\n  end\n\npackage cron_package do\n  action :install\nend\n\nservice 'crond' do\n  case node['platform']\n  when 'redhat', 'centos', 'scientific', 'fedora', 'amazon'\n    service_name 'crond'\n  when 'debian', 'ubuntu', 'suse'\n    service_name 'cron'\n  end\n  action [:start, :enable]\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">cron_package</code> is a variable that is used to identify which platforms apply to which install packages</li> <li>the <strong>package</strong> resource uses the <code class=\"docutils literal\">cron_package</code> variable to determine how to install the crond application on various nodes (with various platforms)</li> <li>the <strong>service</strong> resource enables the crond application on nodes that have Red Hat, CentOS, Red Hat Enterprise Linux, Fedora, or Amazon Web Services (AWS), and the cron service on nodes that run Debian, Ubuntu, or openSUSE</li> </ul> <p><strong>Restart a service, and then notify a different service</strong></p> <p>The following example shows how start a service named <code class=\"docutils literal\">example_service</code> and immediately notify the Nginx service to restart.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'example_service' do\n  action :start\n  provider Chef::Provider::Service::Init\n  notifies :restart, 'service[nginx]', :immediately\nend</pre> <p>where by using the default <code class=\"docutils literal\">provider</code> for the <strong>service</strong>, the recipe is telling the chef-client to determine the specific provider to be used during the chef-client run based on the platform of the node on which the recipe will run.</p> <p><strong>Stop a service, do stuff, and then restart it</strong></p> <p>The following example shows how to use the <strong>execute</strong>, <strong>service</strong>, and <strong>mount</strong> resources together to ensure that a node running on Amazon EC2 is running MySQL. This example does the following:</p> <ul class=\"simple\"> <li>Checks to see if the Amazon EC2 node has MySQL</li> <li>If the node has MySQL, stops MySQL</li> <li>Installs MySQL</li> <li>Mounts the node</li> <li>Restarts MySQL</li> </ul> <pre class=\"highlight-ruby\" data-language=\"ruby\"># the following code sample comes from the ``server_ec2``\n# recipe in the following cookbook:\n# https://github.com/chef-cookbooks/mysql\n\nif (node.attribute?('ec2') &amp;&amp; ! FileTest.directory?(node['mysql']['ec2_path']))\n\n  service 'mysql' do\n    action :stop\n  end\n\n  execute 'install-mysql' do\n    command \"mv #{node['mysql']['data_dir']} #{node['mysql']['ec2_path']}\"\n    not_if do FileTest.directory?(node['mysql']['ec2_path']) end\n  end\n\n  [node['mysql']['ec2_path'], node['mysql']['data_dir']].each do |dir|\n    directory dir do\n      owner 'mysql'\n      group 'mysql'\n    end\n  end\n\n  mount node['mysql']['data_dir'] do\n    device node['mysql']['ec2_path']\n    fstype 'none'\n    options 'bind,rw'\n    action [:mount, :enable]\n  end\n\n  service 'mysql' do\n    action :start\n  end\n\nend</pre> <p>where</p> <ul class=\"simple\"> <li>the two <strong>service</strong> resources are used to stop, and then restart the MySQL service</li> <li>the <strong>execute</strong> resource is used to install MySQL</li> <li>the <strong>mount</strong> resource is used to mount the node and enable MySQL</li> </ul> <p><strong>Control a service using the execute resource</strong></p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">This is an example of something that should NOT be done. Use the <strong>service</strong> resource to control a service, not the <strong>execute</strong> resource.</p> </div> <p>Do something like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'tomcat' do\n  action :start\nend</pre> <p>and NOT something like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'start-tomcat' do\n  command '/etc/init.d/tomcat6 start'\n  action :run\nend</pre> <p>There is no reason to use the <strong>execute</strong> resource to control a service because the <strong>service</strong> resource exposes the <code class=\"docutils literal\">start_command</code> property directly, which gives a recipe full control over the command issued in a much cleaner, more direct manner.</p> <p><strong>Enable a service on AIX using the mkitab command</strong></p> <p>The <strong>service</strong> resource does not support using the <code class=\"docutils literal\">:enable</code> and <code class=\"docutils literal\">:disable</code> actions with resources that are managed using System Resource Controller (SRC). This is because System Resource Controller (SRC) does not have a standard mechanism for enabling and disabling services on system boot.</p> <p>One approach for enabling or disabling services that are managed by System Resource Controller (SRC) is to use the <strong>execute</strong> resource to invoke <code class=\"docutils literal\">mkitab</code>, and then use that command to enable or disable the service.</p> <p>The following example shows how to install a service:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute \"install #{node['chef_client']['svc_name']} in SRC\" do\n  command \"mkssys -s #{node['chef_client']['svc_name']}\n                  -p #{node['chef_client']['bin']}\n                  -u root\n                  -S\n                  -n 15\n                  -f 9\n                  -o #{node['chef_client']['log_dir']}/client.log\n                  -e #{node['chef_client']['log_dir']}/client.log -a '\n                  -i #{node['chef_client']['interval']}\n                  -s #{node['chef_client']['splay']}'\"\n  not_if \"lssrc -s #{node['chef_client']['svc_name']}\"\n  action :run\nend</pre> <p>and then enable it using the <code class=\"docutils literal\">mkitab</code> command:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute \"enable #{node['chef_client']['svc_name']}\" do\n  command \"mkitab '#{node['chef_client']['svc_name']}:2:once:/usr/bin/startsrc\n                  -s #{node['chef_client']['svc_name']} &gt; /dev/console 2&gt;&amp;1'\"\n  not_if \"lsitab #{node['chef_client']['svc_name']}\"\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_service.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_service.html</a>\n  </p>\n</div>\n","12-9/resource_user":"<h1 id=\"user\">user</h1> <p>Use the <strong>user</strong> resource to add users, update existing users, remove users, and to lock/unlock user passwords.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">System attributes are collected by Ohai at the start of every chef-client run. By design, the actions available to the <strong>user</strong> resource are processed <strong>after</strong> the start of the chef-client run. This means that system attributes added or modified by the <strong>user</strong> resource during the chef-client run must be reloaded before they can be available to the chef-client. These system attributes can be reloaded in two ways: by picking up the values at the start of the (next) chef-client run or by using the <a class=\"reference external\" href=\"https://docs.chef.io/resource_ohai.html\">ohai resource</a> to reload the system attributes during the current chef-client run.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>user</strong> resource block manages users on a node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">user 'a user' do\n  comment 'A random user'\n  uid '1234'\n  gid '1234'\n  home '/home/random'\n  shell '/bin/bash'\n  password '$1$JJsvHslasdfjVEroftprNn4JHtDi'\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>user</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">user 'name' do\n  comment                    String\n  force                      TrueClass, FalseClass # see description\n  gid                        String, Integer\n  home                       String\n  iterations                 Integer\n  manage_home                TrueClass, FalseClass\n  non_unique                 TrueClass, FalseClass\n  notifies                   # see description\n  password                   String\n  provider                   Chef::Provider::User\n  salt                       String\n  shell                      String\n  supports                   Hash\n  subscribes                 # see description\n  system                     TrueClass, FalseClass\n  uid                        String, Integer\n  username                   String # defaults to 'name' if not specified\n  action                     Symbol # defaults to :create if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">user</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">comment</code>, <code class=\"docutils literal\">force</code>, <code class=\"docutils literal\">gid</code>, <code class=\"docutils literal\">home</code>, <code class=\"docutils literal\">iterations</code>, <code class=\"docutils literal\">manage_home</code>, <code class=\"docutils literal\">non_unique</code>, <code class=\"docutils literal\">password</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">salt</code>, <code class=\"docutils literal\">shell</code>, <code class=\"docutils literal\">supports</code>, <code class=\"docutils literal\">system</code>, <code class=\"docutils literal\">uid</code>, and <code class=\"docutils literal\">username</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:create</code></dt> <dd>Default. Create a user with given properties. If a user already exists (but does not match), update that user to match.</dd> <dt><code class=\"docutils literal\">:lock</code></dt> <dd>Lock a user’s password.</dd> <dt><code class=\"docutils literal\">:manage</code></dt> <dd>Manage an existing user. This action does nothing if the user does not exist.</dd> <dt><code class=\"docutils literal\">:modify</code></dt> <dd>Modify an existing user. This action raises an exception if the user does not exist.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a user.</dd> <dt><code class=\"docutils literal\">:unlock</code></dt> <dd>Unlock a user’s password.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">comment</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) comments about the user.</p> </dd> <dt><code class=\"docutils literal\">force</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p>Force the removal of a user. May be used only with the <code class=\"docutils literal\">:remove</code> action.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Using this property may leave the system in an inconsistent state. For example, a user account will be removed even if the user is logged in. A user’s home directory will be removed, even if that directory is shared by multiple users.</p> </div> </dd> <dt><code class=\"docutils literal\">gid</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The identifier for the group.</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The <code class=\"docutils literal\">group</code> property is an alias of the <code class=\"docutils literal\">gid</code> property.</p> </dd> <dt><code class=\"docutils literal\">home</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The location of the home directory.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">iterations</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">Mac OS X platform only, 10.8 (or higher). The number of iterations for a password with a SALTED-SHA512-PBKDF2 shadow hash.</p> </dd> <dt><code class=\"docutils literal\">manage_home</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p>Manage a user’s home directory.</p> <p>With the <code class=\"docutils literal\">:create</code> action, a user’s home directory is created based on <code class=\"docutils literal\">HOME_DIR</code>. If the home directory is missing, it is created unless <code class=\"docutils literal\">CREATE_HOME</code> in <code class=\"docutils literal\">/etc/login.defs</code> is set to <code class=\"docutils literal\">no</code>. When created, a skeleton set of files and sub-directories is also created in the home directory.</p> <p class=\"last\">With the <code class=\"docutils literal\">:modify</code> action, a user’s home directory is moved to <code class=\"docutils literal\">HOME_DIR</code>. If the home directory is missing, it is created unless <code class=\"docutils literal\">CREATE_HOME</code> in <code class=\"docutils literal\">/etc/login.defs</code> is set to <code class=\"docutils literal\">no</code>. The contents of the user’s home directory are moved to the new location.</p> </dd> <dt><code class=\"docutils literal\">non_unique</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Create a duplicate (non-unique) user account.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">password</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The password shadow hash. This property requires that <code class=\"docutils literal\">ruby-shadow</code> be installed. This is part of the Debian package: <code class=\"docutils literal\">libshadow-ruby1.8</code>.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">salt</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Mac OS X platform only, 10.7 or higher. The salt value for a password shadow hash. Mac OS X version 10.7 uses SALTED-SHA512 and version 10.8 (and higher) uses SALTED-SHA512-PBKDF2 to calculate password shadow hashes.</p> </dd> <dt><code class=\"docutils literal\">shell</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The login shell.</p> </dd> <dt><code class=\"docutils literal\">supports</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A Mash where keys represent features and values are booleans that indicate if that feature is supported. Default value: <code class=\"docutils literal\">:manage_home =&gt; false, :non_unique =&gt; false</code>.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">system</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Create a system user. This property may be used with <code class=\"docutils literal\">useradd</code> as the provider to create a system user which passes the <code class=\"docutils literal\">-r</code> flag to <code class=\"docutils literal\">useradd</code>.</p> </dd> <dt><code class=\"docutils literal\">uid</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The numeric user identifier.</p> </dd> <dt><code class=\"docutils literal\">username</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The name of the user. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> </dl>   <h2 id=\"supported-features\">Supported Features</h2> <p>The <code class=\"docutils literal\">supports</code> attribute allows a list of supported features to be identified. There are two features of note:</p> <ul> <li>\n<p class=\"first\"><code class=\"docutils literal\">:manage_home</code> indicates whether a user’s home directory will be created when the user is created. When the <code class=\"docutils literal\">Useradd</code> provider is used, <code class=\"docutils literal\">-dm</code> wil be passed to <code class=\"docutils literal\">useradd</code> (when the <code class=\"docutils literal\">:create</code> action is used) and <code class=\"docutils literal\">-d</code> will be passed to <code class=\"docutils literal\">usermod</code> (when the <code class=\"docutils literal\">:manage</code> or <code class=\"docutils literal\">:modify</code> actions are used). If <code class=\"docutils literal\">supports :manage_home=&gt;true</code>, the <strong>user</strong> resource passes the <code class=\"docutils literal\">-d</code> and <code class=\"docutils literal\">-m</code> parameters together (i.e. <code class=\"docutils literal\">-dm</code>) to <code class=\"docutils literal\">usermod</code>.</p> <p>When the <code class=\"docutils literal\">Windows</code> provider is used, Microsoft Windows does not create a home directory for a user until that user logs on for the first time; specifying the home directory does not have any effect as to where Microsoft Windows ultimately places the home directory.</p> </li> <li>\n<p class=\"first\"><code class=\"docutils literal\">:non_unique</code> indicates whether non-unique UIDs are allowed. This option is currently unused by the existing providers.</p> </li> </ul>   <h2 id=\"password-shadow-hash\">Password Shadow Hash</h2> <p>There are a number of encryption options and tools that can be used to create a password shadow hash. In general, using a strong encryption method like SHA-512 and the <code class=\"docutils literal\">passwd</code> command in the OpenSSL toolkit is a good approach, however the encryption options and tools that are available may be different from one distribution to another. The following examples show how the command line can be used to create a password shadow hash. When using the <code class=\"docutils literal\">passwd</code> command in the OpenSSL tool:</p> <pre class=\"highlight-bash\" data-language=\"bash\">openssl passwd -1 \"theplaintextpassword\"</pre> <p>When using <code class=\"docutils literal\">mkpasswd</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">mkpasswd -m sha-512</pre> <p>For more information:</p> <ul class=\"simple\"> <li><a class=\"reference external\" href=\"http://www.openssl.org/docs/apps/passwd.html\">http://www.openssl.org/docs/apps/passwd.html</a></li> <li>Check the local documentation or package repository for the distribution that is being used. For example, on Ubuntu 9.10-10.04, the <code class=\"docutils literal\">mkpasswd</code> package is required and on Ubuntu 10.10+ the <code class=\"docutils literal\">whois</code> package is required.</li> </ul>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::User::Useradd</code>, <code class=\"docutils literal\">user</code>\n</dt> <dd>The default provider for the <strong>user</strong> resource.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::User::Pw</code>, <code class=\"docutils literal\">user</code>\n</dt> <dd>The provider for the FreeBSD platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::User::Dscl</code>, <code class=\"docutils literal\">user</code>\n</dt> <dd>The provider for the Mac OS X platform.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::User::Windows</code>, <code class=\"docutils literal\">user</code>\n</dt> <dd>The provider for all Microsoft Windows platforms.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Create a user named “random”</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">user 'random' do\n  supports :manage_home =&gt; true\n  comment 'User Random'\n  uid '1234'\n  gid '1234'\n  home '/home/random'\n  shell '/bin/bash'\n  password '$1$JJsvHslV$szsCjVEroftprNn4JHtDi'\nend</pre> <p><strong>Create a system user</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">user 'systemguy' do\n  comment 'system guy'\n  system true\n  shell '/bin/false'\nend</pre> <p><strong>Create a system user with a variable</strong></p> <p>The following example shows how to create a system user. In this instance, the <code class=\"docutils literal\">home</code> value is calculated and stored in a variable called <code class=\"docutils literal\">user_home</code> which sets the user’s <code class=\"docutils literal\">home</code> attribute.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">user_home = \"/home/#{node['cookbook_name']['user']}\"\n\nuser node['cookbook_name']['user'] do\n  gid node['cookbook_name']['group']\n  shell '/bin/bash'\n  home user_home\n  system true\n  action :create\nend</pre> <p><strong>Use SALTED-SHA512 passwords</strong></p> <p>Mac OS X 10.7 calculates the password shadow hash using SALTED-SHA512. The length of the shadow hash value is 68 bytes, the salt value is the first 4 bytes, with the remaining 64 being the shadow hash itself. The following code will calculate password shadow hashes for Mac OS X 10.7:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">password = 'my_awesome_password'\nsalt = OpenSSL::Random.random_bytes(4)\nencoded_password = OpenSSL::Digest::SHA512.hexdigest(salt + password)\nshadow_hash = salt.unpack('H*').first + encoded_password</pre> <p>Use the calculated password shadow hash with the <strong>user</strong> resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">user 'my_awesome_user' do\n  password 'c9b3bd....d843'  # Length: 136\nend</pre> <p><strong>Use SALTED-SHA512-PBKDF2 passwords</strong></p> <p>Mac OS X 10.8 (and higher) calculates the password shadow hash using SALTED-SHA512-PBKDF2. The length of the shadow hash value is 128 bytes, the salt value is 32 bytes, and an integer specifies the number of iterations. The following code will calculate password shadow hashes for Mac OS X 10.8 (and higher):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">password = 'my_awesome_password'\nsalt = OpenSSL::Random.random_bytes(32)\niterations = 25000 # Any value above 20k should be fine.\n\nshadow_hash = OpenSSL::PKCS5::pbkdf2_hmac(\n  password,\n  salt,\n  iterations,\n  128,\n  OpenSSL::Digest::SHA512.new\n).unpack('H*').first\nsalt_value = salt.unpack('H*').first</pre> <p>Use the calculated password shadow hash with the <strong>user</strong> resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">user 'my_awesome_user' do\n  password 'cbd1a....fc843'  # Length: 256\n  salt 'bd1a....fc83'        # Length: 64\n  iterations 25000\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_user.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_user.html</a>\n  </p>\n</div>\n","12-9/resource_windows_service":"<h1 id=\"windows-service\">windows_service</h1> <p>Use the <strong>windows_service</strong> resource to manage a service on the Microsoft Windows platform.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>windows_service</strong> resource block manages the state of a service on a machine that is running Microsoft Windows. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">windows_service 'BITS' do\n  action :configure_startup\n  startup_type :manual\nend</pre> <p>The full syntax for all of the properties that are available to the <strong>windows_service</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">windows_service 'name' do\n  init_command               String\n  notifies                   # see description\n  pattern                    String\n  provider                   Chef::Provider::Service::Windows\n  reload_command             String\n  restart_command            String\n  run_as_password            String\n  run_as_user                String\n  service_name               String # defaults to 'name' if not specified\n  start_command              String\n  startup_type               Symbol\n  status_command             String\n  stop_command               String\n  subscribes                 # see description\n  supports                   Hash\n  timeout                    Integer\n  action                     Symbol # defaults to :nothing if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">windows_service</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">init_command</code>, <code class=\"docutils literal\">pattern</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">reload_command</code>, <code class=\"docutils literal\">restart_command</code>, <code class=\"docutils literal\">run_as_password</code>, <code class=\"docutils literal\">run_as_user</code>, <code class=\"docutils literal\">service_name</code>, <code class=\"docutils literal\">start_command</code>, <code class=\"docutils literal\">startup_type</code>, <code class=\"docutils literal\">status_command</code>, <code class=\"docutils literal\">stop_command</code>, <code class=\"docutils literal\">supports</code>, and <code class=\"docutils literal\">timeout</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:configure_startup</code></dt> <dd>Configure a service based on the value of the <code class=\"docutils literal\">startup_type</code> property.</dd> <dt><code class=\"docutils literal\">:disable</code></dt> <dd>Disable a service. This action is equivalent to a <code class=\"docutils literal\">Disabled</code> startup type on the Microsoft Windows platform.</dd> <dt><code class=\"docutils literal\">:enable</code></dt> <dd>Enable a service at boot. This action is equivalent to an <code class=\"docutils literal\">Automatic</code> startup type on the Microsoft Windows platform.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Default. Do nothing with a service.</dd> <dt><code class=\"docutils literal\">:reload</code></dt> <dd>Reload the configuration for this service.</dd> <dt><code class=\"docutils literal\">:restart</code></dt> <dd>Restart a service.</dd> <dt><code class=\"docutils literal\">:start</code></dt> <dd>Start a service, and keep it running until stopped or disabled.</dd> <dt><code class=\"docutils literal\">:stop</code></dt> <dd>Stop a service.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">init_command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The path to the init script that is associated with the service. This is typically <code class=\"docutils literal\">/etc/init.d/SERVICE_NAME</code>. The <code class=\"docutils literal\">init_command</code> property can be used to prevent the need to specify overrides for the <code class=\"docutils literal\">start_command</code>, <code class=\"docutils literal\">stop_command</code>, and <code class=\"docutils literal\">restart_command</code> attributes. Default value: <code class=\"docutils literal\">nil</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">pattern</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The pattern to look for in the process table. Default value: <code class=\"docutils literal\">service_name</code>.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">reload_command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The command used to tell a service to reload its configuration.</p> </dd> <dt><code class=\"docutils literal\">restart_command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The command used to restart a service.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">run_as_password</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The password for the user specified by <code class=\"docutils literal\">run_as_user</code>.</p> </dd> <dt><code class=\"docutils literal\">run_as_user</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The user under which a Microsoft Windows service runs.</p> </dd> <dt><code class=\"docutils literal\">service_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The name of the service. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">start_command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The command used to start a service.</p> </dd> <dt><code class=\"docutils literal\">startup_type</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol</p> <p class=\"last\">Use to specify the startup type for a Microsoft Windows service. Possible values: <code class=\"docutils literal\">:automatic</code>, <code class=\"docutils literal\">:disabled</code>, or <code class=\"docutils literal\">:manual</code>. Default value: <code class=\"docutils literal\">:automatic</code>.</p> </dd> <dt><code class=\"docutils literal\">status_command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The command used to check the run status for a service.</p> </dd> <dt><code class=\"docutils literal\">stop_command</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The command used to stop a service.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">supports</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A list of properties that controls how the chef-client is to attempt to manage a service: <code class=\"docutils literal\">:restart</code>, <code class=\"docutils literal\">:reload</code>, <code class=\"docutils literal\">:status</code>. For <code class=\"docutils literal\">:restart</code>, the init script or other service provider can use a restart command; if <code class=\"docutils literal\">:restart</code> is not specified, the chef-client attempts to stop and then start a service. For <code class=\"docutils literal\">:reload</code>, the init script or other service provider can use a reload command. For <code class=\"docutils literal\">:status</code>, the init script or other service provider can use a status command to determine if the service is running; if <code class=\"docutils literal\">:status</code> is not specified, the chef-client attempts to match the <code class=\"docutils literal\">service_name</code> against the process table as a regular expression, unless a pattern is specified as a parameter property. Default value: <code class=\"docutils literal\">{ :restart =&gt; false, :reload =&gt; false, :status =&gt; false }</code> for all platforms (except for the Red Hat platform family, which defaults to <code class=\"docutils literal\">{ :restart =&gt; false, :reload =&gt; false, :status =&gt; true }</code>.)</p> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out. Default value: <code class=\"docutils literal\">60</code>.</p> </dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Start a service manually</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">windows_service 'BITS' do\n  action :configure_startup\n  startup_type :manual\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_windows_service.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_windows_service.html</a>\n  </p>\n</div>\n","12-9/knife_configure":"<h1 id=\"knife-configure\">knife configure</h1> <p>Use the <code class=\"docutils literal\">knife configure</code> subcommand to create the knife.rb and client.rb files so that they can be distributed to workstations and nodes.</p>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax when creating a knife.rb file:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife configure (options)</pre> <p>and the following syntax when creating a client.rb file:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife configure client DIRECTORY</pre>   <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This subcommand has the following options for use when configuring a knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--admin-client-name NAME</code></dt> <dd>The name of the client, typically the name of the admin client.</dd> <dt><code class=\"docutils literal\">--admin-client-key PATH</code></dt> <dd>The path to the private key used by the client, typically a file named <code class=\"docutils literal\">admin.pem</code>.</dd> <dt>\n<code class=\"docutils literal\">-i</code>, <code class=\"docutils literal\">--initial</code>\n</dt> <dd>Create a API client, typically an administrator client on a freshly-installed Chef server.</dd> <dt>\n<code class=\"docutils literal\">-r REPO</code>, <code class=\"docutils literal\">--repository REPO</code>\n</dt> <dd>The path to the chef-repo.</dd> <dt><code class=\"docutils literal\">--validation-client-name NAME</code></dt> <dd>The name of the validation client, typically a client named chef-validator.</dd> <dt><code class=\"docutils literal\">--validation-key PATH</code></dt> <dd>The path to the validation key used by the client, typically a file named chef-validator.pem.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Configure knife.rb</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife configure</pre> <p><strong>Configure client.rb</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife configure client '/directory'</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_configure.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_configure.html</a>\n  </p>\n</div>\n","12-9/resource_windows_package":"<h1 id=\"windows-package\">windows_package</h1> <p>Use the <strong>windows_package</strong> resource to manage Microsoft Installer Package (MSI) packages for the Microsoft Windows platform.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This resource effectively replaces the <code class=\"docutils literal\">windows_package</code> resource found in the <strong>windows</strong> cookbook by moving that functionality into the chef-client. The <strong>windows</strong> cookbook may still be used, but in that situation use the generic <strong>package</strong> resource instead of the <strong>windows_package</strong> resource.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>windows_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>windows_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">windows_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>windows_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">windows_package 'name' do\n  checksum                   String\n  installer_type             Symbol\n  notifies                   # see description\n  options                    String\n  provider                   Chef::Provider::Package::Windows\n  remote_file_attributes     Hash\n  returns                    String, Integer, Array\n  source                     String # defaults to 'name' if not specified\n  subscribes                 # see description\n  timeout                    String, Integer\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">windows_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">checksum</code>, <code class=\"docutils literal\">installer_type</code>, <code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">remote_file_attributes</code>, <code class=\"docutils literal\">returns</code>, <code class=\"docutils literal\">source</code>, and <code class=\"docutils literal\">timeout</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">checksum</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The SHA-256 checksum of the file. Use to prevent a file from being re-downloaded. When the local file matches the checksum, the chef-client does not download it. Use when a URL is specified by the <code class=\"docutils literal\">source</code> property.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">installer_type</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol</p> <p class=\"last\">A symbol that specifies the type of package. Possible values: <code class=\"docutils literal\">:custom</code> (such as installing a non-.msi file that embeds an .msi-based installer), <code class=\"docutils literal\">:inno</code> (Inno Setup), <code class=\"docutils literal\">:installshield</code> (InstallShield), <code class=\"docutils literal\">:msi</code> (Microsoft Installer Package (MSI)), <code class=\"docutils literal\">:nsis</code> (Nullsoft Scriptable Install System (NSIS)), <code class=\"docutils literal\">:wise</code> (Wise).</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">remote_file_attributes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A package at a remote location define as a Hash of properties that modifes the properties of the <strong>remote_file</strong> resource.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">returns</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer, Array</p> <p class=\"last\">A comma-delimited list of return codes that indicate the success or failure of the command that was run remotely. This code signals a successful <code class=\"docutils literal\">:install</code> action. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p>Optional. The path to a package in the local file system. The location of the package may be at a URL. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> <p>If the <code class=\"docutils literal\">source</code> property is not specified, the package name MUST be exactly the same as the display name found in <strong>Add/Remove programs</strong> or exacty the same as the <code class=\"docutils literal\">DisplayName</code> property in the appropriate registry key:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\nHKEY_LOCAL_MACHINE\\Software\\Wow6464Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall</pre> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If there are multiple versions of a package installed with the same display name, all of those packages will be removed unless a version is provided in the <code class=\"docutils literal\">version</code> property or unless it can be discovered in the installer file specified by the <code class=\"docutils literal\">source</code> property.</p> </div> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out. Default value: <code class=\"docutils literal\">600</code> (seconds).</p> </dd> </dl>   <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Windows</code>, <code class=\"docutils literal\">windows_package</code>\n</dt> <dd>The provider for the Microsoft Windows platform.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">windows_package '7zip' do\n  action :install\n  source 'C:\\7z920.msi'\nend</pre> <p><strong>Specify a URL for the source attribute</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">windows_package '7zip' do\n  source 'http://www.7-zip.org/a/7z938-x64.msi'\nend</pre> <p><strong>Specify path and checksum</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">windows_package '7zip' do\n  source 'http://www.7-zip.org/a/7z938-x64.msi'\n  checksum '7c8e873991c82ad9cfc123415254ea6101e9a645e12977dcd518979e50fdedf3'\nend</pre> <p><strong>Modify remote_file resource attributes</strong></p> <p>The <strong>windows_package</strong> resource may specify a package at a remote location using the <code class=\"docutils literal\">remote_file_attributes</code> property. This uses the <strong>remote_file</strong> resource to download the contents at the specified URL and passes in a Hash that modifes the properties of the <a class=\"reference external\" href=\"https://docs.chef.io/resource_remote_file.html\">remote_file resource</a>.</p> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">windows_package '7zip' do\n  source 'http://www.7-zip.org/a/7z938-x64.msi'\n  remote_file_attributes ({\n    :path =&gt; 'C:\\\\7zip.msi',\n    :checksum =&gt; '7c8e873991c82ad9cfc123415254ea6101e9a645e12977dcd518979e50fdedf3'\n  })\nend</pre> <p><strong>Download a nsis (Nullsoft) package resource</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">windows_package 'Mercurial 3.6.1 (64-bit)' do\n  source 'http://mercurial.selenic.com/release/windows/Mercurial-3.6.1-x64.exe'\n  checksum 'febd29578cb6736163d232708b834a2ddd119aa40abc536b2c313fc5e1b5831d'\nend</pre> <p><strong>Download a custom package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">windows_package 'Microsoft Visual C++ 2005 Redistributable' do\n  source 'https://download.microsoft.com/download/6/B/B/6BB661D6-A8AE-4819-B79F-236472F6070C/vcredist_x86.exe'\n  installer_type :custom\n  options '/Q'\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_windows_package.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_windows_package.html</a>\n  </p>\n</div>\n","12-9/resource_yum":"<h1 id=\"yum-package\">yum_package</h1> <p>Use the <strong>yum_package</strong> resource to install, upgrade, and remove packages with Yum for the Red Hat and CentOS platforms. The <strong>yum_package</strong> resource is able to resolve <code class=\"docutils literal\">provides</code> data for packages much like Yum can do when it is run from the command line. This allows a variety of options for installing packages, like minimum versions, virtual provides, and library names.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Support for using file names to install packages (as in <code class=\"docutils literal\">yum_package \"/bin/sh\"</code>) is not available because the volume of data required to parse for this is excessive.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In many cases, it is better to use the <strong>package</strong> resource instead of this one. This is because when the <strong>package</strong> resource is used in a recipe, the chef-client will use details that are collected by Ohai at the start of the chef-client run to determine the correct package application. Using the <strong>package</strong> resource allows a recipe to be authored in a way that allows it to be used across many platforms.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>yum_package</strong> resource block manages a package on a node, typically by installing it. The simplest use of the <strong>yum_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_package 'package_name'</pre> <p>which will install the named package using all of the default options and the default action (<code class=\"docutils literal\">:install</code>).</p> <p>The full syntax for all of the properties that are available to the <strong>yum_package</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_package 'name' do\n  allow_downgrade            TrueClass, FalseClass\n  arch                       String, Array\n  flush_cache                Array\n  notifies                   # see description\n  options                    String\n  package_name               String, Array # defaults to 'name' if not specified\n  provider                   Chef::Provider::Package::Yum\n  source                     String\n  subscribes                 # see description\n  timeout                    String, Integer\n  version                    String, Array\n  action                     Symbol # defaults to :install if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">yum_package</code> tells the chef-client to manage a package</li> <li>\n<code class=\"docutils literal\">'name'</code> is the name of the package</li> <li>\n<code class=\"docutils literal\">:action</code> identifies which steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">allow_downgrade</code>, <code class=\"docutils literal\">arch</code>, <code class=\"docutils literal\">flush_cache</code>, <code class=\"docutils literal\">options</code>, <code class=\"docutils literal\">package_name</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">timeout</code>, and <code class=\"docutils literal\">version</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:install</code></dt> <dd>Default. Install a package. If a version is specified, install the specified version of the package.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:purge</code></dt> <dd>Purge a package. This action typically removes the configuration files as well as the package.</dd> <dt><code class=\"docutils literal\">:remove</code></dt> <dd>Remove a package.</dd> <dt><code class=\"docutils literal\">:upgrade</code></dt> <dd>Install a package and/or ensure that a package is the latest version. This action will ignore the <code class=\"docutils literal\">version</code> attribute.</dd> </dl>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">allow_downgrade</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Downgrade a package to satisfy requested version requirements.</p> </dd> <dt><code class=\"docutils literal\">arch</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String</p> <p class=\"last\">The architecture of the package to be installed or upgraded. This value can also be passed as part of the package name.</p> </dd> <dt><code class=\"docutils literal\">flush_cache</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Array</p> <p>Flush the in-memory cache before or after a Yum operation that installs, upgrades, or removes a package. Default value: <code class=\"docutils literal\">[ :before, :after ]</code>. The value may also be a Hash: <code class=\"docutils literal\">( { :before =&gt; true/false, :after =&gt; true/false } )</code>.</p> <p>Yum automatically synchronizes remote metadata to a local cache. The chef-client creates a copy of the local cache, and then stores it in-memory during the chef-client run. The in-memory cache allows packages to be installed during the chef-client run without the need to continue synchronizing the remote metadata to the local cache while the chef-client run is in-progress.</p> <p>As an array:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_package 'some-package' do\n  #...\n  flush_cache [ :before ]\n  #...\nend</pre> <p>and as a Hash:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_package 'some-package' do\n  #...\n  flush_cache( { :after =&gt; true } )\n  #...\nend</pre> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">flush_cache</code> property does not flush the local Yum cache! Use Yum tools—<code class=\"docutils literal\">yum clean headers</code>, <code class=\"docutils literal\">yum clean packages</code>, <code class=\"docutils literal\">yum clean all</code>—to clean the local Yum cache.</p> </div> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">options</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">One (or more) additional options that are passed to the command.</p> </dd> <dt><code class=\"docutils literal\">package_name</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">One of the following: the name of a package, the name of a package and its architecture, the name of a dependency. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider. See “Providers” section below for more information.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">Optional. The path to a package in the local file system.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">timeout</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Integer</p> <p class=\"last\">The amount of time (in seconds) to wait before timing out.</p> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The version of a package to be installed or upgraded. This attribute is ignored when using the <code class=\"docutils literal\">:upgrade</code> action.</p> </dd> </dl>  <h3 id=\"multiple-packages\">Multiple Packages</h3> <p>A resource may specify multiple packages and/or versions for platforms that use Yum, Apt, Zypper, or Chocolatey package managers. Specifing multiple packages and/or versions allows a single transaction to:</p> <ul class=\"simple\"> <li>Download the specified packages and versions via a single HTTP transaction</li> <li>Update or install multiple packages with a single resource during the chef-client run</li> </ul> <p>For example, installing multiple packages:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package ['package1', 'package2']</pre> <p>Upgrading multiple packages:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package ['package1', 'package2']  do\n  action :upgrade\nend</pre> <p>Removing multiple packages:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package ['package1', 'package2']  do\n  action :remove\nend</pre> <p>Purging multiple packages:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package ['package1', 'package2']  do\n  action :purge\nend</pre> <p>Notifications, via an implicit name:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package ['package1', 'package2']  do\n  action :nothing\nend\n\nlog 'call a notification' do\n  notifies :install, 'package[package1, package2]', :immediately\nend</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Notifications and subscriptions do not need to be updated when packages and versions are added or removed from the <code class=\"docutils literal\">package_name</code> or <code class=\"docutils literal\">version</code> properties.</p> </div>    <h2 id=\"providers\">Providers</h2> <p>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</p> <p>The chef-client will determine the correct provider based on configuration data collected by Ohai at the start of the chef-client run. This configuration data is then mapped to a platform and an associated list of providers.</p> <p>Generally, it’s best to let the chef-client choose the provider, and this is (by far) the most common approach. However, in some cases, specifying a provider may be desirable. There are two approaches:</p> <ul class=\"simple\"> <li>Use a more specific short name—<code class=\"docutils literal\">yum_package \"foo\" do</code> instead of <code class=\"docutils literal\">package \"foo\" do</code>, <code class=\"docutils literal\">script \"foo\" do</code> instead of <code class=\"docutils literal\">bash \"foo\" do</code>, and so on—when available</li> <li>Use the <code class=\"docutils literal\">provider</code> property within the resource block to specify the long name of the provider as a property of a resource. For example: <code class=\"docutils literal\">provider Chef::Provider::Long::Name</code>\n</li> </ul> <p>This resource has the following providers:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package</code>, <code class=\"docutils literal\">package</code>\n</dt> <dd>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">Chef::Provider::Package::Yum</code>, <code class=\"docutils literal\">yum_package</code>\n</dt> <dd>The provider for the Yum package provider.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Install an exact version</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_package 'netpbm = 10.35.58-8.el5'</pre> <p><strong>Install a minimum version</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_package 'netpbm &gt;= 10.35.58-8.el5'</pre> <p><strong>Install a minimum version using the default action</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_package 'netpbm'</pre> <p><strong>To install a package</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_package 'netpbm' do\n  action :install\nend</pre> <p><strong>To install a partial minimum version</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_package 'netpbm &gt;= 10'</pre> <p><strong>To install a specific architecture</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_package 'netpbm' do\n  arch 'i386'\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_package 'netpbm.x86_64'</pre> <p><strong>To install a specific version-release</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_package 'netpbm' do\n  version '10.35.58-8.el5'\nend</pre> <p><strong>To install a specific version (even when older than the current)</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">yum_package 'tzdata' do\n  version '2011b-1.el5'\n  allow_downgrade true\nend</pre> <p><strong>Handle cookbook_file and yum_package resources in the same recipe</strong></p> <p>When a <strong>cookbook_file</strong> resource and a <strong>yum_package</strong> resource are both called from within the same recipe, use the <code class=\"docutils literal\">flush_cache</code> attribute to dump the in-memory Yum cache, and then use the repository immediately to ensure that the correct package is installed:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cookbook_file '/etc/yum.repos.d/custom.repo' do\n  source 'custom'\n  mode '0755'\nend\n\nyum_package 'only-in-custom-repo' do\n  action :install\n  flush_cache [ :before ]\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_yum.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_yum.html</a>\n  </p>\n</div>\n","12-9/knife_bootstrap":"<h1 id=\"knife-bootstrap\">knife bootstrap</h1> <p>A node is any physical, virtual, or cloud machine that is configured to be maintained by a chef-client. A bootstrap is a process that installs the chef-client on a target system so that it can run as a chef-client and communicate with a Chef server. There are two ways to do this:</p> <ul class=\"simple\"> <li>Use the <code class=\"docutils literal\">knife bootstrap</code> subcommand to <a class=\"reference internal\" href=\"install_bootstrap\">bootstrap a node using the omnibus installer</a>\n</li> <li>Use an unattended install to bootstrap a node from itself, without using SSH or WinRM</li> </ul> <p>Use the <code class=\"docutils literal\">knife bootstrap</code> subcommand to run a bootstrap operation that installs the chef-client on the target system. The bootstrap operation must specify the IP address or FQDN of the target system.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Starting with chef-client 12.0, use the <a class=\"reference external\" href=\"https://docs.chef.io/knife_ssl_fetch.html\">knife ssl_fetch</a> command to pull down the SSL certificates from the on-premises Chef server and add them to the <code class=\"docutils literal\">/trusted_certs_dir</code> on the workstation. This certificates is used during a knife bootstrap operation.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">To bootstrap the chef-client on Microsoft Windows machines, the <a class=\"reference external\" href=\"https://docs.chef.io/plugin_knife_windows.html\">knife-windows</a> plugins is required, which includes the necessary bootstrap scripts that are used to do the actual installation.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife bootstrap FQDN_or_IP_ADDRESS (options)</pre>   <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-A</code>, <code class=\"docutils literal\">--forward-agent</code>\n</dt> <dd>Enable SSH agent forwarding.</dd> <dt><code class=\"docutils literal\">--bootstrap-curl-options OPTIONS</code></dt> <dd>Arbitrary options to be added to the bootstrap command when using cURL. This option may not be used in the same command with <code class=\"docutils literal\">--bootstrap-install-command</code>.</dd> <dt><code class=\"docutils literal\">--bootstrap-install-command COMMAND</code></dt> <dd>Execute a custom installation command sequence for the chef-client. This option may not be used in the same command with <code class=\"docutils literal\">--bootstrap-curl-options</code>, <code class=\"docutils literal\">--bootstrap-install-sh</code>, or <code class=\"docutils literal\">--bootstrap-wget-options</code>.</dd> <dt><code class=\"docutils literal\">--bootstrap-install-sh URL</code></dt> <dd>Fetch and execute an installation script at the specified URL. This option may not be used in the same command with <code class=\"docutils literal\">--bootstrap-install-command</code>.</dd> <dt><code class=\"docutils literal\">--bootstrap-no-proxy NO_PROXY_URL_or_IP</code></dt> <dd>\n<p class=\"first\">A URL or IP address that specifies a location that should not be proxied.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This option is used internally by Chef to help verify bootstrap operations during testing and should never be used during an actual bootstrap operation.</p> </div> </dd> <dt><code class=\"docutils literal\">--bootstrap-proxy PROXY_URL</code></dt> <dd>The proxy server for the node that is the target of a bootstrap operation.</dd> <dt><code class=\"docutils literal\">--bootstrap-vault-file VAULT_FILE</code></dt> <dd>The path to a JSON file that contains a list of vaults and items to be updated.</dd> <dt><code class=\"docutils literal\">--bootstrap-vault-item VAULT_ITEM</code></dt> <dd>A single vault and item to update as <code class=\"docutils literal\">vault:item</code>.</dd> <dt><code class=\"docutils literal\">--bootstrap-vault-json VAULT_JSON</code></dt> <dd>\n<p class=\"first\">A JSON string that contains a list of vaults and items to be updated.</p> <p>For example:</p> <pre class=\"last highlight-bash\" data-language=\"bash\">--bootstrap-vault-json '{ \"vault1\": [\"item1\", \"item2\"], \"vault2\": \"item2\" }'</pre> </dd> <dt><code class=\"docutils literal\">--bootstrap-version VERSION</code></dt> <dd>The version of the chef-client to install.</dd> <dt><code class=\"docutils literal\">--bootstrap-wget-options OPTIONS</code></dt> <dd>Arbitrary options to be added to the bootstrap command when using GNU Wget. This option may not be used in the same command with <code class=\"docutils literal\">--bootstrap-install-command</code>.</dd> <dt>\n<code class=\"docutils literal\">-E ENVIRONMENT</code>, <code class=\"docutils literal\">--environment ENVIRONMENT</code>\n</dt> <dd>The name of the environment. When this option is added to a command, the command will run only against the named environment.</dd> <dt>\n<code class=\"docutils literal\">-G GATEWAY</code>, <code class=\"docutils literal\">--ssh-gateway GATEWAY</code>\n</dt> <dd>The SSH tunnel or gateway that is used to run a bootstrap action on a machine that is not accessible from the workstation.</dd> <dt><code class=\"docutils literal\">--hint HINT_NAME[=HINT_FILE]</code></dt> <dd>\n<p class=\"first\">An Ohai hint to be set on the target node.</p> <p>Ohai hints are used to tell Ohai something about the system that it is running on that it would not be able to discover itself. An Ohai hint exists if a JSON file exists in the hint directory with the same name as the hint. For example, calling <code class=\"docutils literal\">hint?('antarctica')</code> in an Ohai plugin would return an empty hash if the file <code class=\"docutils literal\">antarctica.json</code> existed in the hints directory, and return nil if the file does not exist.</p> <p>If the hint file contains JSON content, it will be returned as a hash from the call to <code class=\"docutils literal\">hint?</code>.</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"snow\": true,\n  \"penguins\": \"many\"\n}</pre> <pre class=\"highlight-ruby\" data-language=\"ruby\">antarctica_hint = hint?('antarctica')\nif antarctica_hint['snow']\n  \"There are #{antarctica_hint['penguins']} penguins here.\"\nelse\n  'There is no snow here, and penguins like snow.'\nend</pre> <p>The default directory in which hint files are located is <code class=\"docutils literal\">/etc/chef/ohai/hints/</code>. Use the <code class=\"docutils literal\">Ohai::Config[:hints_path]</code> setting in the client.rb file to customize this location.</p> <p class=\"last\"><code class=\"docutils literal\">HINT_FILE</code> is the name of the JSON file. <code class=\"docutils literal\">HINT_NAME</code> is the name of a hint in a JSON file. Use multiple <code class=\"docutils literal\">--hint</code> options to specify multiple hints.</p> </dd> <dt>\n<code class=\"docutils literal\">-i IDENTITY_FILE</code>, <code class=\"docutils literal\">--ssh-identity-file IDENTITY_FILE</code>\n</dt> <dd>The SSH identity file used for authentication. Key-based authentication is recommended.</dd> <dt>\n<code class=\"docutils literal\">-j JSON_ATTRIBS</code>, <code class=\"docutils literal\">--json-attributes JSON_ATTRIBS</code>\n</dt> <dd>A JSON string that is added to the first run of a chef-client.</dd> <dt>\n<code class=\"docutils literal\">-N NAME</code>, <code class=\"docutils literal\">--node-name NAME</code>\n</dt> <dd>\n<p class=\"first\">The name of the node.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This option is required for a validatorless bootstrap (as of chef-client version 12.4).</p> </div> </dd> <dt><code class=\"docutils literal\">--[no-]fips</code></dt> <dd>Allows OpenSSL to enforce FIPS-validated security during the chef-client run.</dd> <dt><code class=\"docutils literal\">--[no-]host-key-verify</code></dt> <dd>Use <code class=\"docutils literal\">--no-host-key-verify</code> to disable host key verification. Default setting: <code class=\"docutils literal\">--host-key-verify</code>.</dd> <dt><code class=\"docutils literal\">--[no-]node-verify-api-cert</code></dt> <dd>Verify the SSL certificate on the Chef server. When <code class=\"docutils literal\">true</code>, the chef-client always verifies the SSL certificate. When <code class=\"docutils literal\">false</code>, the chef-client uses the value of <code class=\"docutils literal\">ssl_verify_mode</code> to determine if the SSL certificate requires verification. If this option is not specified, the setting for <code class=\"docutils literal\">verify_api_cert</code> in the configuration file is applied.</dd> <dt><code class=\"docutils literal\">--node-ssl-verify-mode PEER_OR_NONE</code></dt> <dd>\n<p class=\"first\">Set the verify mode for HTTPS requests.</p> <p>Use <code class=\"docutils literal\">none</code> to do no validation of SSL certificates.</p> <p class=\"last\">Use <code class=\"docutils literal\">peer</code> to do validation of all SSL certificates, including the Chef server connections, S3 connections, and any HTTPS <strong>remote_file</strong> resource URLs used in the chef-client run. This is the recommended setting.</p> </dd> <dt>\n<code class=\"docutils literal\">-p PORT</code>, <code class=\"docutils literal\">--ssh-port PORT</code>\n</dt> <dd>The SSH port.</dd> <dt>\n<code class=\"docutils literal\">-P PASSWORD</code>, <code class=\"docutils literal\">--ssh-password PASSWORD</code>\n</dt> <dd>The SSH password. This can be used to pass the password directly on the command line. If this option is not specified (and a password is required) knife prompts for the password.</dd> <dt><code class=\"docutils literal\">--prerelease</code></dt> <dd>Install pre-release gems.</dd> <dt>\n<code class=\"docutils literal\">-r RUN_LIST</code>, <code class=\"docutils literal\">--run-list RUN_LIST</code>\n</dt> <dd>A comma-separated list of roles and/or recipes to be applied.</dd> <dt><code class=\"docutils literal\">--secret SECRET</code></dt> <dd>The encryption key that is used for values contained within a data bag item.</dd> <dt><code class=\"docutils literal\">--secret-file FILE</code></dt> <dd>The path to the file that contains the encryption key.</dd> <dt><code class=\"docutils literal\">--sudo</code></dt> <dd>Execute a bootstrap operation with sudo.</dd> <dt><code class=\"docutils literal\">--sudo-preserve-home</code></dt> <dd>Use to preserve the non-root user’s <code class=\"docutils literal\">HOME</code> environment.</dd> <dt>\n<code class=\"docutils literal\">-t TEMPLATE</code>, <code class=\"docutils literal\">--bootstrap-template TEMPLATE</code>\n</dt> <dd>The bootstrap template to use. This may be the name of a bootstrap template—<code class=\"docutils literal\">chef-full</code>, for example—or it may be the full path to an Embedded Ruby (ERB) template that defines a custom bootstrap. Default value: <code class=\"docutils literal\">chef-full</code>, which installs the chef-client using the omnibus installer on all supported platforms.</dd> <dt><code class=\"docutils literal\">--use-sudo-password</code></dt> <dd>Perform a bootstrap operation with sudo; specify the password with the <code class=\"docutils literal\">-P</code> (or <code class=\"docutils literal\">--ssh-password</code>) option.</dd> <dt><code class=\"docutils literal\">-V -V</code></dt> <dd>Run the initial chef-client run at the <code class=\"docutils literal\">debug</code> log-level (e.g. <code class=\"docutils literal\">chef-client -l debug</code>).</dd> <dt>\n<code class=\"docutils literal\">-x USERNAME</code>, <code class=\"docutils literal\">--ssh-user USERNAME</code>\n</dt> <dd>The SSH user name.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>  <h3 id=\"validatorless-bootstrap\">Validatorless Bootstrap</h3> <p>The ORGANIZATION-validator.pem is typically added to the .chef directory on the workstation. When a node is bootstrapped from that workstation, the ORGANIZATION-validator.pem is used to authenticate the newly-created node to the Chef server during the initial chef-client run. Starting with chef-client version 12.1, it is possible to bootstrap a node using the USER.pem file instead of the ORGANIZATION-validator.pem file. This is known as a “validatorless bootstrap”.</p> <p>To create a node via the USER.pem file, simply delete the ORGANIZATION-validator.pem file on the workstation. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rm -f /home/lamont/.chef/myorg-validator.pem</pre> <p>and then make the following changes in the knife.rb file:</p> <ul class=\"simple\"> <li>Remove the <code class=\"docutils literal\">validation_client_name</code> setting</li> <li>Edit the <code class=\"docutils literal\">validation_key</code> setting to be something that isn’t a path to an existent ORGANIZATION-validator.pem file. For example: <code class=\"docutils literal\">/nonexist</code>.</li> </ul> <p>As long as a USER.pem is also present on the workstation from which the validatorless bootstrap operation will be initiated, the bootstrap operation will run and will use the USER.pem file instead of the ORGANIZATION-validator.pem file.</p> <p>When running a validatorless <code class=\"docutils literal\">knife bootstrap</code> operation, the output is similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">desktop% knife bootstrap 10.1.1.1 -N foo01.acme.org \\\n  -E dev -r 'role[base]' -j '{ \"foo\": \"bar\" }' \\\n  --ssh-user vagrant --sudo\nNode foo01.acme.org exists, overwrite it? (Y/N)\nClient foo01.acme.org exists, overwrite it? (Y/N)\nCreating new client for foo01.acme.org\nCreating new node for foo01.acme.org\nConnecting to 10.1.1.1\n10.1.1.1 Starting first Chef Client run...\n[....etc...]</pre>  <h4 id=\"knife-bootstrap-options\">\n<code class=\"docutils literal\">knife bootstrap</code> Options</h4> <p>Use the following options with a validatorless bootstrap to specify items that are stored in chef-vault:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--bootstrap-vault-file VAULT_FILE</code></dt> <dd>The path to a JSON file that contains a list of vaults and items to be updated.</dd> <dt><code class=\"docutils literal\">--bootstrap-vault-item VAULT_ITEM</code></dt> <dd>A single vault and item to update as <code class=\"docutils literal\">vault:item</code>.</dd> <dt><code class=\"docutils literal\">--bootstrap-vault-json VAULT_JSON</code></dt> <dd>\n<p class=\"first\">A JSON string that contains a list of vaults and items to be updated.</p> <p>For example:</p> <pre class=\"last highlight-bash\" data-language=\"bash\">--bootstrap-vault-json '{ \"vault1\": [\"item1\", \"item2\"], \"vault2\": \"item2\" }'</pre> </dd> </dl>    <h3 id=\"fips-mode\">FIPS Mode</h3> <p>Federal Information Processing Standards (FIPS) is a United States government computer security standard that specifies security requirements for cryptography. The current version of the standard is FIPS 140-2. The chef-client can be configured to allow OpenSSL to enforce FIPS-validated security during a chef-client run. This will disable cryptography that is explicitly disallowed in FIPS-validated software, including certain ciphers and hashing algorithms. Any attempt to use any disallowed cryptography will cause the chef-client to throw an exception during a chef-client run.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Chef uses MD5 hashes to uniquely identify files that are stored on the Chef server. MD5 is used only to generate a unique hash identifier and is not used for any cryptographic purpose.</p> </div> <p>Notes about FIPS:</p> <ul class=\"simple\"> <li>May be enabled for nodes running on Microsoft Windows and Enterprise Linux platforms</li> <li>Should should only be enabled for environments that require FIPS 140-2 compliance</li> <li>May not be enabled for any version of the chef-client earlier than 12.8</li> </ul> <p><strong>Bootstrap a node using FIPS</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife bootstrap 12.34.56.789 -P vanilla -x root -r 'recipe[apt],recipe[xfs],recipe[vim]' --fips</pre> <p>which shows something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">OpenSSL FIPS 140 mode enabled\n...\n12.34.56.789 Chef Client finished, 12/12 resources updated in 78.942455583 seconds</pre>    <h2 id=\"custom-templates\">Custom Templates</h2> <p>The <code class=\"docutils literal\">chef-full</code> distribution uses the omnibus installer. For most bootstrap operations, regardless of the platform on which the target node is running, using the <code class=\"docutils literal\">chef-full</code> distribution is the best approach for installing the chef-client on a target node. In some situations, using another supported distribution is necessary. And in some situations, a custom template may be required.</p> <p>For example, the default bootstrap operation relies on an Internet connection to get the distribution to the target node. If a target node cannot access the Internet, then a custom template can be used to define a specific location for the distribution so that the target node may access it during the bootstrap operation.</p> <p>For example, a bootstrap template file named “sea_power”:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife bootstrap 123.456.7.8 -x username -P password --sudo --bootstrap-template \"sea_power\"</pre> <p>The following examples show how a bootstrap template file can be customized for various platforms.</p>  <h3 id=\"template-locations\">Template Locations</h3> <p>A custom bootstrap template file must be located in a <code class=\"docutils literal\">bootstrap/</code> directory, which is typically located within the <code class=\"docutils literal\">~/.chef/</code> directory on the local workstation.</p> <p>Use the <code class=\"docutils literal\">--bootstrap-template</code> option with the <code class=\"docutils literal\">knife bootstrap</code> subcommand to specify the name of the bootstrap template file. This location is configurable when the following setting is added to the knife.rb file:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">knife[:bootstrap_template]</code></td> <td>The path to a template file to be used during a bootstrap operation.</td> </tr> </tbody> </table>   <h3 id=\"ubuntu-12-04\">Ubuntu 12.04</h3> <p>The following example shows how to modify the default script for Ubuntu 14.04. First, copy the bootstrap template from the default location. If the chef-client is installed from a RubyGems, the full path can be found in the gem contents. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ gem contents chef | grep ubuntu12.04-gems\n/Users/grantmc/.rvm/gems/ruby-2.0/gems/chef-12.0.2/lib/chef/knife/bootstrap/ubuntu14.04-gems.erb</pre> <p>Copy the template to the chef-repo in the <code class=\"docutils literal\">.chef/bootstrap</code> directory:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ cp /Users/grantmc/.rvm/gems/ruby-2.0/gems/chef-12.0.2/\n   lib/chef/knife/bootstrap/ubuntu14.04-gems.erb ~/chef-repo/.chef/\n   bootstrap/ubuntu14.04-gems-mine.erb</pre> <p>Modify the template with any editor, then specify it using the <code class=\"docutils literal\">--bootstrap-template</code> option as part of the the <code class=\"docutils literal\">knife bootstrap</code> operation, or with any of the knife plug-ins that support cloud computing.</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife bootstrap 192.168.1.100 -r 'role[webserver]' -bootstrap-template ubuntu14.04-gems-mine</pre> <p>Alternatively, an example bootstrap template can be found in the git source for the chef-repo: <a class=\"reference external\" href=\"https://github.com/chef/chef/tree/master/lib/chef/knife/bootstrap\">https://github.com/chef/chef/tree/master/lib/chef/knife/bootstrap</a>. Copy the template to <code class=\"docutils literal\">~/.chef-repo/.chef/bootstrap/ubuntu14.04-apt.erb</code> and modify the template appropriately.</p>   <h3 id=\"debian-and-apt\">Debian and Apt</h3> <p>The following example shows how to use the <code class=\"docutils literal\">knife bootstrap</code> subcommand to create a client configuration file (/etc/chef/client.rb) that uses Hosted Chef as the Chef server. The configuration file will look something like:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">log_level        :info\nlog_location     STDOUT\nchef_server_url  'https://api.opscode.com/organizations/NAME'\nvalidation_client_name 'ORGNAME-validator'</pre> <p>The <code class=\"docutils literal\">knife bootstrap</code> subcommand will look in three locations for the template that is used during the bootstrap operation. The locations are:</p> <ol class=\"arabic simple\"> <li>A bootstrap directory in the installed knife library; the actual location may vary, depending how the chef-client is installed</li> <li>A bootstrap directory in the <code class=\"docutils literal\">$PWD/.chef</code>, e.g. in <code class=\"docutils literal\">~/chef-repo/.chef</code>\n</li> <li>A bootstrap directory in the users <code class=\"docutils literal\">$HOME/.chef</code>\n</li> </ol> <p>If, in the example above, the second location was used, then create the <code class=\"docutils literal\">.chef/bootstrap/</code> directory in the chef-repo, and then create the Embedded Ruby (ERB) template file by running commands similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">mkdir ~/.chef/bootstrap\nvi ~/.chef/bootstrap/debian6.0-apt.erb</pre> <p>When finished creating the directory and the Embedded Ruby (ERB) template file, edit the template to run the SSH commands. Then set up the validation certificate and the client configuration file.</p> <p>Finally, run the chef-client on the node using a <code class=\"docutils literal\">knife bootstrap</code> command that specifies a run-list (the <code class=\"docutils literal\">-r</code> option). The bootstrap template can be called using a command similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife bootstrap mynode.example.com -r 'role[webserver]','role[production]' --bootstrap-template debian6.0-apt</pre>   <h3 id=\"microsoft-windows\">Microsoft Windows</h3> <p>The following example shows how to modify the default script for Microsoft Windows and Windows PowerShell:</p> <pre class=\"highlight-bash\" data-language=\"bash\">@setlocal\n\n&lt;%= \"SETX HTTP_PROXY \\\"#{knife_config[:bootstrap_proxy]}\\\"\" if knife_config[:bootstrap_proxy] %&gt;\n@mkdir &lt;%= bootstrap_directory %&gt;\n\n&gt; &lt;%= bootstrap_directory %&gt;\\wget.ps1 (\n &lt;%= win_wget_ps %&gt;\n)\n\n:install\n@rem Install Chef using chef-client MSI installer\n\n&lt;% url=\"http://reposerver.example.com/chef-client-12.0.2.windows.msi\" -%&gt;\n@set \"REMOTE_SOURCE_MSI_URL=&lt;%= url %&gt;\"\n@set \"LOCAL_DESTINATION_MSI_PATH=&lt;%= local_download_path %&gt;\"\n\n@powershell -ExecutionPolicy Unrestricted -NoProfile -NonInteractive \"&amp; '&lt;%= bootstrap_directory %&gt;\\wget.ps1' '%REMOTE_SOURCE_MSI_URL%' '%LOCAL_DESTINATION_MSI_PATH%'\"\n\n@REM Replace install_chef from knife-windows Gem with one that has extra flags to turn on Chef service feature -- only available in Chef &gt;= 12.0.x\n@REM &lt;%= install_chef %&gt;\n@echo Installing Chef Client 12.0.2 with msiexec\n@msiexec /q /i \"%LOCAL_DESTINATION_MSI_PATH%\" ADDLOCAL=\"ChefClientFeature,ChefServiceFeature\"\n@endlocal\n\n@echo Writing validation key...\n\n&gt; &lt;%= bootstrap_directory %&gt;\\validation.pem (\n &lt;%= validation_key %&gt;\n)\n\n@echo Validation key written.\n\n&lt;% if @config[:encrypted_data_bag_secret] -%&gt;\n&gt; &lt;%= bootstrap_directory %&gt;\\encrypted_data_bag_secret (\n &lt;%= encrypted_data_bag_secret %&gt;\n)\n&lt;% end -%&gt;\n\n&gt; &lt;%= bootstrap_directory %&gt;\\client.rb (\n &lt;%= config_content %&gt;\n)\n\n&gt; &lt;%= bootstrap_directory %&gt;\\first-boot.json (\n &lt;%= run_list %&gt;\n)\n\n&lt;%= start_chef %&gt;</pre>    <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Bootstrap a node</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife bootstrap 12.34.56.789 -P vanilla -x root -r 'recipe[apt],recipe[xfs],recipe[vim]'</pre> <p>which shows something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">...\n12.34.56.789 Chef Client finished, 12/12 resources updated in 78.942455583 seconds</pre> <p>Use <code class=\"docutils literal\">knife node show</code> to verify:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node show debian-wheezy.int.domain.org</pre> <p>which returns something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Node Name:   debian-wheezy.int.domain.org\nEnvironment: _default\nFQDN:        debian-wheezy.int.domain.org\nIP:          12.34.56.789\nRun List:    recipe[apt], recipe[xfs], recipe[vim]\nRoles:\nRecipes:     apt, xfs, vim, apt::default, xfs::default, vim::default\nPlatform:    debian 7.4\nTags:</pre> <p><strong>Use an SSH password</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife bootstrap 192.168.1.1 -x username -P PASSWORD --sudo</pre> <p><strong>Use a file that contains a private key</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife bootstrap 192.168.1.1 -x username -i ~/.ssh/id_rsa --sudo</pre> <p><strong>Fetch and execute an installation script from a URL</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife bootstrap --bootstrap-install-sh http://mycustomserver.com/custom_install_chef_script.sh</pre> <p><strong>Specify options when using cURL</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife bootstrap --bootstrap-curl-options \"--proxy http://myproxy.com:8080\"</pre> <p><strong>Specify options when using GNU Wget</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife bootstrap --bootstrap-wget-options \"-e use_proxy=yes -e http://myproxy.com:8080\"</pre> <p><strong>Specify a custom installation command sequence</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife bootstrap --bootstrap-install-command \"curl -l http://mycustomserver.com/custom_install_chef_script.sh | sudo bash -s --\"</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_bootstrap.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_bootstrap.html</a>\n  </p>\n</div>\n","12-9/knife_client":"<h1 id=\"knife-client\">knife client</h1> <p>The <code class=\"docutils literal\">knife client</code> subcommand is used to manage an API client list and their associated RSA public key-pairs. This allows authentication requests to be made to the Chef server by any entity that uses the Chef server API, such as the chef-client and knife.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div>  <h2 id=\"bulk-delete\">bulk delete</h2> <p>Use the <code class=\"docutils literal\">bulk delete</code> argument to delete any API client that matches a pattern defined by a regular expression. The regular expression must be within quotes and not be surrounded by forward slashes (<code class=\"docutils literal\">/</code>).</p>  <h3 id=\"syntax\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client bulk delete REGEX</pre>   <h3 id=\"options\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--admin</code>\n</dt> <dd>Create a client as an admin client. This is required for any user to access Open Source Chef as an administrator. This option only works when used with the open source Chef server and will have no effect when used with Enterprise Chef.</dd> <dt>\n<code class=\"docutils literal\">-D</code>, <code class=\"docutils literal\">--delete-validators</code>\n</dt> <dd>Force the deletion of the chef-client when it is also a chef-validator.</dd> </dl>   <h3 id=\"examples\">Examples</h3> <p>None.</p>    <h2 id=\"create\">create</h2> <p>Use the <code class=\"docutils literal\">create</code> argument to create a new API client. This process will generate an RSA key pair for the named API client. The public key will be stored on the Chef server and the private key will be displayed on <code class=\"docutils literal\">STDOUT</code> or written to a named file.</p> <ul class=\"simple\"> <li>For the chef-client, the private key should be copied to the system as <code class=\"docutils literal\">/etc/chef/client.pem</code>.</li> <li>For knife, the private key is typically copied to <code class=\"docutils literal\">~/.chef/client_name.pem</code> and referenced in the knife.rb configuration file.</li> </ul>  <h3 id=\"id1\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client create CLIENT_NAME (options)</pre>   <h3 id=\"id2\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--admin</code>\n</dt> <dd>Create a client as an admin client. This is required for any user to access Open Source Chef as an administrator. This option only works when used with the open source Chef server and will have no effect when used with Enterprise Chef or Chef server 12.x.</dd> <dt>\n<code class=\"docutils literal\">-f FILE</code>, <code class=\"docutils literal\">--file FILE</code>\n</dt> <dd>Save a private key to the specified file name.</dd> <dt>\n<code class=\"docutils literal\">-k</code>, <code class=\"docutils literal\">--prevent-keygen</code>\n</dt> <dd>\n<p class=\"first\">Create a user without a public key. This key may be managed later by using the <code class=\"docutils literal\">knife user key</code> subcommands.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This option is valid only with Chef server API, version 1.0, which was released with Chef server 12.1. If this option or the <code class=\"docutils literal\">--user-key</code> option are not passed in the command, the Chef server will create a user with a public key named <code class=\"docutils literal\">default</code> and will return the private key. For the Chef server versions earlier than 12.1, this option will not work; a public key is always generated unless <code class=\"docutils literal\">--user-key</code> is passed in the command.</p> </div> </dd> <dt>\n<code class=\"docutils literal\">-p FILE</code>, <code class=\"docutils literal\">--public-key FILE</code>\n</dt> <dd>Save a public key to the specified file name. This option may not be passed in the same command with <code class=\"docutils literal\">--prevent-keygen</code>. When using Open Source Chef a default key is generated if this option is not passed in the command. For Chef server version 12.x, see the <code class=\"docutils literal\">--prevent-keygen</code> option.</dd> <dt><code class=\"docutils literal\">--validator</code></dt> <dd>Create the client as the chef-validator. Default value: <code class=\"docutils literal\">true</code>.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id3\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Create an admin client</strong></p> <p>To create a chef-client that can access the Chef server API as an administrator—sometimes referred to as an “API chef-client”—with the name “exampleorg” and save its private key to a file, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client create exampleorg -a -f \"/etc/chef/client.pem\"</pre> <p><strong>Create an admin client for Enterprise Chef</strong></p> <p>When running the <code class=\"docutils literal\">create</code> argument, be sure to omit the <code class=\"docutils literal\">-a</code> option:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client create exampleorg -f \"/etc/chef/client.pem\"</pre>    <h2 id=\"delete\">delete</h2> <p>Use the <code class=\"docutils literal\">delete</code> argument to delete a registered API client.</p>  <h3 id=\"id4\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client delete CLIENT_NAME</pre>   <h3 id=\"id5\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--admin</code>\n</dt> <dd>Create a client as an admin client. This is required for any user to access Open Source Chef as an administrator. This option only works when used with the open source Chef server and will have no effect when used with Enterprise Chef.</dd> <dt>\n<code class=\"docutils literal\">-D</code>, <code class=\"docutils literal\">--delete-validators</code>\n</dt> <dd>Force the deletion of the chef-client when it is also a chef-validator.</dd> </dl>   <h3 id=\"id6\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Delete a client</strong></p> <p>To delete a client with the name “client_foo”, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client delete client_foo</pre> <p>Type <code class=\"docutils literal\">Y</code> to confirm a deletion.</p>    <h2 id=\"edit\">edit</h2> <p>Use the <code class=\"docutils literal\">edit</code> argument to edit the details of a registered API client. When this argument is run, knife will open $EDITOR to enable editing of the <code class=\"docutils literal\">admin</code> attribute. (None of the other attributes should be changed using this argument.) When finished, knife will update the Chef server with those changes.</p>  <h3 id=\"id7\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client edit CLIENT_NAME</pre>   <h3 id=\"id8\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"id9\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Edit a client</strong></p> <p>To edit a client with the name “exampleorg”, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client edit exampleorg</pre>    <h2 id=\"key-create\">key create</h2> <p>Use the <code class=\"docutils literal\">key create</code> argument to create a public key.</p>  <h3 id=\"id10\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client key create CLIENT_NAME (options)</pre>   <h3 id=\"id11\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-e DATE</code>, <code class=\"docutils literal\">--expiration-date DATE</code>\n</dt> <dd>The expiration date for the public key, specified as an ISO 8601 formatted string: <code class=\"docutils literal\">YYYY-MM-DDTHH:MM:SSZ</code>. If this option is not specified, the public key will not have an expiration date. For example: <code class=\"docutils literal\">2013-12-24T21:00:00Z</code>.</dd> <dt>\n<code class=\"docutils literal\">-f FILE</code>, <code class=\"docutils literal\">--file FILE</code>\n</dt> <dd>Save a public key to the specified file name. If the <code class=\"docutils literal\">--key-name</code> and <code class=\"docutils literal\">public-key</code> options are not specified the Chef server will generate a private key.</dd> <dt>\n<code class=\"docutils literal\">-k NAME</code>, <code class=\"docutils literal\">--key-name NAME</code>\n</dt> <dd>The name of the public key.</dd> <dt>\n<code class=\"docutils literal\">-p FILE_NAME</code>, <code class=\"docutils literal\">--public-key FILE_NAME</code>\n</dt> <dd>The path to a file that contains the public key. If this option is not specified, and only if <code class=\"docutils literal\">--key-name</code> is specified, the Chef server will generate a public/private key pair.</dd> </dl>   <h3 id=\"id12\">Examples</h3> <p>None.</p>    <h2 id=\"key-delete\">key delete</h2> <p>Use the <code class=\"docutils literal\">key delete</code> argument to delete a public key.</p>  <h3 id=\"id13\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client key delete CLIENT_NAME KEY_NAME</pre>   <h3 id=\"id14\">Examples</h3> <p>None.</p>    <h2 id=\"key-edit\">key edit</h2> <p>Use the <code class=\"docutils literal\">key edit</code> argument to modify or rename a public key.</p>  <h3 id=\"id15\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client key edit CLIENT_NAME KEY_NAME (options)</pre>   <h3 id=\"id16\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-c</code>, <code class=\"docutils literal\">--create-key</code>\n</dt> <dd>Generate a new public/private key pair and replace an existing public key with the newly-generated public key. To replace the public key with an existing public key, use <code class=\"docutils literal\">--public-key</code> instead.</dd> <dt>\n<code class=\"docutils literal\">-e DATE</code>, <code class=\"docutils literal\">--expiration-date DATE</code>\n</dt> <dd>The expiration date for the public key, specified as an ISO 8601 formatted string: <code class=\"docutils literal\">YYYY-MM-DDTHH:MM:SSZ</code>. If this option is not specified, the public key will not have an expiration date. For example: <code class=\"docutils literal\">2013-12-24T21:00:00Z</code>.</dd> <dt>\n<code class=\"docutils literal\">-f FILE</code>, <code class=\"docutils literal\">--file FILE</code>\n</dt> <dd>Save a public key to the specified file name. If the <code class=\"docutils literal\">--key-name</code> and <code class=\"docutils literal\">public-key</code> options are not specified the Chef server will generate a private key.</dd> <dt>\n<code class=\"docutils literal\">-k NAME</code>, <code class=\"docutils literal\">--key-name NAME</code>\n</dt> <dd>The name of the public key.</dd> <dt>\n<code class=\"docutils literal\">-p FILE_NAME</code>, <code class=\"docutils literal\">--public-key FILE_NAME</code>\n</dt> <dd>The path to a file that contains the public key. If this option is not specified, and only if <code class=\"docutils literal\">--key-name</code> is specified, the Chef server will generate a public/private key pair.</dd> </dl>   <h3 id=\"id17\">Examples</h3> <p>None.</p>    <h2 id=\"key-list\">key list</h2> <p>Use the <code class=\"docutils literal\">key list</code> argument to view a list of public keys for the named client.</p>  <h3 id=\"id18\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client key list CLIENT_NAME (options)</pre>   <h3 id=\"id19\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-e</code>, <code class=\"docutils literal\">--only-expired</code>\n</dt> <dd>Show a list of public keys that have expired.</dd> <dt>\n<code class=\"docutils literal\">-n</code>, <code class=\"docutils literal\">--only-non-expired</code>\n</dt> <dd>Show a list of public keys that have not expired.</dd> <dt>\n<code class=\"docutils literal\">-w</code>, <code class=\"docutils literal\">--with-details</code>\n</dt> <dd>Show a list of public keys, including URIs and expiration status.</dd> </dl>   <h3 id=\"id20\">Examples</h3> <p>None.</p>    <h2 id=\"key-show\">key show</h2> <p>Use the <code class=\"docutils literal\">key show</code> argument to view details for a specific public key.</p>  <h3 id=\"id21\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client key show CLIENT_NAME KEY_NAME</pre>   <h3 id=\"id22\">Examples</h3> <p>None.</p>    <h2 id=\"list\">list</h2> <p>Use the <code class=\"docutils literal\">list</code> argument to view a list of registered API client.</p>  <h3 id=\"id23\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client list (options)</pre>   <h3 id=\"id24\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-w</code>, <code class=\"docutils literal\">--with-uri</code>\n</dt> <dd>Show the corresponding URIs.</dd> </dl>   <h3 id=\"id25\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>View a list of clients</strong></p> <p>To verify the API client list for the Chef server, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client list</pre> <p>to return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">exampleorg\ni-12345678\nrs-123456</pre> <p>To verify that an API client can authenticate to the Chef server correctly, try getting a list of clients using <code class=\"docutils literal\">-u</code> and <code class=\"docutils literal\">-k</code> options to specify its name and private key:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client list -u ORGNAME -k .chef/ORGNAME.pem</pre>    <h2 id=\"reregister\">reregister</h2> <p>Use the <code class=\"docutils literal\">reregister</code> argument to regenerate an RSA key pair for an API client. The public key will be stored on the Chef server and the private key will be displayed on <code class=\"docutils literal\">STDOUT</code> or written to a named file.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Running this argument will invalidate the previous RSA key pair, making it unusable during authentication to the Chef server.</p> </div>  <h3 id=\"id26\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client reregister CLIENT_NAME (options)</pre>   <h3 id=\"id27\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-f FILE_NAME</code>, <code class=\"docutils literal\">--file FILE_NAME</code>\n</dt> <dd>Save a private key to the specified file name.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id28\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Re-register a client</strong></p> <p>To re-register the RSA key pair for a client named “testclient” and save it to a file named “rsa_key”, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client reregister testclient -f rsa_key</pre>    <h2 id=\"show\">show</h2> <p>Use the <code class=\"docutils literal\">show</code> argument to show the details of an API client.</p>  <h3 id=\"id29\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client show CLIENT_NAME (options)</pre>   <h3 id=\"id30\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a ATTR</code>, <code class=\"docutils literal\">--attribute ATTR</code>\n</dt> <dd>The attribute (or attributes) to show.</dd> </dl>   <h3 id=\"id31\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Show clients</strong></p> <p>To view a client named “testclient”, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client show testclient</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">admin:       false\nchef_type:   client\njson_class:  Chef::ApiClient\nname:        testclient\npublic_key:</pre> <p>To view information in JSON format, use the <code class=\"docutils literal\">-F</code> common option as part of the command like this:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife client show devops -F json</pre> <p>Other formats available include <code class=\"docutils literal\">text</code>, <code class=\"docutils literal\">yaml</code>, and <code class=\"docutils literal\">pp</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_client.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_client.html</a>\n  </p>\n</div>\n","12-9/knife_cookbook":"<h1 id=\"knife-cookbook\">knife cookbook</h1> <p>A cookbook is the fundamental unit of configuration and policy distribution. A cookbook defines a scenario and contains everything that is required to support that scenario:</p> <ul class=\"simple\"> <li>Recipes that specify the resources to use and the order in which they are to be applied</li> <li>Attribute values</li> <li>File distributions</li> <li>Templates</li> <li>Extensions to Chef, such as libraries, definitions, and custom resources</li> </ul> <p>The <code class=\"docutils literal\">knife cookbook</code> subcommand is used to interact with cookbooks that are located on the Chef server or the local chef-repo.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div>  <h2 id=\"bulk-delete\">bulk delete</h2> <p>Use the <code class=\"docutils literal\">bulk delete</code> argument to delete cookbook files that match a pattern defined by a regular expression. The regular expression must be within quotes and not be surrounded by forward slashes (/).</p>  <h3 id=\"syntax\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook bulk delete REGEX (options)</pre>   <h3 id=\"options\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-p</code>, <code class=\"docutils literal\">--purge</code>\n</dt> <dd>Entirely remove a cookbook (or cookbook version) from the Chef server. Use this action carefully because only one copy of any single file is stored on the Chef server. Consequently, purging a cookbook disables any other cookbook that references one or more files from the cookbook that has been purged.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"examples\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Bulk delete many cookbooks</strong></p> <p>Use a regular expression to define the pattern used to bulk delete cookbooks:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook bulk delete \"^[0-9]{3}$\" -p</pre>    <h2 id=\"create\">create</h2> <p>Use the <code class=\"docutils literal\">create</code> argument to create a new cookbook directory on the local machine, including the following directories and files:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>cookbook/attributes</li> <li>cookbook/CHANGELOG.md</li> <li>cookbook/definitions</li> <li>cookbook/files/default</li> <li>cookbook/libraries</li> <li>cookbook/metadata.rb</li> <li>cookbook/providers</li> <li>cookbook/README.md (or .rdoc)</li> <li>cookbook/recipes/default.rb</li> <li>cookbook/resources</li> <li>cookbook/templates/default</li> </ul> </div>\n</blockquote> <p>After the cookbook is created, it can be uploaded to the Chef server using the <code class=\"docutils literal\">knife upload</code> argument.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Cookbook and custom resource names should contain only alphanumeric characters. A hyphen (<code class=\"docutils literal\">-</code>) is a valid character and may be used in cookbook and custom resource names, but it is discouraged. The chef-client will return an error if a hyphen is not converted to an underscore (<code class=\"docutils literal\">_</code>) when referencing from a recipe the name of a custom resource in which a hyphen is located.</p> </div>  <h3 id=\"id1\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook create COOKBOOK_NAME (options)</pre>   <h3 id=\"id2\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-C COPYRIGHT_HOLDER</code>, <code class=\"docutils literal\">--copyright COPYRIGHT_HOLDER</code>\n</dt> <dd>The name of the copyright holder. This option places a copyright notice that contains the name of the copyright holder in each of the pre-created files. If this option is not specified, a copyright name of “COMPANY_NAME” is used instead; it can easily be modified later.</dd> <dt>\n<code class=\"docutils literal\">-I LICENSE</code>, <code class=\"docutils literal\">--license LICENSE</code>\n</dt> <dd>The type of license under which a cookbook is distributed: <code class=\"docutils literal\">apachev2</code>, <code class=\"docutils literal\">gplv2</code>, <code class=\"docutils literal\">gplv3</code>, <code class=\"docutils literal\">mit</code>, or <code class=\"docutils literal\">none</code> (default). This option places the appropriate license notice in the pre-created files: <code class=\"docutils literal\">Apache v2.0</code> (for <code class=\"docutils literal\">apachev2</code>), <code class=\"docutils literal\">GPL v2</code> (for <code class=\"docutils literal\">gplv2</code>), <code class=\"docutils literal\">GPL v3</code> (for <code class=\"docutils literal\">gplv3</code>), <code class=\"docutils literal\">MIT</code> (for <code class=\"docutils literal\">mit</code>), or <code class=\"docutils literal\">license 'Proprietary - All Rights Reserved</code> (for <code class=\"docutils literal\">none</code>). Be aware of the licenses for files inside of a cookbook and be sure to follow any restrictions they describe.</dd> <dt>\n<code class=\"docutils literal\">-m EMAIL</code>, <code class=\"docutils literal\">--email EMAIL</code>\n</dt> <dd>The email address for the individual who maintains the cookbook. This option places an email address in each of the pre-created files. If not specified, an email name of “YOUR_EMAIL” is used instead; this can easily be modified later.</dd> <dt>\n<code class=\"docutils literal\">-o PATH</code>, <code class=\"docutils literal\">--cookbook-path PATH</code>\n</dt> <dd>The directory in which cookbooks are created. This can be a colon-separated path.</dd> <dt>\n<code class=\"docutils literal\">-r FORMAT</code>, <code class=\"docutils literal\">--readme-format FORMAT</code>\n</dt> <dd>The document format of the readme file: <code class=\"docutils literal\">md</code> (markdown) and <code class=\"docutils literal\">rdoc</code> (Ruby docs).</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id3\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Create a cookbook</strong></p> <p>To create a cookbook named “my_cookbook” with copyright, email, license, and readme format options specified, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook create my_cookbook -C \"My Name\" -m \"my@email.com\" -I apachev2 -r md</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">** Creating cookbook my_cookbook\n** Creating README for cookbook: my_cookbook\n** Creating metadata for cookbook: my_cookbook</pre>    <h2 id=\"delete\">delete</h2> <p>Use the <code class=\"docutils literal\">delete</code> argument to delete a specified cookbook or cookbook version on the Chef server (and not locally).</p>  <h3 id=\"id4\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook delete COOKBOOK_NAME [COOKBOOK_VERSION] (options)</pre>   <h3 id=\"id5\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--all</code>\n</dt> <dd>Delete all cookbooks (and cookbook versions).</dd> <dt><code class=\"docutils literal\">COOKBOOK_VERSION</code></dt> <dd>The version of a cookbook to be deleted. If a cookbook has only one version, this option does not need to be specified. If a cookbook has more than one version and this option is not specified, knife prompts for a version.</dd> <dt>\n<code class=\"docutils literal\">-p</code>, <code class=\"docutils literal\">--purge</code>\n</dt> <dd>Entirely remove a cookbook (or cookbook version) from the Chef server. Use this action carefully because only one copy of any single file is stored on the Chef server. Consequently, purging a cookbook disables any other cookbook that references one or more files from the cookbook that has been purged.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id6\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Delete a cookbook</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook delete cookbook_name version</pre> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook delete smartmon 0.8</pre> <p>Type <code class=\"docutils literal\">Y</code> to confirm a deletion.</p>    <h2 id=\"download\">download</h2> <p>Use the <code class=\"docutils literal\">download</code> argument to download a cookbook from the Chef server to the current working directory.</p>  <h3 id=\"id7\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook download COOKBOOK_NAME [COOKBOOK_VERSION] (options)</pre>   <h3 id=\"id8\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-d DOWNLOAD_DIRECTORY</code>, <code class=\"docutils literal\">--dir DOWNLOAD_DIRECTORY</code>\n</dt> <dd>The directory in which cookbooks are located.</dd> <dt>\n<code class=\"docutils literal\">-f</code>, <code class=\"docutils literal\">--force</code>\n</dt> <dd>Overwrite an existing directory.</dd> <dt>\n<code class=\"docutils literal\">-N</code>, <code class=\"docutils literal\">--latest</code>\n</dt> <dd>Download the most recent version of a cookbook.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id9\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Download a cookbook</strong></p> <p>To download a cookbook named <code class=\"docutils literal\">smartmon</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook download smartmon</pre>    <h2 id=\"list\">list</h2> <p>Use the <code class=\"docutils literal\">list</code> argument to view a list of cookbooks that are currently available on the Chef server. The list will contain only the most recent version for each cookbook by default.</p>  <h3 id=\"id10\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook list (options)</pre>   <h3 id=\"id11\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--all</code>\n</dt> <dd>Return all available versions for every cookbook.</dd> <dt>\n<code class=\"docutils literal\">-w</code>, <code class=\"docutils literal\">--with-uri</code>\n</dt> <dd>Show the corresponding URIs.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id12\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>View a list of cookbooks</strong></p> <p>To view a list of cookbooks:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook list</pre>    <h2 id=\"metadata\">metadata</h2> <p>Use the <code class=\"docutils literal\">metadata</code> argument to generate the metadata for one or more cookbooks.</p>  <h3 id=\"id13\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook metadata (options)</pre>   <h3 id=\"id14\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--all</code>\n</dt> <dd>Generate metadata for all cookbooks.</dd> <dt>\n<code class=\"docutils literal\">-o PATH:PATH</code>, <code class=\"docutils literal\">--cookbook-path PATH:PATH</code>\n</dt> <dd>The directory in which cookbooks are created. This can be a colon-separated path.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id15\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Generate metadata</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook metadata -a</pre>    <h2 id=\"metadata-from-file\">metadata from file</h2> <p>Use the <code class=\"docutils literal\">metadata from file</code> argument to load the metadata for a cookbook from a file.</p>  <h3 id=\"id16\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook metadata from file FILE</pre>   <h3 id=\"id17\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"id18\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>View metadata</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook metadata from file /path/to/file</pre>    <h2 id=\"show\">show</h2> <p>Use the <code class=\"docutils literal\">show</code> argument to view information about a cookbook, parts of a cookbook (attributes, definitions, files, libraries, providers, recipes, resources, and templates), or a file that is associated with a cookbook (including attributes such as checksum or specificity).</p>  <h3 id=\"id19\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook show COOKBOOK_NAME [COOKBOOK_VERSION] [PART...] [FILE_NAME] (options)</pre>   <h3 id=\"id20\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">COOKBOOK_VERSION</code></dt> <dd>The version of a cookbook to be shown. If a cookbook has only one version, this option does not need to be specified. If a cookbook has more than one version and this option is not specified, a list of cookbook versions is returned.</dd> <dt>\n<code class=\"docutils literal\">-f FQDN</code>, <code class=\"docutils literal\">--fqdn FQDN</code>\n</dt> <dd>The FQDN of the host.</dd> <dt><code class=\"docutils literal\">FILE_NAME</code></dt> <dd>The name of a file that is associated with a cookbook.</dd> <dt>\n<code class=\"docutils literal\">-p PLATFORM</code>, <code class=\"docutils literal\">--platform PLATFORM</code>\n</dt> <dd>The platform for which a cookbook is designed.</dd> <dt><code class=\"docutils literal\">PART</code></dt> <dd>The part of the cookbook to show: <code class=\"docutils literal\">attributes</code>, <code class=\"docutils literal\">definitions</code>, <code class=\"docutils literal\">files</code>, <code class=\"docutils literal\">libraries</code>, <code class=\"docutils literal\">providers</code>, <code class=\"docutils literal\">recipes</code>, <code class=\"docutils literal\">resources</code>, or <code class=\"docutils literal\">templates</code>. More than one part can be specified.</dd> <dt>\n<code class=\"docutils literal\">-V PLATFORM_VERSION</code>, <code class=\"docutils literal\">--platform-version PLATFORM_VERSION</code>\n</dt> <dd>The version of the platform.</dd> <dt>\n<code class=\"docutils literal\">-w</code>, <code class=\"docutils literal\">--with-uri</code>\n</dt> <dd>Show the corresponding URIs.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id21\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Show cookbook data</strong></p> <p>To get the list of available versions of a cookbook named <code class=\"docutils literal\">getting-started</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook show getting-started</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">getting-started   0.3.0  0.2.0</pre> <p><strong>Show cookbook versions</strong></p> <p>To show a list of data about a cookbook using the name of the cookbook and the version, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook show getting-started 0.3.0</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">attributes:\n  checksum:     fa0fc4abf3f6787aeb5c3c5c35de667c\n  name:         default.rb\n  path:         attributes/default.rb\n  specificity:  default\n  url:          https://somelongurlhere.com\nchef_type:      cookbook_version\ncookbook_name:  getting-started\ndefinitions:    []\nfiles:          []\nfrozen?:        false\njson_class:     Chef::CookbookVersion\nlibraries:      []</pre> <p><strong>Show a cookbook version</strong></p> <p>To only view data about templates, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook show getting-started 0.3.0 templates</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">checksum:     a29d6f254577b830091f140c3a78b1fe\nname:         chef-getting-started.txt.erb\npath:         templates/default/chef-getting-started.txt.erb\nspecificity:  default\nurl:          https://someurlhere.com</pre> <p><strong>Show cookbook data as JSON</strong></p> <p>To view information in JSON format, use the <code class=\"docutils literal\">-F</code> common option as part of the command like this:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook show devops -F json</pre> <p>Other formats available include <code class=\"docutils literal\">text</code>, <code class=\"docutils literal\">yaml</code>, and <code class=\"docutils literal\">pp</code>.</p>    <h2 id=\"test\">test</h2> <p>Use the <code class=\"docutils literal\">test</code> argument to test a cookbook for syntax errors. This argument uses Ruby syntax checking to verify every file in a cookbook that ends in .rb and Embedded Ruby (ERB). This argument will respect chefignore files when determining which cookbooks to test for syntax errors.</p>  <h3 id=\"id22\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook test COOKBOOK_NAME (options)</pre>   <h3 id=\"id23\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--all</code>\n</dt> <dd>Test all cookbooks.</dd> <dt>\n<code class=\"docutils literal\">-o PATH:PATH</code>, <code class=\"docutils literal\">--cookbook-path PATH:PATH</code>\n</dt> <dd>The directory in which cookbooks are created. This can be a colon-separated path.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id24\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Test a cookbook</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook test cookbook_name</pre>    <h2 id=\"upload\">upload</h2> <p>Use the <code class=\"docutils literal\">upload</code> argument to upload one or more cookbooks (and any files that are associated with those cookbooks) from a local repository to the Chef server. Only files that do not already exist on the Chef server will be uploaded.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Use a chefignore file to prevent the upload of specific files and file types, such as temporary files or files placed in folders by version control systems. The chefignore file must be located in the root of the cookbook repository and must use rules similar to filename globbing (as defined by the Ruby <code class=\"docutils literal\">File.fnmatch</code> syntax).</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Empty directories are not uploaded to the Chef server. To upload an empty directory, create a “dot” file—e.g. <code class=\"docutils literal\">.keep</code>—in that directory to ensure that the directory itself is not empty.</p> </div>  <h3 id=\"id25\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook upload [COOKBOOK_NAME...] (options)</pre>   <h3 id=\"id26\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--all</code>\n</dt> <dd>Upload all cookbooks.</dd> <dt><code class=\"docutils literal\">--concurrency</code></dt> <dd>The number of allowed concurrent connections. Default: <code class=\"docutils literal\">10</code>.</dd> <dt>\n<code class=\"docutils literal\">-d</code>, <code class=\"docutils literal\">--include-dependencies</code>\n</dt> <dd>Ensure that when a cookbook has a dependency on one (or more) cookbooks, those cookbooks are also uploaded.</dd> <dt>\n<code class=\"docutils literal\">-E ENVIRONMENT</code>, <code class=\"docutils literal\">--environment ENVIRONMENT</code>\n</dt> <dd>Use to set the environment version dependency to the cookbook version being uploaded.</dd> <dt><code class=\"docutils literal\">--force</code></dt> <dd>Update a cookbook even if the <code class=\"docutils literal\">--freeze</code> flag has been set.</dd> <dt><code class=\"docutils literal\">--freeze</code></dt> <dd>Require changes to a cookbook be included as a new version. Only the <code class=\"docutils literal\">--force</code> option can override this setting.</dd> <dt>\n<code class=\"docutils literal\">-o PATH:PATH</code>, <code class=\"docutils literal\">--cookbook-path PATH:PATH</code>\n</dt> <dd>The directory in which cookbooks are created. This can be a colon-separated path.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id27\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Upload a cookbook</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook upload cookbook_name</pre> <p><strong>Freeze a cookbook</strong></p> <p>To upload a cookbook, and then prevent other users from being able to make changes to it, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook upload redis --freeze</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Uploading redis...\nUpload completed</pre> <p>If a cookbook is frozen and the <code class=\"docutils literal\">--force</code> option is not specified, knife will return an error message similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Uploading redis...\nERROR: Version 0.1.6 of cookbook redis is frozen. Use --force to override.</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_cookbook.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_cookbook.html</a>\n  </p>\n</div>\n","12-9/knife_delete":"<h1 id=\"knife-delete\">knife delete</h1> <p>Use the <code class=\"docutils literal\">knife delete</code> subcommand to delete an object from a Chef server. This subcommand works similar to <code class=\"docutils literal\">knife cookbook delete</code>, <code class=\"docutils literal\">knife data bag delete</code>, <code class=\"docutils literal\">knife environment delete</code>, <code class=\"docutils literal\">knife node delete</code>, and <code class=\"docutils literal\">knife role delete</code>, but with a single verb (and a single action).</p>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife delete [PATTERN...] (options)</pre>   <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--both</code></dt> <dd>Delete both local and remote copies of an object. Default: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">--chef-repo-path PATH</code></dt> <dd>The path to the chef-repo. This setting will override the default path to the chef-repo. Default: same value as specified by <code class=\"docutils literal\">chef_repo_path</code> in client.rb.</dd> <dt><code class=\"docutils literal\">--concurrency</code></dt> <dd>The number of allowed concurrent connections. Default: <code class=\"docutils literal\">10</code>.</dd> <dt><code class=\"docutils literal\">--local</code></dt> <dd>Delete only the local copy of an object. A remote copy will not be deleted. Default: <code class=\"docutils literal\">false</code>.</dd> <dt>\n<code class=\"docutils literal\">-r</code>, <code class=\"docutils literal\">--[no-]recurse</code>\n</dt> <dd>Use <code class=\"docutils literal\">--recurse</code> to delete directories recursively. Default: <code class=\"docutils literal\">--no-recurse</code>.</dd> <dt><code class=\"docutils literal\">--repo-mode MODE</code></dt> <dd>The layout of the local chef-repo. Possible values: <code class=\"docutils literal\">static</code>, <code class=\"docutils literal\">everything</code>, or <code class=\"docutils literal\">hosted_everything</code>. Use <code class=\"docutils literal\">static</code> for just roles, environments, cookbooks, and data bags. By default, <code class=\"docutils literal\">everything</code> and <code class=\"docutils literal\">hosted_everything</code> are dynamically selected depending on the server type. Default: <code class=\"docutils literal\">everything</code> / <code class=\"docutils literal\">hosted_everything</code>.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h2 id=\"examples\">Examples</h2> <p>None.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_delete.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_delete.html</a>\n  </p>\n</div>\n","12-9/knife_cookbook_site":"<h1 id=\"knife-cookbook-site\">knife cookbook site</h1> <p>The Cookbooks Site API is used to provide access to the cookbooks community hosted at <a class=\"reference external\" href=\"https://supermarket.chef.io/cookbooks\">https://supermarket.chef.io/cookbooks</a>. All of the cookbooks in the community are accessible through a RESTful API located at <a class=\"reference external\" href=\"https://supermarket.chef.io/api/v1/cookbooks\">https://supermarket.chef.io/api/v1/cookbooks</a> by using any of the supported endpoints. In most cases, using knife is the best way to interact with these cookbooks; in some cases, using the Cookbooks Site API directly is necessary.</p> <p>The <code class=\"docutils literal\">knife cookbook site</code> subcommand is used to interact with cookbooks that are located at <a class=\"reference external\" href=\"https://supermarket.chef.io\">https://supermarket.chef.io</a>. A user account is required for any community actions that write data to this site. The following arguments do not require a user account: <code class=\"docutils literal\">download</code>, <code class=\"docutils literal\">search</code>, <code class=\"docutils literal\">install</code>, and <code class=\"docutils literal\">list</code>.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Please consider managing community cookbooks using the version of Berkshelf that ships with the Chef development kit. For more information about the Chef development kit, see <a class=\"reference external\" href=\"https://docs.chef.io/devkit/\">https://docs.chef.io/devkit/</a>.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div>  <h2 id=\"download\">download</h2> <p>Use the <code class=\"docutils literal\">download</code> argument to download a cookbook from the community website. A cookbook will be downloaded as a tar.gz archive and placed in the current working directory. If a cookbook (or cookbook version) has been deprecated and the <code class=\"docutils literal\">--force</code> option is not used, knife will alert the user that the cookbook is deprecated and then will provide the name of the most recent non-deprecated version of that cookbook.</p>  <h3 id=\"syntax\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site download COOKBOOK_NAME [COOKBOOK_VERSION] (options)</pre>   <h3 id=\"options\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">COOKBOOK_VERSION</code></dt> <dd>The version of a cookbook to be downloaded. If a cookbook has only one version, this option does not need to be specified. If a cookbook has more than one version and this option is not specified, the most recent version of the cookbook is downloaded.</dd> <dt>\n<code class=\"docutils literal\">-f FILE</code>, <code class=\"docutils literal\">--file FILE</code>\n</dt> <dd>The file to which a cookbook download is written.</dd> <dt><code class=\"docutils literal\">--force</code></dt> <dd>Overwrite an existing directory.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"examples\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Download a cookbook</strong></p> <p>To download the cookbook <code class=\"docutils literal\">getting-started</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site download getting-started</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Downloading getting-started from the cookbooks site at version 1.2.3 to\n  /Users/grantmc/chef-support/getting-started-1.2.3.tar.gz\nCookbook saved: /Users/grantmc/chef-support/getting-started-1.2.3.tar.gz</pre>    <h2 id=\"install\">install</h2> <p>Use the <code class=\"docutils literal\">install</code> argument to install a cookbook that has been downloaded from the community site to a local git repository . This action uses the git version control system in conjunction with the <a class=\"reference external\" href=\"https://supermarket.chef.io/cookbooks\">https://supermarket.chef.io/cookbooks</a> site to install community-contributed cookbooks to the local chef-repo. Using this argument does the following:</p> <blockquote> <div>\n<ol class=\"arabic simple\"> <li>A new “pristine copy” branch is created in git for tracking the upstream.</li> <li>All existing versions of a cookbook are removed from the branch.</li> <li>The cookbook is downloaded from <a class=\"reference external\" href=\"https://supermarket.chef.io/cookbooks\">https://supermarket.chef.io/cookbooks</a> in the tar.gz format.</li> <li>The downloaded cookbook is untarred and its contents are committed to git and a tag is created.</li> <li>The “pristine copy” branch is merged into the master branch.</li> </ol> </div>\n</blockquote> <p>This process allows the upstream cookbook in the master branch to be modified while letting git maintain changes as a separate patch. When an updated upstream version becomes available, those changes can be merged while maintaining any local modifications.</p>  <h3 id=\"id1\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site install COOKBOOK_NAME [COOKBOOK_VERSION] (options)</pre>   <h3 id=\"id2\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-b</code>, <code class=\"docutils literal\">--use-current-branch</code>\n</dt> <dd>Ensure that the current branch is used.</dd> <dt>\n<code class=\"docutils literal\">-B BRANCH</code>, <code class=\"docutils literal\">--branch BRANCH</code>\n</dt> <dd>The name of the default branch. This defaults to the master branch.</dd> <dt><code class=\"docutils literal\">COOKBOOK_VERSION</code></dt> <dd>The version of the cookbook to be installed. If a version is not specified, the most recent version of the cookbook is installed.</dd> <dt>\n<code class=\"docutils literal\">-D</code>, <code class=\"docutils literal\">--skip-dependencies</code>\n</dt> <dd>Ensure that all cookbooks to which the installed cookbook has a dependency are not installed.</dd> <dt>\n<code class=\"docutils literal\">-o PATH:PATH</code>, <code class=\"docutils literal\">--cookbook-path PATH:PATH</code>\n</dt> <dd>The directory in which cookbooks are created. This can be a colon-separated path.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id3\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Install a cookbook</strong></p> <p>To install the cookbook <code class=\"docutils literal\">getting-started</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site install getting-started</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Installing getting-started to /Users/grantmc/chef-support/.chef/../cookbooks\nChecking out the master branch.\nCreating pristine copy branch chef-vendor-getting-started\nDownloading getting-started from the cookbooks site at version 1.2.3 to\n  /Users/grantmc/chef-support/.chef/../cookbooks/getting-started.tar.gz\nCookbook saved: /Users/grantmc/chef-support/.chef/../cookbooks/getting-started.tar.gz\nRemoving pre-existing version.\nUncompressing getting-started version /Users/grantmc/chef-support/.chef/../cookbooks.\nremoving downloaded tarball\n1 files updated, committing changes\nCreating tag cookbook-site-imported-getting-started-1.2.3\nChecking out the master branch.\nUpdating 4d44b5b..b4c32f2\nFast-forward\n cookbooks/getting-started/README.rdoc              |    4 +++\n cookbooks/getting-started/attributes/default.rb    |    1 +\n cookbooks/getting-started/metadata.json            |   29 ++++++++++++++++++++\n cookbooks/getting-started/metadata.rb              |    6 ++++\n cookbooks/getting-started/recipes/default.rb       |   23 +++++++++++++++\n .../templates/default/chef-getting-started.txt.erb |    5 +++\n 6 files changed, 68 insertions(+), 0 deletions(-)\n create mode 100644 cookbooks/getting-started/README.rdoc\n create mode 100644 cookbooks/getting-started/attributes/default.rb\n create mode 100644 cookbooks/getting-started/metadata.json\n create mode 100644 cookbooks/getting-started/metadata.rb\n create mode 100644 cookbooks/getting-started/recipes/default.rb\n create mode 100644 cookbooks/getting-started/templates/default/chef-getting-started.txt.erb\nCookbook getting-started version 1.2.3 successfully installed</pre>    <h2 id=\"list\">list</h2> <p>Use the <code class=\"docutils literal\">list</code> argument to view a list of cookbooks that are currently available at <a class=\"reference external\" href=\"https://supermarket.chef.io/cookbooks\">https://supermarket.chef.io/cookbooks</a>.</p>  <h3 id=\"id4\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site list</pre>   <h3 id=\"id5\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-w</code>, <code class=\"docutils literal\">--with-uri</code>\n</dt> <dd>Show the corresponding URIs.</dd> </dl>   <h3 id=\"id6\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>View a list of cookbooks</strong></p> <p>To view a list of cookbooks at <a class=\"reference external\" href=\"https://supermarket.chef.io/cookbooks\">https://supermarket.chef.io/cookbooks</a> server, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site list</pre> <p>to return a list similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">1password             homesick              rabbitmq\n7-zip                 hostname              rabbitmq-management\nAmazonEC2Tag          hosts                 rabbitmq_chef\nR                     hosts-awareness       rackspaceknife\naccounts              htop                  radiant\nack-grep              hudson                rails\nactivemq              icinga                rails_enterprise\nad                    id3lib                redis-package\nad-likewise           iftop                 redis2\nant                   iis                   redmine\n[...truncated...]</pre>    <h2 id=\"search\">search</h2> <p>Use the <code class=\"docutils literal\">search</code> argument to search for a cookbook at <a class=\"reference external\" href=\"https://supermarket.chef.io/cookbooks\">https://supermarket.chef.io/cookbooks</a>. A search query is used to return a list of cookbooks at <a class=\"reference external\" href=\"https://supermarket.chef.io/cookbooks\">https://supermarket.chef.io/cookbooks</a> and uses the same syntax as the <code class=\"docutils literal\">knife search</code> subcommand.</p>  <h3 id=\"id7\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site search SEARCH_QUERY (options)</pre>   <h3 id=\"id8\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"id9\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Search for cookbooks</strong></p> <p>To search for all of the cookbooks that can be used with Apache, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site search apache*</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">apache2:\n  cookbook:              https://supermarket.chef.io/api/v1/cookbooks/apache2\n  cookbook_description:  Installs and configures apache2 using Debian symlinks\n                         with helper definitions\n  cookbook_maintainer:   chef\n  cookbook_name:         apache2\ninstiki:\n  cookbook:              https://supermarket.chef.io/api/v1/cookbooks/instiki\n  cookbook_description:  Installs instiki, a Ruby on Rails wiki server under\n                         passenger+Apache2.\n  cookbook_maintainer:   jtimberman\n  cookbook_name:         instiki\nkickstart:\n  cookbook:              https://supermarket.chef.io/api/v1/cookbooks/kickstart\n  cookbook_description:  Creates apache2 vhost and serves a kickstart file.\n  cookbook_maintainer:   chef\n  cookbook_name:         kickstart\n[...truncated...]</pre>    <h2 id=\"share\">share</h2> <p>Use the <code class=\"docutils literal\">share</code> argument to add a cookbook to <a class=\"reference external\" href=\"https://supermarket.chef.io/cookbooks\">https://supermarket.chef.io/cookbooks</a>. This action will require a user account and a certificate for <a class=\"reference external\" href=\"https://supermarket.chef.io\">https://supermarket.chef.io</a>. By default, knife will use the user name and API key that is identified in the configuration file used during the upload; otherwise these values must be specified on the command line or in an alternate configuration file. If a cookbook already exists on <a class=\"reference external\" href=\"https://supermarket.chef.io/cookbooks\">https://supermarket.chef.io/cookbooks</a>, then only an owner or maintainer of that cookbook can make updates.</p>  <h3 id=\"id10\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site share COOKBOOK_NAME CATEGORY (options)</pre>   <h3 id=\"id11\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">CATEGORY</code></dt> <dd>The cookbook category: <code class=\"docutils literal\">\"Databases\"</code>, <code class=\"docutils literal\">\"Web Servers\"</code>, <code class=\"docutils literal\">\"Process Management\"</code>, <code class=\"docutils literal\">\"Monitoring &amp; Trending\"</code>, <code class=\"docutils literal\">\"Programming Languages\"</code>, <code class=\"docutils literal\">\"Package Management\"</code>, <code class=\"docutils literal\">\"Applications\"</code>, <code class=\"docutils literal\">\"Networking\"</code>, <code class=\"docutils literal\">\"Operating Systems &amp; Virtualization\"</code>, <code class=\"docutils literal\">\"Utilities\"</code>, or <code class=\"docutils literal\">\"Other\"</code>.</dd> <dt>\n<code class=\"docutils literal\">-n</code>, <code class=\"docutils literal\">--dry-run</code>\n</dt> <dd>Take no action and only print out results. Default: <code class=\"docutils literal\">false</code>.</dd> <dt>\n<code class=\"docutils literal\">-o PATH:PATH</code>, <code class=\"docutils literal\">--cookbook-path PATH:PATH</code>\n</dt> <dd>The directory in which cookbooks are created. This can be a colon-separated path.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id12\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Share a cookbook</strong></p> <p>To share a cookbook named <code class=\"docutils literal\">apache2</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site share \"apache2\" \"Web Servers\"</pre>    <h2 id=\"show\">show</h2> <p>Use the <code class=\"docutils literal\">show</code> argument to view information about a cookbook on <a class=\"reference external\" href=\"https://supermarket.chef.io/cookbooks\">https://supermarket.chef.io/cookbooks</a>.</p>  <h3 id=\"id13\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site show COOKBOOK_NAME [COOKBOOK_VERSION]</pre>   <h3 id=\"id14\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">COOKBOOK_VERSION</code></dt> <dd>The version of a cookbook to be shown. If a cookbook has only one version, this option does not need to be specified. If a cookbook has more than one version and this option is not specified, a list of cookbook versions is returned.</dd> </dl>   <h3 id=\"id15\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Show cookbook data</strong></p> <p>To show the details for a cookbook named <code class=\"docutils literal\">haproxy</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site show haproxy</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">average_rating:\ncategory:        Networking\ncreated_at:      2009-10-25T23:51:07Z\ndescription:     Installs and configures haproxy\nexternal_url:\nlatest_version:  https://supermarket.chef.io/api/v1/cookbooks/haproxy/versions/1_0_3\nmaintainer:      opscode\nname:            haproxy\nupdated_at:      2011-06-30T21:53:25Z\nversions:\n  https://supermarket.chef.io/api/v1/cookbooks/haproxy/versions/1_0_3\n  https://supermarket.chef.io/api/v1/cookbooks/haproxy/versions/1_0_2\n  https://supermarket.chef.io/api/v1/cookbooks/haproxy/versions/1_0_1\n  https://supermarket.chef.io/api/v1/cookbooks/haproxy/versions/1_0_0\n  https://supermarket.chef.io/api/v1/cookbooks/haproxy/versions/0_8_1\n  https://supermarket.chef.io/api/v1/cookbooks/haproxy/versions/0_8_0\n  https://supermarket.chef.io/api/v1/cookbooks/haproxy/versions/0_7_0</pre> <p><strong>Show cookbook data as JSON</strong></p> <p>To view information in JSON format, use the <code class=\"docutils literal\">-F</code> common option as part of the command like this:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site show devops -F json</pre> <p>Other formats available include <code class=\"docutils literal\">text</code>, <code class=\"docutils literal\">yaml</code>, and <code class=\"docutils literal\">pp</code>.</p>    <h2 id=\"unshare\">unshare</h2> <p>Use the <code class=\"docutils literal\">unshare</code> argument to stop the sharing of a cookbook at <a class=\"reference external\" href=\"https://supermarket.chef.io/cookbooks\">https://supermarket.chef.io/cookbooks</a>. Only the maintainer of a cookbook may perform this action.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Unsharing a cookbook will break a cookbook that has set a dependency on that cookbook or cookbook version.</p> </div>  <h3 id=\"id16\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site unshare COOKBOOK_NAME/versions/VERSION</pre>   <h3 id=\"id17\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"id18\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Unshare a cookbook</strong></p> <p>To unshare a cookbook named <code class=\"docutils literal\">getting-started</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site unshare \"getting-started\"</pre> <p><strong>Unshare a cookbook version</strong></p> <p>To unshare cookbook version <code class=\"docutils literal\">0.10.0</code> for the <code class=\"docutils literal\">getting-started</code> cookbook, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife cookbook site unshare \"getting-started/version/0.10.0\"</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_cookbook_site.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_cookbook_site.html</a>\n  </p>\n</div>\n","12-9/knife_deps":"<h1 id=\"knife-deps\">knife deps</h1> <p>Use the <code class=\"docutils literal\">knife deps</code> subcommand to identify dependencies for a node, role, or cookbook.</p>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife deps (options)</pre>   <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--chef-repo-path PATH</code></dt> <dd>The path to the chef-repo. This setting will override the default path to the chef-repo. Default: same value as specified by <code class=\"docutils literal\">chef_repo_path</code> in client.rb.</dd> <dt><code class=\"docutils literal\">--concurrency</code></dt> <dd>The number of allowed concurrent connections. Default: <code class=\"docutils literal\">10</code>.</dd> <dt><code class=\"docutils literal\">--[no-]recurse</code></dt> <dd>Use <code class=\"docutils literal\">--recurse</code> to list dependencies recursively. This option can only be used when <code class=\"docutils literal\">--tree</code> is set to <code class=\"docutils literal\">true</code>. Default: <code class=\"docutils literal\">--no-recurse</code>.</dd> <dt><code class=\"docutils literal\">--remote</code></dt> <dd>Determine dependencies from objects located on the Chef server instead of in the local chef-repo. Default: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">--repo-mode MODE</code></dt> <dd>The layout of the local chef-repo. Possible values: <code class=\"docutils literal\">static</code>, <code class=\"docutils literal\">everything</code>, or <code class=\"docutils literal\">hosted_everything</code>. Use <code class=\"docutils literal\">static</code> for just roles, environments, cookbooks, and data bags. By default, <code class=\"docutils literal\">everything</code> and <code class=\"docutils literal\">hosted_everything</code> are dynamically selected depending on the server type. Default: <code class=\"docutils literal\">everything</code> / <code class=\"docutils literal\">hosted_everything</code>.</dd> <dt><code class=\"docutils literal\">--tree</code></dt> <dd>Show dependencies in a visual tree structure (including duplicates, if they exist). Default: <code class=\"docutils literal\">false</code>.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Find dependencies for a node</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife deps nodes/node_name.json</pre> <p><strong>Find dependencies for a role</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife deps roles/role_name.json</pre> <p><strong>Find dependencies for a cookbook</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife deps cookbooks/cookbook_name.json</pre> <p><strong>Find dependencies for an environment</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife deps environments/environment_name.json</pre> <p><strong>Find dependencies for a combination of nodes, roles, and so on</strong></p> <p>To find the dependencies for a combination of nodes, cookbooks, roles, and/or environments:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife deps cookbooks/git.json cookbooks/github.json roles/base.json environments/desert.json nodes/mynode.json</pre> <p><strong>Use a wildcard</strong></p> <p>A wildcard can be used to return all of the child nodes. For example, all of the environments:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife deps environments/*.json</pre> <p><strong>Return as tree</strong></p> <p>Use the <code class=\"docutils literal\">--tree</code> option to view the results with structure:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife deps roles/webserver.json</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">roles/webserver.json\n  roles/base.json\n    cookbooks/github\n      cookbooks/git\n    cookbooks/users\n  cookbooks/apache2</pre> <p><strong>Pass knife deps output to knife upload</strong></p> <p>The output of <code class=\"docutils literal\">knife deps</code> can be passed to <code class=\"docutils literal\">knife upload</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife upload `knife deps nodes/*.json</pre> <p><strong>Pass knife deps output to knife xargs</strong></p> <p>The output of <code class=\"docutils literal\">knife deps</code> can be passed to <code class=\"docutils literal\">knife xargs</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife deps nodes/*.json | xargs knife upload</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_deps.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_deps.html</a>\n  </p>\n</div>\n","12-9/knife_diff":"<h1 id=\"knife-diff\">knife diff</h1> <p>Use the <code class=\"docutils literal\">knife diff</code> subcommand to compare the differences between files and directories on the Chef server and in the chef-repo. For example, to compare files on the Chef server prior to an uploading or downloading files using the <code class=\"docutils literal\">knife download</code> and <code class=\"docutils literal\">knife upload</code> subcommands, or to ensure that certain files in multiple production environments are the same. This subcommand is similar to the <code class=\"docutils literal\">git diff</code> command that can be used to diff what is in the chef-repo with what is synced to a git repository.</p>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife diff [PATTERN...] (options)</pre>   <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--chef-repo-path PATH</code></dt> <dd>The path to the chef-repo. This setting will override the default path to the chef-repo. Default: same value as specified by <code class=\"docutils literal\">chef_repo_path</code> in client.rb.</dd> <dt><code class=\"docutils literal\">--cookbook-version VERSION</code></dt> <dd>The version of a cookbook to download.</dd> <dt><code class=\"docutils literal\">--concurrency</code></dt> <dd>The number of allowed concurrent connections. Default: <code class=\"docutils literal\">10</code>.</dd> <dt><code class=\"docutils literal\">--diff-filter=[(A|D|M|T)...[*]]</code></dt> <dd>Select only files that have been added (<code class=\"docutils literal\">A</code>), deleted (<code class=\"docutils literal\">D</code>), modified (<code class=\"docutils literal\">M</code>), and/or have had their type changed (<code class=\"docutils literal\">T</code>). Any combination of filter characters may be used, including no filter characters. Use <code class=\"docutils literal\">*</code> to select all paths if a file matches other criteria in the comparison. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">--name-only</code></dt> <dd>Show only the names of modified files.</dd> <dt><code class=\"docutils literal\">--name-status</code></dt> <dd>Show only the names of files with a status of <code class=\"docutils literal\">Added</code>, <code class=\"docutils literal\">Deleted</code>, <code class=\"docutils literal\">Modified</code>, or <code class=\"docutils literal\">Type Changed</code>.</dd> <dt><code class=\"docutils literal\">--no-recurse</code></dt> <dd>Use <code class=\"docutils literal\">--no-recurse</code> to disable listing a directory recursively. Default: <code class=\"docutils literal\">--recurse</code>.</dd> <dt><code class=\"docutils literal\">--repo-mode MODE</code></dt> <dd>The layout of the local chef-repo. Possible values: <code class=\"docutils literal\">static</code>, <code class=\"docutils literal\">everything</code>, or <code class=\"docutils literal\">hosted_everything</code>. Use <code class=\"docutils literal\">static</code> for just roles, environments, cookbooks, and data bags. By default, <code class=\"docutils literal\">everything</code> and <code class=\"docutils literal\">hosted_everything</code> are dynamically selected depending on the server type. Default: <code class=\"docutils literal\">everything</code> / <code class=\"docutils literal\">hosted_everything</code>.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Compare files that contain JSON data</strong></p> <p>To compare the <code class=\"docutils literal\">base.json</code> role to a <code class=\"docutils literal\">webserver.json</code> role, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife diff roles/base.json roles/webserver.json</pre> <p><strong>Compare the chef-repo and the server</strong></p> <p>To compare the differences between the local chef-repo and the files that are on the Chef server, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife diff</pre> <p><strong>Compare, then return results</strong></p> <p>To diff a node named <code class=\"docutils literal\">node-lb</code> and then only return files that have been added, deleted, modified, or changed, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife diff --name-status node-lb</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">node-lb/recipes/eip.rb\nnode-lb/recipes/heartbeat-int.rb\nnode-lb/templates/default/corpsite.conf.erb\nnode-lb/files/default/wildcard.node.com.crt\nnode-lb/files/default/wildcard.node.com.crt-2009\nnode-lb/files/default/wildcard.node.com.key\nnode-lb/.gitignore\nnode-lb/Rakefile</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_diff.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_diff.html</a>\n  </p>\n</div>\n","12-9/knife_edit":"<h1 id=\"knife-edit\">knife edit</h1> <p>Use the <code class=\"docutils literal\">knife edit</code> subcommand to edit objects on the Chef server. This subcommand works similar to <code class=\"docutils literal\">knife cookbook edit</code>, <code class=\"docutils literal\">knife data bag edit</code>, <code class=\"docutils literal\">knife environment edit</code>, <code class=\"docutils literal\">knife node edit</code>, and <code class=\"docutils literal\">knife role edit</code>, but with a single verb (and a single action).</p>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife edit (options)</pre>   <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--chef-repo-path PATH</code></dt> <dd>The path to the chef-repo. This setting will override the default path to the chef-repo. Default: same value as specified by <code class=\"docutils literal\">chef_repo_path</code> in client.rb.</dd> <dt><code class=\"docutils literal\">--concurrency</code></dt> <dd>The number of allowed concurrent connections. Default: <code class=\"docutils literal\">10</code>.</dd> <dt><code class=\"docutils literal\">--local</code></dt> <dd>Show files in the local chef-repo instead of a remote location. Default: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">--repo-mode MODE</code></dt> <dd>The layout of the local chef-repo. Possible values: <code class=\"docutils literal\">static</code>, <code class=\"docutils literal\">everything</code>, or <code class=\"docutils literal\">hosted_everything</code>. Use <code class=\"docutils literal\">static</code> for just roles, environments, cookbooks, and data bags. By default, <code class=\"docutils literal\">everything</code> and <code class=\"docutils literal\">hosted_everything</code> are dynamically selected depending on the server type. Default: <code class=\"docutils literal\">everything</code> / <code class=\"docutils literal\">hosted_everything</code>.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Remove a user from /groups/admins.json</strong></p> <p>A user who belongs to the <code class=\"docutils literal\">admins</code> group must be removed from the group before they may be removed from an organization. To remove a user from the <code class=\"docutils literal\">admins</code> group, run the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ EDITOR=vi knife edit /groups/admins.json</pre> <p>make the required changes, and then save the file.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_edit.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_edit.html</a>\n  </p>\n</div>\n","12-9/knife_data_bag":"<h1 id=\"knife-data-bag\">knife data bag</h1> <p>A data bag is a global variable that is stored as JSON data and is accessible from a Chef server. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search.</p> <p>A data bag item may be encrypted using <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Symmetric-key_algorithm\">shared secret encryption</a>. This allows each data bag item to store confidential information (such as a database password) or to be managed in a source control system (without plain-text data appearing in revision history). Each data bag item may be encrypted individually; if a data bag contains multiple encrypted data bag items, these data bag items are not required to share the same encryption keys.</p> <p>The <code class=\"docutils literal\">knife data bag</code> subcommand is used to manage arbitrary stores of globally available JSON data.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div>  <h2 id=\"create\">create</h2> <p>Use the <code class=\"docutils literal\">create</code> argument to add a data bag to the Chef server.</p>  <h3 id=\"syntax\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag create DATA_BAG_NAME [DATA_BAG_ITEM] (options)</pre>   <h3 id=\"options\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">DATA_BAG_ITEM</code></dt> <dd>The name of a specific item within a data bag.</dd> <dt><code class=\"docutils literal\">--secret SECRET</code></dt> <dd>The encryption key that is used for values contained within a data bag item. If <code class=\"docutils literal\">secret</code> is not specified, the chef-client looks for a secret at the path specified by the <code class=\"docutils literal\">encrypted_data_bag_secret</code> setting in the client.rb file.</dd> <dt><code class=\"docutils literal\">--secret-file FILE</code></dt> <dd>The path to the file that contains the encryption key.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">For encrypted data bag items, use either <code class=\"docutils literal\">--secret</code> or <code class=\"docutils literal\">--secret-file</code>, not both.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"examples\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Create a data bag</strong></p> <p>To create a data bag named “admins”, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag create admins</pre> <p>to return:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Created data_bag[admins]</pre>    <h2 id=\"delete\">delete</h2> <p>Use the <code class=\"docutils literal\">delete</code> argument to delete a data bag or a data bag item from a Chef server.</p>  <h3 id=\"id1\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag delete DATA_BAG_NAME [DATA_BAG_ITEM] (options)</pre>   <h3 id=\"id2\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">DATA_BAG_ITEM</code></dt> <dd>The name of a specific item within a data bag.</dd> </dl>   <h3 id=\"id3\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Delete a data bag</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag delete data_bag_name</pre> <p><strong>Delete a data bag item</strong></p> <p>To delete an item named “charlie”, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag delete admins charlie</pre> <p>Type <code class=\"docutils literal\">Y</code> to confirm a deletion.</p>    <h2 id=\"edit\">edit</h2> <p>Use the <code class=\"docutils literal\">edit</code> argument to edit the data contained in a data bag. If encryption is being used, the data bag will be decrypted, the data will be made available in the $EDITOR, and then encrypted again before saving it to the Chef server.</p>  <h3 id=\"id4\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag edit DATA_BAG_NAME [DATA_BAG_ITEM] (options)</pre>   <h3 id=\"id5\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">DATA_BAG_ITEM</code></dt> <dd>The name of a specific item within a data bag.</dd> <dt><code class=\"docutils literal\">--secret SECRET</code></dt> <dd>The encryption key that is used for values contained within a data bag item. If <code class=\"docutils literal\">secret</code> is not specified, the chef-client looks for a secret at the path specified by the <code class=\"docutils literal\">encrypted_data_bag_secret</code> setting in the client.rb file.</dd> <dt><code class=\"docutils literal\">--secret-file FILE</code></dt> <dd>The path to the file that contains the encryption key.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">For encrypted data bag items, use either <code class=\"docutils literal\">--secret</code> or <code class=\"docutils literal\">--secret-file</code>, not both.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id6\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Edit a data bag</strong></p> <p>To edit the contents of a data bag, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag edit dogs tibetanspaniel</pre> <p>where <code class=\"docutils literal\">dogs</code> is the name of the data bag and <code class=\"docutils literal\">tibetanspaniel</code> is the name of the data bag item. This will return something similar to the following in the knife editor:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\":\"data_bag_item_dogs_tibetanspaniel\",\n  \"json_class\":\"Chef::DataBagItem\",\n  \"chef_type\":\"data_bag_item\",\n  \"data_bag\":\"dogs\",\n  \"raw_data\":\n    {\n      \"description\":\"small dog that likes to sit in windows\",\n      \"id\":\"tibetanspaniel\"\n    }\n}</pre> <p>Make the necessary changes to the key-value pairs under <code class=\"docutils literal\">raw_data</code> and save them.</p> <p><strong>Edit a data bag item</strong></p> <p>To edit an item named “charlie” that is contained in a data bag named “admins”, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag edit admins charlie</pre> <p>to open the $EDITOR. Once opened, you can update the data before saving it to the Chef server. For example, by changing:</p> <pre class=\"highlight-bash\" data-language=\"bash\">{\n   \"id\": \"charlie\"\n}</pre> <p>to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n   \"id\": \"charlie\",\n   \"uid\": 1005,\n   \"gid\": \"ops\",\n   \"shell\": \"/bin/zsh\",\n   \"comment\": \"Crazy Charlie\"\n}</pre>    <h2 id=\"from-file\">from file</h2> <p>Use the <code class=\"docutils literal\">from file</code> argument to:</p> <ul class=\"simple\"> <li>Add a data bag item to a data bag</li> <li>Update the contents of an existing data bag item</li> </ul> <p>The data bag itself must already exist on the Chef server and must be specified as part of the command. The contents of the data bag item are specified using a JSON file. This JSON file may be located at a relative or absolute path; its location must be specified as part of the command. The JSON file that defines the contents of the data bag item must at least contain the name of the data bag item—<code class=\"docutils literal\">\"id\": \"name\"</code>.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">A chef-client must be version 11.6 (or higher) when using the <code class=\"docutils literal\">knife data bag from file</code> argument with the Enterprise Chef or Open Source Chef version 11 servers.</p> </div>  <h3 id=\"id7\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag from file DATA_BAG_NAME_or_PATH</pre>   <h3 id=\"id8\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--all</code>\n</dt> <dd>Upload all data bags found at the specified path.</dd> <dt><code class=\"docutils literal\">--secret SECRET</code></dt> <dd>The encryption key that is used for values contained within a data bag item. If <code class=\"docutils literal\">secret</code> is not specified, the chef-client looks for a secret at the path specified by the <code class=\"docutils literal\">encrypted_data_bag_secret</code> setting in the client.rb file.</dd> <dt><code class=\"docutils literal\">--secret-file FILE</code></dt> <dd>The path to the file that contains the encryption key.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">For encrypted data bag items, use either <code class=\"docutils literal\">--secret</code> or <code class=\"docutils literal\">--secret-file</code>, not both.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id9\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Create a data bag from a file</strong></p> <p>To create a data bag on the Chef server from a file:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag from file \"path to JSON file\"</pre> <p><strong>Create an encrypted data bag from a file</strong></p> <p>To create a data bag named “devops_data” that contains encrypted data, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag from file devops_data --secret-file \"path to decryption file\"</pre> <p><strong>Create an encrypted data bag for use with chef-client local mode</strong></p> <p>To generate an encrypted data bag item in a JSON file for use when the chef-client is run in local mode (via the <code class=\"docutils literal\">--local-mode</code> option), enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag from file my_data_bag /path/to/data_bag_item.json -z --secret-file /path/to/encrypted_data_bag_secret</pre> <p>this will create an encrypted JSON file in:</p> <pre class=\"highlight-python\" data-language=\"python\">data_bags/my_data_bag/data_bag_item.json</pre>    <h2 id=\"list\">list</h2> <p>Use the <code class=\"docutils literal\">list</code> argument to view a list of data bags that are currently available on the Chef server.</p>  <h3 id=\"id10\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag list</pre>   <h3 id=\"id11\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-w</code>, <code class=\"docutils literal\">--with-uri</code>\n</dt> <dd>Show the corresponding URIs.</dd> </dl>   <h3 id=\"id12\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>View a list of data bags</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag list</pre>    <h2 id=\"show\">show</h2> <p>Use the <code class=\"docutils literal\">show</code> argument to view the contents of a data bag.</p>  <h3 id=\"id13\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag show DATA_BAG_NAME (options)</pre>   <h3 id=\"id14\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">DATA_BAG_ITEM</code></dt> <dd>The name of a specific item within a data bag.</dd> <dt><code class=\"docutils literal\">--secret SECRET</code></dt> <dd>The encryption key that is used for values contained within a data bag item. If <code class=\"docutils literal\">secret</code> is not specified, the chef-client looks for a secret at the path specified by the <code class=\"docutils literal\">encrypted_data_bag_secret</code> setting in the client.rb file.</dd> <dt><code class=\"docutils literal\">--secret-file FILE</code></dt> <dd>The path to the file that contains the encryption key.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">For encrypted data bag items, use either <code class=\"docutils literal\">--secret</code> or <code class=\"docutils literal\">--secret-file</code>, not both.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id15\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Show a data bag</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag show admins</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">charlie</pre> <p><strong>Show a data bag item</strong></p> <p>To show the contents of a specific item within data bag, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag show admins charlie</pre> <p>to return:</p> <pre class=\"highlight-bash\" data-language=\"bash\">comment:  Crazy Charlie\ngid:      ops\nid:       charlie\nshell:    /bin/zsh\nuid:      1005</pre> <p><strong>Show a data bag, encrypted</strong></p> <p>To show the contents of a data bag named <code class=\"docutils literal\">passwords</code> with an item that contains encrypted data named <code class=\"docutils literal\">mysql</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag show passwords mysql</pre> <p>to return:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">## sample:\n{\n  \"id\": \"mysql\",\n  \"pass\": \"trywgFA6R70NO28PNhMpGhEvKBZuxouemnbnAUQsUyo=\\n\",\n  \"user\": \"e/p+8WJYVHY9fHcEgAAReg==\\n\"\n}</pre> <p><strong>Show a data bag, decrypted</strong></p> <p>To show the decrypted contents of the same data bag, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag show --secret-file /path/to/decryption/file passwords mysql</pre> <p>to return:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">## sample:\n{\n  \"id\": \"mysql\",\n  \"pass\": \"thesecret123\",\n  \"user\": \"fred\"\n}</pre> <p><strong>Show a data bag as JSON</strong></p> <p>To view information in JSON format, use the <code class=\"docutils literal\">-F</code> common option as part of the command like this:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag show admins -F json</pre> <p>Other formats available include <code class=\"docutils literal\">text</code>, <code class=\"docutils literal\">yaml</code>, and <code class=\"docutils literal\">pp</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_data_bag.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_data_bag.html</a>\n  </p>\n</div>\n","12-9/knife_download":"<h1 id=\"knife-download\">knife download</h1> <p>Use the <code class=\"docutils literal\">knife download</code> subcommand to download roles, cookbooks, environments, nodes, and data bags from the Chef server to the current working directory. It can be used to back up data on the Chef server, inspect the state of one or more files, or to extract out-of-process changes users may have made to files on the Chef server, such as if a user made a change that bypassed version source control. This subcommand is often used in conjunction with <code class=\"docutils literal\">knife diff</code>, which can be used to see exactly what changes will be downloaded, and then <code class=\"docutils literal\">knife upload</code>, which does the opposite of <code class=\"docutils literal\">knife download</code>.</p>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife download [PATTERN...] (options)</pre>   <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--chef-repo-path PATH</code></dt> <dd>The path to the chef-repo. This setting will override the default path to the chef-repo. Default: same value as specified by <code class=\"docutils literal\">chef_repo_path</code> in client.rb.</dd> <dt><code class=\"docutils literal\">--concurrency</code></dt> <dd>The number of allowed concurrent connections. Default: <code class=\"docutils literal\">10</code>.</dd> <dt><code class=\"docutils literal\">--cookbook-version VERSION</code></dt> <dd>The version of a cookbook to download.</dd> <dt>\n<code class=\"docutils literal\">-n</code>, <code class=\"docutils literal\">--dry-run</code>\n</dt> <dd>Take no action and only print out results. Default: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">--[no-]diff</code></dt> <dd>Download only new and modified files. Set to <code class=\"docutils literal\">false</code> to download all files. Default: <code class=\"docutils literal\">--diff</code>.</dd> <dt><code class=\"docutils literal\">--[no-]force</code></dt> <dd>Use <code class=\"docutils literal\">--force</code> to download files even when the file on the hard drive is identical to the object on the server (role, cookbook, etc.). By default, files are compared to see if they have equivalent content, and local files are only overwritten if they are different. Default: <code class=\"docutils literal\">--no-force</code>.</dd> <dt><code class=\"docutils literal\">--[no-]purge</code></dt> <dd>Use <code class=\"docutils literal\">--purge</code> to delete local files and directories that do not exist on the Chef server. By default, if a role, cookbook, etc. does not exist on the Chef server, the local file for said role is left alone and NOT deleted. Default: <code class=\"docutils literal\">--no-purge</code>.</dd> <dt><code class=\"docutils literal\">--[no-]recurse</code></dt> <dd>Use <code class=\"docutils literal\">--no-recurse</code> to disable downloading a directory recursively. Default: <code class=\"docutils literal\">--recurse</code>.</dd> <dt><code class=\"docutils literal\">--repo-mode MODE</code></dt> <dd>The layout of the local chef-repo. Possible values: <code class=\"docutils literal\">static</code>, <code class=\"docutils literal\">everything</code>, or <code class=\"docutils literal\">hosted_everything</code>. Use <code class=\"docutils literal\">static</code> for just roles, environments, cookbooks, and data bags. By default, <code class=\"docutils literal\">everything</code> and <code class=\"docutils literal\">hosted_everything</code> are dynamically selected depending on the server type. Default: <code class=\"docutils literal\">everything</code> / <code class=\"docutils literal\">hosted_everything</code>.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Download the entire chef-repo</strong></p> <p>To download the entire chef-repo from the Chef server, browse to the top level of the chef-repo and enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife download /</pre> <p><strong>Download the /cookbooks directory</strong></p> <p>To download the <code class=\"docutils literal\">cookbooks/</code> directory from the Chef server, browse to the top level of the chef-repo and enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife download cookbooks</pre> <p>or from anywhere in the chef-repo, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife download /cookbooks</pre> <p><strong>Download the /environments directory</strong></p> <p>To download the <code class=\"docutils literal\">environments/</code> directory from the Chef server, browse to the top level of the chef-repo and enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife download environments</pre> <p>or from anywhere in the chef-repo, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife download /environments</pre> <p><strong>Download an environment</strong></p> <p>To download an environment named “production” from the Chef server, browse to the top level of the chef-repo and enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife download environments/production.json</pre> <p>or from the <code class=\"docutils literal\">environments/</code> directory, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife download production.json</pre> <p><strong>Download the /roles directory</strong></p> <p>To download the <code class=\"docutils literal\">roles/</code> directory from the Chef server, browse to the top level of the chef-repo and enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife download roles</pre> <p>or from anywhere in the chef-repo, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife download /roles</pre> <p><strong>Download cookbooks and roles</strong></p> <p>To download all cookbooks that start with “apache” and belong to the “webserver” role, browse to the top level of the chef-repo and enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$  knife download cookbooks/apache\\* roles/webserver.json</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_download.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_download.html</a>\n  </p>\n</div>\n","12-9/knife_environment":"<h1 id=\"knife-environment\">knife environment</h1> <p>An environment is a way to map an organization’s real-life workflow to what can be configured and managed when using Chef server. Every organization begins with a single environment called the <code class=\"docutils literal\">_default</code> environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization’s patterns and workflow. For example, creating <code class=\"docutils literal\">production</code>, <code class=\"docutils literal\">staging</code>, <code class=\"docutils literal\">testing</code>, and <code class=\"docutils literal\">development</code> environments. Generally, an environment is also associated with one (or more) cookbook versions.</p> <p>The <code class=\"docutils literal\">knife environment</code> subcommand is used to manage environments within a single organization on the Chef server.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div>  <h2 id=\"compare\">compare</h2> <p>Use the <code class=\"docutils literal\">compare</code> argument to compare the cookbook version constraints that are set on one (or more) environments.</p>  <h3 id=\"syntax\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment compare [ENVIRONMENT_NAME...] (options)</pre>   <h3 id=\"options\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--all</code>\n</dt> <dd>Upload all environments found at the specified path.</dd> <dt>\n<code class=\"docutils literal\">-m</code>, <code class=\"docutils literal\">--mismatch</code>\n</dt> <dd>Show only matching versions.</dd> </dl>   <h3 id=\"examples\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Compare cookbook versions in a single environment</strong></p> <p>To compare cookbook versions for a single environment:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment compare development</pre> <p>to return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">development\napache     2.3.1\nwindows    4.1.2</pre> <p><strong>Compare cookbook versions for multiple environments</strong></p> <p>To compare cookbook versions for multiple environments:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment compare development staging</pre> <p>to return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">development    staging\napache        2.3.1          1.2.2\nwindows       4.1.2          1.0.0\npostgresql    1.0.0          1.0.0</pre> <p><strong>Compare cookbook versions for all environments</strong></p> <p>To compare all cookbook versions for all environments:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment compare --all</pre> <p>to return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">staging  development\nulimit             latest   latest\nredisio            latest   latest\njournly            latest   latest\naws                latest   latest\ntest               latest   latest\nunicorn            latest   latest\nsensu              latest   latest\nrunit              latest   latest\ntemplater          latest   latest\npowershell         latest   latest\nopenssl            latest   latest\nrbenv              latest   latest\nrabbitmq           latest   latest\npostgresql         latest   latest\nmysql              latest   latest\nohai               latest   latest\ngit                latest   latest\nerlang             latest   latest\nssh_known_hosts    latest   latest\nnginx              latest   latest\ndatabase           latest   latest\nyum                latest   latest\nxfs                latest   latest\napt                latest   latest\ndmg                latest   latest\nchef_handler       latest   latest\nwindows            1.0.0    4.1.2</pre>    <h2 id=\"create\">create</h2> <p>Use the <code class=\"docutils literal\">create</code> argument to add an environment object to the Chef server. When this argument is run, knife will open $EDITOR to enable editing of the <code class=\"docutils literal\">ENVIRONMENT</code> description field (unless a description is specified as part of the command). When finished, knife will add the environment to the Chef server.</p>  <h3 id=\"id1\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment create ENVIRONMENT_NAME -d DESCRIPTION</pre>   <h3 id=\"id2\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-d DESCRIPTION</code>, <code class=\"docutils literal\">--description DESCRIPTION</code>\n</dt> <dd>The description of the environment. This value populates the description field for the environment on the Chef server.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id3\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Create an environment</strong></p> <p>To create an environment named <code class=\"docutils literal\">dev</code> with a description of <code class=\"docutils literal\">The development environment.</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment create dev -d \"The development environment.\"</pre>    <h2 id=\"delete\">delete</h2> <p>Use the <code class=\"docutils literal\">delete</code> argument to delete an environment from a Chef server.</p>  <h3 id=\"id4\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment delete ENVIRONMENT_NAME</pre>   <h3 id=\"id5\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"id6\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Delete an environment</strong></p> <p>To delete an environment named <code class=\"docutils literal\">dev</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment delete dev</pre> <p>Type <code class=\"docutils literal\">Y</code> to confirm a deletion.</p>    <h2 id=\"edit\">edit</h2> <p>Use the <code class=\"docutils literal\">edit</code> argument to edit the attributes of an environment. When this argument is run, knife will open $EDITOR to enable editing of <code class=\"docutils literal\">ENVIRONMENT</code> attributes. When finished, knife will update the Chef server with those changes.</p>  <h3 id=\"id7\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment edit ENVIRONMENT_NAME</pre>   <h3 id=\"id8\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"id9\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Edit an environment</strong></p> <p>To edit an environment named <code class=\"docutils literal\">devops</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment edit devops</pre>    <h2 id=\"from-file\">from file</h2> <p>Use the <code class=\"docutils literal\">from file</code> argument to add or update an environment using a JSON or Ruby DSL description. It must be run with the <code class=\"docutils literal\">create</code> or <code class=\"docutils literal\">edit</code> arguments.</p>  <h3 id=\"id10\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment [create | edit] from file FILE (options)</pre>   <h3 id=\"id11\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--all</code>\n</dt> <dd>Upload all environments found at the specified path.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id12\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Create an environment from a JSON file</strong></p> <p>To add an environment using data contained in a JSON file:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment create devops from file \"path to JSON file\"</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment edit devops from file \"path to JSON file\"</pre>    <h2 id=\"list\">list</h2> <p>Use the <code class=\"docutils literal\">list</code> argument to list all of the environments that are currently available on the Chef server.</p>  <h3 id=\"id13\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment list -w</pre>   <h3 id=\"id14\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-w</code>, <code class=\"docutils literal\">--with-uri</code>\n</dt> <dd>Show the corresponding URIs.</dd> </dl>   <h3 id=\"id15\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>View a list of environments</strong></p> <p>To view a list of environments:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment list -w</pre>    <h2 id=\"show\">show</h2> <p>Use the <code class=\"docutils literal\">show</code> argument to display information about the specified environment.</p>  <h3 id=\"id16\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment show ENVIRONMENT_NAME</pre>   <h3 id=\"id17\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a ATTR</code>, <code class=\"docutils literal\">--attribute ATTR</code>\n</dt> <dd>The attribute (or attributes) to show.</dd> </dl>   <h3 id=\"id18\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Show environments</strong></p> <p>To view information about the <code class=\"docutils literal\">dev</code> environment enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment show dev</pre> <p>to return:</p> <pre class=\"highlight-bash\" data-language=\"bash\">% knife environment show dev\nchef_type:            environment\ncookbook_versions:\ndefault_attributes:\ndescription:\njson_class:           Chef::Environment\nname:                 dev\noverride_attributes:\n\n\\\\\n\\\\\n\\\\\n\\\\</pre> <p><strong>Show environments as JSON</strong></p> <p>To view information in JSON format, use the <code class=\"docutils literal\">-F</code> common option as part of the command like this:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife environment show devops -F json</pre> <p>Other formats available include <code class=\"docutils literal\">text</code>, <code class=\"docutils literal\">yaml</code>, and <code class=\"docutils literal\">pp</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_environment.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_environment.html</a>\n  </p>\n</div>\n","12-9/knife_exec":"<h1 id=\"knife-exec\">knife exec</h1> <p>The <code class=\"docutils literal\">knife exec</code> subcommand uses the knife configuration file to execute Ruby scripts in the context of a fully configured chef-client. Use this subcommand to run scripts that will only access Chef server one time (or otherwise very infrequently) or any time that an operation does not warrant full usage of the knife subcommand library.</p>  <h2 id=\"authenticated-api-requests\">Authenticated API Requests</h2> <p>The <code class=\"docutils literal\">knife exec</code> subcommand can be used to make authenticated API requests to the Chef server using the following methods:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Method</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">api.delete</code></td> <td>Use to delete an object from the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">api.get</code></td> <td>Use to get the details of an object on the Chef server.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">api.post</code></td> <td>Use to add an object to the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">api.put</code></td> <td>Use to update an object on the Chef server.</td> </tr> </tbody> </table> <p>These methods are used with the <code class=\"docutils literal\">-E</code> option, which executes that string locally on the workstation using chef-shell. These methods have the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife exec -E 'api.method(/endpoint)'</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">api.method</code> is the corresponding authentication method — <code class=\"docutils literal\">api.delete</code>, <code class=\"docutils literal\">api.get</code>, <code class=\"docutils literal\">api.post</code>, or <code class=\"docutils literal\">api.put</code>\n</li> <li>\n<code class=\"docutils literal\">/endpoint</code> is an endpoint in the Chef server API</li> </ul> <p>For example, to get the data for a node named “Example_Node”:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife exec -E 'puts api.get(\"/nodes/Example_Node\")'</pre> <p>and to ensure that the output is visible in the console, add the <code class=\"docutils literal\">puts</code> in front of the API authorization request:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife exec -E 'puts api.get(\"/nodes/Example_Node\")'</pre> <p>where <code class=\"docutils literal\">puts</code> is the shorter version of the <code class=\"docutils literal\">$stdout.puts</code> predefined variable in Ruby.</p> <p>The following example shows how to add a client named “IBM305RAMAC” and the <code class=\"docutils literal\">/clients</code> endpoint, and then return the private key for that user in the console:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ client_desc = {\n    \"name\"  =&gt; \"IBM305RAMAC\",\n    \"admin\" =&gt; false\n  }\n\n  new_client = api.post(\"/clients\", client_desc)\n  puts new_client[\"private_key\"]</pre>   <h2 id=\"ruby-scripts\">Ruby Scripts</h2> <p>For Ruby scripts that will be run using the <code class=\"docutils literal\">exec</code> subcommand, note the following:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>The Ruby script must be located on the system from which knife is run (and not be located on any of the systems that knife will be managing).</li> <li>Shell commands will be run from a management workstation. For example, something like <code class=\"docutils literal\">%x[ls -lash /opt/only-on-a-node]</code> would give you the directory listing for the “opt/only-on-a-node” directory or a “No such file or directory” error if the file does not already exist locally.</li> <li>When the chef-shell DSL is available, the chef-client DSL will not be (unless the management workstation is also a chef-client). Without the chef-client DSL, a bash block cannot be used to run bash commands.</li> </ul> </div>\n</blockquote>   <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife exec SCRIPT (options)</pre>   <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-E CODE</code>, <code class=\"docutils literal\">--exec CODE</code>\n</dt> <dd>A string of code that to be executed.</dd> <dt>\n<code class=\"docutils literal\">-p PATH:PATH</code>, <code class=\"docutils literal\">--script-path PATH:PATH</code>\n</dt> <dd>A colon-separated path at which Ruby scripts are located. Use to override the default location for scripts. When this option is not specified, knife will look for scripts located in <code class=\"docutils literal\">chef-repo/.chef/scripts</code> directory.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Run Ruby scripts</strong></p> <p>There are three ways to use <code class=\"docutils literal\">knife exec</code> to run Ruby script files. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife exec /path/to/script_file</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife exec -E 'RUBY CODE'</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife exec\nRUBY CODE\n^D</pre> <p><strong>Chef Knife status</strong></p> <p>To check the status of knife using a Ruby script named <code class=\"docutils literal\">status.rb</code> (which looks like):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">printf \"%-5s %-12s %-8s %s\\n\", \"Check In\", \"Name\", \"Ruby\", \"Recipes\"\nnodes.all do |n|\n   checkin = Time.at(n['ohai_time']).strftime(\"%F %R\")\n   rubyver = n['languages']['ruby']['version']\n   recipes = n.run_list.expand(_default).recipes.join(\", \")\n   printf \"%-20s %-12s %-8s %s\\n\", checkin, n.name, rubyver, recipes\nend</pre> <p>and is located in a directory named <code class=\"docutils literal\">scripts/</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife exec scripts/status.rb</pre> <p><strong>List available free memory</strong></p> <p>To show the available free memory for all nodes, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife exec -E 'nodes.all {|n| puts \"#{n.name} has #{n.memory.total} free memory\"}'</pre> <p><strong>List available search indexes</strong></p> <p>To list all of the available search indexes, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife exec -E 'puts api.get(\"search\").keys'</pre> <p><strong>Query for multiple attributes</strong></p> <p>To query a node for multiple attributes using a Ruby script named <code class=\"docutils literal\">search_attributes.rb</code> (which looks like):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">% cat scripts/search_attributes.rb\nquery = ARGV[2]\nattributes = ARGV[3].split(\",\")\nputs \"Your query: #{query}\"\nputs \"Your attributes: #{attributes.join(\" \")}\"\nresults = {}\nsearch(:node, query) do |n|\n   results[n.name] = {}\n   attributes.each {|a| results[n.name][a] = n[a]}\nend\n\nputs results\nexit 0</pre> <p>enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">% knife exec scripts/search_attributes.rb \"hostname:test_system\" ipaddress,fqdn</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Your query: hostname:test_system\nYour attributes: ipaddress fqdn\n{\"test_system.example.com\"=&gt;{\"ipaddress\"=&gt;\"10.1.1.200\", \"fqdn\"=&gt;\"test_system.example.com\"}}</pre> <p><strong>Find shadow cookbooks</strong></p> <p>To find all of the locations in which cookbooks exist that may shadow each other, create a file called <code class=\"docutils literal\">shadow-check.rb</code> that contains the following Ruby code:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">config = Chef::Config\n\ncookbook_loader = begin\n  Chef::Cookbook::FileVendor.on_create { |manifest| Chef::Cookbook::FileSystemFileVendor.new(manifest, config[:cookbook_path]) }\n  Chef::CookbookLoader.new(config[:cookbook_path])\nend\n\nui = Chef::Knife::UI.new($stdout, $stderr, $stdin, {})\n\ncookbook_loader.load_cookbooks\n\nif cookbook_loader.merged_cookbooks.empty?\n  ui.msg \"cookbooks ok\"\nelse\n  ui.warn \"* \" * 40\n  ui.warn(&lt;&lt;-WARNING)\nThe cookbooks: #{cookbook_loader.merged_cookbooks.join(', ')} exist in multiple places in your cookbook_path.\nA composite version of these cookbooks has been compiled for uploading.\n\n#{ui.color('IMPORTANT:', :red, :bold)} In a future version of Chef, this behavior will be removed and you will no longer\nbe able to have the same version of a cookbook in multiple places in your cookbook_path.\nWARNING\n  ui.warn \"The affected cookbooks are located:\"\n  ui.output ui.format_for_display(cookbook_loader.merged_cookbook_paths)\n  ui.warn \"* \" * 40\nend</pre> <p>Put this file in the directory of your choice. Run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife exec shadow-check.rb</pre> <p>and be sure to edit <code class=\"docutils literal\">shadow-check.rb</code> so that it defines the path to that file correctly.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_exec.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_exec.html</a>\n  </p>\n</div>\n","12-9/resource_template":"<h1 id=\"template\">template</h1> <p>A cookbook template is an Embedded Ruby (ERB) template that is used to dynamically generate static text files. Templates may contain Ruby expressions and statements, and are a great way to manage configuration files. Use the <strong>template</strong> resource to add cookbook templates to recipes; place the corresponding Embedded Ruby (ERB) template file in a cookbook’s <code class=\"docutils literal\">/templates</code> directory.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The chef-client uses Erubis for templates, which is a fast, secure, and extensible implementation of embedded Ruby. Erubis should be familiar to members of the Ruby on Rails, Merb, or Puppet communities. For more information about Erubis, see: <a class=\"reference external\" href=\"http://www.kuwata-lab.com/erubis/\">http://www.kuwata-lab.com/erubis/</a>.</p> </div> <p>Use the <strong>template</strong> resource to manage the contents of a file using an Embedded Ruby (ERB) template by transferring files from a sub-directory of <code class=\"docutils literal\">COOKBOOK_NAME/templates/</code> to a specified path located on a host that is running the chef-client. This resource includes actions and properties from the <strong>file</strong> resource. Template files managed by the <strong>template</strong> resource follow the same file specificity rules as the <strong>remote_file</strong> and <strong>file</strong> resources.</p>  <h2 id=\"syntax\">Syntax</h2> <p>A <strong>template</strong> resource block typically declares the location in which a file is to be created, the source template that will be used to create the file, and the permissions needed on that file. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/etc/motd' do\n  source 'motd.erb'\n  owner 'root'\n  group 'root'\n  mode '0755'\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">'/etc/motd'</code> specifies the location in which the file is created</li> <li>\n<code class=\"docutils literal\">'motd.erb'</code> specifies the name of a template that exists in in the <code class=\"docutils literal\">/templates</code> folder of a cookbook</li> <li>\n<code class=\"docutils literal\">owner</code>, <code class=\"docutils literal\">group</code>, and <code class=\"docutils literal\">mode</code> define the permissions</li> </ul> <p>The full syntax for all of the properties that are available to the <strong>template</strong> resource is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template 'name' do\n  atomic_update              TrueClass, FalseClass\n  backup                     FalseClass, Integer\n  cookbook                   String\n  force_unlink               TrueClass, FalseClass\n  group                      String, Integer\n  helper(:method)            Method { String } # see Helpers below\n  helpers(module)            Module # see Helpers below\n  inherits                   TrueClass, FalseClass\n  local                      TrueClass, FalseClass\n  manage_symlink_source      TrueClass, FalseClass, NilClass\n  mode                       String, Integer\n  notifies                   # see description\n  owner                      String, Integer\n  path                       String # defaults to 'name' if not specified\n  provider                   Chef::Provider::File::Template\n  rights                     Hash\n  sensitive                  TrueClass, FalseClass\n  source                     String, Array\n  subscribes                 # see description\n  variables                  Hash\n  verify                     String, Block\n  action                     Symbol # defaults to :create if not specified\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">template</code> is the resource</li> <li>\n<code class=\"docutils literal\">name</code> is the name of the resource block, typically the path to the location in which a file is created and also the name of the file to be managed. For example: <code class=\"docutils literal\">/var/www/html/index.html</code>, where <code class=\"docutils literal\">/var/www/html/</code> is the fully qualified path to the location and <code class=\"docutils literal\">index.html</code> is the name of the file</li> <li>\n<code class=\"docutils literal\">source</code> is the template file that will be used to create the file on the node, for example: <code class=\"docutils literal\">index.html.erb</code>; the template file is located in the <code class=\"docutils literal\">/templates</code> directory of a cookbook</li> <li>\n<code class=\"docutils literal\">:action</code> identifies the steps the chef-client will take to bring the node into the desired state</li> <li>\n<code class=\"docutils literal\">atomic_update</code>, <code class=\"docutils literal\">backup</code>, <code class=\"docutils literal\">cookbook</code>, <code class=\"docutils literal\">force_unlink</code>, <code class=\"docutils literal\">group</code>, <code class=\"docutils literal\">helper</code>, <code class=\"docutils literal\">helpers</code>, <code class=\"docutils literal\">inherits</code>, <code class=\"docutils literal\">local</code>, <code class=\"docutils literal\">manage_symlink_source</code>, <code class=\"docutils literal\">mode</code>, <code class=\"docutils literal\">owner</code>, <code class=\"docutils literal\">path</code>, <code class=\"docutils literal\">provider</code>, <code class=\"docutils literal\">rights</code>, <code class=\"docutils literal\">sensitive</code>, <code class=\"docutils literal\">source</code>, <code class=\"docutils literal\">variables</code>, and <code class=\"docutils literal\">verify</code> are properties of this resource, with the Ruby type shown. See “Properties” section below for more information about all of the properties that may be used with this resource.</li> </ul>   <h2 id=\"actions\">Actions</h2> <p>This resource has the following actions:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:create</code></dt> <dd>Default. Create a file. If a file already exists (but does not match), update that file to match.</dd> <dt><code class=\"docutils literal\">:create_if_missing</code></dt> <dd>Create a file only if the file does not exist. When the file exists, nothing happens.</dd> <dt><code class=\"docutils literal\">:delete</code></dt> <dd>Delete a file.</dd> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> <dt><code class=\"docutils literal\">:touch</code></dt> <dd>Touch a file. This updates the access (atime) and file modification (mtime) times for a file. (This action may be used with this resource, but is typically only used with the <strong>file</strong> resource.)</dd> </dl> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">For a machine on which SELinux is enabled, the chef-client will create files that correctly match the default policy settings only when the cookbook that defines the action also conforms to the same policy.</p> </div>   <h2 id=\"properties\">Properties</h2> <p>This resource has the following properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">atomic_update</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Perform atomic file updates on a per-resource basis. Set to <code class=\"docutils literal\">true</code> for atomic file updates. Set to <code class=\"docutils literal\">false</code> for non-atomic file updates. This setting overrides <code class=\"docutils literal\">file_atomic_update</code>, which is a global setting found in the client.rb file. Default value: <code class=\"docutils literal\">true</code>.</p> </dd> <dt><code class=\"docutils literal\">backup</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> FalseClass, Integer</p> <p class=\"last\">The number of backups to be kept in <code class=\"docutils literal\">/var/chef/backup</code> (for UNIX- and Linux-based platforms) or <code class=\"docutils literal\">C:/chef/backup</code> (for the Microsoft Windows platform). Set to <code class=\"docutils literal\">false</code> to prevent backups from being kept. Default value: <code class=\"docutils literal\">5</code>.</p> </dd> <dt><code class=\"docutils literal\">cookbook</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p class=\"last\">The cookbook in which a file is located (if it is not located in the current cookbook). The default value is the current cookbook.</p> </dd> <dt><code class=\"docutils literal\">force_unlink</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">How the chef-client handles certain situations when the target file turns out not to be a file. For example, when a target file is actually a symlink. Set to <code class=\"docutils literal\">true</code> for the chef-client delete the non-file target and replace it with the specified file. Set to <code class=\"docutils literal\">false</code> for the chef-client to raise an error. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">A string or ID that identifies the group owner by group name, including fully qualified group names such as <code class=\"docutils literal\">domain\\group</code> or <code class=\"docutils literal\">group@domain</code>. If this value is not specified, existing groups remain unchanged and new group assignments use the default <code class=\"docutils literal\">POSIX</code> group (if available).</p> </dd> <dt><code class=\"docutils literal\">helper</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Method</p> <p class=\"last\">Define a helper method inline. For example: <code class=\"docutils literal\">helper(:hello_world) { \"hello world\" }</code> or <code class=\"docutils literal\">helper(:app) { node[\"app\"] }</code> or <code class=\"docutils literal\">helper(:app_conf) { |setting| node[\"app\"][setting] }</code>. Default value: <code class=\"docutils literal\">{}</code>.</p> </dd> <dt><code class=\"docutils literal\">helpers</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Module</p> <p class=\"last\">Define a helper module inline or in a library. For example, an inline module: <code class=\"docutils literal\">helpers do</code>, which is then followed by a block of Ruby code. And for a library module: <code class=\"docutils literal\">helpers(MyHelperModule)</code>. Default value: <code class=\"docutils literal\">[]</code>.</p> </dd> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">inherits</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Microsoft Windows only. Whether a file inherits rights from its parent directory. Default value: <code class=\"docutils literal\">true</code>.</p> </dd> <dt><code class=\"docutils literal\">local</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Load a template from a local path. By default, the chef-client loads templates from a cookbook’s <code class=\"docutils literal\">/templates</code> directory. When this property is set to <code class=\"docutils literal\">true</code>, use the <code class=\"docutils literal\">source</code> property to specify the path to a template on the local node. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">manage_symlink_source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass, NilClass</p> <p class=\"last\">Cause the chef-client to detect and manage the source file for a symlink. Possible values: <code class=\"docutils literal\">nil</code>, <code class=\"docutils literal\">true</code>, or <code class=\"docutils literal\">false</code>. When this value is set to <code class=\"docutils literal\">nil</code>, the chef-client will manage a symlink’s source file and emit a warning. When this value is set to <code class=\"docutils literal\">true</code>, the chef-client will manage a symlink’s source file and not emit a warning. Default value: <code class=\"docutils literal\">nil</code>. The default value will be changed to <code class=\"docutils literal\">false</code> in a future version.</p> </dd> <dt><code class=\"docutils literal\">mode</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p>A quoted 3-5 character string that defines the octal mode. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. If <code class=\"docutils literal\">mode</code> is not specified and if the file already exists, the existing mode on the file is used. If <code class=\"docutils literal\">mode</code> is not specified, the file does not exist, and the <code class=\"docutils literal\">:create</code> action is specified, the chef-client assumes a mask value of <code class=\"docutils literal\">'0777'</code> and then applies the umask for the system on which the file is to be created to the <code class=\"docutils literal\">mask</code> value. For example, if the umask on a system is <code class=\"docutils literal\">'022'</code>, the chef-client uses the default value of <code class=\"docutils literal\">'0755'</code>.</p> <p>The behavior is different depending on the platform.</p> <p>UNIX- and Linux-based systems: A quoted 3-5 character string that defines the octal mode that is passed to chmod. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. If the value is specified as a quoted string, it works exactly as if the <code class=\"docutils literal\">chmod</code> command was passed. If the value is specified as an integer, prepend a zero (<code class=\"docutils literal\">0</code>) to the value to ensure that it is interpreted as an octal number. For example, to assign read, write, and execute rights for all users, use <code class=\"docutils literal\">'0777'</code> or <code class=\"docutils literal\">'777'</code>; for the same rights, plus the sticky bit, use <code class=\"docutils literal\">'01777'</code> or <code class=\"docutils literal\">'1777'</code>.</p> <p class=\"last\">Microsoft Windows: A quoted 3-5 character string that defines the octal mode that is translated into rights for Microsoft Windows security. For example: <code class=\"docutils literal\">'755'</code>, <code class=\"docutils literal\">'0755'</code>, or <code class=\"docutils literal\">'00755'</code>. Values up to <code class=\"docutils literal\">'0777'</code> are allowed (no sticky bits) and mean the same in Microsoft Windows as they do in UNIX, where <code class=\"docutils literal\">4</code> equals <code class=\"docutils literal\">GENERIC_READ</code>, <code class=\"docutils literal\">2</code> equals <code class=\"docutils literal\">GENERIC_WRITE</code>, and <code class=\"docutils literal\">1</code> equals <code class=\"docutils literal\">GENERIC_EXECUTE</code>. This property cannot be used to set <code class=\"docutils literal\">:full_control</code>. This property has no effect if not specified, but when it and <code class=\"docutils literal\">rights</code> are both specified, the effects are cumulative.</p> </dd> <dt><code class=\"docutils literal\">notifies</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">owner</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">A string or ID that identifies the group owner by user name, including fully qualified user names such as <code class=\"docutils literal\">domain\\user</code> or <code class=\"docutils literal\">user@domain</code>. If this value is not specified, existing owners remain unchanged and new owner assignments use the current user (when necessary).</p> </dd> <dt><code class=\"docutils literal\">path</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> String</p> <p>The full path to the file, including the file name and its extension.</p> <p class=\"last\">Microsoft Windows: A path that begins with a forward slash (<code class=\"docutils literal\">/</code>) will point to the root of the current working directory of the chef-client process. This path can vary from system to system. Therefore, using a path that begins with a forward slash (<code class=\"docutils literal\">/</code>) is not recommended.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. Explicitly specifies a provider.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">rights</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> Integer, String</p> <p class=\"last\">Microsoft Windows only. The permissions for users and groups in a Microsoft Windows environment. For example: <code class=\"docutils literal\">rights &lt;permissions&gt;, &lt;principal&gt;, &lt;options&gt;</code> where <code class=\"docutils literal\">&lt;permissions&gt;</code> specifies the rights granted to the principal, <code class=\"docutils literal\">&lt;principal&gt;</code> is the group or user name, and <code class=\"docutils literal\">&lt;options&gt;</code> is a Hash with one (or more) advanced rights options.</p> </dd> <dt><code class=\"docutils literal\">sensitive</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Ensure that sensitive resource data is not logged by the chef-client. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">source</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Array</p> <p class=\"last\">The location of a template file. By default, the chef-client looks for a template file in the <code class=\"docutils literal\">/templates</code> directory of a cookbook. When the <code class=\"docutils literal\">local</code> property is set to <code class=\"docutils literal\">true</code>, use to specify the path to a template on the local node. This property may also be used to distribute specific files to specific platforms. See “File Specificity” below for more information. Default value: the <code class=\"docutils literal\">name</code> of the resource block See “Syntax” section above for more information.</p> </dd> <dt><code class=\"docutils literal\">subscribes</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Symbol, ‘Chef::Resource[String]’</p> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre> </dd> <dt><code class=\"docutils literal\">variables</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p>A Hash of variables that are passed into a Ruby template file.</p> <p>The <code class=\"docutils literal\">variables</code> property of the <strong>template</strong> resource can be used to reference a partial template file by using a Hash. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/file/name.txt' do\n  variables :partials =&gt; {\n    'partial_name_1.txt.erb' =&gt; 'message',\n    'partial_name_2.txt.erb' =&gt; 'message',\n    'partial_name_3.txt.erb' =&gt; 'message'\n  }\nend</pre> <p>where each of the partial template files can then be combined using normal Ruby template patterns within a template file, such as:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">&lt;% @partials.each do |partial, message| %&gt;\n  Here is &lt;%= partial %&gt;\n  &lt;%= render partial, :variables =&gt; {:message =&gt; message} %&gt;\n&lt;% end %&gt;</pre> </dd> <dt><code class=\"docutils literal\">verify</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> String, Block</p> <p>A block or a string that returns <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. A string, when <code class=\"docutils literal\">true</code> is executed as a system command.</p> <p>A block is arbitrary Ruby defined within the resource block by using the <code class=\"docutils literal\">verify</code> property. When a block is <code class=\"docutils literal\">true</code>, the chef-client will continue to update the file as appropriate.</p> <p>For example, this should return <code class=\"docutils literal\">true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/baz' do\n  verify { 1 == 1 }\nend</pre> <p>This should return <code class=\"docutils literal\">true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/etc/nginx.conf' do\n  verify 'nginx -t -c %{path}'\nend</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>For releases of the chef-client prior to 12.5 (chef-client 12.4 and earlier) the correct syntax is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/etc/nginx.conf' do\n  verify 'nginx -t -c %{file}'\nend</pre> <p class=\"last\">See GitHub issues <a class=\"reference external\" href=\"https://github.com/chef/chef/issues/3232\">https://github.com/chef/chef/issues/3232</a> and <a class=\"reference external\" href=\"https://github.com/chef/chef/pull/3693\">https://github.com/chef/chef/pull/3693</a> for more information about these differences.</p> </div> <p>This should return <code class=\"docutils literal\">true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/bar' do\n  verify { 1 == 1}\nend</pre> <p>And this should return <code class=\"docutils literal\">true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/foo' do\n  verify do |path|\n    true\n  end\nend</pre> <p>Whereas, this should return <code class=\"docutils literal\">false</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/turtle' do\n  verify '/usr/bin/false'\nend</pre> <p class=\"last\">If a string or a block return <code class=\"docutils literal\">false</code>, the chef-client run will stop and an error is returned.</p> </dd> </dl>  <h3 id=\"atomic-file-updates\">Atomic File Updates</h3> <p>Atomic updates are used with <strong>file</strong>-based resources to help ensure that file updates can be made when updating a binary or if disk space runs out.</p> <p>Atomic updates are enabled by default. They can be managed globally using the <code class=\"docutils literal\">file_atomic_update</code> setting in the client.rb file. They can be managed on a per-resource basis using the <code class=\"docutils literal\">atomic_update</code> property that is available with the <strong>cookbook_file</strong>, <strong>file</strong>, <strong>remote_file</strong>, and <strong>template</strong> resources.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">On certain platforms, and after a file has been moved into place, the chef-client may modify file permissions to support features specific to those platforms. On platforms with SELinux enabled, the chef-client will fix up the security contexts after a file has been moved into the correct location by running the <code class=\"docutils literal\">restorecon</code> command. On the Microsoft Windows platform, the chef-client will create files so that ACL inheritance works as expected.</p> </div>   <h3 id=\"windows-file-security\">Windows File Security</h3> <p>To support Microsoft Windows security, the <strong>template</strong>, <strong>file</strong>, <strong>remote_file</strong>, <strong>cookbook_file</strong>, <strong>directory</strong>, and <strong>remote_directory</strong> resources support the use of inheritance and access control lists (ACLs) within recipes.</p> <p><strong>Access Control Lists (ACLs)</strong></p> <p>The <code class=\"docutils literal\">rights</code> property can be used in a recipe to manage access control lists (ACLs), which allow permissions to be given to multiple users and groups. Use the <code class=\"docutils literal\">rights</code> property can be used as many times as necessary; the chef-client will apply them to the file or directory as required. The syntax for the <code class=\"docutils literal\">rights</code> property is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">rights permission, principal, option_type =&gt; value</pre> <p>where</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">permission</code></dt> <dd>\n<p class=\"first\">Use to specify which rights are granted to the <code class=\"docutils literal\">principal</code>. The possible values are: <code class=\"docutils literal\">:read</code>, <code class=\"docutils literal\">:write</code>, <code class=\"docutils literal\">read_execute</code>, <code class=\"docutils literal\">:modify</code>, and <code class=\"docutils literal\">:full_control</code>.</p> <p>These permissions are cumulative. If <code class=\"docutils literal\">:write</code> is specified, then it includes <code class=\"docutils literal\">:read</code>. If <code class=\"docutils literal\">:full_control</code> is specified, then it includes both <code class=\"docutils literal\">:write</code> and <code class=\"docutils literal\">:read</code>.</p> <p class=\"last\">(For those who know the Microsoft Windows API: <code class=\"docutils literal\">:read</code> corresponds to <code class=\"docutils literal\">GENERIC_READ</code>; <code class=\"docutils literal\">:write</code> corresponds to <code class=\"docutils literal\">GENERIC_WRITE</code>; <code class=\"docutils literal\">:read_execute</code> corresponds to <code class=\"docutils literal\">GENERIC_READ</code> and <code class=\"docutils literal\">GENERIC_EXECUTE</code>; <code class=\"docutils literal\">:modify</code> corresponds to <code class=\"docutils literal\">GENERIC_WRITE</code>, <code class=\"docutils literal\">GENERIC_READ</code>, <code class=\"docutils literal\">GENERIC_EXECUTE</code>, and <code class=\"docutils literal\">DELETE</code>; <code class=\"docutils literal\">:full_control</code> corresponds to <code class=\"docutils literal\">GENERIC_ALL</code>, which allows a user to change the owner and other metadata about a file.)</p> </dd> <dt><code class=\"docutils literal\">principal</code></dt> <dd>Use to specify a group or user name. This is identical to what is entered in the login box for Microsoft Windows, such as <code class=\"docutils literal\">user_name</code>, <code class=\"docutils literal\">domain\\user_name</code>, or <code class=\"docutils literal\">user_name@fully_qualified_domain_name</code>. The chef-client does not need to know if a principal is a user or a group.</dd> <dt><code class=\"docutils literal\">option_type</code></dt> <dd>\n<p class=\"first\">A hash that contains advanced rights options. For example, the rights to a directory that only applies to the first level of children might look something like: <code class=\"docutils literal\">rights :write, 'domain\\group_name', :one_level_deep =&gt; true</code>. Possible option types:</p> <table class=\"last docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option Type</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:applies_to_children</code></td> <td>Specify how permissions are applied to children. Possible values: <code class=\"docutils literal\">true</code> to inherit both child directories and files; <code class=\"docutils literal\">false</code> to not inherit any child directories or files; <code class=\"docutils literal\">:containers_only</code> to inherit only child directories (and not files); <code class=\"docutils literal\">:objects_only</code> to recursively inherit files (and not child directories).</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:applies_to_self</code></td> <td>Indicates whether a permission is applied to the parent directory. Possible values: <code class=\"docutils literal\">true</code> to apply to the parent directory or file and its children; <code class=\"docutils literal\">false</code> to not apply only to child directories and files.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:one_level_deep</code></td> <td>Indicates the depth to which permissions will be applied. Possible values: <code class=\"docutils literal\">true</code> to apply only to the first level of children; <code class=\"docutils literal\">false</code> to apply to all children.</td> </tr> </tbody> </table> </dd> </dl> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource 'x.txt' do\n  rights :read, 'Everyone'\n  rights :write, 'domain\\group'\n  rights :full_control, 'group_name_or_user_name'\n  rights :full_control, 'user_name', :applies_to_children =&gt; true\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">rights :read, ['Administrators','Everyone']\nrights :full_control, 'Users', :applies_to_children =&gt; true\nrights :write, 'Sally', :applies_to_children =&gt; :containers_only, :applies_to_self =&gt; false, :one_level_deep =&gt; true</pre> <p>Some other important things to know when using the <code class=\"docutils literal\">rights</code> attribute:</p> <ul class=\"simple\"> <li>Only inherited rights remain. All existing explicit rights on the object are removed and replaced.</li> <li>If rights are not specified, nothing will be changed. The chef-client does not clear out the rights on a file or directory if rights are not specified.</li> <li>Changing inherited rights can be expensive. Microsoft Windows will propagate rights to all children recursively due to inheritance. This is a normal aspect of Microsoft Windows, so consider the frequency with which this type of action is necessary and take steps to control this type of action if performance is the primary consideration.</li> </ul> <p>Use the <code class=\"docutils literal\">deny_rights</code> property to deny specific rights to specific users. The ordering is independent of using the <code class=\"docutils literal\">rights</code> property. For example, it doesn’t matter if rights are granted to everyone is placed before or after <code class=\"docutils literal\">deny_rights :read, ['Julian', 'Lewis']</code>, both Julian and Lewis will be unable to read the document. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource 'x.txt' do\n  rights :read, 'Everyone'\n  rights :write, 'domain\\group'\n  rights :full_control, 'group_name_or_user_name'\n  rights :full_control, 'user_name', :applies_to_children =&gt; true\n  deny_rights :read, ['Julian', 'Lewis']\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deny_rights :full_control, ['Sally']</pre> <p><strong>Inheritance</strong></p> <p>By default, a file or directory inherits rights from its parent directory. Most of the time this is the preferred behavior, but sometimes it may be necessary to take steps to more specifically control rights. The <code class=\"docutils literal\">inherits</code> property can be used to specifically tell the chef-client to apply (or not apply) inherited rights from its parent directory.</p> <p>For example, the following example specifies the rights for a directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor' do\n  rights :read, 'MORDOR\\Minions'\n  rights :full_control, 'MORDOR\\Sauron'\nend</pre> <p>and then the following example specifies how to use inheritance to deny access to the child directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor\\mount_doom' do\n  rights :full_control, 'MORDOR\\Sauron'\n  inherits false # Sauron is the only person who should have any sort of access\nend</pre> <p>If the <code class=\"docutils literal\">deny_rights</code> permission were to be used instead, something could slip through unless all users and groups were denied.</p> <p>Another example also shows how to specify rights for a directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor' do\n  rights :read, 'MORDOR\\Minions'\n  rights :full_control, 'MORDOR\\Sauron'\n  rights :write, 'SHIRE\\Frodo' # Who put that there I didn't put that there\nend</pre> <p>but then not use the <code class=\"docutils literal\">inherits</code> property to deny those rights on a child directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor\\mount_doom' do\n  deny_rights :read, 'MORDOR\\Minions' # Oops, not specific enough\nend</pre> <p>Because the <code class=\"docutils literal\">inherits</code> property is not specified, the chef-client will default it to <code class=\"docutils literal\">true</code>, which will ensure that security settings for existing files remain unchanged.</p>    <h2 id=\"using-templates\">Using Templates</h2> <p>To use a template, two things must happen:</p> <ol class=\"arabic simple\"> <li>A template resource must be added to a recipe</li> <li>An Embedded Ruby (ERB) template must be added to a cookbook</li> </ol> <p>For example, the following template file and template resource settings can be used to manage a configuration file named <code class=\"docutils literal\">/etc/sudoers</code>. Within a cookbook that uses sudo, the following resource could be added to <code class=\"docutils literal\">/recipes/default.rb</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/etc/sudoers' do\n  source 'sudoers.erb'\n  mode '0440'\n  owner 'root'\n  group 'root'\n  variables({\n     :sudoers_groups =&gt; node[:authorization][:sudo][:groups],\n     :sudoers_users =&gt; node[:authorization][:sudo][:users]\n  })\nend</pre> <p>And then create a template called <code class=\"docutils literal\">sudoers.erb</code> and save it to <code class=\"docutils literal\">templates/default/sudoers.erb</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">#\n# /etc/sudoers\n#\n# Generated by Chef for &lt;%= node[:fqdn] %&gt;\n#\n\nDefaults        !lecture,tty_tickets,!fqdn\n\n# User privilege specification\nroot          ALL=(ALL) ALL\n\n&lt;% @sudoers_users.each do |user| -%&gt;\n&lt;%= user %&gt;   ALL=(ALL) &lt;%= \"NOPASSWD:\" if @passwordless %&gt;ALL\n&lt;% end -%&gt;\n\n# Members of the sysadmin group may gain root privileges\n%sysadmin     ALL=(ALL) &lt;%= \"NOPASSWD:\" if @passwordless %&gt;ALL\n\n&lt;% @sudoers_groups.each do |group| -%&gt;\n# Members of the group '&lt;%= group %&gt;' may gain root privileges\n%&lt;%= group %&gt; ALL=(ALL) &lt;%= \"NOPASSWD:\" if @passwordless %&gt;ALL\n&lt;% end -%&gt;</pre> <p>And then set the default attributes in <code class=\"docutils literal\">attributes/default.rb</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default['authorization']['sudo']['groups'] = [ 'sysadmin', 'wheel', 'admin' ]\ndefault['authorization']['sudo']['users']  = [ 'jerry', 'greg']</pre>  <h3 id=\"file-specificity\">File Specificity</h3> <p>A cookbook is frequently designed to work across many platforms and is often required to distribute a specific template to a specific platform. A cookbook can be designed to support the distribution of templates across platforms, while ensuring that the correct template ends up on each system.</p> <p>The pattern for template specificity depends on two things: the lookup path and the source. The first pattern that matches is used:</p> <ol class=\"arabic simple\"> <li>/host-$fqdn/$source</li> <li>/$platform-$platform_version/$source</li> <li>/$platform/$source</li> <li>/default/$source</li> <li>/$source</li> </ol> <p>Use an array with the <code class=\"docutils literal\">source</code> property to define an explicit lookup path. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/test' do\n  source ['#{node.chef_environment}.erb', 'default.erb']\nend</pre> <p>The following example emulates the entire file specificity pattern by defining it as an explicit path:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/test' do\n  source %W{\n    host-#{node['fqdn']}/test.erb\n    #{node['platform']}-#{node['platform_version']}/test.erb\n    #{node['platform']}/test.erb\n    default/test.erb\n  }\nend</pre> <p>A cookbook may have a <code class=\"docutils literal\">/templates</code> directory structure like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">/templates/\n  windows-6.2\n  windows-6.1\n  windows-6.0\n  windows\n  default</pre> <p>and a resource that looks something like the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template 'C:\\path\\to\\file\\text_file.txt' do\n  source 'text_file.txt'\n  mode '0755'\n  owner 'root'\n  group 'root'\nend</pre> <p>This resource would be matched in the same order as the <code class=\"docutils literal\">/templates</code> directory structure. For a node named <code class=\"docutils literal\">host-node-desktop</code> that is running Windows 7, the second item would be the matching item and the location:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">/templates\n  windows-6.2/text_file.txt\n  windows-6.1/text_file.txt\n  windows-6.0/text_file.txt\n  windows/text_file.txt\n  default/text_file.txt</pre>   <h3 id=\"helpers\">Helpers</h3> <p>A helper is a method or a module that can be used to extend a template. There are three approaches:</p> <ul class=\"simple\"> <li>An inline helper method</li> <li>An inline helper module</li> <li>A cookbook library module</li> </ul> <p>Use the <code class=\"docutils literal\">helper</code> attribute in a recipe to define an inline helper method. Use the <code class=\"docutils literal\">helpers</code> attribute to define an inline helper module or a cookbook library module.</p>  <h4 id=\"inline-methods\">Inline Methods</h4> <p>A template helper method is always defined inline on a per-resource basis. A simple example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/path' do\n  helper(:hello_world) { 'hello world' }\nend</pre> <p>Another way to define an inline helper method is to reference a node object so that repeated calls to one (or more) cookbook attributes can be done efficiently:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/path' do\n  helper(:app) { node['app'] }\nend</pre> <p>An inline helper method can also take arguments:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/path' do\n  helper(:app_conf) { |setting| node['app']['setting'] }\nend</pre> <p>Once declared, a template can then use the helper methods to build a file. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Say hello: &lt;%= hello_world %&gt;</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node['app']['listen_port'] is: &lt;%= app['listen_port'] %&gt;</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node['app']['log_location'] is: &lt;%= app_conf('log_location') %&gt;</pre>   <h4 id=\"inline-modules\">Inline Modules</h4> <p>A template helper module can be defined inline on a per-resource basis. This approach can be useful when a template requires more complex information. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/path' do\n  helpers do\n\n    def hello_world\n      'hello world'\n    end\n\n    def app\n      node['app']\n    end\n\n    def app_conf(setting)\n      node['app']['setting']\n    end\n\n  end\nend</pre> <p>where the <code class=\"docutils literal\">hello_world</code>, <code class=\"docutils literal\">app</code>, and <code class=\"docutils literal\">app_conf(setting)</code> methods comprise the module that extends a template.</p>   <h4 id=\"library-modules\">Library Modules</h4> <p>A template helper module can be defined in a library. This is useful when extensions need to be reused across recipes or to make it easier to manage code that would otherwise be defined inline on a per-recipe basis.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/path/to/template.erb' do\n  helpers(MyHelperModule)\nend</pre>    <h3 id=\"host-notation\">Host Notation</h3> <p>The naming of folders within cookbook directories must literally match the host notation used for template specificity matching. For example, if a host is named <code class=\"docutils literal\">foo.example.com</code>, then the folder must be named <code class=\"docutils literal\">host-foo.example.com</code>.</p>   <h3 id=\"partial-templates\">Partial Templates</h3> <p>A template can be built in a way that allows it to contain references to one (or more) smaller template files. (These smaller template files are also referred to as partials.) A partial can be referenced from a template file in one of the following ways:</p> <ul class=\"simple\"> <li>By using the <code class=\"docutils literal\">render</code> method in the template file</li> <li>By using the <strong>template</strong> resource and the <code class=\"docutils literal\">variables</code> property.</li> </ul>  <h4 id=\"render-method\">render Method</h4> <p>Use the <code class=\"docutils literal\">render</code> method in a template to reference a partial template file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">&lt;%= render \"partial_name.txt.erb\", :option =&gt; {} %&gt;</pre> <p>where <code class=\"docutils literal\">partial_name</code> is the name of the partial template file and <code class=\"docutils literal\">:option</code> is one (or more) of the following:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:cookbook</code></td> <td>By default, a partial template file is assumed to be located in the cookbook that contains the top-level template. Use this option to specify the path to a different cookbook</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:local</code></td> <td>Indicates that the name of the partial template file should be interpreted as a path to a file in the local file system or looked up in a cookbook using the normal rules for template files. Set to <code class=\"docutils literal\">true</code> to interpret as a path to a file in the local file system and to <code class=\"docutils literal\">false</code> to use the normal rules for template files</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:source</code></td> <td>By default, a partial template file is identified by its file name. Use this option to specify a different name or a local path to use (instead of the name of the partial template file)</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:variables</code></td> <td>A hash of <code class=\"docutils literal\">variable_name =&gt; value</code> that will be made available to the partial template file. When this option is used, any variables that are defined in the top-level template that are required by the partial template file must have them defined explicitly using this option</td> </tr> </tbody> </table> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">&lt;%= render \"simple.txt.erb\", :variables =&gt; {:user =&gt; Etc.getlogin }, :local =&gt; true %&gt;</pre>    <h3 id=\"transfer-frequency\">Transfer Frequency</h3> <p>The chef-client caches a template when it is first requested. On each subsequent request for that template, the chef-client compares that request to the template located on the Chef server. If the templates are the same, no transfer occurs.</p>   <h3 id=\"variables\">Variables</h3> <p>A template is an Embedded Ruby (ERB) template. An Embedded Ruby (ERB) template allows Ruby code to be embedded inside a text file within specially formatted tags. Ruby code can be embedded using expressions and statements. An expression is delimited by <code class=\"docutils literal\">&lt;%=</code> and <code class=\"docutils literal\">%&gt;</code>. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">&lt;%= \"my name is #{$ruby}\" %&gt;</pre> <p>A statement is delimited by a modifier, such as <code class=\"docutils literal\">if</code>, <code class=\"docutils literal\">elseif</code>, and <code class=\"docutils literal\">else</code>. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if false\n   # this won't happen\nelsif nil\n   # this won't either\nelse\n   # code here will run though\nend</pre> <p>Using a Ruby expression is the most common approach for defining template variables because this is how all variables that are sent to a template are referenced. Whenever a template needs to use an <code class=\"docutils literal\">each</code>, <code class=\"docutils literal\">if</code>, or <code class=\"docutils literal\">end</code>, use a Ruby statement.</p> <p>When a template is rendered, Ruby expressions and statements are evaluated by the chef-client. The variables listed in the <strong>template</strong> resource’s <code class=\"docutils literal\">variables</code> parameter and in the node object are evaluated. The chef-client then passes these variables to the template, where they will be accessible as instance variables within the template. The node object can be accessed just as if it were part of a recipe, using the same syntax.</p> <p>For example, a simple template resource like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node[:fqdn] = 'latte'\ntemplate '/tmp/foo' do\n  source 'foo.erb'\n  variables({\n    :x_men =&gt; 'are keen'\n  })\nend</pre> <p>And a simple Embedded Ruby (ERB) template like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">The node &lt;%= node[:fqdn] %&gt; thinks the x-men &lt;%= @x_men %&gt;</pre> <p>Would render something like:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">The node latte thinks the x-men are keen</pre> <p>Even though this is a very simple example, the full capabilities of Ruby can be used to tackle even the most complex and demanding template requirements.</p>    <h2 id=\"examples\">Examples</h2> <p>The following examples demonstrate various approaches for using resources in recipes. If you want to see examples of how Chef uses resources in recipes, take a closer look at the cookbooks that Chef authors and maintains: <a class=\"reference external\" href=\"https://github.com/chef-cookbooks\">https://github.com/chef-cookbooks</a>.</p> <p><strong>Configure a file from a template</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/config.conf' do\n  source 'config.conf.erb'\nend</pre> <p><strong>Configure a file from a local template</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/config.conf' do\n  local true\n  source '/tmp/config.conf.erb'\nend</pre> <p><strong>Configure a file using a variable map</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/config.conf' do\n  source 'config.conf.erb'\n  variables(\n    :config_var =&gt; node['configs']['config_var']\n  )\nend</pre> <p><strong>Use the not_if condition</strong></p> <p>The following example shows how to use the <code class=\"docutils literal\">not_if</code> condition to create a file based on a template and using the presence of an attribute value on the node to specify the condition:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/somefile' do\n  mode '0755'\n  source 'somefile.erb'\n  not_if { node[:some_value] }\nend</pre> <p>The following example shows how to use the <code class=\"docutils literal\">not_if</code> condition to create a file based on a template and then Ruby code to specify the condition:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/somefile' do\n  mode '0755'\n  source 'somefile.erb'\n  not_if do\n    File.exist?('/etc/passwd')\n  end\nend</pre> <p>The following example shows how to use the <code class=\"docutils literal\">not_if</code> condition to create a file based on a template and using a Ruby block (with curly braces) to specify the condition:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/somefile' do\n  mode '0755'\n  source 'somefile.erb'\n  not_if { File.exist?('/etc/passwd' )}\nend</pre> <p>The following example shows how to use the <code class=\"docutils literal\">not_if</code> condition to create a file based on a template and using a string to specify the condition:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/somefile' do\n  mode '0755'\n  source 'somefile.erb'\n  not_if 'test -f /etc/passwd'\nend</pre> <p><strong>Use the only_if condition</strong></p> <p>The following example shows how to use the <code class=\"docutils literal\">only_if</code> condition to create a file based on a template and using the presence of an attribute on the node to specify the condition:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/somefile' do\n  mode '0755'\n  source 'somefile.erb'\n  only_if { node[:some_value] }\nend</pre> <p>The following example shows how to use the <code class=\"docutils literal\">only_if</code> condition to create a file based on a template, and then use Ruby to specify a condition:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/somefile' do\n  mode '0755'\n  source 'somefile.erb'\n  only_if do ! File.exist?('/etc/passwd') end\nend</pre> <p>The following example shows how to use the <code class=\"docutils literal\">only_if</code> condition to create a file based on a template and using a string to specify the condition:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/somefile' do\n  mode '0755'\n  source 'somefile.erb'\n  only_if 'test -f /etc/passwd'\nend</pre> <p><strong>Use a whitespace array (%w)</strong></p> <p>The following example shows how to use a Ruby whitespace array to define a list of configuration tools, and then use that list of tools within the <strong>template</strong> resource to ensure that all of these configuration tools are using the same RSA key:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">%w{openssl.cnf pkitool vars Rakefile}.each do |f|\n  template \"/etc/openvpn/easy-rsa/#{f}\" do\n    source \"#{f}.erb\"\n    owner 'root'\n    group 'root'\n    mode '0755'\n  end\nend</pre> <p><strong>Use a relative path</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template \"#{ENV['HOME']}/chef-getting-started.txt\" do\n  source 'chef-getting-started.txt.erb'\n  mode '0755'\nend</pre> <p><strong>Delay notifications</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/etc/nagios3/configures-nagios.conf' do\n  # other parameters\n  notifies :run, 'execute[test-nagios-config]', :delayed\nend</pre> <p><strong>Notify immediately</strong></p> <p>By default, notifications are <code class=\"docutils literal\">:delayed</code>, that is they are queued up as they are triggered, and then executed at the very end of a chef-client run. To run an action immediately, use <code class=\"docutils literal\">:immediately</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/etc/nagios3/configures-nagios.conf' do\n  # other parameters\n  notifies :run, 'execute[test-nagios-config]', :immediately\nend</pre> <p>and then the chef-client would immediately run the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'test-nagios-config' do\n  command 'nagios3 --verify-config'\n  action :nothing\nend</pre> <p><strong>Notify multiple resources</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/etc/chef/server.rb' do\n  source 'server.rb.erb'\n  owner 'root'\n  group 'root'\n  mode '0755'\n  notifies :restart, 'service[chef-solr]', :delayed\n  notifies :restart, 'service[chef-solr-indexer]', :delayed\n  notifies :restart, 'service[chef-server]', :delayed\nend</pre> <p><strong>Reload a service</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/somefile' do\n  mode '0755'\n  source 'somefile.erb'\n  notifies :reload, 'service[apache]', :immediately\nend</pre> <p><strong>Restart a service when a template is modified</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/etc/www/configures-apache.conf' do\n  notifies :restart, 'service[apache]', :immediately\nend</pre> <p><strong>Send notifications to multiple resources</strong></p> <p>To send notifications to multiple resources, just use multiple attributes. Multiple attributes will get sent to the notified resources in the order specified.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/etc/netatalk/netatalk.conf' do\n  notifies :restart, 'service[afpd]', :immediately\n  notifies :restart, 'service[cnid]', :immediately\nend\n\nservice 'afpd'\nservice 'cnid'</pre> <p><strong>Execute a command using a template</strong></p> <p>The following example shows how to set up IPv4 packet forwarding using the <strong>execute</strong> resource to run a command named <code class=\"docutils literal\">forward_ipv4</code> that uses a template defined by the <strong>template</strong> resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'forward_ipv4' do\n  command 'echo &gt; /proc/.../ipv4/ip_forward'\n  action :nothing\nend\n\ntemplate '/etc/file_name.conf' do\n  source 'routing/file_name.conf.erb'\n  notifies :run, 'execute[forward_ipv4]', :delayed\nend</pre> <p>where the <code class=\"docutils literal\">command</code> property for the <strong>execute</strong> resource contains the command that is to be run and the <code class=\"docutils literal\">source</code> property for the <strong>template</strong> resource specifies which template to use. The <code class=\"docutils literal\">notifies</code> property for the <strong>template</strong> specifies that the <code class=\"docutils literal\">execute[forward_ipv4]</code> (which is defined by the <strong>execute</strong> resource) should be queued up and run at the end of the chef-client run.</p> <p><strong>Set an IP address using variables and a template</strong></p> <p>The following example shows how the <strong>template</strong> resource can be used in a recipe to combine settings stored in an attributes file, variables within a recipe, and a template to set the IP addresses that are used by the Nginx service. The attributes file contains the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">default['nginx']['dir'] = '/etc/nginx'</pre> <p>The recipe then does the following to:</p> <ul class=\"simple\"> <li>Declare two variables at the beginning of the recipe, one for the remote IP address and the other for the authorized IP address</li> <li>Use the <strong>service</strong> resource to restart and reload the Nginx service</li> <li>Load a template named <code class=\"docutils literal\">authorized_ip.erb</code> from the <code class=\"docutils literal\">/templates</code> directory that is used to set the IP address values based on the variables specified in the recipe</li> </ul> <pre class=\"highlight-ruby\" data-language=\"ruby\">node.default['nginx']['remote_ip_var'] = 'remote_addr'\nnode.default['nginx']['authorized_ips'] = ['127.0.0.1/32']\n\nservice 'nginx' do\n  supports :status =&gt; true, :restart =&gt; true, :reload =&gt; true\nend\n\ntemplate 'authorized_ip' do\n  path \"#{node['nginx']['dir']}/authorized_ip\"\n  source 'modules/authorized_ip.erb'\n  owner 'root'\n  group 'root'\n  mode '0755'\n  variables(\n    :remote_ip_var =&gt; node['nginx']['remote_ip_var'],\n    :authorized_ips =&gt; node['nginx']['authorized_ips']\n  )\n\n  notifies :reload, 'service[nginx]', :immediately\nend</pre> <p>where the <code class=\"docutils literal\">variables</code> property tells the template to use the variables set at the beginning of the recipe and the <code class=\"docutils literal\">source</code> property is used to call a template file located in the cookbook’s <code class=\"docutils literal\">/templates</code> directory. The template file looks similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">geo $&lt;%= @remote_ip_var %&gt; $authorized_ip {\n  default no;\n  &lt;% @authorized_ips.each do |ip| %&gt;\n  &lt;%= \"#{ip} yes;\" %&gt;\n  &lt;% end %&gt;\n}</pre> <p><strong>Add a rule to an IP table</strong></p> <p>The following example shows how to add a rule named <code class=\"docutils literal\">test_rule</code> to an IP table using the <strong>execute</strong> resource to run a command using a template that is defined by the <strong>template</strong> resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'test_rule' do\n  command 'command_to_run\n    --option value\n    ...\n    --option value\n    --source #{node[:name_of_node][:ipsec][:local][:subnet]}\n    -j test_rule'\n  action :nothing\nend\n\ntemplate '/etc/file_name.local' do\n  source 'routing/file_name.local.erb'\n  notifies :run, 'execute[test_rule]', :delayed\nend</pre> <p>where the <code class=\"docutils literal\">command</code> property for the <strong>execute</strong> resource contains the command that is to be run and the <code class=\"docutils literal\">source</code> property for the <strong>template</strong> resource specifies which template to use. The <code class=\"docutils literal\">notifies</code> property for the <strong>template</strong> specifies that the <code class=\"docutils literal\">execute[test_rule]</code> (which is defined by the <strong>execute</strong> resource) should be queued up and run at the end of the chef-client run.</p> <p><strong>Apply proxy settings consistently across a Chef organization</strong></p> <p>The following example shows how a template can be used to apply consistent proxy settings for all nodes of the same type:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template \"#{node[:matching_node][:dir]}/sites-available/site_proxy.conf\" do\n  source 'site_proxy.matching_node.conf.erb'\n  owner 'root'\n  group 'root'\n  mode '0755'\n  variables(\n    :ssl_certificate =&gt;    \"#{node[:matching_node][:dir]}/shared/certificates/site_proxy.crt\",\n    :ssl_key =&gt;            \"#{node[:matching_node][:dir]}/shared/certificates/site_proxy.key\",\n    :listen_port =&gt;        node[:site][:matching_node_proxy][:listen_port],\n    :server_name =&gt;        node[:site][:matching_node_proxy][:server_name],\n    :fqdn =&gt;               node[:fqdn],\n    :server_options =&gt;     node[:site][:matching_node][:server][:options],\n    :proxy_options =&gt;      node[:site][:matching_node][:proxy][:options]\n  )\nend</pre> <p>where <code class=\"docutils literal\">matching_node</code> represents a type of node (like Nginx) and <code class=\"docutils literal\">site_proxy</code> represents the type of proxy being used for that type of node (like Nexus).</p> <p><strong>Get template settings from a local file</strong></p> <p>The <strong>template</strong> resource can be used to render a template based on settings contained in a local file on disk or to get the settings from a template in a cookbook. Most of the time, the settings are retrieved from a template in a cookbook. The following example shows how the <strong>template</strong> resource can be used to retrieve these settings from a local file.</p> <p>The following example is based on a few assumptions:</p> <ul class=\"simple\"> <li>The environment is a Ruby on Rails application that needs render a file named <code class=\"docutils literal\">database.yml</code>\n</li> <li>Information about the application—the user, their password, the server—is stored in a data bag on the Chef server</li> <li>The application is already deployed to the system and that only requirement in this example is to render the <code class=\"docutils literal\">database.yml</code> file</li> </ul> <p>The application source tree looks something like:</p> <pre class=\"highlight-python\" data-language=\"python\">myapp/\n-&gt; config/\n   -&gt; database.yml.erb</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">There should not be a file named <code class=\"docutils literal\">database.yml</code> (without the <code class=\"docutils literal\">.erb</code>), as the <code class=\"docutils literal\">database.yml</code> file is what will be rendered using the <strong>template</strong> resource.</p> </div> <p>The deployment of the app will end up in <code class=\"docutils literal\">/srv</code>, so the full path to this template would be something like <code class=\"docutils literal\">/srv/myapp/current/config/database.yml.erb</code>.</p> <p>The content of the template itself may look like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">&lt;%= @rails_env %&gt;:\n   adapter: &lt;%= @adapter %&gt;\n   host: &lt;%= @host %&gt;\n   database: &lt;%= @database %&gt;\n   username: &lt;%= @username %&gt;\n   password: &lt;%= @password %&gt;\n   encoding: 'utf8'\n   reconnect: true</pre> <p>The recipe will be similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">results = search(:node, \"role:myapp_database_master AND chef_environment:#{node.chef_environment}\")\ndb_master = results[0]\n\ntemplate '/srv/myapp/shared/database.yml' do\n  source '/srv/myapp/current/config/database.yml.erb'\n  local true\n  variables(\n    :rails_env =&gt; node.chef_environment,\n    :adapter =&gt; db_master['myapp']['db_adapter'],\n    :host =&gt; db_master['fqdn'],\n    :database =&gt; \"myapp_#{node.chef_environment}\",\n    :username =&gt; \"myapp\",\n    :password =&gt; \"SUPERSECRET\",\n  )\nend</pre> <p>where:</p> <ul class=\"simple\"> <li>the <code class=\"docutils literal\">search</code> method in the Recipe DSL is used to find the first node that is the database master (of which there should only be one)</li> <li>the <code class=\"docutils literal\">:adapter</code> variable property may also require an attribute to have been set on a role, which then determines the correct adapter</li> </ul> <p>The template will render similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">production:\n  adapter: mysql\n  host: domU-12-31-39-14-F1-C3.compute-1.internal\n  database: myapp_production\n  username: myapp\n  password: SUPERSECRET\n  encoding: utf8\n  reconnect: true</pre> <p>This example showed how to use the <strong>template</strong> resource to render a template based on settings contained in a local file. Some other issues that should be considered when using this type of approach include:</p> <ul class=\"simple\"> <li>Should the <code class=\"docutils literal\">database.yml</code> file be in a <code class=\"docutils literal\">.gitignore</code> file?</li> <li>How do developers run the application locally?</li> <li>Does this work with chef-solo?</li> </ul> <p><strong>Pass values from recipe to template</strong></p> <p>The following example shows how pass a value to a template using the <code class=\"docutils literal\">variables</code> property in the <strong>template</strong> resource. The template file is similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">[tcpout]\ndefaultGroup = splunk_indexers_&lt;%= node['splunk']['receiver_port'] %&gt;\ndisabled=false\n\n[tcpout:splunk_indexers_&lt;%= node['splunk']['receiver_port'] %&gt;]\nserver=&lt;% @splunk_servers.map do |s| -%&gt;&lt;%= s['ipaddress'] %&gt;:&lt;%= s['splunk']['receiver_port'] %&gt; &lt;% end.join(', ') -%&gt;\n&lt;% @outputs_conf.each_pair do |name, value| -%&gt;\n&lt;%= name %&gt; = &lt;%= value %&gt;\n&lt;% end -%&gt;</pre> <p>The recipe then uses the <code class=\"docutils literal\">variables</code> attribute to find the values for <code class=\"docutils literal\">splunk_servers</code> and <code class=\"docutils literal\">outputs_conf</code>, before passing them into the template:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template \"#{splunk_dir}/etc/system/local/outputs.conf\" do\n  source 'outputs.conf.erb'\n  mode '0755'\n  variables :splunk_servers =&gt; splunk_servers, :outputs_conf =&gt; node['splunk']['outputs_conf']\n  notifies :restart, 'service[splunk]'\nend</pre> <p>This example can be found in the <code class=\"docutils literal\">client.rb</code> recipe and the <code class=\"docutils literal\">outputs.conf.erb</code> template files that are located in the <a class=\"reference external\" href=\"https://github.com/chef-cookbooks/chef-splunk/\">chef-splunk cookbook</a> that is maintained by Chef.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_template.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_template.html</a>\n  </p>\n</div>\n","12-9/knife_list":"<h1 id=\"knife-list\">knife list</h1> <p>Use the <code class=\"docutils literal\">knife list</code> subcommand to view a list of objects on the Chef server. This subcommand works similar to <code class=\"docutils literal\">knife cookbook list</code>, <code class=\"docutils literal\">knife data bag list</code>, <code class=\"docutils literal\">knife environment list</code>, <code class=\"docutils literal\">knife node list</code>, and <code class=\"docutils literal\">knife role list</code>, but with a single verb (and a single action).</p>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife list [PATTERN...] (options)</pre>   <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">-1</code></dt> <dd>Show only one column of results. Default: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">--chef-repo-path PATH</code></dt> <dd>The path to the chef-repo. This setting will override the default path to the chef-repo. Default: same value as specified by <code class=\"docutils literal\">chef_repo_path</code> in client.rb.</dd> <dt><code class=\"docutils literal\">--concurrency</code></dt> <dd>The number of allowed concurrent connections. Default: <code class=\"docutils literal\">10</code>.</dd> <dt><code class=\"docutils literal\">-d</code></dt> <dd>Prevent a directory’s children from showing when a directory matches a pattern. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt>\n<code class=\"docutils literal\">-f</code>, <code class=\"docutils literal\">--flat</code>\n</dt> <dd>Show a list of file names. Set to <code class=\"docutils literal\">false</code> to view <code class=\"docutils literal\">ls</code>-like output. Default: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">--local</code></dt> <dd>Return only the contents of the local directory. Default: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">-p</code></dt> <dd>Show directories with trailing slashes (/). Default: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">-R</code></dt> <dd>List directories recursively. Default: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">--repo-mode MODE</code></dt> <dd>The layout of the local chef-repo. Possible values: <code class=\"docutils literal\">static</code>, <code class=\"docutils literal\">everything</code>, or <code class=\"docutils literal\">hosted_everything</code>. Use <code class=\"docutils literal\">static</code> for just roles, environments, cookbooks, and data bags. By default, <code class=\"docutils literal\">everything</code> and <code class=\"docutils literal\">hosted_everything</code> are dynamically selected depending on the server type. Default: <code class=\"docutils literal\">everything</code> / <code class=\"docutils literal\">hosted_everything</code>.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>List roles</strong></p> <p>For example, to view a list of roles on the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife list roles/</pre> <p><strong>List roles and environments</strong></p> <p>To view a list of roles and environments on the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife list roles/ environments/</pre> <p><strong>List everything</strong></p> <p>To view a list of absolutely everything on the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife list -R /</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_list.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_list.html</a>\n  </p>\n</div>\n","12-9/knife_raw":"<h1 id=\"knife-raw\">knife raw</h1> <p>Use the <code class=\"docutils literal\">knife raw</code> subcommand to send a REST request to an endpoint in the Chef server API.</p>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife raw REQUEST_PATH (options)</pre>   <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-i FILE</code>, <code class=\"docutils literal\">--input FILE</code>\n</dt> <dd>The name of a file to be used with the <code class=\"docutils literal\">PUT</code> or a <code class=\"docutils literal\">POST</code> request.</dd> <dt><code class=\"docutils literal\">--[no-]pretty</code></dt> <dd>Use <code class=\"docutils literal\">--no-pretty</code> to disable pretty-print output for JSON. Default: <code class=\"docutils literal\">--pretty</code>.</dd> <dt>\n<code class=\"docutils literal\">-m METHOD</code>, <code class=\"docutils literal\">--method METHOD</code>\n</dt> <dd>The request method: <code class=\"docutils literal\">DELETE</code>, <code class=\"docutils literal\">GET</code>, <code class=\"docutils literal\">POST</code>, or <code class=\"docutils literal\">PUT</code>. Default value: <code class=\"docutils literal\">GET</code>.</dd> <dt><code class=\"docutils literal\">--proxy-auth</code></dt> <dd>Enable proxy authentication to the Chef server web user interface. Default value: <code class=\"docutils literal\">false</code>.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>View a client</strong></p> <p>To view information about a client:</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife raw /clients/&lt;client_name&gt;</pre> <p><strong>View a node</strong></p> <p>To view information about a node:</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife raw /nodes/&lt;node_name&gt;</pre> <p><strong>Delete a data bag</strong></p> <p>To delete a data bag, enter a command similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife raw -m DELETE /data/foo</pre> <p>to return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">{\n  \"name\":\"foo\",\n  \"json_class\":\"Chef::DataBag\",\n  \"chef_type\":\"data_bag\"\n}</pre> <p><strong>Delete a role</strong></p> <p>To delete a role, enter a command similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife raw -m DELETE /roles/role-foo.json</pre> <p>to return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">{\n  \"name\":\"role-foo\",\n  \"json_class\":\"Chef::Role\",\n  \"chef_type\":\"role\"\n}</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_raw.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_raw.html</a>\n  </p>\n</div>\n","12-9/knife_recipe_list":"<h1 id=\"knife-recipe-list\">knife recipe list</h1> <p>Use the <code class=\"docutils literal\">knife recipe list</code> subcommand to view all of the recipes that are on a Chef server. A regular expression can be used to limit the results to recipes that match a specific pattern. The regular expression must be within quotes and not be surrounded by forward slashes (/).</p>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife recipe list REGEX</pre>   <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This command does not have any specific options.</p>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>View a list of recipes</strong></p> <p>To view a list of recipes:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife recipe list 'couchdb::*'</pre> <p>to return:</p> <pre class=\"highlight-bash\" data-language=\"bash\">couchdb::main_monitors\ncouchdb::master\ncouchdb::default\ncouchdb::org_cleanu</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_recipe_list.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_recipe_list.html</a>\n  </p>\n</div>\n","12-9/knife_role":"<h1 id=\"knife-role\">knife role</h1> <p>A role is a way to define certain patterns and processes that exist across nodes in an organization as belonging to a single job function. Each role consists of zero (or more) attributes and a run-list. Each node can have zero (or more) roles assigned to it. When a role is run against a node, the configuration details of that node are compared against the attributes of the role, and then the contents of that role’s run-list are applied to the node’s configuration details. When a chef-client runs, it merges its own attributes and run-lists with those contained within each assigned role.</p> <p>The <code class=\"docutils literal\">knife role</code> subcommand is used to manage the roles that are associated with one or more nodes on a Chef server.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">To add a role to a node and then build out the run-list for that node, use the <a class=\"reference internal\" href=\"knife_node\">knife node</a> subcommand and its <code class=\"docutils literal\">run_list add</code> argument.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div>  <h2 id=\"bulk-delete\">bulk delete</h2> <p>Use the <code class=\"docutils literal\">bulk delete</code> argument to delete one or more roles that match a pattern defined by a regular expression. The regular expression must be within quotes and not be surrounded by forward slashes (/).</p>  <h3 id=\"syntax\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife role bulk delete REGEX</pre>   <h3 id=\"options\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"examples\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Bulk delete roles</strong></p> <p>Use a regular expression to define the pattern used to bulk delete roles:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife role bulk delete \"^[0-9]{3}$\"</pre>    <h2 id=\"create\">create</h2> <p>Use the <code class=\"docutils literal\">create</code> argument to add a role to the Chef server. Role data is saved as JSON on the Chef server.</p>  <h3 id=\"id1\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife role create ROLE_NAME (options)</pre>   <h3 id=\"id2\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-d DESCRIPTION</code>, <code class=\"docutils literal\">--description DESCRIPTION</code>\n</dt> <dd>The description of the role. This value populates the description field for the role on the Chef server.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id3\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Create a role</strong></p> <p>To add a role named <code class=\"docutils literal\">role1</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife role create role1</pre> <p>In the $EDITOR enter the role data in JSON:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">## sample:\n{\n   \"name\": \"role1\",\n   \"default_attributes\": {\n   },\n   \"json_class\": \"Chef::Role\",\n   \"run_list\": ['recipe[cookbook_name::recipe_name],\n                 role[role_name]'\n   ],\n   \"description\": \"\",\n   \"chef_type\": \"role\",\n   \"override_attributes\": {\n   }\n}</pre> <p>When finished, save it.</p>    <h2 id=\"delete\">delete</h2> <p>Use the <code class=\"docutils literal\">delete</code> argument to delete a role from the Chef server.</p>  <h3 id=\"id4\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife role delete ROLE_NAME</pre>   <h3 id=\"id5\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"id6\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Delete a role</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife role delete devops</pre> <p>Type <code class=\"docutils literal\">Y</code> to confirm a deletion.</p>    <h2 id=\"edit\">edit</h2> <p>Use the <code class=\"docutils literal\">edit</code> argument to edit role details on the Chef server.</p>  <h3 id=\"id7\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife role edit ROLE_NAME</pre>   <h3 id=\"id8\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"id9\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Edit a role</strong></p> <p>To edit the data for a role named <code class=\"docutils literal\">role1</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife role edit role1</pre> <p>Update the role data in JSON:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">## sample:\n{\n   \"name\": \"role1\",\n   \"description\": \"This is the description for the role1 role.\",\n   \"json_class\": \"Chef::Role\",\n   \"default_attributes\": {\n   },\n   \"override_attributes\": {\n   },\n   \"chef_type\": \"role\",\n   \"run_list\": [\"recipe[cookbook_name::recipe_name]\",\n                \"role[role_name]\"\n   ],\n   \"env_run_lists\": {\n   },\n}</pre> <p>When finished, save it.</p>    <h2 id=\"from-file\">from file</h2> <p>Use the <code class=\"docutils literal\">from file</code> argument to create a role using existing JSON data as a template.</p>  <h3 id=\"id10\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife role from file FILE</pre>   <h3 id=\"id11\">Options</h3> <p>This command does not have any specific options.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id12\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Create a role using JSON data</strong></p> <p>To view role details based on the values contained in a JSON file:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife role from file \"path to JSON file\"</pre>    <h2 id=\"list\">list</h2> <p>Use the <code class=\"docutils literal\">list</code> argument to view a list of roles that are currently available on the Chef server.</p>  <h3 id=\"id13\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife role list</pre>   <h3 id=\"id14\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-w</code>, <code class=\"docutils literal\">--with-uri</code>\n</dt> <dd>Show the corresponding URIs.</dd> </dl>   <h3 id=\"id15\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>View a list of roles</strong></p> <p>To view a list of roles on the Chef server and display the URI for each role returned, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife role list -w</pre>    <h2 id=\"show\">show</h2> <p>Use the <code class=\"docutils literal\">show</code> argument to view the details of a role.</p>  <h3 id=\"id16\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife role show ROLE_NAME</pre>   <h3 id=\"id17\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a ATTR</code>, <code class=\"docutils literal\">--attribute ATTR</code>\n</dt> <dd>The attribute (or attributes) to show.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id18\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Show as JSON data</strong></p> <p>To view information in JSON format, use the <code class=\"docutils literal\">-F</code> common option as part of the command like this:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife role show devops -F json</pre> <p>Other formats available include <code class=\"docutils literal\">text</code>, <code class=\"docutils literal\">yaml</code>, and <code class=\"docutils literal\">pp</code>.</p> <p><strong>Show as raw JSON data</strong></p> <p>To view node information in raw JSON, use the <code class=\"docutils literal\">-l</code> or <code class=\"docutils literal\">--long</code> option:</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife role show -l -F json &lt;role_name&gt;</pre> <p>and/or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife role show -l --format=json &lt;role_name&gt;</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_role.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_role.html</a>\n  </p>\n</div>\n","12-9/knife_serve":"<h1 id=\"knife-serve\">knife serve</h1> <p>Use the <code class=\"docutils literal\">knife serve</code> subcommand to run a persistent chef-zero against the local chef-repo. (chef-zero is a lightweight Chef server that runs in-memory on the local machine.) This is the same as running the chef-client executable with the <code class=\"docutils literal\">--local-mode</code> option. The <code class=\"docutils literal\">chef_repo_path</code> is located automatically and the Chef server will bind to the first available port between <code class=\"docutils literal\">8889</code> and <code class=\"docutils literal\">9999</code>. <code class=\"docutils literal\">knife serve</code> will print the URL for the local Chef server, so that it may be added to the knife.rb file.</p>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife serve (options)</pre>   <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--chef-repo-path PATH</code></dt> <dd>The path to the chef-repo. Default value: same as <code class=\"docutils literal\">chef_repo_path</code> in the client.rb file.</dd> <dt><code class=\"docutils literal\">--chef-zero-host IP</code></dt> <dd>Override the host on which chef-zero listens. Default value: <code class=\"docutils literal\">127.0.0.1</code>.</dd> <dt><code class=\"docutils literal\">--chef-zero-port PORT</code></dt> <dd>The port on which chef-zero listens. The default behavior will bind to the first available port between <code class=\"docutils literal\">8889</code> and <code class=\"docutils literal\">9999</code>.</dd> <dt><code class=\"docutils literal\">--repo-mode MODE</code></dt> <dd>Use to specify the local chef-repo layout. Possible values: <code class=\"docutils literal\">static</code> (for environments, roles, data bags, and cookbooks), <code class=\"docutils literal\">everything</code> (same as static, plus nodes, clients, and users), <code class=\"docutils literal\">hosted_everything</code> (for ACLs, groups). Default value: <code class=\"docutils literal\">everything/hosted_everything</code>.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>None.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_serve.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_serve.html</a>\n  </p>\n</div>\n","12-9/knife_node":"<h1 id=\"knife-node\">knife node</h1> <p>A node is any machine—physical, virtual, cloud, network device, etc.—that is under management by Chef.</p> <p>The <code class=\"docutils literal\">knife node</code> subcommand is used to manage the nodes that exist on a Chef server.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div>  <h2 id=\"bulk-delete\">bulk delete</h2> <p>Use the <code class=\"docutils literal\">bulk delete</code> argument to delete one or more nodes that match a pattern defined by a regular expression. The regular expression must be within quotes and not be surrounded by forward slashes (/).</p>  <h3 id=\"syntax\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node bulk delete REGEX</pre>   <h3 id=\"options\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"examples\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Bulk delete nodes</strong></p> <p>Use a regular expression to define the pattern used to bulk delete nodes:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node bulk delete \"^[0-9]{3}$\"</pre> <p>Type <code class=\"docutils literal\">Y</code> to confirm a deletion.</p>    <h2 id=\"create\">create</h2> <p>Use the <code class=\"docutils literal\">create</code> argument to add a node to the Chef server. Node data is stored as JSON on the Chef server.</p>  <h3 id=\"id1\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node create NODE_NAME</pre>   <h3 id=\"id2\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"id3\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Create a node</strong></p> <p>To add a node named <code class=\"docutils literal\">node1</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node create node1</pre> <p>In the $EDITOR enter the node data in JSON:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">## sample:\n{\n   \"normal\": {\n   },\n   \"name\": \"foobar\",\n   \"override\": {\n   },\n   \"default\": {\n   },\n   \"json_class\": \"Chef::Node\",\n   \"automatic\": {\n   },\n   \"run_list\": [\n      \"recipe[zsh]\",\n      \"role[webserver]\"\n   ],\n   \"chef_type\": \"node\"\n}</pre> <p>When finished, save it.</p>    <h2 id=\"delete\">delete</h2> <p>Use the <code class=\"docutils literal\">delete</code> argument to delete a node from the Chef server.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Deleting a node will not delete any corresponding API clients.</p> </div>  <h3 id=\"id4\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node delete NODE_NAME</pre>   <h3 id=\"id5\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"id6\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Delete a node</strong></p> <p>To delete a node named <code class=\"docutils literal\">node1</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node delete node1</pre>    <h2 id=\"edit\">edit</h2> <p>Use the <code class=\"docutils literal\">edit</code> argument to edit the details of a node on a Chef server. Node data is stored as JSON on the Chef server.</p>  <h3 id=\"id7\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node edit NODE_NAME (options)</pre>   <h3 id=\"id8\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--all</code>\n</dt> <dd>Display a node in the $EDITOR. By default, attributes that are default, override, or automatic, are not shown.</dd> </dl>   <h3 id=\"id9\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Edit a node</strong></p> <p>To edit the data for a node named <code class=\"docutils literal\">node1</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node edit node1 -a</pre> <p>Update the role data in JSON:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">## sample:\n{\n   \"normal\": {\n   },\n   \"name\": \"node1\",\n   \"override\": {\n   },\n   \"default\": {\n   },\n   \"json_class\": \"Chef::Node\",\n   \"automatic\": {\n   },\n   \"run_list\": [\n      \"recipe[devops]\",\n      \"role[webserver]\"\n   ],\n   \"chef_type\": \"node\"\n}</pre> <p>When finished, save it.</p>    <h2 id=\"environment-set\">environment set</h2> <p>Use the <code class=\"docutils literal\">environment set</code> argument to set the environment for a node without editing the node object.</p>  <h3 id=\"id10\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node environment_set NODE_NAME ENVIRONMENT_NAME (options)</pre>   <h3 id=\"id11\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"id12\">Examples</h3> <p>None.</p>    <h2 id=\"from-file\">from file</h2> <p>Use the <code class=\"docutils literal\">from file</code> argument to create a node using existing node data as a template.</p>  <h3 id=\"id13\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node from file FILE</pre>   <h3 id=\"id14\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"id15\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Create a node using a JSON file</strong></p> <p>To add a node using data contained in a JSON file:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node from file \"PATH_TO_JSON_FILE\"</pre>    <h2 id=\"list\">list</h2> <p>Use the <code class=\"docutils literal\">list</code> argument to view all of the nodes that exist on a Chef server.</p>  <h3 id=\"id16\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node list (options)</pre>   <h3 id=\"id17\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-w</code>, <code class=\"docutils literal\">--with-uri</code>\n</dt> <dd>Show the corresponding URIs.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id18\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>View a list of nodes</strong></p> <p>To verify the list of nodes that are registered with the Chef server, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node list</pre> <p>to return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">i-12345678\nrs-123456</pre>    <h2 id=\"run-list-add\">run_list add</h2> <p>A run-list defines all of the information necessary for Chef to configure a node into the desired state. A run-list is:</p> <ul class=\"simple\"> <li>An ordered list of roles and/or recipes that are run in the exact order defined in the run-list; if a recipe appears more than once in the run-list, the chef-client will not run it twice</li> <li>Always specific to the node on which it runs; nodes may have a run-list that is identical to the run-list used by other nodes</li> <li>Stored as part of the node object on the Chef server</li> <li>Maintained using knife, and then uploaded from the workstation to the Chef server, or is maintained using the Chef management console</li> </ul> <p>Use the <code class=\"docutils literal\">run_list add</code> argument to add run-list items (roles or recipes) to a node.</p> <p>A run-list must be in one of the following formats: fully qualified, cookbook, or default. Both roles and recipes must be in quotes, for example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">'role[NAME]'</pre> <p>or</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">'recipe[COOKBOOK::RECIPE]'</pre> <p>Use a comma to separate roles and recipes when adding more than one item the run-list:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">'recipe[COOKBOOK::RECIPE],COOKBOOK::RECIPE,role[NAME]'</pre>  <h3 id=\"id19\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node run_list add NODE_NAME RUN_LIST_ITEM (options)</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>When running knife in Microsoft Windows, a string may be interpreted as a wildcard pattern when quotes are not present in the command. The number of quotes to use depends on the shell from which the command is being run.</p> <p>When running knife from the command prompt, a string should be surrounded by single quotes (<code class=\"docutils literal\">' '</code>). For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node run_list set test-node 'recipe[iptables]'</pre> <p>When running knife from Windows PowerShell, a string should be surrounded by triple single quotes (<code class=\"docutils literal\">''' '''</code>). For example:</p> <pre class=\"last highlight-bash\" data-language=\"bash\">$ knife node run_list set test-node '''recipe[iptables]'''</pre> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>The chef-client version 12.4 release adds an optional feature to the Microsoft Installer Package (MSI) for Chef. This feature enables the ability to pass quoted strings from the Windows PowerShell command line without the need for triple single quotes (<code class=\"docutils literal\">''' '''</code>). This feature installs a Windows PowerShell module (typically in <code class=\"docutils literal\">C:\\opscode\\chef\\modules</code>) that is also appended to the <code class=\"docutils literal\">PSModulePath</code> environment variable. This feature is not enabled by default. To activate this feature, run the following command from within Windows PowerShell:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ Import-Module chef</pre> <p>or add <code class=\"docutils literal\">Import-Module chef</code> to the profile for Windows PowerShell located at:</p> <pre class=\"highlight-bash\" data-language=\"bash\">~\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1</pre> <p>This module exports cmdlets that have the same name as the command-line tools—chef-client, knife, chef-apply—that are built into Chef.</p> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife exec -E 'puts ARGV' \"\"\"&amp;s0meth1ng\"\"\"</pre> <p>is now:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife exec -E 'puts ARGV' '&amp;s0meth1ng'</pre> <p>and:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node run_list set test-node '''role[ssssssomething]'''</pre> <p>is now:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node run_list set test-node 'role[ssssssomething]'</pre> <p>To remove this feature, run the following command from within Windows PowerShell:</p> <pre class=\"last highlight-bash\" data-language=\"bash\">$ Remove-Module chef</pre> </div>   <h3 id=\"id20\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a ITEM</code>, <code class=\"docutils literal\">--after ITEM</code>\n</dt> <dd>Add a run-list item after the specified run-list item.</dd> <dt>\n<code class=\"docutils literal\">-b ITEM</code>, <code class=\"docutils literal\">--before ITEM</code>\n</dt> <dd>Add a run-list item before the specified run-list item.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id21\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Add a role</strong></p> <p>To add a role to a run-list, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node run_list add NODE_NAME 'role[ROLE_NAME]'</pre> <p><strong>Add roles and recipes</strong></p> <p>To add roles and recipes to a run-list, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node run_list add NODE_NAME 'recipe[COOKBOOK::RECIPE_NAME],recipe[COOKBOOK::RECIPE_NAME],role[ROLE_NAME]'</pre> <p><strong>Add a recipe with a FQDN</strong></p> <p>To add a recipe to a run-list using the fully qualified format, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node run_list add NODE_NAME 'recipe[COOKBOOK::RECIPE_NAME]'</pre> <p><strong>Add a recipe with a cookbook</strong></p> <p>To add a recipe to a run-list using the cookbook format, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node run_list add NODE_NAME 'COOKBOOK::RECIPE_NAME'</pre> <p><strong>Add the default recipe</strong></p> <p>To add the default recipe of a cookbook to a run-list, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node run_list add NODE_NAME 'COOKBOOK'</pre>    <h2 id=\"run-list-remove\">run_list remove</h2> <p>Use the <code class=\"docutils literal\">run_list remove</code> argument to remove run-list items (roles or recipes) from a node. A recipe must be in one of the following formats: fully qualified, cookbook, or default. Both roles and recipes must be in quotes, for example: <code class=\"docutils literal\">'role[ROLE_NAME]'</code> or <code class=\"docutils literal\">'recipe[COOKBOOK::RECIPE_NAME]'</code>. Use a comma to separate roles and recipes when removing more than one, like this: <code class=\"docutils literal\">'recipe[COOKBOOK::RECIPE_NAME],COOKBOOK::RECIPE_NAME,role[ROLE_NAME]'</code>.</p>  <h3 id=\"id22\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node run_list remove NODE_NAME RUN_LIST_ITEM</pre>   <h3 id=\"id23\">Options</h3> <p>This command does not have any specific options.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id24\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Remove a role</strong></p> <p>To remove a role from a run-list, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node run_list remove NODE_NAME 'role[ROLE_NAME]'</pre> <p><strong>Remove a run-list</strong></p> <p>To remove a recipe from a run-list using the fully qualified format, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node run_list remove NODE_NAME 'recipe[COOKBOOK::RECIPE_NAME]'</pre>    <h2 id=\"run-list-set\">run_list set</h2> <p>Use the <code class=\"docutils literal\">run_list set</code> argument to set the run-list for a node. A recipe must be in one of the following formats: fully qualified, cookbook, or default. Both roles and recipes must be in quotes, for example: <code class=\"docutils literal\">'role[ROLE_NAME]'</code> or <code class=\"docutils literal\">'recipe[COOKBOOK::RECIPE_NAME]'</code>. Use a comma to separate roles and recipes when removing more than one, like this: <code class=\"docutils literal\">'recipe[COOKBOOK::RECIPE_NAME],COOKBOOK::RECIPE_NAME,role[ROLE_NAME]'</code>.</p>  <h3 id=\"id25\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node run_list set NODE_NAME RUN_LIST_ITEM</pre> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>When running knife in Microsoft Windows, a string may be interpreted as a wildcard pattern when quotes are not present in the command. The number of quotes to use depends on the shell from which the command is being run.</p> <p>When running knife from the command prompt, a string should be surrounded by single quotes (<code class=\"docutils literal\">' '</code>). For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node run_list set test-node 'recipe[iptables]'</pre> <p>When running knife from Windows PowerShell, a string should be surrounded by triple single quotes (<code class=\"docutils literal\">''' '''</code>). For example:</p> <pre class=\"last highlight-bash\" data-language=\"bash\">$ knife node run_list set test-node '''recipe[iptables]'''</pre> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>The chef-client version 12.4 release adds an optional feature to the Microsoft Installer Package (MSI) for Chef. This feature enables the ability to pass quoted strings from the Windows PowerShell command line without the need for triple single quotes (<code class=\"docutils literal\">''' '''</code>). This feature installs a Windows PowerShell module (typically in <code class=\"docutils literal\">C:\\opscode\\chef\\modules</code>) that is also appended to the <code class=\"docutils literal\">PSModulePath</code> environment variable. This feature is not enabled by default. To activate this feature, run the following command from within Windows PowerShell:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ Import-Module chef</pre> <p>or add <code class=\"docutils literal\">Import-Module chef</code> to the profile for Windows PowerShell located at:</p> <pre class=\"highlight-bash\" data-language=\"bash\">~\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1</pre> <p>This module exports cmdlets that have the same name as the command-line tools—chef-client, knife, chef-apply—that are built into Chef.</p> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife exec -E 'puts ARGV' \"\"\"&amp;s0meth1ng\"\"\"</pre> <p>is now:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife exec -E 'puts ARGV' '&amp;s0meth1ng'</pre> <p>and:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node run_list set test-node '''role[ssssssomething]'''</pre> <p>is now:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node run_list set test-node 'role[ssssssomething]'</pre> <p>To remove this feature, run the following command from within Windows PowerShell:</p> <pre class=\"last highlight-bash\" data-language=\"bash\">$ Remove-Module chef</pre> </div>   <h3 id=\"id26\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"id27\">Examples</h3> <p>None.</p>    <h2 id=\"show\">show</h2> <p>Use the <code class=\"docutils literal\">show</code> argument to display information about a node.</p>  <h3 id=\"id28\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node show NODE_NAME (options)</pre>   <h3 id=\"id29\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a ATTR</code>, <code class=\"docutils literal\">--attribute ATTR</code>\n</dt> <dd>The attribute (or attributes) to show.</dd> <dt>\n<code class=\"docutils literal\">-l</code>, <code class=\"docutils literal\">--long</code>\n</dt> <dd>Display all attributes in the output and show the output as JSON.</dd> <dt>\n<code class=\"docutils literal\">-m</code>, <code class=\"docutils literal\">--medium</code>\n</dt> <dd>Display normal attributes in the output and to show the output as JSON.</dd> <dt>\n<code class=\"docutils literal\">-r</code>, <code class=\"docutils literal\">--run-list</code>\n</dt> <dd>Show only the run-list.</dd> </dl>   <h3 id=\"id30\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Show all data about nodes</strong></p> <p>To view all data for a node named <code class=\"docutils literal\">build</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node show build</pre> <p>to return:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Node Name:   build\nEnvironment: _default\nFQDN:\nIP:\nRun List:\nRoles:\nRecipes:\nPlatform:</pre> <p><strong>Show basic information about nodes</strong></p> <p>To show basic information about a node, truncated and nicely formatted:</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife node show NODE_NAME</pre> <p><strong>Show all data about nodes, truncated</strong></p> <p>To show all information about a node, nicely formatted:</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife node show -l NODE_NAME</pre> <p><strong>Show attributes</strong></p> <p>To list a single node attribute:</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife node show NODE_NAME -a ATTRIBUTE_NAME</pre> <p>where <code class=\"docutils literal\">ATTRIBUTE_NAME</code> is something like <code class=\"docutils literal\">kernel</code> or <code class=\"docutils literal\">platform</code>. This doesn’t work for nested attributes like <code class=\"docutils literal\">node[kernel][machine]</code> because <code class=\"docutils literal\">knife node show</code> doesn’t understand nested attributes.</p> <p><strong>Show the FQDN</strong></p> <p>To view the FQDN for a node named <code class=\"docutils literal\">i-12345678</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node show i-12345678 -a fqdn</pre> <p>to return:</p> <pre class=\"highlight-bash\" data-language=\"bash\">fqdn: ip-10-251-75-20.ec2.internal</pre> <p><strong>Show a run-list</strong></p> <p>To view the run-list for a node named <code class=\"docutils literal\">dev</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node show dev -r</pre> <p><strong>Show as JSON data</strong></p> <p>To view information in JSON format, use the <code class=\"docutils literal\">-F</code> common option; use a command like this for a node named <code class=\"docutils literal\">devops</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node show devops -F json</pre> <p>Other formats available include <code class=\"docutils literal\">text</code>, <code class=\"docutils literal\">yaml</code>, and <code class=\"docutils literal\">pp</code>.</p> <p><strong>Show as raw JSON data</strong></p> <p>To view node information in raw JSON, use the <code class=\"docutils literal\">-l</code> or <code class=\"docutils literal\">--long</code> option:</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife node show -l -F json NODE_NAME</pre> <p>and/or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">knife node show -l --format=json NODE_NAME</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_node.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_node.html</a>\n  </p>\n</div>\n","12-9/knife_show":"<h1 id=\"knife-show\">knife show</h1> <p>Use the <code class=\"docutils literal\">knife show</code> subcommand to view the details of one (or more) objects on the Chef server. This subcommand works similar to <code class=\"docutils literal\">knife cookbook show</code>, <code class=\"docutils literal\">knife data bag show</code>, <code class=\"docutils literal\">knife environment show</code>, <code class=\"docutils literal\">knife node show</code>, and <code class=\"docutils literal\">knife role show</code>, but with a single verb (and a single action).</p>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife show [PATTERN...] (options)</pre>   <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a ATTR</code>, <code class=\"docutils literal\">--attribute ATTR</code>\n</dt> <dd>The attribute (or attributes) to show.</dd> <dt><code class=\"docutils literal\">--chef-repo-path PATH</code></dt> <dd>The path to the chef-repo. This setting will override the default path to the chef-repo. Default: same value as specified by <code class=\"docutils literal\">chef_repo_path</code> in client.rb.</dd> <dt><code class=\"docutils literal\">--concurrency</code></dt> <dd>The number of allowed concurrent connections. Default: <code class=\"docutils literal\">10</code>.</dd> <dt><code class=\"docutils literal\">--local</code></dt> <dd>Show local files instead of remote files.</dd> <dt><code class=\"docutils literal\">--repo-mode MODE</code></dt> <dd>The layout of the local chef-repo. Possible values: <code class=\"docutils literal\">static</code>, <code class=\"docutils literal\">everything</code>, or <code class=\"docutils literal\">hosted_everything</code>. Use <code class=\"docutils literal\">static</code> for just roles, environments, cookbooks, and data bags. By default, <code class=\"docutils literal\">everything</code> and <code class=\"docutils literal\">hosted_everything</code> are dynamically selected depending on the server type. Default: <code class=\"docutils literal\">everything</code> / <code class=\"docutils literal\">hosted_everything</code>.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Show all cookbooks</strong></p> <p>To show all cookbooks in the <code class=\"docutils literal\">cookbooks/</code> directory:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife show cookbooks/</pre> <p>or, (if already in the <code class=\"docutils literal\">cookbooks/</code> directory in the local chef-repo):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife show</pre> <p><strong>Show roles and environments</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife show roles/ environments/</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_show.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_show.html</a>\n  </p>\n</div>\n","12-9/knife_ssl_fetch":"<h1 id=\"knife-ssl-fetch\">knife ssl_fetch</h1> <p>Use the <code class=\"docutils literal\">knife ssl fetch</code> subcommand to copy SSL certificates from an HTTPS server to the <code class=\"docutils literal\">trusted_certs_dir</code> directory that is used by knife and the chef-client to store trusted SSL certificates. When these certificates match the hostname of the remote server, running <code class=\"docutils literal\">knife ssl fetch</code> is the only step required to verify a remote server that is accessed by either knife or the chef-client.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">It is the user’s responsibility to verify the authenticity of every SSL certificate before downloading it to the <code class=\"docutils literal\">/.chef/trusted_certs</code> directory. knife will use any certificate in that directory as if it is a 100% trusted and authentic SSL certificate. knife will not be able to determine if any certificate in this directory has been tampered with, is forged, malicious, or otherwise harmful. Therefore it is essential that users take the proper steps before downloading certificates into this directory.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssl fetch (options)</pre>   <h2 id=\"options\">Options</h2> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">URL_or_URI</code></dt> <dd>The URL or URI for the location at which the SSL certificate is located. Default value: the URL for the Chef server, as defined in the knife.rb file.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Fetch the SSL certificates used by Knife from the Chef server</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssl fetch</pre> <p>The response is similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">WARNING: Certificates from &lt;chef_server_url&gt; will be fetched and placed in your trusted_cert\ndirectory (/Users/grantmc/chef-repo/.chef/trusted_certs).\n\nKnife has no means to verify these are the correct certificates. You should\nverify the authenticity of these certificates after downloading.\n\nAdding certificate for &lt;chef_server_url&gt; in /Users/grantmc/chef-repo/.chef/trusted_certs/grantmc.crt\nAdding certificate for DigiCert Secure Server CA in /Users/grantmc/chef-repo/.chef/trusted_certs/DigiCert_Secure_Server_CA.crt</pre> <p><strong>Fetch SSL certificates from a URL or URI</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssl fetch https://www.example.com</pre> <p><strong>Verify Checksums</strong></p> <p>The SSL certificate that is downloaded to the <code class=\"docutils literal\">/.chef/trusted_certs</code> directory should be verified to ensure that it is, in fact, the same certificate as the one located on the Chef server. This can be done by comparing the SHA-256 checksums.</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">View the checksum on the Chef server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ ssh ubuntu@chef-server.example.com sudo sha256sum /var/opt/opscode/nginx/ca/chef-server.example.com.crt</pre> <p>The response is similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">&lt;ABC123checksum&gt;  /var/opt/opscode/nginx/ca/chef-server.example.com.crt</pre> </li> <li>\n<p class=\"first\">View the checksum on the workstation:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ gsha256sum .chef/trusted_certs/chef-server.example.com.crt</pre> <p>The response is similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">&lt;ABC123checksum&gt;  .chef/trusted_certs/chef-server.example.com.crt</pre> </li> <li>\n<p class=\"first\">Verify that the checksum values are identical.</p> </li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_ssl_fetch.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_ssl_fetch.html</a>\n  </p>\n</div>\n","12-9/knife_ssh":"<h1 id=\"knife-ssh\">knife ssh</h1> <p>Use the <code class=\"docutils literal\">knife ssh</code> subcommand to invoke SSH commands (in parallel) on a subset of nodes within an organization, based on the results of a <a class=\"reference external\" href=\"https://docs.chef.io/essentials_search.html\">search query</a> made to the Chef server.</p>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssh SEARCH_QUERY SSH_COMMAND (options)</pre>   <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a SSH_ATTR</code>, <code class=\"docutils literal\">--attribute SSH_ATTR</code>\n</dt> <dd>The attribute used when opening an SSH connection. The default attribute is the FQDN of the host. Other possible values include a public IP address, a private IP address, or a hostname.</dd> <dt>\n<code class=\"docutils literal\">-A</code>, <code class=\"docutils literal\">--forward-agent</code>\n</dt> <dd>Enable SSH agent forwarding.</dd> <dt>\n<code class=\"docutils literal\">-C NUM</code>, <code class=\"docutils literal\">--concurrency NUM</code>\n</dt> <dd>The number of allowed concurrent connections.</dd> <dt>\n<code class=\"docutils literal\">-e</code>, <code class=\"docutils literal\">--exit-on-error</code>\n</dt> <dd>Use to exit immediately upon error.</dd> <dt>\n<code class=\"docutils literal\">-G GATEWAY</code>, <code class=\"docutils literal\">--ssh-gateway GATEWAY</code>\n</dt> <dd>The SSH tunnel or gateway that is used to run a bootstrap action on a machine that is not accessible from the workstation.</dd> <dt>\n<code class=\"docutils literal\">-i IDENTITY_FILE</code>, <code class=\"docutils literal\">--identity-file IDENTIFY_FILE</code>\n</dt> <dd>The SSH identity file used for authentication. Key-based authentication is recommended.</dd> <dt>\n<code class=\"docutils literal\">-m</code>, <code class=\"docutils literal\">--manual-list</code>\n</dt> <dd>Define a search query as a space-separated list of servers. If there is more than one item in the list, put quotes around the entire list. For example: <code class=\"docutils literal\">--manual-list \"server01 server 02 server 03\"</code>\n</dd> <dt><code class=\"docutils literal\">--[no-]host-key-verify</code></dt> <dd>Use <code class=\"docutils literal\">--no-host-key-verify</code> to disable host key verification. Default setting: <code class=\"docutils literal\">--host-key-verify</code>.</dd> <dt><code class=\"docutils literal\">OTHER</code></dt> <dd>The shell type. Possible values: <code class=\"docutils literal\">interactive</code>, <code class=\"docutils literal\">screen</code>, <code class=\"docutils literal\">tmux</code>, <code class=\"docutils literal\">macterm</code>, or <code class=\"docutils literal\">cssh</code>. (<code class=\"docutils literal\">csshx</code> is deprecated in favor of <code class=\"docutils literal\">cssh</code>.)</dd> <dt>\n<code class=\"docutils literal\">-p PORT</code>, <code class=\"docutils literal\">--ssh-port PORT</code>\n</dt> <dd>The SSH port.</dd> <dt>\n<code class=\"docutils literal\">-P PASSWORD</code>, <code class=\"docutils literal\">--ssh-password PASSWORD</code>\n</dt> <dd>The SSH password. This can be used to pass the password directly on the command line. If this option is not specified (and a password is required) knife prompts for the password.</dd> <dt><code class=\"docutils literal\">SEARCH_QUERY</code></dt> <dd>The search query used to return a list of servers to be accessed using SSH and the specified <code class=\"docutils literal\">SSH_COMMAND</code>. This option uses the same syntax as the search subcommand.</dd> <dt><code class=\"docutils literal\">SSH_COMMAND</code></dt> <dd>The command to be run against the results of a search query.</dd> <dt>\n<code class=\"docutils literal\">-t SECONDS</code>, <code class=\"docutils literal\">--ssh-timeout SECONDS</code>\n</dt> <dd>The amount of time (in seconds) to wait for an SSH connection time out.</dd> <dt><code class=\"docutils literal\">--tmux-split</code></dt> <dd>Split the Tmux window. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt>\n<code class=\"docutils literal\">-x USER_NAME</code>, <code class=\"docutils literal\">--ssh-user USER_NAME</code>\n</dt> <dd>The SSH user name.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Find server uptime</strong></p> <p>To find the uptime of all of web servers running Ubuntu on the Amazon EC2 platform, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssh \"role:web\" \"uptime\" -x ubuntu -a ec2.public_hostname</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ec2-174-129-127-206.compute-1.amazonaws.com  13:50:47 up 1 day, 23:26,  1 user,  load average: 0.25, 0.18, 0.11\nec2-67-202-63-102.compute-1.amazonaws.com    13:50:47 up 1 day, 23:33,  1 user,  load average: 0.12, 0.13, 0.10\nec2-184-73-9-250.compute-1.amazonaws.com     13:50:48 up 16:45,  1 user,  load average: 0.30, 0.22, 0.13\nec2-75-101-240-230.compute-1.amazonaws.com   13:50:48 up 1 day, 22:59,  1 user,  load average: 0.24, 0.17, 0.11\nec2-184-73-60-141.compute-1.amazonaws.com    13:50:48 up 1 day, 23:30,  1 user,  load average: 0.32, 0.17, 0.15</pre> <p><strong>Run the chef-client on all nodes</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssh 'name:*' 'sudo chef-client'</pre> <p><strong>Force a chef-client run</strong></p> <p>To force a chef-client run on all of the web servers running Ubuntu on the Amazon EC2 platform, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssh \"role:web\" \"sudo chef-client\" -x ubuntu -a ec2.public_hostname</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ec2-67-202-63-102.compute-1.amazonaws.com   [Fri, 22 Oct 2010 14:18:37 +0000] INFO: Starting Chef Run (Version 0.9.10)\nec2-174-129-127-206.compute-1.amazonaws.com [Fri, 22 Oct 2010 14:18:37 +0000] INFO: Starting Chef Run (Version 0.9.10)\nec2-184-73-9-250.compute-1.amazonaws.com    [Fri, 22 Oct 2010 14:18:38 +0000] INFO: Starting Chef Run (Version 0.9.10)\nec2-75-101-240-230.compute-1.amazonaws.com  [Fri, 22 Oct 2010 14:18:38 +0000] INFO: Starting Chef Run (Version 0.9.10)\nec2-184-73-60-141.compute-1.amazonaws.com   [Fri, 22 Oct 2010 14:18:38 +0000] INFO: Starting Chef Run (Version 0.9.10)\nec2-174-129-127-206.compute-1.amazonaws.com [Fri, 22 Oct 2010 14:18:39 +0000] INFO: Chef Run complete in 1.419243 seconds\nec2-174-129-127-206.compute-1.amazonaws.com [Fri, 22 Oct 2010 14:18:39 +0000] INFO: cleaning the checksum cache\nec2-174-129-127-206.compute-1.amazonaws.com [Fri, 22 Oct 2010 14:18:39 +0000] INFO: Running report handlers\nec2-174-129-127-206.compute-1.amazonaws.com [Fri, 22 Oct 2010 14:18:39 +0000] INFO: Report handlers complete\nec2-67-202-63-102.compute-1.amazonaws.com   [Fri, 22 Oct 2010 14:18:39 +0000] INFO: Chef Run complete in 1.578265 seconds\nec2-67-202-63-102.compute-1.amazonaws.com   [Fri, 22 Oct 2010 14:18:39 +0000] INFO: cleaning the checksum cache\nec2-67-202-63-102.compute-1.amazonaws.com   [Fri, 22 Oct 2010 14:18:39 +0000] INFO: Running report handlers\nec2-67-202-63-102.compute-1.amazonaws.com   [Fri, 22 Oct 2010 14:18:39 +0000] INFO: Report handlers complete\nec2-184-73-9-250.compute-1.amazonaws.com    [Fri, 22 Oct 2010 14:18:40 +0000] INFO: Chef Run complete in 1.638884 seconds\nec2-184-73-9-250.compute-1.amazonaws.com    [Fri, 22 Oct 2010 14:18:40 +0000] INFO: cleaning the checksum cache\nec2-184-73-9-250.compute-1.amazonaws.com    [Fri, 22 Oct 2010 14:18:40 +0000] INFO: Running report handlers\nec2-184-73-9-250.compute-1.amazonaws.com    [Fri, 22 Oct 2010 14:18:40 +0000] INFO: Report handlers complete\nec2-75-101-240-230.compute-1.amazonaws.com  [Fri, 22 Oct 2010 14:18:40 +0000] INFO: Chef Run complete in 1.540257 seconds\nec2-75-101-240-230.compute-1.amazonaws.com  [Fri, 22 Oct 2010 14:18:40 +0000] INFO: cleaning the checksum cache\nec2-75-101-240-230.compute-1.amazonaws.com  [Fri, 22 Oct 2010 14:18:40 +0000] INFO: Running report handlers\nec2-75-101-240-230.compute-1.amazonaws.com  [Fri, 22 Oct 2010 14:18:40 +0000] INFO: Report handlers complete\nec2-184-73-60-141.compute-1.amazonaws.com   [Fri, 22 Oct 2010 14:18:40 +0000] INFO: Chef Run complete in 1.502489 seconds\nec2-184-73-60-141.compute-1.amazonaws.com   [Fri, 22 Oct 2010 14:18:40 +0000] INFO: cleaning the checksum cache\nec2-184-73-60-141.compute-1.amazonaws.com   [Fri, 22 Oct 2010 14:18:40 +0000] INFO: Running report handlers\nec2-184-73-60-141.compute-1.amazonaws.com   [Fri, 22 Oct 2010 14:18:40 +0000] INFO: Report handlers complete</pre> <p><strong>Run a command based on search query</strong></p> <p>To query for all nodes that have the <code class=\"docutils literal\">webserver</code> role and then use SSH to run the command <code class=\"docutils literal\">sudo chef-client</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssh \"role:webserver\" \"sudo chef-client\"</pre> <p><strong>Upgrade all nodes</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssh name:* \"sudo aptitude upgrade -y\"</pre> <p><strong>Specify the shell type</strong></p> <p>To specify the shell type used on the nodes returned by a search query:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssh roles:opscode-omnitruck macterm</pre> <p>where <code class=\"docutils literal\">screen</code> is one of the following values: <code class=\"docutils literal\">cssh</code>, <code class=\"docutils literal\">interactive</code>, <code class=\"docutils literal\">macterm</code>, <code class=\"docutils literal\">screen</code>, or <code class=\"docutils literal\">tmux</code>. If the node does not have the shell type installed, knife will return an error similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">you need the rb-appscript gem to use knife ssh macterm.\n`(sudo) gem    install rb-appscript` to install\nERROR: LoadError: cannot load such file -- appscript</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_ssh.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_ssh.html</a>\n  </p>\n</div>\n","12-9/knife_ssl_check":"<h1 id=\"knife-ssl-check\">knife ssl check</h1> <p>Use the <code class=\"docutils literal\">knife ssl check</code> subcommand to verify the SSL configuration for the Chef server or a location specified by a URL or URI. Invalid certificates will not be used by OpenSSL.</p> <p>When this command is run, the certificate files (<code class=\"docutils literal\">*.crt</code> and/or <code class=\"docutils literal\">*.pem</code>) that are located in the <code class=\"docutils literal\">/.chef/trusted_certs</code> directory are checked to see if they have valid X.509 certificate properties. A warning is returned when certificates do not have valid X.509 certificate properties or if the <code class=\"docutils literal\">/.chef/trusted_certs</code> directory does not contain any certificates.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">When verification of a remote server’s SSL certificate is disabled, the chef-client will issue a warning similar to “SSL validation of HTTPS requests is disabled. HTTPS connections are still encrypted, but the chef-client is not able to detect forged replies or man-in-the-middle attacks.” To configure SSL for the chef-client, set <code class=\"docutils literal\">ssl_verify_mode</code> to <code class=\"docutils literal\">:verify_peer</code> (recommended) <strong>or</strong> <code class=\"docutils literal\">verify_api_cert</code> to <code class=\"docutils literal\">true</code> in the client.rb file.</p> </div>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssl check (options)</pre>   <h2 id=\"options\">Options</h2> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">URL_or_URI</code></dt> <dd>The URL or URI for the location at which the SSL certificate is located. Default value: the URL for the Chef server, as defined in the knife.rb file.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>SSL certificate has valid X.509 properties</strong></p> <p>If the SSL certificate can be verified, the response to</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssl check</pre> <p>is similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Connecting to host chef-server.example.com:443\nSuccessfully verified certificates from 'chef-server.example.com'</pre> <p><strong>SSL certificate has invalid X.509 properties</strong></p> <p>If the SSL certificate cannot be verified, the response to</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssl check</pre> <p>is similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Connecting to host chef-server.example.com:443\nERROR: The SSL certificate of chef-server.example.com could not be verified\nCertificate issuer data:\n  /C=US/ST=WA/L=S/O=Corp/OU=Ops/CN=chef-server.example.com/emailAddress=you@example.com\n\nConfiguration Info:\n\nOpenSSL Configuration:\n* Version: OpenSSL 1.0.1j 15 Oct 2014\n* Certificate file: /opt/chefdk/embedded/ssl/cert.pem\n* Certificate directory: /opt/chefdk/embedded/ssl/certs\nChef SSL Configuration:\n* ssl_ca_path: nil\n* ssl_ca_file: nil\n* trusted_certs_dir: \"/Users/grantmc/Downloads/chef-repo/.chef/trusted_certs\"\n\nTO FIX THIS ERROR:\n\nIf the server you are connecting to uses a self-signed certificate,\nyou must configure chef to trust that certificate.\n\nBy default, the certificate is stored in the following location on the\nhost where your chef-server runs:\n\n  /var/opt/opscode/nginx/ca/SERVER_HOSTNAME.crt\n\nCopy that file to your trusted_certs_dir (currently:\n\n  /Users/grantmc/Downloads/chef-repo/.chef/trusted_certs)\n\nusing SSH/SCP or some other secure method, then re-run this command to\nconfirm that the certificate is now trusted.</pre> <p><strong>Verify the SSL configuration for the chef-client</strong></p> <p>The SSL certificates that are used by the chef-client may be verified by specifying the path to the client.rb file. Use the <code class=\"docutils literal\">--config</code> option (that is available to any knife command) to specify this path:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssl check --config /etc/chef/client.rb</pre> <p><strong>Verify an external server’s SSL certificate</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssl check URL_or_URI</pre> <p>for example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife ssl check https://www.chef.io</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_ssl_check.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_ssl_check.html</a>\n  </p>\n</div>\n","12-9/knife_search":"<h1 id=\"knife-search\">knife search</h1> <p>Search indexes allow queries to be made for any type of data that is indexed by the Chef server, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the <code class=\"docutils literal\">search</code> subcommand in knife, the <code class=\"docutils literal\">search</code> method in the Recipe DSL, the search box in the Chef management console, and by using the <code class=\"docutils literal\">/search</code> or <code class=\"docutils literal\">/search/INDEX</code> endpoints in the Chef server API. The search engine is based on Apache Solr and is run from the Chef server.</p> <p>Use the <code class=\"docutils literal\">knife search</code> subcommand run a search query for information that is indexed on a Chef server.</p>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search INDEX SEARCH_QUERY</pre> <p>where <code class=\"docutils literal\">INDEX</code> is one of <code class=\"docutils literal\">client</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">node</code>, <code class=\"docutils literal\">role</code>, or the name of a data bag and <code class=\"docutils literal\">SEARCH_QUERY</code> is the search query syntax for the query that will be executed.</p> <p><code class=\"docutils literal\">INDEX</code> is implied if omitted, and will default to <code class=\"docutils literal\">node</code>. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search '*:*' -i</pre> <p>will return something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">8 items found\n\ncentos-62-dev\nopensuse-1203\nubuntu-1304-dev\nubuntu-1304-orgtest\nubuntu-1204-ohai-test\nubuntu-1304-ifcfg-test\nohai-test\nwin2k8-dev</pre> <p>and is the same search as:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node '*:*' -i</pre> <p>If the <code class=\"docutils literal\">SEARCH_QUERY</code> does not contain a colon character (<code class=\"docutils literal\">:</code>), then the default query pattern is <code class=\"docutils literal\">tags:*#{@query}* OR roles:*#{@query}* OR fqdn:*#{@query}* OR addresses:*#{@query}*</code>, which means the following two search queries are effectively the same:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search ubuntu</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node \"tags:*ubuntu* OR roles:*ubuntu* OR fqdn:*ubuntu* (etc.)\"</pre>  <h3 id=\"query-syntax\">Query Syntax</h3> <p>A search query is comprised of two parts: the key and the search pattern. A search query has the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">key:search_pattern</pre> <p>where <code class=\"docutils literal\">key</code> is a field name that is found in the JSON description of an indexable object on the Chef server (a role, node, client, environment, or data bag) and <code class=\"docutils literal\">search_pattern</code> defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both <code class=\"docutils literal\">key</code> and <code class=\"docutils literal\">search_pattern</code> are case-sensitive; <code class=\"docutils literal\">key</code> has limited support for multiple character wildcard matching using an asterisk (“*”) (and as long as it is not the first character).</p>   <h3 id=\"keys\">Keys</h3> <p>A field name/description pair is available in the JSON object. Use the field name when searching for this information in the JSON object. Any field that exists in any JSON description for any role, node, chef-client, environment, or data bag can be searched.</p> <p>To search for the available fields for a particular object, use the <code class=\"docutils literal\">show</code> argument with any of the following knife subcommands: <code class=\"docutils literal\">knife client</code>, <code class=\"docutils literal\">knife data bag</code>, <code class=\"docutils literal\">knife environment</code>, <code class=\"docutils literal\">knife node</code>, or <code class=\"docutils literal\">knife role</code>. For example: <code class=\"docutils literal\">knife data bag show</code>.</p>  <h4 id=\"nested-fields\">Nested Fields</h4> <p>A nested field appears deeper in the JSON data structure. For example, information about a network interface might be several layers deep: <code class=\"docutils literal\">node[:network][:interfaces][:en1]</code>. When nested fields are present in a JSON structure, the chef-client will extract those nested fields to the top-level, flattening them into compound fields that support wildcard search patterns.</p> <p>By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor.</p> <p>Consider the following snippet of JSON data:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\"network\":\n  [\n  //snipped...\n    \"interfaces\",\n      {\"en1\": {\n        \"number\": \"1\",\n        \"flags\": [\n          \"UP\",\n          \"BROADCAST\",\n          \"SMART\",\n          \"RUNNING\",\n          \"SIMPLEX\",\n          \"MULTICAST\"\n        ],\n        \"addresses\": {\n          \"fe80::fa1e:dfff:fed8:63a2\": {\n            \"scope\": \"Link\",\n            \"prefixlen\": \"64\",\n            \"family\": \"inet6\"\n          },\n          \"f8:1e:df:d8:63:a2\": {\n            \"family\": \"lladdr\"\n          },\n          \"192.168.0.195\": {\n            \"netmask\": \"255.255.255.0\",\n            \"broadcast\": \"192.168.0.255\",\n            \"family\": \"inet\"\n          }\n        },\n        \"mtu\": \"1500\",\n        \"media\": {\n          \"supported\": {\n            \"autoselect\": {\n              \"options\": [\n\n              ]\n            }\n          },\n          \"selected\": {\n            \"autoselect\": {\n              \"options\": [\n\n              ]\n            }\n          }\n        },\n        \"type\": \"en\",\n        \"status\": \"active\",\n        \"encapsulation\": \"Ethernet\"\n      },\n  //snipped...</pre> <p>Before this data is indexed on the Chef server, the nested fields are extracted into the top level, similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">\"broadcast\" =&gt; \"192.168.0.255\",\n\"flags\"     =&gt; [\"UP\", \"BROADCAST\", \"SMART\", \"RUNNING\", \"SIMPLEX\", \"MULTICAST\"]\n\"mtu\"       =&gt; \"1500\"</pre> <p>which allows searches like the following to find data that is present in this node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"broadcast:192.168.0.*\"</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"mtu:1500\"</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"flags:UP\"</pre> <p>This data is also flattened into various compound fields, which follow the same pattern as the JSON hierarchy and use underscores (<code class=\"docutils literal\">_</code>) to separate the levels of data, similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\"># ...snip...\n\"network_interfaces_en1_addresses_192.168.0.195_broadcast\" =&gt; \"192.168.0.255\",\n\"network_interfaces_en1_addresses_fe80::fa1e:tldr_family\"  =&gt; \"inet6\",\n\"network_interfaces_en1_addresses\"                         =&gt; [\"fe80::fa1e:tldr\",\"f8:1e:df:tldr\",\"192.168.0.195\"]\n# ...snip...</pre> <p>which allows searches like the following to find data that is present in this node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node \"network_interfaces_en1_addresses:192.168.0.195\"</pre> <p>This flattened data structure also supports using wildcard compound fields, which allow searches to omit levels within the JSON data structure that are not important to the search query. In the following example, an asterisk (<code class=\"docutils literal\">*</code>) is used to show where the wildcard can exist when searching for a nested field:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">\"network_interfaces_*_flags\"     =&gt; [\"UP\", \"BROADCAST\", \"SMART\", \"RUNNING\", \"SIMPLEX\", \"MULTICAST\"]\n\"network_interfaces_*_addresses\" =&gt; [\"fe80::fa1e:dfff:fed8:63a2\", \"192.168.0.195\", \"f8:1e:df:d8:63:a2\"]\n\"network_interfaces_en0_media_*\" =&gt; [\"autoselect\", \"none\", \"1000baseT\", \"10baseT/UTP\", \"100baseTX\"]\n\"network_interfaces_en1_*\"       =&gt; [\"1\", \"UP\", \"BROADCAST\", \"SMART\", \"RUNNING\", \"SIMPLEX\", \"MULTICAST\",\n                                     \"fe80::fa1e:dfff:fed8:63a2\", \"f8:1e:df:d8:63:a2\", \"192.168.0.195\",\n                                     \"1500\", \"supported\", \"selected\", \"en\", \"active\", \"Ethernet\"]</pre> <p>For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">network_interfaces__flags</pre> <p>This query will search within the <code class=\"docutils literal\">flags</code> node, within the JSON structure, for each of <code class=\"docutils literal\">UP</code>, <code class=\"docutils literal\">BROADCAST</code>, <code class=\"docutils literal\">SMART</code>, <code class=\"docutils literal\">RUNNING</code>, <code class=\"docutils literal\">SIMPLEX</code>, and <code class=\"docutils literal\">MULTICAST</code>.</p>   <h4 id=\"examples\">Examples</h4> <p>To see the available keys for a node, enter the following (for a node named <code class=\"docutils literal\">staging</code>):</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife node show staging -Fj | less</pre> <p>to return a full JSON description of the node and to view the available keys with which any search query can be based.</p> <p>To use a question mark (<code class=\"docutils literal\">?</code>) to replace a single character in a wildcard search, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'platfor?:ubuntu'</pre> <p>To use an asterisk (<code class=\"docutils literal\">*</code>) to replace zero (or more) characters in a wildcard search, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'platfo*:ubuntu'</pre> <p>To find all IP address that are on the same network, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'network_interfaces__addresses:192.168*'</pre> <p>where <code class=\"docutils literal\">192.168*</code> is the network address for which the search will be run.</p> <p>To use a range search to find IP addresses within a subnet, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'network_interfaces_X_addresses:[192.168.0.* TO 192.168.127.*]'</pre> <p>where <code class=\"docutils literal\">192.168.0.* TO 192.168.127.*</code> defines the subnet range.</p>    <h3 id=\"about-patterns\">About Patterns</h3> <p>A search pattern is a way to fine-tune search results by returning anything that matches some type of incomplete search query. There are four types of search patterns that can be used when searching the search indexes on the Chef server: exact, wildcard, range, and fuzzy.</p>  <h4 id=\"exact-matching\">Exact Matching</h4> <p>An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by Ruby or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (‘ ‘) and a search pattern with double quotes (” ”).</p> <p>To search in a specific data bag for a specific data bag item, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search admins 'id:charlie'</pre> <p>where <code class=\"docutils literal\">admins</code> is the name of the data bag and <code class=\"docutils literal\">charlie</code> is the name of the data bag item. Something similar to the following will be returned:</p> <pre class=\"highlight-bash\" data-language=\"bash\">1 items found\n_rev:       1-39ff4099f2510f477b4c26bef81f75b9\nchef_type:  data_bag_item\ncomment:    Charlie the Unicorn\ndata_bag:   admins\ngid:        ops\nid:         charlie\nshell:      /bin/zsh\nuid:        1005</pre> <p>To search in a specific data bag using a string to find any matching data bag item, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search admins 'comment:\"Charlie the Unicorn\"'</pre> <p>where <code class=\"docutils literal\">admins</code> is the name of the data bag and <code class=\"docutils literal\">Charlie the Unicorn</code> is the string that will be used during the search. Something similar to the following will be returned:</p> <pre class=\"highlight-bash\" data-language=\"bash\">1 items found\n_rev:       1-39ff4099f2510f477b4c26bef81f75b9\nchef_type:  data_bag_item\ncomment:    Charlie the Unicorn\ndata_bag:   admins\ngid:        ops\nid:         charlie\nshell:      /bin/zsh\nuid:        1005</pre>   <h4 id=\"wildcard-matching\">Wildcard Matching</h4> <p>A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:</p> <ul class=\"simple\"> <li>A question mark (<code class=\"docutils literal\">?</code>) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)</li> <li>An asterisk (<code class=\"docutils literal\">*</code>) can be used to replace any number of characters (including zero)</li> </ul> <p>To search for any node that contains the specified key, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'foo:*'</pre> <p>where <code class=\"docutils literal\">foo</code> is the name of the node.</p> <p>To search for a node using a partial name, enter one of the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'name:app*'</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'name:app1*.example.com'</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'name:app?.example.com'</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'name:app1.example.???'</pre> <p>to return <code class=\"docutils literal\">app1.example.com</code> (and any other node that matches any of the string searches above).</p>   <h4 id=\"range-matching\">Range Matching</h4> <p>A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (“[ ]”) to denote inclusive boundaries and curly braces (“{ }”) to denote exclusive boundaries and with the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">boundary TO boundary</pre> <p>where <code class=\"docutils literal\">TO</code> is required (and must be capitalized).</p> <p>A data bag named <code class=\"docutils literal\">sample</code> contains four data bag items: <code class=\"docutils literal\">abc</code>, <code class=\"docutils literal\">bar</code>, <code class=\"docutils literal\">baz</code>, and <code class=\"docutils literal\">quz</code>. All of the items in-between <code class=\"docutils literal\">bar</code> and <code class=\"docutils literal\">foo</code>, inclusive, can be searched for using an inclusive search pattern.</p> <p>To search using an inclusive range, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search sample \"id:[bar TO foo]\"</pre> <p>where square brackets (<code class=\"docutils literal\">[ ]</code>) are used to define the range.</p> <p>A data bag named <code class=\"docutils literal\">sample</code> contains four data bag items: <code class=\"docutils literal\">abc</code>, <code class=\"docutils literal\">bar</code>, <code class=\"docutils literal\">baz</code>, and <code class=\"docutils literal\">quz</code>. All of the items that are exclusive to <code class=\"docutils literal\">bar</code> and <code class=\"docutils literal\">foo</code> can be searched for using an exclusive search pattern.</p> <p>To search using an exclusive range, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search sample \"id:{bar TO foo}\"</pre> <p>where curly braces (<code class=\"docutils literal\">{ }</code>) are used to define the range.</p>   <h4 id=\"fuzzy-matching\">Fuzzy Matching</h4> <p>A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">\"search_query\"~edit_distance</pre> <p>where <code class=\"docutils literal\">search_query</code> is the string that will be used during the search and <code class=\"docutils literal\">edit_distance</code> is the proximity. A tilde (“~”) is used to separate the edit distance from the search query.</p> <p>To use a fuzzy search pattern enter something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search client \"name:boo~\"</pre> <p>where <code class=\"docutils literal\">boo~</code> defines the fuzzy search pattern. This will return something similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"total\": 1,\n  \"start\": 0,\n  \"rows\": [\n    {\n      \"public_key\": \"too long didn't read\",\n      \"name\": \"foo\",\n      \"_rev\": \"1-f11a58043906e33d39a686e9b58cd92f\",\n      \"json_class\": \"Chef::ApiClient\",\n      \"admin\": false,\n      \"chef_type\": \"client\"\n    }\n  ]\n}</pre>    <h3 id=\"about-operators\">About Operators</h3> <p>An operator can be used to ensure that certain terms are included in the results, are excluded from the results, or are not included even when other aspects of the query match. Searches can use the following operators:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Operator</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">AND</code></td> <td>Use to find a match when both terms exist.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">OR</code></td> <td>Use to find a match if either term exists.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">NOT</code></td> <td>Use to exclude the term after <code class=\"docutils literal\">NOT</code> from the search results.</td> </tr> </tbody> </table> <p>Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>Using <code class=\"docutils literal\">AND NOT</code> together may trigger an error. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">ERROR: knife search failed: invalid search query:\n'datacenter%3A123%20AND%20NOT%20hostname%3Adev-%20AND%20NOT%20hostanem%3Asyslog-'\nParse error at offset: 38 Reason: Expected one of \\ at line 1, column 42 (byte 42) after AND</pre> <p>Use <code class=\"docutils literal\">-</code> instead of <code class=\"docutils literal\">NOT</code>. For example:</p> <pre class=\"last highlight-bash\" data-language=\"bash\">$ knife search sample \"id:foo AND -id:bar\"</pre> </div>  <h4 id=\"and\">AND</h4> <p>To join queries using the <code class=\"docutils literal\">AND</code> boolean operator, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search sample \"id:b* AND animal:dog\"</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">{\n  \"total\": 1,\n  \"start\": 0,\n  \"rows\": [\n    {\n      \"comment\": \"an item named baz\",\n      \"id\": \"baz\",\n      \"animal\": \"dog\"\n    }\n  ]\n}</pre> <p>Or, to find all of the computers running on the Microsoft Windows platform that are associated with a role named <code class=\"docutils literal\">jenkins</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'platform:windows AND roles:jenkins'</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">2 items found\n\nNode Name:   windows-server-2008r2.domain.com\nEnvironment: _default\nFQDN:        windows-server-2008r2\nIP:          0000::0000:0000:0000:0000\nRun List:    role[jenkins-windows]\nRoles:       jenkins-windows, jenkins\nRecipes:     jenkins-client::windows, jenkins::node_windows\nPlatform:    windows 6.1.7601\nTags:\n\nNode Name:   123-windows-2008r2-amd64-builder\nEnvironment: _default\nFQDN:        ABC-1234567890AB\nIP:          123.45.6.78\nRun List:    role[123-windows-2008r2-amd64-builder]\nRoles:       123-windows-2008r2-amd64-builder, jenkins\nRecipes:     jenkins::node_windows, git_windows\nPlatform:    windows 6.1.7601\nTags:</pre>   <h4 id=\"not\">NOT</h4> <p>To negate search results using the <code class=\"docutils literal\">NOT</code> boolean operator, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search sample \"(NOT id:foo)\"</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">{\n  \"total\": 4,\n  \"start\": 0,\n  \"rows\": [\n    {\n      \"comment\": \"an item named bar\",\n      \"id\": \"bar\",\n      \"animal\": \"cat\"\n    },\n    {\n      \"comment\": \"an item named baz\",\n      \"id\": \"baz\"\n      \"animal\": \"dog\"\n    },\n    {\n      \"comment\": \"an item named abc\",\n      \"id\": \"abc\",\n      \"animal\": \"unicorn\"\n    },\n    {\n      \"comment\": \"an item named qux\",\n      \"id\": \"qux\",\n      \"animal\", \"penguin\"\n    }\n  ]\n}</pre>   <h4 id=\"or\">OR</h4> <p>To join queries using the <code class=\"docutils literal\">OR</code> boolean operator, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search sample \"id:foo OR id:abc\"</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">{\n  \"total\": 2,\n  \"start\": 0,\n  \"rows\": [\n    {\n      \"comment\": \"an item named foo\",\n      \"id\": \"foo\",\n      \"animal\": \"pony\"\n    },\n    {\n      \"comment\": \"an item named abc\",\n      \"id\": \"abc\",\n      \"animal\": \"unicorn\"\n    }\n  ]\n}</pre>    <h3 id=\"special-characters\">Special Characters</h3> <p>A special character can be used to fine-tune a search query and to increase the accuracy of the search results. The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (<code class=\"docutils literal\">\\</code>):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">+  -  &amp;&amp;  | |  !  ( )  { }  [ ]  ^  \"  ~  *  ?  :  \\</pre> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">\\(1\\+1\\)\\:2</pre>    <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a ATTR</code>, <code class=\"docutils literal\">--attribute ATTR</code>\n</dt> <dd>The attribute (or attributes) to show.</dd> <dt>\n<code class=\"docutils literal\">-b ROW</code>, <code class=\"docutils literal\">--start ROW</code>\n</dt> <dd>The row at which return results begin.</dd> <dt>\n<code class=\"docutils literal\">-f FILTER</code>, <code class=\"docutils literal\">--filter-result FILTER</code>\n</dt> <dd>\n<p class=\"first\">Use to filter the search output based on the pattern that matches the specified <code class=\"docutils literal\">FILTER</code>. Only attributes in the <code class=\"docutils literal\">FILTER</code> will be returned. For example: <code class=\"docutils literal\">\\\"ServerName=name, Kernel=kernel.version\\</code>.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Prior to chef-client 12.0, this functionality was available from the <code class=\"docutils literal\">partial_search</code> cookbook and was referred to as “partial search”.</p> </div> </dd> <dt>\n<code class=\"docutils literal\">-i</code>, <code class=\"docutils literal\">--id-only</code>\n</dt> <dd>Show only matching object IDs.</dd> <dt><code class=\"docutils literal\">INDEX</code></dt> <dd>The name of the index to be queried: <code class=\"docutils literal\">client</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">node</code>, <code class=\"docutils literal\">role</code>, or <code class=\"docutils literal\">DATA_BAG_NAME</code>. Default index: <code class=\"docutils literal\">node</code>.</dd> <dt>\n<code class=\"docutils literal\">-l</code>, <code class=\"docutils literal\">--long</code>\n</dt> <dd>Display all attributes in the output and show the output as JSON.</dd> <dt>\n<code class=\"docutils literal\">-m</code>, <code class=\"docutils literal\">--medium</code>\n</dt> <dd>Display normal attributes in the output and to show the output as JSON.</dd> <dt>\n<code class=\"docutils literal\">-o SORT</code>, <code class=\"docutils literal\">--sort SORT</code>\n</dt> <dd>The order in which search results are to be sorted.</dd> <dt>\n<code class=\"docutils literal\">-q SEARCH_QUERY</code>, <code class=\"docutils literal\">--query SEARCH_QUERY</code>\n</dt> <dd>Protect search queries that start with a hyphen (-). A <code class=\"docutils literal\">-q</code> query may be specified as an argument or an option, but not both.</dd> <dt>\n<code class=\"docutils literal\">-r</code>, <code class=\"docutils literal\">--run-list</code>\n</dt> <dd>Show only the run-list.</dd> <dt>\n<code class=\"docutils literal\">-R INT</code>, <code class=\"docutils literal\">--rows INT</code>\n</dt> <dd>The number of rows to be returned.</dd> <dt><code class=\"docutils literal\">SEARCH_QUERY</code></dt> <dd>The search query used to identify a list of items on a Chef server. This option uses the same syntax as the <code class=\"docutils literal\">search</code> subcommand.</dd> </dl>   <h2 id=\"id1\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Search by platform ID</strong></p> <p>To search for the IDs of all nodes running on the Amazon EC2 platform, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'ec2:*' -i</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">4 items found\n\nip-0A7CA19F.ec2.internal\n\nip-0A58CF8E.ec2.internal\n\nip-0A58E134.ec2.internal\n\nip-0A7CFFD5.ec2.internal</pre> <p><strong>Search by instance type</strong></p> <p>To search for the instance type (flavor) of all nodes running on the Amazon EC2 platform, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'ec2:*' -a ec2.instance_type</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">4 items found\n\nec2.instance_type:  m1.large\nid:                 ip-0A7CA19F.ec2.internal\n\nec2.instance_type:  m1.large\nid:                 ip-0A58CF8E.ec2.internal\n\nec2.instance_type:  m1.large\nid:                 ip-0A58E134.ec2.internal\n\nec2.instance_type:  m1.large\nid:                 ip-0A7CFFD5.ec2.internal</pre> <p><strong>Search by recipe</strong></p> <p>To search for recipes that are used by a node, use the <code class=\"docutils literal\">recipes</code> attribute to search for the recipe names, enter something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'recipes:recipe_name'</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node '*:*' -a recipes | grep 'recipe_name'</pre> <p><strong>Search by cookbook, then recipe</strong></p> <p>To search for cookbooks on a node, use the <code class=\"docutils literal\">recipes</code> attribute followed by the <code class=\"docutils literal\">cookbook::recipe</code> pattern, escaping both of the <code class=\"docutils literal\">:</code> characters. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'recipes:cookbook_name\\:\\:recipe_name'</pre> <p><strong>Search by node</strong></p> <p>To search for all nodes running Ubuntu, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'platform:ubuntu'</pre> <p><strong>Search by node and environment</strong></p> <p>To search for all nodes running CentOS in the production environment, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node 'chef_environment:production AND platform:centos'</pre> <p><strong>Search for nested attributes</strong></p> <p>To find a nested attribute, use a pattern similar to the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node &lt;query_to_run&gt; -a &lt;main_attribute&gt;.&lt;nested_attribute&gt;</pre> <p><strong>Search for multiple attributes</strong></p> <p>To build a search query to use more than one attribute, use an underscore (<code class=\"docutils literal\">_</code>) to separate each attribute. For example, the following query will search for all nodes running a specific version of Ruby:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node \"languages_ruby_version:1.9.3\"</pre> <p><strong>Search for nested attributes using a search query</strong></p> <p>To build a search query that can find a nested attribute:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node name:&lt;node_name&gt; -a kernel.machine</pre> <p><strong>Use a test query</strong></p> <p>To test a search query that will be used in a <code class=\"docutils literal\">knife ssh</code> subcommand:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife search node \"role:web NOT name:web03\"</pre> <p>where the query in the previous example will search all servers that have the <code class=\"docutils literal\">web</code> role, but not on the server named <code class=\"docutils literal\">web03</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_search.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_search.html</a>\n  </p>\n</div>\n","12-9/knife_status":"<h1 id=\"knife-status\">knife status</h1> <p>Use the <code class=\"docutils literal\">knife status</code> subcommand to display a brief summary of the nodes on a Chef server, including the time of the most recent successful chef-client run.</p>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife status (options)</pre>   <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">QUERY</code></dt> <dd>The search query used to identify a list of items on a Chef server. This option uses the same syntax as the <code class=\"docutils literal\">search</code> subcommand.</dd> <dt>\n<code class=\"docutils literal\">-H</code>, <code class=\"docutils literal\">--hide-healthy</code>\n</dt> <dd>Hide nodes on which a chef-client run has occurred within the previous hour.</dd> <dt>\n<code class=\"docutils literal\">-l</code>, <code class=\"docutils literal\">--long</code>\n</dt> <dd>Display all attributes in the output and show the output as JSON.</dd> <dt>\n<code class=\"docutils literal\">-m</code>, <code class=\"docutils literal\">--medium</code>\n</dt> <dd>Display normal attributes in the output and to show the output as JSON.</dd> <dt>\n<code class=\"docutils literal\">-r RUN_LIST</code>, <code class=\"docutils literal\">--run-list RUN_LIST</code>\n</dt> <dd>A comma-separated list of roles and/or recipes to be applied.</dd> <dt>\n<code class=\"docutils literal\">-s</code>, <code class=\"docutils literal\">--sort-reverse</code>\n</dt> <dd>Sort a list by last run time, descending.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>View status, include run-lists</strong></p> <p>To include run-lists in the status, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife status --run-list</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">20 hours ago, dev-vm.chisamore.com, ubuntu 10.04, dev-vm.chisamore.com, 10.66.44.126, role[lb].\n3 hours ago, i-225f954f, ubuntu 10.04, ec2-67-202-63-102.compute-1.amazonaws.com, 67.202.63.102, role[web].\n3 hours ago, i-a45298c9, ubuntu 10.04, ec2-174-129-127-206.compute-1.amazonaws.com, 174.129.127.206, role[web].\n3 hours ago, i-5272a43f, ubuntu 10.04, ec2-184-73-9-250.compute-1.amazonaws.com, 184.73.9.250, role[web].\n3 hours ago, i-226ca64f, ubuntu 10.04, ec2-75-101-240-230.compute-1.amazonaws.com, 75.101.240.230, role[web].\n3 hours ago, i-f65c969b, ubuntu 10.04, ec2-184-73-60-141.compute-1.amazonaws.com, 184.73.60.141, role[web].</pre> <p><strong>View status using a date range</strong></p> <p>To show the status for nodes on which the chef-client did not run successfully within the past hour, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife status --hide-healthy</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">1 hour ago, i-256f884f, ubuntu 12.04, ec2-67-202-63-102.compute-1.amazonaws.com, 67.202.63.102, role[web].\n1 hour ago, i-a47823c9, ubuntu 10.04, ec2-174-129-127-206.compute-1.amazonaws.com, 184.129.143.111, role[lb].</pre> <p><strong>View status using a query</strong></p> <p>To show the status of a subset of nodes that are returned by a specific query, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife status \"role:web\" --run-list</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">3 hours ago, i-225f954f, ubuntu 10.04, ec2-67-202-63-102.compute-1.amazonaws.com, 67.202.63.102, role[web].\n3 hours ago, i-a45298c9, ubuntu 10.04, ec2-174-129-127-206.compute-1.amazonaws.com, 174.129.127.206, role[web].\n3 hours ago, i-5272a43f, ubuntu 10.04, ec2-184-73-9-250.compute-1.amazonaws.com, 184.73.9.250, role[web].\n3 hours ago, i-226ca64f, ubuntu 10.04, ec2-75-101-240-230.compute-1.amazonaws.com, 75.101.240.230, role[web].\n3 hours ago, i-f65c969b, ubuntu 10.04, ec2-184-73-60-141.compute-1.amazonaws.com, 184.73.60.141, role[web].</pre> <p><strong>View status for all nodes</strong></p> <p>To view the status of all nodes in the organization, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife status</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">20 hours ago, dev-vm.chisamore.com, ubuntu 10.04, dev-vm.chisamore.com, 10.66.44.126\n3 hours ago, i-225f954f, ubuntu 10.04, ec2-67-202-63-102.compute-1.amazonaws.com, 67.202.63.102\n3 hours ago, i-a45298c9, ubuntu 10.04, ec2-174-129-127-206.compute-1.amazonaws.com, 174.129.127.206\n3 hours ago, i-5272a43f, ubuntu 10.04, ec2-184-73-9-250.compute-1.amazonaws.com, 184.73.9.250\n3 hours ago, i-226ca64f, ubuntu 10.04, ec2-75-101-240-230.compute-1.amazonaws.com, 75.101.240.230\n3 hours ago, i-f65c969b, ubuntu 10.04, ec2-184-73-60-141.compute-1.amazonaws.com, 184.73.60.141</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_status.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_status.html</a>\n  </p>\n</div>\n","12-9/knife_tag":"<h1 id=\"knife-tag\">knife tag</h1> <p>A tag is a custom description that is applied to a node. A tag, once applied, can be helpful when managing nodes using knife or when building recipes by providing alternate methods of grouping similar types of information.</p> <p>The <code class=\"docutils literal\">knife tag</code> subcommand is used to apply tags to nodes on a Chef server.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div>  <h2 id=\"create\">create</h2> <p>Use the <code class=\"docutils literal\">create</code> argument to add one or more tags to a node.</p>  <h3 id=\"syntax\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife tag create NODE_NAME [TAG...]</pre>   <h3 id=\"options\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"examples\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Create tags</strong></p> <p>To create tags named <code class=\"docutils literal\">seattle</code>, <code class=\"docutils literal\">portland</code>, and <code class=\"docutils literal\">vancouver</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife tag create node seattle portland vancouver</pre>    <h2 id=\"delete\">delete</h2> <p>Use the <code class=\"docutils literal\">delete</code> argument to delete one or more tags from a node.</p>  <h3 id=\"id1\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife tag delete NODE_NAME [TAG...]</pre>   <h3 id=\"id2\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"id3\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Delete tags</strong></p> <p>To delete tags named <code class=\"docutils literal\">denver</code> and <code class=\"docutils literal\">phoenix</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife tag delete node denver phoenix</pre> <p>Type <code class=\"docutils literal\">Y</code> to confirm a deletion.</p>    <h2 id=\"list\">list</h2> <p>Use the <code class=\"docutils literal\">list</code> argument to list all of the tags that have been applied to a node.</p>  <h3 id=\"id4\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife tag list [NODE_NAME...]</pre>   <h3 id=\"id5\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"id6\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>View a list of tags</strong></p> <p>To view the tags for a node named <code class=\"docutils literal\">devops_prod1</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife tag list devops_prod1</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_tag.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_tag.html</a>\n  </p>\n</div>\n","12-9/knife_upload":"<h1 id=\"knife-upload\">knife upload</h1> <p>Use the <code class=\"docutils literal\">knife upload</code> subcommand to upload data to the Chef server from the current working directory in the chef-repo. The following types of data may be uploaded with this subcommand:</p> <ul class=\"simple\"> <li>Cookbooks</li> <li>Data bags</li> <li>Roles stored as JSON data</li> <li>Environments stored as JSON data</li> </ul> <p>(Roles and environments stored as Ruby data will not be uploaded.) This subcommand is often used in conjunction with <code class=\"docutils literal\">knife diff</code>, which can be used to see exactly what changes will be uploaded, and then <code class=\"docutils literal\">knife download</code>, which does the opposite of <code class=\"docutils literal\">knife upload</code>.</p>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife upload [PATTERN...] (options)</pre>   <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--chef-repo-path PATH</code></dt> <dd>The path to the chef-repo. This setting will override the default path to the chef-repo. Default: same value as specified by <code class=\"docutils literal\">chef_repo_path</code> in client.rb.</dd> <dt><code class=\"docutils literal\">--concurrency</code></dt> <dd>The number of allowed concurrent connections. Default: <code class=\"docutils literal\">10</code>.</dd> <dt><code class=\"docutils literal\">--[no-]diff</code></dt> <dd>Upload only new and modified files. Set to <code class=\"docutils literal\">false</code> to upload all files. Default: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">--[no-]force</code></dt> <dd>Use <code class=\"docutils literal\">--force</code> to upload roles, cookbooks, etc. even if the file in the directory is identical (by default, no <code class=\"docutils literal\">POST</code> or <code class=\"docutils literal\">PUT</code> is performed unless an actual change would be made). Default: <code class=\"docutils literal\">--no-force</code>.</dd> <dt><code class=\"docutils literal\">--[no-]freeze</code></dt> <dd>Require changes to a cookbook be included as a new version. Only the <code class=\"docutils literal\">--force</code> option can override this setting. Default: <code class=\"docutils literal\">false</code>.</dd> <dt>\n<code class=\"docutils literal\">-n</code>, <code class=\"docutils literal\">--dry-run</code>\n</dt> <dd>Take no action and only print out results. Default: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">--[no-]purge</code></dt> <dd>Use <code class=\"docutils literal\">--purge</code> to delete roles, cookbooks, etc. from the Chef server if their corresponding files do not exist in the chef-repo. By default, such objects are left alone and NOT purged. Default: <code class=\"docutils literal\">--no-purge</code>.</dd> <dt><code class=\"docutils literal\">--[no-]recurse</code></dt> <dd>Use <code class=\"docutils literal\">--no-recurse</code> to disable uploading a directory recursively. Default: <code class=\"docutils literal\">--recurse</code>.</dd> <dt><code class=\"docutils literal\">--repo-mode MODE</code></dt> <dd>The layout of the local chef-repo. Possible values: <code class=\"docutils literal\">static</code>, <code class=\"docutils literal\">everything</code>, or <code class=\"docutils literal\">hosted_everything</code>. Use <code class=\"docutils literal\">static</code> for just roles, environments, cookbooks, and data bags. By default, <code class=\"docutils literal\">everything</code> and <code class=\"docutils literal\">hosted_everything</code> are dynamically selected depending on the server type. Default: <code class=\"docutils literal\">everything</code> / <code class=\"docutils literal\">hosted_everything</code>.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Upload the entire chef-repo</strong></p> <p>Browse to the top level of the chef-repo and enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife upload .</pre> <p>or from anywhere in the chef-repo, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife upload /</pre> <p>to upload all cookbooks and data bags, plus all roles and enviroments that are stored as JSON data. (Roles and environments stored as Ruby data will not be uploaded.)</p> <p><strong>Upload the /cookbooks directory</strong></p> <p>Browse to the top level of the chef-repo and enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife upload cookbooks</pre> <p>or from anywhere in the chef-repo, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife upload /cookbooks</pre> <p><strong>Upload the /environments directory</strong></p> <p>Browse to the top level of the chef-repo and enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife upload environments</pre> <p>or from anywhere in the chef-repo, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife upload /environments</pre> <p>to upload all enviroments that are stored as JSON data. (Environments stored as Ruby data will not be uploaded.)</p> <p><strong>Upload a single environment</strong></p> <p>Browse to the top level of the chef-repo and enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife upload environments/production.json</pre> <p>or from the <code class=\"docutils literal\">environments/</code> directory, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife upload production.json</pre> <p><strong>Upload the /roles directory</strong></p> <p>Browse to the top level of the chef-repo and enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife upload roles</pre> <p>or from anywhere in the chef-repo, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife upload /roles</pre> <p>to upload all roles that are stored as JSON data. (Roles stored as Ruby data will not be uploaded.)</p> <p><strong>Upload cookbooks and roles</strong></p> <p>Browse to the top level of the chef-repo and enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife upload cookbooks/apache\\* roles/webserver.json</pre> <p><strong>Use output of knife deps to pass command to knife upload</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife upload `knife deps nodes/*.json`</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_upload.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_upload.html</a>\n  </p>\n</div>\n","12-9/ctl_chef_apply":"<h1 id=\"chef-apply-executable\">chef-apply (executable)</h1> <p>chef-apply is an executable program that runs a single recipe from the command line:</p> <ul class=\"simple\"> <li>Is part of the Chef development kit</li> <li>A great way to explore resources</li> <li>Is <strong>NOT</strong> how Chef is run in production</li> </ul>  <h2 id=\"options\">Options</h2> <p>This command has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-apply name_of_recipe.rb</pre> <p>This tool has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-e RECIPE_TEXT</code>, <code class=\"docutils literal\">--execute RECIPE_TEXT</code>\n</dt> <dd>Execute a resource using a string.</dd> <dt>\n<code class=\"docutils literal\">-l LEVEL</code>, <code class=\"docutils literal\">--log_level LEVEL</code>\n</dt> <dd>The level of logging to be stored in a log file.</dd> <dt>\n<code class=\"docutils literal\">-s</code>, <code class=\"docutils literal\">--stdin</code>\n</dt> <dd>Execute a resource using standard input.</dd> <dt>\n<code class=\"docutils literal\">-v</code>, <code class=\"docutils literal\">--version</code>\n</dt> <dd>The version of the chef-client.</dd> <dt>\n<code class=\"docutils literal\">-W</code>, <code class=\"docutils literal\">--why-run</code>\n</dt> <dd>Run the executable in why-run mode, which is a type of chef-client run that does everything except modify the system. Use why-run mode to understand why the chef-client makes the decisions that it makes and to learn more about the current and proposed state of the system.</dd> <dt>\n<code class=\"docutils literal\">-h</code>, <code class=\"docutils literal\">--help</code>\n</dt> <dd>Show help for the command.</dd> </dl>   <h2 id=\"examples\">Examples</h2> <p><strong>Run a recipe</strong></p> <p>Run a recipe named <code class=\"docutils literal\">machinations.rb</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-apply machinations.rb</pre> <p><strong>Install Emacs</strong></p> <p>Run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-apply -e \"package 'emacs'\"</pre> <p>Returns:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Recipe: (chef-apply cookbook)::(chef-apply recipe)\n  * package[emacs] action install\n    - install version 23.1-25.el6 of package emacs</pre> <p><strong>Install nano</strong></p> <p>Run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-apply -e \"package 'nano'\"</pre> <p>Returns:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Recipe: (chef-apply cookbook)::(chef-apply recipe)\n  * package[nano] action install\n    - install version 2.0.9-7.el6 of package nano</pre> <p><strong>Install vim</strong></p> <p>Run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-apply -e \"package 'vim'\"</pre> <p>Returns:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Recipe: (chef-apply cookbook)::(chef-apply recipe)\n  * package[vim] action install\n    - install version 7.2.411-1.8.el6 of package vim-enhanced</pre> <p><strong>Rerun a recipe</strong></p> <p>Run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-apply -e \"package 'vim'\"</pre> <p>Returns:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Recipe: (chef-apply cookbook)::(chef-apply recipe)\n  * package[vim] action install (up to date)</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/ctl_chef_apply.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/ctl_chef_apply.html</a>\n  </p>\n</div>\n","12-9/knife_user":"<h1 id=\"knife-user\">knife user</h1> <p>The <code class=\"docutils literal\">knife user</code> subcommand is used to manage the list of users and their associated RSA public key-pairs.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>In versions of the chef-client prior to version 12.0, this subcommand ONLY works when run against the open source Chef server; it does not run against Enterprise Chef (including hosted Enterprise Chef), or Private Chef.</p> <p>Starting with Chef server 12.0, this functionality is built into the <a class=\"reference external\" href=\"https://docs.chef.io/ctl_chef_server.html\">chef-server-ctl</a> command-line tool as part of the following arguments:</p> <ul class=\"simple\"> <li><a class=\"reference external\" href=\"https://docs.chef.io/ctl_chef_server.html#user-create\">user-create</a></li> <li><a class=\"reference external\" href=\"https://docs.chef.io/ctl_chef_server.html#user-delete\">user-delete</a></li> <li><a class=\"reference external\" href=\"https://docs.chef.io/ctl_chef_server.html#user-edit\">user-edit</a></li> <li><a class=\"reference external\" href=\"https://docs.chef.io/ctl_chef_server.html#user-list\">user-list</a></li> <li><a class=\"reference external\" href=\"https://docs.chef.io/ctl_chef_server.html#user-show\">user-show</a></li> </ul> <p>Starting with chef-client version 12.4.1, the <code class=\"docutils literal\">knife user</code> functionality is restored for the following arguments: <code class=\"docutils literal\">user-edit</code>, <code class=\"docutils literal\">user-list</code>, and <code class=\"docutils literal\">user-show</code> for Chef server version 12.0 (and higher).</p> <p class=\"last\">Starting with Chef server 12.4.1, <a class=\"reference external\" href=\"https://docs.chef.io/ctl_chef_server.html#server-admins\">users who are members of the server-admins group</a> may use the <code class=\"docutils literal\">user-create</code>, <code class=\"docutils literal\">user-delete</code>, <code class=\"docutils literal\">user-edit</code>, <code class=\"docutils literal\">user-list</code>, and <code class=\"docutils literal\">user-show</code> arguements to manage user accounts on the Chef server via the <code class=\"docutils literal\">knife user</code> subcommand.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div>  <h2 id=\"create\">create</h2> <p>Use the <code class=\"docutils literal\">create</code> argument to create a user. This process will generate an RSA key pair for the named user. The public key will be stored on the Chef server and the private key will be displayed on <code class=\"docutils literal\">STDOUT</code> or written to a named file.</p> <ul class=\"simple\"> <li>For the user, the private key should be copied to the system as <code class=\"docutils literal\">/etc/chef/client.pem</code>.</li> <li>For knife, the private key is typically copied to <code class=\"docutils literal\">~/.chef/client_name.pem</code> and referenced in the knife.rb configuration file.</li> </ul>  <h3 id=\"syntax\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user create USER_NAME (options)</pre>   <h3 id=\"options\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--admin</code>\n</dt> <dd>Create a client as an admin client. This is required for any user to access Open Source Chef as an administrator. This option only works when used with the open source Chef server and will have no effect when used with Enterprise Chef or Chef server 12.x.</dd> <dt>\n<code class=\"docutils literal\">-f FILE_NAME</code>, <code class=\"docutils literal\">--file FILE_NAME</code>\n</dt> <dd>Save a private key to the specified file name.</dd> <dt>\n<code class=\"docutils literal\">-p PASSWORD</code>, <code class=\"docutils literal\">--password PASSWORD</code>\n</dt> <dd>The user password.</dd> <dt><code class=\"docutils literal\">--user-key FILE_NAME</code></dt> <dd>Save a public key to the specified file name.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"examples\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Create a user</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user create \"Radio Birdman\" -f /keys/user_name</pre>    <h2 id=\"delete\">delete</h2> <p>Use the <code class=\"docutils literal\">delete</code> argument to delete a registered user.</p>  <h3 id=\"id1\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user delete USER_NAME</pre>   <h3 id=\"id2\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"id3\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Delete a user</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user delete \"Steve Danno\"</pre>    <h2 id=\"edit\">edit</h2> <p>Use the <code class=\"docutils literal\">edit</code> argument to edit the details of a user. When this argument is run, knife will open $EDITOR. When finished, knife will update the Chef server with those changes.</p>  <h3 id=\"id4\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user edit USER_NAME</pre>   <h3 id=\"id5\">Options</h3> <p>This command does not have any specific options.</p>   <h3 id=\"id6\">Examples</h3> <p>None.</p>    <h2 id=\"key-create\">key create</h2> <p>Use the <code class=\"docutils literal\">key create</code> argument to create a public key.</p>  <h3 id=\"id7\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user key create USER_NAME (options)</pre>   <h3 id=\"id8\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-e DATE</code>, <code class=\"docutils literal\">--expiration-date DATE</code>\n</dt> <dd>The expiration date for the public key, specified as an ISO 8601 formatted string: <code class=\"docutils literal\">YYYY-MM-DDTHH:MM:SSZ</code>. If this option is not specified, the public key will not have an expiration date. For example: <code class=\"docutils literal\">2013-12-24T21:00:00Z</code>.</dd> <dt>\n<code class=\"docutils literal\">-f FILE</code>, <code class=\"docutils literal\">--file FILE</code>\n</dt> <dd>Save a public key to the specified file name. If the <code class=\"docutils literal\">--key-name</code> and <code class=\"docutils literal\">public-key</code> options are not specified the Chef server will generate a private key.</dd> <dt>\n<code class=\"docutils literal\">-k NAME</code>, <code class=\"docutils literal\">--key-name NAME</code>\n</dt> <dd>The name of the public key.</dd> <dt>\n<code class=\"docutils literal\">-p FILE_NAME</code>, <code class=\"docutils literal\">--public-key FILE_NAME</code>\n</dt> <dd>The path to a file that contains the public key. If this option is not specified, and only if <code class=\"docutils literal\">--key-name</code> is specified, the Chef server will generate a public/private key pair.</dd> </dl>   <h3 id=\"id9\">Examples</h3> <p>None.</p>    <h2 id=\"key-delete\">key delete</h2> <p>Use the <code class=\"docutils literal\">key delete</code> argument to delete a public key.</p>  <h3 id=\"id10\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user key delete USER_NAME KEY_NAME</pre>   <h3 id=\"id11\">Examples</h3> <p>None.</p>    <h2 id=\"key-edit\">key edit</h2> <p>Use the <code class=\"docutils literal\">key edit</code> argument to modify or rename a public key.</p>  <h3 id=\"id12\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user key edit USER_NAME KEY_NAME (options)</pre>   <h3 id=\"id13\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-c</code>, <code class=\"docutils literal\">--create-key</code>\n</dt> <dd>Generate a new public/private key pair and replace an existing public key with the newly-generated public key. To replace the public key with an existing public key, use <code class=\"docutils literal\">--public-key</code> instead.</dd> <dt>\n<code class=\"docutils literal\">-e DATE</code>, <code class=\"docutils literal\">--expiration-date DATE</code>\n</dt> <dd>The expiration date for the public key, specified as an ISO 8601 formatted string: <code class=\"docutils literal\">YYYY-MM-DDTHH:MM:SSZ</code>. If this option is not specified, the public key will not have an expiration date. For example: <code class=\"docutils literal\">2013-12-24T21:00:00Z</code>.</dd> <dt>\n<code class=\"docutils literal\">-f FILE</code>, <code class=\"docutils literal\">--file FILE</code>\n</dt> <dd>Save a public key to the specified file name. If the <code class=\"docutils literal\">--key-name</code> and <code class=\"docutils literal\">public-key</code> options are not specified the Chef server will generate a private key.</dd> <dt>\n<code class=\"docutils literal\">-k NAME</code>, <code class=\"docutils literal\">--key-name NAME</code>\n</dt> <dd>The name of the public key.</dd> <dt>\n<code class=\"docutils literal\">-p FILE_NAME</code>, <code class=\"docutils literal\">--public-key FILE_NAME</code>\n</dt> <dd>The path to a file that contains the public key. If this option is not specified, and only if <code class=\"docutils literal\">--key-name</code> is specified, the Chef server will generate a public/private key pair.</dd> </dl>   <h3 id=\"id14\">Examples</h3> <p>None.</p>    <h2 id=\"key-list\">key list</h2> <p>Use the <code class=\"docutils literal\">key list</code> argument to view a list of public keys for the named user.</p>  <h3 id=\"id15\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user key list USER_NAME (options)</pre>   <h3 id=\"id16\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-e</code>, <code class=\"docutils literal\">--only-expired</code>\n</dt> <dd>Show a list of public keys that have expired.</dd> <dt>\n<code class=\"docutils literal\">-n</code>, <code class=\"docutils literal\">--only-non-expired</code>\n</dt> <dd>Show a list of public keys that have not expired.</dd> <dt>\n<code class=\"docutils literal\">-w</code>, <code class=\"docutils literal\">--with-details</code>\n</dt> <dd>Show a list of public keys, including URIs and expiration status.</dd> </dl>   <h3 id=\"id17\">Examples</h3> <p>None.</p>    <h2 id=\"key-show\">key show</h2> <p>Use the <code class=\"docutils literal\">key show</code> argument to view details for a specific public key.</p>  <h3 id=\"id18\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user key show USER_NAME KEY_NAME</pre>   <h3 id=\"id19\">Examples</h3> <p>None.</p>    <h2 id=\"list\">list</h2> <p>Use the <code class=\"docutils literal\">list</code> argument to view a list of registered users.</p>  <h3 id=\"id20\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user list (options)</pre>   <h3 id=\"id21\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-w</code>, <code class=\"docutils literal\">--with-uri</code>\n</dt> <dd>Show the corresponding URIs.</dd> </dl>   <h3 id=\"id22\">Examples</h3> <p>None.</p>    <h2 id=\"reregister\">reregister</h2> <p>Use the <code class=\"docutils literal\">reregister</code> argument to regenerate an RSA key pair for a user. The public key will be stored on the Chef server and the private key will be displayed on <code class=\"docutils literal\">STDOUT</code> or written to a named file.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Running this argument will invalidate the previous RSA key pair, making it unusable during authentication to the Chef server.</p> </div>  <h3 id=\"id23\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user reregister USER_NAME (options)</pre>   <h3 id=\"id24\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-f FILE_NAME</code>, <code class=\"docutils literal\">--file FILE_NAME</code>\n</dt> <dd>Save a private key to the specified file name.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h3 id=\"id25\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Regenerate the RSA key-pair</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user reregister \"Robert Younger\"</pre>    <h2 id=\"show\">show</h2> <p>Use the <code class=\"docutils literal\">show</code> argument to show the details of a user.</p>  <h3 id=\"id26\">Syntax</h3> <p>This argument has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user show USER_NAME (options)</pre>   <h3 id=\"id27\">Options</h3> <p>This argument has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a ATTR</code>, <code class=\"docutils literal\">--attribute ATTR</code>\n</dt> <dd>The attribute (or attributes) to show.</dd> </dl>   <h3 id=\"id28\">Examples</h3> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Show user data</strong></p> <p>To view a user named <code class=\"docutils literal\">Dennis Teck</code>, enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user show \"Dennis Teck\"</pre> <p>to return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">chef_type:   user\njson_class:  Chef::User\nname:        Dennis Teck\npublic_key:</pre> <p><strong>Show user data as JSON</strong></p> <p>To view information in JSON format, use the <code class=\"docutils literal\">-F</code> common option as part of the command like this:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife user show \"Dennis Teck\" -F json</pre> <p>(Other formats available include <code class=\"docutils literal\">text</code>, <code class=\"docutils literal\">yaml</code>, and <code class=\"docutils literal\">pp</code>, e.g. <code class=\"docutils literal\">-F yaml</code> for YAML.)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_user.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_user.html</a>\n  </p>\n</div>\n","12-9/knife_xargs":"<h1 id=\"knife-xargs\">knife xargs</h1> <p>Use the <code class=\"docutils literal\">knife xargs</code> subcommand to take patterns from standard input, download as JSON, run a command against the downloaded JSON, and then upload any changes.</p>  <h2 id=\"syntax\">Syntax</h2> <p>This subcommand has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife xargs [PATTERN...] (options)</pre>   <h2 id=\"options\">Options</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Review the list of <a class=\"reference internal\" href=\"knife_common_options\">common options</a> available to this (and all) knife subcommands and plugins.</p> </div> <p>This subcommand has the following options:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">-0</code></dt> <dd>Show a <code class=\"docutils literal\">NULL</code> character (<code class=\"docutils literal\">\\0</code>) instead of white space as the separator. Default: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">--chef-repo-path PATH</code></dt> <dd>The path to the chef-repo. This setting will override the default path to the chef-repo. Default: same value as specified by <code class=\"docutils literal\">chef_repo_path</code> in client.rb.</dd> <dt><code class=\"docutils literal\">--concurrency</code></dt> <dd>The number of allowed concurrent connections. Default: <code class=\"docutils literal\">10</code>.</dd> <dt><code class=\"docutils literal\">--[no-]diff</code></dt> <dd>Show a diff when a file changes. Default: <code class=\"docutils literal\">--diff</code>.</dd> <dt><code class=\"docutils literal\">--dry-run</code></dt> <dd>Prevent changes from being uploaded to the Chef server. Default: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">--[no-]force</code></dt> <dd>Force the upload of files even if they haven’t been changed. Default: <code class=\"docutils literal\">--no-force</code>.</dd> <dt>\n<code class=\"docutils literal\">-I REPLACE_STRING</code>, <code class=\"docutils literal\">--replace REPLACE_STRING</code>\n</dt> <dd>Define a string that is to be used to replace all occurrences of a file name. Default: <code class=\"docutils literal\">nil</code>.</dd> <dt>\n<code class=\"docutils literal\">-J REPLACE_STRING</code>, <code class=\"docutils literal\">--replace-first REPLACE_STRING</code>\n</dt> <dd>Define a string that is to be used to replace the first occurrence of a file name. Default: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">--local</code></dt> <dd>Build or execute a command line against a local file. Set to <code class=\"docutils literal\">false</code> to build or execute against a remote file. Default: <code class=\"docutils literal\">false</code>.</dd> <dt>\n<code class=\"docutils literal\">-n MAX_ARGS</code>, <code class=\"docutils literal\">--max-args MAX_ARGS</code>\n</dt> <dd>The maximum number of arguments per command line. Default: <code class=\"docutils literal\">nil</code>.</dd> <dt>\n<code class=\"docutils literal\">-p [PATTERN...]</code>, <code class=\"docutils literal\">--pattern [PATTERN...]</code>\n</dt> <dd>One (or more) patterns for a command line. If this option is not specified, a list of patterns may be expected on standard input. Default: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">--repo-mode MODE</code></dt> <dd>The layout of the local chef-repo. Possible values: <code class=\"docutils literal\">static</code>, <code class=\"docutils literal\">everything</code>, or <code class=\"docutils literal\">hosted_everything</code>. Use <code class=\"docutils literal\">static</code> for just roles, environments, cookbooks, and data bags. By default, <code class=\"docutils literal\">everything</code> and <code class=\"docutils literal\">hosted_everything</code> are dynamically selected depending on the server type. Default value: <code class=\"docutils literal\">default</code>.</dd> <dt>\n<code class=\"docutils literal\">-s LENGTH</code>, <code class=\"docutils literal\">--max-chars LENGTH</code>\n</dt> <dd>The maximum size (in characters) for a command line. Default: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">-t</code></dt> <dd>Run the print command on the command line. Default: <code class=\"docutils literal\">nil</code>.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See <a class=\"reference internal\" href=\"config_rb_knife_optional_settings\">knife.rb</a> for more information about how to add certain knife options as settings in the knife.rb file.</p> </div>   <h2 id=\"examples\">Examples</h2> <p>The following examples show how to use this knife subcommand:</p> <p><strong>Find, and then replace data</strong></p> <p>The following example will go through all nodes on the server, and then replace the word <code class=\"docutils literal\">foobar</code> with <code class=\"docutils literal\">baz</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife xargs --pattern /nodes/* \"perl -i -pe 's/foobar/baz'\"</pre> <p><strong>Use output of knife list and Perl</strong></p> <p>The following examples show various ways of listing all nodes on the server, and then using Perl to replace <code class=\"docutils literal\">grantmc</code> with <code class=\"docutils literal\">gmc</code>:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife list 'nodes/*' | knife xargs \"perl -i -pe 's/grantmc/gmc'\"</pre> <p>or without quotes and the backslash escaped:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife list /nodes/\\* | knife xargs \"perl -i -pe 's/grantmc/gmc'\"</pre> <p>or by using the <code class=\"docutils literal\">--pattern</code> option:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife xargs --pattern '/nodes.*' \"perl -i -pe 's/grantmc/gmc'\"</pre> <p><strong>View security groups data</strong></p> <p>The following example shows how to display the content of all groups on the server:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife xargs --pattern '/groups/*' cat</pre> <p>and will return something like:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"4bd14db60aasdfb10f525400cdde21\",\n  \"users\": [\n    \"grantmc\"\n  ]\n}{\n  \"name\": \"62c4e268e15fasdasc525400cd944b\",\n  \"users\": [\n    \"robertf\"\n  ]\n}{\n  \"name\": \"admins\",\n  \"users\": [\n    \"grantmc\",\n    \"robertf\"\n  ]\n}{\n  \"name\": \"billing-admins\",\n  \"users\": [\n    \"dtek\"\n  ]\n}{\n  \"name\": \"clients\",\n  \"clients\": [\n    \"12345\",\n    \"67890\",\n  ]\n}{\n  \"name\": \"users\",\n  \"users\": [\n    \"grantmc\"\n    \"robertf\"\n    \"dtek\"\n  ],\n  \"groups\": [\n    \"4bd14db60aasdfb10f525400cdde21\",\n    \"62c4e268e15fasdasc525400cd944b\"\n  ]\n}</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_xargs.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_xargs.html</a>\n  </p>\n</div>\n","12-9/ctl_chef_shell":"<h1 id=\"chef-shell-executable\">chef-shell (executable)</h1> <p>chef-shell is a recipe debugging tool that allows the use of breakpoints within recipes. chef-shell runs as an Interactive Ruby (IRb) session. chef-shell supports both recipe and attribute file syntax, as well as interactive debugging features.</p> <p>The chef-shell executable is run as a command-line tool.</p>  <h2 id=\"modes\">Modes</h2> <p>chef-shell is tool that is run using an Interactive Ruby (IRb) session. chef-shell currently supports recipe and attribute file syntax, as well as interactive debugging features. chef-shell has three run modes:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Mode</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Standalone</td> <td>Default. No cookbooks are loaded, and the run-list is empty.</td> </tr> <tr class=\"row-odd\">\n<td>Solo</td> <td>chef-shell acts as a chef-solo client. It attempts to load the chef-solo configuration file and JSON attributes. If the JSON attributes set a run-list, it will be honored. Cookbooks will be loaded in the same way that chef-solo loads them. chef-solo mode is activated with the <code class=\"docutils literal\">-s</code> or <code class=\"docutils literal\">--solo</code> command line option, and JSON attributes are specified in the same way as for chef-solo, with <code class=\"docutils literal\">-j /path/to/chef-solo.json</code>.</td> </tr> <tr class=\"row-even\">\n<td>Client</td> <td>chef-shell acts as a chef-client. During startup, it reads the chef-client configuration file and contacts the Chef server to get attributes and cookbooks. The run-list will be set in the same way as normal chef-client runs. chef-client mode is activated with the <code class=\"docutils literal\">-z</code> or <code class=\"docutils literal\">--client</code> options. You can also specify the configuration file with <code class=\"docutils literal\">-c CONFIG</code> and the server URL with <code class=\"docutils literal\">-S SERVER_URL</code>.</td> </tr> </tbody> </table>   <h2 id=\"options\">Options</h2> <p>This command has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">chef-shell OPTION VALUE OPTION VALUE ...</pre> <p>This command has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-a</code>, <code class=\"docutils literal\">--standalone</code>\n</dt> <dd>Run chef-shell in standalone mode.</dd> <dt>\n<code class=\"docutils literal\">-c CONFIG</code>, <code class=\"docutils literal\">--config CONFIG</code>\n</dt> <dd>The configuration file to use.</dd> <dt>\n<code class=\"docutils literal\">-h</code>, <code class=\"docutils literal\">--help</code>\n</dt> <dd>Show help for the command.</dd> <dt>\n<code class=\"docutils literal\">-j PATH</code>, <code class=\"docutils literal\">--json-attributes PATH</code>\n</dt> <dd>\n<p class=\"first\">The path to a file that contains JSON data.</p> <p>Use this option to define a <code class=\"docutils literal\">run_list</code> object. For example, a JSON file similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">\"run_list\": [\n  \"recipe[base]\",\n  \"recipe[foo]\",\n  \"recipe[bar]\",\n  \"role[webserver]\"\n],</pre> <p>may be used by running <code class=\"docutils literal\">chef-client -j path/to/file.json</code>.</p> <p>In certain situations this option may be used to update <code class=\"docutils literal\">normal</code> attributes.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>Any other attribute type that is contained in this JSON file will be treated as a <code class=\"docutils literal\">normal</code> attribute. For example, attempting to update <code class=\"docutils literal\">override</code> attributes using the <code class=\"docutils literal\">-j</code> option:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"dev-99\",\n  \"description\": \"Install some stuff\",\n  \"override_attributes\": {\n    \"apptastic\": {\n      \"enable_apptastic\": \"false\",\n      \"apptastic_tier_name\": \"dev-99.bomb.com\"\n    }\n  }\n}</pre> <p>will result in a node object similar to:</p> <pre class=\"last highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"maybe-dev-99\",\n  \"normal\": {\n  \"name\": \"dev-99\",\n    \"description\": \"Install some stuff\",\n    \"override_attributes\": {\n      \"apptastic\": {\n        \"enable_apptastic\": \"false\",\n        \"apptastic_tier_name\": \"dev-99.bomb.com\"\n      }\n    }\n  }\n}</pre> </div> </dd> <dt>\n<code class=\"docutils literal\">-l LEVEL</code>, <code class=\"docutils literal\">--log-level LEVEL</code>\n</dt> <dd>The level of logging to be stored in a log file.</dd> <dt>\n<code class=\"docutils literal\">-s</code>, <code class=\"docutils literal\">--solo</code>\n</dt> <dd>Run chef-shell in chef-solo mode.</dd> <dt>\n<code class=\"docutils literal\">-S CHEF_SERVER_URL</code>, <code class=\"docutils literal\">--server CHEF_SERVER_URL</code>\n</dt> <dd>The URL for the Chef server.</dd> <dt>\n<code class=\"docutils literal\">-v</code>, <code class=\"docutils literal\">--version</code>\n</dt> <dd>The version of the chef-client.</dd> <dt>\n<code class=\"docutils literal\">-z</code>, <code class=\"docutils literal\">--client</code>\n</dt> <dd>Run chef-shell in chef-client mode.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/ctl_chef_shell.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/ctl_chef_shell.html</a>\n  </p>\n</div>\n","12-9/config_rb_knife":"<h1 id=\"knife-rb\">knife.rb</h1> <p>A knife.rb file is used to specify the chef-repo-specific configuration details for knife.</p> <p>A knife.rb file:</p> <ul class=\"simple\"> <li>Is loaded every time this executable is run</li> <li>Is not created by default</li> <li>Is located by default at <code class=\"docutils literal\">~/chef-repo/.chef/knife.rb</code> (UNIX and Linux platforms) or <code class=\"docutils literal\">c:\\Users\\username\\.chef</code> (Microsoft Windows platform, starting with Chef development kit version 0.7.0); use the <code class=\"docutils literal\">--config</code> option from the command line to change this location</li> <li>Will override the default configuration when a knife.rb file exists at the default path or the path specified by the <code class=\"docutils literal\">--config</code> option</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">When running Microsoft Windows, the knife.rb file is located at <code class=\"docutils literal\">%HOMEDRIVE%:%HOMEPATH%\\chef-repo\\.chef</code> (e.g. <code class=\"docutils literal\">c:\\Users\\&lt;username&gt;\\chef-repo\\.chef</code>). If this path needs to be scripted, use <code class=\"docutils literal\">%USERPROFILE%\\chef-repo\\.chef</code>.</p> </div>  <h2 id=\"settings\">Settings</h2> <p>This configuration file has the following settings:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">bootstrap_template</code></dt> <dd>The path to a template file to be used during a bootstrap operation.</dd> <dt><code class=\"docutils literal\">chef_server_url</code></dt> <dd>\n<p class=\"first\">The URL for the Chef server. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">chef_server_url 'http://localhost:4000/organizations/ORG_NAME'</pre> </dd> <dt><code class=\"docutils literal\">chef_zero.enabled</code></dt> <dd>\n<p class=\"first\">Enable chef-zero. This setting requires <code class=\"docutils literal\">local_mode</code> to be set to <code class=\"docutils literal\">true</code>. Default value: <code class=\"docutils literal\">false</code>. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">chef_zero.enabled true</pre> </dd> <dt><code class=\"docutils literal\">chef_zero[:port]</code></dt> <dd>\n<p class=\"first\">The port on which chef-zero is to listen. Default value: <code class=\"docutils literal\">8889</code>. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">chef_zero[:port] 8889</pre> </dd> <dt><code class=\"docutils literal\">client_key</code></dt> <dd>\n<p class=\"first\">The location of the file that contains the client key. Default value: <code class=\"docutils literal\">/etc/chef/client.pem</code>. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">client_key '/etc/chef/client.pem'</pre> </dd> <dt><code class=\"docutils literal\">cookbook_copyright</code></dt> <dd>The name of the copyright holder. This option places a copyright notice that contains the name of the copyright holder in each of the pre-created files. If this option is not specified, a copyright name of “COMPANY_NAME” is used instead; it can easily be modified later.</dd> <dt><code class=\"docutils literal\">cookbook_email</code></dt> <dd>The email address for the individual who maintains the cookbook. This option places an email address in each of the pre-created files. If not specified, an email name of “YOUR_EMAIL” is used instead; this can easily be modified later.</dd> <dt><code class=\"docutils literal\">cookbook_license</code></dt> <dd>The type of license under which a cookbook is distributed: <code class=\"docutils literal\">apachev2</code>, <code class=\"docutils literal\">gplv2</code>, <code class=\"docutils literal\">gplv3</code>, <code class=\"docutils literal\">mit</code>, or <code class=\"docutils literal\">none</code> (default). This option places the appropriate license notice in the pre-created files: <code class=\"docutils literal\">Apache v2.0</code> (for <code class=\"docutils literal\">apachev2</code>), <code class=\"docutils literal\">GPL v2</code> (for <code class=\"docutils literal\">gplv2</code>), <code class=\"docutils literal\">GPL v3</code> (for <code class=\"docutils literal\">gplv3</code>), <code class=\"docutils literal\">MIT</code> (for <code class=\"docutils literal\">mit</code>), or <code class=\"docutils literal\">license 'Proprietary - All Rights Reserved</code> (for <code class=\"docutils literal\">none</code>). Be aware of the licenses for files inside of a cookbook and be sure to follow any restrictions they describe.</dd> <dt><code class=\"docutils literal\">cookbook_path</code></dt> <dd>\n<p class=\"first\">The sub-directory for cookbooks on the chef-client. This value can be a string or an array of file system locations, processed in the specified order. The last cookbook is considered to override local modifications. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">cookbook_path [\n  '/var/chef/cookbooks',\n  '/var/chef/site-cookbooks'\n]</pre> </dd> <dt><code class=\"docutils literal\">data_bag_encrypt_version</code></dt> <dd>\n<p class=\"first\">The minimum required version of data bag encryption. Possible values: <code class=\"docutils literal\">1</code> or <code class=\"docutils literal\">2</code>. When all of the machines in an organization are running chef-client version 11.6 (or higher), it is recommended that this value be set to <code class=\"docutils literal\">2</code>. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">data_bag_encrypt_version 2</pre> </dd> <dt><code class=\"docutils literal\">fips</code></dt> <dd>Allows OpenSSL to enforce FIPS-validated security during the chef-client run. Set to <code class=\"docutils literal\">true</code> to enable FIPS-validated security.</dd> <dt><code class=\"docutils literal\">local_mode</code></dt> <dd>\n<p class=\"first\">Run the chef-client in local mode. This allows all commands that work against the Chef server to also work against the local chef-repo. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">local_mode true</pre> </dd> <dt><code class=\"docutils literal\">node_name</code></dt> <dd>\n<p class=\"first\">The name of the node. This may be a username with permission to authenticate to the Chef server or it may be the name of the machine from which knife is run. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node_name 'user_name'</pre> <p>or:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">node_name 'machine_name'</pre> </dd> <dt><code class=\"docutils literal\">no_proxy</code></dt> <dd>\n<p class=\"first\">A comma-separated list of URLs that do not need a proxy. Default value: <code class=\"docutils literal\">nil</code>. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">no_proxy 'localhost, 10.*, *.example.com, *.dev.example.com'</pre> </dd> <dt><code class=\"docutils literal\">ssh_timeout</code></dt> <dd>The amount of time (in seconds) to wait for an SSH connection time out.</dd> <dt><code class=\"docutils literal\">ssl_verify_mode</code></dt> <dd>\n<p class=\"first\">Set the verify mode for HTTPS requests.</p> <ul class=\"simple\"> <li>Use <code class=\"docutils literal\">:verify_none</code> to do no validation of SSL certificates.</li> <li>Use <code class=\"docutils literal\">:verify_peer</code> to do validation of all SSL certificates, including the Chef server connections, S3 connections, and any HTTPS <strong>remote_file</strong> resource URLs used in the chef-client run. This is the recommended setting.</li> </ul> <p class=\"last\">Depending on how OpenSSL is configured, the <code class=\"docutils literal\">ssl_ca_path</code> may need to be specified. Default value: <code class=\"docutils literal\">:verify_peer</code>.</p> </dd> <dt><code class=\"docutils literal\">syntax_check_cache_path</code></dt> <dd>All files in a cookbook must contain valid Ruby syntax. Use this setting to specify the location in which knife caches information about files that have been checked for valid Ruby syntax.</dd> <dt><code class=\"docutils literal\">tmux_split</code></dt> <dd>Split the Tmux window. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">validation_client_name</code></dt> <dd>\n<p class=\"first\">The name of the chef-validator key that is used by the chef-client to access the Chef server during the initial chef-client run. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">validation_client_name 'chef-validator'</pre> </dd> <dt><code class=\"docutils literal\">validation_key</code></dt> <dd>\n<p class=\"first\">The location of the file that contains the key used when a chef-client is registered with a Chef server. A validation key is signed using the <code class=\"docutils literal\">validation_client_name</code> for authentication. Default value: <code class=\"docutils literal\">/etc/chef/validation.pem</code>. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">validation_key '/etc/chef/validation.pem'</pre> </dd> <dt><code class=\"docutils literal\">verify_api_cert</code></dt> <dd>Verify the SSL certificate on the Chef server. When <code class=\"docutils literal\">true</code>, the chef-client always verifies the SSL certificate. When <code class=\"docutils literal\">false</code>, the chef-client uses the value of <code class=\"docutils literal\">ssl_verify_mode</code> to determine if the SSL certificate requires verification. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">versioned_cookbooks</code></dt> <dd>\n<p class=\"first\">Append cookbook versions to cookbooks. Set to <code class=\"docutils literal\">false</code> to hide cookbook versions: <code class=\"docutils literal\">cookbooks/apache</code>. Set to <code class=\"docutils literal\">true</code> to show cookbook versions: <code class=\"docutils literal\">cookbooks/apache-1.0.0</code> and/or <code class=\"docutils literal\">cookbooks/apache-1.0.1</code>. When this setting is <code class=\"docutils literal\">true</code>, <code class=\"docutils literal\">knife download</code> downloads ALL cookbook versions, which can be useful if a full-fidelity backup of data on the Chef server is required. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">versioned_cookbooks true</pre> </dd> </dl>  <h3 id=\"proxy-settings\">Proxy Settings</h3> <p>In certain situations the proxy used by the Chef server requires authentication. In this situation, three settings must be added to the configuration file. Which settings to add depends on the protocol used to access the Chef server: HTTP or HTTPS.</p> <p>If the Chef server is configured to use HTTP, add the following settings:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">http_proxy</code></dt> <dd>\n<p class=\"first\">The proxy server for HTTP connections. Default value: <code class=\"docutils literal\">nil</code>. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">http_proxy 'http://proxy.vmware.com:3128'</pre> </dd> <dt><code class=\"docutils literal\">http_proxy_user</code></dt> <dd>The user name for the proxy server when the proxy server is using an HTTP connection. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">http_proxy_pass</code></dt> <dd>The password for the proxy server when the proxy server is using an HTTP connection. Default value: <code class=\"docutils literal\">nil</code>.</dd> </dl> <p>If the Chef server is configured to use HTTPS (such as the hosted Chef server), add the following settings:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">https_proxy</code></dt> <dd>The proxy server for HTTPS connections. (The hosted Chef server uses an HTTPS connection.) Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">https_proxy_user</code></dt> <dd>The user name for the proxy server when the proxy server is using an HTTPS connection. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">https_proxy_pass</code></dt> <dd>The password for the proxy server when the proxy server is using an HTTPS connection. Default value: <code class=\"docutils literal\">nil</code>.</dd> </dl> <p>Use the following setting to specify URLs that do not need a proxy:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">no_proxy</code></dt> <dd>A comma-separated list of URLs that do not need a proxy. Default value: <code class=\"docutils literal\">nil</code>.</dd> </dl>    <h2 id=\"optional-settings\">Optional Settings</h2> <p>In addition to the default settings in a knife.rb file, there are other subcommand-specific settings that can be added. When a subcommand is run, knife will use:</p> <ol class=\"arabic simple\"> <li>A value passed via the command-line</li> <li>A value contained in the knife.rb file</li> <li>The default value</li> </ol> <p>A value passed via the command line will override a value in the knife.rb file; a value in a knife.rb file will override a default value.</p> <p>Before adding any settings to the knife.rb file:</p> <ul class=\"simple\"> <li>Verify the settings by reviewing the documentation for the knife subcommands and/or knife plugins</li> <li>Verify the use case(s) your organization has for adding them</li> </ul> <p>Also note that:</p> <ul class=\"simple\"> <li>Custom plugins can be configured to use the same settings as the core knife subcommands</li> <li>Many of these settings are used by more than one subcommand and/or plugin</li> <li>Some of the settings are included only because knife checks for a value in the knife.rb file</li> </ul> <p>To add settings to the knife.rb file, use the following syntax:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">knife[:setting_name] = value</pre> <p>where <code class=\"docutils literal\">value</code> may require quotation marks (‘ ‘) if that value is a string. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">knife[:ssh_port] = 22\nknife[:bootstrap_template] = 'ubuntu14.04-gems'\nknife[:bootstrap_version] = ''\nknife[:bootstrap_proxy] = ''</pre> <p>Some of the optional knife.rb settings are used often, such as the template file used in a bootstrap operation. The frequency of use of any option varies from organization to organization, so even though the following settings are often added to a knife.rb file, they may not be the right settings to add for every organization:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:bootstrap_proxy]</code></dt> <dd>The proxy server for the node that is the target of a bootstrap operation.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_template]</code></dt> <dd>The path to a template file to be used during a bootstrap operation.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_version]</code></dt> <dd>The version of the chef-client to install.</dd> <dt><code class=\"docutils literal\">knife[:editor]</code></dt> <dd>The $EDITOR that is used for all interactive commands.</dd> <dt><code class=\"docutils literal\">knife[:ssh_gateway]</code></dt> <dd>The SSH tunnel or gateway that is used to run a bootstrap action on a machine that is not accessible from the workstation. Adding this setting can be helpful when a user cannot SSH directly into a host.</dd> <dt><code class=\"docutils literal\">knife[:ssh_port]</code></dt> <dd>The SSH port.</dd> </dl> <p>Other SSH-related settings that are sometimes helpful when added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:forward_agent]</code></dt> <dd>Enable SSH agent forwarding.</dd> <dt><code class=\"docutils literal\">knife[:ssh_attribute]</code></dt> <dd>The attribute used when opening an SSH connection.</dd> <dt><code class=\"docutils literal\">knife[:ssh_password]</code></dt> <dd>The SSH password. This can be used to pass the password directly on the command line. If this option is not specified (and a password is required) knife prompts for the password.</dd> <dt><code class=\"docutils literal\">knife[:ssh_user]</code></dt> <dd>The SSH user name.</dd> </dl> <p>Some organizations choose to have all data bags use the same secret and secret file, rather than have a unique secret and secret file for each data bag. To use the same secret and secret file for all data bags, add the following to knife.rb:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:secret]</code></dt> <dd>The encryption key that is used for values contained within a data bag item.</dd> <dt><code class=\"docutils literal\">knife[:secret_file]</code></dt> <dd>The path to the file that contains the encryption key.</dd> </dl> <p>Some settings are better left to Ohai, which will get the value at the start of the chef-client run:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:server_name]</code></dt> <dd>Same as node_name. Recommended configuration is to allow Ohai to collect this value during each chef-client run.</dd> <dt><code class=\"docutils literal\">node_name</code></dt> <dd>See the description above for this setting.</dd> </dl> <p>When working with chef-container, add the following setting:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:dockerfiles_path]</code></dt> <dd>The path to the directory in which Docker contexts are stored. Default value: <code class=\"docutils literal\">/var/chef/dockerfiles</code>.</dd> </dl> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Review the full list of <a class=\"reference external\" href=\"https://docs.chef.io/config_rb_knife_optional_settings.html\">optional settings</a> that can be added to the knife.rb file. Many of these optional settings should not be added to the knife.rb file. The reasons for not adding them can vary. For example, using <code class=\"docutils literal\">--yes</code> as a default in the knife.rb file will cause knife to always assume that “Y” is the response to any prompt, which may lead to undesirable outcomes. Other settings, such as <code class=\"docutils literal\">--hide-healthy</code> (used only with the <code class=\"docutils literal\">knife status</code> subcommand) or <code class=\"docutils literal\">--bare-directories</code> (used only with the <code class=\"docutils literal\">knife list</code> subcommand) probably aren’t used often enough (and in the same exact way) to justify adding them to the knife.rb file. In general, if the optional settings are not listed on <a class=\"reference external\" href=\"https://docs.chef.io/config_rb_knife.html\">the main knife.rb topic</a>, then add settings only after careful consideration. Do not use optional settings in a production environment until after the setting’s performance has been validated in a safe testing environment.</p> </div>   <h2 id=\"many-users-same-repo\">Many Users, Same Repo</h2> <p>It is possible for multiple users to access the Chef server using the same knife.rb file. (A user can even access multiple organizations if, for example, each instance of the chef-repo contained the same copy of the knife.rb file.) This can be done by adding the knife.rb file to the chef-repo, and then using environment variables to handle the user-specific credential details and/or sensitive values. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">current_dir = File.dirname(__FILE__)\n  user = ENV['OPSCODE_USER'] || ENV['USER']\n  node_name                user\n  client_key               \"#{ENV['HOME']}/chef-repo/.chef/#{user}.pem\"\n  validation_client_name   \"#{ENV['ORGNAME']}-validator\"\n  validation_key           \"#{ENV['HOME']}/chef-repo/.chef/#{ENV['ORGNAME']}-validator.pem\"\n  chef_server_url          \"https://api.opscode.com/organizations/#{ENV['ORGNAME']}\"\n  syntax_check_cache_path  \"#{ENV['HOME']}/chef-repo/.chef/syntax_check_cache\"\n  cookbook_path            [\"#{current_dir}/../cookbooks\"]\n  cookbook_copyright       'Your Company, Inc.'\n  cookbook_license         'apachev2\"\n  cookbook_email           'cookbooks@yourcompany.com'\n\n  # Amazon AWS\n  knife[:aws_access_key_id] = ENV['AWS_ACCESS_KEY_ID']\n  knife[:aws_secret_access_key] = ENV['AWS_SECRET_ACCESS_KEY']\n\n  # Rackspace Cloud\n  knife[:rackspace_api_username] = ENV['RACKSPACE_USERNAME']\n  knife[:rackspace_api_key] = ENV['RACKSPACE_API_KEY']</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/config_rb_knife.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/config_rb_knife.html</a>\n  </p>\n</div>\n","12-9/config_rb_metadata":"<h1 id=\"metadata-rb\">metadata.rb</h1> <p>Every cookbook requires a small amount of metadata. A file named metadata.rb is located at the top of every cookbook directory structure. The contents of the metadata.rb file provides hints to the Chef server to help ensure that cookbooks are deployed to each node correctly.</p> <p>A metadata.rb file is:</p> <ul class=\"simple\"> <li>Located at the top level of a cookbook’s directory structure</li> <li>Compiled whenever a cookbook is uploaded to the Chef server or when the <code class=\"docutils literal\">knife cookbook metadata</code> subcommand is run, and then stored as JSON data</li> <li>Created automatically by knife whenever the <code class=\"docutils literal\">knife cookbook create</code> subcommand is run</li> <li>Edited using a text editor, and then re-uploaded to the Chef server as part of a cookbook upload</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">A metadata.json file can be edited directly, should temporary changes be required. Any subsequent upload or action that generates metadata will cause the existing metadata.json file to be overwritten with the newly generated metadata. Therefore, any permanent changes to cookbook metadata should be done in the metadata.rb file, and then re-uploaded to the Chef server.</p> </div>  <h2 id=\"settings\">Settings</h2> <p>This configuration file has the following settings:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">attribute</code></dt> <dd>\n<p class=\"first\">The list of attributes that are required to configure a cookbook. An attribute name is required, followed by any of these options: <code class=\"docutils literal\">display_name</code> (the name that appears in the user interface), <code class=\"docutils literal\">description</code> (a short description), <code class=\"docutils literal\">choice</code> (an array of choices that are presented to a user), <code class=\"docutils literal\">calculated</code> (the default value is calculated by the recipe), <code class=\"docutils literal\">type</code> (the type of value, either <code class=\"docutils literal\">string</code>, <code class=\"docutils literal\">array</code>, or <code class=\"docutils literal\">hash</code>), <code class=\"docutils literal\">required</code> (the level of user input, either <code class=\"docutils literal\">required</code>, <code class=\"docutils literal\">recommended</code>, or <code class=\"docutils literal\">optional</code>), <code class=\"docutils literal\">recipes</code> (an array of recipes), or <code class=\"docutils literal\">default</code> (the attribute’s default value).</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">attribute 'pets/cat/name',\n  :display_name =&gt; 'Cat Name',\n  :description =&gt; 'The name of your cat',\n  :choice =&gt; \\[\n    'kitty kitty',\n    'peanut',\n    'einstein',\n    'honey' \\],\n  :type =&gt; 'string',\n  :required =&gt; 'recommended',\n  :recipes =&gt; \\[ 'cats::eat' \\],\n  :default =&gt; 'kitty kitty'</pre> </dd> <dt><code class=\"docutils literal\">chef_version</code></dt> <dd>\n<p class=\"first\">A range of chef-client versions that are supported by this cookbook.</p> <p>For example, to match any 12.x version of the chef-client, but not 11.x or 13.x:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_version \"~&gt; 12\"</pre> <p>Or matches any 12.x (or higher) version of the chef-client:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_version \"&gt;= 12\"</pre> <p>Or matches any version of the chef-client greater than 12.5.1, any 13.x version, but no 14.x versions:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_version \"&gt;= 12.5.1\", \"&lt; 14.0\"</pre> <p>Or matches any version of the chef-client greater than or equal to 11.18.4 and less than 12.0 and also any version of the chef-client greater than or equal to 12.5.1, but less than 13.0:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_version \"&gt;= 11.18.12\", \"&lt; 12.0\"\nchef_version \"&gt;= 12.5.1\", \"&lt; 13.0\"</pre> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This setting is not visible in Chef Supermarket.</p> </div> </dd> <dt><code class=\"docutils literal\">conflicts</code></dt> <dd>\n<p class=\"first\">For information only; not used outside this file. A cookbook conflicts with another cookbook or cookbook version. Use a version constraint to define constraints for cookbook versions: <code class=\"docutils literal\">&lt;</code> (less than), <code class=\"docutils literal\">&lt;=</code> (less than or equal to), <code class=\"docutils literal\">=</code> (equal to), <code class=\"docutils literal\">&gt;=</code> (greater than or equal to), <code class=\"docutils literal\">~&gt;</code> (approximately greater than), or <code class=\"docutils literal\">&gt;</code> (greater than). This field requires that a cookbook with a matching name and version does not exist on the Chef server. When the match exists, the Chef server ensures that any conflicted cookbooks are not included with the set of cookbooks that are sent to the node when the chef-client runs.</p> <p>For example, if a cookbook conflicts with another cookbook named <code class=\"docutils literal\">dogs</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">conflicts 'dogs'</pre> <p>Or if the cookbook conflicted with a cookbook named <code class=\"docutils literal\">dogs</code> and greater than version 1.0:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">conflicts 'dogs', '&gt; 1.0'</pre> </dd> <dt><code class=\"docutils literal\">depends</code></dt> <dd>\n<p class=\"first\">Show that a cookbook has a dependency on another cookbook. Use a version constraint to define dependencies for cookbook versions: <code class=\"docutils literal\">&lt;</code> (less than), <code class=\"docutils literal\">&lt;=</code> (less than or equal to), <code class=\"docutils literal\">=</code> (equal to), <code class=\"docutils literal\">&gt;=</code> (greater than or equal to; also known as “optimistically greater than”, or “optimistic”), <code class=\"docutils literal\">~&gt;</code> (approximately greater than; also known as “pessimistically greater than”, or “pessimistic”), or <code class=\"docutils literal\">&gt;</code> (greater than). This field requires that a cookbook with a matching name and version exists on the Chef server. When the match exists, the Chef server includes the dependency as part of the set of cookbooks that are sent to the node when the chef-client runs. It is very important that the <code class=\"docutils literal\">depends</code> field contain accurate data. If a dependency statement is inaccurate, the chef-client may not be able to complete the configuration of the system.</p> <p>For example, to set a dependency a cookbook named <code class=\"docutils literal\">cats</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">depends 'cats'</pre> <p>or, to set a dependency on the same cookbook, but only when the version is less than 1.0:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">depends 'cats', '&lt; 1.0'</pre> </dd> <dt><code class=\"docutils literal\">description</code></dt> <dd>\n<p class=\"first\">A short description of a cookbook and its functionality.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">description 'A fancy cookbook that manages a herd of cats!'</pre> </dd> <dt><code class=\"docutils literal\">gem</code></dt> <dd>\n<p class=\"first\">Specifies a gem dependency to be installed via the <strong>chef_gem</strong> resource after all cookbooks are synchronized, but before any other cookbook loading is done. Use this attribute once per gem dependency. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">gem \"poise\"\ngem \"chef-sugar\"\ngem \"chef-provisioning\"</pre> </dd> <dt><code class=\"docutils literal\">grouping</code></dt> <dd>\n<p class=\"first\">Add a title and description to a group of attributes within a namespace. Takes a name (along with the / notation that defines a nested grouping), a title, and a short description.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">grouping 'pets/cat',\n :title =&gt; 'Cat Options',\n :description =&gt; 'Describe your cat using the options below'</pre> </dd> <dt><code class=\"docutils literal\">issues_url</code></dt> <dd>\n<p class=\"first\">The URL for the location in which a cookbook’s issue tracking is maintained. This setting is also used by Chef Supermarket. In Chef Supermarket, this value is used to define the destination for the “View Issues” link.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">issues_url 'https://github.com/chef-cookbooks/chef-client/issues'</pre> </dd> <dt><code class=\"docutils literal\">license</code></dt> <dd>\n<p class=\"first\">The type of license under which a cookbook is distributed: <code class=\"docutils literal\">Apache v2.0</code>, <code class=\"docutils literal\">GPL v2</code>, <code class=\"docutils literal\">GPL v3</code>, <code class=\"docutils literal\">MIT</code>, or <code class=\"docutils literal\">license 'Proprietary - All Rights Reserved</code> (default). Please be aware of the licenses for files inside of a cookbook and be sure to follow any restrictions they describe.</p> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">license 'Apache v2.0'</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">license 'GPL v3'</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">license 'MIT'</pre> <p>or:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">license 'Proprietary - All Rights Reserved'</pre> </dd> <dt><code class=\"docutils literal\">long_description</code></dt> <dd>\n<p class=\"first\">A longer description that ideally contains full instructions on the proper use of a cookbook, including definitions, libraries, dependencies, and so on. There are two ways to use this field: with the contents embedded in the field itself or with the contents pulled from a file at a specified path, such as a README.rdoc located at the top of a cookbook directory.</p> <p>For example, to embed the long description within the field itself:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">long_description &lt;&lt;-EOH\n= DESCRIPTION:\n\nComplete Debian/Ubuntu style Apache2 configuration.\n\n= REQUIREMENTS:\n\nDebian or Ubuntu preferred.\n\nRed Hat/CentOS and Fedora can be used but will be converted to\na Debian/Ubuntu style Apache as it's far easier to manage\nwith Chef.\n\n= ATTRIBUTES:\n\nThe file attributes/apache.rb contains the following attribute\ntypes:\n\n* platform specific locations and settings.\n* general settings\n* pre-fork attributes\n* worker attributes\n\nGeneral settings and pre-fork/worker attributes are tunable.\nEOH</pre> <p>Or to read the contents from a specified file:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">long_description IO.read(File.join\n  (File.dirname(__FILE__), 'README.rdoc')\n)</pre> </dd> <dt><code class=\"docutils literal\">maintainer</code></dt> <dd>\n<p class=\"first\">The name of the person responsible for maintaining a cookbook, either an individual or an organization.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">maintainer 'Adam Jacob'</pre> </dd> <dt><code class=\"docutils literal\">maintainer_email</code></dt> <dd>\n<p class=\"first\">The email address for the person responsible for maintaining a cookbook. Only one email can be listed here, so if this needs to be forwarded to multiple people consider using an email address that is already setup for mail forwarding.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">maintainer_email 'adam@example.com'</pre> </dd> <dt><code class=\"docutils literal\">name</code></dt> <dd>\n<p class=\"first\">Required. The name of the cookbook.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">name 'cats'</pre> </dd> <dt><code class=\"docutils literal\">ohai_version</code></dt> <dd>\n<p class=\"first\">A range of chef-client versions that are supported by this cookbook.</p> <p>For example, to match any 8.x version of Ohai, but not 7.x or 9.x:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_version \"~&gt; 8\"</pre> <p>Or matches any 8.x (or higher) version of Ohai:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_version \"&gt;= 8\"</pre> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This setting is not visible in Chef Supermarket.</p> </div> </dd> <dt><code class=\"docutils literal\">privacy</code></dt> <dd>Specify that a cookbook is private.</dd> <dt><code class=\"docutils literal\">provides</code></dt> <dd>\n<p class=\"first\">Add a recipe, definition, or resource that is provided by this cookbook, should the auto-populated list be insufficient.</p> <p>For example, for recipes:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">provides 'cats::sleep'\nprovides 'cats::eat'</pre> <p>For definitions:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">provides 'here(:kitty, :time_to_eat)'</pre> <p>And for resources:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">provides 'service[snuggle]'</pre> </dd> <dt><code class=\"docutils literal\">recipe</code></dt> <dd>\n<p class=\"first\">A description for a recipe, mostly for cosmetic value within the Chef server user interface.</p> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">recipe 'cats::sleep', 'For a crazy 20 hours a day.'</pre> <p>or:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">recipe 'cats::eat', 'When they are not sleeping.'</pre> </dd> <dt><code class=\"docutils literal\">recommends</code></dt> <dd>\n<p class=\"first\">For information only; not used outside this file. Add a dependency on another cookbook that is recommended, but not required. A cookbook will still work even if recommended dependencies are not available.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">When running automated tests using Foodcritic, this setting will trigger FC053.</p> </div> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">recommends 'dogs'</pre> <p>or, to recommend a cookbook named <code class=\"docutils literal\">dogs</code> and for version 1.0 (or higher):</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">recommends 'dogs', '&gt; 1.0'</pre> </dd> <dt><code class=\"docutils literal\">replaces</code></dt> <dd>\n<p class=\"first\">For information only; not used outside this file. Whether this cookbook should replace another (and can be used in-place of that cookbook).</p> <p>For example, to replace a cookbook named <code class=\"docutils literal\">dogs</code> with this cookbook:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">replaces 'dogs'</pre> <p>or to replace a cookbook named <code class=\"docutils literal\">dogs</code>, but only for versions prior to 4.0:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">replaces 'dogs', '&lt; 4.0'</pre> </dd> <dt><code class=\"docutils literal\">source_url</code></dt> <dd>\n<p class=\"first\">The URL for the location in which a cookbook’s source code is maintained. This setting is also used by Chef Supermarket. In Chef Supermarket, this value is used to define the destination for the “View Source” link.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">source_url 'https://github.com/chef-cookbooks/chef-client'</pre> </dd> <dt><code class=\"docutils literal\">suggests</code></dt> <dd>\n<p class=\"first\">For information only; not used outside this file. Add a dependency on another cookbook that is suggested, but not required. This field is weaker than <code class=\"docutils literal\">recommends</code>; a cookbook will still work even when suggested dependencies are not available.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">When running automated tests using Foodcritic, this setting will trigger FC052.</p> </div> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">suggests 'cats'</pre> <p>or, to suggest a cookbook named <code class=\"docutils literal\">cats</code>, but only for versions 1.0 and higher:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">suggests 'cats', '&gt; 1.0'</pre> </dd> <dt><code class=\"docutils literal\">supports</code></dt> <dd>\n<p class=\"first\">Show that a cookbook has a supported platform. Use a version constraint to define dependencies for platform versions: <code class=\"docutils literal\">&lt;</code> (less than), <code class=\"docutils literal\">&lt;=</code> (less than or equal to), <code class=\"docutils literal\">=</code> (equal to), <code class=\"docutils literal\">&gt;=</code> (greater than or equal to), <code class=\"docutils literal\">~&gt;</code> (approximately greater than), or <code class=\"docutils literal\">&gt;</code> (greater than). To specify more than one platform, use more than one <code class=\"docutils literal\">supports</code> field, once for each platform.</p> <p>For example, to support every version of Ubuntu:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">supports 'ubuntu'</pre> <p>or, to support versions of Ubuntu greater than or equal to 12.04:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">supports 'ubuntu', '&gt;= 12.04'</pre> <p>or, to support only Ubuntu 14.10:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">supports 'ubuntu', '= 14.10'</pre> </dd> <dt><code class=\"docutils literal\">version</code></dt> <dd>\n<p class=\"first\">The current version of a cookbook. Version numbers always follow a simple three-number version sequence.</p> <p>For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">version '2.0.0'</pre> </dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/config_rb_metadata.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/config_rb_metadata.html</a>\n  </p>\n</div>\n","12-9/api_omnitruck":"<h1 id=\"api-omnitruck\">Omnitruck API</h1> <p>The Omnitruck API can be used to download platform-appropriate versions of the chef-client and the Chef server.</p>  <h2 id=\"syntax\">Syntax</h2> <p>The URL from which these downloads can be obtained has the following syntax:</p> <pre class=\"highlight-xml\" data-language=\"xml\">http://www.chef.io/chef/download?p=$PLATFORM&amp;pv=$PLATFORM_VERSION&amp;m=$MACHINE_ARCH&amp;v=latest&amp;prerelease=false&amp;nightlies=false</pre> <p>or:</p> <pre class=\"highlight-xml\" data-language=\"xml\">http://www.chef.io/chef/metadata?p=$PLATFORM&amp;pv=$PLATFORM_VERSION&amp;m=$MACHINE_ARCH&amp;v=latest&amp;prerelease=false&amp;nightlies=false</pre> <p>where the difference between these URLs is the <code class=\"docutils literal\">metadata</code> and <code class=\"docutils literal\">download</code> options. Use the <code class=\"docutils literal\">metadata</code> option to verify the build before downloading it. Use the <code class=\"docutils literal\">download</code> option to download the package in a single step.</p>   <h2 id=\"chef-client-title-downloads\">chef-client Downloads</h2> <p>The <code class=\"docutils literal\">/metadata</code> and/or <code class=\"docutils literal\">/download</code> endpoints can be used to download the chef-client:</p> <pre class=\"highlight-xml\" data-language=\"xml\">http://www.chef.io/chef/download?p=$PLATFORM&amp;pv=$PLATFORM_VERSION&amp;m=$MACHINE_ARCH&amp;v=latest&amp;prerelease=false</pre> <p>or:</p> <pre class=\"highlight-xml\" data-language=\"xml\">http://www.chef.io/chef/metadata?p=$PLATFORM&amp;pv=$PLATFORM_VERSION&amp;m=$MACHINE_ARCH&amp;v=latest&amp;prerelease=false</pre> <p>where:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">p</code> is the platform. Possible values: <code class=\"docutils literal\">debian</code>, <code class=\"docutils literal\">el</code> (for CentOS), <code class=\"docutils literal\">freebsd</code>, <code class=\"docutils literal\">mac_os_x</code>, <code class=\"docutils literal\">solaris2</code>, <code class=\"docutils literal\">sles</code>, <code class=\"docutils literal\">suse</code>, <code class=\"docutils literal\">ubuntu</code> or <code class=\"docutils literal\">windows</code>.</li> <li>\n<code class=\"docutils literal\">pv</code> is the platform version. Possible values depend on the platform. For example, Ubuntu: <code class=\"docutils literal\">10.04</code>, <code class=\"docutils literal\">10.10</code>, <code class=\"docutils literal\">11.04</code>, <code class=\"docutils literal\">11.10</code>, <code class=\"docutils literal\">12.04</code>, or <code class=\"docutils literal\">12.10</code> or for Mac OS X: <code class=\"docutils literal\">10.6</code> or <code class=\"docutils literal\">10.7</code>.</li> <li>\n<code class=\"docutils literal\">m</code> is the machine architecture for the machine on which the chef-client will be installed. Possible values depend on the platform. For example, for Ubuntu or Debian: <code class=\"docutils literal\">i686</code> or <code class=\"docutils literal\">x86_64</code> or for Mac OS X: <code class=\"docutils literal\">x86_64</code>.</li> <li>\n<code class=\"docutils literal\">v</code> is the version of the chef-client to be installed. A version always takes the form x.y.z, where x, y, and z are decimal numbers that are used to represent major (x), minor (y), and patch (z) versions. One-part (x) and two-part (x.y) versions are allowed. For more information about application versioning, see <a class=\"reference external\" href=\"http://semver.org/\">http://semver.org/</a>. Default value: <code class=\"docutils literal\">latest</code>.</li> <li>\n<code class=\"docutils literal\">prerelease</code> indicates that pre-release versions of chef-client will be included in the query. Default value: <code class=\"docutils literal\">false</code>.</li> </ul>  <h3 id=\"supported-platforms\">Supported Platforms</h3> <p>The following table lists the supported platforms for the chef-client:</p> <table class=\"docutils\"> <colgroup> <col width=\"56%\"> <col width=\"12%\"> <col width=\"12%\"> <col width=\"20%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Platform</th> <th class=\"head\">p</th> <th class=\"head\">m</th> <th class=\"head\">pv</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Red Hat Enterprise Linux / CentOS</td> <td><code class=\"docutils literal\">el</code></td> <td><code class=\"docutils literal\">x86_64</code></td> <td>\n<code class=\"docutils literal\">5</code>, <code class=\"docutils literal\">6</code>\n</td> </tr> <tr class=\"row-odd\">\n<td> </td> <td> </td> <td><code class=\"docutils literal\">i686</code></td> <td>\n<code class=\"docutils literal\">5</code>, <code class=\"docutils literal\">6</code>\n</td> </tr> <tr class=\"row-even\">\n<td>Debian</td> <td><code class=\"docutils literal\">debian</code></td> <td><code class=\"docutils literal\">x86_64</code></td> <td>\n<code class=\"docutils literal\">6</code>, <code class=\"docutils literal\">7</code>\n</td> </tr> <tr class=\"row-odd\">\n<td> </td> <td> </td> <td><code class=\"docutils literal\">i686</code></td> <td>\n<code class=\"docutils literal\">6</code> <code class=\"docutils literal\">7</code>\n</td> </tr> <tr class=\"row-even\">\n<td>FreeBSD</td> <td><code class=\"docutils literal\">freebsd</code></td> <td><code class=\"docutils literal\">amd64</code></td> <td><code class=\"docutils literal\">9</code></td> </tr> <tr class=\"row-odd\">\n<td> </td> <td> </td> <td><code class=\"docutils literal\">i386</code></td> <td><code class=\"docutils literal\">9</code></td> </tr> <tr class=\"row-even\">\n<td>Mac OS X</td> <td><code class=\"docutils literal\">mac_os_x</code></td> <td><code class=\"docutils literal\">x86_64</code></td> <td>\n<code class=\"docutils literal\">10.6</code>, <code class=\"docutils literal\">10.7</code>, <code class=\"docutils literal\">10.8</code>, <code class=\"docutils literal\">10.9</code>, <code class=\"docutils literal\">10.10</code>\n</td> </tr> <tr class=\"row-odd\">\n<td>Solaris</td> <td><code class=\"docutils literal\">solaris2</code></td> <td><code class=\"docutils literal\">i386</code></td> <td>\n<code class=\"docutils literal\">5.10</code>, <code class=\"docutils literal\">5.11</code>\n</td> </tr> <tr class=\"row-even\">\n<td> </td> <td> </td> <td><code class=\"docutils literal\">sparc</code></td> <td>\n<code class=\"docutils literal\">5.10</code>, <code class=\"docutils literal\">5.11</code>\n</td> </tr> <tr class=\"row-odd\">\n<td>openSUSE</td> <td><code class=\"docutils literal\">suse</code></td> <td><code class=\"docutils literal\">x86_64</code></td> <td>\n<code class=\"docutils literal\">12.1</code>, <code class=\"docutils literal\">12.2</code>, <code class=\"docutils literal\">12.3</code>, <code class=\"docutils literal\">13.1</code>\n</td> </tr> <tr class=\"row-even\">\n<td> </td> <td> </td> <td><code class=\"docutils literal\">i686</code></td> <td>\n<code class=\"docutils literal\">12.1</code>, <code class=\"docutils literal\">12.2</code>, <code class=\"docutils literal\">12.3</code>, <code class=\"docutils literal\">13.1</code>\n</td> </tr> <tr class=\"row-odd\">\n<td>SUSE Enterprise Linux Server</td> <td><code class=\"docutils literal\">sles</code></td> <td><code class=\"docutils literal\">i686</code></td> <td>\n<code class=\"docutils literal\">11.0</code>, <code class=\"docutils literal\">11.1</code>, <code class=\"docutils literal\">11.2</code>, <code class=\"docutils literal\">11.3</code>\n</td> </tr> <tr class=\"row-even\">\n<td> </td> <td> </td> <td><code class=\"docutils literal\">x86_64</code></td> <td>\n<code class=\"docutils literal\">11.0</code>, <code class=\"docutils literal\">11.1</code>, <code class=\"docutils literal\">11.2</code>, <code class=\"docutils literal\">11.3</code>\n</td> </tr> <tr class=\"row-odd\">\n<td>Ubuntu</td> <td><code class=\"docutils literal\">ubuntu</code></td> <td><code class=\"docutils literal\">x86_64</code></td> <td>\n<code class=\"docutils literal\">10.04</code>, <code class=\"docutils literal\">10.10</code>, <code class=\"docutils literal\">11.04</code>, <code class=\"docutils literal\">11.10</code>, <code class=\"docutils literal\">12.04</code>, <code class=\"docutils literal\">12.10</code>, <code class=\"docutils literal\">13.04</code>, <code class=\"docutils literal\">13.10</code>, <code class=\"docutils literal\">14.04</code>\n</td> </tr> <tr class=\"row-even\">\n<td> </td> <td> </td> <td><code class=\"docutils literal\">i686</code></td> <td>\n<code class=\"docutils literal\">10.04</code>, <code class=\"docutils literal\">10.10</code>, <code class=\"docutils literal\">11.04</code>, <code class=\"docutils literal\">11.10</code>, <code class=\"docutils literal\">12.04</code>, <code class=\"docutils literal\">12.10</code>, <code class=\"docutils literal\">13.04</code>, <code class=\"docutils literal\">13.10</code>, <code class=\"docutils literal\">14.04</code>\n</td> </tr> <tr class=\"row-odd\">\n<td>Microsoft Windows</td> <td><code class=\"docutils literal\">windows</code></td> <td><code class=\"docutils literal\">x86_64</code></td> <td>\n<code class=\"docutils literal\">2008r2</code>, <code class=\"docutils literal\">2003r2</code>, <code class=\"docutils literal\">2008</code>, <code class=\"docutils literal\">2012</code>, <code class=\"docutils literal\">7</code>, <code class=\"docutils literal\">8</code>\n</td> </tr> <tr class=\"row-even\">\n<td> </td> <td> </td> <td><code class=\"docutils literal\">i686</code></td> <td>\n<code class=\"docutils literal\">2003r2</code>, <code class=\"docutils literal\">2008</code>\n</td> </tr> </tbody> </table>   <h3 id=\"examples\">Examples</h3> <p><strong>Get the Latest Build</strong></p> <p>To get the latest supported build for Ubuntu 12.04, enter the following:</p> <pre class=\"highlight-xml\" data-language=\"xml\">http://www.chef.io/chef/metadata?p=ubuntu&amp;pv=12.04&amp;m=x86_64</pre> <p>to return something like:</p> <pre class=\"highlight-xml\" data-language=\"xml\">url     https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/12.04/x86_64/chef-server_11.0.8-1.ubuntu.12.04_amd64.deb\nmd5     076bfc8409ef3cc18w3c9cB15b772b82\nsha256  2ddddd8a18dtnbcc8d8e557d4c2dd1234abb6b20cfc341fgt62444401d76351c</pre> <p><strong>Download Directly</strong></p> <p>To use cURL to download a package directly, enter the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ curl -L -O 'https://www.chef.io/chef/download?p=debian&amp;pv=6&amp;m=x86_64'</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/api_omnitruck.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/api_omnitruck.html</a>\n  </p>\n</div>\n","12-9/ctl_chef_client":"<h1 id=\"chef-client-exe-executable\">chef-client (executable)</h1> <p>A chef-client is an agent that runs locally on every node that is under management by Chef. When a chef-client is run, it will perform all of the steps that are required to bring the node into the expected state, including:</p> <ul class=\"simple\"> <li>Registering and authenticating the node with the Chef server</li> <li>Building the node object</li> <li>Synchronizing cookbooks</li> <li>Compiling the resource collection by loading each of the required cookbooks, including recipes, attributes, and all other dependencies</li> <li>Taking the appropriate and required actions to configure the node</li> <li>Looking for exceptions and notifications, handling each as required</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The chef-client executable can be run as a daemon.</p> </div> <p>The chef-client executable is run as a command-line tool.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>A client.rb file is used to specify the configuration details for the chef-client.</p> <ul class=\"last simple\"> <li>This file is loaded every time this executable is run</li> <li>On UNIX- and Linux-based machines, the default location for this file is <code class=\"docutils literal\">/etc/chef/client.rb</code>; on Microsoft Windows machines, the default location for this file is <code class=\"docutils literal\">C:\\chef\\client.rb</code>; use the <code class=\"docutils literal\">--config</code> option from the command line to change this location</li> <li>This file is not created by default</li> <li>When a client.rb file is present in the default location, the settings contained within that client.rb file will override the default configuration settings</li> </ul> </div>  <h2 id=\"options\">Options</h2> <p>This command has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-client OPTION VALUE OPTION VALUE ...</pre> <p>This command has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-A</code>, <code class=\"docutils literal\">--fatal-windows-admin-check</code>\n</dt> <dd>Cause a chef-client run to fail when the chef-client does not have administrator privileges in Microsoft Windows.</dd> <dt><code class=\"docutils literal\">--audit-mode MODE</code></dt> <dd>Enable audit-mode. Set to <code class=\"docutils literal\">audit-only</code> to skip the converge phase of the chef-client run and only perform audits. Possible values: <code class=\"docutils literal\">audit-only</code>, <code class=\"docutils literal\">disabled</code>, and <code class=\"docutils literal\">enabled</code>. Default value: <code class=\"docutils literal\">disabled</code>.</dd> <dt>\n<code class=\"docutils literal\">-c CONFIG</code>, <code class=\"docutils literal\">--config CONFIG</code>\n</dt> <dd>The configuration file to use.</dd> <dt><code class=\"docutils literal\">--chef-zero-host HOST</code></dt> <dd>The host on which chef-zero is started.</dd> <dt><code class=\"docutils literal\">--chef-zero-port PORT</code></dt> <dd>The port on which chef-zero listens. If a port is not specified—individually, as range of ports, or from the <code class=\"docutils literal\">chef_zero.port</code> setting in the client.rb file—the chef-client will scan for ports between 8889-9999 and will pick the first port that is available.</dd> <dt>\n<code class=\"docutils literal\">-d SECONDS</code>, <code class=\"docutils literal\">--daemonize SECONDS</code>\n</dt> <dd>\n<p class=\"first\">Run the executable as a daemon. Use <code class=\"docutils literal\">SECONDS</code> to specify the number of seconds to wait before the first daemonized chef-client run. <code class=\"docutils literal\">SECONDS</code> is set to <code class=\"docutils literal\">0</code> by default.</p> <p class=\"last\">This option is only available on machines that run in UNIX or Linux environments. For machines that are running Microsoft Windows that require similar functionality, use the <code class=\"docutils literal\">chef-client::service</code> recipe in the <code class=\"docutils literal\">chef-client</code> cookbook: <a class=\"reference external\" href=\"https://supermarket.chef.io/cookbooks/chef-client\">https://supermarket.chef.io/cookbooks/chef-client</a>. This will install a chef-client service under Microsoft Windows using the Windows Service Wrapper.</p> </dd> <dt><code class=\"docutils literal\">--disable-config</code></dt> <dd>Use to run the chef-client using default settings. This will prevent the normally-associated configuration file from being used. This setting should only be used for testing purposes and should never be used in a production setting.</dd> <dt>\n<code class=\"docutils literal\">-E ENVIRONMENT_NAME</code>, <code class=\"docutils literal\">--environment ENVIRONMENT_NAME</code>\n</dt> <dd>The name of the environment.</dd> <dt>\n<code class=\"docutils literal\">-f</code>, <code class=\"docutils literal\">--[no-]fork</code>\n</dt> <dd>Contain the chef-client run in a secondary process with dedicated RAM. When the chef-client run is complete, the RAM is returned to the master process. This option helps ensure that a chef-client uses a steady amount of RAM over time because the master process does not run recipes. This option also helps prevent memory leaks such as those that can be introduced by the code contained within a poorly designed cookbook. Use <code class=\"docutils literal\">--no-fork</code> to disable running the chef-client in fork node. Default value: <code class=\"docutils literal\">--fork</code>.</dd> <dt>\n<code class=\"docutils literal\">-F FORMAT</code>, <code class=\"docutils literal\">--format FORMAT</code>\n</dt> <dd>\n<p class=\"first\">The output format: <code class=\"docutils literal\">doc</code> (default) or <code class=\"docutils literal\">min</code>.</p> <ul class=\"simple\"> <li>Use <code class=\"docutils literal\">doc</code> to print the progress of the chef-client run using full strings that display a summary of updates as they occur.</li> <li>Use <code class=\"docutils literal\">min</code> to print the progress of the chef-client run using single characters.</li> </ul> <p>A summary of updates is printed at the end of the chef-client run. A dot (<code class=\"docutils literal\">.</code>) is printed for events that do not have meaningful status information, such as loading a file or synchronizing a cookbook. For resources, a dot (<code class=\"docutils literal\">.</code>) is printed when the resource is up to date, an <code class=\"docutils literal\">S</code> is printed when the resource is skipped by <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code>, and a <code class=\"docutils literal\">U</code> is printed when the resource is updated.</p> <p class=\"last\">Other formatting options are available when those formatters are configured in the client.rb file using the <code class=\"docutils literal\">add_formatter</code> option.</p> </dd> <dt><code class=\"docutils literal\">--force-formatter</code></dt> <dd>Show formatter output instead of logger output.</dd> <dt><code class=\"docutils literal\">--force-logger</code></dt> <dd>Show logger output instead of formatter output.</dd> <dt>\n<code class=\"docutils literal\">-g GROUP</code>, <code class=\"docutils literal\">--group GROUP</code>\n</dt> <dd>The name of the group that owns a process. This is required when starting any executable as a daemon.</dd> <dt>\n<code class=\"docutils literal\">-h</code>, <code class=\"docutils literal\">--help</code>\n</dt> <dd>Show help for the command.</dd> <dt>\n<code class=\"docutils literal\">-i SECONDS</code>, <code class=\"docutils literal\">--interval SECONDS</code>\n</dt> <dd>The frequency (in seconds) at which the chef-client runs. When the chef-client is run at intervals, <code class=\"docutils literal\">--splay</code> and <code class=\"docutils literal\">--interval</code> values are applied before the chef-client run. Default value: <code class=\"docutils literal\">1800</code>.</dd> <dt>\n<code class=\"docutils literal\">-j PATH</code>, <code class=\"docutils literal\">--json-attributes PATH</code>\n</dt> <dd>\n<p class=\"first\">The path to a file that contains JSON data.</p> <p><strong>Run-lists</strong></p> <p>Use this option to define a <code class=\"docutils literal\">run_list</code> object. For example, a JSON file similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">\"run_list\": [\n  \"recipe[base]\",\n  \"recipe[foo]\",\n  \"recipe[bar]\",\n  \"role[webserver]\"\n],</pre> <p>may be used by running <code class=\"docutils literal\">chef-client -j path/to/file.json</code>.</p> <p>In certain situations this option may be used to update <code class=\"docutils literal\">normal</code> attributes.</p> <p><strong>Environments</strong></p> <p>Use this option to set the <code class=\"docutils literal\">chef_environment</code> value for a node.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Any environment specified for <code class=\"docutils literal\">chef_environment</code> by a JSON file will take precedence over an environment specified by the <code class=\"docutils literal\">--environment</code> option when both options are part of the same command.</p> </div> <p>For example, run the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-client -j /path/to/file.json</pre> <p>where <code class=\"docutils literal\">/path/to/file.json</code> is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"chef_environment\": \"pre-production\"\n}</pre> <p>This will set the environment for the node to <code class=\"docutils literal\">pre-production</code>.</p> <p><strong>All attributes are normal attributes</strong></p> <p>Any other attribute type that is contained in this JSON file will be treated as a <code class=\"docutils literal\">normal</code> attribute. For example, attempting to update <code class=\"docutils literal\">override</code> attributes using the <code class=\"docutils literal\">-j</code> option:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"dev-99\",\n  \"description\": \"Install some stuff\",\n  \"override_attributes\": {\n    \"apptastic\": {\n      \"enable_apptastic\": \"false\",\n      \"apptastic_tier_name\": \"dev-99.bomb.com\"\n    }\n  }\n}</pre> <p>will result in a node object similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"maybe-dev-99\",\n  \"normal\": {\n  \"name\": \"dev-99\",\n    \"description\": \"Install some stuff\",\n    \"override_attributes\": {\n      \"apptastic\": {\n        \"enable_apptastic\": \"false\",\n        \"apptastic_tier_name\": \"dev-99.bomb.com\"\n      }\n    }\n  }\n}</pre> <p><strong>Specify a policy</strong></p> <p>Use this option to use policy files by specifying a JSON file that contains the following settings:</p> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Setting</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">policy_group</code></td> <td>The name of a policy, as identified by the <code class=\"docutils literal\">name</code> setting in a Policyfile.rb file.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">policy_name</code></td> <td>The name of a policy group that exists on the Chef server.</td> </tr> </tbody> </table> <p>For example:</p> <pre class=\"last highlight-javascript\" data-language=\"javascript\">{\n  \"policy_name\": \"appserver\",\n  \"policy_group\": \"staging\"\n}</pre> </dd> <dt>\n<code class=\"docutils literal\">-k KEY_FILE</code>, <code class=\"docutils literal\">--client_key KEY_FILE</code>\n</dt> <dd>The location of the file that contains the client key. Default value: <code class=\"docutils literal\">/etc/chef/client.pem</code>.</dd> <dt>\n<code class=\"docutils literal\">-K KEY_FILE</code>, <code class=\"docutils literal\">--validation_key KEY_FILE</code>\n</dt> <dd>The location of the file that contains the key used when a chef-client is registered with a Chef server. A validation key is signed using the <code class=\"docutils literal\">validation_client_name</code> for authentication. Default value: <code class=\"docutils literal\">/etc/chef/validation.pem</code>.</dd> <dt>\n<code class=\"docutils literal\">-l LEVEL</code>, <code class=\"docutils literal\">--log_level LEVEL</code>\n</dt> <dd>The level of logging to be stored in a log file. Possible levels: <code class=\"docutils literal\">:auto</code> (default), <code class=\"docutils literal\">debug</code>, <code class=\"docutils literal\">info</code>, <code class=\"docutils literal\">warn</code>, <code class=\"docutils literal\">error</code>, or <code class=\"docutils literal\">fatal</code>. Default value: <code class=\"docutils literal\">warn</code> (when a terminal is available) or <code class=\"docutils literal\">info</code> (when a terminal is not available).</dd> <dt>\n<code class=\"docutils literal\">-L LOGLOCATION</code>, <code class=\"docutils literal\">--logfile LOGLOCATION</code>\n</dt> <dd>The location of the log file. This is recommended when starting any executable as a daemon. Default value: <code class=\"docutils literal\">STDOUT</code>.</dd> <dt><code class=\"docutils literal\">--lockfile LOCATION</code></dt> <dd>Use to specify the location of the lock file, which prevents multiple chef-client processes from converging at the same time.</dd> <dt><code class=\"docutils literal\">--minimal-ohai</code></dt> <dd>Run the Ohai plugins for name detection and resource/provider selection and no other Ohai plugins. Set to <code class=\"docutils literal\">true</code> during integration testing to speed up test cycles.</dd> <dt><code class=\"docutils literal\">--[no-]color</code></dt> <dd>View colored output. Default setting: <code class=\"docutils literal\">--color</code>.</dd> <dt><code class=\"docutils literal\">--[no-]fips</code></dt> <dd>Allows OpenSSL to enforce FIPS-validated security during the chef-client run.</dd> <dt><code class=\"docutils literal\">--[no-]listen</code></dt> <dd>Run chef-zero in socketless mode.</dd> <dt>\n<code class=\"docutils literal\">-n NAME</code>, <code class=\"docutils literal\">--named-run-list NAME</code>\n</dt> <dd>The run-list associated with a policy file.</dd> <dt>\n<code class=\"docutils literal\">-N NODE_NAME</code>, <code class=\"docutils literal\">--node-name NODE_NAME</code>\n</dt> <dd>The name of the node.</dd> <dt>\n<code class=\"docutils literal\">-o RUN_LIST_ITEM</code>, <code class=\"docutils literal\">--override-runlist RUN_LIST_ITEM</code>\n</dt> <dd>Replace the current run-list with the specified items. This option will not clear the list of cookbooks (and related files) that is cached on the node.</dd> <dt><code class=\"docutils literal\">--once</code></dt> <dd>Run the chef-client only once and cancel <code class=\"docutils literal\">interval</code> and <code class=\"docutils literal\">splay</code> options.</dd> <dt>\n<code class=\"docutils literal\">-P PID_FILE</code>, <code class=\"docutils literal\">--pid PID_FILE</code>\n</dt> <dd>The location in which a process identification number (pid) is saved. An executable, when started as a daemon, writes the pid to the specified file. Default value: <code class=\"docutils literal\">/tmp/name-of-executable.pid</code>.</dd> <dt><code class=\"docutils literal\">--profile-ruby</code></dt> <dd>\n<p class=\"first\">Use the <code class=\"docutils literal\">--profile-ruby</code> option to dump a (large) profiling graph into <code class=\"docutils literal\">/var/chef/cache/graph_profile.out</code>. Use the graph output to help identify, and then resolve performance bottlenecks in a chef-client run. This option:</p> <ul class=\"last simple\"> <li>Generates a large amount of data about the chef-client run</li> <li>Has a dependency on the <code class=\"docutils literal\">ruby-prof</code> gem, which is packaged as part of Chef and the Chef development kit</li> <li>Increases the amount of time required to complete the chef-client run</li> <li>Should not be used in a production environment</li> </ul> </dd> <dt>\n<code class=\"docutils literal\">-r RUN_LIST_ITEM</code>, <code class=\"docutils literal\">--runlist RUN_LIST_ITEM</code>\n</dt> <dd>Permanently replace the current run-list with the specified run-list items.</dd> <dt>\n<code class=\"docutils literal\">-R</code>, <code class=\"docutils literal\">--enable-reporting</code>\n</dt> <dd>Enable Reporting, which performs data collection during a chef-client run.</dd> <dt><code class=\"docutils literal\">RECIPE_FILE</code></dt> <dd>The path to a recipe. For example, if a recipe file is in the current directory, use <code class=\"docutils literal\">recipe_file.rb</code>. This is typically used with the <code class=\"docutils literal\">--local-mode</code> option.</dd> <dt><code class=\"docutils literal\">--recipe-url=RECIPE_URL</code></dt> <dd>The location of a recipe when it exists at a URL. Use this option only when the chef-client is run with the <code class=\"docutils literal\">--local-mode</code> option.</dd> <dt><code class=\"docutils literal\">--run-lock-timeout SECONDS</code></dt> <dd>The amount of time (in seconds) to wait for a chef-client lock file to be deleted. Default value: not set (indefinite). Set to <code class=\"docutils literal\">0</code> to cause a second chef-client to exit immediately.</dd> <dt>\n<code class=\"docutils literal\">-s SECONDS</code>, <code class=\"docutils literal\">--splay SECONDS</code>\n</dt> <dd>A random number between zero and <code class=\"docutils literal\">splay</code> that is added to <code class=\"docutils literal\">interval</code>. Use splay to help balance the load on the Chef server by ensuring that many chef-client runs are not occuring at the same interval. When the chef-client is run at intervals, <code class=\"docutils literal\">--splay</code> and <code class=\"docutils literal\">--interval</code> values are applied before the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">-S CHEF_SERVER_URL</code>, <code class=\"docutils literal\">--server CHEF_SERVER_URL</code>\n</dt> <dd>The URL for the Chef server.</dd> <dt>\n<code class=\"docutils literal\">-u USER</code>, <code class=\"docutils literal\">--user USER</code>\n</dt> <dd>The user that owns a process. This is required when starting any executable as a daemon.</dd> <dt>\n<code class=\"docutils literal\">-v</code>, <code class=\"docutils literal\">--version</code>\n</dt> <dd>The version of the chef-client.</dd> <dt>\n<code class=\"docutils literal\">-W</code>, <code class=\"docutils literal\">--why-run</code>\n</dt> <dd>Run the executable in why-run mode, which is a type of chef-client run that does everything except modify the system. Use why-run mode to understand why the chef-client makes the decisions that it makes and to learn more about the current and proposed state of the system.</dd> <dt>\n<code class=\"docutils literal\">-z</code>, <code class=\"docutils literal\">--local-mode</code>\n</dt> <dd>Run the chef-client in local mode. This allows all commands that work against the Chef server to also work against the local chef-repo.</dd> </dl>  <h3 id=\"chef-client-lock-file\">chef-client Lock File</h3> <p>The chef-client uses a lock file to ensure that only one chef-client run is in progress at any time. A lock file is created at the start of the chef-client run and is deleted at the end of the chef-client run. A new chef-client run looks for the presence of a lock file and, if present, will wait for that lock file to be deleted. The location of the lock file can vary by platform.</p> <ul class=\"simple\"> <li>Use the <code class=\"docutils literal\">lockfile</code> setting in the client.rb file to specify non-default locations for the lock file. (The default location is typically platform-dependent and is recommended.)</li> <li>Use the <code class=\"docutils literal\">run_lock_timeout</code> setting in the client.rb file to specify the amount of time (in seconds) to wait for the lock file associated with an in-progress chef-client run to be deleted.</li> </ul>    <h2 id=\"run-in-local-mode\">Run in Local Mode</h2> <p>Local mode is a way to run the chef-client against the chef-repo on a local machine as if it were running against the Chef server. Local mode relies on chef-zero, which acts as a very lightweight instance of the Chef server. chef-zero reads and writes to the <code class=\"docutils literal\">chef_repo_path</code>, which allows all commands that normally work against the Chef server to be used against the local chef-repo.</p> <p>Local mode does not require a configuration file, instead it will look for a directory named <code class=\"docutils literal\">/cookbooks</code> and will set <code class=\"docutils literal\">chef_repo_path</code> to be just above that. (Local mode will honor the settings in a configuration file, if desired.) If the client.rb file is not found and no configuration file is specified, local mode will search for a knife.rb file.</p> <p>Local mode will store temporary and cache files under the <code class=\"docutils literal\">&lt;chef_repo_path&gt;/.cache</code> directory by default. This allows a normal user to run the chef-client in local mode without requiring root access.</p>  <h3 id=\"about-chef-zero\">About chef-zero</h3> <p>chef-zero is a very lightweight Chef server that runs in-memory on the local machine. This allows the chef-client to be run against the chef-repo as if it were running against the Chef server. chef-zero was <a class=\"reference external\" href=\"https://github.com/chef/chef-zero\">originally a standalone tool</a>; it is enabled from within the chef-client by using the <code class=\"docutils literal\">--local-mode</code> option. chef-zero is very useful for quickly testing and validating the behavior of the chef-client, cookbooks, recipes, and run-lists before uploading that data to the actual Chef server.</p>   <h3 id=\"use-encrypted-data-bags\">Use Encrypted Data Bags</h3> <p>A data bag is a global variable that is stored as JSON data and is accessible from a Chef server. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search.</p> <p><strong>Create an encrypted data bag for use with chef-client local mode</strong></p> <p>To generate an encrypted data bag item in a JSON file for use when the chef-client is run in local mode (via the <code class=\"docutils literal\">--local-mode</code> option), enter:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag from file my_data_bag /path/to/data_bag_item.json -z --secret-file /path/to/encrypted_data_bag_secret</pre> <p>this will create an encrypted JSON file in:</p> <pre class=\"highlight-python\" data-language=\"python\">data_bags/my_data_bag/data_bag_item.json</pre>    <h2 id=\"run-in-audit-mode\">Run in Audit Mode</h2> <p>The chef-client may be run in audit-mode. Use audit-mode to evaluate custom rules—also referred to as audits—that are defined in recipes. audit-mode may be run in the following ways:</p> <ul class=\"simple\"> <li>By itself (i.e. a chef-client run that does not build the resource collection or converge the node)</li> <li>As part of the chef-client run, where audit-mode runs after all resources have been converged on the node</li> </ul> <p>Each audit is authored within a recipe using the <code class=\"docutils literal\">control_group</code> and <code class=\"docutils literal\">control</code> methods that are part of the Recipe DSL. Recipes that contain audits are added to the run-list, after which they can be processed by the chef-client. Output will appear in the same location as the regular chef-client run (as specified by the <code class=\"docutils literal\">log_location</code> setting in the client.rb file).</p> <p>Finished audits are reported back to the Chef server. From there, audits are sent to the Chef Analytics platform for further analysis, such as rules processing and visibility from the actions web user interface.</p> <p>Use following option to run the chef-client in audit-mode mode:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">--audit-mode MODE</code></dt> <dd>Enable audit-mode. Set to <code class=\"docutils literal\">audit-only</code> to skip the converge phase of the chef-client run and only perform audits. Possible values: <code class=\"docutils literal\">audit-only</code>, <code class=\"docutils literal\">disabled</code>, and <code class=\"docutils literal\">enabled</code>. Default value: <code class=\"docutils literal\">disabled</code>.</dd> </dl>   <h2 id=\"run-in-fips-mode\">Run in FIPS Mode</h2> <p>Federal Information Processing Standards (FIPS) is a United States government computer security standard that specifies security requirements for cryptography. The current version of the standard is FIPS 140-2. The chef-client can be configured to allow OpenSSL to enforce FIPS-validated security during a chef-client run. This will disable cryptography that is explicitly disallowed in FIPS-validated software, including certain ciphers and hashing algorithms. Any attempt to use any disallowed cryptography will cause the chef-client to throw an exception during a chef-client run.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Chef uses MD5 hashes to uniquely identify files that are stored on the Chef server. MD5 is used only to generate a unique hash identifier and is not used for any cryptographic purpose.</p> </div> <p>Notes about FIPS:</p> <ul class=\"simple\"> <li>May be enabled for nodes running on Microsoft Windows and Enterprise Linux platforms</li> <li>Should should only be enabled for environments that require FIPS 140-2 compliance</li> <li>May not be enabled for any version of the chef-client earlier than 12.8</li> </ul> <p><strong>Bootstrap a node using FIPS</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife bootstrap 12.34.56.789 -P vanilla -x root -r 'recipe[apt],recipe[xfs],recipe[vim]' --fips</pre> <p>which shows something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">OpenSSL FIPS 140 mode enabled\n...\n12.34.56.789 Chef Client finished, 12/12 resources updated in 78.942455583 seconds</pre>   <h2 id=\"run-as-a-service\">Run as a Service</h2> <p>The chef-client can be run as a daemon. Use the <strong>chef-client</strong> cookbook to configure the chef-client as a daemon. Add the <code class=\"docutils literal\">default</code> recipe to a node’s run-list, and then use attributes in that cookbook to configure the behavior of the chef-client. For more information about these configuration options, see the <a class=\"reference external\" href=\"https://github.com/chef-cookbooks/chef-client/\">chef-client cookbook repository on github</a>.</p> <p>When the chef-client is run as a daemon, the following signals may be used:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">HUP</code></dt> <dd>Use to reconfigure the chef-client.</dd> <dt><code class=\"docutils literal\">INT</code></dt> <dd>Use to terminate immediately without waiting for the current chef-client run to finish.</dd> <dt><code class=\"docutils literal\">QUIT</code></dt> <dd>Use to dump a stack trace, and continue to run.</dd> <dt><code class=\"docutils literal\">TERM</code></dt> <dd>Use to terminate but wait for the current chef-client run to finish, and then exit.</dd> <dt><code class=\"docutils literal\">USR1</code></dt> <dd>Use to wake up sleeping chef-client and trigger node convergence.</dd> </dl> <p>On Microsoft Windows, both the <code class=\"docutils literal\">HUP</code> and <code class=\"docutils literal\">QUIT</code> signals are not supported.</p>   <h2 id=\"run-with-elevated-privileges\">Run with Elevated Privileges</h2> <p>The chef-client may need to be run with elevated privileges in order to get a recipe to converge correctly. On UNIX and UNIX-like operating systems this can be done by running the command as root. On Microsoft Windows this can be done by running the command prompt as an administrator.</p>  <h3 id=\"linux\">Linux</h3> <p>On Linux, the following error sometimes occurs when the permissions used to run the chef-client are incorrect:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-client\n[Tue, 29 Nov 2015 19:46:17 -0800] INFO: *** Chef 12.X.X ***\n[Tue, 29 Nov 2015 19:46:18 -0800] WARN: Failed to read the private key /etc/chef/client.pem: #&lt;Errno::EACCES: Permission denied - /etc/chef/client.pem&gt;</pre> <p>This can be resolved by running the command as root. There are a few ways this can be done:</p> <ul> <li>\n<p class=\"first\">Log in as root and then run the chef-client</p> </li> <li>\n<p class=\"first\">Use <code class=\"docutils literal\">su</code> to become the root user, and then run the chef-client. For example:</p> <blockquote> <div>\n<pre class=\"highlight-bash\" data-language=\"bash\">$ su</pre> <p>and then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-client</pre> </div>\n</blockquote> </li> <li>\n<p class=\"first\">Use the sudo utility</p> <blockquote> <div>\n<pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-client</pre> </div>\n</blockquote> </li> <li>\n<p class=\"first\">Give a user access to read <code class=\"docutils literal\">/etc/chef</code> and also the files accessed by the chef-client. This requires super user privileges and, as such, is not a recommended approach</p> </li> </ul>   <h3 id=\"windows\">Windows</h3> <p>On Microsoft Windows, running without elevated privileges (when they are necessary) is an issue that fails silently. It will appear that the chef-client completed its run successfully, but the changes will not have been made. When this occurs, do one of the following to run the chef-client as the administrator:</p> <ul> <li>\n<p class=\"first\">Log in to the administrator account. (This is not the same as an account in the administrator’s security group.)</p> </li> <li>\n<p class=\"first\">Run the chef-client process from the administrator account while being logged into another account. Run the following command:</p> <blockquote> <div>\n<pre class=\"highlight-bash\" data-language=\"bash\">$ runas /user:Administrator \"cmd /C chef-client\"</pre> <p>This will prompt for the administrator account password.</p> </div>\n</blockquote> </li> <li>\n<p class=\"first\">Open a command prompt by right-clicking on the command prompt application, and then selecting <strong>Run as administrator</strong>. After the command window opens, the chef-client can be run as the administrator</p> </li> </ul>    <h2 id=\"run-as-non-root-user\">Run as Non-root User</h2> <p>In large, distributed organizations the ability to modify the configuration of systems is sometimes segmented across teams, often with varying levels of access to those systems. For example, core application services may be deployed to systems by a central server provisioning team, and then developers on different teams build tooling to support specific applications. In this situation, a developer only requires limited access to machines and only needs to perform the operations that are necessary to deploy tooling for a specific application.</p> <p>The default configuration of the chef-client assumes that it is run as the root user. This affords the chef-client the greatest flexibility when managing the state of any object. However, the chef-client may be run as a non-root user—i.e. “run as a user with limited system privileges”—which can be useful when the objects on the system are available to other user accounts.</p> <p>When the chef-client is run as a non-root user the chef-client can perform any action allowed to that user, as long as that action does not also require elevated privileges (such as sudo or pbrun). Attempts to manage any object that requires elevated privileges will result in an error. For example, when the chef-client is run as a non-root user that is unable to create or modify users, the <strong>user</strong> resource will not work.</p>  <h3 id=\"set-the-cache-path\">Set the Cache Path</h3> <p>To run a chef-client in non-root mode, add the <code class=\"docutils literal\">cache_path</code> setting to the client.rb file for the node that will run as the non-root user. Set the value of <code class=\"docutils literal\">cache_path</code> to be the home directory for the user that is running the chef-client. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cache_path \"~/.chef/cache\"</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">cache_path File.join(File.expand_path(\"~\"), \".chef\", \"cache\")</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">When running the chef-client using the <code class=\"docutils literal\">--local-mode</code> option, <code class=\"docutils literal\">~/.chef/local-mode-cache</code> is the default value for <code class=\"docutils literal\">cache_path</code>.</p> </div>   <h3 id=\"elevate-commands\">Elevate Commands</h3> <p>Another example of running the chef-client as a non-root user involves using resources to pass sudo commands as as an attribute on the resource. For example, the <strong>service</strong> resource uses a series of <code class=\"docutils literal\">_command</code> attributes (like <code class=\"docutils literal\">start_command</code>, <code class=\"docutils literal\">stop_command</code>, and so on), the <strong>package</strong>-based resources use the <code class=\"docutils literal\">options</code> attribute, and the <strong>script</strong>-based resources use the <code class=\"docutils literal\">code</code> attribute.</p> <p>A command can be elevated similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'apache2' do\n  start_command 'sudo /etc/init.d/apache2 start'\n  action :start\nend</pre> <p>This approach can work very well on a case-by-case basis. The challenge with this approach is often around managing the size of the <code class=\"docutils literal\">/etc/sudoers</code> file.</p>    <h2 id=\"run-on-ibm-aix\">Run on IBM AIX</h2> <p>The chef-client may now be used to configure nodes that are running on the AIX platform, versions 6.1 (TL6 or higher, recommended) and 7.1 (TL0 SP3 or higher, recommended). The <strong>service</strong> resource supports starting, stopping, and restarting services that are managed by System Resource Controller (SRC), as well as managing all service states with BSD-based init systems.</p> <p><strong>System Requirements</strong></p> <p>The chef-client has the <a class=\"reference external\" href=\"https://docs.chef.io/chef_system_requirements.html#chef-client\">same system requirements</a> on the AIX platform as any other platform, with the following notes:</p> <ul class=\"simple\"> <li>Expand the file system on the AIX platform using <code class=\"docutils literal\">chfs</code> or by passing the <code class=\"docutils literal\">-X</code> flag to <code class=\"docutils literal\">installp</code> to automatically expand the logical partition (LPAR)</li> <li>The EN_US (UTF-8) character set should be installed on the logical partition prior to installing the chef-client</li> </ul> <p><strong>Install the chef-client on the AIX platform</strong></p> <p>The chef-client is distributed as a Backup File Format (BFF) binary and is installed on the AIX platform using the following command run as a root user:</p> <pre class=\"highlight-text\" data-language=\"text\"># installp -aYgd chef-12.0.0-1.powerpc.bff all</pre> <p><strong>Increase system process limits</strong></p> <p>The out-of-the-box system process limits for maximum process memory size (RSS) and number of open files are typically too low to run the chef-client on a logical partition (LPAR). When the system process limits are too low, the chef-client will not be able to create threads. To increase the system process limits:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">Validate that the system process limits have not already been increased.</p> </li> <li>\n<p class=\"first\">If they have not been increased, run the following commands as a root user:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chsec -f /etc/security/limits -s default -a \"rss=-1\"</pre> <p>and then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chsec -f /etc/security/limits -s default -a \"data=-1\"</pre> <p>and then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chsec -f /etc/security/limits -s default -a \"nofiles=50000\"</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>The previous commands may be run against the root user, instead of default. For example:</p> <pre class=\"last highlight-bash\" data-language=\"bash\">$ chsec -f /etc/security/limits -s root_user -a \"rss=-1\"</pre> </div> </li> <li>\n<p class=\"first\">Reboot the logical partition (LPAR) to apply the updated system process limits.</p> </li> </ol> <p>When the system process limits are too low, an error is returned similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Error Syncing Cookbooks:\n==================================================================\n\nUnexpected Error:\n-----------------\nThreadError: can't create Thread: Resource temporarily unavailable</pre> <p><strong>Install the UTF-8 character set</strong></p> <p>The chef-client uses the EN_US (UTF-8) character set. By default, the AIX base operating system does not include the EN_US (UTF-8) character set and it must be installed prior to installing the chef-client. The EN_US (UTF-8) character set may be installed from the first disc in the AIX media or may be copied from <code class=\"docutils literal\">/installp/ppc/*EN_US*</code> to a location on the logical partition (LPAR). This topic assumes this location to be <code class=\"docutils literal\">/tmp/rte</code>.</p> <p>Use <code class=\"docutils literal\">smit</code> to install the EN_US (UTF-8) character set. This ensures that any workload partitions (WPARs) also have UTF-8 applied.</p> <p>Remember to point <code class=\"docutils literal\">INPUT device/directory</code> to <code class=\"docutils literal\">/tmp/rte</code> when not installing from CD.</p> <ol class=\"arabic\"> <li>\n<p class=\"first\">From a root shell type:</p> <pre class=\"highlight-text\" data-language=\"text\"># smit lang</pre> <p>A screen similar to the following is returned:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Manage Language Environment\n\nMove cursor to desired item and press Enter.\n\n  Change/Show Primary Language Environment\n  Add Additional Language Environments\n  Remove Language Environments\n  Change/Show Language Hierarchy\n  Set User Languages\n  Change/Show Applications for a Language\n  Convert System Messages and Flat Files\n\n\n\n\n\nF1=Help             F2=Refresh          F3=Cancel           F8=Image\nF9=Shell            F10=Exit            Enter=Do</pre> </li> <li>\n<p class=\"first\">Select <code class=\"docutils literal\">Add Additional Language Environments</code> and press <code class=\"docutils literal\">Enter</code>. A screen similar to the following is returned:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Add Additional Language Environments\n\nType or select values in entry fields.\nPress Enter AFTER making all desired changes.\n\n                                                        [Entry Fields]\n  CULTURAL convention to install                                             +\n  LANGUAGE translation to install                                            +\n* INPUT device/directory for software                [/dev/cd0]              +\n  EXTEND file systems if space needed?                yes                    +\n\n  WPAR Management\n      Perform Operation in Global Environment         yes                    +\n      Perform Operation on Detached WPARs             no                     +\n          Detached WPAR Names                        [_all_wpars]            +\n      Remount Installation Device in WPARs            yes                    +\n      Alternate WPAR Installation Device             []\n\n\n\n\n\nF1=Help             F2=Refresh          F3=Cancel           F4=List\nF5=Reset            F6=Command          F7=Edit             F8=Image\nF9=Shell            F10=Exit            Enter=Do</pre> </li> <li>\n<p class=\"first\">Cursor over the first two entries—<code class=\"docutils literal\">CULTURAL convention to install</code> and <code class=\"docutils literal\">LANGUAGE translation to install</code>—and use <code class=\"docutils literal\">F4</code> to navigate through the list until <code class=\"docutils literal\">UTF-8 English (United States) [EN_US]</code> is selected. (EN_US is in capital letters!)</p> </li> <li>\n<p class=\"first\">Press <code class=\"docutils literal\">Enter</code> to apply and install the language set.</p> </li> </ol> <p><strong>Providers</strong></p> <p>The <strong>service</strong> resource has the following providers to support the AIX platform:</p> <table class=\"docutils\"> <colgroup> <col width=\"27%\"> <col width=\"15%\"> <col width=\"58%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Long name</th> <th class=\"head\">Short name</th> <th class=\"head\">Notes</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">Chef::Provider::Service::Aix</code></td> <td><code class=\"docutils literal\">service</code></td> <td>The provider that is used with the AIX platforms. Use the <code class=\"docutils literal\">service</code> short name to start, stop, and restart services with System Resource Controller (SRC).</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">Chef::Provider::Service::AixInit</code></td> <td><code class=\"docutils literal\">service</code></td> <td>The provider that is used to manage BSD-based init services on AIX.</td> </tr> </tbody> </table> <p><strong>Enable a service on AIX using the mkitab command</strong></p> <p>The <strong>service</strong> resource does not support using the <code class=\"docutils literal\">:enable</code> and <code class=\"docutils literal\">:disable</code> actions with resources that are managed using System Resource Controller (SRC). This is because System Resource Controller (SRC) does not have a standard mechanism for enabling and disabling services on system boot.</p> <p>One approach for enabling or disabling services that are managed by System Resource Controller (SRC) is to use the <strong>execute</strong> resource to invoke <code class=\"docutils literal\">mkitab</code>, and then use that command to enable or disable the service.</p> <p>The following example shows how to install a service:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute \"install #{node['chef_client']['svc_name']} in SRC\" do\n  command \"mkssys -s #{node['chef_client']['svc_name']}\n                  -p #{node['chef_client']['bin']}\n                  -u root\n                  -S\n                  -n 15\n                  -f 9\n                  -o #{node['chef_client']['log_dir']}/client.log\n                  -e #{node['chef_client']['log_dir']}/client.log -a '\n                  -i #{node['chef_client']['interval']}\n                  -s #{node['chef_client']['splay']}'\"\n  not_if \"lssrc -s #{node['chef_client']['svc_name']}\"\n  action :run\nend</pre> <p>and then enable it using the <code class=\"docutils literal\">mkitab</code> command:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute \"enable #{node['chef_client']['svc_name']}\" do\n  command \"mkitab '#{node['chef_client']['svc_name']}:2:once:/usr/bin/startsrc\n                  -s #{node['chef_client']['svc_name']} &gt; /dev/console 2&gt;&amp;1'\"\n  not_if \"lsitab #{node['chef_client']['svc_name']}\"\nend</pre>   <h2 id=\"configuring-a-proxy-server\">Configuring a Proxy Server</h2> <p>See the <a class=\"reference internal\" href=\"proxies\">proxies</a> documentation for information on how to configure chef-client to use a proxy server.</p>   <h2 id=\"examples\">Examples</h2> <p><strong>Run the chef-client</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo chef-client</pre> <p><strong>Start a run when the chef-client is running as a daemon</strong></p> <p>A chef-client that is running as a daemon can be woken up and started by sending the process a <code class=\"docutils literal\">SIGUSR1</code>. For example, to trigger a chef-client run on a machine running Linux:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo killall -USR1 chef-client</pre> <p><strong>Setting the initial run-list using a JSON file</strong></p> <p>A node’s initial run-list is specified using a JSON file on the host system. When running the chef-client as an executable, use the <code class=\"docutils literal\">-j</code> option to tell the chef-client which JSON file to use. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-client -j /etc/chef/file.json --environment _default</pre> <p>where <code class=\"docutils literal\">file.json</code> is similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"resolver\": {\n    \"nameservers\": [ \"10.0.0.1\" ],\n    \"search\":\"int.example.com\"\n  },\n  \"run_list\": [ \"recipe[resolver]\" ]\n}</pre> <p>and where <code class=\"docutils literal\">_default</code> is the name of the environment that is assigned to the node.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">This approach may be used to update <code class=\"docutils literal\">normal</code> attributes, but should never be used to update any other attribute type, as all attributes updated using this option are treated as <code class=\"docutils literal\">normal</code> attributes.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/ctl_chef_client.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/ctl_chef_client.html</a>\n  </p>\n</div>\n","12-9/config_rb_client":"<h1 id=\"client-rb\">client.rb</h1> <p>A client.rb file is used to specify the configuration details for the chef-client.</p> <ul class=\"simple\"> <li>This file is loaded every time this executable is run</li> <li>On UNIX- and Linux-based machines, the default location for this file is <code class=\"docutils literal\">/etc/chef/client.rb</code>; on Microsoft Windows machines, the default location for this file is <code class=\"docutils literal\">C:\\chef\\client.rb</code>; use the <code class=\"docutils literal\">--config</code> option from the command line to change this location</li> <li>This file is not created by default</li> <li>When a client.rb file is present in the default location, the settings contained within that client.rb file will override the default configuration settings</li> </ul>  <h2 id=\"settings\">Settings</h2> <p>This configuration file has the following settings:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">add_formatter</code></dt> <dd>A 3rd-party formatter. (See <a class=\"reference external\" href=\"https://github.com/andreacampi/nyan-cat-chef-formatter\">nyan-cat</a> for an example of a 3rd-party formatter.) Each formatter requires its own entry.</dd> <dt><code class=\"docutils literal\">audit_mode</code></dt> <dd>Enable audit-mode. Set to <code class=\"docutils literal\">audit-only</code> to skip the converge phase of the chef-client run and only perform audits. Possible values: <code class=\"docutils literal\">audit-only</code>, <code class=\"docutils literal\">disabled</code>, and <code class=\"docutils literal\">enabled</code>. Default value: <code class=\"docutils literal\">disabled</code>.</dd> <dt><code class=\"docutils literal\">automatic_attribute_whitelist</code></dt> <dd>A Hash that whitelists <code class=\"docutils literal\">automatic</code> attributes, preventing non-whitelisted attributes from being saved.</dd> <dt><code class=\"docutils literal\">cache_path</code></dt> <dd>Optional. The home directory for the user that is running the chef-client as a non-root user.</dd> <dt><code class=\"docutils literal\">checksum_path</code></dt> <dd>The location in which checksum files are stored. These are used to validate individual cookbook files, such as recipes. The checksum itself is stored in the Chef server database and is then compared to a file in the checksum path that has a filename identical to the checksum.</dd> <dt><code class=\"docutils literal\">chef_repo_path</code></dt> <dd>The path to the chef-repo.</dd> <dt><code class=\"docutils literal\">chef_server_url</code></dt> <dd>\n<p class=\"first\">The URL for the Chef server. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">http://localhost:4000/organizations/ORG_NAME</pre> </dd> <dt><code class=\"docutils literal\">chef_zero.enabled</code></dt> <dd>Enable chef-zero. This setting requires <code class=\"docutils literal\">local_mode</code> to be set to <code class=\"docutils literal\">true</code>. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">chef_zero.port</code></dt> <dd>The port on which chef-zero is to listen. This value may be specified as a range; the chef-client will take the first available port in the range. For example <code class=\"docutils literal\">10,20,30</code> or <code class=\"docutils literal\">10000-20000</code>. Default value: <code class=\"docutils literal\">8889-9999</code>.</dd> <dt><code class=\"docutils literal\">client_key</code></dt> <dd>The location of the file that contains the client key. Default value: <code class=\"docutils literal\">/etc/chef/client.pem</code>.</dd> <dt><code class=\"docutils literal\">client_registration_retries</code></dt> <dd>The number of times a chef-client is to attempt to register with a Chef server. Default value: <code class=\"docutils literal\">5</code>.</dd> <dt><code class=\"docutils literal\">chef_gem_compile_time</code></dt> <dd>\n<p class=\"first\">Controls the phase during which a gem is installed on a node. Set to <code class=\"docutils literal\">true</code> to install a gem while the resource collection is being built (the “compile phase”). Set to <code class=\"docutils literal\">false</code> to install a gem while the chef-client is configuring the node (the “converge phase”). Recommended value: <code class=\"docutils literal\">false</code>.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p>To suppress warnings for cookbooks authored prior to chef-client 12.1, use a <code class=\"docutils literal\">respond_to?</code> check to ensure backward compatibility. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">chef_gem 'aws-sdk' do\n  compile_time false if respond_to?(:compile_time)\nend</pre> </div> </dd> <dt><code class=\"docutils literal\">cookbook_path</code></dt> <dd>The sub-directory for cookbooks on the chef-client. This value can be a string or an array of file system locations, processed in the specified order. The last cookbook is considered to override local modifications.</dd> <dt><code class=\"docutils literal\">cookbook_sync_threads</code></dt> <dd>The number of helper threads available for parallel cookbook synchronization. Increasing this value <strong>may</strong> increase the frequency of gateway errors from the Chef server (503 and 504 errors). Decreasing this number reduces the frequency of gateway errors, if present. Default value: <code class=\"docutils literal\">10</code>.</dd> <dt><code class=\"docutils literal\">data_bag_decrypt_minimum_version</code></dt> <dd>The minimum required version of data bag encryption. Possible values: <code class=\"docutils literal\">0</code>, <code class=\"docutils literal\">1</code>, and <code class=\"docutils literal\">2</code>. When all of the machines in an organization are running chef-client version 11.6 (or higher), it is recommended that this value be set to <code class=\"docutils literal\">2</code>.</dd> <dt><code class=\"docutils literal\">data_bag_path</code></dt> <dd>The location from which a data bag is loaded. Default value: <code class=\"docutils literal\">/var/chef/data_bags</code>.</dd> <dt><code class=\"docutils literal\">default_attribute_whitelist</code></dt> <dd>A Hash that whitelists <code class=\"docutils literal\">default</code> attributes, preventing non-whitelisted attributes from being saved.</dd> <dt><code class=\"docutils literal\">diff_disabled</code></dt> <dd>Cause the chef-client to create a diff when changes are made to a file. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">diff_filesize_threshold</code></dt> <dd>The maximum size (in bytes) of a file for which the chef-client can create a diff. Default value: <code class=\"docutils literal\">10000000</code>.</dd> <dt><code class=\"docutils literal\">diff_output_threshold</code></dt> <dd>The maximum size (in bytes) of a diff file created by the chef-client. Default value: <code class=\"docutils literal\">1000000</code>.</dd> <dt><code class=\"docutils literal\">disable_event_logger</code></dt> <dd>Enable or disable sending events to the Microsoft Windows “Application” event log. When <code class=\"docutils literal\">false</code>, events are sent to the Microsoft Windows “Application” event log at the start and end of a chef-client run, and also if a chef-client run fails. Set to <code class=\"docutils literal\">true</code> to disable event logging. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">enable_reporting</code></dt> <dd>Cause the chef-client to send data to the Chef server for use with Reporting.</dd> <dt><code class=\"docutils literal\">enable_reporting_url_fatals</code></dt> <dd>Cause the chef-client run to fail when Reporting data cannot be sent to the Chef server (for any reason).</dd> <dt><code class=\"docutils literal\">enable_selinux_file_permission_fixup</code></dt> <dd>SELinux environments only. Cause the chef-client to attempt to apply the correct file permissions to an updated file via the <code class=\"docutils literal\">restorecon</code> command. Set this value to <code class=\"docutils literal\">false</code> to prevent the chef-client from attempting this action.</dd> <dt><code class=\"docutils literal\">encrypted_data_bag_secret</code></dt> <dd>The subdirectory in which encrypted data bag secrets are located.</dd> <dt><code class=\"docutils literal\">environment</code></dt> <dd>The name of the environment.</dd> <dt><code class=\"docutils literal\">environment_path</code></dt> <dd>The path to the environment. Default value: <code class=\"docutils literal\">/var/chef/environments</code>.</dd> <dt><code class=\"docutils literal\">file_atomic_update</code></dt> <dd>\n<p class=\"first\">Apply atomic file updates to all resources. Set to <code class=\"docutils literal\">true</code> for global atomic file updates. Set to <code class=\"docutils literal\">false</code> for global non-atomic file updates. (Use the <code class=\"docutils literal\">atomic_update</code> setting on a per-resource basis to override this setting.) Default value: <code class=\"docutils literal\">true</code>.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Changing this setting to <code class=\"docutils literal\">false</code> may cause file corruption, data loss, or instability. Use the <code class=\"docutils literal\">atomic_update</code> property on the <strong>cookbook_file</strong>, <strong>file</strong>, <strong>remote_file</strong>, and <strong>template</strong> resources to tune this behavior at the recipe level.</p> </div> </dd> <dt><code class=\"docutils literal\">file_backup_path</code></dt> <dd>The location in which backup files are stored. If this value is empty, backup files are stored in the directory of the target file. Default value: <code class=\"docutils literal\">/var/chef/backup</code>.</dd> <dt><code class=\"docutils literal\">file_cache_path</code></dt> <dd>The location in which cookbooks (and other transient data) files are stored when they are synchronized. This value can also be used in recipes to download files with the <strong>remote_file</strong> resource.</dd> <dt><code class=\"docutils literal\">file_staging_uses_destdir</code></dt> <dd>How file staging (via temporary files) is done. When <code class=\"docutils literal\">true</code>, temporary files are created in the directory in which files will reside. When <code class=\"docutils literal\">false</code>, temporary files are created under <code class=\"docutils literal\">ENV['TMP']</code>. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">fips</code></dt> <dd>Allows OpenSSL to enforce FIPS-validated security during the chef-client run. Set to <code class=\"docutils literal\">true</code> to enable FIPS-validated security.</dd> <dt><code class=\"docutils literal\">ftp_proxy</code></dt> <dd>The proxy server for FTP connections.</dd> <dt><code class=\"docutils literal\">ftp_proxy_pass</code></dt> <dd>The password for the proxy server when the proxy server is using an FTP connection. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">ftp_proxy_user</code></dt> <dd>The user name for the proxy server when the proxy server is using an FTP connection. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">group</code></dt> <dd>The group that owns a process. This is required when starting any executable as a daemon. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">http_proxy</code></dt> <dd>The proxy server for HTTP connections. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">http_proxy_pass</code></dt> <dd>The password for the proxy server when the proxy server is using an HTTP connection. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">http_proxy_user</code></dt> <dd>The user name for the proxy server when the proxy server is using an HTTP connection. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">http_retry_count</code></dt> <dd>The number of retry attempts. Default value: <code class=\"docutils literal\">5</code>.</dd> <dt><code class=\"docutils literal\">http_retry_delay</code></dt> <dd>The delay (in seconds) between retry attempts. Default value: <code class=\"docutils literal\">5</code>.</dd> <dt><code class=\"docutils literal\">https_proxy</code></dt> <dd>The proxy server for HTTPS connections. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">https_proxy_pass</code></dt> <dd>The password for the proxy server when the proxy server is using an HTTPS connection. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">https_proxy_user</code></dt> <dd>The user name for the proxy server when the proxy server is using an HTTPS connection. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">interval</code></dt> <dd>The frequency (in seconds) at which the chef-client runs. Default value: <code class=\"docutils literal\">1800</code>.</dd> <dt><code class=\"docutils literal\">json_attribs</code></dt> <dd>The path to a file that contains JSON data.</dd> <dt><code class=\"docutils literal\">listen</code></dt> <dd>Run chef-zero in socketless mode. Set to <code class=\"docutils literal\">false</code> to disable port binding and HTTP requests on localhost.</dd> <dt><code class=\"docutils literal\">local_key_generation</code></dt> <dd>Whether the Chef server or chef-client generates the private/public key pair. When <code class=\"docutils literal\">true</code>, the chef-client generates the key pair, and then sends the public key to the Chef server. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">local_mode</code></dt> <dd>Run the chef-client in local mode. This allows all commands that work against the Chef server to also work against the local chef-repo.</dd> <dt><code class=\"docutils literal\">lockfile</code></dt> <dd>The location of the chef-client lock file. This value is typically platform-dependent, so should be a location defined by <code class=\"docutils literal\">file_cache_path</code>. The default location of a lock file should not on an NF mount. Default value: a location defined by <code class=\"docutils literal\">file_cache_path</code>.</dd> <dt><code class=\"docutils literal\">log_level</code></dt> <dd>The level of logging to be stored in a log file. Possible levels: <code class=\"docutils literal\">:auto</code> (default), <code class=\"docutils literal\">:debug</code>, <code class=\"docutils literal\">:info</code>, <code class=\"docutils literal\">:warn</code>, <code class=\"docutils literal\">:error</code>, or <code class=\"docutils literal\">:fatal</code>. Default value: <code class=\"docutils literal\">:warn</code> (when a terminal is available) or <code class=\"docutils literal\">:info</code> (when a terminal is not available).</dd> <dt><code class=\"docutils literal\">log_location</code></dt> <dd>The location of the log file. Possible values: <code class=\"docutils literal\">/path/to/log_location</code>, <code class=\"docutils literal\">STDOUT</code>, <code class=\"docutils literal\">STDERR</code>, <code class=\"docutils literal\">:win_evt</code> (Windows Event Logger), or <code class=\"docutils literal\">:syslog</code> (writes to the syslog daemon facility with the originator set as <code class=\"docutils literal\">chef-client</code>). The application log will specify the source as <code class=\"docutils literal\">Chef</code>. Default value: <code class=\"docutils literal\">STDOUT</code>.</dd> <dt><code class=\"docutils literal\">minimal_ohai</code></dt> <dd>Run the Ohai plugins for name detection and resource/provider selection and no other Ohai plugins. Set to <code class=\"docutils literal\">true</code> during integration testing to speed up test cycles.</dd> <dt><code class=\"docutils literal\">named_run_list</code></dt> <dd>The run-list associated with a policy file.</dd> <dt><code class=\"docutils literal\">no_lazy_load</code></dt> <dd>Download all cookbook files and templates at the beginning of the chef-client run. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">no_proxy</code></dt> <dd>A comma-separated list of URLs that do not need a proxy. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">node_name</code></dt> <dd>The name of the node. Determines which configuration should be applied and sets the <code class=\"docutils literal\">client_name</code>, which is the name used when authenticating to a Chef server. The default value is the FQDN of the chef-client, as detected by Ohai. In general, Chef recommends that you leave this setting blank and let Ohai assign the FQDN of the node as the <code class=\"docutils literal\">node_name</code> during each chef-client run.</dd> <dt><code class=\"docutils literal\">node_path</code></dt> <dd>The location in which nodes are stored when the chef-client is run in local mode. Default value: <code class=\"docutils literal\">/var/chef/node</code>.</dd> <dt><code class=\"docutils literal\">normal_attribute_whitelist</code></dt> <dd>A Hash that whitelists <code class=\"docutils literal\">normal</code> attributes, preventing non-whitelisted attributes from being saved.</dd> <dt><code class=\"docutils literal\">override_attribute_whitelist</code></dt> <dd>A Hash that whitelists <code class=\"docutils literal\">override</code> attributes, preventing non-whitelisted attributes from being saved.</dd> <dt><code class=\"docutils literal\">pid_file</code></dt> <dd>The location in which a process identification number (pid) is saved. An executable, when started as a daemon, writes the pid to the specified file. Default value: <code class=\"docutils literal\">/tmp/name-of-executable.pid</code>.</dd> <dt><code class=\"docutils literal\">policy_group</code></dt> <dd>The name of a policy, as identified by the <code class=\"docutils literal\">name</code> setting in a Policyfile.rb file. <code class=\"docutils literal\">policy_name</code> must also be specified.</dd> <dt><code class=\"docutils literal\">policy_name</code></dt> <dd>The name of a policy group that exists on the Chef server. <code class=\"docutils literal\">policy_group</code> must also be specified.</dd> <dt><code class=\"docutils literal\">rest_timeout</code></dt> <dd>The time (in seconds) after which an HTTP REST request is to time out. Default value: <code class=\"docutils literal\">300</code>.</dd> <dt><code class=\"docutils literal\">role_path</code></dt> <dd>The location in which role files are located. Default value: <code class=\"docutils literal\">/var/chef/roles</code>.</dd> <dt><code class=\"docutils literal\">run_lock_timeout</code></dt> <dd>The amount of time (in seconds) to wait for a chef-client lock file to be deleted. A chef-client run will not start when a lock file is present. If a lock file is not deleted before this time expires, the pending chef-client run will exit. Default value: not set (indefinite). Set to <code class=\"docutils literal\">0</code> to cause a second chef-client to exit immediately.</dd> <dt><code class=\"docutils literal\">splay</code></dt> <dd>A random number between zero and <code class=\"docutils literal\">splay</code> that is added to <code class=\"docutils literal\">interval</code>. Use splay to help balance the load on the Chef server by ensuring that many chef-client runs are not occuring at the same interval. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">ssl_ca_file</code></dt> <dd>The file in which the OpenSSL key is saved. This setting is generated automatically by the chef-client and most users do not need to modify it.</dd> <dt><code class=\"docutils literal\">ssl_ca_path</code></dt> <dd>The path to where the OpenSSL key is located. This setting is generated automatically by the chef-client and most users do not need to modify it.</dd> <dt><code class=\"docutils literal\">ssl_client_cert</code></dt> <dd>The OpenSSL X.509 certificate used for mutual certificate validation. This setting is only necessary when mutual certificate validation is configured on the Chef server. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">ssl_client_key</code></dt> <dd>The OpenSSL X.509 key used for mutual certificate validation. This setting is only necessary when mutual certificate validation is configured on the Chef server. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">ssl_verify_mode</code></dt> <dd>\n<p class=\"first\">Set the verify mode for HTTPS requests.</p> <ul class=\"simple\"> <li>Use <code class=\"docutils literal\">:verify_none</code> to do no validation of SSL certificates.</li> <li>Use <code class=\"docutils literal\">:verify_peer</code> to do validation of all SSL certificates, including the Chef server connections, S3 connections, and any HTTPS <strong>remote_file</strong> resource URLs used in the chef-client run. This is the recommended setting.</li> </ul> <p class=\"last\">Depending on how OpenSSL is configured, the <code class=\"docutils literal\">ssl_ca_path</code> may need to be specified. Default value: <code class=\"docutils literal\">:verify_peer</code>.</p> </dd> <dt><code class=\"docutils literal\">syntax_check_cache_path</code></dt> <dd>All files in a cookbook must contain valid Ruby syntax. Use this setting to specify the location in which knife caches information about files that have been checked for valid Ruby syntax.</dd> <dt><code class=\"docutils literal\">umask</code></dt> <dd>The file mode creation mask, or umask. Default value: <code class=\"docutils literal\">0022</code>.</dd> <dt><code class=\"docutils literal\">use_policyfile</code></dt> <dd>The chef-client automatically checks the configuration, node JSON, and the stored node on the Chef server to determine if Policyfile files are being used, and then automatically updates this flag. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">user</code></dt> <dd>The user that owns a process. This is required when starting any executable as a daemon. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">validation_client_name</code></dt> <dd>The name of the chef-validator key that is used by the chef-client to access the Chef server during the initial chef-client run.</dd> <dt><code class=\"docutils literal\">validation_key</code></dt> <dd>The location of the file that contains the key used when a chef-client is registered with a Chef server. A validation key is signed using the <code class=\"docutils literal\">validation_client_name</code> for authentication. Default value: <code class=\"docutils literal\">/etc/chef/validation.pem</code>.</dd> <dt><code class=\"docutils literal\">verbose_logging</code></dt> <dd>Set the log level. Options: <code class=\"docutils literal\">true</code>, <code class=\"docutils literal\">nil</code>, and <code class=\"docutils literal\">false</code>. When this is set to <code class=\"docutils literal\">false</code>, notifications about individual resources being processed are suppressed (and are output at the <code class=\"docutils literal\">:info</code> logging level). Setting this to <code class=\"docutils literal\">false</code> can be useful when a chef-client is run as a daemon. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">verify_api_cert</code></dt> <dd>Verify the SSL certificate on the Chef server. When <code class=\"docutils literal\">true</code>, the chef-client always verifies the SSL certificate. When <code class=\"docutils literal\">false</code>, the chef-client uses the value of <code class=\"docutils literal\">ssl_verify_mode</code> to determine if the SSL certificate requires verification. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">whitelist</code></dt> <dd>\n<p class=\"first\">A Hash that contains the whitelist used by Chef push jobs. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">whitelist {\n  'job-name' =&gt; 'command',\n  'job-name' =&gt; 'command',\n  'chef-client' =&gt; 'chef-client'\n}</pre> <p>A job entry may also be <code class=\"docutils literal\">'job-name' =&gt; {:lock =&gt; true}</code>, which will check the <code class=\"docutils literal\">lockfile</code> setting in the client.rb file before starting the job.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The <code class=\"docutils literal\">whitelist</code> setting is available only when using Chef push jobs, a tool that runs jobs against nodes in an organization.</p> </div> </dd> <dt><code class=\"docutils literal\">windows_service.watchdog_timeout</code></dt> <dd>The maximum amount of time (in seconds) available to the chef-client run when the chef-client is run as a service on the Microsoft Windows platform. If the chef-client run does not complete within the specified timeframe, the chef-client run is terminated. Default value: <code class=\"docutils literal\">2 * (60 * 60)</code>.</dd> <dt><code class=\"docutils literal\">yum_lock_timeout</code></dt> <dd>The amount of time (in seconds) after which a Yum lock request is to time out. Default value: <code class=\"docutils literal\">30</code>.</dd> </dl>  <h3 id=\"automatic-proxy-config\">Automatic Proxy Config</h3> <p>If <code class=\"docutils literal\">http_proxy</code>, <code class=\"docutils literal\">https_proxy</code>, <code class=\"docutils literal\">ftp_proxy</code>, or <code class=\"docutils literal\">no_proxy</code> is set in the client.rb file, the chef-client will configure the <code class=\"docutils literal\">ENV</code> variable based on these (and related) settings. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">http_proxy 'http://proxy.example.org:8080'\nhttp_proxy_user 'myself'\nhttp_proxy_pass 'Password1'</pre> <p>will be set to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ENV['http_proxy'] = 'http://myself:Password1@proxy.example.org:8080'</pre>    <h2 id=\"ohai-settings\">Ohai Settings</h2> <p>Ohai configuration settings can be added to the client.rb file.</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">Ohai::Config[:directory]</code></dt> <dd>The directory in which Ohai plugins are located.</dd> <dt><code class=\"docutils literal\">Ohai::Config[:disabled_plugins]</code></dt> <dd>\n<p class=\"first\">An array of Ohai plugins to be disabled on a node. The list of plugins included in Ohai can be found in the <code class=\"docutils literal\">ohai/lib/ohai/plugins</code> directory. For example, disabling a single plugin:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Ohai::Config[:disabled_plugins] = [\n    :MyPlugin\n  ]\n\nor disabling multiple plugins:</pre> <pre class=\"highlight-ruby\" data-language=\"ruby\">Ohai::Config[:disabled_plugins] = [\n  :MyPlugin,\n  :MyPlugin,\n  :MyPlugin\n]</pre> <p>and to disable multiple plugins, including Ohai 6 plugins:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Ohai::Config[:disabled_plugins] = [\n          :MyPlugin,\n  :MyPlugin,\n  'my_ohai_6_plugin'\n]</pre> <p>When a plugin is disabled, the chef-client log file will contain entries similar to:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">[2014-06-13T23:49:12+00:00] DEBUG: Skipping disabled plugin MyPlugin</pre> </dd> <dt><code class=\"docutils literal\">Ohai::Config[:hints_path]</code></dt> <dd>The path to the file that contains hints for Ohai.</dd> <dt><code class=\"docutils literal\">Ohai::Config[:log_level]</code></dt> <dd>The level of logging to be stored in a log file.</dd> <dt><code class=\"docutils literal\">Ohai::Config[:log_location]</code></dt> <dd>The location of the log file.</dd> <dt><code class=\"docutils literal\">Ohai::Config[:plugin_path]</code></dt> <dd>\n<p class=\"first\">An array of paths at which Ohai plugins are located. Default value: <code class=\"docutils literal\">[&lt;CHEF_GEM_PATH&gt;/ohai-9.9.9/lib/ohai/plugins]</code>. When custom Ohai plugins are added, the paths must be added to the array. For example, a single plugin:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Ohai::Config[:plugin_path] &lt;&lt; '/etc/chef/ohai_plugins'</pre> <p>and for multiple plugins:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">Ohai::Config[:plugin_path] += [\n  '/etc/chef/ohai_plugins',\n  '/path/to/other/plugins'\n  ]</pre> </dd> <dt><code class=\"docutils literal\">Ohai::Config[:version]</code></dt> <dd>The version of Ohai.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The Ohai executable ignores settings in the client.rb file when Ohai is run independently of the chef-client.</p> </div>   <h2 id=\"example\">Example</h2> <p>A sample client.rb file that contains the most simple way to connect to <a class=\"reference external\" href=\"https://manage.chef.io\">https://manage.chef.io</a>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">log_level        :info\nlog_location     STDOUT\nchef_server_url  'https://api.opscode.com/organizations/&lt;orgname&gt;'\nvalidation_client_name '&lt;orgname&gt;-validator'\nvalidation_key '/etc/chef/validator.pem'\nclient_key '/etc/chef/client.pem'</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/config_rb_client.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/config_rb_client.html</a>\n  </p>\n</div>\n","12-9/dsl_custom_resource":"<h1 id=\"about-the-dsl-custom-resource\">About the Custom Resource DSL</h1> <p>Use the Custom Resource DSL to define property behaviors within custom resources, such as:</p> <ul class=\"simple\"> <li>Loading the value of a specific property</li> <li>Comparing the current property value against a desired property value</li> <li>Telling the chef-client when and how to make changes</li> </ul>  <h2 id=\"converge-if-changed\">converge_if_changed</h2> <p>Use the <code class=\"docutils literal\">converge_if_changed</code> method inside an <code class=\"docutils literal\">action</code> block in a custom resource to compare the desired property values against the current property values (as loaded by the <code class=\"docutils literal\">load_current_value</code> method). Use the <code class=\"docutils literal\">converge_if_changed</code> method to ensure that updates only occur when property values on the system are not the desired property values and to otherwise prevent a resource from being converged.</p> <p>To use the <code class=\"docutils literal\">converge_if_changed</code> method, wrap it around the part of a recipe or custom resource that should only be converged when the current state is not the desired state:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">action :some_action do\n\n  converge_if_changed\n    # some property\n  end\n\nend</pre> <p>For example, a custom resource defines two properties (<code class=\"docutils literal\">content</code> and <code class=\"docutils literal\">path</code>) and a single action (<code class=\"docutils literal\">:create</code>). Use the <code class=\"docutils literal\">load_current_value</code> method to load the property value to be compared, and then use the <code class=\"docutils literal\">converge_if_changed</code> method to tell the chef-client what to do if that value is not the desired value:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :content, String\nproperty :path, String, name_property: true\n\nload_current_value do\n  if File.exist?(path)\n    content IO.read(path)\n  end\nend\n\naction :create do\n  converge_if_changed do\n    IO.write(path, content)\n  end\nend</pre> <p>When the file does not exist, the <code class=\"docutils literal\">IO.write(path, content)</code> code is executed and the chef-client output will print something similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Recipe: recipe_name::block\n  * resource_name[blah] action create\n    - update my_file[blah]\n    -   set content to \"hola mundo\" (was \"hello world\")</pre>  <h3 id=\"multiple-properties\">Multiple Properties</h3> <p>The <code class=\"docutils literal\">converge_if_changed</code> method may be used multiple times. The following example shows how to use the <code class=\"docutils literal\">converge_if_changed</code> method to compare the multiple desired property values against the current property values (as loaded by the <code class=\"docutils literal\">load_current_value</code> method).</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :path, String, name_property: true\nproperty :content, String\nproperty :mode, String\n\nload_current_value do\n  if File.exist?(path)\n    content IO.read(path)\n    mode File.stat(path).mode\n  end\nend\n\naction :create do\n  converge_if_changed :content do\n    IO.write(path, content)\n  end\n  converge_if_changed :mode do\n    File.chmod(mode, path)\n  end\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">load_current_value</code> loads the property values for both <code class=\"docutils literal\">content</code> and <code class=\"docutils literal\">mode</code>\n</li> <li>A <code class=\"docutils literal\">converge_if_changed</code> block tests only <code class=\"docutils literal\">content</code>\n</li> <li>A <code class=\"docutils literal\">converge_if_changed</code> block tests only <code class=\"docutils literal\">mode</code>\n</li> </ul> <p>The chef-client will only update the property values that require updates and will not make changes when the property values are already in the desired state</p>    <h2 id=\"default-action\">default_action</h2> <p>The default action in a custom resource is, by default, the first action listed in the custom resource. For example, action <code class=\"docutils literal\">aaaaa</code> is the default resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :name, RubyType, default: 'value'\n\n...\n\naction :aaaaa do\n # the first action listed in the custom resource\nend\n\naction :bbbbb do\n # the second action listed in the custom resource\nend</pre> <p>The <code class=\"docutils literal\">default_action</code> method may also be used to specify the default action. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :name, RubyType, default: 'value'\n\ndefault_action :aaaaa\n\naction :aaaaa do\n # the first action listed in the custom resource\nend\n\naction :bbbbb do\n # the second action listed in the custom resource\nend</pre> <p>defines action <code class=\"docutils literal\">aaaaa</code> as the default action. If <code class=\"docutils literal\">default_action :bbbbb</code> is specified, then action <code class=\"docutils literal\">bbbbb</code> is the default action. Use this method for clarity in custom resources, if deliberately stating the default resource is desired, or to specify a default action that is not listed first in the custom resource.</p>   <h2 id=\"load-current-value\">load_current_value</h2> <p>Use the <code class=\"docutils literal\">load_current_value</code> method to load the specified property values from the node, and then use those values when the resource is converged. This method may take a block argument.</p> <p>Use the <code class=\"docutils literal\">load_current_value</code> method to guard against property values being replaced. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">action :some_action do\n\n  load_current_value do\n    if File.exist?('/var/www/html/index.html')\n      homepage IO.read('/var/www/html/index.html')\n    end\n    if File.exist?('/var/www/html/404.html')\n      page_not_found IO.read('/var/www/html/404.html')\n    end\n  end\n\nend</pre> <p>This ensures the values for <code class=\"docutils literal\">homepage</code> and <code class=\"docutils literal\">page_not_found</code> are not changed to the default values when the chef-client configures the node.</p>   <h2 id=\"new-resource-property\">new_resource.property</h2> <p>Custom resources are designed to use core resources that are built into Chef. In some cases, it may be necessary to specify a property in the custom resource that is the same as a property in a core resource, for the purpose of overriding that property when used with the custom resource. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource_name :node_execute\n\nproperty :command, kind_of: String, name_property: true\nproperty :version, kind_of: String\n\n# Useful properties from the `execute` resource\nproperty :cwd, kind_of: String\nproperty :environment, kind_of: Hash, default: {}\nproperty :user, kind_of: [String, Integer]\nproperty :sensitive, kind_of: [TrueClass, FalseClass], default: false\n\nprefix = '/opt/languages/node'\n\nload_current_value do\n  current_value_does_not_exist! if node.run_state['nodejs'].nil?\n  version node.run_state['nodejs'][:version]\nend\n\naction :run do\n  execute 'execute-node' do\n    cwd cwd\n    environment environment\n    user user\n    sensitive sensitive\n    # gsub replaces 10+ spaces at the beginning of the line with nothing\n    command &lt;&lt;-CODE.gsub(/^ {10}/, '')\n      #{prefix}/#{version}/#{command}\n    CODE\n  end\nend</pre> <p>where the <code class=\"docutils literal\">property :cwd</code>, <code class=\"docutils literal\">property :environment</code>, <code class=\"docutils literal\">property :user</code>, and <code class=\"docutils literal\">property :sensitive</code> are identical to properties in the <strong>execute</strong> resource, embedded as part of the <code class=\"docutils literal\">action :run</code> action. Because both the custom properties and the <strong>execute</strong> properties are identical, this will result in an error message similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ArgumentError\n-------------\nwrong number of arguments (0 for 1)</pre> <p>To prevent this behavior, use <code class=\"docutils literal\">new_resource.</code> to tell the chef-client to process the properties from the core resource instead of the properties in the custom resource. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource_name :node_execute\n\nproperty :command, kind_of: String, name_property: true\nproperty :version, kind_of: String\n\n# Useful properties from the `execute` resource\nproperty :cwd, kind_of: String\nproperty :environment, kind_of: Hash, default: {}\nproperty :user, kind_of: [String, Integer]\nproperty :sensitive, kind_of: [TrueClass, FalseClass], default: false\n\nprefix = '/opt/languages/node'\n\nload_current_value do\n  current_value_does_not_exist! if node.run_state['nodejs'].nil?\n  version node.run_state['nodejs'][:version]\nend\n\naction :run do\n  execute 'execute-node' do\n    cwd new_resource.cwd\n    environment new_resource.environment\n    user new_resource.user\n    sensitive new_resource.sensitive\n    # gsub replaces 10+ spaces at the beginning of the line with nothing\n    command &lt;&lt;-CODE.gsub(/^ {10}/, '')\n      #{prefix}/#{new_resource.version}/#{new_resource.command}\n    CODE\n  end\nend</pre> <p>where <code class=\"docutils literal\">cwd new_resource.cwd</code>, <code class=\"docutils literal\">environment new_resource.environment</code>, <code class=\"docutils literal\">user new_resource.user</code>, and <code class=\"docutils literal\">sensitive new_resource.sensitive</code> correctly use the properties of the <strong>execute</strong> resource and not the identically-named override properties of the custom resource.</p>   <h2 id=\"property\">property</h2> <p>Use the <code class=\"docutils literal\">property</code> method to define properties for the custom resource. The syntax is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :name, ruby_type, default: 'value'</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">:name</code> is the name of the property</li> <li>\n<code class=\"docutils literal\">ruby_type</code> is the Ruby type, such as <code class=\"docutils literal\">String</code>, <code class=\"docutils literal\">Integer</code>, <code class=\"docutils literal\">TrueClass</code>, or <code class=\"docutils literal\">FalseClass</code>\n</li> <li>\n<code class=\"docutils literal\">default: 'value'</code> is the default value loaded into the resource</li> </ul> <p>For example, the following properties define <code class=\"docutils literal\">username</code> and <code class=\"docutils literal\">password</code> properties with no default values specified:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :username, String\nproperty :password, String</pre>  <h3 id=\"desired-state\">desired_state</h3> <p>Add <code class=\"docutils literal\">desired_state:</code> to get or set the list of desired state properties for a resource, which describe the desired state of the node, such as permissions on an existing file. This value may be <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>.</p> <ul class=\"simple\"> <li>When <code class=\"docutils literal\">true</code>, the state of the system will determine the value.</li> <li>When <code class=\"docutils literal\">false</code>, the values defined by the recipe or custom resource will determine the value, i.e. “the desired state of this system includes setting the value defined in this custom resource or recipe”</li> </ul> <p>For example, the following properties define the <code class=\"docutils literal\">owner</code>, <code class=\"docutils literal\">group</code>, and <code class=\"docutils literal\">mode</code> properties for a file that already exists on the node, and with <code class=\"docutils literal\">desired_state</code> set to <code class=\"docutils literal\">false</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :owner, String, default: 'root', desired_state: false\nproperty :group, String, default: 'root', desired_state: false\nproperty :mode, String, default: '0755', desired_state: false</pre>   <h3 id=\"identity\">identity</h3> <p>Add <code class=\"docutils literal\">identity:</code> to set a resource to a particular set of properties. This value may be <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>.</p> <ul class=\"simple\"> <li>When <code class=\"docutils literal\">true</code>, data for that property is returned as part of the resource data set and may be available to external applications, such as reporting</li> <li>When <code class=\"docutils literal\">false</code>, no data for that property is returned.</li> </ul> <p>If no properties are marked <code class=\"docutils literal\">true</code>, the property that defaults to the <code class=\"docutils literal\">name</code> of the resource is marked <code class=\"docutils literal\">true</code>.</p> <p>For example, the following properties define <code class=\"docutils literal\">username</code> and <code class=\"docutils literal\">password</code> properties with no default values specified, but with <code class=\"docutils literal\">identity</code> set to <code class=\"docutils literal\">true</code> for the user name:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property :username, String, identity: true\nproperty :password, String</pre>   <h3 id=\"block-arguments\">Block Arguments</h3> <p>Any properties that are marked <code class=\"docutils literal\">identity: true</code> or <code class=\"docutils literal\">desired_state: false</code> will be available from <code class=\"docutils literal\">load_current_value</code>. If access to other properties of a resource is needed, use a block argument that contains all of the properties of the requested resource. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource_name :file\n\nload_current_value do |desired|\n  puts \"The user typed content = #{desired.content} in the resource\"\nend</pre>    <h2 id=\"property-is-set\">property_is_set?</h2> <p>Use the <code class=\"docutils literal\">property_is_set?</code> method to check if the value for a property is set. The syntax is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">property_is_set?(:property_name)</pre> <p>The <code class=\"docutils literal\">property_is_set?</code> method will return <code class=\"docutils literal\">true</code> if the property is set.</p> <p>For example, the following custom resource creates and/or updates user properties, but not their password. The <code class=\"docutils literal\">property_is_set?</code> method checks if the user has specified a password and then tells the chef-client what to do if the password is not identical:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">action :create do\n  converge_if_changed do\n    system(\"rabbitmqctl create_or_update_user #{username} --prop1 #{prop1} ... \")\n  end\n\n  if property_is_set?(:password)\n    if system(\"rabbitmqctl authenticate_user #{username} #{password}\") != 0 do\n      converge_by \"Updating password for user #{username} ...\" do\n    system(\"rabbitmqctl update_user #{username} --password #{password}\")\n  end\nend</pre>   <h2 id=\"provides\">provides</h2> <p>Use the <code class=\"docutils literal\">provides</code> method to associate a custom resource with the Recipe DSL on different operating systems. When multiple custom resources use the same DSL, specificity rules are applied to determine the priority, from highest to lowest:</p> <ol class=\"arabic simple\"> <li>provides :resource_name, platform_version: ‘0.1.2’</li> <li>provides :resource_name, platform: ‘platform_name’</li> <li>provides :resource_name, platform_family: ‘platform_family’</li> <li>provides :resource_name, os: ‘operating_system’</li> <li>provides :resource_name</li> </ol> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">class GenericFile &lt; Chef::Resource\n  provides :file\nend\n\nclass LinuxFile &lt; Chef::Resource\n  provides :file, os: 'linux'\nend\n\nclass DebianFile &lt; Chef::Resource\n  provides :file, platform_family: 'debian'\nend</pre> <p>If the following recipe is run on Ubuntu, <code class=\"docutils literal\">DebianFile</code> is selected:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">file 'x' do\n  ...\nend</pre> <p>because it is the most specific rule. If the platform is Linux, but not Debian, <code class=\"docutils literal\">LinuxFile</code> is selected because it is less specific.</p>  <h3 id=\"override\">override</h3> <p>Chef will warn you if the Recipe DSL is provided by another custom resource or built-in resource. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">class X &lt; Chef::Resource\n  provides :file\nend\n\nclass Y &lt; Chef::Resource\n  provides :file\nend</pre> <p>This will emit a warning that <code class=\"docutils literal\">Y</code> is overriding <code class=\"docutils literal\">X</code>. To disable this warning, use <code class=\"docutils literal\">override: true</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">class X &lt; Chef::Resource\n  provides :file\nend\n\nclass Y &lt; Chef::Resource\n  provides :file, override: true\nend</pre>    <h2 id=\"reset-property\">reset_property</h2> <p>Use the <code class=\"docutils literal\">reset_property</code> method to clear the value for a property as if it had never been set, and then use the default value. For example, to clear the value for a property named <code class=\"docutils literal\">password</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">reset_property(:password)</pre>   <h2 id=\"resource-name\">resource_name</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Cookbook and custom resource names should contain only alphanumeric characters. A hyphen (<code class=\"docutils literal\">-</code>) is a valid character and may be used in cookbook and custom resource names, but it is discouraged. The chef-client will return an error if a hyphen is not converted to an underscore (<code class=\"docutils literal\">_</code>) when referencing from a recipe the name of a custom resource in which a hyphen is located.</p> </div> <p>Use the <code class=\"docutils literal\">resource_name</code> method at the top of a custom resource to declare a custom name for that resource. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource_name :custom_name</pre> <p>where <code class=\"docutils literal\">:custom_name</code> is the resource name as it may be used in a recipe. For example, a cookbook named <code class=\"docutils literal\">website</code> and a custom resource file named <code class=\"docutils literal\">httpd</code> is by default used in a recipe with <code class=\"docutils literal\">website_httpd</code>. If <code class=\"docutils literal\">:custom_name</code> is <code class=\"docutils literal\">web_httpd</code> then it may be used like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">web_httpd 'name' do\n  # properties\nend</pre> <p>For example, the <code class=\"docutils literal\">httpd.rb</code> file in the <code class=\"docutils literal\">website</code> cookbook could be assigned a custom resource name like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource_name :httpd\n\nproperty :homepage, String, default: '&lt;h1&gt;Hello world!&lt;/h1&gt;'\n\nload_current_value do\n  if ::File.exist?('/var/www/html/index.html')\n    homepage IO.read('/var/www/html/index.html')\n  end\nend\n\naction :create do\n  package 'httpd'\n\n  service 'httpd' do\n    action [:enable, :start]\n  end\n\n  file '/var/www/html/index.html' do\n    content homepage\n  end\nend</pre> <p>and is then usable in a recipe like this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">httpd 'build website' do\n  homepage '&lt;h1&gt;Welcome to the Example Co. website!&lt;/h1&gt;'\n  action :create\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/dsl_custom_resource.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/dsl_custom_resource.html</a>\n  </p>\n</div>\n","12-9/dsl_handler":"<h1 id=\"about-the-dsl-handler\">About the Handler DSL</h1> <p>Use the Handler DSL to attach a callback to an event. If the event occurs during the chef-client run, the associated callback is executed. For example:</p> <ul class=\"simple\"> <li>Sending email if a chef-client run fails</li> <li>Sending a notification to chat application if an audit run fails</li> <li>Aggregating statistics about resources updated during a chef-client runs to StatsD</li> </ul>  <h2 id=\"on-method\">on Method</h2> <p>Use the <code class=\"docutils literal\">on</code> method to associate an event type with a callback. The callback defines what steps are taken if the event occurs during the chef-client run and is defined using arbitrary Ruby code. The syntax is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef.event_handler do\n  on :event_type do\n    # some Ruby\n  end\nend</pre> <p>where</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">Chef.event_handler</code> declares a block of code within a recipe that is processed when the named event occurs during a chef-client run</li> <li>\n<code class=\"docutils literal\">on</code> defines the block of code that will tell the chef-client how to handle the event</li> <li>\n<code class=\"docutils literal\">:event_type</code> is a valid exception event type, such as <code class=\"docutils literal\">:run_start</code>, <code class=\"docutils literal\">:run_failed</code>, <code class=\"docutils literal\">:converge_failed</code>, <code class=\"docutils literal\">:resource_failed</code>, or <code class=\"docutils literal\">:recipe_not_found</code>\n</li> </ul> <p>For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">Chef.event_handler do\n  on :converge_start do\n    puts \"Ohai! I have started a converge.\"\n  end\nend</pre>   <h2 id=\"event-types\">Event Types</h2> <p>The following table describes the events that may occur during a chef-client run. Each of these events may be referenced in an <code class=\"docutils literal\">on</code> method block by declaring it as the event type.</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Event</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:run_start</code></td> <td>The start of the chef-client run.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:run_started</code></td> <td>The chef-client run has started.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:ohai_completed</code></td> <td>The Ohai run has completed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:skipping_registration</code></td> <td>The chef-client is not registering with the Chef server because it already has a private key or because it does not need one.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:registration_start</code></td> <td>The chef-client is attempting to create a private key with which to register to the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:registration_completed</code></td> <td>The chef-client created its private key successfully.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:registration_failed</code></td> <td>The chef-client encountered an error and was unable to register with the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:node_load_start</code></td> <td>The chef-client is attempting to load node data from the Chef server.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:node_load_failed</code></td> <td>The chef-client encountered an error and was unable to load node data from the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:run_list_expand_failed</code></td> <td>The chef-client failed to expand the run-list.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:node_load_completed</code></td> <td>The chef-client successfully loaded node data from the Chef server. Default and override attributes for roles have been computed, but are not yet applied.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:policyfile_loaded</code></td> <td>The policy file was loaded.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:cookbook_resolution_start</code></td> <td>The chef-client is attempting to pull down the cookbook collection from the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:cookbook_resolution_failed</code></td> <td>The chef-client failed to pull down the cookbook collection from the Chef server.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:cookbook_resolution_complete</code></td> <td>The chef-client successfully pulled down the cookbook collection from the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:cookbook_clean_start</code></td> <td>The chef-client is attempting to remove unneeded cookbooks.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:removed_cookbook_file</code></td> <td>The chef-client removed a file from a cookbook.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:cookbook_clean_complete</code></td> <td>The chef-client is done removing cookbooks and/or cookbook files.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:cookbook_sync_start</code></td> <td>The chef-client is attempting to synchronize cookbooks.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:synchronized_cookbook</code></td> <td>The chef-client is attempting to synchronize the named cookbook.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:updated_cookbook_file</code></td> <td>The chef-client updated the named file in the named cookbook.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:cookbook_sync_failed</code></td> <td>The chef-client was unable to synchronize cookbooks.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:cookbook_sync_complete</code></td> <td>The chef-client is finished synchronizing cookbooks.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:library_load_start</code></td> <td>The chef-client is loading library files.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:library_file_loaded</code></td> <td>The chef-client successfully loaded the named library file.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:library_file_load_failed</code></td> <td>The chef-client was unable to load the named library file.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:library_load_complete</code></td> <td>The chef-client is finished loading library files.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:lwrp_load_start</code></td> <td>The chef-client is loading custom resources.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:lwrp_file_loaded</code></td> <td>The chef-client successfully loaded the named custom resource.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:lwrp_file_load_failed</code></td> <td>The chef-client was unable to load the named custom resource.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:lwrp_load_complete</code></td> <td>The chef-client is finished loading custom resources.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:attribute_load_start</code></td> <td>The chef-client is loading attribute files.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:attribute_file_loaded</code></td> <td>The chef-client successfully loaded the named attribute file.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:attribute_file_load_failed</code></td> <td>The chef-client was unable to load the named attribute file.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:attribute_load_complete</code></td> <td>The chef-client is finished loading attribute files.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:definition_load_start</code></td> <td>The chef-client is loading definitions.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:definition_file_loaded</code></td> <td>The chef-client successfully loaded the named definition.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:definition_file_load_failed</code></td> <td>The chef-client was unable to load the named definition.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:definition_load_complete</code></td> <td>The chef-client is finished loading definitions.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:recipe_load_start</code></td> <td>The chef-client is loading recipes.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:recipe_file_loaded</code></td> <td>The chef-client successfully loaded the named recipe.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:recipe_file_load_failed</code></td> <td>The chef-client was unable to load the named recipe.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:recipe_not_found</code></td> <td>The chef-client was unable to find the named recipe.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:recipe_load_complete</code></td> <td>The chef-client is finished loading recipes.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:converge_start</code></td> <td>The chef-client run converge phase has started.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:converge_complete</code></td> <td>The chef-client run converge phase is complete.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:converge_failed</code></td> <td>The chef-client run converge phase has failed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:audit_phase_start</code></td> <td>The chef-client run audit phase has started.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:audit_phase_complete</code></td> <td>The chef-client run audit phase is finished.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:audit_phase_failed</code></td> <td>The chef-client run audit phase has failed.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:control_group_started</code></td> <td>The named control group is being processed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:control_example_success</code></td> <td>The named control group has been processed.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:control_example_failure</code></td> <td>The named control group’s processing has failed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_action_start</code></td> <td>A resource action is starting.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:resource_skipped</code></td> <td>A resource action was skipped.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_current_state_loaded</code></td> <td>A resource’s current state was loaded.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:resource_current_state_load_bypassed</code></td> <td>A resource’s current state was not loaded because the resource does not support why-run mode.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_bypassed</code></td> <td>A resource action was skipped because the resource does not support why-run mode.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:resource_update_applied</code></td> <td>A change has been made to a resource. (This event occurs for each change made to a resource.)</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_failed_retriable</code></td> <td>A resource action has failed and will be retried.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:resource_failed</code></td> <td>A resource action has failed and will not be retried.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_updated</code></td> <td>A resource requires modification.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:resource_up_to_date</code></td> <td>A resource is already correct.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:resource_completed</code></td> <td>All actions for the resource are complete.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:stream_opened</code></td> <td>A stream has opened.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:stream_closed</code></td> <td>A stream has closed.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:stream_output</code></td> <td>A chunk of data from a single named stream.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:handlers_start</code></td> <td>The handler processing phase of the chef-client run has started.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:handler_executed</code></td> <td>The named handler was processed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:handlers_completed</code></td> <td>The handler processing phase of the chef-client run is complete.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:provider_requirement_failed</code></td> <td>An assertion declared by a provider has failed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:whyrun_assumption</code></td> <td>An assertion declared by a provider has failed, but execution is allowed to continue because the chef-client is running in why-run mode.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:run_completed</code></td> <td>The chef-client run has completed.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:run_failed</code></td> <td>The chef-client run has failed.</td> </tr> </tbody> </table>   <h2 id=\"examples\">Examples</h2> <p>The following examples show ways to use the Handler DSL.</p>  <h3 id=\"send-email\">Send Email</h3> <p>Use the <code class=\"docutils literal\">on</code> method to create an event handler that sends email when the chef-client run fails. This will require:</p> <ul class=\"simple\"> <li>A way to tell the chef-client how to send email</li> <li>An event handler that describes what to do when the <code class=\"docutils literal\">:run_failed</code> event is triggered</li> <li>A way to trigger the exception and test the behavior of the event handler</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Read this scenario as an HTML presentation at <a class=\"reference external\" href=\"https://docs.chef.io/decks/event_handlers.html\">https://docs.chef.io/decks/event_handlers.html</a>.</p> </div>  <h4 id=\"define-how-email-is-sent\">Define How Email is Sent</h4> <p>Use a library to define the code that sends email when a chef-client run fails. Name the file <code class=\"docutils literal\">helper.rb</code> and add it to a cookbook’s <code class=\"docutils literal\">/libraries</code> directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">require 'net/smtp'\n\nmodule HandlerSendEmail\n  class Helper\n\n    def send_email_on_run_failure(node_name)\n\n      message = \"From: Chef &lt;chef@chef.io&gt;\\n\"\n      message &lt;&lt; \"To: Grant &lt;grantmc@chef.io&gt;\\n\"\n      message &lt;&lt; \"Subject: Chef run failed\\n\"\n      message &lt;&lt; \"Date: #{Time.now.rfc2822}\\n\\n\"\n      message &lt;&lt; \"Chef run failed on #{node.name}\\n\"\n      Net::SMTP.start('localhost', 25) do |smtp|\n        smtp.send_message message, 'chef@chef.io', 'grantmc@chef.io'\n      end\n    end\n  end\nend</pre>   <h4 id=\"add-the-handler\">Add the Handler</h4> <p>Invoke the library helper in a recipe:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef.event_handler do\n  on :run_failed do\n    HandlerSendEmail::Helper.new.send_email_on_run_failure(\n      Chef.run_context.node.name\n    )\n  end\nend</pre> <ul class=\"simple\"> <li>Use <code class=\"docutils literal\">Chef.event_handler</code> to define the event handler</li> <li>Use the <code class=\"docutils literal\">on</code> method to specify the event type</li> </ul> <p>Within the <code class=\"docutils literal\">on</code> block, tell the chef-client how to handle the event when it’s triggered.</p>   <h4 id=\"test-the-handler\">Test the Handler</h4> <p>Use the following code block to trigger the exception and have the chef-client send email to the specified email address:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ruby_block 'fail the run' do\n  block do\n    fail 'deliberately fail the run'\n  end\nend</pre>    <h3 id=\"etcd-locks\">etcd Locks</h3> <p>The following example shows how to prevent concurrent chef-client runs from both holding a lock on etcd:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">lock_key = \"#{node.chef_environment}/#{node.name}\"\n\nChef.event_handler do\n  on :converge_start do |run_context|\n    Etcd.lock_acquire(lock_key)\n  end\nend\n\nChef.event_handler do\n  on :converge_complete do\n    Etcd.lock_release(lock_key)\n  end\nend</pre>   <h3 id=\"hipchat-notifications\">HipChat Notifications</h3> <p>Event messages can be sent to a team communication tool like HipChat. For example, if a chef-client run fails:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef.event_handler do\n  on :run_failed do |exception|\n    hipchat_notify exception.message\n  end\nend</pre> <p>or send an alert on a configuration change:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">Chef.event_handler do\n  on :resource_updated do |resource, action|\n    if resource.to_s == 'template[/etc/nginx/nginx.conf]'\n      Helper.hipchat_message(\"#{resource} was updated by chef\")\n    end\n  end\nend</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/dsl_handler.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/dsl_handler.html</a>\n  </p>\n</div>\n","12-9/ctl_chef_solo":"<h1 id=\"chef-solo-executable\">chef-solo (executable)</h1> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The chef-client <a class=\"reference external\" href=\"https://docs.chef.io/ctl_chef_client.html#run-in-local-mode\">includes an option called local mode</a> (<code class=\"docutils literal\">--local-mode</code> or <code class=\"docutils literal\">-z</code>), which runs the chef-client against the chef-repo on the local machine as if it were running against a Chef server. Local mode was added to the chef-client in the 11.8 release. If you are running that version of the chef-client (or later), you should consider using local mode instead of using chef-solo.</p> </div> <p>chef-solo is an open source version of the chef-client that allows using cookbooks with nodes without requiring access to a Chef server. chef-solo runs locally and requires that a cookbook (and any of its dependencies) be on the same physical disk as the node. chef-solo is a limited-functionality version of the chef-client and <strong>does not support</strong> the following:</p> <ul class=\"simple\"> <li>Node data storage</li> <li>Search indexes</li> <li>Centralized distribution of cookbooks</li> <li>A centralized API that interacts with and integrates infrastructure components</li> <li>Authentication or authorization</li> <li>Persistent attributes</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">chef-solo can be run as a daemon.</p> </div> <p>The chef-solo executable is run as a command-line tool.</p>  <h2 id=\"options\">Options</h2> <p>This command has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">chef-solo OPTION VALUE OPTION VALUE ...</pre> <p>This command has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-c CONFIG</code>, <code class=\"docutils literal\">--config CONFIG</code>\n</dt> <dd>The configuration file to use.</dd> <dt>\n<code class=\"docutils literal\">-d</code>, <code class=\"docutils literal\">--daemonize</code>\n</dt> <dd>\n<p class=\"first\">Run the executable as a daemon. This option may not be used in the same command with the <code class=\"docutils literal\">--[no-]fork</code> option.</p> <p class=\"last\">This option is only available on machines that run in UNIX or Linux environments. For machines that are running Microsoft Windows that require similar functionality, use the <code class=\"docutils literal\">chef-client::service</code> recipe in the <code class=\"docutils literal\">chef-client</code> cookbook: <a class=\"reference external\" href=\"https://supermarket.chef.io/cookbooks/chef-client\">https://supermarket.chef.io/cookbooks/chef-client</a>. This will install a chef-client service under Microsoft Windows using the Windows Service Wrapper.</p> </dd> <dt>\n<code class=\"docutils literal\">-E ENVIRONMENT_NAME</code>, <code class=\"docutils literal\">--environment ENVIRONMENT_NAME</code>\n</dt> <dd>The name of the environment.</dd> <dt>\n<code class=\"docutils literal\">-f</code>, <code class=\"docutils literal\">--[no-]fork</code>\n</dt> <dd>Contain the chef-client run in a secondary process with dedicated RAM. When the chef-client run is complete, the RAM is returned to the master process. This option helps ensure that a chef-client uses a steady amount of RAM over time because the master process does not run recipes. This option also helps prevent memory leaks such as those that can be introduced by the code contained within a poorly designed cookbook. Use <code class=\"docutils literal\">--no-fork</code> to disable running the chef-client in fork node. Default value: <code class=\"docutils literal\">--fork</code>. This option may not be used in the same command with the <code class=\"docutils literal\">--daemonize</code> and <code class=\"docutils literal\">--interval</code> options.</dd> <dt>\n<code class=\"docutils literal\">-F FORMAT</code>, <code class=\"docutils literal\">--format FORMAT</code>\n</dt> <dd>\n<p class=\"first\">The output format: <code class=\"docutils literal\">doc</code> (default) or <code class=\"docutils literal\">min</code>.</p> <ul class=\"simple\"> <li>Use <code class=\"docutils literal\">doc</code> to print the progress of the chef-client run using full strings that display a summary of updates as they occur.</li> <li>Use <code class=\"docutils literal\">min</code> to print the progress of the chef-client run using single characters.</li> </ul> <p>A summary of updates is printed at the end of the chef-client run. A dot (<code class=\"docutils literal\">.</code>) is printed for events that do not have meaningful status information, such as loading a file or synchronizing a cookbook. For resources, a dot (<code class=\"docutils literal\">.</code>) is printed when the resource is up to date, an <code class=\"docutils literal\">S</code> is printed when the resource is skipped by <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code>, and a <code class=\"docutils literal\">U</code> is printed when the resource is updated.</p> <p class=\"last\">Other formatting options are available when those formatters are configured in the client.rb file using the <code class=\"docutils literal\">add_formatter</code> option.</p> </dd> <dt><code class=\"docutils literal\">--force-formatter</code></dt> <dd>Show formatter output instead of logger output.</dd> <dt><code class=\"docutils literal\">--force-logger</code></dt> <dd>Show logger output instead of formatter output.</dd> <dt>\n<code class=\"docutils literal\">-g GROUP</code>, <code class=\"docutils literal\">--group GROUP</code>\n</dt> <dd>The name of the group that owns a process. This is required when starting any executable as a daemon.</dd> <dt>\n<code class=\"docutils literal\">-h</code>, <code class=\"docutils literal\">--help</code>\n</dt> <dd>Show help for the command.</dd> <dt>\n<code class=\"docutils literal\">-i SECONDS</code>, <code class=\"docutils literal\">--interval SECONDS</code>\n</dt> <dd>The frequency (in seconds) at which the chef-client runs. When the chef-client is run at intervals, <code class=\"docutils literal\">--splay</code> and <code class=\"docutils literal\">--interval</code> values are applied before the chef-client run. This option may not be used in the same command with the <code class=\"docutils literal\">--[no-]fork</code> option.</dd> <dt>\n<code class=\"docutils literal\">-j PATH</code>, <code class=\"docutils literal\">--json-attributes PATH</code>\n</dt> <dd>\n<p class=\"first\">The path to a file that contains JSON data.</p> <p>Use this option to define a <code class=\"docutils literal\">run_list</code> object. For example, a JSON file similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">\"run_list\": [\n  \"recipe[base]\",\n  \"recipe[foo]\",\n  \"recipe[bar]\",\n  \"role[webserver]\"\n],</pre> <p>may be used by running <code class=\"docutils literal\">chef-client -j path/to/file.json</code>.</p> <p>In certain situations this option may be used to update <code class=\"docutils literal\">normal</code> attributes.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>Any other attribute type that is contained in this JSON file will be treated as a <code class=\"docutils literal\">normal</code> attribute. For example, attempting to update <code class=\"docutils literal\">override</code> attributes using the <code class=\"docutils literal\">-j</code> option:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"dev-99\",\n  \"description\": \"Install some stuff\",\n  \"override_attributes\": {\n    \"apptastic\": {\n      \"enable_apptastic\": \"false\",\n      \"apptastic_tier_name\": \"dev-99.bomb.com\"\n    }\n  }\n}</pre> <p>will result in a node object similar to:</p> <pre class=\"last highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"maybe-dev-99\",\n  \"normal\": {\n  \"name\": \"dev-99\",\n    \"description\": \"Install some stuff\",\n    \"override_attributes\": {\n      \"apptastic\": {\n        \"enable_apptastic\": \"false\",\n        \"apptastic_tier_name\": \"dev-99.bomb.com\"\n      }\n    }\n  }\n}</pre> </div> </dd> <dt>\n<code class=\"docutils literal\">-l LEVEL</code>, <code class=\"docutils literal\">--log_level LEVEL</code>\n</dt> <dd>The level of logging to be stored in a log file.</dd> <dt>\n<code class=\"docutils literal\">-L LOGLOCATION</code>, <code class=\"docutils literal\">--logfile c</code>\n</dt> <dd>The location of the log file. This is recommended when starting any executable as a daemon.</dd> <dt><code class=\"docutils literal\">--minimal-ohai</code></dt> <dd>Run the Ohai plugins for name detection and resource/provider selection and no other Ohai plugins. Set to <code class=\"docutils literal\">true</code> during integration testing to speed up test cycles.</dd> <dt><code class=\"docutils literal\">--[no-]color</code></dt> <dd>View colored output. Default setting: <code class=\"docutils literal\">--color</code>.</dd> <dt>\n<code class=\"docutils literal\">-N NODE_NAME</code>, <code class=\"docutils literal\">--node-name NODE_NAME</code>\n</dt> <dd>The name of the node.</dd> <dt>\n<code class=\"docutils literal\">-o RUN_LIST_ITEM</code>, <code class=\"docutils literal\">--override-runlist RUN_LIST_ITEM</code>\n</dt> <dd>Replace the current run-list with the specified items.</dd> <dt>\n<code class=\"docutils literal\">-r RECIPE_URL</code>, <code class=\"docutils literal\">--recipe-url RECIPE_URL</code>\n</dt> <dd>The URL location from which a remote cookbook tar.gz is to be downloaded.</dd> <dt><code class=\"docutils literal\">--run-lock-timeout SECONDS</code></dt> <dd>The amount of time (in seconds) to wait for a chef-client lock file to be deleted. Default value: not set (indefinite). Set to <code class=\"docutils literal\">0</code> to cause a second chef-client to exit immediately.</dd> <dt>\n<code class=\"docutils literal\">-s SECONDS</code>, <code class=\"docutils literal\">--splay SECONDS</code>\n</dt> <dd>A random number between zero and <code class=\"docutils literal\">splay</code> that is added to <code class=\"docutils literal\">interval</code>. Use splay to help balance the load on the Chef server by ensuring that many chef-client runs are not occuring at the same interval. When the chef-client is run at intervals, <code class=\"docutils literal\">--splay</code> and <code class=\"docutils literal\">--interval</code> values are applied before the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">-u USER</code>, <code class=\"docutils literal\">--user USER</code>\n</dt> <dd>The user that owns a process. This is required when starting any executable as a daemon.</dd> <dt>\n<code class=\"docutils literal\">-v</code>, <code class=\"docutils literal\">--version</code>\n</dt> <dd>The version of the chef-client.</dd> <dt>\n<code class=\"docutils literal\">-W</code>, <code class=\"docutils literal\">--why-run</code>\n</dt> <dd>Run the executable in why-run mode, which is a type of chef-client run that does everything except modify the system. Use why-run mode to understand why the chef-client makes the decisions that it makes and to learn more about the current and proposed state of the system.</dd> </dl>   <h2 id=\"run-as-non-root-user\">Run as Non-root User</h2> <p>chef-solo may be run as a non-root user. For example, the <code class=\"docutils literal\">sudoers</code> file can be updated similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># chef-solo privilege specification\nchef ALL=(ALL) NOPASSWD: /usr/bin/chef-solo</pre> <p>where <code class=\"docutils literal\">chef</code> is the name of the non-root user. This would allow chef-solo to run any command on the node without requiring a password.</p>   <h2 id=\"examples\">Examples</h2> <p><strong>Run chef-solo using solo.rb settings</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-solo -c ~/chef/solo.rb</pre> <p><strong>Use a URL</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-solo -c ~/solo.rb -j ~/node.json -r http://www.example.com/chef-solo.tar.gz</pre> <p>The tar.gz is archived into the <code class=\"docutils literal\">file_cache_path</code>, and then extracted to <code class=\"docutils literal\">cookbooks_path</code>.</p> <p><strong>Use a directory</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-solo -c ~/solo.rb -j ~/node.json</pre> <p>chef-solo will look in the solo.rb file to determine the directory in which cookbooks are located.</p> <p><strong>Use a URL for cookbook and JSON data</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-solo -c ~/solo.rb -j http://www.example.com/node.json -r http://www.example.com/chef-solo.tar.gz</pre> <p>where <code class=\"docutils literal\">-r</code> corresponds to <code class=\"docutils literal\">recipe_url</code> and <code class=\"docutils literal\">-j</code> corresponds to <code class=\"docutils literal\">json_attribs</code>, both of which are configuration options in solo.rb.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/ctl_chef_solo.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/ctl_chef_solo.html</a>\n  </p>\n</div>\n","12-9/config_rb_solo":"<h1 id=\"solo-rb\">solo.rb</h1> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The chef-client <a class=\"reference external\" href=\"https://docs.chef.io/ctl_chef_client.html#run-in-local-mode\">includes an option called local mode</a> (<code class=\"docutils literal\">--local-mode</code> or <code class=\"docutils literal\">-z</code>), which runs the chef-client against the chef-repo on the local machine as if it were running against a Chef server. Local mode was added to the chef-client in the 11.8 release. If you are running that version of the chef-client (or later), you should consider using local mode instead of using chef-solo.</p> </div> <p>A solo.rb file is used to specify the configuration details for chef-solo.</p> <ul class=\"simple\"> <li>This file is loaded every time this executable is run</li> <li>The default location in which chef-solo expects to find this file is <code class=\"docutils literal\">/etc/chef/solo.rb</code>; use the <code class=\"docutils literal\">--config</code> option from the command line to change this location</li> <li>This file is not created by default</li> <li>When a <code class=\"docutils literal\">solo.rb</code> file is present in this directory, the settings contained within that file will override the default configuration settings</li> </ul>  <h2 id=\"settings\">Settings</h2> <p>This configuration file has the following settings:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">add_formatter</code></dt> <dd>A 3rd-party formatter. (See <a class=\"reference external\" href=\"https://github.com/andreacampi/nyan-cat-chef-formatter\">nyan-cat</a> for an example of a 3rd-party formatter.) Each formatter requires its own entry.</dd> <dt><code class=\"docutils literal\">checksum_path</code></dt> <dd>The location in which checksum files are stored. These are used to validate individual cookbook files, such as recipes. The checksum itself is stored in the Chef server database and is then compared to a file in the checksum path that has a filename identical to the checksum.</dd> <dt><code class=\"docutils literal\">cookbook_path</code></dt> <dd>The sub-directory for cookbooks on the chef-client. This value can be a string or an array of file system locations, processed in the specified order. The last cookbook is considered to override local modifications.</dd> <dt><code class=\"docutils literal\">data_bag_path</code></dt> <dd>The location from which a data bag is loaded. Default value: <code class=\"docutils literal\">/var/chef/data_bags</code>.</dd> <dt><code class=\"docutils literal\">environment</code></dt> <dd>The name of the environment.</dd> <dt><code class=\"docutils literal\">environment_path</code></dt> <dd>The path to the environment. Default value: <code class=\"docutils literal\">/var/chef/environments</code>.</dd> <dt><code class=\"docutils literal\">file_backup_path</code></dt> <dd>The location in which backup files are stored. If this value is empty, backup files are stored in the directory of the target file. Default value: <code class=\"docutils literal\">/var/chef/backup</code>.</dd> <dt><code class=\"docutils literal\">file_cache_path</code></dt> <dd>The location in which cookbooks (and other transient data) files are stored when they are synchronized. This value can also be used in recipes to download files with the <strong>remote_file</strong> resource.</dd> <dt><code class=\"docutils literal\">json_attribs</code></dt> <dd>The path to a file that contains JSON data.</dd> <dt><code class=\"docutils literal\">lockfile</code></dt> <dd>The location of the chef-client lock file. This value is typically platform-dependent, so should be a location defined by <code class=\"docutils literal\">file_cache_path</code>. The default location of a lock file should not on an NF mount. Default value: a location defined by <code class=\"docutils literal\">file_cache_path</code>.</dd> <dt><code class=\"docutils literal\">log_level</code></dt> <dd>The level of logging to be stored in a log file. Possible levels: <code class=\"docutils literal\">:auto</code> (default), <code class=\"docutils literal\">debug</code>, <code class=\"docutils literal\">info</code>, <code class=\"docutils literal\">warn</code>, <code class=\"docutils literal\">error</code>, or <code class=\"docutils literal\">fatal</code>.</dd> <dt><code class=\"docutils literal\">log_location</code></dt> <dd>The location of the log file. Default value: <code class=\"docutils literal\">STDOUT</code>.</dd> <dt><code class=\"docutils literal\">minimal_ohai</code></dt> <dd>Run the Ohai plugins for name detection and resource/provider selection and no other Ohai plugins. Set to <code class=\"docutils literal\">true</code> during integration testing to speed up test cycles.</dd> <dt><code class=\"docutils literal\">node_name</code></dt> <dd>The name of the node.</dd> <dt><code class=\"docutils literal\">recipe_url</code></dt> <dd>The URL location from which a remote cookbook tar.gz is to be downloaded.</dd> <dt><code class=\"docutils literal\">rest_timeout</code></dt> <dd>The time (in seconds) after which an HTTP REST request is to time out. Default value: <code class=\"docutils literal\">300</code>.</dd> <dt><code class=\"docutils literal\">role_path</code></dt> <dd>The location in which role files are located. Default value: <code class=\"docutils literal\">/var/chef/roles</code>.</dd> <dt><code class=\"docutils literal\">run_lock_timeout</code></dt> <dd>The amount of time (in seconds) to wait for a chef-client lock file to be deleted. A chef-client run will not start when a lock file is present. If a lock file is not deleted before this time expires, the pending chef-client run will exit. Default value: not set (indefinite). Set to <code class=\"docutils literal\">0</code> to cause a second chef-client to exit immediately.</dd> <dt><code class=\"docutils literal\">sandbox_path</code></dt> <dd>The location in which cookbook files are stored (temporarily) during upload.</dd> <dt><code class=\"docutils literal\">solo</code></dt> <dd>Run the chef-client in chef-solo mode. This setting determines if the chef-client is to attempt to communicate with the Chef server. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">syntax_check_cache_path</code></dt> <dd>All files in a cookbook must contain valid Ruby syntax. Use this setting to specify the location in which knife caches information about files that have been checked for valid Ruby syntax.</dd> <dt><code class=\"docutils literal\">umask</code></dt> <dd>The file mode creation mask, or umask. Default value: <code class=\"docutils literal\">0022</code>.</dd> <dt><code class=\"docutils literal\">verbose_logging</code></dt> <dd>Set the log level. Options: <code class=\"docutils literal\">true</code>, <code class=\"docutils literal\">nil</code>, and <code class=\"docutils literal\">false</code>. When this is set to <code class=\"docutils literal\">false</code>, notifications about individual resources being processed are suppressed (and are output at the <code class=\"docutils literal\">:info</code> logging level). Setting this to <code class=\"docutils literal\">false</code> can be useful when a chef-client is run as a daemon. Default value: <code class=\"docutils literal\">nil</code>.</dd> </dl>   <h2 id=\"example\">Example</h2> <p>A sample solo.rb file that contains all possible settings (listed alphabetically):</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">add_formatter :nyan\nadd_formatter :foo\nadd_formatter :bar\nchecksum_path '/var/chef/checksums'\ncookbook_path [\n               '/var/chef/cookbooks',\n               '/var/chef/site-cookbooks'\n              ]\ndata_bag_path '/var/chef/data_bags'\nenvironment 'production'\nenvironment_path '/var/chef/environments'\nfile_backup_path '/var/chef/backup'\nfile_cache_path '/var/chef/cache'\njson_attribs nil\nlockfile nil\nlog_level :info\nlog_location STDOUT\nnode_name 'mynode.example.com'\nrecipe_url 'http://path/to/remote/cookbook'\nrest_timeout 300\nrole_path '/var/chef/roles'\nsandbox_path 'path_to_folder'\nsolo false\nsyntax_check_cache_path\numask 0022\nverbose_logging nil</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/config_rb_solo.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/config_rb_solo.html</a>\n  </p>\n</div>\n","12-9/chef_solo":"<h1 id=\"chef-solo\">chef-solo</h1> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The chef-client <a class=\"reference external\" href=\"https://docs.chef.io/ctl_chef_client.html#run-in-local-mode\">includes an option called local mode</a> (<code class=\"docutils literal\">--local-mode</code> or <code class=\"docutils literal\">-z</code>), which runs the chef-client against the chef-repo on the local machine as if it were running against a Chef server. Local mode was added to the chef-client in the 11.8 release. If you are running that version of the chef-client (or later), you should consider using local mode instead of using chef-solo.</p> </div> <p>chef-solo is an open source version of the chef-client that allows using cookbooks with nodes without requiring access to a Chef server. chef-solo runs locally and requires that a cookbook (and any of its dependencies) be on the same physical disk as the node. chef-solo is a limited-functionality version of the chef-client and <strong>does not support</strong> the following:</p> <ul class=\"simple\"> <li>Node data storage</li> <li>Search indexes</li> <li>Centralized distribution of cookbooks</li> <li>A centralized API that interacts with and integrates infrastructure components</li> <li>Authentication or authorization</li> <li>Persistent attributes</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">chef-solo can be run as a daemon.</p> </div>  <h2 id=\"cookbooks\">Cookbooks</h2> <p>chef-solo supports two locations from which cookbooks can be run:</p> <ul class=\"simple\"> <li>A local directory.</li> <li>A URL at which a tar.gz archive is located.</li> </ul> <p>Using a tar.gz archive is the more common approach, but requires that cookbooks be added to an archive. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ tar zcvf chef-solo.tar.gz ./cookbooks</pre> <p>If multiple cookbook directories are being used, chef-solo expects the tar.gz archive to have a directory structure similar to the following:</p> <pre class=\"highlight-python\" data-language=\"python\">cookbooks/\n  |---- cbname1/\n    |--attributes/ ... etc\n  ...\n  |---- cbname2/\n    |--attributes/</pre> <p>The <code class=\"docutils literal\">cookbook_path</code> variable in the solo.rb file must include both directories. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ tar zcvf chef-solo.tar.gz ./cookbooks ./site-cookbooks</pre> <p>When the tar.gz archive contains all of the cookbooks required by chef-solo, upload it to the web server from which chef-solo will access the archive.</p>   <h2 id=\"attributes\">Attributes</h2> <p>chef-solo does not interact with the Chef server. Consequently, node-specific attributes must be located in a JSON file on the target system, a remote location (such as Amazon Simple Storage Service (S3)), or a web server on the local network.</p> <p>The JSON file must also specify the recipes that are part of the run-list. For example:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"resolver\": {\n    \"nameservers\": [ \"10.0.0.1\" ],\n    \"search\":\"int.example.com\"\n  },\n  \"run_list\": [ \"recipe[resolver]\" ]\n}</pre>   <h2 id=\"data-bags\">Data Bags</h2> <p>A data bag is defined using JSON. chef-solo will look for data bags in <code class=\"docutils literal\">/var/chef/data_bags</code>, but this location can be modified by changing the setting in solo.rb. For example, the following setting in solo.rb:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">data_bag_path '/var/chef-solo/data_bags'</pre> <p>Create a data bag by creating folders. For example:</p> <pre class=\"highlight-bash\" data-language=\"bash\">mkdir /var/chef-solo/data_bags</pre> <p>and:</p> <pre class=\"highlight-bash\" data-language=\"bash\">mkdir /var/chef-solo/data_bags/admins</pre> <p>and then create a JSON file in that location:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"id\": \"ITEM_NAME\"\n}</pre> <p>where the name of the file is the <code class=\"docutils literal\">ITEM_NAME</code>, for example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">/var/chef-solo/data_bags/admins/ITEM_NAME.json</pre>   <h2 id=\"roles\">Roles</h2> <p>A role is defined using JSON or the Ruby DSL. chef-solo will look for roles in <code class=\"docutils literal\">/var/chef/roles</code>, but this location can be modified by changing the setting for <code class=\"docutils literal\">role_path</code> in solo.rb. For example, the following setting in solo.rb:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">role_path '/var/chef-solo/roles'</pre> <p>Role data looks like the following in JSON:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"test\",\n  \"default_attributes\": { },\n  \"override_attributes\": { },\n  \"json_class\": \"Chef::Role\",\n  \"description\": \"This is just a test role, no big deal.\",\n  \"chef_type\": \"role\",\n  \"run_list\": [ \"recipe[test]\" ]\n}</pre> <p>and like the following in the Ruby DSL:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">name 'test'\ndescription 'This is just a test role, no big deal.'\nrun_list 'recipe[test]'</pre> <p>and finally, JSON data passed to chef-solo:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">{ 'run_list': 'role[test]' }</pre>   <h2 id=\"environments\">Environments</h2> <p>An environment is defined using JSON or the Ruby DSL. chef-solo will look for environments in <code class=\"docutils literal\">/var/chef/environments</code>, but this location can be modified by changing the setting for <code class=\"docutils literal\">environment_path</code> in solo.rb. For example, the following setting in solo.rb:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">environment_path '/var/chef-solo/environments'</pre> <p>Environment data looks like the following in JSON:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"dev\",\n  \"default_attributes\": {\n    \"apache2\": {\n      \"listen_ports\": [\n        \"80\",\n        \"443\"\n      ]\n    }\n  },\n  \"json_class\": \"Chef::Environment\",\n    \"description\": \"\",\n    \"cookbook_versions\": {\n    \"couchdb\": \"= 11.0.0\"\n  },\n  \"chef_type\": \"environment\"\n  }</pre> <p>and like the following in the Ruby DSL:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">name 'environment_name'\ndescription 'environment_description'\ncookbook OR cookbook_versions  'cookbook' OR 'cookbook' =&gt; 'cookbook_version'\ndefault_attributes 'node' =&gt; { 'attribute' =&gt; [ 'value', 'value', 'etc.' ] }\noverride_attributes 'node' =&gt; { 'attribute' =&gt; [ 'value', 'value', 'etc.' ] }</pre>   <h2 id=\"chef-solo-executable\">chef-solo (executable)</h2> <p>The chef-solo executable is run as a command-line tool.</p>  <h3 id=\"options\">Options</h3> <p>This command has the following syntax:</p> <pre class=\"highlight-bash\" data-language=\"bash\">chef-solo OPTION VALUE OPTION VALUE ...</pre> <p>This command has the following options:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-c CONFIG</code>, <code class=\"docutils literal\">--config CONFIG</code>\n</dt> <dd>The configuration file to use.</dd> <dt>\n<code class=\"docutils literal\">-d</code>, <code class=\"docutils literal\">--daemonize</code>\n</dt> <dd>\n<p class=\"first\">Run the executable as a daemon. This option may not be used in the same command with the <code class=\"docutils literal\">--[no-]fork</code> option.</p> <p class=\"last\">This option is only available on machines that run in UNIX or Linux environments. For machines that are running Microsoft Windows that require similar functionality, use the <code class=\"docutils literal\">chef-client::service</code> recipe in the <code class=\"docutils literal\">chef-client</code> cookbook: <a class=\"reference external\" href=\"https://supermarket.chef.io/cookbooks/chef-client\">https://supermarket.chef.io/cookbooks/chef-client</a>. This will install a chef-client service under Microsoft Windows using the Windows Service Wrapper.</p> </dd> <dt>\n<code class=\"docutils literal\">-E ENVIRONMENT_NAME</code>, <code class=\"docutils literal\">--environment ENVIRONMENT_NAME</code>\n</dt> <dd>The name of the environment.</dd> <dt>\n<code class=\"docutils literal\">-f</code>, <code class=\"docutils literal\">--[no-]fork</code>\n</dt> <dd>Contain the chef-client run in a secondary process with dedicated RAM. When the chef-client run is complete, the RAM is returned to the master process. This option helps ensure that a chef-client uses a steady amount of RAM over time because the master process does not run recipes. This option also helps prevent memory leaks such as those that can be introduced by the code contained within a poorly designed cookbook. Use <code class=\"docutils literal\">--no-fork</code> to disable running the chef-client in fork node. Default value: <code class=\"docutils literal\">--fork</code>. This option may not be used in the same command with the <code class=\"docutils literal\">--daemonize</code> and <code class=\"docutils literal\">--interval</code> options.</dd> <dt>\n<code class=\"docutils literal\">-F FORMAT</code>, <code class=\"docutils literal\">--format FORMAT</code>\n</dt> <dd>\n<p class=\"first\">The output format: <code class=\"docutils literal\">doc</code> (default) or <code class=\"docutils literal\">min</code>.</p> <ul class=\"simple\"> <li>Use <code class=\"docutils literal\">doc</code> to print the progress of the chef-client run using full strings that display a summary of updates as they occur.</li> <li>Use <code class=\"docutils literal\">min</code> to print the progress of the chef-client run using single characters.</li> </ul> <p>A summary of updates is printed at the end of the chef-client run. A dot (<code class=\"docutils literal\">.</code>) is printed for events that do not have meaningful status information, such as loading a file or synchronizing a cookbook. For resources, a dot (<code class=\"docutils literal\">.</code>) is printed when the resource is up to date, an <code class=\"docutils literal\">S</code> is printed when the resource is skipped by <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code>, and a <code class=\"docutils literal\">U</code> is printed when the resource is updated.</p> <p class=\"last\">Other formatting options are available when those formatters are configured in the client.rb file using the <code class=\"docutils literal\">add_formatter</code> option.</p> </dd> <dt><code class=\"docutils literal\">--force-formatter</code></dt> <dd>Show formatter output instead of logger output.</dd> <dt><code class=\"docutils literal\">--force-logger</code></dt> <dd>Show logger output instead of formatter output.</dd> <dt>\n<code class=\"docutils literal\">-g GROUP</code>, <code class=\"docutils literal\">--group GROUP</code>\n</dt> <dd>The name of the group that owns a process. This is required when starting any executable as a daemon.</dd> <dt>\n<code class=\"docutils literal\">-h</code>, <code class=\"docutils literal\">--help</code>\n</dt> <dd>Show help for the command.</dd> <dt>\n<code class=\"docutils literal\">-i SECONDS</code>, <code class=\"docutils literal\">--interval SECONDS</code>\n</dt> <dd>The frequency (in seconds) at which the chef-client runs. When the chef-client is run at intervals, <code class=\"docutils literal\">--splay</code> and <code class=\"docutils literal\">--interval</code> values are applied before the chef-client run. This option may not be used in the same command with the <code class=\"docutils literal\">--[no-]fork</code> option.</dd> <dt>\n<code class=\"docutils literal\">-j PATH</code>, <code class=\"docutils literal\">--json-attributes PATH</code>\n</dt> <dd>\n<p class=\"first\">The path to a file that contains JSON data.</p> <p>Use this option to define a <code class=\"docutils literal\">run_list</code> object. For example, a JSON file similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">\"run_list\": [\n  \"recipe[base]\",\n  \"recipe[foo]\",\n  \"recipe[bar]\",\n  \"role[webserver]\"\n],</pre> <p>may be used by running <code class=\"docutils literal\">chef-client -j path/to/file.json</code>.</p> <p>In certain situations this option may be used to update <code class=\"docutils literal\">normal</code> attributes.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>Any other attribute type that is contained in this JSON file will be treated as a <code class=\"docutils literal\">normal</code> attribute. For example, attempting to update <code class=\"docutils literal\">override</code> attributes using the <code class=\"docutils literal\">-j</code> option:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"dev-99\",\n  \"description\": \"Install some stuff\",\n  \"override_attributes\": {\n    \"apptastic\": {\n      \"enable_apptastic\": \"false\",\n      \"apptastic_tier_name\": \"dev-99.bomb.com\"\n    }\n  }\n}</pre> <p>will result in a node object similar to:</p> <pre class=\"last highlight-javascript\" data-language=\"javascript\">{\n  \"name\": \"maybe-dev-99\",\n  \"normal\": {\n  \"name\": \"dev-99\",\n    \"description\": \"Install some stuff\",\n    \"override_attributes\": {\n      \"apptastic\": {\n        \"enable_apptastic\": \"false\",\n        \"apptastic_tier_name\": \"dev-99.bomb.com\"\n      }\n    }\n  }\n}</pre> </div> </dd> <dt>\n<code class=\"docutils literal\">-l LEVEL</code>, <code class=\"docutils literal\">--log_level LEVEL</code>\n</dt> <dd>The level of logging to be stored in a log file.</dd> <dt>\n<code class=\"docutils literal\">-L LOGLOCATION</code>, <code class=\"docutils literal\">--logfile c</code>\n</dt> <dd>The location of the log file. This is recommended when starting any executable as a daemon.</dd> <dt><code class=\"docutils literal\">--minimal-ohai</code></dt> <dd>Run the Ohai plugins for name detection and resource/provider selection and no other Ohai plugins. Set to <code class=\"docutils literal\">true</code> during integration testing to speed up test cycles.</dd> <dt><code class=\"docutils literal\">--[no-]color</code></dt> <dd>View colored output. Default setting: <code class=\"docutils literal\">--color</code>.</dd> <dt>\n<code class=\"docutils literal\">-N NODE_NAME</code>, <code class=\"docutils literal\">--node-name NODE_NAME</code>\n</dt> <dd>The name of the node.</dd> <dt>\n<code class=\"docutils literal\">-o RUN_LIST_ITEM</code>, <code class=\"docutils literal\">--override-runlist RUN_LIST_ITEM</code>\n</dt> <dd>Replace the current run-list with the specified items.</dd> <dt>\n<code class=\"docutils literal\">-r RECIPE_URL</code>, <code class=\"docutils literal\">--recipe-url RECIPE_URL</code>\n</dt> <dd>The URL location from which a remote cookbook tar.gz is to be downloaded.</dd> <dt><code class=\"docutils literal\">--run-lock-timeout SECONDS</code></dt> <dd>The amount of time (in seconds) to wait for a chef-client lock file to be deleted. Default value: not set (indefinite). Set to <code class=\"docutils literal\">0</code> to cause a second chef-client to exit immediately.</dd> <dt>\n<code class=\"docutils literal\">-s SECONDS</code>, <code class=\"docutils literal\">--splay SECONDS</code>\n</dt> <dd>A random number between zero and <code class=\"docutils literal\">splay</code> that is added to <code class=\"docutils literal\">interval</code>. Use splay to help balance the load on the Chef server by ensuring that many chef-client runs are not occuring at the same interval. When the chef-client is run at intervals, <code class=\"docutils literal\">--splay</code> and <code class=\"docutils literal\">--interval</code> values are applied before the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">-u USER</code>, <code class=\"docutils literal\">--user USER</code>\n</dt> <dd>The user that owns a process. This is required when starting any executable as a daemon.</dd> <dt>\n<code class=\"docutils literal\">-v</code>, <code class=\"docutils literal\">--version</code>\n</dt> <dd>The version of the chef-client.</dd> <dt>\n<code class=\"docutils literal\">-W</code>, <code class=\"docutils literal\">--why-run</code>\n</dt> <dd>Run the executable in why-run mode, which is a type of chef-client run that does everything except modify the system. Use why-run mode to understand why the chef-client makes the decisions that it makes and to learn more about the current and proposed state of the system.</dd> </dl>   <h3 id=\"examples\">Examples</h3> <p><strong>Run chef-solo using solo.rb settings</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-solo -c ~/chef/solo.rb</pre> <p><strong>Use a URL</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-solo -c ~/solo.rb -j ~/node.json -r http://www.example.com/chef-solo.tar.gz</pre> <p>The tar.gz is archived into the <code class=\"docutils literal\">file_cache_path</code>, and then extracted to <code class=\"docutils literal\">cookbooks_path</code>.</p> <p><strong>Use a directory</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-solo -c ~/solo.rb -j ~/node.json</pre> <p>chef-solo will look in the solo.rb file to determine the directory in which cookbooks are located.</p> <p><strong>Use a URL for cookbook and JSON data</strong></p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chef-solo -c ~/solo.rb -j http://www.example.com/node.json -r http://www.example.com/chef-solo.tar.gz</pre> <p>where <code class=\"docutils literal\">-r</code> corresponds to <code class=\"docutils literal\">recipe_url</code> and <code class=\"docutils literal\">-j</code> corresponds to <code class=\"docutils literal\">json_attribs</code>, both of which are configuration options in solo.rb.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/chef_solo.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/chef_solo.html</a>\n  </p>\n</div>\n","server_12-5/install_server_pre":"<h1 id=\"prerequisites\">Prerequisites</h1> <p>The following prerequisites apply to every installation of the Chef server.</p>  <h2 id=\"supported-platforms\">Supported Platforms</h2> <p>The following table lists the supported platforms for the Chef server:</p> <table class=\"docutils\"> <colgroup> <col width=\"56%\"> <col width=\"20%\"> <col width=\"24%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Platform</th> <th class=\"head\">Architecture</th> <th class=\"head\">Version</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>CentOS</td> <td> </td> <td>\n<code class=\"docutils literal\">5.x</code>, <code class=\"docutils literal\">6.x</code>, <code class=\"docutils literal\">7.x</code>\n</td> </tr> <tr class=\"row-odd\">\n<td>Oracle Linux</td> <td> </td> <td>\n<code class=\"docutils literal\">5.x</code>, <code class=\"docutils literal\">6.x</code>\n</td> </tr> <tr class=\"row-even\">\n<td>Red Hat Enterprise Linux</td> <td> </td> <td>\n<code class=\"docutils literal\">5.x</code>, <code class=\"docutils literal\">6.x</code>, <code class=\"docutils literal\">7.x</code>\n</td> </tr> <tr class=\"row-odd\">\n<td>Ubuntu</td> <td> </td> <td>\n<code class=\"docutils literal\">12.04 LTS</code>, <code class=\"docutils literal\">14.04 LTS</code>\n</td> </tr> </tbody> </table>  <h3 id=\"unsupported\">Unsupported</h3> <p>The following platforms are not supported:</p> <ul class=\"simple\"> <li>Any Linux or UNIX distribution that is not listed as a supported platform.</li> <li>Microsoft Windows</li> <li>32-bit architectures</li> </ul>    <h2 id=\"capacity-planning\">Capacity Planning</h2> <p>Read the <a class=\"reference external\" href=\"server_components#capacity-planning\">guidance around capacity planning</a> for information about how to choose the right toplogy for the Chef server.</p>   <h2 id=\"software-requirements\">Software Requirements</h2> <p>Before installing the Chef server, ensure that each machine has the following installed and configured properly:</p> <ul class=\"simple\"> <li>\n<strong>Hostnames</strong> — Ensure that all systems have properly configured hostnames. The hostname for the Chef server must be a FQDN, including the domain suffix, and must be resolvable. See <a class=\"reference external\" href=\"https://docs.chef.io/install_server_pre.html#hostnames\">Hostnames, FQDNs</a> for more information</li> <li>\n<strong>FQDNs</strong> — Ensure that all systems have a resolvable FQDN</li> <li>\n<strong>NTP</strong> — Ensure that every server is connected to NTP; the Chef server is sensitive to clock drift</li> <li>\n<strong>Mail Relay</strong> — The Chef server uses email to send notifications for various events; a local mail transfer agent should be installed and available to the Chef server</li> <li>\n<strong>cron</strong> — Periodic maintenance tasks are performed using cron</li> <li>\n<strong>git</strong> — git must be installed so that various internal services can confirm revisions</li> <li>\n<strong>libfreetype and libpng</strong> — These libraries are required</li> <li>\n<strong>Apache Qpid</strong> — This daemon must be disabled on CentOS and Red Hat systems</li> <li>\n<strong>Required users</strong> — If the environment in which the Chef server will run has restrictions on the creation of local user and group accounts, ensure that the correct users and groups exist before reconfiguring</li> <li>\n<strong>Firewalls and ports</strong> — If host-based firewalls (iptables, ufw, etc.) are being used, ensure that ports 80 and 443 are open. These ports are used by the <strong>nginx</strong> service</li> <li>\n<strong>Hostname</strong> — The hostname for the Chef server must be a FQDN, including the domain suffix, and must be resolvable. See <a class=\"reference external\" href=\"https://docs.chef.io/install_server_pre.html#hostnames\">Hostnames, FQDNs</a> for more information</li> </ul> <p>In addition:</p> <ul class=\"simple\"> <li>\n<strong>Browser</strong> — Firefox, Google Chrome, Safari, or Internet Explorer (versions 9 or better)</li> <li>\n<strong>chef-client communication with the Chef server</strong> Every node that will be configured by the chef-client and every workstation that will upload data to the Chef server must be able to communicate with the Chef server</li> </ul>  <h3 id=\"uids-and-gids\">UIDs and GIDs</h3> <p>The installation process for the Chef server requires the use of at least two user and group identifiers (UIDs and GIDs). These are used to create the <code class=\"docutils literal\">opscode</code> and <code class=\"docutils literal\">opscode-pgsql</code> users and their default groups.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>The creation of required user and group identifiers is done <strong>automatically</strong> during the installation process for the Chef server; however, the following user and group accounts <strong>may</strong> be created in advance of installing the Chef server if specific UIDs and GIDs are preferred. The user <strong>and</strong> group must be created as a pair to satisfy reconfiguration requirements.</p> <ul class=\"last simple\"> <li>A local user account named <code class=\"docutils literal\">opscode</code> under which services will run</li> <li>A local user account named <code class=\"docutils literal\">opscode-pgsql</code> that is used by PostgreSQL</li> <li>A group account for each user account, one named <code class=\"docutils literal\">opscode</code> and the other named <code class=\"docutils literal\">opscode-pgsql</code> under which services will run</li> </ul> </div> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p>If the UID and GID of <code class=\"docutils literal\">opscode</code> and <code class=\"docutils literal\">opscode-pgsql</code> do not match on both backend Chef server machines, a high availability configuration will not run correctly.</p> <p>The embedded Chef server cookbooks can handle two cases:</p> <ul class=\"simple\"> <li>Both <code class=\"docutils literal\">opscode</code> and <code class=\"docutils literal\">opscode-pgsql</code> user and group not found on the new server</li> <li>Both <code class=\"docutils literal\">opscode</code> and <code class=\"docutils literal\">opscode-pgsql</code> user and group found on the new server</li> </ul> <p>Having only the group and not the corresponding users present during a chef-server-ctl reconfigure is unsupported and may lead to an error in the reconfiguration run.</p> <p>To determine the current range of IDs, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ grep -E '(UID|GID)' /etc/login.defs</pre> <p>The defaults for CentOS and Red Hat Enterprise Linux systems look like this:</p> <pre class=\"highlight-bash\" data-language=\"bash\">UID_MIN             500\nUID_MAX           60000\nGID_MIN             500\nGID_MAX           60000</pre> <p>If the defaults have been changed for any reason, and if that change would result in less than 2 UID/GIDs being available to the <code class=\"docutils literal\">useradd</code> program, edit <code class=\"docutils literal\">/etc/login.defs</code> with changes to make at least 2 more UIDs and GIDs available for association. The currently used ID ranges for UIDs and GIDs can be found in <code class=\"docutils literal\">/etc/passwd</code> and <code class=\"docutils literal\">/etc/group</code>, respectively.</p> <p class=\"last\">If the <code class=\"docutils literal\">opscode</code> and <code class=\"docutils literal\">opscode-pgsql</code> user and group identifiers exist prior to installing the Chef server, the Chef server installation process will use the existing identifiers instead of creating them.</p> </div>   <h3 id=\"selinux\">SELinux</h3> <p>On CentOS and Red Hat Enterprise Linux systems, SELinux is enabled in enforcing mode by default. The Chef server does not have a profile available to run under SELinux. In order for the Chef server to run, SELinux must be disabled or set to <code class=\"docutils literal\">Permissive</code> mode.</p> <p>To determine if SELinux is installed, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ getenforce</pre> <p>If a response other than <code class=\"docutils literal\">\"Disabled\"</code> or <code class=\"docutils literal\">\"Permissive\"</code> is returned, SELinux must be disabled.</p> <p>To set SELinux to <code class=\"docutils literal\">Permissive</code> mode, run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ setenforce Permissive</pre> <p>and then check the status:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ getenforce</pre>   <h3 id=\"apparmor\">AppArmor</h3> <p>On Ubuntu systems, AppArmor is enabled in enforcing mode by default. Chef products do not have a profile available to run under AppArmor. In order for the Chef products to run, AppArmor must set to <code class=\"docutils literal\">Complaining</code> mode or disabled.</p> <p>To determine if AppArmor is installed, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo apparmor_status</pre> <p>To install AppArmor, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo apt-get install apparmor-utils —yes</pre> <p>If a response other than <code class=\"docutils literal\">\"0 processes are in enforce mode\"</code> or <code class=\"docutils literal\">\"0 profiles are in enforce mode.\"</code> is returned, AppArmor must be set to <code class=\"docutils literal\">Complaining</code> mode or disabled.</p> <p>To set AppArmor to <code class=\"docutils literal\">Complaining</code> mode, run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo aa-complain /etc/apparmor.d/*</pre> <p>Or to disable AppArmor entirely, run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo invoke-rc.d apparmor kill\n$ sudo update-rc.d -f apparmor remove</pre> <p>and then check the status:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo apparmor_status</pre>   <h3 id=\"apache-qpid\">Apache Qpid</h3> <p>On CentOS and Red Hat Enterprise Linux systems, the Apache Qpid daemon is installed by default. The Chef server uses RabbitMQ for messaging. Because both Apache Qpid and RabbitMQ share the same protocol, Apache Qpid must be disabled.</p> <p>To determine if Apache Qpid is installed, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ rpm -qa | grep qpid</pre> <p>If Apache Qpid is installed, a response similar to the following is displayed:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ qpid-cpp-server-0.12-6.el6.x86_64</pre> <p>To disable Apache Qpid run:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ service qpidd stop</pre> <p>and then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chkconfig --del qpidd</pre>   <h3 id=\"cron\">cron</h3> <p>Periodic maintenance tasks are performed on the Chef server servers via cron and the <code class=\"docutils literal\">/etc/cron.d</code> directory. With certain CentOS 6 configurations, an additional step is required to install crontab:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ yum install crontabs</pre>   <h3 id=\"enterprise-linux-updates\">Enterprise Linux Updates</h3> <p>The Chef server requires an x86_64 compatible systems architecture. When the Chef server is installed on Red Hat Enterprise Linux or CentOS, run <code class=\"docutils literal\">yum update</code> prior to installing the Chef server. This will ensure those platforms are fully compatible with this requirement.</p>   <h3 id=\"hostnames\">Hostnames</h3> <p>The hostname for the Chef server may be specified using a FQDN or an IP address. This hostname must be resolvable. For example, a Chef server running in a production environment with a resolvable FQDN hostname can be added the DNS system. But when deploying Chef server into a testing environment, adding the hostname to the <code class=\"docutils literal\">/etc/hosts</code> file is enough to ensure that hostname is resolvable.</p> <ul> <li>\n<p class=\"first\"><strong>FQDN Hostnames</strong> When the hostname for the Chef server is a FQDN be sure to include the domain suffix. For example, something like <code class=\"docutils literal\">mychefserver.example.com</code> (and not something like <code class=\"docutils literal\">mychefserver</code>).</p> </li> <li>\n<p class=\"first\"><strong>IP Address Hostnames</strong> When the Chef server is run in IPv6 mode, a hostname specified using an IP address must also be bracketed (<code class=\"docutils literal\">[ ]</code>) or the Chef server will not be able to recognize it as an IPv6 address. For example:</p> <blockquote> <div>\n<pre class=\"highlight-ruby\" data-language=\"ruby\">bookshelf['url'] \"https://[2001:db8:85a3:8d3:1319:8a2e:370:7348]\"</pre> </div>\n</blockquote> </li> </ul> <p>The <code class=\"docutils literal\">api_fqdn</code> setting can be added to the private-chef.rb file (it is not there by default). When added, its value should be equal to the FQDN or IP address for the service URI used by the Chef server. Then configure the same value for the <code class=\"docutils literal\">bookshelf['vip']</code> setting prior to installing the Chef server. For example: <code class=\"docutils literal\">api_fqdn \"chef.example.com\"</code> or <code class=\"docutils literal\">api_fqdn 123.45.67.890</code>.</p>  <h4 id=\"configure-hostnames\">Configure Hostnames</h4> <p>Use the following sections to verify the hostnames that is used by the Chef server.</p> <p><strong>To verify if a hostname is a FQDN</strong></p> <p>To verify if a hostname is a FQDN, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ hostname</pre> <p>If the hostname is a FQDN, it will return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ mychefserver.example.com</pre> <p>If the hostname is not a FQDN, it must be configured so that it is one.</p> <p><strong>To verify the FQDN is all lowercase</strong></p> <p>To verify if the alphabetic parts of a FQDN are all lowercase, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ hostname -f | grep -E '^([[:digit:]]|[[:lower:]]|\\.|-|_)+$' &amp;&amp; echo yes</pre> <p>If the hostname is all lowercase, it will return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">mychefserver.example.com\nyes</pre> <p>If the hostname’s alphabetic parts are not all lowercase, it must be configured so that they are.</p> <p><strong>To verify a hostname is resolvable</strong></p> <p>To verify is a hostname is resolvable, run the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ hostname -f</pre> <p>If the hostname is resolvable, it will return something like:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ mychefserver.example.com</pre> <p><strong>To change a hostname</strong></p> <p>In some cases, the hostname for the Chef server needs to be updated. The process for updating a hostname varies, depending on the platform on which the Chef server will run. Refer to the manual for the platform or contact a local systems administrator for specific guidance for a specific platform. The following example shows how a hostname can be changed when running Red Hat or CentOS:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ sudo hostname 'mychefserver.example.com'</pre> <p>and then:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ echo \"mychefserver.example.com\" | sudo tee /etc/hostname</pre> <p><strong>To add a hostname to /etc/hosts</strong></p> <p>If a hostname is not resolvable, refer to a local systems administrator for specific guidance on how to add the hostname to the DNS system. If the Chef server is being into a testing environment, just add the hostname to <code class=\"docutils literal\">/etc/hosts</code>. The following example shows how a hostname can be added to <code class=\"docutils literal\">/etc/hosts</code> when running Red Hat or CentOS:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ echo -e \"127.0.0.2 `hostname` `hostname -s`\" | sudo tee -a /etc/hosts</pre>   <h4 id=\"chef-analytics-title\">Chef Analytics</h4> <p>The hostname for the Chef Analytics server may be specified using a FQDN or an IP address. This hostname must be resolvable. For example, a Chef Analytics server that is running in a production environment with a resolvable FQDN hostname can be added in the DNS system. But when deploying Chef Analytics into a testing environment, adding the hostname to the <code class=\"docutils literal\">/etc/hosts</code> file is enough to ensure that hostname is resolvable.</p> <ul class=\"simple\"> <li>\n<strong>FQDN Hostnames</strong> When the hostname for the Chef Analytics server is a FQDN be sure to include the domain suffix. For example, something like <code class=\"docutils literal\">myanalyticsserver.example.com</code> (and not something like <code class=\"docutils literal\">myanalyticsserver</code>).</li> </ul> <p>The <code class=\"docutils literal\">analytics_fqdn</code> setting must be added to the opscode-analytics.rb file (it is not there by default). Its value should be equal to the FQDN or IP address for the service URI used by the Chef Analytics server. For example: <code class=\"docutils literal\">analytics_fqdn \"chef-analytics.example.com\"</code> or <code class=\"docutils literal\">analytics_fqdn 123.45.67.890</code>.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The FQDN for the Chef Analytics server should not exceed 64 characters when using OpenSSL. OpenSSL requires the <code class=\"docutils literal\">CN</code> in a certificate to be no longer than 64 characters. By default, Chef Analytics uses the FQDN of the server to determine the common name (<code class=\"docutils literal\">CN</code>). If the FQDN of the Chef Analytics server is longer than 64 characters, the <code class=\"docutils literal\">chef-server-ctl reconfigure</code> command will not fail, but an empty certificate file will be created. Nginx will not start if a certificate file is empty.</p> </div>    <h3 id=\"mail-relay\">Mail Relay</h3> <p>The Chef server server uses email to send notifications for various events:</p> <ul class=\"simple\"> <li>Password resets</li> <li>User invitations</li> <li>Failover notifications</li> <li>Failed job notifications</li> </ul> <p>Configure a local mail transfer agent on the Chef server using the steps appropriate for the platform on which the Chef server is running.</p>   <h3 id=\"ntp\">NTP</h3> <p>The Chef server requires that the systems on which it is running be connected to Network Time Protocol (NTP), as the Chef server is particularly sensitive to clock drift. For Red Hat and CentOS 6:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ yum install ntp</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ chkconfig ntpd on</pre> <p>or:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ service ntpd start</pre> <p>For Ubuntu:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ apt-get install ntp</pre>  <h4 id=\"chef-client-title\">chef-client</h4> <p>The Chef server server requires that every node that is under management by Chef also have an accurate clock that is synchronized very closely with the clock on the Chef server. If the clocks are not synchronized closely, the authentication process may fail when the clocks are out-of-sync by more than 15 minutes. A failure will trigger a <code class=\"docutils literal\">401 Unauthorized</code> response similar to:</p> <pre class=\"highlight-bash\" data-language=\"bash\">[Tue, 01 Nov 2011 16:55:23 -0700] INFO: *** Chef 11.X.X ***\n[Tue, 01 Nov 2011 16:55:23 -0700] INFO: Client key /etc/chef/client.pem is not present - registering\n[Tue, 01 Nov 2011 16:55:24 -0700] INFO: HTTP Request Returned 401 Unauthorized:\n    Failed to authenticate as ORGANIZATION-validator. Synchronize the clock on your host.\n[Tue, 01 Nov 2011 16:55:24 -0700] FATAL: Stacktrace dumped to /var/chef/cache/chef-stacktrace.out\n[Tue, 01 Nov 2011 16:55:24 -0700] FATAL: Net::HTTPServerException: 401 \"Unauthorized\"</pre> <p>In this situation, re-synchronize the system clocks with the Network Time Protocol (NTP) server, and then re-run the chef-client.</p>    <h3 id=\"required-accounts\">Required Accounts</h3> <p>By default, accounts required by the Chef server are created during setup. If your environment has restrictions on the creation of local user and group accounts that will prevent these accounts from being created automatically during setup, you will need to create these accounts.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The Chef push jobs and Reporting premium features of the Chef server use the same user and group accounts as the Chef server.</p> </div>  <h4 id=\"group-accounts\">Group Accounts</h4> <p>The following group accounts are required:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Group Account</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">opscode</code></td> <td>The group name under which services will run.</td> </tr> </tbody> </table>   <h4 id=\"user-accounts\">User Accounts</h4> <p>The following user accounts are required:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">User Account</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">opscode</code></td> <td>The user name under which services will run.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">opscode-pgsql</code></td> <td>The user name for PostgreSQL. (This is only required on the back end servers in a high availability setup.)</td> </tr> </tbody> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/install_server_pre.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/install_server_pre.html</a>\n  </p>\n</div>\n","12-9/resource_common":"<h1 id=\"common-functionality\">Common Functionality</h1> <p>All resources (including custom resources) share a set of common actions, properties, conditional executions, notifications, and relative path options.</p>  <h2>Actions</h2> <p>The following actions may be used with any resource:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:nothing</code></dt> <dd>Define this resource block to do nothing until notified by another resource to take action. When this resource is notified, this resource block is either run immediately or it is queued up to be run at the end of the chef-client run.</dd> </dl>  <h3 id=\"examples\">Examples</h3> <p>The following examples show how to use common actions in a recipe.</p> <p><strong>Use the :nothing action</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'memcached' do\n  action :nothing\n  supports :status =&gt; true, :start =&gt; true, :stop =&gt; true, :restart =&gt; true\nend</pre>    <h2>Properties</h2> <p>The following properties are common to every resource:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ignore_failure</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Continue running a recipe if a resource fails for any reason. Default value: <code class=\"docutils literal\">false</code>.</p> </dd> <dt><code class=\"docutils literal\">provider</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Chef Class</p> <p class=\"last\">Optional. The chef-client will attempt to determine the correct provider during the chef-client run, and then choose the best/correct provider based on configuration data collected at the start of the chef-client run. In general, a provider does not need to be specified.</p> </dd> <dt><code class=\"docutils literal\">retries</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The number of times to catch exceptions and retry the resource. Default value: <code class=\"docutils literal\">0</code>.</p> </dd> <dt><code class=\"docutils literal\">retry_delay</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Integer</p> <p class=\"last\">The retry delay (in seconds). Default value: <code class=\"docutils literal\">2</code>.</p> </dd> <dt><code class=\"docutils literal\">sensitive</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Types:</strong> TrueClass, FalseClass</p> <p class=\"last\">Ensure that sensitive resource data is not logged by the chef-client. Default value: <code class=\"docutils literal\">false</code>. This property only applies to the <strong>execute</strong>, <strong>file</strong> and <strong>template</strong> resources.</p> </dd> <dt><code class=\"docutils literal\">supports</code></dt> <dd>\n<p class=\"first\"><strong>Ruby Type:</strong> Hash</p> <p class=\"last\">A hash of options that contains hints about the capabilities of a resource. The chef-client may use these hints to help identify the correct provider. This property is only used by a small number of providers, including <strong>user</strong> and <strong>service</strong>.</p> </dd> </dl>  <h3 id=\"id1\">Examples</h3> <p>The following examples show how to use common properties in a recipe.</p> <p><strong>Use the ignore_failure common property</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">gem_package 'syntax' do\n  action :install\n  ignore_failure true\nend</pre> <p><strong>Use the provider common property</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'some_package' do\n  provider Chef::Provider::Package::Rubygems\nend</pre> <p><strong>Use the supports common property</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'apache' do\n  supports :restart =&gt; true, :reload =&gt; true\n  action :enable\nend</pre> <p><strong>Use the supports and providers common properties</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'some_service' do\n  provider Chef::Provider::Service::Upstart\n  supports :status =&gt; true, :restart =&gt; true, :reload =&gt; true\n  action [ :enable, :start ]\nend</pre>    <h2>Guards</h2> <p>A guard property can be used to evaluate the state of a node during the execution phase of the chef-client run. Based on the results of this evaluation, a guard property is then used to tell the chef-client if it should continue executing a resource. A guard property accepts either a string value or a Ruby block value:</p> <ul class=\"simple\"> <li>A string is executed as a shell command. If the command returns <code class=\"docutils literal\">0</code>, the guard is applied. If the command returns any other value, then the guard property is not applied. String guards in a <strong>powershell_script</strong> run Windows PowerShell commands and may return <code class=\"docutils literal\">true</code> in addition to <code class=\"docutils literal\">0</code>.</li> <li>A block is executed as Ruby code that must return either <code class=\"docutils literal\">true</code> or <code class=\"docutils literal\">false</code>. If the block returns <code class=\"docutils literal\">true</code>, the guard property is applied. If the block returns <code class=\"docutils literal\">false</code>, the guard property is not applied.</li> </ul> <p>A guard property is useful for ensuring that a resource is idempotent by allowing that resource to test for the desired state as it is being executed, and then if the desired state is present, for the chef-client to do nothing.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>When using the <code class=\"docutils literal\">not_if</code> and <code class=\"docutils literal\">only_if</code> guards with the <strong>execute</strong> resource, the current working directory property (<code class=\"docutils literal\">cwd</code>) is <strong>not</strong> inherited from the resource. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">execute 'bundle install' do\n  cwd '/myapp'\n  not_if 'bundle check' # This is not run inside /myapp\nend</pre> </div>  <h3 id=\"attributes\">Attributes</h3> <p>The following properties can be used to define a guard that is evaluated during the execution phase of the chef-client run:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">not_if</code></dt> <dd>Prevent a resource from executing when the condition returns <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">only_if</code></dt> <dd>Allow a resource to execute only if the condition returns <code class=\"docutils literal\">true</code>.</dd> </dl>   <h3 id=\"arguments\">Arguments</h3> <p>The following arguments can be used with the <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code> guard properties:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:user</code></dt> <dd>\n<p class=\"first\">Specify the user that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :user =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:group</code></dt> <dd>\n<p class=\"first\">Specify the group that a command will run as. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :group =&gt; 'adam'</pre> </dd> <dt><code class=\"docutils literal\">:environment</code></dt> <dd>\n<p class=\"first\">Specify a Hash of environment variables to be set. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam /etc/passwd', :environment =&gt; {\n  'HOME' =&gt; '/home/adam'\n}</pre> </dd> <dt><code class=\"docutils literal\">:cwd</code></dt> <dd>\n<p class=\"first\">Set the current working directory before running a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'grep adam passwd', :cwd =&gt; '/etc'</pre> </dd> <dt><code class=\"docutils literal\">:timeout</code></dt> <dd>\n<p class=\"first\">Set a timeout for a command. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">not_if 'sleep 10000', :timeout =&gt; 10</pre> </dd> </dl>   <h3 id=\"not-if-examples\">not_if Examples</h3> <p><strong>Update if not already updated</strong></p> <p>The following example shows how to use <code class=\"docutils literal\">not_if</code> to guard against running the <code class=\"docutils literal\">apt-get-update</code> command when a file already exists that is the same as the updated file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute \"apt-get-update\" do\n  command \"apt-get update\"\n  ignore_failure true\n  not_if do ::File.exists?('/var/lib/apt/periodic/update-success-stamp') end\nend</pre> <p><strong>Ensure a node can resolve a host</strong></p> <p>The following example shows how to use a custom block of Ruby code to ensure that a node can resolve the host. If the node can resolve the host, the chef-client will do nothing. If the node cannot resolve the host, the chef-client will configure the host:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ruby_block \"ensure node can resolve API FQDN\" do\n  block do\n    fe = Chef::Util::FileEdit.new(\"/etc/hosts\")\n    fe.insert_line_if_no_match(/#{node['chef-server']['api_fqdn']}/,\n                               \"127.0.0.1 #{node['chef-server']['api_fqdn']}\")\n    fe.write_file\n  end\n  not_if { Resolv.getaddress(node['chef-server']['api_fqdn']) rescue false }\nend</pre> <p><strong>Prevent installs on older versions</strong></p> <p>The following example shows how to use <code class=\"docutils literal\">not_if</code> to prevent ZeroMQ from being installed when the node on which the install is to occur has a version of Red Hat Enterprise Linux that is older than version 6.0:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ark \"test_autogen\" do\n  url 'https://github.com/zeromq/libzmq/tarball/master'\n  extension \"tar.gz\"\n  action :configure\n  not_if { platform_family?('rhel') &amp;&amp; node['platform_version'].to_f &lt; 6.0 }\nend</pre> <p><strong>Set the administrator if not already set</strong></p> <p>The following example shows how to set the administrator for Nagios on multiple nodes, except when the package already exists on a node:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">%w{adminpassword adminpassword-repeat}.each do |setting|\n  execute \"debconf-set-selections::#{node['nagios']['server']['vname']}-cgi::#{node['nagios']['server']['vname']}/#{setting}\" do\n    command \"echo #{node['nagios']['server']['vname']}-cgi #{node['nagios']['server']['vname']}/#{setting} password #{random_initial_password} | debconf-set-selections\"\n    not_if \"dpkg -l #{node['nagios']['server']['vname']}\"\n  end\nend</pre>   <h3 id=\"only-if-examples\">only_if Examples</h3> <p><strong>Install packages only when necessary</strong></p> <p>The following example shows how to use <code class=\"docutils literal\">only_if</code> with one (or more) cookbook attributes to ensure that packages are only installed when necessary. In this case, three attributes exist in the <code class=\"docutils literal\">/attributes/default.rb</code> file: <code class=\"docutils literal\">use_openssl</code>, <code class=\"docutils literal\">use_pcre</code>, and <code class=\"docutils literal\">use_zlib</code>. Each of these attributes are defined as <code class=\"docutils literal\">false</code> by default. The <code class=\"docutils literal\">only_if</code> attributes are used to test for the presence of these packages on the target node before then asking the chef-client to complete the process of installing these packages. If the packages are already present, the chef-client will do nothing.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">package 'libpcre3-dev' do\n  only_if { node['haproxy']['source']['use_pcre'] }\nend\n\npackage 'libssl-dev' do\n  only_if { node['haproxy']['source']['use_openssl'] }\nend\n\npackage 'zlib1g-dev' do\n  only_if { node['haproxy']['source']['use_zlib'] }\nend</pre> <p><strong>Remove a recipe if it belongs to a specific run-list</strong></p> <p>The following example shows how to use <code class=\"docutils literal\">only_if</code> to only remove a recipe named <code class=\"docutils literal\">recipe[ntp::undo]</code>, but only when that recipe is part of the <code class=\"docutils literal\">recipe[ntp::default]</code> run-list:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">ruby_block 'remove ntp::undo from run list' do\n  block do\n    node.run_list.remove('recipe[ntp::undo]')\n  end\n  only_if { node.run_list.include?('recipe[ntp::default]') }\nend</pre> <p><strong>Re-register ASP.Net if it’s already installed</strong></p> <p>The following example shows how to use <code class=\"docutils literal\">only_if</code> to ensure that the chef-client will attempt to register ASP.NET only if the executable is installed on the system, on both 32- and 64-bit systems:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">aspnet_regiis = \"#{ENV['WinDir']}\\\\Microsoft.NET\\\\Framework\\\\v4.0.30319\\\\aspnet_regiis.exe\"\nexecute 'Register ASP.NET v4' do\n  command \"#{aspnet_regiis} -i\"\n  only_if { File.exists?(aspnet_regiis) }\n  action :nothing\nend\n\naspnet_regiis64 = \"#{ENV['WinDir']}\\\\Microsoft.NET\\\\Framework64\\\\v4.0.30319\\\\aspnet_regiis.exe\"\nexecute 'Register ASP.NET v4 (x64)' do\n  command \"#{aspnet_regiis64} -i\"\n  only_if { File.exists?(aspnet_regiis64) }\n  action :nothing\nend</pre>    <h2>Guard Interpreters</h2> <p>Any resource that passes a string command may also specify the interpreter that will be used to evaluate that string command. This is done by using the <code class=\"docutils literal\">guard_interpreter</code> property to specify a <strong>script</strong>-based resource.</p>  <h3 id=\"id2\">Attributes</h3> <p>The <code class=\"docutils literal\">guard_interpreter</code> property may be set to any of the following values:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:bash</code></dt> <dd>Evaluates a string command using the <strong>bash</strong> resource.</dd> <dt><code class=\"docutils literal\">:batch</code></dt> <dd>Evaluates a string command using the <strong>batch</strong> resource. Default value (within a <strong>batch</strong> resource block): <code class=\"docutils literal\">:batch</code>.</dd> <dt><code class=\"docutils literal\">:csh</code></dt> <dd>Evaluates a string command using the <strong>csh</strong> resource.</dd> <dt><code class=\"docutils literal\">:default</code></dt> <dd>Default. Executes the default interpreter as identified by the chef-client.</dd> <dt><code class=\"docutils literal\">:perl</code></dt> <dd>Evaluates a string command using the <strong>perl</strong> resource.</dd> <dt><code class=\"docutils literal\">:powershell_script</code></dt> <dd>Evaluates a string command using the <strong>powershell_script</strong> resource. Default value (within a <strong>batch</strong> resource block): <code class=\"docutils literal\">:powershell_script</code>.</dd> <dt><code class=\"docutils literal\">:python</code></dt> <dd>Evaluates a string command using the <strong>python</strong> resource.</dd> <dt><code class=\"docutils literal\">:ruby</code></dt> <dd>Evaluates a string command using the <strong>ruby</strong> resource.</dd> </dl>   <h3 id=\"inheritance\">Inheritance</h3> <p>The <code class=\"docutils literal\">guard_interpreter</code> property is set to <code class=\"docutils literal\">:default</code> by default for the <strong>bash</strong>, <strong>csh</strong>, <strong>perl</strong>, <strong>python</strong>, and <strong>ruby</strong> resources. When the <code class=\"docutils literal\">guard_interpreter</code> property is set to <code class=\"docutils literal\">:default</code>, <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code> guard statements <strong>do not inherit</strong> properties that are defined by the <strong>script</strong>-based resource.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The <strong>batch</strong> and <strong>powershell_script</strong> resources inherit properties by default. The <code class=\"docutils literal\">guard_interpreter</code> property is set to <code class=\"docutils literal\">:batch</code> or <code class=\"docutils literal\">:powershell_script</code> automatically when using a <code class=\"docutils literal\">not_if</code> or <code class=\"docutils literal\">only_if</code> guard statement within a <strong>batch</strong> or <strong>powershell_script</strong> resource, respectively.</p> </div> <p>For example, the <code class=\"docutils literal\">not_if</code> guard statement in the following resource example <strong>does not inherit</strong> the <code class=\"docutils literal\">environment</code> property:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">bash 'javatooling' do\n  environment 'JAVA_HOME' =&gt; '/usr/lib/java/jdk1.7/home'\n  code 'java-based-daemon-ctl.sh -start'\n  not_if 'java-based-daemon-ctl.sh -test-started'\nend</pre> <p>and requires adding the <code class=\"docutils literal\">environment</code> property to the <code class=\"docutils literal\">not_if</code> guard statement so that it may use the <code class=\"docutils literal\">JAVA_HOME</code> path as part of its evaluation:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">bash 'javatooling' do\n  environment 'JAVA_HOME' =&gt; '/usr/lib/java/jdk1.7/home'\n  code 'java-based-daemon-ctl.sh -start'\n  not_if 'java-based-daemon-ctl.sh -test-started', :environment =&gt; 'JAVA_HOME' =&gt; '/usr/lib/java/jdk1.7/home'\nend</pre> <p>To inherit properties, add the <code class=\"docutils literal\">guard_interpreter</code> property to the resource block and set it to the appropriate value:</p> <ul class=\"simple\"> <li>\n<code class=\"docutils literal\">:bash</code> for <strong>bash</strong>\n</li> <li>\n<code class=\"docutils literal\">:csh</code> for <strong>csh</strong>\n</li> <li>\n<code class=\"docutils literal\">:perl</code> for <strong>perl</strong>\n</li> <li>\n<code class=\"docutils literal\">:python</code> for <strong>python</strong>\n</li> <li>\n<code class=\"docutils literal\">:ruby</code> for <strong>ruby</strong>\n</li> </ul> <p>For example, using the same example as from above, but this time adding the <code class=\"docutils literal\">guard_interpreter</code> property and setting it to <code class=\"docutils literal\">:bash</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">bash 'javatooling' do\n  guard_interpreter :bash\n  environment 'JAVA_HOME' =&gt; '/usr/lib/java/jdk1.7/home'\n  code 'java-based-daemon-ctl.sh -start'\n  not_if 'java-based-daemon-ctl.sh -test-started'\nend</pre> <p>The <code class=\"docutils literal\">not_if</code> statement now inherits the <code class=\"docutils literal\">environment</code> property and will use the <code class=\"docutils literal\">JAVA_HOME</code> path as part of its evaluation.</p>   <h3 id=\"id3\">Examples</h3> <p>For example, the following code block will ensure the command is evaluated using the default intepreter as identified by the chef-client:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource 'name' do\n  guard_interpreter :default\n  # code\nend</pre>    <h2>Lazy Evaluation</h2> <p>In some cases, the value for a property cannot be known until the execution phase of a chef-client run. In this situation, using lazy evaluation of property values can be helpful. Instead of a property being assigned a value, it may instead be assigned a code block. The syntax for using lazy evaluation is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">attribute_name lazy { code_block }</pre> <p>where <code class=\"docutils literal\">lazy</code> is used to tell the chef-client to evaluate the contents of the code block later on in the resource evaluation process (instead of immediately) and <code class=\"docutils literal\">{ code_block }</code> is arbitrary Ruby code that provides the value.</p> <p>For example, a resource that is <strong>not</strong> doing lazy evaluation:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template 'template_name' do\n  # some attributes\n  path '/foo/bar'\nend</pre> <p>and a resource block that is doing lazy evaluation:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template 'template_name' do\n  # some attributes\n  path lazy { ' some Ruby code ' }\nend</pre> <p>In the previous examples, the first resource uses the value <code class=\"docutils literal\">/foo/bar</code> and the second resource uses the value provided by the code block, as long as the contents of that code block are a valid resource property.</p> <p>The following example shows how to use lazy evaluation with template variables:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/canvey_island.txt' do\n  source 'canvey_island.txt.erb'\n  variables(\n    lazy {\n      { :canvey_island =&gt; node.run_state['sea_power'] }\n    }\n  )\nend</pre>   <h2>Notifications</h2> <p>A notification is a property on a resource that listens to other resources in the resource collection and then takes actions based on the notification type (<code class=\"docutils literal\">notifies</code> or <code class=\"docutils literal\">subscribes</code>).</p>  <h3 id=\"timers\">Timers</h3> <p>A timer specifies the point during the chef-client run at which a notification is run. The following timers are available:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">:before</code></dt> <dd>Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.</dd> <dt><code class=\"docutils literal\">:delayed</code></dt> <dd>Default. Specifies that a notification should be queued up, and then executed at the very end of the chef-client run.</dd> <dt>\n<code class=\"docutils literal\">:immediate</code>, <code class=\"docutils literal\">:immediately</code>\n</dt> <dd>Specifies that a notification should be run immediately, per resource notified.</dd> </dl>   <h3 id=\"notifies\">Notifies</h3> <p>A resource may notify another resource to take action when its state changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> that resource should take, and then the <code class=\"docutils literal\">:timer</code> for that action. A resource may notifiy more than one resource; use a <code class=\"docutils literal\">notifies</code> statement for each resource to be notified.</p> <p>The syntax for <code class=\"docutils literal\">notifies</code> is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">notifies :action, 'resource[name]', :timer</pre>  <h4 id=\"id4\">Examples</h4> <p>The following examples show how to use the <code class=\"docutils literal\">notifies</code> notification in a recipe.</p> <p><strong>Delay notifications</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/etc/nagios3/configures-nagios.conf' do\n  # other parameters\n  notifies :run, 'execute[test-nagios-config]', :delayed\nend</pre> <p><strong>Notify immediately</strong></p> <p>By default, notifications are <code class=\"docutils literal\">:delayed</code>, that is they are queued up as they are triggered, and then executed at the very end of a chef-client run. To run an action immediately, use <code class=\"docutils literal\">:immediately</code>:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/etc/nagios3/configures-nagios.conf' do\n  # other parameters\n  notifies :run, 'execute[test-nagios-config]', :immediately\nend</pre> <p>and then the chef-client would immediately run the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'test-nagios-config' do\n  command 'nagios3 --verify-config'\n  action :nothing\nend</pre> <p><strong>Notify multiple resources</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/etc/chef/server.rb' do\n  source 'server.rb.erb'\n  owner 'root'\n  group 'root'\n  mode '0755'\n  notifies :restart, 'service[chef-solr]', :delayed\n  notifies :restart, 'service[chef-solr-indexer]', :delayed\n  notifies :restart, 'service[chef-server]', :delayed\nend</pre> <p><strong>Notify in a specific order</strong></p> <p>To notify multiple resources, and then have these resources run in a certain order, do something like the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'foo' do\n  command '...'\n  notifies :run, 'template[baz]', :immediately\n  notifies :install, 'package[bar]', :immediately\n  notifies :run, 'execute[final]', :immediately\nend\n\ntemplate 'baz' do\n  ...\n  notifies :run, 'execute[restart_baz]', :immediately\nend\n\npackage 'bar'\n\nexecute 'restart_baz'\n\nexecute 'final' do\n  command '...'\nend</pre> <p>where the sequencing will be in the same order as the resources are listed in the recipe: <code class=\"docutils literal\">execute 'foo'</code>, <code class=\"docutils literal\">template 'baz'</code>, <code class=\"docutils literal\">execute [restart_baz]</code>, <code class=\"docutils literal\">package 'bar'</code>, and <code class=\"docutils literal\">execute 'final'</code>.</p> <p><strong>Reload a service</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/somefile' do\n  mode '0755'\n  source 'somefile.erb'\n  notifies :reload, 'service[apache]', :immediately\nend</pre> <p><strong>Restart a service when a template is modified</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/etc/www/configures-apache.conf' do\n  notifies :restart, 'service[apache]', :immediately\nend</pre> <p><strong>Send notifications to multiple resources</strong></p> <p>To send notifications to multiple resources, just use multiple attributes. Multiple attributes will get sent to the notified resources in the order specified.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/etc/netatalk/netatalk.conf' do\n  notifies :restart, 'service[afpd]', :immediately\n  notifies :restart, 'service[cnid]', :immediately\nend\n\nservice 'afpd'\nservice 'cnid'</pre> <p><strong>Execute a command using a template</strong></p> <p>The following example shows how to set up IPv4 packet forwarding using the <strong>execute</strong> resource to run a command named <code class=\"docutils literal\">forward_ipv4</code> that uses a template defined by the <strong>template</strong> resource:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'forward_ipv4' do\n  command 'echo &gt; /proc/.../ipv4/ip_forward'\n  action :nothing\nend\n\ntemplate '/etc/file_name.conf' do\n  source 'routing/file_name.conf.erb'\n  notifies :run, 'execute[forward_ipv4]', :delayed\nend</pre> <p>where the <code class=\"docutils literal\">command</code> property for the <strong>execute</strong> resource contains the command that is to be run and the <code class=\"docutils literal\">source</code> property for the <strong>template</strong> resource specifies which template to use. The <code class=\"docutils literal\">notifies</code> property for the <strong>template</strong> specifies that the <code class=\"docutils literal\">execute[forward_ipv4]</code> (which is defined by the <strong>execute</strong> resource) should be queued up and run at the end of the chef-client run.</p> <p><strong>Restart a service, and then notify a different service</strong></p> <p>The following example shows how start a service named <code class=\"docutils literal\">example_service</code> and immediately notify the Nginx service to restart.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">service 'example_service' do\n  action :start\n  provider Chef::Provider::Service::Init\n  notifies :restart, 'service[nginx]', :immediately\nend</pre> <p>where by using the default <code class=\"docutils literal\">provider</code> for the <strong>service</strong>, the recipe is telling the chef-client to determine the specific provider to be used during the chef-client run based on the platform of the node on which the recipe will run.</p> <p><strong>Notify when a remote source changes</strong></p> <pre class=\"highlight-ruby\" data-language=\"ruby\">remote_file '/tmp/couch.png' do\n  source 'http://couchdb.apache.org/img/sketch.png'\n  action :nothing\nend\n\nhttp_request 'HEAD http://couchdb.apache.org/img/sketch.png' do\n  message ''\n  url 'http://couchdb.apache.org/img/sketch.png'\n  action :head\n  if File.exist?('/tmp/couch.png')\n    headers 'If-Modified-Since' =&gt; File.mtime('/tmp/couch.png').httpdate\n  end\n  notifies :create, 'remote_file[/tmp/couch.png]', :immediately\nend</pre>    <h3 id=\"subscribes\">Subscribes</h3> <p>A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a <code class=\"docutils literal\">'resource[name]'</code>, the <code class=\"docutils literal\">:action</code> to be taken, and then the <code class=\"docutils literal\">:timer</code> for that action.</p> <p>The syntax for <code class=\"docutils literal\">subscribes</code> is:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">subscribes :action, 'resource[name]', :timer</pre>  <h4 id=\"id5\">Examples</h4> <p>The following examples show how to use the <code class=\"docutils literal\">subscribes</code> notification in a recipe.</p> <p><strong>Prevent restart and reconfigure if configuration is broken</strong></p> <p>Use the <code class=\"docutils literal\">:nothing</code> action (common to all resources) to prevent an application from restarting, and then use the <code class=\"docutils literal\">subscribes</code> notification to ask the broken configuration to be reconfigured immediately:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'test-nagios-config' do\n  command 'nagios3 --verify-config'\n  action :nothing\n  subscribes :run, 'template[/etc/nagios3/configures-nagios.conf]', :immediately\nend</pre> <p><strong>Reload a service using a template</strong></p> <p>To reload a service based on a template, use the <strong>template</strong> and <strong>service</strong> resources together in the same recipe, similar to the following:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">template '/tmp/somefile' do\n  mode '0755'\n  source 'somefile.erb'\nend\n\nservice 'apache' do\n  supports :restart =&gt; true, :reload =&gt; true\n  action :enable\n  subscribes :reload, 'template[/tmp/somefile]', :immediately\nend</pre> <p>where the <code class=\"docutils literal\">subscribes</code> notification is used to reload the service using the template specified by the <strong>template</strong> resource.</p> <p><strong>Stash a file in a data bag</strong></p> <p>The following example shows how to use the <strong>ruby_block</strong> resource to stash a BitTorrent file in a data bag so that it can be distributed to nodes in the organization.</p> <pre class=\"highlight-ruby\" data-language=\"ruby\"># the following code sample comes from the ``seed`` recipe\n# in the following cookbook: https://github.com/mattray/bittorrent-cookbook\n\nruby_block 'share the torrent file' do\n  block do\n    f = File.open(node['bittorrent']['torrent'],'rb')\n    #read the .torrent file and base64 encode it\n    enc = Base64.encode64(f.read)\n    data = {\n      'id'=&gt;bittorrent_item_id(node['bittorrent']['file']),\n      'seed'=&gt;node.ipaddress,\n      'torrent'=&gt;enc\n    }\n    item = Chef::DataBagItem.new\n    item.data_bag('bittorrent')\n    item.raw_data = data\n    item.save\n  end\n  action :nothing\n  subscribes :create, \"bittorrent_torrent[#{node['bittorrent']['torrent']}]\", :immediately\nend</pre>     <h2>Relative Paths</h2> <p>The following relative paths can be used with any resource:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">#{ENV['HOME']}</code></dt> <dd>Use to return the <code class=\"docutils literal\">~</code> path in Linux and Mac OS X or the <code class=\"docutils literal\">%HOMEPATH%</code> in Microsoft Windows.</dd> </dl>  <h3 id=\"id6\">Examples</h3> <pre class=\"highlight-ruby\" data-language=\"ruby\">template \"#{ENV['HOME']}/chef-getting-started.txt\" do\n  source 'chef-getting-started.txt.erb'\n  mode '0755'\nend</pre>    <h2>Run in Compile Phase</h2> <p>The chef-client processes recipes in two phases:</p> <ol class=\"arabic simple\"> <li>First, each resource in the node object is identified and a resource collection is built. All recipes are loaded in a specific order, and then the actions specified within each of them are identified. This is also referred to as the “compile phase”.</li> <li>Next, the chef-client configures the system based on the order of the resources in the resource collection. Each resource is mapped to a provider, which then examines the node and performs the necessary steps to complete the action. This is also referred to as the “execution phase”.</li> </ol> <p>Typically, actions are processed during the execution phase of the chef-client run. However, sometimes it is necessary to run an action during the compile phase. For example, a resource can be configured to install a package during the compile phase to ensure that application is available to other resources during the execution phase.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Use the <strong>chef_gem</strong> resource to install gems that are needed by the chef-client during the execution phase.</p> </div>  <h3 id=\"run-action\">run_action</h3> <p>Use <code class=\"docutils literal\">.run_action(:some_action)</code> at the end of a resource block to run the specified action during the compile phase. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource_name 'foo' do\n  action :nothing\nend.run_action(:some_action)</pre> <p>where <code class=\"docutils literal\">action</code> is set to <code class=\"docutils literal\">:nothing</code> to ensure the <code class=\"docutils literal\">run_action</code> is run during the compile phase and not later during the execution phase.</p> <p>The following examples show when (and when not) to use <code class=\"docutils literal\">run_action</code>.</p> <p><strong>Update a package cache</strong></p> <p>Sometimes it is necessary to ensure that an operating system’s package cache is up to date before installing packages. For example, on Debian or Ubuntu systems, the Apt cache should be updated:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">if node['apt']['compile_time_update'] &amp;&amp; ( !::File.exist?('/var/lib/apt/periodic/update-success-stamp') || !::File.exist?(first_run_file) )\n  e = bash 'apt-get-update at compile time' do\n    code &lt;&lt;-EOH\n      apt-get update\n      touch #{first_run_file}\n    EOH\n    ignore_failure true\n    only_if { apt_installed? }\n    action :nothing\n  end\n  e.run_action(:run)\nend</pre> <p>where <code class=\"docutils literal\">e.run_action(:run)</code> tells the chef-client to run the <code class=\"docutils literal\">apt-get update</code> command during the compile phase. This example can be found in the <code class=\"docutils literal\">default.rb</code> recipe of the <a class=\"reference external\" href=\"https://github.com/chef-cookbooks/apt\">apt cookbook</a> that is maintained by Chef.</p> <p><strong>Use the chef_gem resource for Ruby gems</strong></p> <p>A very common use case us to install a gem during the compile phase so that it will be available to the chef-client during the execution phase. This is why the <strong>chef_gem</strong> resource exists. For example, this:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">chef_gem 'foo' do\n  action :install\nend</pre> <p>is effectively the same as</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">gem_package 'foo' do\n  action :nothing\nend.run_action(:install)\nGem.clear_paths</pre> <p>but without needing to define a <code class=\"docutils literal\">run_action</code>.</p> <p><strong>Notifications will not work</strong></p> <p>Resources that are executed during the compile phase cannot notify other resources. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">execute 'ifconfig'\n\np = package 'vim-enhanced' do\n  action :nothing\n  notifies :run, 'execute[ifconfig]', :immediately\nend\np.run_action(:install)</pre> <p>A better approach in this type of situation is to install the package before the resource collection is built to ensure that it is available to other resources later on.</p>    <h2>Windows File Security</h2> <p>To support Microsoft Windows security, the <strong>template</strong>, <strong>file</strong>, <strong>remote_file</strong>, <strong>cookbook_file</strong>, <strong>directory</strong>, and <strong>remote_directory</strong> resources support the use of inheritance and access control lists (ACLs) within recipes.</p>  <h3 id=\"access-control-lists-acls\">Access Control Lists (ACLs)</h3> <p>The <code class=\"docutils literal\">rights</code> property can be used in a recipe to manage access control lists (ACLs), which allow permissions to be given to multiple users and groups. Use the <code class=\"docutils literal\">rights</code> property can be used as many times as necessary; the chef-client will apply them to the file or directory as required. The syntax for the <code class=\"docutils literal\">rights</code> property is as follows:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">rights permission, principal, option_type =&gt; value</pre> <p>where</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">permission</code></dt> <dd>\n<p class=\"first\">Use to specify which rights are granted to the <code class=\"docutils literal\">principal</code>. The possible values are: <code class=\"docutils literal\">:read</code>, <code class=\"docutils literal\">:write</code>, <code class=\"docutils literal\">read_execute</code>, <code class=\"docutils literal\">:modify</code>, and <code class=\"docutils literal\">:full_control</code>.</p> <p>These permissions are cumulative. If <code class=\"docutils literal\">:write</code> is specified, then it includes <code class=\"docutils literal\">:read</code>. If <code class=\"docutils literal\">:full_control</code> is specified, then it includes both <code class=\"docutils literal\">:write</code> and <code class=\"docutils literal\">:read</code>.</p> <p class=\"last\">(For those who know the Microsoft Windows API: <code class=\"docutils literal\">:read</code> corresponds to <code class=\"docutils literal\">GENERIC_READ</code>; <code class=\"docutils literal\">:write</code> corresponds to <code class=\"docutils literal\">GENERIC_WRITE</code>; <code class=\"docutils literal\">:read_execute</code> corresponds to <code class=\"docutils literal\">GENERIC_READ</code> and <code class=\"docutils literal\">GENERIC_EXECUTE</code>; <code class=\"docutils literal\">:modify</code> corresponds to <code class=\"docutils literal\">GENERIC_WRITE</code>, <code class=\"docutils literal\">GENERIC_READ</code>, <code class=\"docutils literal\">GENERIC_EXECUTE</code>, and <code class=\"docutils literal\">DELETE</code>; <code class=\"docutils literal\">:full_control</code> corresponds to <code class=\"docutils literal\">GENERIC_ALL</code>, which allows a user to change the owner and other metadata about a file.)</p> </dd> <dt><code class=\"docutils literal\">principal</code></dt> <dd>Use to specify a group or user name. This is identical to what is entered in the login box for Microsoft Windows, such as <code class=\"docutils literal\">user_name</code>, <code class=\"docutils literal\">domain\\user_name</code>, or <code class=\"docutils literal\">user_name@fully_qualified_domain_name</code>. The chef-client does not need to know if a principal is a user or a group.</dd> <dt><code class=\"docutils literal\">option_type</code></dt> <dd>\n<p class=\"first\">A hash that contains advanced rights options. For example, the rights to a directory that only applies to the first level of children might look something like: <code class=\"docutils literal\">rights :write, 'domain\\group_name', :one_level_deep =&gt; true</code>. Possible option types:</p> <table class=\"last docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option Type</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:applies_to_children</code></td> <td>Specify how permissions are applied to children. Possible values: <code class=\"docutils literal\">true</code> to inherit both child directories and files; <code class=\"docutils literal\">false</code> to not inherit any child directories or files; <code class=\"docutils literal\">:containers_only</code> to inherit only child directories (and not files); <code class=\"docutils literal\">:objects_only</code> to recursively inherit files (and not child directories).</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">:applies_to_self</code></td> <td>Indicates whether a permission is applied to the parent directory. Possible values: <code class=\"docutils literal\">true</code> to apply to the parent directory or file and its children; <code class=\"docutils literal\">false</code> to not apply only to child directories and files.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">:one_level_deep</code></td> <td>Indicates the depth to which permissions will be applied. Possible values: <code class=\"docutils literal\">true</code> to apply only to the first level of children; <code class=\"docutils literal\">false</code> to apply to all children.</td> </tr> </tbody> </table> </dd> </dl> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource 'x.txt' do\n  rights :read, 'Everyone'\n  rights :write, 'domain\\group'\n  rights :full_control, 'group_name_or_user_name'\n  rights :full_control, 'user_name', :applies_to_children =&gt; true\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">rights :read, ['Administrators','Everyone']\nrights :full_control, 'Users', :applies_to_children =&gt; true\nrights :write, 'Sally', :applies_to_children =&gt; :containers_only, :applies_to_self =&gt; false, :one_level_deep =&gt; true</pre> <p>Some other important things to know when using the <code class=\"docutils literal\">rights</code> attribute:</p> <ul class=\"simple\"> <li>Only inherited rights remain. All existing explicit rights on the object are removed and replaced.</li> <li>If rights are not specified, nothing will be changed. The chef-client does not clear out the rights on a file or directory if rights are not specified.</li> <li>Changing inherited rights can be expensive. Microsoft Windows will propagate rights to all children recursively due to inheritance. This is a normal aspect of Microsoft Windows, so consider the frequency with which this type of action is necessary and take steps to control this type of action if performance is the primary consideration.</li> </ul> <p>Use the <code class=\"docutils literal\">deny_rights</code> property to deny specific rights to specific users. The ordering is independent of using the <code class=\"docutils literal\">rights</code> property. For example, it doesn’t matter if rights are granted to everyone is placed before or after <code class=\"docutils literal\">deny_rights :read, ['Julian', 'Lewis']</code>, both Julian and Lewis will be unable to read the document. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">resource 'x.txt' do\n  rights :read, 'Everyone'\n  rights :write, 'domain\\group'\n  rights :full_control, 'group_name_or_user_name'\n  rights :full_control, 'user_name', :applies_to_children =&gt; true\n  deny_rights :read, ['Julian', 'Lewis']\nend</pre> <p>or:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">deny_rights :full_control, ['Sally']</pre>   <h3 id=\"id7\">Inheritance</h3> <p>By default, a file or directory inherits rights from its parent directory. Most of the time this is the preferred behavior, but sometimes it may be necessary to take steps to more specifically control rights. The <code class=\"docutils literal\">inherits</code> property can be used to specifically tell the chef-client to apply (or not apply) inherited rights from its parent directory.</p> <p>For example, the following example specifies the rights for a directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor' do\n  rights :read, 'MORDOR\\Minions'\n  rights :full_control, 'MORDOR\\Sauron'\nend</pre> <p>and then the following example specifies how to use inheritance to deny access to the child directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor\\mount_doom' do\n  rights :full_control, 'MORDOR\\Sauron'\n  inherits false # Sauron is the only person who should have any sort of access\nend</pre> <p>If the <code class=\"docutils literal\">deny_rights</code> permission were to be used instead, something could slip through unless all users and groups were denied.</p> <p>Another example also shows how to specify rights for a directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor' do\n  rights :read, 'MORDOR\\Minions'\n  rights :full_control, 'MORDOR\\Sauron'\n  rights :write, 'SHIRE\\Frodo' # Who put that there I didn't put that there\nend</pre> <p>but then not use the <code class=\"docutils literal\">inherits</code> property to deny those rights on a child directory:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">directory 'C:\\mordor\\mount_doom' do\n  deny_rights :read, 'MORDOR\\Minions' # Oops, not specific enough\nend</pre> <p>Because the <code class=\"docutils literal\">inherits</code> property is not specified, the chef-client will default it to <code class=\"docutils literal\">true</code>, which will ensure that security settings for existing files remain unchanged.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/resource_common.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/resource_common.html</a>\n  </p>\n</div>\n","server_12-5/config_rb_server_optional_settings":"<h1 id=\"chef-server-rb-optional-settings\">chef-server.rb Optional Settings</h1> <p>The chef-server.rb file contains all of the non-default configuration settings used by the Chef server. (The default settings are built-in to the Chef server configuration and should only be added to the chef-server.rb file to apply non-default values.) These configuration settings are processed when the <code class=\"docutils literal\">chef-server-ctl reconfigure</code> command is run, such as immediately after setting up the Chef server or after making a change to the underlying configuration settings after the server has been deployed. The chef-server.rb file is a Ruby file, which means that conditional statements can be used in the configuration file.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The chef-server.rb file does not exist by default. To modify the settings for the Chef server, create a file named <code class=\"docutils literal\">chef-server.rb</code> in the <code class=\"docutils literal\">/etc/opscode/</code> directory.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This file was named private-chef.rb in previous versions of Enterprise Chef. After an upgrade to Chef server 12 from Enterprise Chef, the private-chef.rb file is symlinked to chef-server.rb. The private-chef.rb file is deprecated, starting with Chef server 12.</p> </div>  <h2 id=\"settings\">Settings</h2> <p>The following sections describe the various settings that are available in the chef-server.rb file.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>When changes are made to the chef-server.rb file the Chef server must be reconfigured by running the following command:</p> <pre class=\"last highlight-bash\" data-language=\"bash\">$ chef-server-ctl reconfigure</pre> </div>  <h3 id=\"general\">General</h3> <p>This configuration file has the following general settings:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">addons['install']</code></dt> <dd>Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">addons['path']</code></dt> <dd>Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">addons['packages']</code></dt> <dd>\n<p class=\"first\">Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">%w{opscode-reporting chef-manage opscode-analytics opscode-push-jobs-server}</pre> </dd> <dt><code class=\"docutils literal\">api_version</code></dt> <dd>The version of the Chef server. Default value: <code class=\"docutils literal\">'12.0.0'</code>.</dd> <dt><code class=\"docutils literal\">default_orgname</code></dt> <dd>The Chef server API used by the Open Source Chef server does not have an <code class=\"docutils literal\">/organizations/ORG_NAME</code> endpoint. Use this setting to ensure that migrated Open Source Chef servers are able to connect to the Chef server API. This value should be the same as the name of the organization that was created during the upgrade from Open Source Chef version 11 to Chef server version 12, which means it will be identical to the <code class=\"docutils literal\">ORG_NAME</code> part of the <code class=\"docutils literal\">/organizations</code> endpoint in Chef server version 12. Default value: the name of the organization specified during the upgrade process from Open Source Chef 11 to Chef server 12.</dd> <dt><code class=\"docutils literal\">flavor</code></dt> <dd>Default value: <code class=\"docutils literal\">'cs'</code>.</dd> <dt><code class=\"docutils literal\">install_path</code></dt> <dd>The directory in which the Chef server is installed. Default value: <code class=\"docutils literal\">'/opt/opscode'</code>.</dd> <dt><code class=\"docutils literal\">from_email</code></dt> <dd>The email address from which invitations to the Chef management console are sent. Default value: <code class=\"docutils literal\">'\"Opscode\" &lt;donotreply@opscode.com&gt;'</code>.</dd> <dt><code class=\"docutils literal\">license['nodes']</code></dt> <dd>The number of Chef server licenses. Default value: <code class=\"docutils literal\">25</code>.</dd> <dt><code class=\"docutils literal\">license['upgrade_url']</code></dt> <dd>The URL to visit for more information about how to update the number of nodes licensed for an organization. Default value: <code class=\"docutils literal\">'http://www.chef.io/contact/on-premises-simple'</code>.</dd> <dt><code class=\"docutils literal\">notification_email</code></dt> <dd>The email addressed to which email notifications are sent. Default value: <code class=\"docutils literal\">'pc-default@opscode.com'</code>.</dd> <dt><code class=\"docutils literal\">role</code></dt> <dd>The configuration type of the Chef server. Possible values: <code class=\"docutils literal\">backend</code>, <code class=\"docutils literal\">frontend</code>, or <code class=\"docutils literal\">standalone</code>. Default value: <code class=\"docutils literal\">'standalone'</code>.</dd> <dt><code class=\"docutils literal\">topology</code></dt> <dd>The topology of the Chef server. Possible values: <code class=\"docutils literal\">ha</code>, <code class=\"docutils literal\">manual</code>, <code class=\"docutils literal\">standalone</code>, and <code class=\"docutils literal\">tier</code>. Default value: <code class=\"docutils literal\">'standalone'</code>.</dd> </dl>   <h3 id=\"bookshelf\">bookshelf</h3> <p>The <strong>bookshelf</strong> service is an Amazon Simple Storage Service (S3)-compatible service that is used to store cookbooks, including all of the files—recipes, templates, and so on—that are associated with each cookbook.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">To <a class=\"reference external\" href=\"https://docs.chef.io/server_components.html#aws-settings\">configure the server for external cookbook storage</a>, updates are made to settings for both the <strong>bookshelf</strong> and <strong>opscode-erchef</strong> services.</p> </div> <p>This configuration file has the following settings for <code class=\"docutils literal\">bookshelf</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">bookshelf['access_key_id']</code></dt> <dd>The access key identifier. (This is configurable and may be pointed at external storage locations, such as Amazon EC2. Four settings require configuration when pointing at an external cookbook storage location: <code class=\"docutils literal\">bookshelf['vip']</code>, for the endpoint used by the chef-client; <code class=\"docutils literal\">bookshelf['external_url']</code>, for the endpoint used by the Chef server; <code class=\"docutils literal\">bookshelf['access_key_id']</code>, for user access key; <code class=\"docutils literal\">bookshelf['secret_access_key']</code>, for secret key; and <code class=\"docutils literal\">opscode_erchef['s3_bucket']</code>, for the bucket name. Reconfigure the Chef server after changing these settings. Default value: generated by default.</dd> <dt><code class=\"docutils literal\">bookshelf['data_dir']</code></dt> <dd>The directory in which on-disk data is stored. The default value is the recommended value. Default value: <code class=\"docutils literal\">/var/opt/opscode/bookshelf/data</code>.</dd> <dt><code class=\"docutils literal\">bookshelf['dir']</code></dt> <dd>The working directory. The default value is the recommended value. Default value: <code class=\"docutils literal\">/var/opt/opscode/bookshelf</code>.</dd> <dt><code class=\"docutils literal\">bookshelf['enable']</code></dt> <dd>Enable a service. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">bookshelf['external_url']</code></dt> <dd>The base URL to which the service is to return links to API resources. Use <code class=\"docutils literal\">:host_header</code> to ensure the URL is derived from the host header of the incoming HTTP request. Default value: <code class=\"docutils literal\">:host_header</code>.</dd> <dt><code class=\"docutils literal\">bookshelf['ha']</code></dt> <dd>Run the Chef server in a high availability topology. When <code class=\"docutils literal\">topology</code> is set to <code class=\"docutils literal\">ha</code>, this setting defaults to <code class=\"docutils literal\">true</code>. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">bookshelf['listen']</code></dt> <dd>The IP address on which the service is to listen. Default value: <code class=\"docutils literal\">127.0.0.1</code>.</dd> <dt><code class=\"docutils literal\">bookshelf['log_directory']</code></dt> <dd>The directory in which log data is stored. The default value is the recommended value. Default value: <code class=\"docutils literal\">/var/log/opscode/bookshelf</code>.</dd> <dt><code class=\"docutils literal\">bookshelf['log_rotation']</code></dt> <dd>\n<p class=\"first\">The log rotation policy for this service. Log files are rotated when they exceed <code class=\"docutils literal\">file_maxbytes</code>. The maximum number of log files in the rotation is defined by <code class=\"docutils literal\">num_to_keep</code>. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">{ 'file_maxbytes' =&gt; 104857600, 'num_to_keep' =&gt; 10 }</pre> </dd> <dt><code class=\"docutils literal\">bookshelf['port']</code></dt> <dd>The port on which the service is to listen. Default value: <code class=\"docutils literal\">4321</code>.</dd> <dt><code class=\"docutils literal\">bookshelf['secret_access_key']</code></dt> <dd>The secret key. (This is configurable and may be pointed at external storage locations, such as Amazon EC2. Four settings require configuration when pointing at an external cookbook storage location: <code class=\"docutils literal\">bookshelf['vip']</code>, for the endpoint used by the chef-client; <code class=\"docutils literal\">bookshelf['external_url']</code>, for the endpoint used by the Chef server; <code class=\"docutils literal\">bookshelf['access_key_id']</code>, for user access key; <code class=\"docutils literal\">bookshelf['secret_access_key']</code>, for secret key; and <code class=\"docutils literal\">opscode_erchef['s3_bucket']</code>, for the bucket name. Reconfigure the Chef server after changing these settings. Default value: generated by default.</dd> <dt><code class=\"docutils literal\">bookshelf['stream_download']</code></dt> <dd>Enable stream downloading of cookbooks. This setting (when <code class=\"docutils literal\">true</code>) typically results in improved cookbook download performance, especially with the memory usage of the <strong>bookshelf</strong> service and the behavior of load balancers and proxies in-between the chef-client and the Chef server. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">bookshelf['vip']</code></dt> <dd>The virtual IP address. Default value: <code class=\"docutils literal\">127.0.0.1</code>.</dd> </dl>   <h3 id=\"bootstrap\">bootstrap</h3> <p>This configuration file has the following settings for <code class=\"docutils literal\">bootstrap</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">bootstrap['enable']</code></dt> <dd>Indicates whether an attempt to bootstrap the Chef server is made. Generally only enabled on systems that have bootstrap enabled via a <code class=\"docutils literal\">server</code> entry. Default value: <code class=\"docutils literal\">true</code>.</dd> </dl>   <h3 id=\"dark-launch\">dark_launch</h3> <p>This configuration file has the following settings for <code class=\"docutils literal\">dark_launch</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">dark_launch['actions']</code></dt> <dd>Enable Chef actions. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">dark_launch['add_type_and_bag_to_items']</code></dt> <dd>Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">dark_launch['new_theme']</code></dt> <dd>Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">dark_launch['private-chef']</code></dt> <dd>Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">dark_launch['quick_start']</code></dt> <dd>Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">dark_launch['reporting']</code></dt> <dd>Enable Reporting, which performs data collection during a chef-client run. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">dark_launch['sql_users']</code></dt> <dd>Default value: <code class=\"docutils literal\">true</code>.</dd> </dl>   <h3 id=\"estatsd\">estatsd</h3> <p>This configuration file has the following settings for <code class=\"docutils literal\">estatsd</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">estatsd['dir']</code></dt> <dd>The working directory. The default value is the recommended value. Default value: <code class=\"docutils literal\">'/var/opt/opscode/estatsd'</code>.</dd> <dt><code class=\"docutils literal\">estatsd['enable']</code></dt> <dd>Enable a service. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">estatsd['log_directory']</code></dt> <dd>The directory in which log data is stored. The default value is the recommended value. Default value: <code class=\"docutils literal\">'/var/log/opscode/estatsd'</code>.</dd> <dt><code class=\"docutils literal\">estatsd['port']</code></dt> <dd>The port on which the service is to listen. Default value: <code class=\"docutils literal\">9466</code>.</dd> <dt><code class=\"docutils literal\">estatsd['protocol']</code></dt> <dd>Use to send application statistics with StatsD protocol formatting. Set this value to <code class=\"docutils literal\">statsd</code> to apply StatsD protocol formatting.</dd> <dt><code class=\"docutils literal\">estatsd['vip']</code></dt> <dd>The virtual IP address. Default value: <code class=\"docutils literal\">'127.0.0.1'</code>.</dd> </dl>   <h3 id=\"jetty\">jetty</h3> <p>This configuration file has the following settings for <code class=\"docutils literal\">jetty</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">jetty['enable']</code></dt> <dd>Enable a service. Default value: <code class=\"docutils literal\">'false'</code>. This value should not be modified.</dd> <dt><code class=\"docutils literal\">jetty['ha']</code></dt> <dd>Run the Chef server in a high availability topology. When <code class=\"docutils literal\">topology</code> is set to <code class=\"docutils literal\">ha</code>, this setting defaults to <code class=\"docutils literal\">true</code>. Default value: <code class=\"docutils literal\">'false'</code>.</dd> <dt><code class=\"docutils literal\">jetty['log_directory']</code></dt> <dd>\n<p class=\"first\">The directory in which log data is stored. The default value is the recommended value. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">'/var/opt/opscode/opscode-solr4/jetty/logs'</pre> </dd> </dl>   <h3 id=\"keepalived\">keepalived</h3> <p>The <strong>keepalived</strong> service manages the virtual IP address (VIP) between the backend machines in a high availability topology that uses DRBD.</p> <p>This configuration file has the following settings for <code class=\"docutils literal\">keepalived</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">keepalived['dir']</code></dt> <dd>The working directory. The default value is the recommended value. Default value: <code class=\"docutils literal\">'/var/opt/opscode/keepalived'</code>.</dd> <dt><code class=\"docutils literal\">keepalived['enable']</code></dt> <dd>Enable a service. Enable this setting for backend servers in high availability topologies. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">keepalived['ipv6_on']</code></dt> <dd>Enable Internet Protocol version 6 (IPv6) addresses. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">keepalived['log_directory']</code></dt> <dd>The directory in which log data is stored. The default value is the recommended value. Default value: <code class=\"docutils literal\">'/var/log/opscode/keepalived'</code>.</dd> <dt><code class=\"docutils literal\">keepalived['log_rotation']</code></dt> <dd>The log rotation policy for this service. Log files are rotated when they exceed <code class=\"docutils literal\">file_maxbytes</code>. The maximum number of log files in the rotation is defined by <code class=\"docutils literal\">num_to_keep</code>. Default value: <code class=\"docutils literal\">{ 'file_maxbytes' =&gt; 104857600, 'num_to_keep' =&gt; 10 }</code>\n</dd> <dt><code class=\"docutils literal\">keepalived['service_posthooks']</code></dt> <dd>\n<p class=\"first\">The directory to which Keepalived is to send <code class=\"docutils literal\">POST</code> hooks. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">'{ 'rabbitmq' =&gt; '/opt/opscode/bin/wait-for-rabbit' }'</pre> </dd> <dt><code class=\"docutils literal\">keepalived['smtp_connect_timeout']</code></dt> <dd>The amount of time (in seconds) to wait for a connection to an SMTP server. Default value: <code class=\"docutils literal\">'30'</code>.</dd> <dt><code class=\"docutils literal\">keepalived['smtp_server']</code></dt> <dd>The SMTP server to which a connection is made. Default value: <code class=\"docutils literal\">'127.0.0.1'</code>.</dd> <dt><code class=\"docutils literal\">keepalived['vrrp_instance_advert_int']</code></dt> <dd>The frequency (in seconds) at which the primary VRRP server is to advertise. Default value: <code class=\"docutils literal\">'1'</code>.</dd> <dt><code class=\"docutils literal\">keepalived['vrrp_instance_interface']</code></dt> <dd>The interface over which VRRP traffic is sent. Should be set to the name of the dedicated interface for Keepalived. Default value: <code class=\"docutils literal\">'eth0'</code>.</dd> <dt><code class=\"docutils literal\">keepalived['vrrp_instance_ipaddress']</code></dt> <dd>The virtual IP address to be managed. This is typically set by the <code class=\"docutils literal\">backend_vip</code> option. Default value: <code class=\"docutils literal\">node['ipaddress']</code>.</dd> <dt><code class=\"docutils literal\">keepalived['vrrp_instance_ipaddress_dev']</code></dt> <dd>The device to which the virtual IP address is added. Default value: <code class=\"docutils literal\">'eth0'</code>.</dd> <dt><code class=\"docutils literal\">keepalived['vrrp_instance_nopreempt']</code></dt> <dd>Specify that a lower priority machine maintains the master role, even if a higher priority machine is available. (This setting configures the <code class=\"docutils literal\">noprempt</code> value in VRRP.) Default value: <code class=\"docutils literal\">'true'</code>.</dd> <dt><code class=\"docutils literal\">keepalived['vrrp_instance_password']</code></dt> <dd>The secret key for VRRP pairs. This value is generated randomly when the bootstrap server is installed and does not need to be set explicitly. Default value: <code class=\"docutils literal\">'sneakybeaky'</code>.</dd> <dt><code class=\"docutils literal\">keepalived['vrrp_instance_preempt_delay']</code></dt> <dd>The <code class=\"docutils literal\">prempt_delay</code> value for the VRRP instance. Default value: <code class=\"docutils literal\">'30'</code>.</dd> <dt><code class=\"docutils literal\">keepalived['vrrp_instance_priority']</code></dt> <dd>The priority for this server. By default, all servers have equal priority. The server with the lowest value will have the highest priority. Default value: <code class=\"docutils literal\">'100'</code>.</dd> <dt><code class=\"docutils literal\">keepalived['vrrp_instance_state']</code></dt> <dd>The state of the VRRP server. This value should be the same for both servers in the backend. Default value: <code class=\"docutils literal\">'BACKUP'</code>.</dd> <dt><code class=\"docutils literal\">keepalived['vrrp_instance_virtual_router_id']</code></dt> <dd>The virtual router identifier used by the Keepalived pair. This value should be unique within the multicast domain used for Keepalived. Default value: <code class=\"docutils literal\">'1'</code>.</dd> <dt><code class=\"docutils literal\">keepalived['vrrp_sync_group']</code></dt> <dd>The name of the VRRP synchronization group. Default value: <code class=\"docutils literal\">'PC_GROUP'</code>.</dd> <dt><code class=\"docutils literal\">keepalived['vrrp_sync_instance']</code></dt> <dd>The name of the VRRP synchronization instance. Default value: <code class=\"docutils literal\">'PC_VI'</code>.</dd> <dt><code class=\"docutils literal\">keepalived['vrrp_unicast_bind']</code></dt> <dd>The unicast cluster IP address to which Keepalived binds. To use multicast, leave this value undefined. This value is configured automatically based on settings in private-chef.rb. This setting should not be changed without first consulting a Chef support engineer. Default value: <code class=\"docutils literal\">node['ipaddress']</code>.</dd> <dt><code class=\"docutils literal\">keepalived['vrrp_unicast_peer']</code></dt> <dd>The unicast cluster IP address used by Keepalived to talk to its peer. To use multicast, leave this value undefined. This value is configured automatically based on settings in private-chef.rb. This setting should not be changed without first consulting a Chef support engineer. Default value: <code class=\"docutils literal\">nil</code>.</dd> </dl>   <h3 id=\"lb-lb-internal\">lb / lb_internal</h3> <p>This configuration file has the following settings for <code class=\"docutils literal\">lb</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">lb['api_fqdn']</code></dt> <dd>Default value: <code class=\"docutils literal\">node['fqdn']</code>.</dd> <dt><code class=\"docutils literal\">lb['ban_refresh_interval']</code></dt> <dd>Default value: <code class=\"docutils literal\">600</code>.</dd> <dt><code class=\"docutils literal\">lb['bookshelf']</code></dt> <dd>Default value: <code class=\"docutils literal\">127.0.0.1</code>.</dd> <dt><code class=\"docutils literal\">lb['cache_cookbook_files']</code></dt> <dd>Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">lb['chef_max_version']</code></dt> <dd>The maximum version of the chef-client that is allowed to access the Chef server via the Chef server API. Default value: <code class=\"docutils literal\">11</code>.</dd> <dt><code class=\"docutils literal\">lb['chef_min_version']</code></dt> <dd>The minimum version of the chef-client that is allowed to access the Chef server via the Chef server API. Default value: <code class=\"docutils literal\">10</code>.</dd> <dt><code class=\"docutils literal\">lb['chef_server_webui']</code></dt> <dd>Default value: <code class=\"docutils literal\">127.0.0.1</code>.</dd> <dt><code class=\"docutils literal\">lb['debug']</code></dt> <dd>Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">lb['enable']</code></dt> <dd>Enable a service. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">lb['erchef']</code></dt> <dd>Default value: <code class=\"docutils literal\">127.0.0.1</code>.</dd> <dt><code class=\"docutils literal\">lb['maint_refresh_interval']</code></dt> <dd>Default value: <code class=\"docutils literal\">600</code>.</dd> <dt><code class=\"docutils literal\">lb['redis_connection_pool_size']</code></dt> <dd>Default value: <code class=\"docutils literal\">250</code>.</dd> <dt><code class=\"docutils literal\">lb['redis_connection_timeout']</code></dt> <dd>The amount of time (in milliseconds) to wait before timing out. Default value: <code class=\"docutils literal\">1000</code>.</dd> <dt><code class=\"docutils literal\">lb['redis_keepalive_timeout']</code></dt> <dd>The amount of time (in milliseconds) to wait before timing out. Default value: <code class=\"docutils literal\">2000</code>.</dd> <dt><code class=\"docutils literal\">lb['upstream']['bookshelf']</code></dt> <dd>The default value is the recommended value. Default value: <code class=\"docutils literal\">[ '127.0.0.1' ]</code>.</dd> <dt><code class=\"docutils literal\">lb['upstream']['oc_bifrost']</code></dt> <dd>The default value is the recommended value. Default value: <code class=\"docutils literal\">[ '127.0.0.1' ]</code>.</dd> <dt><code class=\"docutils literal\">lb['upstream']['opscode_erchef']</code></dt> <dd>The default value is the recommended value. Default value: <code class=\"docutils literal\">[ '127.0.0.1' ]</code>.</dd> <dt><code class=\"docutils literal\">lb['upstream']['opscode_solr4']</code></dt> <dd>The default value is the recommended value. Default value: <code class=\"docutils literal\">[ '127.0.0.1' ]</code>.</dd> <dt><code class=\"docutils literal\">lb['vip']</code></dt> <dd>The virtual IP address. Default value: <code class=\"docutils literal\">127.0.0.1</code>.</dd> <dt><code class=\"docutils literal\">lb['web_ui_fqdn']</code></dt> <dd>Default value: <code class=\"docutils literal\">node['fqdn']</code>.</dd> <dt><code class=\"docutils literal\">lb['xdl_defaults']['503_mode']</code></dt> <dd>The default value is the recommended value. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">lb['xdl_defaults']['couchdb_acls']</code></dt> <dd>The default value is the recommended value. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">lb['xdl_defaults']['couchdb_association_requests']</code></dt> <dd>The default value is the recommended value. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">lb['xdl_defaults']['couchdb_associations']</code></dt> <dd>The default value is the recommended value. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">lb['xdl_defaults']['couchdb_containers']</code></dt> <dd>The default value is the recommended value. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">lb['xdl_defaults']['couchdb_groups']</code></dt> <dd>The default value is the recommended value. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">lb['xdl_defaults']['couchdb_organizations']</code></dt> <dd>The default value is the recommended value. Default value: <code class=\"docutils literal\">true</code>.</dd> </dl> <p>And for the internal load balancers:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">lb_internal['account_port']</code></dt> <dd>Default value: <code class=\"docutils literal\">9685</code>.</dd> <dt><code class=\"docutils literal\">lb_internal['chef_port']</code></dt> <dd>Default value: <code class=\"docutils literal\">9680</code>.</dd> <dt><code class=\"docutils literal\">lb_internal['enable']</code></dt> <dd>Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">lb_internal['oc_bifrost_port']</code></dt> <dd>Default value: <code class=\"docutils literal\">9683</code>.</dd> <dt><code class=\"docutils literal\">lb_internal['vip']</code></dt> <dd>The virtual IP address. Default value: <code class=\"docutils literal\">'127.0.0.1'</code>.</dd> </dl>   <h3 id=\"ldap\">ldap</h3> <p>This configuration file has the following settings for <code class=\"docutils literal\">ldap</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">ldap['base_dn']</code></dt> <dd>\n<p class=\"first\">The root LDAP node under which all other nodes exist in the directory structure. For Active Directory, this is typically <code class=\"docutils literal\">cn=users</code> and then the domain. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">'OU=Employees,OU=Domain users,DC=example,DC=com'</pre> <p class=\"last\">Default value: <code class=\"docutils literal\">nil</code>.</p> </dd> <dt><code class=\"docutils literal\">ldap['bind_dn']</code></dt> <dd>\n<p class=\"first\">The distinguished name used to bind to the LDAP server. The user the Chef server will use to perform LDAP searches. This is often the administrator or manager user. This user needs to have read access to all LDAP users that require authentication. The Chef server must do an LDAP search before any user can log in. Many Active Directory and LDAP systems do not allow an anonymous bind. If anonymous bind is allowed, leave the <code class=\"docutils literal\">bind_dn</code> and <code class=\"docutils literal\">bind_password</code> settings blank. If anonymous bind is not allowed, a user with <code class=\"docutils literal\">READ</code> access to the directory is required. This user must be specified as an LDAP distinguished name similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">'CN=user,OU=Employees,OU=Domainuser,DC=example,DC=com'</pre> <p class=\"last\">Default value: <code class=\"docutils literal\">nil</code>.</p> </dd> <dt><code class=\"docutils literal\">ldap['bind_password']</code></dt> <dd>The password for the binding user. The password for the user specified by <code class=\"docutils literal\">ldap['bind_dn']</code>. Leave this value and <code class=\"docutils literal\">ldap['bind_dn']</code> unset if anonymous bind is sufficient. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">ldap['group_dn']</code></dt> <dd>\n<p class=\"first\">The distinguished name for a group. When set to the distinguished name of a group, only members of that group can log in. This feature filters based on the <code class=\"docutils literal\">memberOf</code> attribute and only works with LDAP servers that provide such an attribute. In OpenLDAP, the <code class=\"docutils literal\">memberOf</code> overlay provides this attribute. For example, if the value of the <code class=\"docutils literal\">memberOf</code> attribute is <code class=\"docutils literal\">CN=abcxyz,OU=users,DC=company,DC=com</code>, then use:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">ldap['group_dn'] = 'CN=user,OU=Employees,DC=example,DC=com'</pre> </dd> <dt><code class=\"docutils literal\">ldap['host']</code></dt> <dd>The name (or IP address) of the LDAP server. The hostname of the LDAP or Active Directory server. Be sure the Chef server is able to resolve any host names. Default value: <code class=\"docutils literal\">ldap-server-host</code>.</dd> <dt><code class=\"docutils literal\">ldap['login_attribute']</code></dt> <dd>The LDAP attribute that holds the user’s login name. Use to specify the Chef server user name for an LDAP user. Default value: <code class=\"docutils literal\">sAMAccountName</code>.</dd> <dt><code class=\"docutils literal\">ldap['port']</code></dt> <dd>An integer that specifies the port on which the LDAP server listens. The default value is an appropriate value for most configurations. Default value: <code class=\"docutils literal\">389</code> or <code class=\"docutils literal\">636</code> when <code class=\"docutils literal\">ldap['encryption']</code> is set to <code class=\"docutils literal\">:simple_tls</code>.</dd> <dt><code class=\"docutils literal\">ldap['ssl_enabled']</code></dt> <dd>\n<p class=\"first\">Cause the Chef server to connect to the LDAP server using SSL. Default value: <code class=\"docutils literal\">false</code>. Must be <code class=\"docutils literal\">false</code> when <code class=\"docutils literal\">ldap['tls_enabled']</code> is <code class=\"docutils literal\">true</code>.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Previous versions of the Chef server used the <code class=\"docutils literal\">ldap['ssl_enabled']</code> setting to first enable SSL, and then the <code class=\"docutils literal\">ldap['encryption']</code> setting to specify the encryption type. These settings are deprecated.</p> </div> </dd> <dt><code class=\"docutils literal\">ldap['system_adjective']</code></dt> <dd>\n<p class=\"first\">A descriptive name for the login system that is displayed to users in the Chef server management console. If a value like “corporate” is used, then the Chef management console user interface will display strings like “the corporate login server”, “corporate login”, or “corporate password.” Default value: <code class=\"docutils literal\">AD/LDAP</code>.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">This setting is <strong>not</strong> used by the Chef server. It is used only by the Chef management console.</p> </div> </dd> <dt><code class=\"docutils literal\">ldap['timeout']</code></dt> <dd>The amount of time (in seconds) to wait before timing out. Default value: <code class=\"docutils literal\">60000</code>.</dd> <dt><code class=\"docutils literal\">ldap['tls_enabled']</code></dt> <dd>\n<p class=\"first\">Enable TLS. When enabled, communication with the LDAP server is done via a secure SSL connection on a dedicated port. When <code class=\"docutils literal\">true</code>, <code class=\"docutils literal\">ldap['port']</code> is also set to <code class=\"docutils literal\">636</code>. Default value: <code class=\"docutils literal\">false</code>. Must be <code class=\"docutils literal\">false</code> when <code class=\"docutils literal\">ldap['ssl_enabled']</code> is <code class=\"docutils literal\">true</code>.</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Previous versions of the Chef server used the <code class=\"docutils literal\">ldap['ssl_enabled']</code> setting to first enable SSL, and then the <code class=\"docutils literal\">ldap['encryption']</code> setting to specify the encryption type. These settings are deprecated.</p> </div> </dd> </dl>   <h3 id=\"nginx\">nginx</h3> <p>This configuration file has the following settings for <code class=\"docutils literal\">nginx</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">nginx['cache_max_size']</code></dt> <dd>The <code class=\"docutils literal\">max_size</code> parameter used by the Nginx cache manager, which is part of the <code class=\"docutils literal\">proxy_cache_path</code> directive. When the size of file storage exceeds this value, the Nginx cache manager removes the least recently used data. Default value: <code class=\"docutils literal\">5000m</code>.</dd> <dt><code class=\"docutils literal\">nginx['client_max_body_size']</code></dt> <dd>The maximum accepted body size for a client request, as indicated by the <code class=\"docutils literal\">Content-Length</code> request header. When the maximum accepted body size is greater than this value, a <code class=\"docutils literal\">413 Request Entity Too Large</code> error is returned. Default value: <code class=\"docutils literal\">250m</code>.</dd> <dt><code class=\"docutils literal\">nginx['dir']</code></dt> <dd>The working directory. The default value is the recommended value. Default value: <code class=\"docutils literal\">/var/opt/opscode/nginx</code>.</dd> <dt><code class=\"docutils literal\">nginx['enable']</code></dt> <dd>Enable a service. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">nginx['enable_ipv6']</code></dt> <dd>Enable Internet Protocol version 6 (IPv6) addresses. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">nginx['enable_non_ssl']</code></dt> <dd>Allow port 80 redirects to port 443. When this value is set to <code class=\"docutils literal\">true</code>, load balancers on the front-end hardware are allowed to do SSL termination of the WebUI and API. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">nginx['enable_stub_status']</code></dt> <dd>Enables the Nginx <code class=\"docutils literal\">stub_status</code> module. See <code class=\"docutils literal\">nginx['stub_status']['allow_list']</code>, <code class=\"docutils literal\">nginx['stub_status']['listen_host']</code>, <code class=\"docutils literal\">nginx['stub_status']['listen_port']</code>, and <code class=\"docutils literal\">nginx['stub_status']['location']</code>. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">nginx['gzip']</code></dt> <dd>Enable gzip compression. Default value: <code class=\"docutils literal\">on</code>.</dd> <dt><code class=\"docutils literal\">nginx['gzip_comp_level']</code></dt> <dd>The compression level used with gzip, from least amount of compression (<code class=\"docutils literal\">1</code>, fastest) to the most (<code class=\"docutils literal\">2</code>, slowest). Default value: <code class=\"docutils literal\">2</code>.</dd> <dt><code class=\"docutils literal\">nginx['gzip_http_version']</code></dt> <dd>Enable gzip depending on the version of the HTTP request. Default value: <code class=\"docutils literal\">1.0</code>.</dd> <dt><code class=\"docutils literal\">nginx['gzip_proxied']</code></dt> <dd>The type of compression used based on the request and response. Default value: <code class=\"docutils literal\">any</code>.</dd> <dt><code class=\"docutils literal\">nginx['gzip_types']</code></dt> <dd>\n<p class=\"first\">Enable compression for the specified MIME-types. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">[ 'text/plain',\n  'text/css',\n  'application/x-javascript',\n  'text/xml', 'application/xml',\n  'application/xml+rss',\n  'text/javascript',\n  'application/json'\n  ]</pre> </dd> <dt><code class=\"docutils literal\">nginx['ha']</code></dt> <dd>Run the Chef server in a high availability topology. When <code class=\"docutils literal\">topology</code> is set to <code class=\"docutils literal\">ha</code>, this setting defaults to <code class=\"docutils literal\">true</code>. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">nginx['keepalive_timeout']</code></dt> <dd>The amount of time (in seconds) to wait for requests on a Keepalived connection. Default value: <code class=\"docutils literal\">65</code>.</dd> <dt><code class=\"docutils literal\">nginx['log_directory']</code></dt> <dd>The directory in which log data is stored. The default value is the recommended value. Default value: <code class=\"docutils literal\">/var/log/opscode/nginx</code>.</dd> <dt><code class=\"docutils literal\">nginx['log_rotation']</code></dt> <dd>The log rotation policy for this service. Log files are rotated when they exceed <code class=\"docutils literal\">file_maxbytes</code>. The maximum number of log files in the rotation is defined by <code class=\"docutils literal\">num_to_keep</code>. Default value: <code class=\"docutils literal\">{ 'file_maxbytes' =&gt; 104857600, 'num_to_keep' =&gt; 10 }</code>\n</dd> <dt><code class=\"docutils literal\">nginx['non_ssl_port']</code></dt> <dd>The port on which the WebUI and API are bound for non-SSL connections. Default value: <code class=\"docutils literal\">80</code>. Use <code class=\"docutils literal\">nginx['enable_non_ssl']</code> to enable or disable SSL redirects on this port number. Set to <code class=\"docutils literal\">false</code> to disable non-SSL connections.</dd> <dt><code class=\"docutils literal\">nginx['sendfile']</code></dt> <dd>Copy data between file descriptors when <code class=\"docutils literal\">sendfile()</code> is used. Default value: <code class=\"docutils literal\">on</code>.</dd> <dt><code class=\"docutils literal\">nginx['server_name']</code></dt> <dd>The FQDN for the server. Default value: <code class=\"docutils literal\">node['fqdn']</code>.</dd> <dt><code class=\"docutils literal\">nginx['ssl_certificate']</code></dt> <dd>The SSL certificate used to verify communication over HTTPS. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">nginx['ssl_certificate_key']</code></dt> <dd>The certificate key used for SSL communication. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">nginx['ssl_ciphers']</code></dt> <dd>\n<p class=\"first\">The list of supported cipher suites that are used to establish a secure connection. To favor AES256 with ECDHE forward security, drop the <code class=\"docutils literal\">RC4-SHA:RC4-MD5:RC4:RSA</code> prefix. See <a class=\"reference external\" href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">this link</a> for more information. For example:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">nginx['ssl_ciphers'] = HIGH: ... :!PSK</pre> </dd> <dt><code class=\"docutils literal\">nginx['ssl_company_name']</code></dt> <dd>The name of your company. Default value: <code class=\"docutils literal\">YouCorp</code>.</dd> <dt><code class=\"docutils literal\">nginx['ssl_country_name']</code></dt> <dd>The country in which your company is located. Default value: <code class=\"docutils literal\">US</code>.</dd> <dt><code class=\"docutils literal\">nginx['ssl_email_address']</code></dt> <dd>The default email address for your company. Default value: <code class=\"docutils literal\">you@example.com</code>.</dd> <dt><code class=\"docutils literal\">nginx['ssl_locality_name']</code></dt> <dd>The city in which your company is located. Default value: <code class=\"docutils literal\">Seattle</code>.</dd> <dt><code class=\"docutils literal\">nginx['ssl_organizational_unit_name']</code></dt> <dd>The organization or group within your company that is running the Chef server. Default value: <code class=\"docutils literal\">Operations</code>.</dd> <dt><code class=\"docutils literal\">nginx['ssl_port']</code></dt> <dd>Default value: <code class=\"docutils literal\">443</code>.</dd> <dt><code class=\"docutils literal\">nginx['ssl_protocols']</code></dt> <dd>\n<p class=\"first\">The SSL protocol versions that are enabled. For the highest possible security, disable SSL 3.0 and allow only TLS:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">nginx['ssl_protocols'] = 'TLSv1 TLSv1.1 TLSv1.2'</pre> <p class=\"last\">Default value: <code class=\"docutils literal\">TLSv1 TLSv1.1 TLSv1.2</code>.</p> </dd> <dt><code class=\"docutils literal\">nginx['ssl_state_name']</code></dt> <dd>The state, province, or region in which your company is located. Default value: <code class=\"docutils literal\">WA</code>.</dd> <dt><code class=\"docutils literal\">nginx['stub_status']['allow_list']</code></dt> <dd>The IP address on which accessing the <code class=\"docutils literal\">stub_status</code> endpoint is allowed. Default value: <code class=\"docutils literal\">[\"127.0.0.1\"]</code>.</dd> <dt><code class=\"docutils literal\">nginx['stub_status']['listen_host']</code></dt> <dd>The host on which the Nginx <code class=\"docutils literal\">stub_status</code> module listens. Default value: <code class=\"docutils literal\">\"127.0.0.1\"</code>.</dd> <dt><code class=\"docutils literal\">nginx['stub_status']['listen_port']</code></dt> <dd>The port on which the Nginx <code class=\"docutils literal\">stub_status</code> module listens. Default value: <code class=\"docutils literal\">\"9999\"</code>.</dd> <dt><code class=\"docutils literal\">nginx['stub_status']['location']</code></dt> <dd>The name of the Nginx <code class=\"docutils literal\">stub_status</code> endpoint used to access data generated by the Nginx <code class=\"docutils literal\">stub_status</code> module. Default value: <code class=\"docutils literal\">\"/nginx_status\"</code>.</dd> <dt><code class=\"docutils literal\">nginx['tcp_nodelay']</code></dt> <dd>Enable the Nagle buffering algorithm. Default value: <code class=\"docutils literal\">on</code>.</dd> <dt><code class=\"docutils literal\">nginx['tcp_nopush']</code></dt> <dd>Enable TCP/IP transactions. Default value: <code class=\"docutils literal\">on</code>.</dd> <dt><code class=\"docutils literal\">nginx['url']</code></dt> <dd>Default value: <code class=\"docutils literal\">https://#{node['fqdn']}</code>.</dd> <dt><code class=\"docutils literal\">nginx['worker_connections']</code></dt> <dd>The maximum number of simultaneous clients. Use with <code class=\"docutils literal\">nginx['worker_processes']</code> to determine the maximum number of allowed clients. Default value: <code class=\"docutils literal\">10240</code>.</dd> <dt><code class=\"docutils literal\">nginx['worker_processes']</code></dt> <dd>The number of allowed worker processes. Use with <code class=\"docutils literal\">nginx['worker_connections']</code> to determine the maximum number of allowed clients. Default value: <code class=\"docutils literal\">node['cpu']['total'].to_i</code>.</dd> <dt><code class=\"docutils literal\">nginx['x_forwarded_proto']</code></dt> <dd>The protocol used to connect to the server. Possible values: <code class=\"docutils literal\">http</code> and <code class=\"docutils literal\">https</code>. This is the protocol used to connect to the Chef server by a chef-client or a workstation. Default value: <code class=\"docutils literal\">'https'</code>.</dd> </dl>   <h3 id=\"oc-bifrost\">oc_bifrost</h3> <p>The <strong>oc_bifrost</strong> service ensures that every request to view or manage objects stored on the Chef server is authorized.</p> <p>This configuration file has the following settings for <code class=\"docutils literal\">oc_bifrost</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">oc_bifrost['db_pool_size']</code></dt> <dd>The number of open connections to PostgreSQL that are maintained by the service. This value should be increased if failures indicate that the <strong>oc_bifrost</strong> service ran out of connections. This value should be tuned in conjunction with the <code class=\"docutils literal\">postgresql['max_connections']</code> setting for PostgreSQL. Default value: <code class=\"docutils literal\">20</code>.</dd> <dt><code class=\"docutils literal\">oc_bifrost['dir']</code></dt> <dd>The working directory. The default value is the recommended value. Default value: <code class=\"docutils literal\">/var/opt/opscode/oc_bifrost</code>.</dd> <dt><code class=\"docutils literal\">oc_bifrost['enable']</code></dt> <dd>Enable a service. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">oc_bifrost['extended_perf_log']</code></dt> <dd>Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">oc_bifrost['ha']</code></dt> <dd>Run the Chef server in a high availability topology. When <code class=\"docutils literal\">topology</code> is set to <code class=\"docutils literal\">ha</code>, this setting defaults to <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">oc_bifrost['listen']</code></dt> <dd>The IP address on which the service is to listen. Default value: <code class=\"docutils literal\">'127.0.0.1'</code>.</dd> <dt><code class=\"docutils literal\">oc_bifrost['log_directory']</code></dt> <dd>The directory in which log data is stored. The default value is the recommended value. Default value: <code class=\"docutils literal\">/var/log/opscode/oc_bifrost</code>.</dd> <dt><code class=\"docutils literal\">oc_bifrost['log_rotation']</code></dt> <dd>\n<p class=\"first\">The log rotation policy for this service. Log files are rotated when they exceed <code class=\"docutils literal\">file_maxbytes</code>. The maximum number of log files in the rotation is defined by <code class=\"docutils literal\">num_to_keep</code>. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">{ 'file_maxbytes' =&gt; 104857600, 'num_to_keep' =&gt; 10 }</pre> </dd> <dt><code class=\"docutils literal\">oc_bifrost['port']</code></dt> <dd>The port on which the service is to listen. Default value: <code class=\"docutils literal\">9463</code>.</dd> <dt><code class=\"docutils literal\">oc_bifrost['sql_password']</code></dt> <dd>The password for the <code class=\"docutils literal\">sql_user</code>. Default value: <code class=\"docutils literal\">'challengeaccepted'</code>.</dd> <dt><code class=\"docutils literal\">oc_bifrost['sql_ro_password']</code></dt> <dd>The password for the <code class=\"docutils literal\">sql_ro_user</code>. Default value: <code class=\"docutils literal\">'foreveralone'</code>.</dd> <dt><code class=\"docutils literal\">oc_bifrost['sql_ro_user']</code></dt> <dd>Default value: <code class=\"docutils literal\">'bifrost_ro'</code>.</dd> <dt><code class=\"docutils literal\">oc_bifrost['sql_user']</code></dt> <dd>The user with permission to publish data. Default value: <code class=\"docutils literal\">'bifrost'</code>.</dd> <dt><code class=\"docutils literal\">oc_bifrost['superuser_id']</code></dt> <dd>Default value: <code class=\"docutils literal\">'5ca1ab1ef005ba111abe11eddecafbad'</code>.</dd> <dt><code class=\"docutils literal\">oc_bifrost['vip']</code></dt> <dd>The virtual IP address. Default value: <code class=\"docutils literal\">'127.0.0.1'</code>.</dd> </dl>   <h3 id=\"oc-chef-authz\">oc_chef_authz</h3> <p>The <strong>opscode-authz</strong> service is used to handle authorization requests to the Chef server.</p> <p>This configuration file has the following settings for <code class=\"docutils literal\">oc_chef_authz</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">oc_chef_authz['http_cull_interval']</code></dt> <dd>Default value: <code class=\"docutils literal\">'{1, min}'</code>.</dd> <dt><code class=\"docutils literal\">oc_chef_authz['http_init_count']</code></dt> <dd>Default value: <code class=\"docutils literal\">25</code>.</dd> <dt><code class=\"docutils literal\">oc_chef_authz['http_max_age']</code></dt> <dd>Default value: <code class=\"docutils literal\">'{70, sec}'</code>.</dd> <dt><code class=\"docutils literal\">oc_chef_authz['http_max_connection_duration']</code></dt> <dd>Default value: <code class=\"docutils literal\">'{70, sec}'</code>.</dd> <dt><code class=\"docutils literal\">oc_chef_authz['http_max_count']</code></dt> <dd>Default value: <code class=\"docutils literal\">100</code>.</dd> <dt><code class=\"docutils literal\">oc_chef_authz['ibrowse_options']</code></dt> <dd>The amount of time (in milliseconds) to wait for a connection to be established. Default value: <code class=\"docutils literal\">'[{connect_timeout, 5000}]'</code>.</dd> </dl>   <h3 id=\"oc-chef-pedant\">oc-chef-pedant</h3> <p>This configuration file has the following settings for <code class=\"docutils literal\">oc-chef-pedant</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">oc_chef_pedant['debug_org_creation']</code></dt> <dd>Run tests with full output. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">oc_chef_pedant['dir']</code></dt> <dd>\n<p class=\"first\">The working directory. The default value is the recommended value. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">'/var/opt/opscode/oc-chef-pedant'</pre> </dd> <dt><code class=\"docutils literal\">oc_chef_pedant['log_directory']</code></dt> <dd>\n<p class=\"first\">The directory in which log data is stored. The default value is the recommended value. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">'/var/log/opscode/oc-chef-pedant'</pre> </dd> <dt><code class=\"docutils literal\">oc_chef_pedant['log_http_requests']</code></dt> <dd>Log HTTP requests in a file named <code class=\"docutils literal\">http-traffic.log</code> that is located in the path specified by <code class=\"docutils literal\">log_directory</code>. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">oc_chef_pedant['log_rotation']</code></dt> <dd>\n<p class=\"first\">The log rotation policy for this service. Log files are rotated when they exceed <code class=\"docutils literal\">file_maxbytes</code>. The maximum number of log files in the rotation is defined by <code class=\"docutils literal\">num_to_keep</code>. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">{ 'file_maxbytes' =&gt; 104857600, 'num_to_keep' =&gt; 10 }</pre> </dd> </dl>   <h3 id=\"oc-id\">oc-id</h3> <p>The <strong>oc-id</strong> service enables OAuth 2.0 authentication to the Chef server by external applications, including Chef Supermarket and Chef Analytics. OAuth 2.0 uses token-based authentication, where external applications use tokens that are issued by the <strong>oc-id</strong> provider. No special credentials—<code class=\"docutils literal\">webui_priv.pem</code> or privileged keys—are stored on the external application.</p> <p>This configuration file has the following settings for <code class=\"docutils literal\">oc-id</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">oc_id['administrators']</code></dt> <dd>An array of Chef server user names who may add applications to the identity service. For example, <code class=\"docutils literal\">['user1', 'user2']</code>. Default value: <code class=\"docutils literal\">[ ]</code>.</dd> <dt><code class=\"docutils literal\">oc_id['applications']</code></dt> <dd>\n<p class=\"first\">A Hash that contains OAuth 2 application information. Default value: <code class=\"docutils literal\">{ }</code>.</p> <p>To define OAuth 2 information for both Chef Analytics and Chef Supermarket, create a Hash similar to:</p> <blockquote class=\"last\"> <div>\n<pre class=\"highlight-ruby\" data-language=\"ruby\">oc_id['applications'] ||= {}\noc_id['applications']['analytics'] = {\n  'redirect_uri' =&gt; 'https://analytics.rhel.aws'\n}\noc_id['applications']['supermarket'] = {\n  'redirect_uri' =&gt; 'https://vagrantup.com/auth'\n}</pre> </div>\n</blockquote> </dd> <dt><code class=\"docutils literal\">oc_id['db_pool_size']</code></dt> <dd>The number of open connections to PostgreSQL that are maintained by the service. Default value: <code class=\"docutils literal\">'20'</code>.</dd> <dt><code class=\"docutils literal\">oc_id['dir']</code></dt> <dd>The working directory. The default value is the recommended value. Default value: none.</dd> <dt><code class=\"docutils literal\">oc_id['enable']</code></dt> <dd>Enable a service. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">oc_id['ha']</code></dt> <dd>Run the Chef server in a high availability topology. When <code class=\"docutils literal\">topology</code> is set to <code class=\"docutils literal\">ha</code>, this setting defaults to <code class=\"docutils literal\">true</code>. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">oc_id['log_directory']</code></dt> <dd>The directory in which log data is stored. The default value is the recommended value. Default value: <code class=\"docutils literal\">'/var/opt/opscode/oc_id'</code>.</dd> <dt><code class=\"docutils literal\">oc_id['log_rotation']</code></dt> <dd>\n<p class=\"first\">The log rotation policy for this service. Log files are rotated when they exceed <code class=\"docutils literal\">file_maxbytes</code>. The maximum number of log files in the rotation is defined by <code class=\"docutils literal\">num_to_keep</code>. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">{ 'file_maxbytes' =&gt; 104857600, 'num_to_keep' =&gt; 10 }</pre> </dd> <dt><code class=\"docutils literal\">oc_id['num_to_keep']</code></dt> <dd>The number of log files to keep. Default value: <code class=\"docutils literal\">10</code>.</dd> <dt><code class=\"docutils literal\">oc_id['port']</code></dt> <dd>The port on which the service is to listen. Default value: <code class=\"docutils literal\">9090</code>.</dd> <dt><code class=\"docutils literal\">oc_id['sql_database']</code></dt> <dd>The name of the database. Default value: <code class=\"docutils literal\">oc_id</code>.</dd> <dt><code class=\"docutils literal\">oc_id['sql_password']</code></dt> <dd>The password for the <code class=\"docutils literal\">sql_user</code>. Default value: <code class=\"docutils literal\">snakepliskin</code>.</dd> <dt><code class=\"docutils literal\">oc_id['sql_user']</code></dt> <dd>The user with permission to write to <code class=\"docutils literal\">sql_database</code>. Default value: <code class=\"docutils literal\">oc_id</code>.</dd> <dt><code class=\"docutils literal\">oc_id['vip']</code></dt> <dd>The virtual IP address. Default value: <code class=\"docutils literal\">'127.0.0.1'</code>.</dd> </dl>   <h3 id=\"opscode-chef-mover\">opscode-chef-mover</h3> <p>This configuration file has the following settings for <code class=\"docutils literal\">opscode-chef-mover</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">opscode_chef_mover['bulk_fetch_batch_size']</code></dt> <dd>Default value: <code class=\"docutils literal\">'5'</code>.</dd> <dt><code class=\"docutils literal\">opscode_chef_mover['cache_ttl']</code></dt> <dd>Default value: <code class=\"docutils literal\">'3600'</code>.</dd> <dt><code class=\"docutils literal\">opscode_chef_mover['db_pool_size']</code></dt> <dd>The number of open connections to PostgreSQL that are maintained by the service. Default value: <code class=\"docutils literal\">'5'</code>.</dd> <dt><code class=\"docutils literal\">opscode_chef_mover['data_dir']</code></dt> <dd>\n<p class=\"first\">The directory in which on-disk data is stored. The default value is the recommended value. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">'/var/opt/opscode/opscode-chef-mover/data'</pre> </dd> <dt><code class=\"docutils literal\">opscode_chef_mover['dir']</code></dt> <dd>\n<p class=\"first\">The working directory. The default value is the recommended value. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">'/var/opt/opscode/opscode-chef-mover'</pre> </dd> <dt><code class=\"docutils literal\">opscode_chef_mover['enable']</code></dt> <dd>Enable a service. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">opscode_chef_mover['ha']</code></dt> <dd>Run the Chef server in a high availability topology. When <code class=\"docutils literal\">topology</code> is set to <code class=\"docutils literal\">ha</code>, this setting defaults to <code class=\"docutils literal\">true</code>. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">opscode_chef_mover['ibrowse_max_pipeline_size']</code></dt> <dd>Default value: <code class=\"docutils literal\">1</code>.</dd> <dt><code class=\"docutils literal\">opscode_chef_mover['ibrowse_max_sessions']</code></dt> <dd>Default value: <code class=\"docutils literal\">256</code>.</dd> <dt><code class=\"docutils literal\">opscode_chef_mover['log_directory']</code></dt> <dd>\n<p class=\"first\">The directory in which log data is stored. The default value is the recommended value. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">'/var/log/opscode/opscode-chef-mover'</pre> </dd> <dt><code class=\"docutils literal\">opscode_chef_mover['log_rotation']</code></dt> <dd>\n<p class=\"first\">The log rotation policy for this service. Log files are rotated when they exceed <code class=\"docutils literal\">file_maxbytes</code>. The maximum number of log files in the rotation is defined by <code class=\"docutils literal\">num_to_keep</code>. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">{ 'file_maxbytes' =&gt; 104857600, 'num_to_keep' =&gt; 10 }</pre> </dd> <dt><code class=\"docutils literal\">opscode_chef_mover['max_cache_size']</code></dt> <dd>Default value: <code class=\"docutils literal\">'10000'</code>.</dd> <dt><code class=\"docutils literal\">opscode_chef_mover['solr_http_cull_interval']</code></dt> <dd>Default value: <code class=\"docutils literal\">'{1, min}'</code>.</dd> <dt><code class=\"docutils literal\">opscode_chef_mover['solr_http_init_count']</code></dt> <dd>Default value: <code class=\"docutils literal\">25</code>.</dd> <dt><code class=\"docutils literal\">opscode_chef_mover['solr_http_max_age']</code></dt> <dd>Default value: <code class=\"docutils literal\">'{70, sec}'</code>.</dd> <dt><code class=\"docutils literal\">opscode_chef_mover['solr_http_max_connection_duration']</code></dt> <dd>Default value: <code class=\"docutils literal\">'{70, sec}'</code>.</dd> <dt><code class=\"docutils literal\">opscode_chef_mover['solr_http_max_count']</code></dt> <dd>Default value: <code class=\"docutils literal\">100</code>.</dd> <dt><code class=\"docutils literal\">opscode_chef_mover['solr_ibrowse_options']</code></dt> <dd>Default value: <code class=\"docutils literal\">'[{connect_timeout, 10000}]'</code>.</dd> <dt><code class=\"docutils literal\">opscode_chef_mover['solr_timeout']</code></dt> <dd>Default value: <code class=\"docutils literal\">30000</code>.</dd> </dl>   <h3 id=\"opscode-erchef\">opscode-erchef</h3> <p>The <strong>opscode-erchef</strong> service is an Erlang-based service that is used to handle Chef server API requests to the following areas within the Chef server:</p> <ul class=\"simple\"> <li>Cookbooks</li> <li>Data bags</li> <li>Environments</li> <li>Nodes</li> <li>Roles</li> <li>Sandboxes</li> <li>Search</li> </ul> <p>This configuration file has the following settings for <code class=\"docutils literal\">opscode-erchef</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">opscode_erchef['auth_skew']</code></dt> <dd>Default value: <code class=\"docutils literal\">900</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['authz_fanout']</code></dt> <dd>Default value: <code class=\"docutils literal\">20</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['authz_timeout']</code></dt> <dd>The amount of time (in seconds) before a request to the <strong>oc_bifrost</strong> service times out. Default value: <code class=\"docutils literal\">2000</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['base_resource_url']</code></dt> <dd>The base URL to which the service is to return links to API resources. Use <code class=\"docutils literal\">:host_header</code> to ensure the URL is derived from the host header of the incoming HTTP request. Default value: <code class=\"docutils literal\">:host_header</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['bulk_fetch_batch_size']</code></dt> <dd>The number of nodes that may be deserialized. Currently only applies to the <code class=\"docutils literal\">/search</code> endpoint in the Chef server API. The default value is the recommended value. Default value: <code class=\"docutils literal\">5</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['cache_ttl']</code></dt> <dd>Default value: <code class=\"docutils literal\">3600</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['cleanup_batch_size']</code></dt> <dd>Default value: <code class=\"docutils literal\">0</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['couchdb_max_conn']</code></dt> <dd>Default value: <code class=\"docutils literal\">'100'</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['db_pool_size']</code></dt> <dd>The number of open connections to PostgreSQL that are maintained by the service. Default value: <code class=\"docutils literal\">20</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['depsolver_timeout']</code></dt> <dd>The amount of time (in milliseconds) to wait for cookbook dependency problems to be solved. Default value: <code class=\"docutils literal\">'5000'</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['depsolver_worker_count']</code></dt> <dd>The number of Ruby processes for which cookbook dependency problems are unsolved. Use the <code class=\"docutils literal\">pgrep -fl depselector</code> command to verify the number of depsolver workers that are running. If you are seeing 503 service unavailable errors, increase this value. Default value: <code class=\"docutils literal\">'5'</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['dir']</code></dt> <dd>The working directory. The default value is the recommended value. Default value: <code class=\"docutils literal\">/var/opt/opscode/opscode-erchef</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['enable']</code></dt> <dd>Enable a service. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['enable_actionlog']</code></dt> <dd>Use to enable Chef actions, a premium feature of the Chef server. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['ha']</code></dt> <dd>Run the Chef server in a high availability topology. When <code class=\"docutils literal\">topology</code> is set to <code class=\"docutils literal\">ha</code>, this setting defaults to <code class=\"docutils literal\">true</code>. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['ibrowse_max_pipeline_size']</code></dt> <dd>Default value: <code class=\"docutils literal\">1</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['ibrowse_max_sessions']</code></dt> <dd>Default value: <code class=\"docutils literal\">256</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['listen']</code></dt> <dd>The IP address on which the service is to listen. Default value: <code class=\"docutils literal\">127.0.0.1</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['log_directory']</code></dt> <dd>The directory in which log data is stored. The default value is the recommended value. Default value: <code class=\"docutils literal\">/var/log/opscode/opscode-erchef</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['log_rotation']</code></dt> <dd>\n<p class=\"first\">The log rotation policy for this service. Log files are rotated when they exceed <code class=\"docutils literal\">file_maxbytes</code>. The maximum number of log files in the rotation is defined by <code class=\"docutils literal\">num_to_keep</code>. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">{ 'file_maxbytes' =&gt; 104857600, 'num_to_keep' =&gt; 10 }</pre> </dd> <dt><code class=\"docutils literal\">opscode_erchef['max_cache_size']</code></dt> <dd>Default value: <code class=\"docutils literal\">10000</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['max_request_size']</code></dt> <dd>Default value: <code class=\"docutils literal\">1000000</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['nginx_bookshelf_caching']</code></dt> <dd>Whether Nginx is used to cache cookbooks. When <code class=\"docutils literal\">:on</code>, Nginx serves up the cached content instead of forwarding the request. Default value: <code class=\"docutils literal\">:off</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['port']</code></dt> <dd>The port on which the service is to listen. Default value: <code class=\"docutils literal\">8000</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['root_metric_key']</code></dt> <dd>Default value: <code class=\"docutils literal\">chefAPI</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['s3_bucket']</code></dt> <dd>The name of the Amazon Simple Storage Service (S3) bucket. (This is configurable and may be pointed at external storage locations, such as Amazon EC2. Four settings require configuration when pointing at an external cookbook storage location: <code class=\"docutils literal\">bookshelf['vip']</code>, for the endpoint used by the chef-client; <code class=\"docutils literal\">bookshelf['external_url']</code>, for the endpoint used by the Chef server; <code class=\"docutils literal\">bookshelf['access_key_id']</code>, for user access key; <code class=\"docutils literal\">bookshelf['secret_access_key']</code>, for secret key; and <code class=\"docutils literal\">opscode_erchef['s3_bucket']</code>, for the bucket name. Reconfigure the Chef server after changing these settings. Default value: <code class=\"docutils literal\">bookshelf</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['s3_parallel_ops_fanout']</code></dt> <dd>Default value: <code class=\"docutils literal\">20</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['s3_parallel_ops_timeout']</code></dt> <dd>Default value: <code class=\"docutils literal\">5000</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['s3_url_expiry_window_size']</code></dt> <dd>The frequency at which unique URLs are generated. This value may be a specific amount of time, i.e. <code class=\"docutils literal\">15m</code> (fifteen minutes) or a percentage of the value of <code class=\"docutils literal\">s3_url_ttl</code>, i.e. <code class=\"docutils literal\">10%</code>. Default value: <code class=\"docutils literal\">:off</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['s3_url_ttl']</code></dt> <dd>The amount of time (in seconds) before connections to the server expire. If node bootstraps are timing out, increase this setting. Default value: <code class=\"docutils literal\">28800</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['strict_search_result_acls']</code></dt> <dd>\n<p class=\"first\">Use to specify that search results only return objects to which an actor (user, client, etc.) has read access, as determined by ACL settings. This affects all searches. When <code class=\"docutils literal\">true</code>, the performance of the Chef management console may increase because it enables the Chef management console to skip redundant ACL checks. To ensure the Chef management console is configured properly, after this setting has been applied with a <code class=\"docutils literal\">chef-server-ctl reconfigure</code> run <code class=\"docutils literal\">chef-manage-ctl reconfigure</code> to ensure the Chef management console also picks up the setting. Default value: <code class=\"docutils literal\">false</code>.</p> <div class=\"last admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">When <code class=\"docutils literal\">true</code>, <code class=\"docutils literal\">opscode_erchef['strict_search_result_acls']</code> affects all search results and any actor (user, client, etc.) that does not have read access to a search result will not be able to view it. For example, this could affect search results returned during chef-client runs if a chef-client does not have permission to read the information.</p> </div> </dd> <dt><code class=\"docutils literal\">opscode_erchef['udp_socket_pool_size']</code></dt> <dd>Default value: <code class=\"docutils literal\">20</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['umask']</code></dt> <dd>Default value: <code class=\"docutils literal\">0022</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['validation_client_name']</code></dt> <dd>Default value: <code class=\"docutils literal\">chef-validator</code>.</dd> <dt><code class=\"docutils literal\">opscode_erchef['vip']</code></dt> <dd>The virtual IP address. Default value: <code class=\"docutils literal\">127.0.0.1</code>.</dd> </dl>   <h3 id=\"opscode-expander\">opscode-expander</h3> <p>The <strong>opscode-expander</strong> service is used to process data (pulled from the <strong>rabbitmq</strong> service’s message queue) so that it can be properly indexed by the <strong>opscode-solr4</strong> service.</p> <p>This configuration file has the following settings for <code class=\"docutils literal\">opscode-expander</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">opscode_expander['consumer_id']</code></dt> <dd>The identity of the consumer to which messages are published. Default value: <code class=\"docutils literal\">default</code>.</dd> <dt><code class=\"docutils literal\">opscode_expander['dir']</code></dt> <dd>\n<p class=\"first\">The working directory. The default value is the recommended value. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">/var/opt/opscode/opscode-expander</pre> </dd> <dt><code class=\"docutils literal\">opscode_expander['enable']</code></dt> <dd>Enable a service. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">opscode_expander['ha']</code></dt> <dd>Run the Chef server in a high availability topology. When <code class=\"docutils literal\">topology</code> is set to <code class=\"docutils literal\">ha</code>, this setting defaults to <code class=\"docutils literal\">true</code>. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">opscode_expander['log_directory']</code></dt> <dd>\n<p class=\"first\">The directory in which log data is stored. The default value is the recommended value. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">/var/log/opscode/opscode-expander</pre> </dd> <dt><code class=\"docutils literal\">opscode_expander['log_rotation']</code></dt> <dd>\n<p class=\"first\">The log rotation policy for this service. Log files are rotated when they exceed <code class=\"docutils literal\">file_maxbytes</code>. The maximum number of log files in the rotation is defined by <code class=\"docutils literal\">num_to_keep</code>. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">{ 'file_maxbytes' =&gt; 104857600, 'num_to_keep' =&gt; 10 }</pre> </dd> <dt><code class=\"docutils literal\">opscode_expander['nodes']</code></dt> <dd>The number of allowed worker processes. Default value: <code class=\"docutils literal\">2</code>.</dd> <dt><code class=\"docutils literal\">opscode_expander['reindexer_log_directory']</code></dt> <dd>\n<p class=\"first\">The directory in which <code class=\"docutils literal\">opscode-expander-reindexer</code> logs files are located. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">/var/log/opscode/opscode-expander-reindexer</pre> </dd> </dl>   <h3 id=\"opscode-solr4\">opscode-solr4</h3> <p>The <strong>opscode-solr4</strong> service is used to create the search indexes used for searching objects like nodes, data bags, and cookbooks. (This service ensures timely search results via the Chef server API; data that is used by the Chef platform is stored in PostgreSQL.)</p> <p>This configuration file has the following settings for <code class=\"docutils literal\">opscode-solr4</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">opscode_solr4['auto_soft_commit']</code></dt> <dd>The maximum number of documents before a soft commit is triggered. Default value: <code class=\"docutils literal\">1000</code>.</dd> <dt><code class=\"docutils literal\">opscode_solr4['commit_interval']</code></dt> <dd>The frequency (in seconds) at which node objects are added to the Apache Solr search index. This value should be tuned carefully. When data is committed to the Apache Solr index, all incoming updates are blocked. If the duration between updates is too short, it is possible for the rate at which updates are asked to occur to be faster than the rate at which objects can be actually committed. Default value: <code class=\"docutils literal\">60000</code> (every 60 seconds).</dd> <dt><code class=\"docutils literal\">opscode_solr4['data_dir']</code></dt> <dd>\n<p class=\"first\">The directory in which on-disk data is stored. The default value is the recommended value. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">/var/opt/opscode/opscode-solr4/data</pre> </dd> <dt><code class=\"docutils literal\">opscode_solr4['dir']</code></dt> <dd>\n<p class=\"first\">The working directory. The default value is the recommended value. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">/var/opt/opscode/opscode-solr4</pre> </dd> <dt><code class=\"docutils literal\">opscode_solr4['enable']</code></dt> <dd>Enable a service. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">opscode_solr4['ha']</code></dt> <dd>Run the Chef server in a high availability topology. When <code class=\"docutils literal\">topology</code> is set to <code class=\"docutils literal\">ha</code>, this setting defaults to <code class=\"docutils literal\">true</code>. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">opscode_solr4['heap_size']</code></dt> <dd>The amount of memory (in MBs) available to Apache Solr. If there is not enough memory available, search queries made by nodes to Apache Solr may fail. The amount of memory that must be available also depends on the number of nodes in the organization, the frequency of search queries, and other characteristics that are unique to each organization. In general, as the number of nodes increases, so does the amount of memory. The default value should work for many organizations with fewer than 25 nodes. For an organization with several hundred nodes, the amount of memory that is required often exceeds 3GB. Default value: <code class=\"docutils literal\">nil</code>, which is equivalent to 25% of the system memory or 1024 (MB, but this setting is specified as an integer number of MB in EC11), whichever is smaller.</dd> <dt><code class=\"docutils literal\">opscode_solr4['ip_address']</code></dt> <dd>The IP address for the machine on which Apache Solr is running. Default value: <code class=\"docutils literal\">127.0.0.1</code>.</dd> <dt><code class=\"docutils literal\">opscode_solr4['java_opts']</code></dt> <dd>A Hash of <code class=\"docutils literal\">JAVA_OPTS</code> environment variables to be set. (<code class=\"docutils literal\">-XX:NewSize</code> is configured using the <code class=\"docutils literal\">new_size</code> setting.) Default value: <code class=\"docutils literal\">' '</code> (empty).</dd> <dt><code class=\"docutils literal\">opscode_solr4['log_directory']</code></dt> <dd>\n<p class=\"first\">The directory in which log data is stored. The default value is the recommended value. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">/var/log/opscode/opscode-solr4</pre> </dd> <dt><code class=\"docutils literal\">opscode_solr4['log_rotation']</code></dt> <dd>\n<p class=\"first\">The log rotation policy for this service. Log files are rotated when they exceed <code class=\"docutils literal\">file_maxbytes</code>. The maximum number of log files in the rotation is defined by <code class=\"docutils literal\">num_to_keep</code>. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">{ 'file_maxbytes' =&gt; 104857600, 'num_to_keep' =&gt; 10 }</pre> </dd> <dt><code class=\"docutils literal\">opscode_solr4['max_commit_docs']</code></dt> <dd>The frequency (in documents) at which node objects are added to the Apache Solr search index. This value should be tuned carefully. When data is committed to the Apache Solr index, all incoming updates are blocked. If the duration between updates is too short, it is possible for the rate at which updates are asked to occur to be faster than the rate at which objects can be actually committed. Default value: <code class=\"docutils literal\">1000</code> (every 1000 documents).</dd> <dt><code class=\"docutils literal\">opscode_solr4['max_field_length']</code></dt> <dd>The maximum field length (in number of tokens/terms). If a field length exceeds this value, Apache Solr may not be able to complete building the index. Default value: <code class=\"docutils literal\">100000</code> (increased from the Apache Solr default value of <code class=\"docutils literal\">10000</code>).</dd> <dt><code class=\"docutils literal\">opscode_solr4['max_merge_docs']</code></dt> <dd>The maximum number of index segments allowed before they are merged into a single index. Default value: <code class=\"docutils literal\">2147483647</code>.</dd> <dt><code class=\"docutils literal\">opscode_solr4['merge_factor']</code></dt> <dd>The maximum number of document updates that can be stored in memory before being flushed and added to the current index segment. Default value: <code class=\"docutils literal\">15</code>.</dd> <dt><code class=\"docutils literal\">opscode_solr4['new_size']</code></dt> <dd>Configure the <code class=\"docutils literal\">-XX:NewSize</code> <code class=\"docutils literal\">JAVA_OPTS</code> environment variable. Default value: <code class=\"docutils literal\">nil</code>.</dd> <dt><code class=\"docutils literal\">opscode_solr4['poll_seconds']</code></dt> <dd>The frequency (in seconds) at which the secondary machine polls the primary. Default value: <code class=\"docutils literal\">20</code>.</dd> <dt><code class=\"docutils literal\">opscode_solr4['port']</code></dt> <dd>The port on which the service is to listen. Default value: <code class=\"docutils literal\">8983</code>.</dd> <dt><code class=\"docutils literal\">opscode_solr4['ram_buffer_size']</code></dt> <dd>The size (in megabytes) of the RAM buffer. When document updates exceed this amout, pending updates are flushed. Default value: <code class=\"docutils literal\">100</code>.</dd> <dt><code class=\"docutils literal\">opscode_solr4['url']</code></dt> <dd>Default value: <code class=\"docutils literal\">'http://localhost:8983/solr'</code>.</dd> <dt><code class=\"docutils literal\">opscode_solr4['vip']</code></dt> <dd>The virtual IP address. Default value: <code class=\"docutils literal\">127.0.0.1</code>.</dd> </dl>   <h3 id=\"postgresql\">postgresql</h3> <p>The <strong>postgresql</strong> service is used to store node, object, and user data.</p> <p>This configuration file has the following settings for <code class=\"docutils literal\">postgresql</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">postgresql['checkpoint_completion_target']</code></dt> <dd>A completion percentage that is used to determine how quickly a checkpoint should finish in relation to the completion status of the next checkpoint. For example, if the value is <code class=\"docutils literal\">0.5</code>, then a checkpoint attempts to finish before 50% of the next checkpoint is done. Default value: <code class=\"docutils literal\">0.5</code>.</dd> <dt><code class=\"docutils literal\">postgresql['checkpoint_segments']</code></dt> <dd>The maximum amount (in megabytes) between checkpoints in log file segments. Default value: <code class=\"docutils literal\">3</code>.</dd> <dt><code class=\"docutils literal\">postgresql['checkpoint_timeout']</code></dt> <dd>The amount of time (in minutes) between checkpoints. Default value: <code class=\"docutils literal\">5min</code>.</dd> <dt><code class=\"docutils literal\">postgresql['checkpoint_warning']</code></dt> <dd>The frequency (in seconds) at which messages are sent to the server log files if checkpoint segments are being filled faster than their currently configured values. Default value: <code class=\"docutils literal\">30s</code>.</dd> <dt><code class=\"docutils literal\">postgresql['data_dir']</code></dt> <dd>\n<p class=\"first\">The directory in which on-disk data is stored. The default value is the recommended value. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">/var/opt/opscode/postgresql/#{node['private_chef']['postgresql']['version']}/data</pre> </dd> <dt><code class=\"docutils literal\">postgresql['db_superuser']</code></dt> <dd>Required when <code class=\"docutils literal\">postgresql['external']</code> is set to <code class=\"docutils literal\">true</code>. The PostgreSQL user name. This user must be granted either the <code class=\"docutils literal\">CREATE ROLE</code> and <code class=\"docutils literal\">CREATE DATABASE</code> permissions in PostgreSQL or be granted <code class=\"docutils literal\">SUPERUSER</code> permission. This user must also have an entry in the host-based authentication configuration file used by PostgreSQL (traditionally named <code class=\"docutils literal\">pg_hba.conf</code>). Default value: <code class=\"docutils literal\">'superuser_userid'</code>.</dd> <dt><code class=\"docutils literal\">postgresql['db_superuser_password']</code></dt> <dd>Required when <code class=\"docutils literal\">postgresql['external']</code> is set to <code class=\"docutils literal\">true</code>. The password for the user specified by <code class=\"docutils literal\">postgresql['db_superuser']</code>. Default value: <code class=\"docutils literal\">'the password'</code>.</dd> <dt><code class=\"docutils literal\">postgresql['dir']</code></dt> <dd>\n<p class=\"first\">The working directory. The default value is the recommended value. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">/var/opt/opscode/postgresql/#{node['private_chef']['postgresql']['version']}</pre> </dd> <dt><code class=\"docutils literal\">postgresql['effective_cache_size']</code></dt> <dd>The size of the disk cache that is used for data files. Default value: 50% of available RAM.</dd> <dt><code class=\"docutils literal\">postgresql['enable']</code></dt> <dd>Enable a service. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">postgresql['external']</code></dt> <dd>Required. Set to <code class=\"docutils literal\">true</code> to run PostgreSQL external to the Chef server. Must be set once only on a new installation of the Chef server before the first <code class=\"docutils literal\">chef-server-ctl reconfigure</code> command is run. If this is set after a reconfigure or set to <code class=\"docutils literal\">false</code>, any reconfigure of the Chef server will return an error. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">postgresql['ha']</code></dt> <dd>Run the Chef server in a high availability topology. When <code class=\"docutils literal\">topology</code> is set to <code class=\"docutils literal\">ha</code>, this setting defaults to <code class=\"docutils literal\">true</code>. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">postgresql['home']</code></dt> <dd>The home directory for PostgreSQL. Default value: <code class=\"docutils literal\">/var/opt/opscode/postgresql</code>.</dd> <dt><code class=\"docutils literal\">postgresql['keepalives_count']</code></dt> <dd>The maximum number of keepalive proves that should be sent before dropping a connection. Default value: <code class=\"docutils literal\">2</code>.</dd> <dt><code class=\"docutils literal\">postgresql['keepalives_idle']</code></dt> <dd>The amount of time (in seconds) a connection must remain idle before keepalive probes will resume. Default value: <code class=\"docutils literal\">60</code>.</dd> <dt><code class=\"docutils literal\">postgresql['keepalives_interval']</code></dt> <dd>The amount of time (in seconds) between probes. Default value: <code class=\"docutils literal\">15</code>.</dd> <dt><code class=\"docutils literal\">postgresql['listen_address']</code></dt> <dd>The connection source to which PostgreSQL is to respond. Default value: <code class=\"docutils literal\">localhost</code>.</dd> <dt><code class=\"docutils literal\">postgresql['log_directory']</code></dt> <dd>\n<p class=\"first\">The directory in which log data is stored. The default value is the recommended value. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">/var/log/opscode/postgresql/#{node['private_chef']['postgresql']['version']}</pre> </dd> <dt><code class=\"docutils literal\">postgresql['log_min_duration_statement']</code></dt> <dd>When to log a slow PostgreSQL query statement. Possible values: <code class=\"docutils literal\">-1</code> (disabled, do not log any statements), <code class=\"docutils literal\">0</code> (log every statement), or an integer greater than zero. When the integer is greater than zero, this value is the amount of time (in milliseconds) that a query statement must have run before it is logged. Default value: <code class=\"docutils literal\">-1</code>.</dd> <dt><code class=\"docutils literal\">postgresql['log_rotation']</code></dt> <dd>\n<p class=\"first\">The log rotation policy for this service. Log files are rotated when they exceed <code class=\"docutils literal\">file_maxbytes</code>. The maximum number of log files in the rotation is defined by <code class=\"docutils literal\">num_to_keep</code>. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">{ 'file_maxbytes' =&gt; 104857600, 'num_to_keep' =&gt; 10 }</pre> </dd> <dt><code class=\"docutils literal\">postgresql['max_connections']</code></dt> <dd>The maximum number of allowed concurrent connections. Default value: <code class=\"docutils literal\">350</code>.</dd> <dt><code class=\"docutils literal\">postgresql['md5_auth_cidr_addresses']</code></dt> <dd>Use instead of <code class=\"docutils literal\">trust_auth_cidr_addresses</code> to encrypt passwords using MD5 hashes. Default value: <code class=\"docutils literal\">[ '127.0.0.1/32', '::1/128' ]</code>.</dd> <dt><code class=\"docutils literal\">postgresql['port']</code></dt> <dd>Optional when <code class=\"docutils literal\">postgresql['external']</code> is set to <code class=\"docutils literal\">true</code>. The port on which the service is to listen. The port used by PostgreSQL if that port is <strong>not</strong> 5432. Default value: <code class=\"docutils literal\">5432</code>.</dd> <dt><code class=\"docutils literal\">postgresql['shared_buffers']</code></dt> <dd>\n<p class=\"first\">The amount of memory that is dedicated to PostgreSQL for data caching. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">#{(node['memory']['total'].to_i / 4) / (1024)}MB</pre> </dd> <dt><code class=\"docutils literal\">postgresql['shell']</code></dt> <dd>Default value: <code class=\"docutils literal\">/bin/sh</code>.</dd> <dt><code class=\"docutils literal\">postgresql['shmall']</code></dt> <dd>The total amount of available shared memory. Default value: <code class=\"docutils literal\">4194304</code>.</dd> <dt><code class=\"docutils literal\">postgresql['shmmax']</code></dt> <dd>The maximum amount of shared memory. Default value: <code class=\"docutils literal\">17179869184</code>.</dd> <dt><code class=\"docutils literal\">postgresql['sql_password']</code></dt> <dd>The password for the PostgreSQL user account. Default value: <code class=\"docutils literal\">snakepliskin</code>.</dd> <dt><code class=\"docutils literal\">postgresql['sql_ro_password']</code></dt> <dd>Default value: <code class=\"docutils literal\">shmunzeltazzen</code>.</dd> <dt><code class=\"docutils literal\">postgresql['sql_ro_user']</code></dt> <dd>Default value: <code class=\"docutils literal\">opscode_chef_ro</code>.</dd> <dt><code class=\"docutils literal\">postgresql['sql_user']</code></dt> <dd>Default value: <code class=\"docutils literal\">opscode_chef</code>.</dd> <dt><code class=\"docutils literal\">postgresql['trust_auth_cidr_addresses']</code></dt> <dd>Use for clear-text passwords. See <code class=\"docutils literal\">md5_auth_cidr_addresses</code>. Default value: <code class=\"docutils literal\">'127.0.0.1/32', '::1/128'</code>.</dd> <dt><code class=\"docutils literal\">postgresql['user_path']</code></dt> <dd>\n<p class=\"first\">Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">/opt/opscode/embedded/bin:/opt/opscode/bin:$PATH</pre> </dd> <dt><code class=\"docutils literal\">postgresql['username']</code></dt> <dd>The PostgreSQL account user name. Default value: <code class=\"docutils literal\">opscode-pgsql</code>.</dd> <dt><code class=\"docutils literal\">postgresql['version']</code></dt> <dd>The (currently) hardcoded version of PostgreSQL. Default value: <code class=\"docutils literal\">'9.2'</code>.</dd> <dt><code class=\"docutils literal\">postgresql['vip']</code></dt> <dd>Required when <code class=\"docutils literal\">postgresql['external']</code> is set to <code class=\"docutils literal\">true</code>. The virtual IP address. The host for this IP address must be online and reachable from the Chef server via the port specified by <code class=\"docutils literal\">postgresql['port']</code>. Default value: <code class=\"docutils literal\">127.0.0.1</code>. Set this value to the IP address or hostname for the machine on which external PostgreSQL is located when <code class=\"docutils literal\">postgresql['external']</code> is set to <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">postgresql['work_mem']</code></dt> <dd>The size (in megabytes) of allowed in-memory sorting. Default value: <code class=\"docutils literal\">8MB</code>.</dd> </dl>   <h3 id=\"rabbitmq\">rabbitmq</h3> <p>The <strong>rabbitmq</strong> service is used to provide the message queue that is used by the Chef server to get search data to Apache Solr so that it can be indexed for search. When Chef Analytics is confiugred, the <strong>rabbitmq</strong> service is also used to send data from the Chef server to the Chef Analytics server.</p> <p>This configuration file has the following settings for <code class=\"docutils literal\">rabbitmq</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">rabbitmq['actions_exchange']</code></dt> <dd>The name of the exchange to which Chef actions publishes actions data. Default value: <code class=\"docutils literal\">'actions'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['actions_password']</code></dt> <dd>The password for the <code class=\"docutils literal\">actions_user</code>. Default value: <code class=\"docutils literal\">'changeme'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['actions_user']</code></dt> <dd>The user with permission to publish actions data. Default value: <code class=\"docutils literal\">'actions'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['actions_vhost']</code></dt> <dd>The virtual host to which Chef actions publishes actions data. Default value: <code class=\"docutils literal\">'/analytics'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['analytics_max_length']</code></dt> <dd>The maximum number of messages that can be queued before RabbitMQ automatically drops messages from the front of the queue to make room for new messages. Default value: <code class=\"docutils literal\">10000</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['consumer_id']</code></dt> <dd>The identity of the consumer to which messages are published. Default value: <code class=\"docutils literal\">'hotsauce'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['data_dir']</code></dt> <dd>The directory in which on-disk data is stored. The default value is the recommended value. Default value: <code class=\"docutils literal\">'/var/opt/opscode/rabbitmq/db'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['dir']</code></dt> <dd>The working directory. The default value is the recommended value. Default value: <code class=\"docutils literal\">'/var/opt/opscode/rabbitmq'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['drop_on_full_capacity']</code></dt> <dd>Specify if messages will stop being sent to the RabbitMQ queue when it is at capacity. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['enable']</code></dt> <dd>Enable a service. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['ha']</code></dt> <dd>Run the Chef server in a high availability topology. When <code class=\"docutils literal\">topology</code> is set to <code class=\"docutils literal\">ha</code>, this setting defaults to <code class=\"docutils literal\">true</code>. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['jobs_password']</code></dt> <dd>Default value: <code class=\"docutils literal\">'workcomplete'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['jobs_user']</code></dt> <dd>Default value: <code class=\"docutils literal\">'jobs'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['jobs_vhost']</code></dt> <dd>Default value: <code class=\"docutils literal\">'/jobs'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['log_directory']</code></dt> <dd>The directory in which log data is stored. The default value is the recommended value. Default value: <code class=\"docutils literal\">'/var/log/opscode/rabbitmq'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['log_rotation']</code></dt> <dd>\n<p class=\"first\">The log rotation policy for this service. Log files are rotated when they exceed <code class=\"docutils literal\">file_maxbytes</code>. The maximum number of log files in the rotation is defined by <code class=\"docutils literal\">num_to_keep</code>. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">{ 'file_maxbytes' =&gt; 104857600, 'num_to_keep' =&gt; 10 }</pre> </dd> <dt><code class=\"docutils literal\">rabbitmq['management_enabled']</code></dt> <dd>Specify if the rabbitmq-management plugin is enabled. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['management_password']</code></dt> <dd>The rabbitmq-management plugin password. Default value: <code class=\"docutils literal\">'chefrocks'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['management_port']</code></dt> <dd>The rabbitmq-management plugin port. Default value: <code class=\"docutils literal\">15672</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['management_user']</code></dt> <dd>The rabbitmq-management plugin user. Default value: <code class=\"docutils literal\">'rabbitmgmt'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['node_ip_address']</code></dt> <dd>\n<p class=\"first\">The bind IP address for RabbitMQ. Default value: <code class=\"docutils literal\">'127.0.0.1'</code>.</p> <p class=\"last\">Chef Analytics uses the same RabbitMQ service that is configured on the Chef server. When the Chef Analytics server is configured as a standalone server, the default settings for <code class=\"docutils literal\">rabbitmq['node_ip_address']</code> and <code class=\"docutils literal\">rabbitmq['vip']</code> must be updated. When the Chef Analytics server is configured as a standalone server, change this value to <code class=\"docutils literal\">0.0.0.0</code>.</p> </dd> <dt><code class=\"docutils literal\">rabbitmq['node_port']</code></dt> <dd>The port on which the service is to listen. Default value: <code class=\"docutils literal\">'5672'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['nodename']</code></dt> <dd>The name of the node. Default value: <code class=\"docutils literal\">'rabbit@localhost'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['password']</code></dt> <dd>The password for the RabbitMQ user. Default value: <code class=\"docutils literal\">'chefrocks'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['prevent_erchef_startup_on_full_capacity']</code></dt> <dd>Specify if the Chef server will start when the monitored RabbitMQ queue is full. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['queue_at_capacity_affects_overall_status']</code></dt> <dd>Specify if the <code class=\"docutils literal\">_status</code> endpoint in the Chef server API will fail if the monitored queue is at capacity. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['queue_length_monitor_enabled']</code></dt> <dd>Specify if the queue length monitor is enabled. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['queue_length_monitor_millis']</code></dt> <dd>The frequency (in milliseconds) at which the length of the RabbitMQ queue is checked. Default value: <code class=\"docutils literal\">30000</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['queue_length_monitor_timeout_millis']</code></dt> <dd>The timeout (in milliseconds) at which calls to the queue length monitor will stop if the Chef server is overloaded. Default value: <code class=\"docutils literal\">5000</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['queue_length_monitor_queue']</code></dt> <dd>The RabbitMQ queue that is observed by queue length monitor. Default value: <code class=\"docutils literal\">'alaska'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['queue_length_monitor_vhost']</code></dt> <dd>The virtual host for the RabbitMQ queue that is observed by queue length monitor. Default value: <code class=\"docutils literal\">'/analytics'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['rabbit_mgmt_http_cull_interval']</code></dt> <dd>The maximum cull interval (in seconds) for the HTTP connection pool that is used by the rabbitmq-management plugin. Default value: <code class=\"docutils literal\">60</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['rabbit_mgmt_http_init_count']</code></dt> <dd>The initial worker count for the HTTP connection pool that is used by the rabbitmq-management plugin. Default value: <code class=\"docutils literal\">25</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['rabbit_mgmt_http_max_age']</code></dt> <dd>The maximum connection worker age (in seconds) for the HTTP connection pool that is used by the rabbitmq-management plugin. Default value: <code class=\"docutils literal\">70</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['rabbit_mgmt_http_max_connection_duration']</code></dt> <dd>The maximum connection duration (in seconds) for the HTTP connection pool that is used by the rabbitmq-management plugin. Default value: <code class=\"docutils literal\">70</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['rabbit_mgmt_http_max_count']</code></dt> <dd>The maximum worker count for the HTTP connection pool that is used by the rabbitmq-management plugin. Default value: <code class=\"docutils literal\">100</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['rabbit_mgmt_ibrowse_options']</code></dt> <dd>An array of comma-separated key-value pairs of ibrowse options for the HTTP connection pool that is used by the rabbitmq-management plugin. Default value: <code class=\"docutils literal\">'{connect_timeout, 10000}'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['rabbit_mgmt_timeout']</code></dt> <dd>The timeout for the HTTP connection pool that is used by the rabbitmq-management plugin. Default value: <code class=\"docutils literal\">30000</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['reindexer_vhost']</code></dt> <dd>Default value: <code class=\"docutils literal\">'/reindexer'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['ssl_versions']</code></dt> <dd>The SSL versions used by the rabbitmq-management plugin. (See also <a class=\"reference external\" href=\"https://www.rabbitmq.com/ssl.html\">https://www.rabbitmq.com/ssl.html</a>.) Default value: <code class=\"docutils literal\">['tlsv1.2', 'tlsv1.1']</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['user']</code></dt> <dd>Default value: <code class=\"docutils literal\">'chef'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['vhost']</code></dt> <dd>Default value: <code class=\"docutils literal\">'/chef'</code>.</dd> <dt><code class=\"docutils literal\">rabbitmq['vip']</code></dt> <dd>\n<p class=\"first\">The virtual IP address. Default value: <code class=\"docutils literal\">'127.0.0.1'</code>.</p> <p class=\"last\">Chef Analytics uses the same RabbitMQ service that is configured on the Chef server. When the Chef Analytics server is configured as a standalone server, the default settings for <code class=\"docutils literal\">rabbitmq['node_ip_address']</code> and <code class=\"docutils literal\">rabbitmq['vip']</code> must be updated. When the Chef Analytics server is configured as a standalone server, this value should be updated to be the backend VIP address for the Chef server.</p> </dd> </dl>   <h3 id=\"redis-lb\">redis_lb</h3> <p>Key-value store used in conjunction with Nginx to route requests and populate request data used by the Chef server.</p> <p>This configuration file has the following settings for <code class=\"docutils literal\">redis_lb</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">redis_lb['activerehashing']</code></dt> <dd>Enable active rehashing. Default value: <code class=\"docutils literal\">'no'</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['aof_rewrite_min_size']</code></dt> <dd>The minimum size of the append-only file. Only files larger than this value are rewritten. Default value: <code class=\"docutils literal\">'16mb'</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['aof_rewrite_percent']</code></dt> <dd>The size of the current append-only file, as compared to the base size. The append-only file is rewritten when the current file exceeds the base size by this value. Default value: <code class=\"docutils literal\">'50'</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['appendfsync']</code></dt> <dd>The frequency at which the operating system writes data on-disk, instead of waiting for more data. Possible values: <code class=\"docutils literal\">no</code> (don’t fsync, let operating system flush data), <code class=\"docutils literal\">always</code> (fsync after every write to the append-only log file), and <code class=\"docutils literal\">everysec</code> (fsync only once time per second). Default value: <code class=\"docutils literal\">'always'</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['appendonly']</code></dt> <dd>Dump data asynchronously on-disk or to an append-only log file. Set to <code class=\"docutils literal\">yes</code> to dump data to an append-only log file. Default value: <code class=\"docutils literal\">'no'</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['bind']</code></dt> <dd>Bind Redis to the specified IP address. Default value: <code class=\"docutils literal\">'127.0.0.1'</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['data_dir']</code></dt> <dd>The directory in which on-disk data is stored. The default value is the recommended value. Default value: <code class=\"docutils literal\">'/var/opt/opscode/redis_lb/data'</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['databases']</code></dt> <dd>The number of databases. Default value: <code class=\"docutils literal\">'16'</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['dir']</code></dt> <dd>The working directory. The default value is the recommended value. Default value: <code class=\"docutils literal\">'/var/opt/opscode/redis_lb'</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['enable']</code></dt> <dd>Enable a service. Default value: <code class=\"docutils literal\">true</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['ha']</code></dt> <dd>Run the Chef server in a high availability topology. When <code class=\"docutils literal\">topology</code> is set to <code class=\"docutils literal\">ha</code>, this setting defaults to <code class=\"docutils literal\">true</code>. Default value: <code class=\"docutils literal\">false</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['keepalive']</code></dt> <dd>The amount of time (in seconds) to wait for requests on a connection. Default value: <code class=\"docutils literal\">'60'</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['log_directory']</code></dt> <dd>The directory in which log data is stored. The default value is the recommended value. Default value: <code class=\"docutils literal\">'/var/log/opscode/redis_lb'</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['log_rotation']</code></dt> <dd>\n<p class=\"first\">The log rotation policy for this service. Log files are rotated when they exceed <code class=\"docutils literal\">file_maxbytes</code>. The maximum number of log files in the rotation is defined by <code class=\"docutils literal\">num_to_keep</code>. Default value:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">{ 'file_maxbytes' =&gt; 104857600, 'num_to_keep' =&gt; 10 }</pre> </dd> <dt><code class=\"docutils literal\">redis_lb['loglevel']</code></dt> <dd>The level of logging to be stored in a log file.. Possible values: <code class=\"docutils literal\">debug</code>, <code class=\"docutils literal\">notice</code>, <code class=\"docutils literal\">verbose</code>, and <code class=\"docutils literal\">warning</code>. Default value: <code class=\"docutils literal\">'notice'</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['maxmemory']</code></dt> <dd>The maximum amount of memory (in bytes). Default value: <code class=\"docutils literal\">'8m'</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['maxmemory_policy']</code></dt> <dd>The policy applied when the maximum amount of memory is reached. Possible values: <code class=\"docutils literal\">allkeys-lru</code> (remove keys, starting with those used least frequently), <code class=\"docutils literal\">allkeys-random</code> (remove keys randomly), <code class=\"docutils literal\">noeviction</code> (don’t expire, return an error on write operation), <code class=\"docutils literal\">volatile-lru</code> (remove expired keys, starting with those used least frequently), <code class=\"docutils literal\">volatile-random</code> (remove expired keys randomly), and <code class=\"docutils literal\">volatile-ttl</code> (remove keys, starting with nearest expired time). Default value: <code class=\"docutils literal\">'noeviction'</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['port']</code></dt> <dd>The port on which the service is to listen. Default value: <code class=\"docutils literal\">'16379'</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['save_frequency']</code></dt> <dd>\n<p class=\"first\">Set the save frequency. Pattern: <code class=\"docutils literal\">{ \"seconds\" =&gt; \"keys\", \"seconds\" =&gt; \"keys\", \"seconds\" =&gt; \"keys\" }</code>. Default value:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">{ '900' =&gt; '1', '300' =&gt; '10', '60' =&gt; '1000' }</pre> <p class=\"last\">Which saves the database every 15 minutes if at least one key changes, every 5 minutes if at least 10 keys change, and every 60 seconds if 10000 keys change.</p> </dd> <dt><code class=\"docutils literal\">redis_lb['timeout']</code></dt> <dd>The amount of time (in seconds) a client may be idle before timeout. Default value: <code class=\"docutils literal\">'300'</code>.</dd> <dt><code class=\"docutils literal\">redis_lb['vip']</code></dt> <dd>The virtual IP address. Default value: <code class=\"docutils literal\">'127.0.0.1'</code>.</dd> </dl>   <h3 id=\"upgrades\">upgrades</h3> <p>This configuration file has the following settings for <code class=\"docutils literal\">upgrades</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">upgrades['dir']</code></dt> <dd>The working directory. The default value is the recommended value. Default value: <code class=\"docutils literal\">'/var/opt/opscode/upgrades'</code>.</dd> </dl>   <h3 id=\"user\">user</h3> <p>This configuration file has the following settings for <code class=\"docutils literal\">user</code>:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">user['home']</code></dt> <dd>The home directory for the user under which Chef server services run. Default value: <code class=\"docutils literal\">/opt/opscode/embedded</code>.</dd> <dt><code class=\"docutils literal\">user['shell']</code></dt> <dd>The shell for the user under which Chef server services run. Default value: <code class=\"docutils literal\">/bin/sh</code>.</dd> <dt><code class=\"docutils literal\">user['username']</code></dt> <dd>The user name under which Chef server services run. Default value: <code class=\"docutils literal\">opscode</code>.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/server_12-5/config_rb_server_optional_settings.html\" class=\"_attribution-link\">https://docs.chef.io/release/server_12-5/config_rb_server_optional_settings.html</a>\n  </p>\n</div>\n","12-9/knife_common_options":"<h1 id=\"common-options\">Common Options</h1> <p>The following options can be run with all knife subcommands and plug-ins:</p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">-c CONFIG_FILE</code>, <code class=\"docutils literal\">--config CONFIG_FILE</code>\n</dt> <dd>The configuration file to use. For example, when knife is run from a node that is configured to be managed by the Chef server, this option is used to allow knife to use the same credentials as the chef-client when communicating with the Chef server.</dd> <dt><code class=\"docutils literal\">--chef-zero-port PORT</code></dt> <dd>The port on which chef-zero listens.</dd> <dt>\n<code class=\"docutils literal\">-d</code>, <code class=\"docutils literal\">--disable-editing</code>\n</dt> <dd>Prevent the $EDITOR from being opened and accept data as-is.</dd> <dt><code class=\"docutils literal\">--defaults</code></dt> <dd>Cause knife to use the default value instead of asking a user to provide one.</dd> <dt>\n<code class=\"docutils literal\">-e EDITOR</code>, <code class=\"docutils literal\">--editor EDITOR</code>\n</dt> <dd>The $EDITOR that is used for all interactive commands.</dd> <dt>\n<code class=\"docutils literal\">-E ENVIRONMENT</code>, <code class=\"docutils literal\">--environment ENVIRONMENT</code>\n</dt> <dd>The name of the environment. When this option is added to a command, the command will run only against the named environment. This option is ignored during search queries made using the <code class=\"docutils literal\">knife search</code> subcommand.</dd> <dt>\n<code class=\"docutils literal\">-F FORMAT</code>, <code class=\"docutils literal\">--format FORMAT</code>\n</dt> <dd>The output format: <code class=\"docutils literal\">summary</code> (default), <code class=\"docutils literal\">text</code>, <code class=\"docutils literal\">json</code>, <code class=\"docutils literal\">yaml</code>, and <code class=\"docutils literal\">pp</code>.</dd> <dt>\n<code class=\"docutils literal\">-h</code>, <code class=\"docutils literal\">--help</code>\n</dt> <dd>Show help for the command.</dd> <dt>\n<code class=\"docutils literal\">-k KEY</code>, <code class=\"docutils literal\">--key KEY</code>\n</dt> <dd>The USER.pem file that knife uses to sign requests made by the API client to the Chef server.</dd> <dt><code class=\"docutils literal\">--[no-]color</code></dt> <dd>View colored output.</dd> <dt><code class=\"docutils literal\">--[no-]fips</code></dt> <dd>Allows OpenSSL to enforce FIPS-validated security during the chef-client run.</dd> <dt><code class=\"docutils literal\">--print-after</code></dt> <dd>Show data after a destructive operation.</dd> <dt>\n<code class=\"docutils literal\">-s URL</code>, <code class=\"docutils literal\">--server-url URL</code>\n</dt> <dd>The URL for the Chef server.</dd> <dt>\n<code class=\"docutils literal\">-u USER</code>, <code class=\"docutils literal\">--user USER</code>\n</dt> <dd>The user name used by knife to sign requests made by the API client to the Chef server. Authentication fails if the user name does not match the private key.</dd> <dt>\n<code class=\"docutils literal\">-v</code>, <code class=\"docutils literal\">--version</code>\n</dt> <dd>The version of the chef-client.</dd> <dt>\n<code class=\"docutils literal\">-V</code>, <code class=\"docutils literal\">--verbose</code>\n</dt> <dd>Set for more verbose outputs. Use <code class=\"docutils literal\">-VV</code> for maximum verbosity.</dd> <dt>\n<code class=\"docutils literal\">-y</code>, <code class=\"docutils literal\">--yes</code>\n</dt> <dd>Respond to all confirmation prompts with “Yes”.</dd> <dt>\n<code class=\"docutils literal\">-z</code>, <code class=\"docutils literal\">--local-mode</code>\n</dt> <dd>Run the chef-client in local mode. This allows all commands that work against the Chef server to also work against the local chef-repo.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_common_options.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_common_options.html</a>\n  </p>\n</div>\n","12-9/config_rb_knife_optional_settings":"<h1 id=\"knife-rb-optional-settings\">knife.rb Optional Settings</h1> <p>In addition to the default settings in a knife.rb file, there are other subcommand-specific settings that can be added. When a subcommand is run, knife will use:</p> <ol class=\"arabic simple\"> <li>A value passed via the command-line</li> <li>A value contained in the knife.rb file</li> <li>The default value</li> </ol> <p>A value passed via the command line will override a value in the knife.rb file; a value in a knife.rb file will override a default value.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">Many optional settings should not be added to the knife.rb file. The reasons for not adding them can vary. For example, using <code class=\"docutils literal\">--yes</code> as a default in the knife.rb file will cause knife to always assume that “Y” is the response to any prompt, which may lead to undesirable outcomes. Other settings, such as <code class=\"docutils literal\">--hide-healthy</code> (used only with the <code class=\"docutils literal\">knife status</code> subcommand) or <code class=\"docutils literal\">--bare-directories</code> (used only with the <code class=\"docutils literal\">knife list</code> subcommand) probably aren’t used often enough (and in the same exact way) to justify adding them to the knife.rb file. In general, if the optional settings are not listed on <a class=\"reference external\" href=\"https://docs.chef.io/config_rb_knife.html\">the main knife.rb topic</a>, then add settings only after careful consideration. Do not use optional settings in a production environment until after the setting’s performance has been validated in a safe testing environment.</p> </div> <p>The following list describes all of the optional settings that can be added to the configuration file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:admin]</code></dt> <dd>Create a client as an admin client. This is required for any user to access Open Source Chef as an administrator.</dd> </dl> <p><code class=\"docutils literal\">knife[:admin_client_key]</code></p> <p><code class=\"docutils literal\">knife[:admin_client_name]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:after]</code></dt> <dd>Add a run-list item after the specified run-list item.</dd> <dt><code class=\"docutils literal\">knife[:all]</code></dt> <dd>Indicates that all environments, cookbooks, cookbook versions, metadata, and/or data bags will be uploaded, deleted, generated, or tested. The context depends on which knife subcommand and argument is used.</dd> <dt><code class=\"docutils literal\">knife[:all_versions]</code></dt> <dd>Return all available versions for every cookbook.</dd> <dt><code class=\"docutils literal\">knife[:attribute]</code></dt> <dd>The attribute (or attributes) to show.</dd> </dl> <p><code class=\"docutils literal\">knife[:attribute_from_cli]</code></p> <p><code class=\"docutils literal\">knife[:authentication_protocol_version]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:bare_directories]</code></dt> <dd>Prevent a directory’s children from showing when a directory matches a pattern.</dd> </dl> <p><code class=\"docutils literal\">knife[:before]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:bootstrap_curl_options]</code></dt> <dd>Arbitrary options to be added to the bootstrap command when using cURL. This option may not be used in the same command with <code class=\"docutils literal\">--bootstrap-install-command</code>.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_install_command]</code></dt> <dd>Execute a custom installation command sequence for the chef-client. This option may not be used in the same command with <code class=\"docutils literal\">--bootstrap-curl-options</code>, <code class=\"docutils literal\">--bootstrap-install-sh</code>, or <code class=\"docutils literal\">--bootstrap-wget-options</code>.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_no_proxy]</code></dt> <dd>A URL or IP address that specifies a location that should not be proxied.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_proxy]</code></dt> <dd>The proxy server for the node that is the target of a bootstrap operation.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_template]</code></dt> <dd>The path to a template file to be used during a bootstrap operation.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_vault_file]</code></dt> <dd>The path to a JSON file that contains a list of vaults and items to be updated.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_vault_item]</code></dt> <dd>A single vault and item to update as <code class=\"docutils literal\">vault:item</code>.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_vault_json]</code></dt> <dd>\n<p class=\"first\">A JSON string that contains a list of vaults and items to be updated.</p> <p>For example:</p> <pre class=\"last highlight-bash\" data-language=\"bash\">--bootstrap-vault-json '{ \"vault1\": [\"item1\", \"item2\"], \"vault2\": \"item2\" }'</pre> </dd> <dt><code class=\"docutils literal\">knife[:bootstrap_version]</code></dt> <dd>The version of the chef-client to install.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_wget_options]</code></dt> <dd>Arbitrary options to be added to the bootstrap command when using GNU Wget. This option may not be used in the same command with <code class=\"docutils literal\">--bootstrap-install-command</code>.</dd> <dt><code class=\"docutils literal\">knife[:both]</code></dt> <dd>Delete both local and remote copies of an object.</dd> </dl> <p><code class=\"docutils literal\">knife[:chef_node_name]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:chef_repo_path]</code></dt> <dd>The path to the chef-repo.</dd> </dl> <p><code class=\"docutils literal\">knife[:chef_server_url]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:chef_zero_host]</code></dt> <dd>Override the host on which chef-zero listens.</dd> <dt><code class=\"docutils literal\">knife[:chef_zero_post]</code></dt> <dd>The port on which chef-zero listens.</dd> </dl> <p><code class=\"docutils literal\">knife[:client_key]</code></p> <p><code class=\"docutils literal\">knife[:color]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:concurrency]</code></dt> <dd>The number of allowed concurrent connections.</dd> <dt><code class=\"docutils literal\">knife[:config_file]</code></dt> <dd>The configuration file to use.</dd> </dl> <p><code class=\"docutils literal\">knife[:cookbook_copyright]</code></p> <p><code class=\"docutils literal\">knife[:cookbook_email]</code></p> <p><code class=\"docutils literal\">knife[:cookbook_license]</code></p> <p><code class=\"docutils literal\">knife[:cookbook_path]</code></p> <p><code class=\"docutils literal\">knife[:delete_validators]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:depends]</code></dt> <dd>Ensure that when a cookbook has a dependency on one (or more) cookbooks, those cookbooks are also uploaded.</dd> <dt><code class=\"docutils literal\">knife[:description]</code></dt> <dd>The description for an environment and/or a role.</dd> </dl> <p><code class=\"docutils literal\">knife[:diff]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:diff_filter]</code></dt> <dd>Select only files that have been added (<code class=\"docutils literal\">A</code>), deleted (<code class=\"docutils literal\">D</code>), modified (<code class=\"docutils literal\">M</code>), and/or have had their type changed (<code class=\"docutils literal\">T</code>). Any combination of filter characters may be used, including no filter characters. Use <code class=\"docutils literal\">*</code> to select all paths if a file matches other criteria in the comparison.</dd> <dt><code class=\"docutils literal\">knife[:disable_editing]</code></dt> <dd>Prevent the $EDITOR from being opened and accept data as-is.</dd> </dl> <p><code class=\"docutils literal\">knife[:distro]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:download_directory]</code></dt> <dd>The directory in which cookbooks are located.</dd> <dt><code class=\"docutils literal\">knife[:dry_run]</code></dt> <dd>Take no action and only print out results.</dd> <dt><code class=\"docutils literal\">knife[:editor]</code></dt> <dd>The $EDITOR that is used for all interactive commands.</dd> </dl> <p><code class=\"docutils literal\">knife[:encrypt]</code></p> <p><code class=\"docutils literal\">knife[:env_run_list]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:environment]</code></dt> <dd>The name of the environment.</dd> <dt><code class=\"docutils literal\">knife[:exec]</code></dt> <dd>A string of code that to be executed.</dd> <dt><code class=\"docutils literal\">knife[:file]</code></dt> <dd>Save a private key to the specified file name.</dd> </dl> <p><code class=\"docutils literal\">knife[:filter_result]</code></p> <p><code class=\"docutils literal\">knife[:first_boot_attributes]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:flat]</code></dt> <dd>Show a list of file names. Set to <code class=\"docutils literal\">false</code> to view <code class=\"docutils literal\">ls</code>-like output.</dd> <dt><code class=\"docutils literal\">knife[:force]</code></dt> <dd>Overwrite an existing directory.</dd> </dl> <p><code class=\"docutils literal\">knife[:format]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:forward_agent]</code></dt> <dd>Enable SSH agent forwarding.</dd> <dt><code class=\"docutils literal\">knife[:fqdn]</code></dt> <dd>FQDN</dd> <dt><code class=\"docutils literal\">knife[:freeze]</code></dt> <dd>Require changes to a cookbook be included as a new version. Only the <code class=\"docutils literal\">--force</code> option can override this setting.</dd> </dl> <p><code class=\"docutils literal\">knife[:help]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:hide_healthy]</code></dt> <dd>Hide nodes on which a chef-client run has occurred within the previous hour.</dd> <dt><code class=\"docutils literal\">knife[:hints]</code></dt> <dd>An Ohai hint to be set on the target node.</dd> <dt><code class=\"docutils literal\">knife[:host_key_verify]</code></dt> <dd>Use <code class=\"docutils literal\">--no-host-key-verify</code> to disable host key verification.</dd> </dl> <p><code class=\"docutils literal\">knife[:id_only]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:identity_file]</code></dt> <dd>The SSH identity file used for authentication. Key-based authentication is recommended.</dd> <dt><code class=\"docutils literal\">knife[:initial]</code></dt> <dd>Create a API client, typically an administrator client on a freshly-installed Chef server.</dd> <dt><code class=\"docutils literal\">knife[:input]</code></dt> <dd>The name of a file to be used with the <code class=\"docutils literal\">PUT</code> or a <code class=\"docutils literal\">POST</code> request.</dd> <dt><code class=\"docutils literal\">knife[:latest]</code></dt> <dd>Download the most recent version of a cookbook.</dd> <dt><code class=\"docutils literal\">knife[:local]</code></dt> <dd>Return only the contents of the local directory.</dd> </dl> <p><code class=\"docutils literal\">knife[:local_mode]</code></p> <p><code class=\"docutils literal\">knife[:log_level]</code></p> <p><code class=\"docutils literal\">knife[:log_location]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:manual]</code></dt> <dd>Define a search query as a space-separated list of servers.</dd> </dl> <p><code class=\"docutils literal\">knife[:max_arguments_per_command]</code></p> <p><code class=\"docutils literal\">knife[:max_command_line]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:method]</code></dt> <dd>The request method: <code class=\"docutils literal\">DELETE</code>, <code class=\"docutils literal\">GET</code>, <code class=\"docutils literal\">POST</code>, or <code class=\"docutils literal\">PUT</code>.</dd> </dl> <p><code class=\"docutils literal\">knife[:mismatch]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:name_only]</code></dt> <dd>Show only the names of modified files.</dd> <dt><code class=\"docutils literal\">knife[:name_status]</code></dt> <dd>Show only the names of files with a status of <code class=\"docutils literal\">Added</code>, <code class=\"docutils literal\">Deleted</code>, <code class=\"docutils literal\">Modified</code>, or <code class=\"docutils literal\">Type Changed</code>.</dd> <dt><code class=\"docutils literal\">knife[:no_deps]</code></dt> <dd>Ensure that all cookbooks to which the installed cookbook has a dependency are not installed.</dd> <dt><code class=\"docutils literal\">knife[:node_name]</code></dt> <dd>\n<p class=\"first\">The name of the node. This may be a username with permission to authenticate to the Chef server or it may be the name of the machine from which knife is run. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">node_name 'user_name'</pre> <p>or:</p> <pre class=\"last highlight-ruby\" data-language=\"ruby\">node_name 'machine_name'</pre> </dd> </dl> <p><code class=\"docutils literal\">knife[:null_separator]</code></p> <p><code class=\"docutils literal\">knife[:on_error]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:one_column]</code></dt> <dd>Show only one column of results.</dd> </dl> <p><code class=\"docutils literal\">knife[:patterns]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:platform]</code></dt> <dd>The platform for which a cookbook is designed.</dd> <dt><code class=\"docutils literal\">knife[:platform_version]</code></dt> <dd>The version of the platform.</dd> <dt><code class=\"docutils literal\">knife[:pretty]</code></dt> <dd>Use <code class=\"docutils literal\">--no-pretty</code> to disable pretty-print output for JSON.</dd> <dt><code class=\"docutils literal\">knife[:print_after]</code></dt> <dd>Show data after a destructive operation.</dd> <dt><code class=\"docutils literal\">knife[:proxy_auth]</code></dt> <dd>Enable proxy authentication to the Chef server web user interface.</dd> <dt><code class=\"docutils literal\">knife[:purge]</code></dt> <dd>Entirely remove a cookbook (or cookbook version) from the Chef server. Use this action carefully because only one copy of any single file is stored on the Chef server. Consequently, purging a cookbook disables any other cookbook that references one or more files from the cookbook that has been purged.</dd> </dl> <p><code class=\"docutils literal\">knife[:query]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:readme_format]</code></dt> <dd>The document format of the readme file: <code class=\"docutils literal\">md</code> (markdown) and <code class=\"docutils literal\">rdoc</code> (Ruby docs).</dd> <dt><code class=\"docutils literal\">knife[:recurse]</code></dt> <dd>Use <code class=\"docutils literal\">--recurse</code> to delete directories recursively.</dd> </dl> <p><code class=\"docutils literal\">knife[:recursive]</code></p> <p><code class=\"docutils literal\">knife[:remote]</code></p> <p><code class=\"docutils literal\">knife[:replace_all]</code></p> <p><code class=\"docutils literal\">knife[:replace_first]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:repo_mode]</code></dt> <dd>The layout of the local chef-repo. Possible values: <code class=\"docutils literal\">static</code>, <code class=\"docutils literal\">everything</code>, or <code class=\"docutils literal\">hosted_everything</code>. Use <code class=\"docutils literal\">static</code> for just roles, environments, cookbooks, and data bags. By default, <code class=\"docutils literal\">everything</code> and <code class=\"docutils literal\">hosted_everything</code> are dynamically selected depending on the server type.</dd> <dt><code class=\"docutils literal\">knife[:repository]</code></dt> <dd>The path to the chef-repo.</dd> </dl> <p><code class=\"docutils literal\">knife[:rows]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:run_list]</code></dt> <dd>A comma-separated list of roles and/or recipes to be applied.</dd> <dt><code class=\"docutils literal\">knife[:script_path]</code></dt> <dd>A colon-separated path at which Ruby scripts are located.</dd> <dt><code class=\"docutils literal\">knife[:secret]</code></dt> <dd>The encryption key that is used for values contained within a data bag item.</dd> <dt><code class=\"docutils literal\">knife[:secret_file]</code></dt> <dd>The path to the file that contains the encryption key.</dd> <dt><code class=\"docutils literal\">knife[:server_name]</code></dt> <dd>Same as node_name. Recommended configuration is to allow Ohai to collect this value during each chef-client run.</dd> </dl> <p><code class=\"docutils literal\">knife[:sort]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:sort_reverse]</code></dt> <dd>Sort a list by last run time, descending.</dd> <dt><code class=\"docutils literal\">knife[:ssh_attribute]</code></dt> <dd>The attribute used when opening an SSH connection.</dd> <dt><code class=\"docutils literal\">knife[:ssh_gateway]</code></dt> <dd>The SSH tunnel or gateway that is used to run a bootstrap action on a machine that is not accessible from the workstation.</dd> <dt><code class=\"docutils literal\">knife[:ssh_password]</code></dt> <dd>The SSH password. This can be used to pass the password directly on the command line. If this option is not specified (and a password is required) knife prompts for the password.</dd> </dl> <p><code class=\"docutils literal\">knife[:ssh_password_ng]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:ssh_port]</code></dt> <dd>The SSH port.</dd> <dt><code class=\"docutils literal\">knife[:ssh_user]</code></dt> <dd>The SSH user name.</dd> </dl> <p><code class=\"docutils literal\">knife[:start]</code></p> <p><code class=\"docutils literal\">knife[:template_file]</code></p> <p><code class=\"docutils literal\">knife[:trailing_slashes]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:tree]</code></dt> <dd>Show dependencies in a visual tree structure (including duplicates, if they exist).</dd> <dt><code class=\"docutils literal\">knife[:use current_branch]</code></dt> <dd>Ensure that the current branch is used.</dd> <dt><code class=\"docutils literal\">knife[:use_sudo]</code></dt> <dd>Execute a bootstrap operation with sudo.</dd> </dl> <p><code class=\"docutils literal\">knife[:use_sudo_password]</code></p> <dl class=\"docutils\"> <dt>\n<code class=\"docutils literal\">knife[:user]</code> and/or <code class=\"docutils literal\">knife[:user_home]</code>\n</dt> <dd>The user name used by knife to sign requests made by the API client to the Chef server. Authentication fails if the user name does not match the private key.</dd> <dt><code class=\"docutils literal\">knife[:user_key]</code></dt> <dd>Save a public key to the specified file name.</dd> <dt><code class=\"docutils literal\">knife[:user_password]</code></dt> <dd>The user password.</dd> </dl> <p><code class=\"docutils literal\">knife[:validation_client_name]</code></p> <p><code class=\"docutils literal\">knife[:validation_key]</code></p> <p><code class=\"docutils literal\">knife[:validator]</code></p> <p><code class=\"docutils literal\">knife[:verbose_commands]</code></p> <p><code class=\"docutils literal\">knife[:verbosity]</code></p> <p><code class=\"docutils literal\">knife[:with_uri]</code></p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:yes]</code></dt> <dd>Respond to all confirmation prompts with “Yes”.</dd> </dl>  <h2 id=\"by-subcommand\">By Subcommand</h2> <p>The following sections show the optional settings for the knife.rb file, sorted by subcommand.</p>  <h3 id=\"bootstrap\">bootstrap</h3> <p>The following <code class=\"docutils literal\">knife bootstrap</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:bootstrap_curl_options]</code></dt> <dd>Adds the <code class=\"docutils literal\">--bootstrap-curl-options</code> option.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_install_command]</code></dt> <dd>Adds the <code class=\"docutils literal\">--bootstrap-install-command</code> option.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_no_proxy]</code></dt> <dd>Adds the <code class=\"docutils literal\">--bootstrap-no-proxy</code> option.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_proxy]</code></dt> <dd>Adds the <code class=\"docutils literal\">--bootstrap-proxy</code> option.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_template]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--bootstrap-template</code> option.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_url]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--bootstrap-url</code> option.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_vault_item]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--bootstrap-vault-item</code> option.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_version]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--bootstrap-version</code> option.</dd> <dt><code class=\"docutils literal\">knife[:bootstrap_wget_options]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--bootstrap-wget-options</code> option.</dd> <dt><code class=\"docutils literal\">knife[:run_list]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--run-list</code> option.</dd> <dt><code class=\"docutils literal\">knife[:template_file]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--bootstrap-template</code> option.</dd> <dt><code class=\"docutils literal\">knife[:use_sudo]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--sudo</code> option.</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code class=\"docutils literal\">knife bootstrap</code> subcommand relies on a number of SSH-related settings that are handled by the <code class=\"docutils literal\">knife ssh</code> subcommand.</p> </div>   <h3 id=\"client-create\">client create</h3> <p>The following <code class=\"docutils literal\">knife client create</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:admin]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--admin</code> option.</dd> <dt><code class=\"docutils literal\">knife[:file]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--file</code> option.</dd> </dl>   <h3 id=\"client-reregister\">client reregister</h3> <p>The following <code class=\"docutils literal\">knife client reregister</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:file]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--file</code> option.</dd> </dl>   <h3 id=\"configure\">configure</h3> <p>The following <code class=\"docutils literal\">knife configure</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:admin_client_name]</code></dt> <dd>The name of the admin client that is passed as part of a the command itself.</dd> <dt><code class=\"docutils literal\">knife[:config_file]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--config</code> option.</dd> <dt><code class=\"docutils literal\">knife[:disable_editing]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--disable-editing</code> option.</dd> <dt><code class=\"docutils literal\">knife[:file]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--file</code> option.</dd> <dt><code class=\"docutils literal\">knife[:initial]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--initial</code> option.</dd> <dt><code class=\"docutils literal\">knife[:repository]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--repository</code> option.</dd> <dt><code class=\"docutils literal\">knife[:user_home]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--user</code> option.</dd> <dt><code class=\"docutils literal\">knife[:user_password]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--password</code> option.</dd> <dt><code class=\"docutils literal\">knife[:yes]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--yes</code> option.</dd> </dl>   <h3 id=\"cookbook-bulk-delete\">cookbook bulk delete</h3> <p>The following <code class=\"docutils literal\">knife cookbook bulk delete</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:purge]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--purge</code> option.</dd> <dt><code class=\"docutils literal\">knife[:yes]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--yes</code> option.</dd> </dl>   <h3 id=\"cookbook-create\">cookbook create</h3> <p>The following <code class=\"docutils literal\">knife cookbook create</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:readme_format]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--readme-format</code> option.</dd> </dl>   <h3 id=\"cookbook-delete\">cookbook delete</h3> <p>The following <code class=\"docutils literal\">knife cookbook delete</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:all]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--all</code> option.</dd> <dt><code class=\"docutils literal\">knife[:print_after]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--print-after</code> option.</dd> <dt><code class=\"docutils literal\">knife[:purge]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--purge</code> option.</dd> </dl>   <h3 id=\"cookbook-download\">cookbook download</h3> <p>The following <code class=\"docutils literal\">knife cookbook download</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:download_directory]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--dir</code> option.</dd> <dt><code class=\"docutils literal\">knife[:force]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--force</code> option.</dd> <dt><code class=\"docutils literal\">knife[:latest]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--latest</code> option.</dd> </dl>   <h3 id=\"cookbook-list\">cookbook list</h3> <p>The following <code class=\"docutils literal\">knife cookbook list</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:all]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--all</code> option.</dd> <dt><code class=\"docutils literal\">knife[:environment]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--environment</code> option.</dd> </dl>   <h3 id=\"cookbook-metadata\">cookbook metadata</h3> <p>The following <code class=\"docutils literal\">knife cookbook metadata</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:all]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--all</code> option.</dd> </dl>   <h3 id=\"cookbook-show\">cookbook show</h3> <p>The following <code class=\"docutils literal\">knife cookbook show</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:fqdn]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--fqdn</code> option.</dd> <dt><code class=\"docutils literal\">knife[:platform]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--platform</code> option.</dd> <dt><code class=\"docutils literal\">knife[:platform_version]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--platform-version</code> option.</dd> </dl>   <h3 id=\"cookbook-test\">cookbook test</h3> <p>The following <code class=\"docutils literal\">knife cookbook test</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:all]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--all</code> option.</dd> </dl>   <h3 id=\"cookbook-upload\">cookbook upload</h3> <p>The following <code class=\"docutils literal\">knife cookbook upload</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:all]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--all</code> option.</dd> <dt><code class=\"docutils literal\">knife[:depends]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--include-dependencies</code> option.</dd> <dt><code class=\"docutils literal\">knife[:environment]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--environment</code> option.</dd> <dt><code class=\"docutils literal\">knife[:force]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--force</code> option.</dd> <dt><code class=\"docutils literal\">knife[:freeze]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--freeze</code> option.</dd> </dl>   <h3 id=\"cookbook-site-download\">cookbook site download</h3> <p>The following <code class=\"docutils literal\">knife cookbook site download</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:file]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--file</code> option.</dd> <dt><code class=\"docutils literal\">knife[:force]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--force</code> option.</dd> </dl>   <h3 id=\"cookbook-site-install\">cookbook site install</h3> <p>The following <code class=\"docutils literal\">knife cookbook site install</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:cookbook_path]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--cookbook-path</code> option.</dd> <dt><code class=\"docutils literal\">knife[:file]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--file</code> option.</dd> <dt><code class=\"docutils literal\">knife[:no_deps]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--skip-dependencies</code> option.</dd> <dt><code class=\"docutils literal\">knife[:use_current_branch]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--use-current-branch</code> option.</dd> </dl>   <h3 id=\"cookbook-site-share\">cookbook site share</h3> <p>The following <code class=\"docutils literal\">knife cookbook site share</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:cookbook_path]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--cookbook-path</code> option.</dd> </dl>   <h3 id=\"data-bag-create\">data bag create</h3> <p>The following <code class=\"docutils literal\">knife data bag create</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:secret]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--secret</code> option.</dd> <dt><code class=\"docutils literal\">knife[:secret_file]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--secret-file</code> option.</dd> </dl>   <h3 id=\"data-bag-edit\">data bag edit</h3> <p>The following <code class=\"docutils literal\">knife data bag edit</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:print_after]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--print-after</code> option.</dd> <dt><code class=\"docutils literal\">knife[:secret]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--secret</code> option.</dd> <dt><code class=\"docutils literal\">knife[:secret_file]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--secret-file</code> option.</dd> </dl>   <h3 id=\"data-bag-from-file\">data bag from file</h3> <p>The following <code class=\"docutils literal\">knife data bag from file</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:all]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--all</code> option.</dd> <dt><code class=\"docutils literal\">knife[:secret]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--secret</code> option.</dd> <dt><code class=\"docutils literal\">knife[:secret_file]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--secret-file</code> option.</dd> </dl>   <h3 id=\"data-bag-show\">data bag show</h3> <p>The following <code class=\"docutils literal\">knife data bag show</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:secret]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--secret</code> option.</dd> <dt><code class=\"docutils literal\">knife[:secret_file]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--secret-file</code> option.</dd> </dl>   <h3 id=\"delete\">delete</h3> <p>The following <code class=\"docutils literal\">knife delete</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:chef_repo_path]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--chef-repo-path</code> option.</dd> <dt><code class=\"docutils literal\">knife[:concurrency]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--concurrency</code> option.</dd> <dt><code class=\"docutils literal\">knife[:recurse]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--recurse</code> option.</dd> <dt><code class=\"docutils literal\">knife[:repo_mode]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--repo-mode</code> option.</dd> </dl>   <h3 id=\"deps\">deps</h3> <p>The following <code class=\"docutils literal\">knife deps</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:chef_repo_path]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--chef-repo-path</code> option.</dd> <dt><code class=\"docutils literal\">knife[:concurrency]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--concurrency</code> option.</dd> <dt><code class=\"docutils literal\">knife[:recurse]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--recurse</code> option.</dd> <dt><code class=\"docutils literal\">knife[:remote]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--remote</code> option.</dd> <dt><code class=\"docutils literal\">knife[:repo_mode]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--repo-mode</code> option.</dd> <dt><code class=\"docutils literal\">knife[:tree]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--tree</code> option.</dd> </dl>   <h3 id=\"diff\">diff</h3> <p>The following <code class=\"docutils literal\">knife diff</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:chef_repo_path]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--chef-repo-path</code> option.</dd> <dt><code class=\"docutils literal\">knife[:concurrency]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--concurrency</code> option.</dd> <dt><code class=\"docutils literal\">knife[:name_only]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--name-only</code> option.</dd> <dt><code class=\"docutils literal\">knife[:name_status]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--name-status</code> option.</dd> <dt><code class=\"docutils literal\">knife[:recurse]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--recurse</code> option.</dd> <dt><code class=\"docutils literal\">knife[:repo_mode]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--repo-mode</code> option.</dd> </dl>   <h3 id=\"download\">download</h3> <p>The following <code class=\"docutils literal\">knife download</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:chef_repo_path]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--chef-repo-path</code> option.</dd> <dt><code class=\"docutils literal\">knife[:concurrency]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--concurrency</code> option.</dd> <dt><code class=\"docutils literal\">knife[:recurse]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--recurse</code> option.</dd> <dt><code class=\"docutils literal\">knife[:repo_mode]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--repo-mode</code> option.</dd> </dl>   <h3 id=\"edit\">edit</h3> <p>The following <code class=\"docutils literal\">knife edit</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:chef_repo_path]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--chef-repo-path</code> option.</dd> <dt><code class=\"docutils literal\">knife[:concurrency]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--concurrency</code> option.</dd> <dt><code class=\"docutils literal\">knife[:disable_editing]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--disable-editing</code> option.</dd> <dt><code class=\"docutils literal\">knife[:editor]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--editor</code> option.</dd> <dt><code class=\"docutils literal\">knife[:local]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--local</code> option.</dd> <dt><code class=\"docutils literal\">knife[:repo_mode]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--repo-mode</code> option.</dd> </dl>   <h3 id=\"environment-create\">environment create</h3> <p>The following <code class=\"docutils literal\">knife environment create</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:description]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--description</code> option.</dd> </dl>   <h3 id=\"environment-from-file\">environment from file</h3> <p>The following <code class=\"docutils literal\">knife environment from file</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:all]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--all</code> option.</dd> <dt><code class=\"docutils literal\">knife[:print_after]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--print-after</code> option.</dd> </dl>   <h3 id=\"exec\">exec</h3> <p>The following <code class=\"docutils literal\">knife exec</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:exec]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--exec</code> option.</dd> <dt><code class=\"docutils literal\">knife[:script_path]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--script-path</code> option.</dd> </dl>   <h3 id=\"list\">list</h3> <p>The following <code class=\"docutils literal\">knife list</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:bare_directories]</code></dt> <dd>Adds the the <code class=\"docutils literal\">-d</code> option.</dd> <dt><code class=\"docutils literal\">knife[:chef_repo_path]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--chef-repo-path</code> option.</dd> <dt><code class=\"docutils literal\">knife[:concurrency]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--concurrency</code> option.</dd> <dt><code class=\"docutils literal\">knife[:recursive]</code></dt> <dd>Adds the the <code class=\"docutils literal\">-R</code> option.</dd> <dt><code class=\"docutils literal\">knife[:repo_mode]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--repo-mode</code> option.</dd> </dl>   <h3 id=\"node-from-file\">node from file</h3> <p>The following <code class=\"docutils literal\">knife node from file</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:print_after]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--print-after</code> option.</dd> </dl>   <h3 id=\"node-list\">node list</h3> <p>The following <code class=\"docutils literal\">knife node list</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:environment]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--environment</code> option.</dd> </dl>   <h3 id=\"node-run-list-add\">node run list add</h3> <p>The following <code class=\"docutils literal\">knife node run list add</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:after]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--after</code> option.</dd> <dt><code class=\"docutils literal\">knife[:run_list]</code></dt> <dd>The run-list that is passed as part of the command itself.</dd> </dl>   <h3 id=\"node-run-list-remove\">node run list remove</h3> <p>The following <code class=\"docutils literal\">knife node run list remove</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:run_list]</code></dt> <dd>The run-list that is passed as part of the command itself.</dd> </dl>   <h3 id=\"raw\">raw</h3> <p>The following <code class=\"docutils literal\">knife raw</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:chef_repo_path]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--chef-repo-path</code> option.</dd> <dt><code class=\"docutils literal\">knife[:concurrency]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--concurrency</code> option.</dd> <dt><code class=\"docutils literal\">knife[:input]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--input</code> option.</dd> <dt><code class=\"docutils literal\">knife[:method]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--method</code> option.</dd> <dt><code class=\"docutils literal\">knife[:pretty]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--[no-]pretty</code> option.</dd> <dt><code class=\"docutils literal\">knife[:repo_mode]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--repo-mode</code> option.</dd> </dl>   <h3 id=\"role-create\">role create</h3> <p>The following <code class=\"docutils literal\">knife role create</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:description]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--description</code> option.</dd> </dl>   <h3 id=\"role-from-file\">role from file</h3> <p>The following <code class=\"docutils literal\">knife role from file</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:print_after]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--print-after</code> option.</dd> </dl>   <h3 id=\"role-show\">role show</h3> <p>The following <code class=\"docutils literal\">knife role show</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:environment]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--environment</code> option.</dd> </dl>   <h3 id=\"ssh\">ssh</h3> <p>The following <code class=\"docutils literal\">knife ssh</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:concurrency]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--concurrency</code> option.</dd> <dt><code class=\"docutils literal\">knife[:identity_file]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--identity-file</code> option.</dd> <dt><code class=\"docutils literal\">knife[:host_key_verify]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--[no-]host-key-verify</code> option.</dd> <dt><code class=\"docutils literal\">knife[:manual]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--manual-list</code> option.</dd> <dt><code class=\"docutils literal\">knife[:ssh_attribute]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--attribute</code> option.</dd> <dt><code class=\"docutils literal\">knife[:ssh_gateway]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--ssh-gateway</code> option.</dd> <dt><code class=\"docutils literal\">knife[:ssh_password]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--ssh-password</code> option.</dd> <dt><code class=\"docutils literal\">knife[:ssh_port]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--ssh-port</code> option.</dd> <dt><code class=\"docutils literal\">knife[:ssh_user]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--ssh-user</code> option.</dd> </dl>   <h3 id=\"status\">status</h3> <p>The following <code class=\"docutils literal\">knife status</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:hide_healthy]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--hide-healthy</code> option.</dd> <dt><code class=\"docutils literal\">knife[:run_list]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--run-list</code> option.</dd> <dt><code class=\"docutils literal\">knife[:sort_reverse]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--sort-reverse</code> option.</dd> </dl>   <h3 id=\"upload\">upload</h3> <p>The following <code class=\"docutils literal\">knife upload</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:chef_repo_path]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--chef-repo-path</code> option.</dd> <dt><code class=\"docutils literal\">knife[:concurrency]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--concurrency</code> option.</dd> <dt><code class=\"docutils literal\">knife[:recurse]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--recurse</code> option.</dd> <dt><code class=\"docutils literal\">knife[:repo_mode]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--repo-mode</code> option.</dd> </dl>   <h3 id=\"user-create\">user create</h3> <p>The following <code class=\"docutils literal\">knife user create</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:admin]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--admin</code> option.</dd> <dt><code class=\"docutils literal\">knife[:file]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--file</code> option.</dd> <dt><code class=\"docutils literal\">knife[:user_key]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--user-key</code> option.</dd> <dt><code class=\"docutils literal\">knife[:user_password]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--password</code> option.</dd> </dl>   <h3 id=\"user-reregister\">user reregister</h3> <p>The following <code class=\"docutils literal\">knife user reregister</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:file]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--file</code> option.</dd> </dl>   <h3 id=\"xargs\">xargs</h3> <p>The following <code class=\"docutils literal\">knife delete</code> settings can be added to the knife.rb file:</p> <dl class=\"docutils\"> <dt><code class=\"docutils literal\">knife[:chef_repo_path]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--chef-repo-path</code> option.</dd> <dt><code class=\"docutils literal\">knife[:concurrency]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--concurrency</code> option.</dd> <dt><code class=\"docutils literal\">knife[:diff]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--diff</code> option.</dd> <dt><code class=\"docutils literal\">knife[:dry_run]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--dry-run</code> option.</dd> <dt><code class=\"docutils literal\">knife[:force]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--force</code> option.</dd> <dt><code class=\"docutils literal\">knife[:local]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--local</code> option.</dd> <dt><code class=\"docutils literal\">knife[:max_arguments_per_command]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--max-args</code> option.</dd> <dt><code class=\"docutils literal\">knife[:max_command_line]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--max-chars</code> option.</dd> <dt><code class=\"docutils literal\">knife[:null_separator]</code></dt> <dd>Adds the the <code class=\"docutils literal\">-0</code> option.</dd> <dt><code class=\"docutils literal\">knife[:patterns]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--pattern</code> option.</dd> <dt><code class=\"docutils literal\">knife[:replace_all]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--replace</code> option.</dd> <dt><code class=\"docutils literal\">knife[:replace_first]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--replace-first</code> option.</dd> <dt><code class=\"docutils literal\">knife[:repo_mode]</code></dt> <dd>Adds the the <code class=\"docutils literal\">--repo-mode</code> option.</dd> <dt><code class=\"docutils literal\">knife[:verbose_commands]</code></dt> <dd>Adds the the <code class=\"docutils literal\">-t</code> option.</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/config_rb_knife_optional_settings.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/config_rb_knife_optional_settings.html</a>\n  </p>\n</div>\n","12-9/knife_using":"<h1 id=\"working-with-knife\">Working with Knife</h1> <p>knife runs from a management workstation and sits in-between a Chef server and an organization’s infrastructure. knife interacts with a Chef server by using the same REST API that is used by a chef-client. Role-based authentication controls (RBAC) can be used to authorize changes when knife is run with the Chef server. knife is configured during workstation setup, but subsequent modifications can be made using the knife.rb configuration file.</p>  <h2 id=\"json-data-format\">JSON Data Format</h2> <p>Most data is entered using a text editor in JSON format, unless the <code class=\"docutils literal\">--disable-editing</code> option is entered as part of a command. (Encrypted data bags use YAML, which is a superset of JSON.) JSON is a common, language-independent data format that provides a simple text representation of arbitrary data structures. For more information about JSON, see <a class=\"reference external\" href=\"http://www.json.org/\">http://www.json.org/</a> or <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/JSON\">http://en.wikipedia.org/wiki/JSON</a>.</p>  <h3 id=\"set-the-text-editor\">Set the Text Editor</h3> <p>Some knife commands, such as <code class=\"docutils literal\">knife data bag edit</code>, require that information be edited as JSON data using a text editor. For example, the following command:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife data bag edit admins admin_name</pre> <p>will open up the text editor with data similar to:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"id\": \"admin_name\"\n}</pre> <p>Changes to that file can then be made:</p> <pre class=\"highlight-javascript\" data-language=\"javascript\">{\n  \"id\": \"Justin C.\"\n  \"description\": \"I am passing the time by letting time pass over me ...\"\n}</pre> <p>The type of text editor that is used by knife can be configured by adding an entry to the knife.rb file or by setting an <code class=\"docutils literal\">EDITOR</code> environment variable. For example, to configure the text editor to always open with vim, add the following to the knife.rb file:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">knife[:editor] = \"/usr/bin/vim\"</pre> <p>When a Microsoft Windows file path is enclosed in a double-quoted string (” ”), the same backslash character (<code class=\"docutils literal\">\\</code>) that is used to define the file path separator is also used in Ruby to define an escape character. The knife.rb file is a Ruby file; therefore, file path separators must be escaped. In addition, spaces in the file path must be replaced with <code class=\"docutils literal\">~1</code> so that the length of each section within the file path is not more than 8 characters. For example, if EditPad Pro is the text editor of choice and is located at the following path:</p> <pre class=\"highlight-python\" data-language=\"python\">C:\\\\Program Files (x86)\\EditPad Pro\\EditPad.exe</pre> <p>the setting in the knife.rb file would be similar to:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">knife[:editor] = \"C:\\\\Progra~1\\\\EditPa~1\\\\EditPad.exe\"</pre> <p>One approach to working around the double- vs. single-quote issue is to put the single-quotes outside of the double-quotes. For example, for Notepad++:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">knife[:editor] = '\"C:\\Program Files (x86)\\Notepad++\\notepad++.exe\" -nosession -multiInst'</pre> <p>for Sublime Text:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">knife[:editor] = '\"C:\\Program Files\\Sublime Text 2\\sublime_text.exe\" --wait'</pre> <p>for TextPad:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">knife[:editor] = '\"C:\\Program Files (x86)\\TextPad 7\\TextPad.exe\"'</pre> <p>and for vim:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">knife[:editor] = '\"C:\\Program Files (x86)\\vim\\vim74\\gvim.exe\"'</pre>    <h2 id=\"using-quotes\">Using Quotes</h2> <p>Values can be entered with double quotes (” ”) or single quotes (‘ ‘), but this should be done consistently.</p>   <h2 id=\"subcommands\">Subcommands</h2> <p>knife comes with a collection of built in subcommands that work together to provide all of the functionality required to take specific actions against any object in an organization, including cookbooks, nodes, roles, data bags, environments, and users. A knife plugin extends the functionality beyond built-in subcommands.</p> <p>knife has the following subcommands: <code class=\"docutils literal\">bootstrap</code>, <code class=\"docutils literal\">client</code>, <code class=\"docutils literal\">configure</code>, <code class=\"docutils literal\">cookbook</code>, <code class=\"docutils literal\">cookbook site</code>, <code class=\"docutils literal\">data bag</code>, <code class=\"docutils literal\">delete</code>, <code class=\"docutils literal\">deps</code>, <code class=\"docutils literal\">diff</code>, <code class=\"docutils literal\">download</code>, <code class=\"docutils literal\">edit</code>, <code class=\"docutils literal\">environment</code>, <code class=\"docutils literal\">exec</code>, <code class=\"docutils literal\">index rebuild</code>, <code class=\"docutils literal\">list</code>, <code class=\"docutils literal\">node</code>, <code class=\"docutils literal\">recipe list</code>, <code class=\"docutils literal\">role</code>, <code class=\"docutils literal\">search</code>, <code class=\"docutils literal\">show</code>, <code class=\"docutils literal\">ssh</code>, <code class=\"docutils literal\">status</code>, <code class=\"docutils literal\">tag</code>, <code class=\"docutils literal\">upload</code>, <code class=\"docutils literal\">user</code>, and <code class=\"docutils literal\">xargs</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The following subcommands run only against the open source Chef server: <code class=\"docutils literal\">index rebuild</code> and <code class=\"docutils literal\">user</code>.</p> </div>   <h2 id=\"verb-subcommands\">Verb Subcommands</h2> <p>knife includes a set of subcommands that are built around common verbs: <code class=\"docutils literal\">delete</code>, <code class=\"docutils literal\">deps</code>, <code class=\"docutils literal\">diff</code>, <code class=\"docutils literal\">download</code>, <code class=\"docutils literal\">edit</code>, <code class=\"docutils literal\">list</code>, <code class=\"docutils literal\">show</code>, <code class=\"docutils literal\">upload</code>, <code class=\"docutils literal\">xargs</code>. These subcommands allow knife to issue commands that interact with any object stored in the chef-repo or stored on the Chef server. Some important principles behind this group of subcommands includes:</p> <ul class=\"simple\"> <li>A command that works with each object in the chef-repo. The subcommands specify the desired action (the “verb”), and then directory in which that object resides (<code class=\"docutils literal\">clients</code>, <code class=\"docutils literal\">cookbooks/</code>, <code class=\"docutils literal\">data_bags/</code>, <code class=\"docutils literal\">environments/</code>, <code class=\"docutils literal\">nodes</code>, <code class=\"docutils literal\">roles/</code>, and <code class=\"docutils literal\">users</code>). For example: <code class=\"docutils literal\">download cookbooks/</code>\n</li> <li>A command that works with certain objects in the Chef server, including <code class=\"docutils literal\">acls</code>, <code class=\"docutils literal\">groups</code>, and <code class=\"docutils literal\">containers</code>\n</li> <li>Uses the Chef server as if it were a file system, allowing the chef-repo on the Chef server to behave like a mirror of the chef-repo on the workstation. The Chef server will have the same objects as the local chef-repo. To make changes to the files on the Chef server, just download files from the Chef server or upload files from the chef-repo</li> <li>The context from which a command is run matters. For example, when working in the <code class=\"docutils literal\">roles/</code> directory, knife will know what is being worked with. Enter <code class=\"docutils literal\">knife show base.json</code> and knife will return the base role from the Chef server. From the chef-repo root, enter <code class=\"docutils literal\">knife show roles/base.json</code> to get the same result</li> <li>Parallel requests can be made to the Chef server and are configurable on a per-command basis</li> </ul>  <h3 id=\"wildcard-search\">Wildcard Search</h3> <p>A wildcard matching pattern can be used for substring matches that replace zero (or more) characters. There are two types of wildcard patterns:</p> <ul class=\"simple\"> <li>A question mark (”?”) can be used to replace exactly one character (as long as that character is not the first character)</li> <li>An asterisk (“*”) can be used to replace any number of characters (including zero)</li> </ul> <p>Wildcard patterns must be escaped (using a backslash) so that the wildcard itself can reach the Chef server. If they are not escaped, the wildcard is expanded into the actual filenames and knife will not know the wildcard was intended to be used. For example, if the Chef server has data bags named <code class=\"docutils literal\">aardvarks</code>, <code class=\"docutils literal\">anagrams</code>, and <code class=\"docutils literal\">arp_tables</code>, but the local file system only has <code class=\"docutils literal\">aardvarks</code> and <code class=\"docutils literal\">anagrams</code>, escaping vs. not escaping the wildcard pattern will yield different results:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife list data_bags/a\\*</pre> <p>asks the Chef server for everything starting with the letter “a” and will return:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ aardvarks/ anagrams/ arp_tables/</pre> <p>But, the following:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife list data_bags/a*</pre> <p>will return:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ aardvarks/ anagrams/</pre> <p>Which is the same as entering:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ knife list data_bags/aardvarks data_bags/anagrams</pre> <p>to return:</p> <pre class=\"highlight-bash\" data-language=\"bash\">$ aardvarks/ anagrams/</pre>    <h2 id=\"plug-ins\">Plug-ins</h2> <p>Chef provides the following plugins, which work the same as built-in subcommands (including common options), but must be installed separately (using RubyGems): <code class=\"docutils literal\">knife azure</code>, <code class=\"docutils literal\">knife bluebox</code>, <code class=\"docutils literal\">knife ec2</code>, <code class=\"docutils literal\">knife eucalyptus</code>, <code class=\"docutils literal\">knife google</code>, <code class=\"docutils literal\">knife hp</code>, <code class=\"docutils literal\">knife linode</code>, <code class=\"docutils literal\">knife openstack</code>, <code class=\"docutils literal\">knife rackspace</code>, <code class=\"docutils literal\">knife terremark</code>, <code class=\"docutils literal\">knife vcloud</code>, and <code class=\"docutils literal\">knife windows</code>.</p> <p>The community provides many other plugins for knife: <a class=\"reference external\" href=\"http://community.opscode.com/\">http://community.opscode.com/</a>.</p>   <h2 id=\"syntax\">Syntax</h2> <p>All knife subcommands have the following syntax:</p> <blockquote> <div>knife subcommand [ARGUMENT] (options)</div>\n</blockquote> <p>Each subcommand has its own set of arguments and options.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">All syntax examples in this document show variables in ALL_CAPS. For example <code class=\"docutils literal\">-u PORT_LIST</code> (where PORT_LIST is a comma-separated list of local and public UDP ports) or <code class=\"docutils literal\">-F FORMAT</code> (where FORMAT determines the output format, either <code class=\"docutils literal\">summary</code>, <code class=\"docutils literal\">text</code>, <code class=\"docutils literal\">json</code>, <code class=\"docutils literal\">yaml</code>, or <code class=\"docutils literal\">pp</code>). These variables often require specific values that are unique to each organization.</p> </div>   <h2 id=\"many-users-same-repo\">Many Users, Same Repo</h2> <p>It is possible for multiple users to access the Chef server using the same knife.rb file. (A user can even access multiple organizations if, for example, each instance of the chef-repo contained the same copy of the knife.rb file.) This can be done by adding the knife.rb file to the chef-repo, and then using environment variables to handle the user-specific credential details and/or sensitive values. For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">current_dir = File.dirname(__FILE__)\n  user = ENV['OPSCODE_USER'] || ENV['USER']\n  node_name                user\n  client_key               \"#{ENV['HOME']}/chef-repo/.chef/#{user}.pem\"\n  validation_client_name   \"#{ENV['ORGNAME']}-validator\"\n  validation_key           \"#{ENV['HOME']}/chef-repo/.chef/#{ENV['ORGNAME']}-validator.pem\"\n  chef_server_url          \"https://api.opscode.com/organizations/#{ENV['ORGNAME']}\"\n  syntax_check_cache_path  \"#{ENV['HOME']}/chef-repo/.chef/syntax_check_cache\"\n  cookbook_path            [\"#{current_dir}/../cookbooks\"]\n  cookbook_copyright       'Your Company, Inc.'\n  cookbook_license         'apachev2\"\n  cookbook_email           'cookbooks@yourcompany.com'\n\n  # Amazon AWS\n  knife[:aws_access_key_id] = ENV['AWS_ACCESS_KEY_ID']\n  knife[:aws_secret_access_key] = ENV['AWS_SECRET_ACCESS_KEY']\n\n  # Rackspace Cloud\n  knife[:rackspace_api_username] = ENV['RACKSPACE_USERNAME']\n  knife[:rackspace_api_key] = ENV['RACKSPACE_API_KEY']</pre>   <h2 id=\"authenticated-api-requests\">Authenticated API Requests</h2> <p>A knife plugin is a set of one (or more) subcommands that can be added to knife to support additional functionality that is not built-in to the base set of knife subcommands. Many of the knife plugins are built by members of the Chef community and several of them are built and maintained by Chef. A knife plugin is installed to the <code class=\"docutils literal\">~/.chef/plugins/knife/</code> directory, from where it can be run just like any other knife subcommand.</p> <p>A knife plugin can be used to make authenticated API requests to the Chef server using the following methods:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"88%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Method</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">rest.delete_rest</code></td> <td>Use to delete an object from the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">rest.get_rest</code></td> <td>Use to get the details of an object on the Chef server.</td> </tr> <tr class=\"row-even\">\n<td><code class=\"docutils literal\">rest.post_rest</code></td> <td>Use to add an object to the Chef server.</td> </tr> <tr class=\"row-odd\">\n<td><code class=\"docutils literal\">rest.put_rest</code></td> <td>Use to update an object on the Chef server.</td> </tr> </tbody> </table> <p>For example:</p> <pre class=\"highlight-ruby\" data-language=\"ruby\">module MyCommands\n  class MyNodeDelete &lt; Chef::Knife\n    #An implementation of knife node delete\n    banner 'knife my node delete [NODE_NAME]'\n\n  def run\n    if name_args.length &lt; 1\n      show_usage\n      ui.fatal(\"You must specify a node name.\")\n      exit 1\n    end\n    nodename = name_args[0]\n       api_endpoint = \"nodes/#{nodename}\"\n       # Again, we could just call rest.delete_rest\n       nodey = rest.get_rest(api_endpoint)\n       ui.confirm(\"Do you really want to delete #{nodey}\")\n       nodey.destroy\n     end\n   end\nend</pre>   <h2 id=\"configuring-a-proxy-server\">Configuring a Proxy Server</h2> <p>See the <a class=\"reference internal\" href=\"proxies\">proxies</a> documentation for information on how to configure Knife to use a proxy server.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Chef Software, Inc.<br>Licensed under the Creative Commons Attribution 3.0 Unported License.<br>The Chef&trade; Mark and Chef Logo are either registered trademarks/service marks or trademarks/servicemarks of Chef, in the United States and other countries and are used with Chef Inc's permission.<br>We are not affiliated with, endorsed or sponsored by Chef Inc.<br>\n    <a href=\"https://docs.chef.io/release/12-9/knife_using.html\" class=\"_attribution-link\">https://docs.chef.io/release/12-9/knife_using.html</a>\n  </p>\n</div>\n"}