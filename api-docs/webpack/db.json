{"index":"<h1>webpack</h1>\n<div class=\"row\">\n<div class=\"col-md-6\"><div class=\"feature\">\n<h4>Plugins</h4>\n<p>webpack has a rich <a href=\"plugins\">plugin</a> interface. Most of the features are internal plugins using this interface. This makes webpack very <strong>flexible</strong>.</p>\n</div></div>\n<div class=\"col-md-6\"><div class=\"feature\">\n<h4>Performance</h4>\n<p>webpack uses async I/O and has multiple caching levels. This makes webpack fast and incredibly <strong>fast</strong> on incremental compilation.</p>\n</div></div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-6\"><div class=\"feature\">\n<h4>Loaders</h4>\n<p>webpack supports pre-processing files via <a href=\"loaders\">loaders</a>. This allows you to bundle <strong>any static resource</strong> not only javascript. You can easily write your own loaders running in node.js.</p>\n</div></div>\n<div class=\"col-md-6\"><div class=\"feature\">\n<h4>Support</h4>\n<p>webpack supports <strong><a href=\"amd\">AMD</a> and <a href=\"commonjs\">CommonJs</a></strong> module styles. It performs clever static analysis on the AST of your code. It even has an evaluation engine to evaluate simple expressions. This allows you to <strong>support most existing libraries</strong>.</p>\n</div></div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-6\"><div class=\"feature\">\n<h4>Code Splitting</h4>\n<p>webpack allows to <a href=\"code-splitting\">split</a> your codebase into chunks. Chunks are loaded <strong>on demand</strong>. This reduces initial loading time.</p>\n</div></div>\n<div class=\"col-md-6\"><div class=\"feature\">\n<h4>Optimizations</h4>\n<p>webpack can do many <a href=\"optimization\">optimizations</a> to <strong>reduce the output size</strong>. It also cares about <a href=\"long-term-caching\">request <strong>caching</strong></a> by using hashes.</p>\n</div></div>\n</div>\n<div class=\"row\">\n<div class=\"col-md-6\"><div class=\"feature\">\n<h4>Development Tools</h4>\n<p>webpack supports SourceUrls and <strong>SourceMaps</strong> for simple debugging. It can watch your files and comes with a <a href=\"webpack-dev-middleware\">development middleware</a> and a <a href=\"webpack-dev-server\">development server</a> for <strong>automatic reloading</strong>.</p>\n</div></div>\n<div class=\"col-md-6\"><div class=\"feature\">\n<h4>Multiple targets</h4>\n<p>webpack's main target is the <strong>web</strong>, but it also supports generating bundles for <a href=\"https://github.com/webpack/worker-loader\"><strong>WebWorkers</strong></a> and <strong>node.js</strong>.</p>\n</div></div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/\" class=\"_attribution-link\">https://webpack.github.io/docs/</a>\n  </p>\n</div>\n","motivation":"<h1>Motivation</h1>\n<p>Today’s websites are evolving into web apps:</p>\n<ul>\n<li>More and more JavaScript is in a page.</li>\n<li>You can do more stuff in modern browsers.</li>\n<li>Fewer full page reloads → even more code in a page.</li>\n</ul>\n<p>As a result there is a <strong>lot</strong> of code on the client side!</p>\n<p>A big code base needs to be organized. Module systems offer the option to split your code base into modules.</p>\n<h2 id=\"module-system-styles\">Module system styles</h2>\n<p>There are multiple standards for how to define dependencies and export values:</p>\n<ul>\n<li>\n<code>&lt;script&gt;</code>-tag style (without a module system)</li>\n<li>CommonJs</li>\n<li>AMD and some dialects of it</li>\n<li>ES6 modules</li>\n<li>and more…</li>\n</ul>\n<h3 id=\"script-tag-style\">\n<code>&lt;script&gt;</code>-tag style</h3>\n<p>This is the way you would handle a modularized code base if you didn’t use a module system.</p>\n<pre data-language=\"javascript\">&lt;script src=\"module1.js\"&gt;&lt;/script&gt;\n&lt;script src=\"module2.js\"&gt;&lt;/script&gt;\n&lt;script src=\"libraryA.js\"&gt;&lt;/script&gt;\n&lt;script src=\"module3.js\"&gt;&lt;/script&gt;</pre>\n<p>Modules export an interface to the global object, i. e. the <code>window</code> object. Modules can access the interface of dependencies over the global object.</p>\n<h5 id=\"common-problems\">Common problems</h5>\n<ul>\n<li>Conflicts in the global object.</li>\n<li>Order of loading is important.</li>\n<li>Developers have to resolve dependencies of modules/libraries.</li>\n<li>In big projects the list can get really long and difficult to manage.</li>\n</ul>\n<h3 id=\"commonjs-synchronous-require\">CommonJs: synchronous <code>require</code>\n</h3>\n<p>This style uses a synchronous <code>require</code> method to load a dependency and return an exported interface. A module can specify exports by adding properties to the <code>exports</code> object or setting the value of <code>module.exports</code>.</p>\n<pre data-language=\"javascript\">require(\"module\");\nrequire(\"../file.js\");\nexports.doStuff = function() {};\nmodule.exports = someValue;</pre>\n<p>It’s used on server-side by <a href=\"http://nodejs.org\">node.js</a>.</p>\n<h5 id=\"pros\">Pros</h5>\n<ul>\n<li>Server-side modules can be reused</li>\n<li>There are already many modules in this style (npm)</li>\n<li>very simple and easy to use.</li>\n</ul>\n<h5 id=\"cons\">Cons</h5>\n<ul>\n<li>blocking calls do not apply well on networks. Network requests are asynchronous.</li>\n<li>No parallel require of multiple modules</li>\n</ul>\n<h5 id=\"implementations\">Implementations</h5>\n<ul>\n<li>\n<a href=\"http://nodejs.org/\">node.js</a> - server-side</li>\n<li><a href=\"https://github.com/substack/node-browserify\">browserify</a></li>\n<li>\n<a href=\"https://github.com/medikoo/modules-webmake\">modules-webmake</a> - compile to one bundle</li>\n<li>\n<a href=\"https://github.com/substack/wreq\">wreq</a> - client-side</li>\n</ul>\n<h3 id=\"amd-asynchronous-require\">AMD: asynchronous require</h3>\n<p><a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\"><code>Asynchronous Module Definition</code></a></p>\n<p>Other module systems (for the browser) had problems with the synchronous <code>require</code> (CommonJs) and introduced an asynchronous version (and a way to define modules and exporting values):</p>\n<pre data-language=\"javascript\">require([\"module\", \"../file\"], function(module, file) { /* ... */ });\ndefine(\"mymodule\", [\"dep1\", \"dep2\"], function(d1, d2) {\n  return someExportedValue;\n});</pre>\n<h5 id=\"pros\">Pros</h5>\n<ul>\n<li>Fits to the asynchronous request style in networks.</li>\n<li>Parallel loading of multiple modules.</li>\n</ul>\n<h5 id=\"cons\">Cons</h5>\n<ul>\n<li>Coding overhead. More difficult to read and write.</li>\n<li>Seems to be some kind of workaround.</li>\n</ul>\n<h5 id=\"implementations\">Implementations</h5>\n<ul>\n<li>\n<a href=\"http://requirejs.org/\">require.js</a> - client-side</li>\n<li>\n<a href=\"https://github.com/cujojs/curl\">curl</a> - client-side</li>\n</ul>\n<p>Read more about <a href=\"commonjs\">CommonJs</a> and <a href=\"amd\">AMD</a>.</p>\n<h3 id=\"es6-modules\">ES6 modules</h3>\n<p>EcmaScript6 adds some language constructs to JavaScript, which form another module system.</p>\n<pre data-language=\"javascript\">import \"jquery\";\nexport function doStuff() {}\nmodule \"localModule\" {}</pre>\n<h5 id=\"pros\">Pros</h5>\n<ul>\n<li>Static analysis is easy</li>\n<li>Future-proof as ES standard</li>\n</ul>\n<h5 id=\"cons\">Cons</h5>\n<ul>\n<li>Native browser support will take time</li>\n<li>Very few modules in this style</li>\n</ul>\n<h3 id=\"unbiased-solution\">Unbiased solution</h3>\n<p>Give the developer the choice of the module style. Allow existing code to work. Make it easy to add custom module styles.</p>\n<h2 id=\"transferring\">Transferring</h2>\n<p>Modules should be executed on the client, so they must be transferred from the server to the browser.</p>\n<p>There are two extremes on how to transfer modules:</p>\n<ul>\n<li>1 request per module</li>\n<li>all modules in one request</li>\n</ul>\n<p>Both are used in the wild, but both are suboptimal:</p>\n<ul>\n<li>1 request per module<ul>\n<li>Pro: only required modules are transferred</li>\n<li>Con: many requests means much overhead</li>\n<li>Con: slow application startup, because of request latency</li>\n</ul>\n</li>\n<li>all modules in one request<ul>\n<li>Pro: less request overhead, less latency</li>\n<li>Con: not (yet) required modules are transferred too</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"chunked-transferring\">Chunked transferring</h3>\n<p>A more flexible transferring would be better. A compromise between the extremes is better in most cases.</p>\n<p>→ While compiling all modules: Split the set of modules into multiple smaller batches (chunks).</p>\n<p>We get multiple smaller requests. Chunks with modules that are not required initially are only requested on demand. The initial request doesn’t contain your complete code base and is smaller.</p>\n<p>The “split points” are up to the developer and optional.</p>\n<p>→ A big code base is possible!</p>\n<p>Note: The <a href=\"https://developers.google.com/web-toolkit/doc/latest/DevGuideCodeSplitting\">idea is from Google’s GWT</a>.</p>\n<p>Read more about <a href=\"code-splitting\">Code Splitting</a>.</p>\n<h2 id=\"why-only-javascript\">Why only JavaScript?</h2>\n<p>Why should a module system only help the developer with JavaScript? There are many other static resources that need to be handled:</p>\n<ul>\n<li>stylesheets</li>\n<li>images</li>\n<li>webfonts</li>\n<li>html for templating</li>\n<li>etc.</li>\n</ul>\n<p>And also:</p>\n<ul>\n<li>coffeescript → javascript</li>\n<li>elm → javascript</li>\n<li>less stylesheets → css stylesheets</li>\n<li>jade templates → javascript which generates html</li>\n<li>i18n files → something</li>\n<li>etc.</li>\n</ul>\n<p>This should be as easy as:</p>\n<pre data-language=\"javascript\">require(\"./style.css\");</pre>\n<pre data-language=\"javascript\">require(\"./style.less\");\nrequire(\"./template.jade\");\nrequire(\"./image.png\");</pre>\n<p>Read more about <a href=\"using-loaders\">Using loaders</a> and <a href=\"loaders\">Loaders</a>.</p>\n<h2 id=\"static-analysis\">Static analysis</h2>\n<p>When compiling all the modules a static analysis tries to find dependencies.</p>\n<p>Traditionally this could only find simple stuff without expression, but i.e. <code>require(<span class=\"string\">\"./template/\"</span> + templateName + <span class=\"string\">\".jade\"</span>)</code> is a common construct.</p>\n<p>Many libraries are written in different styles. Some of them are very weird…</p>\n<h3 id=\"strategy\">Strategy</h3>\n<p>A clever parser would allow most existing code to run. If the developer does something weird it would try to find the most compatible solution.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/motivation.html\" class=\"_attribution-link\">https://webpack.github.io/docs/motivation.html</a>\n  </p>\n</div>\n","what-is-webpack":"<h1>What Is Webpack</h1>\n<p><strong>webpack</strong> is a <strong>module bundler</strong>.</p>\n<p>webpack takes modules with dependencies and generates static assets representing those modules.</p>\n<p><img src=\"http://webpack.github.io/assets/what-is-webpack.png\" alt=\"modules with dependencies ---webpack---&gt; static assets\"></p>\n<h3 id=\"why-another-module-bundler\">Why another module bundler?</h3>\n<p>Existing module bundlers are not well suited for big projects (big single page applications). The most pressing reason for developing another module bundler was <a href=\"code-splitting\">Code Splitting</a> and that static assets should fit seamlessly together through modularization.</p>\n<p>I tried to extend existing module bundlers, but it wasn’t possible to achieve all goals.</p>\n<h3 id=\"goals\">Goals</h3>\n<ul>\n<li>Split the dependency tree into chunks loaded on demand</li>\n<li>Keep initial loading time low</li>\n<li>Every static asset should be able to be a module</li>\n<li>Ability to integrate 3rd-party libraries as modules</li>\n<li>Ability to customize nearly every part of the module bundler</li>\n<li>Suited for big projects</li>\n</ul>\n<h3 id=\"how-is-webpack-different\">How is webpack different?</h3>\n<h5 id=\"code-splitting\"><a href=\"code-splitting\">Code Splitting</a></h5>\n<p>webpack has two types of dependencies in its dependency tree: sync and async. Async dependencies act as split points and form a new chunk. After the chunk tree is optimized, a file is emitted for each chunk.</p>\n<p>Read more about <a href=\"code-splitting\">Code Splitting</a>.</p>\n<h5 id=\"loaders\"><a href=\"loaders\">Loaders</a></h5>\n<p>webpack can only process JavaScript natively, but loaders are used to transform other resources into JavaScript. By doing so, every resource forms a module.</p>\n<p>Read more about <a href=\"using-loaders\">Using loaders</a> and <a href=\"loaders\">Loaders</a>.</p>\n<h5 id=\"clever-parsing\">Clever parsing</h5>\n<p>webpack has a clever parser that can process nearly every 3rd party library. It even allows expressions in dependencies like so <code>require(<span class=\"string\">\"./templates/\"</span> + name + <span class=\"string\">\".jade\"</span>)</code>. It handles the most common module styles: <a href=\"commonjs\">CommonJs</a> and <a href=\"amd\">AMD</a>.</p>\n<p>Read more about <a href=\"context\">expressions in dependencies</a>, <a href=\"commonjs\">CommonJs</a> and <a href=\"amd\">AMD</a>.</p>\n<h5 id=\"plugin-system\"><a href=\"plugins\">Plugin system</a></h5>\n<p>webpack features a rich plugin system. Most internal features are based on this plugin system. This allows you to customize webpack for your needs and distribute common plugins as open source.</p>\n<p>Read more about <a href=\"plugins\">Plugins</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/what-is-webpack.html\" class=\"_attribution-link\">https://webpack.github.io/docs/what-is-webpack.html</a>\n  </p>\n</div>\n","usage":"<h1>Usage</h1>\n<p><strong>WIP</strong></p>\n<ul>\n<li>see <a href=\"cli\">CLI</a> for the command line interface.</li>\n<li>see <a href=\"node.js-api\">node.js API</a> for the node.js interface.</li>\n<li>see <a href=\"configuration\">Configuration</a> for the configuration options.</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/usage.html\" class=\"_attribution-link\">https://webpack.github.io/docs/usage.html</a>\n  </p>\n</div>\n","using-plugins":"<h1>Using Plugins</h1>\n<h3 id=\"built-in-plugins\">Built-in plugins</h3>\n<p>Plugins are included in your module by using the plugins property in the webpack config.</p>\n<pre data-language=\"javascript\">// webpack should be in the node_modules directory, install if not.\nvar webpack = require(\"webpack\");\n\nmodule.exports = {\n    plugins: [\n        new webpack.ResolverPlugin([\n            new webpack.ResolverPlugin.DirectoryDescriptionFilePlugin(\"bower.json\", [\"main\"])\n        ], [\"normal\", \"loader\"])\n    ]\n};</pre>\n<h3 id=\"other-plugins\">Other plugins</h3>\n<p>Plugins that are not built-in may be installed via npm if published there, or by other means if not:</p>\n<pre data-language=\"javascript\">npm install component-webpack-plugin</pre>\n<p>which can then be used as follows:</p>\n<pre data-language=\"javascript\">var ComponentPlugin = require(\"component-webpack-plugin\");\nmodule.exports = {\n    plugins: [\n        new ComponentPlugin()\n    ]\n}</pre>\n<p>When installing third party plugins via npm it is advised to use this tool: <a href=\"https://www.npmjs.com/package/webpack-load-plugins\">https://www.npmjs.com/package/webpack-load-plugins</a></p>\n<p>It checks for all third party plugins installed in your dependencies and lazyloads them when you need them.</p>\n<h3 id=\"see-also\">See also</h3>\n<ul><li><a href=\"list-of-plugins\">list of plugins</a></li></ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/using-plugins.html\" class=\"_attribution-link\">https://webpack.github.io/docs/using-plugins.html</a>\n  </p>\n</div>\n","dev-tools":"<h1>Dev Tools</h1>\n<p>WIP</p>\n<ul>\n<li>\n<code>devtool</code> <a href=\"configuration\">configuration</a> option</li>\n<li><a href=\"webpack-dev-server\">webpack-dev-server</a></li>\n<li><a href=\"webpack-dev-middleware\">webpack-dev-middleware</a></li>\n<li>\n<a href=\"https://www.npmjs.org/package/koa-webpack-dev\">koa-webpack-dev</a>: serve bundle + Hot Module Replacement in Koa.js development server</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/dev-tools.html\" class=\"_attribution-link\">https://webpack.github.io/docs/dev-tools.html</a>\n  </p>\n</div>\n","troubleshooting":"<h1>Troubleshooting</h1>\n<h2 id=\"resolving\">resolving</h2>\n<h3 id=\"general-resolving-issues\">general resolving issues</h3>\n<ul>\n<li>\n<code>--display-error-details</code> give you more details.</li>\n<li>Read <a href=\"configuration\">Configuration</a> regarding resolving starting at <code>resolve</code><ul><li>loaders have their own resolving configuration <code>resolveLoader</code>\n</li></ul>\n</li>\n</ul>\n<h3 id=\"npm-linked-modules-doesn-t-find-their-dependencies\">\n<code>npm link</code>ed modules doesn’t find their dependencies</h3>\n<p>The node.js module resolving algorithm is pretty simple: module dependencies are looked up in <code>node_modules</code> folders in every parent directory of the requiring module. When you <code>npm link</code> modules with peer dependencies that are not in your root directory, modules can no longer be found. (You probably want to consider <code>peerDependencies</code> with <code>npm link</code> as broken by design in node.js.) Note that a dependency to the application (even if this is not the perfect design) is also a kind of peerDependency even if it’s not listed as such in the module’s <code>package.json</code>.</p>\n<p>But you can easily workaround that in webpack: Add the <code>node_modules</code> folder of your application to the resolve paths. There are two config options for this: <code>resolve.fallback</code> and <code>resolveLoader.fallback</code>.</p>\n<p>Here is a config example:</p>\n<pre data-language=\"javascript\">module.exports = {\n  resolve: { fallback: path.join(__dirname, \"node_modules\") },\n  resolveLoader: { fallback: path.join(__dirname, \"node_modules\") }\n};</pre>\n<h2 id=\"watching\">Watching</h2>\n<h3 id=\"webpack-doesn-t-recompile-on-change-while-watching\">webpack doesn’t recompile on change while watching</h3>\n<h4 id=\"not-enough-watchers\">Not enough watchers</h4>\n<p>Verify that if you have enough available watchers in your system. If this value is too low, the file watcher in Webpack won’t recognize the changes:</p>\n<pre data-language=\"javascript\">cat /proc/sys/fs/inotify/max_user_watches</pre>\n<p>Arch users, add <code>fs.inotify.max_user_watches=<span class=\"number\">524288</span></code> to <code>/etc/sysctl.d/<span class=\"number\">99</span>-sysctl.conf</code> and then execute <code>sysctl --system</code>. Ubuntu users (and possibly others): <code>echo fs.inotify.max_user_watches=<span class=\"number\">524288</span> | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</code>.</p>\n<h4 id=\"os-x-fsevents-bug\">OS-X fsevents bug</h4>\n<p>On OS-X folders can get corrupted. See this article:</p>\n<p><a href=\"http://feedback.livereload.com/knowledgebase/articles/86239-os-x-fsevents-bug-may-prevent-monitoring-of-certai\">OS X FSEvents bug may prevent monitoring of certain folders</a></p>\n<h4 id=\"windows-paths\">Windows paths</h4>\n<p>webpack expects absolute paths for many config options. <code>__dirname + <span class=\"string\">\"/app/folder\"</span></code> is wrong, because windows uses <code>\\</code> as path separator. This breaks some stuff.</p>\n<p>Use the correct separators. I.e. <code>path.resolve(__dirname, <span class=\"string\">\"app/folder\"</span>)</code> or <code>path.join(__dirname, <span class=\"string\">\"app\"</span>, <span class=\"string\">\"folder\"</span>)</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/troubleshooting.html\" class=\"_attribution-link\">https://webpack.github.io/docs/troubleshooting.html</a>\n  </p>\n</div>\n","amd":"<h1>Amd</h1>\n<p>AMD (Asynchronous Module Definition) was the response to those who thought the CommonJS Module system was not ready for the browser because its nature was synchronous.</p>\n<p>AMD specifies a standard for modular JavaScript such that modules can load their dependencies asynchronously, solving the problems associated with synchronous loading.</p>\n<h3 id=\"specification\">Specification</h3>\n<p>Modules are defined using the <code>define</code> function.</p>\n<h4 id=\"define\"><code>define</code></h4>\n<p>The define function is how modules are defined with AMD. It is just a function that has this signature</p>\n<pre data-language=\"javascript\">define(id?: String, dependencies?: String[], factory: Function|Object);</pre>\n<h5 id=\"id\"><code>id</code></h5>\n<p>Specifies the module name. It is optional.</p>\n<h5 id=\"dependencies\"><code>dependencies</code></h5>\n<p>This argument specifies which module dependencies the module being defined has. It is an array containing module identifiers. It is optional, but if omitted, it defaults to [“require”, “exports”, “module”].</p>\n<h5 id=\"factory\"><code>factory</code></h5>\n<p>The last argument is the one who defines the module. It can be a function (which should be called once), or an object. If the factory is a function, the value returned will be the exported value for the module.</p>\n<h3 id=\"examples\">Examples</h3>\n<p>Let’s see some examples:</p>\n<h4 id=\"named-module\">Named module</h4>\n<p>Defines a module named <code>myModule</code> that requires <code>jQuery</code>.</p>\n<pre data-language=\"javascript\">define('myModule', ['jquery'], function($) {\n    // $ is the export of the jquery module.\n    $('body').text('hello world');\n});\n// and use it\nrequire(['myModule'], function(myModule) {});</pre>\n<p>Note: In webpack a named module is only locally available. In Require.js a named module is globally available.</p>\n<h4 id=\"anonymous-module\">Anonymous module</h4>\n<p>Define a module without specifying its id.</p>\n<pre data-language=\"javascript\">define(['jquery'], function($) {\n    $('body').text('hello world');\n});</pre>\n<h4 id=\"multiple-dependencies\">Multiple dependencies</h4>\n<p>Define a module with multiple dependencies. Note that each dependency export will be passed to the factory function.</p>\n<pre data-language=\"javascript\">define(['jquery', './math.js'], function($, math) {\n    // $ and math are the exports of the jquery module.\n    $('body').text('hello world');\n});</pre>\n<h4 id=\"export-value\">Export value</h4>\n<p>Define a module that exports itself.</p>\n<pre data-language=\"javascript\">define(['jquery'], function($) {\n\n    var HelloWorldize = function(selector){\n        $(selector).text('hello world');\n    };\n\n    return HelloWorldize;\n});</pre>\n<h4 id=\"using-require-to-load-dependencies\">Using require to load dependencies</h4>\n<pre data-language=\"javascript\">define(function(require) {\n    var $ = require('jquery');\n    $('body').text('hello world');\n});</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/amd.html\" class=\"_attribution-link\">https://webpack.github.io/docs/amd.html</a>\n  </p>\n</div>\n","installation":"<h1>Installation</h1>\n<h3 id=\"node-js\">node.js</h3>\n<p>Install <a href=\"http://nodejs.org\">node.js</a>.</p>\n<p>node.js comes with a package manager called <code>npm</code>.</p>\n<h3 id=\"webpack\">webpack</h3>\n<p>webpack can be installed through <code>npm</code>:</p>\n<pre data-language=\"javascript\">$ npm install webpack -g</pre>\n<p>webpack is now installed globally and the <code>webpack</code> command is available.</p>\n<h3 id=\"use-webpack-in-a-project\">Use webpack in a project</h3>\n<p>It’s the best to have webpack also as dependency in your project. Through this you can choose a local webpack version and will not be forced to use the single global one.</p>\n<p>Add a <code>package.json</code> configuration file for <code>npm</code> with:</p>\n<pre data-language=\"javascript\">$ npm init</pre>\n<p>The answers to the questions are not so important if you don’t want to publish your project to npm.</p>\n<p>Install and add <code>webpack</code> to the <code>package.json</code> with:</p>\n<pre data-language=\"javascript\">$ npm install webpack --save-dev</pre>\n<h3 id=\"versions\">Versions</h3>\n<p>There are two versions of webpack available. The stable one and a beta version. The beta version is marked with a <code>-beta</code> in the version string. The beta version may contain fragile changes or experimental features and is less tested. See <a href=\"https://webpack.github.io/docs/changelog.html\">changelog</a> for differences. For serious stuff you should use the stable version:</p>\n<pre data-language=\"javascript\">$ npm install webpack@1.2.x --save-dev</pre>\n<h3 id=\"dev-tools\">Dev Tools</h3>\n<p>If you want to use dev tools you should install it:</p>\n<pre data-language=\"javascript\">$ npm install webpack-dev-server --save-dev</pre>\n<h3 id=\"continue-reading\">Continue reading</h3>\n<p>You can continue reading <a href=\"usage\">Usage</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/installation.html\" class=\"_attribution-link\">https://webpack.github.io/docs/installation.html</a>\n  </p>\n</div>\n","using-loaders":"<h1>Using Loaders</h1>\n<h2 id=\"what-are-loaders\">What are loaders?</h2>\n<p>Loaders are transformations that are applied on a resource file of your app. They are functions (running in node.js) that take the source of a resource file as the parameter and return the new source.</p>\n<p>For example, you can use loaders to tell webpack to load CoffeeScript or JSX.</p>\n<h3 id=\"loader-features\">Loader features</h3>\n<ul>\n<li>Loaders can be chained. They are applied in a pipeline to the resource. The final loader is expected to return JavaScript, the others can return arbitrary format (which is passed to the next loader)</li>\n<li>Loaders can be synchronous and asynchronous.</li>\n<li>Loaders run in node.js and can do everything that’s possible there.</li>\n<li>Loaders accept query parameters. This can be used to pass configuration to the loader.</li>\n<li>Loaders can be bound to extension / RegExps in the configuration.</li>\n<li>Loaders can be published / installed through <code>npm</code>.</li>\n<li>Normal modules can export a loader in addition to the normal <code>main</code> via <code>package.json</code> <code>loader</code>.</li>\n<li>Loaders can access the configuration.</li>\n<li>Plugins can give loaders more features.</li>\n<li>Loaders can emit additional arbitrary files.</li>\n<li><a href=\"loaders\">etc.</a></li>\n</ul>\n<p>If you are interested in some loader examples head off to the <a href=\"list-of-loaders\">list of loaders</a>.</p>\n<h2 id=\"resolving-loaders\">Resolving loaders</h2>\n<p>Loaders are <a href=\"resolving\">resolved similar to modules</a>. A loader module is expected to export a function and to be written in node.js compatible JavaScript. In the common case you manage loaders with npm, but you can also have loaders as files in your app.</p>\n<h3 id=\"referencing-loaders\">Referencing loaders</h3>\n<p>By convention, though not required, loaders are usually named as <code>XXX-loader</code>, where <code>XXX</code> is the context name. For example, <code>json-loader</code>.</p>\n<p>You may reference loaders by its full (actual) name (e.g. <code>json-loader</code>), or by its shorthand name (e.g. <code>json</code>).</p>\n<p>The loader name convention and precedence search order is defined by <a href=\"http://webpack.github.io/docs/configuration.html#resolveloader-moduletemplates\"><code>resolveLoader.moduleTemplates</code></a> within the webpack configuration API.</p>\n<p>Loader name conventions may be useful, especially when referencing them within <code>require()</code> statements; see usage below.</p>\n<h3 id=\"installing-loaders\">Installing loaders</h3>\n<p>If the loader is available on npm you can install the loader via:</p>\n<pre data-language=\"javascript\">$ npm install xxx-loader --save</pre>\n<p>or</p>\n<pre data-language=\"javascript\">$ npm install xxx-loader --save-dev</pre>\n<h2 id=\"usage\">Usage</h2>\n<p>There are multiple ways to use loaders in your app:</p>\n<ul>\n<li>explicit in the <code>require</code> statement</li>\n<li>configured via configuration</li>\n<li>configured via CLI</li>\n</ul>\n<h3 id=\"loaders-in-require\">loaders in <code>require</code>\n</h3>\n<blockquote><p><strong>Note:</strong> Avoid using this, if at all possible, if you intend your scripts to be environment agnostic (node.js and browser). Use the <em>configuration</em> convention for specifying loaders (see next section).</p></blockquote>\n<p>It’s possible to specify the loaders in the <code>require</code> statement (or <code>define</code>, <code>require.ensure</code>, etc.). Just separate loaders from resource with <code>!</code>. Each part is resolved relative to the current directory.</p>\n<pre data-language=\"javascript\">require(\"./loader!./dir/file.txt\");\n// =&gt; uses the file \"loader.js\" in the current directory to transform\n//    \"file.txt\" in the folder \"dir\".\n\nrequire(\"jade!./template.jade\");\n// =&gt; uses the \"jade-loader\" (that is installed from npm to \"node_modules\")\n//    to transform the file \"template.jade\"\n\nrequire(\"!style!css!less!bootstrap/less/bootstrap.less\");\n// =&gt; the file \"bootstrap.less\" in the folder \"less\" in the \"bootstrap\"\n//    module (that is installed from github to \"node_modules\") is\n//    transformed by the \"less-loader\". The result is transformed by the\n//    \"css-loader\" and then by the \"style-loader\".</pre>\n<h3 id=\"configuration\"><a href=\"configuration\">Configuration</a></h3>\n<p>You can bind loaders to a RegExp via configuration:</p>\n<pre data-language=\"javascript\">{\n    module: {\n        loaders: [\n            { test: /\\.jade$/, loader: \"jade\" },\n            // =&gt; \"jade\" loader is used for \".jade\" files\n\n            { test: /\\.css$/, loader: \"style!css\" },\n            // =&gt; \"style\" and \"css\" loader is used for \".css\" files\n            // Alternative syntax:\n            { test: /\\.css$/, loaders: [\"style\", \"css\"] },\n        ]\n    }\n}</pre>\n<h3 id=\"cli\"><a href=\"cli\">CLI</a></h3>\n<p>You can bind loaders to an extension via CLI:</p>\n<pre data-language=\"javascript\">$ webpack --module-bind jade --module-bind 'css=style!css'</pre>\n<p>This uses the loader “jade” for “.jade” files and the loaders “style” and “css” for “.css” files.</p>\n<h3 id=\"query-parameters\">Query parameters</h3>\n<p>Loader can be passed query parameters via a query string (just like in the web). The query string is appended to the loader with <code>?</code>. i.e. <code>url-loader?mimetype=image/png</code>.</p>\n<p>Note: The format of the query string is up to the loader. See format in the loader documentation. Most loaders accept parameters in the normal query format (<code>?key=value&amp;key2=value2</code>) and as JSON object (<code>?{<span class=\"string\">\"key\"</span>:<span class=\"string\">\"value\"</span>,<span class=\"string\">\"key2\"</span>:<span class=\"string\">\"value2\"</span>}</code>).</p>\n<h4 id=\"in-require\">in <code>require</code>\n</h4>\n<pre data-language=\"javascript\">require(\"url-loader?mimetype=image/png!./file.png\");</pre>\n<h4 id=\"configuration\">Configuration</h4>\n<pre data-language=\"javascript\">{ test: /\\.png$/, loader: \"url-loader?mimetype=image/png\" }</pre>\n<p>or</p>\n<pre data-language=\"javascript\">{\n    test: /\\.png$/,\n    loader: \"url-loader\",\n    query: { mimetype: \"image/png\" }\n}</pre>\n<h4 id=\"cli\">CLI</h4>\n<pre data-language=\"javascript\">webpack --module-bind \"png=url-loader?mimetype=image/png\"</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/using-loaders.html\" class=\"_attribution-link\">https://webpack.github.io/docs/using-loaders.html</a>\n  </p>\n</div>\n","multiple-entry-points":"<h1>Multiple Entry Points</h1>\n<p>Prerequirement: <a href=\"code-splitting\">Code Splitting</a></p>\n<p>If you need multiple bundles for multiple HTML pages you can use the “multiple entry points” feature. It will build multiple bundles at once. Additional chunks can be shared between these entry chunks and modules are only built once.</p>\n<blockquote><p>Hint: When you want to start an entry chunk from a module, you are doing something wrong. Use <a href=\"code-splitting\">Code Splitting</a> instead!</p></blockquote>\n<p>Every entry chunk contains the webpack runtime, so you can only load one entry chunk per page. (Hint: To bypass this limitation use the CommonsChunkPlugin to move the runtime into a single chunk.)</p>\n<h3 id=\"configuration\">Configuration</h3>\n<p>To use multiple entry points you can pass an object to the <code>entry</code> option. Each value is threaded as entry point and the key represents the name of the entry point.</p>\n<p>When using multiple entry point you must override the default <code>output.filename</code> option. Otherwise each entry point would write to the same output file. Use <code>[name]</code> to get the name of the entry point.</p>\n<h4 id=\"minimal-example-configuration\">Minimal example configuration</h4>\n<pre data-language=\"javascript\">{\n    entry: {\n        a: \"./a\",\n        b: \"./b\",\n        c: [\"./c\", \"./d\"]\n    },\n    output: {\n        path: path.join(__dirname, \"dist\"),\n        filename: \"[name].entry.js\"\n    }\n}</pre>\n<h3 id=\"examples\">Examples</h3>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack/tree/master/examples/multiple-entry-points\">multiple-entry-points</a></li>\n<li><a href=\"https://github.com/webpack/webpack/tree/master/examples/multi-part-library\">multi-part-library</a></li>\n<li><a href=\"https://github.com/webpack/webpack/tree/master/examples/multiple-commons-chunks\">multiple-commons-chunks</a></li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/multiple-entry-points.html\" class=\"_attribution-link\">https://webpack.github.io/docs/multiple-entry-points.html</a>\n  </p>\n</div>\n","commonjs":"<h1>Commonjs</h1>\n<p>The CommonJS group defined a module format to solve JavaScript scope issues by making sure each module is executed in its own namespace.</p>\n<p>This is achieved by forcing modules to explicitly export those variables it wants to expose to the “universe”, and also by defining those other modules required to properly work.</p>\n<p>To achieve this CommonJS give you two tools:</p>\n<ol>\n<li>the <code>require()</code> function, which allows to import a given module into the current scope.</li>\n<li>the <code>module</code> object, which allows to export something from the current scope.</li>\n</ol>\n<p>The mandatory hello world example:</p>\n<h3 id=\"plain-simple-javascript\">Plain Simple JavaScript</h3>\n<p>Here is an example without CommonJS:</p>\n<p>We will define a value in a script file named <code>salute.js</code>. This script will contain just a value that will be used in other scripts:</p>\n<pre data-language=\"javascript\">// salute.js\nvar MySalute = \"Hello\";</pre>\n<p>Now, in a second file named <code>world.js</code>, we are going to use the value defined in <code>salute.js</code>.</p>\n<pre data-language=\"javascript\">// world.js\nvar Result = MySalute + \" world!\";</pre>\n<h3 id=\"module-definitions\">Module definitions</h3>\n<p>As it is, <code>world.js</code> will not work as <code>MySalute</code> is not defined. We need to define each script as a module:</p>\n<pre data-language=\"javascript\">// salute.js\nvar MySalute = \"Hello\";\nmodule.exports = MySalute;</pre>\n<pre data-language=\"javascript\">// world.js\nvar Result = MySalute + \"world!\";\nmodule.exports = Result;</pre>\n<p>Here we make use of the special object <code>module</code> and place a reference of our variable into <code>module.exports</code> so the CommonJS module system knows this is the object of our module we want to show to the world. <code>salute.js</code> discloses <code>MySalute</code>, and <code>world.js</code> discloses <code>Result</code>.</p>\n<h3 id=\"module-dependency\">Module dependency</h3>\n<p>We’re near but there’s still a step missing: dependency definition. We’ve already defined every script as an independent module, but <code>world.js</code> still needs to know who defines <code>MySalute</code>:</p>\n<pre data-language=\"javascript\">// salute.js\nvar MySalute = \"Hello\";\nmodule.exports = MySalute;</pre>\n<pre data-language=\"javascript\">// world.js\nvar MySalute = require(\"./salute\");\nvar Result = MySalute + \"world!\";\nmodule.exports = Result;</pre>\n<p>Note that we didn’t use the full filename <code>salute.js</code> but <code>.<span class=\"regexp\">/salute</span></code> when calling <code>require</code>, so you can omit the extension of your scripts. <code>.<span class=\"regexp\">/</span></code> means that the <code>salute</code> module is in the same directory as the <code>world</code> module.</p>\n<h3 id=\"examples\">Examples</h3>\n<h4 id=\"functions\">Functions</h4>\n<pre data-language=\"javascript\">// moduleA.js\nmodule.exports = function( value ){\n    return value*2;\n}</pre>\n<pre data-language=\"javascript\">// moduleB.js\nvar multiplyBy2 = require('./moduleA');\nvar result = multiplyBy2( 4 );</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/commonjs.html\" class=\"_attribution-link\">https://webpack.github.io/docs/commonjs.html</a>\n  </p>\n</div>\n","webpack-for-browserify-users":"<h1>Webpack For Browserify Users</h1>\n<h2 id=\"usage\">Usage</h2>\n<p>Like browserify, webpack analyzes all the node-style <code>require()</code> calls in your app and builds a bundle that you can serve up to the browser using a <code>&lt;script&gt;</code> tag.</p>\n<p>Instead of doing</p>\n<pre data-language=\"javascript\">$ browserify main.js &gt; bundle.js</pre>\n<p>do</p>\n<pre data-language=\"javascript\">$ webpack main.js bundle.js</pre>\n<blockquote><p>webpack doesn’t write to stdout. You need to specify a filename. It can’t write to stdout because, unlike browserify, it may generate multiple output files.</p></blockquote>\n<p>The best way to <a href=\"configuration\">configure</a> webpack is with a <code>webpack.config.js</code> file. It’s loaded from current directory, when running the <a href=\"cli\">executable</a>.</p>\n<p>So</p>\n<pre data-language=\"javascript\">$ browserify --entry main.js --outfile bundle.js</pre>\n<p>maps to <code>webpack</code> with this config:</p>\n<pre data-language=\"javascript\">module.exports = {\n    entry: \"./main.js\",\n    output: {\n        filename: \"bundle.js\"\n    }\n}</pre>\n<blockquote><p>Note: A <code>webpack.config.js</code> should <strong>export</strong> the configuration, hence the <code>module.exports = {...}</code> in the above example.</p></blockquote>\n<h3 id=\"outfile\">outfile</h3>\n<p>If you want to emit the output files to another directory:</p>\n<pre data-language=\"javascript\">$ browserify --outfile js/bundle.js</pre>\n<pre data-language=\"javascript\">{\n    output: {\n        path: path.join(__dirname, \"js\"),\n        filename: \"bundle.js\"\n    }\n}</pre>\n<h3 id=\"entry\">entry</h3>\n<pre data-language=\"javascript\">$ browserify --entry a.js --entry b.js</pre>\n<pre data-language=\"javascript\">{\n    entry: [\n        \"./a.js\",\n        \"./b.js\"\n    ]\n}</pre>\n<h3 id=\"transform\">transform</h3>\n<p>browserify uses <em>transforms</em> to preprocess files. webpack uses <em>loaders</em>. Loaders are functions that take source code as an argument and return (modified) source code. Like transforms they run in node.js, can be chained, and can be asynchronous. Loaders can take additional parameters by query strings. Loaders can be used from <code>require()</code> calls. Transforms can be specified in the <code>package.json</code>. <code>browserify</code> applies configured transforms for each module. Within the webpack configuration you select the modules by RegExp. In the common case you specify loaders in the <code>webpack.config.js</code>:</p>\n<pre data-language=\"javascript\">$ browserify --transform coffeeify</pre>\n<pre data-language=\"javascript\">{\n    module: {\n        loaders: [\n            { test: /\\.coffee$/, loader: \"coffee-loader\" }\n        ]\n    }\n}</pre>\n<blockquote><p>Note: It’s possible to use browserify transforms with webpack and the <a href=\"https://github.com/webpack/transform-loader\">transform-loader</a>.</p></blockquote>\n<h3 id=\"debug\">debug</h3>\n<pre data-language=\"javascript\">$ browserify -d\n# Add inlined SourceMap</pre>\n<pre data-language=\"javascript\">$ webpack --devtool inline-source-map\n# Add inlined SourceMaps\n\n$ webpack --devtool source-map\n# Emit SourceMaps as separate file\n\n$ webpack --devtool eval\n# Emit SourceUrls within evals (faster)\n\n$ webpack --devtool eval-source-map\n# Emit inlined SourceMaps within evals\n\n$ webpack --debug\n# Add more debugging information to the source\n\n$ webpack --output-pathinfo\n# Add comments about paths to source code\n# (Useful when using no or the eval devtool)\n\n$ webpack -d\n# = webpack --devtool source-map --debug --output-pathinfo</pre>\n<h3 id=\"extension\">extension</h3>\n<pre data-language=\"javascript\">$ browserify --extension coffee</pre>\n<pre data-language=\"javascript\">{\n    resolve: {\n        extensions: [\"\", \".js\", \".coffee\"]\n    }\n}</pre>\n<h3 id=\"standalone\">standalone</h3>\n<pre data-language=\"javascript\">browserify --standalone MyLibrary</pre>\n<pre data-language=\"javascript\">{\n    output: {\n        library: \"MyLibrary\",\n        libraryTarget: \"umd\"\n    }\n}\n// webpack --output-library MyLibrary --output-library-target umd</pre>\n<h3 id=\"ignore\">ignore</h3>\n<pre data-language=\"javascript\">$ browserify --ignore file.js</pre>\n<pre data-language=\"javascript\">{\n    plugins: [\n        new webpack.IgnorePlugin(/file\\.js$/)\n    ]\n}</pre>\n<h3 id=\"node-globals\">node globals</h3>\n<pre data-language=\"javascript\">$ browserify --insert-globals\n$ browserify --detect-globals</pre>\n<p>You can enable/disable these node globals individually:</p>\n<pre data-language=\"javascript\">{\n    node: {\n        filename: true,\n        dirname: \"mock\",\n        process: false,\n        global: true\n    }\n}</pre>\n<h3 id=\"ignore-missing\">ignore-missing</h3>\n<pre data-language=\"javascript\">$ browserify --ignore-missing</pre>\n<p>webpack prints errors for each missing dependency, but doesn’t fail to build a bundle. You are free to ignore these errors. The <code>require</code> call will throw an error on runtime.</p>\n<h3 id=\"noparse\">noparse</h3>\n<pre data-language=\"javascript\">$ browserify --noparse=file.js</pre>\n<pre data-language=\"javascript\">module.exports = {\n    module: {\n        noParse: [\n            /file\\.js$/\n        ]\n    }\n};</pre>\n<h3 id=\"build-info\">build info</h3>\n<pre data-language=\"javascript\">$ browserify --deps\n$ browserify --list</pre>\n<pre data-language=\"javascript\">$ webpack --json</pre>\n<h3 id=\"external-requires\">external requires</h3>\n<p>webpack does not support external requires. You cannot expose the <code>require</code> function to other scripts. Just use webpack for all scripts on a page or do it like this:</p>\n<pre data-language=\"javascript\">{\n    output: {\n        library: \"require\",\n        libraryTarget: \"this\"\n    }\n}</pre>\n<pre data-language=\"javascript\">// entry point\nmodule.exports = function(parentRequire) {\n    return function(module) {\n        switch(module) {\n        case \"through\": return require(\"through\");\n        case \"duplexer\": return require(\"duplexer\");\n        }\n        return parentRequire(module);\n    };\n}(typeof __non_webpack_require__ === \"function\" ? __non_webpack_require__ : function() {\n    throw new Error(\"Module '\" + module + \"' not found\")\n});</pre>\n<h3 id=\"multiple-bundles\">multiple bundles</h3>\n<p>With browserify you can create a commons bundle that you can use in combination with bundles on multiple pages. To generate these bundles you exclude the common stuff with the <code>--exclude</code> <code>-x</code> option. Here is the example from the browserify README:</p>\n<pre data-language=\"javascript\">$ browserify -r ./robot &gt; static/common.js\n$ browserify -x ./robot.js beep.js &gt; static/beep.js\n$ browserify -x ./robot.js boop.js &gt; static/boop.js</pre>\n<p>webpack supports multi-page compilation and has a plugin for the automatic extraction of common modules:</p>\n<pre data-language=\"javascript\">var webpack = require(\"webpack\");\n{\n    entry: {\n        beep: \"./beep.js\",\n        boop: \"./boop.js\",\n    },\n    output: {\n        path: \"static\",\n        filename: \"[name].js\"\n    },\n    plugins: [\n        // ./robot is automatically detected as common module and extracted\n        new webpack.optimize.CommonsChunkPlugin(\"common.js\")\n    ]\n}</pre>\n<pre data-language=\"javascript\">&lt;script src=\"common.js\"&gt;&lt;/script&gt;\n&lt;script src=\"beep.js\"&gt;&lt;/script&gt;</pre>\n<h2 id=\"api\">API</h2>\n<p>No need to learn much more. Just pass the config object to the <code>webpack</code> API:</p>\n<pre data-language=\"javascript\">var webpack = require(\"webpack\");\n\nwebpack({\n    entry: \"./main.js\",\n    output: {\n        filename: \"bundle.js\"\n    }\n}, function(err, stats) {\n    err // =&gt; fatal compiler error (rar)\n    var json = stats.toJson() // =&gt; webpack --json\n    json.errors // =&gt; array of errors\n    json.warnings // =&gt; array of warnings\n});</pre>\n<h2 id=\"third-party-tool-mappings\">Third-party-tool mappings</h2>\n<table class=\"table table-bordered table-striped table-hover\">\n<thead><tr>\n<th>browserify</th>\n<th>webpack</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>watchify</td>\n<td><code>webpack --watch</code></td>\n</tr>\n<tr>\n<td>browserify-middleware</td>\n<td><a href=\"webpack-dev-middleware\">webpack-dev-middleware</a></td>\n</tr>\n<tr>\n<td>beefy</td>\n<td><a href=\"webpack-dev-server\">webpack-dev-server</a></td>\n</tr>\n<tr>\n<td>deAMDify</td>\n<td><code>webpack</code></td>\n</tr>\n<tr>\n<td>decomponentify</td>\n<td><a href=\"https://github.com/webpack/component-webpack-plugin\">component-webpack-plugin</a></td>\n</tr>\n<tr>\n<td>list of source transforms</td>\n<td>\n<a href=\"list-of-loaders\">list of loaders</a>, <a href=\"https://github.com/webpack/transform-loader\">transform-loader</a>\n</td>\n</tr>\n</tbody>\n</table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/webpack-for-browserify-users.html\" class=\"_attribution-link\">https://webpack.github.io/docs/webpack-for-browserify-users.html</a>\n  </p>\n</div>\n","long-term-caching":"<h1>Long Term Caching</h1>\n<p>To effectively cache your files, they should have a hash or version in their URL. You can emit or move the output files manually in a folder called <code>v1<span class=\"number\">.3</span></code>. But this has several disadvantages: Extra work for the developer and unchanged files aren’t loaded from cache.</p>\n<p>Webpack can add hashes for the files to the filename. Loaders that emit files (worker-loader, file-loader) already do this. For the chunks you have to enable it. There are two levels:</p>\n<ol>\n<li>Compute a hash of all chunks and add it.</li>\n<li>Compute a hash per chunk and add it.</li>\n</ol>\n<h3 id=\"option-1-one-hash-for-the-bundle\">Option 1: One hash for the bundle</h3>\n<p>Option 1 is enabled by adding <code>[hash]</code> to the filename config options:</p>\n<p><code>webpack .<span class=\"regexp\">/entry output.[hash].bundle.js</span></code></p>\n<pre data-language=\"javascript\">{\n    output: {\n        path: path.join(__dirname, \"assets\", \"[hash]\"),\n        publicPath: \"assets/[hash]/\",\n        filename: \"output.[hash].bundle.js\",\n        chunkFilename: \"[id].[hash].bundle.js\"\n    }\n}</pre>\n<h3 id=\"option-2-one-hash-per-chunk\">Option 2: One hash per chunk</h3>\n<p>Option 2 is enabled by adding <code>[chunkhash]</code> to the chunk filename config option</p>\n<p><code>--output-chunk-file [chunkhash].js</code></p>\n<pre data-language=\"javascript\">output: { chunkFilename: \"[chunkhash].bundle.js\" }</pre>\n<p>Note that you need to reference the entry chunk with its hash in your HTML. You may want to extract the hash or the filename from the stats.</p>\n<p>In combination with Hot Code Replacement you must use option 1, but not on the <code>publicPath</code> config option.</p>\n<h3 id=\"get-filenames-from-stats\">Get filenames from stats</h3>\n<p>You probably want to access the final filename of the asset to embed it into your HTML. This information is available in the webpack stats. If you are using the CLI you can run it with <code>--json</code> to get the stats as JSON to stdout.</p>\n<p>You can add a plugin such as <a href=\"https://www.npmjs.com/package/assets-webpack-plugin\">assets-webpack-plugin</a> to your configuration which allows you to access the stats object. Here is an example how to write it into a file:</p>\n<pre data-language=\"javascript\">plugins: [\n  function() {\n    this.plugin(\"done\", function(stats) {\n      require(\"fs\").writeFileSync(\n        path.join(__dirname, \"...\", \"stats.json\"),\n        JSON.stringify(stats.toJson()));\n    });\n  }\n]</pre>\n<p>The stats JSON contains a useful property <code>assetsByChunkName</code> which is a object containing chunk name as key and filename(s) as value.</p>\n<blockquote><p>Note: It’s an array if you are emitting multiple assets per chunk. I. e. a JavaScript file and a SourceMap. The first one is your JavaScript source.</p></blockquote><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/long-term-caching.html\" class=\"_attribution-link\">https://webpack.github.io/docs/long-term-caching.html</a>\n  </p>\n</div>\n","library-and-externals":"<h1>Library And Externals</h1>\n<p>You developed a library and want to distribute it in compiled/bundled versions (in addition to the modularized version). You want to allow the user to use it in a <code>&lt;script&gt;</code>-tag or with a <a href=\"amd\">amd</a> loader (i. e. <code>require.js</code>). Or you depend on various precompilations and want to take the pain for the user and distribute it as simple compiled <a href=\"commonjs\">commonjs</a> module.</p>\n<h3 id=\"configuration-options\">configuration options</h3>\n<p>webpack has three <a href=\"configuration\">configuration</a> options that are relevant for these use cases: <code>output.library</code>, <code>output.libraryTarget</code> and <code>externals</code>.</p>\n<p><code>output.libraryTarget</code> allows you to specify the kind to the output. I.e. CommonJs, AMD, for usage in a script tag or as UMD module.</p>\n<p><code>output.library</code> allows you to optionally specify a name of your library.</p>\n<p><code>externals</code> allows you to specify dependencies for your library that are not resolved by webpack, but become dependencies of the output. This means they are imported from the environment during runtime.</p>\n<h3 id=\"examples\">Examples</h3>\n<h5 id=\"compile-library-for-usage-in-a-script-tag\">compile library for usage in a <code>&lt;script&gt;</code>-tag</h5>\n<ul>\n<li>depends on <code><span class=\"string\">\"jquery\"</span></code>, but jquery should not be included in the bundle.</li>\n<li>library should be available at <code>Foo</code> in the global context.</li>\n</ul>\n<pre data-language=\"javascript\">var jQuery = require(\"jquery\");\nvar math = require(\"math-library\");\n\nfunction Foo() {}\n\n// ...\n\nmodule.exports = Foo;</pre>\n<p>Recommended configuration (only relevant stuff):</p>\n<pre data-language=\"javascript\">{\n    output: {\n        // export itself to a global var\n        libraryTarget: \"var\",\n        // name of the global var: \"Foo\"\n        library: \"Foo\"\n    },\n    externals: {\n        // require(\"jquery\") is external and available\n        //  on the global var jQuery\n        \"jquery\": \"jQuery\"\n    }\n}</pre>\n<p>Resulting bundle:</p>\n<pre data-language=\"javascript\">var Foo = (/* ... webpack bootstrap ... */\n({\n    0: function(...) {\n        var jQuery = require(1);\n        /* ... */\n    },\n    1: function(...) {\n        module.exports = jQuery;\n    },\n    /* ... */\n});</pre>\n<h3 id=\"applications-and-externals\">Applications and externals</h3>\n<p>You can use the <code>externals</code> options for applications too, when you want to import an existing API into the bundle. I.e. you want to use jquery from CDN (separate <code>&lt;script&gt;</code> tag) and still want to <code>require(<span class=\"string\">\"jquery\"</span>)</code> in your bundle. Just specify it as external: <code>{ externals: { jquery: <span class=\"string\">\"jQuery\"</span> } }</code>.</p>\n<h3 id=\"resolving-and-externals\">Resolving and externals</h3>\n<p>Externals processing happens before resolving the request, which means you need to specify the unresolved request. Loaders are not applied to externals. You can (need to) externalize a request with loader: <code>require(<span class=\"string\">\"bundle!jquery\"</span>)</code> <code>{ externals: { <span class=\"string\">\"bundle!jquery\"</span>: <span class=\"string\">\"bundledJQuery\"</span> } }</code></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/library-and-externals.html\" class=\"_attribution-link\">https://webpack.github.io/docs/library-and-externals.html</a>\n  </p>\n</div>\n","testing":"<h1>Testing</h1>\n<p>There are two ways to test web applications:</p>\n<ul>\n<li>In-browsers: You get a more realistic test, but you need some more complex infrastructure and the test usually take longer. You can test DOM access.</li>\n<li>with node.js: You cannot test DOM access, but testing is usually faster.</li>\n</ul>\n<h3 id=\"in-browser-testing\">In-browser testing</h3>\n<h4 id=\"mocha-loader\">mocha-loader</h4>\n<p>The mocha-loader executes your code with the mocha framework. If you run the code it’ll show the results in the web page.</p>\n<p><em>Hint: when using <code>!</code> in the bash command line, you must escape it by prepending a <code>\\</code></em></p>\n<pre data-language=\"javascript\">webpack 'mocha!./test.js' testBundle.js\n# index.html is a HTML page which loads testBundle.js\nopen index.html</pre>\n<h4 id=\"webpack-dev-server\">webpack-dev-server</h4>\n<p>The webpack-dev-server will automatically create a HTML page which loads the script. It also re-executes the tests when files have changed.</p>\n<pre data-language=\"javascript\">webpack-dev-server 'mocha!./test.js' --hot --inline --output-filename test.js\nopen http://localhost:8080/test</pre>\n<p>Hint: Use <code>--hot</code> and it’ll only execute tests which have changed or have changed dependencies.</p>\n<h4 id=\"karma-and-webpack\">karma and webpack</h4>\n<p>You can use webpack with karma. Add <a href=\"https://github.com/webpack/karma-webpack\"><code><span class=\"string\">\"webpack\"</span></code> as preprocessor</a> to your karma config.</p>\n<h3 id=\"node-js-testing\">node.js testing</h3>\n<h4 id=\"commonjs-only\">CommonJs only</h4>\n<p>If you write your web app only in CommonJs and don’t use loaders or other webpack-specific features, you can test it in node.js. Just use a node.js testing framework, i. e. <a href=\"http://visionmedia.github.io/mocha/\">mocha</a>.</p>\n<pre data-language=\"javascript\">mocha test/*</pre>\n<h4 id=\"compile-and-test\">Compile and test</h4>\n<p>If you use webpack-specific features it may not possible to run the code with node.js. webpack allows to configure a target system: i. e. you can compile code so that it can run in node.js (configuration option <code>target: <span class=\"string\">\"node\"</span></code>). Then use a node.js testing framework to run the bundle.</p>\n<pre data-language=\"javascript\">webpack test.js /tmp/testBundle.js --target node\nmocha /tmp/testBundle.js</pre>\n<blockquote><p>Hint: You can use the <code><span class=\"literal\">null</span>-loader</code> for stylesheets instead of the <code>style-loader!css-loader</code>. <code>style-loader</code> doesn’t work in node.js as it requires a DOM.</p></blockquote>\n<p>To make debugging tests easier, you can add source map support using <a href=\"https://github.com/evanw/node-source-map-support\">node-source-map-support</a>:</p>\n<pre data-language=\"javascript\">webpack test.js /tmp/testBundle.js --target node\nmocha --require source-map-support/register /tmp/testBundle.js</pre>\n<p>Make sure to configure the <a href=\"http://webpack.github.io/docs/configuration.html#devtool\"><code>devtool</code></a> option to output the source map.</p>\n<h4 id=\"enhanced-require\">enhanced-require</h4>\n<p>TODO</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/testing.html\" class=\"_attribution-link\">https://webpack.github.io/docs/testing.html</a>\n  </p>\n</div>\n","code-splitting":"<h1>Code Splitting</h1>\n<p>For big web apps it’s not efficient to put all code into a single file, especially if some blocks of code are only required under some circumstances. Webpack has a feature to split your codebase into “chunks” which are loaded on demand. Some other bundlers call them “layers”, “rollups”, or “fragments”. This feature is called “code splitting”.</p>\n<p>It’s an opt-in feature. You can define split points in your code base. Webpack takes care of the dependencies, output files and runtime stuff.</p>\n<p>To clarify a common misunderstanding: Code Splitting is not just about extracting common code into a shared chunk. The more notable feature is that Code Splitting can be used to split code into an <strong>on demand</strong> loaded chunk. This can keep the initial download small and downloads code on demand when requested by the application.</p>\n<h3 id=\"defining-a-split-point\">Defining a split point</h3>\n<p>AMD and CommonJs specify different methods to load code on demand. Both are supported and act as split points:</p>\n<h4 id=\"commonjs-require-ensure\">CommonJs: <code>require.ensure</code>\n</h4>\n<pre data-language=\"javascript\">require.ensure(dependencies, callback)</pre>\n<p>The <code>require.ensure</code> method ensures that every dependency in <code>dependencies</code> can be synchronously required when calling the <code>callback</code>. <code>callback</code> is called with the <code>require</code> function as parameter.</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">require.ensure([\"module-a\", \"module-b\"], function(require) {\n    var a = require(\"module-a\");\n    // ...\n});</pre>\n<p>Note: <code>require.ensure</code> only loads the modules, it doesn’t evaluate them.</p>\n<h4 id=\"amd-require\">AMD: <code>require</code>\n</h4>\n<p>The AMD spec defines an asynchronous <code>require</code> method with this definition:</p>\n<pre data-language=\"javascript\">require(dependencies, callback)</pre>\n<p>When called, all <code>dependencies</code> are loaded and the <code>callback</code> is called with the exports of the loaded <code>dependencies</code>.</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">require([\"module-a\", \"module-b\"], function(a, b) {\n    // ...\n});</pre>\n<p>Note: AMD <code>require</code> loads and evaluate the modules. In webpack modules are evaluated left to right.</p>\n<p>Note: It’s allowed to omit the callback.</p>\n<h4 id=\"es6-modules\">ES6 Modules</h4>\n<p><strong>tldr: Webpack doesn’t support es6 modules, use <code>require.ensure</code> or <code>require</code> directly depending on which module format your transpiler creates.</strong></p>\n<p>Webpack <code><span class=\"number\">1.</span>x.x</code> (coming in <code><span class=\"number\">2.0</span><span class=\"number\">.0</span></code>!) does not natively support or understand ES6 modules. However, you can get around that by using a transpiler, like Babel, to turning the ES6 <code>import</code> syntax into CommonJs or AMD modules. This approach is effective but has one important caveat for dynamic loading.</p>\n<p>The module <em>syntax</em> addition (<code>import x from <span class=\"string\">'foo'</span></code>) is intentionally designed to be <em>statically</em> analyzable, which means that you cannot do dynamic imports.</p>\n<pre data-language=\"javascript\">// INVALID!!!!!!!!!\n['lodash', 'backbone'].forEach(name =&gt; import name )</pre>\n<p>Luckily, there is a JavaScript API “loader” specification being written to handle the dynamic use case: <code>System.load</code> (or <code>System.import</code>). This API will be the native equivalent to the above <code>require</code> variations. However, <strong>most transpilers do not support converting <code>System.load</code> calls to <code>require.ensure</code></strong> so you have to do that directly if you want to make use of dynamic code splitting.</p>\n<pre data-language=\"javascript\">//static imports\nimport _ from 'lodash'\n\n// dynamic imports\nrequire.ensure([], function(require) {\n  let contacts = require('./contacts')\n})</pre>\n<h3 id=\"chunk-content\">Chunk content</h3>\n<p>All dependencies at a split point go into a new chunk. Dependencies are also recursively added.</p>\n<p>If you pass a function expression (or bound function expression) as callback to the split point, webpack automatically puts all dependencies required in this function expression into the chunk too.</p>\n<h3 id=\"chunk-optimization\">Chunk optimization</h3>\n<p>If two chunks contain the same modules, they are merged into one. This can cause chunks to have multiple parents.</p>\n<p>If a module is available in all parents of a chunk, it’s removed from that chunk.</p>\n<p>If a chunk contains all modules of another chunk, this is stored. It fulfills multiple chunks.</p>\n<h3 id=\"chunk-loading\">Chunk loading</h3>\n<p>Depending on the configuration option <code>target</code> a runtime logic for chunk loading is added to the bundle. I. e. for the <code>web</code> target chunks are loaded via jsonp. A chunk is only loaded once and parallel requests are merged into one. The runtime checks for loaded chunks whether they fulfill multiple chunks.</p>\n<h3 id=\"chunk-types\">Chunk types</h3>\n<h4 id=\"entry-chunk\">Entry chunk</h4>\n<p>An entry chunk contains the runtime plus a bunch of modules. If the chunk contains the module <code><span class=\"number\">0</span></code> the runtime executes it. If not, it waits for chunks that contains the module <code><span class=\"number\">0</span></code> and executes it (every time when there is a chunk with a module <code><span class=\"number\">0</span></code>).</p>\n<h4 id=\"normal-chunk\">Normal chunk</h4>\n<p>A normal chunk contains no runtime. It only contains a bunch of modules. The structure depends on the chunk loading algorithm. I. e. for jsonp the modules are wrapped in a jsonp callback function. The chunk also contains a list of chunk id that it fulfills.</p>\n<h4 id=\"initial-chunk\">Initial chunk (non-entry)</h4>\n<p>An initial chunk is a normal chunk. The only difference is that optimization treats it as more important because it counts toward the initial loading time (like entry chunks). That chunk type can occur in combination with the <code>CommonsChunkPlugin</code>.</p>\n<h3 id=\"split-app-and-vendor-code\">Split app and vendor code</h3>\n<p>To split your app into 2 files, say <code>app.js</code> and <code>vendor.js</code>, you can <code>require</code> the vendor files in <code>vendor.js</code>. Then pass this name to the <code>CommonsChunkPlugin</code> as shown below.</p>\n<pre data-language=\"javascript\">var webpack = require(\"webpack\");\n\nmodule.exports = {\n  entry: {\n    app: \"./app.js\",\n    vendor: [\"jquery\", \"underscore\", ...],\n  },\n  output: {\n    filename: \"bundle.js\"\n  },\n  plugins: [\n    new webpack.optimize.CommonsChunkPlugin(/* chunkName= */\"vendor\", /* filename= */\"vendor.bundle.js\")\n  ]\n};</pre>\n<p>This will remove all modules in the <code>vendor</code> chunk from the <code>app</code> chunk. The <code>bundle.js</code> will now contain just your app code, without any of its dependencies. These are in <code>vendor.bundle.js</code>.</p>\n<p>In your HTML page load <code>vendor.bundle.js</code> before <code>bundle.js</code>.</p>\n<pre data-language=\"javascript\">&lt;script src=\"vendor.bundle.js\"&gt;&lt;/script&gt;\n&lt;script src=\"bundle.js\"&gt;&lt;/script&gt;</pre>\n<h3 id=\"multiple-entry-chunks\">Multiple entry chunks</h3>\n<p>It’s possible to <a href=\"configuration\">configure</a> multiple entry points that will result in multiple entry chunks. The entry chunk contains the runtime and there must only be one runtime on a page (there are exceptions).</p>\n<h4 id=\"running-multiple-entry-points\">Running multiple entry points</h4>\n<p>With the <code>CommonsChunkPlugin</code> the runtime is moved to the commons chunk. The entry points are now in initial chunks. While only one initial chunk can be loaded, multiple entry chunks can be loaded. This exposes the possibility to run multiple entry points in a single page.</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">var webpack = require(\"webpack\");\nmodule.exports = {\n    entry: { a: \"./a\", b: \"./b\" },\n    output: { filename: \"[name].js\" },\n    plugins: [ new webpack.optimize.CommonsChunkPlugin(\"init.js\") ]\n}</pre>\n<pre data-language=\"javascript\">&lt;script src=\"init.js\"&gt;&lt;/script&gt;\n&lt;script src=\"a.js\"&gt;&lt;/script&gt;\n&lt;script src=\"b.js\"&gt;&lt;/script&gt;</pre>\n<h3 id=\"commons-chunk\">Commons chunk</h3>\n<p>The <code>CommonsChunkPlugin</code> can move modules that occur in multiple entry chunks to a new entry chunk (the commons chunk). The runtime is moved to the commons chunk too. This means the old entry chunks are initial chunks now. See all options in the <a href=\"list-of-plugins\">list of plugins</a>.</p>\n<h3 id=\"optimization\">Optimization</h3>\n<p>There are optimizing plugins that can merge chunks depending on specific criteria. See <a href=\"list-of-plugins\">list of plugins</a>.</p>\n<ul>\n<li><code>LimitChunkCountPlugin</code></li>\n<li><code>MinChunkSizePlugin</code></li>\n<li><code>AggressiveMergingPlugin</code></li>\n</ul>\n<h3 id=\"named-chunks\">Named chunks</h3>\n<p>The <code>require.ensure</code> function accepts an additional 3rd parameter. This must be a string. If two split point pass the same string they use the same chunk.</p>\n<h3 id=\"require-include\"><code>require.include</code></h3>\n<pre data-language=\"javascript\">require.include(request)</pre>\n<p><code>require.include</code> is a webpack specific function that adds a module to the current chunk, but doesn’t evaluate it (The statement is removed from the bundle).</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">require.ensure([\"./file\"], function(require) {\n  require(\"./file2\");\n});\n\n// is equals to\n\nrequire.ensure([], function(require) {\n  require.include(\"./file\");\n  require(\"./file2\");\n});</pre>\n<p><code>require.include</code> can be useful if a module is in multiple child chunks. A <code>require.include</code> in the parent would include the module and the instances of the modules in the child chunks would disappear.</p>\n<h3 id=\"examples\">Examples</h3>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack/tree/master/examples/code-splitting\">Simple</a></li>\n<li><a href=\"https://github.com/webpack/webpack/tree/master/examples/code-splitting-bundle-loader\">with bundle-loader</a></li>\n<li><a href=\"https://github.com/webpack/webpack/tree/master/examples/code-splitted-require.context\">with context</a></li>\n<li><a href=\"https://github.com/webpack/webpack/tree/master/examples/code-splitted-require.context-amd\">with amd and context</a></li>\n<li><a href=\"https://github.com/webpack/webpack/tree/master/examples/code-splitted-dedupe\">with deduplication</a></li>\n<li><a href=\"https://github.com/webpack/webpack/tree/master/examples/named-chunks\">named-chunks</a></li>\n<li><a href=\"https://github.com/webpack/webpack/tree/master/examples/multiple-entry-points\">multiple entry chunks</a></li>\n<li><a href=\"https://github.com/webpack/webpack/tree/master/examples/multiple-commons-chunks\">multiple commons chunks</a></li>\n</ul>\n<p>For a running demo see the <a href=\"http://webpack.github.io/example-app/\">example-app</a>. Check Network in DevTools.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/code-splitting.html\" class=\"_attribution-link\">https://webpack.github.io/docs/code-splitting.html</a>\n  </p>\n</div>\n","build-performance":"<h1>Build Performance</h1>\n<h2 id=\"incremental-builds\">Incremental builds</h2>\n<p>Make sure you don’t do a full rebuild. webpack has a great caching layer that allows to keep already compiled modules in memory. There are some tools that help to use it:</p>\n<ul>\n<li>\n<a href=\"webpack-dev-server\">webpack-dev-server</a>: Serves all webpack assets from memory. Best performance.</li>\n<li>\n<a href=\"webpack-dev-middleware\">webpack-dev-middleware</a>: The same as middleware for advanced users.</li>\n<li>\n<a href=\"cli\">webpack –watch</a> or <a href=\"node.js-api\"><code>watch: <span class=\"literal\">true</span></code></a>: Caches stuff but write assets to disk. Ok performance.</li>\n</ul>\n<h2 id=\"exclude-modules-from-parsing\">Exclude modules from parsing</h2>\n<p>With <a href=\"http://webpack.github.io/docs/configuration.html#module-noparse\"><code>noParse</code></a> you can exclude big libraries from parsing, but this can break stuff.</p>\n<h2 id=\"hints-from-build-stats\">Hints from build stats</h2>\n<p>There is an <a href=\"http://webpack.github.io/analyse/\">analyse tool</a> which visualise your build and also provides some hint how build size and build performance can be optimized.</p>\n<p>You can generate the required JSON file by running <code>webpack --profile --json &gt; stats.json</code></p>\n<h2 id=\"chunks\">Chunks</h2>\n<p>Generating the source file from internal representation is expensive. Each chunk is cached on it’s own, but only if nothing changes in this chunk. Most chunks only depend on the included modules, but the entry chunk is also considered as dirty if the additional chunk name changes. So by using <code>[hash]</code> or <code>[chunkhash]</code> in filenames the entry chunks need to be regenerated on (nearly) every change.</p>\n<p>By using HMR the entry chunk need to embed the hash of the compilation and is also considered as dirty on every compilation.</p>\n<h2 id=\"sourcemaps\">SourceMaps</h2>\n<p>Perfect SourceMaps are slow.</p>\n<p><code>devtool: <span class=\"string\">\"source-map\"</span></code> cannot cache SourceMaps for modules and need to regenerate complete SourceMap for the chunk. It’s something for production…</p>\n<p><code>devtool: <span class=\"string\">\"eval-source-map\"</span></code> is really as good as <code>devtool: <span class=\"string\">\"source-map\"</span></code>, but can cache SourceMaps for modules. It’s much faster for rebuilds.</p>\n<p><code>devtool: <span class=\"string\">\"eval-cheap-module-source-map\"</span></code> offers SourceMaps that only maps lines (no column mappings) and are much faster.</p>\n<p><code>devtool: <span class=\"string\">\"eval-cheap-source-map\"</span></code> is similar but doesn’t generate SourceMaps for modules (i. e. jsx to js mappings).</p>\n<p>The best performance has <code>devtool: <span class=\"string\">\"eval\"</span></code>, but it only maps to compiled source code per module. In many cases this is good enough. Hint: combine it with <code>output.pathinfo: <span class=\"literal\">true</span></code>.</p>\n<p>The UglifyJsPlugin uses SourceMaps to map errors to source code. And SourceMaps are slow. As you should only use this in production this is fine. If your production build is really slow (or doesn’t finish at all) you can disable it with <code><span class=\"keyword\">new</span> UglifyJsPlugin({ sourceMap: <span class=\"literal\">false</span> })</code>.</p>\n<h2 id=\"resolve-root-vs-resolve-modulesdirectories\">\n<code>resolve.root</code> vs <code>resolve.modulesDirectories</code>\n</h2>\n<p>Only use <a href=\"http://webpack.github.io/docs/configuration.html#resolve-modulesdirectories\"><code>resolve.modulesDirectories</code></a> for nested paths, most paths should use <a href=\"http://webpack.github.io/docs/configuration.html#resolve-root\"><code>resolve.root</code></a>. This can give <a href=\"https://github.com/webpack/webpack/issues/1574#issuecomment-157520561\">significant performance gains</a>. See also <a href=\"https://github.com/webpack/webpack/issues/472#issuecomment-55706013\">this discussion</a>.</p>\n<h2 id=\"optimization-plugins\">Optimization plugins</h2>\n<p>Only use optimization plugins in production builds.</p>\n<h2 id=\"prefetching-modules\">Prefetching modules</h2>\n<p><a href=\"http://webpack.github.io/docs/list-of-plugins.html#prefetchplugin\"><code>prefetch</code></a></p>\n<h2 id=\"dynamic-linked-library\">Dynamic linked library</h2>\n<p>If you have a bunch of rarly changing modules (i. e. vendor libs) and chunking doesn’t give you enough performance (CommonsChunkPlugin), there are two plugins to create a bundle of these modules in a <strong>separate</strong> build step while still referencing these modules from the app bundle.</p>\n<p>To create the DLL bundle beforehand you need to use the <code>DllPlugin</code>. Here is an <a href=\"https://github.com/webpack/webpack/tree/master/examples/dll\">example</a>. This emits a public bundle and a private manifest file.</p>\n<p>The use the DLL bundle from the app bundle you need to use the <code>DllReferencePlugin</code>. Here is an <a href=\"https://github.com/webpack/webpack/tree/master/examples/dll-user\">example</a>. This stops following the dependency graph of your app when a module from the DLL bundle is found.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/build-performance.html\" class=\"_attribution-link\">https://webpack.github.io/docs/build-performance.html</a>\n  </p>\n</div>\n","stylesheets":"<h1>Stylesheets</h1>\n<h2 id=\"embedded-stylesheets\">embedded stylesheets</h2>\n<p>Through using the <code>style-loader</code> and the <code>css-loader</code> it’s possible to embed stylesheets into a webpack javascript bundle. This way you can modularize your stylesheets with your other modules. This way stylesheets are as easy as <code>require(<span class=\"string\">\"./stylesheet.css\"</span>)</code>.</p>\n<h3 id=\"installation\">installation</h3>\n<p>Install the loaders from npm.</p>\n<pre data-language=\"javascript\">npm install style-loader css-loader --save-dev</pre>\n<h3 id=\"configuration\">configuration</h3>\n<p>Here is a configuration example that enables <code>require()</code> css:</p>\n<pre data-language=\"javascript\">{\n    // ...\n    module: {\n        loaders: [\n            { test: /\\.css$/, loader: \"style-loader!css-loader\" }\n        ]\n    }\n}</pre>\n<blockquote><p>For compile-to-css languages see the according loaders for configuration examples. You can pipe them…</p></blockquote>\n<p>Keep in mind that it’s difficult to manage the execution order of modules, so design your stylesheets so that order doesn’t matter. (But you can rely on the order in one css file.)</p>\n<h3 id=\"using-css\">using css</h3>\n<pre data-language=\"javascript\">// in your modules just require the stylesheet\n// This has the side effect that a &lt;style&gt;-tag is added to the DOM.\nrequire(\"./stylesheet.css\");</pre>\n<h2 id=\"separate-css-bundle\">separate css bundle</h2>\n<p>In combination with the <a href=\"https://github.com/webpack/extract-text-webpack-plugin\">extract-text-webpack-plugin</a> it’s possible to generate a native css output file.</p>\n<p>With Code Splitting we can use two different modes:</p>\n<ul>\n<li>Create one css file per initial chunk (see <a href=\"code-splitting\">Code Splitting</a>) and embed stylesheets into additional chunks. (recommended)</li>\n<li>Create one css file per initial chunk which also contains styles from additional chunks.</li>\n</ul>\n<p>The first mode is recommended because it’s optimal in regards to initial page loading time. In small apps with multiple entry points the second mode could be better because of HTTP request overheads and caching.</p>\n<h3 id=\"plugin-installation\">plugin installation</h3>\n<p>Install the plugin from npm.</p>\n<pre data-language=\"javascript\">npm install extract-text-webpack-plugin --save</pre>\n<h3 id=\"general\">general</h3>\n<p>To use the plugin you need to flag modules that should be moved into the css file with a special loader. After the compilation in the optimizing phase of webpack the plugin checks which modules are relevant for extraction (in the first mode only these that are in an initial chunk). These modules are compiled for node.js usage and executed to get the content. Additionally the modules are recompiled in the original bundle and replaced with an empty module.</p>\n<p>A new asset is created for the extracted modules.</p>\n<h3 id=\"styles-from-initial-chunks-into-separate-css-output-file\">styles from initial chunks into separate css output file</h3>\n<p>This examples shows multiple entry points, but also works with a single entry point.</p>\n<pre data-language=\"javascript\">// webpack.config.js\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nmodule.exports = {\n    // The standard entry point and output config\n    entry: {\n        posts: \"./posts\",\n        post: \"./post\",\n        about: \"./about\"\n    },\n    output: {\n        filename: \"[name].js\",\n        chunkFilename: \"[id].js\"\n    },\n    module: {\n        loaders: [\n            // Extract css files\n            {\n                test: /\\.css$/,\n                loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\")\n            },\n            // Optionally extract less files\n            // or any other compile-to-css language\n            {\n                test: /\\.less$/,\n                loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader!less-loader\")\n            }\n            // You could also use other loaders the same way. I. e. the autoprefixer-loader\n        ]\n    },\n    // Use the plugin to specify the resulting filename (and add needed behavior to the compiler)\n    plugins: [\n        new ExtractTextPlugin(\"[name].css\")\n    ]\n}</pre>\n<p>You’ll get these output files:</p>\n<ul>\n<li>\n<code>posts.js</code> <code>posts.css</code>\n</li>\n<li>\n<code>post.js</code> <code>post.css</code>\n</li>\n<li>\n<code>about.js</code> <code>about.css</code>\n</li>\n<li>\n<code><span class=\"number\">1.</span>js</code> <code><span class=\"number\">2.</span>js</code> (contain embedded styles)</li>\n</ul>\n<h3 id=\"all-styles-in-separate-css-output-file\">all styles in separate css output file</h3>\n<p>To use the second mode you just need to set the option <code>allChunks</code> to <code><span class=\"literal\">true</span></code>:</p>\n<pre data-language=\"javascript\">// ...\nmodule.exports = {\n    // ...\n    plugins: [\n        new ExtractTextPlugin(\"style.css\", {\n            allChunks: true\n        })\n    ]\n}</pre>\n<p>You’ll get these output files:</p>\n<ul>\n<li>\n<code>posts.js</code> <code>posts.css</code>\n</li>\n<li>\n<code>post.js</code> <code>post.css</code>\n</li>\n<li>\n<code>about.js</code> <code>about.css</code>\n</li>\n<li>\n<code><span class=\"number\">1.</span>js</code> <code><span class=\"number\">2.</span>js</code> (don’t contain embedded styles)</li>\n</ul>\n<h3 id=\"styles-in-commons-chunk\">styles in commons chunk</h3>\n<p>You can use a separate css file in combination with the CommonsChunkPlugin. In this case a css file for the commons chunk is emitted too.</p>\n<pre data-language=\"javascript\">// ...\nmodule.exports = {\n    // ...\n    plugins: [\n        new webpack.optimize.CommonsChunkPlugin(\"commons\", \"commons.js\"),\n        new ExtractTextPlugin(\"[name].css\")\n    ]\n}</pre>\n<p>You’ll get these output files:</p>\n<ul>\n<li>\n<code>commons.js</code> <code>commons.css</code>\n</li>\n<li>\n<code>posts.js</code> <code>posts.css</code>\n</li>\n<li>\n<code>post.js</code> <code>post.css</code>\n</li>\n<li>\n<code>about.js</code> <code>about.css</code>\n</li>\n<li>\n<code><span class=\"number\">1.</span>js</code> <code><span class=\"number\">2.</span>js</code> (contain embedded styles)</li>\n</ul>\n<p>or with <code>allChunks: <span class=\"literal\">true</span></code></p>\n<ul><li>\n<code><span class=\"number\">1.</span>js</code> <code><span class=\"number\">2.</span>js</code> (don’t contain embedded styles)</li></ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/stylesheets.html\" class=\"_attribution-link\">https://webpack.github.io/docs/stylesheets.html</a>\n  </p>\n</div>\n","optimization":"<h1>Optimization</h1>\n<h3 id=\"minimize\">Minimize</h3>\n<p>To minimize your scripts (and your css, if you use the css-loader) webpack supports a simple option:</p>\n<p><code>--optimize-minimize</code> resp. <a href=\"http://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin\"><code><span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin()</code></a></p>\n<p>That’s a simple but effective way to optimize your web app.</p>\n<p>As you already know (if you’ve read the remaining docs) webpack gives your modules and chunks ids to identify them. Webpack can vary the distribution of the ids to get the smallest id length for often used ids with a simple option:</p>\n<p><code>--optimize-occurence-order</code> resp. <code><span class=\"keyword\">new</span> webpack.optimize.OccurenceOrderPlugin()</code></p>\n<p>The entry chunks have higher priority for file size.</p>\n<h3 id=\"deduplication\">Deduplication</h3>\n<p>If you use some libraries with cool dependency trees, it may occur that some files are identical. Webpack can find these files and deduplicate them. This prevents the inclusion of duplicate code into your bundle and instead applies a copy of the function at runtime. It doesn’t affect semantics. You can enable it with:</p>\n<p><code>--optimize-dedupe</code> resp. <code><span class=\"keyword\">new</span> webpack.optimize.DedupePlugin()</code></p>\n<p>This feature adds some overhead to the entry chunk.</p>\n<h3 id=\"chunks\">Chunks</h3>\n<p>While writing your code, you may have already added many code split points to load stuff on demand. After compiling you might notice that there are too many chunks that are too small - creating larger HTTP overhead. Luckily, Webpack can post-process your chunks by merging them. You can provide two options:</p>\n<ul>\n<li>Limit the maximum chunk count with <code>--optimize-max-chunks <span class=\"number\">15</span></code> <code><span class=\"keyword\">new</span> webpack.optimize.LimitChunkCountPlugin({maxChunks: <span class=\"number\">15</span>})</code>\n</li>\n<li>Limit the minimum chunk size with <code>--optimize-min-chunk-size <span class=\"number\">10000</span></code> <code><span class=\"keyword\">new</span> webpack.optimize.MinChunkSizePlugin({minChunkSize: <span class=\"number\">10000</span>})</code>\n</li>\n</ul>\n<p>Webpack will take care of it by merging chunks (it will prefer merging chunk that have duplicate modules). Nothing will be merged into the entry chunk, so as not to impact initial page loading time.</p>\n<h3 id=\"single-page-app\">Single-Page-App</h3>\n<p>A Single-Page-App is the type of web app webpack is designed and optimized for.</p>\n<p>You may have split the app into multiple chunks, which are loaded at your router. The entry chunk only contains the router and some libraries, but no content. This works great while your user is navigating through your app, but for initial page load you need 2 round trips: One for the router and one for the current content page.</p>\n<p>If you use the HTML5 History API to reflect the current content page in the URL, your server can know which content page will be requested by the client code. To save round trips the server can include the content chunk in the response: This is possible by just adding it as script tag. The browser will load both chunks parallel.</p>\n<pre data-language=\"javascript\">&lt;script src=\"entry-chunk.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n&lt;script src=\"3.chunk.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;</pre>\n<p>You can extract the chunk filename from the stats. (<a href=\"https://www.npmjs.com/package/stats-webpack-plugin\">stats-webpack-plugin</a> could be used for exports the build stats)</p>\n<h3 id=\"multi-page-app\">Multi-Page-App</h3>\n<p>When you compile a (real) multi page app, you want to share common code between the pages. In fact this is really easy with webpack: Just compile with multiple entry points:</p>\n<p><code>webpack p1=.<span class=\"regexp\">/page1 p2=./</span>page2 p3=.<span class=\"regexp\">/page3 [name].entry-chunk.js</span></code></p>\n<pre data-language=\"javascript\">module.exports = {\n    entry: {\n        p1: \"./page1\",\n        p2: \"./page2\",\n        p3: \"./page3\"\n    },\n    output: {\n        filename: \"[name].entry.chunk.js\"\n    }\n}</pre>\n<p>This will generate multiple entry chunks: <code>p1.entry.chunk.js</code>, <code>p2.entry.chunk.js</code> and <code>p3.entry.chunk.js</code>. But additional chunks can be shared by them.</p>\n<p>If your entry chunks have some modules in common, there is a cool plugin for this. The <code>CommonsChunkPlugin</code> identifies common modules and put them into a commons chunk. You need to add two script tags to your page, one for the commons chunk and one for the entry chunk.</p>\n<pre data-language=\"javascript\">var CommonsChunkPlugin = require(\"webpack/lib/optimize/CommonsChunkPlugin\");\nmodule.exports = {\n    entry: {\n        p1: \"./page1\",\n        p2: \"./page2\",\n        p3: \"./page3\"\n    },\n    output: {\n        filename: \"[name].entry.chunk.js\"\n    },\n    plugins: [\n        new CommonsChunkPlugin(\"commons.chunk.js\")\n    ]\n}</pre>\n<p>This will generate multiple entry chunks: <code>p1.entry.chunk.js</code>, <code>p2.entry.chunk.js</code> and <code>p3.entry.chunk.js</code>, plus one <code>commons.chunk.js</code>. First load <code>commons.chunk.js</code> and then one of the <code>xx.entry.chunk.js</code>.</p>\n<p>You can generate multiple commons chunks, by selecting the entry chunks. And you can nest commons chunks.</p>\n<pre data-language=\"javascript\">var CommonsChunkPlugin = require(\"webpack/lib/optimize/CommonsChunkPlugin\");\nmodule.exports = {\n    entry: {\n        p1: \"./page1\",\n        p2: \"./page2\",\n        p3: \"./page3\",\n        ap1: \"./admin/page1\",\n        ap2: \"./admin/page2\"\n    },\n    output: {\n        filename: \"[name].js\"\n    },\n    plugins: [\n        new CommonsChunkPlugin(\"admin-commons.js\", [\"ap1\", \"ap2\"]),\n        new CommonsChunkPlugin(\"commons.js\", [\"p1\", \"p2\", \"admin-commons.js\"])\n    ]\n};\n// &lt;script&gt;s required:\n// page1.html: commons.js, p1.js\n// page2.html: commons.js, p2.js\n// page3.html: p3.js\n// admin-page1.html: commons.js, admin-commons.js, ap1.js\n// admin-page2.html: commons.js, admin-commons.js, ap2.js</pre>\n<p>Advanced hint: You can run code inside the commons chunk:</p>\n<pre data-language=\"javascript\">var CommonsChunkPlugin = require(\"webpack/lib/optimize/CommonsChunkPlugin\");\nmodule.exports = {\n    entry: {\n        p1: \"./page1\",\n        p2: \"./page2\",\n        commons: \"./entry-for-the-commons-chunk\"\n    },\n    plugins: [\n        new CommonsChunkPlugin(\"commons\", \"commons.js\")\n    ]\n};</pre>\n<p>See also <a href=\"https://github.com/webpack/webpack/tree/master/examples/multiple-entry-points\">multiple-entry-points example</a> and <a href=\"https://github.com/webpack/webpack/tree/master/examples/multiple-commons-chunks\">advanced multiple-commons-chunks example</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/optimization.html\" class=\"_attribution-link\">https://webpack.github.io/docs/optimization.html</a>\n  </p>\n</div>\n","how-to-write-a-plugin":"<h1>How To Write A Plugin</h1>\n<p>Plugins expose the full potential of the Webpack engine to third-party developers. Using staged build callbacks, developers can introduce their own behaviors into the Webpack build process. Building plugins is a bit more advanced than building loaders, because you’ll need to understand some of the Webpack low-level internals to hook into them. Be prepared to read some source code!</p>\n<h3 id=\"compiler-and-compilation\">Compiler and Compilation</h3>\n<p>Among the two most important resources while developing plugins are the <code>compiler</code> and <code>compilation</code> objects. Understanding their roles is an important first step in extending the Webpack engine.</p>\n<ul>\n<li><p>The <code>compiler</code> object represents the fully configured Webpack environment. This object is built once upon starting Webpack, and is configured with all operational settings including options, loaders, and plugins. When applying a plugin to the Webpack environment, the plugin will receive a reference to this compiler. Use the compiler to access the main Webpack environment.</p></li>\n<li><p>A <code>compilation</code> object represents a single build of versioned assets. While running Webpack development middleware, a new compilation will be created each time a file change is detected, thus generating a new set of compiled assets. A compilation surfaces information about the present state of module resources, compiled assets, changed files, and watched dependencies. The compilation also provides many callback points at which a plugin may choose to perform custom actions.</p></li>\n</ul>\n<p>These two components are an integral part of any Webpack plugin (especially a <code>compilation</code>), so developers will benefit by familiarizing themselves with these source files:</p>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack/blob/master/lib/Compiler.js\">Compiler Source</a></li>\n<li><a href=\"https://github.com/webpack/webpack/blob/master/lib/Compilation.js\">Compilation Source</a></li>\n</ul>\n<h3 id=\"basic-plugin-architecture\">Basic plugin architecture</h3>\n<p>Plugins are instanceable objects with an <code>apply</code> method on their prototype. This <code>apply</code> method is called once by the Webpack compiler while installing the plugin. The <code>apply</code> method is given a reference to the underlying Webpack compiler, which grants access to compiler callbacks. A simple plugin is structured as follows:</p>\n<pre data-language=\"javascript\">function HelloWorldPlugin(options) {\n  // Setup the plugin instance with options...\n}\n\nHelloWorldPlugin.prototype.apply = function(compiler) {\n  compiler.plugin('done', function() {\n    console.log('Hello World!'); \n  });\n};\n\nmodule.exports = HelloWorldPlugin;</pre>\n<p>Then to install the plugin, just include an instance in your Webpack config <code>plugins</code> array:</p>\n<pre data-language=\"javascript\">var HelloWorldPlugin = require('hello-world');\n\nvar webpackConfig = {\n  // ... config settings here ...\n  plugins: [\n    new HelloWorldPlugin({options: true})\n  ]\n};</pre>\n<h3 id=\"accessing-the-compilation\">Accessing the compilation</h3>\n<p>Using the compiler object, you may bind callbacks that provide a reference to each new compilation. These compilations provide callbacks for hooking into numerous steps within the build process.</p>\n<pre data-language=\"javascript\">function HelloCompilationPlugin(options) {}\n\nHelloCompilationPlugin.prototype.apply = function(compiler) {\n\n  // Setup callback for accessing a compilation:\n  compiler.plugin(\"compilation\", function(compilation) {\n\n    // Now setup callbacks for accessing compilation steps:\n    compilation.plugin(\"optimize\", function() {\n      console.log(\"Assets are being optimized.\");\n    });\n  });\n});\n\nmodule.exports = HelloCompilationPlugin;</pre>\n<p>For more information on what callbacks are available on the <code>compiler</code>, <code>compilation</code>, and other important objects, see the <a href=\"plugins\">plugins API</a> doc.</p>\n<h3 id=\"async-compilation-plugins\">Async compilation plugins</h3>\n<p>Some compilation plugin steps are asynchronous, and pass a callback function that <em>must</em> be invoked when your plugin is finished running.</p>\n<pre data-language=\"javascript\">function HelloAsyncPlugin(options) {}\n\nHelloAsyncPlugin.prototype.apply = function(compiler) {\n  compiler.plugin(\"emit\", function(compilation, callback) {\n\n    // Do something async...\n    setTimeout(function() {\n      console.log(\"Done with async work...\");\n      callback();\n    }, 1000);\n\n  });\n});\n\nmodule.exports = HelloAsyncPlugin;</pre>\n<h3 id=\"a-simple-example\">A simple example</h3>\n<p>Once we can latch onto the Webpack compiler and each individual compilations, the possibilities become endless for what we can do with the engine itself. We can reformat existing files, create derivative files, or fabricate entirely new assets.</p>\n<p>Let’s write a simple example plugin that generates a new build file called <code>filelist.md</code>; the contents of which will list all of the asset files in our build. This plugin might look something like this:</p>\n<pre data-language=\"javascript\">function FileListPlugin(options) {}\n\nFileListPlugin.prototype.apply = function(compiler) {\n  compiler.plugin('emit', function(compilation, callback) {\n    // Create a header string for the generated file:\n    var filelist = 'In this build:\\n\\n';\n\n    // Loop through all compiled assets,\n    // adding a new line item for each filename.\n    for (var filename in compilation.assets) {\n      filelist += ('- '+ filename +'\\n');\n    }\n\n    // Insert this list into the Webpack build as a new file asset:\n    compilation.assets['filelist.md'] = {\n      source: function() {\n        return filelist;\n      },\n      size: function() {\n        return filelist.length;\n      }\n    };\n\n    callback();\n  });\n};\n\nmodule.exports = FileListPlugin;</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/how-to-write-a-plugin.html\" class=\"_attribution-link\">https://webpack.github.io/docs/how-to-write-a-plugin.html</a>\n  </p>\n</div>\n","shimming-modules":"<h1>Shimming Modules</h1>\n<p>In some cases webpack cannot parse some file, because it has a unsupported module format or isn’t even in a module format. Therefore you have many options to convert the file into a module.</p>\n<h2 id=\"using-loaders\"><a href=\"using-loaders\">Using loaders</a></h2>\n<p>On this page all examples with loaders are inlined into <code>require</code> calls. This is just for demonstration. You may want to configure them in your webpack config instead. Read <a href=\"using-loaders\">Using loaders</a> for more details how to do this.</p>\n<h2 id=\"importing\">Importing</h2>\n<p>Useful when a file has dependencies that are not imported via <code>require()</code>.</p>\n<h3 id=\"imports-loader\"><a href=\"https://github.com/webpack/imports-loader\"><code>imports-loader</code></a></h3>\n<p>This loader allows you to put some modules or arbitrary JavaScript onto a local variable of the file.</p>\n<p>Examples:</p>\n<h5 id=\"file-js-expect-a-global-variable-and-you-have-a-module-jquery-that-should-be-used\">\n<code>file.js</code> expect a global variable <code>$</code> and you have a module <code>jquery</code> that should be used.</h5>\n<p><code>require(<span class=\"string\">\"imports?$=jquery!./file.js\"</span>)</code></p>\n<h5 id=\"file-js-expect-its-configuration-on-a-global-variable-xconfig-and-you-want-it-to-be-value-123\">\n<code>file.js</code> expect its configuration on a global variable <code>xConfig</code> and you want it to be <code>{value:<span class=\"number\">123</span>}</code>.</h5>\n<p><code>require(<span class=\"string\">\"imports?xConfig=&gt;{value:123}!./file.js\"</span>)</code></p>\n<h5 id=\"file-js-expect-that-this-is-the-global-context\">\n<code>file.js</code> expect that <code><span class=\"keyword\">this</span></code> is the global context.</h5>\n<p><code>require(<span class=\"string\">\"imports?this=&gt;window!./file.js\"</span>)</code> or <code>require(<span class=\"string\">\"imports?this=&gt;global!./file.js\"</span>)</code></p>\n<h3 id=\"plugin-provideplugin\">\n<a href=\"list-of-plugins\">plugin</a> <code>ProvidePlugin</code>\n</h3>\n<p>This plugin makes a module available as variable in every module. The module is required only if you use the variable.</p>\n<p>Example: Make <code>$</code> and <code>jQuery</code> available in every module without writing <code>require(<span class=\"string\">\"jquery\"</span>)</code>.</p>\n<pre data-language=\"javascript\">new webpack.ProvidePlugin({\n    $: \"jquery\",\n    jQuery: \"jquery\",\n    \"window.jQuery\": \"jquery\"\n})</pre>\n<h2 id=\"exporting\">Exporting</h2>\n<p>The file doesn’t export its value.</p>\n<h3 id=\"exports-loader\"><a href=\"https://github.com/webpack/exports-loader\"><code>exports-loader</code></a></h3>\n<p>This loader exports variables from inside the file.</p>\n<p>Examples:</p>\n<h5 id=\"the-file-sets-a-variable-in-the-global-context-with-var-xmodule\">The file sets a variable in the global context with <code><span class=\"keyword\">var</span> XModule = ...</code>.</h5>\n<p><code><span class=\"keyword\">var</span> XModule = require(<span class=\"string\">\"exports?XModule!./file.js\"</span>)</code></p>\n<h5 id=\"the-file-sets-multiple-variables-in-the-global-context-with-var-xparser-minimizer\">The file sets multiple variables in the global context with <code><span class=\"keyword\">var</span> XParser, Minimizer</code>.</h5>\n<p><code><span class=\"keyword\">var</span> XModule = require(<span class=\"string\">\"exports?Parser=XParser&amp;Minimizer!./file.js\"</span>); XModule.Parser; XModule.Minimizer</code></p>\n<h5 id=\"the-file-sets-a-global-variable-with-xmodule\">The file sets a global variable with <code>XModule = ...</code>.</h5>\n<p><code>require(<span class=\"string\">\"imports?XModule=&gt;undefined!exports?XModule!./file.js\"</span>)</code> (import to not leak to the global context)</p>\n<h5 id=\"the-file-sets-a-property-on-window-window-xmodule\">The file sets a property on <code>window</code> <code>window.XModule = ...</code>.</h5>\n<p><code>require(<span class=\"string\">\"imports?window=&gt;{}!exports?window.XModule!./file.js</span></code></p>\n<h2 id=\"fixing-broken-module-styles\">Fixing broken module styles</h2>\n<p>Some files use a module style wrong. You may want to fix this by teaching webpack to not use this style.</p>\n<h3 id=\"disable-some-module-styles\">Disable some module styles</h3>\n<p>Examples:</p>\n<h5 id=\"broken-amd\">Broken AMD</h5>\n<p><code>require(<span class=\"string\">\"imports?define=&gt;false!./file.js\"</span>)</code></p>\n<h5 id=\"broken-commonjs\">Broken CommonJs</h5>\n<p><code>require(<span class=\"string\">\"imports?require=&gt;false!./file.js\"</span>)</code></p>\n<h3 id=\"configuration-option-module-noparse\">\n<a href=\"configuration\">configuration</a> option <code>module.noParse</code>\n</h3>\n<p>This disables parsing by webpack. Therefore you cannot use dependencies. This may be useful for prepackaged libraries.</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">{\n    module: {\n        noParse: [\n            /XModule[\\\\\\/]file\\.js$/,\n            path.join(__dirname, \"web_modules\", \"XModule2\")\n        ]\n    }\n}</pre>\n<blockquote><p>Note: <code>exports</code> and <code>module</code> are still available and usable. You may want to undefine them with the <code>imports-loader</code>.</p></blockquote>\n<h3 id=\"script-loader\"><a href=\"https://github.com/webpack/script-loader\"><code>script-loader</code></a></h3>\n<p>This loader evaluates code in the global context, just like you would add the code into a script tag. In this mode every normal library should work. <code>require</code>, <code>module</code>, etc. are undefined.</p>\n<blockquote><p>Note: The file is added as string to the bundle. It is not minimized by webpack, so use a minimized version. There is also no dev tool support for libraries added by this loader.</p></blockquote>\n<h2 id=\"exposing\">Exposing</h2>\n<p>There are cases where you want a module to export itself to the global context.</p>\n<p>Don’t do this unless you really need this. (Better use the ProvidePlugin)</p>\n<h3 id=\"expose-loader\"><a href=\"https://github.com/webpack/expose-loader\"><code>expose-loader</code></a></h3>\n<p>This loader exposes the exports to a module to the global context.</p>\n<p>Example:</p>\n<h5 id=\"expose-file-js-as-xmodule-to-the-global-context\">Expose <code>file.js</code> as <code>XModule</code> to the global context</h5>\n<p><code>require(<span class=\"string\">\"expose?XModule!./file.js\"</span>)</code></p>\n<h2 id=\"order-of-loaders\">Order of loaders</h2>\n<p>In rare cases when you have to apply more than one technique, you need to use the correct order of loaders:</p>\n<p>inlined: <code>expose!imports!exports</code>, configuration: expose before imports before exports.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/shimming-modules.html\" class=\"_attribution-link\">https://webpack.github.io/docs/shimming-modules.html</a>\n  </p>\n</div>\n","usage-with-grunt":"<h1>Usage With Grunt</h1>\n<p>There is a grunt plugin for using webpack and the <a href=\"webpack-dev-server\">webpack-dev-server</a>: <a href=\"https://github.com/webpack/grunt-webpack\">grunt-webpack</a>.</p>\n<p>It’s pretty simple to use:</p>\n<pre data-language=\"javascript\">module.exports = function(grunt) {\n    grunt.loadNpmTasks(\"grunt-webpack\");\n    grunt.initConfig({\n        webpack: {\n            options: {\n                // configuration for all builds\n            },\n            build: {\n                // configuration for this build\n            }\n        },\n        \"webpack-dev-server\": {\n            options: {\n                webpack: {\n                    // configuration for all builds\n                },\n                // server and middleware options for all builds\n            },\n            start: {\n                webpack: {\n                    // configuration for this build\n                },\n                // server and middleware options for this build\n            }\n        }\n    });\n};</pre>\n<h3 id=\"development\">Development</h3>\n<p>The best option for development is the <a href=\"webpack-dev-server\">webpack-dev-server</a>, but it requires spawning a server. If this is not possible or too complex the normal build - watch cycle is possible too.</p>\n<h3 id=\"example\">Example</h3>\n<p>Take a look at an example Gruntfile. It covers three modes:</p>\n<ul>\n<li>webpack-dev-server</li>\n<li>build - watch cycle</li>\n<li>production build</li>\n</ul>\n<p><a href=\"https://github.com/webpack/webpack-with-common-libs/blob/master/Gruntfile.js\">Example Gruntfile</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/usage-with-grunt.html\" class=\"_attribution-link\">https://webpack.github.io/docs/usage-with-grunt.html</a>\n  </p>\n</div>\n","how-to-write-a-loader":"<h1>How To Write A Loader</h1>\n<p>A loader is a node module exporting a <code><span class=\"function\"><span class=\"keyword\">function</span></span></code>.</p>\n<p>This function is called when a resource should be transformed by this loader.</p>\n<p>In the simple case, when only a single loader is applied to the resource, the loader is called with one parameter: the content of the resource file as string.</p>\n<p>The loader can access the <a href=\"loaders\">loader API</a> on the <code><span class=\"keyword\">this</span></code> context in the function.</p>\n<p>A sync loader that only wants to give a one value can simply <code><span class=\"keyword\">return</span></code> it. In every other case the loader can give back any number of values with the <code><span class=\"keyword\">this</span>.callback(err, values...)</code> function. Errors are passed to the <code><span class=\"keyword\">this</span>.callback</code> function or thrown in a sync loader.</p>\n<p>The loader is expected to give back one or two values. The first value is a resulting JavaScript code as string or buffer. The second optional value is a SourceMap as JavaScript object.</p>\n<p>In the complex case, when multiple loaders are chained, only the last loader gets the resource file and only the first loader is expected to give back one or two values (JavaScript and SourceMap). Values that any other loader give back are passed to the previous loader.</p>\n<h3 id=\"examples\">Examples</h3>\n<pre data-language=\"javascript\">// Identity loader\nmodule.exports = function(source) {\n  return source;\n};</pre>\n<pre data-language=\"javascript\">// Identity loader with SourceMap support\nmodule.exports = function(source, map) {\n  this.callback(null, source, map);\n};</pre>\n<h3 id=\"guidelines\">Guidelines</h3>\n<p>(Ordered by priority, first one should get the highest priority)</p>\n<p>Loaders should</p>\n<h4 id=\"do-only-a-single-task\">do only a single task</h4>\n<p>Loaders can be chained. Create loaders for every step, instead of a loader that does everything at once.</p>\n<p>This also means they should not convert to JavaScript if not necessary.</p>\n<p>Example: Render HTML from a template file by applying the query parameters</p>\n<p>I could write a loader that compiles the template from source, execute it and return a module that exports a string containing the HTML code. This is bad.</p>\n<p>Instead I should write loaders for every task in this use case and apply them all (pipeline):</p>\n<ul>\n<li>jade-loader: Convert template to a module that exports a function.</li>\n<li>apply-loader: Takes a function exporting module and returns raw result by applying query parameters.</li>\n<li>html-loader: Takes HTML and exports a string exporting module.</li>\n</ul>\n<h4 id=\"generate-modules-that-are-modular\">generate modules that are modular</h4>\n<p>Loader generated modules should respect the same design principles like normal modules.</p>\n<p>Example: That’s a bad design: (not modular, global state, …)</p>\n<pre data-language=\"javascript\">require(\"any-template-language-loader!./xyz.atl\");\n\nvar html = anyTemplateLanguage.render(\"xyz\");</pre>\n<h4 id=\"flag-itself-cacheable-if-possible\">flag itself cacheable if possible</h4>\n<p>Most loaders are cacheable, so they should flag itself as cacheable.</p>\n<p>Just call <code>cacheable</code> in the loader.</p>\n<pre data-language=\"javascript\">// Cacheable identity loader\nmodule.exports = function(source) {\n    this.cacheable();\n    return source;\n};</pre>\n<h4 id=\"not-keep-state-between-runs-and-modules\">not keep state between runs and modules</h4>\n<p>A loader should be independent of other modules compiled (expect of these issued by the loader).</p>\n<p>A loader should be independent of previous compilations of the same module.</p>\n<h4 id=\"mark-dependencies\">mark dependencies</h4>\n<p>If a loader uses external resources (i. e. by reading from filesystem), they <strong>must</strong> tell about that. This information is used to invalidate cacheable loaders and recompile in watch mode.</p>\n<pre data-language=\"javascript\">// Loader adding a header\nvar path = require(\"path\");\nmodule.exports = function(source) {\n    this.cacheable();\n    var callback = this.async();\n    var headerPath = path.resolve(\"header.js\");\n    this.addDependency(headerPath);\n    fs.readFile(headerPath, \"utf-8\", function(err, header) {\n        if(err) return callback(err);\n        callback(null, header + \"\\n\" + source);\n    });\n};</pre>\n<h4 id=\"resolve-dependencies\">resolve dependencies</h4>\n<p>In many languages there is some schema to specify dependencies. i. e. in css there is <code>@import</code> and <code>url(...)</code>. These dependencies should be resolved by the module system.</p>\n<p>There are two options to do this:</p>\n<ul>\n<li>Transform them to <code>require</code>s.</li>\n<li>Use the <code><span class=\"keyword\">this</span>.resolve</code> function to resolve the path</li>\n</ul>\n<p>Example 1 css-loader: The css-loader transform dependencies to <code>require</code>s, by replacing <code>@import</code>s with a require to the other stylesheet (processed with the css-loader too) and <code>url(...)</code> with a <code>require</code> to the referenced file.</p>\n<p>Example 2 less-loader: The less-loader cannot transform <code>@import</code>s to <code>require</code>s, because all less files need to be compiled in one pass to track variables and mixins. Therefore the less-loader extends the less compiler with a custom path resolving logic. This custom logic uses <code><span class=\"keyword\">this</span>.resolve</code> to resolve the file with the configuration of the module system (aliasing, custom module directories, etc.).</p>\n<p>If the language only accept relative urls (like css: <code>url(file)</code> always means <code>.<span class=\"regexp\">/file</span></code>), there is the <code>~</code>-convection to specify references to modules:</p>\n<pre data-language=\"javascript\">url(file) -&gt; require(\"./file\")\nurl(~module) -&gt; require(\"module\")</pre>\n<h4 id=\"extract-common-code\">extract common code</h4>\n<p>don’t generate much code that is common in every module processed by that loader. Create a (runtime) file in the loader and generate a <code>require</code> to that common code.</p>\n<h4 id=\"should-not-embed-absolute-paths\">should not embed absolute paths</h4>\n<p>don’t put absolute paths in to the module code. They break hashing when the root for the project is moved. There is a method <a href=\"https://github.com/webpack/loader-utils#stringifyrequest\"><code>stringifyRequest</code> in loader-utils</a> which converts an absolute path to an relative one.</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">var loaderUtils = require(\"loader-utils\");\nreturn \"var runtime = require(\" +\n  loaderUtils.stringifyRequest(this, \"!\" + require.resolve(\"module/runtime\")) +\n  \");\";</pre>\n<h4 id=\"use-a-library-as-peerdependencies-when-they-wrap-it\">use a library as <code>peerDependencies</code> when they wrap it</h4>\n<p>using a peerDependency allows the application developer to specify the exact version in <code>package.json</code> if desired. The dependency should be relatively open to allow updating the library without needing to publish a new loader version.</p>\n<pre data-language=\"javascript\">\"peerDependencies\": {\n    \"library\": \"^1.3.5\"\n}</pre>\n<h4 id=\"programmable-objects-as-query-option\">programmable objects as <code>query</code>-option</h4>\n<p>there are situations where your loader requires programmable objects with functions which cannot stringified as <code>query</code>-string. The less-loader, for example, provides the possibility to specify <a href=\"https://github.com/webpack/less-loader#less-plugins\">LESS-plugins</a>. In these cases, a loader is allowed to extend webpack’s <code>options</code>-object to retrieve that specific option. In order to avoid name collisions, however, it is important that the option is namespaced under the loader’s camelCased npm-name.</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">// webpack.config.js\nmodule.exports = {\n  ...\n  lessLoader: {\n    lessPlugins: [\n      new LessPluginCleanCSS({advanced: true})\n    ]\n  }\n};</pre>\n<p>The loader should also allow to specify the config-key (e.g. <code>lessLoader</code>) via <code>query</code>. See <a href=\"https://github.com/webpack/less-loader/pull/40\">discussion</a> and <a href=\"https://github.com/webpack/less-loader/blob/39f742b4624fceae6d9cf266e9554d07a32a9c14/index.js#L49-51\">example implementation</a>.</p>\n<h4 id=\"be-added-to-the-list-of-loaders\">be added to the <a href=\"list-of-loaders\">list of loaders</a>\n</h4>\n<h3 id=\"read-more\">Read more</h3>\n<p>Read more about <a href=\"loaders\">loaders</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/how-to-write-a-loader.html\" class=\"_attribution-link\">https://webpack.github.io/docs/how-to-write-a-loader.html</a>\n  </p>\n</div>\n","comparison":"<h1>Comparison</h1>\n<table class=\"table table-bordered table-striped table-hover\">\n<thead><tr>\n<th>Feature</th>\n<th>webpack/webpack</th>\n<th>jrburke/requirejs</th>\n<th>substack/node-browserify</th>\n<th>jspm/jspm-cli</th>\n<th>rollup/rollup</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>CommonJs <code>require</code>\n</td>\n<td><strong>yes</strong></td>\n<td>only wrapping in <code>define</code>\n</td>\n<td><strong>yes</strong></td>\n<td>yes</td>\n<td><a href=\"https://github.com/rollup/rollup-plugin-commonjs\">commonjs-plugin</a></td>\n</tr>\n<tr>\n<td>CommonJs <code>require.resolve</code>\n</td>\n<td><strong>yes</strong></td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>CommonJs <code>exports</code>\n</td>\n<td><strong>yes</strong></td>\n<td>only wrapping in <code>define</code>\n</td>\n<td><strong>yes</strong></td>\n<td>yes</td>\n<td><a href=\"https://github.com/rollup/rollup-plugin-commonjs\">commonjs-plugin</a></td>\n</tr>\n<tr>\n<td>AMD <code>define</code>\n</td>\n<td><strong>yes</strong></td>\n<td><strong>yes</strong></td>\n<td><a href=\"https://github.com/jaredhanson/deamdify\">deamdify</a></td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td>AMD <code>require</code>\n</td>\n<td><strong>yes</strong></td>\n<td><strong>yes</strong></td>\n<td>no</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td>AMD <code>require</code> loads on demand</td>\n<td><strong>yes</strong></td>\n<td>with manual configuration</td>\n<td>no</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td>ES2015 <code>import</code>/<code>export</code>\n</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n<td><strong>yes</strong></td>\n<td><strong>yes</strong></td>\n</tr>\n<tr>\n<td>Generate a single bundle</td>\n<td><strong>yes</strong></td>\n<td>yes♦</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>Load each file separate</td>\n<td>no</td>\n<td>yes</td>\n<td>no</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Multiple bundles</td>\n<td><strong>yes</strong></td>\n<td>with manual configuration</td>\n<td>with manual configuration</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Additional chunks are loaded on demand</td>\n<td><strong>yes</strong></td>\n<td><strong>yes</strong></td>\n<td>no</td>\n<td><a href=\"https://github.com/systemjs/systemjs/blob/master/docs/system-api.md#systemimportmodulename--normalizedparentname---promisemodule\">System.import</a></td>\n<td>no</td>\n</tr>\n<tr>\n<td>Multi pages build with common bundle</td>\n<td>with manual configuration</td>\n<td><strong>yes</strong></td>\n<td>with manual configuration</td>\n<td>with bundle arithmetic</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Concat in require <code>require(<span class=\"string\">\"./fi\"</span> + <span class=\"string\">\"le\"</span>)</code>\n</td>\n<td><strong>yes</strong></td>\n<td>no♦</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Indirect require <code><span class=\"keyword\">var</span> r = require; r(<span class=\"string\">\"./file\"</span>)</code>\n</td>\n<td><strong>yes</strong></td>\n<td>no♦</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Expressions in require (guided) <code>require(<span class=\"string\">\"./templates/\"</span> + template)</code>\n</td>\n<td><strong>yes (all files matching included)</strong></td>\n<td>no♦</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Expressions in require (free) <code>require(moduleName)</code>\n</td>\n<td>with manual configuration</td>\n<td>no♦</td>\n<td>no</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Requirable files</td>\n<td>file system</td>\n<td><strong>web</strong></td>\n<td>file system</td>\n<td>through plugins</td>\n<td>file system or through plugins</td>\n</tr>\n<tr>\n<td>Plugins</td>\n<td><strong>yes</strong></td>\n<td>yes</td>\n<td><strong>yes</strong></td>\n<td>yes</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>Preprocessing</td>\n<td><strong>loaders, <a href=\"https://github.com/webpack/transform-loader\">transforms</a></strong></td>\n<td>loaders</td>\n<td>transforms</td>\n<td>plugin translate</td>\n<td>plugin transforms</td>\n</tr>\n<tr>\n<td>Watch mode</td>\n<td>yes</td>\n<td>not required</td>\n<td>yes</td>\n<td>not needed in dev</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Debugging support</td>\n<td><strong>SourceUrl, SourceMaps</strong></td>\n<td>not required</td>\n<td>SourceMaps</td>\n<td>SourceUrl, SourceMaps</td>\n<td><strong>SourceUrl, SourceMaps</strong></td>\n</tr>\n<tr>\n<td>Node.js built-in libs <code>require(<span class=\"string\">\"path\"</span>)</code>\n</td>\n<td><strong>yes</strong></td>\n<td>no</td>\n<td><strong>yes</strong></td>\n<td><strong>yes</strong></td>\n<td><a href=\"https://github.com/rollup/rollup-plugin-npm\">npm-plugin</a></td>\n</tr>\n<tr>\n<td>Other Node.js stuff</td>\n<td>process, __dir/filename, global</td>\n<td>-</td>\n<td>process, __dir/filename, global</td>\n<td>process, __dir/filename, global for cjs</td>\n<td>global (<a href=\"https://github.com/rollup/rollup-plugin-commonjs\">commonjs-plugin</a>)</td>\n</tr>\n<tr>\n<td>Replacement for browser</td>\n<td>\n<code>web_modules</code>, <code>.web.js</code>, package.json field, alias config option</td>\n<td>alias option</td>\n<td>package.json field, alias option</td>\n<td>package.json, alias option</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Minimizing</td>\n<td>uglify</td>\n<td>uglify, closure compiler</td>\n<td><a href=\"https://github.com/hughsk/uglifyify\">uglifyify</a></td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Mangle path names</td>\n<td><strong>yes</strong></td>\n<td>no</td>\n<td>partial</td>\n<td>yes</td>\n<td>not required (path names are not included in the bundle)</td>\n</tr>\n<tr>\n<td>Runtime overhead</td>\n<td><strong>243B + 20B per module + 4B per dependency</strong></td>\n<td>14.7kB + 0B per module + (3B + X) per dependency</td>\n<td>415B + 25B per module + (6B + 2X) per dependency</td>\n<td>5.5kB for self-executing bundles, 38kB for full loader and polyfill, 0 plain modules, 293B CJS, 139B ES6 System.register before gzip</td>\n<td>\n<strong>none for ES2015 modules</strong> (other formats may have)</td>\n</tr>\n<tr>\n<td>Dependencies</td>\n<td>19MB / 127 packages</td>\n<td>11MB / 118 packages</td>\n<td><strong>1.2MB / 1 package</strong></td>\n<td>26MB / 131 packages</td>\n<td>?MB / 3 packages</td>\n</tr>\n</tbody>\n</table>\n<p>♦ in production mode (opposite in development mode)</p>\n<p>X is the length of the path string</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/comparison.html\" class=\"_attribution-link\">https://webpack.github.io/docs/comparison.html</a>\n  </p>\n</div>\n","usage-with-gulp":"<h1>Usage With Gulp</h1>\n<p>Using webpack with gulp is as easy as using the <a href=\"node.js-api\">node.js API</a>.</p>\n<pre data-language=\"javascript\">var gulp = require(\"gulp\");\nvar gutil = require(\"gulp-util\");\nvar webpack = require(\"webpack\");\nvar WebpackDevServer = require(\"webpack-dev-server\");</pre>\n<h3 id=\"normal-compilation\">Normal compilation</h3>\n<pre data-language=\"javascript\">gulp.task(\"webpack\", function(callback) {\n    // run webpack\n    webpack({\n        // configuration\n    }, function(err, stats) {\n        if(err) throw new gutil.PluginError(\"webpack\", err);\n        gutil.log(\"[webpack]\", stats.toString({\n            // output options\n        }));\n        callback();\n    });\n});</pre>\n<h3 id=\"webpack-dev-server\"><a href=\"webpack-dev-server\">webpack-dev-server</a></h3>\n<blockquote><p>Don’t be too lazy to integrate the webpack-dev-server into your development process. It’s an important tool for productivity.</p></blockquote>\n<pre data-language=\"javascript\">gulp.task(\"webpack-dev-server\", function(callback) {\n    // Start a webpack-dev-server\n    var compiler = webpack({\n        // configuration\n    });\n\n    new WebpackDevServer(compiler, {\n        // server and middleware options\n    }).listen(8080, \"localhost\", function(err) {\n        if(err) throw new gutil.PluginError(\"webpack-dev-server\", err);\n        // Server listening\n        gutil.log(\"[webpack-dev-server]\", \"http://localhost:8080/webpack-dev-server/index.html\");\n\n        // keep the server alive or continue?\n        // callback();\n    });\n});</pre>\n<h3 id=\"example\">Example</h3>\n<p>Take a look at an example gulpfile. It covers three modes:</p>\n<ul>\n<li>webpack-dev-server</li>\n<li>build - watch cycle</li>\n<li>production build</li>\n</ul>\n<p><a href=\"https://github.com/webpack/webpack-with-common-libs/blob/master/gulpfile.js\">Example gulpfile</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/usage-with-gulp.html\" class=\"_attribution-link\">https://webpack.github.io/docs/usage-with-gulp.html</a>\n  </p>\n</div>\n","usage-with-bower":"<h1>Usage With Bower</h1>\n<p>To use components from bower you need to add two things to webpack:</p>\n<ul>\n<li>Let webpack look in the <code>bower_components</code> folder.</li>\n<li>Let webpack use the <code>main</code> field from the <code>bower.json</code> file.</li>\n</ul>\n<h3 id=\"configuration\">Configuration</h3>\n<p>See <a href=\"configuration\">configuration</a> <code>resolve.modulesDirectories</code> and <a href=\"list-of-plugins\">list of plugins</a> <code>ResolverPlugin</code>.</p>\n<pre data-language=\"javascript\">var path = require(\"path\");\nvar webpack = require(\"webpack\");\nmodule.exports = {\n    resolve: {\n        root: [path.join(__dirname, \"bower_components\")]\n    },\n    plugins: [\n        new webpack.ResolverPlugin(\n            new webpack.ResolverPlugin.DirectoryDescriptionFilePlugin(\"bower.json\", [\"main\"])\n        )\n    ]\n}</pre>\n<h3 id=\"prefer-modules-from-npm-over-bower\">Prefer modules from npm over bower</h3>\n<p>In many cases modules from npm are better than the same module from bower. Bower mostly contain only concatenated/bundled files which are:</p>\n<ul>\n<li>More difficult to handle for webpack</li>\n<li>More difficult to optimize for webpack</li>\n<li>Sometimes only useable without a module system</li>\n</ul>\n<p>So prefer to use the CommonJs-style module and let webpack build it.</p>\n<h4 id=\"example-react\">Example react</h4>\n<p>bower package vs. npm package</p>\n<blockquote><p>Note: the bower package is built with browserify and envify (<code>NODE_ENV = <span class=\"string\">\"production\"</span></code>)</p></blockquote>\n<p>So we compare four configurations:</p>\n<p>a) webpack + bower package (<code>DefinePlugin</code> makes no difference here as envify already removed debug code)</p>\n<p>b) webpack + bower package + <code>module.noParse</code> for react</p>\n<p>c) webpack + npm package</p>\n<p>d) webpack + npm package + <code>DefinePlugin</code> with <code>NODE_ENV = <span class=\"string\">\"production\"</span></code></p>\n<table class=\"table table-bordered table-striped table-hover\">\n<thead><tr>\n<th>configuration</th>\n<th>modules</th>\n<th>bundle size</th>\n<th>compilation time</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>a)</td>\n<td>1</td>\n<td>136k</td>\n<td>100%</td>\n</tr>\n<tr>\n<td>b)</td>\n<td>1</td>\n<td>136k</td>\n<td>73,6%</td>\n</tr>\n<tr>\n<td>c)</td>\n<td>136</td>\n<td>130k</td>\n<td>89,9%</td>\n</tr>\n<tr>\n<td>d)</td>\n<td>135</td>\n<td>127k</td>\n<td>85,3%</td>\n</tr>\n</tbody>\n</table>\n<p>(webpack 1.3.0-beta8, react 0.10.0, bundle size minimized)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/usage-with-bower.html\" class=\"_attribution-link\">https://webpack.github.io/docs/usage-with-bower.html</a>\n  </p>\n</div>\n","usage-with-karma":"<h1>Usage With Karma</h1>\n<p><a href=\"https://github.com/webpack/karma-webpack\">https://github.com/webpack/karma-webpack</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/usage-with-karma.html\" class=\"_attribution-link\">https://webpack.github.io/docs/usage-with-karma.html</a>\n  </p>\n</div>\n","loader-conventions":"<h1>Loader Conventions</h1>\n<table class=\"table table-bordered table-striped table-hover\">\n<thead><tr>\n<th>extension</th>\n<th>semantic</th>\n<th>loader examples</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>.js</code></td>\n<td>returns module exports</td>\n<td>nothing</td>\n</tr>\n<tr>\n<td><code>.ts</code></td>\n<td>returns module exports</td>\n<td><code>ts-loader</code></td>\n</tr>\n<tr>\n<td><code>.coffee</code></td>\n<td>returns module exports</td>\n<td>\n<code>coffee-loader</code><br><code>coffee-redux-loader</code>\n</td>\n</tr>\n<tr>\n<td><code>.jsx</code></td>\n<td>returns module exports (react component)</td>\n<td>\n<code>jsx-loader</code><br><code>react-hot-loader!jsx-loader</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>.json</code><br><code>.json5</code>\n</td>\n<td>returns json value</td>\n<td>\n<code>json-loader</code><br><code>json5-loader</code>\n</td>\n</tr>\n<tr>\n<td><code>.txt</code></td>\n<td>return string value</td>\n<td><code>raw-loader</code></td>\n</tr>\n<tr>\n<td><code>.css</code></td>\n<td>returns nothing, side effect of adding style to DOM</td>\n<td>\n<code>style-loader!css-loader</code><br><code>style-loader!css-loader!autoprefixer-loader</code>\n</td>\n</tr>\n<tr>\n<td><code>.less</code></td>\n<td>returns nothing, side effect of adding style to DOM</td>\n<td><code>style-loader!css-loader!less-loader</code></td>\n</tr>\n<tr>\n<td><code>.scss</code></td>\n<td>returns nothing, side effect of adding style to DOM</td>\n<td><code>style-loader!css-loader!scss-loader</code></td>\n</tr>\n<tr>\n<td><code>.styl</code></td>\n<td>returns nothing, side effect of adding style to DOM</td>\n<td><code>style-loader!css-loader!stylus-loader</code></td>\n</tr>\n<tr>\n<td>\n<code>.png</code><br><code>.jpg</code><br><code>.jpeg</code><br><code>.gif</code><br><code>.svg</code>\n</td>\n<td>returns url to image</td>\n<td>\n<code>file-loader</code><br><code>url-loader</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>.woff</code><br><code>.ttf</code>\n</td>\n<td>returns url to font</td>\n<td>\n<code>file-loader</code><br><code>url-loader</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>.wav</code><br><code>.mp3</code>\n</td>\n<td>returns url to audio</td>\n<td>\n<code>file-loader</code><br><code>url-loader</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>.mpeg</code><br><code>.mp4</code><br><code>.webm</code><br><code>.ogv</code>\n</td>\n<td>returns url to video</td>\n<td><code>file-loader</code></td>\n</tr>\n<tr>\n<td><code>.html</code></td>\n<td>returns HTML as string</td>\n<td><code>html-loader</code></td>\n</tr>\n<tr>\n<td>\n<code>.md</code><br><code>.markdown</code>\n</td>\n<td>returns HTML as string</td>\n<td><code>html-loader!markdown-loader</code></td>\n</tr>\n<tr>\n<td><code>.jade</code></td>\n<td>returns template function</td>\n<td><code>jade-loader</code></td>\n</tr>\n<tr>\n<td>\n<code>.hbs</code><br><code>.handlebars</code>\n</td>\n<td>returns template function</td>\n<td><code>handlebars-loader</code></td>\n</tr>\n</tbody>\n</table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/loader-conventions.html\" class=\"_attribution-link\">https://webpack.github.io/docs/loader-conventions.html</a>\n  </p>\n</div>\n","list-of-plugins":"<h1>List Of Plugins</h1>\n<h3 id=\"config\">config</h3>\n<h4 id=\"normalmodulereplacementplugin\"><code>NormalModuleReplacementPlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.NormalModuleReplacementPlugin(resourceRegExp, newResource)</pre>\n<p>Replace resources that matches <code>resourceRegExp</code> with <code>newResource</code>. If <code>newResource</code> is relative, it is resolve relative to the previous resource. If <code>newResource</code> is a function, it is expected to overwrite the ‘request’ attribute of the supplied object.</p>\n<h4 id=\"contextreplacementplugin\"><code>ContextReplacementPlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.ContextReplacementPlugin(\n                resourceRegExp, \n                [newContentResource],\n                [newContentRecursive],\n                [newContentRegExp])</pre>\n<p>If the resource (directory) matches <code>resourceRegExp</code>, the plugin replaces the default resource, recursive flag or regExp generated by parsing with <code>newContentResource</code>, <code>newContentRecursive</code> or <code>newContextRegExp</code> respectively. If <code>newContentResource</code> is relative, it is resolve relative to the previous resource. If <code>newContentResource</code> is a function, it is expected to overwrite the ‘request’ attribute of the supplied object.</p>\n<h4 id=\"ignoreplugin\"><code>IgnorePlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.IgnorePlugin(requestRegExp, [contextRegExp])</pre>\n<p>Don’t generate modules for requests matching the provided RegExp.</p>\n<ul>\n<li>\n<code>requestRegExp</code> A RegExp to test the request against.</li>\n<li>\n<code>contextRegExp</code> (optional) A RegExp to test the context (directory) against.</li>\n</ul>\n<h4 id=\"prefetchplugin\"><code>PrefetchPlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.PrefetchPlugin([context], request)</pre>\n<p>A request for a normal module, which is resolved and built even before a require to it occurs. This can boost performance. Try to profile the build first to determine clever prefetching points.</p>\n<p><code>context</code> a absolute path to a directory</p>\n<p><code>request</code> a request string for a normal module</p>\n<h4 id=\"resolverplugin\"><code>ResolverPlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.ResolverPlugin(plugins, [types])</pre>\n<p>Apply a plugin (or array of <code>plugins</code>) to one or more resolvers (as specified in <code>types</code>).</p>\n<p><code>plugins</code> a plugin or an array of plugins that should be applied to the resolver(s).</p>\n<p><code>types</code> a resolver type or an array of resolver types (default: <code>[<span class=\"string\">\"normal\"</span>]</code>, resolver types: <code>normal</code>, <code>context</code>, <code>loader</code>)</p>\n<p>All plugins from <a href=\"https://github.com/webpack/enhanced-resolve\">enhanced-resolve</a> are exported as properties for the <code>ResolverPlugin</code>.</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">new webpack.ResolverPlugin([\n    new webpack.ResolverPlugin.DirectoryDescriptionFilePlugin(\"bower.json\", [\"main\"])\n], [\"normal\", \"loader\"])</pre>\n<h4 id=\"resolverplugin-fileappendplugin\"><code>ResolverPlugin.FileAppendPlugin</code></h4>\n<p>This plugin will append a path to the module directory to find a match, which can be useful if you have a module which has an incorrect “main” entry in its package.json/bower.json etc (e.g. <code><span class=\"string\">\"main\"</span>: <span class=\"string\">\"Gruntfile.js\"</span></code>). You can use this plugin as a special case to load the correct file for this module. Example:</p>\n<pre data-language=\"javascript\">new webpack.ResolverPlugin([\n  new webpack.ResolverPlugin.FileAppendPlugin(['/dist/compiled-moduled.js'])\n])</pre>\n<h3 id=\"output\">output</h3>\n<h4 id=\"bannerplugin\"><code>BannerPlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.BannerPlugin(banner, options)</pre>\n<p>Adds a banner to the top of each generated chunk.</p>\n<p><code>banner</code> a string, it will be wrapped in a comment</p>\n<p><code>options.raw</code> if true, banner will not be wrapped in a comment</p>\n<p><code>options.entryOnly</code> if true, the banner will only be added to the entry chunks.</p>\n<h3 id=\"optimize\">optimize</h3>\n<h4 id=\"dedupeplugin\"><code>DedupePlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.optimize.DedupePlugin()</pre>\n<p>Search for equal or similar files and deduplicate them in the output. This comes with some overhead for the entry chunk, but can reduce file size effectively.</p>\n<p>This doesn’t change the module semantics at all. Don’t expect to solve problems with multiple module instance. They won’t be one instance after deduplication.</p>\n<p>Note: Don’t use it in watch mode. Only for production builds.</p>\n<h4 id=\"limitchunkcountplugin\"><code>LimitChunkCountPlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.optimize.LimitChunkCountPlugin(options)</pre>\n<p>Limit the chunk count to a defined value. Chunks are merged until it fits.</p>\n<p><code>options.maxChunks</code> (number) max number of chunks</p>\n<p><code>options.chunkOverhead</code> (number) an additional overhead for each chunk in bytes (default 10000, to reflect request delay)</p>\n<p><code>options.entryChunkMultiplicator</code> (number) a multiplicator for entry chunks (default 10, entry chunks are merged 10 times less likely)</p>\n<h4 id=\"minchunksizeplugin\"><code>MinChunkSizePlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.optimize.MinChunkSizePlugin(options)</pre>\n<p>Merge small chunks that are lower than this min size (in chars). Size is approximated.</p>\n<p><code>options.minChunkSize</code> (number) chunks smaller than this number will be merged</p>\n<h4 id=\"occurrenceorderplugin\"><code>OccurrenceOrderPlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.optimize.OccurrenceOrderPlugin(preferEntry)</pre>\n<p>Assign the module and chunk ids by occurrence count. Ids that are used often get lower (shorter) ids. This make ids predictable, reduces to total file size and is recommended.</p>\n<p><code>preferEntry</code> (boolean) give entry chunks higher priority. This make entry chunks smaller but increases the overall size. (recommended)</p>\n<h4 id=\"uglifyjsplugin\"><code>UglifyJsPlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.optimize.UglifyJsPlugin([options])</pre>\n<p>Minimize all JavaScript output of chunks. Loaders are switched into minimizing mode. You can pass an object containing <a href=\"https://github.com/mishoo/UglifyJS2#usage\">UglifyJS options</a>.</p>\n<pre data-language=\"javascript\">new webpack.optimize.UglifyJsPlugin({\n    compress: {\n        warnings: false\n    }\n})</pre>\n<p>Additional options:</p>\n<p><code>sourceMap</code> The plugin uses SourceMaps to map error message locations to modules. This slows down the compilation. (default <code><span class=\"literal\">true</span></code>)</p>\n<p><code>test</code>, <code>include</code>, <code>exclude</code> RegExp or array of RegExps to filter processed files (default <code>test: <span class=\"regexp\">/\\.js($|\\?)/i</span></code>)</p>\n<p>Mangling names configuration</p>\n<p>A specific configuration is about mangling variable names. By default the mangle option is false. But you can configure the plugin to avoid mangling specific variable names by passing an except list:</p>\n<pre data-language=\"javascript\">new webpack.optimize.UglifyJsPlugin({\n    mangle: {\n        except: ['$super', '$', 'exports', 'require']\n    }\n})</pre>\n<p>With this the plugin will not mangle any occurrence of ‘$super’, ‘$’, ‘exports’ or ‘require’.</p>\n<h4 id=\"ngannotateplugin\"><a href=\"https://github.com/jeffling/ng-annotate-webpack-plugin\"><code>ngAnnotatePlugin</code></a></h4>\n<pre data-language=\"javascript\">new ngAnnotatePlugin([options]);</pre>\n<p>Runs the <a href=\"https://github.com/olov/ng-annotate\">ng-annotate</a> pre-minimizer to insert AngularJS dependency injection annotations.</p>\n<h4 id=\"commonschunkplugin\"><code>CommonsChunkPlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.optimize.CommonsChunkPlugin(options)</pre>\n<ul>\n<li>\n<code>options.name</code> or <code>options.names</code> (<code>string|string[]</code>): The chunk name of the commons chunk. An existing chunk can be selected by passing a name of an existing chunk. If an array of strings is passed this is equal to invoking the plugin multiple times for each chunk name. If omitted and <code>options.async</code> or <code>options.children</code> is set all chunks are used, otherwise <code>options.filename</code> is used as chunk name.</li>\n<li>\n<code>options.filename</code> (<code>string</code>): The filename template for the commons chunk. Can contain the same placeholder as <code>output.filename</code>. If omitted the original filename is not modified (usually <code>output.filename</code> or <code>output.chunkFilename</code>.</li>\n<li>\n<code>options.minChunks</code> (<code>number|<span class=\"literal\">Infinity</span>|<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(module, count)</span> -&gt; <span class=\"title\">boolean</span></span></code>): The minimum number of chunks which need to contain a module before it’s moved into the commons chunk. The number must be greater than or equal 2 and lower than or equal to the number of chunks. Passing <code><span class=\"literal\">Infinity</span></code> just creates the commons chunk, but moves no modules into it. By providing a <code><span class=\"function\"><span class=\"keyword\">function</span></span></code> you can add custom logic. (Defaults to the number of chunks)</li>\n<li>\n<code>options.chunks</code> (string[]`): Select the source chunks by chunk names. The chunk must be a child of the commons chunk. If omitted all entry chunks are selected.</li>\n<li>\n<code>options.children</code> (<code>boolean</code>): If <code><span class=\"literal\">true</span></code> all children of the commons chunk are selected</li>\n<li>\n<code>options.async</code> (<code>boolean</code>): If <code><span class=\"literal\">true</span></code> a new async commons chunk is created as child of <code>options.name</code> and sibling of <code>options.chunks</code>. It is loaded in parallel with <code>options.chunks</code>.</li>\n<li>\n<code>options.minSize</code> (<code>number</code>): Minimum size of all common module before a commons chunk is created.</li>\n</ul>\n<p>Examples:</p>\n<h5 id=\"1-commons-chunk-for-entries\">1. Commons chunk for entries</h5>\n<p>Generate an extra chunk, which contains common modules shared between entry points.</p>\n<pre data-language=\"javascript\">new CommonsChunkPlugin({\n  name: \"commons\",\n  // (the commons chunk name)\n\n  filename: \"commons.js\",\n  // (the filename of the commons chunk)\n\n  // minChunks: 3,\n  // (Modules must be shared between 3 entries)\n\n  // chunks: [\"pageA\", \"pageB\"],\n  // (Only use these entries)\n})</pre>\n<p>You must load the generated chunk before the entry point:</p>\n<pre data-language=\"javascript\">&lt;script src=\"commons.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n&lt;script src=\"entry.bundle.js\" charset=\"utf-8\"&gt;&lt;/script&gt;</pre>\n<h5 id=\"2-explicit-vendor-chunk\">2. Explicit vendor chunk</h5>\n<p>Split your code into vendor and application.</p>\n<pre data-language=\"javascript\">entry: {\n  vendor: [\"jquery\", \"other-lib\"],\n  app: \"./entry\"\n}\nnew CommonsChunkPlugin({\n  name: \"vendor\",\n\n  // filename: \"vendor.js\"\n  // (Give the chunk a different name)\n\n  minChunks: Infinity,\n  // (with more entries, this ensures that no other module\n  //  goes into the vendor chunk)\n})</pre>\n<pre data-language=\"javascript\">&lt;script src=\"vendor.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n&lt;script src=\"app.js\" charset=\"utf-8\"&gt;&lt;/script&gt;</pre>\n<p>Hint: In combination with long term caching you may need to use <a href=\"https://github.com/diurnalist/chunk-manifest-webpack-plugin\">this plugin</a> to avoid that the vendor chunk changes. You should also use records to ensure stable module ids.</p>\n<h5 id=\"3-move-common-modules-into-the-parent-chunk\">3. Move common modules into the parent chunk</h5>\n<p>With Code Splitting multiple child chunks of a chunk can have common modules. You can move these common modules into the parent (This reduces overall size, but has a negative effect on the initial load time. It can be useful if it is expected that a user need to download many sibling chunks).</p>\n<pre data-language=\"javascript\">new CommonsChunkPlugin({\n  // names: [\"app\", \"subPageA\"]\n  // (choose the chunks, or omit for all chunks)\n\n  children: true,\n  // (select all children of chosen chunks)\n\n  // minChunks: 3,\n  // (3 children must share the module before it's moved)\n})</pre>\n<h5 id=\"4-extra-async-commons-chunk\">4. Extra async commons chunk</h5>\n<p>Similar to 3., but instead of moving common modules into the parent (which increases initial load time) a new async-loaded additional commons chunk is used. This is automatically downloaded in parallel when the additional chunk is downloaded.</p>\n<pre data-language=\"javascript\">new CommonsChunkPlugin({\n  // names: [\"app\", \"subPageA\"]\n  // (choose the chunks, or omit for all chunks)\n\n  children: true,\n  // (use all children of the chunk)\n\n  async: true,\n  // (create an async commons chunk)\n\n  // minChunks: 3,\n  // (3 children must share the module before it's separated)\n})</pre>\n<h4 id=\"aggressivemergingplugin\"><code>AggressiveMergingPlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.optimize.AggressiveMergingPlugin(options)</pre>\n<p>A plugin for a more aggressive chunk merging strategy. Even similar chunks are merged if the total size is reduced enough. As an option modules that are not common in these chunks can be moved up the chunk tree to the parents.</p>\n<p><code>options.minSizeReduce</code> A factor which defines the minimal required size reduction for chunk merging. Defaults to <code><span class=\"number\">1.5</span></code> which means that the total size need to be reduce by 50% for chunk merging.</p>\n<p><code>options.moveToParents</code> When set, modules that are not in both merged chunks are moved to all parents of the chunk. Defaults to <code><span class=\"literal\">false</span></code>.</p>\n<p><code>options.entryChunkMultiplicator</code> When <code>options.moveToParents</code> is set, moving to an entry chunk is more expensive. Defaults to <code><span class=\"number\">10</span></code>, which means moving to an entry chunk is ten times more expensive than moving to an normal chunk.</p>\n<h4 id=\"dllplugin\"><code>DllPlugin</code></h4>\n<p>Output “dll” bundles. Dll bundles doesn’t execute any of your module’s code. They only include modules. A dll bundle exports a function which can be used to “require” modules by id (the internal require function). In addition to that a manifest json file is written to a specified location which contains mappings from real request to module id.</p>\n<p>Combine this plugins with <code>output.library</code> option to expose the dll function i. e. into the global scope.</p>\n<pre data-language=\"javascript\">new DllPlugin({\n  path: path.join(__dirname, \"manifest.json\"),\n  name: \"[name]_[hash]\",\n  context: __dirname\n})</pre>\n<ul>\n<li>\n<code>path</code>: <strong>absolute path</strong> to the manifest json file (output)</li>\n<li>\n<code>name</code>: name of the exposed dll function (keep consistent with <code>output.library</code>)</li>\n<li>\n<code>context</code> (optional): context of requests in the manifest file, defaults to the webpack context</li>\n</ul>\n<p><a href=\"https://github.com/webpack/webpack/tree/master/examples/dll\">Usage example</a></p>\n<h4 id=\"dllreferenceplugin\"><code>DllReferencePlugin</code></h4>\n<p>References a dll function which is expected to be available. A manifest file can be used to map names to module ids accessible by this dll function.</p>\n<p>Can be used to consume a dll bundle + manifest created by the <code>DllPlugin</code>.</p>\n<p>Can be used in two different modes:</p>\n<p><strong>Scoped mode</strong></p>\n<p>The content of the dll is accessible under a module prefix. i. e. with <code>scope = <span class=\"string\">\"xyz\"</span></code> a file <code>abc</code> in the dll can be access via <code>require(<span class=\"string\">\"xyz/abc\"</span>)</code>.</p>\n<p><strong>Mapped mode</strong></p>\n<p>The content of the dll is mapped to the current directory. If a required file matches a file in the dll (after resolving), then the file from the dll is used instead. Note: because this happens after resolving every file in the dll must be also available for the dll user at the same path. i. e. if the dll contains <code>jquery</code> and the file <code>abc</code>, <code>require(<span class=\"string\">\"jquery\"</span>)</code> and <code>require(<span class=\"string\">\"./abc\"</span>)</code> will be used from the dll.</p>\n<pre data-language=\"javascript\">new DllReferencePlugin({\n  context: __dirname,\n  scope: \"xyz\",\n  manifest: require(\"./manifest.json\"),\n  name: \"./my-dll.js\",\n  sourceType: \"commonsjs2\",\n  content: { ... }\n})</pre>\n<ul>\n<li>\n<code>context</code>: (<strong>absolute path</strong>) context of requests in the manifest (or content property)</li>\n<li>\n<code>scope</code> (optional): prefix which is used for accessing the content of the dll</li>\n<li>\n<code>minifest</code> (object): an object containing <code>content</code> and <code>name</code>\n</li>\n<li>\n<code>name</code> (optional): the name where the dll is exposed (defaults to <code>manifest.name</code>) (see also <code>externals</code>)</li>\n<li>\n<code>sourceType</code> (optional): the type how the dll is exposed (defaults to <code><span class=\"string\">\"var\"</span></code>) (see also <code>externals</code>)</li>\n<li>\n<code>content</code> (optional): the mappings from request to module id (defaults to <code>manifest.content</code>)</li>\n</ul>\n<p><a href=\"https://github.com/webpack/webpack/tree/master/examples/dll-user\">Usage example</a></p>\n<h5 id=\"using-dlls-via-script-tags\">Using dlls via <code>&lt;script&gt;</code> tags</h5>\n<p>Dll bundle: <code>output.library = <span class=\"string\">\"[name]_[hash]\"</span></code> <code>output.libraryTarget = <span class=\"string\">\"var\"</span></code> <code>DllPlugin.name = <span class=\"string\">\"[name]_[hash]\"</span></code></p>\n<p>Dll consumer: <code>DllReferencePlugin.sourceType = <span class=\"string\">\"var\"</span></code></p>\n<h5 id=\"using-dlls-via-node-js\">Using dlls via node.js</h5>\n<p>Dll bundle: <code>output.libraryTarget = <span class=\"string\">\"commonjs2\"</span></code></p>\n<p>Dll consumer: <code>DllReferencePlugin.sourceType = <span class=\"string\">\"commonjs2\"</span></code> <code>DllReferencePlugin.name = <span class=\"string\">\"./path/to/dll.js\"</span></code></p>\n<h4 id=\"appcacheplugin\"><a href=\"https://github.com/lettertwo/appcache-webpack-plugin\"><code>AppCachePlugin</code></a></h4>\n<p>Generates a HTML5 Application Cache manifest</p>\n<h4 id=\"offlineplugin\"><a href=\"https://github.com/NekR/offline-plugin\"><code>OfflinePlugin</code></a></h4>\n<p>Plugin which brings offline support into your project. It generates <code>ServiceWorker</code> based on output files and chosen update strategy. <code>AppCache</code> is used as a fallback when <code>ServiceWorker</code> is not available.</p>\n<h3 id=\"module-styles\">module styles</h3>\n<h4 id=\"labeledmodulesplugin\"><code>LabeledModulesPlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.dependencies.LabeledModulesPlugin()</pre>\n<p>Support Labeled Modules.</p>\n<h4 id=\"componentplugin\"><a href=\"https://github.com/webpack/component-webpack-plugin\"><code>ComponentPlugin</code></a></h4>\n<p>Use <a href=\"https://github.com/component/component\">component</a> with webpack. This project has been deprecated.</p>\n<h4 id=\"angularplugin\"><a href=\"https://github.com/stackfull/angular-webpack-plugin\"><code>AngularPlugin</code></a></h4>\n<p>Use angular.js modules with webpack.</p>\n<h3 id=\"dependency-injection\">dependency injection</h3>\n<h4 id=\"defineplugin\"><code>DefinePlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.DefinePlugin(definitions)</pre>\n<p>Define free variables. Useful for having development builds with debug logging or adding global constants.</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">new webpack.DefinePlugin({\n    VERSION: JSON.stringify(\"5fa3b9\"),\n    BROWSER_SUPPORTS_HTML5: true,\n    TWO: \"1+1\",\n    \"typeof window\": JSON.stringify(\"object\")\n})</pre>\n<pre data-language=\"javascript\">console.log(\"Running App version \" + VERSION);\nif(!BROWSER_SUPPORTS_HTML5) require(\"html5shiv\");</pre>\n<p>Each key passed into <code>DefinePlugin</code> is an identifier or multiple identifiers joined with <code>.</code>.</p>\n<ul>\n<li>If the value is a string it will be used as a code fragment.</li>\n<li>If the value isn’t a string, it will be stringified (including functions).</li>\n<li>If the value is an object all keys are defined the same way.</li>\n<li>If you prefix <code><span class=\"keyword\">typeof</span></code> to the key, it’s only defined for typeof calls.</li>\n</ul>\n<p>The values will be inlined into the code which allows a minification pass to remove the redundant conditional.</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">if(DEBUG)\n    console.log('Debug info')\nif(PRODUCTION)\n    console.log('Production log')\n``</pre>\n<p>After passing through webpack with no minification results in:</p>\n<pre data-language=\"javascript\">if(false)\n    console.log('Debug info')\nif(true)\n    console.log('Production log')\n``</pre>\n<p>and then after a minification pass results in:</p>\n<pre data-language=\"javascript\">console.log('Production log')\n``</pre>\n<h4 id=\"provideplugin\"><code>ProvidePlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.ProvidePlugin(definitions)</pre>\n<p>Automatically loaded modules. Module (value) is loaded when the identifier (key) is used as free variable in a module. The identifier is filled with the exports of the loaded module.</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">new webpack.ProvidePlugin({\n    $: \"jquery\"\n})</pre>\n<pre data-language=\"javascript\">// in a module\n$(\"#item\") // &lt;= just works\n// $ is automatically set to the exports of module \"jquery\"</pre>\n<h4 id=\"rewireplugin\"><a href=\"https://github.com/jhnns/rewire-webpack\"><code>RewirePlugin</code></a></h4>\n<p>Use <a href=\"https://github.com/jhnns/rewire\">rewire</a> in webpack.</p>\n<h4 id=\"ngrequireplugin\"><a href=\"https://github.com/randing89/ngrequire-webpack-plugin\"><code>NgRequirePlugin</code></a></h4>\n<p>Automatically require AngularJS modules without explicitly write <code>require</code> statement.</p>\n<pre data-language=\"javascript\">{\n  plugins: [\n    new ngRequirePlugin(['file path list for your angular modules. eg: src/**/*.js'])\n  ]\n}</pre>\n<h3 id=\"localization\">localization</h3>\n<h4 id=\"i18nplugin\"><a href=\"https://github.com/webpack/i18n-webpack-plugin\"><code>I18nPlugin</code></a></h4>\n<pre data-language=\"javascript\">new I18nPlugin(translations: Object, fnName = \"__\": String)</pre>\n<p>Create bundles with translations baked in. Then you can serve the translated bundle to your clients.</p>\n<h3 id=\"debugging\">debugging</h3>\n<h4 id=\"sourcemapdevtoolplugin\"><code>SourceMapDevToolPlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.SourceMapDevToolPlugin({\n  // asset matching\n  test: string | RegExp | Array,\n  include: string | RegExp | Array,\n  exclude: string | RegExp | Array,\n\n  // file and reference\n  filename: string,\n  append: false | string,\n\n  // sources naming\n  moduleFilenameTemplate: string,\n  fallbackModuleFilenameTemplate: string,\n\n  // quality/performance\n  module: bool,\n  columns: bool,\n  lineToLine: bool | object\n})</pre>\n<p>Adds SourceMaps for assets.</p>\n<p><code>test</code>, <code>include</code> and <code>exclude</code> are used to determine which assets should be processed. Each one can be a RegExp (asset filename is matched), a string (asset filename need to start with this string) or a Array of those (any of them need to be matched). <code>test</code> defaults to <code>.js</code> files if omitted.</p>\n<p><code>filename</code> defines the output filename of the SourceMap. If no value is provided the SourceMap is inlined.</p>\n<p><code>append</code> is appended to the original asset. Usually the <code>#sourceMappingURL</code> comment. <code>[url]</code> is replaced with a URL to the SourceMap file. <code><span class=\"literal\">false</span></code> disables the appending.</p>\n<p><code>moduleFilenameTemplate</code> and <code>fallbackModuleFilenameTemplate</code> see <code>output.devtoolModuleFilenameTemplate</code>.</p>\n<p><code>module</code> (defaults to <code><span class=\"literal\">true</span></code>) When <code><span class=\"literal\">false</span></code> loaders do not generate SourceMaps and the transformed code is used as source instead.</p>\n<p><code>columns</code> (defaults to <code><span class=\"literal\">true</span></code>) When <code><span class=\"literal\">false</span></code> column mappings in SorceMaps are ignored and a faster SourceMap implementation is used.</p>\n<p><code>lineToLine</code> (an object <code>{test, include, exclude}</code> which is matched against modules) matched modules uses simple (faster) line to line source mappings.</p>\n<h3 id=\"other\">other</h3>\n<h4 id=\"hotmodulereplacementplugin\"><code>HotModuleReplacementPlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.HotModuleReplacementPlugin()</pre>\n<p>Enables Hot Module Replacement. (This requires records data if not in dev-server mode, <code>recordsPath</code>)</p>\n<p>Generates Hot Update Chunks of each chunk in the records. It also enables the <a href=\"hot-module-replacement\">API</a> and makes <code>__webpack_hash__</code> available in the bundle.</p>\n<h4 id=\"extendedapiplugin\"><code>ExtendedAPIPlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.ExtendedAPIPlugin()</pre>\n<p>Adds useful free vars to the bundle.</p>\n<p><code>__webpack_hash__</code> The hash of the compilation available as free var.</p>\n<blockquote><p>WARNING: Don’t combine it with the <code>HotModuleReplacementPlugin</code>. It would break and you don’t need it as the <code>HotModuleReplacementPlugin</code> export the same stuff.</p></blockquote>\n<h4 id=\"noerrorsplugin\"><code>NoErrorsPlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.NoErrorsPlugin()</pre>\n<p>When there are errors while compiling this plugin skips the emitting phase (and recording phase), so there are no assets emitted that include errors. The <code>emitted</code> flag in the stats is <code><span class=\"literal\">false</span></code> for all assets. If you are using the CLI, the webpack process will <em>not exit with an error code</em> by enabling this plugin. If you want webpack to “fail” when using the CLI, please check out the <code>bail</code> option.</p>\n<h4 id=\"progressplugin\"><code>ProgressPlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.ProgressPlugin(function handler(percentage, msg) {/* ... */})</pre>\n<p>Hook into the compiler to extract progress information. The <code>handler</code> must have the signature <code><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(percentage, message)</span></span></code>. It’s called with <code><span class=\"number\">0</span> &lt;= percentage &lt;= <span class=\"number\">1</span></code>. <code>percentage == <span class=\"number\">0</span></code> indicates the start. <code>percentage == <span class=\"number\">1</span></code> indicates the end.</p>\n<h4 id=\"watchignoreplugin\"><code>WatchIgnorePlugin</code></h4>\n<pre data-language=\"javascript\">new webpack.WatchIgnorePlugin(paths)</pre>\n<p>Does not watch specified files matching provided paths or RegExps.</p>\n<ul><li>\n<code>paths</code> (array) an array of RegExps or absolute paths to directories or files to test against</li></ul>\n<h4 id=\"s3plugin\"><a href=\"https://github.com/MikaAK/s3-plugin-webpack\"><code>S3Plugin</code></a></h4>\n<pre data-language=\"javascript\">new S3Plugin({\n  exclude: RegExp,\n  s3Options: {\n    accessKeyId: string,\n    secretAccessKey: string,\n    region: string\n  },\n  s3UploadOptions: {\n    Bucket: string\n  },\n  cdnizerOptions: {\n    defaultCDNBase: string\n  }\n})</pre>\n<p>Uploads your content to s3. Can also run your html files through <a href=\"https://www.npmjs.com/package/cdnizer\">cdnizer</a> to change the url to match</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/list-of-plugins.html\" class=\"_attribution-link\">https://webpack.github.io/docs/list-of-plugins.html</a>\n  </p>\n</div>\n","hot-module-replacement":"<h1>Hot Module Replacement</h1>\n<p>“Hot Module Replacement” (HMR) is a feature to inject updated modules into the active runtime.</p>\n<blockquote><p>It’s like LiveReload for every module.</p></blockquote>\n<p>HMR is “opt-in”, so you need to put some code at chosen points of your application. The dependencies are handled by the module system.</p>\n<p>I. e. you place your hot replacement code in module A. Module A requires module B and B requires C. If module C is updated, and module B cannot handle the update, modules B and C become outdated. Module A can handle the update and new modules B and C are injected.</p>\n<h3 id=\"examples\">Examples</h3>\n<h5 id=\"example-1-hot-replace-request-handler-of-http-server\">Example 1: hot replace request handler of http server</h5>\n<pre data-language=\"javascript\">var requestHandler = require(\"./handler.js\");\nvar server = require(\"http\").createServer();\nserver.on(\"request\", requestHandler);\nserver.listen(8080);\n\n// check if HMR is enabled\nif(module.hot) {\n    // accept update of dependency\n    module.hot.accept(\"./handler.js\", function() {\n        // replace request handler of server\n        server.removeListener(\"request\", requestHandler);\n        requestHandler = require(\"./handler.js\");\n        server.on(\"request\", requestHandler);\n    });\n}</pre>\n<h5 id=\"example-2-hot-replace-css\">Example 2: hot replace css</h5>\n<pre data-language=\"javascript\">// addStyleTag(css: string) =&gt; HTMLStyleElement\nvar addStyleTag = require(\"./addStyleTag\");\n\nvar element = addStyleTag(\".rule { attr: name }\");\nmodule.exports = null;\n\n// check if HMR is enabled\nif(module.hot) {\n\n    // accept itself\n    module.hot.accept();\n\n    // removeStyleTag(element: HTMLStyleElement) =&gt; void\n    var removeStyleTag = require(\"./removeStyleTag\");\n\n    // dispose handler\n    module.hot.dispose(function() {\n        // revoke the side effect\n        removeStyleTag(element);\n    });\n}</pre>\n<h3 id=\"api\">API</h3>\n<p>If HMR is enabled for a module <code>module.hot</code> is an object containing these properties:</p>\n<h4 id=\"accept\"><code>accept</code></h4>\n<pre data-language=\"javascript\">accept(dependencies: string[], callback: (updatedDependencies) =&gt; void) =&gt; void\naccept(dependency: string, callback: () =&gt; void) =&gt; void</pre>\n<p>Accept code updates for the specified dependencies. The callback is called when dependencies were replaced.</p>\n<pre data-language=\"javascript\">accept([errHandler]) =&gt; void</pre>\n<p>Accept code updates for this module without notification of parents. This should only be used if the module doesn’t export anything. The <code>errHandler</code> can be used to handle errors that occur while loading the updated module.</p>\n<h4 id=\"decline\"><code>decline</code></h4>\n<pre data-language=\"javascript\">decline(dependencies: string[]) =&gt; void\ndecline(dependency: string) =&gt; void</pre>\n<p>Do not accept updates for the specified dependencies. If any dependencies is updated, the code update fails with code <code><span class=\"string\">\"decline\"</span></code>.</p>\n<pre data-language=\"javascript\">decline() =&gt; void</pre>\n<p>Flag the current module as not update-able. If updated the update code would fail with code <code><span class=\"string\">\"decline\"</span></code>.</p>\n<h4 id=\"dispose-adddisposehandler\"><code>dispose/addDisposeHandler</code></h4>\n<pre data-language=\"javascript\">dispose(callback: (data: object) =&gt; void) =&gt; void\naddDisposeHandler(callback: (data: object) =&gt; void) =&gt; void</pre>\n<p>Add a one time handler, which is executed when the current module code is replaced. Here you should destroy/remove any persistent resource you have claimed/created. If you want to transfer state to the new module, add it to <code>data</code> object. The <code>data</code> will be available at <code>module.hot.data</code> on the new module.</p>\n<h4 id=\"removedisposehandler\"><code>removeDisposeHandler</code></h4>\n<pre data-language=\"javascript\">removeDisposeHandler(callback: (data: object) =&gt; void) =&gt; void</pre>\n<p>Remove a handler.</p>\n<p>This can useful to add a temporary dispose handler. You could i. e. replace code while in the middle of a multi-step async function.</p>\n<h3 id=\"management-api\">Management API</h3>\n<p>Also on the <code>module.hot</code> object.</p>\n<h4 id=\"check\"><code>check</code></h4>\n<pre data-language=\"javascript\">check([autoApply], callback: (err: Error, outdatedModules: Module[]) =&gt; void</pre>\n<p>Throws an exceptions if <code>status()</code> is not <code>idle</code>.</p>\n<p>Check all currently loaded modules for updates and apply updates if found.</p>\n<p>If no update was found, the callback is called with <code><span class=\"literal\">null</span></code>.</p>\n<p>If <code>autoApply</code> is truthy the callback will be called with all modules that were disposed. <code>apply()</code> is automatically called with <code>autoApply</code> as <code>options</code> parameter.</p>\n<p>If <code>autoApply</code> is not set the callback will be called with all modules that will be disposed on <code>apply()</code>.</p>\n<h4 id=\"apply\"><code>apply</code></h4>\n<pre data-language=\"javascript\">apply([options], callback: (err: Error, outdatedModules: Module[]) =&gt; void</pre>\n<p>If <code>status() != <span class=\"string\">\"ready\"</span></code> it throws an error.</p>\n<p>Continue the update process.</p>\n<p><code>options</code> can be an object containing these options:</p>\n<ul><li>\n<code>ignoreUnaccepted</code>: If true the update process continues even if some modules are not accepted (and would bubble to the entry point).</li></ul>\n<h4 id=\"status\"><code>status</code></h4>\n<pre data-language=\"javascript\">status() =&gt; string</pre>\n<p>Return one of <code>idle</code>, <code>check</code>, <code>watch</code>, <code>watch-delay</code>, <code>prepare</code>, <code>ready</code>, <code>dispose</code>, <code>apply</code>, <code>abort</code> or <code>fail</code>.</p>\n<p><code>idle</code></p>\n<p>The HMR is waiting for your call the <code>check()</code>. When you call it the status will change to <code>check</code>.</p>\n<p><code>check</code></p>\n<p>The HMR is checking for updates. If it doesn’t find updates it will change back to <code>idle</code>.</p>\n<p>If updates were found it will go through the steps <code>prepare</code>, <code>dispose</code> and <code>apply</code>. Than back to <code>idle</code>.</p>\n<p><code>watch</code></p>\n<p>The HMR is in watch mode and will automatically be notified about changes. After the first change it will change to <code>watch-delay</code> and wait for a specified time to start the update process. Any change will reset the timeout, to accumulate more changes. When the update process is started it will go through the steps <code>prepare</code>, <code>dispose</code> and <code>apply</code>. Than back to <code>watch</code> or <code>watch-delay</code> if changes were detected while updating.</p>\n<p><code>prepare</code></p>\n<p>The HMR is prepare stuff for the update. This may means that it’s downloading something.</p>\n<p><code>ready</code></p>\n<p>An update is available and prepared. Call <code>apply()</code> to continue.</p>\n<p><code>dispose</code></p>\n<p>The HMR is calling the dispose handlers of modules that will be replaced.</p>\n<p><code>apply</code></p>\n<p>The HMR is calling the accept handlers of the parents of replaced modules, than it requires the self accepted modules.</p>\n<p><code>abort</code></p>\n<p>A update cannot apply, but the system is still in a (old) consistent state.</p>\n<p><code>fail</code></p>\n<p>A update has thrown an exception in the middle of the process, and the system is (maybe) in a inconsistent state. The system should be restarted.</p>\n<h4 id=\"status-addstatushandler\"><code>status/addStatusHandler</code></h4>\n<pre data-language=\"javascript\">status(callback: (status: string) =&gt; void) =&gt; void\naddStatusHandler(callback: (status: string) =&gt; void) =&gt; void</pre>\n<p>Register a callback on status change.</p>\n<h4 id=\"removestatushandler\"><code>removeStatusHandler</code></h4>\n<pre data-language=\"javascript\">removeStatusHandler(callback: (status: string) =&gt; void) =&gt; void</pre>\n<p>Remove a registered status change handler.</p>\n<h3 id=\"how-to-deal-with\">How to deal with …</h3>\n<h5 id=\"a-module-without-side-effects\">… a module without side effects (the standard case)</h5>\n<p>Nothing to do in the module. Any parent can accept it.</p>\n<h5 id=\"a-module-with-side-effects\">… a module with side effects</h5>\n<p>The module needs a dispose handler, then any parent can accept it.</p>\n<h5 id=\"a-module-with-only-side-effects-and-no-exports\">… a module with only side effects and no exports</h5>\n<p>The module needs a dispose handler and can accept itself. No action is required in the parent.</p>\n<p>If the module’s code is not in your hand, the parent can accept the module with some custom dispose logic.</p>\n<h5 id=\"the-application-entry-module\">… the application entry module</h5>\n<p>As it doesn’t export it can accept itself. A dispose handler can pass the application state on replacement.</p>\n<h5 id=\"external-module-with-not-handleable-side-effects\">… external module with not handleable side effects</h5>\n<p>In the nearest parent you decline the dependency. This makes your application throw on update. But as it’s an external module, an update is very rare.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/hot-module-replacement.html\" class=\"_attribution-link\">https://webpack.github.io/docs/hot-module-replacement.html</a>\n  </p>\n</div>\n","webpack-dev-server":"<h1>Webpack Dev Server</h1>\n<p>The <em>webpack-dev-server</em> is a little node.js <a href=\"http://expressjs.com/\">Express</a> server, which uses the <em><a href=\"webpack-dev-middleware\">webpack-dev-middleware</a></em> to serve a <em>webpack bundle</em>. It also has a little runtime which is connected to the server via <a href=\"http://socket.io/\">Socket.IO</a>. The server emits information about the compilation state to the client, which reacts to those events. You can choose between different modes, depending on your needs. So lets say you have the following config file:</p>\n<pre data-language=\"javascript\">var path = require(\"path\");\nmodule.exports = {\n  entry: {\n    app: [\"./app/main.js\"]\n  },\n  output: {\n    path: path.resolve(__dirname, \"build\"),\n    publicPath: \"/assets/\",\n    filename: \"bundle.js\"\n  }\n};</pre>\n<p>You have an <code>app</code> folder with your initial entry point that <em>webpack</em> will bundle into a <code>bundle.js</code> file in the <code>build</code> folder.</p>\n<h3 id=\"content-base\">Content Base</h3>\n<p>The <em>webpack-dev-server</em> will serve the files in the current directory, unless you configure a specific content base.</p>\n<pre data-language=\"javascript\">$ webpack-dev-server --content-base build/</pre>\n<p>Using this config <em>webpack-dev-server</em> will serve the static files in your <code>build</code> folder. It’ll watch your source files for changes and when changes are made the <em>bundle</em> will be recompiled. This modified <em>bundle</em> is served from memory at the relative path specified in <code>publicPath</code> (see <a href=\"#api\">API</a>). It will not be written to your configured output directory. Where a <em>bundle</em> already exists at the same url path the <em>bundle</em> in memory will take precedence (by default).</p>\n<p>For example with the configuration above your <em>bundle</em> will be available at <code>localhost:<span class=\"number\">8080</span>/assets/bundle.js</code></p>\n<p>To load your bundled files, you will need to create an <code>index.html</code> file in the <code>build</code> folder from which static files are served (<code>--content-base</code> option). e.g:</p>\n<pre data-language=\"javascript\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;script src=\"bundle.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre>\n<p>By default go to <code>localhost:<span class=\"number\">8080</span>/</code> to launch your app. For example with the configuration above (with publicPath) go to <code>localhost:<span class=\"number\">8080</span>/assets/</code>.</p>\n<h3 id=\"automatic-refresh\">Automatic Refresh</h3>\n<p>The <em>webpack-dev-server</em> supports multiple modes to automatic refresh the page:</p>\n<ul>\n<li>Iframe mode (page is embedded in an iframe and reloaded on change)</li>\n<li>Inline mode (a small webpack-dev-server client entry is added to the bundle which refresh the page on change)</li>\n</ul>\n<p>Each mode also supports Hot Module Replacement in which the bundle is notified that a change happened instead of a full page reload. A Hot Module Replacement runtime could then load the updated modules and inject them into the running app.</p>\n<h4 id=\"iframe-mode\">Iframe mode</h4>\n<p>To use the iframe mode no additional configuration is needed. Just navigate the browser to <code>http:<span class=\"comment\">//&lt;host&gt;:&lt;port&gt;/webpack-dev-server/&lt;path&gt;</span></code>. I. e. with the above configuration <code>http:<span class=\"comment\">//localhost:8080/webpack-dev-server/index.html</span></code>.</p>\n<ul>\n<li>No configuration change needed.</li>\n<li>Nice information bar on top of your app.</li>\n<li>Url changes in the app are <strong>not</strong> reflected in the browsers url bar.</li>\n</ul>\n<h4 id=\"inline-mode\">Inline mode</h4>\n<p>To the use inline mode specify <code>--inline</code> on the command line (you cannot specify it in the configuration). This adds the webpack-dev-server client entry point to the webpack configuration. There is no change in the url required. Just navigate to <code>http:<span class=\"comment\">//&lt;host&gt;:&lt;port&gt;/&lt;path&gt;</span></code>. I. e. with the above configuration <code>http:<span class=\"comment\">//localhost:8080/index.html</span></code>.</p>\n<ul>\n<li>Command line flag needed.</li>\n<li>Status information in the browser log.</li>\n<li>Url changes in the app are reflected in the browsers url bar.</li>\n</ul>\n<h5 id=\"inline-mode-with-node-js-api\">Inline mode with node.js API</h5>\n<p>There is no <code>inline: <span class=\"literal\">true</span></code> flag in the webpack-dev-server configuration, because the webpack-dev-server module has no access to the webpack configuration. Instead the user must add the webpack-dev-server client entry point to the webpack configuration.</p>\n<p>To do this just add <code>webpack-dev-server/client?http:<span class=\"comment\">//&lt;path&gt;:&lt;port&gt;</span></code> to (all) entry point(s). I. e. with the above configuration:</p>\n<pre data-language=\"javascript\">var config = require(\"./webpack.config.js\");\nconfig.entry.app.unshift(\"webpack-dev-server/client?http://localhost:8080\");\nvar compiler = webpack(config);\nvar server = new webpackDevServer(compiler, {...});\nserver.listen(8080);</pre>\n<h5 id=\"inline-mode-in-html\">Inline mode in HTML</h5>\n<p>There is also the option to add a reference to the webpack-dev-server client script to the HTML page:</p>\n<pre data-language=\"javascript\">&lt;script src=\"http://localhost:8080/webpack-dev-server.js\"&gt;&lt;/script&gt;</pre>\n<h4 id=\"hot-module-replacement\">Hot Module Replacement</h4>\n<p>To enable Hot Module Replacement with the webpack-dev-server specify <code>--hot</code> on the command line. This adds the <code>HotModuleReplacementPlugin</code> to the webpack configuration.</p>\n<p>The easiest way to use Hot Module Replacement with the webpack-dev-server is to use the inline mode.</p>\n<h5 id=\"hot-module-replacement-with-inline-mode-on-cli\">Hot Module Replacement with Inline mode on CLI</h5>\n<p>Nothing more is needed. <code>--inline --hot</code> does all the relevant work automatically. The CLI of the webpack-dev-server automatically adds the special <code>webpack/hot/dev-server</code> entry point to your configuration.</p>\n<p>Just navigate to <code>http:<span class=\"comment\">//&lt;host&gt;:&lt;port&gt;/&lt;path&gt;</span></code> and let the magic happen.</p>\n<p>You should see the following messages in the browser log:</p>\n<pre data-language=\"javascript\">[HMR] Waiting for update signal from WDS...\n[WDS] Hot Module Replacement enabled.</pre>\n<p>Messages prefixed with <code>[HMR]</code> originate from the <code>webpack/hot/dev-server</code> module. Messages prefixed with <code>[WDS]</code> originate from the webpack-dev-server client.</p>\n<p>It’s important the specify a correct <code>output.publicPath</code> elsewise hot update chunks cannot be loaded.</p>\n<h5 id=\"hot-module-replacement-with-node-js-api\">Hot Module Replacement with node.js API</h5>\n<p>Similar to the inline mode the user must make changes to the webpack configuration.</p>\n<p>Three changes are needed:</p>\n<ul>\n<li>add an entry point to the webpack configuration: <code>webpack/hot/dev-server</code>.</li>\n<li>add the <code><span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</code> to the webpack configuration.</li>\n<li>add <code>hot: <span class=\"literal\">true</span></code> to the webpack-dev-server configuration to enable HMR on the server.</li>\n</ul>\n<p>I. e. with the above configuration:</p>\n<pre data-language=\"javascript\">var config = require(\"./webpack.config.js\");\nconfig.entry.app.unshift(\"webpack-dev-server/client?http://localhost:8080\", \"webpack/hot/dev-server\");\nvar compiler = webpack(config);\nvar server = new webpackDevServer(compiler, {\n  hot: true\n  ...\n});\nserver.listen(8080);</pre>\n<h3 id=\"proxy\">Proxy</h3>\n<p>The Webpack dev server makes use of <a href=\"https://github.com/nodejitsu/node-http-proxy\">node-http-proxy</a> to optionally proxy requests to a separate, possibly external, backend server. A sample configuration is below.</p>\n<pre data-language=\"javascript\">{\n    devServer: {\n        proxy: {\n            '/some/path*': {\n                target: 'https://other-server.example.com',\n                secure: false,\n            },\n        },\n    },\n}</pre>\n<p>See the <a href=\"https://github.com/nodejitsu/node-http-proxy#options\">node-http-proxy Options documentation</a> for available configuration.</p>\n<p>Proxying some URLs can be useful for a variety of configurations. One example is to serve JavaScript files and other static assets from the local development server but still send API requests to an external backend development server. Another example is splitting requests between two separate backend servers such as an authentication backend and a application backend.</p>\n<h4 id=\"bypass-the-proxy\">Bypass the Proxy</h4>\n<p>(Added in v1.13.0.) The proxy can be optionally bypassed based on the return from a function. The function can inspect the HTTP request, response, and any given proxy options. It must return either <code><span class=\"literal\">false</span></code> or a URL path that will be served <em>instead</em> of continuing to proxy the request.</p>\n<p>For example, the configuration below will not proxy HTTP requests that originate from a browser. This is similar to the <code>historyApiFallback</code> option: browser requests will receive the HTML file as normal but API requests will be proxied to the backend server.</p>\n<pre data-language=\"javascript\">{\n    devServer: {\n        proxy: {\n            '/some/path*': {\n                target: 'https://other-server.example.com',\n                secure: false,\n                bypass: function(req, res, proxyOptions) {\n                    if (req.headers.accept.indexOf('html') !== -1) {\n                        console.log('Skipping proxy for browser request.');\n                        return '/index.html';\n                    }\n                },\n            },\n        },\n    },\n}</pre>\n<h3 id=\"webpack-dev-server-cli\">webpack-dev-server CLI</h3>\n<pre data-language=\"javascript\">$ webpack-dev-server &lt;entry&gt;</pre>\n<p>All <em>webpack</em> <a href=\"cli\">CLI</a> options are valid for the <em>webpack-dev-server</em> CLI too, but there is no <code>&lt;output&gt;</code> default argument. For the <em>webpack-dev-server</em> CLI a <code>webpack.config.js</code> (or the file passed by the <code>--config</code> option) is accepted as well.</p>\n<p>There are some additional options:</p>\n<ul>\n<li>\n<code>--content-base &lt;file/directory/url/port&gt;</code>: base path for the content.</li>\n<li>\n<code>--quiet</code>: don’t output anything to the console.</li>\n<li>\n<code>--no-info</code>: suppress boring information.</li>\n<li>\n<code>--colors</code>: add some colors to the output.</li>\n<li>\n<code>--no-colors</code>: don’t used colors in the output.</li>\n<li>\n<code>--host &lt;hostname/ip&gt;</code>: hostname or IP.</li>\n<li>\n<code>--port &lt;number&gt;</code>: port.</li>\n<li>\n<code>--inline</code>: embed the <em>webpack-dev-server</em> runtime into the <em>bundle</em>.</li>\n<li>\n<code>--hot</code>: adds the <code>HotModuleReplacementPlugin</code> and switch the server to <em>hot mode</em>. Note: make sure you don’t add <code>HotModuleReplacementPlugin</code> twice.</li>\n<li>\n<code>--hot --inline</code> also adds the <code>webpack/hot/dev-server</code> entry.</li>\n<li>\n<code>--lazy</code>: no watching, compiles on request (cannot be combined with <code>--hot</code>).</li>\n<li>\n<code>--https</code>: serves <em>webpack-dev-server</em> over HTTPS Protocol. Includes a self-signed certificate that is used when serving the requests.</li>\n<li>\n<code>--cert</code>, <code>--cacert</code>, <code>--key</code>: Paths the certificate files.</li>\n</ul>\n<p>Configuration under <code>devServer</code> in <code>webpack.config.js</code> are merged with the CLI options. For options under <code>devServer</code> see next section.</p>\n<h3 id=\"api\">API</h3>\n<pre data-language=\"javascript\">var WebpackDevServer = require(\"webpack-dev-server\");\nvar webpack = require(\"webpack\");\n\nvar compiler = webpack({\n  // configuration\n});\nvar server = new WebpackDevServer(compiler, {\n  // webpack-dev-server options\n\n  contentBase: \"/path/to/directory\",\n  // or: contentBase: \"http://localhost/\",\n\n  hot: true,\n  // Enable special support for Hot Module Replacement\n  // Page is no longer updated, but a \"webpackHotUpdate\" message is send to the content\n  // Use \"webpack/hot/dev-server\" as additional module in your entry point\n  // Note: this does _not_ add the `HotModuleReplacementPlugin` like the CLI option does. \n\n  // Set this as true if you want to access dev server from arbitrary url.\n  // This is handy if you are using a html5 router.\n  historyApiFallback: false,\n\n  // Set this if you want webpack-dev-server to delegate a single path to an arbitrary server.\n  // Use \"*\" to proxy all paths to the specified server.\n  // This is useful if you want to get rid of 'http://localhost:8080/' in script[src],\n  // and has many other use cases (see https://github.com/webpack/webpack-dev-server/pull/127 ).\n  proxy: {\n    \"*\": \"http://localhost:9090\"\n  },\n\n  // webpack-dev-middleware options\n  quiet: false,\n  noInfo: false,\n  lazy: true,\n  filename: \"bundle.js\",\n  watchOptions: {\n    aggregateTimeout: 300,\n    poll: 1000\n  },\n  publicPath: \"/assets/\",\n  headers: { \"X-Custom-Header\": \"yes\" },\n  stats: { colors: true },\n});\nserver.listen(8080, \"localhost\", function() {});\n// server.close();</pre>\n<p>See <em><a href=\"webpack-dev-middleware\">webpack-dev-middleware</a></em> for documentation on middleware options.</p>\n<p>Notice that <em>webpack configuration</em> is not passed to <code>WebpackDevServer</code> API, thus <code>devServer</code> option in webpack configuration is not used in this case. Also, there is no <em>inline mode</em> for <code>WebpackDevServer</code> API. <code>&lt;script src=<span class=\"string\">\"http://localhost:8080/webpack-dev-server.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></span></code> should be inserted to HTML page manually.</p>\n<h3 id=\"combining-with-an-existing-server\">Combining with an existing server</h3>\n<p>You may want to run a backend server or a mock of it in development. You should <strong>not</strong> use the <em>webpack-dev-server</em> as a backend. Its only purpose is to serve static (webpacked) assets.</p>\n<p>You can run two servers side-by-side: The <em>webpack-dev-server</em> and your backend server.</p>\n<p>In this case you need to teach the webpack-generated assets to make requests to the <em>webpack-dev-server</em> even when running on a HTML-page sent by the backend server. On the other side you need to teach your backend server to generate HTML pages that include <code>script</code> tags that point to assets on the <em>webpack-dev-server</em>. In addition to that you need a connection between the <em>webpack-dev-server</em> and the <em>webpack-dev-server</em> runtime to trigger reloads on recompilation.</p>\n<p>To teach <em>webpack</em> to make requests (for chunk loading or HMR) to the <em>webpack-dev-server</em> you need to provide <strong>a full URL in the <code>output.publicPath</code></strong> option.</p>\n<p>To make a connection between <em>webpack-dev-server</em> and its runtime best, use the <em>inline mode</em> with <code>--inline</code>. The <em>webpack-dev-server</em> CLI automatically includes an entry point which establishes a WebSocket connection. (You can also use the <em>iframe</em> mode if you point <code>--content-base</code> of the <em>webpack-dev-server</em> to your backend server. <strong>If you need a websocket connection to your backend server</strong>, you’ll have to use iframe mode.</p>\n<p>When you use the <em>inline mode</em> just open the backend server URL in your web browsers. (If you use the <em>iframe mode</em> open the <code>/webpack-dev-server/</code> prefixed URL of the <em>webpack-dev-server</em>.)</p>\n<p>Summary and example:</p>\n<ul>\n<li>\n<em>webpack-dev-server</em> on port <code><span class=\"number\">8080</span></code>.</li>\n<li>backend server on port <code><span class=\"number\">9090</span></code>.</li>\n<li>generate HTML pages with <code>&lt;script src=<span class=\"string\">\"http://localhost:8080/assets/bundle.js\"</span>&gt;</code>.</li>\n<li>webpack configuration with <code>output.publicPath = <span class=\"string\">\"http://localhost:8080/assets/\"</span></code>.</li>\n<li>when compiling files for production, use <code>--output-public-path /assets/</code>.</li>\n<li>\n<em>inline mode</em>:<ul>\n<li>\n<code>--inline</code>.</li>\n<li>open <code>http:<span class=\"comment\">//localhost:9090</span></code>.</li>\n</ul>\n</li>\n<li>or <em>iframe mode</em>:<ul>\n<li>\n<em>webpack-dev-server</em> <code>contentBase = <span class=\"string\">\"http://localhost:9090/\"</span></code> (<code>--content-base</code>).</li>\n<li>open <code>http:<span class=\"comment\">//localhost:8080/webpack-dev-server/</span></code>.</li>\n</ul>\n</li>\n</ul>\n<p>Or use the proxy option…</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/webpack-dev-server.html\" class=\"_attribution-link\">https://webpack.github.io/docs/webpack-dev-server.html</a>\n  </p>\n</div>\n","hot-module-replacement-with-webpack":"<h1>Hot Module Replacement With Webpack</h1>\n<p><em>Note that Hot Module Replacement (HMR) is still an experimental feature.</em></p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>Hot Module Replacement (HMR) exchanges, adds, or removes modules while an application is running <strong>without</strong> a page reload.</p>\n<h3 id=\"prerequirements\">Prerequirements</h3>\n<ul>\n<li>Using Plugins: <a href=\"http://webpack.github.io/docs/using-plugins.html\">http://webpack.github.io/docs/using-plugins.html</a>\n</li>\n<li>Code Splitting: <a href=\"http://webpack.github.io/docs/code-splitting.html\">http://webpack.github.io/docs/code-splitting.html</a>\n</li>\n<li>webpack-dev-server: <a href=\"http://webpack.github.io/docs/webpack-dev-server.html\">http://webpack.github.io/docs/webpack-dev-server.html</a>\n</li>\n</ul>\n<h3 id=\"how-does-it-work\">How does it work?</h3>\n<p>Webpacks adds a small HMR runtime to the bundle during building that runs inside your app. When the build completes, Webpack does not exit but stays active, watching the source files for changes. If Webpack detects a source file change, it rebuilds only the changed module(s). Depending on the settings, Webpack will either send a signal to the HMR runtime, or the HMR runtime will poll webpack for changes. Either way, the changed module is sent to the HMR runtime which then tries to apply the hot update. First it checks whether the updated module can self-accept. If not, it checks those modules that have <code>require</code>d the updated module. If these too do not accept the update, it bubbles up another level, to the modules that <code>require</code>d the modules that <code>require</code>d the changed module. This bubbling-up will continue until either the update is accepted, or the app entry point is reached, in which case hot update fails.</p>\n<h4 id=\"from-the-app-view\">From the app view</h4>\n<p>The app code asks the HMR runtime to check for updates. The HMR runtime downloads the updates (async) and tell the app code that an update is available. The app code asks the HMR runtime to apply updates. The HMR runtime applies the update (sync). The app code may or may not require user interaction in this process (you decide).</p>\n<h4 id=\"from-the-compiler-view\">From the compiler (webpack) view</h4>\n<p>In addition to the normal assets the compiler needs to emit the “Update” to allow updating from previous version to this version. The “Update” contains two parts:</p>\n<ol>\n<li>the update manifest (json)</li>\n<li>one or multiple update chunks (js)</li>\n</ol>\n<p>The manifest contains the new compilation hash and a list of all update chunks (2.).</p>\n<p>The update chunks contains code for all updated modules in this chunk (or a flag if a module was removed).</p>\n<p>The compiler additionally makes sure that module and chunk ids are consistent between these builds. It uses a “records” json file to store them between builds (or it stores them in memory).</p>\n<h4 id=\"from-the-module-view\">From the module view</h4>\n<p>HMR is a opt-in feature, so it only affects modules that contains HMR code. The documentation describes the API that is available in modules. In general the module developer writes handlers that are called when a dependency of this module is updated. He can also write a handler that are called when this module is updated.</p>\n<p>In most cases it’s not mandatory to write HMR code in every module. If a module has no HMR handlers the update bubbles up. This means a single handler can handle an update to a complete module tree. If a single module in this tree is updated, the complete module tree is reloaded (only reloaded not transferred).</p>\n<h4 id=\"from-the-hmr-runtime-view\">From the HMR runtime view (technical)</h4>\n<p>For the module system runtime is additional code emitted to track module <code>parents</code> and <code>children</code>.</p>\n<p>On the management side the runtime supports two methods: <code>check</code> and <code>apply</code>.</p>\n<p>A <code>check</code> does a HTTP request to the update manifest. When this request fails, there is no update available. Otherwise the list of updated chunks is compared to the list of currently loaded chunks. For each loaded chunk the corresponding update chunk is downloaded. All module updates as stored in the runtime as update. The runtime switches into the <code>ready</code> state, meaning an update has been downloaded and is ready to be applied.</p>\n<p>For each new chunk request in the ready state the update chunk is also downloaded.</p>\n<p>The <code>apply</code> method flags all updated modules as invalid. For each invalid module there need to be a update handler in the module or update handlers in every parent. Else the invalid bundles up and mark all parents as invalid too. This process continues until no more “bubble up” occurs. If it bubbles up from an entry point the process fails.</p>\n<p>Now all invalid modules are disposed (dispose handler) and unloaded. Then the current hash is updated and all “accept” handlers are called. The runtime switches back to the <code>idle</code> state and everything continues as normal.</p>\n<h4 id=\"generated-files\">Generated files (technical)</h4>\n<p>The left side represents the initial compiler pass. The right side represents an additional pass with module 4 and 9 updated.</p>\n<p><img src=\"http://webpack.github.io/assets/HMR.svg\" alt=\"generated update chunks\"></p>\n<h3 id=\"what-can-i-do-with-it\">What can I do with it?</h3>\n<p>You can use it in development as LiveReload replacement. Actually the webpack-dev-server supports a hot mode which try to update with HMR before trying to reload the whole page. You only need to add the <code>webpack/hot/dev-server</code> entry point and call the dev-server with <code>--hot</code>.</p>\n<p><code>webpack/hot/dev-server</code> reloads the entire page after the HMR update fails. If you want to <a href=\"https://github.com/webpack/webpack/issues/418\">reload the page on your own</a>, you can add <code>webpack/hot/only-dev-server</code> to the entry point instead.</p>\n<p>You can also use it in production as update mechanisms. Here you need to write you own management code that integrates HMR with your app.</p>\n<p>Some loaders already generate modules that are hot-updateable. I. e. the <code>style-loader</code> can exchange the stylesheet. You don’t need to do something special.</p>\n<h3 id=\"what-is-needed-to-use-it\">What is needed to use it?</h3>\n<p>A module can only be updated if you “accept” it. So you need to <code>module.hot.accept</code> the module in the parents or the parents of the parents… I. e. a Router is a good place or a subview.</p>\n<p>If you only want to use it with the webpack-dev-server, just add <code>webpack/hot/dev-server</code> as entry point. Else you need some HMR management code that calls <code>check</code> and <code>apply</code>.</p>\n<p>You need to enable records in the Compiler to track module id between processes. (watch mode and the webpack-dev-server keep records in memory, so you don’t need it for development)</p>\n<p>You need to enable HMR in the Compiler to let it add the HMR runtime.</p>\n<h3 id=\"what-makes-it-so-cool\">What makes it so cool?</h3>\n<ul>\n<li>It’s LiveReload but for every module kind.</li>\n<li>You can use it in production.</li>\n<li>The updates respect your Code Splitting and only download updates for the used parts of your app.</li>\n<li>You can use in for a part of your application and it doesn’t affect other modules</li>\n<li>If HMR is disabled all HMR code is removed by the compiler (wrap it in <code><span class=\"keyword\">if</span>(module.hot)</code>\n</li>\n</ul>\n<h3 id=\"caveats\">Caveats</h3>\n<ul>\n<li>It’s experimental and not tested so well.</li>\n<li>Expect some bugs</li>\n<li>Theoretically usable in production, but it maybe too early to use it for something serious</li>\n<li>The module ids need to be tracked between compilations so you need to store them (<code>records</code>)</li>\n<li>Optimizer cannot optimize module ids anymore after the first compilation. A bit impact on bundle size.</li>\n<li>HMR runtime code increase bundle size.</li>\n<li>For production usage additional testing is required to test the HMR handlers. This could be pretty difficult.</li>\n</ul>\n<h2 id=\"tutorial\">Tutorial</h2>\n<p>To use hot code replacement with webpack you need four things:</p>\n<ul>\n<li>records (<code>--records-path</code>, <code>recordsPath: ...</code>)</li>\n<li>global enable hot code replacement (<code>HotModuleReplacementPlugin</code>)</li>\n<li>hot replacement code in your code <code>module.hot.accept</code>\n</li>\n<li>hot replacement management code in your code <code>module.hot.check</code>, <code>module.hot.apply</code>\n</li>\n</ul>\n<p>A small testcase:</p>\n<pre data-language=\"javascript\">/* style.css */\nbody {\n    background: red;\n}</pre>\n<pre data-language=\"javascript\">/* entry.js */\nrequire(\"./style.css\");\ndocument.write(\"&lt;input type='text' /&gt;\");</pre>\n<p>That’s enough to use hot code replacement with the dev-server.</p>\n<pre data-language=\"javascript\">npm install webpack webpack-dev-server -g\nnpm install webpack css-loader style-loader\nwebpack-dev-server ./entry --hot --inline --module-bind \"css=style\\!css\"</pre>\n<p>The dev server provides in memory records, which is good for development.</p>\n<p>The <code>--hot</code> switch enables hot code replacement.</p>\n<blockquote><p>This adds the <code>HotModuleReplacementPlugin</code>. Make sure to use either the <code>--hot</code> flag, or the <code>HotModuleReplacementPlugin</code> in your <code>webpack.config.js</code>, but never both at the same time as in that case, the HMR plugin will actually be added twice, breaking the setup.</p></blockquote>\n<p>There is special management code for the dev-server at <code>webpack/hot/dev-server</code>, which is automatically added by <code>--inline</code>. (You don’t have to add it to your <code>webpack.config.js</code>)</p>\n<p>The <code>style-loader</code> already includes hot replacement code.</p>\n<p>If you visit <a href=\"http://localhost:8080/bundle\">http://localhost:8080/bundle</a> you should see the page with a red background and a input box. Type some text into the input box and edit <code>style.css</code> to have another background color.</p>\n<p>Voilà… The background updates but without full page refresh. Text and selection in the input box should stay.</p>\n<p>Read more about how to write you own hot replacement (management) code: <a href=\"hot-module-replacement\">hot module replacement</a></p>\n<p>Check the <a href=\"http://webpack.github.io/example-app/\">example-app</a> for a demo without coding. (<em>Note: It’s a bit old, so don’t look at the source code, because the HMR API changed a bit in between</em>)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/hot-module-replacement-with-webpack.html\" class=\"_attribution-link\">https://webpack.github.io/docs/hot-module-replacement-with-webpack.html</a>\n  </p>\n</div>\n","list-of-hints":"<h1>List Of Hints</h1>\n<blockquote>\n<p><strong>Notes</strong>:</p>\n<p>Not every hint apply to all apps. Some hints have positive and negative effects so it <strong>depends on your needs</strong>.</p>\n<p>Hints are <strong>ordered by importance</strong> (most important comes first), but importance heavily depends on the app.</p>\n<p>Hints are categorized by App, Developer and/or Build performance. Sometimes multiple categories apply.</p>\n<p><strong>App performance</strong>: Your app perform better. This affects the user of your app and/or the cost of serving the app to the user.</p>\n<p><strong>Developer performance</strong>: This makes it easier for your developers to write the app.</p>\n<p><strong>Build performance</strong>: The build of your app is faster and/or more stable.</p>\n</blockquote>\n<h3 id=\"app-performance\">App performance</h3>\n<ul>\n<li>Minimize your bundle with the <code>UglifyJsPlugin</code> (App, for every app)</li>\n<li>Use Code Splitting: improves initial download size, at the cost of more requests (App, for big apps)<ul><li>Hint for React apps: Use the react-proxy-loader</li></ul>\n</li>\n<li>Add hashes to output files and enable Long Caching time on server: improves times for second visit (App, for every app)<ul>\n<li>Hint: Use records to keep module/chunk ids as consistent as possible</li>\n<li>Hint for static HTML pages: Use the html-webpack-plugin</li>\n</ul>\n</li>\n<li>Don’t delete no longer used assets immediately after they are no longer used. Wait a few weeks before deleting them from server. Result: No 404s for users that keep browser windows open for long time (App, for every app)</li>\n<li>Use the <code>DefinePlugin</code> to pass configuration from config to app: Embedded into bundle, Conditional code is removed with minimized (App, for apps with configuration)<ul><li>Use the <code>EnvironmentPlugin</code> to pass <code>process.env</code> from build to app</li></ul>\n</li>\n<li>Check bundle stats with analyse tool for problems: Improve total download size, Improve cohesion (App/Developer, for big apps)<ul>\n<li>Hint: Use the <code>stats-webpack-plugin</code> or the <code>--json</code> CLI option to get the stats</li>\n<li>Hint: Use the <code>profile</code> option to gather more performance stats</li>\n</ul>\n</li>\n<li>Extract common modules into separate script file: improves caching for switching between pages, at the cost of additional requests for the initial page (App, for app with multiple entry points)</li>\n<li>Remove duplication with <code>npm dedupe</code>/<code>npm <span class=\"number\">4</span></code> and the <code>DedupePlugin</code>: improve total download size (App, for app using npm)</li>\n<li>Do CSS processing with webpack: (App/Developer, for every app)<ul>\n<li>static assets (font/image/…) processing with webpack. (for every app)<ul><li>inline static assets with the url-loader: improves time to initial view (by reducing roundtrips), at the cost of total download size (for every app)</li></ul>\n</li>\n<li>Separate CSS file with the extract-text-webpack-plugin: eliminates FOUC for prerendered markup, improves time to initial view (by parallizing CSS and JS downloading) (for app with many CSS or prerendered content)</li>\n</ul>\n</li>\n<li>Fit the chunking to your needs via many Code Splitting Points and the chunk optimization plugins (<code>LimitChunkCountPlugin</code>, <code>MinChunkSizePlugin</code>, <code>AggressiveMergingPlugin</code>, )</li>\n<li>Preload additional chunks by adding a script tag and deferring the chunk load: Faster initial view (App, for routed apps)</li>\n</ul>\n<h3 id=\"developer-performance\">Developer performance</h3>\n<ul>\n<li>Use a configuration file (webpack.config.js) instead of passing CLI options: Easier to mantain, more options (Developer, for every app)</li>\n<li>Don’t rewrite incompatible JS, but use <code>imports-loader</code>/<code>exports-loader</code> to make it compatible: Easier to upgrade to new version (Developer, for every app)</li>\n<li>Use webpack devtools for debugging in browser: Better debugging experiance, real source code, real module names, at the cost of slower build and difference to production build (Developer, for every app)</li>\n<li>Write modules with ES6 module syntax: This is more future proof and allows more advanced optimizations (Developer/App/Build, for every app)<ul>\n<li>Current Status: Use the <code>babel-loader</code> to transform ES6 module syntax to CommonJS</li>\n<li>Future: webpack 2 understand ES6 module syntax</li>\n<li>Future: webpack enables advanced optimizations</li>\n</ul>\n</li>\n<li>Use <code>output.library</code> to build libraries that export stuff (Developer, for libraries)</li>\n<li>Use <code>externals</code> to declare dependencies of your bundle on the target environment (Developer, for libraries and apps)</li>\n<li>Enable Hot Module Replacement (HMR) for faster page updates (Developer, for every app)<ul>\n<li>Hint for React apps: Use the <code>react-hot-loader</code> or <code>react-transform</code>\n</li>\n<li>Hint for CSS: Use the <code>style-loader</code> (without <code>extract-text-webpack-plugin</code>) for HMR</li>\n<li>Hint for custom routers: Write custom handlers for updates at least at router level</li>\n</ul>\n</li>\n<li>Use Javascript in webpack config to share common configuration etc. (Developer, for every app)</li>\n<li>Use <code>resolve.root</code> to configure a path to your app modules: Allows shorter references to dependencies (Developer, for big apps)</li>\n<li>Use <code>karma</code> with <code>karma-webpack</code> to test modules in the browser (Developer, for every app)</li>\n<li>Use <code>target</code> to build for other environments than the browser (Developer, for non-browser apps)</li>\n<li>Use the <code>BannerPlugin</code> to add comments to the output assets: Licensing (Developer, for libraries)</li>\n<li>Use <code>debug</code> to switch loaders to debug mode which provide more debug information (if the loader supports it): Better debugging experience (Developer, for every app)</li>\n<li>Use <code>include</code> instead of <code>exclude</code> in <code>module.loaders</code>: less error prone and easier to add paths (Developer, for every app)</li>\n</ul>\n<h3 id=\"build-performance\">Build performance</h3>\n<ul>\n<li>Use incremental compilation: faster second build (Build, for every app)<ul><li>Hint: Switch watching to polling with the <code>watchOptions.poll</code> option only if watching over network or inside of VMs</li></ul>\n</li>\n<li>Use in-memory compilation for development build: faster build, less disk usage, at the cost of memory usage (Build, for every app)<ul><li>Hint: Use the webpack-dev-server</li></ul>\n</li>\n<li>Use multiple entry points instead of running webpack multiple times: Faster build, entry points can share chunks (Build/App, for multi page apps)</li>\n<li>Pass an array of configurations to webpack to compile them in parallel while sharing disk cache and watchers: Faster builds and rebuilds, less problems with too many watchers (Build, for big apps with multiple configurations)</li>\n<li>Use <code>module.noParse</code> for big CommonJS files without dependencies: Faster build times (Build, for app with these modules)</li>\n</ul>\n<h3 id=\"unsorted\">Unsorted</h3>\n<blockquote><p>Feel free to add more hints to any category. If you were to add it or in which order you can add it to the <code>Unsorted</code> section and some more experienced user will pick it up.</p></blockquote><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/list-of-hints.html\" class=\"_attribution-link\">https://webpack.github.io/docs/list-of-hints.html</a>\n  </p>\n</div>\n","cli":"<h1>Cli</h1>\n<h3 id=\"installation\">Installation</h3>\n<pre data-language=\"javascript\">$ npm install webpack -g</pre>\n<p>The <code>webpack</code> command is now available globally.</p>\n<h3 id=\"pure-cli\">Pure CLI</h3>\n<pre data-language=\"javascript\">webpack &lt;entry&gt; &lt;output&gt;</pre>\n<h4 id=\"entry\"><code>entry</code></h4>\n<p>Pass a file or a request string. You can pass multiple entries (every entry is loaded on startup).</p>\n<p>If you pass a pair in the form <code>&lt;name&gt;=<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">request</span>&gt;</span></span></code> you can create an additional entry point.</p>\n<p>It will be mapped to the configuration option <code>entry</code>.</p>\n<h4 id=\"output\"><code>output</code></h4>\n<p>Pass a path to a file.</p>\n<p>It will be mapped to the configuration options <code>output.path</code> and <code>output.filename</code>.</p>\n<h4 id=\"configuration-options\">Configuration options</h4>\n<p>Many configuration options are mapped from CLI options. I. e. <code>--debug</code> maps to <code>debug: <span class=\"literal\">true</span></code>, or <code>--output-library-target</code> to <code>output.libraryTarget</code>.</p>\n<p>You see a list of all options, if you don’t pass any option.</p>\n<h4 id=\"plugins\">Plugins</h4>\n<p>Some plugins are mapped to CLI options. I. e. <code>--define &lt;string&gt;=<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">string</span>&gt;</span></span></code> maps to the <code>DefinePlugin</code>.</p>\n<p>You see a list of all options, if you don’t pass any option.</p>\n<h4 id=\"development-shortcut-d\">Development shortcut <code>-d</code>\n</h4>\n<p>Equals to <code>--debug</code> <code>--devtool source-map</code> <code>--output-pathinfo</code></p>\n<h4 id=\"production-shortcut-p\">Production shortcut <code>-p</code>\n</h4>\n<p>Equals to <code>--optimize-minimize</code> <code>--optimize-occurence-order</code></p>\n<h4 id=\"watch-mode-watch\">Watch mode <code>--watch</code>\n</h4>\n<p>Watches all dependencies and recompile on change.</p>\n<h4 id=\"configuration-file-config-example-config-js\">Configuration file <code>--config example.config.js</code>\n</h4>\n<p>Specifies a different configuration file to pick up. Use this if you want to specify something different than <code>webpack.config.js</code>, which is the default</p>\n<h4 id=\"display-options\">Display options</h4>\n<h5 id=\"progress\"><code>--progress</code></h5>\n<p>Display a compilation progress to stderr.</p>\n<h5 id=\"json\"><code>--json</code></h5>\n<p>Write JSON to stdout instead of a human readable format.</p>\n<blockquote><p>Hint: Try to put the result into the <a href=\"http://webpack.github.com/analyse\">analyse tool</a>.</p></blockquote>\n<h5 id=\"no-color\"><code>--no-color</code></h5>\n<p>Disable colors to display the statistics.</p>\n<h5 id=\"sort-modules-by-sort-chunks-by-sort-assets-by\">\n<code>--sort-modules-by</code>, <code>--sort-chunks-by</code>, <code>--sort-assets-by</code>\n</h5>\n<p>Sort the modules/chunks/assets list by a column.</p>\n<h5 id=\"display-chunks\"><code>--display-chunks</code></h5>\n<p>Display the separation of the modules into chunks.</p>\n<h5 id=\"display-reasons\"><code>--display-reasons</code></h5>\n<p>Show more information about the reasons why a module is included.</p>\n<h5 id=\"display-error-details\"><code>--display-error-details</code></h5>\n<p>Show more information about the errors. I. e. this shows which paths are tried while resolving a module.</p>\n<h5 id=\"display-modules\"><code>--display-modules</code></h5>\n<p>Show hidden modules. Modules are hidden from output by default when they live inside directories called <code>[<span class=\"string\">\"node_modules\"</span>, <span class=\"string\">\"bower_components\"</span>, <span class=\"string\">\"jam\"</span>, <span class=\"string\">\"components\"</span>]</code></p>\n<h4 id=\"profiling\">Profiling</h4>\n<p>If you wish to have a more in-depth idea of what is taking how long, you can use the <code>--profile</code> switch. This will cause WebPack to display more detailed timing informations. Combine this with the switches above to get a very detailed message and information set, which will contain the timings of your modules.</p>\n<h5 id=\"the-timing-keys\">The timing “keys”</h5>\n<ul>\n<li>\n<code>factory</code>: The time it took to build the module information.</li>\n<li>\n<code>building</code>: The time that was spent building the module (loaders, for example).</li>\n<li>\n<code>dependencies</code>: The time that was spent gathering and conencting the dependencies.</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/cli.html\" class=\"_attribution-link\">https://webpack.github.io/docs/cli.html</a>\n  </p>\n</div>\n","list-of-loaders":"<h1>List Of Loaders</h1>\n<h3 id=\"basic\">basic</h3>\n<ul>\n<li>\n<a href=\"https://github.com/webpack/json-loader\"><code>json</code></a>: Loads file as JSON</li>\n<li>\n<a href=\"https://github.com/kentcdodds/hson-loader\"><code>hson</code></a>: Loads HanSON file (JSON for Humans) as JSON object</li>\n<li>\n<a href=\"https://github.com/webpack/raw-loader\"><code>raw</code></a>: Loads raw content of a file (as utf-8)</li>\n<li>\n<a href=\"https://github.com/webpack/val-loader\"><code>val</code></a>: Executes code as module and consider exports as JavaScript code</li>\n<li>\n<a href=\"https://github.com/gajus/to-string\"><code>to-string</code></a>: Executes code as a module, casts output to a string and exports it</li>\n<li>\n<a href=\"https://github.com/webpack/imports-loader\"><code>imports</code></a>: Imports stuff to the module</li>\n<li>\n<a href=\"https://github.com/webpack/exports-loader\"><code>exports</code></a>: Exports stuff from the module</li>\n<li>\n<a href=\"https://github.com/webpack/expose-loader\"><code>expose</code></a>: Expose exports from a module to the global context</li>\n<li>\n<a href=\"https://github.com/webpack/script-loader\"><code>script</code></a>: Executes a JavaScript file once in global context (like in script tag), requires are not parsed.</li>\n<li>\n<a href=\"https://github.com/mogelbrod/apply-loader\"><code>apply</code></a>: Executes a exported JavaScript function, optionally with arguments, and exports its return value.</li>\n<li>\n<a href=\"https://github.com/Kreozot/callback-loader\"><code>callback</code></a>: Parses your JS, calls specified functions (which you implement in webpack context) and replaces them with the results</li>\n<li>\n<a href=\"https://github.com/friskfly/if-loader\"><code><span class=\"keyword\">if</span>-loader</code></a>: This is a preprocesser for the webpack module bundler. It support the <code><span class=\"keyword\">if</span></code> directive,similar to C <code>#ifdef</code> .</li>\n<li>\n<a href=\"https://github.com/webpack/source-map-loader\"><code>source-map</code></a>: Extract <code>sourceMappingURL</code> comments from modules and offer it to webpack</li>\n<li>\n<a href=\"https://github.com/naturalatlas/checksum-loader\"><code>checksum</code></a>: Computes the checksum of a file</li>\n<li>\n<a href=\"https://github.com/webpack/null-loader\"><code><span class=\"literal\">null</span></code></a>: Emits an empty module.</li>\n<li>\n<a href=\"https://github.com/nelix/cowsay-loader\"><code>cowsay</code></a>: Emits a module with a cowsay header.</li>\n<li>\n<a href=\"https://github.com/wbkd/dsv-loader\"><code>dsv</code></a>: Loads csv/tsv files.</li>\n<li>\n<a href=\"https://github.com/makio64/shader-loader\"><code>glsl</code></a>: Loads glsl files and support glsl-chunks.</li>\n<li>\n<a href=\"https://github.com/zackify/render-placement-loader\"><code>render-placement</code></a>: Adds React.render to your component for you (not very practical in most cases)</li>\n<li>\n<a href=\"https://github.com/gisikw/xml-loader\"><code>xml</code></a>: Loads XML as JSON.</li>\n<li>\n<a href=\"https://github.com/jhamlet/svg-react-loader\"><code>svg-react</code></a>: Load SVG files as JSX-ified React.createClass declarations.</li>\n<li>\n<a href=\"https://github.com/antelle/base64-loader\"><code>base64</code></a>: Loads file content as base64 string</li>\n<li>\n<a href=\"https://github.com/huston007/ng-annotate-loader\"><code>ng-annotate</code></a>: A loader to annotate dependency injections in <code>Angular.js</code> applications.</li>\n<li>\n<a href=\"https://github.com/webpack/node-loader\"><code>node</code></a>: Loads <code>.node</code> files that are produced using node-gyp.</li>\n<li>\n<a href=\"https://www.npmjs.com/package/required-loader\"><code>required</code></a>: Require a whole directory of trees in bulk. Require JS, Import CSS and imports stuff in it.</li>\n<li>\n<a href=\"https://www.npmjs.com/package/icons-loader\"><code>icons</code></a> Generates iconfont from .svg files (uses gulp-iconfont)</li>\n<li>\n<a href=\"https://www.npmjs.com/package/block-loader\"><code>block-loader</code></a> Generic loader for rewriting only parts of files, based on content start/end delimiters.</li>\n</ul>\n<h3 id=\"packaging\">packaging</h3>\n<ul>\n<li>\n<a href=\"https://github.com/webpack/file-loader\"><code>file</code></a>: Emits the file into the output folder and returns the (relative) url.</li>\n<li>\n<a href=\"https://github.com/webpack/url-loader\"><code>url</code></a>: The url loader works like the file loader, but can return a Data Url if the file is smaller than a limit.</li>\n<li>\n<a href=\"https://github.com/webpack/worker-loader\"><code>worker</code></a>: The worker loader creates a WebWorker for the provided file. The bundling of dependencies of the Worker is transparent.</li>\n<li>\n<a href=\"https://github.com/mrtnbroder/shared-worker-loader\"><code>shared-worker</code></a>: Like the worker loader, but for <a href=\"https://developer.mozilla.org/de/docs/Web/API/SharedWorker\">Shared Workers</a>.</li>\n<li>\n<a href=\"https://github.com/markdalgleish/serviceworker-loader\"><code>serviceworker</code></a>: Like the worker loader, but designed for <a href=\"http://www.w3.org/TR/service-workers\">Service Workers</a>.</li>\n<li>\n<a href=\"https://github.com/webpack/bundle-loader\"><code>bundle</code></a>: Wraps request in a <code>require.ensure</code> block (callback)</li>\n<li>\n<a href=\"https://github.com/gaearon/promise-loader\"><code>promise</code></a>: Wraps request in a <code>require.ensure</code> block (promise)</li>\n<li>\n<a href=\"https://github.com/NekR/async-module-loader\"><code>async-module</code></a>: Same as <code>bundle</code>, but provides a way to handle script loading errors. Wraps request in a <code>require.ensure</code> block (callback, errback)</li>\n<li>\n<a href=\"https://github.com/webpack/react-proxy-loader\"><code>react-proxy</code></a>: Code Splitting for react components.</li>\n<li>\n<a href=\"https://github.com/gaearon/react-hot-loader\"><code>react-hot</code></a>: Allows to live-edit React components while keeping them mounted and preserving their state.</li>\n<li>\n<a href=\"https://github.com/tcoopman/image-webpack-loader\"><code>image</code></a>: Compresses your images. Ideal to use together with <code>file</code> or <code>url</code>.</li>\n<li>\n<a href=\"https://github.com/thetalecrafter/img-loader\"><code>img</code></a>: Load and compress images with imagemin.</li>\n<li>\n<a href=\"https://github.com/herrstucki/responsive-loader\"><code>responsive</code></a>: Create multiple resized images for use with <code>srcset</code> and CSS media queries</li>\n<li>\n<a href=\"https://github.com/pozadi/svgo-loader\"><code>svgo</code></a>: Compresses SVG images using <a href=\"https://github.com/svg/svgo\">svgo</a> library</li>\n<li>\n<a href=\"https://github.com/kisenka/webpack-svg-sprite-loader\"><code>svg-sprite</code></a>: Like style-loader but for SVG: it creates a single SVG sprite from a set of images, appends it to DOM and returns relative <code>symbol</code> url to be used with svg’s <code>&lt;use&gt;</code>.</li>\n<li>\n<a href=\"https://github.com/tptee/line-art-loader\"><code>line-art</code></a>: Inlines SVG files, converting all of its nodes to paths. Useful for line art animations in React components.</li>\n<li>\n<a href=\"https://github.com/deepsweet/baggage-loader\"><code>baggage</code></a>: Automatically require any resources related to the required one</li>\n<li>\n<a href=\"https://github.com/JonDum/polymer-loader\"><code>polymer</code></a>: Process HTML &amp; CSS with preprocessor of choice and <code>require()</code> Web Components like first-class modules.</li>\n<li>\n<a href=\"https://github.com/bestander/uglify-loader\"><code>uglify</code></a>: Uglify contents of a module. Unlike uglify plugin you can minify with mangling only your application files and not the libraries</li>\n<li>\n<a href=\"https://github.com/bestander/html-minify-loader\"><code>html-minify</code></a>: Minifies HTML using <a href=\"https://github.com/Moveo/minimize\">minimize</a>\n</li>\n<li>\n<a href=\"https://github.com/vuejs/vue-loader\"><code>vue</code></a>: Load single-file Vue.js components as modules, with loader-support for preprocessors.</li>\n<li>\n<a href=\"https://github.com/timoxley/tojson-loader\"><code>tojson</code></a> Serialize module exports as JSON. Cache generated static data as JSON at build time.</li>\n<li>\n<a href=\"https://github.com/bmagnantb/zip-it-loader\"><code>zip-it</code></a> Convert files and directories to zip. Great with <code>file</code>.</li>\n<li>\n<a href=\"https://github.com/nickdeis/lzstring-loader\"><code>lzstring</code></a> Compresses large strings inline using lz-string, and decompresses them at runtime</li>\n<li>\n<a href=\"https://github.com/peerigon/modernizr-loader\"><code>modernizr</code></a> Get your modernizr build bundled with webpack</li>\n</ul>\n<h3 id=\"dialects\">dialects</h3>\n<ul>\n<li>\n<a href=\"https://github.com/webpack/coffee-loader\"><code>coffee</code></a>: Loads coffee-script like JavaScript</li>\n<li>\n<a href=\"https://github.com/jsifalda/coffee-jsx-loader\"><code>coffee-jsx</code></a>: Loads coffee-script with JSX like JavaScript</li>\n<li>\n<a href=\"https://github.com/webpack/coffee-redux-loader\"><code>coffee-redux</code></a>: Loads coffee-script like JavaScript</li>\n<li>\n<a href=\"https://github.com/webpack/json5-loader\"><code>json5</code></a>: Like json, but not so strict.</li>\n<li>\n<a href=\"https://github.com/shama/es6-loader\"><code>es6</code></a>: Loads ES6 modules. (old)</li>\n<li>\n<a href=\"https://github.com/conradz/esnext-loader\"><code>esnext</code></a>: Transpile ES6 code using <a href=\"https://github.com/esnext/esnext\">esnext</a>.</li>\n<li>\n<a href=\"https://github.com/babel/babel-loader\"><code>babel</code></a>: Turn ES6 code into vanilla ES5 using <a href=\"https://github.com/babel/babel\">Babel</a>.</li>\n<li>\n<a href=\"https://github.com/pjeby/regenerator-loader\"><code>regenerator</code></a>: Use ES6 generators via Facebook’s <a href=\"http://facebook.github.io/regenerator/\">Regenerator</a> module.</li>\n<li>\n<a href=\"https://github.com/appedemic/livescript-loader\"><code>livescript</code></a>: Loads LiveScript like JavaScript</li>\n<li>\n<a href=\"https://github.com/jlongster/sweetjs-loader\"><code>sweetjs</code></a>: Use sweetjs macros.</li>\n<li>\n<a href=\"https://github.com/jupl/traceur-loader\"><code>traceur</code></a>: Use future JavaScript features with <a href=\"https://github.com/google/traceur-compiler\">Traceur</a>.</li>\n<li>\n<a href=\"https://github.com/TypeStrong/ts-loader\"><code>ts</code></a>: Loads TypeScript like JavaScript.</li>\n<li>\n<a href=\"https://github.com/andreypopp/typescript-loader\"><code>typescript</code></a>: Loads TypeScript like JavaScript.</li>\n<li>\n<a href=\"https://github.com/s-panferov/awesome-typescript-loader\"><code>awesome-typescript</code></a>: Loads TypeScript like JavaScript with watching support. <strong>Works with TypeScript 1.5-alfa</strong>\n</li>\n<li>\n<a href=\"https://github.com/denvned/webpack-typescript\"><code>webpack-typescript</code></a>: Loads TypeScript like JavaScript. Supports watch mode and source maps. Works with TypeScript 1.5, 1.6, and nightly builds of TypeScript 1.7 and 1.8.</li>\n<li>\n<a href=\"https://www.npmjs.com/package/purs-loader\"><code>purs</code></a>: Loads <a href=\"http://www.purescript.org/\">PureScript</a> like JavaScript.</li>\n<li>\n<a href=\"https://github.com/DragonsInn/oj-loader\"><code>oj</code></a>: Loads <a href=\"https://github.com/musictheory/oj\">OJ</a> (an Objective-C like language) files and compiles them to plain JavaScript.</li>\n<li>\n<a href=\"https://github.com/rtfeldman/elm-webpack-loader\"><code>elm-webpack</code></a>: Loads <a href=\"http://elm-lang.org/\">Elm</a> files and compiles them to plain JavaScript.</li>\n<li>\n<a href=\"https://github.com/collardeau/miel-loader\"><code>miel</code></a>: Loads <a href=\"https://github.com/collardeau/miel\">Miel</a> syntax and compiles to JavaScript.</li>\n<li>\n<a href=\"https://github.com/girvo/wisp-loader\"><code>wisp</code></a>: Loads <a href=\"https://github.com/Gozala/wisp\">Wisp</a> modules and compiles them to JavaScript.</li>\n<li>\n<a href=\"https://github.com/jbr/sibilant-webpack-loader\"><code>sibilant</code></a>: Loads <a href=\"https://github.com/jbr/sibilant\">Sibilant</a> files and compiles them to JavaScript.</li>\n</ul>\n<h3 id=\"templating\">templating</h3>\n<ul>\n<li>\n<a href=\"https://github.com/webpack/html-loader\"><code>html</code></a>: Exports HTML as string, require references to static resources.</li>\n<li>\n<a href=\"https://github.com/Wizcorp/dom-loader\"><code>dom</code></a>: Exports HTML in a DOM element container.</li>\n<li>\n<a href=\"https://github.com/esnunes/riotjs-loader\"><code>riot</code></a>: Load RiotJS tags and convert them to javascript.</li>\n<li>\n<a href=\"https://github.com/webpack/jade-loader\"><code>jade</code></a>: Loads jade template and returns a function</li>\n<li>\n<a href=\"https://github.com/bline/jade-html-loader\"><code>jade-html</code></a>: Loads jade template and returns generated HTML</li>\n<li>\n<a href=\"https://github.com/halhenke/jade-react-loader\"><code>jade-react</code></a>: Uses jade templates for React rendering instead of JSX</li>\n<li>\n<a href=\"https://github.com/jtangelder/template-html-loader\"><code>template-html</code></a>: Loads any template with consolidate.js and returns generated HTML</li>\n<li>\n<a href=\"https://github.com/altano/handlebars-loader\"><code>handlebars</code></a>: Loads handlebars template and returns a function</li>\n<li>\n<a href=\"https://github.com/emaphp/handlebars-template-loader\"><code>handlebars-template-loader</code></a>: Loads handlebars template and returns a function (alternative)</li>\n<li>\n<a href=\"https://github.com/avaly/dust-loader\"><code>dust</code></a>: Loads dust template and returns a function</li>\n<li>\n<a href=\"https://github.com/rstacruz/ractive-loader\"><code>ractive</code></a>: Pre-compiles Ractive templates for interactive DOM manipulation</li>\n<li>\n<a href=\"https://github.com/petehunt/jsx-loader\"><code>jsx</code></a>: Transform jsx code for <a href=\"http://facebook.github.io/react/\">React</a> to js code.</li>\n<li>\n<a href=\"https://github.com/AlexanderPavlenko/react-templates-loader\"><code>react-templates</code></a>: Loads react-template and returns a function</li>\n<li>\n<a href=\"https://github.com/yoshdog/emblem-loader\"><code>em</code></a>: Compiles <a href=\"http://emblemjs.com/\">Emblem</a> to Handlebars.js</li>\n<li>\n<a href=\"https://github.com/okonet/ejs-loader\"><code>ejs</code></a>: Loads EJS (<a href=\"http://underscorejs.org/#template\">underscore</a>( templating engine) template and returns a pre-compiled function</li>\n<li>\n<a href=\"https://github.com/deepsweet/mustache-loader\"><code>mustache</code></a>: Pre-compiles Mustache templates with <a href=\"https://github.com/twitter/hogan.js\">Hogan.js</a> and returns a function</li>\n<li>\n<a href=\"https://github.com/okonet/yaml-loader\"><code>yaml</code></a>: Converts YAML to JSON</li>\n<li>\n<a href=\"https://github.com/elliottsj/front-matter-loader\"><code>front-matter</code></a>: Extracts YAML frontmatter</li>\n<li>\n<a href=\"https://github.com/peerigon/markdown-loader\"><code>markdown</code></a>: Compiles Markdown to HTML</li>\n<li>\n<a href=\"https://github.com/unindented/remarkable-loader\"><code>remarkable</code></a>: Compiles Markdown to HTML using the Remarkable parser</li>\n<li>\n<a href=\"https://github.com/unindented/markdown-it-loader\"><code>markdown-it</code></a>: Compiles Markdown to HTML using the markdown-it parser</li>\n<li>\n<a href=\"https://github.com/teux/ng-cache-loader\"><code>ng-cache</code></a>: Puts HTML partials in the Angular’s $templateCache</li>\n<li>\n<a href=\"https://github.com/WearyMonkey/ngtemplate-loader\"><code>ngtemplate</code></a>: Bundles your AngularJS templates and Pre-loads the template cache.</li>\n<li>\n<a href=\"https://github.com/ericdfields/hamlc-loader\"><code>hamlc</code></a>: Compiles haml-coffee templates (.hamlc) and returns a function.</li>\n<li>\n<a href=\"https://github.com/AlexanderPavlenko/haml-loader\"><code>haml</code></a>: Renders haml-coffee templates (.html.hamlc) and returns a string.</li>\n<li>\n<a href=\"https://github.com/pierreant-p/jinja-loader\"><code>jinja</code></a>: Precompiles nunjucks and jinja2 templates</li>\n<li>\n<a href=\"https://github.com/at0g/nunjucks-loader\"><code>nunjucks</code></a>: Precompiles nunjucks templates</li>\n<li>\n<a href=\"https://github.com/bendman/soy-loader\"><code>soy</code></a>: Compiles Google Closure templates and returns the namespace with render functions</li>\n<li>\n<a href=\"https://github.com/zhiyan/smarty-loader\"><code>smarty</code></a>: Pre-compiles php smarty templates and returns a function</li>\n<li>\n<a href=\"https://github.com/bradbenvenuti/template-string-loader\"><code>template-string</code></a>: Use ES6 template strings for html templates</li>\n<li>\n<a href=\"https://github.com/cusspvz/ect-loader\"><code>ect</code></a>: Compile <a href=\"http://ectjs.com/\">ectjs</a> templates</li>\n<li>\n<a href=\"https://github.com/xosuperpig/tmodjs-loader\"><code>tmodjs</code></a>: Load <a href=\"https://github.com/aui/artTemplate\">art-template</a> , a template-engine that is widely used in China.</li>\n<li>\n<a href=\"https://github.com/uxnow/layout-loader\"><code>layout</code></a>: You can use require directly in html now!</li>\n<li>\n<a href=\"https://github.com/coditorium/nodejs-swig-loader\"><code>swig</code></a>: Webpack Swig loader</li>\n<li>\n<a href=\"https://github.com/zimmo-be/twig-loader\"><code>twig</code></a>: Webpack Twig.js loader</li>\n</ul>\n<h3 id=\"styling\">styling</h3>\n<ul>\n<li>\n<a href=\"https://github.com/gowravshekar/bootstrap-webpack\"><code>bootstrap-webpack</code></a>: Loads a configuration file for Twitter Bootstrap integration using Less. Allows complete customisation via Less.</li>\n<li>\n<a href=\"https://github.com/gowravshekar/font-awesome-webpack\"><code>font-awesome-webpack</code></a>: Loads a configuration file for Font Awesome integration using Less. Allows complete customisation via Less.</li>\n<li>\n<a href=\"https://github.com/justin808/bootstrap-sass-loader\"><code>bootstrap-sass</code></a>: Loads a configuration file for Twitter Bootstrap integration using Sass. Allows complete customization via Sass.</li>\n<li>\n<a href=\"https://github.com/webpack/style-loader\"><code>style</code></a>: Add exports of a module as style to DOM</li>\n<li>\n<a href=\"https://github.com/webpack/css-loader\"><code>css</code></a>: Loads css file with resolved imports and returns css code</li>\n<li>\n<a href=\"https://github.com/webpack/less-loader\"><code>less</code></a>: Loads and compiles a less file</li>\n<li>\n<a href=\"https://github.com/jtangelder/sass-loader\"><code>sass</code></a>: Loads and compiles a scss file</li>\n<li>\n<a href=\"https://github.com/shama/stylus-loader\"><code>stylus</code></a>: Loads and compiles a stylus file</li>\n<li>\n<a href=\"https://github.com/okonet/rework-loader\"><code>rework</code></a>: Post-process CSS with <a href=\"https://github.com/reworkcss/rework\">Rework</a> and returns CSS code</li>\n<li>\n<a href=\"https://github.com/postcss/postcss-loader\"><code>postcss</code></a>: Post-process CSS with Autoprefixer and <a href=\"https://github.com/postcss/postcss#built-with-postcss\">other PostCSS plugins</a>\n</li>\n<li>\n<a href=\"https://github.com/passy/autoprefixer-loader\"><code>autoprefixer</code></a>: Add vendor prefixes to CSS rules using values from Can I Use</li>\n<li>\n<a href=\"https://github.com/jeffling/namespace-css-loader\"><code>namespace-css</code></a>: Namespace your css with a given selector (for encapsulating all rules in one subset of your site)</li>\n<li>\n<a href=\"https://www.npmjs.com/package/fontgen-loader\"><code>fontgen</code></a>: Create your own webfont with proper CSS on-the-fly and include it into WebPack.</li>\n<li>\n<a href=\"https://github.com/itsmepetrov/classnames-loader\"><code>classnames</code></a>: Automatically bind <a href=\"https://github.com/css-modules/css-modules\">css-modules</a> to <a href=\"https://github.com/JedWatson/classnames\">classnames</a>.</li>\n<li>\n<a href=\"https://github.com/peerigon/modernizr-loader\"><code>modernizr</code></a>: Get your modernizr build bundled with webpack</li>\n</ul>\n<h3 id=\"translation\">translation</h3>\n<ul>\n<li>\n<a href=\"https://github.com/perchlayer/po-loader\"><code>po</code></a>: Loads a PO gettext file and returns JSON</li>\n<li>\n<a href=\"https://github.com/thetalecrafter/format-message-loader\"><code>format-message</code></a>: Compiles translations to ICU Message Format strings in <a href=\"https://github.com/thetalecrafter/format-message\"><code>formatMessage</code></a> calls</li>\n<li>\n<a href=\"https://github.com/drd/jsxlate-loader\"><code>jsxlate</code></a>: Transform React source code for use with <a href=\"https://github.com/drd/jsxlate\"><code>jsxlate</code></a>\n</li>\n<li>\n<a href=\"https://github.com/princed/angular-gettext-loader\"><code>angular-gettext</code></a> Compiles <code>.po</code> files as <code>Angular.js</code> module or <code>json</code> to be used with <code>angular-gettext</code>.</li>\n<li>\n<a href=\"https://github.com/DatenMetzgerX/webpack-angular-translate\"><code>webpack-angular-translate</code></a>: Extracts <a href=\"https://angular-translate.github.io\">angular-translate</a> translation id’s and default text’s</li>\n<li>\n<a href=\"https://github.com/wombleton/angular-gettext-extract-loader\"><code>angular-gettext-extract</code></a> Extracts strings for translation into a nominated <code>.pot</code> file.</li>\n<li>\n<a href=\"https://github.com/mrblueblue/gettext-loader\"><code>gettext</code></a>: Compiles a Gettext PO file from code source.</li>\n<li>\n<a href=\"https://github.com/artificialtrends/preprocess-loader\"><code>preprocessor</code></a>: The preprocessor-loader provides the ability to preprocess source files through user defined regular expressions, macros, and callback routines. All user defined logic can be applied to line scope or source scope.</li>\n</ul>\n<h3 id=\"support\">support</h3>\n<ul>\n<li>\n<a href=\"https://github.com/webpack/mocha-loader\"><code>mocha</code></a>: do tests with mocha in browser or node.js</li>\n<li>\n<a href=\"https://github.com/webpack/coverjs-loader\"><code>coverjs</code></a>: PostLoader to code coverage with CoverJs</li>\n<li>\n<a href=\"https://github.com/deepsweet/istanbul-instrumenter-loader\"><code>istanbul-instrumenter</code></a>: <a href=\"https://github.com/gotwarlost/istanbul\">Istanbul</a> postLoader to code coverage with <a href=\"https://github.com/webpack/karma-webpack\">karma-webpack</a> and <a href=\"https://github.com/karma-runner/karma-coverage\">karma-coverage</a>\n</li>\n<li>\n<a href=\"https://github.com/ColCh/isparta-instrumenter-loader\"><code>isparta-instrumenter</code></a>: <a href=\"https://github.com/douglasduteil/isparta\">Isparta</a> preLoader to code coverage with <a href=\"https://github.com/webpack/karma-webpack\">karma-webpack</a> and <a href=\"https://github.com/douglasduteil/karma-coverage\">douglasduteil/karma-coverage#next</a>\n</li>\n<li>\n<a href=\"https://github.com/vectart/ibrik-instrumenter-loader\"><code>ibrik-instrumenter</code></a>: <a href=\"https://github.com/Constellation/ibrik\">Ibrik</a> preLoader to CoffeeScript code coverage with <a href=\"https://github.com/webpack/karma-webpack\">karma-webpack</a> and <a href=\"https://github.com/douglasduteil/karma-coverage\">douglasduteil/karma-coverage</a>\n</li>\n<li>\n<a href=\"https://github.com/MoOx/eslint-loader\"><code>eslint</code></a>: PreLoader for linting code using ESLint.</li>\n<li>\n<a href=\"https://github.com/webpack/jshint-loader\"><code>jshint</code></a>: PreLoader for linting code.</li>\n<li>\n<a href=\"https://github.com/unindented/jscs-loader\"><code>jscs</code></a>: PreLoader for style checking.</li>\n<li>\n<a href=\"https://github.com/timoxley/standard-loader\"><code>standard</code></a>: Conform to <a href=\"https://github.com/feross/standard\">standard</a> code style.</li>\n<li>\n<a href=\"https://github.com/plasticine/inject-loader\"><code>inject</code></a>: A Webpack loader for injecting code into modules via their dependencies</li>\n<li>\n<a href=\"https://github.com/jauco/webpack-injectable\"><code>injectable</code></a>: Allow to inject dependencies into modules</li>\n<li>\n<a href=\"https://github.com/webpack/transform-loader\"><code>transform</code></a>: Use browserify transforms as loader.</li>\n<li>\n<a href=\"https://github.com/wombleton/falafel-loader\"><code>falafel</code></a>: Use falafel AST transforms as a loader.</li>\n<li>\n<a href=\"https://github.com/patcoll/image-size-loader\"><code>image-size</code></a>: Loads an image and returns its dimensions and type</li>\n<li>\n<a href=\"https://github.com/hyungjs/csslint-loader\"><code>csslint</code></a>: PreLoader for linting code using CSSLint</li>\n<li>\n<a href=\"https://github.com/bline/coffeelint-loader\"><code>coffeelint</code></a>: PreLoader for linting <a href=\"http://coffeescript.org/\">CoffeeScript</a>.</li>\n<li>\n<a href=\"https://github.com/wbuchwalter/tslint-loader\"><code>tslint</code></a>: PreLoader for linting TypeScript using <a href=\"https://github.com/palantir/tslint\">TSLint</a>\n</li>\n<li>\n<a href=\"https://github.com/tanem/parker-loader\"><code>parker</code></a>: Output a stylesheet analysis report using <a href=\"https://github.com/katiefenn/parker\">parker</a>.</li>\n<li>\n<a href=\"https://github.com/3100/sjsp-loader\"><code>sjsp</code></a>: Inject some codes for profiling using <a href=\"https://github.com/45deg/node-sjsp\">node-sjsp</a>.</li>\n<li>\n<a href=\"https://github.com/mehdishojaei/amdcheck-loader\"><code>amdcheck</code></a>: Uses AST to find and remove unused dependencies in AMD modules using <a href=\"https://github.com/mehdishojaei/amdextract\">amdextract</a>.</li>\n<li>\n<a href=\"https://github.com/RinconStrategies/manifest-loader\"><code>manifest</code></a>: A loader to generate JSON asset manifests to pass to preloading systems.</li>\n<li>\n<a href=\"https://github.com/adjavaherian/gulp-rev-loader\"><code>gulp-rev</code></a>: Use in tandem with gulp-rev to replace assets from rev-manifest.</li>\n<li>\n<a href=\"https://github.com/wombleton/html-test-loader\"><code>html-test</code></a> Test your html templates (for example) for analytics.</li>\n<li>\n<a href=\"https://github.com/adrianhall/stylelint-loader\"><code>stylelint</code></a> Preloader for linting SASS and SCSS with stylelint</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/list-of-loaders.html\" class=\"_attribution-link\">https://webpack.github.io/docs/list-of-loaders.html</a>\n  </p>\n</div>\n","node.js-api":"<h1>Node.Js Api</h1>\n<h3 id=\"the-short-way\">The short way</h3>\n<pre data-language=\"javascript\">var webpack = require(\"webpack\");\n\n// returns a Compiler instance\nwebpack({\n    // configuration\n}, function(err, stats) {\n    // ...\n});</pre>\n<h3 id=\"the-long-way\">The long way</h3>\n<pre data-language=\"javascript\">var webpack = require(\"webpack\");\n\n// returns a Compiler instance\nvar compiler = webpack({\n    // configuration\n});\n\ncompiler.run(function(err, stats) {\n    // ...\n});\n// or\ncompiler.watch({ // watch options:\n    aggregateTimeout: 300, // wait so long for more changes\n    poll: true // use polling instead of native watchers\n    // pass a number to set the polling interval\n}, function(err, stats) {\n    // ...\n});</pre>\n<h3 id=\"compiler\"><code>Compiler</code></h3>\n<p>An instance of <code>Compiler</code> has the following methods</p>\n<p><code>compiler.run(callback)</code> - Builds the bundle(s).</p>\n<ul><li>callback(err, stats) - A function that will be called with the build is complete.</li></ul>\n<p><code><span class=\"keyword\">var</span> watcher = compiler.watch(watchOptions, handler)</code> - Builds the bundle(s) then starts the watcher, which rebuilds bundles whenever their source files change. Returns a <code>Watching</code> instance. Note: since this will automatically run an initial build, so you only need to run <code>watch</code> (and not <code>run</code>).</p>\n<ul>\n<li>\n<code>watchOptions</code><ul>\n<li>\n<code>watchOptions.aggregateTimeout</code> - After a change the watcher waits that time (in milliseconds) for more changes. Default: 300.</li>\n<li>\n<code>watchOptions.poll</code> - The watcher uses polling instead of native watchers. <code><span class=\"literal\">true</span></code> uses the default interval, a number specifies a interval in milliseconds. Default: undefined (automatic).</li>\n</ul>\n</li>\n<li>\n<code>handler(err, stats)</code> - A function that will be called when a build has been completed, or an error or warning has occurred. (Note that <code>handler</code> is called multiple times. It even can occur that <code>handler</code> is called for the same bundle multiple times. In this cases webpack is not sure about changes and rebuilds.)</li>\n</ul>\n<h3 id=\"watching\"><code>Watching</code></h3>\n<p>An instance of <code>Watching</code> has the following method:</p>\n<p><code>watcher.close(callback)</code> - stops the watcher.</p>\n<ul><li>\n<code>callback</code> - A function that’s called when the watcher has closed.</li></ul>\n<h3 id=\"stats\">stats</h3>\n<p>The <code>Stats</code> object expose this methods:</p>\n<h4 id=\"stats-haserrors\"><code>stats.hasErrors</code></h4>\n<p>Returns <code><span class=\"literal\">true</span></code> if there were errors while compiling.</p>\n<h4 id=\"stats-haswarnings\"><code>stats.hasWarnings</code></h4>\n<p>Returns <code><span class=\"literal\">true</span></code> if there were warnings while compiling.</p>\n<h4 id=\"stats-tojson\"><code>stats.toJson(options)</code></h4>\n<p>Return information as json object</p>\n<p>You can specify the information by the <code>options</code> argument: (Boolean)</p>\n<p><code>options.context</code> context directory for request shortening</p>\n<p><code>options.hash</code> add the hash of the compilation</p>\n<p><code>options.version</code> add webpack version information</p>\n<p><code>options.timings</code> add timing information</p>\n<p><code>options.assets</code> add assets information</p>\n<p><code>options.chunks</code> add chunk information</p>\n<p><code>options.chunkModules</code> add built modules information to chunk information</p>\n<p><code>options.modules</code> add built modules information</p>\n<p><code>options.children</code> add children information</p>\n<p><code>options.cached</code> add also information about cached (not built) modules</p>\n<p><code>options.reasons</code> add information about the reasons why modules are included</p>\n<p><code>options.source</code> add the source code of modules</p>\n<p><code>options.errorDetails</code> add details to errors (like resolving log)</p>\n<p><code>options.chunkOrigins</code> add the origins of chunks and chunk merging info</p>\n<p><code>options.modulesSort</code> (string) sort the modules by that field</p>\n<p><code>options.chunksSort</code> (string) sort the chunks by that field</p>\n<p><code>options.assetsSort</code> (string) sort the assets by that field</p>\n<p>In <code>toJson</code> every flag defaults to <code><span class=\"literal\">true</span></code> (except <code>chunkModules</code>). By default it’s not sorted.</p>\n<p>Here is an <a href=\"https://github.com/webpack/analyse/blob/master/app/pages/upload/example.json\">example of the resulting JSON</a>.</p>\n<blockquote><p>Note: If you want to extract the asset name for generating the HTML page, use the <code>assetsByChunkName</code> property, which contains an object mapping <code>chunkName</code> to asset name(s) (it’s a string or an array of strings).</p></blockquote>\n<h4 id=\"stats-tostring\"><code>stats.toString(options)</code></h4>\n<p>Returns a formatted string of the result.</p>\n<p><code>options</code> are the same as <code>options</code> in <code>toJson</code>.</p>\n<p><code>options.colors</code> With console colors</p>\n<h3 id=\"error-handling\">error handling</h3>\n<p>to handle all errors and warnings with the node.js API you need to test <code>err</code>, <code>stats.errors</code> and <code>stats.warnings</code>:</p>\n<pre data-language=\"javascript\">var webpack = require(\"webpack\");\nwebpack({\n    // configuration\n}, function(err, stats) {\n    if(err)\n        return handleFatalError(err);\n    var jsonStats = stats.toJson();\n    if(jsonStats.errors.length &gt; 0)\n        return handleSoftErrors(jsonStats.errors);\n    if(jsonStats.warnings.length &gt; 0)\n        handleWarnings(jsonStats.warnings);\n    successfullyCompiled();\n});</pre>\n<h3 id=\"compile-to-memory\">compile to memory</h3>\n<pre data-language=\"javascript\">var MemoryFS = require(\"memory-fs\");\nvar webpack = require(\"webpack\");\n\nvar fs = new MemoryFS();\nvar compiler = webpack({ ... });\ncompiler.outputFileSystem = fs;\ncompiler.run(function(err, stats) {\n  // ...\n  var fileContent = fs.readFileSync(\"...\");\n});</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/node.js-api.html\" class=\"_attribution-link\">https://webpack.github.io/docs/node.js-api.html</a>\n  </p>\n</div>\n","resolving":"<h1>Resolving</h1>\n<p>The resolving process is pretty simple. We distinguish three types of requests:</p>\n<ul>\n<li>absolute path: <code>require(<span class=\"string\">\"/home/me/file\"</span>)</code> <code>require(<span class=\"string\">\"C:\\Home\\me\\file\"</span>)</code>\n</li>\n<li>relative path: <code>require(<span class=\"string\">\"../src/file\"</span>)</code> <code>require(<span class=\"string\">\"./file\"</span>)</code>\n</li>\n<li>module path: <code>require(<span class=\"string\">\"module\"</span>)</code> <code>require(<span class=\"string\">\"module/lib/file\"</span>)</code>\n</li>\n</ul>\n<h3 id=\"resolving-an-absolute-path\">Resolving an absolute path</h3>\n<p>We first check if the path points to a directory. For a directory we need to find the main file in this directory. Therefore the <code>main</code> field in the <code>package.json</code> is joined to the path. If there is no <code>package.json</code> or no <code>main</code> field, <code>index</code> is used as filename.</p>\n<p>We have an absolute path to a file now. We try to append all extensions (configuration option <code>resolve.extensions</code>). The first existing file is used as result.</p>\n<h3 id=\"resolving-a-relative-path\">Resolving a relative path</h3>\n<p>The context directory is the directory of the resource file that contains the <code>require</code> statement. If there is no resource file the configuration option <code>context</code> is used as context directory. (This can occur for entry points or with loader-generated files).</p>\n<p>The relative path is joined to the context directory and the resulting absolute file is resolved according to “Resolving an absolute path”.</p>\n<h3 id=\"resolving-a-module-path\">Resolving a module path</h3>\n<p>For resolving a module we first gather all search directories for modules from the context directory. This process is similar to the <a href=\"http://nodejs.org/api/modules.html\">node.js resolving process</a>, but the search directories are configurable with the configuration option <code>resolve.modulesDirectories</code>. In addition to this the directories in the configuration option <code>resolve.root</code> are prepended and directories in the configuration option <code>resolve.fallback</code> are appended.</p>\n<p>The module is looked up in each module directory and resolved according to “Resolving an absolute path”. If the first match has no success, the second is tried and so on.</p>\n<h3 id=\"aliasing\">Aliasing</h3>\n<p>There is a configuration option <code>resolve.alias</code> which renames modules.</p>\n<p>When trying to “resolve a module path” the module name is matched to the <code>resolve.alias</code> option and when there is a match it gets replaced with the alias.</p>\n<h3 id=\"caching\">Caching</h3>\n<p>Every filesystem access is cached so that multiple parallel or serial requests to the same thing are merged. In watching mode only changed files are removed from cache (the watcher knows which files got changed). In non-watching mode the cache is purged before every compilation.</p>\n<h3 id=\"unsafe-caching\">Unsafe caching</h3>\n<p>There is a configuration option <code>resolve.unsafeCache</code> which boosts performance by aggressive caching.</p>\n<p>Every resolve process is cached and isn’t ever purged. This is correct in most cases, but incorrect in edge cases (<em>what edge cases?</em>).</p>\n<h3 id=\"context\">Context</h3>\n<p>When trying to resolve a <a href=\"context\">context</a> “Resolving an absolute path” ends when a directory is found.</p>\n<h3 id=\"loaders\">Loaders</h3>\n<p>For loaders the configuration options in <code>resolveLoader</code> are used.</p>\n<p>In addition to that when trying to “resolve a module path” all module name variations in the configuration option <code>resolveLoader.moduleTemplates</code> are tried.</p>\n<h3 id=\"asynchronous\">Asynchronous</h3>\n<p>The above description suggests a serial process, but in the implementation the process is completely asynchronous and parallel. This may cause more filesystem access than required.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/resolving.html\" class=\"_attribution-link\">https://webpack.github.io/docs/resolving.html</a>\n  </p>\n</div>\n","context":"<h1>Context</h1>\n<h3 id=\"dynamic-requires\">dynamic requires</h3>\n<p>A context is created if your request contains expressions, so the exact module is not known on compile time.</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">require(\"./template/\" + name + \".jade\");</pre>\n<p>webpack parses the <code>require</code> statement and extracts some information:</p>\n<ul>\n<li>Directory: <code>.<span class=\"regexp\">/template</span></code>\n</li>\n<li>Regular expression: <code>/^.*\\.jade$/</code>\n</li>\n</ul>\n<h3 id=\"context-module\">context module</h3>\n<p>A context module is generated. It contains references to all modules in that directory that can be required with a request matching the regular expression. The context module contains a map which translates requests to module ids.</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">{\n    \"./table.jade\": 22,\n    \"./table-row.jade\": 23,\n    \"./directory/folder.jade\": 24\n}</pre>\n<p>The context module also contains a bit runtime logic to access the map.</p>\n<h3 id=\"dynamic-require-rewriting\">dynamic require rewriting</h3>\n<p>The original <code>require</code> statement gets rewritten by the compiler to access the context module: (assuming the context module gets the module id <code><span class=\"number\">21</span></code>)</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">// original statement\nrequire(\"./template/\" + name + \".jade\");\n\n// rewritten statement\nrequire(21)(\"./\" + name + \".jade\");</pre>\n<h3 id=\"parser-evaluation\">parser evaluation</h3>\n<p>Not every expression results in a context. The parser has a small evaluation engine to evaluate simple expressions. Here are some examples:</p>\n<pre data-language=\"javascript\">require(expr ? \"a\" : \"b\"); // =&gt; require(expr ? 25 : 26)\nrequire(\"a\" + \"b\"); // =&gt; require(27)\nrequire(\"not a\".substr(4).replace(\"a\", \"b\")); // =&gt; require(26)\n// ...</pre>\n<h3 id=\"require-context\"><code>require.context</code></h3>\n<p>You can create your own context with the <code>require.context</code> function. It allow to pass a directory, regular expression and a flag if subdirectories should be used too.</p>\n<pre data-language=\"javascript\">require.context(directory, useSubdirectories = false, regExp = /^\\.\\//)</pre>\n<p>Examples:</p>\n<pre data-language=\"javascript\">require.context(\"./test\", false, /Test$/)\n// a context with all files from the test directory that can be\n// required with a request endings with \"Test\"\n\nrequire.context(\"..\", true, /^grunt-[^\\/]+\\/tasks/[^\\/]+$/)\n// all grunt task that are in a modules directory of the parent folder</pre>\n<h3 id=\"context-module-api\">context module API</h3>\n<p>A context module exports a (<code>require</code>) function that takes one argument: the request.</p>\n<p>The exported function has a property <code>resolve</code> which is a function and returns the module id of the parsed request.</p>\n<p>The exported function has another property <code>keys</code> which is a function that returns all possible requests that the context module can handle.</p>\n<p>And the exported function has another property <code>id</code> which is the module id of the context module. This may be useful for <code>module.hot.accept</code>.</p>\n<p>Examples:</p>\n<pre data-language=\"javascript\">var req = require.context(\"./templates\", true, /^\\.\\/.*\\.jade$/);\n\nvar tableTemplate = req(\"./table.jade\");\n// tableTemplate === require(\"./templates/table.jade\");\n\nvar tableTemplateId = req.resolve(\"./table.jade\");\n// tableTemplateId === require.resolve(\"./templates/table.jade\");\n\nreq.keys();\n// is [\"./table.jade\", \"./table-row.jade\", \"./directory/folder.jade\"]\n\nreq.id;\n// is i. e. 42</pre>\n<p>or</p>\n<pre data-language=\"javascript\">function requireAll(requireContext) {\n  return requireContext.keys().map(requireContext);\n}\n// requires and returns all modules that match\n\nvar modules = requireAll(require.context(\"./spec\", true, /^\\.\\/.*\\.js$/));\n// is an array containing all the matching modules</pre>\n<p>Note: <code>keys</code> depends on <code>Object.keys</code>. You may need to polyfill it for older browsers.</p>\n<h3 id=\"contextreplacementplugin\"><code>ContextReplacementPlugin</code></h3>\n<p>This plugin can overwrite the details for a context (i. e. the RegExp). See <a href=\"list-of-plugins\">list of plugins</a>.</p>\n<h3 id=\"critical-dependencies\">Critical dependencies</h3>\n<p>If the module source contains a <code>require</code> that cannot be statically analyzed, the context is the current directory.</p>\n<p>In this case a <code>Critical dependencies</code> warning is emitted. You need to use the <code>ContextReplacementPlugin</code> in most cases.</p>\n<p>Examples: <code>someFn(require)</code> <code>require.bind(<span class=\"literal\">null</span>)</code></p>\n<h3 id=\"example\">Example</h3>\n<p>See <a href=\"https://github.com/webpack/webpack/tree/master/examples/require.context#examplejs\">an example here</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/context.html\" class=\"_attribution-link\">https://webpack.github.io/docs/context.html</a>\n  </p>\n</div>\n","loaders":"<h1>Loaders</h1>\n<h2 id=\"introduction\">Introduction</h2>\n<p>Loaders allow you to preprocess files as you <code>require()</code> or “load” them. Loaders are kind of like “tasks” are in other build tools, and provide a powerful way to handle frontend build steps. Loaders can transform files from a different language like, CoffeeScript to JavaScript, or inline images as data URLs. Loaders even allow you to do things like <code>require()</code> css files right in your JavaScript!</p>\n<p>To tell Webpack to transform a module with a loader, you can specify the loader in the module <strong>request</strong>, such as in a <code>require</code> call.</p>\n<pre data-language=\"javascript\">var moduleWithOneLoader = require(\"my-loader!./my-awesome-module\");</pre>\n<p>Notice the <code>!</code> syntax separating the loader from the module path? Loaders, like modules can also be specified with a relative path (as if you were requiring it) instead of the loader name:</p>\n<pre data-language=\"javascript\">require(\"./loaders/my-loader!./my-awesome-module\");</pre>\n<p>Loaders can be also be chained together by separating loaders with the <code>!</code>. This is helpful for applying multiple transformations to a file in a pipeline.</p>\n<pre data-language=\"javascript\">require(\"style-loader!css-loader!less-loader!./my-styles.less\");</pre>\n<p>When chaining loaders, they are applied right to left (from the file, back). In the above example, <code>my-styles.less</code> will be transformed first by the <code>less-loader</code>converting it to css, and then passed to the <code>css-loader</code> where urls, fonts, and other resources are processed, and then finally passed to <code>style-loader</code> to be transformed into a <code>&lt;style&gt;</code> tag.</p>\n<h3 id=\"parameters\">parameters</h3>\n<p>Loaders can accept query parameters:</p>\n<pre data-language=\"javascript\">require(\"loader?with=parameter!./file\");</pre>\n<p>The format of the query string is up to the loader, so check the loaders documentation to find out about the parameters the loader accept, but generally most loaders support the traditional query string format.</p>\n<h3 id=\"loaders-by-config\">loaders by config</h3>\n<p>Specifing loaders in each module request can be brittle and repetitive. Webpack provides a way to specify which loaders apply to different file types in your Webpack <a href=\"configuration\">configuration</a> file. Specifying loaders in the configuration is the recommended approach in most cases as it doesn’t add any build specific syntax to the code, making it more reusable.</p>\n<pre data-language=\"javascript\">{\n    module: {\n        loaders: [\n            { test: /\\.coffee$/, loader: \"coffee-loader\" }\n        ],\n        preLoaders: [\n            { test: /\\.coffee$/, loader: \"coffee-hint-loader\" }\n        ]\n    }\n};</pre>\n<p>See the <a href=\"configuration\">configuration</a> page for more information about configuring loaders.</p>\n<h3 id=\"loader-order\">loader order</h3>\n<p>After the file is read from the filesystem, loaders are executed against it in the following order.</p>\n<ol>\n<li>\n<code>preloaders</code> specified in the <a href=\"configuration\">configuration</a>\n</li>\n<li>\n<code>loaders</code> specified in the <a href=\"configuration\">configuration</a>\n</li>\n<li>loaders specified in the request (e.g. <code>require(<span class=\"string\">'raw!./file.js'</span>)</code>)</li>\n<li>\n<code>postLoaders</code> specified in the <a href=\"configuration\">configuration</a>\n</li>\n</ol>\n<p>You can also override the configuration loader order in the module request to suit special cases.</p>\n<ul>\n<li>adding <code>!</code> to a request will disable configured <code>preLoaders</code><ul><li><code>require(<span class=\"string\">\"!raw!./script.coffee\"</span>)</code></li></ul>\n</li>\n<li>adding <code>!!</code> to a request will disable all loaders specified in the configuration<ul><li><code>require(<span class=\"string\">\"!!raw!./script.coffee\"</span>)</code></li></ul>\n</li>\n<li>adding <code>-!</code> to a request will disable configured <code>preLoaders</code> and <code>loaders</code> but not the <code>postLoaders</code><ul><li><code>require(<span class=\"string\">\"-!raw!./script.coffee\"</span>)</code></li></ul>\n</li>\n</ul>\n<h3 id=\"recommendations\">recommendations</h3>\n<p>It is recommended that the result is <strong>JavaScript after step 2</strong>.</p>\n<p>It is recommended to apply <strong>non-JavaScript to JavaScript transformations in step 1</strong> (or step 2 when they don’t apply globally).</p>\n<p>It is recommended to <strong>stay in the same language in pre and post loaders</strong>.</p>\n<p>Source code that want to override the non-js to js transformation should use the <code>!</code> prefix. (i. e. to transform it in another way)</p>\n<p>Using the <code>!!</code> and <code>-!</code> prefix to disable loaders is not recommended except from another loader.</p>\n<ul>\n<li>Example for a preLoader: Image compression</li>\n<li>Example for a loader (in config): coffee-script transformation</li>\n<li>Example for a loader (in request): bundle loader</li>\n<li>Example for a postLoader: Code coverage instrumenting</li>\n</ul>\n<h2 id=\"writing-a-loader\">Writing a loader</h2>\n<p>Writing a loader is pretty simple. A loader is just a file that exports a function. The compiler calls this function and passes the result of the previous loader or the resource file into it. The <code><span class=\"keyword\">this</span></code> context of the function is filled-in by the compiler with some useful methods that allow the loader to, among other things, change its invocation style to async or get query parameters. The first loader is passed one argument: the content of the resource file. The compiler expects a result from the last loader. The result should be a String or a Buffer (which is converted to a string), representing the JavaScript source code of the module. An optional SourceMap result (as JSON object) may also be passed.</p>\n<p>A single result can be returned in sync mode. For multiple result the <code><span class=\"keyword\">this</span>.callback</code> must be called. In async mode <code><span class=\"keyword\">this</span>.async()</code> must be called. It returns <code><span class=\"keyword\">this</span>.callback</code> if async mode is allowed. Then the loader must return <code><span class=\"literal\">undefined</span></code> and call the callback.</p>\n<p>Errors can be thrown in sync mode or the <code><span class=\"keyword\">this</span>.callback</code> can be called with the error.</p>\n<p><code>webpack</code> allows async mode in every case.</p>\n<p><code>enhanced-require</code> allows async mode only with <code>require.ensure</code> or AMD <code>require</code>.</p>\n<p>For more detailed instructions and guidelines, check out <a href=\"how-to-write-a-loader\">How to write a loader</a>.</p>\n<h3 id=\"examples\">examples</h3>\n<h4 id=\"sync-loader\">sync loader</h4>\n<pre data-language=\"javascript\">module.exports = function(content) {\n    return someSyncOperation(content);\n};</pre>\n<h4 id=\"async-loader\">async loader</h4>\n<pre data-language=\"javascript\">module.exports = function(content) {\n    var callback = this.async();\n    if(!callback) return someSyncOperation(content);\n    someAsyncOperation(content, function(err, result) {\n        if(err) return callback(err);\n        callback(null, result);\n    });\n};</pre>\n<blockquote><p>Note: It’s recommended to give an asynchronous loader a fall back to synchronous mode. This isn’t required for webpack, but allows to run the loader sync using enhanced-require.</p></blockquote>\n<h4 id=\"raw-loader\">raw loader</h4>\n<p>By default the resource file is treated as <code>utf-<span class=\"number\">8</span></code> string and passed as String to the loader. By setting <code>raw</code> to <code><span class=\"literal\">true</span></code> the loader is passed the raw Buffer.</p>\n<p>Every loader is allowed to deliver its result as String or as Buffer. The compiler converts them between loaders.</p>\n<pre data-language=\"javascript\">module.exports = function(content) {\n    assert(content instanceof Buffer);\n    return someSyncOperation(content);\n    // return value can be a Buffer too\n    // This is also allowed if loader is not \"raw\"\n};\nmodule.exports.raw = true;</pre>\n<h4 id=\"pitching-loader\">pitching loader</h4>\n<p>The loaders are called from right to left. But in some cases loaders doesn’t care for the results of the previous loader or the resource. They only care for metadata. The <code>pitch</code> method on the loaders is called from left to right before the loaders are called. If a loader delivers a result in the pitch method the process turns around and skips the remaining loaders, continuing with the calls to the more left loaders. <code>data</code> can be passed between pitch and normal call.</p>\n<pre data-language=\"javascript\">module.exports = function(content) {\n    return someSyncOperation(content, this.data.value);\n};\nmodule.exports.pitch = function(remainingRequest, precedingRequest, data) {\n    if(someCondition()) {\n        // fast exit\n        return \"module.exports = require(\" + JSON.stringify(\"-!\" + remainingRequest) + \");\";\n    }\n    data.value = 42;\n};</pre>\n<h3 id=\"loader-context\">loader context</h3>\n<p>This stuff is available on <code><span class=\"keyword\">this</span></code> in a loader.</p>\n<p>For the example this require call is used:</p>\n<p>In <code>/abc/file.js</code>:</p>\n<pre data-language=\"javascript\">require(\"./loader1?xyz!loader2!./resource?rrr\");</pre>\n<h4 id=\"version\"><code>version</code></h4>\n<p>Loader API version. Currently <code><span class=\"number\">1</span></code>.</p>\n<h4 id=\"context\"><code>context</code></h4>\n<p>A string. The directory of the module. Can be used as context for resolving other stuff.</p>\n<p>In the example: <code>/abc</code> because <code>resource.js</code> is in this directory</p>\n<h4 id=\"request\"><code>request</code></h4>\n<p>The resolved request string.</p>\n<p>In the example: <code><span class=\"string\">\"/abc/loader1.js?xyz!/abc/node_modules/loader2/index.js!/abc/resource.js?rrr\"</span></code></p>\n<h4 id=\"query\"><code>query</code></h4>\n<p>A string. The query of the request for the current loader.</p>\n<p>In the example: in loader1: <code><span class=\"string\">\"?xyz\"</span></code>, in loader2: <code><span class=\"string\">\"\"</span></code></p>\n<h4 id=\"data\"><code>data</code></h4>\n<p>A data object shared between the pitch and the normal phase.</p>\n<h4 id=\"cacheable\"><code>cacheable</code></h4>\n<pre data-language=\"javascript\">cacheable(flag = true: boolean)</pre>\n<p>Make this loader result cacheable. By default it’s not cacheable.</p>\n<p>A cacheable loader must have a deterministic result, when inputs and dependencies haven’t changed. This means the loader shouldn’t have other dependencies than specified with <code><span class=\"keyword\">this</span>.addDependency</code>. Most loaders are deterministic and cacheable.</p>\n<h4 id=\"loaders\"><code>loaders</code></h4>\n<pre data-language=\"javascript\">loaders = [{request: string, path: string, query: string, module: function}]</pre>\n<p>An array of all the loaders. It is writeable in the pitch phase.</p>\n<p>In the example:</p>\n<pre data-language=\"javascript\">[\n  { request: \"/abc/loader1.js?xyz\",\n    path: \"/abc/loader1.js\",\n    query: \"?xyz\",\n    module: [Function]\n  },\n  { request: \"/abc/node_modules/loader2/index.js\",\n    path: \"/abc/node_modules/loader2/index.js\",\n    query: \"\",\n    module: [Function]\n  }\n]</pre>\n<h4 id=\"loaderindex\"><code>loaderIndex</code></h4>\n<p>The index in the loaders array of the current loader.</p>\n<p>In the example: in loader1: <code><span class=\"number\">0</span></code>, in loader2: <code><span class=\"number\">1</span></code></p>\n<h4 id=\"resource\"><code>resource</code></h4>\n<p>The resource part of the request, including query.</p>\n<p>In the example: <code><span class=\"string\">\"/abc/resource.js?rrr\"</span></code></p>\n<h4 id=\"resourcepath\"><code>resourcePath</code></h4>\n<p>The resource file.</p>\n<p>In the example: <code><span class=\"string\">\"/abc/resource.js\"</span></code></p>\n<h4 id=\"resourcequery\"><code>resourceQuery</code></h4>\n<p>The query of the resource.</p>\n<p>In the example: <code><span class=\"string\">\"?rrr\"</span></code></p>\n<h4 id=\"emitwarning\"><code>emitWarning</code></h4>\n<pre data-language=\"javascript\">emitWarning(message: string)</pre>\n<p>Emit a warning.</p>\n<h4 id=\"emiterror\"><code>emitError</code></h4>\n<pre data-language=\"javascript\">emitError(message: string)</pre>\n<p>Emit an error.</p>\n<h4 id=\"exec\"><code>exec</code></h4>\n<pre data-language=\"javascript\">exec(code: string, filename: string)</pre>\n<p>Execute some code fragment like a module.</p>\n<blockquote><p>Hint: Don’t use <code>require(<span class=\"keyword\">this</span>.resourcePath)</code>, use this function to make loaders chainable!</p></blockquote>\n<h4 id=\"resolve\"><code>resolve</code></h4>\n<pre data-language=\"javascript\">resolve(context: string, request: string, callback: function(err, result: string))</pre>\n<p>Resolve a request like a require expression.</p>\n<h4 id=\"resolvesync\"><code>resolveSync</code></h4>\n<pre data-language=\"javascript\">resolveSync(context: string, request: string) -&gt; string</pre>\n<p>Resolve a request like a require expression.</p>\n<h4 id=\"adddependency\"><code>addDependency</code></h4>\n<pre data-language=\"javascript\">addDependency(file: string)\ndependency(file: string) // shortcut</pre>\n<p>Add a file as dependency of the loader result.</p>\n<h4 id=\"addcontextdependency\"><code>addContextDependency</code></h4>\n<pre data-language=\"javascript\">addContextDependency(directory: string)</pre>\n<p>Add a directory as dependency of the loader result.</p>\n<h4 id=\"cleardependencies\"><code>clearDependencies</code></h4>\n<pre data-language=\"javascript\">clearDependencies()</pre>\n<p>Remove all dependencies of the loader result. Even initial dependencies and these of other loaders. Consider using <code>pitch</code>.</p>\n<h4 id=\"values\">\n<code>values</code> (out)</h4>\n<p>Pass values to the next loaders <code>inputValues</code>. If you know what your result exports if executed as module, set this value here (as a only element array).</p>\n<h4 id=\"inputvalues\"><code>inputValues</code></h4>\n<p>Passed from the last loader. If you would execute the input argument as module, consider reading this variable for a shortcut (for performance).</p>\n<h4 id=\"options\"><code>options</code></h4>\n<p>The options passed to the Compiler.</p>\n<h4 id=\"debug\"><code>debug</code></h4>\n<p>A boolean flag. It is set when in debug mode.</p>\n<h4 id=\"minimize\"><code>minimize</code></h4>\n<p>Should the result be minimized.</p>\n<h4 id=\"sourcemap\"><code>sourceMap</code></h4>\n<p>Should a SourceMap be generated.</p>\n<h4 id=\"target\"><code>target</code></h4>\n<p>Target of compilation. Passed from configuration options.</p>\n<p>Example values: <code><span class=\"string\">\"web\"</span></code>, <code><span class=\"string\">\"node\"</span></code></p>\n<h4 id=\"webpack\"><code>webpack</code></h4>\n<p>Set to true when this is compiled by webpack.</p>\n<h4 id=\"emitfile\"><code>emitFile</code></h4>\n<pre data-language=\"javascript\">emitFile(name: string, content: Buffer|String, sourceMap: {...})</pre>\n<p>Emit a file. This is webpack-specific</p>\n<h4 id=\"_compilation\"><code>_compilation</code></h4>\n<p>Hacky access to the Compilation object of webpack.</p>\n<h4 id=\"_compiler\"><code>_compiler</code></h4>\n<p>Hacky access to the Compiler object of webpack.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/loaders.html\" class=\"_attribution-link\">https://webpack.github.io/docs/loaders.html</a>\n  </p>\n</div>\n","webpack-dev-middleware":"<h1>Webpack Dev Middleware</h1>\n<blockquote><p>Note: The webpack-dev-middleware is for advanced users. See <a href=\"webpack-dev-server\">webpack-dev-server</a> for a ready-to-use solution.</p></blockquote>\n<p>The <a href=\"https://github.com/webpack/webpack-dev-middleware\">webpack-dev-middleware</a> is a small middleware for a connect-based middleware stack. It uses webpack to compile assets in-memory and serve them. When a compilation is running every request to the served webpack assets is blocked until we have a stable bundle.</p>\n<p>You can use it in two modes:</p>\n<ul>\n<li>watch mode (default): The compiler recompiles on file change.</li>\n<li>lazy mode: The compiler compiles on every request to the entry point.</li>\n</ul>\n<h3 id=\"api\">API</h3>\n<pre data-language=\"javascript\">var webpackDevMiddleware = require(\"webpack-dev-middleware\");\nvar webpack = require(\"webpack\");\n\nvar compiler = webpack({\n    // configuration\n    output: { path: '/' }\n});\n\napp.use(webpackDevMiddleware(compiler, {\n    // options\n}));</pre>\n<h4 id=\"options\">options</h4>\n<h5 id=\"noinfo\"><code>noInfo</code></h5>\n<p>Display no info to console (only warnings and errors)</p>\n<p>Default: <code><span class=\"literal\">false</span></code></p>\n<h5 id=\"quiet\"><code>quiet</code></h5>\n<p>Display nothing to the console</p>\n<p>Default: <code><span class=\"literal\">false</span></code></p>\n<h5 id=\"lazy\"><code>lazy</code></h5>\n<p>Switch into lazy mode.</p>\n<p>Default: <code><span class=\"literal\">false</span></code></p>\n<h5 id=\"filename\"><code>filename</code></h5>\n<p>In lazy mode: Switch request should trigger the compilation.</p>\n<p>In most cases this equals the webpack configuration option <code>output.filename</code>.</p>\n<h5 id=\"watchoptions-aggregatetimeout\"><code>watchOptions.aggregateTimeout</code></h5>\n<p>Delay the rebuilt after the first change. Value is a time in ms.</p>\n<p>Default: <code><span class=\"number\">300</span></code></p>\n<h5 id=\"watchoptions-poll\"><code>watchOptions.poll</code></h5>\n<p><code><span class=\"literal\">true</span></code>: use polling</p>\n<p>number: use polling with specified interval</p>\n<p>Default: <code><span class=\"literal\">undefined</span></code></p>\n<h5 id=\"publicpath\">\n<code>publicPath</code> (<strong>required</strong>)</h5>\n<p>The path where to bind the middleware to the server.</p>\n<p>In most cases this equals the webpack configuration option <code>output.publicPath</code>.</p>\n<h5 id=\"headers\"><code>headers</code></h5>\n<p>Add custom headers. i. e. <code>{ <span class=\"string\">\"X-Custom-Header\"</span>: <span class=\"string\">\"yes\"</span> }</code></p>\n<h5 id=\"stats\"><code>stats</code></h5>\n<p>Output options for the stats. See <a href=\"node.js-api\">node.js API</a>.</p>\n<h4 id=\"middleware-invalidate\"><code>middleware.invalidate()</code></h4>\n<p>Manually invalidate the compilation. Useful if stuff of the compiler has changed.</p>\n<h4 id=\"middleware-filesystem\"><code>middleware.fileSystem</code></h4>\n<p>A readable (in-memory) filesystem that can access the compiled data.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/webpack-dev-middleware.html\" class=\"_attribution-link\">https://webpack.github.io/docs/webpack-dev-middleware.html</a>\n  </p>\n</div>\n","api-in-modules":"<h1>Api In Modules</h1>\n<p>A quick summary of all methods and variables available in code compiled with webpack.</p>\n<h3 id=\"basic\">Basic</h3>\n<h4 id=\"require-commonjs\">\n<code>require</code> CommonJs</h4>\n<pre data-language=\"javascript\">require(dependency: String)</pre>\n<p>Returns the exports from a dependency. The call is sync. No request to the server is fired. The compiler ensures that the dependency is available.</p>\n<p>Style: CommonJs</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">var $ = require(\"jquery\");\nvar myModule = require(\"my-module\");</pre>\n<h4 id=\"define\">\n<code>define</code> (with factory)</h4>\n<pre data-language=\"javascript\">define([name: String], [dependencies: String[]], factoryMethod: function(...))</pre>\n<p>The name argument is ignored. If the <code>dependencies</code> array is provided, the factoryMethod will be called with the exports of each dependency (in the same order). If <code>dependencies</code> is not provided the factoryMethod is called with <code>require</code>, <code>exports</code> and <code>module</code> (for compatibility!). If the factoryMethod returns a value, this value is exported by the module. The call is sync. No request to the server is fired. The compiler ensures that each dependency is available.</p>\n<p>Style: AMD</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">define([\"jquery\", \"my-module\"], function($, myModule) {\n    // Do something with $ and myModule.\n    // Export a function\n    return function doSomething() {\n        // Do something\n    };\n});</pre>\n<blockquote><p>Note: Can NOT be used in an async function.</p></blockquote>\n<h4 id=\"module-exports\"><code>module.exports</code></h4>\n<p>This value is returned, when that module is required. It’s default value is a new object.</p>\n<p>Style: CommonJs</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">module.exports = function doSomething() {\n    // Do something\n};</pre>\n<blockquote><p>Note: Can NOT be used in an async function.</p></blockquote>\n<h4 id=\"exports\"><code>exports</code></h4>\n<p>The exported object. It’s the default value of <code>module.exports</code>. If <code>module.exports</code> gets overwritten, <code>exports</code> will no longer be exported.</p>\n<p>Style: CommonJs</p>\n<pre data-language=\"javascript\">exports.someValue = 42;\nexports.anObject = {\n    x: 123\n};\nexports.aFunction = function doSomething() {\n    // Do something\n};</pre>\n<blockquote><p>Note: Using it in an async function may not have the expected effect.</p></blockquote>\n<h4 id=\"define\">\n<code>define</code> (with value)</h4>\n<pre data-language=\"javascript\">define(value: !Function)</pre>\n<p>Just exports the provided <code>value</code>. The <code>value</code> cannot be a function.</p>\n<p>Style: AMD (for compatibility!)</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">define({\n    answer: 42\n});</pre>\n<blockquote><p>Note: Can NOT be used in an async function.</p></blockquote>\n<h4 id=\"export\">\n<code>export</code> (label)</h4>\n<pre data-language=\"javascript\">export: value</pre>\n<p>Export the defined value. The label can occur before a function declaration or a variable declaration. The function name or variable name is the identifier under which the value is exported.</p>\n<p>Style: Labeled modules <code>dependencies.LabeledModulesPlugin</code></p>\n<p>Example:</p>\n<pre data-language=\"javascript\">export: var answer = 42;\nexport: function method(value) {\n  // Do something\n};</pre>\n<blockquote><p>Note: Using it in an async function may not have the expected effect.</p></blockquote>\n<h4 id=\"require-label\">\n<code>require</code> label</h4>\n<pre data-language=\"javascript\">require: \"dependency\"</pre>\n<p>Make all exports from the dependency available in the current scope. The <code>require</code> label can occur before a string. The dependency must export values with the <code>export</code> label. CommonJs or AMD modules cannot be consumed.</p>\n<p>Style: Labeled modules <code>dependencies.LabeledModulesPlugin</code></p>\n<p>Example:</p>\n<pre data-language=\"javascript\">// in dependency\nexport: var answer = 42;\nexport: function method(value) {\n    // Do something\n};</pre>\n<pre data-language=\"javascript\">require: \"dependency\";\nmethod(answer);</pre>\n<h4 id=\"require-resolve\"><code>require.resolve</code></h4>\n<pre data-language=\"javascript\">require.resolve(dependency: String)</pre>\n<p>Returns the module id of a dependency. The call is sync. No request to the server is fired. The compiler ensures that the dependency is available.</p>\n<p>The module id is a number in webpack (in contrast to node.js where it is a string, the filename).</p>\n<p>Style: CommonJs</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">var id = require.resolve(\"dependency\");\ntypeof id === \"number\";\nid === 0 // if dependency is the entry point\nid &gt; 0 // elsewise</pre>\n<h4 id=\"module-id\"><code>module.id</code></h4>\n<p>The module id of the current module.</p>\n<p>Style: CommonJs</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">// in file.js\nmodule.id === require.resolve(\"./file.js\")</pre>\n<h3 id=\"advanced\">Advanced</h3>\n<h4 id=\"require-cache\"><code>require.cache</code></h4>\n<p>Multiple requires to the same module result in only one module execution and only one export. Therefore a cache in the runtime exists. Removing values from this cache cause new module execution and a new export. This is only needed in rare cases (for compatibility!).</p>\n<p>Style: CommonJs</p>\n<pre data-language=\"javascript\">var d1 = require(\"dependency\");\nrequire(\"dependency\") === d1\ndelete require.cache[require.resolve(\"dependency\")];\nrequire(\"dependency\") !== d1</pre>\n<pre data-language=\"javascript\">// in file.js\nrequire.cache[module.id] === module\nrequire(\"./file.js\") === module.exports\ndelete require.cache[module.id];\nrequire.cache[module.id] === undefined\nrequire(\"./file.js\") !== module.exports // in theory; in praxis this causes a stack overflow\nrequire.cache[module.id] !== module</pre>\n<h4 id=\"require-context\"><code>require.context</code></h4>\n<pre data-language=\"javascript\">require.context(directory:String, includeSubdirs:Boolean /* optional, default true */, filter:RegExp /* optional */)</pre>\n<p>Example:</p>\n<pre data-language=\"javascript\">var context = require.context('components', true, /\\.html$/);\n\nvar componentA = context.resolve('componentA');</pre>\n<p>Style: webpack</p>\n<h4 id=\"require-ensure\"><code>require.ensure</code></h4>\n<pre data-language=\"javascript\">require.ensure(dependencies: String[], callback: function([require]), [chunkName: String])</pre>\n<p>Download additional dependencies on demand. The <code>dependencies</code> array lists modules that should be available. When they are, <code>callback</code> is called. If the callback is a function expression, dependencies in that source part are extracted and also loaded on demand. A single request is fired to the server, except if all modules are already available.</p>\n<p>This creates a chunk. The chunk can be named. If a chunk with this name already exists, the dependencies are merged into that chunk and that chunk is used.</p>\n<p>Style: CommonJs</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">// in file.js\nvar a = require(\"a\");\nrequire.ensure([\"b\"], function(require) {\n    var c = require(\"c\");\n});\nrequire.ensure([\"d\"], function() {\n    var e = require(\"e\");\n}, \"my chunk\");\nrequire.ensure([], function() {\n    var f = require(\"f\");\n}, \"my chunk\");\n/* This results in:\n    * entry chunk\n        - file.js\n        - a\n    * anonymous chunk\n        - b\n        - c\n    * \"my chunk\"\n        - d\n        - e\n        - f\n*/</pre>\n<h4 id=\"require-amd\">\n<code>require</code> AMD</h4>\n<pre data-language=\"javascript\">require(dependencies: String[], [callback: function(...)])</pre>\n<p>Behaves similar to <code>require.ensure</code>, but the callback is called with the exports of each dependency in the <code>dependencies</code> array. There is no option to provide a chunk name.</p>\n<p>Style: AMD</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">// in file.js\nvar a = require(\"a\");\nrequire([\"b\"], function(b) {\n  var c = require(\"c\");\n});\n/* This results in:\n    * entry chunk\n        - file.js\n        - a\n    * anonymous chunk\n        - b\n        - c\n*/</pre>\n<h4 id=\"require-include\"><code>require.include</code></h4>\n<pre data-language=\"javascript\">require.include(dependency: String)</pre>\n<p>Ensures that the dependency is available, but don’t execute it. This can be use for optimizing the position of a module in the chunks.</p>\n<p>Style: webpack</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">// in file.js\nrequire.include(\"a\");\nrequire.ensure([\"a\", \"b\"], function(require) {\n  // Do something\n});\nrequire.ensure([\"a\", \"c\"], function(require) {\n  // Do something\n});\n/* This results in:\n   * entry chunk\n     - file.js\n     - a\n   * anonymous chunk\n     - b\n   * anonymous chunk\n     - c\nWithout require.include \"a\" would be in both anonymous chunks.\nThe runtime behavior isn't changed.\n*/</pre>\n<h4 id=\"module-loaded\"><code>module.loaded</code></h4>\n<p>This is <code><span class=\"literal\">false</span></code> if the module is currently executing, and <code><span class=\"literal\">false</span></code> if the sync execution has finished.</p>\n<p>Style: node.js (for compatibility!)</p>\n<h4 id=\"module-hot\"><code>module.hot</code></h4>\n<p>See <a href=\"hot-module-replacement\">Hot Module Replacement</a>.</p>\n<p>Style: webpack</p>\n<h4 id=\"global\"><code>global</code></h4>\n<p>See <a href=\"http://nodejs.org/api/globals.html#globals_global\">node.js global</a></p>\n<p>Style: node.js</p>\n<h4 id=\"process\"><code>process</code></h4>\n<p>See <a href=\"http://nodejs.org/api/process.html\">node.js process</a></p>\n<p>Style: node.js</p>\n<h4 id=\"__dirname\"><code>__dirname</code></h4>\n<p>Depending on the config option <code>node.__dirname</code>:</p>\n<ul>\n<li>\n<code><span class=\"literal\">false</span></code>: Not defined</li>\n<li>\n<code>mock</code>: equal “/“</li>\n<li>\n<code><span class=\"literal\">true</span></code>: <a href=\"http://nodejs.org/api/globals.html#globals_dirname\">node.js __dirname</a>\n</li>\n</ul>\n<p>If used inside a expression that is parsed by the Parser, the config option is threaded as <code><span class=\"literal\">true</span></code>.</p>\n<p>Style: node.js (for compatibility!)</p>\n<h4 id=\"__filename\"><code>__filename</code></h4>\n<p>Depending on the config option <code>node.__filename</code>:</p>\n<ul>\n<li>\n<code><span class=\"literal\">false</span></code>: Not defined</li>\n<li>\n<code>mock</code>: equal “/index.js”</li>\n<li>\n<code><span class=\"literal\">true</span></code>: <a href=\"http://nodejs.org/api/globals.html#globals_filename\">node.js __filename</a>\n</li>\n</ul>\n<p>If used inside a expression that is parsed by the Parser, the config option is threaded as <code><span class=\"literal\">true</span></code>.</p>\n<p>Style: node.js (for compatibility!)</p>\n<h4 id=\"__resourcequery\"><code>__resourceQuery</code></h4>\n<p>The resource query of the current module.</p>\n<p>Style: webpack</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">// Inside \"file.js?test\":\n__resourceQuery === \"?test\"</pre>\n<h4 id=\"__webpack_public_path__\"><code>__webpack_public_path__</code></h4>\n<p>Equals the config options <code>output.publicPath</code>.</p>\n<p>Style: webpack</p>\n<h4 id=\"__webpack_require__\"><code>__webpack_require__</code></h4>\n<p>The raw require function. This expression isn’t parsed by the Parser for dependencies.</p>\n<p>Style: webpack</p>\n<h4 id=\"__webpack_chunk_load__\"><code>__webpack_chunk_load__</code></h4>\n<p>The internal chunk loading function. Takes two arguments:</p>\n<ul>\n<li>\n<code>chunkId</code> The id for the chunk to load.</li>\n<li>\n<code>callback(require)</code> A callback function called once the chunk is loaded.</li>\n</ul>\n<p>Style: webpack</p>\n<h4 id=\"__webpack_modules__\"><code>__webpack_modules__</code></h4>\n<p>Access to the internal object of all modules.</p>\n<p>Style: webpack</p>\n<h4 id=\"require-resolveweak\"><code>require.resolveWeak</code></h4>\n<p>Like <code>require.resolve</code>, but doesn’t include the module into the bundle. It’s a weak dependency.</p>\n<p>Style: webpack</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">if(__webpack_modules__[require.resolveWeak(\"module\")]) {\n  // do something when module is available\n}\nif(require.cache[require.resolveWeak(\"module\")]) {\n  // do something when module was loaded before\n}</pre>\n<h4 id=\"__webpack_hash__\"><code>__webpack_hash__</code></h4>\n<p>Access to the hash of the compilation.</p>\n<p>Only available with the <code>HotModuleReplacementPlugin</code> or the <code>ExtendedAPIPlugin</code></p>\n<p>Style: webpack</p>\n<h4 id=\"__non_webpack_require__\"><code>__non_webpack_require__</code></h4>\n<p>Generates a <code>require</code> function that is not parsed by webpack. Can be used to do cool stuff with a global require function if available.</p>\n<p>Style: webpack</p>\n<h4 id=\"debug\"><code>DEBUG</code></h4>\n<p>Equals the config option <code>debug</code></p>\n<p>Style: webpack</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/api-in-modules.html\" class=\"_attribution-link\">https://webpack.github.io/docs/api-in-modules.html</a>\n  </p>\n</div>\n","configuration":"<h1>Configuration</h1>\n<blockquote><p>webpack is fed a configuration object. Depending on your usage of webpack there are two ways to pass this configuration object:</p></blockquote>\n<h4 id=\"cli\">CLI</h4>\n<p>If you use the <a href=\"cli\">CLI</a> it will read a file <code>webpack.config.js</code> (or the file passed by the <code>--config</code> option). This file should export the configuration object:</p>\n<pre data-language=\"javascript\">module.exports = {\n    // configuration\n};</pre>\n<h4 id=\"node-js-api\">node.js API</h4>\n<p>If you use the <a href=\"node.js-api\">node.js API</a> you need to pass the configuration object as parameter:</p>\n<pre data-language=\"javascript\">webpack({\n    // configuration\n}, callback);</pre>\n<h4 id=\"multiple-configurations\">multiple configurations</h4>\n<p>In both cases you can also use an array of configurations, which are processed in parallel. They share filesystem cache and watchers so this is more efficent than calling webpack multiple times.</p>\n<h2 id=\"configuration-object-content\">configuration object content</h2>\n<blockquote><p>Hint: Keep in mind that you don’t need to write pure JSON into the configuration. Use any JavaScript you want. It’s just a node.js module…</p></blockquote>\n<p>Very simple configuration object example:</p>\n<pre data-language=\"javascript\">{\n    context: __dirname + \"/app\",\n    entry: \"./entry\",\n    output: {\n        path: __dirname + \"/dist\",\n        filename: \"bundle.js\"\n    }\n}</pre>\n<h3 id=\"context\"><code>context</code></h3>\n<p>The base directory (absolute path!) for resolving the <code>entry</code> option. If <code>output.pathinfo</code> is set, the included pathinfo is shortened to this directory.</p>\n<blockquote><p>Default: <code>process.cwd()</code></p></blockquote>\n<h3 id=\"entry\"><code>entry</code></h3>\n<p>The entry point for the bundle.</p>\n<p>If you pass a string: The string is resolved to a module which is loaded upon startup.</p>\n<p>If you pass an array: All modules are loaded upon startup. The last one is exported.</p>\n<pre data-language=\"javascript\">entry: [\"./entry1\", \"./entry2\"]</pre>\n<p>If you pass an object: Multiple entry bundles are created. The key is the chunk name. The value can be a string or an array.</p>\n<pre data-language=\"javascript\">{\n    entry: {\n        page1: \"./page1\",\n        page2: [\"./entry1\", \"./entry2\"]\n    },\n    output: {\n        // Make sure to use [name] or [id] in output.filename\n        //  when using multiple entry points\n        filename: \"[name].bundle.js\",\n        chunkFilename: \"[id].bundle.js\"\n    }\n}</pre>\n<h3 id=\"output\"><code>output</code></h3>\n<p>Options affecting the output of the compilation. <code>output</code> options tell Webpack how to write the compiled files to disk. Note, that while there can be multiple <code>entry</code> points, only one <code>output</code> configuration is specified.</p>\n<p>If you use any hashing (<code>[hash]</code> or <code>[chunkhash]</code>) make sure to have a consistent ordering of modules. Use the <code>OccurenceOrderPlugin</code> or <code>recordsPath</code>.</p>\n<h4 id=\"output-filename\"><code>output.filename</code></h4>\n<p>Specifies the name of each output file on disk. You must <strong>not</strong> specify an absolute path here! The <code>output.path</code> option determines the location on disk the files are written to, <code>filename</code> is used solely for naming the individual files.</p>\n<p><strong>single entry</strong></p>\n<pre data-language=\"javascript\">{\n  entry: './src/app.js',\n  output: {\n    filename: 'bundle.js',\n    path: './built'\n  }\n}\n\n// writes to disk: ./built/bundle.js</pre>\n<p><strong>multiple entries</strong></p>\n<p>If your configuration creates more than a single “chunk” (as with multiple entry points or when using plugins like CommonsChunkPlugin), you should use substitutions below to ensure that each file has a unique name.</p>\n<p><code>[name]</code> is replaced by the name of the chunk.</p>\n<p><code>[hash]</code> is replaced by the hash of the compilation.</p>\n<p><code>[chunkhash]</code> is replaced by the hash of the chunk.</p>\n<pre data-language=\"javascript\">{\n  entry: {\n    app: './src/app.js',\n    search: './src/search.js'\n  },\n  output: {\n    filename: '[name].js',\n    path: __dirname + '/built'\n  }\n}\n\n// writes to disk: ./built/app.js, ./built/search.js</pre>\n<h4 id=\"output-path\"><code>output.path</code></h4>\n<p>The output directory as <strong>absolute path</strong> (required).</p>\n<p><code>[hash]</code> is replaced by the hash of the compilation.</p>\n<h4 id=\"output-publicpath\"><code>output.publicPath</code></h4>\n<p>The <code>publicPath</code> specifies the public URL address of the output files when referenced in a browser. For loaders that embed <code>&lt;script&gt;</code> or <code>&lt;link&gt;</code> tags or reference assets like images, <code>publicPath</code> is used as the <code>href</code> or <code>url()</code> to the file when it’s different then their location on disk (as specified by <code>path</code>). This can be helpful when you want to host some or all output files on a different domain or on a CDN. The Webpack Dev Server also takes a hint from <code>publicPath</code> using it to determine where to serve the output files from. As with <code>path</code> you can use the <code>[hash]</code> substitution for a better caching profile.</p>\n<p><strong>config.js</strong></p>\n<pre data-language=\"javascript\">output: {\n    path: \"/home/proj/public/assets\",\n    publicPath: \"/assets/\"\n}</pre>\n<p><strong>index.html</strong></p>\n<pre data-language=\"javascript\">&lt;head&gt;\n  &lt;link href=\"/assets/spinner.gif\"/&gt;\n&lt;/head&gt;</pre>\n<p>And a more complicated example of using a CDN and hashes for assets.</p>\n<p><strong>config.js</strong></p>\n<pre data-language=\"javascript\">\noutput: {\n    path: \"/home/proj/cdn/assets/[hash]\",\n    publicPath: \"http://cdn.example.com/assets/[hash]/\"\n}</pre>\n<p><strong>Note:</strong> In cases when the eventual <code>publicPath</code> of of output files isn’t known at compile time, it can be left blank and set dynamically at runtime in the entry point file. If you don’t know the <code>publicPath</code> while compiling you can omit it and set <code>__webpack_public_path__</code> on your entry point.</p>\n<pre data-language=\"javascript\"> __webpack_public_path__ = myRuntimePublicPath\n\n// rest of your application entry</pre>\n<h4 id=\"output-chunkfilename\"><code>output.chunkFilename</code></h4>\n<p>The filename of non-entry chunks as relative path inside the <code>output.path</code> directory.</p>\n<p><code>[id]</code> is replaced by the id of the chunk.</p>\n<p><code>[name]</code> is replaced by the name of the chunk (or with the id when the chunk has no name).</p>\n<p><code>[hash]</code> is replaced by the hash of the compilation.</p>\n<p><code>[chunkhash]</code> is replaced by the hash of the chunk.</p>\n<h4 id=\"output-sourcemapfilename\"><code>output.sourceMapFilename</code></h4>\n<p>The filename of the SourceMaps for the JavaScript files. They are inside the <code>output.path</code> directory.</p>\n<p><code>[file]</code> is replaced by the filename of the JavaScript file.</p>\n<p><code>[id]</code> is replaced by the id of the chunk.</p>\n<p><code>[hash]</code> is replaced by the hash of the compilation.</p>\n<blockquote><p>Default: <code><span class=\"string\">\"[file].map\"</span></code></p></blockquote>\n<h4 id=\"output-devtoolmodulefilenametemplate\"><code>output.devtoolModuleFilenameTemplate</code></h4>\n<p>Filename template string of function for the <code>sources</code> array in a generated SourceMap.</p>\n<p><code>[resource]</code> is replaced by the path used by Webpack to resolve the file, including the query params to the rightmost loader (if any).</p>\n<p><code>[resource-path]</code> is the same as <code>[resource]</code> but without the loader query params.</p>\n<p><code>[loaders]</code> is the list of loaders and params up to the name of the rightmost loader (only explict loaders).</p>\n<p><code>[all-loaders]</code> is the list of loaders and params up to the name of the rightmost loader (including automatic loaders).</p>\n<p><code>[id]</code> is replaced by the id of the module.</p>\n<p><code>[hash]</code> is replaced by the hash of the module identifier.</p>\n<p><code>[absolute-resource-path]</code> is replaced with the absolute filename.</p>\n<blockquote><p>Default (devtool=<code>[inline-]source-map</code>): <code><span class=\"string\">\"webpack:///[resource-path]\"</span></code><br>Default (devtool=<code>eval</code>): <code><span class=\"string\">\"webpack:///[resource-path]?[loaders]\"</span></code><br>Default (devtool=<code>eval-source-map</code>): <code><span class=\"string\">\"webpack:///[resource-path]?[hash]\"</span></code></p></blockquote>\n<p>Can also be defined as a function instead of a string template. The function will accept an <code>info</code> object parameter which exposes the following properties:</p>\n<ul>\n<li>identifier</li>\n<li>shortIdentifier</li>\n<li>resource</li>\n<li>resourcePath</li>\n<li>absoluteResourcePath</li>\n<li>allLoaders</li>\n<li>query</li>\n<li>moduleId</li>\n<li>hash</li>\n</ul>\n<h4 id=\"output-devtoolfallbackmodulefilenametemplate\"><code>output.devtoolFallbackModuleFilenameTemplate</code></h4>\n<p>Similar to <code>output.devtoolModuleFilenameTemplate</code>, but used in the case of duplicate module identifiers.</p>\n<blockquote><p>Default: <code><span class=\"string\">\"webpack:///[resourcePath]?[hash]\"</span></code></p></blockquote>\n<h4 id=\"output-devtoollinetoline\"><code>output.devtoolLineToLine</code></h4>\n<p>Enable line to line mapped mode for all/specified modules. Line to line mapped mode uses a simple SourceMap where each line of the generated source is mapped to the same line of the original source. It’s a performance optimization. Only use it if your performance need to be better and you are sure that input lines match which generated lines.</p>\n<p><code><span class=\"literal\">true</span></code> enables it for all modules (not recommended)</p>\n<p>An object <code>{test, include, exclude}</code> similar to <code>module.loaders</code> enables it for specific files.</p>\n<blockquote><p>Default: disabled</p></blockquote>\n<h4 id=\"output-hotupdatechunkfilename\"><code>output.hotUpdateChunkFilename</code></h4>\n<p>The filename of the Hot Update Chunks. They are inside the <code>output.path</code> directory.</p>\n<p><code>[id]</code> is replaced by the id of the chunk.</p>\n<p><code>[hash]</code> is replaced by the hash of the compilation. (The last hash stored in the records)</p>\n<blockquote><p>Default: <code><span class=\"string\">\"[id].[hash].hot-update.js\"</span></code></p></blockquote>\n<h4 id=\"output-hotupdatemainfilename\"><code>output.hotUpdateMainFilename</code></h4>\n<p>The filename of the Hot Update Main File. It is inside the <code>output.path</code> directory.</p>\n<p><code>[hash]</code> is replaced by the hash of the compilation. (The last hash stored in the records)</p>\n<blockquote><p>Default: <code><span class=\"string\">\"[hash].hot-update.json\"</span></code></p></blockquote>\n<h4 id=\"output-jsonpfunction\"><code>output.jsonpFunction</code></h4>\n<p>The JSONP function used by webpack for asnyc loading of chunks.</p>\n<p>A shorter function may reduce the filesize a bit. Use different identifier, when having multiple webpack instances on a single page.</p>\n<blockquote><p>Default: <code><span class=\"string\">\"webpackJsonp\"</span></code></p></blockquote>\n<h4 id=\"output-hotupdatefunction\"><code>output.hotUpdateFunction</code></h4>\n<p>The JSONP function used by webpack for async loading of hot update chunks.</p>\n<blockquote><p>Default: <code><span class=\"string\">\"webpackHotUpdate\"</span></code></p></blockquote>\n<h4 id=\"output-pathinfo\"><code>output.pathinfo</code></h4>\n<p>Include comments with information about the modules.</p>\n<p><code>require(<span class=\"comment\">/* ./test */</span><span class=\"number\">23</span>)</code></p>\n<p>Do not use this in production.</p>\n<blockquote><p>Default: <code><span class=\"literal\">false</span></code></p></blockquote>\n<h4 id=\"output-library\"><code>output.library</code></h4>\n<p>If set, export the bundle as library. <code>output.library</code> is the name.</p>\n<p>Use this, if you are writing a library and want to publish it as single file.</p>\n<h4 id=\"output-librarytarget\"><code>output.libraryTarget</code></h4>\n<p>Which format to export the library:</p>\n<p><code><span class=\"string\">\"var\"</span></code> - Export by setting a variable: <code><span class=\"keyword\">var</span> Library = xxx</code> (default)</p>\n<p><code><span class=\"string\">\"this\"</span></code> - Export by setting a property of <code><span class=\"keyword\">this</span></code>: <code><span class=\"keyword\">this</span>[<span class=\"string\">\"Library\"</span>] = xxx</code></p>\n<p><code><span class=\"string\">\"commonjs\"</span></code> - Export by setting a property of <code>exports</code>: <code>exports[<span class=\"string\">\"Library\"</span>] = xxx</code></p>\n<p><code><span class=\"string\">\"commonjs2\"</span></code> - Export by setting <code>module.exports</code>: <code>module.exports = xxx</code></p>\n<p><code><span class=\"string\">\"amd\"</span></code> - Export to AMD (optionally named - set the name via the library option)</p>\n<p><code><span class=\"string\">\"umd\"</span></code> - Export to AMD, CommonJS2 or as property in root</p>\n<blockquote><p>Default: <code><span class=\"string\">\"var\"</span></code></p></blockquote>\n<p>If <code>output.library</code> is not set, but <code>output.libraryTarget</code> is set to a value other than <code><span class=\"keyword\">var</span></code>, every property of the exported object is copied (Except <code>amd</code>, <code>commonjs2</code> and <code>umd</code>).</p>\n<h4 id=\"output-umdnameddefine\"><code>output.umdNamedDefine</code></h4>\n<p>If <code>output.libraryTarget</code> is set to <code>umd</code> and <code>output.library</code> is set, setting this to <code><span class=\"literal\">true</span></code> will name the AMD module.</p>\n<h4 id=\"output-sourceprefix\"><code>output.sourcePrefix</code></h4>\n<p>Prefixes every line of the source in the bundle with this string.</p>\n<blockquote><p>Default: <code><span class=\"string\">\"\\t\"</span></code></p></blockquote>\n<h4 id=\"output-crossoriginloading\"><code>output.crossOriginLoading</code></h4>\n<p>This option enables cross-origin loading of chunks.</p>\n<p>Possible values are:</p>\n<p><code><span class=\"literal\">false</span></code> - Disable cross-origin loading.</p>\n<p><code><span class=\"string\">\"anonymous\"</span></code> - Cross-origin loading is enabled. When using <code>anonymous</code> no credentials will be send with the request.</p>\n<p><code><span class=\"string\">\"use-credentials\"</span></code> - Cross-origin loading is enabled and credentials will be send with the request.</p>\n<p>For more information on cross-origin loading see <a href=\"https://developer.mozilla.org/en/docs/Web/HTML/Element/script#attr-crossorigin\">MDN</a></p>\n<blockquote><p>Default: <code><span class=\"literal\">false</span></code></p></blockquote>\n<h3 id=\"module\"><code>module</code></h3>\n<p>Options affecting the normal modules (<code>NormalModuleFactory</code>)</p>\n<h4 id=\"module-loaders\"><code>module.loaders</code></h4>\n<p>An array of automatically applied loaders.</p>\n<p>Each item can have these properties:</p>\n<ul>\n<li>\n<code>test</code>: A condition that must be met</li>\n<li>\n<code>exclude</code>: A condition that must not be met</li>\n<li>\n<code>include</code>: A condition that must be met</li>\n<li>\n<code>loader</code>: A string of “!” separated loaders</li>\n<li>\n<code>loaders</code>: An array of loaders as string</li>\n</ul>\n<p>A condition may be a <code>RegExp</code> (tested against absolute path), a <code>string</code> containing the absolute path, a <code><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(absPath)</span>: <span class=\"title\">bool</span></span></code>, or an array of one of these combined with “and”.</p>\n<p>See more: <a href=\"loaders\">loaders</a></p>\n<p><em>IMPORTANT</em>: The loaders here are resolved <em>relative to the resource</em> which they are applied to. This means they are not resolved relative the the configuration file. If you have loaders installed from npm and your <code>node_modules</code> folder is not in a parent folder of all source files, webpack cannot find the loader. You need to add the <code>node_modules</code> folder as absolute path to the <code>resolveLoader.root</code> option. (<code>resolveLoader: { root: path.join(__dirname, <span class=\"string\">\"node_modules\"</span>) }</code>)</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">module.loaders: [\n  {\n    // \"test\" is commonly used to match the file extension\n    test: /\\.jsx$/,\n\n    // \"include\" is commonly used to match the directories\n    include: [\n      path.resolve(__dirname, \"app/src\"),\n      path.resolve(__dirname, \"app/test\")\n    ],\n\n    // \"exclude\" should be used to exclude exceptions\n    // try to prefer \"include\" when possible\n\n    // the \"loader\"\n    loader: \"babel-loader\"\n  }\n]</pre>\n<h4 id=\"module-preloaders-module-postloaders\">\n<code>module.preLoaders</code>, <code>module.postLoaders</code>\n</h4>\n<p>Syntax like <code>module.loaders</code>.</p>\n<p>An array of applied pre and post loaders.</p>\n<h4 id=\"module-noparse\"><code>module.noParse</code></h4>\n<p>A RegExp or an array of RegExps. Don’t parse files matching.</p>\n<p>It’s matched against the full resolved request.</p>\n<p>This can boost the performance when ignoring big libraries.</p>\n<p>The files are expected to have no call to <code>require</code>, <code>define</code> or similar. They are allowed to use <code>exports</code> and <code>module.exports</code>.</p>\n<h4 id=\"automatically-created-contexts-defaults-module-xxxcontextxxx\">automatically created contexts defaults <code>module.xxxContextXxx</code>\n</h4>\n<p>There are multiple options to configure the defaults for an automatically created context. We differentiate three types of automatically created contexts:</p>\n<ul>\n<li>\n<code>exprContext</code>: An expression as dependency (i. e. <code>require(expr)</code>)</li>\n<li>\n<code>wrappedContext</code>: An expression plus pre- and/or suffixed string (i. e. <code>require(<span class=\"string\">\"./templates/\"</span> + expr)</code>)</li>\n<li>\n<code>unknownContext</code>: Any other unparsable usage of <code>require</code> (i. e. <code>require</code>)</li>\n</ul>\n<p>Four options are possible for automatically created contexts:</p>\n<ul>\n<li>\n<code>request</code>: The request for context.</li>\n<li>\n<code>recursive</code>: Subdirectories should be traversed.</li>\n<li>\n<code>regExp</code>: The RegExp for the expression.</li>\n<li>\n<code>critical</code>: This type of dependency should be consider as critical (emits a warning).</li>\n</ul>\n<p>All options and defaults:</p>\n<p><code>unknownContextRequest = <span class=\"string\">\".\"</span></code>, <code>unknownContextRecursive = <span class=\"literal\">true</span></code>, <code>unknownContextRegExp = <span class=\"regexp\">/^\\.\\/.*$/</span></code>, <code>unknownContextCritical = <span class=\"literal\">true</span></code></p>\n<p><code>exprContextRequest = <span class=\"string\">\".\"</span></code>, <code>exprContextRegExp = <span class=\"regexp\">/^\\.\\/.*$/</span></code>, <code>exprContextRecursive = <span class=\"literal\">true</span></code>, <code>exprContextCritical = <span class=\"literal\">true</span></code></p>\n<p><code>wrappedContextRegExp = <span class=\"regexp\">/.*/</span></code>, <code>wrappedContextRecursive = <span class=\"literal\">true</span></code>, <code>wrappedContextCritical = <span class=\"literal\">false</span></code></p>\n<blockquote><p>Note: <code>module.wrappedContextRegExp</code> only refers to the middle part of the full RegExp. The remaining is generated from prefix and surfix.</p></blockquote>\n<p>Example:</p>\n<pre data-language=\"javascript\">{\n  module: {\n    // Disable handling of unknown requires\n    unknownContextRegExp: /$^/,\n    unknownContextCritical: false,\n\n    // Disable handling of requires with a single expression\n    exprContextRegExp: /$^/,\n    exprContextCritical: false,\n\n    // Warn for every expression in require\n    wrappedContextCritical: true\n  }\n}</pre>\n<h3 id=\"resolve\"><code>resolve</code></h3>\n<p>Options affecting the resolving of modules.</p>\n<h4 id=\"resolve-alias\"><code>resolve.alias</code></h4>\n<p>Replace modules by other modules or paths.</p>\n<p>Expected is a object with keys being module names. The value is the new path. It’s similar to a replace but a bit more clever. If the the key ends with <code>$</code> only the exact match (without the <code>$</code>) will be replaced.</p>\n<p>If the value is a relative path it will be relative to the file containing the require.</p>\n<p>Examples: Calling a require from <code>/abc/entry.js</code> with different alias settings.</p>\n<table class=\"table table-bordered table-striped table-hover\">\n<thead><tr>\n<th><code>alias:</code></th>\n<th><code>require(<span class=\"string\">\"xyz\"</span>)</code></th>\n<th><code>require(<span class=\"string\">\"xyz/file.js\"</span>)</code></th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>{}</code></td>\n<td><code>/abc/node_modules/xyz/index.js</code></td>\n<td><code>/abc/node_modules/xyz/file.js</code></td>\n</tr>\n<tr>\n<td><code>{ xyz: <span class=\"string\">\"/absolute/path/to/file.js\"</span> }</code></td>\n<td><code>/absolute/path/to/file.js</code></td>\n<td><code>/abc/node_modules/xyz/file.js</code></td>\n</tr>\n<tr>\n<td><code>{ xyz$: <span class=\"string\">\"/absolute/path/to/file.js\"</span> }</code></td>\n<td><code>/absolute/path/to/file.js</code></td>\n<td>error</td>\n</tr>\n<tr>\n<td><code>{ xyz: <span class=\"string\">\"./dir/file.js\"</span> }</code></td>\n<td><code>/abc/dir/file.js</code></td>\n<td><code>/abc/node_modules/xyz/file.js</code></td>\n</tr>\n<tr>\n<td><code>{ xyz$: <span class=\"string\">\"./dir/file.js\"</span> }</code></td>\n<td><code>/abc/dir/file.js</code></td>\n<td>error</td>\n</tr>\n<tr>\n<td><code>{ xyz: <span class=\"string\">\"/some/dir\"</span> }</code></td>\n<td><code>/some/dir/index.js</code></td>\n<td><code>/some/dir/file.js</code></td>\n</tr>\n<tr>\n<td><code>{ xyz$: <span class=\"string\">\"/some/dir\"</span> }</code></td>\n<td><code>/some/dir/index.js</code></td>\n<td><code>/abc/node_modules/xyz/file.js</code></td>\n</tr>\n<tr>\n<td><code>{ xyz: <span class=\"string\">\"./dir\"</span> }</code></td>\n<td><code>/abc/dir/index.js</code></td>\n<td><code>/abc/dir/file.js</code></td>\n</tr>\n<tr>\n<td><code>{ xyz: <span class=\"string\">\"modu\"</span> }</code></td>\n<td><code>/abc/node_modules/modu/index.js</code></td>\n<td><code>/abc/node_modules/modu/file.js</code></td>\n</tr>\n<tr>\n<td><code>{ xyz$: <span class=\"string\">\"modu\"</span> }</code></td>\n<td><code>/abc/node_modules/modu/index.js</code></td>\n<td><code>/abc/node_modules/xyz/file.js</code></td>\n</tr>\n<tr>\n<td><code>{ xyz: <span class=\"string\">\"modu/some/file.js\"</span> }</code></td>\n<td><code>/abc/node_modules/modu/some/file.js</code></td>\n<td>error</td>\n</tr>\n<tr>\n<td><code>{ xyz: <span class=\"string\">\"modu/dir\"</span> }</code></td>\n<td><code>/abc/node_modules/modu/dir/index.js</code></td>\n<td><code>/abc/node_modules/dir/file.js</code></td>\n</tr>\n<tr>\n<td><code>{ xyz: <span class=\"string\">\"xyz/dir\"</span> }</code></td>\n<td><code>/abc/node_modules/xyz/dir/index.js</code></td>\n<td><code>/abc/node_modules/xyz/dir/file.js</code></td>\n</tr>\n<tr>\n<td><code>{ xyz$: <span class=\"string\">\"xyz/dir\"</span> }</code></td>\n<td><code>/abc/node_modules/xyz/dir/index.js</code></td>\n<td><code>/abc/node_modules/xyz/file.js</code></td>\n</tr>\n</tbody>\n</table>\n<p><code>index.js</code> may resolve to another file if defined in the <code>package.json</code>.</p>\n<p><code>/abc/node_modules</code> may resolve in <code>/node_modules</code> too.</p>\n<h4 id=\"resolve-root\"><code>resolve.root</code></h4>\n<p>The directory (<strong>absolute path</strong>) that contains your modules. May also be an array of directories. This setting should be used to add individual directories to the search path.</p>\n<blockquote><p>It <strong>must</strong> be an <strong>absolute path</strong>! Don’t pass something like <code>.<span class=\"regexp\">/app/m</span>odules</code>.</p></blockquote>\n<p>Example:</p>\n<pre data-language=\"javascript\">var path = require('path');\n\n// ...\nresolve: {\n  root: [\n    path.resolve('./app/modules'),\n    path.resolve('./vendor/modules')\n  ]\n}</pre>\n<h4 id=\"resolve-modulesdirectories\"><code>resolve.modulesDirectories</code></h4>\n<p>An array of directory names to be resolved to the current directory as well as its ancestors, and searched for modules. This functions similarly to how node finds “node_modules” directories. For example, if the value is <code>[<span class=\"string\">\"mydir\"</span>]</code>, webpack will look in “./mydir”, “../mydir”, “../../mydir”, etc.</p>\n<blockquote>\n<p>Default: <code>[<span class=\"string\">\"web_modules\"</span>, <span class=\"string\">\"node_modules\"</span>]</code></p>\n<p>Note: Passing <code><span class=\"string\">\"../someDir\"</span></code>, <code><span class=\"string\">\"app\"</span></code>, <code><span class=\"string\">\".\"</span></code> or an absolute path isn’t necessary here. Just use a directory name, not a path. Use only if you expect to have a hierarchy within these folders. Otherwise you may want to use the <code>resolve.root</code> option instead.</p>\n</blockquote>\n<h4 id=\"resolve-fallback\"><code>resolve.fallback</code></h4>\n<p>A directory (or array of directories <strong>absolute paths</strong>), in which webpack should look for modules that weren’t found in <code>resolve.root</code> or <code>resolve.modulesDirectories</code>.</p>\n<h4 id=\"resolve-extensions\"><code>resolve.extensions</code></h4>\n<p>An array of extensions that should be used to resolve modules. For example, in order to discover CoffeeScript files, your array should contain the string <code><span class=\"string\">\".coffee\"</span></code>.</p>\n<blockquote><p>Default: <code>[<span class=\"string\">\"\"</span>, <span class=\"string\">\".webpack.js\"</span>, <span class=\"string\">\".web.js\"</span>, <span class=\"string\">\".js\"</span>]</code></p></blockquote>\n<p><strong>IMPORTANT</strong>: Setting this option will override the default, meaning that webpack will no longer try to resolve modules using the default extensions. If you want modules that were required with their extension (e.g. <code>require(<span class=\"string\">'./somefile.ext'</span>)</code>) to be properly resolved, you <strong>must</strong> include an empty string in your array. Similarly, if you want modules that were required without extensions (e.g. <code>require(<span class=\"string\">'underscore'</span>)</code>) to be resolved to files with “.js” extensions, you <strong>must</strong> include <code><span class=\"string\">\".js\"</span></code> in your array.</p>\n<h4 id=\"resolve-packagemains\"><code>resolve.packageMains</code></h4>\n<p>Check these fields in the <code>package.json</code> for suitable files.</p>\n<blockquote><p>Default: <code>[<span class=\"string\">\"webpack\"</span>, <span class=\"string\">\"browser\"</span>, <span class=\"string\">\"web\"</span>, <span class=\"string\">\"browserify\"</span>, [<span class=\"string\">\"jam\"</span>, <span class=\"string\">\"main\"</span>], <span class=\"string\">\"main\"</span>]</code></p></blockquote>\n<h4 id=\"resolve-packagealias\"><code>resolve.packageAlias</code></h4>\n<p>Check this field in the <code>package.json</code> for an object. Key-value-pairs are threaded as aliasing according to <a href=\"https://gist.github.com/defunctzombie/4339901\">this spec</a></p>\n<blockquote><p>Not set by default</p></blockquote>\n<p>Example: <code><span class=\"string\">\"browser\"</span></code> to check the browser field.</p>\n<h4 id=\"resolve-unsafecache\"><code>resolve.unsafeCache</code></h4>\n<p>Enable aggressive but unsafe caching for the resolving of a part of your files. Changes to cached paths may cause failure (in rare cases). An array of RegExps, only a RegExp or <code><span class=\"literal\">true</span></code> (all files) is expected. If the resolved path matches, it’ll be cached.</p>\n<blockquote><p>Default: <code>[]</code></p></blockquote>\n<h3 id=\"resolveloader\"><code>resolveLoader</code></h3>\n<p>Like <code>resolve</code> but for loaders.</p>\n<pre data-language=\"javascript\">// Default:\n{\n    modulesDirectories: [\"web_loaders\", \"web_modules\", \"node_loaders\", \"node_modules\"],\n    extensions: [\"\", \".webpack-loader.js\", \".web-loader.js\", \".loader.js\", \".js\"],\n    packageMains: [\"webpackLoader\", \"webLoader\", \"loader\", \"main\"]\n}</pre>\n<p>Note that you can use <code>alias</code> here and other features familiar from <code>resolve</code>. For example <code>{ txt: <span class=\"string\">'raw-loader'</span> }</code> would shim <code>txt!templates/demo.txt</code> to use <code>raw-loader</code>.</p>\n<h4 id=\"resolveloader-moduletemplates\"><code>resolveLoader.moduleTemplates</code></h4>\n<p>That’s a <code>resolveLoader</code> only property.</p>\n<p>It describes alternatives for the module name that are tried.</p>\n<blockquote><p>Default: <code>[<span class=\"string\">\"*-webpack-loader\"</span>, <span class=\"string\">\"*-web-loader\"</span>, <span class=\"string\">\"*-loader\"</span>, <span class=\"string\">\"*\"</span>]</code></p></blockquote>\n<h3 id=\"externals\"><code>externals</code></h3>\n<p>Specify dependencies that shouldn’t be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on <code>output.libraryTarget</code>.</p>\n<p>As value an object, a string, a function, a RegExp and an array is accepted.</p>\n<ul>\n<li>string: An exact matched dependency becomes external. The same string is used as external dependency.</li>\n<li>object: If an dependency matches exactly a property of the object, the property value is used as dependency. The property value may contain a dependency type prefixed and separated with a space. If the property value is <code><span class=\"literal\">true</span></code> the property name is used instead. If the property value is <code><span class=\"literal\">false</span></code> the externals test is aborted and the dependency is not external. See example below.</li>\n<li>function: <code>function(context, request, callback(err, result))</code> The function is called on each dependency. If a result is passed to the callback function this value is handled like a property value of an object (above bullet point).</li>\n<li>RegExp: Every matched dependency becomes external. The matched text is used as the <code>request</code> for the external dependency. Because the <code>request</code> <em>is the exact code</em> used to generate the external code hook, if you are matching a commonjs package (e.g. ‘../some/package.js’), instead use the function external strategy. You can import the package via <code>callback(<span class=\"literal\">null</span>, <span class=\"string\">\"require('\"</span> + request + <span class=\"string\">\"')\"</span></code>, which generates a <code>module.exports = require(<span class=\"string\">'../some/package.js'</span>);</code>, using require outside of webpack context.</li>\n<li>array: Multiple values of the scheme (recursive).</li>\n</ul>\n<p>Example:</p>\n<pre data-language=\"javascript\">{\n    output: { libraryTarget: \"commonjs\" },\n    externals: [\n        {\n            a: false, // a is not external\n            b: true, // b is external (require(\"b\"))\n            \"./c\": \"c\", // \"./c\" is external (require(\"c\"))\n            \"./d\": \"var d\" // \"./d\" is external (d)\n        },\n        // Every non-relative module is external\n        // abc -&gt; require(\"abc\")\n        /^[a-z\\-0-9]+$/,\n        function(context, request, callback) {\n            // Every module prefixed with \"global-\" becomes external\n            // \"global-abc\" -&gt; abc\n            if(/^global-/.test(request))\n                return callback(null, \"var \" + request.substr(7));\n            callback();\n        },\n        \"./e\" // \"./e\" is external (require(\"./e\"))\n    ]\n}</pre>\n<table class=\"table table-bordered table-striped table-hover\">\n<thead><tr>\n<th>type</th>\n<th>value</th>\n<th>resulting import code</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>“var”</td>\n<td><code><span class=\"string\">\"abc\"</span></code></td>\n<td><code>module.exports = abc;</code></td>\n</tr>\n<tr>\n<td>“var”</td>\n<td><code><span class=\"string\">\"abc.def\"</span></code></td>\n<td><code>module.exports = abc.def;</code></td>\n</tr>\n<tr>\n<td>“this”</td>\n<td><code><span class=\"string\">\"abc\"</span></code></td>\n<td><code>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> {</span> module.exports = <span class=\"keyword\">this</span>[<span class=\"string\">\"abc\"</span>]; }());</code></td>\n</tr>\n<tr>\n<td>“this”</td>\n<td><code>[<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"def\"</span>]</code></td>\n<td><code>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> {</span> module.exports = <span class=\"keyword\">this</span>[<span class=\"string\">\"abc\"</span>][<span class=\"string\">\"def\"</span>]; }());</code></td>\n</tr>\n<tr>\n<td>“commonjs”</td>\n<td><code><span class=\"string\">\"abc\"</span></code></td>\n<td><code>module.exports = require(<span class=\"string\">\"abc\"</span>);</code></td>\n</tr>\n<tr>\n<td>“commonjs”</td>\n<td><code>[<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"def\"</span>]</code></td>\n<td><code>module.exports = require(<span class=\"string\">\"abc\"</span>).def;</code></td>\n</tr>\n<tr>\n<td>“amd”</td>\n<td><code><span class=\"string\">\"abc\"</span></code></td>\n<td><code>define([<span class=\"string\">\"abc\"</span>], <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(X)</span> {</span> module.exports = X; })</code></td>\n</tr>\n<tr>\n<td>“umd”</td>\n<td><code><span class=\"string\">\"abc\"</span></code></td>\n<td>everything above</td>\n</tr>\n</tbody>\n</table>\n<p>Enforcing <code>amd</code> or <code>umd</code> in a external value will break if not compiling as amd/umd target.</p>\n<blockquote><p>Note: If using <code>umd</code> you can specify an object as external value with property <code>commonjs</code>, <code>commonjs2</code>, <code>amd</code> and <code>root</code> to set different values for each import kind.</p></blockquote>\n<h3 id=\"target\"><code>target</code></h3>\n<ul>\n<li>\n<code><span class=\"string\">\"web\"</span></code> Compile for usage in a browser-like environment (default)</li>\n<li>\n<code><span class=\"string\">\"webworker\"</span></code> Compile as WebWorker</li>\n<li>\n<code><span class=\"string\">\"node\"</span></code> Compile for usage in a node.js-like environment (use <code>require</code> to load chunks)</li>\n<li>\n<code><span class=\"string\">\"async-node\"</span></code> Compile for usage in a node.js-like environment (use <code>fs</code> and <code>vm</code> to load chunks async)</li>\n<li>\n<code><span class=\"string\">\"node-webkit\"</span></code> Compile for usage in webkit, uses jsonp chunk loading but also supports builtin node.js modules plus require(“nw.gui”) (experimental)</li>\n<li>\n<code><span class=\"string\">\"electron\"</span></code> Compile for usage in <a href=\"http://electron.atom.io/\">Electron</a> – supports <code>require</code>-ing Electron-specific modules.</li>\n</ul>\n<h3 id=\"bail\"><code>bail</code></h3>\n<p>Report the first error as a hard error instead of tolerating it.</p>\n<h3 id=\"profile\"><code>profile</code></h3>\n<p>Capture timing information for each module.</p>\n<blockquote><p>Hint: Use the <a href=\"http://webpack.github.io/analyse\">analyze tool</a> to visualize it. <code>--json</code> or <code>stats.toJson()</code> will give you the stats as JSON.</p></blockquote>\n<h3 id=\"cache\"><code>cache</code></h3>\n<p>Cache generated modules and chunks to improve performance for multiple incremental builds.</p>\n<p>This is enabled by default in watch mode.</p>\n<p>You can pass <code><span class=\"literal\">false</span></code> to disable it.</p>\n<p>You can pass an object to enable it and let webpack use the passed object as cache. This way you can share the cache object between multiple compiler calls. Note: Don’t share the cache between calls with different options.</p>\n<h3 id=\"watch\"><code>watch</code></h3>\n<p>Enter watch mode, which rebuilds on file change.</p>\n<h3 id=\"watchoptions-aggregatetimeout\"><code>watchOptions.aggregateTimeout</code></h3>\n<p>(only used when using <a href=\"cli\">CLI</a> or simple node.js API)</p>\n<p>Delay the rebuilt after the first change. Value is a time in ms.</p>\n<blockquote><p>Default: 300</p></blockquote>\n<h3 id=\"watchoptions-poll\"><code>watchOptions.poll</code></h3>\n<p>(only used when using <a href=\"cli\">CLI</a> or simple node.js API)</p>\n<p><code><span class=\"literal\">true</span></code>: use polling</p>\n<p>number: use polling with specified interval</p>\n<blockquote><p>Default: <code><span class=\"literal\">undefined</span></code></p></blockquote>\n<h3 id=\"debug\"><code>debug</code></h3>\n<p>Switch loaders to debug mode.</p>\n<h3 id=\"devtool\"><code>devtool</code></h3>\n<p>Choose a developer tool to enhance debugging.</p>\n<p><code>eval</code> - Each module is executed with <code>eval</code> and <code><span class=\"comment\">//@ sourceURL</span></code>.</p>\n<p><code>source-map</code> - A SourceMap is emitted. See also <code>output.sourceMapFilename</code>.</p>\n<p><code>hidden-source-map</code> - Same as <code>source-map</code>, but doesn’t add a reference comment to the bundle.</p>\n<p><code>inline-source-map</code> - A SourceMap is added as DataUrl to the JavaScript file.</p>\n<p><code>eval-source-map</code> - Each module is executed with <code>eval</code> and a SourceMap is added as DataUrl to the <code>eval</code>.</p>\n<p><code>cheap-source-map</code> - A SourceMap without column-mappings. SourceMaps from loaders are not used.</p>\n<p><code>cheap-module-source-map</code> - A SourceMap without column-mappings. SourceMaps from loaders are simplified to a single mapping per line.</p>\n<p>Prefixing <code>@</code>, <code>#</code> or <code>#@</code> will enforce a pragma style. (Defaults to <code>#</code>, recommended)</p>\n<p>Combinations are possible. <code>hidden</code>, <code>inline</code>, <code>eval</code> and pragma style are exclusive.</p>\n<p>i. e. <code>cheap-module-inline-source-map</code>, <code>cheap-eval-source-map</code>, <code>#@source-map</code></p>\n<blockquote><p>Hint: If your modules already contain SourceMaps you’ll need to use the <a href=\"https://github.com/webpack/source-map-loader\">source-map-loader</a> to merge it with the emitted SourceMap.</p></blockquote>\n<table class=\"table table-bordered table-striped table-hover\">\n<thead><tr>\n<th>devtool</th>\n<th>build speed</th>\n<th>rebuild speed</th>\n<th>production supported</th>\n<th>quality</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>eval</td>\n<td>+++</td>\n<td>+++</td>\n<td>no</td>\n<td>generated code</td>\n</tr>\n<tr>\n<td>cheap-eval-source-map</td>\n<td>+</td>\n<td>++</td>\n<td>no</td>\n<td>transformed code (lines only)</td>\n</tr>\n<tr>\n<td>cheap-source-map</td>\n<td>+</td>\n<td>o</td>\n<td>yes</td>\n<td>transformed code (lines only)</td>\n</tr>\n<tr>\n<td>cheap-module-eval-source-map</td>\n<td>o</td>\n<td>++</td>\n<td>no</td>\n<td>original source (lines only)</td>\n</tr>\n<tr>\n<td>cheap-module-source-map</td>\n<td>o</td>\n<td>-</td>\n<td>yes</td>\n<td>original source (lines only)</td>\n</tr>\n<tr>\n<td>eval-source-map</td>\n<td>–</td>\n<td>+</td>\n<td>no</td>\n<td>original source</td>\n</tr>\n<tr>\n<td>source-map</td>\n<td>–</td>\n<td>–</td>\n<td>yes</td>\n<td>original source</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre data-language=\"javascript\">{\n    devtool: \"#inline-source-map\"\n}\n// =&gt;\n//# sourceMappingURL=...</pre>\n<blockquote><p>Note: With the next major version the default for <code>-d</code> will change to <code>cheap-module-eval-source-map</code></p></blockquote>\n<h3 id=\"devserver\"><code>devServer</code></h3>\n<p>Can be used to configure the behaviour of <a href=\"https://github.com/webpack/webpack-dev-server\">webpack-dev-server</a> when the webpack config is passed to webpack-dev-server CLI.</p>\n<p>Example:</p>\n<pre data-language=\"javascript\">{\n    devServer: {\n        contentBase: \"./build\",\n    }\n}</pre>\n<h3 id=\"node\"><code>node</code></h3>\n<p>Include polyfills or mocks for various node stuff:</p>\n<ul>\n<li>\n<code>console</code>: <code><span class=\"literal\">true</span></code> or <code><span class=\"literal\">false</span></code>\n</li>\n<li>\n<code>global</code>: <code><span class=\"literal\">true</span></code> or <code><span class=\"literal\">false</span></code>\n</li>\n<li>\n<code>process</code>: <code><span class=\"literal\">true</span></code>, <code><span class=\"string\">\"mock\"</span></code> or <code><span class=\"literal\">false</span></code>\n</li>\n<li>\n<code>Buffer</code>: <code><span class=\"literal\">true</span></code> or <code><span class=\"literal\">false</span></code>\n</li>\n<li>\n<code>__filename</code>: <code><span class=\"literal\">true</span></code> (real filename), <code><span class=\"string\">\"mock\"</span></code> (<code><span class=\"string\">\"/index.js\"</span></code>) or <code><span class=\"literal\">false</span></code>\n</li>\n<li>\n<code>__dirname</code>: <code><span class=\"literal\">true</span></code> (real dirname), <code><span class=\"string\">\"mock\"</span></code> (<code><span class=\"string\">\"/\"</span></code>) or <code><span class=\"literal\">false</span></code>\n</li>\n<li>\n<code>&lt;node buildin&gt;</code>: <code><span class=\"literal\">true</span></code>, <code><span class=\"string\">\"mock\"</span></code>, <code><span class=\"string\">\"empty\"</span></code> or <code><span class=\"literal\">false</span></code>\n</li>\n</ul>\n<pre data-language=\"javascript\">// Default:\n{\n    console: false,\n    global: true,\n    process: true,\n    Buffer: true,\n    __filename: \"mock\",\n    __dirname: \"mock\",\n    setImmediate: true\n}</pre>\n<h3 id=\"amd\"><code>amd</code></h3>\n<p>Set the value of <code>require.amd</code> and <code>define.amd</code>.</p>\n<p>Example: <code>amd: { jQuery: <span class=\"literal\">true</span> }</code> (for old 1.x AMD versions of jquery)</p>\n<h3 id=\"loader\"><code>loader</code></h3>\n<p>Custom values available in the loader context.</p>\n<h3 id=\"recordspath-recordsinputpath-recordsoutputpath\">\n<code>recordsPath</code>, <code>recordsInputPath</code>, <code>recordsOutputPath</code>\n</h3>\n<p>Store/Load compiler state from/to a json file. This will result in persistent ids of modules and chunks.</p>\n<p>An <strong>absolute path</strong> is expected. <code>recordsPath</code> is used for <code>recordsInputPath</code> and <code>recordsOutputPath</code> if they left undefined.</p>\n<p>This is required, when using Hot Code Replacement between multiple calls to the compiler.</p>\n<h3 id=\"plugins\"><code>plugins</code></h3>\n<p>Add additional plugins to the compiler.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/configuration.html\" class=\"_attribution-link\">https://webpack.github.io/docs/configuration.html</a>\n  </p>\n</div>\n","plugins":"<h1>Plugins</h1>\n<p>For a high-level introduction to writing plugins, start with <a href=\"https://github.com/webpack/docs/wiki/How-to-write-a-plugin\">How to write a plugin</a>.</p>\n<p>Many objects in Webpack extend the Tapable class, which exposes a <code>plugin</code> method. And with the <code>plugin</code> method, plugins can inject custom build steps. You will see <code>compiler.plugin</code> and <code>compilation.plugin</code> used a lot. Essentially, each one of these plugin calls binds a callback to fire at specific steps throughout the build process.</p>\n<p>A plugin is installed once as Webpack starts up. Webpack installs a plugin by calling its <code>apply</code> method, and passes a reference to the Webpack <code>compiler</code> object. You may then call <code>compiler.plugin</code> to access asset compilations and their individual build steps. An example would look like this:</p>\n<pre data-language=\"javascript\">// MyPlugin.js\n\nfunction MyPlugin(options) {\n  // Configure your plugin with options...\n}\n\nMyPlugin.prototype.apply = function(compiler) {\n  compiler.plugin(\"compile\", function(params) {\n    console.log(\"The compiler is starting to compile...\");\n  });\n\n  compiler.plugin(\"compilation\", function(compilation) {\n    console.log(\"The compiler is starting a new compilation...\");\n\n    compilation.plugin(\"optimize\", function() {\n      console.log(\"The compilation is starting to optimize files...\");\n    });\n  });\n\n  compiler.plugin(\"emit\", function(compilation, callback) {\n    console.log(\"The compilation is going to emit files...\");\n    callback();\n  });\n};\n\nmodule.exports = MyPlugin;</pre>\n<p>Then in <code>webpack.config.js</code></p>\n<pre data-language=\"javascript\">    plugins: [\n        new MyPlugin({options: 'nada'})\n    ]</pre>\n<h4 id=\"note-on-interface-types\">Note on interface types…</h4>\n<p>There are two types of plugin interfaces.</p>\n<ul>\n<li>\n<p>Timing based</p>\n<ul>\n<li>sync (default): As seen above. Use return.</li>\n<li>async: Last parameter is a callback. Signature: function(err, result)</li>\n<li>parallel: The handlers are invoked parallel (async).</li>\n</ul>\n</li>\n<li>\n<p>Return value</p>\n<ul>\n<li>not bailing (default): No return value.</li>\n<li>bailing: The handlers are invoked in order until one handler returns something.</li>\n<li>parallel bailing: The handlers are invoked in parallel (async). The first returned value (by order) is significant.</li>\n<li>waterfall: Each handler gets the result value of the last handler as an argument.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"the-compiler-instance\">The <code>Compiler</code> instance</h2>\n<p>Plugins need to have the apply method on their prototype chain (or bound to) in order to have access to the compiler instance.</p>\n<pre data-language=\"javascript\">\n//MyPlugin.js\n\nfunction MyPlugin() {};\nMyPlugin.prototype.apply = function (compiler) {\n    //now you have access to all the compiler instance methods\n}\nmodule.exports = MyPlugin;</pre>\n<p>Something like this should also work</p>\n<pre data-language=\"javascript\">//MyFunction.js\n\nfunction apply(options, compiler) {\n    //now you have access to the compiler instance\n    //and options\n}\n\n//this little trick makes it easier to pass and check options to the plugin\nmodule.exports = function(options) {\n    if (options instanceof Array) {\n        options = {\n            include: options\n        };\n    }\n\n    if (!Array.isArray(options.include)) {\n        options.include = [ options.include ];\n    }\n\n    return {\n        apply: apply.bind(this, options)\n    };\n};</pre>\n<h5 id=\"run-async\">\n<code>run(compiler: Compiler)</code> async</h5>\n<p>The <code>run</code> method of the Compiler is used to start a compilation. This is not called in watch mode.</p>\n<h5 id=\"watch-run-async\">\n<code>watch-run(watching: Watching)</code> async</h5>\n<p>The <code>watch</code> method of the Compiler is used to start a watching compilation. This is not called in normal mode.</p>\n<h5 id=\"compilation\"><code>compilation(c: Compilation, params: Object)</code></h5>\n<p>A <code>Compilation</code> is created. A plugin can use this to obtain a reference to the <code>Compilation</code> object. The <code>params</code> object contains useful references.</p>\n<h5 id=\"normal-module-factory\"><code>normal-module-factory(nmf: NormalModuleFactory)</code></h5>\n<p>A <code>NormalModuleFactory</code> is created. A plugin can use this to obtain a reference to the <code>NormalModuleFactory</code> object.</p>\n<pre data-language=\"javascript\">\ncompiler.plugin(\"normal-module-factory\", function(nmf) {\n    nmf.plugin(\"after-resolve\", function(data) {\n        data.loaders.unshift(path.join(__dirname, \"postloader.js\"));\n    });\n});</pre>\n<h5 id=\"context-module-factory\"><code>context-module-factory(cmf: ContextModuleFactory)</code></h5>\n<p>A <code>ContextModuleFactory</code> is created. A plugin can use this to obtain a reference to the <code>ContextModuleFactory</code> object.</p>\n<h5 id=\"compile\"><code>compile(params)</code></h5>\n<p>The Compiler starts compiling. This is used in normal and watch mode. Plugins can use this point to modify the <code>params</code> object (i. e. to decorate the factories).</p>\n<pre data-language=\"javascript\">compiler.plugin(\"compile\", function(params) {\n    //you are now in the \"compile\" phase\n});</pre>\n<h5 id=\"make-parallel\">\n<code>make(c: Compilation)</code> parallel</h5>\n<p>Plugins can use this point to add entries to the compilation or prefetch modules. They can do this by calling <code>addEntry(context, entry, name, callback)</code> or <code>prefetch(context, dependency, callback)</code> on the Compilation.</p>\n<h5 id=\"after-compile-async\">\n<code>after-compile(c: Compilation)</code> async</h5>\n<p>The compile process is finished and the modules are sealed. The next step is to emit the generated stuff. Here modules can use the results in some cool ways.</p>\n<p>The handlers are not copied to child compilers.</p>\n<h5 id=\"emit-async\">\n<code>emit(c: Compilation)</code> async</h5>\n<p>The Compiler begins with emitting the generated assets. Here plugins have the last chance to add assets to the <code>c.assets</code> array.</p>\n<h5 id=\"after-emit-async\">\n<code>after-emit(c: Compilation)</code> async</h5>\n<p>The Compiler has emitted all assets.</p>\n<h5 id=\"done\"><code>done(stats: Stats)</code></h5>\n<p>All is done.</p>\n<h5 id=\"failed\"><code>failed(err: Error)</code></h5>\n<p>The Compiler is in watch mode and a compilation has failed hard.</p>\n<h5 id=\"invalid\"><code>invalid()</code></h5>\n<p>The Compiler is in watch mode and a file change is detected. The compilation will be begin shortly (<code>options.watchDelay</code>).</p>\n<h5 id=\"after-plugins\"><code>after-plugins()</code></h5>\n<p>All plugins extracted from the options object are added to the compiler.</p>\n<h5 id=\"after-resolvers\"><code>after-resolvers()</code></h5>\n<p>All plugins extracted from the options object are added to the resolvers.</p>\n<h2 id=\"the-compilation-instance\">The <code>Compilation</code> instance</h2>\n<p>The Compilation instance extends from the compiler. ie. compiler.compilation It is the literal compilation of all the objects in the require graph. This object has access to all the modules and their dependencies (most of which are circular references). In the compilation phase, modules are loaded, sealed, optimized, chunked, hashed and restored, etc. This would be the main lifecycle of any operations of the compilation.</p>\n<pre data-language=\"javascript\">compiler.plugin(\"compilation\", function(compilation) {\n    //the main compilation instance\n    //all subsequent methods are derived from compilation.plugin\n});</pre>\n<h5 id=\"normal-module-loader\"><code>normal-module-loader</code></h5>\n<p>The normal module loader, is the function that actually loads all the modules in the module graph (one-by-one).</p>\n<pre data-language=\"javascript\">compilation.plugin('normal-module-loader', function(loaderContext, module) {\n    //this is where all the modules are loaded\n    //one by one, no dependencies are created yet\n});</pre>\n<h5 id=\"seal\"><code>seal</code></h5>\n<p>The sealing of the compilation has started.</p>\n<pre data-language=\"javascript\">compilation.plugin('seal', function() {\n    //you are not accepting any more modules\n    //no arguments\n});</pre>\n<h5 id=\"optimize\"><code>optimize</code></h5>\n<p>Optimize the compilation.</p>\n<pre data-language=\"javascript\">compilation.plugin('optimize', function() {\n    //webpack is begining the optimization phase\n    // no arguments\n});</pre>\n<h5 id=\"optimize-tree-async\">\n<code>optimize-tree(chunks, modules)</code> async</h5>\n<p>Async optimization of the tree.</p>\n<pre data-language=\"javascript\">compilation.plugin('optimize-tree', function(chunks, modules) {\n\n});</pre>\n<h5 id=\"optimize-modules\"><code>optimize-modules(modules: Module[])</code></h5>\n<p>Optimize the modules.</p>\n<pre data-language=\"javascript\">compilation.plugin('optimize-modules', function(modules) {\n    //handle to the modules array during tree optimization\n});</pre>\n<h5 id=\"after-optimize-modules\"><code>after-optimize-modules(modules: Module[])</code></h5>\n<p>Optimizing the modules has finished.</p>\n<h5 id=\"optimize-chunks\"><code>optimize-chunks(chunks: Chunk[])</code></h5>\n<p>Optimize the chunks.</p>\n<pre data-language=\"javascript\">//optimize chunks may be run several times in a compilation\n\ncompilation.plugin('optimize-chunks', function(chunks) {\n    //unless you specified multiple entries in your config\n    //there's only one chunk at this point\n    chunks.forEach(function (chunk) {\n        //chunks have circular references to their modules\n        chunk.modules.forEach(function (module){\n            //module.loaders, module.rawRequest, module.dependencies, etc.\n        }); \n    });\n});</pre>\n<h5 id=\"after-optimize-chunks\"><code>after-optimize-chunks(chunks: Chunk[])</code></h5>\n<p>Optimizing the chunks has finished.</p>\n<h5 id=\"revive-modules\"><code>revive-modules(modules: Module[], records)</code></h5>\n<p>Restore module info from records.</p>\n<h5 id=\"optimize-module-order\"><code>optimize-module-order(modules: Module[])</code></h5>\n<p>Sort the modules in order of importance. The first is the most important module. It will get the smallest id.</p>\n<h5 id=\"optimize-module-ids\"><code>optimize-module-ids(modules: Module[])</code></h5>\n<p>Optimize the module ids.</p>\n<h5 id=\"after-optimize-module-ids\"><code>after-optimize-module-ids(modules: Module[])</code></h5>\n<p>Optimizing the module ids has finished.</p>\n<h5 id=\"record-modules\"><code>record-modules(modules: Module[], records)</code></h5>\n<p>Store module info to the records.</p>\n<h5 id=\"revive-chunks\"><code>revive-chunks(chunks: Chunk[], records)</code></h5>\n<p>Restore chunk info from records.</p>\n<h5 id=\"optimize-chunk-order\"><code>optimize-chunk-order(chunks: Chunk[])</code></h5>\n<p>Sort the chunks in order of importance. The first is the most important chunk. It will get the smallest id.</p>\n<h5 id=\"optimize-chunk-ids\"><code>optimize-chunk-ids(chunks: Chunk[])</code></h5>\n<p>Optimize the chunk ids.</p>\n<h5 id=\"after-optimize-chunk-ids\"><code>after-optimize-chunk-ids(chunks: Chunk[])</code></h5>\n<p>Optimizing the chunk ids has finished.</p>\n<h5 id=\"record-chunks\"><code>record-chunks(chunks: Chunk[], records)</code></h5>\n<p>Store chunk info to the records.</p>\n<h5 id=\"before-hash\"><code>before-hash</code></h5>\n<p>Before the compilation is hashed.</p>\n<h5 id=\"after-hash\"><code>after-hash</code></h5>\n<p>After the compilation is hashed.</p>\n<h5 id=\"before-chunk-assets\"><code>before-chunk-assets</code></h5>\n<p>Before creating the chunk assets.</p>\n<h5 id=\"additional-chunk-assets\"><code>additional-chunk-assets(chunks: Chunk[])</code></h5>\n<p>Create additional assets for the chunks.</p>\n<h5 id=\"record\"><code>record(compilation, records)</code></h5>\n<p>Store info about the compilation to the records</p>\n<h5 id=\"optimize-chunk-assets-async\">\n<code>optimize-chunk-assets(chunks: Chunk[])</code> async</h5>\n<p>Optimize the assets for the chunks.</p>\n<p>The assets are stored in <code><span class=\"keyword\">this</span>.assets</code>, but not all of them are chunk assets. A <code>Chunk</code> has a property <code>files</code> which points to all files created by this chunk. The additional chunk assets are stored in <code><span class=\"keyword\">this</span>.additionalChunkAssets</code>.</p>\n<p>Here’s an example that simply adds a banner to each chunk.</p>\n<pre data-language=\"javascript\">compilation.plugin(\"optimize-chunk-assets\", function(chunks, callback) {\n    chunks.forEach(function(chunk) {\n        chunk.files.forEach(function(file) {\n            compilation.assets[file] = new ConcatSource(\"\\/**Sweet Banner**\\/\", \"\\n\", compilation.assets[file]);\n        });\n    });\n    callback();\n});</pre>\n<h5 id=\"after-optimize-chunk-assets\"><code>after-optimize-chunk-assets(chunks: Chunk[])</code></h5>\n<p>The chunk assets have been optimized. Here’s an example plugin from <a href=\"https://github.com/boopathi\">@boopathi</a> that outputs exactly what went into each chunk.</p>\n<pre data-language=\"javascript\">var PrintChunksPlugin = function() {};\nPrintChunksPlugin.prototype.apply = function(compiler) {\n    compiler.plugin('compilation', function(compilation, params) {\n        compilation.plugin('after-optimize-chunk-assets', function(chunks) {\n            console.log(chunks.map(function(c) {\n                return {\n                    id: c.id,\n                    name: c.name,\n                    includes: c.modules.map(function(m) {\n                        return m.request;\n                    })\n                };\n            }));\n        });\n    });\n};</pre>\n<h5 id=\"optimize-assets-async\">\n<code>optimize-assets(assets: Object{name: Source})</code> async</h5>\n<p>Optimize all assets.</p>\n<p>The assets are stored in <code><span class=\"keyword\">this</span>.assets</code>.</p>\n<h5 id=\"after-optimize-assets\"><code>after-optimize-assets(assets: Object{name: Source})</code></h5>\n<p>The assets has been optimized.</p>\n<h5 id=\"build-module\"><code>build-module</code></h5>\n<p>Before a module build has started.</p>\n<pre data-language=\"javascript\">compilation.plugin('build-module', function(){\n    console.log('build module');\n});</pre>\n<h5 id=\"succeed-module\"><code>succeed-module</code></h5>\n<p>A module has been built successfully.</p>\n<pre data-language=\"javascript\">compilation.plugin('succeed-module', function(){\n    console.log('succeed module');\n});</pre>\n<h5 id=\"failed-module\"><code>failed-module</code></h5>\n<p>The module build has failed.</p>\n<pre data-language=\"javascript\">compilation.plugin('failed-module', function(){\n    console.log('failed module');\n});</pre>\n<h5 id=\"module-asset\"><code>module-asset(module, filename)</code></h5>\n<p>An asset from a module was added to the compilation.</p>\n<h5 id=\"chunk-asset\"><code>chunk-asset(chunk, filename)</code></h5>\n<p>An asset from a chunk was added to the compilation.</p>\n<h2 id=\"the-maintemplate-instance\">The <code>MainTemplate</code> instance</h2>\n<h5 id=\"startup\"><code>startup(source, module, hash)</code></h5>\n<pre data-language=\"javascript\">    compilation.mainTemplate.plugin('startup', function(source, module, hash) {\n      if (!module.chunks.length &amp;&amp; source.indexOf('__ReactStyle__') === -1) {\n        var originName = module.origins &amp;&amp; module.origins.length ? module.origins[0].name : 'main';\n        return ['if (typeof window !== \"undefined\") {',\n            '  window.__ReactStyle__ = ' + JSON.stringify(classNames[originName]) + ';',\n            '}'\n          ].join('\\n') + source;\n      }\n      return source;\n    });</pre>\n<h2 id=\"the-parser-instance\">The <code>Parser</code> instance (<code>compiler.parser</code>)</h2>\n<p>The parser instance takes a String and callback and will return and expression when there’s a match.</p>\n<pre data-language=\"javascript\">compiler.parser.plugin(\"var rewire\", function (expr) {\n    //if you original module has 'var rewire'\n    //you now have a handle on the expresssion object   \n    return true;\n});</pre>\n<h5 id=\"program-bailing\">\n<code>program(ast)</code> bailing</h5>\n<p>General purpose plugin interface for the AST of a code fragment.</p>\n<h5 id=\"statement-bailing\">\n<code>statement(statement: Statement)</code> bailing</h5>\n<p>General purpose plugin interface for the statements of the code fragment.</p>\n<h5 id=\"call-identifier-bailing\">\n<code>call &lt;identifier&gt;(expr: Expression)</code> bailing</h5>\n<p><code>abc(<span class=\"number\">1</span>)</code> =&gt; <code>call abc</code></p>\n<p><code>a.b.c(<span class=\"number\">1</span>)</code> =&gt; <code>call a.b.c</code></p>\n<h5 id=\"expression-identifier-bailing\">\n<code>expression &lt;identifier&gt;(expr: Expression)</code> bailing</h5>\n<p><code>abc</code> =&gt; <code>expression abc</code></p>\n<p><code>a.b.c</code> =&gt; <code>expression a.b.c</code></p>\n<h5 id=\"expression-bailing\">\n<code>expression ?:(expr: Expression)</code> bailing</h5>\n<p><code>(abc ? <span class=\"number\">1</span> : <span class=\"number\">2</span>)</code> =&gt; <code>expression ?!</code></p>\n<p>Return a boolean value to omit parsing of the wrong path.</p>\n<h5 id=\"typeof-identifier-bailing\">\n<code><span class=\"keyword\">typeof</span> &lt;identifier&gt;(expr: Expression)</code> bailing</h5>\n<p><code><span class=\"keyword\">typeof</span> a.b.c</code> =&gt; <code><span class=\"keyword\">typeof</span> a.b.c</code></p>\n<h5 id=\"statement-if-bailing\">\n<code>statement <span class=\"keyword\">if</span>(statement: Statement)</code> bailing</h5>\n<p><code><span class=\"keyword\">if</span>(abc) {}</code> =&gt; <code>statement <span class=\"keyword\">if</span></code></p>\n<p>Return a boolean value to omit parsing of the wrong path.</p>\n<h5 id=\"label-labelname-bailing\">\n<code>label &lt;labelname&gt;(statement: Statement)</code> bailing</h5>\n<p><code>xyz: abc</code> =&gt; <code>label xyz</code></p>\n<h5 id=\"var-name-bailing\">\n<code><span class=\"keyword\">var</span> &lt;name&gt;(statement: Statement)</code> bailing</h5>\n<p><code><span class=\"keyword\">var</span> abc, def</code> =&gt; <code><span class=\"keyword\">var</span> abc</code> + <code><span class=\"keyword\">var</span> def</code></p>\n<p>Return <code><span class=\"literal\">false</span></code> to not add the variable to the known definitions.</p>\n<h5 id=\"evaluate-expression-type-bailing\">\n<code>evaluate &lt;expression type&gt;(expr: Expression)</code> bailing</h5>\n<p>Evaluate an expression.</p>\n<h5 id=\"evaluate-typeof-identifier-bailing\">\n<code>evaluate <span class=\"keyword\">typeof</span> &lt;identifier&gt;(expr: Expression)</code> bailing</h5>\n<p>Evaluate the type of an identifier.</p>\n<h5 id=\"evaluate-identifier-identifier-bailing\">\n<code>evaluate Identifier &lt;identifier&gt;(expr: Expression)</code> bailing</h5>\n<p>Evaluate a identifier that is a free var.</p>\n<h5 id=\"evaluate-defined-identifier-identifier-bailing\">\n<code>evaluate defined Identifier &lt;identifier&gt;(expr: Expression)</code> bailing</h5>\n<p>Evaluate a identifier that is a defined var.</p>\n<h5 id=\"evaluate-callexpression-property-bailing\">\n<code>evaluate CallExpression .<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">property</span>&gt;</span>(expr: Expression)</span></code> bailing</h5>\n<p>Evaluate a call to a member function of a successfully evaluated expression.</p>\n<h2 id=\"the-normalmodulefactory\">The <code>NormalModuleFactory</code>\n</h2>\n<h5 id=\"before-resolve-async-waterfall\">\n<code>before-resolve(data)</code> async waterfall</h5>\n<p>Before the factory starts resolving. The <code>data</code> object has these properties:</p>\n<ul>\n<li>\n<code>context</code> The absolute path of the directory for resolving.</li>\n<li>\n<code>request</code> The request of the expression.</li>\n</ul>\n<p>Plugins are allowed to modify the object or to pass a new similar object to the callback.</p>\n<h5 id=\"after-resolve-async-waterfall\">\n<code>after-resolve(data)</code> async waterfall</h5>\n<p>After the factory has resolved the request. The <code>data</code> object has this properties:</p>\n<ul>\n<li>\n<code>request</code> The resolved request. It acts as an identifier for the NormalModule.</li>\n<li>\n<code>userRequest</code> The request the user entered. It’s resolved, but does not contain pre or post loaders.</li>\n<li>\n<code>rawRequest</code> The unresolved request.</li>\n<li>\n<code>loaders</code> A array of resolved loaders. This is passed to the NormalModule and they will be executed.</li>\n<li>\n<code>resource</code> The resource. It will be loaded by the NormalModule.</li>\n<li>\n<code>parser</code> The parser that will be used by the NormalModule.</li>\n</ul>\n<h2 id=\"the-contextmodulefactory\">The <code>ContextModuleFactory</code>\n</h2>\n<h5 id=\"before-resolve-async-waterfall\">\n<code>before-resolve(data)</code> async waterfall</h5>\n<h5 id=\"after-resolve-async-waterfall\">\n<code>after-resolve(data)</code> async waterfall</h5>\n<h5 id=\"alternatives-async-waterfall\">\n<code>alternatives(options: Array)</code> async waterfall</h5>\n<h2 id=\"resolvers\">Resolvers</h2>\n<ul>\n<li>\n<code>compiler.resolvers.normal</code> Resolver for a normal module</li>\n<li>\n<code>compiler.resolvers.context</code> Resolver for a context module</li>\n<li>\n<code>compiler.resolvers.loader</code> Resolver for a loader</li>\n</ul>\n<p>Any plugin should use <code><span class=\"keyword\">this</span>.fileSystem</code> as fileSystem, as it’s cached. It only has async named functions, but they may behave sync, if the user uses a sync file system implementation (i. e. in enhanced-require).</p>\n<p>To join paths any plugin should use <code><span class=\"keyword\">this</span>.join</code>. It normalizes the paths. There is a <code><span class=\"keyword\">this</span>.normalize</code> too.</p>\n<p>A bailing async forEach implementation is available on <code><span class=\"keyword\">this</span>.forEachBail(array, iterator, callback)</code>.</p>\n<p>To pass the request to other resolving plugins, use the <code><span class=\"keyword\">this</span>.doResolve(types: String|String[], request: Request, callback)</code> method. <code>types</code> are multiple possible request types that are tested in order of preference.</p>\n<pre data-language=\"javascript\">interface Request {\n    path: String // The current directory of the request\n    request: String // The current request string\n    query: String // The query string of the request, if any\n    module: boolean // The request begins with a module\n    directory: boolean // The request points to a directory\n    file: boolean // The request points to a file\n    resolved: boolean // The request is resolved/done\n    // undefined means false for boolean fields\n}\n\n// Examples\n// from /home/user/project/file.js: require(\"../test?charset=ascii\")\n{\n    path: \"/home/user/project\",\n    request: \"../test\",\n    query: \"?charset=ascii\"\n}\n// from /home/user/project/file.js: require(\"test/test/\")\n{\n    path: \"/home/user/project\",\n    request: \"test/test/\",\n    module: true,\n    directory: true\n}</pre>\n<h5 id=\"resolve\"><code>resolve(context: String, request: String)</code></h5>\n<p>Before the resolving process starts.</p>\n<h5 id=\"resolve-step\"><code>resolve-step(types: String[], request: Request)</code></h5>\n<p>Before a single step in the resolving process starts.</p>\n<h5 id=\"module-async-waterfall\">\n<code>module(request: Request)</code> async waterfall</h5>\n<p>A module request is found and should be resolved.</p>\n<h5 id=\"directory-async-waterfall\">\n<code>directory(request: Request)</code> async waterfall</h5>\n<p>A directory request is found and should be resolved.</p>\n<h5 id=\"file-async-waterfall\">\n<code>file(request: Request)</code> async waterfall</h5>\n<p>A file request is found and should be resolved.</p>\n<h5 id=\"the-plugins-may-offer-more-extensions-points\">The plugins may offer more extensions points</h5>\n<p>Here is a list what the default plugins in webpack offer. They are all <code>(request: Request)</code> async waterfall.</p>\n<p>The process for normal modules and contexts is <code>module -&gt; module-module -&gt; directory -&gt; file</code>.</p>\n<p>The process for loaders is <code>module -&gt; module-loader-module -&gt; module-module -&gt; directory -&gt; file</code>.</p>\n<h5 id=\"module-module\"><code>module-module</code></h5>\n<p>A module should be looked up in a specified directory. <code>path</code> contains the directory.</p>\n<h5 id=\"module-loader-module\">\n<code>module-loader-module</code> (only for loaders)</h5>\n<p>Used before module templates are applied to the module name. The process continues with <code>module-module</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Tobias Koppers<br>Licensed under the MIT License.<br>\n    <a href=\"https://webpack.github.io/docs/plugins.html\" class=\"_attribution-link\">https://webpack.github.io/docs/plugins.html</a>\n  </p>\n</div>\n"}