{"index":"<h1>Nokogiri</h1>     <ul> <li class=\"module\"> <a href=\"nokogiri\">Nokogiri</a> </li> <li class=\"class\"> <a href=\"nokogiri/css/node\">Nokogiri::CSS::Node</a> </li> <li class=\"class\"> <a href=\"nokogiri/css/parser\">Nokogiri::CSS::Parser</a> </li> <li class=\"class\"> <a href=\"nokogiri/css/syntaxerror\">Nokogiri::CSS::SyntaxError</a> </li> <li class=\"class\"> <a href=\"nokogiri/css/tokenizer\">Nokogiri::CSS::Tokenizer</a> </li> <li class=\"class\"> <a href=\"nokogiri/css/tokenizer/scanerror\">Nokogiri::CSS::Tokenizer::ScanError</a> </li> <li class=\"module\"> <a href=\"nokogiri/decorators/slop\">Nokogiri::Decorators::Slop</a> </li> <li class=\"class\"> <a href=\"nokogiri/encodinghandler\">Nokogiri::EncodingHandler</a> </li> <li class=\"class\"> <a href=\"nokogiri/html/builder\">Nokogiri::HTML::Builder</a>  </li> <li class=\"class\"> <a href=\"nokogiri/html/document\">Nokogiri::HTML::Document</a> </li> <li class=\"class\"> <a href=\"nokogiri/html/document/encodingreader\">Nokogiri::HTML::Document::EncodingReader</a> </li> <li class=\"class\"> <a href=\"nokogiri/html/document/encodingreader/jumpsaxhandler\">Nokogiri::HTML::Document::EncodingReader::JumpSAXHandler</a> </li> <li class=\"class\"> <a href=\"nokogiri/html/documentfragment\">Nokogiri::HTML::DocumentFragment</a> </li> <li class=\"class\"> <a href=\"nokogiri/html/elementdescription\">Nokogiri::HTML::ElementDescription</a> </li> <li class=\"class\"> <a href=\"nokogiri/html/entitydescription\">Nokogiri::HTML::EntityDescription</a> </li> <li class=\"class\"> <a href=\"nokogiri/html/entitylookup\">Nokogiri::HTML::EntityLookup</a> </li> <li class=\"module\"> <a href=\"nokogiri/html/sax\">Nokogiri::HTML::SAX</a> </li> <li class=\"class\"> <a href=\"nokogiri/html/sax/parser\">Nokogiri::HTML::SAX::Parser</a> </li> <li class=\"class\"> <a href=\"nokogiri/html/sax/parsercontext\">Nokogiri::HTML::SAX::ParserContext</a> </li> <li class=\"class\"> <a href=\"nokogiri/html/sax/pushparser\">Nokogiri::HTML::SAX::PushParser</a> </li> <li class=\"class\"> <a href=\"nokogiri/syntaxerror\">Nokogiri::SyntaxError</a> </li> <li class=\"module\"> <a href=\"nokogiri/xml\">Nokogiri::XML</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/attr\">Nokogiri::XML::Attr</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/attributedecl\">Nokogiri::XML::AttributeDecl</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/builder\">Nokogiri::XML::Builder</a>  </li> <li class=\"class\"> <a href=\"nokogiri/xml/cdata\">Nokogiri::XML::CDATA</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/characterdata\">Nokogiri::XML::CharacterData</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/comment\">Nokogiri::XML::Comment</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/dtd\">Nokogiri::XML::DTD</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/document\">Nokogiri::XML::Document</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/documentfragment\">Nokogiri::XML::DocumentFragment</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/element\">Nokogiri::XML::Element</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/elementcontent\">Nokogiri::XML::ElementContent</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/elementdecl\">Nokogiri::XML::ElementDecl</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/entitydecl\">Nokogiri::XML::EntityDecl</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/entityreference\">Nokogiri::XML::EntityReference</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/namespace\">Nokogiri::XML::Namespace</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/node\">Nokogiri::XML::Node</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/node/saveoptions\">Nokogiri::XML::Node::SaveOptions</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/nodeset\">Nokogiri::XML::NodeSet</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/notation\">Nokogiri::XML::Notation</a> </li> <li class=\"module\"> <a href=\"nokogiri/xml/pp\">Nokogiri::XML::PP</a> </li> <li class=\"module\"> <a href=\"nokogiri/xml/pp/characterdata\">Nokogiri::XML::PP::CharacterData</a> </li> <li class=\"module\"> <a href=\"nokogiri/xml/pp/node\">Nokogiri::XML::PP::Node</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/parseoptions\">Nokogiri::XML::ParseOptions</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/processinginstruction\">Nokogiri::XML::ProcessingInstruction</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/reader\">Nokogiri::XML::Reader</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/relaxng\">Nokogiri::XML::RelaxNG</a>  </li> <li class=\"module\"> <a href=\"nokogiri/xml/sax\">Nokogiri::XML::SAX</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/sax/document\">Nokogiri::XML::SAX::Document</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/sax/parser\">Nokogiri::XML::SAX::Parser</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/sax/parser/attribute\">Nokogiri::XML::SAX::Parser::Attribute</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/sax/parsercontext\">Nokogiri::XML::SAX::ParserContext</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/sax/pushparser\">Nokogiri::XML::SAX::PushParser</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/schema\">Nokogiri::XML::Schema</a>  </li> <li class=\"class\"> <a href=\"nokogiri/xml/syntaxerror\">Nokogiri::XML::SyntaxError</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/text\">Nokogiri::XML::Text</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/xpath\">Nokogiri::XML::XPath</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/xpath/syntaxerror\">Nokogiri::XML::XPath::SyntaxError</a> </li> <li class=\"class\"> <a href=\"nokogiri/xml/xpathcontext\">Nokogiri::XML::XPathContext</a> </li> <li class=\"module\"> <a href=\"nokogiri/xslt\">Nokogiri::XSLT</a> </li> <li class=\"class\"> <a href=\"nokogiri/xslt/stylesheet\">Nokogiri::XSLT::Stylesheet</a> </li>     </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/css/node":"<h1 id=\"class-Nokogiri::CSS::Node\" class=\"class\"> class Nokogiri::CSS::Node </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ALLOW_COMBINATOR_ON_SELF\">ALLOW_COMBINATOR_ON_SELF </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-type\"> <span class=\"method-name\">type</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>Get the type of this node</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-value\"> <span class=\"method-name\">value</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>Get the value of this node</p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(type, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"node\">Node</a> with <code>type</code> and <code>value</code></p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/node.rb, line 12\ndef initialize type, value\n  @type = type\n  @value = value\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-accept\"> <span class=\"method-name\">accept</span><span class=\"method-args\">(visitor)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Accept <code>visitor</code></p> <div class=\"method-source-code\" id=\"accept-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/node.rb, line 18\ndef accept visitor\n  visitor.send(:\"visit_#{type.to_s.downcase}\", self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-find_by_type\"> <span class=\"method-name\">find_by_type</span><span class=\"method-args\">(types)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Find a node by type using <code>types</code></p> <div class=\"method-source-code\" id=\"find_by_type-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/node.rb, line 30\ndef find_by_type types\n  matches = []\n  matches &lt;&lt; self if to_type == types\n  @value.each do |v|\n    matches += v.find_by_type(types) if v.respond_to?(:find_by_type)\n  end\n  matches\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_a\"> <span class=\"method-name\">to_a</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert to array</p> <div class=\"method-source-code\" id=\"to_a-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/node.rb, line 47\ndef to_a\n  [@type] + @value.map { |n| n.respond_to?(:to_a) ? n.to_a : [n] }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_type\"> <span class=\"method-name\">to_type</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert <a href=\"node#method-i-to_type\">#to_type</a></p> <div class=\"method-source-code\" id=\"to_type-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/node.rb, line 40\ndef to_type\n  [@type] + @value.map { |n|\n    n.to_type if n.respond_to?(:to_type)\n  }.compact\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_xpath\"> <span class=\"method-name\">to_xpath</span><span class=\"method-args\">(prefix = '//', visitor = XPathVisitor.new)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert this CSS node to xpath with <code>prefix</code> using <code>visitor</code></p> <div class=\"method-source-code\" id=\"to_xpath-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/node.rb, line 24\ndef to_xpath prefix = '//', visitor = XPathVisitor.new\n  prefix = '.' if ALLOW_COMBINATOR_ON_SELF.include?(type) &amp;&amp; value.first.nil?\n  prefix + visitor.accept(self)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/css/parser":"<h1 id=\"class-Nokogiri::CSS::Parser\" class=\"class\"> class Nokogiri::CSS::Parser </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Racc::Parser</dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"Racc_arg\">Racc_arg </dt>\n\n<dt id=\"Racc_debug_parser\">Racc_debug_parser </dt>\n\n<dt id=\"Racc_token_to_s_table\">Racc_token_to_s_table </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-cache_on\"> <span class=\"method-name\">cache_on</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>Turn on CSS parse caching</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-cache_on-3F\"> <span class=\"method-name\">cache_on?</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>Turn on CSS parse caching</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-c-set_cache\"> <span class=\"method-name\">set_cache</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>Turn on CSS parse caching</p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(namespaces = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new CSS parser with respect to <code>namespaces</code></p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser_extras.rb, line 54\ndef initialize namespaces = {}\n  @tokenizer  = Tokenizer.new\n  @namespaces = namespaces\n  super()\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D\"> <span class=\"method-name\">[]</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the css selector in <code>string</code> from the cache</p> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser_extras.rb, line 17\ndef [] string\n  return unless @cache_on\n  @mutex.synchronize { @cache[string] }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D-3D\"> <span class=\"method-name\">[]=</span><span class=\"method-args\">(string, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the css selector in <code>string</code> in the cache to <code>value</code></p> <div class=\"method-source-code\" id=\"5B-5D-3D-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser_extras.rb, line 23\ndef []= string, value\n  return value unless @cache_on\n  @mutex.synchronize { @cache[string] = value }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_1\"> <span class=\"method-name\">_reduce_1</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>reduce 0 omitted</p> <div class=\"method-source-code\" id=\"_reduce_1-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 315\ndef _reduce_1(val, _values, result)\n        result = [val.first, val.last].flatten\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_11\"> <span class=\"method-name\">_reduce_11</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>reduce 10 omitted</p> <div class=\"method-source-code\" id=\"_reduce_11-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 368\ndef _reduce_11(val, _values, result)\n        result = Node.new(:CONDITIONAL_SELECTOR, val)\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_12\"> <span class=\"method-name\">_reduce_12</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_12-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 374\ndef _reduce_12(val, _values, result)\n        result = Node.new(:CONDITIONAL_SELECTOR, val)\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_13\"> <span class=\"method-name\">_reduce_13</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_13-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 380\ndef _reduce_13(val, _values, result)\n        result = Node.new(:CONDITIONAL_SELECTOR,\n          [Node.new(:ELEMENT_NAME, ['*']), val.first]\n        )\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_14\"> <span class=\"method-name\">_reduce_14</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_14-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 388\ndef _reduce_14(val, _values, result)\n        result = Node.new(val.first, [nil, val.last])\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_15\"> <span class=\"method-name\">_reduce_15</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_15-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 394\ndef _reduce_15(val, _values, result)\n        result = Node.new(val[1], [val.first, val.last])\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_16\"> <span class=\"method-name\">_reduce_16</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_16-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 400\ndef _reduce_16(val, _values, result)\n        result = Node.new(:DESCENDANT_SELECTOR, [val.first, val.last])\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_18\"> <span class=\"method-name\">_reduce_18</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>reduce 17 omitted</p> <div class=\"method-source-code\" id=\"_reduce_18-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 408\ndef _reduce_18(val, _values, result)\n result = Node.new(:CLASS_CONDITION, [val[1]]) \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_2\"> <span class=\"method-name\">_reduce_2</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_2-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 321\ndef _reduce_2(val, _values, result)\n result = val.flatten \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_20\"> <span class=\"method-name\">_reduce_20</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>reduce 19 omitted</p> <div class=\"method-source-code\" id=\"_reduce_20-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 415\ndef _reduce_20(val, _values, result)\n result = Node.new(:ELEMENT_NAME, val) \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_21\"> <span class=\"method-name\">_reduce_21</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_21-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 420\ndef _reduce_21(val, _values, result)\n        result = Node.new(:ELEMENT_NAME,\n          [[val.first, val.last].compact.join(':')]\n        )\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_22\"> <span class=\"method-name\">_reduce_22</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_22-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 428\ndef _reduce_22(val, _values, result)\n        name = @namespaces.key?('xmlns') ? \"xmlns:#{val.first}\" : val.first\n        result = Node.new(:ELEMENT_NAME, [name])\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_23\"> <span class=\"method-name\">_reduce_23</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_23-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 435\ndef _reduce_23(val, _values, result)\n result = val[0] \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_25\"> <span class=\"method-name\">_reduce_25</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>reduce 24 omitted</p> <div class=\"method-source-code\" id=\"_reduce_25-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 442\ndef _reduce_25(val, _values, result)\n        result = Node.new(:ATTRIBUTE_CONDITION,\n          [val[1]] + (val[2] || [])\n        )\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_26\"> <span class=\"method-name\">_reduce_26</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_26-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 450\ndef _reduce_26(val, _values, result)\n        result = Node.new(:ATTRIBUTE_CONDITION,\n          [val[1]] + (val[2] || [])\n        )\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_27\"> <span class=\"method-name\">_reduce_27</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_27-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 458\ndef _reduce_27(val, _values, result)\n        # Non standard, but hpricot supports it.\n        result = Node.new(:PSEUDO_CLASS,\n          [Node.new(:FUNCTION, ['nth-child(', val[1]])]\n        )\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_28\"> <span class=\"method-name\">_reduce_28</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_28-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 467\ndef _reduce_28(val, _values, result)\n        result = Node.new(:ELEMENT_NAME,\n          [[val.first, val.last].compact.join(':')]\n        )\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_29\"> <span class=\"method-name\">_reduce_29</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_29-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 475\ndef _reduce_29(val, _values, result)\n        # Default namespace is not applied to attributes.\n        # So we don't add prefix \"xmlns:\" as in namespaced_ident.\n        result = Node.new(:ELEMENT_NAME, [val.first])\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_3\"> <span class=\"method-name\">_reduce_3</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_3-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 326\ndef _reduce_3(val, _values, result)\n result = [val.last].flatten \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_30\"> <span class=\"method-name\">_reduce_30</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_30-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 483\ndef _reduce_30(val, _values, result)\n        result = Node.new(:FUNCTION, [val.first.strip])\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_31\"> <span class=\"method-name\">_reduce_31</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_31-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 489\ndef _reduce_31(val, _values, result)\n        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_32\"> <span class=\"method-name\">_reduce_32</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_32-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 495\ndef _reduce_32(val, _values, result)\n        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_33\"> <span class=\"method-name\">_reduce_33</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_33-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 501\ndef _reduce_33(val, _values, result)\n        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_34\"> <span class=\"method-name\">_reduce_34</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_34-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 507\ndef _reduce_34(val, _values, result)\n        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_35\"> <span class=\"method-name\">_reduce_35</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_35-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 513\ndef _reduce_35(val, _values, result)\n result = [val.first, val.last] \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_36\"> <span class=\"method-name\">_reduce_36</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_36-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 518\ndef _reduce_36(val, _values, result)\n result = [val.first, val.last] \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_37\"> <span class=\"method-name\">_reduce_37</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_37-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 523\ndef _reduce_37(val, _values, result)\n result = [val.first, val.last] \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_4\"> <span class=\"method-name\">_reduce_4</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_4-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 331\ndef _reduce_4(val, _values, result)\n result = :DIRECT_ADJACENT_SELECTOR \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_40\"> <span class=\"method-name\">_reduce_40</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>reduce 39 omitted</p> <div class=\"method-source-code\" id=\"_reduce_40-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 532\ndef _reduce_40(val, _values, result)\n        case val[0]\n        when 'even'\n          result = Node.new(:NTH, ['2','n','+','0'])\n        when 'odd'\n          result = Node.new(:NTH, ['2','n','+','1'])\n        when 'n'\n          result = Node.new(:NTH, ['1','n','+','0'])\n        else\n          # This is not CSS standard.  It allows us to support this:\n          # assert_xpath(\"//a[foo(., @href)]\", @parser.parse('a:foo(@href)'))\n          # assert_xpath(\"//a[foo(., @a, b)]\", @parser.parse('a:foo(@a, b)'))\n          # assert_xpath(\"//a[foo(., a, 10)]\", @parser.parse('a:foo(a, 10)'))\n          result = val\n        end\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_41\"> <span class=\"method-name\">_reduce_41</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_41-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 551\ndef _reduce_41(val, _values, result)\n        if val[1] == 'n'\n          result = Node.new(:NTH, val)\n        else\n          raise Racc::ParseError, \"parse error on IDENT '#{val[1]}'\"\n        end\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_42\"> <span class=\"method-name\">_reduce_42</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_42-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 561\ndef _reduce_42(val, _values, result)\n               # n+3, -n+3\n        if val[0] == 'n'\n          val.unshift(\"1\")\n          result = Node.new(:NTH, val)\n        elsif val[0] == '-n'\n          val[0] = 'n'\n          val.unshift(\"-1\")\n          result = Node.new(:NTH, val)\n        else\n          raise Racc::ParseError, \"parse error on IDENT '#{val[1]}'\"\n        end\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_43\"> <span class=\"method-name\">_reduce_43</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_43-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 577\ndef _reduce_43(val, _values, result)\n                    # 5n, -5n, 10n-1\n        n = val[1]\n        if n[0, 2] == 'n-'\n          val[1] = 'n'\n          val &lt;&lt; \"-\"\n          # b is contained in n as n is the string \"n-b\"\n          val &lt;&lt; n[2, n.size]\n          result = Node.new(:NTH, val)\n        elsif n == 'n'\n          val &lt;&lt; \"+\"\n          val &lt;&lt; \"0\"\n          result = Node.new(:NTH, val)\n        else\n          raise Racc::ParseError, \"parse error on IDENT '#{val[1]}'\"\n        end\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_44\"> <span class=\"method-name\">_reduce_44</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_44-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 597\ndef _reduce_44(val, _values, result)\n        result = Node.new(:PSEUDO_CLASS, [val[1]])\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_45\"> <span class=\"method-name\">_reduce_45</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_45-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 603\ndef _reduce_45(val, _values, result)\n result = Node.new(:PSEUDO_CLASS, [val[1]]) \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_48\"> <span class=\"method-name\">_reduce_48</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>reduce 47 omitted</p> <div class=\"method-source-code\" id=\"_reduce_48-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 612\ndef _reduce_48(val, _values, result)\n        result = Node.new(:COMBINATOR, val)\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_49\"> <span class=\"method-name\">_reduce_49</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_49-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 618\ndef _reduce_49(val, _values, result)\n        result = Node.new(:COMBINATOR, val)\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_5\"> <span class=\"method-name\">_reduce_5</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_5-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 336\ndef _reduce_5(val, _values, result)\n result = :CHILD_SELECTOR \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_50\"> <span class=\"method-name\">_reduce_50</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_50-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 624\ndef _reduce_50(val, _values, result)\n        result = Node.new(:COMBINATOR, val)\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_51\"> <span class=\"method-name\">_reduce_51</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_51-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 630\ndef _reduce_51(val, _values, result)\n        result = Node.new(:COMBINATOR, val)\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_52\"> <span class=\"method-name\">_reduce_52</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_52-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 636\ndef _reduce_52(val, _values, result)\n        result = Node.new(:COMBINATOR, val)\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_58\"> <span class=\"method-name\">_reduce_58</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>reduce 57 omitted</p> <div class=\"method-source-code\" id=\"_reduce_58-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 652\ndef _reduce_58(val, _values, result)\n result = Node.new(:ID, val) \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_59\"> <span class=\"method-name\">_reduce_59</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_59-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 657\ndef _reduce_59(val, _values, result)\n result = [val.first, val[1]] \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_6\"> <span class=\"method-name\">_reduce_6</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_6-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 341\ndef _reduce_6(val, _values, result)\n result = :FOLLOWING_SELECTOR \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_60\"> <span class=\"method-name\">_reduce_60</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_60-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 662\ndef _reduce_60(val, _values, result)\n result = [val.first, val[1]] \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_62\"> <span class=\"method-name\">_reduce_62</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>reduce 61 omitted</p> <div class=\"method-source-code\" id=\"_reduce_62-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 669\ndef _reduce_62(val, _values, result)\n result = :equal \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_63\"> <span class=\"method-name\">_reduce_63</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_63-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 674\ndef _reduce_63(val, _values, result)\n result = :prefix_match \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_64\"> <span class=\"method-name\">_reduce_64</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_64-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 679\ndef _reduce_64(val, _values, result)\n result = :suffix_match \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_65\"> <span class=\"method-name\">_reduce_65</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_65-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 684\ndef _reduce_65(val, _values, result)\n result = :substring_match \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_66\"> <span class=\"method-name\">_reduce_66</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_66-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 689\ndef _reduce_66(val, _values, result)\n result = :not_equal \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_67\"> <span class=\"method-name\">_reduce_67</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_67-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 694\ndef _reduce_67(val, _values, result)\n result = :includes \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_68\"> <span class=\"method-name\">_reduce_68</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_68-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 699\ndef _reduce_68(val, _values, result)\n result = :dash_match \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_69\"> <span class=\"method-name\">_reduce_69</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_69-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 704\ndef _reduce_69(val, _values, result)\n        result = Node.new(:NOT, [val[1]])\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_7\"> <span class=\"method-name\">_reduce_7</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_7-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 346\ndef _reduce_7(val, _values, result)\n result = :DESCENDANT_SELECTOR \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_8\"> <span class=\"method-name\">_reduce_8</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_8-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 351\ndef _reduce_8(val, _values, result)\n result = :CHILD_SELECTOR \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_9\"> <span class=\"method-name\">_reduce_9</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"_reduce_9-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 356\ndef _reduce_9(val, _values, result)\n        result =  if val[1].nil?\n                    val.first\n                  else\n                    Node.new(:CONDITIONAL_SELECTOR, [val.first, val[1]])\n                  end\n      \n    result\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-_reduce_none\"> <span class=\"method-name\">_reduce_none</span><span class=\"method-args\">(val, _values, result)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>reduce 74 omitted</p> <div class=\"method-source-code\" id=\"_reduce_none-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser.rb, line 720\ndef _reduce_none(val, _values, result)\n  val[0]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-clear_cache\"> <span class=\"method-name\">clear_cache</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Clear the cache</p> <div class=\"method-source-code\" id=\"clear_cache-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser_extras.rb, line 29\ndef clear_cache\n  @mutex.synchronize { @cache = {} }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-next_token\"> <span class=\"method-name\">next_token</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"next_token-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser_extras.rb, line 65\ndef next_token\n  @tokenizer.next_token\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-on_error\"> <span class=\"method-name\">on_error</span><span class=\"method-args\">(error_token_id, error_value, value_stack)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>On CSS parser error, raise an exception</p> <div class=\"method-source-code\" id=\"on_error-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser_extras.rb, line 85\ndef on_error error_token_id, error_value, value_stack\n  after = value_stack.compact.last\n  raise SyntaxError.new(\"unexpected '#{error_value}' after '#{after}'\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse\"> <span class=\"method-name\">parse</span><span class=\"method-args\">(selector)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse this CSS selector in <code>selector</code>. Returns an AST.</p> <div class=\"method-source-code\" id=\"parse-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser_extras.rb, line 43\ndef parse selector\n  @warned ||= false\n  unless @warned\n    $stderr.puts('Nokogiri::CSS::Parser.parse is deprecated, call Nokogiri::CSS.parse(), this will be removed August 1st or version 1.4.0 (whichever is first)')\n    @warned = true\n  end\n  new.parse selector\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-without_cache\"> <span class=\"method-name\">without_cache</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Execute <code>block</code> without cache</p> <div class=\"method-source-code\" id=\"without_cache-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser_extras.rb, line 34\ndef without_cache &amp;block\n  tmp = @cache_on\n  @cache_on = false\n  block.call\n  @cache_on = tmp\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-xpath_for\"> <span class=\"method-name\">xpath_for</span><span class=\"method-args\">(string, options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the xpath for <code>string</code> using <code>options</code></p> <div class=\"method-source-code\" id=\"xpath_for-source\"> <pre class=\"ruby\"># File lib/nokogiri/css/parser_extras.rb, line 70\ndef xpath_for string, options={}\n  key = \"#{string}#{options[:ns]}#{options[:prefix]}\"\n  v = self.class[key]\n  return v if v\n\n  args = [\n    options[:prefix] || '//',\n    options[:visitor] || XPathVisitor.new\n  ]\n  self.class[key] = parse(string).map { |ast|\n    ast.to_xpath(*args)\n  }\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/css":"<h1 id=\"module-Nokogiri::CSS\" class=\"module\"> module Nokogiri::CSS </h1>\n  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse\"> <span class=\"method-name\">parse</span><span class=\"method-args\">(selector)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse this CSS selector in <code>selector</code>. Returns an AST.</p> <div class=\"method-source-code\" id=\"parse-source\"> <pre class=\"ruby\"># File lib/nokogiri/css.rb, line 16\ndef parse selector\n  Parser.new.parse selector\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-xpath_for\"> <span class=\"method-name\">xpath_for</span><span class=\"method-args\">(selector, options={})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the XPath for <code>selector</code>.</p> <div class=\"method-source-code\" id=\"xpath_for-source\"> <pre class=\"ruby\"># File lib/nokogiri/css.rb, line 22\ndef xpath_for selector, options={}\n  Parser.new(options[:ns] || {}).xpath_for selector, options\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/decorators/slop":"<h1 id=\"module-Nokogiri::Decorators::Slop\" class=\"module\"> module Nokogiri::Decorators::Slop </h1>\n <section class=\"description\"> <p>The <a href=\"slop\">Slop</a> decorator implements method missing such that a methods may be used instead of XPath or CSS. See <a href=\"../../nokogiri\">Nokogiri</a>.Slop</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-method_missing\"> <span class=\"method-name\">method_missing</span><span class=\"method-args\">(name, *args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>look for node with <code>name</code>. See <a href=\"../../nokogiri\">Nokogiri</a>.Slop</p> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"method_missing-source\"> <pre class=\"ruby\"># File lib/nokogiri/decorators/slop.rb, line 9\ndef method_missing name, *args, &amp;block\n  prefix = implied_xpath_context\n\n  if args.empty?\n    list = xpath(\"#{prefix}#{name.to_s.sub(/^_/, '')}\")\n  elsif args.first.is_a? Hash\n    hash = args.first\n    if hash[:css]\n      list = css(\"#{name}#{hash[:css]}\")\n    elsif hash[:xpath]\n      conds = Array(hash[:xpath]).join(' and ')\n      list = xpath(\"#{prefix}#{name}[#{conds}]\")\n    end\n  else\n    CSS::Parser.without_cache do\n      list = xpath(\n        *CSS.xpath_for(\"#{name}#{args.first}\", :prefix =&gt; prefix)\n      )\n    end\n  end\n\n  super if list.empty?\n  list.length == 1 ? list.first : list\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/encodinghandler":"<h1 id=\"class-Nokogiri::EncodingHandler\" class=\"class\"> class Nokogiri::EncodingHandler </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-5B-5D\"> <span class=\"method-callseq\"> Nokogiri::EncodingHandler.[](name) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the encoding handler for <code>name</code></p> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"c\">static VALUE get(VALUE klass, VALUE key)\n{\n  xmlCharEncodingHandlerPtr handler;\n\n  handler = xmlFindCharEncodingHandler(StringValuePtr(key));\n  if(handler)\n    return Data_Wrap_Struct(klass, NULL, NULL, handler);\n\n  return Qnil;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-alias\"> <span class=\"method-callseq\"> Nokogiri::EncodingHandler.alias(from, to) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Alias encoding handler with name <code>from</code> to name <code>to</code></p> <div class=\"method-source-code\" id=\"alias-source\"> <pre class=\"c\">static VALUE alias(VALUE klass, VALUE from, VALUE to)\n{\n  xmlAddEncodingAlias(StringValuePtr(from), StringValuePtr(to));\n\n  return to;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-clear_aliases-21\"> <span class=\"method-callseq\"> Nokogiri::EncodingHandler.clear_aliases! </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Remove all encoding aliases.</p> <div class=\"method-source-code\" id=\"clear_aliases-21-source\"> <pre class=\"c\">static VALUE clear_aliases(VALUE klass)\n{\n  xmlCleanupEncodingAliases();\n\n  return klass;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-delete\"> <span class=\"method-callseq\"> Nokogiri::EncodingHandler.delete(name) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Delete the encoding alias named <code>name</code></p> <div class=\"method-source-code\" id=\"delete-source\"> <pre class=\"c\">static VALUE delete(VALUE klass, VALUE name)\n{\n  if(xmlDelEncodingAlias(StringValuePtr(name))) return Qnil;\n\n  return Qtrue;\n}</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-name\"> <span class=\"method-callseq\"> name </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the name of this <a href=\"encodinghandler\">EncodingHandler</a></p> <div class=\"method-source-code\" id=\"name-source\"> <pre class=\"c\">static VALUE name(VALUE self)\n{\n  xmlCharEncodingHandlerPtr handler;\n\n  Data_Get_Struct(self, xmlCharEncodingHandler, handler);\n\n  return NOKOGIRI_STR_NEW2(handler-&gt;name);\n}</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/html/builder":"<h1 id=\"class-Nokogiri::HTML::Builder\" class=\"class\"> class Nokogiri::HTML::Builder </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../xml/builder\">Nokogiri::XML::Builder</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"../../nokogiri\">Nokogiri</a> HTML builder is used for building HTML documents. It is very similar to the <a href=\"../xml/builder\">Nokogiri::XML::Builder</a>. In fact, you should go read the documentation for <a href=\"../xml/builder\">Nokogiri::XML::Builder</a> before reading this documentation.</p> <h2 id=\"class-Nokogiri::HTML::Builder-label-Synopsis%3A\">Synopsis:</h2> <p>Create an HTML document with a body that has an onload attribute, and a span tag with a class of “bold” that has content of “Hello world”.</p> <pre class=\"ruby\">builder = Nokogiri::HTML::Builder.new do |doc|\n  doc.html {\n    doc.body(:onload =&gt; 'some_func();') {\n      doc.span.bold {\n        doc.text \"Hello world\"\n      }\n    }\n  }\nend\nputs builder.to_html\n</pre> <p>The HTML builder inherits from the <a href=\"../xml\">XML</a> builder, so make sure to read the <a href=\"../xml/builder\">Nokogiri::XML::Builder</a> documentation.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_html\"> <span class=\"method-name\">to_html</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert the builder to HTML</p> <div class=\"method-source-code\" id=\"to_html-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/builder.rb, line 30\ndef to_html\n  @doc.to_html\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/html/document/encodingreader/jumpsaxhandler":"<h1 id=\"class-Nokogiri::HTML::Document::EncodingReader::JumpSAXHandler\" class=\"class\"> class Nokogiri::HTML::Document::EncodingReader::JumpSAXHandler </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">Nokogiri::HTML::Document::EncodingReader::SAXHandler</dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(jumptag)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/document.rb, line 239\ndef initialize(jumptag)\n  @jumptag = jumptag\n  super()\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-start_element\"> <span class=\"method-name\">start_element</span><span class=\"method-args\">(name, attrs = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"start_element-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/document.rb, line 244\ndef start_element(name, attrs = [])\n  super\n  throw @jumptag, @encoding if @encoding\n  throw @jumptag, nil if name =~ /\\A(?:div|h1|img|p|br)\\z/\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/html/document":"<h1 id=\"class-Nokogiri::HTML::Document\" class=\"class\"> class Nokogiri::HTML::Document </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../xml/document\">Nokogiri::XML::Document</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-callseq\"> new </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new document</p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"c\">static VALUE new(int argc, VALUE *argv, VALUE klass)\n{\n  VALUE uri, external_id, rest, rb_doc;\n  htmlDocPtr doc;\n\n  rb_scan_args(argc, argv, \"0*\", &amp;rest);\n  uri         = rb_ary_entry(rest, (long)0);\n  external_id = rb_ary_entry(rest, (long)1);\n\n  doc = htmlNewDoc(\n      RTEST(uri) ? (const xmlChar *)StringValuePtr(uri) : NULL,\n      RTEST(external_id) ? (const xmlChar *)StringValuePtr(external_id) : NULL\n  );\n  rb_doc = Nokogiri_wrap_xml_document(klass, doc);\n  rb_obj_call_init(rb_doc, argc, argv);\n  return rb_doc ;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-read_io\"> <span class=\"method-callseq\"> read_io(io, url, encoding, options) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Read the HTML document from <code>io</code> with given <code>url</code>, <code>encoding</code>, and <code>options</code>. See Nokogiri::HTML.parse</p> <div class=\"method-source-code\" id=\"read_io-source\"> <pre class=\"c\">static VALUE read_io( VALUE klass,\n                      VALUE io,\n                      VALUE url,\n                      VALUE encoding,\n                      VALUE options )\n{\n  const char * c_url    = NIL_P(url)      ? NULL : StringValuePtr(url);\n  const char * c_enc    = NIL_P(encoding) ? NULL : StringValuePtr(encoding);\n  VALUE error_list      = rb_ary_new();\n  VALUE document;\n  htmlDocPtr doc;\n\n  xmlResetLastError();\n  xmlSetStructuredErrorFunc((void *)error_list, Nokogiri_error_array_pusher);\n\n  doc = htmlReadIO(\n      io_read_callback,\n      io_close_callback,\n      (void *)io,\n      c_url,\n      c_enc,\n      (int)NUM2INT(options)\n  );\n  xmlSetStructuredErrorFunc(NULL, NULL);\n\n  /*\n   * If EncodingFound has occurred in EncodingReader, make sure to do\n   * a cleanup and propagate the error.\n   */\n  if (rb_respond_to(io, id_encoding_found)) {\n    VALUE encoding_found = rb_funcall(io, id_encoding_found, 0);\n    if (!NIL_P(encoding_found)) {\n      xmlFreeDoc(doc);\n      rb_exc_raise(encoding_found);\n    }\n  }\n\n  if(doc == NULL) {\n    xmlErrorPtr error;\n\n    xmlFreeDoc(doc);\n\n    error = xmlGetLastError();\n    if(error)\n      rb_exc_raise(Nokogiri_wrap_xml_syntax_error(error));\n    else\n      rb_raise(rb_eRuntimeError, \"Could not parse document\");\n\n    return Qnil;\n  }\n\n  document = Nokogiri_wrap_xml_document(klass, doc);\n  rb_iv_set(document, \"@errors\", error_list);\n  return document;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-read_memory\"> <span class=\"method-callseq\"> read_memory(string, url, encoding, options) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Read the HTML document contained in <code>string</code> with given <code>url</code>, <code>encoding</code>, and <code>options</code>. See Nokogiri::HTML.parse</p> <div class=\"method-source-code\" id=\"read_memory-source\"> <pre class=\"c\">static VALUE read_memory( VALUE klass,\n                          VALUE string,\n                          VALUE url,\n                          VALUE encoding,\n                          VALUE options )\n{\n  const char * c_buffer = StringValuePtr(string);\n  const char * c_url    = NIL_P(url)      ? NULL : StringValuePtr(url);\n  const char * c_enc    = NIL_P(encoding) ? NULL : StringValuePtr(encoding);\n  int len               = (int)RSTRING_LEN(string);\n  VALUE error_list      = rb_ary_new();\n  VALUE document;\n  htmlDocPtr doc;\n\n  xmlResetLastError();\n  xmlSetStructuredErrorFunc((void *)error_list, Nokogiri_error_array_pusher);\n\n  doc = htmlReadMemory(c_buffer, len, c_url, c_enc, (int)NUM2INT(options));\n  xmlSetStructuredErrorFunc(NULL, NULL);\n\n  if(doc == NULL) {\n    xmlErrorPtr error;\n\n    xmlFreeDoc(doc);\n\n    error = xmlGetLastError();\n    if(error)\n      rb_exc_raise(Nokogiri_wrap_xml_syntax_error(error));\n    else\n      rb_raise(rb_eRuntimeError, \"Could not parse document\");\n\n    return Qnil;\n  }\n\n  document = Nokogiri_wrap_xml_document(klass, doc);\n  rb_iv_set(document, \"@errors\", error_list);\n  return document;\n}</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fragment\"> <span class=\"method-name\">fragment</span><span class=\"method-args\">(tags = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a <a href=\"../xml/documentfragment\">Nokogiri::XML::DocumentFragment</a> from <code>tags</code></p> <div class=\"method-source-code\" id=\"fragment-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/document.rb, line 149\ndef fragment tags = nil\n  DocumentFragment.new(self, tags, self.root)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-meta_encoding\"> <span class=\"method-name\">meta_encoding</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the meta tag encoding for this document. If there is no meta tag, then nil is returned.</p> <div class=\"method-source-code\" id=\"meta_encoding-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/document.rb, line 7\ndef meta_encoding\n  case\n  when meta = at('//meta[@charset]')\n    meta[:charset]\n  when meta = meta_content_type\n    meta['content'][/charset\\s*=\\s*([\\w-]+)/i, 1]\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-meta_encoding-3D\"> <span class=\"method-name\">meta_encoding=</span><span class=\"method-args\">(encoding)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the meta tag encoding for this document.</p> <p>If an meta encoding tag is already present, its content is replaced with the given text.</p> <p>Otherwise, this method tries to create one at an appropriate place supplying head and/or html elements as necessary, which is inside a head element if any, and before any text node or content element (typically &lt;body&gt;) if any.</p> <p>The result when trying to set an encoding that is different from the document encoding is undefined.</p> <p>Beware in CRuby, that libxml2 automatically inserts a meta tag into a head element.</p> <div class=\"method-source-code\" id=\"meta_encoding-3D-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/document.rb, line 32\ndef meta_encoding= encoding\n  case\n  when meta = meta_content_type\n    meta['content'] = 'text/html; charset=%s' % encoding\n    encoding\n  when meta = at('//meta[@charset]')\n    meta['charset'] = encoding\n  else\n    meta = XML::Node.new('meta', self)\n    if dtd = internal_subset and dtd.html5_dtd?\n      meta['charset'] = encoding\n    else\n      meta['http-equiv'] = 'Content-Type'\n      meta['content'] = 'text/html; charset=%s' % encoding\n    end\n\n    case\n    when head = at('//head')\n      head.prepend_child(meta)\n    else\n      set_metadata_element(meta)\n    end\n    encoding\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse\"> <span class=\"method-name\">parse</span><span class=\"method-args\">(string_or_io, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML) { |options| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse HTML. <code>string_or_io</code> may be a String, or any object that responds to <em>read</em> and <em>close</em> such as an IO, or StringIO. <code>url</code> is resource where this document is located. <code>encoding</code> is the encoding that should be used when processing the document. <code>options</code> is a number that sets options in the parser, such as Nokogiri::XML::ParseOptions::RECOVER. See the constants in <a href=\"../xml/parseoptions\">Nokogiri::XML::ParseOptions</a>.</p> <div class=\"method-source-code\" id=\"parse-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/document.rb, line 162\ndef parse string_or_io, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML\n\n  options = Nokogiri::XML::ParseOptions.new(options) if Fixnum === options\n  # Give the options to the user\n  yield options if block_given?\n\n  if string_or_io.respond_to?(:encoding)\n    unless string_or_io.encoding.name == \"ASCII-8BIT\"\n      encoding ||= string_or_io.encoding.name\n    end\n  end\n\n  if string_or_io.respond_to?(:read)\n    url ||= string_or_io.respond_to?(:path) ? string_or_io.path : nil\n    if !encoding\n      # Libxml2's parser has poor support for encoding\n      # detection.  First, it does not recognize the HTML5\n      # style meta charset declaration.  Secondly, even if it\n      # successfully detects an encoding hint, it does not\n      # re-decode or re-parse the preceding part which may be\n      # garbled.\n      #\n      # EncodingReader aims to perform advanced encoding\n      # detection beyond what Libxml2 does, and to emulate\n      # rewinding of a stream and make Libxml2 redo parsing\n      # from the start when an encoding hint is found.\n      string_or_io = EncodingReader.new(string_or_io)\n      begin\n        return read_io(string_or_io, url, encoding, options.to_i)\n      rescue EncodingFound =&gt; e\n        encoding = e.found_encoding\n      end\n    end\n    return read_io(string_or_io, url, encoding, options.to_i)\n  end\n\n  # read_memory pukes on empty docs\n  return new if string_or_io.nil? or string_or_io.empty?\n\n  encoding ||= EncodingReader.detect_encoding(string_or_io)\n\n  read_memory(string_or_io, url, encoding, options.to_i)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-serialize\"> <span class=\"method-name\">serialize</span><span class=\"method-args\">(options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Serialize Node using <code>options</code>. Save options can also be set using a block. See SaveOptions.</p> <p>These two statements are equivalent:</p> <pre class=\"ruby\">node.serialize(:encoding =&gt; 'UTF-8', :save_with =&gt; FORMAT | AS_XML)\n</pre> <p>or</p> <pre class=\"ruby\">node.serialize(:encoding =&gt; 'UTF-8') do |config|\n  config.format.as_xml\nend\n</pre> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../xml/node#method-i-serialize\">Nokogiri::XML::Node#serialize</a> </div> <div class=\"method-source-code\" id=\"serialize-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/document.rb, line 142\ndef serialize options = {}\n  options[:save_with] ||= XML::Node::SaveOptions::DEFAULT_HTML\n  super\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-title\"> <span class=\"method-name\">title</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the title string of this document. Return nil if there is no title tag.</p> <div class=\"method-source-code\" id=\"title-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/document.rb, line 68\ndef title\n  title = at('//title') and title.inner_text\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-title-3D\"> <span class=\"method-name\">title=</span><span class=\"method-args\">(text)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the title string of this document.</p> <p>If a title element is already present, its content is replaced with the given text.</p> <p>Otherwise, this method tries to create one at an appropriate place supplying head and/or html elements as necessary, which is inside a head element if any, right after a meta encoding/charset tag if any, and before any text node or content element (typically &lt;body&gt;) if any.</p> <div class=\"method-source-code\" id=\"title-3D-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/document.rb, line 83\ndef title=(text)\n  tnode = XML::Text.new(text, self)\n  if title = at('//title')\n    title.children = tnode\n    return text\n  end\n\n  title = XML::Node.new('title', self) &lt;&lt; tnode\n  case\n  when head = at('//head')\n    head &lt;&lt; title\n  when meta = at('//meta[@charset]') || meta_content_type\n    # better put after charset declaration\n    meta.add_next_sibling(title)\n  else\n    set_metadata_element(title)\n  end\n  text\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-type\"> <span class=\"method-callseq\"> type </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The type for this document</p> <div class=\"method-source-code\" id=\"type-source\"> <pre class=\"c\">static VALUE type(VALUE self)\n{\n  htmlDocPtr doc;\n  Data_Get_Struct(self, xmlDoc, doc);\n  return INT2NUM((long)doc-&gt;type);\n}</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/html/documentfragment":"<h1 id=\"class-Nokogiri::HTML::DocumentFragment\" class=\"class\"> class Nokogiri::HTML::DocumentFragment </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../xml/documentfragment\">Nokogiri::XML::DocumentFragment</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-errors\"> <span class=\"method-name\">errors</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(document, tags = nil, ctx = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/document_fragment.rb, line 17\ndef initialize document, tags = nil, ctx = nil\n  return self unless tags\n\n  if ctx\n    preexisting_errors = document.errors.dup\n    node_set = ctx.parse(\"&lt;div&gt;#{tags}&lt;/div&gt;\")\n    node_set.first.children.each { |child| child.parent = self } unless node_set.empty?\n    self.errors = document.errors - preexisting_errors\n  else\n    # This is a horrible hack, but I don't care\n    if tags.strip =~ /^&lt;body/i\n      path = \"/html/body\"\n    else\n      path = \"/html/body/node()\"\n    end\n\n    temp_doc = HTML::Document.parse \"&lt;html&gt;&lt;body&gt;#{tags}\", nil, document.encoding\n    temp_doc.xpath(path).each { |child| child.parent = self }\n    self.errors = temp_doc.errors\n  end\n  children\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-parse\"> <span class=\"method-name\">parse</span><span class=\"method-args\">(tags, encoding = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a <a href=\"../xml/documentfragment\">Nokogiri::XML::DocumentFragment</a> from <code>tags</code>, using <code>encoding</code></p> <div class=\"method-source-code\" id=\"parse-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/document_fragment.rb, line 8\ndef self.parse tags, encoding = nil\n  doc = HTML::Document.new\n\n  encoding ||= tags.respond_to?(:encoding) ? tags.encoding.name : 'UTF-8'\n  doc.encoding = encoding\n\n  new(doc, tags)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/html/elementdescription":"<h1 id=\"class-Nokogiri::HTML::ElementDescription\" class=\"class\"> class Nokogiri::HTML::ElementDescription </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ACTION_ATTR\">ACTION_ATTR </dt>\n\n<dt id=\"ALIGN_ATTR\">ALIGN_ATTR </dt>\n\n<dt id=\"ALT_ATTR\">ALT_ATTR </dt>\n\n<dt id=\"APPLET_ATTRS\">APPLET_ATTRS </dt>\n\n<dt id=\"AREA_ATTRS\">AREA_ATTRS </dt>\n\n<dt id=\"ATTRS\">ATTRS </dt>\n\n<dt id=\"A_ATTRS\">A_ATTRS </dt>\n\n<dt id=\"BASEFONT_ATTRS\">BASEFONT_ATTRS </dt>\n\n<dt id=\"BGCOLOR_ATTR\">BGCOLOR_ATTR </dt>\n\n<dt id=\"BLOCK\">BLOCK </dt>\n\n<dt id=\"BLOCKLI_ELT\">BLOCKLI_ELT </dt>\n\n<dt id=\"BODY_ATTRS\">BODY_ATTRS </dt>\n\n<dt id=\"BODY_CONTENTS\">BODY_CONTENTS </dt>\n\n<dt id=\"BODY_DEPR\">BODY_DEPR </dt>\n\n<dt id=\"BUTTON_ATTRS\">BUTTON_ATTRS </dt>\n\n<dt id=\"CELLHALIGN\">CELLHALIGN </dt>\n\n<dt id=\"CELLVALIGN\">CELLVALIGN </dt>\n\n<dt id=\"CLEAR_ATTRS\">CLEAR_ATTRS </dt>\n\n<dt id=\"COL_ATTRS\">COL_ATTRS </dt>\n\n<dt id=\"COL_ELT\">COL_ELT </dt>\n\n<dt id=\"COMPACT_ATTR\">COMPACT_ATTR </dt>\n\n<dt id=\"COMPACT_ATTRS\">COMPACT_ATTRS </dt>\n\n<dt id=\"CONTENT_ATTR\">CONTENT_ATTR </dt>\n\n<dt id=\"COREATTRS\">COREATTRS </dt>\n\n<dt id=\"CORE_ATTRS\">CORE_ATTRS </dt>\n\n<dt id=\"CORE_I18N_ATTRS\">CORE_I18N_ATTRS </dt>\n\n<dt id=\"DIR_ATTR\">DIR_ATTR </dt>\n\n<dt id=\"DL_CONTENTS\">DL_CONTENTS </dt>\n\n<dt id=\"DefaultDescriptions\">DefaultDescriptions </dt>\n<dd>\n<p>This is filled in down below.</p> </dd>\n<dt id=\"Desc\">Desc </dt>\n<dd>\n<p>Methods are defined protected by method_defined? because at this point the C-library or Java library is already loaded, and we don't want to clobber any methods that have been defined there.</p> </dd>\n<dt id=\"EDIT_ATTRS\">EDIT_ATTRS </dt>\n\n<dt id=\"EMBED_ATTRS\">EMBED_ATTRS </dt>\n\n<dt id=\"EMPTY\">EMPTY </dt>\n\n<dt id=\"EVENTS\">EVENTS </dt>\n\n<dt id=\"FIELDSET_CONTENTS\">FIELDSET_CONTENTS </dt>\n\n<dt id=\"FLOW\">FLOW </dt>\n\n<dt id=\"FLOW_PARAM\">FLOW_PARAM </dt>\n\n<dt id=\"FONTSTYLE\">FONTSTYLE </dt>\n<dd>\n<p>Attributes defined and categorized</p> </dd>\n<dt id=\"FONT_ATTRS\">FONT_ATTRS </dt>\n\n<dt id=\"FORMCTRL\">FORMCTRL </dt>\n\n<dt id=\"FORM_ATTRS\">FORM_ATTRS </dt>\n\n<dt id=\"FORM_CONTENTS\">FORM_CONTENTS </dt>\n\n<dt id=\"FRAMESET_ATTRS\">FRAMESET_ATTRS </dt>\n\n<dt id=\"FRAMESET_CONTENTS\">FRAMESET_CONTENTS </dt>\n\n<dt id=\"FRAME_ATTRS\">FRAME_ATTRS </dt>\n\n<dt id=\"HEADING\">HEADING </dt>\n\n<dt id=\"HEAD_ATTRS\">HEAD_ATTRS </dt>\n\n<dt id=\"HEAD_CONTENTS\">HEAD_CONTENTS </dt>\n\n<dt id=\"HREF_ATTRS\">HREF_ATTRS </dt>\n\n<dt id=\"HR_DEPR\">HR_DEPR </dt>\n\n<dt id=\"HTML_ATTRS\">HTML_ATTRS </dt>\n\n<dt id=\"HTML_CDATA\">HTML_CDATA </dt>\n\n<dt id=\"HTML_CONTENT\">HTML_CONTENT </dt>\n\n<dt id=\"HTML_FLOW\">HTML_FLOW </dt>\n\n<dt id=\"HTML_INLINE\">HTML_INLINE </dt>\n\n<dt id=\"HTML_PCDATA\">HTML_PCDATA </dt>\n\n<dt id=\"I18N\">I18N </dt>\n\n<dt id=\"I18N_ATTRS\">I18N_ATTRS </dt>\n\n<dt id=\"IFRAME_ATTRS\">IFRAME_ATTRS </dt>\n\n<dt id=\"IMG_ATTRS\">IMG_ATTRS </dt>\n\n<dt id=\"INLINE\">INLINE </dt>\n\n<dt id=\"INLINE_P\">INLINE_P </dt>\n\n<dt id=\"INPUT_ATTRS\">INPUT_ATTRS </dt>\n\n<dt id=\"LABEL_ATTR\">LABEL_ATTR </dt>\n\n<dt id=\"LABEL_ATTRS\">LABEL_ATTRS </dt>\n\n<dt id=\"LANGUAGE_ATTR\">LANGUAGE_ATTR </dt>\n\n<dt id=\"LEGEND_ATTRS\">LEGEND_ATTRS </dt>\n\n<dt id=\"LINK_ATTRS\">LINK_ATTRS </dt>\n\n<dt id=\"LIST\">LIST </dt>\n\n<dt id=\"LI_ELT\">LI_ELT </dt>\n\n<dt id=\"MAP_CONTENTS\">MAP_CONTENTS </dt>\n\n<dt id=\"META_ATTRS\">META_ATTRS </dt>\n\n<dt id=\"MODIFIER\">MODIFIER </dt>\n\n<dt id=\"NAME_ATTR\">NAME_ATTR </dt>\n\n<dt id=\"NOFRAMES_CONTENT\">NOFRAMES_CONTENT </dt>\n\n<dt id=\"OBJECT_ATTRS\">OBJECT_ATTRS </dt>\n\n<dt id=\"OBJECT_CONTENTS\">OBJECT_CONTENTS </dt>\n\n<dt id=\"OBJECT_DEPR\">OBJECT_DEPR </dt>\n\n<dt id=\"OL_ATTRS\">OL_ATTRS </dt>\n\n<dt id=\"OPTGROUP_ATTRS\">OPTGROUP_ATTRS </dt>\n\n<dt id=\"OPTION_ATTRS\">OPTION_ATTRS </dt>\n\n<dt id=\"OPTION_ELT\">OPTION_ELT </dt>\n\n<dt id=\"PARAM_ATTRS\">PARAM_ATTRS </dt>\n\n<dt id=\"PCDATA\">PCDATA </dt>\n\n<dt id=\"PHRASE\">PHRASE </dt>\n\n<dt id=\"PRE_CONTENT\">PRE_CONTENT </dt>\n\n<dt id=\"PROMPT_ATTRS\">PROMPT_ATTRS </dt>\n\n<dt id=\"QUOTE_ATTRS\">QUOTE_ATTRS </dt>\n\n<dt id=\"ROWS_COLS_ATTR\">ROWS_COLS_ATTR </dt>\n\n<dt id=\"SCRIPT_ATTRS\">SCRIPT_ATTRS </dt>\n\n<dt id=\"SELECT_ATTRS\">SELECT_ATTRS </dt>\n\n<dt id=\"SELECT_CONTENT\">SELECT_CONTENT </dt>\n\n<dt id=\"SPECIAL\">SPECIAL </dt>\n\n<dt id=\"SRC_ALT_ATTRS\">SRC_ALT_ATTRS </dt>\n\n<dt id=\"STYLE_ATTRS\">STYLE_ATTRS </dt>\n\n<dt id=\"TABLE_ATTRS\">TABLE_ATTRS </dt>\n\n<dt id=\"TABLE_CONTENTS\">TABLE_CONTENTS </dt>\n\n<dt id=\"TABLE_DEPR\">TABLE_DEPR </dt>\n\n<dt id=\"TALIGN_ATTRS\">TALIGN_ATTRS </dt>\n\n<dt id=\"TARGET_ATTR\">TARGET_ATTR </dt>\n\n<dt id=\"TEXTAREA_ATTRS\">TEXTAREA_ATTRS </dt>\n\n<dt id=\"TH_TD_ATTR\">TH_TD_ATTR </dt>\n\n<dt id=\"TH_TD_DEPR\">TH_TD_DEPR </dt>\n\n<dt id=\"TR_CONTENTS\">TR_CONTENTS </dt>\n\n<dt id=\"TR_ELT\">TR_ELT </dt>\n\n<dt id=\"TYPE_ATTR\">TYPE_ATTR </dt>\n\n<dt id=\"UL_DEPR\">UL_DEPR </dt>\n\n<dt id=\"VERSION_ATTR\">VERSION_ATTR </dt>\n\n<dt id=\"WIDTH_ATTR\">WIDTH_ATTR </dt>\n\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-5B-5D\"> <span class=\"method-callseq\"> [](tag_name) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get ElemementDescription for <code>tag_name</code></p> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"c\">static VALUE get_description(VALUE klass, VALUE tag_name)\n{\n  const htmlElemDesc * description = htmlTagLookup(\n      (const xmlChar *)StringValuePtr(tag_name)\n  );\n\n  if(NULL == description) return Qnil;\n  return Data_Wrap_Struct(klass, 0, 0, (void *)description);\n}</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-block-3F\"> <span class=\"method-name\">block?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this element a block element?</p> <div class=\"method-source-code\" id=\"block-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/element_description.rb, line 6\ndef block?\n  !inline?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-default_sub_element\"> <span class=\"method-callseq\"> default_sub_element </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The default sub element for this element</p> <div class=\"method-source-code\" id=\"default_sub_element-source\"> <pre class=\"c\">static VALUE default_sub_element(VALUE self)\n{\n  htmlElemDesc * description;\n  Data_Get_Struct(self, htmlElemDesc, description);\n\n  if (description-&gt;defaultsubelt)\n    return NOKOGIRI_STR_NEW2(description-&gt;defaultsubelt);\n\n  return Qnil;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deprecated-3F\"> <span class=\"method-callseq\"> deprecated? </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this element deprecated?</p> <div class=\"method-source-code\" id=\"deprecated-3F-source\"> <pre class=\"c\">static VALUE deprecated_eh(VALUE self)\n{\n  htmlElemDesc * description;\n  Data_Get_Struct(self, htmlElemDesc, description);\n\n  if(description-&gt;depr) return Qtrue;\n  return Qfalse;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-deprecated_attributes\"> <span class=\"method-callseq\"> deprecated_attributes </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A list of deprecated attributes for this element</p> <div class=\"method-source-code\" id=\"deprecated_attributes-source\"> <pre class=\"c\">static VALUE deprecated_attributes(VALUE self)\n{\n  htmlElemDesc * description;\n  VALUE list;\n  int i;\n\n  Data_Get_Struct(self, htmlElemDesc, description);\n\n  list = rb_ary_new();\n\n  if(NULL == description-&gt;attrs_depr) return list;\n\n  for(i = 0; description-&gt;attrs_depr[i]; i++) {\n    rb_ary_push(list, NOKOGIRI_STR_NEW2(description-&gt;attrs_depr[i]));\n  }\n\n  return list;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-description\"> <span class=\"method-callseq\"> description </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The description for this element</p> <div class=\"method-source-code\" id=\"description-source\"> <pre class=\"c\">static VALUE description(VALUE self)\n{\n  htmlElemDesc * description;\n  Data_Get_Struct(self, htmlElemDesc, description);\n\n  return NOKOGIRI_STR_NEW2(description-&gt;desc);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-empty-3F\"> <span class=\"method-callseq\"> empty? </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this an empty element?</p> <div class=\"method-source-code\" id=\"empty-3F-source\"> <pre class=\"c\">static VALUE empty_eh(VALUE self)\n{\n  htmlElemDesc * description;\n  Data_Get_Struct(self, htmlElemDesc, description);\n\n  if(description-&gt;empty) return Qtrue;\n  return Qfalse;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-implied_end_tag-3F\"> <span class=\"method-callseq\"> implied_end_tag? </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Can the end tag be implied for this tag?</p> <div class=\"method-source-code\" id=\"implied_end_tag-3F-source\"> <pre class=\"c\">static VALUE implied_end_tag_eh(VALUE self)\n{\n  htmlElemDesc * description;\n  Data_Get_Struct(self, htmlElemDesc, description);\n\n  if(description-&gt;endTag) return Qtrue;\n  return Qfalse;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-implied_start_tag-3F\"> <span class=\"method-callseq\"> implied_start_tag? </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Can the start tag be implied for this tag?</p> <div class=\"method-source-code\" id=\"implied_start_tag-3F-source\"> <pre class=\"c\">static VALUE implied_start_tag_eh(VALUE self)\n{\n  htmlElemDesc * description;\n  Data_Get_Struct(self, htmlElemDesc, description);\n\n  if(description-&gt;startTag) return Qtrue;\n  return Qfalse;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inline-3F\"> <span class=\"method-callseq\"> inline? </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this element an inline element?</p> <div class=\"method-source-code\" id=\"inline-3F-source\"> <pre class=\"c\">static VALUE inline_eh(VALUE self)\n{\n  htmlElemDesc * description;\n  Data_Get_Struct(self, htmlElemDesc, description);\n\n  if(description-&gt;isinline) return Qtrue;\n  return Qfalse;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inspect\"> <span class=\"method-name\">inspect</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Inspection information</p> <div class=\"method-source-code\" id=\"inspect-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/element_description.rb, line 18\ndef inspect\n  \"#&lt;#{self.class.name}: #{name} #{description}&gt;\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-name\"> <span class=\"method-callseq\"> name </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the tag name for this ElemementDescription</p> <div class=\"method-source-code\" id=\"name-source\"> <pre class=\"c\">static VALUE name(VALUE self)\n{\n  htmlElemDesc * description;\n  Data_Get_Struct(self, htmlElemDesc, description);\n\n  if(NULL == description-&gt;name) return Qnil;\n  return NOKOGIRI_STR_NEW2(description-&gt;name);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-optional_attributes\"> <span class=\"method-callseq\"> optional_attributes </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A list of optional attributes for this element</p> <div class=\"method-source-code\" id=\"optional_attributes-source\"> <pre class=\"c\">static VALUE optional_attributes(VALUE self)\n{\n  htmlElemDesc * description;\n  VALUE list;\n  int i;\n\n  Data_Get_Struct(self, htmlElemDesc, description);\n\n  list = rb_ary_new();\n\n  if(NULL == description-&gt;attrs_opt) return list;\n\n  for(i = 0; description-&gt;attrs_opt[i]; i++) {\n    rb_ary_push(list, NOKOGIRI_STR_NEW2(description-&gt;attrs_opt[i]));\n  }\n\n  return list;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-required_attributes\"> <span class=\"method-callseq\"> required_attributes </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A list of required attributes for this element</p> <div class=\"method-source-code\" id=\"required_attributes-source\"> <pre class=\"c\">static VALUE required_attributes(VALUE self)\n{\n  htmlElemDesc * description;\n  VALUE list;\n  int i;\n\n  Data_Get_Struct(self, htmlElemDesc, description);\n\n  list = rb_ary_new();\n\n  if(NULL == description-&gt;attrs_req) return list;\n\n  for(i = 0; description-&gt;attrs_depr[i]; i++) {\n    rb_ary_push(list, NOKOGIRI_STR_NEW2(description-&gt;attrs_req[i]));\n  }\n\n  return list;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-save_end_tag-3F\"> <span class=\"method-callseq\"> save_end_tag? </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Should the end tag be saved?</p> <div class=\"method-source-code\" id=\"save_end_tag-3F-source\"> <pre class=\"c\">static VALUE save_end_tag_eh(VALUE self)\n{\n  htmlElemDesc * description;\n  Data_Get_Struct(self, htmlElemDesc, description);\n\n  if(description-&gt;saveEndTag) return Qtrue;\n  return Qfalse;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-sub_elements\"> <span class=\"method-callseq\"> sub_elements </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A list of allowed sub elements for this element.</p> <div class=\"method-source-code\" id=\"sub_elements-source\"> <pre class=\"c\">static VALUE sub_elements(VALUE self)\n{\n  htmlElemDesc * description;\n  VALUE list;\n  int i;\n\n  Data_Get_Struct(self, htmlElemDesc, description);\n\n  list = rb_ary_new();\n\n  if(NULL == description-&gt;subelts) return list;\n\n  for(i = 0; description-&gt;subelts[i]; i++) {\n    rb_ary_push(list, NOKOGIRI_STR_NEW2(description-&gt;subelts[i]));\n  }\n\n  return list;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_s\"> <span class=\"method-name\">to_s</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert this description to a string</p> <div class=\"method-source-code\" id=\"to_s-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/element_description.rb, line 12\ndef to_s\n  \"#{name}: #{description}\"\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/html/entitylookup":"<h1 id=\"class-Nokogiri::HTML::EntityLookup\" class=\"class\"> class Nokogiri::HTML::EntityLookup </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D\"> <span class=\"method-name\">[]</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Look up entity with <code>name</code></p> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/entity_lookup.rb, line 8\ndef [] name\n  (val = get(name)) &amp;&amp; val.value\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-get\"> <span class=\"method-callseq\"> get(key) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the <a href=\"entitydescription\">HTML::EntityDescription</a> for <code>key</code></p> <div class=\"method-source-code\" id=\"get-source\"> <pre class=\"c\">static VALUE get(VALUE self, VALUE key)\n{\n  const htmlEntityDesc * desc =\n    htmlEntityLookup((const xmlChar *)StringValuePtr(key));\n  VALUE klass, args[3];\n\n  if(NULL == desc) return Qnil;\n  klass = rb_const_get(mNokogiriHtml, rb_intern(\"EntityDescription\"));\n\n  args[0] = INT2NUM((long)desc-&gt;value);\n  args[1] = NOKOGIRI_STR_NEW2(desc-&gt;name);\n  args[2] = NOKOGIRI_STR_NEW2(desc-&gt;desc);\n\n  return rb_class_new_instance(3, args, klass);\n}</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/html/sax/parser":"<h1 id=\"class-Nokogiri::HTML::SAX::Parser\" class=\"class\"> class Nokogiri::HTML::SAX::Parser </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../xml/sax/parser\">Nokogiri::XML::SAX::Parser</a></dd>\n</dl> <section class=\"description\"> <p>This class lets you perform <a href=\"../sax\">SAX</a> style parsing on HTML with HTML error correction.</p> <p>Here is a basic usage example:</p> <pre class=\"ruby\">class MyDoc &lt; Nokogiri::XML::SAX::Document\n  def start_element name, attributes = []\n    puts \"found a #{name}\"\n  end\nend\n\nparser = Nokogiri::HTML::SAX::Parser.new(MyDoc.new)\nparser.parse(File.read(ARGV[0], mode: 'rb'))\n</pre> <p>For more information on <a href=\"../sax\">SAX</a> parsers, see <a href=\"../../xml/sax\">Nokogiri::XML::SAX</a></p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse_file\"> <span class=\"method-name\">parse_file</span><span class=\"method-args\">(filename, encoding = 'UTF-8') { |ctx| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse a file with <code>filename</code></p> <div class=\"method-source-code\" id=\"parse_file-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/sax/parser.rb, line 41\ndef parse_file filename, encoding = 'UTF-8'\n  raise ArgumentError unless filename\n  raise Errno::ENOENT unless File.exist?(filename)\n  raise Errno::EISDIR if File.directory?(filename)\n  ctx = ParserContext.file(filename, encoding)\n  yield ctx if block_given?\n  ctx.parse_with self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse_memory\"> <span class=\"method-name\">parse_memory</span><span class=\"method-args\">(data, encoding = 'UTF-8') { |ctx| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse html stored in <code>data</code> using <code>encoding</code></p> <div class=\"method-source-code\" id=\"parse_memory-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/sax/parser.rb, line 31\ndef parse_memory data, encoding = 'UTF-8'\n  raise ArgumentError unless data\n  return unless data.length &gt; 0\n  ctx = ParserContext.memory(data, encoding)\n  yield ctx if block_given?\n  ctx.parse_with self\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/html/sax/parsercontext":"<h1 id=\"class-Nokogiri::HTML::SAX::ParserContext\" class=\"class\"> class Nokogiri::HTML::SAX::ParserContext </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../../xml/sax/parsercontext\">Nokogiri::XML::SAX::ParserContext</a></dd>\n</dl> <section class=\"description\"> <p>Context for HTML <a href=\"../sax\">SAX</a> parsers. This class is usually not instantiated by the user. Instead, you should be looking at <a href=\"parser\">Nokogiri::HTML::SAX::Parser</a></p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-file\"> <span class=\"method-name\">file</span><span class=\"method-args\">(p1, p2)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"file-source\"> <pre class=\"c\">static VALUE parse_file(VALUE klass, VALUE filename, VALUE encoding)\n{\n  htmlParserCtxtPtr ctxt = htmlCreateFileParserCtxt(\n      StringValuePtr(filename),\n      StringValuePtr(encoding)\n  );\n  return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-memory\"> <span class=\"method-name\">memory</span><span class=\"method-args\">(p1, p2)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"memory-source\"> <pre class=\"c\">static VALUE\nparse_memory(VALUE klass, VALUE data, VALUE encoding)\n{\n    htmlParserCtxtPtr ctxt;\n\n    if (NIL_P(data))\n        rb_raise(rb_eArgError, \"data cannot be nil\");\n    if (!(int)RSTRING_LEN(data))\n        rb_raise(rb_eRuntimeError, \"data cannot be empty\");\n\n    ctxt = htmlCreateMemoryParserCtxt(StringValuePtr(data),\n                                      (int)RSTRING_LEN(data));\n    if (ctxt-&gt;sax) {\n        xmlFree(ctxt-&gt;sax);\n        ctxt-&gt;sax = NULL;\n    }\n\n    if (RTEST(encoding)) {\n        xmlCharEncodingHandlerPtr enc = xmlFindCharEncodingHandler(StringValuePtr(encoding));\n        if (enc != NULL) {\n            xmlSwitchToEncoding(ctxt, enc);\n            if (ctxt-&gt;errNo == XML_ERR_UNSUPPORTED_ENCODING) {\n                rb_raise(rb_eRuntimeError, \"Unsupported encoding %s\",\n                         StringValuePtr(encoding));\n            }\n        }\n    }\n\n    return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(thing, encoding = 'UTF-8')</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../../xml/sax/parsercontext#method-c-new\">Nokogiri::XML::SAX::ParserContext.new</a> </div> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/sax/parser_context.rb, line 9\ndef self.new thing, encoding = 'UTF-8'\n  [:read, :close].all? { |x| thing.respond_to?(x) } ?  super :\n    memory(thing, encoding)\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse_with\"> <span class=\"method-name\">parse_with</span><span class=\"method-args\">(p1)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"parse_with-source\"> <pre class=\"c\">static VALUE\nparse_with(VALUE self, VALUE sax_handler)\n{\n    htmlParserCtxtPtr ctxt;\n    htmlSAXHandlerPtr sax;\n\n    if (!rb_obj_is_kind_of(sax_handler, cNokogiriXmlSaxParser))\n        rb_raise(rb_eArgError, \"argument must be a Nokogiri::XML::SAX::Parser\");\n\n    Data_Get_Struct(self, htmlParserCtxt, ctxt);\n    Data_Get_Struct(sax_handler, htmlSAXHandler, sax);\n\n    /* Free the sax handler since we'll assign our own */\n    if (ctxt-&gt;sax &amp;&amp; ctxt-&gt;sax != (xmlSAXHandlerPtr)&amp;xmlDefaultSAXHandler)\n        xmlFree(ctxt-&gt;sax);\n\n    ctxt-&gt;sax = sax;\n    ctxt-&gt;userData = (void *)NOKOGIRI_SAX_TUPLE_NEW(ctxt, sax_handler);\n\n    rb_ensure(parse_doc, (VALUE)ctxt, parse_doc_finalize, (VALUE)ctxt);\n\n    return self;\n}</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/html/sax/pushparser":"<h1 id=\"class-Nokogiri::HTML::SAX::PushParser\" class=\"class\"> class Nokogiri::HTML::SAX::PushParser </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">cNokogiriXmlSaxPushParser</dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(doc = XML::SAX::Document.new, file_name = nil, encoding = 'UTF-8')</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/nokogiri/html/sax/push_parser.rb, line 5\ndef initialize(doc = XML::SAX::Document.new, file_name = nil, encoding = 'UTF-8')\n  @document = doc\n  @encoding = encoding\n  @sax_parser = HTML::SAX::Parser.new(doc, @encoding)\n\n  ## Create our push parser context\n  initialize_native(@sax_parser, file_name, @encoding)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/html/sax":"<h1 id=\"module-Nokogiri::HTML::SAX\" class=\"module\"> module Nokogiri::HTML::SAX </h1>\n <section class=\"description\"> <p><a href=\"../../nokogiri\">Nokogiri</a> lets you write a <a href=\"sax\">SAX</a> parser to process HTML but get HTML correction features.</p> <p>See <a href=\"sax/parser\">Nokogiri::HTML::SAX::Parser</a> for a basic example of using a <a href=\"sax\">SAX</a> parser with HTML.</p> <p>For more information on <a href=\"sax\">SAX</a> parsers, see <a href=\"../xml/sax\">Nokogiri::XML::SAX</a></p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/syntaxerror":"<h1 id=\"class-Nokogiri::SyntaxError\" class=\"class\"> class Nokogiri::SyntaxError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">StandardError</dd>\n</dl> <section class=\"description\"> <p>The <a href=\"xml/syntaxerror\">XML::SyntaxError</a> is raised on parse errors</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/attr":"<h1 id=\"class-Nokogiri::XML::Attr\" class=\"class\"> class Nokogiri::XML::Attr </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"node\">Nokogiri::XML::Node</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"attr\">Attr</a> represents a <a href=\"attr\">Attr</a> node in an xml document.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-callseq\"> new(document, name) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"attr\">Attr</a> element on the <code>document</code> with <code>name</code></p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"c\">static VALUE new(int argc, VALUE *argv, VALUE klass)\n{\n  xmlDocPtr xml_doc;\n  VALUE document;\n  VALUE name;\n  VALUE rest;\n  xmlAttrPtr node;\n  VALUE rb_node;\n\n  rb_scan_args(argc, argv, \"2*\", &amp;document, &amp;name, &amp;rest);\n\n  Data_Get_Struct(document, xmlDoc, xml_doc);\n\n  node = xmlNewDocProp(\n      xml_doc,\n      (const xmlChar *)StringValuePtr(name),\n      NULL\n  );\n\n  nokogiri_root_node((xmlNodePtr)node);\n\n  rb_node = Nokogiri_wrap_xml_node(klass, (xmlNodePtr)node);\n  rb_obj_call_init(rb_node, argc, argv);\n\n  if(rb_block_given_p()) rb_yield(rb_node);\n\n  return rb_node;\n}</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-content-3D\"> <span class=\"method-name\">content=</span><span class=\"method-args\">(p1)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"attr#method-i-value-3D\">value=</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-value-3D\"> <span class=\"method-callseq\"> value=(content) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the value for this <a href=\"attr\">Attr</a> to <code>content</code></p> <div class=\"method-source-code\" id=\"value-3D-source\"> <pre class=\"c\">static VALUE set_value(VALUE self, VALUE content)\n{\n  xmlAttrPtr attr;\n  Data_Get_Struct(self, xmlAttr, attr);\n\n  if(attr-&gt;children) xmlFreeNodeList(attr-&gt;children);\n\n  attr-&gt;children = attr-&gt;last = NULL;\n\n  if(content) {\n    xmlChar *buffer;\n    xmlNode *tmp;\n\n    /* Encode our content */\n    buffer = xmlEncodeEntitiesReentrant(attr-&gt;doc, (unsigned char *)StringValuePtr(content));\n\n    attr-&gt;children = xmlStringGetNodeList(attr-&gt;doc, buffer);\n    attr-&gt;last = NULL;\n    tmp = attr-&gt;children;\n\n    /* Loop through the children */\n    for(tmp = attr-&gt;children; tmp; tmp = tmp-&gt;next) {\n      tmp-&gt;parent = (xmlNode *)attr;\n      tmp-&gt;doc = attr-&gt;doc;\n      if(tmp-&gt;next == NULL) attr-&gt;last = tmp;\n    }\n\n    /* Free up memory */\n    xmlFree(buffer);\n  }\n\n  return content;\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"attr#method-i-content-3D\">content=</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/attributedecl":"<h1 id=\"class-Nokogiri::XML::AttributeDecl\" class=\"class\"> class Nokogiri::XML::AttributeDecl </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"node\">Nokogiri::XML::Node</a></dd>\n</dl> <section class=\"description\"> <p>Represents an attribute declaration in a <a href=\"dtd\">DTD</a></p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_type\"> <span class=\"method-callseq\"> attribute_type </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The <a href=\"attributedecl#method-i-attribute_type\">#attribute_type</a> for this <a href=\"attributedecl\">AttributeDecl</a></p> <div class=\"method-source-code\" id=\"attribute_type-source\"> <pre class=\"c\">static VALUE attribute_type(VALUE self)\n{\n  xmlAttributePtr node;\n  Data_Get_Struct(self, xmlAttribute, node);\n  return INT2NUM((long)node-&gt;atype);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-default\"> <span class=\"method-callseq\"> default </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The default value</p> <div class=\"method-source-code\" id=\"default-source\"> <pre class=\"c\">static VALUE default_value(VALUE self)\n{\n  xmlAttributePtr node;\n  Data_Get_Struct(self, xmlAttribute, node);\n\n  if(node-&gt;defaultValue) return NOKOGIRI_STR_NEW2(node-&gt;defaultValue);\n  return Qnil;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-enumeration\"> <span class=\"method-callseq\"> enumeration </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>An enumeration of possible values</p> <div class=\"method-source-code\" id=\"enumeration-source\"> <pre class=\"c\">static VALUE enumeration(VALUE self)\n{\n  xmlAttributePtr node;\n  xmlEnumerationPtr enm;\n  VALUE list;\n\n  Data_Get_Struct(self, xmlAttribute, node);\n\n  list = rb_ary_new();\n  enm = node-&gt;tree;\n\n  while(enm) {\n    rb_ary_push(list, NOKOGIRI_STR_NEW2(enm-&gt;name));\n    enm = enm-&gt;next;\n  }\n\n  return list;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inspect\"> <span class=\"method-name\">inspect</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"inspect-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/attribute_decl.rb, line 13\ndef inspect\n  \"#&lt;#{self.class.name}:#{sprintf(\"0x%x\", object_id)} #{to_s.inspect}&gt;\"\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/builder":"<h1 id=\"class-Nokogiri::XML::Builder\" class=\"class\"> class Nokogiri::XML::Builder </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl> <section class=\"description\"> <p><a href=\"../../nokogiri\">Nokogiri</a> builder can be used for building <a href=\"../xml\">XML</a> and HTML documents.</p> <h2 id=\"class-Nokogiri::XML::Builder-label-Synopsis%3A\">Synopsis:</h2> <pre class=\"ruby\">builder = Nokogiri::XML::Builder.new do |xml|\n  xml.root {\n    xml.products {\n      xml.widget {\n        xml.id_ \"10\"\n        xml.name \"Awesome widget\"\n      }\n    }\n  }\nend\nputs builder.to_xml\n</pre> <p>Will output:</p> <pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;root&gt;\n  &lt;products&gt;\n    &lt;widget&gt;\n      &lt;id&gt;10&lt;/id&gt;\n      &lt;name&gt;Awesome widget&lt;/name&gt;\n    &lt;/widget&gt;\n  &lt;/products&gt;\n&lt;/root&gt;</pre> <h3 id=\"class-Nokogiri::XML::Builder-label-Builder+scope\">\n<a href=\"builder\">Builder</a> scope</h3> <p>The builder allows two forms. When the builder is supplied with a block that has a parameter, the outside scope is maintained. This means you can access variables that are outside your builder. If you don't need outside scope, you can use the builder without the “xml” prefix like this:</p> <pre>builder = Nokogiri::XML::Builder.new do\n  root {\n    products {\n      widget {\n        id_ \"10\"\n        name \"Awesome widget\"\n      }\n    }\n  }\nend</pre> <h2 id=\"class-Nokogiri::XML::Builder-label-Special+Tags\">Special Tags</h2> <p>The builder works by taking advantage of method_missing. Unfortunately some methods are defined in ruby that are difficult or dangerous to remove. You may want to create tags with the name “type”, “class”, and “id” for example. In that case, you can use an underscore to disambiguate your tag name from the method call.</p> <p>Here is an example of using the underscore to disambiguate tag names from ruby methods:</p> <pre class=\"ruby\">@objects = [Object.new, Object.new, Object.new]\n\nbuilder = Nokogiri::XML::Builder.new do |xml|\n  xml.root {\n    xml.objects {\n      @objects.each do |o|\n        xml.object {\n          xml.type_   o.type\n          xml.class_  o.class.name\n          xml.id_     o.id\n        }\n      end\n    }\n  }\nend\nputs builder.to_xml\n</pre> <p>The underscore may be used with any tag name, and the last underscore will just be removed. This code will output the following XML:</p> <pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;root&gt;\n  &lt;objects&gt;\n    &lt;object&gt;\n      &lt;type&gt;Object&lt;/type&gt;\n      &lt;class&gt;Object&lt;/class&gt;\n      &lt;id&gt;48390&lt;/id&gt;\n    &lt;/object&gt;\n    &lt;object&gt;\n      &lt;type&gt;Object&lt;/type&gt;\n      &lt;class&gt;Object&lt;/class&gt;\n      &lt;id&gt;48380&lt;/id&gt;\n    &lt;/object&gt;\n    &lt;object&gt;\n      &lt;type&gt;Object&lt;/type&gt;\n      &lt;class&gt;Object&lt;/class&gt;\n      &lt;id&gt;48370&lt;/id&gt;\n    &lt;/object&gt;\n  &lt;/objects&gt;\n&lt;/root&gt;</pre> <h2 id=\"class-Nokogiri::XML::Builder-label-Tag+Attributes\">Tag Attributes</h2> <p>Tag attributes may be supplied as method arguments. Here is our previous example, but using attributes rather than tags:</p> <pre class=\"ruby\">@objects = [Object.new, Object.new, Object.new]\n\nbuilder = Nokogiri::XML::Builder.new do |xml|\n  xml.root {\n    xml.objects {\n      @objects.each do |o|\n        xml.object(:type =&gt; o.type, :class =&gt; o.class, :id =&gt; o.id)\n      end\n    }\n  }\nend\nputs builder.to_xml\n</pre> <h3 id=\"class-Nokogiri::XML::Builder-label-Tag+Attribute+Short+Cuts\">Tag Attribute Short Cuts</h3> <p>A couple attribute short cuts are available when building tags. The short cuts are available by special method calls when building a tag.</p> <p>This example builds an “object” tag with the class attribute “classy” and the id of “thing”:</p> <pre class=\"ruby\">builder = Nokogiri::XML::Builder.new do |xml|\n  xml.root {\n    xml.objects {\n      xml.object.classy.thing!\n    }\n  }\nend\nputs builder.to_xml\n</pre> <p>Which will output:</p> <pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;root&gt;\n  &lt;objects&gt;\n    &lt;object class=\"classy\" id=\"thing\"/&gt;\n  &lt;/objects&gt;\n&lt;/root&gt;</pre> <p>All other options are still supported with this syntax, including blocks and extra tag attributes.</p> <h2 id=\"class-Nokogiri::XML::Builder-label-Namespaces\">Namespaces</h2> <p>Namespaces are added similarly to attributes. <a href=\"builder\">Nokogiri::XML::Builder</a> assumes that when an attribute starts with “xmlns”, it is meant to be a namespace:</p> <pre class=\"ruby\">builder = Nokogiri::XML::Builder.new { |xml|\n  xml.root('xmlns' =&gt; 'default', 'xmlns:foo' =&gt; 'bar') do\n    xml.tenderlove\n  end\n}\nputs builder.to_xml\n</pre> <p>Will output <a href=\"../xml\">XML</a> like this:</p> <pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;root xmlns:foo=\"bar\" xmlns=\"default\"&gt;\n  &lt;tenderlove/&gt;\n&lt;/root&gt;</pre> <h3 id=\"class-Nokogiri::XML::Builder-label-Referencing+declared+namespaces\">Referencing declared namespaces</h3> <p>Tags that reference non-default namespaces (i.e. a tag “foo:bar”) can be built by using the <a href=\"builder#method-i-5B-5D\">#[]</a> method.</p> <p>For example:</p> <pre class=\"ruby\">builder = Nokogiri::XML::Builder.new do |xml|\n  xml.root('xmlns:foo' =&gt; 'bar') {\n    xml.objects {\n      xml['foo'].object.classy.thing!\n    }\n  }\nend\nputs builder.to_xml\n</pre> <p>Will output this XML:</p> <pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;root xmlns:foo=\"bar\"&gt;\n  &lt;objects&gt;\n    &lt;foo:object class=\"classy\" id=\"thing\"/&gt;\n  &lt;/objects&gt;\n&lt;/root&gt;</pre> <p>Note the “foo:object” tag.</p> <h2 id=\"class-Nokogiri::XML::Builder-label-Document+Types\">\n<a href=\"document\">Document</a> Types</h2> <p>To create a document type (DTD), access use the <a href=\"builder#attribute-i-doc\">#doc</a> method to get the current context document. Then call <a href=\"node#method-i-create_internal_subset\">Nokogiri::XML::Node#create_internal_subset</a> to create the <a href=\"dtd\">DTD</a> node.</p> <p>For example, this Ruby:</p> <pre class=\"ruby\">builder = Nokogiri::XML::Builder.new do |xml|\n  xml.doc.create_internal_subset(\n    'html',\n    \"-//W3C//DTD HTML 4.01 Transitional//EN\",\n    \"http://www.w3.org/TR/html4/loose.dtd\"\n  )\n  xml.root do\n    xml.foo\n  end\nend\n\nputs builder.to_xml\n</pre> <p>Will output this xml:</p> <pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;root&gt;\n  &lt;foo/&gt;\n&lt;/root&gt;</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-context\"> <span class=\"method-name\">context</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>A context object for use when the block has no arguments</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-doc\"> <span class=\"method-name\">doc</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>The current <a href=\"document\">Document</a> object being built</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-parent\"> <span class=\"method-name\">parent</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>The parent of the current node being built</p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(options = {}) { |self| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"builder\">Builder</a> object. <code>options</code> are sent to the top level <a href=\"document\">Document</a> that is being built.</p> <p>Building a document with a particular encoding for example:</p> <pre class=\"ruby\">Nokogiri::XML::Builder.new(:encoding =&gt; 'UTF-8') do |xml|\n  ...\nend\n</pre> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/builder.rb, line 266\ndef initialize options = {}, root = nil, &amp;block\n\n  if root\n    @doc    = root.document\n    @parent = root\n  else\n    namespace     = self.class.name.split('::')\n    namespace[-1] = 'Document'\n    @doc          = eval(namespace.join('::')).new\n    @parent       = @doc\n  end\n\n  @context  = nil\n  @arity    = nil\n  @ns       = nil\n\n  options.each do |k,v|\n    @doc.send(:\"#{k}=\", v)\n  end\n\n  return unless block_given?\n\n  @arity = block.arity\n  if @arity &lt;= 0\n    @context = eval('self', block.binding)\n    instance_eval(&amp;block)\n  else\n    yield self\n  end\n\n  @parent = @doc\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-with\"> <span class=\"method-name\">with</span><span class=\"method-args\">(root, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a builder with an existing root object. This is for use when you have an existing document that you would like to augment with builder methods. The builder context created will start with the given <code>root</code> node.</p> <p>For example:</p> <pre class=\"ruby\">doc = Nokogiri::XML(open('somedoc.xml'))\nNokogiri::XML::Builder.with(doc.at('some_tag')) do |xml|\n  # ... Use normal builder methods here ...\n  xml.awesome # add the \"awesome\" tag below \"some_tag\"\nend\n</pre> <div class=\"method-source-code\" id=\"with-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/builder.rb, line 253\ndef self.with root, &amp;block\n  new({}, root, &amp;block)\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3C-3C\"> <span class=\"method-name\">&lt;&lt;</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Append the given raw <a href=\"../xml\">XML</a> <code>string</code> to the document</p> <div class=\"method-source-code\" id=\"3C-3C-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/builder.rb, line 351\ndef &lt;&lt; string\n  @doc.fragment(string).children.each { |x| insert(x) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D\"> <span class=\"method-name\">[]</span><span class=\"method-args\">(ns)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Build a tag that is associated with namespace <code>ns</code>. Raises an ArgumentError if <code>ns</code> has not been defined higher in the tree.</p> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/builder.rb, line 320\ndef [] ns\n  if @parent != @doc\n    @ns = @parent.namespace_definitions.find { |x| x.prefix == ns.to_s }\n  end\n  return self if @ns\n\n  @parent.ancestors.each do |a|\n    next if a == doc\n    @ns = a.namespace_definitions.find { |x| x.prefix == ns.to_s }\n    return self if @ns\n  end\n\n  @ns = { :pending =&gt; ns.to_s }\n  return self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cdata\"> <span class=\"method-name\">cdata</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a <a href=\"cdata\">CDATA</a> <a href=\"node\">Node</a> with content of <code>string</code></p> <div class=\"method-source-code\" id=\"cdata-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/builder.rb, line 307\ndef cdata string\n  insert doc.create_cdata(string)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-comment\"> <span class=\"method-name\">comment</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a <a href=\"comment\">Comment</a> <a href=\"node\">Node</a> with content of <code>string</code></p> <div class=\"method-source-code\" id=\"comment-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/builder.rb, line 313\ndef comment string\n  insert doc.create_comment(string)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-text\"> <span class=\"method-name\">text</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a <a href=\"text\">Text</a> <a href=\"node\">Node</a> with content of <code>string</code></p> <div class=\"method-source-code\" id=\"text-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/builder.rb, line 301\ndef text string\n  insert @doc.create_text_node(string)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_xml\"> <span class=\"method-name\">to_xml</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert this <a href=\"builder\">Builder</a> object to <a href=\"../xml\">XML</a></p> <div class=\"method-source-code\" id=\"to_xml-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/builder.rb, line 338\ndef to_xml(*args)\n  if Nokogiri.jruby?\n    options = args.first.is_a?(Hash) ? args.shift : {}\n    if !options[:save_with]\n      options[:save_with] = Node::SaveOptions::AS_BUILDER\n    end\n    args.insert(0, options)\n  end\n  @doc.to_xml(*args)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/cdata":"<h1 id=\"class-Nokogiri::XML::CDATA\" class=\"class\"> class Nokogiri::XML::CDATA </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"text\">Nokogiri::XML::Text</a></dd>\n</dl> <section class=\"description\"> <p>CData represents a CData node in an xml document.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-callseq\"> new(document, content) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"cdata\">CDATA</a> element on the <code>document</code> with <code>content</code></p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"c\">static VALUE new(int argc, VALUE *argv, VALUE klass)\n{\n  xmlDocPtr xml_doc;\n  xmlNodePtr node;\n  VALUE doc;\n  VALUE content;\n  VALUE rest;\n  VALUE rb_node;\n\n  rb_scan_args(argc, argv, \"2*\", &amp;doc, &amp;content, &amp;rest);\n\n  Data_Get_Struct(doc, xmlDoc, xml_doc);\n\n  node = xmlNewCDataBlock(\n      xml_doc-&gt;doc,\n      NIL_P(content) ? NULL : (const xmlChar *)StringValuePtr(content),\n      NIL_P(content) ? 0 : (int)RSTRING_LEN(content)\n  );\n\n  nokogiri_root_node(node);\n\n  rb_node = Nokogiri_wrap_xml_node(klass, node);\n  rb_obj_call_init(rb_node, argc, argv);\n\n  if(rb_block_given_p()) rb_yield(rb_node);\n\n  return rb_node;\n}</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-name\"> <span class=\"method-name\">name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the name of this <a href=\"cdata\">CDATA</a> node</p> <div class=\"method-source-code\" id=\"name-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/cdata.rb, line 6\ndef name\n  '#cdata-section'\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/comment":"<h1 id=\"class-Nokogiri::XML::Comment\" class=\"class\"> class Nokogiri::XML::Comment </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"characterdata\">Nokogiri::XML::CharacterData</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"comment\">Comment</a> represents a comment node in an xml document.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-callseq\"> new(document, content) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"comment\">Comment</a> element on the <code>document</code> with <code>content</code></p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"c\">static VALUE new(int argc, VALUE *argv, VALUE klass)\n{\n  xmlDocPtr xml_doc;\n  xmlNodePtr node;\n  VALUE document;\n  VALUE content;\n  VALUE rest;\n  VALUE rb_node;\n\n  rb_scan_args(argc, argv, \"2*\", &amp;document, &amp;content, &amp;rest);\n\n  Data_Get_Struct(document, xmlDoc, xml_doc);\n\n  node = xmlNewDocComment(\n      xml_doc,\n      (const xmlChar *)StringValuePtr(content)\n  );\n\n  rb_node = Nokogiri_wrap_xml_node(klass, node);\n  rb_obj_call_init(rb_node, argc, argv);\n\n  nokogiri_root_node(node);\n\n  if(rb_block_given_p()) rb_yield(rb_node);\n\n  return rb_node;\n}</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/document":"<h1 id=\"class-Nokogiri::XML::Document\" class=\"class\"> class Nokogiri::XML::Document </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"node\">Nokogiri::XML::Node</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"document\">Nokogiri::XML::Document</a> wraps an xml document.</p> <p><a href=\"document\">Nokogiri::XML::Document</a> is the main entry point for dealing with <a href=\"../xml\">XML</a> documents. The <a href=\"document\">Document</a> is created by parsing an <a href=\"../xml\">XML</a> document. See <a href=\"document#method-c-parse\">::parse</a> for more information on parsing.</p> <p>For searching a <a href=\"document\">Document</a>, see <a href=\"node#method-i-css\">Nokogiri::XML::Node#css</a> and <a href=\"node#method-i-xpath\">Nokogiri::XML::Node#xpath</a></p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"NCNAME_CHAR\">NCNAME_CHAR </dt>\n\n<dt id=\"NCNAME_RE\">NCNAME_RE </dt>\n\n<dt id=\"NCNAME_START_CHAR\">NCNAME_START_CHAR </dt>\n<dd>\n<p>I'm ignoring unicode characters here. See <a href=\"http://www.w3.org/TR/REC-xml-names/#ns-decl\">www.w3.org/TR/REC-xml-names/#ns-decl</a> for more details.</p> </dd>\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-errors\"> <span class=\"method-name\">errors</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>A list of <a href=\"syntaxerror\">Nokogiri::XML::SyntaxError</a> found when parsing a document</p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-callseq\"> new(version = default) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new document with <code>version</code> (defaults to “1.0”)</p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"c\">static VALUE new(int argc, VALUE *argv, VALUE klass)\n{\n  xmlDocPtr doc;\n  VALUE version, rest, rb_doc ;\n\n  rb_scan_args(argc, argv, \"0*\", &amp;rest);\n  version = rb_ary_entry(rest, (long)0);\n  if (NIL_P(version)) version = rb_str_new2(\"1.0\");\n\n  doc = xmlNewDoc((xmlChar *)StringValuePtr(version));\n  rb_doc = Nokogiri_wrap_xml_document(klass, doc);\n  rb_obj_call_init(rb_doc, argc, argv);\n  return rb_doc ;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-parse\"> <span class=\"method-name\">parse</span><span class=\"method-args\">(string_or_io, url = nil, encoding = nil, options = ParseOptions::DEFAULT_XML) { |options| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse an <a href=\"../xml\">XML</a> file.</p> <p><code>string_or_io</code> may be a String, or any object that responds to <em>read</em> and <em>close</em> such as an IO, or StringIO.</p> <p><code>url</code> (optional) is the URI where this document is located.</p> <p><code>encoding</code> (optional) is the encoding that should be used when processing the document.</p> <p><code>options</code> (optional) is a configuration object that sets options during parsing, such as Nokogiri::XML::ParseOptions::RECOVER. See the <a href=\"parseoptions\">Nokogiri::XML::ParseOptions</a> for more information.</p> <p><code>block</code> (optional) is passed a configuration object on which parse options may be set.</p> <p>When parsing untrusted documents, it's recommended that the <code>nonet</code> option be used, as shown in this example code:</p> <pre class=\"ruby\">Nokogiri::XML::Document.parse(xml_string) { |config| config.nonet }\n</pre> <p><a href=\"../../nokogiri\">Nokogiri</a>.XML() is a convenience method which will call this method.</p> <div class=\"method-source-code\" id=\"parse-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document.rb, line 43\ndef self.parse string_or_io, url = nil, encoding = nil, options = ParseOptions::DEFAULT_XML, &amp;block\n  options = Nokogiri::XML::ParseOptions.new(options) if Fixnum === options\n  # Give the options to the user\n  yield options if block_given?\n\n  return new if !options.strict? &amp;&amp; empty_doc?(string_or_io)\n\n  doc = if string_or_io.respond_to?(:read)\n    url ||= string_or_io.respond_to?(:path) ? string_or_io.path : nil\n    read_io(string_or_io, url, encoding, options.to_i)\n  else\n    # read_memory pukes on empty docs\n    read_memory(string_or_io, url, encoding, options.to_i)\n  end\n\n  # do xinclude processing\n  doc.do_xinclude(options) if options.xinclude?\n\n  return doc\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-read_io\"> <span class=\"method-callseq\"> read_io(io, url, encoding, options) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new document from an IO object</p> <div class=\"method-source-code\" id=\"read_io-source\"> <pre class=\"c\">static VALUE read_io( VALUE klass,\n                      VALUE io,\n                      VALUE url,\n                      VALUE encoding,\n                      VALUE options )\n{\n  const char * c_url    = NIL_P(url)      ? NULL : StringValuePtr(url);\n  const char * c_enc    = NIL_P(encoding) ? NULL : StringValuePtr(encoding);\n  VALUE error_list      = rb_ary_new();\n  VALUE document;\n  xmlDocPtr doc;\n\n  xmlResetLastError();\n  xmlSetStructuredErrorFunc((void *)error_list, Nokogiri_error_array_pusher);\n\n  doc = xmlReadIO(\n      (xmlInputReadCallback)io_read_callback,\n      (xmlInputCloseCallback)io_close_callback,\n      (void *)io,\n      c_url,\n      c_enc,\n      (int)NUM2INT(options)\n  );\n  xmlSetStructuredErrorFunc(NULL, NULL);\n\n  if(doc == NULL) {\n    xmlErrorPtr error;\n\n    xmlFreeDoc(doc);\n\n    error = xmlGetLastError();\n    if(error)\n      rb_exc_raise(Nokogiri_wrap_xml_syntax_error(error));\n    else\n      rb_raise(rb_eRuntimeError, \"Could not parse document\");\n\n    return Qnil;\n  }\n\n  document = Nokogiri_wrap_xml_document(klass, doc);\n  rb_iv_set(document, \"@errors\", error_list);\n  return document;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-read_memory\"> <span class=\"method-callseq\"> read_memory(string, url, encoding, options) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new document from a String</p> <div class=\"method-source-code\" id=\"read_memory-source\"> <pre class=\"c\">static VALUE read_memory( VALUE klass,\n                          VALUE string,\n                          VALUE url,\n                          VALUE encoding,\n                          VALUE options )\n{\n  const char * c_buffer = StringValuePtr(string);\n  const char * c_url    = NIL_P(url)      ? NULL : StringValuePtr(url);\n  const char * c_enc    = NIL_P(encoding) ? NULL : StringValuePtr(encoding);\n  int len               = (int)RSTRING_LEN(string);\n  VALUE error_list      = rb_ary_new();\n  VALUE document;\n  xmlDocPtr doc;\n\n  xmlResetLastError();\n  xmlSetStructuredErrorFunc((void *)error_list, Nokogiri_error_array_pusher);\n  doc = xmlReadMemory(c_buffer, len, c_url, c_enc, (int)NUM2INT(options));\n  xmlSetStructuredErrorFunc(NULL, NULL);\n\n  if(doc == NULL) {\n    xmlErrorPtr error;\n\n    xmlFreeDoc(doc);\n\n    error = xmlGetLastError();\n    if(error)\n      rb_exc_raise(Nokogiri_wrap_xml_syntax_error(error));\n    else\n      rb_raise(rb_eRuntimeError, \"Could not parse document\");\n\n    return Qnil;\n  }\n\n  document = Nokogiri_wrap_xml_document(klass, doc);\n  rb_iv_set(document, \"@errors\", error_list);\n  return document;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-wrap\"> <span class=\"method-name\">wrap</span><span class=\"method-args\">(document)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><code>JRuby</code> Wraps Java's org.w3c.dom.document and returns <a href=\"document\">Nokogiri::XML::Document</a></p> <div class=\"method-source-code\" id=\"wrap-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document.rb, line 250\ndef self.wrap document\n  raise \"JRuby only method\" unless Nokogiri.jruby?\n  return wrapJavaDocument(document)\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-3C-3C\"> <span class=\"method-name\">&lt;&lt;</span><span class=\"method-args\">(node_or_tags)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"document#method-i-add_child\">add_child</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_child\"> <span class=\"method-name\">add_child</span><span class=\"method-args\">(node_or_tags)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"node#method-i-add_child\">Nokogiri::XML::Node#add_child</a> </div> <div class=\"method-source-code\" id=\"add_child-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document.rb, line 235\ndef add_child node_or_tags\n  raise \"Document already has a root node\" if root &amp;&amp; root.name != 'nokogiri_text_wrapper'\n  node_or_tags = coerce(node_or_tags)\n  if node_or_tags.is_a?(XML::NodeSet)\n    raise \"Document cannot have multiple root nodes\" if node_or_tags.size &gt; 1\n    super(node_or_tags.first)\n  else\n    super\n  end\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"document#method-i-3C-3C\">&lt;&lt;</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-canonicalize\"> <span class=\"method-callseq\"> canonicalize(mode=XML_C14N_1_0,inclusive_namespaces=nil,with_comments=false) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-heading\"> <span class=\"method-callseq\"> canonicalize { |obj, parent| ... } </span> </div> <div class=\"method-description\"> <p>Canonicalize a document and return the results. Takes an optional block that takes two parameters: the <code>obj</code> and that node's <code>parent</code>.</p> <p>The <code>obj</code> will be either a <a href=\"node\">Nokogiri::XML::Node</a>, or a <a href=\"namespace\">Nokogiri::XML::Namespace</a> The block must return a non-nil, non-false value if the <code>obj</code> passed in should be included in the canonicalized document.</p> <div class=\"method-source-code\" id=\"canonicalize-source\"> <pre class=\"c\">static VALUE canonicalize(int argc, VALUE* argv, VALUE self)\n{\n  VALUE mode;\n  VALUE incl_ns;\n  VALUE with_comments;\n  xmlChar **ns;\n  long ns_len, i;\n\n  xmlDocPtr doc;\n  xmlOutputBufferPtr buf;\n  xmlC14NIsVisibleCallback cb = NULL;\n  void * ctx = NULL;\n\n  VALUE rb_cStringIO;\n  VALUE io;\n\n  rb_scan_args(argc, argv, \"03\", &amp;mode, &amp;incl_ns, &amp;with_comments);\n\n  Data_Get_Struct(self, xmlDoc, doc);\n\n  rb_cStringIO = rb_const_get_at(rb_cObject, rb_intern(\"StringIO\"));\n  io           = rb_class_new_instance(0, 0, rb_cStringIO);\n  buf          = xmlAllocOutputBuffer(NULL);\n\n  buf-&gt;writecallback = (xmlOutputWriteCallback)io_write_callback;\n  buf-&gt;closecallback = (xmlOutputCloseCallback)io_close_callback;\n  buf-&gt;context       = (void *)io;\n\n  if(rb_block_given_p()) {\n    cb = block_caller;\n    ctx = (void *)rb_block_proc();\n  }\n\n  if(NIL_P(incl_ns)){\n    ns = NULL;\n  }\n  else{\n    Check_Type(incl_ns, T_ARRAY);\n    ns_len = RARRAY_LEN(incl_ns);\n    ns = calloc((size_t)ns_len+1, sizeof(xmlChar *));\n    for (i = 0 ; i &lt; ns_len ; i++) {\n      VALUE entry = rb_ary_entry(incl_ns, i);\n      const char * ptr = StringValuePtr(entry);\n      ns[i] = (xmlChar*) ptr;\n    }\n  }\n\n\n  xmlC14NExecute(doc, cb, ctx, \n    (int)      (NIL_P(mode)        ? 0 : NUM2INT(mode)), \n    ns,\n    (int)      RTEST(with_comments),\n    buf);\n\n  xmlOutputBufferClose(buf);\n\n  return rb_funcall(io, rb_intern(\"string\"), 0);\n}</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-clone\"> <span class=\"method-name\">clone</span><span class=\"method-args\">(p1 = v1)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"document#method-i-dup\">dup</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-collect_namespaces\"> <span class=\"method-name\">collect_namespaces</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Recursively get all namespaces from this node and its subtree and return them as a hash.</p> <p>For example, given this document:</p> <pre>&lt;root xmlns:foo=\"bar\"&gt;\n  &lt;bar xmlns:hello=\"world\" /&gt;\n&lt;/root&gt;</pre> <p>This method will return:</p> <pre class=\"ruby\">{ 'xmlns:foo' =&gt; 'bar', 'xmlns:hello' =&gt; 'world' }\n</pre> <p>WARNING: this method will clobber duplicate names in the keys. For example, given this document:</p> <pre>&lt;root xmlns:foo=\"bar\"&gt;\n  &lt;bar xmlns:foo=\"baz\" /&gt;\n&lt;/root&gt;</pre> <p>The hash returned will look like this: { 'xmlns:foo' =&gt; 'bar' }</p> <p>Non-prefixed default namespaces (as in “xmlns=”) are not included in the hash.</p> <p>Note that this method does an xpath lookup for nodes with namespaces, and as a result the order may be dependent on the implementation of the underlying <a href=\"../xml\">XML</a> library.</p> <div class=\"method-source-code\" id=\"collect_namespaces-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document.rb, line 160\ndef collect_namespaces\n  xpath(\"//namespace::*\").inject({}) do |hash, ns|\n    hash[[\"xmlns\",ns.prefix].compact.join(\":\")] = ns.href if ns.prefix != \"xml\"\n    hash\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create_cdata\"> <span class=\"method-name\">create_cdata</span><span class=\"method-args\">(string, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a <a href=\"cdata\">CDATA</a> <a href=\"node\">Node</a> containing <code>string</code></p> <div class=\"method-source-code\" id=\"create_cdata-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document.rb, line 111\ndef create_cdata string, &amp;block\n  Nokogiri::XML::CDATA.new self, string.to_s, &amp;block\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create_comment\"> <span class=\"method-name\">create_comment</span><span class=\"method-args\">(string, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a <a href=\"comment\">Comment</a> <a href=\"node\">Node</a> containing <code>string</code></p> <div class=\"method-source-code\" id=\"create_comment-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document.rb, line 116\ndef create_comment string, &amp;block\n  Nokogiri::XML::Comment.new self, string.to_s, &amp;block\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create_element\"> <span class=\"method-name\">create_element</span><span class=\"method-args\">(name, *args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create an element with <code>name</code>, and optionally setting the content and attributes.</p> <pre class=\"ruby\">doc.create_element \"div\" # &lt;div&gt;&lt;/div&gt;\ndoc.create_element \"div\", :class =&gt; \"container\" # &lt;div class='container'&gt;&lt;/div&gt;\ndoc.create_element \"div\", \"contents\" # &lt;div&gt;contents&lt;/div&gt;\ndoc.create_element \"div\", \"contents\", :class =&gt; \"container\" # &lt;div class='container'&gt;contents&lt;/div&gt;\ndoc.create_element \"div\" { |node| node['class'] = \"container\" } # &lt;div class='container'&gt;&lt;/div&gt;\n</pre> <div class=\"method-source-code\" id=\"create_element-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document.rb, line 81\ndef create_element name, *args, &amp;block\n  elm = Nokogiri::XML::Element.new(name, self, &amp;block)\n  args.each do |arg|\n    case arg\n    when Hash\n      arg.each { |k,v|\n        key = k.to_s\n        if key =~ NCNAME_RE\n          ns_name = key.split(\":\", 2)[1]\n          elm.add_namespace_definition ns_name, v\n        else\n          elm[k.to_s] = v.to_s\n        end\n      }\n    else\n      elm.content = arg\n    end\n  end\n  if ns = elm.namespace_definitions.find { |n| n.prefix.nil? or n.prefix == '' }\n    elm.namespace = ns\n  end\n  elm\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create_entity\"> <span class=\"method-callseq\"> create_entity(name, type, external_id, system_id, content) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new entity named <code>name</code>.</p> <p><code>type</code> is an integer representing the type of entity to be created, and it defaults to Nokogiri::XML::EntityDecl::INTERNAL_GENERAL. See the constants on <a href=\"entitydecl\">Nokogiri::XML::EntityDecl</a> for more information.</p> <p><code>external_id</code>, <code>system_id</code>, and <code>content</code> set the External ID, System ID, and content respectively. All of these parameters are optional.</p> <div class=\"method-source-code\" id=\"create_entity-source\"> <pre class=\"c\">static VALUE create_entity(int argc, VALUE *argv, VALUE self)\n{\n  VALUE name;\n  VALUE type;\n  VALUE external_id;\n  VALUE system_id;\n  VALUE content;\n  xmlEntityPtr ptr;\n  xmlDocPtr doc ;\n\n  Data_Get_Struct(self, xmlDoc, doc);\n\n  rb_scan_args(argc, argv, \"14\", &amp;name, &amp;type, &amp;external_id, &amp;system_id,\n      &amp;content);\n\n  xmlResetLastError();\n  ptr = xmlAddDocEntity(\n      doc,\n      (xmlChar *)(NIL_P(name)        ? NULL                        : StringValuePtr(name)),\n      (int)      (NIL_P(type)        ? XML_INTERNAL_GENERAL_ENTITY : NUM2INT(type)),\n      (xmlChar *)(NIL_P(external_id) ? NULL                        : StringValuePtr(external_id)),\n      (xmlChar *)(NIL_P(system_id)   ? NULL                        : StringValuePtr(system_id)),\n      (xmlChar *)(NIL_P(content)     ? NULL                        : StringValuePtr(content))\n    );\n\n  if(NULL == ptr) {\n    xmlErrorPtr error = xmlGetLastError();\n    if(error)\n      rb_exc_raise(Nokogiri_wrap_xml_syntax_error(error));\n    else\n      rb_raise(rb_eRuntimeError, \"Could not create entity\");\n\n    return Qnil;\n  }\n\n  return Nokogiri_wrap_xml_node(cNokogiriXmlEntityDecl, (xmlNodePtr)ptr);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create_text_node\"> <span class=\"method-name\">create_text_node</span><span class=\"method-args\">(string, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a <a href=\"text\">Text</a> <a href=\"node\">Node</a> with <code>string</code></p> <div class=\"method-source-code\" id=\"create_text_node-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document.rb, line 106\ndef create_text_node string, &amp;block\n  Nokogiri::XML::Text.new string.to_s, self, &amp;block\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-decorate\"> <span class=\"method-name\">decorate</span><span class=\"method-args\">(node)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Apply any decorators to <code>node</code></p> <div class=\"method-source-code\" id=\"decorate-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document.rb, line 208\ndef decorate node\n  return unless @decorators\n  @decorators.each { |klass,list|\n    next unless node.is_a?(klass)\n    list.each { |moodule| node.extend(moodule) }\n  }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-decorators\"> <span class=\"method-name\">decorators</span><span class=\"method-args\">(key)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the list of decorators given <code>key</code></p> <div class=\"method-source-code\" id=\"decorators-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document.rb, line 168\ndef decorators key\n  @decorators ||= Hash.new\n  @decorators[key] ||= []\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-document\"> <span class=\"method-name\">document</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>A reference to <code>self</code></p> <div class=\"method-source-code\" id=\"document-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document.rb, line 126\ndef document\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-dup\"> <span class=\"method-callseq\"> dup </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Copy this <a href=\"document\">Document</a>. An optional depth may be passed in, but it defaults to a deep copy. 0 is a shallow copy, 1 is a deep copy.</p> <div class=\"method-source-code\" id=\"dup-source\"> <pre class=\"c\">static VALUE duplicate_node(int argc, VALUE *argv, VALUE self)\n{\n  xmlDocPtr doc, dup;\n  VALUE level;\n\n  if(rb_scan_args(argc, argv, \"01\", &amp;level) == 0)\n    level = INT2NUM((long)1);\n\n  Data_Get_Struct(self, xmlDoc, doc);\n\n  dup = xmlCopyDoc(doc, (int)NUM2INT(level));\n  if(dup == NULL) return Qnil;\n\n  dup-&gt;type = doc-&gt;type;\n  return Nokogiri_wrap_xml_document(rb_obj_class(self), dup);\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"document#method-i-clone\">clone</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-encoding\"> <span class=\"method-callseq\"> encoding </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the encoding for this <a href=\"document\">Document</a></p> <div class=\"method-source-code\" id=\"encoding-source\"> <pre class=\"c\">static VALUE encoding(VALUE self)\n{\n  xmlDocPtr doc;\n  Data_Get_Struct(self, xmlDoc, doc);\n\n  if(!doc-&gt;encoding) return Qnil;\n  return NOKOGIRI_STR_NEW2(doc-&gt;encoding);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-encoding-3D\"> <span class=\"method-callseq\"> encoding= encoding </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the encoding string for this <a href=\"document\">Document</a></p> <div class=\"method-source-code\" id=\"encoding-3D-source\"> <pre class=\"c\">static VALUE set_encoding(VALUE self, VALUE encoding)\n{\n  xmlDocPtr doc;\n  Data_Get_Struct(self, xmlDoc, doc);\n\n  if (doc-&gt;encoding)\n      free((char *) doc-&gt;encoding); /* this may produce a gcc cast warning */\n\n  doc-&gt;encoding = xmlStrdup((xmlChar *)StringValuePtr(encoding));\n\n  return encoding;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fragment\"> <span class=\"method-name\">fragment</span><span class=\"method-args\">(tags = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a <a href=\"documentfragment\">Nokogiri::XML::DocumentFragment</a> from <code>tags</code> Returns an empty fragment if <code>tags</code> is nil.</p> <div class=\"method-source-code\" id=\"fragment-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document.rb, line 227\ndef fragment tags = nil\n  DocumentFragment.new(self, tags, self.root)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-name\"> <span class=\"method-name\">name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The name of this document. Always returns “document”</p> <div class=\"method-source-code\" id=\"name-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document.rb, line 121\ndef name\n  'document'\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-namespaces\"> <span class=\"method-name\">namespaces</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the hash of namespaces on the root <a href=\"node\">Nokogiri::XML::Node</a></p> <div class=\"method-source-code\" id=\"namespaces-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document.rb, line 220\ndef namespaces\n  root ? root.namespaces : {}\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_namespaces-21\"> <span class=\"method-callseq\"> remove_namespaces! </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Remove all namespaces from all nodes in the document.</p> <p>This could be useful for developers who either don't understand namespaces or don't care about them.</p> <p>The following example shows a use case, and you can decide for yourself whether this is a good thing or not:</p> <pre class=\"ruby\">doc = Nokogiri::XML &lt;&lt;-EOXML\n   &lt;root&gt;\n     &lt;car xmlns:part=\"http://general-motors.com/\"&gt;\n       &lt;part:tire&gt;Michelin Model XGV&lt;/part:tire&gt;\n     &lt;/car&gt;\n     &lt;bicycle xmlns:part=\"http://schwinn.com/\"&gt;\n       &lt;part:tire&gt;I'm a bicycle tire!&lt;/part:tire&gt;\n     &lt;/bicycle&gt;\n   &lt;/root&gt;\n   EOXML\n\ndoc.xpath(\"//tire\").to_s # =&gt; \"\"\ndoc.xpath(\"//part:tire\", \"part\" =&gt; \"http://general-motors.com/\").to_s # =&gt; \"&lt;part:tire&gt;Michelin Model XGV&lt;/part:tire&gt;\"\ndoc.xpath(\"//part:tire\", \"part\" =&gt; \"http://schwinn.com/\").to_s # =&gt; \"&lt;part:tire&gt;I'm a bicycle tire!&lt;/part:tire&gt;\"\n\ndoc.remove_namespaces!\n\ndoc.xpath(\"//tire\").to_s # =&gt; \"&lt;tire&gt;Michelin Model XGV&lt;/tire&gt;&lt;tire&gt;I'm a bicycle tire!&lt;/tire&gt;\"\ndoc.xpath(\"//part:tire\", \"part\" =&gt; \"http://general-motors.com/\").to_s # =&gt; \"\"\ndoc.xpath(\"//part:tire\", \"part\" =&gt; \"http://schwinn.com/\").to_s # =&gt; \"\"\n</pre> <p>For more information on why this probably is <strong>not</strong> a good thing in general, please direct your browser to <a href=\"http://tenderlovemaking.com/2009/04/23/namespaces-in-xml.html\">tenderlovemaking.com/2009/04/23/namespaces-in-xml.html</a></p> <div class=\"method-source-code\" id=\"remove_namespaces-21-source\"> <pre class=\"c\">VALUE remove_namespaces_bang(VALUE self)\n{\n  xmlDocPtr doc ;\n  Data_Get_Struct(self, xmlDoc, doc);\n\n  recursively_remove_namespaces_from_node((xmlNodePtr)doc);\n  return self;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-root\"> <span class=\"method-callseq\"> root </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the root node for this document.</p> <div class=\"method-source-code\" id=\"root-source\"> <pre class=\"c\">static VALUE root(VALUE self)\n{\n  xmlDocPtr doc;\n  xmlNodePtr root;\n\n  Data_Get_Struct(self, xmlDoc, doc);\n\n  root = xmlDocGetRootElement(doc);\n\n  if(!root) return Qnil;\n  return Nokogiri_wrap_xml_node(Qnil, root) ;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-root-3D\"> <span class=\"method-callseq\"> root= </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the root element on this document</p> <div class=\"method-source-code\" id=\"root-3D-source\"> <pre class=\"c\">static VALUE set_root(VALUE self, VALUE root)\n{\n  xmlDocPtr doc;\n  xmlNodePtr new_root;\n  xmlNodePtr old_root;\n\n  Data_Get_Struct(self, xmlDoc, doc);\n\n  old_root = NULL;\n\n  if(NIL_P(root)) {\n    old_root = xmlDocGetRootElement(doc);\n\n    if(old_root) {\n      xmlUnlinkNode(old_root);\n      nokogiri_root_node(old_root);\n    }\n\n    return root;\n  }\n\n  Data_Get_Struct(root, xmlNode, new_root);\n\n\n  /* If the new root's document is not the same as the current document,\n   * then we need to dup the node in to this document. */\n  if(new_root-&gt;doc != doc) {\n    old_root = xmlDocGetRootElement(doc);\n    if (!(new_root = xmlDocCopyNode(new_root, doc, 1))) {\n      rb_raise(rb_eRuntimeError, \"Could not reparent node (xmlDocCopyNode)\");\n    }\n  }\n\n  xmlDocSetRootElement(doc, new_root);\n  if(old_root) nokogiri_root_node(old_root);\n  return root;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-slop-21\"> <span class=\"method-name\">slop!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Explore a document with shortcut methods. See Nokogiri::Slop for details.</p> <p>Note that any nodes that have been instantiated before <a href=\"document#method-i-slop-21\">slop!</a> is called will not be decorated with sloppy behavior. So, if you're in irb, the preferred idiom is:</p> <pre>irb&gt; doc = Nokogiri::Slop my_markup</pre> <p>and not</p> <pre>irb&gt; doc = Nokogiri::HTML my_markup\n... followed by irb's implicit inspect (and therefore instantiation of every node) ...\nirb&gt; doc.slop!\n... which does absolutely nothing.</pre> <div class=\"method-source-code\" id=\"slop-21-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document.rb, line 197\ndef slop!\n  unless decorators(XML::Node).include? Nokogiri::Decorators::Slop\n    decorators(XML::Node) &lt;&lt; Nokogiri::Decorators::Slop\n    decorate!\n  end\n\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_java\"> <span class=\"method-name\">to_java</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p><code>JRuby</code> Returns Java's org.w3c.dom.document of this <a href=\"document\">Document</a>.</p> <div class=\"method-source-code\" id=\"to_java-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document.rb, line 258\ndef to_java\n  raise \"JRuby only method\" unless Nokogiri.jruby?\n  return toJavaDocument()\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-url\"> <span class=\"method-callseq\"> url </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the url name for this document.</p> <div class=\"method-source-code\" id=\"url-source\"> <pre class=\"c\">static VALUE url(VALUE self)\n{\n  xmlDocPtr doc;\n  Data_Get_Struct(self, xmlDoc, doc);\n\n  if(doc-&gt;URL) return NOKOGIRI_STR_NEW2(doc-&gt;URL);\n\n  return Qnil;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validate\"> <span class=\"method-name\">validate</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Validate this <a href=\"document\">Document</a> against it's <a href=\"dtd\">DTD</a>. Returns a list of errors on the document or <code>nil</code> when there is no <a href=\"dtd\">DTD</a>.</p> <div class=\"method-source-code\" id=\"validate-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document.rb, line 176\ndef validate\n  return nil unless internal_subset\n  internal_subset.validate self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-version\"> <span class=\"method-callseq\"> version </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the <a href=\"../xml\">XML</a> version for this <a href=\"document\">Document</a></p> <div class=\"method-source-code\" id=\"version-source\"> <pre class=\"c\">static VALUE version(VALUE self)\n{\n  xmlDocPtr doc;\n  Data_Get_Struct(self, xmlDoc, doc);\n\n  if(!doc-&gt;version) return Qnil;\n  return NOKOGIRI_STR_NEW2(doc-&gt;version);\n}</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/documentfragment":"<h1 id=\"class-Nokogiri::XML::DocumentFragment\" class=\"class\"> class Nokogiri::XML::DocumentFragment </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"node\">Nokogiri::XML::Node</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"documentfragment\">DocumentFragment</a> represents a <a href=\"documentfragment\">DocumentFragment</a> node in an xml document.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-callseq\"> new(document) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"documentfragment\">DocumentFragment</a> element on the <code>document</code></p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"c\">static VALUE new(int argc, VALUE *argv, VALUE klass)\n{\n  xmlDocPtr xml_doc;\n  xmlNodePtr node;\n  VALUE document;\n  VALUE rest;\n  VALUE rb_node;\n\n  rb_scan_args(argc, argv, \"1*\", &amp;document, &amp;rest);\n\n  Data_Get_Struct(document, xmlDoc, xml_doc);\n\n  node = xmlNewDocFragment(xml_doc-&gt;doc);\n\n  nokogiri_root_node(node);\n\n  rb_node = Nokogiri_wrap_xml_node(klass, node);\n  rb_obj_call_init(rb_node, argc, argv);\n\n  if(rb_block_given_p()) rb_yield(rb_node);\n\n  return rb_node;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(document, tags = nil, ctx = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"documentfragment\">DocumentFragment</a> from <code>tags</code>.</p> <p>If <code>ctx</code> is present, it is used as a context node for the subtree created, e.g., namespaces will be resolved relative to <code>ctx</code>.</p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document_fragment.rb, line 10\ndef initialize document, tags = nil, ctx = nil\n  return self unless tags\n\n  children = if ctx\n               # Fix for issue#490\n               if Nokogiri.jruby?\n                 # fix for issue #770\n                 ctx.parse(\"&lt;root #{namespace_declarations(ctx)}&gt;#{tags}&lt;/root&gt;\").children\n               else\n                 ctx.parse(tags)\n               end\n             else\n               XML::Document.parse(\"&lt;root&gt;#{tags}&lt;/root&gt;\")                         .xpath(\"/root/node()\")\n             end\n  children.each { |child| child.parent = self }\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-css\"> <span class=\"method-name\">css</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Search this fragment. See <a href=\"node#method-i-css\">Nokogiri::XML::Node#css</a></p> <div class=\"method-source-code\" id=\"css-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document_fragment.rb, line 77\ndef css *args\n  if children.any?\n    children.css(*args)\n  else\n    NodeSet.new(document)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-name\"> <span class=\"method-name\">name</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>return the name for <a href=\"documentfragment\">DocumentFragment</a></p> <div class=\"method-source-code\" id=\"name-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document_fragment.rb, line 30\ndef name\n  '#document-fragment'\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse\"> <span class=\"method-name\">parse</span><span class=\"method-args\">(tags)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a <a href=\"documentfragment\">Nokogiri::XML::DocumentFragment</a> from <code>tags</code></p> <div class=\"method-source-code\" id=\"parse-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document_fragment.rb, line 90\ndef parse tags\n  self.new(XML::Document.new, tags)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-serialize\"> <span class=\"method-name\">serialize</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"documentfragment#method-i-to_s\">to_s</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_html\"> <span class=\"method-name\">to_html</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert this <a href=\"documentfragment\">DocumentFragment</a> to html See <a href=\"nodeset#method-i-to_html\">Nokogiri::XML::NodeSet#to_html</a></p> <div class=\"method-source-code\" id=\"to_html-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document_fragment.rb, line 43\ndef to_html *args\n  if Nokogiri.jruby?\n    options = args.first.is_a?(Hash) ? args.shift : {}\n    if !options[:save_with]\n      options[:save_with] = Node::SaveOptions::NO_DECLARATION | Node::SaveOptions::NO_EMPTY_TAGS | Node::SaveOptions::AS_HTML\n    end\n    args.insert(0, options)\n  end\n  children.to_html(*args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_s\"> <span class=\"method-name\">to_s</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert this <a href=\"documentfragment\">DocumentFragment</a> to a string</p> <div class=\"method-source-code\" id=\"to_s-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document_fragment.rb, line 36\ndef to_s\n  children.to_s\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"documentfragment#method-i-serialize\">serialize</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_xhtml\"> <span class=\"method-name\">to_xhtml</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert this <a href=\"documentfragment\">DocumentFragment</a> to xhtml See <a href=\"nodeset#method-i-to_xhtml\">Nokogiri::XML::NodeSet#to_xhtml</a></p> <div class=\"method-source-code\" id=\"to_xhtml-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document_fragment.rb, line 57\ndef to_xhtml *args\n  if Nokogiri.jruby?\n    options = args.first.is_a?(Hash) ? args.shift : {}\n    if !options[:save_with]\n      options[:save_with] = Node::SaveOptions::NO_DECLARATION | Node::SaveOptions::NO_EMPTY_TAGS | Node::SaveOptions::AS_XHTML\n    end\n    args.insert(0, options)\n  end\n  children.to_xhtml(*args)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_xml\"> <span class=\"method-name\">to_xml</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert this <a href=\"documentfragment\">DocumentFragment</a> to xml See <a href=\"nodeset#method-i-to_xml\">Nokogiri::XML::NodeSet#to_xml</a></p> <div class=\"method-source-code\" id=\"to_xml-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/document_fragment.rb, line 71\ndef to_xml *args\n  children.to_xml(*args)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/dtd":"<h1 id=\"class-Nokogiri::XML::DTD\" class=\"class\"> class Nokogiri::XML::DTD </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"node\">Nokogiri::XML::Node</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"dtd\">Nokogiri::XML::DTD</a> wraps <a href=\"dtd\">DTD</a> nodes in an <a href=\"../xml\">XML</a> document</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attributes\"> <span class=\"method-callseq\"> attributes </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get a hash of the attributes for this <a href=\"dtd\">DTD</a>.</p> <div class=\"method-source-code\" id=\"attributes-source\"> <pre class=\"c\">static VALUE attributes(VALUE self)\n{\n  xmlDtdPtr dtd;\n  VALUE hash;\n\n  Data_Get_Struct(self, xmlDtd, dtd);\n\n  hash = rb_hash_new();\n\n  if(!dtd-&gt;attributes) return hash;\n\n  xmlHashScan((xmlHashTablePtr)dtd-&gt;attributes, element_copier, (void *)hash);\n\n  return hash;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-each\"> <span class=\"method-name\">each</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"each-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/dtd.rb, line 15\ndef each &amp;block\n  attributes.each { |key, value|\n    block.call([key, value])\n  }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-elements\"> <span class=\"method-callseq\"> elements </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get a hash of the elements for this <a href=\"dtd\">DTD</a>.</p> <div class=\"method-source-code\" id=\"elements-source\"> <pre class=\"c\">static VALUE elements(VALUE self)\n{\n  xmlDtdPtr dtd;\n  VALUE hash;\n\n  Data_Get_Struct(self, xmlDtd, dtd);\n\n  if(!dtd-&gt;elements) return Qnil;\n\n  hash = rb_hash_new();\n\n  xmlHashScan((xmlHashTablePtr)dtd-&gt;elements, element_copier, (void *)hash);\n\n  return hash;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-entities\"> <span class=\"method-callseq\"> entities </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get a hash of the elements for this <a href=\"dtd\">DTD</a>.</p> <div class=\"method-source-code\" id=\"entities-source\"> <pre class=\"c\">static VALUE entities(VALUE self)\n{\n  xmlDtdPtr dtd;\n  VALUE hash;\n\n  Data_Get_Struct(self, xmlDtd, dtd);\n\n  if(!dtd-&gt;entities) return Qnil;\n\n  hash = rb_hash_new();\n\n  xmlHashScan((xmlHashTablePtr)dtd-&gt;entities, element_copier, (void *)hash);\n\n  return hash;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-external_id\"> <span class=\"method-callseq\"> external_id </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the External ID for this <a href=\"dtd\">DTD</a></p> <div class=\"method-source-code\" id=\"external_id-source\"> <pre class=\"c\">static VALUE external_id(VALUE self)\n{\n  xmlDtdPtr dtd;\n  Data_Get_Struct(self, xmlDtd, dtd);\n\n  if(!dtd-&gt;ExternalID) return Qnil;\n\n  return NOKOGIRI_STR_NEW2(dtd-&gt;ExternalID);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-html5_dtd-3F\"> <span class=\"method-name\">html5_dtd?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"html5_dtd-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/dtd.rb, line 25\ndef html5_dtd?\n  html_dtd? &amp;&amp;\n    external_id.nil? &amp;&amp;\n    (system_id.nil? || system_id == 'about:legacy-compat')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-html_dtd-3F\"> <span class=\"method-name\">html_dtd?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"html_dtd-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/dtd.rb, line 21\ndef html_dtd?\n  name.casecmp('html').zero?\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-keys\"> <span class=\"method-name\">keys</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"keys-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/dtd.rb, line 11\ndef keys\n  attributes.keys\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-notations\"> <span class=\"method-callseq\"> notations </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get a hash of the notations for this <a href=\"dtd\">DTD</a>.</p> <div class=\"method-source-code\" id=\"notations-source\"> <pre class=\"c\">static VALUE notations(VALUE self)\n{\n  xmlDtdPtr dtd;\n  VALUE hash;\n\n  Data_Get_Struct(self, xmlDtd, dtd);\n\n  if(!dtd-&gt;notations) return Qnil;\n\n  hash = rb_hash_new();\n\n  xmlHashScan((xmlHashTablePtr)dtd-&gt;notations, notation_copier, (void *)hash);\n\n  return hash;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-system_id\"> <span class=\"method-callseq\"> system_id </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the System ID for this <a href=\"dtd\">DTD</a></p> <div class=\"method-source-code\" id=\"system_id-source\"> <pre class=\"c\">static VALUE system_id(VALUE self)\n{\n  xmlDtdPtr dtd;\n  Data_Get_Struct(self, xmlDtd, dtd);\n\n  if(!dtd-&gt;SystemID) return Qnil;\n\n  return NOKOGIRI_STR_NEW2(dtd-&gt;SystemID);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validate\"> <span class=\"method-callseq\"> validate(document) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Validate <code>document</code> returning a list of errors</p> <div class=\"method-source-code\" id=\"validate-source\"> <pre class=\"c\">static VALUE validate(VALUE self, VALUE document)\n{\n  xmlDocPtr doc;\n  xmlDtdPtr dtd;\n  xmlValidCtxtPtr ctxt;\n  VALUE error_list;\n\n  Data_Get_Struct(self, xmlDtd, dtd);\n  Data_Get_Struct(document, xmlDoc, doc);\n  error_list = rb_ary_new();\n\n  ctxt = xmlNewValidCtxt();\n\n  xmlSetStructuredErrorFunc((void *)error_list, Nokogiri_error_array_pusher);\n\n  xmlValidateDtd(ctxt, doc, dtd);\n\n  xmlSetStructuredErrorFunc(NULL, NULL);\n\n  xmlFreeValidCtxt(ctxt);\n\n  return error_list;\n}</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/elementcontent":"<h1 id=\"class-Nokogiri::XML::ElementContent\" class=\"class\"> class Nokogiri::XML::ElementContent </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl> <section class=\"description\"> <p>Represents the allowed content in an <a href=\"element\">Element</a> Declaration inside a DTD:</p> <pre>&lt;?xml version=\"1.0\"?&gt;&lt;?TEST-STYLE PIDATA?&gt;\n&lt;!DOCTYPE staff SYSTEM \"staff.dtd\" [\n   &lt;!ELEMENT div1 (head, (p | list | note)*, div2*)&gt;\n]&gt;\n&lt;/root&gt;</pre> <p><a href=\"elementcontent\">ElementContent</a> represents the tree inside the &lt;!ELEMENT&gt; tag shown above that lists the possible content for the div1 tag.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ELEMENT\">ELEMENT </dt>\n\n<dt id=\"MULT\">MULT </dt>\n\n<dt id=\"ONCE\">ONCE </dt>\n<dd>\n<p>Possible content occurrences</p> </dd>\n<dt id=\"OPT\">OPT </dt>\n\n<dt id=\"OR\">OR </dt>\n\n<dt id=\"PCDATA\">PCDATA </dt>\n<dd>\n<p>Possible definitions of type</p> </dd>\n<dt id=\"PLUS\">PLUS </dt>\n\n<dt id=\"SEQ\">SEQ </dt>\n\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-document\"> <span class=\"method-name\">document</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-children\"> <span class=\"method-name\">children</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the children of this <a href=\"elementcontent\">ElementContent</a> node</p> <div class=\"method-source-code\" id=\"children-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/element_content.rb, line 31\ndef children\n  [c1, c2].compact\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-name\"> <span class=\"method-callseq\"> name </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the require element <code>name</code></p> <div class=\"method-source-code\" id=\"name-source\"> <pre class=\"c\">static VALUE get_name(VALUE self)\n{\n  xmlElementContentPtr elem;\n  Data_Get_Struct(self, xmlElementContent, elem);\n\n  if(!elem-&gt;name) return Qnil;\n  return NOKOGIRI_STR_NEW2(elem-&gt;name);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-occur\"> <span class=\"method-callseq\"> occur </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the element content <code>occur</code> flag. Possible values are <a href=\"elementcontent#ONCE\">ONCE</a>, <a href=\"elementcontent#OPT\">OPT</a>, <a href=\"elementcontent#MULT\">MULT</a> or <a href=\"elementcontent#PLUS\">PLUS</a>.</p> <div class=\"method-source-code\" id=\"occur-source\"> <pre class=\"c\">static VALUE get_occur(VALUE self)\n{\n  xmlElementContentPtr elem;\n  Data_Get_Struct(self, xmlElementContent, elem);\n\n  return INT2NUM((long)elem-&gt;ocur);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prefix\"> <span class=\"method-callseq\"> prefix </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the element content namespace <code>prefix</code>.</p> <div class=\"method-source-code\" id=\"prefix-source\"> <pre class=\"c\">static VALUE get_prefix(VALUE self)\n{\n  xmlElementContentPtr elem;\n  Data_Get_Struct(self, xmlElementContent, elem);\n\n  if(!elem-&gt;prefix) return Qnil;\n\n  return NOKOGIRI_STR_NEW2(elem-&gt;prefix);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-type\"> <span class=\"method-callseq\"> type </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the element content <code>type</code>. Possible values are <a href=\"elementcontent#PCDATA\">PCDATA</a>, <a href=\"elementcontent#ELEMENT\">ELEMENT</a>, <a href=\"elementcontent#SEQ\">SEQ</a>, or <a href=\"elementcontent#OR\">OR</a>.</p> <div class=\"method-source-code\" id=\"type-source\"> <pre class=\"c\">static VALUE get_type(VALUE self)\n{\n  xmlElementContentPtr elem;\n  Data_Get_Struct(self, xmlElementContent, elem);\n\n  return INT2NUM((long)elem-&gt;type);\n}</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/elementdecl":"<h1 id=\"class-Nokogiri::XML::ElementDecl\" class=\"class\"> class Nokogiri::XML::ElementDecl </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"node\">Nokogiri::XML::Node</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-content\"> <span class=\"method-callseq\"> content </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The allowed content for this <a href=\"elementdecl\">ElementDecl</a></p> <div class=\"method-source-code\" id=\"content-source\"> <pre class=\"c\">static VALUE content(VALUE self)\n{\n  xmlElementPtr node;\n  Data_Get_Struct(self, xmlElement, node);\n\n  if(!node-&gt;content) return Qnil;\n\n  return Nokogiri_wrap_element_content(\n      rb_funcall(self, id_document, 0),\n      node-&gt;content\n  );\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-element_type\"> <span class=\"method-callseq\"> element_type </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The <a href=\"elementdecl#method-i-element_type\">#element_type</a></p> <div class=\"method-source-code\" id=\"element_type-source\"> <pre class=\"c\">static VALUE element_type(VALUE self)\n{\n  xmlElementPtr node;\n  Data_Get_Struct(self, xmlElement, node);\n  return INT2NUM((long)node-&gt;etype);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inspect\"> <span class=\"method-name\">inspect</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"inspect-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/element_decl.rb, line 8\ndef inspect\n  \"#&lt;#{self.class.name}:#{sprintf(\"0x%x\", object_id)} #{to_s.inspect}&gt;\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prefix\"> <span class=\"method-callseq\"> prefix </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>The namespace prefix for this <a href=\"elementdecl\">ElementDecl</a></p> <div class=\"method-source-code\" id=\"prefix-source\"> <pre class=\"c\">static VALUE prefix(VALUE self)\n{\n  xmlElementPtr node;\n  Data_Get_Struct(self, xmlElement, node);\n\n  if(!node-&gt;prefix) return Qnil;\n\n  return NOKOGIRI_STR_NEW2(node-&gt;prefix);\n}</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/entitydecl":"<h1 id=\"class-Nokogiri::XML::EntityDecl\" class=\"class\"> class Nokogiri::XML::EntityDecl </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"node\">Nokogiri::XML::Node</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(name, doc, *args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/entity_decl.rb, line 10\ndef self.new name, doc, *args\n  doc.create_entity(name, *args)\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-content\"> <span class=\"method-callseq\"> content </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the content</p> <div class=\"method-source-code\" id=\"content-source\"> <pre class=\"c\">static VALUE get_content(VALUE self)\n{\n  xmlEntityPtr node;\n  Data_Get_Struct(self, xmlEntity, node);\n\n  if(!node-&gt;content) return Qnil;\n\n  return NOKOGIRI_STR_NEW(node-&gt;content, node-&gt;length);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-entity_type\"> <span class=\"method-callseq\"> entity_type </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the entity type</p> <div class=\"method-source-code\" id=\"entity_type-source\"> <pre class=\"c\">static VALUE entity_type(VALUE self)\n{\n  xmlEntityPtr node;\n  Data_Get_Struct(self, xmlEntity, node);\n\n  return INT2NUM((int)node-&gt;etype);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-external_id\"> <span class=\"method-callseq\"> external_id </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the external identifier for PUBLIC</p> <div class=\"method-source-code\" id=\"external_id-source\"> <pre class=\"c\">static VALUE external_id(VALUE self)\n{\n  xmlEntityPtr node;\n  Data_Get_Struct(self, xmlEntity, node);\n\n  if(!node-&gt;ExternalID) return Qnil;\n\n  return NOKOGIRI_STR_NEW2(node-&gt;ExternalID);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inspect\"> <span class=\"method-name\">inspect</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"inspect-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/entity_decl.rb, line 14\ndef inspect\n  \"#&lt;#{self.class.name}:#{sprintf(\"0x%x\", object_id)} #{to_s.inspect}&gt;\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-original_content\"> <span class=\"method-callseq\"> original_content </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the <a href=\"entitydecl#method-i-original_content\">#original_content</a> before ref substitution</p> <div class=\"method-source-code\" id=\"original_content-source\"> <pre class=\"c\">static VALUE original_content(VALUE self)\n{\n  xmlEntityPtr node;\n  Data_Get_Struct(self, xmlEntity, node);\n\n  if(!node-&gt;orig) return Qnil;\n\n  return NOKOGIRI_STR_NEW2(node-&gt;orig);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-system_id\"> <span class=\"method-callseq\"> system_id </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the URI for a SYSTEM or PUBLIC Entity</p> <div class=\"method-source-code\" id=\"system_id-source\"> <pre class=\"c\">static VALUE system_id(VALUE self)\n{\n  xmlEntityPtr node;\n  Data_Get_Struct(self, xmlEntity, node);\n\n  if(!node-&gt;SystemID) return Qnil;\n\n  return NOKOGIRI_STR_NEW2(node-&gt;SystemID);\n}</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/entityreference":"<h1 id=\"class-Nokogiri::XML::EntityReference\" class=\"class\"> class Nokogiri::XML::EntityReference </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"node\">Nokogiri::XML::Node</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"entityreference\">EntityReference</a> represents an <a href=\"entityreference\">EntityReference</a> node in an xml document.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-callseq\"> new(document, content) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"entityreference\">EntityReference</a> element on the <code>document</code> with <code>name</code></p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"c\">static VALUE new(int argc, VALUE *argv, VALUE klass)\n{\n  xmlDocPtr xml_doc;\n  xmlNodePtr node;\n  VALUE document;\n  VALUE name;\n  VALUE rest;\n  VALUE rb_node;\n\n  rb_scan_args(argc, argv, \"2*\", &amp;document, &amp;name, &amp;rest);\n\n  Data_Get_Struct(document, xmlDoc, xml_doc);\n\n  node = xmlNewReference(\n      xml_doc,\n      (const xmlChar *)StringValuePtr(name)\n  );\n\n  nokogiri_root_node(node);\n\n  rb_node = Nokogiri_wrap_xml_node(klass, node);\n  rb_obj_call_init(rb_node, argc, argv);\n\n  if(rb_block_given_p()) rb_yield(rb_node);\n\n  return rb_node;\n}</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/namespace":"<h1 id=\"class-Nokogiri::XML::Namespace\" class=\"class\"> class Nokogiri::XML::Namespace </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"pp/node\">Nokogiri::XML::PP::Node</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-document\"> <span class=\"method-name\">document</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-href\"> <span class=\"method-callseq\"> href </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the href for this namespace</p> <div class=\"method-source-code\" id=\"href-source\"> <pre class=\"c\">static VALUE href(VALUE self)\n{\n  xmlNsPtr ns;\n\n  Data_Get_Struct(self, xmlNs, ns);\n  if(!ns-&gt;href) return Qnil;\n\n  return NOKOGIRI_STR_NEW2(ns-&gt;href);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prefix\"> <span class=\"method-callseq\"> prefix </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the prefix for this namespace. Returns <code>nil</code> if there is no prefix.</p> <div class=\"method-source-code\" id=\"prefix-source\"> <pre class=\"c\">static VALUE prefix(VALUE self)\n{\n  xmlNsPtr ns;\n\n  Data_Get_Struct(self, xmlNs, ns);\n  if(!ns-&gt;prefix) return Qnil;\n\n  return NOKOGIRI_STR_NEW2(ns-&gt;prefix);\n}</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/node/saveoptions":"<h1 id=\"class-Nokogiri::XML::Node::SaveOptions\" class=\"class\"> class Nokogiri::XML::Node::SaveOptions </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl> <section class=\"description\"> <p>Save options for serializing nodes</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"AS_BUILDER\">AS_BUILDER </dt>\n<dd>\n<p>Save builder created document</p> </dd>\n<dt id=\"AS_HTML\">AS_HTML </dt>\n<dd>\n<p>Save as HTML</p> </dd>\n<dt id=\"AS_XHTML\">AS_XHTML </dt>\n<dd>\n<p>Save as XHTML</p> </dd>\n<dt id=\"AS_XML\">AS_XML </dt>\n<dd>\n<p>Save as <a href=\"../../xml\">XML</a></p> </dd>\n<dt id=\"DEFAULT_HTML\">DEFAULT_HTML </dt>\n<dd>\n<p>the default for HTML document</p> </dd>\n<dt id=\"DEFAULT_XHTML\">DEFAULT_XHTML </dt>\n<dd>\n<p>the default for XHTML document</p> </dd>\n<dt id=\"DEFAULT_XML\">DEFAULT_XML </dt>\n<dd>\n<p>the default for <a href=\"../../xml\">XML</a> documents</p> </dd>\n<dt id=\"FORMAT\">FORMAT </dt>\n<dd>\n<p>Format serialized xml</p> </dd>\n<dt id=\"NO_DECLARATION\">NO_DECLARATION </dt>\n<dd>\n<p>Do not include declarations</p> </dd>\n<dt id=\"NO_EMPTY_TAGS\">NO_EMPTY_TAGS </dt>\n<dd>\n<p>Do not include empty tags</p> </dd>\n<dt id=\"NO_XHTML\">NO_XHTML </dt>\n<dd>\n<p>Do not save XHTML</p> </dd>\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-options\"> <span class=\"method-name\">options</span><span class=\"attribute-access-type\">[R]</span> </div> <div class=\"method-description\"> <p>Integer representation of the <a href=\"saveoptions\">SaveOptions</a></p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-to_i\"> <span class=\"method-name\">to_i</span><span class=\"attribute-access-type\">[R]</span> </div> <div class=\"method-description\"> <p>Integer representation of the <a href=\"saveoptions\">SaveOptions</a></p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(options = 0;)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"saveoptions\">SaveOptions</a> object with <code>options</code></p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node/save_options.rb, line 42\ndef initialize options = 0; @options = options; end</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/node":"<h1 id=\"class-Nokogiri::XML::Node\" class=\"class\"> class Nokogiri::XML::Node </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n<dt>Included modules:</dt>\n<dd class=\"meta-includes\"><a class=\"include\" href=\"pp/node\">Nokogiri::XML::PP::Node</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"node\">Nokogiri::XML::Node</a> is your window to the fun filled world of dealing with <a href=\"../xml\">XML</a> and HTML tags. A <a href=\"node\">Nokogiri::XML::Node</a> may be treated similarly to a hash with regard to attributes. For example (from irb):</p> <pre class=\"ruby\">irb(main):004:0&gt; node\n=&gt; &lt;a href=\"#foo\" id=\"link\"&gt;link&lt;/a&gt;\nirb(main):005:0&gt; node['href']\n=&gt; \"#foo\"\nirb(main):006:0&gt; node.keys\n=&gt; [\"href\", \"id\"]\nirb(main):007:0&gt; node.values\n=&gt; [\"#foo\", \"link\"]\nirb(main):008:0&gt; node['class'] = 'green'\n=&gt; \"green\"\nirb(main):009:0&gt; node\n=&gt; &lt;a href=\"#foo\" id=\"link\" class=\"green\"&gt;link&lt;/a&gt;\nirb(main):010:0&gt;\n</pre> <p>See <a href=\"node#method-i-5B-5D\">#[]</a> and Nokogiri::XML#[]= for more information.</p> <p><a href=\"node\">Nokogiri::XML::Node</a> also has methods that let you move around your tree. For navigating your tree, see:</p> <ul>\n<li> <p><a href=\"node#method-i-parent\">#parent</a></p> </li>\n<li> <p><a href=\"node#method-i-children\">#children</a></p> </li>\n<li> <p><a href=\"node#method-i-next\">#next</a></p> </li>\n<li> <p><a href=\"node#method-i-previous\">#previous</a></p> </li>\n</ul> <p>You may search this node's subtree using <a href=\"node#method-i-xpath\">#xpath</a> and <a href=\"node#method-i-css\">#css</a></p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ATTRIBUTE_DECL\">ATTRIBUTE_DECL </dt>\n<dd>\n<p>Attribute declaration type</p> </dd>\n<dt id=\"ATTRIBUTE_NODE\">ATTRIBUTE_NODE </dt>\n<dd>\n<p>Attribute node type</p> </dd>\n<dt id=\"CDATA_SECTION_NODE\">CDATA_SECTION_NODE </dt>\n<dd>\n<p><a href=\"cdata\">CDATA</a> node type, see <a href=\"node#method-i-cdata-3F\">#cdata?</a></p> </dd>\n<dt id=\"COMMENT_NODE\">COMMENT_NODE </dt>\n<dd>\n<p><a href=\"comment\">Comment</a> node type, see <a href=\"node#method-i-comment-3F\">#comment?</a></p> </dd>\n<dt id=\"DOCB_DOCUMENT_NODE\">DOCB_DOCUMENT_NODE </dt>\n<dd>\n<p>DOCB document node type</p> </dd>\n<dt id=\"DOCUMENT_FRAG_NODE\">DOCUMENT_FRAG_NODE </dt>\n<dd>\n<p><a href=\"document\">Document</a> fragment node type</p> </dd>\n<dt id=\"DOCUMENT_NODE\">DOCUMENT_NODE </dt>\n<dd>\n<p><a href=\"document\">Document</a> node type, see <a href=\"node#method-i-xml-3F\">#xml?</a></p> </dd>\n<dt id=\"DOCUMENT_TYPE_NODE\">DOCUMENT_TYPE_NODE </dt>\n<dd>\n<p><a href=\"document\">Document</a> type node type</p> </dd>\n<dt id=\"DTD_NODE\">DTD_NODE </dt>\n<dd>\n<p><a href=\"dtd\">DTD</a> node type</p> </dd>\n<dt id=\"ELEMENT_DECL\">ELEMENT_DECL </dt>\n<dd>\n<p><a href=\"element\">Element</a> declaration type</p> </dd>\n<dt id=\"ELEMENT_NODE\">ELEMENT_NODE </dt>\n<dd>\n<p><a href=\"element\">Element</a> node type, see <a href=\"node#method-i-element-3F\">#element?</a></p> </dd>\n<dt id=\"ENTITY_DECL\">ENTITY_DECL </dt>\n<dd>\n<p>Entity declaration type</p> </dd>\n<dt id=\"ENTITY_NODE\">ENTITY_NODE </dt>\n<dd>\n<p>Entity node type</p> </dd>\n<dt id=\"ENTITY_REF_NODE\">ENTITY_REF_NODE </dt>\n<dd>\n<p>Entity reference node type</p> </dd>\n<dt id=\"HTML_DOCUMENT_NODE\">HTML_DOCUMENT_NODE </dt>\n<dd>\n<p>HTML document node type, see <a href=\"node#method-i-html-3F\">#html?</a></p> </dd>\n<dt id=\"NAMESPACE_DECL\">NAMESPACE_DECL </dt>\n<dd>\n<p><a href=\"namespace\">Namespace</a> declaration type</p> </dd>\n<dt id=\"NOTATION_NODE\">NOTATION_NODE </dt>\n<dd>\n<p><a href=\"notation\">Notation</a> node type</p> </dd>\n<dt id=\"PI_NODE\">PI_NODE </dt>\n<dd>\n<p>PI node type</p> </dd>\n<dt id=\"TEXT_NODE\">TEXT_NODE </dt>\n<dd>\n<p><a href=\"text\">Text</a> node type, see <a href=\"node#method-i-text-3F\">#text?</a></p> </dd>\n<dt id=\"XINCLUDE_END\">XINCLUDE_END </dt>\n<dd>\n<p>XInclude end type</p> </dd>\n<dt id=\"XINCLUDE_START\">XINCLUDE_START </dt>\n<dd>\n<p>XInclude start type</p> </dd>\n</dl> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-callseq\"> new(name, document) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new node with <code>name</code> sharing GC lifecycle with <code>document</code></p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"c\">static VALUE new(int argc, VALUE *argv, VALUE klass)\n{\n  xmlDocPtr doc;\n  xmlNodePtr node;\n  VALUE name;\n  VALUE document;\n  VALUE rest;\n  VALUE rb_node;\n\n  rb_scan_args(argc, argv, \"2*\", &amp;name, &amp;document, &amp;rest);\n\n  Data_Get_Struct(document, xmlDoc, doc);\n\n  node = xmlNewNode(NULL, (xmlChar *)StringValuePtr(name));\n  node-&gt;doc = doc-&gt;doc;\n  nokogiri_root_node(node);\n\n  rb_node = Nokogiri_wrap_xml_node(\n      klass == cNokogiriXmlNode ? (VALUE)NULL : klass,\n      node\n  );\n  rb_obj_call_init(rb_node, argc, argv);\n\n  if(rb_block_given_p()) rb_yield(rb_node);\n\n  return rb_node;\n}</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-25\"> <span class=\"method-name\">%</span><span class=\"method-args\">(path, ns = document.root ? document.root.namespaces : {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-at\">at</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-2F\"> <span class=\"method-name\">/</span><span class=\"method-args\">(*paths)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-search\">search</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3C-3C\"> <span class=\"method-name\">&lt;&lt;</span><span class=\"method-args\">(node_or_tags)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add <code>node_or_tags</code> as a child of this <a href=\"node\">Node</a>. <code>node_or_tags</code> can be a <a href=\"node\">Nokogiri::XML::Node</a>, a ::DocumentFragment, a ::NodeSet, or a string containing markup.</p> <p>Returns self, to support chaining of calls (e.g., root &lt;&lt; child1 &lt;&lt; child2)</p> <p>Also see related method <code>add_child</code>.</p> <div class=\"method-source-code\" id=\"3C-3C-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 304\ndef &lt;&lt; node_or_tags\n  add_child node_or_tags\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3C-3D-3E\"> <span class=\"method-name\">&lt;=&gt;</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Compare two <a href=\"node\">Node</a> objects with respect to their <a href=\"document\">Document</a>. Nodes from different documents cannot be compared.</p> <div class=\"method-source-code\" id=\"3C-3D-3E-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 867\ndef &lt;=&gt; other\n  return nil unless other.is_a?(Nokogiri::XML::Node)\n  return nil unless document == other.document\n  compare other\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3D-3D\"> <span class=\"method-name\">==</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Test to see if this <a href=\"node\">Node</a> is equal to <code>other</code></p> <div class=\"method-source-code\" id=\"3D-3D-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 732\ndef == other\n  return false unless other\n  return false unless other.respond_to?(:pointer_id)\n  pointer_id == other.pointer_id\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3E\"> <span class=\"method-name\">&gt;</span><span class=\"method-args\">(selector)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Search this node's immediate children using CSS selector <code>selector</code></p> <div class=\"method-source-code\" id=\"3E-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 219\ndef &gt; selector\n  ns = document.root.namespaces\n  xpath CSS.xpath_for(selector, :prefix =&gt; \"./\", :ns =&gt; ns).first\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D\"> <span class=\"method-name\">[]</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the attribute value for the attribute <code>name</code></p> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 253\ndef [] name\n  get(name.to_s)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-get_attribute\">get_attribute</a>, <a href=\"node#method-i-attr\">attr</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D-3D\"> <span class=\"method-name\">[]=</span><span class=\"method-args\">(name, value)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the attribute value for the attribute <code>name</code> to <code>value</code></p> <div class=\"method-source-code\" id=\"5B-5D-3D-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 259\ndef []= name, value\n  set name.to_s, value.to_s\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-set_attribute\">set_attribute</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-accept\"> <span class=\"method-name\">accept</span><span class=\"method-args\">(visitor)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Accept a visitor. This method calls “visit” on <code>visitor</code> with self.</p> <div class=\"method-source-code\" id=\"accept-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 726\ndef accept visitor\n  visitor.visit(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_child\"> <span class=\"method-name\">add_child</span><span class=\"method-args\">(node_or_tags)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add <code>node_or_tags</code> as a child of this <a href=\"node\">Node</a>. <code>node_or_tags</code> can be a <a href=\"node\">Nokogiri::XML::Node</a>, a ::DocumentFragment, a ::NodeSet, or a string containing markup.</p> <p>Returns the reparented node (if <code>node_or_tags</code> is a <a href=\"node\">Node</a>), or <a href=\"nodeset\">NodeSet</a> (if <code>node_or_tags</code> is a <a href=\"documentfragment\">DocumentFragment</a>, <a href=\"nodeset\">NodeSet</a>, or string).</p> <p>Also see related method +&lt;&lt;+.</p> <div class=\"method-source-code\" id=\"add_child-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 270\ndef add_child node_or_tags\n  node_or_tags = coerce(node_or_tags)\n  if node_or_tags.is_a?(XML::NodeSet)\n    node_or_tags.each { |n| add_child_node_and_reparent_attrs n }\n  else\n    add_child_node_and_reparent_attrs node_or_tags\n  end\n  node_or_tags\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-add_namespace\"> <span class=\"method-name\">add_namespace</span><span class=\"method-args\">(p1, p2)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-add_namespace_definition\">add_namespace_definition</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_namespace_definition\"> <span class=\"method-callseq\"> add_namespace_definition(prefix, href) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds a namespace definition with <code>prefix</code> using <code>href</code> value. The result is as if parsed <a href=\"../xml\">XML</a> for this node had included an attribute 'xmlns:prefix=value'. A default namespace for this node (“xmlns=”) can be added by passing 'nil' for prefix. Namespaces added this way will not show up in <a href=\"node#method-i-attributes\">attributes</a>, but they will be included as an xmlns attribute when the node is serialized to <a href=\"../xml\">XML</a>.</p> <div class=\"method-source-code\" id=\"add_namespace_definition-source\"> <pre class=\"c\">static VALUE add_namespace_definition(VALUE self, VALUE prefix, VALUE href)\n{\n  xmlNodePtr node, namespacee;\n  xmlNsPtr ns;\n\n  Data_Get_Struct(self, xmlNode, node);\n  namespacee = node ;\n\n  ns = xmlSearchNs(\n      node-&gt;doc,\n      node,\n      (const xmlChar *)(NIL_P(prefix) ? NULL : StringValuePtr(prefix))\n  );\n\n  if(!ns) {\n    if (node-&gt;type != XML_ELEMENT_NODE) {\n      namespacee = node-&gt;parent;\n    }\n    ns = xmlNewNs(\n        namespacee,\n        (const xmlChar *)StringValuePtr(href),\n        (const xmlChar *)(NIL_P(prefix) ? NULL : StringValuePtr(prefix))\n    );\n  }\n\n  if (!ns) return Qnil ;\n\n  if(NIL_P(prefix) || node != namespacee) xmlSetNs(node, ns);\n\n  return Nokogiri_wrap_xml_namespace(node-&gt;doc, ns);\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-add_namespace\">add_namespace</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_next_sibling\"> <span class=\"method-name\">add_next_sibling</span><span class=\"method-args\">(node_or_tags)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Insert <code>node_or_tags</code> after this <a href=\"node\">Node</a> (as a sibling). <code>node_or_tags</code> can be a <a href=\"node\">Nokogiri::XML::Node</a>, a ::DocumentFragment, a ::NodeSet, or a string containing markup.</p> <p>Returns the reparented node (if <code>node_or_tags</code> is a <a href=\"node\">Node</a>), or <a href=\"nodeset\">NodeSet</a> (if <code>node_or_tags</code> is a <a href=\"documentfragment\">DocumentFragment</a>, <a href=\"nodeset\">NodeSet</a>, or string).</p> <p>Also see related method <code>after</code>.</p> <div class=\"method-source-code\" id=\"add_next_sibling-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 328\ndef add_next_sibling node_or_tags\n  raise ArgumentError.new(\"A document may not have multiple root nodes.\") if (parent &amp;&amp; parent.document?) &amp;&amp; !node_or_tags.processing_instruction?\n  \n  add_sibling :next, node_or_tags\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_previous_sibling\"> <span class=\"method-name\">add_previous_sibling</span><span class=\"method-args\">(node_or_tags)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Insert <code>node_or_tags</code> before this <a href=\"node\">Node</a> (as a sibling). <code>node_or_tags</code> can be a <a href=\"node\">Nokogiri::XML::Node</a>, a ::DocumentFragment, a ::NodeSet, or a string containing markup.</p> <p>Returns the reparented node (if <code>node_or_tags</code> is a <a href=\"node\">Node</a>), or <a href=\"nodeset\">NodeSet</a> (if <code>node_or_tags</code> is a <a href=\"documentfragment\">DocumentFragment</a>, <a href=\"nodeset\">NodeSet</a>, or string).</p> <p>Also see related method <code>before</code>.</p> <div class=\"method-source-code\" id=\"add_previous_sibling-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 315\ndef add_previous_sibling node_or_tags\n  raise ArgumentError.new(\"A document may not have multiple root nodes.\") if (parent &amp;&amp; parent.document?) &amp;&amp; !node_or_tags.processing_instruction?\n\n  add_sibling :previous, node_or_tags\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-previous-3D\">previous=</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-after\"> <span class=\"method-name\">after</span><span class=\"method-args\">(node_or_tags)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Insert <code>node_or_tags</code> after this node (as a sibling). <code>node_or_tags</code> can be a <a href=\"node\">Nokogiri::XML::Node</a>, a <a href=\"documentfragment\">Nokogiri::XML::DocumentFragment</a>, or a string containing markup.</p> <p>Returns self, to support chaining of calls.</p> <p>Also see related method <code>add_next_sibling</code>.</p> <div class=\"method-source-code\" id=\"after-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 353\ndef after node_or_tags\n  add_next_sibling node_or_tags\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-ancestors\"> <span class=\"method-name\">ancestors</span><span class=\"method-args\">(selector = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get a list of ancestor <a href=\"node\">Node</a> for this <a href=\"node\">Node</a>. If <code>selector</code> is given, the ancestors must match <code>selector</code></p> <div class=\"method-source-code\" id=\"ancestors-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 667\ndef ancestors selector = nil\n  return NodeSet.new(document) unless respond_to?(:parent)\n  return NodeSet.new(document) unless parent\n\n  parents = [parent]\n\n  while parents.last.respond_to?(:parent)\n    break unless ctx_parent = parents.last.parent\n    parents &lt;&lt; ctx_parent\n  end\n\n  return NodeSet.new(document, parents) unless selector\n\n  root = parents.last\n\n  NodeSet.new(document, parents.find_all { |parent|\n    root.search(selector).include?(parent)\n  })\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-at\"> <span class=\"method-name\">at</span><span class=\"method-args\">(path, ns = document.root ? document.root.namespaces : {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Search for the first occurrence of <code>path</code>.</p> <p>Returns nil if nothing is found, otherwise a <a href=\"node\">Node</a>.</p> <div class=\"method-source-code\" id=\"at-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 228\ndef at path, ns = document.root ? document.root.namespaces : {}\n  search(path, ns).first\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-25\">%</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-at_css\"> <span class=\"method-name\">at_css</span><span class=\"method-args\">(*rules)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Search this node for the first occurrence of CSS <code>rules</code>. Equivalent to <code>css(rules).first</code> See <a href=\"node#method-i-css\">#css</a> for more information.</p> <div class=\"method-source-code\" id=\"at_css-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 247\ndef at_css *rules\n  css(*rules).first\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-at_xpath\"> <span class=\"method-name\">at_xpath</span><span class=\"method-args\">(*paths)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Search this node for the first occurrence of <a href=\"xpath\">XPath</a> <code>paths</code>. Equivalent to <code>xpath(paths).first</code> See <a href=\"node#method-i-xpath\">#xpath</a> for more information.</p> <div class=\"method-source-code\" id=\"at_xpath-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 238\ndef at_xpath *paths\n  xpath(*paths).first\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-attr\"> <span class=\"method-name\">attr</span><span class=\"method-args\">(name)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-5B-5D\">[]</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute\"> <span class=\"method-callseq\"> attribute(name) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the attribute node with <code>name</code></p> <div class=\"method-source-code\" id=\"attribute-source\"> <pre class=\"c\">static VALUE attr(VALUE self, VALUE name)\n{\n  xmlNodePtr node;\n  xmlAttrPtr prop;\n  Data_Get_Struct(self, xmlNode, node);\n  prop = xmlHasProp(node, (xmlChar *)StringValuePtr(name));\n\n  if(! prop) return Qnil;\n  return Nokogiri_wrap_xml_node(Qnil, (xmlNodePtr)prop);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_nodes\"> <span class=\"method-callseq\"> attribute_nodes() </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>returns a list containing the <a href=\"node\">Node</a> attributes.</p> <div class=\"method-source-code\" id=\"attribute_nodes-source\"> <pre class=\"c\">static VALUE attribute_nodes(VALUE self)\n{\n    /* this code in the mode of xmlHasProp() */\n    xmlNodePtr node;\n    VALUE attr;\n\n    Data_Get_Struct(self, xmlNode, node);\n\n    attr = rb_ary_new();\n    Nokogiri_xml_node_properties(node, attr);\n\n    return attr ;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_with_ns\"> <span class=\"method-callseq\"> attribute_with_ns(name, namespace) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the attribute node with <code>name</code> and <code>namespace</code></p> <div class=\"method-source-code\" id=\"attribute_with_ns-source\"> <pre class=\"c\">static VALUE attribute_with_ns(VALUE self, VALUE name, VALUE namespace)\n{\n  xmlNodePtr node;\n  xmlAttrPtr prop;\n  Data_Get_Struct(self, xmlNode, node);\n  prop = xmlHasNsProp(node, (xmlChar *)StringValuePtr(name),\n      NIL_P(namespace) ? NULL : (xmlChar *)StringValuePtr(namespace));\n\n  if(! prop) return Qnil;\n  return Nokogiri_wrap_xml_node(Qnil, (xmlNodePtr)prop);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attributes\"> <span class=\"method-name\">attributes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a hash containing the node's attributes. The key is the attribute name without any namespace, the value is a <a href=\"attr\">Nokogiri::XML::Attr</a> representing the attribute. If you need to distinguish attributes with the same name, with different namespaces use <a href=\"node#method-i-attribute_nodes\">attribute_nodes</a> instead.</p> <div class=\"method-source-code\" id=\"attributes-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 459\ndef attributes\n  Hash[attribute_nodes.map { |node|\n    [node.node_name, node]\n  }]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-before\"> <span class=\"method-name\">before</span><span class=\"method-args\">(node_or_tags)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Insert <code>node_or_tags</code> before this node (as a sibling). <code>node_or_tags</code> can be a <a href=\"node\">Nokogiri::XML::Node</a>, a ::DocumentFragment, a ::NodeSet, or a string containing markup.</p> <p>Returns self, to support chaining of calls.</p> <p>Also see related method <code>add_previous_sibling</code>.</p> <div class=\"method-source-code\" id=\"before-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 341\ndef before node_or_tags\n  add_previous_sibling node_or_tags\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-blank-3F\"> <span class=\"method-callseq\"> blank? </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this node blank?</p> <div class=\"method-source-code\" id=\"blank-3F-source\"> <pre class=\"c\">static VALUE blank_eh(VALUE self)\n{\n  xmlNodePtr node;\n  Data_Get_Struct(self, xmlNode, node);\n  return (1 == xmlIsBlankNode(node)) ? Qtrue : Qfalse ;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-canonicalize\"> <span class=\"method-name\">canonicalize</span><span class=\"method-args\">(mode=XML::XML_C14N_1_0,inclusive_namespaces=nil,with_comments=false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"canonicalize-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 887\ndef canonicalize(mode=XML::XML_C14N_1_0,inclusive_namespaces=nil,with_comments=false)\n  c14n_root = self\n  document.canonicalize(mode, inclusive_namespaces, with_comments) do |node, parent|\n    tn = node.is_a?(XML::Node) ? node : parent\n    tn == c14n_root || tn.ancestors.include?(c14n_root)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cdata-3F\"> <span class=\"method-name\">cdata?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if this is a <a href=\"cdata\">CDATA</a></p> <div class=\"method-source-code\" id=\"cdata-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 590\ndef cdata?\n  type == CDATA_SECTION_NODE\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-child\"> <span class=\"method-callseq\"> child </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the child node</p> <div class=\"method-source-code\" id=\"child-source\"> <pre class=\"c\">static VALUE child(VALUE self)\n{\n  xmlNodePtr node, child;\n  Data_Get_Struct(self, xmlNode, node);\n\n  child = node-&gt;children;\n  if(!child) return Qnil;\n\n  return Nokogiri_wrap_xml_node(Qnil, child);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-children\"> <span class=\"method-callseq\"> children </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the list of children for this node as a <a href=\"nodeset\">NodeSet</a></p> <div class=\"method-source-code\" id=\"children-source\"> <pre class=\"c\">static VALUE children(VALUE self)\n{\n  xmlNodePtr node;\n  xmlNodePtr child;\n  xmlNodeSetPtr set;\n  VALUE document;\n  VALUE node_set;\n\n  Data_Get_Struct(self, xmlNode, node);\n\n  child = node-&gt;children;\n  set = xmlXPathNodeSetCreate(child);\n\n  document = DOC_RUBY_OBJECT(node-&gt;doc);\n\n  if(!child) return Nokogiri_wrap_xml_node_set(set, document);\n\n  child = child-&gt;next;\n  while(NULL != child) {\n    xmlXPathNodeSetAddUnique(set, child);\n    child = child-&gt;next;\n  }\n\n  node_set = Nokogiri_wrap_xml_node_set(set, document);\n\n  return node_set;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-children-3D\"> <span class=\"method-name\">children=</span><span class=\"method-args\">(node_or_tags)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the inner html for this <a href=\"node\">Node</a> <code>node_or_tags</code> <code>node_or_tags</code> can be a <a href=\"node\">Nokogiri::XML::Node</a>, a <a href=\"documentfragment\">Nokogiri::XML::DocumentFragment</a>, or a string containing markup.</p> <p>Returns the reparented node (if <code>node_or_tags</code> is a <a href=\"node\">Node</a>), or <a href=\"nodeset\">NodeSet</a> (if <code>node_or_tags</code> is a <a href=\"documentfragment\">DocumentFragment</a>, <a href=\"nodeset\">NodeSet</a>, or string).</p> <p>Also see related method <code>inner_html=</code></p> <div class=\"method-source-code\" id=\"children-3D-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 377\ndef children= node_or_tags\n  node_or_tags = coerce(node_or_tags)\n  children.unlink\n  if node_or_tags.is_a?(XML::NodeSet)\n    node_or_tags.each { |n| add_child_node_and_reparent_attrs n }\n  else\n    add_child_node_and_reparent_attrs node_or_tags\n  end\n  node_or_tags\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-clone\"> <span class=\"method-name\">clone</span><span class=\"method-args\">(p1 = v1)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-dup\">dup</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-comment-3F\"> <span class=\"method-name\">comment?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if this is a <a href=\"comment\">Comment</a></p> <div class=\"method-source-code\" id=\"comment-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 585\ndef comment?\n  type == COMMENT_NODE\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-content\"> <span class=\"method-callseq\"> content </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the content for this <a href=\"node\">Node</a></p> <div class=\"method-source-code\" id=\"content-source\"> <pre class=\"c\">static VALUE get_content(VALUE self)\n{\n  xmlNodePtr node;\n  xmlChar * content;\n\n  Data_Get_Struct(self, xmlNode, node);\n\n  content = xmlNodeGetContent(node);\n  if(content) {\n    VALUE rval = NOKOGIRI_STR_NEW2(content);\n    xmlFree(content);\n    return rval;\n  }\n  return Qnil;\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-text\">text</a>, <a href=\"node#method-i-inner_text\">inner_text</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-content-3D\"> <span class=\"method-name\">content=</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the Node's content to a <a href=\"text\">Text</a> node containing <code>string</code>. The string gets <a href=\"../xml\">XML</a> escaped, not interpreted as markup.</p> <div class=\"method-source-code\" id=\"content-3D-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 546\ndef content= string\n  self.native_content = encode_special_chars(string.to_s)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create_external_subset\"> <span class=\"method-callseq\"> create_external_subset(name, external_id, system_id) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create an external subset</p> <div class=\"method-source-code\" id=\"create_external_subset-source\"> <pre class=\"c\">static VALUE create_external_subset(VALUE self, VALUE name, VALUE external_id, VALUE system_id)\n{\n  xmlNodePtr node;\n  xmlDocPtr doc;\n  xmlDtdPtr dtd;\n\n  Data_Get_Struct(self, xmlNode, node);\n\n  doc = node-&gt;doc;\n\n  if(doc-&gt;extSubset)\n    rb_raise(rb_eRuntimeError, \"Document already has an external subset\");\n\n  dtd = xmlNewDtd(\n      doc,\n      NIL_P(name)        ? NULL : (const xmlChar *)StringValuePtr(name),\n      NIL_P(external_id) ? NULL : (const xmlChar *)StringValuePtr(external_id),\n      NIL_P(system_id)   ? NULL : (const xmlChar *)StringValuePtr(system_id)\n  );\n\n  if(!dtd) return Qnil;\n\n  return Nokogiri_wrap_xml_node(Qnil, (xmlNodePtr)dtd);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-create_internal_subset\"> <span class=\"method-callseq\"> create_internal_subset(name, external_id, system_id) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create the internal subset of a document.</p> <pre class=\"ruby\">doc.create_internal_subset(\"chapter\", \"-//OASIS//DTD DocBook XML//EN\", \"chapter.dtd\")\n# =&gt; &lt;!DOCTYPE chapter PUBLIC \"-//OASIS//DTD DocBook XML//EN\" \"chapter.dtd\"&gt;\n\ndoc.create_internal_subset(\"chapter\", nil, \"chapter.dtd\")\n# =&gt; &lt;!DOCTYPE chapter SYSTEM \"chapter.dtd\"&gt;\n</pre> <div class=\"method-source-code\" id=\"create_internal_subset-source\"> <pre class=\"c\">static VALUE create_internal_subset(VALUE self, VALUE name, VALUE external_id, VALUE system_id)\n{\n  xmlNodePtr node;\n  xmlDocPtr doc;\n  xmlDtdPtr dtd;\n\n  Data_Get_Struct(self, xmlNode, node);\n\n  doc = node-&gt;doc;\n\n  if(xmlGetIntSubset(doc))\n    rb_raise(rb_eRuntimeError, \"Document already has an internal subset\");\n\n  dtd = xmlCreateIntSubset(\n      doc,\n      NIL_P(name)        ? NULL : (const xmlChar *)StringValuePtr(name),\n      NIL_P(external_id) ? NULL : (const xmlChar *)StringValuePtr(external_id),\n      NIL_P(system_id)   ? NULL : (const xmlChar *)StringValuePtr(system_id)\n  );\n\n  if(!dtd) return Qnil;\n\n  return Nokogiri_wrap_xml_node(Qnil, (xmlNodePtr)dtd);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-css\"> <span class=\"method-callseq\"> css *rules, [namespace-bindings, custom-pseudo-class] </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Search this node for CSS <code>rules</code>. <code>rules</code> must be one or more CSS selectors. For example:</p> <pre>node.css('title')\nnode.css('body h1.bold')\nnode.css('div + p.green', 'div#one')</pre> <p>A hash of namespace bindings may be appended. For example:</p> <pre class=\"ruby\">node.css('bike|tire', {'bike' =&gt; 'http://schwinn.com/'})\n</pre> <p>Custom CSS pseudo classes may also be defined. To define custom pseudo classes, create a class and implement the custom pseudo class you want defined. The first argument to the method will be the current matching <a href=\"nodeset\">NodeSet</a>. Any other arguments are ones that you pass in. For example:</p> <pre class=\"ruby\">node.css('title:regex(\"\\w+\")', Class.new {\n  def regex node_set, regex\n    node_set.find_all { |node| node['some_attribute'] =~ /#{regex}/ }\n  end\n}.new)\n</pre> <p>Note that the CSS query string is case-sensitive with regards to your document type. That is, if you're looking for “H1” in an HTML document, you'll never find anything, since HTML tags will match only lowercase CSS queries. However, “H1” might be found in an <a href=\"../xml\">XML</a> document, where tags names are case-sensitive (e.g., “H1” is distinct from “h1”).</p> <div class=\"method-source-code\" id=\"css-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 205\ndef css *rules\n  rules, handler, ns, binds = extract_params(rules)\n\n  prefix = \"#{implied_xpath_context}/\"\n\n  rules = rules.map { |rule|\n    CSS.xpath_for(rule, :prefix =&gt; prefix, :ns =&gt; ns)\n  }.flatten.uniq + [ns, handler, binds].compact\n\n  xpath(*rules)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-css_path\"> <span class=\"method-name\">css_path</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the path to this node as a CSS expression</p> <div class=\"method-source-code\" id=\"css_path-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 658\ndef css_path\n  path.split(/\\//).map { |part|\n    part.length == 0 ? nil : part.gsub(/\\[(\\d+)\\]/, ':nth-of-type(\\1)')\n  }.compact.join(' &gt; ')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-decorate-21\"> <span class=\"method-name\">decorate!</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Decorate this node with the decorators set up in this node's <a href=\"document\">Document</a></p> <div class=\"method-source-code\" id=\"decorate-21-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 89\ndef decorate!\n  document.decorate(self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-default_namespace-3D\"> <span class=\"method-name\">default_namespace=</span><span class=\"method-args\">(url)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Adds a default namespace supplied as a string <code>url</code> href, to self. The consequence is as an xmlns attribute with supplied argument were present in parsed <a href=\"../xml\">XML</a>. A default namespace set with this method will now show up in <a href=\"node#method-i-attributes\">attributes</a>, but when this node is serialized to <a href=\"../xml\">XML</a> an “xmlns” attribute will appear. See also <a href=\"node#method-i-namespace\">namespace</a> and <a href=\"node#method-i-namespace-3D\">namespace=</a></p> <div class=\"method-source-code\" id=\"default_namespace-3D-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 693\ndef default_namespace= url\n  add_namespace_definition(nil, url)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-delete\"> <span class=\"method-name\">delete</span><span class=\"method-args\">(name)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-remove_attribute\">remove_attribute</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-description\"> <span class=\"method-name\">description</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Fetch the <a href=\"../html/elementdescription\">Nokogiri::HTML::ElementDescription</a> for this node. Returns nil on <a href=\"../xml\">XML</a> documents and on unknown tags.</p> <div class=\"method-source-code\" id=\"description-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 627\ndef description\n  return nil if document.xml?\n  Nokogiri::HTML::ElementDescription[name]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-do_xinclude\"> <span class=\"method-name\">do_xinclude</span><span class=\"method-args\">(options = XML::ParseOptions::DEFAULT_XML) { |options| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Do xinclude substitution on the subtree below node. If given a block, a <a href=\"parseoptions\">Nokogiri::XML::ParseOptions</a> object initialized from <code>options</code>, will be passed to it, allowing more convenient modification of the parser options.</p> <div class=\"method-source-code\" id=\"do_xinclude-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 877\ndef do_xinclude options = XML::ParseOptions::DEFAULT_XML, &amp;block\n  options = Nokogiri::XML::ParseOptions.new(options) if Fixnum === options\n\n  # give options to user\n  yield options if block_given?\n\n  # call c extension\n  process_xincludes(options.to_i)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-document\"> <span class=\"method-callseq\"> document </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the document for this <a href=\"node\">Node</a></p> <div class=\"method-source-code\" id=\"document-source\"> <pre class=\"c\">static VALUE document(VALUE self)\n{\n  xmlNodePtr node;\n  Data_Get_Struct(self, xmlNode, node);\n  return DOC_RUBY_OBJECT(node-&gt;doc);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-document-3F\"> <span class=\"method-name\">document?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if this is a <a href=\"document\">Document</a></p> <div class=\"method-source-code\" id=\"document-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 605\ndef document?\n  is_a? XML::Document\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-dup\"> <span class=\"method-callseq\"> dup </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Copy this node. An optional depth may be passed in, but it defaults to a deep copy. 0 is a shallow copy, 1 is a deep copy.</p> <div class=\"method-source-code\" id=\"dup-source\"> <pre class=\"c\">static VALUE duplicate_node(int argc, VALUE *argv, VALUE self)\n{\n  VALUE level;\n  xmlNodePtr node, dup;\n\n  if(rb_scan_args(argc, argv, \"01\", &amp;level) == 0)\n    level = INT2NUM((long)1);\n\n  Data_Get_Struct(self, xmlNode, node);\n\n  dup = xmlDocCopyNode(node, node-&gt;doc, (int)NUM2INT(level));\n  if(dup == NULL) return Qnil;\n\n  nokogiri_root_node(dup);\n\n  return Nokogiri_wrap_xml_node(rb_obj_class(self), dup);\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-clone\">clone</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-each\"> <span class=\"method-name\">each</span><span class=\"method-args\">() { |node_name, value| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Iterate over each attribute name and value pair for this <a href=\"node\">Node</a>.</p> <div class=\"method-source-code\" id=\"each-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 479\ndef each\n  attribute_nodes.each { |node|\n    yield [node.node_name, node.value]\n  }\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-elem-3F\"> <span class=\"method-name\">elem?</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-element-3F\">element?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-element-3F\"> <span class=\"method-name\">element?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if this is an <a href=\"element\">Element</a> node</p> <div class=\"method-source-code\" id=\"element-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 640\ndef element?\n  type == ELEMENT_NODE\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-elem-3F\">elem?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-element_children\"> <span class=\"method-callseq\"> element_children </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the list of children for this node as a <a href=\"nodeset\">NodeSet</a>. All nodes will be element nodes.</p> <p>Example:</p> <pre class=\"ruby\">@doc.root.element_children.all? { |x| x.element? } # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"element_children-source\"> <pre class=\"c\">static VALUE element_children(VALUE self)\n{\n  xmlNodePtr node;\n  xmlNodePtr child;\n  xmlNodeSetPtr set;\n  VALUE document;\n  VALUE node_set;\n\n  Data_Get_Struct(self, xmlNode, node);\n\n  child = xmlFirstElementChild(node);\n  set = xmlXPathNodeSetCreate(child);\n\n  document = DOC_RUBY_OBJECT(node-&gt;doc);\n\n  if(!child) return Nokogiri_wrap_xml_node_set(set, document);\n\n  child = xmlNextElementSibling(child);\n  while(NULL != child) {\n    xmlXPathNodeSetAddUnique(set, child);\n    child = xmlNextElementSibling(child);\n  }\n\n  node_set = Nokogiri_wrap_xml_node_set(set, document);\n\n  return node_set;\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-elements\">elements</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-elements\"> <span class=\"method-name\">elements</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-element_children\">element_children</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-encode_special_chars\"> <span class=\"method-callseq\"> encode_special_chars(string) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Encode any special characters in <code>string</code></p> <div class=\"method-source-code\" id=\"encode_special_chars-source\"> <pre class=\"c\">static VALUE encode_special_chars(VALUE self, VALUE string)\n{\n  xmlNodePtr node;\n  xmlChar *encoded;\n  VALUE encoded_str;\n\n  Data_Get_Struct(self, xmlNode, node);\n  encoded = xmlEncodeSpecialChars(\n      node-&gt;doc,\n      (const xmlChar *)StringValuePtr(string)\n  );\n\n  encoded_str = NOKOGIRI_STR_NEW2(encoded);\n  xmlFree(encoded);\n\n  return encoded_str;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-external_subset\"> <span class=\"method-callseq\"> external_subset </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the external subset</p> <div class=\"method-source-code\" id=\"external_subset-source\"> <pre class=\"c\">static VALUE external_subset(VALUE self)\n{\n  xmlNodePtr node;\n  xmlDocPtr doc;\n  xmlDtdPtr dtd;\n\n  Data_Get_Struct(self, xmlNode, node);\n\n  if(!node-&gt;doc) return Qnil;\n\n  doc = node-&gt;doc;\n  dtd = doc-&gt;extSubset;\n\n  if(!dtd) return Qnil;\n\n  return Nokogiri_wrap_xml_node(Qnil, (xmlNodePtr)dtd);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-first_element_child\"> <span class=\"method-callseq\"> first_element_child </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the first child node of this node that is an element.</p> <p>Example:</p> <pre class=\"ruby\">@doc.root.first_element_child.element? # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"first_element_child-source\"> <pre class=\"c\">static VALUE first_element_child(VALUE self)\n{\n  xmlNodePtr node, child;\n  Data_Get_Struct(self, xmlNode, node);\n\n  child = xmlFirstElementChild(node);\n  if(!child) return Qnil;\n\n  return Nokogiri_wrap_xml_node(Qnil, child);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fragment\"> <span class=\"method-name\">fragment</span><span class=\"method-args\">(tags)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a <a href=\"documentfragment\">DocumentFragment</a> containing <code>tags</code> that is relative to <em>this</em> context node.</p> <div class=\"method-source-code\" id=\"fragment-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 501\ndef fragment tags\n  type = document.html? ? Nokogiri::HTML : Nokogiri::XML\n  type::DocumentFragment.new(document, tags, self)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fragment-3F\"> <span class=\"method-name\">fragment?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if this is a <a href=\"documentfragment\">DocumentFragment</a></p> <div class=\"method-source-code\" id=\"fragment-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 620\ndef fragment?\n  type == DOCUMENT_FRAG_NODE\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-get_attribute\"> <span class=\"method-name\">get_attribute</span><span class=\"method-args\">(name)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-5B-5D\">[]</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-has_attribute-3F\"> <span class=\"method-name\">has_attribute?</span><span class=\"method-args\">(p1)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-key-3F\">key?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-html-3F\"> <span class=\"method-name\">html?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if this is an <a href=\"../html/document\">HTML::Document</a> node</p> <div class=\"method-source-code\" id=\"html-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 600\ndef html?\n  type == HTML_DOCUMENT_NODE\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inner_html\"> <span class=\"method-name\">inner_html</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the <a href=\"node#method-i-inner_html\">#inner_html</a> for this node's <a href=\"node#method-i-children\">#children</a></p> <div class=\"method-source-code\" id=\"inner_html-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 653\ndef inner_html *args\n  children.map { |x| x.to_html(*args) }.join\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inner_html-3D\"> <span class=\"method-name\">inner_html=</span><span class=\"method-args\">(node_or_tags)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the inner html for this <a href=\"node\">Node</a> to <code>node_or_tags</code> <code>node_or_tags</code> can be a <a href=\"node\">Nokogiri::XML::Node</a>, a <a href=\"documentfragment\">Nokogiri::XML::DocumentFragment</a>, or a string containing markup.</p> <p>Returns self.</p> <p>Also see related method <code>children=</code></p> <div class=\"method-source-code\" id=\"inner_html-3D-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 365\ndef inner_html= node_or_tags\n  self.children = node_or_tags\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-inner_text\"> <span class=\"method-name\">inner_text</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-content\">content</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-internal_subset\"> <span class=\"method-callseq\"> internal_subset </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the internal subset</p> <div class=\"method-source-code\" id=\"internal_subset-source\"> <pre class=\"c\">static VALUE internal_subset(VALUE self)\n{\n  xmlNodePtr node;\n  xmlDocPtr doc;\n  xmlDtdPtr dtd;\n\n  Data_Get_Struct(self, xmlNode, node);\n\n  if(!node-&gt;doc) return Qnil;\n\n  doc = node-&gt;doc;\n  dtd = xmlGetIntSubset(doc);\n\n  if(!dtd) return Qnil;\n\n  return Nokogiri_wrap_xml_node(Qnil, (xmlNodePtr)dtd);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-key-3F\"> <span class=\"method-callseq\"> key?(attribute) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if <code>attribute</code> is set</p> <div class=\"method-source-code\" id=\"key-3F-source\"> <pre class=\"c\">static VALUE key_eh(VALUE self, VALUE attribute)\n{\n  xmlNodePtr node;\n  Data_Get_Struct(self, xmlNode, node);\n  if(xmlHasProp(node, (xmlChar *)StringValuePtr(attribute)))\n    return Qtrue;\n  return Qfalse;\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-has_attribute-3F\">has_attribute?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-keys\"> <span class=\"method-name\">keys</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the attribute names for this <a href=\"node\">Node</a>.</p> <div class=\"method-source-code\" id=\"keys-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 473\ndef keys\n  attribute_nodes.map { |node| node.node_name }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-last_element_child\"> <span class=\"method-callseq\"> last_element_child </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the last child node of this node that is an element.</p> <p>Example:</p> <pre class=\"ruby\">@doc.root.last_element_child.element? # =&gt; true\n</pre> <div class=\"method-source-code\" id=\"last_element_child-source\"> <pre class=\"c\">static VALUE last_element_child(VALUE self)\n{\n  xmlNodePtr node, child;\n  Data_Get_Struct(self, xmlNode, node);\n\n  child = xmlLastElementChild(node);\n  if(!child) return Qnil;\n\n  return Nokogiri_wrap_xml_node(Qnil, child);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-line\"> <span class=\"method-callseq\"> line </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the line for this <a href=\"node\">Node</a></p> <div class=\"method-source-code\" id=\"line-source\"> <pre class=\"c\">static VALUE line(VALUE self)\n{\n  xmlNodePtr node;\n  Data_Get_Struct(self, xmlNode, node);\n\n  return INT2NUM(xmlGetLineNo(node));\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-matches-3F\"> <span class=\"method-name\">matches?</span><span class=\"method-args\">(selector)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if this <a href=\"node\">Node</a> matches <code>selector</code></p> <div class=\"method-source-code\" id=\"matches-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 494\ndef matches? selector\n  ancestors.last.search(selector).include?(self)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-name\"> <span class=\"method-name\">name</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-node_name\">node_name</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-name-3D\"> <span class=\"method-name\">name=</span><span class=\"method-args\">(p1)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-node_name-3D\">node_name=</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-namespace\"> <span class=\"method-callseq\"> namespace() </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>returns the namespace of the element or attribute node as a <a href=\"namespace\">Namespace</a> object, or nil if there is no namespace for the element or attribute.</p> <div class=\"method-source-code\" id=\"namespace-source\"> <pre class=\"c\">static VALUE namespace(VALUE self)\n{\n  xmlNodePtr node ;\n  Data_Get_Struct(self, xmlNode, node);\n\n  if (node-&gt;ns)\n    return Nokogiri_wrap_xml_namespace(node-&gt;doc, node-&gt;ns);\n\n  return Qnil ;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-namespace-3D\"> <span class=\"method-name\">namespace=</span><span class=\"method-args\">(ns)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the default namespace on this node (as would be defined with an “xmlns=” attribute in <a href=\"../xml\">XML</a> source), as a <a href=\"namespace\">Namespace</a> object <code>ns</code>. Note that a <a href=\"namespace\">Namespace</a> added this way will NOT be serialized as an xmlns attribute for this node. You probably want <a href=\"node#method-i-default_namespace-3D\">default_namespace=</a> instead, or perhaps <a href=\"node#method-i-add_namespace_definition\">add_namespace_definition</a> with a nil prefix argument.</p> <div class=\"method-source-code\" id=\"namespace-3D-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 704\ndef namespace= ns\n  return set_namespace(ns) unless ns\n\n  unless Nokogiri::XML::Namespace === ns\n    raise TypeError, \"#{ns.class} can't be coerced into Nokogiri::XML::Namespace\"\n  end\n  if ns.document != document\n    raise ArgumentError, 'namespace must be declared on the same document'\n  end\n\n  set_namespace ns\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-namespace_definitions\"> <span class=\"method-callseq\"> namespace_definitions() </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>returns namespaces defined on self element directly, as an array of <a href=\"namespace\">Namespace</a> objects. Includes both a default namespace (as in“xmlns=”), and prefixed namespaces (as in “xmlns:prefix=”).</p> <div class=\"method-source-code\" id=\"namespace_definitions-source\"> <pre class=\"c\">static VALUE namespace_definitions(VALUE self)\n{\n  /* this code in the mode of xmlHasProp() */\n  xmlNodePtr node ;\n  VALUE list;\n  xmlNsPtr ns;\n\n  Data_Get_Struct(self, xmlNode, node);\n\n  list = rb_ary_new();\n\n  ns = node-&gt;nsDef;\n\n  if(!ns) return list;\n\n  while(NULL != ns) {\n    rb_ary_push(list, Nokogiri_wrap_xml_namespace(node-&gt;doc, ns));\n    ns = ns-&gt;next;\n  }\n\n  return list;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-namespace_scopes\"> <span class=\"method-callseq\"> namespace_scopes() </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>returns namespaces in scope for self – those defined on self element directly or any ancestor node – as an array of <a href=\"namespace\">Namespace</a> objects. Default namespaces (“xmlns=” style) for self are included in this array; Default namespaces for ancestors, however, are not. See also <a href=\"node#method-i-namespaces\">namespaces</a></p> <div class=\"method-source-code\" id=\"namespace_scopes-source\"> <pre class=\"c\">static VALUE namespace_scopes(VALUE self)\n{\n  xmlNodePtr node ;\n  VALUE list;\n  xmlNsPtr *ns_list;\n  int j;\n\n  Data_Get_Struct(self, xmlNode, node);\n\n  list = rb_ary_new();\n  ns_list = xmlGetNsList(node-&gt;doc, node);\n\n  if(!ns_list) return list;\n\n  for (j = 0 ; ns_list[j] != NULL ; ++j) {\n    rb_ary_push(list, Nokogiri_wrap_xml_namespace(node-&gt;doc, ns_list[j]));\n  }\n\n  xmlFree(ns_list);\n  return list;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-namespaced_key-3F\"> <span class=\"method-callseq\"> namespaced_key?(attribute, namespace) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if <code>attribute</code> is set with <code>namespace</code></p> <div class=\"method-source-code\" id=\"namespaced_key-3F-source\"> <pre class=\"c\">static VALUE namespaced_key_eh(VALUE self, VALUE attribute, VALUE namespace)\n{\n  xmlNodePtr node;\n  Data_Get_Struct(self, xmlNode, node);\n  if(xmlHasNsProp(node, (xmlChar *)StringValuePtr(attribute),\n        NIL_P(namespace) ? NULL : (xmlChar *)StringValuePtr(namespace)))\n    return Qtrue;\n  return Qfalse;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-namespaces\"> <span class=\"method-name\">namespaces</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a Hash of {prefix =&gt; value} for all namespaces on this node and its ancestors.</p> <p>This method returns the same namespaces as <a href=\"node#method-i-namespace_scopes\">namespace_scopes</a>.</p> <p>Returns namespaces in scope for self – those defined on self element directly or any ancestor node – as a Hash of attribute-name/value pairs. Note that the keys in this hash <a href=\"../xml\">XML</a> attributes that would be used to define this namespace, such as “xmlns:prefix”, not just the prefix. Default namespace set on self will be included with key “xmlns”. However, default namespaces set on ancestor will NOT be, even if self has no explicit default namespace.</p> <div class=\"method-source-code\" id=\"namespaces-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 571\ndef namespaces\n  Hash[namespace_scopes.map { |nd|\n    key = ['xmlns', nd.prefix].compact.join(':')\n    if RUBY_VERSION &gt;= '1.9' &amp;&amp; document.encoding\n      begin\n        key.force_encoding document.encoding\n      rescue ArgumentError\n      end\n    end\n    [key, nd.href]\n  }]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-native_content-3D\"> <span class=\"method-callseq\"> content= </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the content for this <a href=\"node\">Node</a></p> <div class=\"method-source-code\" id=\"native_content-3D-source\"> <pre class=\"c\">static VALUE native_content(VALUE self, VALUE content)\n{\n  xmlNodePtr node, child, next ;\n  Data_Get_Struct(self, xmlNode, node);\n\n  child = node-&gt;children;\n  while (NULL != child) {\n    next = child-&gt;next ;\n    xmlUnlinkNode(child) ;\n    nokogiri_root_node(child);\n    child = next ;\n  }\n\n  xmlNodeSetContent(node, (xmlChar *)StringValuePtr(content));\n  return content;\n}</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-next\"> <span class=\"method-name\">next</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-next_sibling\">next_sibling</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-next_element\"> <span class=\"method-callseq\"> next_element </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the next <a href=\"element\">Nokogiri::XML::Element</a> type sibling node.</p> <div class=\"method-source-code\" id=\"next_element-source\"> <pre class=\"c\">static VALUE next_element(VALUE self)\n{\n  xmlNodePtr node, sibling;\n  Data_Get_Struct(self, xmlNode, node);\n\n  sibling = xmlNextElementSibling(node);\n  if(!sibling) return Qnil;\n\n  return Nokogiri_wrap_xml_node(Qnil, sibling);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-next_sibling\"> <span class=\"method-callseq\"> next_sibling </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the next sibling node</p> <div class=\"method-source-code\" id=\"next_sibling-source\"> <pre class=\"c\">static VALUE next_sibling(VALUE self)\n{\n  xmlNodePtr node, sibling;\n  Data_Get_Struct(self, xmlNode, node);\n\n  sibling = node-&gt;next;\n  if(!sibling) return Qnil;\n\n  return Nokogiri_wrap_xml_node(Qnil, sibling) ;\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-next\">next</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-node_name\"> <span class=\"method-callseq\"> name </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the name for this <a href=\"node\">Node</a></p> <div class=\"method-source-code\" id=\"node_name-source\"> <pre class=\"c\">static VALUE get_name(VALUE self)\n{\n  xmlNodePtr node;\n  Data_Get_Struct(self, xmlNode, node);\n  if(node-&gt;name)\n    return NOKOGIRI_STR_NEW2(node-&gt;name);\n  return Qnil;\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-name\">name</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-node_name-3D\"> <span class=\"method-callseq\"> name=(new_name) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the name for this <a href=\"node\">Node</a></p> <div class=\"method-source-code\" id=\"node_name-3D-source\"> <pre class=\"c\">static VALUE set_name(VALUE self, VALUE new_name)\n{\n  xmlNodePtr node;\n  Data_Get_Struct(self, xmlNode, node);\n  xmlNodeSetName(node, (xmlChar*)StringValuePtr(new_name));\n  return new_name;\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-name-3D\">name=</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-node_type\"> <span class=\"method-callseq\"> node_type </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the type for this <a href=\"node\">Node</a></p> <div class=\"method-source-code\" id=\"node_type-source\"> <pre class=\"c\">static VALUE node_type(VALUE self)\n{\n  xmlNodePtr node;\n  Data_Get_Struct(self, xmlNode, node);\n  return INT2NUM((long)node-&gt;type);\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-type\">type</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parent\"> <span class=\"method-callseq\"> parent </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the parent <a href=\"node\">Node</a> for this <a href=\"node\">Node</a></p> <div class=\"method-source-code\" id=\"parent-source\"> <pre class=\"c\">static VALUE get_parent(VALUE self)\n{\n  xmlNodePtr node, parent;\n  Data_Get_Struct(self, xmlNode, node);\n\n  parent = node-&gt;parent;\n  if(!parent) return Qnil;\n\n  return Nokogiri_wrap_xml_node(Qnil, parent) ;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parent-3D\"> <span class=\"method-name\">parent=</span><span class=\"method-args\">(parent_node)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the parent <a href=\"node\">Node</a> for this <a href=\"node\">Node</a></p> <div class=\"method-source-code\" id=\"parent-3D-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 552\ndef parent= parent_node\n  parent_node.add_child(self)\n  parent_node\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse\"> <span class=\"method-name\">parse</span><span class=\"method-args\">(string_or_io, options = nil) { |options| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse <code>string_or_io</code> as a document fragment within the context of <strong>this</strong> node. Returns a <a href=\"nodeset\">XML::NodeSet</a> containing the nodes parsed from <code>string_or_io</code>.</p> <div class=\"method-source-code\" id=\"parse-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 510\ndef parse string_or_io, options = nil\n  ##\n  # When the current node is unparented and not an element node, use the\n  # document as the parsing context instead. Otherwise, the in-context\n  # parser cannot find an element or a document node.\n  # Document Fragments are also not usable by the in-context parser.\n  if !element? &amp;&amp; !document? &amp;&amp; (!parent || parent.fragment?)\n    return document.parse(string_or_io, options)\n  end\n\n  options ||= (document.html? ? ParseOptions::DEFAULT_HTML : ParseOptions::DEFAULT_XML)\n  if Fixnum === options\n    options = Nokogiri::XML::ParseOptions.new(options)\n  end\n  # Give the options to the user\n  yield options if block_given?\n\n  contents = string_or_io.respond_to?(:read) ?\n    string_or_io.read :\n    string_or_io\n\n  return Nokogiri::XML::NodeSet.new(document) if contents.empty?\n\n  ##\n  # This is a horrible hack, but I don't care. See #313 for background.\n  error_count = document.errors.length\n  node_set = in_context(contents, options.to_i)\n  if node_set.empty? and document.errors.length &gt; error_count and options.recover?\n    fragment = Nokogiri::HTML::DocumentFragment.parse contents\n    node_set = fragment.children\n  end\n  node_set\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-path\"> <span class=\"method-callseq\"> path </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the path associated with this <a href=\"node\">Node</a></p> <div class=\"method-source-code\" id=\"path-source\"> <pre class=\"c\">static VALUE path(VALUE self)\n{\n  xmlNodePtr node;\n  xmlChar *path ;\n  VALUE rval;\n\n  Data_Get_Struct(self, xmlNode, node);\n\n  path = xmlGetNodePath(node);\n  rval = NOKOGIRI_STR_NEW2(path);\n  xmlFree(path);\n  return rval ;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-pointer_id\"> <span class=\"method-callseq\"> pointer_id </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the internal pointer number</p> <div class=\"method-source-code\" id=\"pointer_id-source\"> <pre class=\"c\">static VALUE pointer_id(VALUE self)\n{\n  xmlNodePtr node;\n  Data_Get_Struct(self, xmlNode, node);\n\n  return INT2NUM((long)(node));\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prepend_child\"> <span class=\"method-name\">prepend_child</span><span class=\"method-args\">(node_or_tags)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Add <code>node_or_tags</code> as the first child of this <a href=\"node\">Node</a>. <code>node_or_tags</code> can be a <a href=\"node\">Nokogiri::XML::Node</a>, a ::DocumentFragment, a ::NodeSet, or a string containing markup.</p> <p>Returns the reparented node (if <code>node_or_tags</code> is a <a href=\"node\">Node</a>), or <a href=\"nodeset\">NodeSet</a> (if <code>node_or_tags</code> is a <a href=\"documentfragment\">DocumentFragment</a>, <a href=\"nodeset\">NodeSet</a>, or string).</p> <p>Also see related method <code>add_child</code>.</p> <div class=\"method-source-code\" id=\"prepend_child-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 287\ndef prepend_child node_or_tags\n  if first = children.first\n    # Mimic the error add_child would raise.\n    raise RuntimeError, \"Document already has a root node\" if document? &amp;&amp; !node_or_tags.processing_instruction?\n    first.__send__(:add_sibling, :previous, node_or_tags)\n  else\n    add_child(node_or_tags)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-previous\"> <span class=\"method-name\">previous</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-previous_sibling\">previous_sibling</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-previous-3D\"> <span class=\"method-name\">previous=</span><span class=\"method-args\">(node_or_tags)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-add_previous_sibling\">add_previous_sibling</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-previous_element\"> <span class=\"method-callseq\"> previous_element </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the previous <a href=\"element\">Nokogiri::XML::Element</a> type sibling node.</p> <div class=\"method-source-code\" id=\"previous_element-source\"> <pre class=\"c\">static VALUE previous_element(VALUE self)\n{\n  xmlNodePtr node, sibling;\n  Data_Get_Struct(self, xmlNode, node);\n\n  /*\n   *  note that we don't use xmlPreviousElementSibling here because it's buggy pre-2.7.7.\n   */\n  sibling = node-&gt;prev;\n  if(!sibling) return Qnil;\n\n  while(sibling &amp;&amp; sibling-&gt;type != XML_ELEMENT_NODE)\n    sibling = sibling-&gt;prev;\n\n  return sibling ? Nokogiri_wrap_xml_node(Qnil, sibling) : Qnil ;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-previous_sibling\"> <span class=\"method-callseq\"> previous_sibling </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the previous sibling node</p> <div class=\"method-source-code\" id=\"previous_sibling-source\"> <pre class=\"c\">static VALUE previous_sibling(VALUE self)\n{\n  xmlNodePtr node, sibling;\n  Data_Get_Struct(self, xmlNode, node);\n\n  sibling = node-&gt;prev;\n  if(!sibling) return Qnil;\n\n  return Nokogiri_wrap_xml_node(Qnil, sibling);\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-previous\">previous</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-processing_instruction-3F\"> <span class=\"method-name\">processing_instruction?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if this is a <a href=\"processinginstruction\">ProcessingInstruction</a> node</p> <div class=\"method-source-code\" id=\"processing_instruction-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 610\ndef processing_instruction?\n  type == PI_NODE\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-read_only-3F\"> <span class=\"method-name\">read_only?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this a read only node?</p> <div class=\"method-source-code\" id=\"read_only-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 634\ndef read_only?\n  # According to gdome2, these are read-only node types\n  [NOTATION_NODE, ENTITY_NODE, ENTITY_DECL].include?(type)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-remove\"> <span class=\"method-name\">remove</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-unlink\">unlink</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_attribute\"> <span class=\"method-name\">remove_attribute</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Remove the attribute named <code>name</code></p> <div class=\"method-source-code\" id=\"remove_attribute-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 487\ndef remove_attribute name\n  attributes[name].remove if key? name\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-delete\">delete</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-replace\"> <span class=\"method-name\">replace</span><span class=\"method-args\">(node_or_tags)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Replace this <a href=\"node\">Node</a> with <code>node_or_tags</code>. <code>node_or_tags</code> can be a <a href=\"node\">Nokogiri::XML::Node</a>, a ::DocumentFragment, a ::NodeSet, or a string containing markup.</p> <p>Returns the reparented node (if <code>node_or_tags</code> is a <a href=\"node\">Node</a>), or <a href=\"nodeset\">NodeSet</a> (if <code>node_or_tags</code> is a <a href=\"documentfragment\">DocumentFragment</a>, <a href=\"nodeset\">NodeSet</a>, or string).</p> <p>Also see related method <code>swap</code>.</p> <div class=\"method-source-code\" id=\"replace-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 395\ndef replace node_or_tags\n  # We cannot replace a text node directly, otherwise libxml will return\n  # an internal error at parser.c:13031, I don't know exactly why\n  # libxml is trying to find a parent node that is an element or document\n  # so I can't tell if this is bug in libxml or not. issue #775.\n  if text?\n    replacee = Nokogiri::XML::Node.new 'dummy', document\n    add_previous_sibling_node replacee\n    unlink\n    return replacee.replace node_or_tags\n  end\n\n  node_or_tags = coerce(node_or_tags)\n\n  if node_or_tags.is_a?(XML::NodeSet)\n    node_or_tags.each { |n| add_previous_sibling n }\n    unlink\n  else\n    replace_node node_or_tags\n  end\n  node_or_tags\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-search\"> <span class=\"method-name\">search</span><span class=\"method-args\">(*paths)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Search this node for <code>paths</code>. <code>paths</code> can be <a href=\"xpath\">XPath</a> or CSS, and an optional hash of namespaces may be appended. See <a href=\"node#method-i-xpath\">#xpath</a> and <a href=\"node#method-i-css\">#css</a>.</p> <div class=\"method-source-code\" id=\"search-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 97\ndef search *paths\n  # TODO use         paths, handler, ns, binds = extract_params(paths)\n  ns = paths.last.is_a?(Hash) ? paths.pop :\n    (document.root ? document.root.namespaces : {})\n\n  prefix = \"#{implied_xpath_context}/\"\n\n  xpath(*(paths.map { |path|\n    path = path.to_s\n    path =~ /^(\\.\\/|\\/|\\.\\.|\\.$)/ ? path : CSS.xpath_for(\n      path,\n      :prefix =&gt; prefix,\n      :ns     =&gt; ns\n    )\n  }.flatten.uniq) + [ns])\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-2F\">/</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-serialize\"> <span class=\"method-name\">serialize</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Serialize <a href=\"node\">Node</a> using <code>options</code>. Save options can also be set using a block. See <a href=\"node/saveoptions\">SaveOptions</a>.</p> <p>These two statements are equivalent:</p> <pre class=\"ruby\">node.serialize(:encoding =&gt; 'UTF-8', :save_with =&gt; FORMAT | AS_XML)\n</pre> <p>or</p> <pre class=\"ruby\">node.serialize(:encoding =&gt; 'UTF-8') do |config|\n  config.format.as_xml\nend\n</pre> <div class=\"method-source-code\" id=\"serialize-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 752\ndef serialize *args, &amp;block\n  options = args.first.is_a?(Hash) ? args.shift : {\n    :encoding   =&gt; args[0],\n    :save_with  =&gt; args[1]\n  }\n\n  encoding = options[:encoding] || document.encoding\n  options[:encoding] = encoding\n\n  outstring = \"\"\n  if encoding &amp;&amp; outstring.respond_to?(:force_encoding)\n    outstring.force_encoding(Encoding.find(encoding))\n  end\n  io = StringIO.new(outstring)\n  write_to io, options, &amp;block\n  io.string\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-set_attribute\"> <span class=\"method-name\">set_attribute</span><span class=\"method-args\">(name, value)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-5B-5D-3D\">[]=</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-swap\"> <span class=\"method-name\">swap</span><span class=\"method-args\">(node_or_tags)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Swap this <a href=\"node\">Node</a> for <code>node_or_tags</code> <code>node_or_tags</code> can be a <a href=\"node\">Nokogiri::XML::Node</a>, a ::DocumentFragment, a ::NodeSet, or a string containing markup.</p> <p>Returns self, to support chaining of calls.</p> <p>Also see related method <code>replace</code>.</p> <div class=\"method-source-code\" id=\"swap-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 425\ndef swap node_or_tags\n  replace node_or_tags\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-text\"> <span class=\"method-name\">text</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-to_str\">to_str</a> </div> <div class=\"aliases\"> Alias for: <a href=\"node#method-i-content\">content</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-text-3F\"> <span class=\"method-name\">text?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if this is a <a href=\"text\">Text</a> node</p> <div class=\"method-source-code\" id=\"text-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 615\ndef text?\n  type == TEXT_NODE\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_html\"> <span class=\"method-name\">to_html</span><span class=\"method-args\">(options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Serialize this <a href=\"node\">Node</a> to HTML</p> <pre>doc.to_html</pre> <p>See <a href=\"node#method-i-write_to\">#write_to</a> for a list of <code>options</code>. For formatted output, use <a href=\"node#method-i-to_xhtml\">#to_xhtml</a> instead.</p> <div class=\"method-source-code\" id=\"to_html-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 777\ndef to_html options = {}\n  to_format SaveOptions::DEFAULT_HTML, options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_s\"> <span class=\"method-name\">to_s</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Turn this node in to a string. If the document is HTML, this method returns html. If the document is <a href=\"../xml\">XML</a>, this method returns <a href=\"../xml\">XML</a>.</p> <div class=\"method-source-code\" id=\"to_s-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 648\ndef to_s\n  document.xml? ? to_xml : to_html\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_str\"> <span class=\"method-name\">to_str</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-text\">text</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_xhtml\"> <span class=\"method-name\">to_xhtml</span><span class=\"method-args\">(options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Serialize this <a href=\"node\">Node</a> to XHTML using <code>options</code></p> <pre class=\"ruby\">doc.to_xhtml(:indent =&gt; 5, :encoding =&gt; 'UTF-8')\n</pre> <p>See <a href=\"node#method-i-write_to\">#write_to</a> for a list of <code>options</code></p> <div class=\"method-source-code\" id=\"to_xhtml-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 798\ndef to_xhtml options = {}\n  to_format SaveOptions::DEFAULT_XHTML, options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_xml\"> <span class=\"method-name\">to_xml</span><span class=\"method-args\">(options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Serialize this <a href=\"node\">Node</a> to <a href=\"../xml\">XML</a> using <code>options</code></p> <pre class=\"ruby\">doc.to_xml(:indent =&gt; 5, :encoding =&gt; 'UTF-8')\n</pre> <p>See <a href=\"node#method-i-write_to\">#write_to</a> for a list of <code>options</code></p> <div class=\"method-source-code\" id=\"to_xml-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 787\ndef to_xml options = {}\n  options[:save_with] ||= SaveOptions::DEFAULT_XML\n  serialize(options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-traverse\"> <span class=\"method-name\">traverse</span><span class=\"method-args\">(&amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Yields self and all children to <code>block</code> recursively.</p> <div class=\"method-source-code\" id=\"traverse-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 719\ndef traverse &amp;block\n  children.each{|j| j.traverse(&amp;block) }\n  block.call(self)\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-type\"> <span class=\"method-name\">type</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"node#method-i-node_type\">node_type</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-unlink\"> <span class=\"method-callseq\"> unlink </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Unlink this node from its current context.</p> <div class=\"method-source-code\" id=\"unlink-source\"> <pre class=\"c\">static VALUE unlink_node(VALUE self)\n{\n  xmlNodePtr node;\n  Data_Get_Struct(self, xmlNode, node);\n  xmlUnlinkNode(node);\n  nokogiri_root_node(node);\n  return self;\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"node#method-i-remove\">remove</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-values\"> <span class=\"method-name\">values</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the attribute values for this <a href=\"node\">Node</a>.</p> <div class=\"method-source-code\" id=\"values-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 467\ndef values\n  attribute_nodes.map { |node| node.value }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-write_html_to\"> <span class=\"method-name\">write_html_to</span><span class=\"method-args\">(io, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Write <a href=\"node\">Node</a> as HTML to <code>io</code> with <code>options</code></p> <p>See <a href=\"node#method-i-write_to\">#write_to</a> for a list of <code>options</code></p> <div class=\"method-source-code\" id=\"write_html_to-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 841\ndef write_html_to io, options = {}\n  write_format_to SaveOptions::DEFAULT_HTML, io, options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-write_to\"> <span class=\"method-name\">write_to</span><span class=\"method-args\">(io, *options) { |config| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Write <a href=\"node\">Node</a> to <code>io</code> with <code>options</code>. <code>options</code> modify the output of this method. Valid options are:</p> <ul>\n<li> <p><code>:encoding</code> for changing the encoding</p> </li>\n<li> <p><code>:indent_text</code> the indentation text, defaults to one space</p> </li>\n<li> <p><code>:indent</code> the number of <code>:indent_text</code> to use, defaults to 2</p> </li>\n<li> <p><code>:save_with</code> a combination of <a href=\"node/saveoptions\">SaveOptions</a> constants.</p> </li>\n</ul> <p>To save with UTF-8 indented twice:</p> <pre class=\"ruby\">node.write_to(io, :encoding =&gt; 'UTF-8', :indent =&gt; 2)\n</pre> <p>To save indented with two dashes:</p> <pre class=\"ruby\">node.write_to(io, :indent_text =&gt; '-', :indent =&gt; 2\n</pre> <div class=\"method-source-code\" id=\"write_to-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 819\ndef write_to io, *options\n  options       = options.first.is_a?(Hash) ? options.shift : {}\n  encoding      = options[:encoding] || options[0]\n  if Nokogiri.jruby?\n    save_options  = options[:save_with] || options[1]\n    indent_times  = options[:indent] || 0\n  else\n    save_options  = options[:save_with] || options[1] || SaveOptions::FORMAT\n    indent_times  = options[:indent] || 2\n  end\n  indent_text   = options[:indent_text] || ' '\n\n  config = SaveOptions.new(save_options.to_i)\n  yield config if block_given?\n\n  native_write_to(io, encoding, indent_text * indent_times, config.options)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-write_xhtml_to\"> <span class=\"method-name\">write_xhtml_to</span><span class=\"method-args\">(io, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Write <a href=\"node\">Node</a> as XHTML to <code>io</code> with <code>options</code></p> <p>See <a href=\"node#method-i-write_to\">#write_to</a> for a list of <code>options</code></p> <div class=\"method-source-code\" id=\"write_xhtml_to-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 849\ndef write_xhtml_to io, options = {}\n  write_format_to SaveOptions::DEFAULT_XHTML, io, options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-write_xml_to\"> <span class=\"method-name\">write_xml_to</span><span class=\"method-args\">(io, options = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Write <a href=\"node\">Node</a> as <a href=\"../xml\">XML</a> to <code>io</code> with <code>options</code></p> <pre class=\"ruby\">doc.write_xml_to io, :encoding =&gt; 'UTF-8'\n</pre> <p>See <a href=\"node#method-i-write_to\">#write_to</a> for a list of options</p> <div class=\"method-source-code\" id=\"write_xml_to-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 859\ndef write_xml_to io, options = {}\n  options[:save_with] ||= SaveOptions::DEFAULT_XML\n  write_to io, options\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-xml-3F\"> <span class=\"method-name\">xml?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if this is an <a href=\"document\">XML::Document</a> node</p> <div class=\"method-source-code\" id=\"xml-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 595\ndef xml?\n  type == DOCUMENT_NODE\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-xpath\"> <span class=\"method-callseq\"> xpath *paths, [namespace-bindings, variable-bindings, custom-handler-class] </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Search this node for <a href=\"xpath\">XPath</a> <code>paths</code>. <code>paths</code> must be one or more <a href=\"xpath\">XPath</a> queries.</p> <pre>node.xpath('.//title')</pre> <p>A hash of namespace bindings may be appended. For example:</p> <pre class=\"ruby\">node.xpath('.//foo:name', {'foo' =&gt; 'http://example.org/'})\nnode.xpath('.//xmlns:name', node.root.namespaces)\n</pre> <p>A hash of variable bindings may also be appended to the namespace bindings. For example:</p> <pre class=\"ruby\">node.xpath('.//address[@domestic=$value]', nil, {:value =&gt; 'Yes'})\n</pre> <p>Custom <a href=\"xpath\">XPath</a> functions may also be defined. To define custom functions create a class and implement the function you want to define. The first argument to the method will be the current matching <a href=\"nodeset\">NodeSet</a>. Any other arguments are ones that you pass in. Note that this class may appear anywhere in the argument list. For example:</p> <pre class=\"ruby\">node.xpath('.//title[regex(., \"\\w+\")]', Class.new {\n  def regex node_set, regex\n    node_set.find_all { |node| node['some_attribute'] =~ /#{regex}/ }\n  end\n}.new)\n</pre> <div class=\"method-source-code\" id=\"xpath-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node.rb, line 145\ndef xpath *paths\n  return NodeSet.new(document) unless document\n\n  paths, handler, ns, binds = extract_params(paths)\n\n  sets = paths.map { |path|\n    ctx = XPathContext.new(self)\n    ctx.register_namespaces(ns)\n    path = path.gsub(/xmlns:/, ' :') unless Nokogiri.uses_libxml?\n\n    binds.each do |key,value|\n      ctx.register_variable key.to_s, value\n    end if binds\n\n    ctx.evaluate(path, handler)\n  }\n  return sets.first if sets.length == 1\n\n  NodeSet.new(document) do |combined|\n    sets.each do |set|\n      set.each do |node|\n        combined &lt;&lt; node\n      end\n    end\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/nodeset":"<h1 id=\"class-Nokogiri::XML::NodeSet\" class=\"class\"> class Nokogiri::XML::NodeSet </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n<dt>Included modules:</dt>\n\n</dl> <section class=\"description\"> <p>A <a href=\"nodeset\">NodeSet</a> contains a list of <a href=\"node\">Nokogiri::XML::Node</a> objects. Typically a <a href=\"nodeset\">NodeSet</a> is return as a result of searching a <a href=\"document\">Document</a> via <a href=\"node#method-i-css\">Nokogiri::XML::Node#css</a> or <a href=\"node#method-i-xpath\">Nokogiri::XML::Node#xpath</a></p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-document\"> <span class=\"method-name\">document</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>The <a href=\"document\">Document</a> this <a href=\"nodeset\">NodeSet</a> is associated with</p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(document, list = []) { |self| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a <a href=\"nodeset\">NodeSet</a> with <code>document</code> defaulting to <code>list</code></p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 14\ndef initialize document, list = []\n  @document = document\n  document.decorate(self)\n  list.each { |x| self &lt;&lt; x }\n  yield self if block_given?\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-25\"> <span class=\"method-name\">%</span><span class=\"method-args\">(path, ns = document.root ? document.root.namespaces : {})</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"nodeset#method-i-at\">at</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-26\"> <span class=\"method-callseq\"> &amp;(node_set) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set Intersection — Returns a new <a href=\"nodeset\">NodeSet</a> containing nodes common to the two NodeSets.</p> <div class=\"method-source-code\" id=\"26-source\"> <pre class=\"c\">static VALUE intersection(VALUE self, VALUE rb_other)\n{\n  nokogiriNodeSetTuple *tuple, *other;\n  xmlNodeSetPtr intersection;\n\n  if(!rb_obj_is_kind_of(rb_other, cNokogiriXmlNodeSet))\n    rb_raise(rb_eArgError, \"node_set must be a Nokogiri::XML::NodeSet\");\n\n  Data_Get_Struct(self, nokogiriNodeSetTuple, tuple);\n  Data_Get_Struct(rb_other, nokogiriNodeSetTuple, other);\n\n  intersection = xmlXPathIntersection(tuple-&gt;node_set, other-&gt;node_set);\n  return Nokogiri_wrap_xml_node_set(intersection, rb_iv_get(self, \"@document\"));\n}</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-2B\"> <span class=\"method-name\">+</span><span class=\"method-args\">(p1)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"nodeset#method-i-7C\">|</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-2D\"> <span class=\"method-callseq\"> -(node_set) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Difference - returns a new <a href=\"nodeset\">NodeSet</a> that is a copy of this <a href=\"nodeset\">NodeSet</a>, removing each item that also appears in <code>node_set</code></p> <div class=\"method-source-code\" id=\"2D-source\"> <pre class=\"c\">static VALUE minus(VALUE self, VALUE rb_other)\n{\n  nokogiriNodeSetTuple *tuple, *other;\n  xmlNodeSetPtr new;\n  int j ;\n\n  if(!rb_obj_is_kind_of(rb_other, cNokogiriXmlNodeSet))\n    rb_raise(rb_eArgError, \"node_set must be a Nokogiri::XML::NodeSet\");\n\n  Data_Get_Struct(self, nokogiriNodeSetTuple, tuple);\n  Data_Get_Struct(rb_other, nokogiriNodeSetTuple, other);\n\n  new = xmlXPathNodeSetMerge(NULL, tuple-&gt;node_set);\n  for (j = 0 ; j &lt; other-&gt;node_set-&gt;nodeNr ; ++j) {\n    xmlXPathNodeSetDel(new, other-&gt;node_set-&gt;nodeTab[j]);\n  }\n\n  return Nokogiri_wrap_xml_node_set(new, rb_iv_get(self, \"@document\"));\n}</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-2F\"> <span class=\"method-name\">/</span><span class=\"method-args\">(*paths)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"nodeset#method-i-search\">search</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-3C-3C\"> <span class=\"method-name\">&lt;&lt;</span><span class=\"method-args\">(p1)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"nodeset#method-i-push\">push</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3D-3D\"> <span class=\"method-name\">==</span><span class=\"method-args\">(other)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Equality – Two NodeSets are equal if the contain the same number of elements and if each element is equal to the corresponding element in the other <a href=\"nodeset\">NodeSet</a></p> <div class=\"method-source-code\" id=\"3D-3D-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 319\ndef == other\n  return false unless other.is_a?(Nokogiri::XML::NodeSet)\n  return false unless length == other.length\n  each_with_index do |node, i|\n    return false unless node == other[i]\n  end\n  true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-3E\"> <span class=\"method-name\">&gt;</span><span class=\"method-args\">(selector)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Search this NodeSet's nodes' immediate children using CSS selector <code>selector</code></p> <div class=\"method-source-code\" id=\"3E-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 141\ndef &gt; selector\n  ns = document.root.namespaces\n  xpath CSS.xpath_for(selector, :prefix =&gt; \"./\", :ns =&gt; ns).first\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-5B-5D\"> <span class=\"method-callseq\"> [index] → Node or nil </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-heading\"> <span class=\"method-callseq\"> [start, length] → NodeSet or nil </span> </div> <div class=\"method-heading\"> <span class=\"method-callseq\"> [range] → NodeSet or nil </span> </div> <div class=\"method-description\"> <p><a href=\"element\">Element</a> reference - returns the node at <code>index</code>, or returns a <a href=\"nodeset\">NodeSet</a> containing nodes starting at <code>start</code> and continuing for <code>length</code> elements, or returns a <a href=\"nodeset\">NodeSet</a> containing nodes specified by <code>range</code>. Negative <code>indices</code> count backward from the end of the <code>node_set</code> (-1 is the last node). Returns nil if the <code>index</code> (or <code>start</code>) are out of range.</p> <div class=\"method-source-code\" id=\"5B-5D-source\"> <pre class=\"c\">static VALUE slice(int argc, VALUE *argv, VALUE self)\n{\n  VALUE arg ;\n  long beg, len ;\n  xmlNodeSetPtr node_set;\n  nokogiriNodeSetTuple *tuple;\n  Data_Get_Struct(self, nokogiriNodeSetTuple, tuple);\n  node_set = tuple-&gt;node_set;\n\n  if (argc == 2) {\n    beg = NUM2LONG(argv[0]);\n    len = NUM2LONG(argv[1]);\n    if (beg &lt; 0) {\n      beg += node_set-&gt;nodeNr ;\n    }\n    return subseq(self, beg, len);\n  }\n\n  if (argc != 1) {\n    rb_scan_args(argc, argv, \"11\", NULL, NULL);\n  }\n  arg = argv[0];\n\n  if (FIXNUM_P(arg)) {\n    return index_at(self, FIX2LONG(arg));\n  }\n  \n  /* if arg is Range */\n  switch (rb_range_beg_len(arg, &amp;beg, &amp;len, (long)node_set-&gt;nodeNr, 0)) {\n  case Qfalse:\n    break;\n  case Qnil:\n    return Qnil;\n  default:\n    return subseq(self, beg, len);\n  }\n\n  return index_at(self, NUM2LONG(arg));\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-add_class\"> <span class=\"method-name\">add_class</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Append the class attribute <code>name</code> to all <a href=\"node\">Node</a> objects in the <a href=\"nodeset\">NodeSet</a>.</p> <div class=\"method-source-code\" id=\"add_class-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 181\ndef add_class name\n  each do |el|\n    classes = el['class'].to_s.split(/\\s+/)\n    el['class'] = classes.push(name).uniq.join \" \"\n  end\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-after\"> <span class=\"method-name\">after</span><span class=\"method-args\">(datum)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Insert <code>datum</code> after the last <a href=\"node\">Node</a> in this <a href=\"nodeset\">NodeSet</a></p> <div class=\"method-source-code\" id=\"after-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 57\ndef after datum\n  last.after datum\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-at\"> <span class=\"method-name\">at</span><span class=\"method-args\">(path, ns = document.root ? document.root.namespaces : {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>If path is a string, search this document for <code>path</code> returning the first <a href=\"node\">Node</a>. Otherwise, index in to the array with <code>path</code>.</p> <div class=\"method-source-code\" id=\"at-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 149\ndef at path, ns = document.root ? document.root.namespaces : {}\n  return self[path] if path.is_a?(Numeric)\n  search(path, ns).first\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"nodeset#method-i-25\">%</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-at_css\"> <span class=\"method-name\">at_css</span><span class=\"method-args\">(*rules)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Search this <a href=\"nodeset\">NodeSet</a> for the first occurrence of CSS <code>rules</code>. Equivalent to <code>css(rules).first</code> See <a href=\"nodeset#method-i-css\">#css</a> for more information.</p> <div class=\"method-source-code\" id=\"at_css-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 169\ndef at_css *rules\n  css(*rules).first\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-at_xpath\"> <span class=\"method-name\">at_xpath</span><span class=\"method-args\">(*paths)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Search this <a href=\"nodeset\">NodeSet</a> for the first occurrence of <a href=\"xpath\">XPath</a> <code>paths</code>. Equivalent to <code>xpath(paths).first</code> See <a href=\"nodeset#method-i-xpath\">#xpath</a> for more information.</p> <div class=\"method-source-code\" id=\"at_xpath-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 160\ndef at_xpath *paths\n  xpath(*paths).first\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attr\"> <span class=\"method-name\">attr</span><span class=\"method-args\">(key, value = nil, &amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Set the attribute <code>key</code> to <code>value</code> or the return value of <code>blk</code> on all <a href=\"node\">Node</a> objects in the <a href=\"nodeset\">NodeSet</a>.</p> <div class=\"method-source-code\" id=\"attr-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 212\ndef attr key, value = nil, &amp;blk\n  unless Hash === key || key &amp;&amp; (value || blk)\n    return first.attribute(key)\n  end\n\n  hash = key.is_a?(Hash) ? key : { key =&gt; value }\n\n  hash.each { |k,v| each { |el| el[k] = v || blk[el] } }\n\n  self\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"nodeset#method-i-set\">set</a>, <a href=\"nodeset#method-i-attribute\">attribute</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-attribute\"> <span class=\"method-name\">attribute</span><span class=\"method-args\">(key, value = nil, &amp;blk)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"nodeset#method-i-attr\">attr</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-before\"> <span class=\"method-name\">before</span><span class=\"method-args\">(datum)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Insert <code>datum</code> before the first <a href=\"node\">Node</a> in this <a href=\"nodeset\">NodeSet</a></p> <div class=\"method-source-code\" id=\"before-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 51\ndef before datum\n  first.before datum\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-children\"> <span class=\"method-name\">children</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"nodeset\">NodeSet</a> containing all the children of all the nodes in the <a href=\"nodeset\">NodeSet</a></p> <div class=\"method-source-code\" id=\"children-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 331\ndef children\n  inject(NodeSet.new(document)) { |set, node| set += node.children }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-css\"> <span class=\"method-name\">css</span><span class=\"method-args\">(*paths)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Search this <a href=\"nodeset\">NodeSet</a> for css <code>paths</code></p> <p>For more information see <a href=\"node#method-i-css\">Nokogiri::XML::Node#css</a></p> <div class=\"method-source-code\" id=\"css-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 94\ndef css *paths\n  handler = ![\n    Hash, String, Symbol\n  ].include?(paths.last.class) ? paths.pop : nil\n\n  ns = paths.last.is_a?(Hash) ? paths.pop : nil\n\n  sub_set = NodeSet.new(document)\n\n  each do |node|\n    doc = node.document\n    search_ns = ns || (doc.root ? doc.root.namespaces : {})\n\n    xpaths = paths.map { |rule|\n      [\n        CSS.xpath_for(rule.to_s, :prefix =&gt; \".//\", :ns =&gt; search_ns),\n        CSS.xpath_for(rule.to_s, :prefix =&gt; \"self::\", :ns =&gt; search_ns)\n      ].join(' | ')\n    }\n\n    sub_set += node.xpath(*(xpaths + [search_ns, handler].compact))\n  end\n  document.decorate(sub_set)\n  sub_set\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-delete\"> <span class=\"method-callseq\"> delete(node) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Delete <code>node</code> from the Nodeset, if it is a member. Returns the deleted node if found, otherwise returns nil.</p> <div class=\"method-source-code\" id=\"delete-source\"> <pre class=\"c\">static VALUE\ndelete(VALUE self, VALUE rb_node)\n{\n    nokogiriNodeSetTuple *tuple;\n    xmlNodePtr node;\n    xmlNodeSetPtr cur;\n    int i;\n\n    if (!(rb_obj_is_kind_of(rb_node, cNokogiriXmlNode) || rb_obj_is_kind_of(rb_node, cNokogiriXmlNamespace)))\n        rb_raise(rb_eArgError, \"node must be a Nokogiri::XML::Node or Nokogiri::XML::Namespace\");\n\n    Data_Get_Struct(self, nokogiriNodeSetTuple, tuple);\n    Data_Get_Struct(rb_node, xmlNode, node);\n    cur = tuple-&gt;node_set;\n\n    if (xmlXPathNodeSetContains(cur, node)) {\n        for (i = 0; i &lt; cur-&gt;nodeNr; i++)\n            if (cur-&gt;nodeTab[i] == node) break;\n\n        cur-&gt;nodeNr--;\n        for (;i &lt; cur-&gt;nodeNr;i++)\n            cur-&gt;nodeTab[i] = cur-&gt;nodeTab[i + 1];\n        cur-&gt;nodeTab[cur-&gt;nodeNr] = NULL;\n        return rb_node;\n    }\n    return Qnil ;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-dup\"> <span class=\"method-callseq\"> dup </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Duplicate this node set</p> <div class=\"method-source-code\" id=\"dup-source\"> <pre class=\"c\">static VALUE duplicate(VALUE self)\n{\n  nokogiriNodeSetTuple *tuple;\n  xmlNodeSetPtr dupl;\n\n  Data_Get_Struct(self, nokogiriNodeSetTuple, tuple);\n\n  dupl = xmlXPathNodeSetMerge(NULL, tuple-&gt;node_set);\n\n  return Nokogiri_wrap_xml_node_set(dupl, rb_iv_get(self, \"@document\"));\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-each\"> <span class=\"method-name\">each</span><span class=\"method-args\">() { |self| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Iterate over each node, yielding to <code>block</code></p> <div class=\"method-source-code\" id=\"each-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 235\ndef each(&amp;block)\n  0.upto(length - 1) do |x|\n    yield self[x]\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-empty-3F\"> <span class=\"method-name\">empty?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Is this <a href=\"nodeset\">NodeSet</a> empty?</p> <div class=\"method-source-code\" id=\"empty-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 38\ndef empty?\n  length == 0\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-filter\"> <span class=\"method-name\">filter</span><span class=\"method-args\">(expr)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Filter this list for nodes that match <code>expr</code></p> <div class=\"method-source-code\" id=\"filter-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 175\ndef filter expr\n  find_all { |node| node.matches?(expr) }\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-first\"> <span class=\"method-name\">first</span><span class=\"method-args\">(n = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the first element of the <a href=\"nodeset\">NodeSet</a>.</p> <div class=\"method-source-code\" id=\"first-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 23\ndef first n = nil\n  return self[0] unless n\n  list = []\n  n.times { |i| list &lt;&lt; self[i] }\n  list\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-include-3F\"> <span class=\"method-callseq\"> include?(node) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if any member of node set equals <code>node</code>.</p> <div class=\"method-source-code\" id=\"include-3F-source\"> <pre class=\"c\">static VALUE include_eh(VALUE self, VALUE rb_node)\n{\n  nokogiriNodeSetTuple *tuple;\n  xmlNodePtr node;\n\n  if(!(rb_obj_is_kind_of(rb_node, cNokogiriXmlNode) || rb_obj_is_kind_of(rb_node, cNokogiriXmlNamespace)))\n    rb_raise(rb_eArgError, \"node must be a Nokogiri::XML::Node or Nokogiri::XML::Namespace\");\n\n  Data_Get_Struct(self, nokogiriNodeSetTuple, tuple);\n  Data_Get_Struct(rb_node, xmlNode, node);\n\n  return (xmlXPathNodeSetContains(tuple-&gt;node_set, node) ? Qtrue : Qfalse);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-index\"> <span class=\"method-name\">index</span><span class=\"method-args\">(node)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the index of the first node in self that is == to <code>node</code>. Returns nil if no match is found.</p> <div class=\"method-source-code\" id=\"index-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 44\ndef index(node)\n  each_with_index { |member, j| return j if member == node }\n  nil\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inner_html\"> <span class=\"method-name\">inner_html</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the inner html of all contained <a href=\"node\">Node</a> objects</p> <div class=\"method-source-code\" id=\"inner_html-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 250\ndef inner_html *args\n  collect{|j| j.inner_html(*args) }.join('')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inner_text\"> <span class=\"method-name\">inner_text</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the inner text of all contained <a href=\"node\">Node</a> objects</p> <div class=\"method-source-code\" id=\"inner_text-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 243\ndef inner_text\n  collect{|j| j.inner_text}.join('')\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"nodeset#method-i-text\">text</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inspect\"> <span class=\"method-name\">inspect</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Return a nicely formated string representation</p> <div class=\"method-source-code\" id=\"inspect-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 348\ndef inspect\n  \"[#{map { |c| c.inspect }.join ', '}]\"\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-last\"> <span class=\"method-name\">last</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the last element of the <a href=\"nodeset\">NodeSet</a>.</p> <div class=\"method-source-code\" id=\"last-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 32\ndef last\n  self[-1]\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-length\"> <span class=\"method-callseq\"> length </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the length of the node set</p> <div class=\"method-source-code\" id=\"length-source\"> <pre class=\"c\">static VALUE length(VALUE self)\n{\n  nokogiriNodeSetTuple *tuple;\n  Data_Get_Struct(self, nokogiriNodeSetTuple, tuple);\n\n  return tuple-&gt;node_set ? INT2NUM(tuple-&gt;node_set-&gt;nodeNr) : INT2NUM(0);\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"nodeset#method-i-size\">size</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-pop\"> <span class=\"method-name\">pop</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Removes the last element from set and returns it, or <code>nil</code> if the set is empty</p> <div class=\"method-source-code\" id=\"pop-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 302\ndef pop\n  return nil if length == 0\n  delete last\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-push\"> <span class=\"method-callseq\"> push(node) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Append <code>node</code> to the <a href=\"nodeset\">NodeSet</a>.</p> <div class=\"method-source-code\" id=\"push-source\"> <pre class=\"c\">static VALUE push(VALUE self, VALUE rb_node)\n{\n  nokogiriNodeSetTuple *tuple;\n  xmlNodePtr node;\n\n  if(!(rb_obj_is_kind_of(rb_node, cNokogiriXmlNode) || rb_obj_is_kind_of(rb_node, cNokogiriXmlNamespace)))\n    rb_raise(rb_eArgError, \"node must be a Nokogiri::XML::Node or Nokogiri::XML::Namespace\");\n\n  Data_Get_Struct(self, nokogiriNodeSetTuple, tuple);\n  Data_Get_Struct(rb_node, xmlNode, node);\n  xmlXPathNodeSetAdd(tuple-&gt;node_set, node);\n  return self;\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"nodeset#method-i-3C-3C\">&lt;&lt;</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-remove\"> <span class=\"method-name\">remove</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"nodeset#method-i-unlink\">unlink</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_attr\"> <span class=\"method-name\">remove_attr</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Remove the attributed named <code>name</code> from all <a href=\"node\">Node</a> objects in the <a href=\"nodeset\">NodeSet</a></p> <div class=\"method-source-code\" id=\"remove_attr-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 228\ndef remove_attr name\n  each { |el| el.delete name }\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-remove_class\"> <span class=\"method-name\">remove_class</span><span class=\"method-args\">(name = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Remove the class attribute <code>name</code> from all <a href=\"node\">Node</a> objects in the <a href=\"nodeset\">NodeSet</a>. If <code>name</code> is nil, remove the class attribute from all Nodes in the <a href=\"nodeset\">NodeSet</a>.</p> <div class=\"method-source-code\" id=\"remove_class-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 193\ndef remove_class name = nil\n  each do |el|\n    if name\n      classes = el['class'].to_s.split(/\\s+/)\n      if classes.empty?\n        el.delete 'class'\n      else\n        el['class'] = (classes - [name]).uniq.join \" \"\n      end\n    else\n      el.delete \"class\"\n    end\n  end\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-reverse\"> <span class=\"method-name\">reverse</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new <a href=\"nodeset\">NodeSet</a> containing all the nodes in the <a href=\"nodeset\">NodeSet</a> in reverse order</p> <div class=\"method-source-code\" id=\"reverse-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 338\ndef reverse\n  node_set = NodeSet.new(document)\n  (length - 1).downto(0) do |x|\n    node_set.push self[x]\n  end\n  node_set\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-search\"> <span class=\"method-name\">search</span><span class=\"method-args\">(*paths)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Search this document for <code>paths</code></p> <p>For more information see <a href=\"node#method-i-css\">Nokogiri::XML::Node#css</a> and <a href=\"node#method-i-xpath\">Nokogiri::XML::Node#xpath</a></p> <div class=\"method-source-code\" id=\"search-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 69\ndef search *paths\n  handler = ![\n    Hash, String, Symbol\n  ].include?(paths.last.class) ? paths.pop : nil\n\n  ns = paths.last.is_a?(Hash) ? paths.pop : nil\n\n  sub_set = NodeSet.new(document)\n\n  paths.each do |path|\n    sub_set += send(\n      path =~ /^(\\.\\/|\\/|\\.\\.|\\.$)/ ? :xpath : :css,\n      *(paths + [ns, handler]).compact\n    )\n  end\n\n  document.decorate(sub_set)\n  sub_set\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"nodeset#method-i-2F\">/</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-set\"> <span class=\"method-name\">set</span><span class=\"method-args\">(key, value = nil, &amp;blk)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"nodeset#method-i-attr\">attr</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-shift\"> <span class=\"method-name\">shift</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns the first element of the <a href=\"nodeset\">NodeSet</a> and removes it. Returns <code>nil</code> if the set is empty.</p> <div class=\"method-source-code\" id=\"shift-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 310\ndef shift\n  return nil if length == 0\n  delete first\nend</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-size\"> <span class=\"method-name\">size</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"nodeset#method-i-length\">length</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-slice\"> <span class=\"method-callseq\"> slice(index) → Node or nil </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-heading\"> <span class=\"method-callseq\"> slice(start, length) → NodeSet or nil </span> </div> <div class=\"method-heading\"> <span class=\"method-callseq\"> slice(range) → NodeSet or nil </span> </div> <div class=\"method-description\"> <p><a href=\"element\">Element</a> reference - returns the node at <code>index</code>, or returns a <a href=\"nodeset\">NodeSet</a> containing nodes starting at <code>start</code> and continuing for <code>length</code> elements, or returns a <a href=\"nodeset\">NodeSet</a> containing nodes specified by <code>range</code>. Negative <code>indices</code> count backward from the end of the <code>node_set</code> (-1 is the last node). Returns nil if the <code>index</code> (or <code>start</code>) are out of range.</p> <div class=\"method-source-code\" id=\"slice-source\"> <pre class=\"c\">static VALUE slice(int argc, VALUE *argv, VALUE self)\n{\n  VALUE arg ;\n  long beg, len ;\n  xmlNodeSetPtr node_set;\n  nokogiriNodeSetTuple *tuple;\n  Data_Get_Struct(self, nokogiriNodeSetTuple, tuple);\n  node_set = tuple-&gt;node_set;\n\n  if (argc == 2) {\n    beg = NUM2LONG(argv[0]);\n    len = NUM2LONG(argv[1]);\n    if (beg &lt; 0) {\n      beg += node_set-&gt;nodeNr ;\n    }\n    return subseq(self, beg, len);\n  }\n\n  if (argc != 1) {\n    rb_scan_args(argc, argv, \"11\", NULL, NULL);\n  }\n  arg = argv[0];\n\n  if (FIXNUM_P(arg)) {\n    return index_at(self, FIX2LONG(arg));\n  }\n  \n  /* if arg is Range */\n  switch (rb_range_beg_len(arg, &amp;beg, &amp;len, (long)node_set-&gt;nodeNr, 0)) {\n  case Qfalse:\n    break;\n  case Qnil:\n    return Qnil;\n  default:\n    return subseq(self, beg, len);\n  }\n\n  return index_at(self, NUM2LONG(arg));\n}</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-text\"> <span class=\"method-name\">text</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"nodeset#method-i-inner_text\">inner_text</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_a\"> <span class=\"method-callseq\"> to_a </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Return this list as an Array</p> <div class=\"method-source-code\" id=\"to_a-source\"> <pre class=\"c\">static VALUE to_array(VALUE self, VALUE rb_node)\n{\n  xmlNodeSetPtr set;\n  VALUE *elts;\n  VALUE list;\n  int i;\n  nokogiriNodeSetTuple *tuple;\n\n  Data_Get_Struct(self, nokogiriNodeSetTuple, tuple);\n  set = tuple-&gt;node_set;\n\n  elts = calloc((size_t)set-&gt;nodeNr, sizeof(VALUE *));\n  for(i = 0; i &lt; set-&gt;nodeNr; i++) {\n    if (XML_NAMESPACE_DECL == set-&gt;nodeTab[i]-&gt;type)\n      elts[i] = Nokogiri_wrap_xml_namespace2(rb_iv_get(self, \"@document\"), (xmlNsPtr)(set-&gt;nodeTab[i]));\n    else\n      elts[i] = Nokogiri_wrap_xml_node(Qnil, set-&gt;nodeTab[i]);\n  }\n\n  list = rb_ary_new4((long)set-&gt;nodeNr, elts);\n\n  /*free(elts); */\n\n  return list;\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"nodeset#method-i-to_ary\">to_ary</a> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-to_ary\"> <span class=\"method-name\">to_ary</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"nodeset#method-i-to_a\">to_a</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_html\"> <span class=\"method-name\">to_html</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert this <a href=\"nodeset\">NodeSet</a> to HTML</p> <div class=\"method-source-code\" id=\"to_html-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 273\ndef to_html *args\n  if Nokogiri.jruby?\n    options = args.first.is_a?(Hash) ? args.shift : {}\n    if !options[:save_with]\n      options[:save_with] = Node::SaveOptions::NO_DECLARATION | Node::SaveOptions::NO_EMPTY_TAGS | Node::SaveOptions::AS_HTML\n    end\n    args.insert(0, options)\n  end\n  map { |x| x.to_html(*args) }.join\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_s\"> <span class=\"method-name\">to_s</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert this <a href=\"nodeset\">NodeSet</a> to a string.</p> <div class=\"method-source-code\" id=\"to_s-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 267\ndef to_s\n  map { |x| x.to_s }.join\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_xhtml\"> <span class=\"method-name\">to_xhtml</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert this <a href=\"nodeset\">NodeSet</a> to XHTML</p> <div class=\"method-source-code\" id=\"to_xhtml-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 286\ndef to_xhtml *args\n  map { |x| x.to_xhtml(*args) }.join\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_xml\"> <span class=\"method-name\">to_xml</span><span class=\"method-args\">(*args)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Convert this <a href=\"nodeset\">NodeSet</a> to <a href=\"../xml\">XML</a></p> <div class=\"method-source-code\" id=\"to_xml-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 292\ndef to_xml *args\n  map { |x| x.to_xml(*args) }.join\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-unlink\"> <span class=\"method-callseq\"> unlink </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Unlink this <a href=\"nodeset\">NodeSet</a> and all <a href=\"node\">Node</a> objects it contains from their current context.</p> <div class=\"method-source-code\" id=\"unlink-source\"> <pre class=\"c\">static VALUE unlink_nodeset(VALUE self)\n{\n  xmlNodeSetPtr node_set;\n  int j, nodeNr ;\n  nokogiriNodeSetTuple *tuple;\n\n  Data_Get_Struct(self, nokogiriNodeSetTuple, tuple);\n  node_set = tuple-&gt;node_set;\n  nodeNr = node_set-&gt;nodeNr ;\n  for (j = 0 ; j &lt; nodeNr ; j++) {\n    if (XML_NAMESPACE_DECL != node_set-&gt;nodeTab[j]-&gt;type) {\n      VALUE node ;\n      xmlNodePtr node_ptr;\n      node = Nokogiri_wrap_xml_node(Qnil, node_set-&gt;nodeTab[j]);\n      rb_funcall(node, rb_intern(\"unlink\"), 0); /* modifies the C struct out from under the object */\n      Data_Get_Struct(node, xmlNode, node_ptr);\n      node_set-&gt;nodeTab[j] = node_ptr ;\n    }\n  }\n  return self ;\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"nodeset#method-i-remove\">remove</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-wrap\"> <span class=\"method-name\">wrap</span><span class=\"method-args\">(html, &amp;blk)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Wrap this <a href=\"nodeset\">NodeSet</a> with <code>html</code> or the results of the builder in <code>blk</code></p> <div class=\"method-source-code\" id=\"wrap-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 256\ndef wrap(html, &amp;blk)\n  each do |j|\n    new_parent = document.parse(html).first\n    j.add_next_sibling(new_parent)\n    new_parent.add_child(j)\n  end\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-xpath\"> <span class=\"method-name\">xpath</span><span class=\"method-args\">(*paths)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Search this <a href=\"nodeset\">NodeSet</a> for <a href=\"xpath\">XPath</a> <code>paths</code></p> <p>For more information see <a href=\"node#method-i-xpath\">Nokogiri::XML::Node#xpath</a></p> <div class=\"method-source-code\" id=\"xpath-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/node_set.rb, line 124\ndef xpath *paths\n  handler = ![\n    Hash, String, Symbol\n  ].include?(paths.last.class) ? paths.pop : nil\n\n  ns = paths.last.is_a?(Hash) ? paths.pop : nil\n\n  sub_set = NodeSet.new(document)\n  each do |node|\n    sub_set += node.xpath(*(paths + [ns, handler].compact))\n  end\n  document.decorate(sub_set)\n  sub_set\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-7C\"> <span class=\"method-callseq\"> |(node_set) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns a new set built by merging the set and the elements of the given set.</p> <div class=\"method-source-code\" id=\"7C-source\"> <pre class=\"c\">static VALUE set_union(VALUE self, VALUE rb_other)\n{\n  nokogiriNodeSetTuple *tuple, *other;\n  xmlNodeSetPtr new;\n\n  if(!rb_obj_is_kind_of(rb_other, cNokogiriXmlNodeSet))\n    rb_raise(rb_eArgError, \"node_set must be a Nokogiri::XML::NodeSet\");\n\n  Data_Get_Struct(self, nokogiriNodeSetTuple, tuple);\n  Data_Get_Struct(rb_other, nokogiriNodeSetTuple, other);\n\n  new = xmlXPathNodeSetMerge(NULL, tuple-&gt;node_set);\n  new = xmlXPathNodeSetMerge(new, other-&gt;node_set);\n\n  return Nokogiri_wrap_xml_node_set(new, rb_iv_get(self, \"@document\"));\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"nodeset#method-i-2B\">+</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/parseoptions":"<h1 id=\"class-Nokogiri::XML::ParseOptions\" class=\"class\"> class Nokogiri::XML::ParseOptions </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl> <section class=\"description\"> <p>Parse options for passing to <a href=\"../../nokogiri\">Nokogiri</a>.XML or <a href=\"../../nokogiri\">Nokogiri</a>.HTML</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"COMPACT\">COMPACT </dt>\n<dd>\n<p>compact small text nodes; no modification of the tree allowed afterwards (will possibly crash if you try to modify the tree)</p> </dd>\n<dt id=\"DEFAULT_HTML\">DEFAULT_HTML </dt>\n<dd>\n<p>the default options used for parsing HTML documents</p> </dd>\n<dt id=\"DEFAULT_XML\">DEFAULT_XML </dt>\n<dd>\n<p>the default options used for parsing <a href=\"../xml\">XML</a> documents</p> </dd>\n<dt id=\"DTDATTR\">DTDATTR </dt>\n<dd>\n<p>Default <a href=\"dtd\">DTD</a> attributes</p> </dd>\n<dt id=\"DTDLOAD\">DTDLOAD </dt>\n<dd>\n<p>Load external subsets</p> </dd>\n<dt id=\"DTDVALID\">DTDVALID </dt>\n<dd>\n<p>validate with the <a href=\"dtd\">DTD</a></p> </dd>\n<dt id=\"HUGE\">HUGE </dt>\n<dd>\n<p>relax any hardcoded limit from the parser</p> </dd>\n<dt id=\"NOBASEFIX\">NOBASEFIX </dt>\n<dd>\n<p>do not fixup <a href=\"parseoptions#XINCLUDE\">XINCLUDE</a> xml:base uris</p> </dd>\n<dt id=\"NOBLANKS\">NOBLANKS </dt>\n<dd>\n<p>remove blank nodes</p> </dd>\n<dt id=\"NOCDATA\">NOCDATA </dt>\n<dd>\n<p>merge <a href=\"cdata\">CDATA</a> as text nodes</p> </dd>\n<dt id=\"NODICT\">NODICT </dt>\n<dd>\n<p>Do not reuse the context dictionary</p> </dd>\n<dt id=\"NOENT\">NOENT </dt>\n<dd>\n<p>Substitute entities</p> </dd>\n<dt id=\"NOERROR\">NOERROR </dt>\n<dd>\n<p>suppress error reports</p> </dd>\n<dt id=\"NONET\">NONET </dt>\n<dd>\n<p>Forbid network access. Recommended for dealing with untrusted documents.</p> </dd>\n<dt id=\"NOWARNING\">NOWARNING </dt>\n<dd>\n<p>suppress warning reports</p> </dd>\n<dt id=\"NOXINCNODE\">NOXINCNODE </dt>\n<dd>\n<p>do not generate <a href=\"parseoptions#XINCLUDE\">XINCLUDE</a> START/END nodes</p> </dd>\n<dt id=\"NSCLEAN\">NSCLEAN </dt>\n<dd>\n<p>remove redundant namespaces declarations</p> </dd>\n<dt id=\"OLD10\">OLD10 </dt>\n<dd>\n<p>parse using XML-1.0 before update 5</p> </dd>\n<dt id=\"PEDANTIC\">PEDANTIC </dt>\n<dd>\n<p>pedantic error reporting</p> </dd>\n<dt id=\"RECOVER\">RECOVER </dt>\n<dd>\n<p>Recover from errors</p> </dd>\n<dt id=\"SAX1\">SAX1 </dt>\n<dd>\n<p>use the <a href=\"parseoptions#SAX1\">SAX1</a> interface internally</p> </dd>\n<dt id=\"STRICT\">STRICT </dt>\n<dd>\n<p>Strict parsing</p> </dd>\n<dt id=\"XINCLUDE\">XINCLUDE </dt>\n<dd>\n<p>Implement XInclude substitution</p> </dd>\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-options\"> <span class=\"method-name\">options</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-to_i\"> <span class=\"method-name\">to_i</span><span class=\"attribute-access-type\">[RW]</span> </div>  </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(options = STRICT)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/parse_options.rb, line 55\ndef initialize options = STRICT\n  @options = options\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inspect\"> <span class=\"method-name\">inspect</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"inspect-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/parse_options.rb, line 89\ndef inspect\n  options = []\n  self.class.constants.each do |k|\n    options &lt;&lt; k.downcase if send(:\"#{k.downcase}?\")\n  end\n  super.sub(/&gt;$/, \" \" + options.join(', ') + \"&gt;\")\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-strict\"> <span class=\"method-name\">strict</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"strict-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/parse_options.rb, line 78\ndef strict\n  @options &amp;= ~RECOVER\n  self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-strict-3F\"> <span class=\"method-name\">strict?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"strict-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/parse_options.rb, line 83\ndef strict?\n  @options &amp; RECOVER == STRICT\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/processinginstruction":"<h1 id=\"class-Nokogiri::XML::ProcessingInstruction\" class=\"class\"> class Nokogiri::XML::ProcessingInstruction </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"node\">Nokogiri::XML::Node</a></dd>\n</dl> <section class=\"description\"> <p><a href=\"processinginstruction\">ProcessingInstruction</a> represents a <a href=\"processinginstruction\">ProcessingInstruction</a> node in an xml document.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-callseq\"> new(document, name, content) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"processinginstruction\">ProcessingInstruction</a> element on the <code>document</code> with <code>name</code> and <code>content</code></p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"c\">static VALUE new(int argc, VALUE *argv, VALUE klass)\n{\n  xmlDocPtr xml_doc;\n  xmlNodePtr node;\n  VALUE document;\n  VALUE name;\n  VALUE content;\n  VALUE rest;\n  VALUE rb_node;\n\n  rb_scan_args(argc, argv, \"3*\", &amp;document, &amp;name, &amp;content, &amp;rest);\n\n  Data_Get_Struct(document, xmlDoc, xml_doc);\n\n  node = xmlNewDocPI(\n      xml_doc,\n      (const xmlChar *)StringValuePtr(name),\n      (const xmlChar *)StringValuePtr(content)\n  );\n\n  nokogiri_root_node(node);\n\n  rb_node = Nokogiri_wrap_xml_node(klass, node);\n  rb_obj_call_init(rb_node, argc, argv);\n\n  if(rb_block_given_p()) rb_yield(rb_node);\n\n  return rb_node;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(document, name, content)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/processing_instruction.rb, line 4\ndef initialize document, name, content\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/reader":"<h1 id=\"class-Nokogiri::XML::Reader\" class=\"class\"> class Nokogiri::XML::Reader </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n<dt>Included modules:</dt>\n\n</dl> <section class=\"description\"> <p>The <a href=\"reader\">Reader</a> parser allows you to effectively pull parse an <a href=\"../xml\">XML</a> document. Once instantiated, call <a href=\"reader#method-i-each\">#each</a> to iterate over each node. Note that you may only iterate over the document once!</p> <p><a href=\"reader\">Nokogiri::XML::Reader</a> parses an <a href=\"../xml\">XML</a> document similar to the way a cursor would move. The <a href=\"reader\">Reader</a> is given an <a href=\"../xml\">XML</a> document, and yields nodes to an each block.</p> <p>Here is an example of usage:</p> <pre class=\"ruby\">reader = Nokogiri::XML::Reader(\"  &lt;x xmlns:tenderlove='http://tenderlovemaking.com/'&gt;\n    &lt;tenderlove:foo awesome='true'&gt;snuggles!&lt;/tenderlove:foo&gt;\n  &lt;/x&gt;\n\")\n\nreader.each do |node|\n\n  # node is an instance of Nokogiri::XML::Reader\n  puts node.name\n\nend\n</pre> <p>Note that <a href=\"reader#method-i-each\">#each</a> can only be called once!! Once the cursor moves through the entire document, you must parse the document again. So make sure that you capture any information you need during the first iteration.</p> <p>The <a href=\"reader\">Reader</a> parser is good for when you need the speed of a <a href=\"sax\">SAX</a> parser, but do not want to write a <a href=\"document\">Document</a> handler.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"TYPE_ATTRIBUTE\">TYPE_ATTRIBUTE </dt>\n<dd>\n<p>Attribute node type</p> </dd>\n<dt id=\"TYPE_CDATA\">TYPE_CDATA </dt>\n<dd>\n<p><a href=\"cdata\">CDATA</a> node type</p> </dd>\n<dt id=\"TYPE_COMMENT\">TYPE_COMMENT </dt>\n<dd>\n<p><a href=\"comment\">Comment</a> node type</p> </dd>\n<dt id=\"TYPE_DOCUMENT\">TYPE_DOCUMENT </dt>\n<dd>\n<p><a href=\"document\">Document</a> node type</p> </dd>\n<dt id=\"TYPE_DOCUMENT_FRAGMENT\">TYPE_DOCUMENT_FRAGMENT </dt>\n<dd>\n<p><a href=\"document\">Document</a> Fragment node type</p> </dd>\n<dt id=\"TYPE_DOCUMENT_TYPE\">TYPE_DOCUMENT_TYPE </dt>\n<dd>\n<p><a href=\"document\">Document</a> Type node type</p> </dd>\n<dt id=\"TYPE_ELEMENT\">TYPE_ELEMENT </dt>\n<dd>\n<p><a href=\"element\">Element</a> node type</p> </dd>\n<dt id=\"TYPE_END_ELEMENT\">TYPE_END_ELEMENT </dt>\n<dd>\n<p><a href=\"element\">Element</a> end node type</p> </dd>\n<dt id=\"TYPE_END_ENTITY\">TYPE_END_ENTITY </dt>\n<dd>\n<p>Entity end node type</p> </dd>\n<dt id=\"TYPE_ENTITY\">TYPE_ENTITY </dt>\n<dd>\n<p>Entity node type</p> </dd>\n<dt id=\"TYPE_ENTITY_REFERENCE\">TYPE_ENTITY_REFERENCE </dt>\n<dd>\n<p>Entity Reference node type</p> </dd>\n<dt id=\"TYPE_NONE\">TYPE_NONE </dt>\n\n<dt id=\"TYPE_NOTATION\">TYPE_NOTATION </dt>\n<dd>\n<p><a href=\"notation\">Notation</a> node type</p> </dd>\n<dt id=\"TYPE_PROCESSING_INSTRUCTION\">TYPE_PROCESSING_INSTRUCTION </dt>\n<dd>\n<p>PI node type</p> </dd>\n<dt id=\"TYPE_SIGNIFICANT_WHITESPACE\">TYPE_SIGNIFICANT_WHITESPACE </dt>\n<dd>\n<p>Significant Whitespace node type</p> </dd>\n<dt id=\"TYPE_TEXT\">TYPE_TEXT </dt>\n<dd>\n<p><a href=\"text\">Text</a> node type</p> </dd>\n<dt id=\"TYPE_WHITESPACE\">TYPE_WHITESPACE </dt>\n<dd>\n<p>Whitespace node type</p> </dd>\n<dt id=\"TYPE_XML_DECLARATION\">TYPE_XML_DECLARATION </dt>\n<dd>\n<p><a href=\"../xml\">XML</a> Declaration node type</p> </dd>\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-encoding\"> <span class=\"method-name\">encoding</span><span class=\"attribute-access-type\">[R]</span> </div> <div class=\"method-description\"> <p>The encoding for the document</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-errors\"> <span class=\"method-name\">errors</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>A list of errors encountered while parsing</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-source\"> <span class=\"method-name\">source</span><span class=\"attribute-access-type\">[R]</span> </div> <div class=\"method-description\"> <p>The <a href=\"../xml\">XML</a> source</p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-from_io\"> <span class=\"method-callseq\"> from_io(io, url = nil, encoding = nil, options = 0) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new reader that parses <code>io</code></p> <div class=\"method-source-code\" id=\"from_io-source\"> <pre class=\"c\">static VALUE from_io(int argc, VALUE *argv, VALUE klass)\n{\n  VALUE rb_io, rb_url, encoding, rb_options;\n  xmlTextReaderPtr reader;\n  const char * c_url      = NULL;\n  const char * c_encoding = NULL;\n  int c_options           = 0;\n  VALUE rb_reader, args[3];\n\n  rb_scan_args(argc, argv, \"13\", &amp;rb_io, &amp;rb_url, &amp;encoding, &amp;rb_options);\n\n  if (!RTEST(rb_io)) rb_raise(rb_eArgError, \"io cannot be nil\");\n  if (RTEST(rb_url)) c_url = StringValuePtr(rb_url);\n  if (RTEST(encoding)) c_encoding = StringValuePtr(encoding);\n  if (RTEST(rb_options)) c_options = (int)NUM2INT(rb_options);\n\n  reader = xmlReaderForIO(\n      (xmlInputReadCallback)io_read_callback,\n      (xmlInputCloseCallback)io_close_callback,\n      (void *)rb_io,\n      c_url,\n      c_encoding,\n      c_options\n  );\n\n  if(reader == NULL) {\n    xmlFreeTextReader(reader);\n    rb_raise(rb_eRuntimeError, \"couldn't create a parser\");\n  }\n\n  rb_reader = Data_Wrap_Struct(klass, NULL, dealloc, reader);\n  args[0] = rb_io;\n  args[1] = rb_url;\n  args[2] = encoding;\n  rb_obj_call_init(rb_reader, 3, args);\n\n  return rb_reader;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-from_memory\"> <span class=\"method-callseq\"> from_memory(string, url = nil, encoding = nil, options = 0) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new reader that parses <code>string</code></p> <div class=\"method-source-code\" id=\"from_memory-source\"> <pre class=\"c\">static VALUE from_memory(int argc, VALUE *argv, VALUE klass)\n{\n  VALUE rb_buffer, rb_url, encoding, rb_options;\n  xmlTextReaderPtr reader;\n  const char * c_url      = NULL;\n  const char * c_encoding = NULL;\n  int c_options           = 0;\n  VALUE rb_reader, args[3];\n\n  rb_scan_args(argc, argv, \"13\", &amp;rb_buffer, &amp;rb_url, &amp;encoding, &amp;rb_options);\n\n  if (!RTEST(rb_buffer)) rb_raise(rb_eArgError, \"string cannot be nil\");\n  if (RTEST(rb_url)) c_url = StringValuePtr(rb_url);\n  if (RTEST(encoding)) c_encoding = StringValuePtr(encoding);\n  if (RTEST(rb_options)) c_options = (int)NUM2INT(rb_options);\n\n  reader = xmlReaderForMemory(\n      StringValuePtr(rb_buffer),\n      (int)RSTRING_LEN(rb_buffer),\n      c_url,\n      c_encoding,\n      c_options\n  );\n\n  if(reader == NULL) {\n    xmlFreeTextReader(reader);\n    rb_raise(rb_eRuntimeError, \"couldn't create a parser\");\n  }\n\n  rb_reader = Data_Wrap_Struct(klass, NULL, dealloc, reader);\n  args[0] = rb_buffer;\n  args[1] = rb_url;\n  args[2] = encoding;\n  rb_obj_call_init(rb_reader, 3, args);\n\n  return rb_reader;\n}</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute\"> <span class=\"method-callseq\"> attribute(name) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the value of attribute named <code>name</code></p> <div class=\"method-source-code\" id=\"attribute-source\"> <pre class=\"c\">static VALUE reader_attribute(VALUE self, VALUE name)\n{\n  xmlTextReaderPtr reader;\n  xmlChar *value ;\n  VALUE rb_value;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n\n  if(NIL_P(name)) return Qnil;\n  name = StringValue(name) ;\n\n  value = xmlTextReaderGetAttribute(reader, (xmlChar*)StringValuePtr(name));\n  if(value == NULL) {\n    /* this section is an attempt to workaround older versions of libxml that\n       don't handle namespaces properly in all attribute-and-friends functions */\n    xmlChar *prefix = NULL ;\n    xmlChar *localname = xmlSplitQName2((xmlChar*)StringValuePtr(name), &amp;prefix);\n    if (localname != NULL) {\n      value = xmlTextReaderLookupNamespace(reader, localname);\n      xmlFree(localname) ;\n    } else {\n      value = xmlTextReaderLookupNamespace(reader, prefix);\n    }\n    xmlFree(prefix);\n  }\n  if(value == NULL) return Qnil;\n\n  rb_value = NOKOGIRI_STR_NEW2(value);\n  xmlFree(value);\n  return rb_value;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_at\"> <span class=\"method-callseq\"> attribute_at(index) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the value of attribute at <code>index</code></p> <div class=\"method-source-code\" id=\"attribute_at-source\"> <pre class=\"c\">static VALUE attribute_at(VALUE self, VALUE index)\n{\n  xmlTextReaderPtr reader;\n  xmlChar *value;\n  VALUE rb_value;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n\n  if(NIL_P(index)) return Qnil;\n  index = rb_Integer(index);\n\n  value = xmlTextReaderGetAttributeNo(\n      reader,\n      (int)NUM2INT(index)\n  );\n  if(value == NULL) return Qnil;\n\n  rb_value = NOKOGIRI_STR_NEW2(value);\n  xmlFree(value);\n  return rb_value;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_count\"> <span class=\"method-callseq\"> attribute_count </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the number of attributes for the current node</p> <div class=\"method-source-code\" id=\"attribute_count-source\"> <pre class=\"c\">static VALUE attribute_count(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  int count;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n  count = xmlTextReaderAttributeCount(reader);\n  if(count == -1) return Qnil;\n\n  return INT2NUM((long)count);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attribute_nodes\"> <span class=\"method-name\">attribute_nodes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get a list of attributes for the current node</p> <div class=\"method-source-code\" id=\"attribute_nodes-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/reader.rb, line 97\ndef attribute_nodes\n  nodes = attr_nodes\n  nodes.each { |v| v.instance_variable_set(:@_r, self) }\n  nodes\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attributes\"> <span class=\"method-name\">attributes</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get a list of attributes for the current node.</p> <div class=\"method-source-code\" id=\"attributes-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/reader.rb, line 89\ndef attributes\n  Hash[attribute_nodes.map { |node|\n    [node.name, node.to_s]\n  }].merge(namespaces || {})\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-attributes-3F\"> <span class=\"method-callseq\"> attributes? </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Does this node have attributes?</p> <div class=\"method-source-code\" id=\"attributes-3F-source\"> <pre class=\"c\">static VALUE attributes_eh(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  int eh;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n  eh = has_attributes(reader);\n  if(eh == 0) return Qfalse;\n  if(eh == 1) return Qtrue;\n\n  return Qnil;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-base_uri\"> <span class=\"method-callseq\"> base_uri </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the xml:base of the node</p> <div class=\"method-source-code\" id=\"base_uri-source\"> <pre class=\"c\">static VALUE base_uri(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  const char * base_uri;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n  base_uri = (const char *)xmlTextReaderBaseUri(reader);\n  if (base_uri == NULL) return Qnil;\n\n  return NOKOGIRI_STR_NEW2(base_uri);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-default-3F\"> <span class=\"method-callseq\"> default? </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Was an attribute generated from the default value in the <a href=\"dtd\">DTD</a> or schema?</p> <div class=\"method-source-code\" id=\"default-3F-source\"> <pre class=\"c\">static VALUE default_eh(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  int eh;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n  eh = xmlTextReaderIsDefault(reader);\n  if(eh == 0) return Qfalse;\n  if(eh == 1) return Qtrue;\n\n  return Qnil;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-depth\"> <span class=\"method-callseq\"> depth </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the depth of the node</p> <div class=\"method-source-code\" id=\"depth-source\"> <pre class=\"c\">static VALUE depth(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  int depth;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n  depth = xmlTextReaderDepth(reader);\n  if(depth == -1) return Qnil;\n\n  return INT2NUM((long)depth);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-each\"> <span class=\"method-name\">each</span><span class=\"method-args\">() { |cursor| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Move the cursor through the document yielding the cursor to the block</p> <div class=\"method-source-code\" id=\"each-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/reader.rb, line 105\ndef each\n  while cursor = self.read\n    yield cursor\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-empty_element-3F\"> <span class=\"method-callseq\"> empty_element? # → true or false </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if the current node is empty, otherwise false.</p> <div class=\"method-source-code\" id=\"empty_element-3F-source\"> <pre class=\"c\">static VALUE empty_element_p(VALUE self)\n{\n  xmlTextReaderPtr reader;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n\n  if(xmlTextReaderIsEmptyElement(reader))\n    return Qtrue;\n\n  return Qfalse;\n}</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"reader#method-i-self_closing-3F\">self_closing?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-inner_xml\"> <span class=\"method-callseq\"> inner_xml </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Read the contents of the current node, including child nodes and markup. Returns a utf-8 encoded string.</p> <div class=\"method-source-code\" id=\"inner_xml-source\"> <pre class=\"c\">static VALUE inner_xml(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  xmlChar* value;\n  VALUE str;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n\n  value = xmlTextReaderReadInnerXml(reader);\n\n  str = Qnil;\n  if(value) {\n    str = NOKOGIRI_STR_NEW2((char*)value);\n    xmlFree(value);\n  }\n\n  return str;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-lang\"> <span class=\"method-callseq\"> lang </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the xml:lang scope within which the node resides.</p> <div class=\"method-source-code\" id=\"lang-source\"> <pre class=\"c\">static VALUE lang(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  const char *lang;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n  lang = (const char *)xmlTextReaderConstXmlLang(reader);\n  if(lang == NULL) return Qnil;\n\n  return NOKOGIRI_STR_NEW2(lang);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-local_name\"> <span class=\"method-callseq\"> local_name </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the local name of the node</p> <div class=\"method-source-code\" id=\"local_name-source\"> <pre class=\"c\">static VALUE local_name(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  const char *name;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n  name = (const char *)xmlTextReaderConstLocalName(reader);\n  if(name == NULL) return Qnil;\n\n  return NOKOGIRI_STR_NEW2(name);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-name\"> <span class=\"method-callseq\"> name </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the name of the node. Returns a utf-8 encoded string.</p> <div class=\"method-source-code\" id=\"name-source\"> <pre class=\"c\">static VALUE name(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  const char *name;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n  name = (const char *)xmlTextReaderConstName(reader);\n  if(name == NULL) return Qnil;\n\n  return NOKOGIRI_STR_NEW2(name);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-namespace_uri\"> <span class=\"method-callseq\"> namespace_uri </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the URI defining the namespace associated with the node</p> <div class=\"method-source-code\" id=\"namespace_uri-source\"> <pre class=\"c\">static VALUE namespace_uri(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  const char *uri;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n  uri = (const char *)xmlTextReaderConstNamespaceUri(reader);\n  if(uri == NULL) return Qnil;\n\n  return NOKOGIRI_STR_NEW2(uri);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-namespaces\"> <span class=\"method-callseq\"> namespaces </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get a hash of namespaces for this <a href=\"node\">Node</a></p> <div class=\"method-source-code\" id=\"namespaces-source\"> <pre class=\"c\">static VALUE namespaces(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  xmlNodePtr ptr;\n  VALUE attr ;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n\n  attr = rb_hash_new() ;\n\n  if (! has_attributes(reader))\n    return attr ;\n\n  ptr = xmlTextReaderExpand(reader);\n  if(ptr == NULL) return Qnil;\n\n  Nokogiri_xml_node_namespaces(ptr, attr);\n\n  return attr ;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-node_type\"> <span class=\"method-callseq\"> node_type </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the type of readers current node</p> <div class=\"method-source-code\" id=\"node_type-source\"> <pre class=\"c\">static VALUE node_type(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  Data_Get_Struct(self, xmlTextReader, reader);\n  return INT2NUM((long)xmlTextReaderNodeType(reader));\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-outer_xml\"> <span class=\"method-callseq\"> outer_xml </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Read the current node and its contents, including child nodes and markup. Returns a utf-8 encoded string.</p> <div class=\"method-source-code\" id=\"outer_xml-source\"> <pre class=\"c\">static VALUE outer_xml(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  xmlChar *value;\n  VALUE str = Qnil;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n\n  value = xmlTextReaderReadOuterXml(reader);\n\n  if(value) {\n    str = NOKOGIRI_STR_NEW2((char*)value);\n    xmlFree(value);\n  }\n  return str;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-prefix\"> <span class=\"method-callseq\"> prefix </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the shorthand reference to the namespace associated with the node.</p> <div class=\"method-source-code\" id=\"prefix-source\"> <pre class=\"c\">static VALUE prefix(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  const char *prefix;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n  prefix = (const char *)xmlTextReaderConstPrefix(reader);\n  if(prefix == NULL) return Qnil;\n\n  return NOKOGIRI_STR_NEW2(prefix);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-read\"> <span class=\"method-callseq\"> read </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Move the <a href=\"reader\">Reader</a> forward through the <a href=\"../xml\">XML</a> document.</p> <div class=\"method-source-code\" id=\"read-source\"> <pre class=\"c\">static VALUE read_more(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  xmlErrorPtr error;\n  VALUE error_list;\n  int ret;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n\n  error_list = rb_funcall(self, rb_intern(\"errors\"), 0);\n\n  xmlSetStructuredErrorFunc((void *)error_list, Nokogiri_error_array_pusher);\n  ret = xmlTextReaderRead(reader);\n  xmlSetStructuredErrorFunc(NULL, NULL);\n\n  if(ret == 1) return self;\n  if(ret == 0) return Qnil;\n\n  error = xmlGetLastError();\n  if(error)\n    rb_exc_raise(Nokogiri_wrap_xml_syntax_error(error));\n  else\n    rb_raise(rb_eRuntimeError, \"Error pulling: %d\", ret);\n\n  return Qnil;\n}</pre> </div> </div> </div> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-self_closing-3F\"> <span class=\"method-name\">self_closing?</span><span class=\"method-args\">()</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"reader#method-i-empty_element-3F\">empty_element?</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-state\"> <span class=\"method-callseq\"> state </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the state of the reader</p> <div class=\"method-source-code\" id=\"state-source\"> <pre class=\"c\">static VALUE state(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  Data_Get_Struct(self, xmlTextReader, reader);\n  return INT2NUM((long)xmlTextReaderReadState(reader));\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-value\"> <span class=\"method-callseq\"> value </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the text value of the node if present. Returns a utf-8 encoded string.</p> <div class=\"method-source-code\" id=\"value-source\"> <pre class=\"c\">static VALUE value(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  const char *value;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n  value = (const char *)xmlTextReaderConstValue(reader);\n  if(value == NULL) return Qnil;\n\n  return NOKOGIRI_STR_NEW2(value);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-value-3F\"> <span class=\"method-callseq\"> value? </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Does this node have a text value?</p> <div class=\"method-source-code\" id=\"value-3F-source\"> <pre class=\"c\">static VALUE value_eh(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  int eh;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n  eh = xmlTextReaderHasValue(reader);\n  if(eh == 0) return Qfalse;\n  if(eh == 1) return Qtrue;\n\n  return Qnil;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-xml_version\"> <span class=\"method-callseq\"> xml_version </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the <a href=\"../xml\">XML</a> version of the document being read</p> <div class=\"method-source-code\" id=\"xml_version-source\"> <pre class=\"c\">static VALUE xml_version(VALUE self)\n{\n  xmlTextReaderPtr reader;\n  const char *version;\n\n  Data_Get_Struct(self, xmlTextReader, reader);\n  version = (const char *)xmlTextReaderConstXmlVersion(reader);\n  if(version == NULL) return Qnil;\n\n  return NOKOGIRI_STR_NEW2(version);\n}</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/relaxng":"<h1 id=\"class-Nokogiri::XML::RelaxNG\" class=\"class\"> class Nokogiri::XML::RelaxNG </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\">cNokogiriXmlSchema</dd>\n</dl> <section class=\"description\"> <p><a href=\"relaxng\">Nokogiri::XML::RelaxNG</a> is used for validating <a href=\"../xml\">XML</a> against a <a href=\"relaxng\">RelaxNG</a> schema.</p> <h2 id=\"class-Nokogiri::XML::RelaxNG-label-Synopsis\">Synopsis</h2> <p>Validate an <a href=\"../xml\">XML</a> document against a <a href=\"relaxng\">RelaxNG</a> schema. Loop over the errors that are returned and print them out:</p> <pre class=\"ruby\">schema  = Nokogiri::XML::RelaxNG(File.open(ADDRESS_SCHEMA_FILE))\ndoc     = Nokogiri::XML(File.open(ADDRESS_XML_FILE))\n\nschema.validate(doc).each do |error|\n  puts error.message\nend\n</pre> <p>The list of errors are <a href=\"syntaxerror\">Nokogiri::XML::SyntaxError</a> objects.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-from_document\"> <span class=\"method-callseq\"> from_document(doc) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"relaxng\">RelaxNG</a> schema from the <a href=\"document\">Nokogiri::XML::Document</a> <code>doc</code></p> <div class=\"method-source-code\" id=\"from_document-source\"> <pre class=\"c\">static VALUE from_document(VALUE klass, VALUE document)\n{\n  xmlDocPtr doc;\n  xmlRelaxNGParserCtxtPtr ctx;\n  xmlRelaxNGPtr schema;\n  VALUE errors;\n  VALUE rb_schema;\n\n  Data_Get_Struct(document, xmlDoc, doc);\n\n  /* In case someone passes us a node. ugh. */\n  doc = doc-&gt;doc;\n\n  ctx = xmlRelaxNGNewDocParserCtxt(doc);\n\n  errors = rb_ary_new();\n  xmlSetStructuredErrorFunc((void *)errors, Nokogiri_error_array_pusher);\n\n#ifdef HAVE_XMLRELAXNGSETPARSERSTRUCTUREDERRORS\n  xmlRelaxNGSetParserStructuredErrors(\n    ctx,\n    Nokogiri_error_array_pusher,\n    (void *)errors\n  );\n#endif\n\n  schema = xmlRelaxNGParse(ctx);\n\n  xmlSetStructuredErrorFunc(NULL, NULL);\n\n  if(NULL == schema) {\n    xmlErrorPtr error = xmlGetLastError();\n    if(error)\n      Nokogiri_error_raise(NULL, error);\n    else\n      rb_raise(rb_eRuntimeError, \"Could not parse document\");\n\n    return Qnil;\n  }\n\n  rb_schema = Data_Wrap_Struct(klass, 0, dealloc, schema);\n  rb_iv_set(rb_schema, \"@errors\", errors);\n\n  return rb_schema;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-read_memory\"> <span class=\"method-callseq\"> read_memory(string) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"relaxng\">RelaxNG</a> from the contents of <code>string</code></p> <div class=\"method-source-code\" id=\"read_memory-source\"> <pre class=\"c\">static VALUE read_memory(VALUE klass, VALUE content)\n{\n  xmlRelaxNGParserCtxtPtr ctx = xmlRelaxNGNewMemParserCtxt(\n      (const char *)StringValuePtr(content),\n      (int)RSTRING_LEN(content)\n  );\n  xmlRelaxNGPtr schema;\n  VALUE errors = rb_ary_new();\n  VALUE rb_schema;\n\n  xmlSetStructuredErrorFunc((void *)errors, Nokogiri_error_array_pusher);\n\n#ifdef HAVE_XMLRELAXNGSETPARSERSTRUCTUREDERRORS\n  xmlRelaxNGSetParserStructuredErrors(\n    ctx,\n    Nokogiri_error_array_pusher,\n    (void *)errors\n  );\n#endif\n\n  schema = xmlRelaxNGParse(ctx);\n\n  xmlSetStructuredErrorFunc(NULL, NULL);\n  xmlRelaxNGFreeParserCtxt(ctx);\n\n  if(NULL == schema) {\n    xmlErrorPtr error = xmlGetLastError();\n    if(error)\n      Nokogiri_error_raise(NULL, error);\n    else\n      rb_raise(rb_eRuntimeError, \"Could not parse document\");\n\n    return Qnil;\n  }\n\n  rb_schema = Data_Wrap_Struct(klass, 0, dealloc, schema);\n  rb_iv_set(rb_schema, \"@errors\", errors);\n\n  return rb_schema;\n}</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/sax/document":"<h1 id=\"class-Nokogiri::XML::SAX::Document\" class=\"class\"> class Nokogiri::XML::SAX::Document </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl> <section class=\"description\"> <p>This class is used for registering types of events you are interested in handling. All of the methods on this class are available as possible events while parsing an <a href=\"../../xml\">XML</a> document. To register for any particular event, just subclass this class and implement the methods you are interested in knowing about.</p> <p>To only be notified about start and end element events, write a class like this:</p> <pre class=\"ruby\">class MyDocument &lt; Nokogiri::XML::SAX::Document\n  def start_element name, attrs = []\n    puts \"#{name} started!\"\n  end\n\n  def end_element name\n    puts \"#{name} ended\"\n  end\nend\n</pre> <p>You can use this event handler for any <a href=\"../sax\">SAX</a> style parser included with <a href=\"../../../nokogiri\">Nokogiri</a>. See <a href=\"../sax\">Nokogiri::XML::SAX</a>, and <a href=\"../../html/sax\">Nokogiri::HTML::SAX</a>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-cdata_block\"> <span class=\"method-name\">cdata_block</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Called when cdata blocks are found <code>string</code> contains the cdata content</p> <div class=\"method-source-code\" id=\"cdata_block-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/document.rb, line 159\ndef cdata_block string\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-characters\"> <span class=\"method-name\">characters</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Characters read between a tag. This method might be called multiple times given one contiguous string of characters.</p> <p><code>string</code> contains the character data</p> <div class=\"method-source-code\" id=\"characters-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/document.rb, line 135\ndef characters string\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-comment\"> <span class=\"method-name\">comment</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Called when comments are encountered <code>string</code> contains the comment data</p> <div class=\"method-source-code\" id=\"comment-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/document.rb, line 141\ndef comment string\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-end_document\"> <span class=\"method-name\">end_document</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Called when document ends parsing</p> <div class=\"method-source-code\" id=\"end_document-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/document.rb, line 83\ndef end_document\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-end_element\"> <span class=\"method-name\">end_element</span><span class=\"method-args\">(name)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Called at the end of an element <code>name</code> is the tag name</p> <div class=\"method-source-code\" id=\"end_element-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/document.rb, line 97\ndef end_element name\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-end_element_namespace\"> <span class=\"method-name\">end_element_namespace</span><span class=\"method-args\">(name, prefix = nil, uri = nil)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Called at the end of an element <code>name</code> is the element's name <code>prefix</code> is the namespace prefix associated with the element <code>uri</code> is the associated namespace URI</p> <div class=\"method-source-code\" id=\"end_element_namespace-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/document.rb, line 124\ndef end_element_namespace name, prefix = nil, uri = nil\n  ###\n  # Deal with SAX v1 interface\n  end_element [prefix, name].compact.join(':')\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-error\"> <span class=\"method-name\">error</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Called on document errors <code>string</code> contains the error</p> <div class=\"method-source-code\" id=\"error-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/document.rb, line 153\ndef error string\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-processing_instruction\"> <span class=\"method-name\">processing_instruction</span><span class=\"method-args\">(name, content)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Called when processing instructions are found <code>name</code> is the target of the instruction <code>content</code> is the value of the instruction</p> <div class=\"method-source-code\" id=\"processing_instruction-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/document.rb, line 166\ndef processing_instruction name, content\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-start_document\"> <span class=\"method-name\">start_document</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Called when document starts parsing</p> <div class=\"method-source-code\" id=\"start_document-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/document.rb, line 78\ndef start_document\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-start_element\"> <span class=\"method-name\">start_element</span><span class=\"method-args\">(name, attrs = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Called at the beginning of an element</p> <ul>\n<li> <p><code>name</code> is the name of the tag</p> </li>\n<li> <p><code>attrs</code> are an assoc list of namespaces and attributes, e.g.:</p> <pre>[ [\"xmlns:foo\", \"http://sample.net\"], [\"size\", \"large\"] ]</pre> </li>\n</ul> <div class=\"method-source-code\" id=\"start_element-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/document.rb, line 91\ndef start_element name, attrs = []\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-start_element_namespace\"> <span class=\"method-name\">start_element_namespace</span><span class=\"method-args\">(name, attrs = [], prefix = nil, uri = nil, ns = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Called at the beginning of an element <code>name</code> is the element name <code>attrs</code> is a list of attributes <code>prefix</code> is the namespace prefix for the element <code>uri</code> is the associated namespace URI <code>ns</code> is a hash of namespace prefix:urls associated with the element</p> <div class=\"method-source-code\" id=\"start_element_namespace-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/document.rb, line 107\ndef start_element_namespace name, attrs = [], prefix = nil, uri = nil, ns = []\n  ###\n  # Deal with SAX v1 interface\n  name = [prefix, name].compact.join(':')\n  attributes = ns.map { |ns_prefix,ns_uri|\n    [['xmlns', ns_prefix].compact.join(':'), ns_uri]\n  } + attrs.map { |attr|\n    [[attr.prefix, attr.localname].compact.join(':'), attr.value]\n  }\n  start_element name, attributes\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-warning\"> <span class=\"method-name\">warning</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Called on document warnings <code>string</code> contains the warning</p> <div class=\"method-source-code\" id=\"warning-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/document.rb, line 147\ndef warning string\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-xmldecl\"> <span class=\"method-name\">xmldecl</span><span class=\"method-args\">(version, encoding, standalone)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Called when an <a href=\"../../xml\">XML</a> declaration is parsed</p> <div class=\"method-source-code\" id=\"xmldecl-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/document.rb, line 73\ndef xmldecl version, encoding, standalone\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/sax/parser":"<h1 id=\"class-Nokogiri::XML::SAX::Parser\" class=\"class\"> class Nokogiri::XML::SAX::Parser </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl> <section class=\"description\"> <p>This parser is a <a href=\"../sax\">SAX</a> style parser that reads it's input as it deems necessary. The parser takes a <a href=\"document\">Nokogiri::XML::SAX::Document</a>, an optional encoding, then given an <a href=\"../../xml\">XML</a> input, sends messages to the <a href=\"document\">Nokogiri::XML::SAX::Document</a>.</p> <p>Here is an example of using this parser:</p> <pre class=\"ruby\"># Create a subclass of Nokogiri::XML::SAX::Document and implement\n# the events we care about:\nclass MyDoc &lt; Nokogiri::XML::SAX::Document\n  def start_element name, attrs = []\n    puts \"starting: #{name}\"\n  end\n\n  def end_element name\n    puts \"ending: #{name}\"\n  end\nend\n\n# Create our parser\nparser = Nokogiri::XML::SAX::Parser.new(MyDoc.new)\n\n# Send some XML to the parser\nparser.parse(File.open(ARGV[0]))\n</pre> <p>For more information about <a href=\"../sax\">SAX</a> parsers, see <a href=\"../sax\">Nokogiri::XML::SAX</a>. Also see <a href=\"document\">Nokogiri::XML::SAX::Document</a> for the available events.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"ENCODINGS\">ENCODINGS </dt>\n<dd>\n<p>Encodinds this parser supports</p> </dd>\n</dl> </section> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-document\"> <span class=\"method-name\">document</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>The <a href=\"document\">Nokogiri::XML::SAX::Document</a> where events will be sent.</p> </div> </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-encoding\"> <span class=\"method-name\">encoding</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>The encoding beings used for this document.</p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(doc = Nokogiri::XML::SAX::Document.new, encoding = 'UTF-8')</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"parser\">Parser</a> with <code>doc</code> and <code>encoding</code></p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/parser.rb, line 70\ndef initialize doc = Nokogiri::XML::SAX::Document.new, encoding = 'UTF-8'\n  check_encoding(encoding)\n  @encoding = encoding\n  @document = doc\n  @warned   = false\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse\"> <span class=\"method-name\">parse</span><span class=\"method-args\">(thing, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse given <code>thing</code> which may be a string containing xml, or an IO object.</p> <div class=\"method-source-code\" id=\"parse-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/parser.rb, line 80\ndef parse thing, &amp;block\n  if thing.respond_to?(:read) &amp;&amp; thing.respond_to?(:close)\n    parse_io(thing, &amp;block)\n  else\n    parse_memory(thing, &amp;block)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse_file\"> <span class=\"method-name\">parse_file</span><span class=\"method-args\">(filename) { |ctx| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse a file with <code>filename</code></p> <div class=\"method-source-code\" id=\"parse_file-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/parser.rb, line 100\ndef parse_file filename\n  raise ArgumentError unless filename\n  raise Errno::ENOENT unless File.exist?(filename)\n  raise Errno::EISDIR if File.directory?(filename)\n  ctx = ParserContext.file filename\n  yield ctx if block_given?\n  ctx.parse_with self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse_io\"> <span class=\"method-name\">parse_io</span><span class=\"method-args\">(io, encoding = 'ASCII') { |ctx| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse given <code>io</code></p> <div class=\"method-source-code\" id=\"parse_io-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/parser.rb, line 90\ndef parse_io io, encoding = 'ASCII'\n  check_encoding(encoding)\n  @encoding = encoding\n  ctx = ParserContext.io(io, ENCODINGS[encoding])\n  yield ctx if block_given?\n  ctx.parse_with self\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse_memory\"> <span class=\"method-name\">parse_memory</span><span class=\"method-args\">(data) { |ctx| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"parse_memory-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/parser.rb, line 109\ndef parse_memory data\n  ctx = ParserContext.memory data\n  yield ctx if block_given?\n  ctx.parse_with self\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/sax/parsercontext":"<h1 id=\"class-Nokogiri::XML::SAX::ParserContext\" class=\"class\"> class Nokogiri::XML::SAX::ParserContext </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl> <section class=\"description\"> <p>Context for <a href=\"../../xml\">XML</a> <a href=\"../sax\">SAX</a> parsers. This class is usually not instantiated by the user. Instead, you should be looking at <a href=\"parser\">Nokogiri::XML::SAX::Parser</a></p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-file\"> <span class=\"method-callseq\"> parse_file(filename) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse file given <code>filename</code></p> <div class=\"method-source-code\" id=\"file-source\"> <pre class=\"c\">static VALUE parse_file(VALUE klass, VALUE filename)\n{\n  xmlParserCtxtPtr ctxt = xmlCreateFileParserCtxt(StringValuePtr(filename));\n  return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-io\"> <span class=\"method-callseq\"> parse_io(io, encoding) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse <code>io</code> object with <code>encoding</code></p> <div class=\"method-source-code\" id=\"io-source\"> <pre class=\"c\">static VALUE\nparse_io(VALUE klass, VALUE io, VALUE encoding)\n{\n    xmlParserCtxtPtr ctxt;\n    xmlCharEncoding enc = (xmlCharEncoding)NUM2INT(encoding);\n\n    ctxt = xmlCreateIOParserCtxt(NULL, NULL,\n                                 (xmlInputReadCallback)io_read_callback,\n                                 (xmlInputCloseCallback)io_close_callback,\n                                 (void *)io, enc);\n    if (ctxt-&gt;sax) {\n        xmlFree(ctxt-&gt;sax);\n        ctxt-&gt;sax = NULL;\n    }\n\n    return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-memory\"> <span class=\"method-callseq\"> parse_memory(data) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse the <a href=\"../../xml\">XML</a> stored in memory in <code>data</code></p> <div class=\"method-source-code\" id=\"memory-source\"> <pre class=\"c\">static VALUE\nparse_memory(VALUE klass, VALUE data)\n{\n    xmlParserCtxtPtr ctxt;\n\n    if (NIL_P(data))\n        rb_raise(rb_eArgError, \"data cannot be nil\");\n    if (!(int)RSTRING_LEN(data))\n        rb_raise(rb_eRuntimeError, \"data cannot be empty\");\n\n    ctxt = xmlCreateMemoryParserCtxt(StringValuePtr(data),\n                                     (int)RSTRING_LEN(data));\n    if (ctxt-&gt;sax) {\n        xmlFree(ctxt-&gt;sax);\n        ctxt-&gt;sax = NULL;\n    }\n\n    return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(thing, encoding = 'UTF-8')</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/parser_context.rb, line 9\ndef self.new thing, encoding = 'UTF-8'\n  [:read, :close].all? { |x| thing.respond_to?(x) } ?\n    io(thing, Parser::ENCODINGS[encoding]) : memory(thing)\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-column\"> <span class=\"method-callseq\"> column </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the current column the parser context is processing.</p> <div class=\"method-source-code\" id=\"column-source\"> <pre class=\"c\">static VALUE column(VALUE self)\n{\n  xmlParserCtxtPtr ctxt;\n  xmlParserInputPtr io;\n\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  io = ctxt-&gt;input;\n  if(io)\n    return INT2NUM(io-&gt;col);\n\n  return Qnil;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-line\"> <span class=\"method-callseq\"> line </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Get the current line the parser context is processing.</p> <div class=\"method-source-code\" id=\"line-source\"> <pre class=\"c\">static VALUE line(VALUE self)\n{\n  xmlParserCtxtPtr ctxt;\n  xmlParserInputPtr io;\n\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  io = ctxt-&gt;input;\n  if(io)\n    return INT2NUM(io-&gt;line);\n\n  return Qnil;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse_with\"> <span class=\"method-callseq\"> parse_with(sax_handler) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Use <code>sax_handler</code> and parse the current document</p> <div class=\"method-source-code\" id=\"parse_with-source\"> <pre class=\"c\">static VALUE\nparse_with(VALUE self, VALUE sax_handler)\n{\n    xmlParserCtxtPtr ctxt;\n    xmlSAXHandlerPtr sax;\n\n    if (!rb_obj_is_kind_of(sax_handler, cNokogiriXmlSaxParser))\n        rb_raise(rb_eArgError, \"argument must be a Nokogiri::XML::SAX::Parser\");\n\n    Data_Get_Struct(self, xmlParserCtxt, ctxt);\n    Data_Get_Struct(sax_handler, xmlSAXHandler, sax);\n\n    /* Free the sax handler since we'll assign our own */\n    if (ctxt-&gt;sax &amp;&amp; ctxt-&gt;sax != (xmlSAXHandlerPtr)&amp;xmlDefaultSAXHandler)\n        xmlFree(ctxt-&gt;sax);\n\n    ctxt-&gt;sax = sax;\n    ctxt-&gt;userData = (void *)NOKOGIRI_SAX_TUPLE_NEW(ctxt, sax_handler);\n\n    rb_ensure(parse_doc, (VALUE)ctxt, parse_doc_finalize, (VALUE)ctxt);\n\n    return Qnil;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-recovery\"> <span class=\"method-callseq\"> recovery </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Should this parser recover from structural errors? It will not stop processing file on structural errors if if set to true</p> <div class=\"method-source-code\" id=\"recovery-source\"> <pre class=\"c\">static VALUE get_recovery(VALUE self)\n{\n  xmlParserCtxtPtr ctxt;\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  if(ctxt-&gt;recovery == 0)\n    return Qfalse;\n  else\n    return Qtrue;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-recovery-3D\"> <span class=\"method-callseq\"> recovery=(boolean) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Should this parser recover from structural errors? It will not stop processing file on structural errors if if set to true</p> <div class=\"method-source-code\" id=\"recovery-3D-source\"> <pre class=\"c\">static VALUE set_recovery(VALUE self, VALUE value)\n{\n  xmlParserCtxtPtr ctxt;\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  if(value == Qfalse)\n    ctxt-&gt;recovery = 0;\n  else\n    ctxt-&gt;recovery = 1;\n\n  return value;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-replace_entities\"> <span class=\"method-callseq\"> replace_entities </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Should this parser replace entities? &amp;amp; will get converted to '&amp;' if set to true</p> <div class=\"method-source-code\" id=\"replace_entities-source\"> <pre class=\"c\">static VALUE get_replace_entities(VALUE self)\n{\n  xmlParserCtxtPtr ctxt;\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  if(0 == ctxt-&gt;replaceEntities)\n    return Qfalse;\n  else\n    return Qtrue;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-replace_entities-3D\"> <span class=\"method-callseq\"> replace_entities=(boolean) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Should this parser replace entities? &amp;amp; will get converted to '&amp;' if set to true</p> <div class=\"method-source-code\" id=\"replace_entities-3D-source\"> <pre class=\"c\">static VALUE set_replace_entities(VALUE self, VALUE value)\n{\n  xmlParserCtxtPtr ctxt;\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  if(Qfalse == value)\n    ctxt-&gt;replaceEntities = 0;\n  else\n    ctxt-&gt;replaceEntities = 1;\n\n  return value;\n}</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/sax/pushparser":"<h1 id=\"class-Nokogiri::XML::SAX::PushParser\" class=\"class\"> class Nokogiri::XML::SAX::PushParser </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl> <section class=\"description\"> <p><a href=\"pushparser\">PushParser</a> can parse a document that is fed to it manually. It must be given a <a href=\"document\">SAX::Document</a> object which will be called with <a href=\"../sax\">SAX</a> events as the document is being parsed.</p> <p>Calling <a href=\"pushparser#method-i-3C-3C\"># writes </a><a href=\"../../xml\">XML</a> to the parser, calling any <a href=\"../sax\">SAX</a> callbacks it can.</p> <p><a href=\"pushparser#method-i-finish\">#finish</a> tells the parser that the document is finished and calls the end_document <a href=\"../sax\">SAX</a> method.</p> <p>Example:</p> <pre class=\"ruby\">parser = PushParser.new(Class.new(XML::SAX::Document) {\n  def start_document\n    puts \"start document called\"\n  end\n}.new)\nparser &lt;&lt; \"&lt;div&gt;hello&lt;\"\nparser &lt;&lt; \"/div&gt;\"\nparser.finish\n</pre> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-document\"> <span class=\"method-name\">document</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>The <a href=\"document\">Nokogiri::XML::SAX::Document</a> on which the <a href=\"pushparser\">PushParser</a> will be operating</p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(doc = XML::SAX::Document.new, file_name = nil, encoding = 'UTF-8')</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"pushparser\">PushParser</a> with <code>doc</code> as the <a href=\"../sax\">SAX</a> <a href=\"document\">Document</a>, providing an optional <code>file_name</code> and <code>encoding</code></p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/push_parser.rb, line 34\ndef initialize(doc = XML::SAX::Document.new, file_name = nil, encoding = 'UTF-8')\n  @document = doc\n  @encoding = encoding\n  @sax_parser = XML::SAX::Parser.new(doc)\n\n  ## Create our push parser context\n  initialize_native(@sax_parser, file_name)\nend</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail method-alias\"> <div class=\"method-heading\" id=\"method-i-3C-3C\"> <span class=\"method-name\">&lt;&lt;</span><span class=\"method-args\">(chunk, last_chunk = false)</span> </div>  <div class=\"aliases\"> Alias for: <a href=\"pushparser#method-i-write\">write</a> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-finish\"> <span class=\"method-name\">finish</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Finish the parsing. This method is only necessary for <a href=\"document#method-i-end_document\">Nokogiri::XML::SAX::Document#end_document</a> to be called.</p> <div class=\"method-source-code\" id=\"finish-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/push_parser.rb, line 54\ndef finish\n  write '', true\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-options\"> <span class=\"method-name\">options</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"options-source\"> <pre class=\"c\">static VALUE get_options(VALUE self)\n{\n  xmlParserCtxtPtr ctx;\n  Data_Get_Struct(self, xmlParserCtxt, ctx);\n\n  return INT2NUM(ctx-&gt;options);\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-options-3D\"> <span class=\"method-name\">options=</span><span class=\"method-args\">(p1)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"options-3D-source\"> <pre class=\"c\">static VALUE set_options(VALUE self, VALUE options)\n{\n  xmlParserCtxtPtr ctx;\n  Data_Get_Struct(self, xmlParserCtxt, ctx);\n\n  if (xmlCtxtUseOptions(ctx, (int)NUM2INT(options)) != 0)\n    rb_raise(rb_eRuntimeError, \"Cannot set XML parser context options\");\n\n  return Qnil;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-write\"> <span class=\"method-name\">write</span><span class=\"method-args\">(chunk, last_chunk = false)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Write a <code>chunk</code> of <a href=\"../../xml\">XML</a> to the <a href=\"pushparser\">PushParser</a>. Any callback methods that can be called will be called immediately.</p> <div class=\"method-source-code\" id=\"write-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/sax/push_parser.rb, line 46\ndef write chunk, last_chunk = false\n  native_write(chunk, last_chunk)\nend</pre> </div> </div> <div class=\"aliases\"> Also aliased as: <a href=\"pushparser#method-i-3C-3C\">&lt;&lt;</a> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/sax":"<h1 id=\"module-Nokogiri::XML::SAX\" class=\"module\"> module Nokogiri::XML::SAX </h1>\n <section class=\"description\"> <p><a href=\"sax\">SAX</a> Parsers are event driven parsers. <a href=\"../../nokogiri\">Nokogiri</a> provides two different event based parsers when dealing with <a href=\"../xml\">XML</a>. If you want to do <a href=\"sax\">SAX</a> style parsing using HTML, check out <a href=\"../html/sax\">Nokogiri::HTML::SAX</a>.</p> <p>The basic way a <a href=\"sax\">SAX</a> style parser works is by creating a parser, telling the parser about the events we're interested in, then giving the parser some <a href=\"../xml\">XML</a> to process. The parser will notify you when it encounters events you said you would like to know about.</p> <p>To register for events, you simply subclass <a href=\"sax/document\">Nokogiri::XML::SAX::Document</a>, and implement the methods for which you would like notification.</p> <p>For example, if I want to be notified when a document ends, and when an element starts, I would write a class like this:</p> <pre class=\"ruby\">class MyDocument &lt; Nokogiri::XML::SAX::Document\n  def end_document\n    puts \"the document has ended\"\n  end\n\n  def start_element name, attributes = []\n    puts \"#{name} started\"\n  end\nend\n</pre> <p>Then I would instantiate a <a href=\"sax\">SAX</a> parser with this document, and feed the parser some <a href=\"../xml\">XML</a></p> <pre># Create a new parser\nparser = Nokogiri::XML::SAX::Parser.new(MyDocument.new)\n\n# Feed the parser some XML\nparser.parse(File.open(ARGV[0]))</pre> <p>Now my document handler will be called when each node starts, and when then document ends. To see what kinds of events are available, take a look at <a href=\"sax/document\">Nokogiri::XML::SAX::Document</a>.</p> <p>Two <a href=\"sax\">SAX</a> parsers for <a href=\"../xml\">XML</a> are available, a parser that reads from a string or IO object as it feels necessary, and a parser that lets you spoon feed it <a href=\"../xml\">XML</a>. If you want to let <a href=\"../../nokogiri\">Nokogiri</a> deal with reading your <a href=\"../xml\">XML</a>, use the <a href=\"sax/parser\">Nokogiri::XML::SAX::Parser</a>. If you want to have fine grain control over the <a href=\"../xml\">XML</a> input, use the <a href=\"sax/pushparser\">Nokogiri::XML::SAX::PushParser</a>.</p> </section> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/schema":"<h1 id=\"class-Nokogiri::XML::Schema\" class=\"class\"> class Nokogiri::XML::Schema </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl> <section class=\"description\"> <p><a href=\"schema\">Nokogiri::XML::Schema</a> is used for validating <a href=\"../xml\">XML</a> against a schema (usually from an xsd file).</p> <h2 id=\"class-Nokogiri::XML::Schema-label-Synopsis\">Synopsis</h2> <p>Validate an <a href=\"../xml\">XML</a> document against a <a href=\"schema\">Schema</a>. Loop over the errors that are returned and print them out:</p> <pre class=\"ruby\">xsd = Nokogiri::XML::Schema(File.read(PO_SCHEMA_FILE))\ndoc = Nokogiri::XML(File.read(PO_XML_FILE))\n\nxsd.validate(doc).each do |error|\n  puts error.message\nend\n</pre> <p>The list of errors are <a href=\"syntaxerror\">Nokogiri::XML::SyntaxError</a> objects.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-errors\"> <span class=\"method-name\">errors</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>Errors while parsing the schema file</p> </div> </div> </section> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-from_document\"> <span class=\"method-callseq\"> from_document(doc) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"schema\">Schema</a> from the <a href=\"document\">Nokogiri::XML::Document</a> <code>doc</code></p> <div class=\"method-source-code\" id=\"from_document-source\"> <pre class=\"c\">static VALUE from_document(VALUE klass, VALUE document)\n{\n  xmlDocPtr doc;\n  xmlSchemaParserCtxtPtr ctx;\n  xmlSchemaPtr schema;\n  VALUE errors;\n  VALUE rb_schema;\n\n  Data_Get_Struct(document, xmlDoc, doc);\n\n  /* In case someone passes us a node. ugh. */\n  doc = doc-&gt;doc;\n\n  ctx = xmlSchemaNewDocParserCtxt(doc);\n\n  errors = rb_ary_new();\n  xmlSetStructuredErrorFunc((void *)errors, Nokogiri_error_array_pusher);\n\n#ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS\n  xmlSchemaSetParserStructuredErrors(\n    ctx,\n    Nokogiri_error_array_pusher,\n    (void *)errors\n  );\n#endif\n\n  schema = xmlSchemaParse(ctx);\n\n  xmlSetStructuredErrorFunc(NULL, NULL);\n  xmlSchemaFreeParserCtxt(ctx);\n\n  if(NULL == schema) {\n    xmlErrorPtr error = xmlGetLastError();\n    if(error)\n      Nokogiri_error_raise(NULL, error);\n    else\n      rb_raise(rb_eRuntimeError, \"Could not parse document\");\n\n    return Qnil;\n  }\n\n  rb_schema = Data_Wrap_Struct(klass, 0, dealloc, schema);\n  rb_iv_set(rb_schema, \"@errors\", errors);\n\n  return rb_schema;\n\n  return Qnil;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-name\">new</span><span class=\"method-args\">(string_or_io)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"schema\">Nokogiri::XML::Schema</a> object using a <code>string_or_io</code> object.</p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/schema.rb, line 36\ndef self.new string_or_io\n  from_document Nokogiri::XML(string_or_io)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-read_memory\"> <span class=\"method-callseq\"> read_memory(string) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"schema\">Schema</a> from the contents of <code>string</code></p> <div class=\"method-source-code\" id=\"read_memory-source\"> <pre class=\"c\">static VALUE read_memory(VALUE klass, VALUE content)\n{\n  xmlSchemaPtr schema;\n  xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt(\n      (const char *)StringValuePtr(content),\n      (int)RSTRING_LEN(content)\n  );\n  VALUE rb_schema;\n  VALUE errors = rb_ary_new();\n  xmlSetStructuredErrorFunc((void *)errors, Nokogiri_error_array_pusher);\n\n#ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS\n  xmlSchemaSetParserStructuredErrors(\n    ctx,\n    Nokogiri_error_array_pusher,\n    (void *)errors\n  );\n#endif\n\n   schema = xmlSchemaParse(ctx);\n\n  xmlSetStructuredErrorFunc(NULL, NULL);\n  xmlSchemaFreeParserCtxt(ctx);\n\n  if(NULL == schema) {\n    xmlErrorPtr error = xmlGetLastError();\n    if(error)\n      Nokogiri_error_raise(NULL, error);\n    else\n      rb_raise(rb_eRuntimeError, \"Could not parse document\");\n\n    return Qnil;\n  }\n\n  rb_schema = Data_Wrap_Struct(klass, 0, dealloc, schema);\n  rb_iv_set(rb_schema, \"@errors\", errors);\n\n  return rb_schema;\n}</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-valid-3F\"> <span class=\"method-name\">valid?</span><span class=\"method-args\">(thing)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Returns true if <code>thing</code> is a valid <a href=\"document\">Nokogiri::XML::Document</a> or file.</p> <div class=\"method-source-code\" id=\"valid-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/schema.rb, line 58\ndef valid? thing\n  validate(thing).length == 0\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-validate\"> <span class=\"method-name\">validate</span><span class=\"method-args\">(thing)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Validate <code>thing</code> against this schema. <code>thing</code> can be a <a href=\"document\">Nokogiri::XML::Document</a> object, or a filename. An Array of <a href=\"syntaxerror\">Nokogiri::XML::SyntaxError</a> objects found while validating the <code>thing</code> is returned.</p> <div class=\"method-source-code\" id=\"validate-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/schema.rb, line 45\ndef validate thing\n  if thing.is_a?(Nokogiri::XML::Document) \n    validate_document(thing) \n  elsif File.file?(thing)\n    validate_file(thing)\n  else\n    raise ArgumentError, \"Must provide Nokogiri::Xml::Document or the name of an existing file\"\n  end\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/syntaxerror":"<h1 id=\"class-Nokogiri::XML::SyntaxError\" class=\"class\"> class Nokogiri::XML::SyntaxError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../syntaxerror\">Nokogiri::SyntaxError</a></dd>\n</dl> <section class=\"description\"> <p>The <a href=\"syntaxerror\">XML::SyntaxError</a> is raised on parse errors</p> <p>This class provides information about <a href=\"../xml\">XML</a> SyntaxErrors. These exceptions are typically stored on <a href=\"document#attribute-i-errors\">Nokogiri::XML::Document#errors</a>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-code\"> <span class=\"method-name\">code</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-column\"> <span class=\"method-name\">column</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-domain\"> <span class=\"method-name\">domain</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-file\"> <span class=\"method-name\">file</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-int1\"> <span class=\"method-name\">int1</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-level\"> <span class=\"method-name\">level</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-line\"> <span class=\"method-name\">line</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-str1\"> <span class=\"method-name\">str1</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-str2\"> <span class=\"method-name\">str2</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-str3\"> <span class=\"method-name\">str3</span><span class=\"attribute-access-type\">[R]</span> </div>  </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-error-3F\"> <span class=\"method-name\">error?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>return true if this is an error</p> <div class=\"method-source-code\" id=\"error-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/syntax_error.rb, line 32\ndef error?\n  level == 2\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fatal-3F\"> <span class=\"method-name\">fatal?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>return true if this error is fatal</p> <div class=\"method-source-code\" id=\"fatal-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/syntax_error.rb, line 38\ndef fatal?\n  level == 3\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-none-3F\"> <span class=\"method-name\">none?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>return true if this is a non error</p> <div class=\"method-source-code\" id=\"none-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/syntax_error.rb, line 20\ndef none?\n  level == 0\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_s\"> <span class=\"method-name\">to_s</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method </div> <div class=\"method-source-code\" id=\"to_s-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/syntax_error.rb, line 42\ndef to_s\n  super.chomp\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-warning-3F\"> <span class=\"method-name\">warning?</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>return true if this is a warning</p> <div class=\"method-source-code\" id=\"warning-3F-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/syntax_error.rb, line 26\ndef warning?\n  level == 1\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/text":"<h1 id=\"class-Nokogiri::XML::Text\" class=\"class\"> class Nokogiri::XML::Text </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"characterdata\">Nokogiri::XML::CharacterData</a></dd>\n</dl> <section class=\"description\"> <p>Wraps <a href=\"text\">Text</a> nodes.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-callseq\"> new(content, document) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"text\">Text</a> element on the <code>document</code> with <code>content</code></p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"c\">static VALUE new(int argc, VALUE *argv, VALUE klass)\n{\n  xmlDocPtr doc;\n  xmlNodePtr node;\n  VALUE string;\n  VALUE document;\n  VALUE rest;\n  VALUE rb_node;\n\n  rb_scan_args(argc, argv, \"2*\", &amp;string, &amp;document, &amp;rest);\n\n  Data_Get_Struct(document, xmlDoc, doc);\n\n  node = xmlNewText((xmlChar *)StringValuePtr(string));\n  node-&gt;doc = doc-&gt;doc;\n\n  nokogiri_root_node(node);\n\n  rb_node = Nokogiri_wrap_xml_node(klass, node) ;\n  rb_obj_call_init(rb_node, argc, argv);\n\n  if(rb_block_given_p()) rb_yield(rb_node);\n\n  return rb_node;\n}</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-content-3D\"> <span class=\"method-name\">content=</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-source-code\" id=\"content-3D-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/text.rb, line 4\ndef content=(string)\n  self.native_content = string.to_s\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/xpath/syntaxerror":"<h1 id=\"class-Nokogiri::XML::XPath::SyntaxError\" class=\"class\"> class Nokogiri::XML::XPath::SyntaxError </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><a href=\"../syntaxerror\">Nokogiri::XML::SyntaxError</a></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-to_s\"> <span class=\"method-name\">to_s</span><span class=\"method-args\">()</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <div class=\"method-calls-super\"> Calls superclass method <a href=\"../syntaxerror#method-i-to_s\">Nokogiri::XML::SyntaxError#to_s</a> </div> <div class=\"method-source-code\" id=\"to_s-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/xpath/syntax_error.rb, line 5\ndef to_s\n  [super.chomp, str1].compact.join(': ')\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/xpath":"<h1 id=\"class-Nokogiri::XML::XPath\" class=\"class\"> class Nokogiri::XML::XPath </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl>  <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"attribute-method-details\"> <header> <h3>Attributes</h3> </header> <div class=\"method-detail\"> <div class=\"method-heading attribute-method-heading\" id=\"attribute-i-document\"> <span class=\"method-name\">document</span><span class=\"attribute-access-type\">[RW]</span> </div> <div class=\"method-description\"> <p>The <a href=\"document\">Nokogiri::XML::Document</a> tied to this <a href=\"xpath\">XPath</a> instance</p> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml/xpathcontext":"<h1 id=\"class-Nokogiri::XML::XPathContext\" class=\"class\"> class Nokogiri::XML::XPathContext </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl> <section class=\"description\"> <p><a href=\"xpathcontext\">XPathContext</a> is the entry point for searching a <a href=\"document\">Document</a> by using <a href=\"xpath\">XPath</a>.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-new\"> <span class=\"method-callseq\"> new(node) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"xpathcontext\">XPathContext</a> with <code>node</code> as the reference point.</p> <div class=\"method-source-code\" id=\"new-source\"> <pre class=\"c\">static VALUE new(VALUE klass, VALUE nodeobj)\n{\n  xmlNodePtr node;\n  xmlXPathContextPtr ctx;\n  VALUE self;\n\n  xmlXPathInit();\n\n  Data_Get_Struct(nodeobj, xmlNode, node);\n\n  ctx = xmlXPathNewContext(node-&gt;doc);\n  ctx-&gt;node = node;\n  self = Data_Wrap_Struct(klass, 0, deallocate, ctx);\n  /*rb_iv_set(self, \"@xpath_handler\", Qnil); */\n  return self;\n}</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-evaluate\"> <span class=\"method-callseq\"> evaluate(search_path, handler = nil) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Evaluate the <code>search_path</code> returning an <a href=\"xpath\">XML::XPath</a> object.</p> <div class=\"method-source-code\" id=\"evaluate-source\"> <pre class=\"c\">static VALUE evaluate(int argc, VALUE *argv, VALUE self)\n{\n  VALUE search_path, xpath_handler;\n  VALUE thing = Qnil;\n  xmlXPathContextPtr ctx;\n  xmlXPathObjectPtr xpath;\n  xmlChar *query;\n\n  Data_Get_Struct(self, xmlXPathContext, ctx);\n\n  if(rb_scan_args(argc, argv, \"11\", &amp;search_path, &amp;xpath_handler) == 1)\n    xpath_handler = Qnil;\n\n  query = (xmlChar *)StringValuePtr(search_path);\n\n  if(Qnil != xpath_handler) {\n    /* FIXME: not sure if this is the correct place to shove private data. */\n    ctx-&gt;userData = (void *)xpath_handler;\n    xmlXPathRegisterFuncLookup(ctx, lookup, (void *)xpath_handler);\n  }\n\n  xmlResetLastError();\n  xmlSetStructuredErrorFunc(NULL, Nokogiri_error_raise);\n\n  /* For some reason, xmlXPathEvalExpression will blow up with a generic error */\n  /* when there is a non existent function. */\n  xmlSetGenericErrorFunc(NULL, xpath_generic_exception_handler);\n\n  xpath = xmlXPathEvalExpression(query, ctx);\n  xmlSetStructuredErrorFunc(NULL, NULL);\n  xmlSetGenericErrorFunc(NULL, NULL);\n\n  if(xpath == NULL) {\n    xmlErrorPtr error = xmlGetLastError();\n    rb_exc_raise(Nokogiri_wrap_xml_syntax_error(error));\n  }\n\n  assert(ctx-&gt;doc);\n  assert(DOC_RUBY_OBJECT_TEST(ctx-&gt;doc));\n\n  switch(xpath-&gt;type) {\n    case XPATH_STRING:\n      thing = NOKOGIRI_STR_NEW2(xpath-&gt;stringval);\n      xmlFree(xpath-&gt;stringval);\n      break;\n    case XPATH_NODESET:\n      if(NULL == xpath-&gt;nodesetval) {\n        thing = Nokogiri_wrap_xml_node_set(xmlXPathNodeSetCreate(NULL),\n          DOC_RUBY_OBJECT(ctx-&gt;doc));\n      } else {\n        thing = Nokogiri_wrap_xml_node_set(xpath-&gt;nodesetval,\n            DOC_RUBY_OBJECT(ctx-&gt;doc));\n      }\n      break;\n    case XPATH_NUMBER:\n      thing = rb_float_new(xpath-&gt;floatval);\n      break;\n    case XPATH_BOOLEAN:\n      thing = xpath-&gt;boolval == 1 ? Qtrue : Qfalse;\n      break;\n    default:\n      thing = Nokogiri_wrap_xml_node_set(xmlXPathNodeSetCreate(NULL),\n        DOC_RUBY_OBJECT(ctx-&gt;doc));\n  }\n\n  xmlXPathFreeNodeSetList(xpath);\n\n  return thing;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-register_namespaces\"> <span class=\"method-name\">register_namespaces</span><span class=\"method-args\">(namespaces)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Register namespaces in <code>namespaces</code></p> <div class=\"method-source-code\" id=\"register_namespaces-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/xpath_context.rb, line 7\ndef register_namespaces(namespaces)\n  namespaces.each do |k, v|\n    k = k.to_s.gsub(/.*:/,'') # strip off 'xmlns:' or 'xml:'\n    register_ns(k, v)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-register_ns\"> <span class=\"method-callseq\"> register_ns(prefix, uri) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Register the namespace with <code>prefix</code> and <code>uri</code>.</p> <div class=\"method-source-code\" id=\"register_ns-source\"> <pre class=\"c\">static VALUE register_ns(VALUE self, VALUE prefix, VALUE uri)\n{\n  xmlXPathContextPtr ctx;\n  Data_Get_Struct(self, xmlXPathContext, ctx);\n\n  xmlXPathRegisterNs( ctx,\n                      (const xmlChar *)StringValuePtr(prefix),\n                      (const xmlChar *)StringValuePtr(uri)\n  );\n  return self;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-register_variable\"> <span class=\"method-callseq\"> register_variable(name, value) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Register the variable <code>name</code> with <code>value</code>.</p> <div class=\"method-source-code\" id=\"register_variable-source\"> <pre class=\"c\">static VALUE register_variable(VALUE self, VALUE name, VALUE value)\n{\n   xmlXPathContextPtr ctx;\n   xmlXPathObjectPtr xmlValue;\n   Data_Get_Struct(self, xmlXPathContext, ctx);\n\n   xmlValue = xmlXPathNewCString(StringValuePtr(value));\n\n   xmlXPathRegisterVariable( ctx,\n      (const xmlChar *)StringValuePtr(name),\n      xmlValue\n   );\n\n   return self;\n}</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xml":"<h1 id=\"module-Nokogiri::XML\" class=\"module\"> module Nokogiri::XML </h1>\n <section class=\"description\"> <p><a href=\"xml\">Nokogiri::XML</a></p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"XML_C14N_1_0\">XML_C14N_1_0 </dt>\n<dd>\n<p>Original C14N 1.0 spec canonicalization</p> </dd>\n<dt id=\"XML_C14N_1_1\">XML_C14N_1_1 </dt>\n<dd>\n<p>C14N 1.1 spec canonicalization</p> </dd>\n<dt id=\"XML_C14N_EXCLUSIVE_1_0\">XML_C14N_EXCLUSIVE_1_0 </dt>\n<dd>\n<p>Exclusive C14N 1.0 spec canonicalization</p> </dd>\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-Reader\"> <span class=\"method-name\">Reader</span><span class=\"method-args\">(string_or_io, url = nil, encoding = nil, options = ParseOptions::STRICT) { |options| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse an <a href=\"xml\">XML</a> document using the <a href=\"xml/reader\">Nokogiri::XML::Reader</a> API. See <a href=\"xml/reader\">Nokogiri::XML::Reader</a> for mor information</p> <div class=\"method-source-code\" id=\"Reader-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml.rb, line 48\ndef Reader string_or_io, url = nil, encoding = nil, options = ParseOptions::STRICT\n\n  options = Nokogiri::XML::ParseOptions.new(options) if Fixnum === options\n  # Give the options to the user\n  yield options if block_given?\n\n  if string_or_io.respond_to? :read\n    return Reader.from_io(string_or_io, url, encoding, options.to_i)\n  end\n  Reader.from_memory(string_or_io, url, encoding, options.to_i)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-RelaxNG\"> <span class=\"method-name\">RelaxNG</span><span class=\"method-args\">(string_or_io)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"xml/relaxng\">Nokogiri::XML::RelaxNG</a> document from <code>string_or_io</code>. See <a href=\"xml/relaxng\">Nokogiri::XML::RelaxNG</a> for an example.</p> <div class=\"method-source-code\" id=\"RelaxNG-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/relax_ng.rb, line 7\ndef RelaxNG string_or_io\n  RelaxNG.new(string_or_io)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-Schema\"> <span class=\"method-name\">Schema</span><span class=\"method-args\">(string_or_io)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"xml/schema\">Nokogiri::XML::Schema</a> object using a <code>string_or_io</code> object.</p> <div class=\"method-source-code\" id=\"Schema-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml/schema.rb, line 7\ndef Schema string_or_io\n  Schema.new(string_or_io)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-fragment\"> <span class=\"method-name\">fragment</span><span class=\"method-args\">(string)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse a fragment from <code>string</code> in to a <a href=\"xml/nodeset\">NodeSet</a>.</p> <div class=\"method-source-code\" id=\"fragment-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml.rb, line 68\ndef fragment string\n  XML::DocumentFragment.parse(string)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse\"> <span class=\"method-name\">parse</span><span class=\"method-args\">(thing, url = nil, encoding = nil, options = ParseOptions::DEFAULT_XML, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse <a href=\"xml\">XML</a>. Convenience method for <a href=\"xml/document#method-c-parse\">Nokogiri::XML::Document.parse</a></p> <div class=\"method-source-code\" id=\"parse-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml.rb, line 62\ndef parse thing, url = nil, encoding = nil, options = ParseOptions::DEFAULT_XML, &amp;block\n  Document.parse(thing, url, encoding, options, &amp;block)\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xslt/stylesheet":"<h1 id=\"class-Nokogiri::XSLT::Stylesheet\" class=\"class\"> class Nokogiri::XSLT::Stylesheet </h1>\n<dl class=\"meta\">\n<dt>Parent:</dt>\n<dd class=\"meta-parent\"><span>Object</span></dd>\n</dl> <section class=\"description\"> <p>A <a href=\"stylesheet\">Stylesheet</a> represents an <a href=\"../xslt\">XSLT</a> <a href=\"stylesheet\">Stylesheet</a> object. <a href=\"stylesheet\">Stylesheet</a> creation is done through <a href=\"../../nokogiri\">Nokogiri</a>.XSLT. Here is an example of transforming an <a href=\"../xml/document\">XML::Document</a> with a Stylesheet:</p> <pre>doc   = Nokogiri::XML(File.read('some_file.xml'))\nxslt  = Nokogiri::XSLT(File.read('some_transformer.xslt'))\n\nputs xslt.transform(doc)</pre> <p>See <a href=\"stylesheet#method-i-transform\">#transform</a> for more transformation information.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-parse_stylesheet_doc\"> <span class=\"method-callseq\"> parse_stylesheet_doc(document) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse a stylesheet from <code>document</code>.</p> <div class=\"method-source-code\" id=\"parse_stylesheet_doc-source\"> <pre class=\"c\">static VALUE parse_stylesheet_doc(VALUE klass, VALUE xmldocobj)\n{\n    xmlDocPtr xml, xml_cpy;\n    VALUE errstr, exception;\n    xsltStylesheetPtr ss ;\n    Data_Get_Struct(xmldocobj, xmlDoc, xml);\n    exsltRegisterAll();\n\n    errstr = rb_str_new(0, 0);\n    xsltSetGenericErrorFunc((void *)errstr, xslt_generic_error_handler);\n\n    xml_cpy = xmlCopyDoc(xml, 1); /* 1 =&gt; recursive */\n    ss = xsltParseStylesheetDoc(xml_cpy);\n\n    xsltSetGenericErrorFunc(NULL, NULL);\n\n    if (!ss) {\n        xmlFreeDoc(xml_cpy);\n        exception = rb_exc_new3(rb_eRuntimeError, errstr);\n        rb_exc_raise(exception);\n    }\n\n    return Nokogiri_wrap_xslt_stylesheet(ss);\n}</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-apply_to\"> <span class=\"method-name\">apply_to</span><span class=\"method-args\">(document, params = [])</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Apply an <a href=\"../xslt\">XSLT</a> stylesheet to an <a href=\"../xml/document\">XML::Document</a>. <code>params</code> is an array of strings used as <a href=\"../xslt\">XSLT</a> parameters. returns serialized document</p> <div class=\"method-source-code\" id=\"apply_to-source\"> <pre class=\"ruby\"># File lib/nokogiri/xslt/stylesheet.rb, line 20\ndef apply_to document, params = []\n  serialize(transform(document, params))\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-serialize\"> <span class=\"method-callseq\"> serialize(document) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Serialize <code>document</code> to an xml string.</p> <div class=\"method-source-code\" id=\"serialize-source\"> <pre class=\"c\">static VALUE serialize(VALUE self, VALUE xmlobj)\n{\n    xmlDocPtr xml ;\n    nokogiriXsltStylesheetTuple *wrapper;\n    xmlChar* doc_ptr ;\n    int doc_len ;\n    VALUE rval ;\n\n    Data_Get_Struct(xmlobj, xmlDoc, xml);\n    Data_Get_Struct(self, nokogiriXsltStylesheetTuple, wrapper);\n    xsltSaveResultToString(&amp;doc_ptr, &amp;doc_len, xml, wrapper-&gt;ss);\n    rval = NOKOGIRI_STR_NEW(doc_ptr, doc_len);\n    xmlFree(doc_ptr);\n    return rval ;\n}</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-transform\"> <span class=\"method-callseq\"> transform(document, params = []) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Apply an <a href=\"../xslt\">XSLT</a> stylesheet to an <a href=\"../xml/document\">XML::Document</a>. <code>params</code> is an array of strings used as <a href=\"../xslt\">XSLT</a> parameters. returns <a href=\"../xml/document\">Nokogiri::XML::Document</a></p> <p>Example:</p> <pre>doc   = Nokogiri::XML(File.read(ARGV[0]))\nxslt  = Nokogiri::XSLT(File.read(ARGV[1]))\nputs xslt.transform(doc, ['key', 'value'])</pre> <div class=\"method-source-code\" id=\"transform-source\"> <pre class=\"c\">static VALUE transform(int argc, VALUE* argv, VALUE self)\n{\n    VALUE xmldoc, paramobj, errstr, exception ;\n    xmlDocPtr xml ;\n    xmlDocPtr result ;\n    nokogiriXsltStylesheetTuple *wrapper;\n    const char** params ;\n    long param_len, j ;\n    int parse_error_occurred ;\n\n    rb_scan_args(argc, argv, \"11\", &amp;xmldoc, &amp;paramobj);\n    if (NIL_P(paramobj)) { paramobj = rb_ary_new2(0L) ; }\n    if (!rb_obj_is_kind_of(xmldoc, cNokogiriXmlDocument))\n      rb_raise(rb_eArgError, \"argument must be a Nokogiri::XML::Document\");\n\n    /* handle hashes as arguments. */\n    if(T_HASH == TYPE(paramobj)) {\n      paramobj = rb_funcall(paramobj, rb_intern(\"to_a\"), 0);\n      paramobj = rb_funcall(paramobj, rb_intern(\"flatten\"), 0);\n    }\n\n    Check_Type(paramobj, T_ARRAY);\n\n    Data_Get_Struct(xmldoc, xmlDoc, xml);\n    Data_Get_Struct(self, nokogiriXsltStylesheetTuple, wrapper);\n\n    param_len = RARRAY_LEN(paramobj);\n    params = calloc((size_t)param_len+1, sizeof(char*));\n    for (j = 0 ; j &lt; param_len ; j++) {\n      VALUE entry = rb_ary_entry(paramobj, j);\n      const char * ptr = StringValuePtr(entry);\n      params[j] = ptr;\n    }\n    params[param_len] = 0 ;\n\n    errstr = rb_str_new(0, 0);\n    xsltSetGenericErrorFunc((void *)errstr, xslt_generic_error_handler);\n    xmlSetGenericErrorFunc(NULL, (xmlGenericErrorFunc)&amp;swallow_superfluous_xml_errors);\n\n    result = xsltApplyStylesheet(wrapper-&gt;ss, xml, params);\n    free(params);\n\n    xsltSetGenericErrorFunc(NULL, NULL);\n    xmlSetGenericErrorFunc(NULL, NULL);\n\n    parse_error_occurred = (Qfalse == rb_funcall(errstr, rb_intern(\"empty?\"), 0));\n\n    if (parse_error_occurred) {\n      exception = rb_exc_new3(rb_eRuntimeError, errstr);\n      rb_exc_raise(exception);\n    }\n\n    return Nokogiri_wrap_xml_document((VALUE)0, result) ;\n}</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri/xslt":"<h1 id=\"module-Nokogiri::XSLT\" class=\"module\"> module Nokogiri::XSLT </h1>\n <section class=\"description\"> <p>See <a href=\"xslt/stylesheet\">Nokogiri::XSLT::Stylesheet</a> for creating and manipulating <a href=\"xslt/stylesheet\">Stylesheet</a> object.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section id=\"public-class-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Class Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-c-register\"> <span class=\"method-callseq\"> register(uri, custom_handler_class) </span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Register a class that implements custom <a href=\"xslt\">XSLT</a> transformation functions.</p> <div class=\"method-source-code\" id=\"register-source\"> <pre class=\"c\">static VALUE registr(VALUE self, VALUE uri, VALUE obj)\n{\n    VALUE modules = rb_iv_get(self, \"@modules\");\n    if(NIL_P(modules)) rb_raise(rb_eRuntimeError, \"wtf! @modules isn't set\");\n\n    rb_hash_aset(modules, uri, obj);\n    xsltRegisterExtModule((unsigned char *)StringValuePtr(uri), initFunc, shutdownFunc);\n    return self;\n}</pre> </div> </div> </div> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse\"> <span class=\"method-name\">parse</span><span class=\"method-args\">(string, modules = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse the stylesheet in <code>string</code>, register any <code>modules</code></p> <div class=\"method-source-code\" id=\"parse-source\"> <pre class=\"ruby\"># File lib/nokogiri/xslt.rb, line 24\ndef parse string, modules = {}\n  modules.each do |url, klass|\n    XSLT.register url, klass\n  end\n\n  if Nokogiri.jruby?\n    Stylesheet.parse_stylesheet_doc(XML.parse(string), string)\n  else\n    Stylesheet.parse_stylesheet_doc(XML.parse(string))\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-quote_params\"> <span class=\"method-name\">quote_params</span><span class=\"method-args\">(params)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Quote parameters in <code>params</code> for stylesheet safety</p> <div class=\"method-source-code\" id=\"quote_params-source\"> <pre class=\"ruby\"># File lib/nokogiri/xslt.rb, line 38\ndef quote_params params\n  parray = (params.instance_of?(Hash) ? params.to_a.flatten : params).dup\n  parray.each_with_index do |v,i|\n    if i % 2 &gt; 0\n      parray[i]=\n        if v =~ /'/\n          \"concat('#{ v.gsub(/'/, %q{', \"'\", '}) }')\"\n        else\n          \"'#{v}'\";\n        end\n    else\n      parray[i] = v.to_s\n    end\n  end\n  parray.flatten\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n","nokogiri":"<h1 id=\"module-Nokogiri\" class=\"module\"> module Nokogiri </h1>\n <section class=\"description\"> <p><a href=\"nokogiri\">Nokogiri</a> parses and searches XML/HTML very quickly, and also has correctly implemented CSS3 selector support as well as XPath 1.0 support.</p> <p>Parsing a document returns either a <a href=\"nokogiri/xml/document\">Nokogiri::XML::Document</a>, or a <a href=\"nokogiri/html/document\">Nokogiri::HTML::Document</a> depending on the kind of document you parse.</p> <p>Here is an example:</p> <pre class=\"ruby\">require 'nokogiri'\nrequire 'open-uri'\n\n# Get a Nokogiri::HTML:Document for the page we’re interested in...\n\ndoc = Nokogiri::HTML(open('http://www.google.com/search?q=tenderlove'))\n\n# Do funky things with it using Nokogiri::XML::Node methods...\n\n####\n# Search for nodes by css\ndoc.css('h3.r a.l').each do |link|\n  puts link.content\nend\n</pre> <p>See <a href=\"nokogiri/xml/node#method-i-css\">Nokogiri::XML::Node#css</a> for more information about CSS searching. See <a href=\"nokogiri/xml/node#method-i-xpath\">Nokogiri::XML::Node#xpath</a> for more information about XPath searching.</p> </section> <section id=\"5Buntitled-5D\" class=\"documentation-section\"> <section class=\"constants-list\"> <header> <h3>Constants</h3> </header> <dl> <dt id=\"VERSION\">VERSION </dt>\n<dd>\n<p>The version of <a href=\"nokogiri\">Nokogiri</a> you are using</p> </dd>\n<dt id=\"VERSION_INFO\">VERSION_INFO </dt>\n<dd>\n<p>More complete version information about libxml</p> </dd>\n</dl> </section> <section id=\"public-instance-5Buntitled-5D-method-details\" class=\"method-section\"> <header> <h3>Public Instance Methods</h3> </header> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-HTML\"> <span class=\"method-name\">HTML</span><span class=\"method-args\">(thing, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse HTML. Convenience method for <a href=\"nokogiri/html/document#method-i-parse\">Nokogiri::HTML::Document#parse</a></p> <div class=\"method-source-code\" id=\"HTML-source\"> <pre class=\"ruby\"># File lib/nokogiri/html.rb, line 14\ndef HTML thing, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML, &amp;block\n  Nokogiri::HTML::Document.parse(thing, url, encoding, options, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-Slop\"> <span class=\"method-name\">Slop</span><span class=\"method-args\">(*args, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse a document and add the <a href=\"nokogiri#method-i-Slop\">#Slop</a> decorator. The <a href=\"nokogiri#method-i-Slop\">#Slop</a> decorator implements method_missing such that methods may be used instead of CSS or XPath. For example:</p> <pre>doc = Nokogiri::Slop(&lt;&lt;-eohtml)\n  &lt;html&gt;\n    &lt;body&gt;\n      &lt;p&gt;first&lt;/p&gt;\n      &lt;p&gt;second&lt;/p&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\neohtml\nassert_equal('second', doc.html.body.p[1].text)</pre> <div class=\"method-source-code\" id=\"Slop-source\"> <pre class=\"ruby\"># File lib/nokogiri.rb, line 110\ndef Slop(*args, &amp;block)\n  Nokogiri(*args, &amp;block).slop!\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-XML\"> <span class=\"method-name\">XML</span><span class=\"method-args\">(thing, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_XML, &amp;block)</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse <a href=\"nokogiri/xml\">XML</a>. Convenience method for <a href=\"nokogiri/xml/document#method-c-parse\">Nokogiri::XML::Document.parse</a></p> <div class=\"method-source-code\" id=\"XML-source\"> <pre class=\"ruby\"># File lib/nokogiri/xml.rb, line 32\ndef XML thing, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_XML, &amp;block\n  Nokogiri::XML::Document.parse(thing, url, encoding, options, &amp;block)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-XSLT\"> <span class=\"method-name\">XSLT</span><span class=\"method-args\">(stylesheet, modules = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a <a href=\"nokogiri/xslt/stylesheet\">Nokogiri::XSLT::Stylesheet</a> with <code>stylesheet</code>.</p> <p>Example:</p> <pre>xslt = Nokogiri::XSLT(File.read(ARGV[0]))</pre> <div class=\"method-source-code\" id=\"XSLT-source\"> <pre class=\"ruby\"># File lib/nokogiri/xslt.rb, line 12\ndef XSLT stylesheet, modules = {}\n  XSLT.parse(stylesheet, modules)\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-make\"> <span class=\"method-name\">make</span><span class=\"method-args\">(input = nil, opts = {})</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Create a new <a href=\"nokogiri/xml/documentfragment\">Nokogiri::XML::DocumentFragment</a></p> <div class=\"method-source-code\" id=\"make-source\"> <pre class=\"ruby\"># File lib/nokogiri.rb, line 87\ndef make input = nil, opts = {}, &amp;blk\n  if input\n    Nokogiri::HTML.fragment(input).children.first\n  else\n    Nokogiri(&amp;blk)\n  end\nend</pre> </div> </div> </div> <div class=\"method-detail \"> <div class=\"method-heading\" id=\"method-i-parse\"> <span class=\"method-name\">parse</span><span class=\"method-args\">(string, url = nil, encoding = nil, options = nil) { |doc| ... }</span> <a class=\"method-click-advice\">Show source</a> </div> <div class=\"method-description\"> <p>Parse an HTML or <a href=\"nokogiri/xml\">XML</a> document. <code>string</code> contains the document.</p> <div class=\"method-source-code\" id=\"parse-source\"> <pre class=\"ruby\"># File lib/nokogiri.rb, line 69\ndef parse string, url = nil, encoding = nil, options = nil\n  if string.respond_to?(:read) ||\n      /^\\s*&lt;(?:!DOCTYPE\\s+)?html[\\s&gt;]/i === string[0, 512]\n    # Expect an HTML indicator to appear within the first 512\n    # characters of a document. (&lt;?xml ?&gt; + &lt;?xml-stylesheet ?&gt;\n    # shouldn't be that long)\n    Nokogiri.HTML(string, url, encoding,\n      options || XML::ParseOptions::DEFAULT_HTML)\n  else\n    Nokogiri.XML(string, url, encoding,\n      options || XML::ParseOptions::DEFAULT_XML)\n  end.tap { |doc|\n    yield doc if block_given?\n  }\nend</pre> </div> </div> </div> </section> </section><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2008&ndash;2014 Aaron Patterson, Mike Dalessio, Charles Nutter,<br>Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori MUSHA<br>Licensed under the MIT License.<br>\n    \n  </p>\n</div>\n"}