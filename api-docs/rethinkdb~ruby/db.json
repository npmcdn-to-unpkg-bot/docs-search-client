{"index":"<h1>ReQL command reference</h1><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/</a>\n  </p>\n</div>\n","r":"<h1 class=\"title\">ReQL command: r</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r → r\n</pre> <h2 id=\"description\">Description</h2> <p>The top-level ReQL namespace.</p> <p><strong>Example:</strong> Setup your top-level namespace.</p> <pre data-language=\"ruby\">require 'rethinkdb'\ninclude RethinkDB::Shortcuts\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/accessing-rql/r.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/r\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/r</a>\n  </p>\n</div>\n","table_list":"<h1 class=\"title\">ReQL command: table_list</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">db.table_list() → array\n</pre> <h2 id=\"description\">Description</h2> <p>List all table names in a database. The result is a list of strings.</p> <p><strong>Example:</strong> List all tables of the ‘test’ database.</p> <pre data-language=\"ruby\">r.db('test').table_list().run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"table_create\">table_create</a></li> <li><a href=\"table_drop\">table_drop</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/manipulating-tables/table_list.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/table_list\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/table_list</a>\n  </p>\n</div>\n","server":"<h1 class=\"title\">ReQL command: server</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">conn.server\n</pre> <h2 id=\"description\">Description</h2> <p>Return information about the server being used by a connection.</p> <p>The server command returns either two or three fields:</p> <ul> <li>id: the UUID of the server the client is connected to.</li> <li>proxy: a boolean indicating whether the server is a <a href=\"https://rethinkdb.com/docs/sharding-and-replication/#running-a-proxy-node\">RethinkDB proxy node</a>.</li> <li>name: the server name. If proxy is true, this field will not be returned.</li> </ul> <p><strong>Example:</strong> Return server information.</p> <pre data-language=\"ruby\">&gt; conn.server\n\n{\n    :id =&gt; \"404bef53-4b2c-433f-9184-bc3f7bda4a15\",\n    :name =&gt; \"amadeus\",\n    :proxy =&gt; false\n}\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/accessing-rql/server.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/server\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/server</a>\n  </p>\n</div>\n","repl":"<h1 class=\"title\">ReQL command: repl</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">connection.repl\n</pre> <h2 id=\"description\">Description</h2> <p>Set the default connection to make REPL use easier. Allows calling .run on queries without specifying a connection.</p> <p><strong>Note:</strong> Avoid using repl in application code. RethinkDB connection objects are not thread-safe, and calls to connect from multiple threads may change the global connection object used by repl. Applications should specify connections explicitly.</p> <p><strong>Example:</strong> Set the default connection for the REPL, then call run without specifying the connection.</p> <pre data-language=\"ruby\">r.connect(:db =&gt; 'marvel').repl\nr.table('heroes').run\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"connect\">connect</a></li> <li><a href=\"use\">use</a></li> <li><a href=\"close\">close</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/accessing-rql/repl.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/repl\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/repl</a>\n  </p>\n</div>\n","reconnect":"<h1 class=\"title\">ReQL command: reconnect</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">conn.reconnect([{:noreply_wait =&gt; true}])\n</pre> <h2 id=\"description\">Description</h2> <p>Close and reopen a connection.</p> <p>Closing a connection normally waits until all outstanding requests have finished and then frees any open resources associated with the connection. By passing false to the noreply_wait optional argument, the connection will be closed immediately, possibly aborting any outstanding noreply writes.</p> <p>A noreply query is executed by passing the noreply option to the <a href=\"run\">run</a> command, indicating that run() should not wait for the query to complete before returning. You may also explicitly wait for a noreply query to complete by using the <a href=\"noreply_wait\">noreply_wait</a> command.</p> <p><strong>Example:</strong> Cancel outstanding requests/queries that are no longer needed.</p> <pre data-language=\"ruby\">conn.reconnect(:noreply_wait =&gt; false)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"connect\">connect</a></li> <li><a href=\"use\">use</a></li> <li><a href=\"repl\">repl</a></li> <li><a href=\"close\">close</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/accessing-rql/reconnect.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/reconnect\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/reconnect</a>\n  </p>\n</div>\n","use":"<h1 class=\"title\">ReQL command: use</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">conn.use(db_name)\n</pre> <h2 id=\"description\">Description</h2> <p>Change the default database on this connection.</p> <p><strong>Example:</strong> Change the default database so that we don’t need to specify the database when referencing a table.</p> <pre data-language=\"ruby\">conn.use('marvel')\nr.table('heroes').run(conn) # refers to r.db('marvel').table('heroes')\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"connect\">connect</a></li> <li><a href=\"repl\">repl</a></li> <li><a href=\"close\">close</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/accessing-rql/use.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/use\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/use</a>\n  </p>\n</div>\n","connect":"<h1 class=\"title\">ReQL command: connect</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.connect(opts={}) → connection\n</pre> <h2 id=\"description\">Description</h2> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/connect_ruby.png\" class=\"api_command_illustration\"></p> <p>Create a new connection to the database server. Accepts the following options:</p> <ul> <li>host: the host to connect to (default localhost).</li> <li>port: the port to connect on (default 28015).</li> <li>db: the default database (default test).</li> <li>user: the user account to connect as (default admin).</li> <li>password: the password for the user account to connect as (default '', empty).</li> <li>timeout: timeout period in seconds for the connection to be opened (default 20).</li> <li>ssl: a hash of options to support SSL connections (default nil). Currently, there is only one option available, and if the ssl option is specified, this key is required: <ul> <li>ca_certs: a path to the SSL CA certificate.</li> </ul> </li> </ul> <p>If the connection cannot be established, a ReqlDriverError exception will be thrown.</p>  <div class=\"infobox \">\n<p>Using SSL with RethinkDB requires proxy software on the server, such as <a href=\"http://nginx.org/\">Nginx</a>, <a href=\"http://www.haproxy.org/\">HAProxy</a> or an SSL tunnel. RethinkDB will encrypt traffic and verify the CA certification to prevent <a href=\"http://en.wikipedia.org/wiki/Man-in-the-middle_attack\">man-in-the-middle</a> attacks. Consult your proxy’s documentation for more details.</p> <p>Alternatively, you may use RethinkDB’s built-in <a href=\"https://rethinkdb.com/docs/security/\">TLS support</a>.</p> </div> <p>The RethinkDB Ruby driver includes support for asynchronous connections using EventMachine. Read the <a href=\"https://rethinkdb.com/docs/async-connections/#ruby-with-eventmachine\">asynchronous connections</a> documentation for more information.</p> <p><strong>Example:</strong> Open a connection using the default host and port, specifying the default database.</p> <pre data-language=\"ruby\">conn = r.connect(:db =&gt; 'marvel')\n</pre>  <p><strong>Example:</strong> Open a new connection to the database.</p> <pre data-language=\"ruby\">conn = r.connect(:host =&gt; 'localhost',\n                 :port =&gt; 28015,\n                 :db =&gt; 'heroes')\n</pre>  <p><strong>Example:</strong> Open a new connection to the database, specifying a user/password combination for authentication.</p> <pre data-language=\"ruby\">conn = r.connect(:host =&gt; 'localhost',\n                 :port =&gt; 28015,\n                 :db =&gt; 'heroes',\n                 :user =&gt; 'herofinder',\n                 :password =&gt; 'metropolis')\n</pre>  <p><strong>Example:</strong> Open a new connection to the database using an SSL proxy.</p> <pre data-language=\"ruby\">conn = r.connect(:host =&gt; 'localhost',\n                 :port =&gt; 28015,\n                 :ssl =&gt; {\n                    :ca_certs =&gt; '/path/to/ca.crt'\n                 })\n</pre>  <p><strong>Example:</strong> Open a connection and immediately pass it to a Ruby block. Using this style, the connection will be automatically closed when execution reaches the end of the block.</p> <pre data-language=\"ruby\">r.connect(:db =&gt; 'marvel') { |conn|\n    r.table('superheroes').run(conn)\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"use\">use</a></li> <li><a href=\"repl\">repl</a></li> <li><a href=\"close\">close</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/accessing-rql/connect.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/connect\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/connect</a>\n  </p>\n</div>\n","run":"<h1 class=\"title\">ReQL command: run</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">query.run(conn[, options]) → cursor\nquery.run(conn[, options]) → object\n</pre> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/run.png\" class=\"api_command_illustration\"></p> <h2 id=\"description\">Description</h2> <p>Run a query on a connection, returning either a single JSON result or a cursor, depending on the query.</p> <p>The options can be:</p> <ul> <li>read_mode: One of three possible values affecting the consistency guarantee for the query (default: 'single'). <ul> <li>'single' (the default) returns values that are in memory (but not necessarily written to disk) on the primary replica.</li> <li>'majority' will only return values that are safely committed on disk on a majority of replicas. This requires sending a message to every replica on each read, so it is the slowest but most consistent.</li> <li>'outdated' will return values that are in memory on an arbitrarily-selected replica. This is the fastest but least consistent.</li> </ul> </li> <li>time_format: what format to return times in (default: 'native'). Set this to 'raw' if you want times returned as JSON objects for exporting.</li> <li>profile: whether or not to return a profile of the query’s execution (default: false).</li> <li>durability: possible values are 'hard' and 'soft'. In soft durability mode RethinkDB will acknowledge the write immediately after receiving it, but before the write has been committed to disk.</li> <li>group_format: what format to return grouped_data and grouped_streams in (default: 'native'). Set this to 'raw' if you want the raw pseudotype.</li> <li>noreply: set to true to not receive the result object or cursor and return immediately.</li> <li>db: the database to run this query against, specified with the <a href=\"db\">db</a> command. The default is the database specified in the db parameter to <a href=\"connect\">connect</a> (which defaults to test). The database may also be specified separately with the db command.</li> <li>array_limit: the maximum numbers of array elements that can be returned by a query (default: 100,000). This affects all ReQL commands that return arrays. Note that it has no effect on the size of arrays being <em>written</em> to the database; those always have an upper limit of 100,000 elements.</li> <li>binary_format: what format to return binary data in (default: 'native'). Set this to 'raw' if you want the raw pseudotype.</li> <li>min_batch_rows: minimum number of rows to wait for before batching a result set (default: 8). This is an integer.</li> <li>max_batch_rows: maximum number of rows to wait for before batching a result set (default: unlimited). This is an integer.</li> <li>max_batch_bytes: maximum number of bytes to wait for before batching a result set (default: 1MB). This is an integer.</li> <li>max_batch_seconds: maximum number of seconds to wait before batching a result set (default: 0.5). This is a float (not an integer) and may be specified to the microsecond.</li> <li>first_batch_scaledown_factor: factor to scale the other parameters down by on the first batch (default: 4). For example, with this set to 8 and max_batch_rows set to 80, on the first batch max_batch_rows will be adjusted to 10 (80 / 8). This allows the first batch to return faster.</li> </ul> <p><strong>Example:</strong> Run a query on the connection conn and print out every row in the result.</p> <pre data-language=\"ruby\">r.table('marvel').run(conn).each { |x| p x }\n</pre>  <p><strong>Example:</strong> If you are OK with potentially out of date data from all the tables involved in this query and want potentially faster reads, pass a flag allowing out of date data in an options object. Settings for individual tables will supercede this global setting for all tables in the query.</p> <pre data-language=\"ruby\">r.table('marvel').run(conn, :read_mode =&gt; 'outdated')\n</pre>  <p><strong>Example:</strong> If you just want to send a write and forget about it, you can set noreply to true in the options. In this case run will return immediately.</p> <pre data-language=\"ruby\">r.table('marvel').run(conn, :noreply =&gt; true)\n</pre>  <p><strong>Example:</strong> If you want to specify whether to wait for a write to be written to disk (overriding the table’s default settings), you can set durability to 'hard' or 'soft' in the options.</p> <pre data-language=\"ruby\">r.table('marvel')\n    .insert({ :superhero =&gt; 'Iron Man', :superpower =&gt; 'Arc Reactor' })\n    .run(conn, :noreply =&gt; true, :durability =&gt; 'soft')\n</pre>  <p><strong>Example:</strong> If you do not want a time object to be converted to a native date object, you can pass a time_format flag to prevent it (valid flags are “raw” and “native”). This query returns an object with two fields (epoch_time and $reql_type$) instead of a native date object.</p> <pre data-language=\"ruby\">r.now().run(conn, :time_format=&gt;\"raw\")\n</pre>  <p><strong>Example:</strong> Specify the database to use for the query.</p> <pre data-language=\"ruby\">r.table('marvel').run(conn, :db =&gt; r.db('heroes')).each { |x| p x }\n</pre>  <p>This is equivalent to using the db command to specify the database:</p> <pre data-language=\"ruby\">r.db('heroes').table('marvel').run(conn) ...\n</pre>  <p><strong>Example:</strong> Change the batching parameters for this query.</p> <pre data-language=\"ruby\">r.table('marvel').run(conn, :max_batch_rows =&gt; 16, :max_batch_bytes =&gt; 2048)\n</pre>  <p><strong>Example:</strong> Use run with a Ruby block. This style allows you to pass a cursor to the block as its argument, closing the cursor when execution reaches the end of the block.</p> <pre data-language=\"ruby\">r.table('marvel').run(conn) { |cursor|\n    cursor.each { |hero| fight(hero) }\n}\n</pre>  <p>```</p>  <h2>Related commands</h2> <ul> <li><a href=\"connect\">connect</a></li> <li><a href=\"repl\">repl</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/accessing-rql/run.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/run\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/run</a>\n  </p>\n</div>\n","noreply_wait":"<h1 class=\"title\">ReQL command: noreply_wait</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">conn.noreply_wait\n</pre> <h2 id=\"description\">Description</h2> <p>noreply_wait ensures that previous queries with the noreply flag have been processed by the server. Note that this guarantee only applies to queries run on the given connection.</p> <p><strong>Example:</strong> We have previously run queries with the noreply argument set to true. Now wait until the server has processed them.</p> <pre data-language=\"ruby\">conn.noreply_wait\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"run\">run</a></li> <li><a href=\"sync\">sync</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/accessing-rql/noreply_wait.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/noreply_wait\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/noreply_wait</a>\n  </p>\n</div>\n","changes":"<h1 class=\"title\">ReQL command: changes</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">stream.changes([options) → stream\nsingleSelection.changes([options]) → stream\n</pre> <h2 id=\"description\">Description</h2> <p>Turn a query into a changefeed, an infinite stream of objects representing changes to the query’s results as they occur. A changefeed may return changes to a table or an individual document (a “point” changefeed). Commands such as filter or map may be used before the changes command to transform or filter the output, and many commands that operate on sequences can be chained after changes.</p> <p>There are six optional arguments to changes.</p> <ul> <li>squash: Controls how change notifications are batched. Acceptable values are true, false and a numeric value: <ul> <li>true: When multiple changes to the same document occur before a batch of notifications is sent, the changes are “squashed” into one change. The client receives a notification that will bring it fully up to date with the server.</li> <li>false: All changes will be sent to the client verbatim. This is the default.</li> <li>n: A numeric value (floating point). Similar to true, but the server will wait n seconds to respond in order to squash as many changes together as possible, reducing network traffic. The first batch will always be returned immediately.</li> </ul> </li> <li>changefeed_queue_size: the number of changes the server will buffer between client reads before it starts dropping changes and generates an error (default: 100,000).</li> <li>include_initial: if true, the changefeed stream will begin with the current contents of the table or selection being monitored. These initial results will have new_val fields, but no old_val fields. The initial results may be intermixed with actual changes, as long as an initial result for the changed document has already been given. If an initial result for a document has been sent and a change is made to that document that would move it to the unsent part of the result set (e.g., a changefeed monitors the top 100 posters, the first 50 have been sent, and poster 48 has become poster 52), an “uninitial” notification will be sent, with an old_val field but no new_val field.</li> <li>include_states: if true, the changefeed stream will include special status documents consisting of the field state and a string indicating a change in the feed’s state. These documents can occur at any point in the feed between the notification documents described below. If include_states is false (the default), the status documents will not be sent.</li> <li>include_offsets: if true, a changefeed stream on an order_by.limit changefeed will include old_offset and new_offset fields in status documents that include old_val and new_val. This allows applications to maintain ordered lists of the stream’s result set. If old_offset is set and not nil, the element at old_offset is being deleted; if new_offset is set and not nil, then new_val is being inserted at new_offset. Setting include_offsets to true on a changefeed that does not support it will raise an error.</li> <li>include_types: if true, every result on a changefeed will include a type field with a string that indicates the kind of change the result represents: add, remove, change, initial, uninitial, state. Defaults to false.</li> </ul> <p>There are currently two states:</p> <ul> <li>\n<span class=\"p\">{:</span><span class=\"err\">state</span><span class=\"err\">=&gt;</span><span class=\"s2\">\"initializing\"</span><span class=\"p\">}</span> indicates the following documents represent initial values on the feed rather than changes. This will be the first document of a feed that returns initial values.</li> <li>\n<span class=\"p\">{:</span><span class=\"err\">state</span><span class=\"err\">=&gt;</span><span class=\"s2\">\"ready\"</span><span class=\"p\">}</span> indicates the following documents represent changes. This will be the first document of a feed that does <em>not</em> return initial values; otherwise, it will indicate the initial values have all been sent.</li> </ul> <div class=\"infobox \">\n<p>Starting with RethinkDB 2.2, state documents will <em>only</em> be sent if the include_states option is true, even on point changefeeds. Initial values will only be sent if include_initial is true. If include_states is true and include_initial is false, the first document on the feed will be <span class=\"p\">{:</span><span class=\"err\">state</span><span class=\"err\">=&gt;</span><span class=\"err\">'ready'</span><span class=\"p\">}</span>.</p> </div> <p>If the table becomes unavailable, the changefeed will be disconnected, and a runtime exception will be thrown by the driver.</p> <p>Changefeed notifications take the form of a two-field object:</p> <pre data-language=\"ruby\">{\n    :old_val =&gt; &lt;document before change&gt;,\n    :new_val =&gt; &lt;document after change&gt;\n}\n</pre>  <p>When include_types is true, there will be three fields:</p> <pre data-language=\"ruby\">{\n    :old_val =&gt; &lt;document before change&gt;,\n    :new_val =&gt; &lt;document after change&gt;,\n    :type =&gt; &lt;result type&gt;\n}\n</pre>  <p>When a document is deleted, new_val will be nil; when a document is inserted, old_val will be nil.</p> <div class=\"infobox \">\n<p>Certain document transformation commands can be chained before changefeeds. For more information, read the <a href=\"https://rethinkdb.com/docs/changefeeds/ruby/\">discussion of changefeeds</a> in the “Query language” documentation.</p> </div> <p>The server will buffer up to changefeed_queue_size elements (default 100,000). If the buffer limit is hit, early changes will be discarded, and the client will receive an object of the form <span class=\"p\">{:</span><span class=\"err\">error</span><span class=\"err\">=&gt;</span><span class=\"s2\">\"Changefeed cache over array size limit, skipped X elements.\"</span><span class=\"p\">}</span> where X is the number of elements skipped.</p> <p>Commands that operate on streams (such as <a href=\"filter\">filter</a> or <a href=\"map\">map</a>) can usually be chained after changes. However, since the stream produced by changes has no ending, commands that need to consume the entire stream before returning (such as <a href=\"reduce\">reduce</a> or <a href=\"count\">count</a>) cannot.</p> <p><strong>Example:</strong> Subscribe to the changes on a table.</p> <p>Start monitoring the changefeed in one client:</p> <pre data-language=\"ruby\">r.table('games').changes().run(conn).each{|change| p(change)}\n</pre>  <p>As these queries are performed in a second client, the first client would receive and print the following objects:</p> <pre data-language=\"ruby\">&gt; r.table('games').insert({:id =&gt; 1}).run(conn)\n{:old_val =&gt; nil, :new_val =&gt; {:id =&gt; 1}}\n\n&gt; r.table('games').get(1).update({:player1 =&gt; 'Bob'}).run(conn)\n{:old_val =&gt; {:id =&gt; 1}, :new_val =&gt; {:id =&gt; 1, :player1 =&gt; 'Bob'}}\n\n&gt; r.table('games').get(1).replace({:id =&gt; 1, :player1 =&gt; 'Bob', :player2 =&gt; 'Alice'}).run(conn)\n{:old_val =&gt; {:id =&gt; 1, :player1 =&gt; 'Bob'},\n :new_val =&gt; {:id =&gt; 1, :player1 =&gt; 'Bob', :player2 =&gt; 'Alice'}}\n\n&gt; r.table('games').get(1).delete().run(conn)\n{:old_val =&gt; {:id =&gt; 1, :player1 =&gt; 'Bob', :player2 =&gt; 'Alice'}, :new_val =&gt; nil}\n\n&gt; r.table_drop('games').run(conn)\nReqlRuntimeError: Changefeed aborted (table unavailable)\n</pre>  <p><strong>Example:</strong> Return all the changes that increase a player’s score.</p> <pre data-language=\"ruby\">r.table('test').changes().filter{ |row|\n  row['new_val']['score'] &gt; row['old_val']['score']\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Return all the changes to a specific player’s score that increase it past 10.</p> <pre data-language=\"ruby\">r.table('test').get(1).filter { |row|\n    row['score'] &gt; 10\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Return all the inserts on a table.</p> <pre data-language=\"ruby\">r.table('test').changes().filter{ |row|\n    row['old_val'].eq(nil)\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Return all the changes to game 1, with state notifications and initial values.</p> <pre data-language=\"ruby\">r.table('games').get(1).changes({:include_initial =&gt; true, :include_states =&gt; true}).run(conn)\n\n# result returned on changefeed\n{:state =&gt; \"initializing\"}\n{:new_val =&gt; {:id =&gt; 1, :score =&gt; 12, :arena =&gt; \"Hobbiton Field\"}}\n{:state =&gt; \"ready\"}\n{\n\t:old_val =&gt; {:id =&gt; 1, :score =&gt; 12, :arena =&gt; \"Hobbiton Field\"},\n\t:new_val =&gt; {:id =&gt; 1, :score =&gt; 14, :arena =&gt; \"Hobbiton Field\"}\n}\n{\n\t:old_val =&gt; {:id =&gt; 1, :score =&gt; 14, :arena =&gt; \"Hobbiton Field\"},\n\t:new_val =&gt; {:id =&gt; 1, :score =&gt; 17, :arena =&gt; \"Hobbiton Field\", :winner =&gt; \"Frodo\"}\n}\n\n</pre>  <p><strong>Example:</strong> Return all the changes to the top 10 games. This assumes the presence of a score secondary index on the games table.</p> <pre data-language=\"ruby\">r.table('games').order_by(\n    {:index =&gt; r.desc('score')}\n).limit(10).changes().run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"table\">table</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/manipulating-tables/changes.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/changes\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/changes</a>\n  </p>\n</div>\n","next":"<h1 class=\"title\">ReQL command: next</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">cursor.next([true])\n</pre> <h2 id=\"description\">Description</h2> <p>Get the next element in the cursor.</p> <p>The optional unnamed argument specifies whether to wait for the next available element and how long to wait:</p> <ul> <li>true: Wait indefinitely (the default).</li> <li>false: Do not wait at all. If data is immediately available, it will be returned; if it is not available, a Timeout::Error will be raised.</li> <li>number: Wait up to the specified number of seconds for data to be available before raising Timeout::Error.</li> </ul> <p>The behavior of next will be identical with false, nil or the number 0.</p> <p>Calling next the first time on a cursor provides the first element of the cursor. If the data set is exhausted (e.g., you have retrieved all the documents in a table), a StopIteration error will be raised when next is called.</p> <p><strong>Example:</strong> Retrieve the next element.</p> <pre data-language=\"ruby\">cursor = r.table('superheroes').run(conn)\ndoc = cursor.next()\n</pre>  <p><strong>Example:</strong> Retrieve the next element on a <a href=\"https://rethinkdb.com/docs/changefeeds/ruby\">changefeed</a>, waiting up to five seconds.</p> <pre data-language=\"ruby\">cursor = r.table('superheroes').changes().run(conn)\ndoc = cursor.next(5)\n</pre>  <p><strong>Note:</strong> RethinkDB sequences can be iterated through via the Ruby <a href=\"http://ruby-doc.org/core/Enumerable.html\">Enumerable</a> interface. The canonical way to retrieve all the results is to use an <a href=\"each\">each</a> command or <a href=\"to_array\">to_a()</a>.</p>  <h2>Related commands</h2> <ul> <li><a href=\"each\">for (cursor)</a></li> <li><a href=\"to_array\">to_a</a></li> <li><a href=\"close-cursor\">close (cursor)</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/cursors/next.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/next\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/next</a>\n  </p>\n</div>\n","each":"<h1 class=\"title\">ReQL command: each</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">cursor.each { ... }\narray.each { ... }\nfeed.each { ... }\n</pre> <h2 id=\"description\">Description</h2> <p>Lazily iterate over a result set one element at a time.</p> <p>RethinkDB sequences can be iterated through via the Ruby <a href=\"http://www.ruby-doc.org/core/Enumerable.html\">Enumerable</a> interface; use standard Ruby commands like each blocks to access each item in the sequence.</p> <p><strong>Example:</strong> Let’s process all the elements!</p> <pre data-language=\"ruby\">cursor = r.table('users').run(conn)\ncursor.each { |doc|\n    process_row(doc)\n}\n</pre>  <p><strong>Example:</strong> Stop the iteration prematurely and close the connection manually.</p> <pre data-language=\"ruby\">cursor = r.table('users').run(conn)\ncursor.each do |doc|\n    ok = process_row(doc)\n    if not ok\n        cursor.close()\n        break\n    end\nend\n\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"to_array\">to_a</a></li> <li><a href=\"close-cursor\">close (cursor)</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/cursors/each.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/each\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/each</a>\n  </p>\n</div>\n","to_array":"<h1 class=\"title\">ReQL command: to_a</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">cursor.to_a()\n</pre> <h2 id=\"description\">Description</h2> <p>Retrieve all results as an array.</p> <p>RethinkDB sequences can be iterated through via the Ruby <a href=\"http://www.ruby-doc.org/core/Enumerable.html\">Enumerable</a> interface; to coerce a cursor into an array, use the Ruby to_a() command.</p> <p><strong>Example:</strong> For small result sets it may be more convenient to process them at once as an array.</p> <pre data-language=\"ruby\">cursor = r.table('users').run()\nusers = cursor.to_a()\nprocess_results(users)\n</pre>   <p>The equivalent query with an each block would be:</p> <pre data-language=\"ruby\">cursor = r.table('users').run()\ncursor.each { |doc|\n    process_results(doc)\n}\n</pre>  <p><strong>Note:</strong> Because a feed is a cursor that never terminates, using to_a with a feed will never return. Use <a href=\"each\">each</a> instead. See the <a href=\"changes\">changes</a> command for more information on feeds.</p>  <h2>Related commands</h2> <ul> <li><a href=\"each\">each</a></li> <li><a href=\"close-cursor\">close (cursor)</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/cursors/to_array.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/to_array\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/to_array</a>\n  </p>\n</div>\n","close-cursor":"<h1 class=\"title\">ReQL command: close</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">cursor.close\n</pre> <h2 id=\"description\">Description</h2> <p>Close a cursor. Closing a cursor cancels the corresponding query and frees the memory associated with the open request.</p> <p><strong>Example:</strong> Close a cursor.</p> <pre data-language=\"ruby\">cursor.close\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/cursors/close-cursor.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/close-cursor\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/close-cursor</a>\n  </p>\n</div>\n","db_create":"<h1 class=\"title\">ReQL command: db_create</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.db_create(db_name) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Create a database. A RethinkDB database is a collection of tables, similar to relational databases.</p> <p>If successful, the command returns an object with two fields:</p> <ul> <li>dbs_created: always 1.</li> <li>config_changes: a list containing one object with two fields, old_val and new_val: <ul> <li>old_val: always nil.</li> <li>new_val: the database’s new <a href=\"config\">config</a> value.</li> </ul> </li> </ul> <p>If a database with the same name already exists, the command throws ReqlRuntimeError.</p> <p>Note: Only alphanumeric characters and underscores are valid for the database name.</p> <p><strong>Example:</strong> Create a database named ‘superheroes’.</p> <pre data-language=\"ruby\">r.db_create('superheroes').run(conn)\n\n{\n    :config_changes =&gt; [\n        {\n            :new_val =&gt; {\n                :id =&gt; \"e4689cfc-e903-4532-a0e6-2d6797a43f07\",\n                :name =&gt; \"superheroes\"\n            },\n            :old_val =&gt; nil\n        }\n    ],\n    :dbs_created =&gt; 1\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"db_drop\">db_drop</a></li> <li><a href=\"db_list\">db_list</a></li> <li><a href=\"table_create\">table_create</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/manipulating-databases/db_create.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/db_create\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/db_create</a>\n  </p>\n</div>\n","db_drop":"<h1 class=\"title\">ReQL command: db_drop</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.db_drop(db_name) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Drop a database. The database, all its tables, and corresponding data will be deleted.</p> <p>If successful, the command returns an object with two fields:</p> <ul> <li>dbs_dropped: always 1.</li> <li>tables_dropped: the number of tables in the dropped database.</li> <li>config_changes: a list containing one two-field object, old_val and new_val: <ul> <li>old_val: the database’s original <a href=\"config\">config</a> value.</li> <li>new_val: always nil.</li> </ul> </li> </ul> <p>If the given database does not exist, the command throws ReqlRuntimeError.</p> <p><strong>Example:</strong> Drop a database named ‘superheroes’.</p> <pre data-language=\"ruby\">r.db_drop('superheroes').run(conn)\n\n{\n    :config_changes =&gt; [\n        {\n            :old_val =&gt; {\n                :id =&gt; \"e4689cfc-e903-4532-a0e6-2d6797a43f07\",\n                :name =&gt; \"superheroes\"\n            },\n            :new_val =&gt; nil\n        }\n    ],\n    :tables_dropped =&gt; 3,\n    :dbs_dropped =&gt; 1\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"db_create\">db_create</a></li> <li><a href=\"db_list\">db_list</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/manipulating-databases/db_drop.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/db_drop\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/db_drop</a>\n  </p>\n</div>\n","close":"<h1 class=\"title\">ReQL command: close</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">conn.close([{:noreply_wait =&gt; true}])\n</pre> <h2 id=\"description\">Description</h2> <p>Close an open connection.</p> <p>Closing a connection normally waits until all outstanding requests have finished and then frees any open resources associated with the connection. By passing false to the noreply_wait optional argument, the connection will be closed immediately, possibly aborting any outstanding noreply writes.</p> <p>A noreply query is executed by passing the noreply option to the <a href=\"run\">run</a> command, indicating that run() should not wait for the query to complete before returning. You may also explicitly wait for a noreply query to complete by using the <a href=\"noreply_wait\">noreply_wait</a> command.</p> <p><strong>Example:</strong> Close an open connection, waiting for noreply writes to finish.</p> <pre data-language=\"ruby\">conn.close\n</pre>  <p><strong>Example:</strong> Close an open connection immediately.</p> <pre data-language=\"ruby\">conn.close(:noreply_wait =&gt; false)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"connect\">connect</a></li> <li><a href=\"use\">use</a></li> <li><a href=\"repl\">repl</a></li> <li><a href=\"reconnect\">reconnect</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/accessing-rql/close.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/close\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/close</a>\n  </p>\n</div>\n","em_run":"<h1 class=\"title\">ReQL command: em_run</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">query.em_run(conn[, options], block) → cursor\nquery.em_run(conn[, options], block) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Run a query asynchronously on a connection using <a href=\"http://rubyeventmachine.com\">EventMachine</a>. If the query returns a sequence (including a stream), the block will be called once with each element of the sequence. Otherwise, the block will be called just once with the returned value.</p> <p>All the options for the <a href=\"run\">run</a> command are available to em_run; consult the run documentation for a list and explanations.</p> <p>The em_run command returns a QueryHandle instance. The QueryHandle will be closed when all results have been received, or when EventMachine stops running. You can explicitly close it with the close method.</p> <p><strong>Example:</strong> return a list of users in an EventMachine loop.</p> <pre data-language=\"ruby\">EventMachine.run {\n  r.table('users').order_by(:index =&gt; 'username').em_run(conn) { |row|\n    # do something with returned row data\n    p row\n  }\n}\n</pre>  <p><strong>Example:</strong> The same as above, but allow outdated data for potentially faster reads.</p> <pre data-language=\"ruby\">EventMachine.run {\n  r.table('users').order_by(:index =&gt; 'username').em_run(conn, :read_mode =&gt; 'outdated') { |row|\n    # do something with returned row data\n    p row\n  }\n}\n</pre>  <p><strong>Example:</strong> return a list of users in an EventMachine loop, handling errors.</p> <pre data-language=\"ruby\">EventMachine.run {\n  r.table('users').order_by(:index =&gt; 'username').em_run(conn) { |err, row|\n    if err:\n      # do something with the error\n      p [:err, err]\n    else:\n      # do something with returned row data\n      p [:userdata, row]\n    end\n  }\n}\n</pre>  <p><strong>Example:</strong> Explicitly close a QueryHandle.</p> <pre data-language=\"ruby\">EventMachine.run {\n  printed = 0\n  handle = r.table('test').order_by(:index =&gt; 'id').em_run(conn) { |row|\n    printed += 1\n    if printed &gt; 3\n      handle.close\n    else\n      p row\n    end\n  }\n}\n</pre>  <p>Instead of passing a block to em_run, you may also pass a subclass of RethinkDB::Handler that overwrites event handling methods.</p> <p><strong>Example:</strong> Use a handler with em_run.</p> <pre data-language=\"ruby\">class UserHandler &lt; RethinkDB::Handler\n\n  def on_open\n    p :open\n  end\n  \n  def on_close\n    p :closed\n  end\n  \n  def on_error(err)\n    p [:err, err.to_s]\n  end\n  \n  # Receive each individual user document\n  def on_val(val)\n    p [:user, val]\n  end\n\n  # Receive an array of posts\n  def on_atom(val)\n    p [:posts, val]\n  end\n\nend\n\nEventMachine.run {\n  # return a list of users, handled by on_val\n  r.table('users').order_by(:index =&gt; 'username').em_run(conn, UserHandler)\n\n  # return a list of posts as an array, handled by on_atom\n  r.table('users').get(1)['posts'].em_run(conn, UserHandler)\n}\n</pre>  <p><strong>Example:</strong> Monitor a changefeed of the top 10 most active users.</p> <pre data-language=\"ruby\">class UserHandler &lt; RethinkDB::Handler\n\n  def on_open\n    p :open\n  end\n  \n  def on_close\n    p :closed\n  end\n  \n  def on_error(err)\n    p [:err, err.to_s]\n  end\n  \n  def on_initial_val(val)\n    p [:initial, val]\n  end\n  \n  def on_state(state)\n    p [:state, state]\n  end\n  \n  def on_change(old, new)\n    p [:change, old, new]\n  end  \n\nend\n\nEventMachine.run {\n  r.table('users').order_by(:index =&gt; r.desc('posts')).limit(10).changes\n    .em_run(conn, UserHandler)\n}\n</pre>  <p>Also see the documentation article on <a href=\"https://rethinkdb.com/docs/async-connections/#ruby-with-eventmachine\">Asynchronous connections</a>.</p>  <h2>Related commands</h2> <ul> <li><a href=\"run\">run</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/accessing-rql/em_run.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/em_run\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/em_run</a>\n  </p>\n</div>\n","db_list":"<h1 class=\"title\">ReQL command: db_list</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.db_list() → array\n</pre> <h2 id=\"description\">Description</h2> <p>List all database names in the system. The result is a list of strings.</p> <p><strong>Example:</strong> List all databases.</p> <pre data-language=\"ruby\">r.db_list.run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"db_create\">db_create</a></li> <li><a href=\"db_drop\">db_drop</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/manipulating-databases/db_list.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/db_list\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/db_list</a>\n  </p>\n</div>\n","table_drop":"<h1 class=\"title\">ReQL command: table_drop</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">db.table_drop(table_name) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Drop a table. The table and all its data will be deleted.</p> <p>If successful, the command returns an object with two fields:</p> <ul> <li>tables_dropped: always 1.</li> <li>config_changes: a list containing one two-field object, old_val and new_val: <ul> <li>old_val: the dropped table’s <a href=\"config\">config</a> value.</li> <li>new_val: always nil.</li> </ul> </li> </ul> <p>If the given table does not exist in the database, the command throws ReqlRuntimeError.</p> <p><strong>Example:</strong> Drop a table named ‘dc_universe’.</p> <pre data-language=\"ruby\">r.db('test').table_drop('dc_universe').run(conn)\n\n{\n    :config_changes =&gt; [\n        {\n            :old_val =&gt; {\n                :db =&gt; \"test\",\n                :durability =&gt;  \"hard\",\n                :id =&gt; \"20ea60d4-3b76-4817-8828-98a236df0297\",\n                :name =&gt; \"dc_universe\",\n                :primary_key =&gt; \"id\",\n                :shards =&gt; [\n                    {\n                        :primary_replica =&gt; \"rethinkdb_srv1\",\n                        :replicas =&gt; [\n                            \"rethinkdb_srv1\",\n                            \"rethinkdb_srv2\"\n                        ]\n                    }\n                ],\n                :write_acks =&gt; \"majority\"\n            },\n            :new_val =&gt; nil\n        }\n    ],\n    :tables_dropped =&gt; 1\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"table_create\">table_create</a></li> <li><a href=\"table_list\">table_list</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/manipulating-tables/table_drop.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/table_drop\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/table_drop</a>\n  </p>\n</div>\n","index_drop":"<h1 class=\"title\">ReQL command: index_drop</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.index_drop(index_name) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Delete a previously created secondary index of this table.</p> <p><strong>Example:</strong> Drop a secondary index named ‘code_name’.</p> <pre data-language=\"ruby\">r.table('dc').index_drop('code_name').run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"index_create\">index_create</a></li> <li><a href=\"index_list\">index_list</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/manipulating-tables/index_drop.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/index_drop\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/index_drop</a>\n  </p>\n</div>\n","table_create":"<h1 class=\"title\">ReQL command: table_create</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">db.table_create(table_name[, options]) → object\nr.table_create(table_name[, options]) → object\n</pre> <h2 id=\"description\">Description</h2> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/table_create_ruby.png\" class=\"api_command_illustration\"></p> <p>Create a table. A RethinkDB table is a collection of JSON documents.</p> <p>If successful, the command returns an object with two fields:</p> <ul> <li>tables_created: always 1.</li> <li>config_changes: a list containing one two-field object, old_val and new_val: <ul> <li>old_val: always nil.</li> <li>new_val: the table’s new <a href=\"config\">config</a> value.</li> </ul> </li> </ul> <p>If a table with the same name already exists, the command throws ReqlOpFailedError.</p> <div class=\"infobox \">\n<p><strong>Note:</strong> Only alphanumeric characters and underscores are valid for the table name.</p> <p>Invoking table_create without specifying a database using <a href=\"db\">db</a> creates a table in the database specified in <a href=\"connect\">connect</a>, or test if no database was specified.</p> </div> <p>When creating a table you can specify the following options:</p> <ul> <li>primary_key: the name of the primary key. The default primary key is id.</li> <li>durability: if set to soft, writes will be acknowledged by the server immediately and flushed to disk in the background. The default is hard: acknowledgment of writes happens after data has been written to disk.</li> <li>shards: the number of shards, an integer from 1-64. Defaults to 1.</li> <li>replicas: either an integer or a mapping object. Defaults to 1. <ul> <li>If replicas is an integer, it specifies the number of replicas per shard. Specifying more replicas than there are servers will return an error.</li> <li>If replicas is an object, it specifies key-value pairs of server tags and the number of replicas to assign to those servers: <span class=\"p\">{:</span><span class=\"err\">tag</span><span class=\"mi\">1</span><span class=\"err\">=&gt;</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"p\">:</span><span class=\"err\">tag</span><span class=\"mi\">2</span><span class=\"err\">=&gt;</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"p\">:</span><span class=\"err\">tag</span><span class=\"mi\">3</span><span class=\"err\">=&gt;</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"err\">...}</span>.</li> </ul> </li> <li>primary_replica_tag: the primary server specified by its server tag. Required if replicas is an object; the tag must be in the object. This must <em>not</em> be specified if replicas is an integer.</li> </ul> <p>The <a href=\"https://rethinkdb.com/docs/data-types/\">data type</a> of a primary key is usually a string (like a UUID) or a number, but it can also be a time, binary object, boolean or an array. Data types can be mixed in the primary key field, but all values must be unique. Using an array as a primary key creates a compound index; read the documentation on <a href=\"https://rethinkdb.com/docs/secondary-indexes/ruby/#compound-indexes\">compound secondary indexes</a> for more information, as it applies to primary keys as well. Primary keys cannot be objects.</p> <p>Tables will be available for writing when the command returns.</p> <p><strong>Example:</strong> Create a table named ‘dc_universe’ with the default settings.</p> <pre data-language=\"ruby\">r.db('heroes').table_create('dc_universe').run(conn)\n\n{\n    :config_changes =&gt; [\n        {\n            :new_val =&gt; {\n                :db =&gt; \"test\",\n                :durability =&gt;  \"hard\",\n                :id =&gt; \"20ea60d4-3b76-4817-8828-98a236df0297\",\n                :name =&gt; \"dc_universe\",\n                :primary_key =&gt; \"id\",\n                :shards =&gt; [\n                    {\n                        :primary_replica =&gt; \"rethinkdb_srv1\",\n                        :replicas =&gt; [\n                            \"rethinkdb_srv1\",\n                            \"rethinkdb_srv2\"\n                        ]\n                    }\n                ],\n                :write_acks =&gt; \"majority\"\n            },\n            :old_val =&gt; nil\n        }\n    ],\n    :tables_created =&gt; 1\n}\n</pre>  <p><strong>Example:</strong> Create a table named ‘dc_universe’ using the field ‘name’ as primary key.</p> <pre data-language=\"ruby\">r.db('test').table_create('dc_universe', :primary_key=&gt;'name').run(conn)\n</pre>  <p><strong>Example:</strong> Create a table set up for two shards and three replicas per shard. This requires three available servers.</p> <pre data-language=\"ruby\">r.db('test').table_create('dc_universe', {:shards =&gt; 2, :replicas =&gt; 3}).run(conn)\n</pre>  <p>Read <a href=\"https://rethinkdb.com/docs/sharding-and-replication/\">Sharding and replication</a> for a complete discussion of the subject, including advanced topics.</p>  <h2>Related commands</h2> <ul> <li><a href=\"table_drop\">table_drop</a></li> <li><a href=\"table_list\">table_list</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/manipulating-tables/table_create.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/table_create\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/table_create</a>\n  </p>\n</div>\n","index_create":"<h1 class=\"title\">ReQL command: index_create</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.index_create(index_name[, index_function][, :multi =&gt; false, :geo =&gt; false]) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Create a new secondary index on a table. Secondary indexes improve the speed of many read queries at the slight cost of increased storage space and decreased write performance. For more information about secondary indexes, read the article “<a href=\"https://rethinkdb.com/docs/secondary-indexes/\">Using secondary indexes in RethinkDB</a>.”</p> <p>RethinkDB supports different types of secondary indexes:</p> <ul> <li>\n<em>Simple indexes</em> based on the value of a single field.</li> <li>\n<em>Compound indexes</em> based on multiple fields.</li> <li>\n<em>Multi indexes</em> based on arrays of values.</li> <li>\n<em>Geospatial indexes</em> based on indexes of geometry objects, created when the geo optional argument is true.</li> <li>Indexes based on <em>arbitrary expressions</em>.</li> </ul> <p>The index_function can be an anonymous function or a binary representation obtained from the function field of <a href=\"index_status\">index_status</a>. The function must be deterministic, and so cannot use a subquery or the r.js command.</p> <p>If successful, create_index will return an object of the form <span class=\"p\">{:</span><span class=\"err\">created</span><span class=\"err\">=&gt;</span><span class=\"mi\">1</span><span class=\"p\">}</span>. If an index by that name already exists on the table, a ReqlRuntimeError will be thrown.</p> <div class=\"infobox \">\n<p>Note that an index may not be immediately available after creation. If your application needs to use indexes immediately after creation, use the <a href=\"index_wait\">index_wait</a> command to ensure the indexes are ready before use.</p> </div> <p><strong>Example:</strong> Create a simple index based on the field post_id.</p> <pre data-language=\"ruby\">r.table('comments').index_create('post_id').run(conn)\n</pre>  <p><strong>Example:</strong> Create a simple index based on the nested field author &gt; name.</p> <pre data-language=\"ruby\">r.table('comments').index_create('author_name'){ |doc|\n    doc[\"author\"][\"name\"]\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Create a geospatial index based on the field location.</p> <pre data-language=\"ruby\">r.table('places').index_create('location', :geo =&gt; true).run(conn)\n</pre>  <p>A geospatial index field should contain only geometry objects. It will work with geometry ReQL terms (<a href=\"get_intersecting\">get_intersecting</a> and <a href=\"get_nearest\">get_nearest</a>) as well as index-specific terms (<a href=\"index_status\">index_status</a>, <a href=\"index_wait\">index_wait</a>, <a href=\"index_drop\">index_drop</a> and <a href=\"index_list\">index_list</a>). Using terms that rely on non-geometric ordering such as <a href=\"get_all\">get_all</a>, <a href=\"order_by\">order_by</a> and <a href=\"between\">between</a> will result in an error.</p> <p><strong>Example:</strong> Create a compound index based on the fields post_id and date.</p> <pre data-language=\"ruby\">r.table('comments').index_create('post_and_date'){ |doc|\n    [doc[\"post_id\"], doc[\"date\"]]\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Create a multi index based on the field authors.</p> <pre data-language=\"ruby\">r.table('posts').index_create('authors', :multi=&gt;true).run(conn)\n</pre>  <p><strong>Example:</strong> Create a geospatial multi index based on the field towers.</p> <pre data-language=\"ruby\">r.table('networks').index_create('towers', :geo=&gt;true, :multi=&gt;true).run(conn)\n</pre>  <p><strong>Example:</strong> Create an index based on an arbitrary expression.</p> <pre data-language=\"ruby\">r.table('posts').index_create('authors'){ |doc|\n    r.branch(\n        doc.has_fields(\"updated_at\"),\n        doc[\"updated_at\"],\n        doc[\"created_at\"]\n    )\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Create a new secondary index based on an existing one.</p> <pre data-language=\"ruby\">index = r.table('posts').index_status('authors').nth(0)['function'].run(conn)\nr.table('new_posts').index_create('authors', index).run(conn)\n</pre>  <p><strong>Example:</strong> Rebuild an outdated secondary index on a table.</p> <pre data-language=\"ruby\">old_index = r.table('posts').index_status('old_index').nth(0)['function'].run(conn)\nr.table('posts').index_create('new_index', old_index).run(conn)\nr.table('posts').index_wait('new_index').run(conn)\nr.table('posts').index_rename('new_index', 'old_index', {:overwrite =&gt; true}).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"index_wait\">index_wait</a></li> <li><a href=\"index_status\">index_status</a></li> <li><a href=\"index_list\">index_list</a></li> <li><a href=\"index_drop\">index_drop</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/manipulating-tables/index_create.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/index_create\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/index_create</a>\n  </p>\n</div>\n","index_list":"<h1 class=\"title\">ReQL command: index_list</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.index_list() → array\n</pre> <h2 id=\"description\">Description</h2> <p>List all the secondary indexes of this table.</p> <p><strong>Example:</strong> List the available secondary indexes for this table.</p> <pre data-language=\"ruby\">r.table('marvel').index_list().run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"index_create\">index_create</a></li> <li><a href=\"index_drop\">index_drop</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/manipulating-tables/index_list.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/index_list\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/index_list</a>\n  </p>\n</div>\n","index_rename":"<h1 class=\"title\">ReQL command: index_rename</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.index_rename(old_index_name, new_index_name[, {:overwrite =&gt; false}]) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Rename an existing secondary index on a table. If the optional argument overwrite is specified as true, a previously existing index with the new name will be deleted and the index will be renamed. If overwrite is false (the default) an error will be raised if the new index name already exists.</p> <p>The return value on success will be an object of the format <span class=\"p\">{:</span><span class=\"err\">renamed</span><span class=\"err\">=&gt;</span><span class=\"mi\">1</span><span class=\"p\">}</span>, or <span class=\"p\">{:</span><span class=\"err\">renamed</span><span class=\"err\">=&gt;</span><span class=\"mi\">0</span><span class=\"p\">}</span> if the old and new names are the same.</p> <p>An error will be raised if the old index name does not exist, if the new index name is already in use and overwrite is False, or if either the old or new index name are the same as the primary key field name.</p> <p><strong>Example:</strong> Rename an index on the comments table.</p> <pre data-language=\"ruby\">r.table('comments').index_rename('post_id', 'message_id').run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"index_create\">index_create</a></li> <li><a href=\"index_status\">index_status</a></li> <li><a href=\"index_list\">index_list</a></li> <li><a href=\"index_drop\">index_drop</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/manipulating-tables/index_rename.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/index_rename\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/index_rename</a>\n  </p>\n</div>\n","index_status":"<h1 class=\"title\">ReQL command: index_status</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.index_status([, index...]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Get the status of the specified indexes on this table, or the status of all indexes on this table if no indexes are specified.</p> <p>The result is an array where for each index, there will be an object like this one:</p> <pre data-language=\"ruby\">{\n    :index =&gt; &lt;index_name&gt;,\n    :ready =&gt; true,\n    :function =&gt; &lt;binary&gt;,\n    :multi =&gt; &lt;bool&gt;,\n    :outdated =&gt; &lt;bool&gt;\n}\n</pre>  <p>or this one:</p> <pre data-language=\"ruby\">{\n    :index =&gt; &lt;index_name&gt;,\n    :ready =&gt; false,\n    :progress =&gt; &lt;float&gt;,\n    :function =&gt; &lt;binary&gt;,\n    :multi =&gt; &lt;bool&gt;,\n    :outdated =&gt; &lt;bool&gt;\n}\n</pre>  <p>The multi field will be true or false depending on whether this index was created as a multi index (see <a href=\"index_create\">index_create</a> for details). The outdated field will be true if the index is outdated in the current version of RethinkDB and needs to be rebuilt. The progress field is a float between 0 and 1, indicating how far along the server is in constructing indexes after the most recent change to the table that would affect them. (0 indicates no such indexes have been constructed; 1 indicates all of them have.)</p> <p>The function field is a binary object containing an opaque representation of the secondary index (including the multi argument if specified). It can be passed as the second argument to <a href=\"index_create\">index_create</a> to create a new index with the same function; see index_create for more information.</p> <p><strong>Example:</strong> Get the status of all the indexes on test:</p> <pre data-language=\"ruby\">r.table('test').index_status.run(conn)\n</pre>  <p><strong>Example:</strong> Get the status of the timestamp index:</p> <pre data-language=\"ruby\">r.table('test').index_status('timestamp').run(conn)\n</pre>  <p><strong>Example:</strong> Save the binary representation of the index:</p> <pre data-language=\"ruby\">func = r.table('test').index_status('timestamp').nth(0)['function'].run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"index_wait\">index_wait</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/manipulating-tables/index_status.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/index_status\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/index_status</a>\n  </p>\n</div>\n","index_wait":"<h1 class=\"title\">ReQL command: index_wait</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.index_wait([, index...]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Wait for the specified indexes on this table to be ready, or for all indexes on this table to be ready if no indexes are specified.</p> <p>The result is an array containing one object for each table index:</p> <pre data-language=\"ruby\">{\n    :index =&gt; &lt;index_name&gt;,\n    :ready =&gt; true,\n    :function =&gt; &lt;binary&gt;,\n    :multi =&gt; &lt;bool&gt;,\n    :geo =&gt; &lt;bool&gt;,\n    :outdated =&gt; &lt;bool&gt;\n}\n</pre>  <p>See the <a href=\"index_status\">index_status</a> documentation for a description of the field values.</p> <p><strong>Example:</strong> Wait for all indexes on the table test to be ready:</p> <pre data-language=\"ruby\">r.table('test').index_wait.run(conn)\n</pre>  <p><strong>Example:</strong> Wait for the index timestamp to be ready:</p> <pre data-language=\"ruby\">r.table('test').index_wait('timestamp').run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"index_status\">index_status</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/manipulating-tables/index_wait.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/index_wait\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/index_wait</a>\n  </p>\n</div>\n","insert":"<h1 class=\"title\">ReQL command: insert</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.insert(object | [object1, object2, ...][, :durability =&gt; \"hard\", :return_changes =&gt; false, :conflict =&gt; \"error\"]) → object\n</pre> <h2 id=\"description\">Description</h2> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/insert_ruby.png\" class=\"api_command_illustration\"></p> <p>Insert documents into a table. Accepts a single document or an array of documents.</p> <p>The optional arguments are:</p> <ul> <li>durability: possible values are hard and soft. This option will override the table or query’s durability setting (set in <a href=\"run\">run</a>). In soft durability mode RethinkDB will acknowledge the write immediately after receiving and caching it, but before the write has been committed to disk.</li> <li>return_changes: <ul> <li>true: return a changes array consisting of old_val/new_val objects describing the changes made, only including the documents actually updated.</li> <li>false: do not return a changes array (the default).</li> <li>\"always\": behave as true, but include all documents the command tried to update whether or not the update was successful. (This was the behavior of true pre-2.0.)</li> </ul> </li> <li>conflict: Determine handling of inserting documents with the same primary key as existing entries. There are three built-in methods: \"error\", \"replace\" or \"update\"; alternatively, you may provide a conflict resolution function. <ul> <li>\"error\": Do not insert the new document and record the conflict as an error. This is the default.</li> <li>\"replace\": <a href=\"replace\">Replace</a> the old document in its entirety with the new one.</li> <li>\"update\": <a href=\"update\">Update</a> fields of the old document with fields from the new one.</li> <li>lambda { |id, old_doc, new_doc| resolved_doc }: a function that receives the id, old and new documents as arguments and returns a document which will be inserted in place of the conflicted one.</li> </ul> </li> </ul> <p>If return_changes is set to true or \"always\", the changes array will follow the same order as the inserted documents. Documents in changes for which an error occurs (such as a key conflict) will have a third field, error, with an explanation of the error.</p> <p>Insert returns an object that contains the following attributes:</p> <ul> <li>inserted: the number of documents successfully inserted.</li> <li>replaced: the number of documents updated when conflict is set to \"replace\" or \"update\".</li> <li>unchanged: the number of documents whose fields are identical to existing documents with the same primary key when conflict is set to \"replace\" or \"update\".</li> <li>errors: the number of errors encountered while performing the insert.</li> <li>first_error: If errors were encountered, contains the text of the first error.</li> <li>deleted and skipped: 0 for an insert operation.</li> <li>generated_keys: a list of generated primary keys for inserted documents whose primary keys were not specified (capped to 100,000).</li> <li>warnings: if the field generated_keys is truncated, you will get the warning <em>“Too many generated keys (&lt;X&gt;), array truncated to 100000.”</em>.</li> <li>changes: if return_changes is set to true, this will be an array of objects, one for each objected affected by the insert operation. Each object will have two keys: <span class=\"p\">{:</span><span class=\"err\">new_val</span><span class=\"err\">=&gt;</span><span class=\"err\">&lt;new</span><span class=\"err\">value&gt;</span><span class=\"p\">,</span><span class=\"p\">:</span><span class=\"err\">old_val</span><span class=\"err\">=&gt;</span><span class=\"err\">nil</span><span class=\"p\">}</span>.</li> </ul> <div class=\"infobox infobox-alert\">\n<p>RethinkDB write operations will only throw exceptions if errors occur before any writes. Other errors will be listed in first_error, and errors will be set to a non-zero count. To properly handle errors with this term, code must both handle exceptions and check the errors return value!</p> </div> <p><strong>Example:</strong> Insert a document into the table posts.</p> <pre data-language=\"ruby\">r.table(\"posts\").insert({\n    :id =&gt; 1,\n    :title =&gt; \"Lorem ipsum\",\n    :content =&gt; \"Dolor sit amet\"\n}).run(conn)\n</pre>   <p>The result will be:</p> <pre data-language=\"ruby\">{\n    :deleted =&gt; 0,\n    :errors =&gt; 0,\n    :inserted =&gt; 1,\n    :replaced =&gt; 0,\n    :skipped =&gt; 0,\n    :unchanged =&gt; 0\n}\n</pre>  <p><strong>Example:</strong> Insert a document without a defined primary key into the table posts where the primary key is id.</p> <pre data-language=\"ruby\">r.table(\"posts\").insert({\n    :title =&gt; \"Lorem ipsum\",\n    :content =&gt; \"Dolor sit amet\"\n}).run(conn)\n</pre>  <p>RethinkDB will generate a primary key and return it in generated_keys.</p> <pre data-language=\"ruby\">{\n    :deleted =&gt; 0,\n    :errors =&gt; 0,\n    :generated_keys =&gt; [\n        \"dd782b64-70a7-43e4-b65e-dd14ae61d947\"\n    ],\n    :inserted =&gt; 1,\n    :replaced =&gt; 0,\n    :skipped =&gt; 0,\n    :unchanged =&gt; 0\n}\n</pre>  <p>Retrieve the document you just inserted with:</p> <pre data-language=\"ruby\">r.table(\"posts\").get(\"dd782b64-70a7-43e4-b65e-dd14ae61d947\").run(conn)\n</pre>  <p>And you will get back:</p> <pre data-language=\"ruby\">{\n    :id =&gt; \"dd782b64-70a7-43e4-b65e-dd14ae61d947\",\n    :title =&gt; \"Lorem ipsum\",\n    :content =&gt; \"Dolor sit amet\"\n}\n</pre>  <p><strong>Example:</strong> Insert multiple documents into the table users.</p> <pre data-language=\"ruby\">r.table(\"users\").insert([\n    {:id =&gt; \"william\", :email =&gt;\"william@rethinkdb.com\"},\n    {:id =&gt; \"lara\", :email =&gt; \"lara@rethinkdb.com\"}\n]).run(conn)\n</pre>  <p><strong>Example:</strong> Insert a document into the table users, replacing the document if the document already exists.</p> <pre data-language=\"ruby\">r.table(\"users\").insert(\n    {:id =&gt; \"william\", :email =&gt; \"william@rethinkdb.com\"},\n    :conflict =&gt; \"replace\"\n).run(conn)\n</pre>  <p><strong>Example:</strong> Copy the documents from posts to posts_backup.</p> <pre data-language=\"ruby\">r.table(\"posts_backup\").insert( r.table(\"posts\") ).run(conn)\n</pre>  <p><strong>Example:</strong> Get back a copy of the inserted document (with its generated primary key).</p> <pre data-language=\"ruby\">r.table(\"posts\").insert(\n    {:title =&gt; \"Lorem ipsum\", :content =&gt; \"Dolor sit amet\"},\n    :return_changes =&gt; true\n).run(conn)\n</pre>  <p>The result will be</p> <pre data-language=\"ruby\">{\n    :deleted =&gt; 0,\n    :errors =&gt; 0,\n    :generated_keys =&gt; [\n        \"dd782b64-70a7-43e4-b65e-dd14ae61d947\"\n    ],\n    :inserted =&gt; 1,\n    :replaced =&gt; 0,\n    :skipped =&gt; 0,\n    :unchanged =&gt; 0,\n    :changes =&gt; [\n        {\n            :old_val =&gt; nil,\n            :new_val =&gt; {\n                :id =&gt; \"dd782b64-70a7-43e4-b65e-dd14ae61d947\",\n                :title =&gt; \"Lorem ipsum\",\n                :content =&gt; \"Dolor sit amet\"\n            }\n        }\n    ]\n}\n</pre>  <p><strong>Example:</strong> Provide a resolution function that concatenates memo content in case of conflict.</p> <pre data-language=\"ruby\"># assume new_memos is a list of memo documents to insert\nr.table(\"memos\").insert(new_memos, :conflict =&gt; lambda { |id, old_doc, new+doc|\n    new_doc.merge({:content =&gt; old_doc['content'] + \"\\n\" + new_doc['content']})\n}).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"update\">update</a></li> <li><a href=\"replace\">replace</a></li> <li><a href=\"delete\">delete</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/writing-data/insert.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/insert\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/insert</a>\n  </p>\n</div>\n","sync":"<h1 class=\"title\">ReQL command: sync</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.sync() → object\n</pre> <h2 id=\"description\">Description</h2> <p>sync ensures that writes on a given table are written to permanent storage. Queries that specify soft durability (<span class=\"p\">{:</span><span class=\"err\">durability</span><span class=\"err\">=&gt;</span><span class=\"err\">soft</span><span class=\"p\">}</span>) do not give such guarantees, so sync can be used to ensure the state of these queries. A call to sync does not return until all previous writes to the table are persisted.</p> <p>If successful, the operation returns an object: <span class=\"p\">{</span><span class=\"s2\">\"synced\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}</span>.</p> <p><strong>Example:</strong> After having updated multiple heroes with soft durability, we now want to wait until these changes are persisted.</p> <pre data-language=\"ruby\">r.table('marvel').sync().run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"noreply_wait\">noreply_wait</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/writing-data/sync.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/sync\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/sync</a>\n  </p>\n</div>\n","db":"<h1 class=\"title\">ReQL command: db</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.db(db_name) → db\n</pre> <h2 id=\"description\">Description</h2> <p>Reference a database.</p> <p>The db command is optional. If it is not present in a query, the query will run against the database specified in the db argument given to <a href=\"run\">run</a> if one was specified. Otherwise, the query will run against the default database for the connection, specified in the db argument to <a href=\"connect\">connect</a>.</p> <p><strong>Example:</strong> Explicitly specify a database for a query.</p> <pre data-language=\"ruby\">r.db('heroes').table('marvel').run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"table\">table</a></li> <li><a href=\"db_list\">db_list</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/selecting-data/db.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/db\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/db</a>\n  </p>\n</div>\n","table":"<h1 class=\"title\">ReQL command: table</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">db.table(name[, {:read_mode =&gt; 'single', :identifier_format =&gt; 'name'}) → table\n</pre> <h2 id=\"description\">Description</h2> <p>Return all documents in a table. Other commands may be chained after table to return a subset of documents (such as <a href=\"get\">get</a> and <a href=\"filter\">filter</a>) or perform further processing.</p> <p><strong>Example:</strong> Return all documents in the table ‘marvel’ of the default database.</p> <pre data-language=\"ruby\">r.table('marvel').run(conn)\n</pre>  <p><strong>Example:</strong> Return all documents in the table ‘marvel’ of the database ‘heroes’.</p> <pre data-language=\"ruby\">r.db('heroes').table('marvel').run(conn)\n</pre>  <p>There are two optional arguments.</p> <ul> <li>read_mode: One of three possible values affecting the consistency guarantee for the table read: <ul> <li>single returns values that are in memory (but not necessarily written to disk) on the primary replica. This is the default.</li> <li>majority will only return values that are safely committed on disk on a majority of replicas. This requires sending a message to every replica on each read, so it is the slowest but most consistent.</li> <li>outdated will return values that are in memory on an arbitrarily-selected replica. This is the fastest but least consistent.</li> </ul> </li> <li>identifier_format: possible values are name and uuid, with a default of name. If set to uuid, then <a href=\"https://rethinkdb.com/docs/system-tables/\">system tables</a> will refer to servers, databases and tables by UUID rather than name. (This only has an effect when used with system tables.)</li> </ul> <p><strong>Example:</strong> Allow potentially out-of-date data in exchange for faster reads.</p> <pre data-language=\"ruby\">r.db('heroes').table('marvel', {:read_mode =&gt; 'outdated'}).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"filter\">filter</a></li> <li><a href=\"get\">get</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/selecting-data/table.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/table\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/table</a>\n  </p>\n</div>\n","get":"<h1 class=\"title\">ReQL command: get</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.get(key) → singleRowSelection\n</pre> <h2 id=\"description\">Description</h2> <p>Get a document by primary key.</p> <p>If no document exists with that primary key, get will return nil.</p> <p><strong>Example:</strong> Find a document by UUID.</p> <pre data-language=\"ruby\">r.table('posts').get('a9849eef-7176-4411-935b-79a6e3c56a74').run(conn)\n</pre>  <p><strong>Example:</strong> Find a document and merge another document with it.</p> <pre data-language=\"ruby\">r.table('heroes').get(3).merge(\n    { :powers =&gt; ['invisibility', 'speed'] }\n).run(conn)\n</pre>  <p><strong>_Example:</strong> Subscribe to a document’s <a href=\"https://rethinkdb.com/docs/changefeeds/ruby\">changefeed</a>.</p> <pre data-language=\"ruby\">changes = r.table('heroes').get(3).changes().run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"between\">between</a></li> <li><a href=\"get_all\">get_all</a></li> <li><a href=\"filter\">filter</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/selecting-data/get.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/get\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/get</a>\n  </p>\n</div>\n","update":"<h1 class=\"title\">ReQL command: update</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.update(object | function[, :durability =&gt; \"hard\", :return_changes =&gt; false, :non_atomic =&gt; false]) → object\nselection.update(object | function[, :durability =&gt; \"hard\", :return_changes =&gt; false, :non_atomic =&gt; false]) → object\nsingleSelection.update(object | function[, :durability =&gt; \"hard\", :return_changes =&gt; false, :non_atomic =&gt; false]) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a combination of the two.</p> <p>The optional arguments are:</p> <ul> <li>durability: possible values are hard and soft. This option will override the table or query’s durability setting (set in <a href=\"run\">run</a>). In soft durability mode RethinkDB will acknowledge the write immediately after receiving it, but before the write has been committed to disk.</li> <li>return_changes: <ul> <li>true: return a changes array consisting of old_val/new_val objects describing the changes made, only including the documents actually updated.</li> <li>false: do not return a changes array (the default).</li> <li>\"always\": behave as true, but include all documents the command tried to update whether or not the update was successful. (This was the behavior of true pre-2.0.)</li> </ul> </li> <li>non_atomic: if set to true, executes the update and distributes the result to replicas in a non-atomic fashion. This flag is required to perform non-deterministic updates, such as those that require reading data from another table.</li> </ul> <p>Update returns an object that contains the following attributes:</p> <ul> <li>replaced: the number of documents that were updated.</li> <li>unchanged: the number of documents that would have been modified except the new value was the same as the old value.</li> <li>skipped: the number of documents that were skipped because the document didn’t exist.</li> <li>errors: the number of errors encountered while performing the update.</li> <li>first_error: If errors were encountered, contains the text of the first error.</li> <li>deleted and inserted: 0 for an update operation.</li> <li>changes: if return_changes is set to true, this will be an array of objects, one for each objected affected by the update operation. Each object will have two keys: <span class=\"p\">{:</span><span class=\"err\">new_val</span><span class=\"err\">=&gt;</span><span class=\"err\">&lt;new</span><span class=\"err\">value&gt;</span><span class=\"p\">,</span><span class=\"p\">:</span><span class=\"err\">old_val</span><span class=\"err\">=&gt;</span><span class=\"err\">&lt;old</span><span class=\"err\">value&gt;</span><span class=\"p\">}</span>.</li> </ul> <div class=\"infobox infobox-alert\">\n<p>RethinkDB write operations will only throw exceptions if errors occur before any writes. Other errors will be listed in first_error, and errors will be set to a non-zero count. To properly handle errors with this term, code must both handle exceptions and check the errors return value!</p> </div> <p><strong>Example:</strong> Update the status of the post with id of 1 to published.</p> <pre data-language=\"ruby\">r.table(\"posts\").get(1).update({:status =&gt; \"published\"}).run(conn)\n</pre>  <p><strong>Example:</strong> Update the status of all posts to published.</p> <pre data-language=\"ruby\">r.table(\"posts\").update({:status =&gt; \"published\"}).run(conn)\n</pre>  <p><strong>Example:</strong> Update the status of all the posts written by William.</p> <pre data-language=\"ruby\">r.table(\"posts\").filter({:author =&gt; \"William\"}).update({:status =&gt; \"published\"}).run(conn)\n</pre>  <p><strong>Example:</strong> Increment the field view of the post with id of 1. This query will throw an error if the field views doesn’t exist.</p> <pre data-language=\"ruby\">r.table(\"posts\").get(1).update{ |post|\n    {:views =&gt; post[\"views\"]+1}\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Increment the field view of the post with id of 1. If the field views does not exist, it will be set to 0.</p> <pre data-language=\"ruby\">r.table(\"posts\").get(1).update{ |post|\n    {:views =&gt; (post[\"views\"]+1).default(0)}\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Perform a conditional update.<br> If the post has more than 100 views, set the type of a post to hot, else set it to normal.</p> <pre data-language=\"ruby\">r.table(\"posts\").get(1).update{ |post|\n    r.branch(\n        post[\"views\"] &gt; 100,\n        {:type =&gt; \"hot\"},\n        {:type =&gt; \"normal\"}\n    )\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Update the field num_comments with the result of a sub-query. Because this update is not atomic, you must pass the non_atomic flag.</p> <pre data-language=\"ruby\">r.table(\"posts\").get(1).update({\n    :num_comments =&gt; r.table(\"comments\").filter({:id_post =&gt; 1}).count()\n}, :non_atomic =&gt; true).run(conn)\n</pre>  <p>If you forget to specify the non_atomic flag, you will get a ReqlRuntimeError:</p> <pre data-language=\"ruby\">ReqlRuntimeError: Could not prove function deterministic.  Maybe you want to use the non_atomic flag? \n</pre>  <p><strong>Example:</strong> Update the field num_comments with a random value between 0 and 100. This update cannot be proven deterministic because of r.js (and in fact is not), so you must pass the non_atomic flag.</p> <pre data-language=\"ruby\">r.table(\"posts\").get(1).update({\n    :num_comments =&gt; r.js(\"Math.floor(Math.random()*100)\")\n}, :non_atomic =&gt; true).run(conn)\n</pre>  <p><strong>Example:</strong> Update the status of the post with id of 1 using soft durability.</p> <pre data-language=\"ruby\">r.table(\"posts\").get(1).update({:status =&gt; \"published\"}, :durability =&gt; \"soft\").run(conn)\n</pre>  <p><strong>Example:</strong> Increment the field views and return the values of the document before and after the update operation.</p> <pre data-language=\"ruby\">r.table(\"posts\").get(1).update(:return_changes =&gt; true) { |post|\n    :views =&gt; post[\"views\"]+1\n}.run(conn)\n</pre>  <p>The result will now include a changes field:</p> <pre data-language=\"ruby\">{\n    :deleted =&gt; 0,\n    :errors =&gt; 0,\n    :inserted =&gt; 0,\n    :changes =&gt; [\n        {\n            :new_val =&gt; {\n                :id =&gt; 1,\n                :author =&gt; \"Julius_Caesar\",\n                :title =&gt; \"Commentarii de Bello Gallico\",\n                :content =&gt; \"Aleas jacta est\",\n                :views =&gt; 207\n            },\n            :old_val =&gt; {\n                :id =&gt; 1,\n                :author =&gt; \"Julius_Caesar\",\n                :title =&gt; \"Commentarii de Bello Gallico\",\n                :content =&gt; \"Aleas jacta est\",\n                :views =&gt; 206\n            }\n        }\n    ],\n    :replaced =&gt; 1,\n    :skipped =&gt; 0,\n    :unchanged =&gt; 0\n}\n</pre>  <h2 id=\"updating-nested-fields\">Updating nested fields</h2> <p>The update command supports RethinkDB’s <a href=\"https://rethinkdb.com/docs/nested-fields/ruby\">nested field</a> syntax to update subdocuments. Consider a user table with contact information in this format:</p> <pre data-language=\"ruby\">{\n    :id =&gt; 10001,\n    :name =&gt; \"Bob Smith\",\n    :contact =&gt; {\n        :phone =&gt; {\n            :work =&gt; \"408-555-1212\",\n            :home =&gt; \"408-555-1213\",\n            :cell =&gt; \"408-555-1214\"\n        },\n        :email =&gt; {\n            :work =&gt; \"bob@smith.com\",\n            :home =&gt; \"bobsmith@example.com\",\n            :other =&gt; \"bobbys@moosecall.net\"\n        },\n        :im =&gt; {\n            :skype =&gt; \"Bob Smith\",\n            :aim =&gt; \"bobmoose\",\n            :icq =&gt; \"nobodyremembersicqnumbers\"\n        }\n    },\n    :notes =&gt; [\n        {\n            :date =&gt; r.time(2014,1,1,'Z'),\n            :from =&gt; \"John Doe\",\n            :subject =&gt; \"My name is even more boring than Bob's\"\n        },\n        {\n            :date =&gt; r.time(2014,2,2,'Z'),\n            :from =&gt; \"Bob Smith Sr\",\n            :subject =&gt; \"Happy Second of February\"\n        }\n    ]\n}\n</pre>  <p><strong>Example:</strong> Update Bob Smith’s cell phone number.</p> <pre data-language=\"ruby\">r.table(\"users\").get(10001).update(\n    {:contact =&gt; {:phone =&gt; {:cell =&gt; \"408-555-4242\"}}}\n).run(conn)\n</pre>  <p><strong>Example:</strong> Add another note to Bob Smith’s record.</p> <pre data-language=\"ruby\">new_note = {\n    :date =&gt; r.now(),\n    :from =&gt; \"Inigo Montoya\",\n    :subject =&gt; \"You killed my father\"\n}\nr.table(\"users\").get(10001).update{ |row|\n    {:notes =&gt; row[\"notes\"].append(new_note)}\n}.run(conn)\n</pre>  <p>This will fail if the notes field does not exist in the document. To perform this as an “upsert” (update or insert), use the <a href=\"default\">default</a> command to ensure the field is initialized as an empty list.</p> <pre data-language=\"ruby\">r.table(\"users\").get(10001).update{ |row|\n    {:notes =&gt; row[\"notes\"].default([]).append(new_note)}\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Send a note to every user with an ICQ number.</p> <pre data-language=\"ruby\">icq_note = {\n    :date =&gt; r.now(),\n    :from =&gt; \"Admin\",\n    :subject =&gt; \"Welcome to the future\"\n}\nr.table(\"users\").filter{ |row|\n    row.has_fields({:contact =&gt; {:im =&gt; \"icq\"}})\n}.update{ |row|\n    {:notes =&gt; row[\"notes\"].append(icq_note)}\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Replace all of Bob’s IM records. Normally, update will merge nested documents together; to replace the entire \"im\" document, use the <a href=\"literal\">literal</a> command.</p> <pre data-language=\"ruby\">r.table('users').get(10001).update(\n    {:contact =&gt; {:im =&gt; r.literal({:aim =&gt; \"themoosemeister\"})}}\n).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"insert\">insert</a></li> <li><a href=\"replace\">replace</a></li> <li><a href=\"delete\">delete</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/writing-data/update.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/update\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/update</a>\n  </p>\n</div>\n","replace":"<h1 class=\"title\">ReQL command: replace</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.replace(object | function[, :durability =&gt; \"hard\", :return_changes =&gt; false, :non_atomic =&gt; false]) → object\nselection.replace(object | function[, :durability =&gt; \"hard\", :return_changes =&gt; false, :non_atomic =&gt; false]) → object\nsingleSelection.replace(object | function[, :durability =&gt; \"hard\", :return_changes =&gt; false, :non_atomic =&gt; false]) → object\n</pre> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/replace.png\" class=\"api_command_illustration\"></p> <h2 id=\"description\">Description</h2> <p>Replace documents in a table. Accepts a JSON document or a ReQL expression, and replaces the original document with the new one. The new document must have the same primary key as the original document.</p> <p>The replace command can be used to both insert and delete documents. If the “replaced” document has a primary key that doesn’t exist in the table, the document will be inserted; if an existing document is replaced with nil, the document will be deleted. Since update and replace operations are performed atomically, this allows atomic inserts and deletes as well.</p> <p>The optional arguments are:</p> <ul> <li>durability: possible values are hard and soft. This option will override the table or query’s durability setting (set in <a href=\"run\">run</a>). In soft durability mode RethinkDB will acknowledge the write immediately after receiving it, but before the write has been committed to disk.</li> <li>return_changes: <ul> <li>true: return a changes array consisting of old_val/new_val objects describing the changes made, only including the documents actually updated.</li> <li>false: do not return a changes array (the default).</li> <li>\"always\": behave as true, but include all documents the command tried to update whether or not the update was successful. (This was the behavior of true pre-2.0.)</li> </ul> </li> <li>non_atomic: if set to true, executes the replacement and distributes the result to replicas in a non-atomic fashion. This flag is required to perform non-deterministic updates, such as those that require reading data from another table.</li> </ul> <p>Replace returns an object that contains the following attributes:</p> <ul> <li>replaced: the number of documents that were replaced.</li> <li>unchanged: the number of documents that would have been modified, except that the new value was the same as the old value.</li> <li>inserted: the number of new documents added. A document is considered inserted if its primary key did not exist in the table at the time of the replace operation.</li> <li>deleted: the number of deleted documents when doing a replace with nil.</li> <li>errors: the number of errors encountered while performing the replace.</li> <li>first_error: If errors were encountered, contains the text of the first error.</li> <li>skipped: 0 for a replace operation.</li> <li>changes: if return_changes is set to true, this will be an array of objects, one for each objected affected by the replace operation. Each object will have two keys: <span class=\"p\">{:</span><span class=\"err\">new_val</span><span class=\"err\">=&gt;</span><span class=\"err\">&lt;new</span><span class=\"err\">value&gt;</span><span class=\"p\">,</span><span class=\"p\">:</span><span class=\"err\">old_val</span><span class=\"err\">=&gt;</span><span class=\"err\">&lt;old</span><span class=\"err\">value&gt;</span><span class=\"p\">}</span>.</li> </ul> <div class=\"infobox infobox-alert\">\n<p>RethinkDB write operations will only throw exceptions if errors occur before any writes. Other errors will be listed in first_error, and errors will be set to a non-zero count. To properly handle errors with this term, code must both handle exceptions and check the errors return value!</p> </div> <p><strong>Example:</strong> Replace the document with the primary key 1.</p> <pre data-language=\"ruby\">r.table(\"posts\").get(1).replace({\n    :id =&gt; 1,\n    :title =&gt; \"Lorem ipsum\",\n    :content =&gt; \"Aleas jacta est\",\n    :status =&gt; \"draft\"\n}).run(conn)\n</pre>  <p><strong>Example:</strong> Remove the field status from all posts.</p> <pre data-language=\"ruby\">r.table(\"posts\").replace{ |post|\n    post.without(\"status\")\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Remove all the fields that are not id, title or content.</p> <pre data-language=\"ruby\">r.table(\"posts\").replace{ |post|\n    post.pluck(\"id\", \"title\", \"content\")\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Replace the document with the primary key 1 using soft durability.</p> <pre data-language=\"ruby\">r.table(\"posts\").get(1).replace({\n    :id =&gt; 1,\n    :title =&gt; \"Lorem ipsum\",\n    :content =&gt; \"Aleas jacta est\",\n    :status =&gt; \"draft\"\n}, :durability =&gt; \"soft\").run(conn)\n</pre>  <p><strong>Example:</strong> Replace the document with the primary key 1 and return the values of the document before and after the replace operation.</p> <pre data-language=\"ruby\">r.table(\"posts\").get(1).replace({\n    :id =&gt; 1,\n    :title =&gt; \"Lorem ipsum\",\n    :content =&gt; \"Aleas jacta est\",\n    :status =&gt; \"published\"\n}, :return_changes =&gt; true).run(conn)\n</pre>  <p>The result will have a changes field:</p> <pre data-language=\"ruby\">{\n    :deleted =&gt; 0,\n    :errors =&gt; 0,\n    :inserted =&gt; 0,\n    :changes =&gt; [\n        {\n            :new_val =&gt; {\n                :id =&gt; 1,\n                :title =&gt; \"Lorem ipsum\"\n                :content =&gt; \"Aleas jacta est\",\n                :status =&gt; \"published\",\n            },\n            :old_val =&gt; {\n                :id =&gt; 1,\n                :title =&gt; \"Lorem ipsum\"\n                :content =&gt; \"TODO\",\n                :status =&gt; \"draft\",\n                :author =&gt; \"William\",\n            }\n        }\n    ],\n    :replaced =&gt; 1,\n    :skipped =&gt; 0,\n    :unchanged =&gt; 0\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"insert\">insert</a></li> <li><a href=\"update\">update</a></li> <li><a href=\"delete\">delete</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/writing-data/replace.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/replace\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/replace</a>\n  </p>\n</div>\n","delete":"<h1 class=\"title\">ReQL command: delete</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.delete[({:durability =&gt; \"hard\", :return_changes =&gt; false})] → object\nselection.delete[({:durability =&gt; \"hard\", :return_changes =&gt; false})] → object\nsingleSelection.delete[({:durability =&gt; \"hard\", :return_changes =&gt; false})] → object\n</pre> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/delete-vector.png\" class=\"api_command_illustration\"></p> <h2 id=\"description\">Description</h2> <p>Delete one or more documents from a table.</p> <p>The optional arguments are:</p> <ul> <li>durability: possible values are hard and soft. This option will override the table or query’s durability setting (set in <a href=\"run\">run</a>).<br> In soft durability mode RethinkDB will acknowledge the write immediately after receiving it, but before the write has been committed to disk.</li> <li>return_changes: <ul> <li>true: return a changes array consisting of old_val/new_val objects describing the changes made, only including the documents actually updated.</li> <li>false: do not return a changes array (the default).</li> <li>\"always\": behave as true, but include all documents the command tried to update whether or not the update was successful. (This was the behavior of true pre-2.0.)</li> </ul> </li> </ul> <p>Delete returns an object that contains the following attributes:</p> <ul> <li>deleted: the number of documents that were deleted.</li> <li>skipped: the number of documents that were skipped.<br> For example, if you attempt to delete a batch of documents, and another concurrent query deletes some of those documents first, they will be counted as skipped.</li> <li>errors: the number of errors encountered while performing the delete.</li> <li>first_error: If errors were encountered, contains the text of the first error.</li> <li>inserted, replaced, and unchanged: all 0 for a delete operation..</li> <li>changes: if return_changes is set to true, this will be an array of objects, one for each objected affected by the delete operation. Each object will have two keys: <span class=\"p\">{:</span><span class=\"err\">new_val</span><span class=\"err\">=&gt;</span><span class=\"err\">nil</span><span class=\"p\">,</span><span class=\"p\">:</span><span class=\"err\">old_val</span><span class=\"err\">=&gt;</span><span class=\"err\">&lt;old</span><span class=\"err\">value&gt;</span><span class=\"p\">}</span>.</li> </ul> <div class=\"infobox infobox-alert\">\n<p>RethinkDB write operations will only throw exceptions if errors occur before any writes. Other errors will be listed in first_error, and errors will be set to a non-zero count. To properly handle errors with this term, code must both handle exceptions and check the errors return value!</p> </div> <p><strong>Example:</strong> Delete a single document from the table comments.</p> <pre data-language=\"ruby\">r.table(\"comments\").get(\"7eab9e63-73f1-4f33-8ce4-95cbea626f59\").delete.run(conn)\n</pre>  <p><strong>Example:</strong> Delete all documents from the table comments.</p> <pre data-language=\"ruby\">r.table(\"comments\").delete.run(conn)\n</pre>  <p><strong>Example:</strong> Delete all comments where the field id_post is 3.</p> <pre data-language=\"ruby\">r.table(\"comments\").filter({:id_post =&gt; 3}).delete.run(conn)\n</pre>  <p><strong>Example:</strong> Delete a single document from the table comments and return its value.</p> <pre data-language=\"ruby\">r.table(\"comments\").get(\"7eab9e63-73f1-4f33-8ce4-95cbea626f59\").delete(:return_changes =&gt; true).run(conn)\n</pre>  <p>The result look like:</p> <pre data-language=\"ruby\">{\n    :deleted =&gt; 1,\n    :errors =&gt; 0,\n    :inserted =&gt; 0,\n    :changes =&gt; [\n        {\n            :new_val =&gt; nil,\n            :old_val =&gt; {\n                :id =&gt; \"7eab9e63-73f1-4f33-8ce4-95cbea626f59\",\n                :author =&gt; \"William\",\n                :comment =&gt; \"Great post\",\n                :id_post =&gt; 3\n            }\n        }\n    ],\n    :replaced =&gt; 0,\n    :skipped =&gt; 0,\n    :unchanged =&gt; 0\n}\n</pre>  <p><strong>Example:</strong> Delete all documents from the table comments without waiting for the operation to be flushed to disk.</p> <pre data-language=\"ruby\">r.table(\"comments\").delete(:durability =&gt; \"soft\").run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"insert\">insert</a></li> <li><a href=\"update\">update</a></li> <li><a href=\"replace\">replace</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/writing-data/delete.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/delete\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/delete</a>\n  </p>\n</div>\n","filter":"<h1 class=\"title\">ReQL command: filter</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">selection.filter(predicate_function[, :default =&gt; false]) → selection\nstream.filter(predicate_function[, :default =&gt; false]) → stream\narray.filter(predicate_function[, :default =&gt; false]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Return all the elements in a sequence for which the given predicate is true. The return value of filter will be the same as the input (sequence, stream, or array). Documents can be filtered in a variety of ways—ranges, nested values, boolean conditions, and the results of anonymous functions.</p> <p>By default, filter will silently skip documents with missing fields: if the predicate tries to access a field that doesn’t exist (for instance, the predicate <span class=\"p\">{:</span><span class=\"err\">age</span><span class=\"err\">=&gt;</span><span class=\"mi\">30</span><span class=\"p\">}</span> applied to a document with no age field), that document will not be returned in the result set, and no error will be generated. This behavior can be changed with the default optional argument.</p> <ul> <li>If default is set to true, documents with missing fields will be returned rather than skipped.</li> <li>If default is set to r.error(), an ReqlRuntimeError will be thrown when a document with a missing field is tested.</li> <li>If default is set to false (the default), documents with missing fields will be skipped.</li> </ul> <div class=\"infobox \">\n<p><strong>Note:</strong> filter does not use secondary indexes. For retrieving documents via secondary indexes, consider <a href=\"get_all\">get_all</a>, <a href=\"between\">between</a> and <a href=\"eq_join\">eq_join</a>.</p> </div> <h2 id=\"basic-predicates\">Basic predicates</h2> <p><strong>Example:</strong> Get all users who are 30 years old.</p> <pre data-language=\"ruby\">r.table('users').filter({:age =&gt; 30}).run(conn)\n</pre>  <p>The predicate <span class=\"p\">{</span><span class=\"err\">'age'</span><span class=\"p\">:</span><span class=\"mi\">30</span><span class=\"p\">}</span> selects documents in the users table with an age field whose value is 30. Documents with an age field set to any other value <em>or</em> with no age field present are skipped.</p>  <p>While the <span class=\"p\">{</span><span class=\"err\">'field'</span><span class=\"p\">:</span><span class=\"err\">value</span><span class=\"p\">}</span> style of predicate is useful for exact matches, a more general way to write a predicate is to use a Ruby block that returns true or false.</p> <pre data-language=\"ruby\">r.table('users').filter{ |user|\n    user[\"age\"].eq(30)\n}.run(conn)\n</pre>  <p>In this case, the function returns true if the field age is equal to 30.</p> <p>Predicates to filter are evaluated on the server, and must use ReQL expressions. Some Ruby comparison operators are overloaded by the RethinkDB driver and will be translated to ReQL, such as ==, &lt;/&gt; and |/&amp; (note the single character form, rather than ||/&amp;&amp;).</p> <p>Also, predicates must evaluate document fields. They cannot evaluate <a href=\"https://rethinkdb.com/docs/secondary-indexes/\">secondary indexes</a>.</p> <p><strong>Example:</strong> Get all users who are more than 18 years old.</p> <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    user[\"age\"] &gt; 18\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Get all users who are less than 18 years old and more than 13 years old.</p> <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    (user[\"age\"] &lt; 18) &amp; (user[\"age\"] &gt; 13)\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Get all users who are more than 18 years old or have their parental consent.</p> <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    (user[\"age\"] &gt;= 18) | (user[\"hasParentalConsent\"])\n}.run(conn)\n</pre>  <h2 id=\"more-complex-predicates\">More complex predicates</h2> <p><strong>Example:</strong> Retrieve all users who subscribed between January 1st, 2012 (included) and January 1st, 2013 (excluded).</p> <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    user[\"subscription_date\"].during(r.time(2012, 1, 1, 'Z'),\n        r.time(2013, 1, 1, 'Z'))\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Retrieve all users who have a gmail account (whose field email ends with @gmail.com).</p> <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    user[\"email\"].match(\"@gmail.com$\")\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Filter based on the presence of a value in an array.</p> <p>Given this schema for the users table:</p> <pre data-language=\"ruby\">{\n    :name =&gt; String\n    :places_visited =&gt; [String]\n}\n</pre>  <p>Retrieve all users whose field places_visited contains France.</p> <pre data-language=\"ruby\">r.table(\"users\").filter{|user|\n    user[\"places_visited\"].contains(\"France\")\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Filter based on nested fields.</p> <p>Given this schema for the users table:</p> <pre data-language=\"ruby\">{\n    :id =&gt; String\n    :name =&gt; {\n        :first =&gt; String,\n        :middle =&gt; String,\n        :last =&gt; String\n    }\n}\n</pre>  <p>Retrieve all users named “William Adama” (first name “William”, last name “Adama”), with any middle name.</p> <pre data-language=\"ruby\">r.table(\"users\").filter({\n    :name =&gt; {\n        :first =&gt; \"William\",\n        :last =&gt; \"Adama\"\n    }\n}).run(conn)\n</pre>  <p>If you want an exact match for a field that is an object, you will have to use r.literal.</p> <p>Retrieve all users named “William Adama” (first name “William”, last name “Adama”), and who do not have a middle name.</p> <pre data-language=\"ruby\">r.table(\"users\").filter(r.literal({\n    :name =&gt; {\n        :first =&gt; \"William\",\n        :last=&gt; \"Adama\"\n    }\n})).run(conn)\n</pre>  <p>You may rewrite these with blocks.</p> <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    (user[\"name\"][\"first\"].eq(\"William\")) &amp;\n    (user[\"name\"][\"last\"].eq(\"Adama\"))\n}.run(conn)\n</pre>  <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    user[\"name\"].eq({\n        :first =&gt; \"William\",\n        :last =&gt; \"Adama\"\n    })\n}.run(conn)\n</pre>  <h2 id=\"handling-missing-fields\">Handling missing fields</h2> <p>By default, documents missing fields tested by the filter predicate are skipped. In the previous examples, users without an age field are not returned. By passing the optional default argument to filter, you can change this behavior.</p> <p><strong>Example:</strong> Get all users less than 18 years old or whose age field is missing.</p> <pre data-language=\"ruby\">r.table(\"users\").filter(:default =&gt; true){ |user| user[\"age\"] &lt; 18 }.run(conn)\n</pre>  <p><strong>Example:</strong> Get all users more than 18 years old. Throw an error if a document is missing the field age.</p> <pre data-language=\"ruby\">r.table(\"users\").filter(:default =&gt; r.error()){\n    |user| user[\"age\"] &gt; 18\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Get all users who have given their phone number (all the documents whose field phone_number exists and is not nil).</p> <pre data-language=\"ruby\">r.table('users').filter{ |user|\n    user.has_fields('phone_number')\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Get all users with an “editor” role or an “admin” privilege.</p> <pre data-language=\"ruby\">r.table('users').filter{ |user|\n    user['role'].eq('editor').default(false) |\n        user['privilege'].eq('admin').default(false)\n}.run(conn)\n</pre>  <p>Instead of using the default optional argument to filter, we have to use default values on the fields within the or clause. Why? If the field on the left side of the or clause is missing from a document—in this case, if the user doesn’t have a role field—the predicate will generate an error, and will return false (or the value the default argument is set to) without evaluating the right side of the or. By using .default(false) on the fields, each side of the or will evaluate to either the field’s value or false if the field doesn’t exist.</p>  <h2>Related commands</h2> <ul> <li><a href=\"get\">get</a></li> <li><a href=\"get_all\">get_all</a></li> <li><a href=\"between\">between</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/selecting-data/filter.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/filter\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/filter</a>\n  </p>\n</div>\n","inner_join":"<h1 class=\"title\">ReQL command: inner_join</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.inner_join(other_sequence, predicate_function) → stream\narray.inner_join(other_sequence, predicate_function) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Returns an inner join of two sequences.</p> <p>The returned sequence represents an intersection of the left-hand sequence and the right-hand sequence: each row of the left-hand sequence will be compared with each row of the right-hand sequence to find all pairs of rows which satisfy the predicate. Each matched pair of rows of both sequences are combined into a result row. In most cases, you will want to follow the join with <a href=\"zip\">zip</a> to combine the left and right results.</p> <div class=\"infobox \">\n<p>Note that inner_join is slower and much less efficient than using <a href=\"eq_join\">eq_join</a> or <a href=\"concat_map\">concat_map</a> with <a href=\"get_all\">get_all</a>. You should avoid using inner_join in commands when possible.</p> </div> <p><strong>Example:</strong> Return a list of all matchups between Marvel and DC heroes in which the DC hero could beat the Marvel hero in a fight.</p> <pre data-language=\"ruby\">r.table('marvel').inner_join(r.table('dc')) {|marvel_row, dc_row|\n    marvel_row[:strength] &lt; dc_row[:strength]\n}.zip().run(conn)\n</pre>   <p>(Compare this to an <a href=\"outer_join\">outer_join</a> with the same inputs and predicate, which would return a list of <em>all</em> Marvel heroes along with any DC heroes with a higher strength.)</p>  <h2>Related commands</h2> <ul> <li><a href=\"eq_join\">eq_join</a></li> <li><a href=\"outer_join\">outer_join</a></li> <li><a href=\"zip\">zip</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/joins/inner_join.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/inner_join\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/inner_join</a>\n  </p>\n</div>\n","outer_join":"<h1 class=\"title\">ReQL command: outer_join</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.outer_join(other_sequence, predicate_function) → stream\narray.outer_join(other_sequence, predicate_function) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Returns a left outer join of two sequences. The returned sequence represents a union of the left-hand sequence and the right-hand sequence: all documents in the left-hand sequence will be returned, each matched with a document in the right-hand sequence if one satisfies the predicate condition. In most cases, you will want to follow the join with <a href=\"zip\">zip</a> to combine the left and right results.</p> <div class=\"infobox \">\n<p>Note that outer_join is slower and much less efficient than using <a href=\"concat_map\">concat_map</a> with <a href=\"get_all\">get_all</a>. You should avoid using outer_join in commands when possible.</p> </div> <p><strong>Example:</strong> Return a list of all Marvel heroes, paired with any DC heroes who could beat them in a fight.</p> <pre data-language=\"ruby\">r.table('marvel').outer_join(r.table('dc')) {|marvel_row, dc_row|\n    marvel_row[:strength] &lt; dc_row[:strength]\n}.run(conn)\n</pre>  <p>(Compare this to an <a href=\"inner_join\">inner_join</a> with the same inputs and predicate, which would return a list only of the matchups in which the DC hero has the higher strength.)</p>  <h2>Related commands</h2> <ul> <li><a href=\"inner_join\">inner_join</a></li> <li><a href=\"outer_join\">outer_join</a></li> <li><a href=\"zip\">zip</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/joins/outer_join.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/outer_join\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/outer_join</a>\n  </p>\n</div>\n","zip":"<h1 class=\"title\">ReQL command: zip</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">stream.zip() → stream\narray.zip() → array\n</pre> <h2 id=\"description\">Description</h2> <p>Used to ‘zip’ up the result of a join by merging the ‘right’ fields into ‘left’ fields of each member of the sequence.</p> <p><strong>Example:</strong> ‘zips up’ the sequence by merging the left and right fields produced by a join.</p> <pre data-language=\"ruby\">r.table('marvel').eq_join(:main_dc_collaborator, r.table('dc')).zip.run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"eq_join\">eq_join</a></li> <li><a href=\"inner_join\">inner_join</a></li> <li><a href=\"outer_join\">outer_join</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/joins/zip.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/zip\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/zip</a>\n  </p>\n</div>\n","get_all":"<h1 class=\"title\">ReQL command: get_all</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.get_all([key, key2...], [, :index =&gt; 'id']) → selection\n</pre> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/get-all.png\" class=\"api_command_illustration\"></p> <h2 id=\"description\">Description</h2> <p>Get all documents where the given value matches the value of the requested index.</p> <p><strong>Example:</strong> Secondary index keys are not guaranteed to be unique so we cannot query via <a href=\"get\">get</a> when using a secondary index.</p> <pre data-language=\"ruby\">r.table('marvel').get_all('man_of_steel', :index =&gt; 'code_name').run(conn)\n</pre>  <p><strong>Example:</strong> Without an index argument, we default to the primary index. While get will either return the document or nil when no document with such a primary key value exists, this will return either a one or zero length stream.</p> <pre data-language=\"ruby\">r.table('dc').get_all('superman').run(conn)\n</pre>  <p><strong>Example:</strong> You can get multiple documents in a single call to get_all.</p> <pre data-language=\"ruby\">r.table('dc').get_all('superman', 'ant man').run(conn)\n</pre>  <div class=\"infobox \">\n<p><strong>Note:</strong> get_all does not perform any de-duplication. If you pass the same key more than once, the same document will be returned multiple times.</p> </div> <p><strong>Example:</strong> You can use <a href=\"args\">args</a> with get_all to retrieve multiple documents whose keys are in a list. This uses get_all to get a list of female superheroes, coerces that to an array, and then gets a list of villains who have those superheroes as enemies.</p> <pre data-language=\"ruby\">r.table('heroes').get_all('f', :index =&gt; 'gender')['id'].coerce_to('array').do {\n    |heroines| r.table('villains').get_all(r.args(heroines))\n}.run(conn)\n</pre>  <p>Calling get_all with zero arguments—which could happen in this example if the heroines list had no elements—will return nothing, i.e., a zero length stream.</p> <p>Secondary indexes can be used in extremely powerful ways with get_all and other commands; read the full article on <a href=\"https://rethinkdb.com/docs/secondary-indexes\">secondary indexes</a> for examples using boolean operations, contains and more.</p>  <h2>Related commands</h2> <ul> <li><a href=\"get\">get</a></li> <li><a href=\"between\">between</a></li> <li><a href=\"filter\">filter</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/selecting-data/get_all.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/get_all\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/get_all</a>\n  </p>\n</div>\n","between":"<h1 class=\"title\">ReQL command: between</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.between(lower_key, upper_key[, options]) → table_slice\ntable_slice.between(lower_key, upper_key[, options]) → table_slice\n</pre> <h2 id=\"description\">Description</h2> <p>Get all documents between two keys. Accepts three optional arguments: index, left_bound, and right_bound. If index is set to the name of a secondary index, between will return all documents where that index’s value is in the specified range (it uses the primary key by default). left_bound or right_bound may be set to open or closed to indicate whether or not to include that endpoint of the range (by default, left_bound is closed and right_bound is open).</p> <p>You may also use the special constants r.minval and r.maxval for boundaries, which represent “less than any index key” and “more than any index key” respectively. For instance, if you use r.minval as the lower key, then between will return all documents whose primary keys (or indexes) are less than the specified upper key.</p> <p>If you use arrays as indexes (compound indexes), they will be sorted using <a href=\"https://en.wikipedia.org/wiki/Lexicographical_order\">lexicographical order</a>. Take the following range as an example:</p> <pre data-language=\"ruby\">[[1, \"c\"] ... [5, \"e\"]]\n</pre>  <p>This range includes all compound keys:</p> <ul> <li>whose first item is 1 and second item is equal or greater than “c”;</li> <li>whose first item is between 1 and 5, <em>regardless of the value of the second item</em>;</li> <li>whose first item is 5 and second item is less than or equal to “e”.</li> </ul> <p><strong>Example:</strong> Find all users with primary key &gt;= 10 and &lt; 20 (a normal half-open interval).</p> <pre data-language=\"ruby\">r.table('marvel').between(10, 20).run(conn)\n</pre>  <p><strong>Example:</strong> Find all users with primary key &gt;= 10 and &lt;= 20 (an interval closed on both sides).</p> <pre data-language=\"ruby\">r.table('marvel').between(10, 20, :right_bound =&gt; 'closed').run(conn)\n</pre>  <p><strong>Example:</strong> Find all users with primary key &lt; 20.</p> <pre data-language=\"ruby\">r.table('marvel').between(r.minval, 20).run(conn)\n</pre>  <p><strong>Example:</strong> Find all users with primary key &gt; 10.</p> <pre data-language=\"ruby\">r.table('marvel').between(10, r.maxval, :left_bound =&gt; 'open').run(conn)\n</pre>  <p><strong>Example:</strong> Between can be used on secondary indexes too. Just pass an optional index argument giving the secondary index to query.</p> <pre data-language=\"ruby\">r.table('dc').between('dark_knight', 'man_of_steel',\n    :index =&gt; 'code_name').run(conn)\n</pre>  <p><strong>Example:</strong> Get all users whose full name is between “John Smith” and “Wade Welles.”</p> <pre data-language=\"ruby\">r.table(\"users\").between([\"Smith\", \"John\"], [\"Welles\", \"Wade\"],\n    :index =&gt; \"full_name\").run(conn)\n</pre>  <p><strong>Example:</strong> Get the top 10 ranked teams in order.</p> <pre data-language=\"ruby\">r.table(\"teams\").order_by(:index =&gt; \"rank\").between(1, 11).run(conn)\n</pre>  <p><strong>Note:</strong> When between is chained after <a href=\"order_by\">order_by</a>, both commands must use the same index; between will default to the index order_by is using, so in this example \"rank\" is automatically being used by between. Trying to specify another index will result in a ReqlRuntimeError.</p> <p><strong>Example:</strong> Subscribe to a <a href=\"https://rethinkdb.com/docs/changefeeds/ruby\">changefeed</a> of teams ranked in the top 10.</p> <pre data-language=\"ruby\">changes = r.table(\"teams\").between(1, 11, :index =&gt; \"rank\").changes().run(conn)\n</pre>  <div class=\"infobox \">\n<p>The between command works with secondary indexes on date fields, but will not work with unindexed date fields. To test whether a date value is between two other dates, use the <a href=\"during\">during</a> command, not between.</p> <p>Secondary indexes can be used in extremely powerful ways with between and other commands; read the full article on <a href=\"https://rethinkdb.com/docs/secondary-indexes\">secondary indexes</a> for examples using boolean operations, contains and more.</p> <p>RethinkDB uses byte-wise ordering for between and does not support Unicode collations; non-ASCII characters will be sorted by UTF-8 codepoint.</p> </div>  <h2>Related commands</h2> <ul> <li><a href=\"get\">get</a></li> <li><a href=\"get_all\">get_all</a></li> <li><a href=\"filter\">filter</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/selecting-data/between.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/between\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/between</a>\n  </p>\n</div>\n","map":"<h1 class=\"title\">ReQL command: map</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence1.map([sequence2, ...], function) → stream\narray1.map([array2, ...], function) → array\nr.map(sequence1[, sequence2, ...], function) → stream\nr.map(array1[, array2, ...], function) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Transform each element of one or more sequences by applying a mapping function to them. If map is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</p> <p>Note that map can only be applied to sequences, not single values. If you wish to apply a function to a single value/selection (including an array), use the <a href=\"do\">do</a> command.</p> <p><strong>Example:</strong> Return the first five squares.</p> <pre data-language=\"ruby\">&gt; r.expr([1, 2, 3, 4, 5]).map{ |val| (val * val) }.run(conn)\n\n[1, 4, 9, 16, 25]\n</pre>  <p><strong>Example:</strong> Sum the elements of three sequences.</p> <pre data-language=\"ruby\">&gt; sequence1 = [100, 200, 300, 400]\n&gt; sequence2 = [10, 20, 30, 40]\n&gt; sequence3 = [1, 2, 3, 4]\n&gt; r.map(sequence1, sequence2, sequence3){ |val1, val2, val3|\n      (val1 + val2 + val3)\n  }.run(conn)\n\n[111, 222, 333, 444]\n</pre>  <p><strong>Example:</strong> Rename a field when retrieving documents using map and <a href=\"merge\">merge</a>.</p> <p>This example renames the field id to user_id when retrieving documents from the table users.</p> <pre data-language=\"ruby\">r.table('users').map{ |doc|\n    doc.merge({:user_id =&gt; doc['id']}).without('id')\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Assign every superhero an archenemy.</p> <pre data-language=\"ruby\">r.table('heroes').map(r.table('villains')){ |hero, villain|\n    hero.merge({:villain =&gt; villain})\n}.run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"concat_map\">concat_map</a></li> <li><a href=\"reduce\">reduce</a></li> <li><a href=\"do\">do</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/transformations/map.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/map\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/map</a>\n  </p>\n</div>\n","pluck":"<h1 class=\"title\">ReQL command: pluck</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.pluck([selector1, selector2...]) → stream\narray.pluck([selector1, selector2...]) → array\nobject.pluck([selector1, selector2...]) → object\nsingleSelection.pluck([selector1, selector2...]) → object\n</pre> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/pluck.png\" class=\"api_command_illustration\"></p> <h2 id=\"description\">Description</h2> <p>Plucks out one or more attributes from either an object or a sequence of objects (projection).</p> <p><strong>Example:</strong> We just need information about IronMan’s reactor and not the rest of the document.</p> <pre data-language=\"ruby\">r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn)\n</pre>  <p><strong>Example:</strong> For the hero beauty contest we only care about certain qualities.</p> <pre data-language=\"ruby\">r.table('marvel').pluck('beauty', 'muscleTone', 'charm').run(conn)\n</pre>  <p><strong>Example:</strong> Pluck can also be used on nested objects.</p> <pre data-language=\"ruby\">r.table('marvel').pluck({:abilities =&gt; {:damage =&gt; true, :mana_cost =&gt; true}, :weapons =&gt; true}).run(conn)\n</pre>  <p><strong>Example:</strong> The nested syntax can quickly become overly verbose so there’s a shorthand for it.</p> <pre data-language=\"ruby\">r.table('marvel').pluck({:abilities =&gt; [:damage, :mana_cost]}, :weapons).run(conn)\n</pre>  <p>For more information read the <a href=\"https://rethinkdb.com/docs/nested-fields/\">nested field documentation</a>.</p>  <h2>Related commands</h2> <ul> <li><a href=\"without\">without</a></li> <li><a href=\"map\">map</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/pluck.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/pluck\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/pluck</a>\n  </p>\n</div>\n","eq_join":"<h1 class=\"title\">ReQL command: eq_join</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.eq_join(left_field, right_table[, :index =&gt; 'id', :ordered =&gt; false]) → sequence\nsequence.eq_join(predicate_function, right_table[, :index =&gt; 'id', :ordered =&gt; false]) → sequence\n</pre> <h2 id=\"description\">Description</h2> <p><img alt=\"Data Modeling Illustration\" class=\"api_command_illustration\" src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/table-joins.png\"></p> <p>Join tables using a field or function on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. eq_join is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field’s value exists in the specified index on the right-hand side.</p> <p>The result set of eq_join is a stream or array of objects. Each object in the returned set will be an object of the form <span class=\"p\">{</span><span class=\"err\">left</span><span class=\"p\">:</span><span class=\"err\">&lt;left-document&gt;</span><span class=\"p\">,</span><span class=\"err\">right</span><span class=\"p\">:</span><span class=\"err\">&lt;right-document&gt;</span><span class=\"p\">}</span>, where the values of left and right will be the joined documents. Use the <code><a href=\"zip\">zip</a></code> command to merge the left and right fields together.</p> <p>The results from eq_join are, by default, not ordered. The optional :ordered =&gt; true parameter will cause eq_join to order the output based on the left side input stream. (If there are multiple matches on the right side for a document on the left side, their order is not guaranteed even if ordered is true.) Requiring ordered results can significantly slow down eq_join, and in many circumstances this ordering will not be required. (See the first example, in which ordered results are obtained by using order_by after eq_join.)</p> <p>Suppose the players table contains these documents:</p> <pre data-language=\"ruby\">[\n    { :id =&gt; 1, :player =&gt; 'George', :game_id =&gt; 1 },\n    { :id =&gt; 2, :player =&gt; 'Agatha', :game_id =&gt; 3 },\n    { :id =&gt; 3, :player =&gt; 'Fred', :game_id =&gt; 2 },\n    { :id =&gt; 4, :player =&gt; 'Marie', :game_id =&gt; 2 },\n    { :id =&gt; 5, :player =&gt; 'Earnest', :game_id =&gt; 1 },\n    { :id =&gt; 6, :player =&gt; 'Beth', :game_id =&gt; 3 }\n]\n</pre>  <p>The games table contains these documents:</p> <pre data-language=\"ruby\">[\n    { :id =&gt; 1, :field =&gt; 'Little Delving' },\n    { :id =&gt; 2, :field =&gt; 'Rushock Bog' },\n    { :id =&gt; 3, :field =&gt; 'Bucklebury' }\n]\n</pre>  <p><strong>Example:</strong> Match players with the games they’ve played against one another.</p> <p>Join these tables using game_id on the player table and id on the games table:</p> <pre data-language=\"ruby\">r.table('players').eq_join('game_id', r.table('games')).run(conn)\n</pre>  <p>This will return a result set such as the following:</p> <pre data-language=\"ruby\">[\n    {\n        'left' =&gt; { 'game_id' =&gt; 3, 'id' =&gt; 2, 'player' =&gt; \"Agatha\" },\n        'right' =&gt; { 'id' =&gt; 3, 'field' =&gt; \"Bucklebury\" }\n    },\n    {\n        'left' =&gt; { 'game_id' =&gt; 2, 'id' =&gt; 3, 'player' =&gt; \"Fred\" },\n        'right' =&gt; { 'id' =&gt; 2, 'field' =&gt; \"Rushock Bog\" }\n    },\n    ...\n]\n</pre>   <p>What you likely want is the result of using zip with that. For clarity, we’ll use without to drop the id field from the games table (it conflicts with the id field for the players and it’s redundant anyway), and we’ll order it by the games.</p> <pre data-language=\"ruby\">r.table('players').eq_join('game_id', r.table('games')).without({:right =&gt; \"id\"}).zip().order_by('game_id').run(conn)\n\n[\n    { 'field' =&gt; \"Little Delving\", 'game_id' =&gt; 1, 'id' =&gt; 5, 'player' =&gt; \"Earnest\" },\n    { 'field' =&gt; \"Little Delving\", 'game_id' =&gt; 1, 'id' =&gt; 1, 'player' =&gt; \"George\" },\n    { 'field' =&gt; \"Rushock Bog\", 'game_id' =&gt; 2, 'id' =&gt; 3, 'player' =&gt; \"Fred\" },\n    { 'field' =&gt; \"Rushock Bog\", 'game_id' =&gt; 2, 'id' =&gt; 4, 'player' =&gt; \"Marie\" },\n    { 'field' =&gt; \"Bucklebury\", 'game_id' =&gt; 3, 'id' =&gt; 6, 'player' =&gt; \"Beth\" },\n    { 'field' =&gt; \"Bucklebury\", 'game_id' =&gt; 3, 'id' =&gt; 2, 'player' =&gt; \"Agatha\" }\n]\n</pre>  <p>For more information, see <a href=\"https://rethinkdb.com/docs/table-joins/\">Table joins in RethinkDB</a>.</p> <p><strong>Example:</strong> Use a secondary index on the right table rather than the primary key. If players have a secondary index on their cities, we can get a list of arenas with players in the same area.</p> <pre data-language=\"ruby\">r.table('players').eq_join('city_id', r.table('arenas'), {:index =&gt; 'city_id'}).run(conn)\n</pre>  <p><strong>Example:</strong> Use a nested key as the join field. Suppose the documents in the players table were structured like this:</p> <pre data-language=\"ruby\">{ :id =&gt; 1, :player =&gt; 'George', :game =&gt; {:id =&gt; 1} },\n{ :id =&gt; 2, :player =&gt; 'Agatha', :game =&gt; {:id =&gt; 3} },\n...\n</pre>  <p>Simply specify the field using a block instead of a string.</p> <pre data-language=\"ruby\">r.table('players').eq_join(\n    lambda { |player| player['game']['id'] },\n    r.table('games')).without({:right =&gt; 'id'}\n).zip().run(conn)\n\n[\n    { 'field' =&gt; \"Little Delving\", 'game' =&gt; { 'id' =&gt; 1 }, 'id' =&gt; 5, 'player' =&gt; \"Earnest\" },\n    { 'field' =&gt; \"Little Delving\", 'game' =&gt; { 'id' =&gt; 1 }, 'id' =&gt; 1, 'player' =&gt; \"George\" },\n    ...\n]\n</pre>  <p><strong>Example:</strong> Use a function instead of a field to join on a more complicated expression. Suppose the players have lists of favorite games ranked in order in a field such as favorites: [3, 2, 1]. Get a list of players and their top favorite:</p> <pre data-language=\"ruby\">r.table('players').eq_join(\n    lambda { |player| player['favorites'].nth(0) },\n    r.table('games')\n).without([{:left =&gt; ['favorites', 'game_id', 'id']}, {:right =&gt; 'id'}]).zip()\n</pre>  <p>Result:</p> <pre data-language=\"ruby\">[\n\t{ 'field' =&gt; \"Rushock Bog\", 'name' =&gt; \"Fred\" },\n\t{ 'field' =&gt; \"Little Delving\", 'name' =&gt; \"George\" },\n\t...\n]\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"inner_join\">inner_join</a></li> <li><a href=\"outer_join\">outer_join</a></li> <li><a href=\"without\">without</a></li> <li><a href=\"zip\">zip</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/joins/eq_join.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/eq_join\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/eq_join</a>\n  </p>\n</div>\n","with_fields":"<h1 class=\"title\">ReQL command: with_fields</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.with_fields([selector1, selector2...]) → stream\narray.with_fields([selector1, selector2...]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Plucks one or more attributes from a sequence of objects, filtering out any objects in the sequence that do not have the specified fields. Functionally, this is identical to <a href=\"has_fields\">has_fields</a> followed by <a href=\"pluck\">pluck</a> on a sequence.</p> <p><strong>Example:</strong> Get a list of users and their posts, excluding any users who have not made any posts.</p> <p>Existing table structure:</p> <pre data-language=\"ruby\">[\n    { :id =&gt; 1, :user =&gt; 'bob', :email =&gt; 'bob@foo.com', :posts =&gt; [ 1, 4, 5 ] },\n    { :id =&gt; 2, :user =&gt; 'george', :email =&gt; 'george@foo.com' },\n    { :id =&gt; 3, :user =&gt; 'jane', :email =&gt; 'jane@foo.com', :posts =&gt; [ 2, 3, 6 ] }\n]\n</pre>  <p>Command and output:</p> <pre data-language=\"ruby\">r.table('users').with_fields('id', 'user', 'posts').run(conn)\n\n[\n    { :id =&gt; 1, :user =&gt; 'bob', :posts =&gt; [ 1, 4, 5 ] },\n    { :id =&gt; 3, :user =&gt; 'jane', :posts =&gt; [ 2, 3, 6 ] }\n]\n</pre>  <p><strong>Example:</strong> Use the <a href=\"https://rethinkdb.com/docs/nested-fields/\">nested field syntax</a> to get a list of users with cell phone numbers in their contacts.</p> <pre data-language=\"ruby\">r.table('users').with_fields('id', 'user', {:contact =&gt; {:phone =&gt; 'work'}).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"has_fields\">has_fields</a></li> <li><a href=\"pluck\">pluck</a></li> <li><a href=\"without\">without</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/transformations/with_fields.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/with_fields\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/with_fields</a>\n  </p>\n</div>\n","has_fields":"<h1 class=\"title\">ReQL command: has_fields</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.has_fields([selector1, selector2...]) → stream\narray.has_fields([selector1, selector2...]) → array\nobject.has_fields([selector1, selector2...]) → boolean\n</pre> <h2 id=\"description\">Description</h2> <p>Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object <span class=\"p\">{</span><span class=\"err\">'a'</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"err\">'b'</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"err\">'c'</span><span class=\"p\">:</span><span class=\"kc\">null</span><span class=\"p\">}</span> has the fields a and b.</p> <p>When applied to a single object, has_fields returns true if the object has the fields and false if it does not. When applied to a sequence, it will return a new sequence (an array or stream) containing the elements that have the specified fields.</p> <p><strong>Example:</strong> Return the players who have won games.</p> <pre data-language=\"ruby\">r.table('players').has_fields(:games_won).run(conn)\n</pre>  <p><strong>Example:</strong> Return the players who have <em>not</em> won games. To do this, use has_fields with <a href=\"not\">not</a>, wrapped with <a href=\"filter\">filter</a>.</p> <pre data-language=\"ruby\">r.table('players').filter { |row| row.has_fields(:games_won).not }.run(conn)\n</pre>  <p><strong>Example:</strong> Test if a specific player has won any games.</p> <pre data-language=\"ruby\">r.table('players').get(\n    'b5ec9714-837e-400c-aa74-dbd35c9a7c4c'\n).has_fields(:games_won).run(conn)\n</pre>  <p><strong>Nested Fields</strong></p> <p>has_fields lets you test for nested fields in objects. If the value of a field is itself a set of key/value pairs, you can test for the presence of specific keys.</p> <p><strong>Example:</strong> In the players table, the games_won field contains one or more fields for kinds of games won:</p> <pre data-language=\"ruby\">{\n    :games_won =&gt; {\n        :playoffs =&gt; 2,\n        :championships =&gt; 1\n    }\n}\n</pre>  <p>Return players who have the “championships” field.</p> <pre data-language=\"ruby\">r.table('players').has_fields(\n    {:games_won =&gt; {:championships =&gt; true}}\n).run(conn)\n</pre>  <p>Note that true in the example above is testing for the existence of championships as a field, not testing to see if the value of the championships field is set to true. There’s a more convenient shorthand form available. (See <a href=\"pluck\">pluck</a> for more details on this.)</p> <pre data-language=\"ruby\">r.table('players').has_fields({:games_won =&gt; :championships}).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"get_field\">[] (get_field)</a></li> <li><a href=\"with_fields\">with_fields</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/has_fields.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/has_fields\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/has_fields</a>\n  </p>\n</div>\n","concat_map":"<h1 class=\"title\">ReQL command: concat_map</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">stream.concat_map(function) → stream\narray.concat_map(function) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Concatenate one or more elements into a single sequence using a mapping function.</p> <p>concat_map works in a similar fashion to <a href=\"map\">map</a>, applying the given function to each element in a sequence, but it will always return a single sequence. If the mapping function returns a sequence, map would produce a sequence of sequences:</p> <pre data-language=\"ruby\">r.expr([1, 2, 3]).map { |x| [x, x.mul(2)] }.run(conn)\n</pre>  <p>Result:</p> <pre data-language=\"ruby\">[[1, 2], [2, 4], [3, 6]]\n</pre>  <p>Whereas concat_map with the same mapping function would merge those sequences into one:</p> <pre data-language=\"ruby\">r.expr([1, 2, 3]).concat_map { |x| [x, x.mul(2)] }.run(conn)\n</pre>  <p>Result:</p> <pre data-language=\"ruby\">[1, 2, 2, 4, 3, 6]\n</pre>  <p>The return value, array or stream, will be the same type as the input.</p> <p><strong>Example:</strong> Construct a sequence of all monsters defeated by Marvel heroes. The field “defeatedMonsters” is an array of one or more monster names.</p> <pre data-language=\"ruby\">r.table('marvel').concat_map { |hero|\n    hero[:defeated_monsters]\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Simulate an <a href=\"eq_join\">eq_join</a> using concat_map. (This is how ReQL joins are implemented internally.)</p> <pre data-language=\"ruby\">r.table('posts').concat_map { |post|\n    r.table('comments').get_all(\n        post['id'], :index =&gt; 'post_id'\n    ).map { |comment| { :left =&gt; post, :right =&gt; comment} }\n}.run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"map\">map</a></li> <li><a href=\"reduce\">reduce</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/transformations/concat_map.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/concat_map\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/concat_map</a>\n  </p>\n</div>\n","skip":"<h1 class=\"title\">ReQL command: skip</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.skip(n) → stream\narray.skip(n) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Skip a number of elements from the head of the sequence.</p> <p><strong>Example:</strong> Here in conjunction with <a href=\"order_by\">order_by</a> we choose to ignore the most successful heroes.</p> <pre data-language=\"ruby\">r.table('marvel').order_by(:success_metric).skip(10).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"order_by\">order_by</a></li> <li><a href=\"limit\">limit</a></li> <li><a href=\"slice\">[]</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/transformations/skip.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/skip\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/skip</a>\n  </p>\n</div>\n","limit":"<h1 class=\"title\">ReQL command: limit</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.limit(n) → stream\narray.limit(n) → array\n</pre> <h2 id=\"description\">Description</h2> <p>End the sequence after the given number of elements.</p> <p><strong>Example:</strong> Only so many can fit in our Pantheon of heroes.</p> <pre data-language=\"ruby\">r.table('marvel').order_by(:belovedness).limit(10).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"order_by\">order_by</a></li> <li><a href=\"skip\">skip</a></li> <li><a href=\"slice\">[]</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/transformations/limit.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/limit\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/limit</a>\n  </p>\n</div>\n","nth":"<h1 class=\"title\">ReQL command: nth</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.nth(index) → object\nselection.nth(index) → selection&lt;object&gt;\n</pre> <h2 id=\"description\">Description</h2> <p>Get the <em>nth</em> element of a sequence, counting from zero. If the argument is negative, count from the last element.</p> <p><strong>Example:</strong> Select the second element in the array.</p> <pre data-language=\"ruby\">r.expr([1,2,3]).nth(1).run(conn)\nr.expr([1,2,3])[1].run(conn)\n</pre>  <p><strong>Example:</strong> Select the bronze medalist from the competitors.</p> <pre data-language=\"ruby\">r.table('players').order_by(:index =&gt; r.desc('score')).nth(3).run(conn)\n</pre>  <p><strong>Example:</strong> Select the last place competitor.</p> <pre data-language=\"ruby\">r.table('players').order_by(:index =&gt; r.desc('score')).nth(-1).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"order_by\">order_by</a></li> <li><a href=\"skip\">skip</a></li> <li><a href=\"limit\">limit</a></li> <li><a href=\"bracket\">[] (bracket)</a></li> <li><a href=\"slice\">slice, []</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/transformations/nth.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/nth\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/nth</a>\n  </p>\n</div>\n","order_by":"<h1 class=\"title\">ReQL command: order_by</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.order_by([key | function], :index =&gt; index_name) → table_slice\nselection.order_by(key | function[, ...]) → selection&lt;array&gt;\nsequence.order_by(key | function[, ...]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Sort the sequence by document values of the given key(s). To specify the ordering, wrap the attribute with either r.asc or r.desc (defaults to ascending).</p> <p><strong>Note:</strong> RethinkDB uses byte-wise ordering for orderBy and does not support Unicode collations; non-ASCII characters will be sorted by UTF-8 codepoint. For more information on RethinkDB’s sorting order, read the section in <a href=\"https://rethinkdb.com/docs/data-types/#sorting-order\">ReQL data types</a>.</p> <p>Sorting without an index requires the server to hold the sequence in memory, and is limited to 100,000 documents (or the setting of the array_limit option for <a href=\"run\">run</a>). Sorting with an index can be done on arbitrarily large tables, or after a <a href=\"between\">between</a> command using the same index. This applies to both secondary indexes and the primary key (e.g., :index =&gt; 'id').</p> <p><strong>Example:</strong> Order all the posts using the index date.</p> <pre data-language=\"ruby\">r.table('posts').order_by(:index =&gt; 'date').run(conn)\n</pre>   <p>The index must either be the primary key or have been previously created with <a href=\"index_create\">index_create</a>.</p> <pre data-language=\"ruby\">r.table('posts').index_create('date').run(conn)\n</pre>  <p>You can also select a descending ordering:</p> <pre data-language=\"ruby\">r.table('posts').order_by(:index =&gt; r.desc('date')).run(conn, callback)\n</pre>  <p><strong>Example:</strong> Order a sequence without an index.</p> <pre data-language=\"ruby\">r.table('posts').get(1)['comments'].order_by('date')\n</pre>  <p>You can also select a descending ordering:</p> <pre data-language=\"ruby\">r.table('posts').get(1)['comments'].order_by(r.desc('date'))\n</pre>  <p>If you’re doing ad-hoc analysis and know your table won’t have more then 100,000 elements (or you’ve changed the setting of the array_limit option for <a href=\"run\">run</a>) you can run order_by without an index:</p> <pre data-language=\"ruby\">r.table('small_table').order_by('date')\n</pre>  <p><strong>Example:</strong> You can efficiently order using multiple fields by using a <a href=\"http://www.rethinkdb.com/docs/secondary-indexes/ruby/\">compound index</a>.</p> <p>Order by date and title.</p> <pre data-language=\"ruby\">r.table('posts').order_by(:index =&gt; 'date_and_title').run(conn)\n</pre>  <p>The index must either be the primary key or have been previously created with <a href=\"index_create\">index_create</a>.</p> <pre data-language=\"ruby\">r.table('posts').index_create('date_and_title') {|post| [post[\"date\"], post[\"title\"]]}.run(conn)\n</pre>  <p><em>Note</em>: You cannot specify multiple orders in a compound index. See <a href=\"https://github.com/rethinkdb/rethinkdb/issues/2306\">issue #2306</a> to track progress.</p> <p><strong>Example:</strong> If you have a sequence with fewer documents than the array_limit, you can order it by multiple fields without an index.</p> <pre data-language=\"ruby\">r.table('small_table').order_by('date', r.desc('title'))\n</pre>  <p><strong>Example:</strong> Notice that an index ordering always has highest precedence. The following query orders posts by date, and if multiple posts were published on the same date, they will be ordered by title.</p> <pre data-language=\"ruby\">r.table('post').order_by(:title, :index =&gt; 'date').run(conn)\n</pre>  <p><strong>Example:</strong> You can use <a href=\"https://rethinkdb.com/docs/cookbook/ruby/#filtering-based-on-nested-fields\">nested field</a> syntax to sort on fields from subdocuments. (You can also create indexes on nested fields using this syntax with index_create.)</p> <pre data-language=\"ruby\">r.table('user').order_by{ |user| user['group']['id'] }.run(conn)\n</pre>  <p><strong>Example:</strong> You can efficiently order data on arbitrary expressions using indexes.</p> <pre data-language=\"ruby\">r.table('posts').order_by(:index =&gt; 'votes').run(conn)\n</pre>  <p>The index must have been previously created with <a href=\"index_create\">index_create</a>.</p> <pre data-language=\"ruby\">r.table('posts').index_create('votes') {|post|\n    post[\"upvotes\"]-post[\"downvotes\"]\n}.run(conn)\n</pre>  <p><strong>Example:</strong> If you have a sequence with fewer documents than the array_limit, you can order it with an arbitrary function directly.</p> <pre data-language=\"ruby\">r.table('small_table').order_by(lambda { |doc|\n    doc['upvotes']-doc['downvotes']\n});\n</pre>  <p>You can also select a descending ordering:</p> <pre data-language=\"ruby\">r.table('small_table').order_by(r.desc(lambda { |doc|\n    doc['upvotes']-doc['downvotes']\n}));\n</pre>  <p><strong>Example:</strong> Ordering after a between command can be done as long as the same index is being used.</p> <pre data-language=\"ruby\">r.table(\"posts\").between(r.time(2013, 1, 1, '+00:00'), r.time(2013, 1, 1, '+00:00'), :index =&gt; 'date')\n    .order_by(:index =&gt; 'date').run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"skip\">skip</a></li> <li><a href=\"limit\">limit</a></li> <li><a href=\"slice\">[]</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/transformations/order_by.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/order_by\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/order_by</a>\n  </p>\n</div>\n","slice":"<h1 class=\"title\">ReQL command: slice, []</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">selection.slice(start_offset[, end_offset, :left_bound =&gt; 'closed', :right_bound =&gt;'open']) → selection\nstream.slice(start_offset[, end_offset, :left_bound =&gt; 'closed', :right_bound =&gt;'open']) → stream\narray.slice(start_offset[, end_offset, :left_bound =&gt; 'closed', :right_bound =&gt;'open']) → array\nbinary.slice(start_offset[, end_offset, :left_bound =&gt; 'closed', :right_bound =&gt;'open']) → binary\nstring.slice(start_offset[, end_offset, :left_bound =&gt; 'closed', :right_bound =&gt;'open']) → string\n</pre> <h2 id=\"description\">Description</h2> <p>Return the elements of a sequence within the specified range.</p> <p>slice returns the range between start_offset and end_offset. If only start_offset is specified, slice returns the range from that index to the end of the sequence. Specify left_bound or right_bound as open or closed to indicate whether to include that endpoint of the range by default: closed returns that endpoint, while open does not. By default, left_bound is closed and right_bound is open, so the range (10,13) will return the tenth, eleventh and twelfth elements in the sequence.</p> <p>If end_offset is past the end of the sequence, all elements from start_offset to the end of the sequence will be returned. If start_offset is past the end of the sequence or end_offset is less than start_offset, a zero-element sequence will be returned.</p> <p>Negative start_offset and end_offset values are allowed with arrays; in that case, the returned range counts back from the array’s end. That is, the range (-2) returns the last two elements, and the range of (2,-1) returns the second element through the next-to-last element of the range. An error will be raised on a negative start_offset or end_offset with non-arrays. (An end_offset of −1 <em>is</em> allowed with a stream if right_bound is closed; this behaves as if no end_offset was specified.)</p> <p>If slice is used with a <a href=\"binary\">binary</a> object, the indexes refer to byte positions within the object. That is, the range (10,20) will refer to the 10th byte through the 19th byte.</p> <p>«««&lt; HEAD With a string, slice behaves similarly, with the indexes referring to Unicode codepoints. String indexes start at 0. (Note that <a href=\"https://en.wikipedia.org/wiki/Combining_character\">combining codepoints</a> are counted separately.)</p> <h2 id=\"if-you-are-only-specifying-the-indexes-and-not-the-bounding-options-you-may-use-rubys-range-operator-as-a-shorthand-startindexendindex-note-that-when-you-use-this-shorthand-rightbound-will-be-closed-and-thus-include-endindex\">If you are only specifying the indexes and not the bounding options, you may use Ruby’s range operator as a shorthand: [start_index..end_index]. Note that when you use this shorthand right_bound will be closed and thus include end_index.</h2> <p>If you are only specifying the indexes and not the bounding options, you may use Ruby’s range operator as a shorthand: [start_offset..end_offset]. Note that when you use this shorthand right_bound will be closed and thus include end_offset. »»»&gt; master</p> <p><strong>Example:</strong> Return the fourth, fifth and sixth youngest players. (The youngest player is at index 0, so those are elements 3–5.)</p> <pre data-language=\"ruby\">r.table('players').order_by(:index =&gt; 'age').slice(3,6).run(conn)\n</pre>  <p>Or, using Ruby’s range operator:</p> <pre data-language=\"ruby\">r.table('players').filter({'class': 'amateur'})[10..19].run(conn)\n</pre>  <p><strong>Example:</strong> Return all but the top three players who have a red flag.</p> <pre data-language=\"ruby\">r.table('players').filter(:flag =&gt; 'red'}).order_by(:index =&gt; r.desc('score')).slice(3).run(conn)\n</pre>  <p><strong>Example:</strong> Return holders of tickets X through Y, assuming tickets are numbered sequentially. We want to include ticket Y.</p> <pre data-language=\"ruby\">r.table('users').order_by(:index =&gt; 'ticket').slice(x, y, :right_bound =&gt; 'closed').run(conn)\n</pre>  <p><strong>Example:</strong> Return the elements of an array from the second through two from the end (that is, not including the last two).</p> <pre data-language=\"ruby\">&gt; r.expr([0,1,2,3,4,5]).slice(2,-2).run(conn)\n[2,3]\n</pre>  <p><strong>Example:</strong> Return the third through fifth characters of a string.</p> <pre data-language=\"ruby\">&gt; r.expr(\"rutabaga\").slice(2,5).run(conn)\n\"tab\"\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"order_by\">order_by</a></li> <li><a href=\"skip\">skip</a></li> <li><a href=\"limit\">limit</a></li> <li><a href=\"nth\">nth, []</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/transformations/slice.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/slice\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/slice</a>\n  </p>\n</div>\n","offsets_of":"<h1 class=\"title\">ReQL command: offsets_of</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.offsets_of(datum | predicate_function) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</p> <p><strong>Example:</strong> Find the position of the letter ‘c’.</p> <pre data-language=\"ruby\">r.expr(['a','b','c']).offsets_of('c').run(conn)\n</pre>  <p><strong>Example:</strong> Find the popularity ranking of invisible heroes.</p> <pre data-language=\"ruby\">r.table('marvel').union(r.table('dc')).order_by(:popularity).offsets_of{\n    |row| row[:superpowers].contains('invisibility')\n}.run(conn)\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/transformations/offsets_of.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/offsets_of\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/offsets_of</a>\n  </p>\n</div>\n","is_empty":"<h1 class=\"title\">ReQL command: is_empty</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.is_empty() → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Test if a sequence is empty.</p> <p><strong>Example:</strong> Are there any documents in the marvel table?</p> <pre data-language=\"ruby\">r.table('marvel').is_empty().run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"offsets_of\">offsets_of</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/transformations/is_empty.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/is_empty\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/is_empty</a>\n  </p>\n</div>\n","union":"<h1 class=\"title\">ReQL command: union</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">stream.union(sequence[, sequence, ...][, :interleave =&gt; true]) → stream\narray.union(sequence[, sequence, ...][, :interleave =&gt; true]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Merge two or more sequences.</p> <p>The optional interleave argument controls how the sequences will be merged:</p> <ul> <li>true: results will be mixed together; this is the fastest setting, but ordering of elements is not guaranteed. (This is the default.)</li> <li>false: input sequences will be appended to one another, left to right.</li> <li>\"field_name\": a string will be taken as the name of a field to perform a merge-sort on. The input sequences must be ordered <em>before</em> being passed to union.</li> </ul> <p><strong>Example:</strong> Construct a stream of all heroes.</p> <pre data-language=\"ruby\">r.table('marvel').union(r.table('dc')).run(conn)\n</pre>  <p><strong>Example:</strong> Combine four arrays into one.</p> <pre data-language=\"ruby\">r.expr([1, 2]).union([3, 4], [5, 6], [7, 8, 9]).run(conn)\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n</pre>  <p><strong>Example:</strong> Create a <a href=\"https://rethinkdb.com/docs/changefeeds/ruby\">changefeed</a> from the first example.</p> <pre data-language=\"ruby\">r.table('marvel').union(r.table('dc')).changes.run(conn)\n</pre>  <p>Now, when any heroes are added, modified or deleted from either table, a change notification will be sent out.</p> <p><strong>Example:</strong> Merge-sort the tables of heroes, ordered by name.</p> <pre data-language=\"ruby\">r.table('marvel').order_by('name').union(\n    r.table('dc').order_by('name'), :interleave =&gt; 'name'\n).run(conn)\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/transformations/union.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/union\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/union</a>\n  </p>\n</div>\n","sample":"<h1 class=\"title\">ReQL command: sample</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.sample(number) → selection\nstream.sample(number) → array\narray.sample(number) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Select a given number of elements from a sequence with uniform random distribution. Selection is done without replacement.</p> <p>If the sequence has less than the requested number of elements (i.e., calling sample(10) on a sequence with only five elements), sample will return the entire sequence in a random order.</p> <p><strong>Example:</strong> Select 3 random heroes.</p> <pre data-language=\"ruby\">r.table('marvel').sample(3).run(conn)\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/transformations/sample.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/sample\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/sample</a>\n  </p>\n</div>\n","ungroup":"<h1 class=\"title\">ReQL command: ungroup</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">grouped_stream.ungroup() → array\ngrouped_data.ungroup() → array\n</pre> <h2 id=\"description\">Description</h2> <p>Takes a grouped stream or grouped data and turns it into an array of objects representing the groups. Any commands chained after ungroup will operate on this array, rather than operating on each group individually. This is useful if you want to e.g. order the groups by the value of their reduction.</p> <p>The format of the array returned by ungroup is the same as the default native format of grouped data in the JavaScript driver and data explorer.</p> <p>Suppose that the table games has the following data:</p> <pre data-language=\"ruby\">[\n    {\"id\" =&gt; 2, \"player\" =&gt; \"Bob\", \"points\" =&gt; 15, \"type\" =&gt; \"ranked\"},\n    {\"id\" =&gt; 5, \"player\" =&gt; \"Alice\", \"points\" =&gt; 7, \"type\" =&gt; \"free\"},\n    {\"id\" =&gt; 11, \"player\" =&gt; \"Bob\", \"points\" =&gt; 10, \"type\" =&gt; \"free\"},\n    {\"id\" =&gt; 12, \"player\" =&gt; \"Alice\", \"points\" =&gt; 2, \"type\" =&gt; \"free\"}\n]\n</pre>  <p><strong>Example:</strong> What is the maximum number of points scored by each player, with the highest scorers first?</p> <pre data-language=\"ruby\">r.table('games')\n   .group('player').max('points')['points']\n   .ungroup().order_by(r.desc('reduction')).run(conn)\n</pre>   <p>Result:</p> <pre data-language=\"ruby\">[\n    {\n        \"group\" =&gt; \"Bob\",\n        \"reduction\" =&gt; 15\n    },\n    {\n        \"group\" =&gt; \"Alice\",\n        \"reduction\" =&gt; 7\n    }\n]\n</pre>  <p><strong>Example:</strong> Select one random player and all their games.</p> <pre data-language=\"ruby\">r.table('games').group('player').ungroup().sample(1).run(conn)\n</pre>  <p>Result:</p> <pre data-language=\"ruby\">[\n    {\n        \"group\" =&gt; \"Bob\",\n        \"reduction\" =&gt; [\n            {\"id\" =&gt; 2, \"player\" =&gt; \"Bob\", \"points\" =&gt; 15, \"type\" =&gt; \"ranked\"},\n            {\"id\" =&gt; 11, \"player\" =&gt; \"Bob\", \"points\" =&gt; 10, \"type\" =&gt; \"free\"}\n        ]\n    }\n]\n</pre>  <p>Note that if you didn’t call ungroup, you would instead select one random game from each player:</p> <pre data-language=\"ruby\">r.table('games').group('player').sample(1).run(conn)\n</pre>  <p>Result:</p> <pre data-language=\"ruby\">{\n    \"Alice\" =&gt; [\n        {\"id\" =&gt; 5, \"player\" =&gt; \"Alice\", \"points\" =&gt; 7, \"type\" =&gt; \"free\"}\n    ],\n    \"Bob\" =&gt; [\n        {\"id\" =&gt; 11, \"player\" =&gt; \"Bob\", \"points\" =&gt; 10, \"type\" =&gt; \"free\"}\n    ]\n}\n</pre>  <p><strong>Example:</strong> Finding the arithmetic mode of an array of values:</p> <pre data-language=\"ruby\">r.expr([1,2,2,2,3,3]).group(){|row| row}.count().ungroup().order_by('reduction').nth(-1)['group'].run(conn)\n</pre>  <p>Result:</p> <pre data-language=\"ruby\">2\n</pre>  <p><strong>Example:</strong> Types!</p> <pre data-language=\"ruby\">r.table('games').group('player').type_of().run(conn) # Returns \"GROUPED_STREAM\"\nr.table('games').group('player').ungroup().type_of().run(conn) # Returns \"ARRAY\"\nr.table('games').group('player').avg('points').run(conn) # Returns \"GROUPED_DATA\"\nr.table('games').group('player').avg('points').ungroup().run(conn) #Returns \"ARRAY\"\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"group\">group</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/aggregation/ungroup.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/ungroup\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/ungroup</a>\n  </p>\n</div>\n","reduce":"<h1 class=\"title\">ReQL command: reduce</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.reduce(function) → value\n</pre> <h2 id=\"description\">Description</h2> <p>Produce a single value from a sequence through repeated application of a reduction function.</p> <p>The reduction function can be called on:</p> <ul> <li>two elements of the sequence</li> <li>one element of the sequence and one result of a previous reduction</li> <li>two results of previous reductions</li> </ul> <p>The reduction function can be called on the results of two previous reductions because the reduce command is distributed and parallelized across shards and CPU cores. A common mistaken when using the reduce command is to suppose that the reduction is executed from left to right. Read the <a href=\"https://rethinkdb.com/docs/map-reduce/\">map-reduce in RethinkDB</a> article to see an example.</p> <p>If the sequence is empty, the server will produce a ReqlRuntimeError that can be caught with default.<br> If the sequence has only one element, the first element will be returned.</p> <p><strong>Example:</strong> Return the numbers of documents in the table posts.</p> <pre data-language=\"ruby\">r.table(\"posts\").map{|doc| 1 }\n    .reduce{ |left, right| left+right }\n    .default(0).run(conn)\n</pre>  <p>A shorter way to execute this query is to use <a href=\"count\">count</a>.</p> <p><strong>Example:</strong> Suppose that each post has a field comments that is an array of comments.<br> Return the number of comments for all posts.</p> <pre data-language=\"ruby\">r.table(\"posts\").map{|doc|\n    doc[\"comments\"].count()\n}.reduce{ |left, right|\n    left+right\n}.default(0).run(conn)\n</pre>  <p><strong>Example:</strong> Suppose that each post has a field comments that is an array of comments.<br> Return the maximum number comments per post.</p> <pre data-language=\"ruby\">r.table(\"posts\").map{|doc|\n    doc[\"comments\"].count()\n}.reduce{ |left, right|\n    r.branch(\n        left &gt; right,\n        left,\n        right\n    )\n}.default(0).run(conn)\n</pre>  <p>A shorter way to execute this query is to use <a href=\"max\">max</a>.</p>  <h2>Related commands</h2> <ul> <li><a href=\"group\">group</a></li> <li><a href=\"map\">map</a></li> <li><a href=\"concat_map\">concat_map</a></li> <li><a href=\"sum\">sum</a></li> <li><a href=\"avg\">avg</a></li> <li><a href=\"min\">min</a></li> <li><a href=\"max\">max</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/aggregation/reduce.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/reduce\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/reduce</a>\n  </p>\n</div>\n","count":"<h1 class=\"title\">ReQL command: count</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.count([value | predicate_function]) → number\nbinary.count() → number\nstring.count() → number\nobject.count() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</p> <p>When count is called on a sequence with a predicate value or function, it returns the number of elements in the sequence equal to that value or where the function returns true. On a <a href=\"binary\">binary</a> object, count returns the size of the object in bytes; on strings, count returns the string’s length. This is determined by counting the number of Unicode codepoints in the string, counting combining codepoints separately.</p> <p><strong>Example:</strong> Count the number of users.</p> <pre data-language=\"ruby\">r.table('users').count().run(conn)\n</pre>  <p><strong>Example:</strong> Count the number of 18 year old users.</p> <pre data-language=\"ruby\">r.table('users')['age'].count(18).run(conn)\n</pre>  <p><strong>Example:</strong> Count the number of users over 18.</p> <pre data-language=\"ruby\">r.table('users')['age'].count{ |age| age &gt; 18 }.run(conn)\n</pre>  <p>Alternatively: rb\nr.table('users').count{ |user| user['age'] &gt; 18 }.run(conn)\n</p> <p><strong>Example:</strong> Return the length of a Unicode string.</p> <pre data-language=\"ruby\">&gt; r.expr(\"こんにちは\").count().run(conn)\n5\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"map\">map</a></li> <li><a href=\"reduce\">reduce</a></li> <li><a href=\"sum\">sum</a></li> <li><a href=\"avg\">avg</a></li> <li><a href=\"min\">min</a></li> <li><a href=\"max\">max</a></li> <li><a href=\"group\">group</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/aggregation/count.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/count\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/count</a>\n  </p>\n</div>\n","avg":"<h1 class=\"title\">ReQL command: avg</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.avg([field | function]) → number\n</pre> <h2 id=\"description\">Description</h2> <p>Averages all the elements of a sequence. If called with a field name, averages all the values of that field in the sequence, skipping elements of the sequence that lack that field. If called with a function, calls that function on every element of the sequence and averages the results, skipping elements of the sequence where that function returns nil or a non-existence error.</p> <p>Produces a non-existence error when called on an empty sequence. You can handle this case with default.</p> <p><strong>Example:</strong> What’s the average of 3, 5, and 7?</p> <pre data-language=\"ruby\">r([3, 5, 7]).avg().run(conn)\n</pre>  <p><strong>Example:</strong> What’s the average number of points scored in a game?</p> <pre data-language=\"ruby\">r.table('games').avg('points').run(conn)\n</pre>  <p><strong>Example:</strong> What’s the average number of points scored in a game, counting bonus points?</p> <pre data-language=\"ruby\">r.table('games').avg{|game| game['points'] + game['bonus_points']}.run(conn)\n</pre>  <p><strong>Example:</strong> What’s the average number of points scored in a game? (But return nil instead of raising an error if there are no games where points have been scored.)</p> <pre data-language=\"ruby\">r.table('games').avg('points').default(nil).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"map\">map</a></li> <li><a href=\"reduce\">reduce</a></li> <li><a href=\"count\">count</a></li> <li><a href=\"sum\">sum</a></li> <li><a href=\"min\">min</a></li> <li><a href=\"max\">max</a></li> <li><a href=\"group\">group</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/aggregation/avg.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/avg\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/avg</a>\n  </p>\n</div>\n","fold":"<h1 class=\"title\">ReQL command: fold</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.fold(base, function) → value\nsequence.fold(base, function, :emit =&gt; function[, :final_emit =&gt; function]) → sequence\n</pre> <h2 id=\"description\">Description</h2> <p>Apply a function to a sequence in order, maintaining state via an accumulator. The fold command returns either a single value or a new sequence.</p> <p>In its first form, fold operates like <a href=\"reduce\">reduce</a>, returning a value by applying a combining function to each element in a sequence. The combining function takes two parameters: the previous reduction result (the accumulator) and the current element. However, fold has the following differences from reduce:</p> <ul> <li>it is guaranteed to proceed through the sequence from first element to last.</li> <li>it passes an initial base value to the function with the first element in place of the previous reduction result.</li> </ul> <pre class=\"command-syntax\" data-language=\"ruby\">combining_function(accumulator | base, element) → new_accumulator\n</pre> <p>In its second form, fold operates like <a href=\"concat_map\">concat_map</a>, returning a new sequence rather than a single value. When an emit function is provided, fold will:</p> <ul> <li>proceed through the sequence in order and take an initial base value, as above.</li> <li>for each element in the sequence, call both the combining function and a separate emitting function. The emitting function takes three parameters: the previous reduction result (the accumulator), the current element, and the output from the combining function (the new value of the accumulator).</li> </ul> <p>If provided, the emitting function must return a list.</p> <pre class=\"command-syntax\" data-language=\"ruby\">emit(previous_accumulator, element, accumulator) → array\n</pre> <p>A finalEmit function may also be provided, which will be called at the end of the sequence. It takes a single parameter: the result of the last reduction through the iteration (the accumulator), or the original base value if the input sequence was empty. This function must return a list, which will be appended to fold’s output stream.</p> <pre class=\"command-syntax\" data-language=\"ruby\">final_emit(accumulator | base) → array\n</pre> <p><strong>Example:</strong> Concatenate words from a list.</p> <pre data-language=\"ruby\">r.table('words').order_by('id').fold('',\n    lambda { |acc, word| acc + r.branch(acc == '', '', ', ') + word }\n).run(conn)\n</pre>  <p>(This example could be implemented with reduce, but fold will preserve the order when words is a RethinkDB table or other stream, which is not guaranteed with reduce.)</p> <p><strong>Example:</strong> Return every other row in a table.</p> <pre data-language=\"ruby\">r.table('even_things').fold(0,\n    lambda { |acc, row| acc + 1 },\n    :emit =&gt; lambda { |acc, row| r.branch((acc % 2 == 0), [row], []) }\n).run(conn)\n</pre>  <p>The first function increments the accumulator each time it’s called, starting at 0; the second function, the emitting function, alternates between returning a single-item list containing the current row or an empty list. The fold command will return a concatenated list of each emitted value.</p> <p><strong>Example:</strong> Compute a five-day running average for a weight tracker.</p> <pre data-language=\"ruby\">r.table('tracker').filter({:name =&gt; 'bob'}).order_by('date')['weight'].fold(\n    [],\n    lambda { |acc, row| ([row] + acc).limit(5) },\n    :emit =&gt; lambda {\n        |acc, row, new_acc| r.branch(new_acc.size() == 5, [new_acc.avg()], [])\n    }\n).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"reduce\">reduce</a></li> <li><a href=\"concat_map\">concatMap</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/aggregation/fold.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/fold\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/fold</a>\n  </p>\n</div>\n","sum":"<h1 class=\"title\">ReQL command: sum</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.sum([field | function]) → number\n</pre> <h2 id=\"description\">Description</h2> <p>Sums all the elements of a sequence. If called with a field name, sums all the values of that field in the sequence, skipping elements of the sequence that lack that field. If called with a function, calls that function on every element of the sequence and sums the results, skipping elements of the sequence where that function returns nil or a non-existence error.</p> <p>Returns 0 when called on an empty sequence.</p> <p><strong>Example:</strong> What’s 3 + 5 + 7?</p> <pre data-language=\"ruby\">r([3, 5, 7]).sum().run(conn)\n</pre>  <p><strong>Example:</strong> How many points have been scored across all games?</p> <pre data-language=\"ruby\">r.table('games').sum('points').run(conn)\n</pre>  <p><strong>Example:</strong> How many points have been scored across all games, counting bonus points?</p> <pre data-language=\"ruby\">r.table('games').sum{|game| game['points'] + game['bonus_points']}.run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"map\">map</a></li> <li><a href=\"reduce\">reduce</a></li> <li><a href=\"count\">count</a></li> <li><a href=\"avg\">avg</a></li> <li><a href=\"min\">min</a></li> <li><a href=\"max\">max</a></li> <li><a href=\"group\">group</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/aggregation/sum.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/sum\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/sum</a>\n  </p>\n</div>\n","group":"<h1 class=\"title\">ReQL command: group</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.group(field | function..., [:index =&gt; &lt;indexname&gt;, :multi =&gt; true]) → grouped_stream\n</pre> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/group.png\" class=\"api_command_illustration\"></p> <h2 id=\"description\">Description</h2> <p>Takes a stream and partitions it into multiple groups based on the fields or functions provided.</p> <p>With the multi flag single documents can be assigned to multiple groups, similar to the behavior of <a href=\"https://rethinkdb.com/docs/secondary-indexes/ruby\">multi-indexes</a>. When multi is true and the grouping value is an array, documents will be placed in each group that corresponds to the elements of the array. If the array is empty the row will be ignored.</p> <p>Suppose that the table games has the following data:</p> <pre data-language=\"ruby\">[\n    {\"id\" =&gt; 2, \"player\" =&gt; \"Bob\", \"points\" =&gt; 15, \"type\" =&gt; \"ranked\"},\n    {\"id\" =&gt; 5, \"player\" =&gt; \"Alice\", \"points\" =&gt; 7, \"type\" =&gt; \"free\"},\n    {\"id\" =&gt; 11, \"player\" =&gt; \"Bob\", \"points\" =&gt; 10, \"type\" =&gt; \"free\"},\n    {\"id\" =&gt; 12, \"player\" =&gt; \"Alice\", \"points\" =&gt; 2, \"type\" =&gt; \"free\"}\n]\n</pre>  <p><strong>Example:</strong> Group games by player.</p> <pre data-language=\"ruby\">&gt; r.table('games').group('player').run(conn)\n\n{\n    \"Alice\" =&gt; [\n        {\"id\" =&gt; 5, \"player\" =&gt; \"Alice\", \"points\" =&gt; 7, \"type\" =&gt; \"free\"},\n        {\"id\" =&gt; 12, \"player\" =&gt; \"Alice\", \"points\" =&gt; 2, \"type\" =&gt; \"free\"}\n    ],\n    \"Bob\" =&gt; [\n        {\"id\" =&gt; 2, \"player\" =&gt; \"Bob\", \"points\" =&gt; 15, \"type\" =&gt; \"ranked\"},\n        {\"id\" =&gt; 11, \"player\" =&gt; \"Bob\", \"points\" =&gt; 10, \"type\" =&gt; \"free\"}\n    ]\n}\n</pre>   <p>Commands chained after group will be called on each of these grouped sub-streams, producing grouped data.</p> <p><strong>Example:</strong> What is each player’s best game?</p> <pre data-language=\"ruby\">&gt; r.table('games').group('player').max('points').run(conn)\n\n{\n    \"Alice\" =&gt; {\"id\" =&gt; 5, \"player\" =&gt; \"Alice\", \"points\" =&gt; 7, \"type\" =&gt; \"free\"},\n    \"Bob\" =&gt; {\"id\" =&gt; 2, \"player\" =&gt; \"Bob\", \"points\" =&gt; 15, \"type\" =&gt; \"ranked\"}\n}\n</pre>  <p>Commands chained onto grouped data will operate on each grouped datum, producing more grouped data.</p> <p><strong>Example:</strong> What is the maximum number of points scored by each player?</p> <pre data-language=\"ruby\">&gt; r.table('games').group('player').max('points')['points'].run(conn)\n\n{\n    \"Alice\" =&gt; 7,\n    \"Bob\" =&gt; 15\n}\n</pre>  <p>You can also group by more than one field.</p> <p><strong>Example:</strong> What is the maximum number of points scored by each player for each game type?</p> <pre data-language=\"ruby\">&gt; r.table('games').group('player', 'type').max('points')['points'].run(conn)\n\n{\n    [\"Alice\", \"free\"] =&gt; 7,\n    [\"Bob\", \"free\"] =&gt; 10,\n    [\"Bob\", \"ranked\"] =&gt; 15,\n    ...\n}\n</pre>  <p>You can also group by a function.</p> <p><strong>Example:</strong> What is the maximum number of points scored by each player for each game type?</p> <pre data-language=\"ruby\">&gt; r.table('games')\n    .group{|game| game.pluck('player', 'type')}\n    .max('points')['points'].run(conn)\n\n{\n    {\"player\" =&gt; \"Alice\", \"type\" =&gt; \"free\"} =&gt; 7,\n    {\"player\" =&gt; \"Bob\", \"type\" =&gt; \"free\"} =&gt; 10,\n    {\"player\" =&gt; \"Bob\", \"type\" =&gt; \"ranked\"} =&gt; 15\n}\n</pre>  <p>Using a function, you can also group by date on a ReQL <a href=\"https://rethinkdb.com/docs/dates-and-times/javascript/\">date field</a>.</p> <p><strong>Example:</strong> How many matches have been played this year by month?</p> <pre data-language=\"ruby\">&gt; r.table('matches').group { |match|\n      [match['date'].year(), match['date'].month()]\n  }.count().run(conn)\n\n{\n    [2014, 2] =&gt; 2,\n    [2014, 3] =&gt; 2,\n    [2014, 4] =&gt; 1,\n    [2014, 5] =&gt; 3\n}\n</pre>  <p>You can also group on an index (primary key or secondary).</p> <p><strong>Example:</strong> What is the maximum number of points scored by game type?</p> <pre data-language=\"ruby\">&gt; r.table('games').group(:index =&gt; 'type').max('points')['points'].run(conn)\n\n{\n    \"free\" =&gt; 10,\n    \"ranked\" =&gt; 15\n}\n</pre>  <h2 id=\"organizing-by-value-with-multi\">Organizing by value with <strong>multi</strong>\n</h2> <p>Suppose that the table games2 has the following data:</p> <pre data-language=\"ruby\">[\n    { :id =&gt; 1, :matches =&gt; {:a =&gt; [1, 2, 3], :b =&gt; [4, 5, 6]} },\n    { :id =&gt; 2, :matches =&gt; {:b =&gt; [100], :c =&gt; [7, 8, 9]} },\n    { :id =&gt; 3, :matches =&gt; {:a =&gt; [10, 20], :c =&gt; [70, 80]} }\n]\n</pre>  <p>Using the multi option we can group data by match A, B or C.</p> <pre data-language=\"ruby\">&gt; r.table('games2').group(:multi =&gt; true){ |row| row['matches'].keys() }.run\n\n[\n    {\n        :group =&gt; 'a',\n        :reduction =&gt; [ &lt;id 1&gt;, &lt;id 3&gt; ]\n    },\n    {\n        :group =&gt; 'b',\n        :reduction =&gt; [ &lt;id 1&gt;, &lt;id 2&gt; ]\n    },\n    {\n        :group =&gt; 'c',\n        :reduction =&gt; [ &lt;id 2&gt;, &lt;id 3&gt; ]\n    }\n]\n</pre>  <p>(The full result set is abbreviated in the figure; &lt;id 1&gt;, &lt;id 2&gt; and &lt;id 3&gt; would be the entire documents matching those keys.)</p> <p><strong>Example:</strong> Use <a href=\"map\">map</a> and <a href=\"sum\">sum</a> to get the total points scored for each match.</p> <pre data-language=\"ruby\">r.table('games3').group(:multi =&gt; true){ |row| row['matches'].keys()\n}.ungroup().map{ |doc|\n    {\n        :match =&gt; doc['group'], :total =&gt; doc['reduction'].sum{ |set|\n            set['matches'][doc['group']].sum()\n        }\n    }\n}.run(conn)\n\n[\n    { 'match': 'a', 'total': 36 },\n    { 'match': 'b', 'total': 115 },\n    { 'match': 'c', 'total': 174 }\n]\n</pre>  <p>The inner sum adds the scores by match within each document; the outer sum adds those results together for a total across all the documents.</p> <h2 id=\"ungrouping\">Ungrouping</h2> <p>If you want to operate on all the groups rather than operating on each group (e.g. if you want to order the groups by their reduction), you can use <a href=\"ungroup\">ungroup</a> to turn a grouped stream or grouped data into an array of objects representing the groups.</p> <p><strong>Example:</strong> Ungrouping grouped data.</p> <pre data-language=\"ruby\">&gt; r.table('games').group('player').max('points')['points'].ungroup().run(conn)\n\n[\n    {\n        \"group\" =&gt; \"Alice\",\n        \"reduction\" =&gt; 7\n    },\n    {\n        \"group\" =&gt; \"Bob\",\n        \"reduction\" =&gt; 15\n    }\n]\n</pre>  <p>Ungrouping is useful e.g. for ordering grouped data, or for inserting grouped data into a table.</p> <p><strong>Example:</strong> What is the maximum number of points scored by each player, with the highest scorers first?</p> <pre data-language=\"ruby\">&gt; r.table('games')\n   .group('player').max('points')['points']\n   .ungroup().order_by(r.desc('reduction')).run(conn)\n\n[\n    {\n        \"group\" =&gt; \"Bob\",\n        \"reduction\" =&gt; 15\n    },\n    {\n        \"group\" =&gt; \"Alice\",\n        \"reduction\" =&gt; 7\n    }\n]\n</pre>  <h2 id=\"implementation-details\">Implementation Details</h2> <p>When grouped data are returned to the client, they are transformed into a client-specific native type. (Something similar is done with <a href=\"https://rethinkdb.com/docs/dates-and-times/\">times</a>.) In Ruby, grouped data are transformed into a Hash. If you instead want to receive the raw pseudotype from the server (e.g. if you’re planning to serialize the result as JSON), you can specify group_format: 'raw' as an optional argument to run:</p> <p><strong>Example:</strong> Get back the raw GROUPED_DATA pseudotype.</p> <pre data-language=\"ruby\">&gt; r.table('games').group('player').avg('points').run(conn, group_format:'raw')\n\n{\n    \"$reql_type$\" =&gt; \"GROUPED_DATA\",\n    \"data\" =&gt; [\n        [\"Alice\", 4.5],\n        [\"Bob\", 12.5]\n    ]\n}\n</pre>  <p>Not passing the group_format flag would return:</p> <pre data-language=\"ruby\">{\n    \"Alice\" =&gt; 4.5,\n    \"Bob\" =&gt; 12.5\n}\n</pre>  <p>You might also want to use the <a href=\"ungroup\">ungroup</a> command (see above), which will turn the grouped data into an array of objects on the server.</p> <h2 id=\"performance-details\">Performance Details</h2> <p>If you run a query that returns a grouped stream, it will be automatically converted to grouped data before being sent back to you (there is currently no efficient way to stream groups from RethinkDB). This grouped data is subject to the array size limit, by default 100,000 elements (see <a href=\"run\">run</a> for details on how to use the array_limit option to change this).</p> <p>In general, operations on grouped streams will be efficiently distributed, and operations on grouped data won’t be. You can figure out what you’re working with by putting type_of on the end of your query. Below are efficient and inefficient examples.</p> <p><strong>Example:</strong> Efficient operation.</p> <pre data-language=\"ruby\"># r.table('games').group('player').type_of().run(conn)\n# Returns \"GROUPED_STREAM\"\nr.table('games').group('player').min('points').run(conn) # EFFICIENT\n</pre>  <p><strong>Example:</strong> Inefficient operation.</p> <pre data-language=\"ruby\"># r.table('games').group('player').order_by('score').type_of().run(conn)\n# Returns \"GROUPED_DATA\"\nr.table('games').group('player').order_by('score').nth(0).run(conn) # INEFFICIENT\n</pre>  <p>What does it mean to be inefficient here? When operating on grouped data rather than a grouped stream, <em>all</em> of the data has to be available on the node processing the query. This means that the operation will only use one server’s resources, and will require memory proportional to the size of the grouped data it’s operating on. (In the case of the <a href=\"order_by\">order_by</a> in the inefficient example, that means memory proportional <strong>to the size of the table</strong>.) The array limit is also enforced for grouped data, so the order_by example would fail for tables with more than 100,000 rows without changing the array_limit option to run.</p> <h2 id=\"more-examples\">More Examples</h2> <p><strong>Example:</strong> What is the maximum number of points scored by each player in free games?</p> <pre data-language=\"ruby\">&gt; r.table('games').filter{|game| game['type'].eq('free')}\n   .group('player').max('points')['points'].run(conn)\n\n{\n    \"Alice\" =&gt; 7,\n    \"Bob\" =&gt; 10\n}\n</pre>  <p><strong>Example:</strong> What is each player’s highest even and odd score?</p> <pre data-language=\"ruby\">&gt; r.table('games')\n   .group('name', lambda {|game| game['points'] % 2})\n   .max('points')['points'].run(conn)\n\n{\n    [\"Alice\", 1] =&gt; 7,\n    [\"Bob\", 0] =&gt; 10,\n    [\"Bob\", 1] =&gt; 15\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"ungroup\">ungroup</a></li> <li><a href=\"map\">map</a></li> <li><a href=\"reduce\">reduce</a></li> <li><a href=\"count\">count</a></li> <li><a href=\"sum\">sum</a></li> <li><a href=\"avg\">avg</a></li> <li><a href=\"min\">min</a></li> <li><a href=\"max\">max</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/aggregation/group.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/group\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/group</a>\n  </p>\n</div>\n","min":"<h1 class=\"title\">ReQL command: min</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.min(field | function) → element\nsequence.min({:index =&gt; &lt;indexname&gt;}) → element\n</pre> <h2 id=\"description\">Description</h2> <p>Finds the minimum element of a sequence.</p> <p>The min command can be called with:</p> <ul> <li>a <strong>field name</strong>, to return the element of the sequence with the smallest value in that field;</li> <li>an <strong>index</strong> (the primary key or a secondary index), to return the element of the sequence with the smallest value in that index;</li> <li>a <strong>function</strong>, to apply the function to every element within the sequence and return the element which returns the smallest value from the function, ignoring any elements where the function produces a non-existence error.</li> </ul> <p>For more information on RethinkDB’s sorting order, read the section in <a href=\"https://rethinkdb.com/docs/data-types/#sorting-order\">ReQL data types</a>.</p> <p>Calling min on an empty sequence will throw a non-existence error; this can be handled using the <a href=\"default\">default</a> command.</p> <p><strong>Example:</strong> Return the minimum value in the list [3, 5, 7].</p> <pre data-language=\"ruby\">r([3, 5, 7]).min().run(conn)\n</pre>  <p><strong>Example:</strong> Return the user who has scored the fewest points.</p> <pre data-language=\"ruby\">r.table('users').min('points').run(conn)\n\n__Example:__ The same as above, but using a secondary index on the `points` field.\n\n```rb\nr.table('users').min({:index =&gt; 'points'}).run(conn)\n</pre>  <p><strong>Example:</strong> Return the user who has scored the fewest points, adding in bonus points from a separate field using a function.</p> <pre data-language=\"ruby\">r.table('users').min{|user| user['points'] + user['bonus_points']}.run(conn)\n</pre>  <p><strong>Example:</strong> Return the smallest number of points any user has ever scored. This returns the value of that points field, not a document.</p> <pre data-language=\"ruby\">r.table('users').min('points')['points'].run(conn)\n</pre>  <p><strong>Example:</strong> Return the user who has scored the fewest points, but add a default nil return value to prevent an error if no user has ever scored points.</p> <pre data-language=\"ruby\">r.table('users').min('points').default(nil).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"map\">map</a></li> <li><a href=\"reduce\">reduce</a></li> <li><a href=\"count\">count</a></li> <li><a href=\"sum\">sum</a></li> <li><a href=\"avg\">avg</a></li> <li><a href=\"max\">max</a></li> <li><a href=\"group\">group</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/aggregation/min.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/min\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/min</a>\n  </p>\n</div>\n","distinct":"<h1 class=\"title\">ReQL command: distinct</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.distinct() → array\ntable.distinct([:index =&gt; &lt;indexname&gt;]) → stream\n</pre> <h2 id=\"description\">Description</h2> <p>Removes duplicate elements from a sequence.</p> <p>The distinct command can be called on any sequence or table with an index.</p> <div class=\"infobox \">\n<p>While distinct can be called on a table without an index, the only effect will be to convert the table into a stream; the content of the stream will not be affected.</p> </div> <p><strong>Example:</strong> Which unique villains have been vanquished by Marvel heroes?</p> <pre data-language=\"ruby\">r.table('marvel').concat_map{|hero| hero[:villain_list]}.distinct.run(conn)\n</pre>  <p><strong>Example:</strong> Topics in a table of messages have a secondary index on them, and more than one message can have the same topic. What are the unique topics in the table?</p> <pre data-language=\"ruby\">r.table('messages').distinct({:index =&gt; 'topics'}).run(conn)\n</pre>  <p>The above structure is functionally identical to:</p> <pre data-language=\"ruby\">r.table('messages')['topics'].distinct().run(conn)\n</pre>  <p>However, the first form (passing the index as an argument to distinct) is faster, and won’t run into array limit issues since it’s returning a stream.</p>  <h2>Related commands</h2> <ul> <li><a href=\"map\">map</a></li> <li><a href=\"concat_map\">concat_map</a></li> <li><a href=\"group\">group</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/aggregation/distinct.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/distinct\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/distinct</a>\n  </p>\n</div>\n","contains":"<h1 class=\"title\">ReQL command: contains</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.contains([value | predicate_function, ...]) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>When called with values, returns true if a sequence contains all the specified values. When called with predicate functions, returns true if for each predicate there exists at least one element of the stream where that predicate returns true.</p> <p>Values and predicates may be mixed freely in the argument list.</p> <p><strong>Example:</strong> Has Iron Man ever fought Superman?</p> <pre data-language=\"ruby\">r.table('marvel').get('ironman')[:opponents].contains('superman').run(conn)\n</pre>  <p><strong>Example:</strong> Has Iron Man ever defeated Superman in battle?</p> <pre data-language=\"ruby\">r.table('marvel').get('ironman')[:battles].contains{|battle|\n    battle[:winner].eq('ironman') &amp; battle[:loser].eq('superman')\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Use contains with a predicate function to simulate an or. Return the Marvel superheroes who live in Detroit, Chicago or Hoboken.</p> <pre data-language=\"ruby\">r.table('marvel').filter { |hero|\n    r.expr(['Detroit', 'Chicago', 'Hoboken']).contains(hero['city'])\n}.run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"map\">map</a></li> <li><a href=\"concat_map\">concat_map</a></li> <li><a href=\"group\">group</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/aggregation/contains.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/contains\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/contains</a>\n  </p>\n</div>\n","without":"<h1 class=\"title\">ReQL command: without</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.without([selector1, selector2...]) → stream\narray.without([selector1, selector2...]) → array\nsingleSelection.without([selector1, selector2...]) → object\nobject.without([selector1, selector2...]) → object\n</pre> <h2 id=\"description\">Description</h2> <p>The opposite of pluck; takes an object or a sequence of objects, and returns them with the specified paths removed.</p> <p><strong>Example:</strong> Since we don’t need it for this computation we’ll save bandwidth and leave out the list of IronMan’s romantic conquests.</p> <pre data-language=\"ruby\">r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn)\n</pre>  <p><strong>Example:</strong> Without their prized weapons, our enemies will quickly be vanquished.</p> <pre data-language=\"ruby\">r.table('enemies').without('weapons').run(conn)\n</pre>  <p><strong>Example:</strong> Nested objects can be used to remove the damage subfield from the weapons and abilities fields.</p> <pre data-language=\"ruby\">r.table('marvel').without({:weapons =&gt; {:damage =&gt; true}, :abilities =&gt; {:damage =&gt; true}}).run(conn)\n</pre>  <p><strong>Example:</strong> The nested syntax can quickly become overly verbose so there’s a shorthand for it.</p> <pre data-language=\"ruby\">r.table('marvel').without({:weapons =&gt; :damage, :abilities =&gt; :damage}).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"pluck\">pluck</a></li> <li><a href=\"map\">map</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/without.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/without\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/without</a>\n  </p>\n</div>\n","append":"<h1 class=\"title\">ReQL command: append</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">array.append(value) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Append a value to an array.</p> <p><strong>Example:</strong> Retrieve Iron Man’s equipment list with the addition of some new boots.</p> <pre data-language=\"ruby\">r.table('marvel').get('IronMan')[:equipment].append('new_boots').run(conn)\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/append.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/append\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/append</a>\n  </p>\n</div>\n","set_insert":"<h1 class=\"title\">ReQL command: set_insert</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">array.set_insert(value) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Add a value to an array and return it as a set (an array with distinct values).</p> <p><strong>Example:</strong> Retrieve Iron Man’s equipment list with the addition of some new boots.</p> <pre data-language=\"ruby\">r.table('marvel').get('IronMan')[:equipment].set_insert('new_boots').run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"union\">union</a></li> <li><a href=\"difference\">difference</a></li> <li><a href=\"set_union\">set_union</a></li> <li><a href=\"set_intersection\">set_intersection</a></li> <li><a href=\"set_difference\">set_difference</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/set_insert.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/set_insert\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/set_insert</a>\n  </p>\n</div>\n","set_union":"<h1 class=\"title\">ReQL command: set_union</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">array.set_union(array) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Add a several values to an array and return it as a set (an array with distinct values).</p> <p><strong>Example:</strong> Retrieve Iron Man’s equipment list with the addition of some new boots and an arc reactor.</p> <pre data-language=\"ruby\">r.table('marvel').get('IronMan')[:equipment].set_union(['newBoots', 'arc_reactor']).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"union\">union</a></li> <li><a href=\"difference\">difference</a></li> <li><a href=\"set_insert\">set_insert</a></li> <li><a href=\"set_intersection\">set_intersection</a></li> <li><a href=\"set_difference\">set_difference</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/set_union.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/set_union\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/set_union</a>\n  </p>\n</div>\n","max":"<h1 class=\"title\">ReQL command: max</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.max(field | function) → element\nsequence.max({:index =&gt; &lt;indexname&gt;}) → element\n</pre> <h2 id=\"description\">Description</h2> <p>Finds the maximum element of a sequence.</p> <p>The max command can be called with:</p> <ul> <li>a <strong>field name</strong>, to return the element of the sequence with the largest value in that field;</li> <li>an <strong>index</strong> (the primary key or a secondary index), to return the element of the sequence with the largest value in that index;</li> <li>a <strong>function</strong>, to apply the function to every element within the sequence and return the element which returns the largest value from the function, ignoring any elements where the function produces a non-existence error.</li> </ul> <p>For more information on RethinkDB’s sorting order, read the section in <a href=\"https://rethinkdb.com/docs/data-types/#sorting-order\">ReQL data types</a>.</p> <p>Calling max on an empty sequence will throw a non-existence error; this can be handled using the <a href=\"default\">default</a> command.</p> <p><strong>Example:</strong> Return the maximum value in the list [3, 5, 7].</p> <pre data-language=\"ruby\">r([3, 5, 7]).max().run(conn)\n</pre>  <p><strong>Example:</strong> Return the user who has scored the most points.</p> <pre data-language=\"ruby\">r.table('users').max('points').run(conn)\n</pre>  <p><strong>Example:</strong> The same as above, but using a secondary index on the points field.</p> <pre data-language=\"ruby\">r.table('users').max({:index =&gt; 'points'}).run(conn)\n</pre>  <p><strong>Example:</strong> Return the user who has scored the most points, adding in bonus points from a separate field using a function.</p> <pre data-language=\"ruby\">r.table('users').max{|user| user['points'] + user['bonus_points']}.run(conn)\n</pre>  <p><strong>Example:</strong> Return the highest number of points any user has ever scored. This returns the value of that points field, not a document.</p> <pre data-language=\"ruby\">r.table('users').max('points')['points'].run(conn)\n</pre>  <p><strong>Example:</strong> Return the user who has scored the most points, but add a default nil return value to prevent an error if no user has ever scored points.</p> <pre data-language=\"ruby\">r.table('users').max('points').default(nil).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"map\">map</a></li> <li><a href=\"reduce\">reduce</a></li> <li><a href=\"count\">count</a></li> <li><a href=\"sum\">sum</a></li> <li><a href=\"avg\">avg</a></li> <li><a href=\"min\">min</a></li> <li><a href=\"group\">group</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/aggregation/max.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/max\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/max</a>\n  </p>\n</div>\n","merge":"<h1 class=\"title\">ReQL command: merge</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">singleSelection.merge([object | function, object | function, ...]) → object\nobject.merge([object | function, object | function, ...]) → object\nsequence.merge([object | function, object | function, ...]) → stream\narray.merge([object | function, object | function, ...]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. merge also accepts a subquery function that returns an object, which will be used similarly to a <a href=\"map\">map</a> function.</p> <p><strong>Example:</strong> Equip Thor for battle.</p> <pre data-language=\"ruby\">r.table('marvel').get('thor').merge(\n    r.table('equipment').get('hammer'),\n    r.table('equipment').get('pimento_sandwich')\n).run(conn)\n</pre>  <p><strong>Example:</strong> Equip every hero for battle, using a subquery function to retrieve their weapons.</p> <pre data-language=\"ruby\">r.table('marvel').merge{ |hero|\n    { :weapons =&gt; r.table('weapons').get(hero['weapon_id']) }\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Use merge to join each blog post with its comments.</p> <p>Note that the sequence being merged—in this example, the comments—must be coerced from a selection to an array. Without coerce_to the operation will throw an error (“Expected type DATUM but found SELECTION”).</p> <pre data-language=\"ruby\">r.table('posts').merge{ |post|\n    { :comments =&gt; r.table('comments').get_all(post['id'],\n        {:index =&gt; 'post_id'}).coerce_to('array') }\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Merge can be used recursively to modify object within objects.</p> <pre data-language=\"ruby\">r.expr({:weapons =&gt; {:spectacular_graviton_beam =&gt; {:dmg =&gt; 10, :cooldown =&gt; 20}}}).merge(\n    {:weapons =&gt; {:spectacular_graviton_beam =&gt; {:dmg =&gt; 10}}}\n).run(conn)\n</pre>  <p><strong>Example:</strong> To replace a nested object with another object you can use the literal keyword.</p> <pre data-language=\"ruby\">r.expr({:weapons =&gt; {:spectacular_graviton_beam =&gt; {:dmg =&gt; 10, :cooldown =&gt; 20}}}).merge(\n    {:weapons =&gt; r.literal({:repulsor_rays =&gt; {:dmg =&gt; 3, :cooldown =&gt; 0}})}\n).run(conn)\n</pre>  <p><strong>Example:</strong> Literal can be used to remove keys from an object as well.</p> <pre data-language=\"ruby\">r.expr({:weapons =&gt; {:spectacular_graviton_beam =&gt; {:dmg =&gt; 10, :cooldown =&gt; 20}}}).merge(\n    {:weapons =&gt; {:spectacular_graviton_beam =&gt; r.literal()}}\n).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"pluck\">pluck</a></li> <li><a href=\"without\">without</a></li> <li><a href=\"map\">map</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/merge.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/merge\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/merge</a>\n  </p>\n</div>\n","difference":"<h1 class=\"title\">ReQL command: difference</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">array.difference(array) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Remove the elements of one array from another array.</p> <p><strong>Example:</strong> Retrieve Iron Man’s equipment list without boots.</p> <pre data-language=\"ruby\">r.table('marvel').get('IronMan')[:equipment].difference(['Boots']).run(conn)\n</pre>  <p><strong>Example:</strong> Remove Iron Man’s boots from his equipment.</p> <pre data-language=\"ruby\">r.table('marvel').get('IronMan')[:equipment].update{ |doc|\n    {:equipment =&gt; doc['equipment'].difference(['Boots'])}\n}.run(conn)\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/difference.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/difference\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/difference</a>\n  </p>\n</div>\n","prepend":"<h1 class=\"title\">ReQL command: prepend</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">array.prepend(value) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Prepend a value to an array.</p> <p><strong>Example:</strong> Retrieve Iron Man’s equipment list with the addition of some new boots.</p> <pre data-language=\"ruby\">r.table('marvel').get('IronMan')[:equipment].prepend('new_boots').run(conn)\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/prepend.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/prepend\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/prepend</a>\n  </p>\n</div>\n","set_intersection":"<h1 class=\"title\">ReQL command: set_intersection</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">array.set_intersection(array) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Intersect two arrays returning values that occur in both of them as a set (an array with distinct values).</p> <p><strong>Example:</strong> Check which pieces of equipment Iron Man has from a fixed list.</p> <pre data-language=\"ruby\">r.table('marvel').get('IronMan')[:equipment].set_intersection(['newBoots', 'arc_reactor']).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"union\">union</a></li> <li><a href=\"difference\">difference</a></li> <li><a href=\"set_insert\">set_insert</a></li> <li><a href=\"set_difference\">set_difference</a></li> <li><a href=\"set_intersection\">set_intersection</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/set_intersection.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/set_intersection\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/set_intersection</a>\n  </p>\n</div>\n","set_difference":"<h1 class=\"title\">ReQL command: set_difference</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">array.set_difference(array) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Remove the elements of one array from another and return them as a set (an array with distinct values).</p> <p><strong>Example:</strong> Check which pieces of equipment Iron Man has, excluding a fixed list.</p> <pre data-language=\"ruby\">r.table('marvel').get('IronMan')[:equipment].set_difference(['newBoots', 'arc_reactor']).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"union\">union</a></li> <li><a href=\"difference\">difference</a></li> <li><a href=\"set_insert\">set_insert</a></li> <li><a href=\"set_union\">set_union</a></li> <li><a href=\"set_intersection\">set_intersection</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/set_difference.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/set_difference\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/set_difference</a>\n  </p>\n</div>\n","bracket":"<h1 class=\"title\">ReQL command: [] (bracket)</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence[attr] → sequence\nsingleSelection[attr] → value\nobject[attr] → value\narray[index] → value\n</pre> <h2 id=\"description\">Description</h2> <p>Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.</p> <p><strong>Example:</strong> What was Iron Man’s first appearance in a comic?</p> <pre data-language=\"ruby\">r.table('marvel').get('IronMan')[:first_appearance].run(conn)\n</pre>   <p>The [] command also accepts integer arguments as array offsets, like the <a href=\"nth\">nth</a> command.</p> <p><strong>Example:</strong> Get the fourth element in a sequence. (The first element is position 0, so the fourth element is position 3.)</p> <pre data-language=\"ruby\">r.expr([10, 20, 30, 40, 50])[3]\n\n40\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"nth\">nth</a></li> <li><a href=\"get_field\">get_field</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/bracket.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/bracket\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/bracket</a>\n  </p>\n</div>\n","get_field":"<h1 class=\"title\">ReQL command: get_field</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.get_field(attr) → sequence\nsingleSelection.get_field(attr) → value\nobject.get_field(attr) → value\n</pre> <h2 id=\"description\">Description</h2> <p>Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.</p> <p><strong>Example:</strong> What was Iron Man’s first appearance in a comic?</p> <pre data-language=\"ruby\">r.table('marvel').get('IronMan').get_field('first_appearance').run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"bracket\">[] (bracket)</a></li> <li><a href=\"nth\">nth</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/get_field.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/get_field\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/get_field</a>\n  </p>\n</div>\n","insert_at":"<h1 class=\"title\">ReQL command: insert_at</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">array.insert_at(offset, value) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Insert a value in to an array at a given index. Returns the modified array.</p> <p><strong>Example:</strong> Hulk decides to join the avengers.</p> <pre data-language=\"ruby\">r.expr([\"Iron Man\", \"Spider-Man\"]).insert_at(1, \"Hulk\").run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"splice_at\">splice_at</a></li> <li><a href=\"delete_at\">delete_at</a></li> <li><a href=\"change_at\">change_at</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/insert_at.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/insert_at\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/insert_at</a>\n  </p>\n</div>\n","splice_at":"<h1 class=\"title\">ReQL command: splice_at</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">array.splice_at(offset, array) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Insert several values in to an array at a given index. Returns the modified array.</p> <p><strong>Example:</strong> Hulk and Thor decide to join the avengers.</p> <pre data-language=\"ruby\">r.expr([\"Iron Man\", \"Spider-Man\"]).splice_at(1, [\"Hulk\", \"Thor\"]).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"insert_at\">insert_at</a></li> <li><a href=\"delete_at\">delete_at</a></li> <li><a href=\"change_at\">change_at</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/splice_at.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/splice_at\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/splice_at</a>\n  </p>\n</div>\n","change_at":"<h1 class=\"title\">ReQL command: change_at</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">array.change_at(offset, value) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Change a value in an array at a given index. Returns the modified array.</p> <p><strong>Example:</strong> Bruce Banner hulks out.</p> <pre data-language=\"ruby\">r.expr([\"Iron Man\", \"Bruce\", \"Spider-Man\"]).change_at(1, \"Hulk\").run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"insert_at\">insert_at</a></li> <li><a href=\"delete_at\">delete_at</a></li> <li><a href=\"splice_at\">splice_at</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/change_at.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/change_at\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/change_at</a>\n  </p>\n</div>\n","delete_at":"<h1 class=\"title\">ReQL command: delete_at</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">array.delete_at(offset [,end_offset]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Remove one or more elements from an array at a given index. Returns the modified array. (Note: delete_at operates on arrays, not documents; to delete documents, see the <a href=\"delete\">delete</a> command.)</p> <p>If only offset is specified, delete_at removes the element at that index. If both offset and end_offset are specified, delete_at removes the range of elements between offset and end_offset, inclusive of offset but not inclusive of end_offset.</p> <p>If end_offset is specified, it must not be less than offset. Both offset and end_offset must be within the array’s bounds (i.e., if the array has 10 elements, an offset or end_offset of 10 or higher is invalid).</p> <p>By using a negative offset you can delete from the end of the array. -1 is the last element in the array, -2 is the second-to-last element, and so on. You may specify a negative end_offset, although just as with a positive value, this will not be inclusive. The range (2,-1) specifies the third element through the next-to-last element.</p> <p><strong>Example:</strong> Delete the second element of an array.</p> <pre data-language=\"ruby\">&gt; r.expr(['a','b','c','d','e','f']).delete_at(1).run(conn)\n\n['a', 'c', 'd', 'e', 'f']\n</pre>  <p><strong>Example:</strong> Delete the second and third elements of an array.</p> <pre data-language=\"ruby\">&gt; r.expr(['a','b','c','d','e','f']).delete_at(1,3).run(conn)\n\n['a', 'd', 'e', 'f']\n</pre>  <p><strong>Example:</strong> Delete the next-to-last element of an array.</p> <pre data-language=\"ruby\">&gt; r.expr(['a','b','c','d','e','f']).delete_at(-2).run(conn)\n\n['a', 'b', 'c', 'd', 'f']\n</pre>  <p><strong>Example:</strong> Delete a comment on a post.</p> <p>Given a post document such as:</p> <pre data-language=\"ruby\">{\n    id: '4cf47834-b6f9-438f-9dec-74087e84eb63',\n    title: 'Post title',\n    author: 'Bob',\n    comments: [\n        { author: 'Agatha', text: 'Comment 1' },\n        { author: 'Fred', text: 'Comment 2' }\n    ]\n}\n</pre>  <p>The second comment can be deleted by using update and delete_at together.</p> <pre data-language=\"ruby\">r.table('posts').get('4cf47834-b6f9-438f-9dec-74087e84eb63').update{ |post|\n    { :comments =&gt; post['comments'].delete_at(1) }\n}.run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"insert_at\">insert_at</a></li> <li><a href=\"splice_at\">splice_at</a></li> <li><a href=\"change_at\">change_at</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/delete_at.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/delete_at\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/delete_at</a>\n  </p>\n</div>\n","keys":"<h1 class=\"title\">ReQL command: keys</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">singleSelection.keys() → array\nobject.keys() → array\n</pre> <h2 id=\"description\">Description</h2> <p>Return an array containing all of an object’s keys. Note that the keys will be sorted as described in <a href=\"https://rethinkdb.com/docs/data-types/#sorting-order\">ReQL data types</a> (for strings, lexicographically).</p> <p><strong>Example:</strong> Get all the keys from a table row.</p> <pre data-language=\"ruby\"># row: { :id =&gt; 1, :mail =&gt; \"fred@example.com\", :name =&gt; \"fred\" }\n\nr.table('users').get(1).keys().run(conn)\n\n&gt; [ \"id\", \"mail\", \"name\" ]\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"values\">values</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/keys.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/keys\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/keys</a>\n  </p>\n</div>\n","values":"<h1 class=\"title\">ReQL command: values</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">singleSelection.values() → array\nobject.values() → array\n</pre> <h2 id=\"description\">Description</h2> <p>Return an array containing all of an object’s values. values() guarantees the values will come out in the same order as <a href=\"keys\">keys</a>.</p> <p><strong>Example:</strong> Get all of the values from a table row.</p> <pre data-language=\"ruby\"># row: { :id =&gt; 1, :mail =&gt; \"fred@example.com\", :name =&gt; \"fred\" }\n\nr.table('users').get(1).values().run(conn)\n\n&gt; [ 1, \"fred@example.com\", \"fred\" ]\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"keys\">keys</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/values.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/values\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/values</a>\n  </p>\n</div>\n","literal":"<h1 class=\"title\">ReQL command: literal</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.literal(object) → special\n</pre> <h2 id=\"description\">Description</h2> <p>Replace an object in a field instead of merging it with an existing object in a merge or update operation. Using literal with no arguments in a merge or update operation will remove the corresponding field.</p> <p>Assume your users table has this structure:</p> <pre data-language=\"ruby\">[\n    {\n        :id =&gt; 1,\n        :name =&gt; \"Alice\",\n        :data =&gt; {\n            :age =&gt; 18,\n            :city =&gt; \"Dallas\"\n        }\n    }       \n    ...\n]\n</pre>  <p>Using update to modify the data field will normally merge the nested documents:</p> <pre data-language=\"ruby\">r.table('users').get(1).update({ :data =&gt; { :age =&gt; 19, :job =&gt; 'Engineer' } }).run(conn)\n\n{\n    :id =&gt; 1,\n    :name =&gt; \"Alice\",\n    :data =&gt; {\n        :age =&gt; 19,\n        :city =&gt; \"Dallas\",\n        :job =&gt; \"Engineer\"\n    }\n}       \n</pre>  <p>That will preserve city and other existing fields. But to replace the entire data document with a new object, use literal.</p> <p><strong>Example:</strong> Replace one nested document with another rather than merging the fields.</p> <pre data-language=\"ruby\">r.table('users').get(1).update({ :data =&gt; r.literal({ :age =&gt; 19, :job =&gt; 'Engineer' }) }).run(conn)\n\n{\n    :id =&gt; 1,\n    :name =&gt; \"Alice\",\n    :data =&gt; {\n        :age =&gt; 19,\n        :job =&gt; \"Engineer\"\n    }\n}       \n</pre>  <p><strong>Example:</strong> Use literal to remove a field from a document.</p> <pre data-language=\"ruby\">r.table('users').get(1).merge({:data =&gt; r.literal() }).run(conn)\n\n{\n    :id =&gt; 1,\n    :name =&gt; \"Alice\"\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"merge\">merge</a></li> <li><a href=\"filter\">filter</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/literal.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/literal\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/literal</a>\n  </p>\n</div>\n","object":"<h1 class=\"title\">ReQL command: object</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.object([key, value,]...) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Creates an object from a list of key-value pairs, where the keys must be strings. r.object(A, B, C, D) is equivalent to r.expr([[A, B], [C, D]]).coerce_to('OBJECT').</p> <p><strong>Example:</strong> Create a simple object.</p> <pre data-language=\"ruby\">&gt; r.object('id', 5, 'data', ['foo', 'bar']).run(conn)\n{data: [\"foo\", \"bar\"], id: 5}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"coerce_to\">coerce_to</a></li> <li><a href=\"merge\">merge</a></li> <li><a href=\"keys\">keys</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/document-manipulation/object.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/object\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/object</a>\n  </p>\n</div>\n","upcase":"<h1 class=\"title\">ReQL command: upcase</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">string.upcase() → string\n</pre> <h2 id=\"description\">Description</h2> <p>Uppercases a string.</p> <p><strong>Example:</strong></p> <pre data-language=\"ruby\">&gt; r.expr(\"Sentence about LaTeX.\").upcase().run(conn)\n\"SENTENCE ABOUT LATEX.\"\n</pre>  <p><strong>Note:</strong> upcase and downcase only affect ASCII characters.</p>  <h2>Related commands</h2> <ul> <li><a href=\"downcase\">downcase</a></li> <li><a href=\"match\">match</a></li> <li><a href=\"split\">split</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/string-manipulation/upcase.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/upcase\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/upcase</a>\n  </p>\n</div>\n","downcase":"<h1 class=\"title\">ReQL command: downcase</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">string.downcase() → string\n</pre> <h2 id=\"description\">Description</h2> <p>Lowercases a string.</p> <p><strong>Example:</strong></p> <pre data-language=\"ruby\">&gt; r.expr(\"Sentence about LaTeX.\").downcase().run(conn)\n\"sentence about latex.\"\n</pre>  <p><strong>Note:</strong> upcase and downcase only affect ASCII characters.</p>  <h2>Related commands</h2> <ul> <li><a href=\"upcase\">upcase</a></li> <li><a href=\"match\">match</a></li> <li><a href=\"split\">split</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/string-manipulation/downcase.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/downcase\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/downcase</a>\n  </p>\n</div>\n","match":"<h1 class=\"title\">ReQL command: match</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">string.match(regexp) → nil/object\n</pre> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/match.png\" class=\"api_command_illustration\"></p> <h2 id=\"description\">Description</h2> <p>Matches against a regular expression. If there is a match, returns an object with the fields:</p> <ul> <li>str: The matched string</li> <li>start: The matched string’s start</li> <li>end: The matched string’s end</li> <li>groups: The capture groups defined with parentheses</li> </ul> <p>If no match is found, returns nil.</p>  <p>Accepts <a href=\"https://github.com/google/re2/wiki/Syntax\">RE2 syntax</a>. You can enable case-insensitive matching by prefixing the regular expression with (?i). See the linked RE2 documentation for more flags.</p> <p>The match command does not support backreferences.</p> <p><strong>Example:</strong> Get all users whose name starts with “A”. Because nil evaluates to false in <a href=\"filter\">filter</a>, you can just use the result of match for the predicate.</p> <pre data-language=\"ruby\">r.table('users').filter{ |doc|\n    doc['name'].match(\"^A\")\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Get all users whose name ends with “n”.</p> <pre data-language=\"ruby\">r.table('users').filter{ |doc|\n    doc['name'].match(\"n$\")\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Get all users whose name has “li” in it</p> <pre data-language=\"ruby\">r.table('users').filter{ |doc|\n    doc['name'].match(\"li\")\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Get all users whose name is “John” with a case-insensitive search.</p> <pre data-language=\"ruby\">r.table('users').filter{ |doc|\n    doc['name'].match(\"(?i)^john$\")\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Get all users whose name is composed of only characters between “a” and “z”.</p> <pre data-language=\"ruby\">r.table('users').filter{ |doc|\n    doc['name'].match(\"(?i)^[a-z]+$\")\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Get all users where the zipcode is a string of 5 digits.</p> <pre data-language=\"ruby\">r.table('users').filter{ |doc|\n    doc['zipcode'].match(\"\\\\d{5}\")\n|.run(conn)\n</pre>  <p><strong>Example:</strong> Retrieve the domain of a basic email</p> <pre data-language=\"ruby\">r.expr(\"name@domain.com\").match(\".*@(.*)\").run(conn)\n</pre>  <p>Result:</p> <pre data-language=\"ruby\">{\n    :start =&gt; 0,\n    :end =&gt; 20,\n    :str =&gt; \"name@domain.com\",\n    :groups =&gt; [\n        {\n            :end =&gt; 17,\n            :start =&gt; 7,\n            :str =&gt; \"domain.com\"\n        }\n    ]\n}\n</pre>  <p>You can then retrieve only the domain with the <a href=\"get_field\">[]</a> selector.</p> <pre data-language=\"ruby\">r.expr(\"name@domain.com\").match(\".*@(.*)\")[\"groups\"][0][\"str\"].run(conn)\n</pre>  <p>Returns 'domain.com'</p> <p><strong>Example:</strong> Fail to parse out the domain and returns nil.</p> <pre data-language=\"ruby\">r.expr(\"name[at]domain.com\").match(\".*@(.*)\").run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"upcase\">upcase</a></li> <li><a href=\"downcase\">downcase</a></li> <li><a href=\"split\">split</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/string-manipulation/match.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/match\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/match</a>\n  </p>\n</div>\n","split":"<h1 class=\"title\">ReQL command: split</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">string.split([separator, [max_splits]]) → array\n</pre> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/split.png\" class=\"api_command_illustration\"></p> <h2 id=\"description\">Description</h2> <p>Splits a string into substrings. Splits on whitespace when called with no arguments. When called with a separator, splits on that separator. When called with a separator and a maximum number of splits, splits on that separator at most max_splits times. (Can be called with nil as the separator if you want to split on whitespace while still specifying max_splits.)</p> <p>Mimics the behavior of Python’s string.split in edge cases, except for splitting on the empty string, which instead produces an array of single-character strings.</p> <p><strong>Example:</strong> Split on whitespace.</p> <pre data-language=\"ruby\">&gt; r.expr(\"foo  bar bax\").split().run(conn)\n[\"foo\", \"bar\", \"bax\"]\n</pre>  <p><strong>Example:</strong> Split the entries in a CSV file.</p> <pre data-language=\"ruby\">&gt; r.expr(\"12,37,,22,\").split(\",\").run(conn)\n[\"12\", \"37\", \"\", \"22\", \"\"]\n</pre>  <p><strong>Example:</strong> Split a string into characters.</p> <pre data-language=\"ruby\">&gt; r.expr(\"mlucy\").split(\"\").run(conn)\n[\"m\", \"l\", \"u\", \"c\", \"y\"]\n</pre>  <p><strong>Example:</strong> Split the entries in a CSV file, but only at most 3 times.</p> <pre data-language=\"ruby\">&gt; r.expr(\"12,37,,22,\").split(\",\", 3).run(conn)\n[\"12\", \"37\", \"\", \"22,\"]\n</pre>  <p><strong>Example:</strong> Split on whitespace at most once (i.e. get the first word).</p> <pre data-language=\"ruby\">&gt; r.expr(\"foo  bar bax\").split(nil, 1).run(conn)\n[\"foo\", \"bar bax\"]\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"upcase\">upcase</a></li> <li><a href=\"downcase\">downcase</a></li> <li><a href=\"match\">match</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/string-manipulation/split.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/split\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/split</a>\n  </p>\n</div>\n","sub":"<h1 class=\"title\">ReQL command: -</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">number - number → number\ntime - number → time\ntime - time → number\nnumber.sub(number[, number, ...]) → number\ntime.sub(number[, number, ...]) → time\ntime.sub(time) → number\n</pre> <h2 id=\"description\">Description</h2> <p>Subtract two numbers.</p> <p><strong>Example:</strong> It’s as easy as 2 - 2 = 0.</p> <pre data-language=\"ruby\">(r.expr(2) - 2).run(conn)\n</pre>  <p><strong>Example:</strong> Create a date one year ago today.</p> <pre data-language=\"ruby\">r.now() - 365*24*60*60\n</pre>  <p><strong>Example:</strong> Retrieve how many seconds elapsed between today and date.</p> <pre data-language=\"ruby\">r.now() - date\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"add\">+</a></li> <li><a href=\"mul\">*</a></li> <li><a href=\"div\">/</a></li> <li><a href=\"mod\">%</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/sub.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/sub\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/sub</a>\n  </p>\n</div>\n","mul":"<h1 class=\"title\">ReQL command: *</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">number * number → number\narray * number → array\nnumber.mul(number[, number, ...]) → number\narray.mul(number[, number, ...]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Multiply two or more numbers, or make a periodic array.</p> <p><strong>Example:</strong> It’s as easy as 2 * 2 = 4.</p> <pre data-language=\"ruby\">(r.expr(2) * 2).run(conn)\n</pre>  <p><strong>Example:</strong> Arrays can be multiplied by numbers as well.</p> <pre data-language=\"ruby\">(r.expr([\"This\", \"is\", \"the\", \"song\", \"that\", \"never\", \"ends.\"]) * 100).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"add\">+</a></li> <li><a href=\"sub\">-</a></li> <li><a href=\"div\">/</a></li> <li><a href=\"mod\">%</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/mul.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/mul\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/mul</a>\n  </p>\n</div>\n","div":"<h1 class=\"title\">ReQL command: /</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">number / number → number\nnumber.div(number[, number ...]) → number\n</pre> <h2 id=\"description\">Description</h2> <p>Divide two numbers.</p> <p><strong>Example:</strong> It’s as easy as 2 / 2 = 1.</p> <pre data-language=\"ruby\">(r.expr(2) / 2).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"add\">+</a></li> <li><a href=\"sub\">-</a></li> <li><a href=\"mul\">*</a></li> <li><a href=\"mod\">%</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/div.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/div\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/div</a>\n  </p>\n</div>\n","mod":"<h1 class=\"title\">ReQL command: %</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">number % number → number\n</pre> <h2 id=\"description\">Description</h2> <p>Find the remainder when dividing two numbers.</p> <p><strong>Example:</strong> It’s as easy as 2 % 2 = 0.</p> <pre data-language=\"ruby\">(r.expr(2) % 2).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"add\">+</a></li> <li><a href=\"sub\">-</a></li> <li><a href=\"mul\">*</a></li> <li><a href=\"div\">/</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/mod.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/mod\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/mod</a>\n  </p>\n</div>\n","and":"<h1 class=\"title\">ReQL command: &amp;, and</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">bool &amp; bool → bool\nbool.and([bool, bool, ...]) → bool\nr.and([bool, bool, ...]) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Compute the logical “and” of one or more values.</p> <p>The and command can be used as an infix operator after its first argument (r.expr(true).and(false)) or given all of its arguments as parameters (r.and(true, false)). The standard Ruby or operator, |, may also be used with ReQL.</p> <p>Calling and with zero arguments will return true.</p> <p><strong>Example:</strong> Return whether both a and b evaluate to true.</p> <pre data-language=\"ruby\">&gt; a = true\n&gt; b = false\n&gt; (r.expr(a) &amp; b).run(conn)\n\nfalse\n</pre>  <p><strong>Example:</strong> Return whether all of x, y and z evaluate to true.</p> <pre data-language=\"ruby\">&gt; x = true\n&gt; y = true\n&gt; z = true\n&gt; r.and(x, y, z).run(conn)\n\ntrue\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"or\">|, or</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/and.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/and\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/and</a>\n  </p>\n</div>\n","add":"<h1 class=\"title\">ReQL command: +</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">value + value → value\ntime + number → time\nvalue.add(value[, value, ...]) → value\ntime.add(number[, number, ...]) → time\n</pre> <h2 id=\"description\">Description</h2> <p>Sum two or more numbers, or concatenate two or more strings or arrays.</p> <p>The add command can be called in either prefix or infix form; both forms are equivalent. Note that ReQL will not perform type coercion. You cannot, for example, add a string and a number together.</p> <p><strong>Example:</strong> It’s as easy as 2 + 2 = 4.</p> <pre data-language=\"ruby\">&gt; (r.expr(2) + 2).run(conn)\n\n4\n</pre>  <p><strong>Example:</strong> Concatenate strings.</p> <pre data-language=\"ruby\">&gt; (r.expr(\"foo\") + \"bar\" + \"baz\").run(conn)\n\n\"foobarbaz\"\n</pre>  <p><strong>Example:</strong> Concatenate arrays.</p> <pre data-language=\"ruby\">&gt; (r.expr([\"foo\", \"bar\"]) + [\"buzz\"]).run(conn)\n\n[\"foo\", \"bar\", \"buzz\"]\n</pre>  <p><strong>Example:</strong> Create a date one year from now.</p> <pre data-language=\"ruby\">(r.now() + 365*24*60*60).run(conn)\n</pre>  <p><strong>Example:</strong> Use <a href=\"args\">args</a> with add to sum multiple values.</p> <pre data-language=\"ruby\">&gt; vals = [10, 20, 30]\n&gt; r.add(r.args(vals)).run(conn)\n\n60\n</pre>  <p><strong>Example:</strong> Concatenate an array of strings with args.</p> <pre data-language=\"ruby\">&gt; vals = ['foo', 'bar', 'buzz']\n&gt; r.add(r.args(vals)).run(conn)\n\n\"foobarbuzz\"\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"sub\">-</a></li> <li><a href=\"mul\">*</a></li> <li><a href=\"div\">/</a></li> <li><a href=\"mod\">%</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/add.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/add\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/add</a>\n  </p>\n</div>\n","or":"<h1 class=\"title\">ReQL command: |, or</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">bool | bool → bool\nbool.or([bool, bool, ...]) → bool\nr.or([bool, bool, ...]) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Compute the logical “or” of one or more values.</p> <p>The or command can be used as an infix operator after its first argument (r.expr(true).or(false)) or given all of its arguments as parameters (r.or(true, false)). The standard Ruby or operator, |, may also be used with ReQL.</p> <p>Calling or with zero arguments will return false.</p> <p><strong>Example:</strong> Return whether either a or b evaluate to true.</p> <pre data-language=\"ruby\">&gt; a = true\n&gt; b = false\n&gt; (r.expr(a) | b).run(conn)\n\ntrue\n</pre>  <p><strong>Example:</strong> Return whether any of x, y or z evaluate to true.</p> <pre data-language=\"ruby\">&gt; x = false\n&gt; y = false\n&gt; z = false\n&gt; r.or(x, y, z).run(conn)\n\nfalse\n</pre>  <p><strong>Note:</strong> When using or inside a filter predicate to test the values of fields that may not exist on the documents being tested, you should use the default command with those fields so they explicitly return false.</p> <pre data-language=\"ruby\">r.table('posts').filter { |post|\n    post['category'].default('foo').eq('article').\n    or(post['genre'].default('foo').eq('mystery'))\n}.run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"and\">&amp;, and</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/or.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/or\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/or</a>\n  </p>\n</div>\n","eq":"<h1 class=\"title\">ReQL command: eq</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">value.eq(value[, value, ...]) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Test if two or more values are equal.</p> <p><strong>Example:</strong> See if a user’s role field is set to administrator.</p> <pre data-language=\"ruby\">r.table('users').get(1)['role'].eq('administrator').run(conn)\n</pre>  <p><strong>Example:</strong> See if three variables contain equal values.</p> <pre data-language=\"ruby\">r.eq(a, b, c).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"and\">&amp;, and</a></li> <li><a href=\"or\">|, or</a></li> <li><a href=\"ne\">ne</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/eq.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/eq\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/eq</a>\n  </p>\n</div>\n","ne":"<h1 class=\"title\">ReQL command: ne</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">value.ne(value[, value, ...]) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Test if two or more values are not equal.</p> <p><strong>Example:</strong> See if a user’s role field is not set to administrator.</p> <pre data-language=\"ruby\">r.table('users').get(1)['role'].ne('administrator').run(conn)\n</pre>  <p><strong>Example:</strong> See if three variables do not contain equal values.</p> <pre data-language=\"ruby\">r.ne(a, b, c).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"and\">&amp;, and</a></li> <li><a href=\"or\">|, or</a></li> <li><a href=\"eq\">eq</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/ne.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/ne\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/ne</a>\n  </p>\n</div>\n","gt":"<h1 class=\"title\">ReQL command: &gt;, gt</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">value.gt(value[, value, ...]) → bool\nvalue &gt; value → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Compare values, testing if the left-hand value is greater than the right-hand.</p> <p><strong>Example:</strong> Test if a player has scored more than 10 points.</p> <pre data-language=\"ruby\">r.table('players').get(1)['score'].gt(10).run(conn)\n# alternative syntax\n(r.table('players').get(1)['score'] &gt; 10).run(conn)\n</pre>  <p><strong>Example:</strong> Test if variables are ordered from lowest to highest, with no values being equal to one another.</p> <pre data-language=\"ruby\">a = 10\nb = 20\nc = 15\nr.gt(a, b, c).run(conn)\n</pre>  <p>This is the equivalent of the following:</p> <pre data-language=\"ruby\">r.gt(a, b).and(r.gt(b, c)).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"ge\">&gt;=, ge</a></li>   </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/gt.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/gt\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/gt</a>\n  </p>\n</div>\n","ge":"<h1 class=\"title\">ReQL command: &gt;=, ge</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">value.ge(value[, value, ...]) → bool\nvalue &gt;= value → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Compare values, testing if the left-hand value is greater than or equal to the right-hand.</p> <p><strong>Example:</strong> Test if a player has scored 10 points or more.</p> <pre data-language=\"ruby\">r.table('players').get(1)['score'].ge(10).run(conn)\n# alternative syntax\n(r.table('players').get(1)['score'] &gt;= 10).run(conn)\n</pre>  <p><strong>Example:</strong> Test if variables are ordered from lowest to highest.</p> <pre data-language=\"ruby\">a = 10\nb = 20\nc = 15\nr.ge(a, b, c).run(conn)\n</pre>  <p>This is the equivalent of the following:</p> <pre data-language=\"ruby\">r.ge(a, b).and(r.ge(b, c)).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"gt\">&gt;, gt</a></li>   </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/ge.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/ge\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/ge</a>\n  </p>\n</div>\n","lt":"<h1 class=\"title\">ReQL command: </h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">value.lt(value[, value, ...]) → bool\nvalue &lt; value → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Compare values, testing if the left-hand value is less than the right-hand.</p> <p><strong>Example:</strong> Test if a player has scored less than 10 points.</p> <pre data-language=\"ruby\">r.table('players').get(1)['score'].lt(10).run(conn)\n# alternative syntax\n(r.table('players').get(1)['score'] &lt; 10).run(conn)\n</pre>  <p><strong>Example:</strong> Test if variables are ordered from highest to lowest, with no values being equal to one another.</p> <pre data-language=\"ruby\">a = 20\nb = 10\nc = 15\nr.lt(a, b, c).run(conn)\n</pre>  <p>This is the equivalent of the following:</p> <pre data-language=\"ruby\">r.lt(a, b).and(r.lt(b, c)).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"gt\">&gt;, gt</a></li> <li><a href=\"ge\">&gt;=, ge</a></li>  </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/lt.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/lt\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/lt</a>\n  </p>\n</div>\n","le":"<h1 class=\"title\">ReQL command: </h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">value.le(value[, value, ...]) → bool\nvalue &lt;= value → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Compare values, testing if the left-hand value is less than or equal to the right-hand.</p> <p><strong>Example:</strong> Test if a player has scored 10 points or less.</p> <pre data-language=\"ruby\">r.table('players').get(1)['score'].le(10).run(conn)\n# alternative syntax\n(r.table('players').get(1)['score'] &lt;= 10).run(conn)\n</pre>  <p><strong>Example:</strong> Test if variables are ordered from highest to lowest.</p> <pre data-language=\"ruby\">a = 20\nb = 10\nc = 15\nr.le(a, b, c).run(conn)\n</pre>  <p>This is the equivalent of the following:</p> <pre data-language=\"ruby\">r.le(a, b).and(r.le(b, c)).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"gt\">&gt;, gt</a></li> <li><a href=\"ge\">&gt;=, ge</a></li>  </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/le.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/le\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/le</a>\n  </p>\n</div>\n","not":"<h1 class=\"title\">ReQL command: not</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">bool.not() → bool\nnot(bool) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Compute the logical inverse (not) of an expression.</p> <p>not can be called either via method chaining, immediately after an expression that evaluates as a boolean value, or by passing the expression as a parameter to not. All values that are not false or nil will be converted to true.</p> <p><strong>Example:</strong> Not true is false.</p> <pre data-language=\"ruby\">r(true).not().run(conn)\nr.not(true).run(conn)\n</pre>  <p>These evaluate to false.</p> <p><strong>Example:</strong> Return all the users that do not have a “flag” field.</p> <pre data-language=\"ruby\">r.table('users').filter { |user|\n    user.has_fields('flag').not()\n}.run(conn)\n</pre>  <p><strong>Example:</strong> As above, but prefix-style.</p> <pre data-language=\"ruby\">r.table('users').filter { |user|\n    r.not(user.has_fields('flag'))\n}.run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"eq\">eq</a></li> <li><a href=\"ne\">ne</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/not.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/not\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/not</a>\n  </p>\n</div>\n","random":"<h1 class=\"title\">ReQL command: random</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.random() → number\nr.random(number[, number], :float =&gt; true) → number\nr.random(integer[, integer]) → integer\n</pre> <h2 id=\"description\">Description</h2> <p>Generate a random number between given (or implied) bounds. random takes zero, one or two arguments.</p> <ul> <li>With <strong>zero</strong> arguments, the result will be a floating-point number in the range [0,1) (from 0 up to but not including 1).</li> <li>With <strong>one</strong> argument <em>x,</em> the result will be in the range [0,x), and will be integer unless :float =&gt; true is given as an option. Specifying a floating point number without the float option will raise an error.</li> <li>With <strong>two</strong> arguments <em>x</em> and <em>y,</em> the result will be in the range [x,y), and will be integer unless :float =&gt; true is given as an option. If <em>x</em> and <em>y</em> are equal an error will occur, unless the floating-point option has been specified, in which case <em>x</em> will be returned. Specifying a floating point number without the float option will raise an error.</li> </ul> <p>Note: The last argument given will always be the ‘open’ side of the range, but when generating a floating-point number, the ‘open’ side may be less than the ‘closed’ side.</p> <p><strong>Example:</strong> Generate a random number in the range [0,1)</p> <pre data-language=\"ruby\">r.random().run(conn)\n</pre>  <p><strong>Example:</strong> Generate a random integer in the range [0,100)</p> <pre data-language=\"ruby\">r.random(100).run(conn)\nr.random(0, 100).run(conn)\n</pre>  <p><strong>Example:</strong> Generate a random number in the range (-2.24,1.59]</p> <pre data-language=\"ruby\">r.random(1.59, -2.24, :float =&gt; true).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"sample\">sample</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/random.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/random\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/random</a>\n  </p>\n</div>\n","round":"<h1 class=\"title\">ReQL command: round</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.round(number) → number\nnumber.round() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Rounds the given value to the nearest whole integer.</p> <p>For example, values of 1.0 up to but not including 1.5 will return 1.0, similar to <a href=\"floor\">floor</a>; values of 1.5 up to 2.0 will return 2.0, similar to <a href=\"ceil\">ceil</a>.</p> <p><strong>Example:</strong> Round 12.345 to the nearest integer.</p> <pre data-language=\"ruby\">&gt; r.round(12.345).run(conn)\n\n12.0\n</pre>  <p>The round command can also be chained after an expression.</p> <p><strong>Example:</strong> Round -12.345 to the nearest integer.</p> <pre data-language=\"ruby\">&gt; r.expr(-12.345).round().run(conn)\n\n-12.0\n</pre>  <p><strong>Example:</strong> Return Iron Man’s weight, rounded to the nearest integer.</p> <pre data-language=\"ruby\">r.table('superheroes').get('ironman')['weight'].round().run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"ceil\">ceil</a></li> <li><a href=\"floor\">floor</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/round.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/round\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/round</a>\n  </p>\n</div>\n","ceil":"<h1 class=\"title\">ReQL command: ceil</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.ceil(number) → number\nnumber.ceil() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Rounds the given value up, returning the smallest integer value greater than or equal to the given value (the value’s ceiling).</p> <p><strong>Example:</strong> Return the ceiling of 12.345.</p> <pre data-language=\"ruby\">&gt; r.ceil(12.345).run(conn)\n\n13.0\n</pre>  <p>The ceil command can also be chained after an expression.</p> <p><strong>Example:</strong> Return the ceiling of -12.345.</p> <pre data-language=\"ruby\">&gt; r.expr(-12.345).ceil().run(conn)\n\n-12.0\n</pre>  <p><strong>Example:</strong> Return Iron Man’s weight, rounded up with ceil.</p> <pre data-language=\"ruby\">r.table('superheroes').get('ironman')['weight'].ceil().run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"floor\">floor</a></li> <li><a href=\"round\">round</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/ceil.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/ceil\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/ceil</a>\n  </p>\n</div>\n","floor":"<h1 class=\"title\">ReQL command: floor</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.floor(number) → number\nnumber.floor() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Rounds the given value down, returning the largest integer value less than or equal to the given value (the value’s floor).</p> <p><strong>Example:</strong> Return the floor of 12.345.</p> <pre data-language=\"ruby\">&gt; r.floor(12.345).run(conn)\n\n12.0\n</pre>  <p>The floor command can also be chained after an expression.</p> <p><strong>Example:</strong> Return the floor of -12.345.</p> <pre data-language=\"ruby\">&gt; r.expr(-12.345).floor().run(conn)\n\n-13.0\n</pre>  <p><strong>Example:</strong> Return Iron Man’s weight, rounded down with floor.</p> <pre data-language=\"ruby\">r.table('superheroes').get('ironman')['weight'].floor().run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"ceil\">ceil</a></li> <li><a href=\"round\">round</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/math-and-logic/floor.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/floor\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/floor</a>\n  </p>\n</div>\n","now":"<h1 class=\"title\">ReQL command: now</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.now() → time\n</pre> <h2 id=\"description\">Description</h2> <p>Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.</p> <p><strong>Example:</strong> Add a new user with the time at which he subscribed.</p> <pre data-language=\"ruby\">r.table(\"users\").insert({\n    :name =&gt; \"John\",\n    :subscription_date =&gt; r.now()\n}).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"time\">time</a></li> <li><a href=\"epoch_time\">epoch_time</a></li> <li><a href=\"iso8601\">iso8601</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/now.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/now\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/now</a>\n  </p>\n</div>\n","time":"<h1 class=\"title\">ReQL command: time</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.time(year, month, day[, hour, minute, second], timezone) → time\n</pre> <h2 id=\"description\">Description</h2> <p>Create a time object for a specific time.</p> <p>A few restrictions exist on the arguments:</p> <ul> <li>year is an integer between 1400 and 9,999.</li> <li>month is an integer between 1 and 12.</li> <li>day is an integer between 1 and 31.</li> <li>hour is an integer.</li> <li>minutes is an integer.</li> <li>seconds is a double. Its value will be rounded to three decimal places (millisecond-precision).</li> <li>timezone can be 'Z' (for UTC) or a string with the format ±[hh]:[mm].</li> </ul> <p><strong>Example:</strong> Update the birthdate of the user “John” to November 3rd, 1986 UTC.</p> <pre data-language=\"ruby\">r.table(\"user\").get(\"John\").update(:birthdate =&gt; r.time(1986, 11, 3, 'Z')).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"now\">now</a></li> <li><a href=\"epoch_time\">epoch_time</a></li> <li><a href=\"iso8601\">iso8601</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/time.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/time\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/time</a>\n  </p>\n</div>\n","epoch_time":"<h1 class=\"title\">ReQL command: epoch_time</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.epoch_time(number) → time\n</pre> <h2 id=\"description\">Description</h2> <p>Create a time object based on seconds since epoch. The first argument is a double and will be rounded to three decimal places (millisecond-precision).</p> <p><strong>Example:</strong> Update the birthdate of the user “John” to November 3rd, 1986.</p> <pre data-language=\"ruby\">r.table(\"user\").get(\"John\").update(:birthdate =&gt; r.epoch_time(531360000)).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"now\">now</a></li> <li><a href=\"time\">time</a></li> <li><a href=\"iso8601\">iso8601</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/epoch_time.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/epoch_time\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/epoch_time</a>\n  </p>\n</div>\n","iso8601":"<h1 class=\"title\">ReQL command: iso8601</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.iso8601(string[, {default_timezone:''}]) → time\n</pre> <h2 id=\"description\">Description</h2> <p>Create a time object based on an ISO 8601 date-time string (e.g. ‘2013-01-01T01:01:01+00:00’). RethinkDB supports all valid ISO 8601 formats except for week dates. Read more about the ISO 8601 format at <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">Wikipedia</a>.</p> <p>If you pass an ISO 8601 string without a time zone, you must specify the time zone with the default_timezone argument.</p> <p><strong>Example:</strong> Update the time of John’s birth.</p> <pre data-language=\"ruby\">r.table(\"user\").get(\"John\").update(:birth =&gt; r.iso8601('1986-11-03T08:30:00-07:00')).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"now\">now</a></li> <li><a href=\"time\">time</a></li> <li><a href=\"epoch_time\">epoch_time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/iso8601.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/iso8601\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/iso8601</a>\n  </p>\n</div>\n","in_timezone":"<h1 class=\"title\">ReQL command: in_timezone</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">time.in_timezone(timezone) → time\n</pre> <h2 id=\"description\">Description</h2> <p>Return a new time object with a different timezone. While the time stays the same, the results returned by methods such as hours() will change since they take the timezone into account. The timezone argument has to be of the ISO 8601 format.</p> <p><strong>Example:</strong> Hour of the day in San Francisco (UTC/GMT -8, without daylight saving time).</p> <pre data-language=\"ruby\">r.now().in_timezone('-08:00').hours().run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"timezone\">timezone</a></li> <li><a href=\"now\">now</a></li> <li><a href=\"time\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/in_timezone.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/in_timezone\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/in_timezone</a>\n  </p>\n</div>\n","timezone":"<h1 class=\"title\">ReQL command: timezone</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">time.timezone() → string\n</pre> <h2 id=\"description\">Description</h2> <p>Return the timezone of the time object.</p> <p><strong>Example:</strong> Return all the users in the “-07:00” timezone.</p> <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    user[\"subscriptionDate\"].timezone().eq(\"07:00\")\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"in_timezone\">in_timezone</a></li> <li><a href=\"now\">now</a></li> <li><a href=\"time\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/timezone.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/timezone\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/timezone</a>\n  </p>\n</div>\n","during":"<h1 class=\"title\">ReQL command: during</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">time.during(start_time, end_time[, :left_bound =&gt; \"closed\", :right_bound =&gt; \"open\"]) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Return whether a time is between two other times.</p> <p>By default, this is inclusive of the start time and exclusive of the end time. Set left_bound and right_bound to explicitly include (closed) or exclude (open) that endpoint of the range.</p> <p><strong>Example:</strong> Retrieve all the posts that were posted between December 1st, 2013 (inclusive) and December 10th, 2013 (exclusive).</p> <pre data-language=\"ruby\">r.table(\"posts\").filter{ |post|\n    post['date'].during(r.time(2013, 12, 1, \"Z\"), r.time(2013, 12, 10, \"Z\"))\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Retrieve all the posts that were posted between December 1st, 2013 (exclusive) and December 10th, 2013 (inclusive).</p> <pre data-language=\"ruby\">r.table(\"posts\").filter{ |post|\n    post['date'].during(r.time(2013, 12, 1, \"Z\"), r.time(2013, 12, 10, \"Z\"),\n        :left_bound =&gt; \"open\",\n        :right_bound =&gt; \"closed\")\n}.run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"now\">now</a></li> <li><a href=\"time\">time</a></li> <li><a href=\"in_timezone\">in_timezone</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/during.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/during\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/during</a>\n  </p>\n</div>\n","date":"<h1 class=\"title\">ReQL command: date</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">time.date() → time\n</pre> <h2 id=\"description\">Description</h2> <p>Return a new time object only based on the day, month and year (ie. the same day at 00:00).</p> <p><strong>Example:</strong> Retrieve all the users whose birthday is today.</p> <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    user[\"birthdate\"].date().eq(r.now().date())\n}.run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"now\">now</a></li> <li><a href=\"time\">time</a></li> <li><a href=\"in_timezone\">in_timezone</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/date.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/date\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/date</a>\n  </p>\n</div>\n","time_of_day":"<h1 class=\"title\">ReQL command: time_of_day</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">time.time_of_day() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the number of seconds elapsed since the beginning of the day stored in the time object.</p> <p><strong>Example:</strong> Retrieve posts that were submitted before noon.</p> <pre data-language=\"ruby\">r.table(\"posts\").filter{ |post|\n    post[\"date\"].time_of_day() &lt;= 12*60*60\n}.run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"now\">now</a></li> <li><a href=\"time\">time</a></li> <li><a href=\"in_timezone\">in_timezone</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/time_of_day.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/time_of_day\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/time_of_day</a>\n  </p>\n</div>\n","year":"<h1 class=\"title\">ReQL command: year</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">time.year() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the year of a time object.</p> <p><strong>Example:</strong> Retrieve all the users born in 1986.</p> <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    user[\"birthdate\"].year().eq(1986)\n}.run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"now\">now</a></li> <li><a href=\"time\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/year.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/year\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/year</a>\n  </p>\n</div>\n","month":"<h1 class=\"title\">ReQL command: month</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">time.month() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the month of a time object as a number between 1 and 12. For your convenience, the terms r.january, r.february etc. are defined and map to the appropriate integer.</p> <p><strong>Example:</strong> Retrieve all the users who were born in November.</p> <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    user[\"birthdate\"].month().eq(11)\n}\n</pre>  <p><strong>Example:</strong> Retrieve all the users who were born in November.</p> <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    user[\"birthdate\"].month().eq(r.november)\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"now\">now</a></li> <li><a href=\"time\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/month.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/month\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/month</a>\n  </p>\n</div>\n","day":"<h1 class=\"title\">ReQL command: day</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">time.day() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the day of a time object as a number between 1 and 31.</p> <p><strong>Example:</strong> Return the users born on the 24th of any month.</p> <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    user[\"birthdate\"].day().eq(24)\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"now\">now</a></li> <li><a href=\"time\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/day.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/day\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/day</a>\n  </p>\n</div>\n","day_of_week":"<h1 class=\"title\">ReQL command: day_of_week</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">time.day_of_week() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the day of week of a time object as a number between 1 and 7 (following ISO 8601 standard). For your convenience, the terms r.monday, r.tuesday etc. are defined and map to the appropriate integer.</p> <p><strong>Example:</strong> Return today’s day of week.</p> <pre data-language=\"ruby\">r.now().day_of_week().run(conn)\n</pre>  <p><strong>Example:</strong> Retrieve all the users who were born on a Tuesday.</p> <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    user[\"birthdate\"].day_of_week().eq(r.tuesday)\n}\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/day_of_week.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/day_of_week\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/day_of_week</a>\n  </p>\n</div>\n","day_of_year":"<h1 class=\"title\">ReQL command: day_of_year</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">time.day_of_year() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the day of the year of a time object as a number between 1 and 366 (following ISO 8601 standard).</p> <p><strong>Example:</strong> Retrieve all the users who were born the first day of a year.</p> <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    user[\"birthdate\"].day_of_year().eq(1)\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"now\">now</a></li> <li><a href=\"time\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/day_of_year.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/day_of_year\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/day_of_year</a>\n  </p>\n</div>\n","hours":"<h1 class=\"title\">ReQL command: hours</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">time.hours() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the hour in a time object as a number between 0 and 23.</p> <p><strong>Example:</strong> Return all the posts submitted after midnight and before 4am.</p> <pre data-language=\"ruby\">r.table(\"posts\").filter{ |post|\n    post[\"date\"].hours() &lt; 4\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"now\">now</a></li> <li><a href=\"time\">time</a></li> <li><a href=\"in_timezone\">in_timezone</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/hours.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/hours\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/hours</a>\n  </p>\n</div>\n","minutes":"<h1 class=\"title\">ReQL command: minutes</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">time.minutes() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the minute in a time object as a number between 0 and 59.</p> <p><strong>Example:</strong> Return all the posts submitted during the first 10 minutes of every hour.</p> <pre data-language=\"ruby\">r.table(\"posts\").filter{ |post|\n    post[\"date\"].minutes() &lt; 10\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"now\">now</a></li> <li><a href=\"time\">time</a></li> <li><a href=\"in_timezone\">in_timezone</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/minutes.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/minutes\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/minutes</a>\n  </p>\n</div>\n","seconds":"<h1 class=\"title\">ReQL command: seconds</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">time.seconds() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the seconds in a time object as a number between 0 and 59.999 (double precision).</p> <p><strong>Example:</strong> Return the post submitted during the first 30 seconds of every minute.</p> <pre data-language=\"ruby\">r.table(\"posts\").filter{ |post|\n    post[\"date\"].seconds() &lt; 30\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"now\">now</a></li> <li><a href=\"time\">time</a></li> <li><a href=\"in_timezone\">in_timezone</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/seconds.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/seconds\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/seconds</a>\n  </p>\n</div>\n","to_iso8601":"<h1 class=\"title\">ReQL command: to_iso8601</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">time.to_iso8601() → string\n</pre> <h2 id=\"description\">Description</h2> <p>Convert a time object to a string in ISO 8601 format.</p> <p><strong>Example:</strong> Return the current ISO 8601 time.</p> <pre data-language=\"ruby\">&gt; r.now().to_iso8601().run(conn)\n\n\"2015-04-20T18:37:52.690+00:00\"\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"now\">now</a></li> <li><a href=\"time\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/to_iso8601.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/to_iso8601\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/to_iso8601</a>\n  </p>\n</div>\n","to_epoch_time":"<h1 class=\"title\">ReQL command: to_epoch_time</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">time.to_epoch_time() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Convert a time object to its epoch time.</p> <p><strong>Example:</strong> Return the current time in seconds since the Unix Epoch with millisecond-precision.</p> <pre data-language=\"ruby\">r.now().to_epoch_time()\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"now\">now</a></li> <li><a href=\"time\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/dates-and-times/to_epoch_time.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/to_epoch_time\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/to_epoch_time</a>\n  </p>\n</div>\n","args":"<h1 class=\"title\">ReQL command: args</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.args(array) → special\n</pre> <h2 id=\"description\">Description</h2> <p>r.args is a special term that’s used to splice an array of arguments into another term. This is useful when you want to call a variadic term such as <a href=\"get_all\">get_all</a> with a set of arguments produced at runtime.</p> <p>This is analogous to the <strong>splat operator</strong> in Ruby.</p> <p><strong>Example:</strong> Get Alice and Bob from the table people.</p> <pre data-language=\"ruby\">r.table('people').get_all('Alice', 'Bob').run(conn)\n# or\nr.table('people').get_all(r.args(['Alice', 'Bob'])).run(conn)\n</pre>  <p><strong>Example:</strong> Get all of Alice’s children from the table people.</p> <pre data-language=\"ruby\"># r.table('people').get('Alice') returns {id: 'Alice', children: ['Bob', 'Carol']}\nr.table('people').get_all(r.args(r.table('people').get('Alice')['children'])).run(conn)\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/control-structures/args.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/args\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/args</a>\n  </p>\n</div>\n","binary":"<h1 class=\"title\">ReQL command: binary</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.binary(data) → binary\n</pre> <h2 id=\"description\">Description</h2> <p>Encapsulate binary data within a query.</p> <p>The type of data binary accepts depends on the client language. In Ruby, it expects a String object.</p> <p>Binary objects returned to the client in JavaScript will also be of the String type. This can be changed with the binary_format option provided to <a href=\"run\">run</a> to return “raw” objects.</p> <p>Only a limited subset of ReQL commands may be chained after binary:</p> <ul> <li>\n<a href=\"coerce_to\">coerce_to</a> can coerce binary objects to string types</li> <li>\n<a href=\"count\">count</a> will return the number of bytes in the object</li> <li>\n<a href=\"slice\">slice</a> will treat bytes like array indexes (i.e., slice(10,20) will return bytes 10–19)</li> <li>\n<a href=\"type_of\">type_of</a> returns PTYPE&lt;BINARY&gt;</li> <li>\n<a href=\"info\">info</a> will return information on a binary object.</li> </ul> <p><strong>Example:</strong> Save an avatar image to a existing user record.</p> <pre data-language=\"ruby\">f = File.open('./default_avatar.png', 'rb')\navatar_image = f.read()\nf.close()\nr.table('users').get(100).update({:avatar =&gt; r.binary(avatar_image)}).run(conn)\n</pre>  <p><strong>Example:</strong> Get the size of an existing avatar image.</p> <pre data-language=\"ruby\">r.table('users').get(100)['avatar'].count().run(conn)\n\n14156\n</pre>  <p>Read more details about RethinkDB’s binary object support: <a href=\"https://rethinkdb.com/docs/storing-binary/\">Storing binary objects</a>.</p>  <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/control-structures/binary.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/binary\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/binary</a>\n  </p>\n</div>\n","do":"<h1 class=\"title\">ReQL command: do</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">any.do(function) → any\nr.do([args]*, function) → any\nany.do(expr) → any\nr.do([args]*, expr) → any\n</pre> <h2 id=\"description\">Description</h2> <p>Call an anonymous function using return values from other ReQL commands or queries as arguments.</p> <p>The last argument to do (or, in some forms, the only argument) is an expression or an anonymous function which receives values from either the previous arguments or from prefixed commands chained before do. The do command is essentially a single-element <a href=\"map\">map</a>, letting you map a function over just one document. This allows you to bind a query result to a local variable within the scope of do, letting you compute the result just once and reuse it in a complex expression or in a series of ReQL commands.</p> <p>Arguments passed to the do function must be basic data types, and cannot be streams or selections. (Read about <a href=\"https://rethinkdb.com/docs/data-types/\">ReQL data types</a>.) While the arguments will all be evaluated before the function is executed, they may be evaluated in any order, so their values should not be dependent on one another. The type of do’s result is the type of the value returned from the function or last expression.</p> <p><strong>Example:</strong> Compute a golfer’s net score for a game.</p> <pre data-language=\"ruby\">r.table('players').get('f19b5f16-ef14-468f-bd48-e194761df255').do { |player|\n    player['gross_score'] - player['course_handicap']\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Return the best scoring player in a two-player golf match.</p> <pre data-language=\"ruby\">r.do(r.table('players').get(id1), r.table('players').get(id2)) { |player1, player2|\n    r.branch(player1['gross_score'].lt(player2['gross_score']), player1, player2)\n}.run(conn)\n</pre>  <p>Note that branch, the ReQL conditional command, must be used instead of if. See the branch <a href=\"branch\">documentation</a> for more.</p> <p><strong>Example:</strong> Take different actions based on the result of a ReQL <a href=\"https://rethinkdb.com/api/python/insert\">insert</a> command.</p> <pre data-language=\"ruby\">new_data = {\n    :id =&gt; 100,\n    :name =&gt; 'Agatha',\n    :gross_score =&gt; 57,\n    :course_handicap =&gt; 4\n}\nr.table('players').insert(new_data).do{ |doc|\n    r.branch(doc['inserted'].ne(0),\n        r.table('log').insert({:time =&gt; r.now(), :response =&gt; doc, :result =&gt; 'ok'}),\n        r.table('log').insert({:time =&gt; r.now(), :response =&gt; doc, :result =&gt; 'error'})\n    )\n}.run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"map\">map</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/control-structures/do.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/do\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/do</a>\n  </p>\n</div>\n","for_each":"<h1 class=\"title\">ReQL command: for_each</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.for_each(write_function) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Loop over a sequence, evaluating the given write query for each element.</p> <p><strong>Example:</strong> Now that our heroes have defeated their villains, we can safely remove them from the villain table.</p> <pre data-language=\"ruby\">r.table('marvel').for_each {|hero|\n    r.table('villains').get(hero[:villain_defeated]).delete\n}.run(conn)\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/control-structures/for_each.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/for_each\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/for_each</a>\n  </p>\n</div>\n","range":"<h1 class=\"title\">ReQL command: range</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.range() → stream\nr.range([start_value, ]end_value) → stream\n</pre> <h2 id=\"description\">Description</h2> <p>Generate a stream of sequential integers in a specified range.</p> <p>range takes 0, 1 or 2 arguments:</p> <ul> <li>With no arguments, range returns an “infinite” stream from 0 up to and including the maximum integer value;</li> <li>With one argument, range returns a stream from 0 up to but not including the end value;</li> <li>With two arguments, range returns a stream from the start value up to but not including the end value.</li> </ul> <p>Note that the left bound (including the implied left bound of 0 in the 0- and 1-argument form) is always closed and the right bound is always open: the start value will always be included in the returned range and the end value will <em>not</em> be included in the returned range.</p> <p>Any specified arguments must be integers, or a ReqlRuntimeError will be thrown. If the start value is equal or to higher than the end value, no error will be thrown but a zero-element stream will be returned.</p> <p><strong>Example:</strong> Return a four-element range of [0, 1, 2, 3].</p> <pre data-language=\"ruby\">&gt; r.range(4).run(conn)\n\n[0, 1, 2, 3]\n</pre>   <p>You can also use the <a href=\"limit\">limit</a> command with the no-argument variant to achieve the same result in this case:</p> <pre data-language=\"ruby\">&gt; r.range().limit(4).run(conn)\n\n[0, 1, 2, 3]\n</pre>  <p><strong>Example:</strong> Return a range from -5 through 5.</p> <pre data-language=\"ruby\">&gt; r.range(-5, 6).run(conn)\n\n[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/control-structures/range.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/range\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/range</a>\n  </p>\n</div>\n","error":"<h1 class=\"title\">ReQL command: error</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.error(message) → error\n</pre> <h2 id=\"description\">Description</h2> <p>Throw a runtime error. If called with no arguments inside the second argument to default, re-throw the current error.</p> <p><strong>Example:</strong> Iron Man can’t possibly have lost a battle:</p> <pre data-language=\"ruby\">r.table('marvel').get('IronMan').do { |ironman|\n    r.branch(ironman[:victories] &lt; ironman[:battles],\n    r.error('impossible code path'),\n    ironman)\n}.run(conn)\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/control-structures/error.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/error\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/error</a>\n  </p>\n</div>\n","branch":"<h1 class=\"title\">ReQL command: branch</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.branch(test, true_action[, test2, test2_action, ...], false_action) → any\ntest.branch(true_action[, test2, test2_action, ...], false_action) → any\n</pre> <h2 id=\"description\">Description</h2> <p>Perform a branching conditional equivalent to if-then-else.</p> <p>The branch command takes 2n+1 arguments: pairs of conditional expressions and commands to be executed if the conditionals return any value but false or nil (i.e., “truthy” values), with a final “else” command to be evaluated if all of the conditionals are false or nil.</p>  <p>You may call branch infix style on the first test. (See the second example for an illustration.)</p> <pre data-language=\"ruby\">r.branch(test1, val1, test2, val2, elseval)\n</pre>  <p>is the equivalent of the Ruby statement</p> <pre data-language=\"ruby\">if test1\n    val1\nelsif test2\n    val2\nelse\n    elseval\nend\n</pre>  <p><strong>Example:</strong> Test the value of x.</p> <pre data-language=\"ruby\">x = 10\nr.branch((x &gt; 5), 'big', 'small').run(conn)\n\n&gt; \"big\"\n</pre>  <p><strong>Example:</strong> As above, infix-style.</p> <pre data-language=\"ruby\">x = 10\nr.expr(x &gt; 5).branch('big', 'small').run(conn)\n\n&gt; \"big\"\n</pre>  <p><strong>Example:</strong> Categorize heroes by victory counts.</p> <pre data-language=\"ruby\">r.table('marvel').map(\n    r.branch(\n        r.row['victories'] &gt; 100,\n        r.row['name'].add(' is a superhero',)\n        r.row['victories'] &gt; 10,\n        r.row['name'].add(' is a hero',)\n        r.row['name'].add(' is very nice')\n    )\n).run(conn)\n</pre>  <p>If the documents in the table marvel are:</p> <pre data-language=\"ruby\">[\n    { :name =&gt; \"Iron Man\", :victories =&gt; 214 },\n    { :name =&gt; \"Jubilee\", :victories =&gt; 49 },\n    { :name =&gt; \"Slava\", :victories =&gt; 5 }\n]\n</pre>  <p>The results will be:</p> <pre data-language=\"ruby\">[\n    \"Iron Man is a superhero\",\n    \"Jubilee is a hero\",\n    \"Slava is very nice\"\n]\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"do\">do</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/control-structures/branch.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/branch\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/branch</a>\n  </p>\n</div>\n","default":"<h1 class=\"title\">ReQL command: default</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">value.default(default_value | function) → any\nsequence.default(default_value | function) → any\n</pre> <h2 id=\"description\">Description</h2> <p>Provide a default value in case of non-existence errors. The default command evaluates its first argument (the value it’s chained to). If that argument returns nil or a non-existence error is thrown in evaluation, then default returns its second argument. The second argument is usually a default value, but it can be a function that returns a value.</p> <p><strong>Example:</strong> Retrieve the titles and authors of the table posts. In the case where the author field is missing or nil, we want to retrieve the string Anonymous.</p> <pre data-language=\"ruby\">r.table(\"posts\").map{ |post|\n    {\n        :title =&gt; post[:title],\n        :author =&gt; post[:author].default(\"Anonymous\")\n    }\n}.run(conn)\n</pre>   <p>We can rewrite the previous query with r.branch too.</p> <pre data-language=\"ruby\">r.table(\"posts\").map{ |post|\n    r.branch(\n        post.has_fields(\"author\"),\n        {\n            :title =&gt; post[:title],\n            :author =&gt; post[:author]\n        },\n        {\n            :title =&gt; post[:title],\n            :author =&gt; \"Anonymous\" \n        }\n    )\n}.run(conn)\n</pre>  <p><strong>Example:</strong> The default command can also be used to filter documents. Retrieve all our users who are not grown-ups or whose age is unknown (i.e., the field age is missing or equals nil).</p> <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    (user[:age] &lt; 18).default(true)\n}.run(conn)\n</pre>  <p>One more way to write the previous query is to set the age to be -1 when the field is missing.</p> <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    user[:age].default(-1) &lt; 18\n}.run(conn)\n</pre>  <p>This can be accomplished with <a href=\"has_fields\">has_fields</a> rather than default.</p> <pre data-language=\"ruby\">r.table(\"users\").filter{ |user|\n    user.has_fields(\"age\").not() | (user[:age] &lt; 18)\n}.run(conn)\n</pre>  <p>The body of every <a href=\"filter\">filter</a> is wrapped in an implicit .default(false). You can overwrite the value false with the default option.</p> <pre data-language=\"ruby\">r.table('users').filter(:default =&gt; true) {|user|\n    (user[:age] &lt; 18)\n}.run(conn)\n</pre>  <p><strong>Example:</strong> The function form of default receives the error message as its argument.</p> <pre data-language=\"ruby\">r.table(\"posts\").map{ |post|\n    {\n        :title =&gt; post[\"title\"],\n        :author =&gt; post[\"author\"].default{ |err| err }\n    }\n}.run(conn)\n</pre>  <p>This particular example simply returns the error message, so it isn’t very useful. But it would be possible to change the default value based on the specific error message thrown.</p>  <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/control-structures/default.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/default\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/default</a>\n  </p>\n</div>\n","coerce_to":"<h1 class=\"title\">ReQL command: coerce_to</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.coerce_to('array') → array\nvalue.coerce_to('string') → string\nstring.coerce_to('number') → number\narray.coerce_to('object') → object\nsequence.coerce_to('object') → object\nobject.coerce_to('array') → array\nbinary.coerce_to('string') → string\nstring.coerce_to('binary') → binary\n</pre> <h2 id=\"description\">Description</h2> <p>Convert a value of one type into another.</p> <ul> <li>a sequence, selection or object can be coerced to an array</li> <li>a sequence, selection or an array of key-value pairs can be coerced to an object</li> <li>a string can be coerced to a number</li> <li>any datum (single value) can be coerced to a string</li> <li>a binary object can be coerced to a string and vice-versa</li> </ul> <p><strong>Example:</strong> Coerce a stream to an array to store its output in a field. (A stream cannot be stored in a field directly.)</p> <pre data-language=\"ruby\">r.table('posts').map { |post|\n    { :comments =&gt; r.table('comments').get_all(post['id'], {:index =&gt; 'post_id'}).coerce_to('array') }\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Coerce an array of pairs into an object.</p> <pre data-language=\"ruby\">r.expr([['name', 'Ironman'], ['victories', 2000]]).coerce_to('object').run(conn)\n</pre>  <p><strong>Note:</strong> To coerce a list of key-value pairs like ['name', 'Ironman', 'victories', 2000] to an object, use the <a href=\"object\">object</a> command.</p> <p><strong>Example:</strong> Coerce a number to a string.</p> <pre data-language=\"ruby\">r.expr(1).coerce_to('string').run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"object\">object</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/control-structures/coerce_to.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/coerce_to\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/coerce_to</a>\n  </p>\n</div>\n","expr":"<h1 class=\"title\">ReQL command: expr</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.expr(value) → value\n</pre> <h2 id=\"description\">Description</h2> <p>Construct a ReQL JSON object from a native object.</p> <p><strong>Example:</strong> Objects wrapped with expr can then be manipulated by ReQL API functions.</p> <pre data-language=\"ruby\">r.expr({:a =&gt; 'b'}).merge({:b =&gt; [1,2,3]}).run(conn)\n</pre>  <p><strong>Example:</strong> In Ruby, you can also do this with just r.</p> <pre data-language=\"ruby\">r.expr({:a =&gt; 'b'}).merge({:b =&gt; [1,2,3]}).run(conn)\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/control-structures/expr.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/expr\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/expr</a>\n  </p>\n</div>\n","js":"<h1 class=\"title\">ReQL command: js</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.js(js_string[, :timeout =&gt; &lt;number&gt;]) → value\n</pre> <h2 id=\"description\">Description</h2> <p>Create a javascript expression.</p> <p>timeout is the number of seconds before r.js times out. The default value is 5 seconds.</p> <div class=\"infobox \">\n<p>Whenever possible, you should use native ReQL commands rather than r.js for better performance.</p> </div> <p><strong>Example:</strong> Concatenate two strings using JavaScript.</p> <pre data-language=\"ruby\">r.js(\"'str1' + 'str2'\").run(conn)\n</pre>  <p><strong>Example:</strong> Select all documents where the ‘magazines’ field is greater than 5 by running JavaScript on the server.</p> <pre data-language=\"ruby\">r.table('marvel').filter(\nr.js('(function (row) { return row.magazines.length &gt; 5; })')).run(conn)\n</pre>  <p><strong>Example:</strong> You may also specify a timeout in seconds (defaults to 5).</p> <pre data-language=\"ruby\">r.js('while(true) {}', :timeout =&gt; 1.3).run(conn)\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/control-structures/js.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/js\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/js</a>\n  </p>\n</div>\n","type_of":"<h1 class=\"title\">ReQL command: type_of</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">any.type_of() → string\n</pre> <h2 id=\"description\">Description</h2> <p>Gets the type of a ReQL query’s return value.</p> <p>The type will be returned as a string:</p> <ul> <li>ARRAY</li> <li>BOOL</li> <li>DB</li> <li>FUNCTION</li> <li>GROUPED_DATA</li> <li>GROUPED_STREAM</li> <li>MAXVAL</li> <li>MINVAL</li> <li>NULL</li> <li>NUMBER</li> <li>OBJECT</li> <li>PTYPE&lt;BINARY&gt;</li> <li>PTYPE&lt;GEOMETRY&gt;</li> <li>PTYPE&lt;TIME&gt;</li> <li>SELECTION&lt;ARRAY&gt;</li> <li>SELECTION&lt;OBJECT&gt;</li> <li>SELECTION&lt;STREAM&gt;</li> <li>STREAM</li> <li>STRING</li> <li>TABLE_SLICE</li> <li>TABLE</li> </ul> <p>Read the article on <a href=\"https://rethinkdb.com/docs/data-types/\">ReQL data types</a> for a more detailed discussion. Note that some possible return values from type_of are internal values, such as MAXVAL, and unlikely to be returned from queries in standard practice.</p> <p><strong>Example:</strong> Get the type of a string.</p> <pre data-language=\"ruby\">&gt; r.expr(\"foo\").type_of().run(conn)\n\"STRING\"\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/control-structures/type_of.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/type_of\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/type_of</a>\n  </p>\n</div>\n","info":"<h1 class=\"title\">ReQL command: info</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">any.info() → object\nr.info(any) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Get information about a ReQL value.</p> <p><strong>Example:</strong> Get information about a table such as primary key, or cache size.</p> <pre data-language=\"ruby\">r.table('marvel').info().run(conn)\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/control-structures/info.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/info\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/info</a>\n  </p>\n</div>\n","json":"<h1 class=\"title\">ReQL command: json</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.json(json_string) → value\n</pre> <h2 id=\"description\">Description</h2> <p>Parse a JSON string on the server.</p> <p><strong>Example:</strong> Send an array to the server.</p> <pre data-language=\"ruby\">r.json(\"[1,2,3]\").run(conn)\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/control-structures/json.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/json\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/json</a>\n  </p>\n</div>\n","to_json_string":"<h1 class=\"title\">ReQL command: to_json_string</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">value.to_json_string() → string\n</pre> <h2 id=\"description\">Description</h2> <p>Convert a ReQL value or object to a JSON string.</p> <p><strong>Example:</strong> Get a ReQL document as a JSON string.</p> <pre data-language=\"ruby\">&gt; r.table('hero').get(1).to_json_string()\n\n'{\"id\": 1, \"name\": \"Batman\", \"city\": \"Gotham\", \"powers\": [\"martial arts\", \"cinematic entrances\"]}'\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"json\">json</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/control-structures/to_json_string.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/to_json_string\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/to_json_string</a>\n  </p>\n</div>\n","circle":"<h1 class=\"title\">ReQL command: circle</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.circle([longitude, latitude], radius[, {:num_vertices =&gt; 32, :geo_system =&gt; 'WGS84', :unit =&gt; 'm', :fill =&gt; true}]) → geometry\nr.circle(point, radius[, {:num_vertices =&gt; 32, :geo_system =&gt; 'WGS84', :unit =&gt; 'm', :fill =&gt; true}]) → geometry\n</pre> <h2 id=\"description\">Description</h2> <p>Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).</p> <p>The center may be specified either by two floating point numbers, the latitude (−90 to 90) and longitude (−180 to 180) of the point on a perfect sphere (see <a href=\"https://rethinkdb.com/docs/geo-support/\">Geospatial support</a> for more information on ReQL’s coordinate system), or by a point object. The radius is a floating point number whose units are meters by default, although that may be changed with the unit argument.</p> <p>Optional arguments available with circle are:</p> <ul> <li>num_vertices: the number of vertices in the polygon or line. Defaults to 32.</li> <li>geo_system: the reference ellipsoid to use for geographic coordinates. Possible values are WGS84 (the default), a common standard for Earth’s geometry, or unit_sphere, a perfect sphere of 1 meter radius.</li> <li>unit: Unit for the radius distance. Possible values are m (meter, the default), km (kilometer), mi (international mile), nm (nautical mile), ft (international foot).</li> <li>fill: if true (the default) the circle is filled, creating a polygon; if false the circle is unfilled (creating a line).</li> </ul> <p><strong>Example:</strong> Define a circle.</p> <pre data-language=\"ruby\">r.table('geo').insert({\n    :id =&gt; 300,\n    :name =&gt; 'Hayes Valley',\n    :neighborhood =&gt; r.circle([-122.423246,37.779388], 1000)\n}).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"line\">line</a></li> <li><a href=\"polygon\">polygon</a></li> <li><a href=\"point\">point</a></li> <li><a href=\"distance\">distance</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/geospatial/circle.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/circle\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/circle</a>\n  </p>\n</div>\n","distance":"<h1 class=\"title\">ReQL command: distance</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">geometry.distance(geometry[, {:geo_system =&gt; 'WGS84', :unit =&gt; 'm'}]) → number\nr.distance(geometry, geometry[, {:geo_system =&gt; 'WGS84', :unit =&gt; 'm'}]) → number\n</pre> <h2 id=\"description\">Description</h2> <p>Compute the distance between a point and another geometry object. At least one of the geometry objects specified must be a point.</p> <p>Optional arguments available with distance are:</p> <ul> <li>geo_system: the reference ellipsoid to use for geographic coordinates. Possible values are WGS84 (the default), a common standard for Earth’s geometry, or unit_sphere, a perfect sphere of 1 meter radius.</li> <li>unit: Unit to return the distance in. Possible values are m (meter, the default), km (kilometer), mi (international mile), nm (nautical mile), ft (international foot).</li> </ul> <p>If one of the objects is a polygon or a line, the point will be projected onto the line or polygon assuming a perfect sphere model before the distance is computed (using the model specified with geo_system). As a consequence, if the polygon or line is extremely large compared to Earth’s radius and the distance is being computed with the default WGS84 model, the results of distance should be considered approximate due to the deviation between the ellipsoid and spherical models.</p> <p><strong>Example:</strong> Compute the distance between two points on the Earth in kilometers.</p> <pre data-language=\"ruby\">&gt; point1 = r.point(-122.423246,37.779388)\n&gt; point2 = r.point(-117.220406,32.719464)\n&gt; r.distance(point1, point2, {:unit =&gt; 'km'}).run(conn)\n\n734.1252496021841\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"polygon\">polygon</a></li> <li><a href=\"line\">line</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/geospatial/distance.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/distance\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/distance</a>\n  </p>\n</div>\n","http":"<h1 class=\"title\">ReQL command: http</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.http(url[, options]) → value\nr.http(url[, options]) → stream\n</pre> <h2 id=\"description\">Description</h2> <p>Retrieve data from the specified URL over HTTP. The return type depends on the result_format option, which checks the Content-Type of the response by default.</p> <p><strong>Example:</strong> Perform an HTTP GET and store the result in a table.</p> <pre data-language=\"ruby\">r.table('posts').insert(r.http('http://httpbin.org/get')).run(conn)\n</pre>   <p>See <a href=\"https://rethinkdb.com/docs/external-api-access/\">the tutorial</a> on r.http for more examples on how to use this command.</p> <h2 id=\"options\">Options</h2> <h2 id=\"general-options\">General Options</h2> <ul> <li>timeout: timeout period in seconds to wait before aborting the connect (default 30).</li> <li>attempts: number of retry attempts to make after failed connections (default 5).</li> <li>redirects: number of redirect and location headers to follow (default 1).</li> <li>verify: if true, verify the server’s SSL certificate (default true).</li> <li>result_format: string specifying the format to return results in. One of the following: <ul> <li>text: always return a string.</li> <li>json: parse the result as JSON, raising an error on failure.</li> <li>jsonp: parse the result as <a href=\"https://en.wikipedia.org/wiki/JSONP\">Padded JSON</a>.</li> <li>binary: return a binary object.</li> <li>auto: parse the result based on its Content-Type (the default): <ul> <li>application/json: as json</li> <li>application/json-p, text/json-p, text/javascript: as jsonp</li> <li>audio/*, video/*, image/*, application/octet-stream: as binary</li> <li>anything else: as text</li> </ul> </li> </ul> </li> </ul> <h2 id=\"request-options\">Request Options</h2> <ul> <li>method: HTTP method to use for the request. One of GET, POST, PUT, PATCH, DELETE or HEAD. Default: GET.</li> <li>auth: object giving authentication, with the following fields: <ul> <li>type: basic (default) or digest</li> <li>user: username</li> <li>pass: password in plain text</li> </ul> </li> <li>params: object specifying URL parameters to append to the URL as encoded key/value pairs. <span class=\"p\">{</span><span class=\"p\">:</span><span class=\"err\">query</span><span class=\"err\">=&gt;</span><span class=\"err\">'banana'</span><span class=\"p\">,</span><span class=\"p\">:</span><span class=\"err\">limit</span><span class=\"err\">=&gt;</span><span class=\"mi\">2</span><span class=\"p\">}</span> will be appended as ?query=banana&amp;limit=2. Default: no parameters.</li> <li>header: Extra header lines to include. The value may be an array of strings or an object. Default: Accept-Encoding: deflate;q=1, gzip;q=0.5 and User-Agent: RethinkDB/&lt;VERSION&gt;.</li> <li>data: Data to send to the server on a POST, PUT, PATCH, or DELETE request. For POST requests, data may be either an object (which will be written to the body as form-encoded key/value pairs) or a string; for all other requests, data will be serialized as JSON and placed in the request body, sent as Content-Type: application/json. Default: no data will be sent.</li> </ul> <p><strong>Example:</strong> Perform multiple requests with different parameters.</p> <pre data-language=\"ruby\">r.expr([1, 2, 3]).map{|i|\n    r.http('http://httpbin.org/get', :params =&gt; { :user =&gt; i })\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Perform a PUT request for each item in a table.</p> <pre data-language=\"ruby\">r.table('data').map{|row|\n    r.http('http://httpbin.org/put', :method =&gt; 'PUT', :data =&gt; row)\n}.run(conn)\n</pre>  <p><strong>Example:</strong> Perform a POST request with accompanying data.</p> <p>Using form-encoded data:</p> <pre data-language=\"ruby\">r.http('http://httpbin.org/post',\n       :method =&gt; 'POST',\n       :data =&gt; { :player =&gt; 'Bob', :game =&gt; 'tic tac toe' }).run(conn)\n</pre>  <p>Using JSON data:</p> <pre data-language=\"ruby\">r.http('http://httpbin.org/post',\n       :method =&gt; 'POST',\n       :data =&gt; r.expr(value).coerce_to('string'),\n       :header =&gt; { 'Content-Type' =&gt; 'application/json' }).run(conn)\n</pre>  <h2 id=\"pagination\">Pagination</h2> <p>r.http supports depagination, which will request multiple pages in a row and aggregate the results into a stream. The use of this feature is controlled by the optional arguments page and page_limit. Either none or both of these arguments must be provided.</p> <ul> <li>page: This option may specify either a built-in pagination strategy (see below), or a function to provide the next URL and/or params to request.</li> <li>page_limit: An integer specifying the maximum number of requests to issue using the page functionality. This is to prevent overuse of API quotas, and must be specified with page. <ul> <li>-1: no limit</li> <li>0: no requests will be made, an empty stream will be returned</li> <li>n: n requests will be made</li> </ul> </li> </ul> <p>At the moment, the only built-in strategy is 'link-next', which is equivalent to lambda { |info| info['header']['link']['rel=\"next\"'].default(nil) }.</p> <p><strong>Example:</strong> Perform a GitHub search and collect up to 3 pages of results.</p> <pre data-language=\"ruby\">r.http(\"https://api.github.com/search/code?q=addClass+user:mozilla\",\n       :page =&gt; 'link-next', :page_limit =&gt; 3).run(conn)\n</pre>  <p>As a function, page takes one parameter, an object of the format:</p> <pre data-language=\"ruby\">{\n    :params =&gt; object, # the URL parameters used in the last request\n    :header =&gt; object, # the HTTP headers of the last response as key/value pairs\n    :body =&gt; value # the body of the last response in the format specified by `result_format`\n}\n</pre>  <p>The header field will be a parsed version of the header with fields lowercased, like so:</p> <pre data-language=\"ruby\">{\n    'content-length' =&gt; '1024',\n    'content-type' =&gt; 'application/json',\n    'date' =&gt; 'Thu, 1 Jan 1970 00:00:00 GMT',\n    'link' =&gt; {\n        'rel=\"last\"' =&gt; 'http://example.com/?page=34',\n        'rel=\"next\"' =&gt; 'http://example.com/?page=2'\n    }\n}\n</pre>  <p>The page function may return a string corresponding to the next URL to request, nil indicating that there is no more to get, or an object of the format:</p> <pre data-language=\"ruby\">{\n    :url =&gt; string, # the next URL to request, or nil for no more pages\n    :params =&gt; object # new URL parameters to use, will be merged with the previous request's params\n}\n</pre>  <p><strong>Example:</strong> Perform depagination with a custom page function.</p> <pre data-language=\"ruby\">r.http('example.com/pages',\n       :page =&gt; lambda {|info| info['body']['meta']['next'].default(nil)},\n       :page_limit =&gt; 5).run(conn)\n</pre>  <h2 id=\"learn-more\">Learn more</h2> <p>See <a href=\"https://rethinkdb.com/docs/external-api-access/\">the tutorial</a> on r.http for more examples on how to use this command.</p>  <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/control-structures/http.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/http\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/http</a>\n  </p>\n</div>\n","uuid":"<h1 class=\"title\">ReQL command: uuid</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.uuid([string]) → string\n</pre> <h2 id=\"description\">Description</h2> <p>Return a UUID (universally unique identifier), a string that can be used as a unique ID. If a string is passed to uuid as an argument, the UUID will be deterministic, derived from the string’s SHA-1 hash.</p> <p>RethinkDB’s UUIDs are standards-compliant. Without the optional argument, a version 4 random UUID will be generated; with that argument, a version 5 UUID will be generated, using a fixed namespace UUID of 91461c99-f89d-49d2-af96-d8e2e14e9b58. For more information, read <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\">Wikipedia’s UUID article</a>.</p> <p><strong>Example:</strong> Generate a UUID.</p> <pre data-language=\"ruby\">&gt; r.uuid().run(conn)\n\n\"27961a0e-f4e8-4eb3-bf95-c5203e1d87b9\"\n</pre>  <p><strong>Example:</strong> Generate a UUID based on a string.</p> <pre data-language=\"ruby\">&gt; r.uuid(\"slava@example.com\").run(conn)\n\n\"90691cbc-b5ea-5826-ae98-951e30fc3b2d\"\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/control-structures/uuid.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/uuid\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/uuid</a>\n  </p>\n</div>\n","fill":"<h1 class=\"title\">ReQL command: fill</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">line.fill() → polygon\n</pre> <h2 id=\"description\">Description</h2> <p>Convert a Line object into a Polygon object. If the last point does not specify the same coordinates as the first point, polygon will close the polygon by connecting them.</p> <p>Longitude (−180 to 180) and latitude (−90 to 90) of vertices are plotted on a perfect sphere. See <a href=\"https://rethinkdb.com/docs/geo-support/\">Geospatial support</a> for more information on ReQL’s coordinate system.</p> <p>If the last point does not specify the same coordinates as the first point, polygon will close the polygon by connecting them. You cannot directly construct a polygon with holes in it using polygon, but you can use <a href=\"polygon_sub\">polygon_sub</a> to use a second polygon within the interior of the first to define a hole.</p> <p><strong>Example:</strong> Create a line object and then convert it to a polygon.</p> <pre data-language=\"ruby\">r.table('geo').insert({\n    :id =&gt; 201,\n    :rectangle =&gt; r.line(\n        [-122.423246,37.779388],\n        [-122.423246,37.329898],\n        [-121.886420,37.329898],\n        [-121.886420,37.779388]\n    )\n}).run(conn)\n\nr.table('geo').get(201).update(:non_atomic =&gt; true){ |doc|\n    { :rectangle =&gt; doc['rectangle'].fill() }\n}.run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"polygon\">polygon</a></li> <li><a href=\"line\">line</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/geospatial/fill.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/fill\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/fill</a>\n  </p>\n</div>\n","geojson":"<h1 class=\"title\">ReQL command: geojson</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.geojson(geojson) → geometry\n</pre> <h2 id=\"description\">Description</h2> <p>Convert a <a href=\"http://geojson.org\">GeoJSON</a> object to a ReQL geometry object.</p> <p>RethinkDB only allows conversion of GeoJSON objects which have ReQL equivalents: Point, LineString, and Polygon. MultiPoint, MultiLineString, and MultiPolygon are not supported. (You could, however, store multiple points, lines and polygons in an array and use a geospatial multi index with them.)</p> <p>Only longitude/latitude coordinates are supported. GeoJSON objects that use Cartesian coordinates, specify an altitude, or specify their own coordinate reference system will be rejected.</p> <p><strong>Example:</strong> Convert a GeoJSON object to a ReQL geometry object.</p> <pre data-language=\"ruby\">geo_json = {\n    :type =&gt; 'Point',\n    :coordinates =&gt; [ -122.423246, 37.779388 ]\n}\nr.table('geo').insert({\n    :id =&gt; 'sfo',\n    :name =&gt; 'San Francisco',\n    :location =&gt; r.geojson(geo_json)\n}).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"to_geojson\">to_geojson</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/geospatial/geojson.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/geojson\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/geojson</a>\n  </p>\n</div>\n","to_geojson":"<h1 class=\"title\">ReQL command: to_geojson</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">geometry.to_geojson() → object\n</pre> <h2 id=\"description\">Description</h2> <p>Convert a ReQL geometry object to a <a href=\"http://geojson.org\">GeoJSON</a> object.</p> <p><strong>Example:</strong> Convert a ReQL geometry object to a GeoJSON object.</p> <pre data-language=\"ruby\">&gt; r.table('geo').get('sfo')['location'].to_geojson.run(conn)\n\n{\n    :type =&gt; 'Point',\n    :coordinates =&gt; [ -122.423246, 37.779388 ]\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"geojson\">geojson</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/geospatial/to_geojson.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/to_geojson\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/to_geojson</a>\n  </p>\n</div>\n","get_intersecting":"<h1 class=\"title\">ReQL command: get_intersecting</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.get_intersecting(geometry, {:index =&gt; 'indexname'}) → selection&lt;stream&gt;\n</pre> <h2 id=\"description\">Description</h2> <p>Get all documents where the given geometry object intersects the geometry object of the requested geospatial index.</p> <p>The index argument is mandatory. This command returns the same results as table.filter{ |row| row['index'].intersects(geometry) }. The total number of results is limited to the array size limit which defaults to 100,000, but can be changed with the array_limit option to <a href=\"run\">run</a>.</p> <p><strong>Example:</strong> Which of the locations in a list of parks intersect circle1?</p> <pre data-language=\"ruby\">circle1 = r.circle([-117.220406,32.719464], 10, {:unit =&gt; 'mi'})\nr.table('parks').get_intersecting(circle1, {:index =&gt; 'area'}).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"get_nearest\">get_nearest</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/geospatial/get_intersecting.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/get_intersecting\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/get_intersecting</a>\n  </p>\n</div>\n","get_nearest":"<h1 class=\"title\">ReQL command: get_nearest</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.get_nearest(point, {:index =&gt; 'indexname'[, :max_results =&gt; 100, :max_dist =&gt; 100000, :unit =&gt; 'm', :geo_system =&gt; 'WGS84']}) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Return a list of documents closest to a specified point based on a geospatial index, sorted in order of increasing distance.</p> <p>The index argument is mandatory. Optional arguments are:</p> <ul> <li>max_results: the maximum number of results to return (default 100).</li> <li>unit: Unit for the distance. Possible values are m (meter, the default), km (kilometer), mi (international mile), nm (nautical mile), ft (international foot).</li> <li>max_dist: the maximum distance from an object to the specified point (default 100 km).</li> <li>geo_system: the reference ellipsoid to use for geographic coordinates. Possible values are WGS84 (the default), a common standard for Earth’s geometry, or unit_sphere, a perfect sphere of 1 meter radius.</li> </ul> <p>The return value will be an array of two-item objects with the keys dist and doc, set to the distance between the specified point and the document (in the units specified with unit, defaulting to meters) and the document itself, respectively. The array will be sorted by the values of dist.</p> <p><strong>Example:</strong> Return a list of the closest 25 enemy hideouts to the secret base.</p> <pre data-language=\"ruby\">secret_base = r.point(-122.422876,37.777128)\nr.table('hideouts').get_nearest(secret_base, {:index =&gt; 'location',\n    :max_results =&gt; 25}).run(conn)\n</pre>   <div class=\"infobox \">\n<p>If you wish to find all points within a certain radius of another point, it’s often faster to use <a href=\"get_intersecting\">get_intersecting</a> with <a href=\"circle\">circle</a>, as long as the approximation of a circle that circle generates is sufficient.</p> </div>  <h2>Related commands</h2> <ul> <li><a href=\"get_intersecting\">get_intersecting</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/geospatial/get_nearest.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/get_nearest\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/get_nearest</a>\n  </p>\n</div>\n","includes":"<h1 class=\"title\">ReQL command: includes</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.includes(geometry) → sequence\ngeometry.includes(geometry) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Tests whether a geometry object is completely contained within another. When applied to a sequence of geometry objects, includes acts as a <a href=\"filter\">filter</a>, returning a sequence of objects from the sequence that include the argument.</p> <p><strong>Example:</strong> Is point2 included within a 2000-meter circle around point1?</p> <pre data-language=\"ruby\">&gt; point1 = r.point(-117.220406,32.719464)\n&gt; point2 = r.point(-117.206201,32.725186)\n&gt; r.circle(point1, 2000).includes(point2).run(conn)\n\ntrue\n</pre>  <p><strong>Example:</strong> Which of the locations in a list of parks include circle1?</p> <pre data-language=\"ruby\">circle1 = r.circle([-117.220406,32.719464], 10, unit='mi')\nr.table('parks')['area'].includes(circle1).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"intersects\">intersects</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/geospatial/includes.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/includes\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/includes</a>\n  </p>\n</div>\n","intersects":"<h1 class=\"title\">ReQL command: intersects</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">sequence.intersects(geometry) → sequence\ngeometry.intersects(geometry) → bool\nr.intersects(sequence, geometry) → sequence\nr.intersects(geometry, geometry) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, intersects acts as a <a href=\"filter\">filter</a>, returning a sequence of objects from the sequence that intersect with the argument.</p> <p><strong>Example:</strong> Is point2 within a 2000-meter circle around point1?</p> <pre data-language=\"ruby\">&gt; point1 = r.point(-117.220406,32.719464)\n&gt; point2 = r.point(-117.206201,32.725186)\n&gt; r.circle(point1, 2000).intersects(point2).run(conn)\n\ntrue\n</pre>  <p><strong>Example:</strong> Which of the locations in a list of parks intersect circle1?</p> <pre data-language=\"ruby\">circle1 = r.circle([-117.220406,32.719464], 10, {:unit =&gt; 'mi'})\nr.table('parks')('area').intersects(circle1).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"includes\">includes</a></li> <li><a href=\"get_intersecting\">get_intersecting</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/geospatial/intersects.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/intersects\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/intersects</a>\n  </p>\n</div>\n","line":"<h1 class=\"title\">ReQL command: line</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.line([lon1, lat1], [lon2, lat2], ...) → line\nr.line(point1, point2, ...) → line\n</pre> <h2 id=\"description\">Description</h2> <p>Construct a geometry object of type Line. The line can be specified in one of two ways:</p> <ul> <li>Two or more two-item arrays, specifying latitude and longitude numbers of the line’s vertices;</li> <li>Two or more <a href=\"point\">Point</a> objects specifying the line’s vertices.</li> </ul>  <p>Longitude (−180 to 180) and latitude (−90 to 90) of vertices are plotted on a perfect sphere. See <a href=\"https://rethinkdb.com/docs/geo-support/\">Geospatial support</a> for more information on ReQL’s coordinate system.</p> <p><strong>Example:</strong> Define a line.</p> <pre data-language=\"ruby\">r.table('geo').insert({\n    :id =&gt; 101,\n    :route =&gt; r.line([-122.423246,37.779388], [-121.886420,37.329898])\n}).run(conn)\n</pre>  <p><strong>Example:</strong> Define a line using an array of points.</p> <p>You can use the <a href=\"args\">args</a> command to pass an array of Point objects (or latitude-longitude pairs) to line.</p> <pre data-language=\"ruby\">var route = [\n    [-122.423246,37.779388],\n    [-121.886420,37.329898]\n]\nr.table('geo').insert({\n    :id =&gt; 102,\n    :route =&gt; r.line(r.args(route))\n}).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"point\">point</a></li> <li><a href=\"polygon\">polygon</a></li> <li><a href=\"circle\">circle</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/geospatial/line.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/line\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/line</a>\n  </p>\n</div>\n","point":"<h1 class=\"title\">ReQL command: point</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.point(longitude, latitude) → point\n</pre> <h2 id=\"description\">Description</h2> <p>Construct a geometry object of type Point. The point is specified by two floating point numbers, the longitude (−180 to 180) and latitude (−90 to 90) of the point on a perfect sphere. See <a href=\"https://rethinkdb.com/docs/geo-support/\">Geospatial support</a> for more information on ReQL’s coordinate system.</p> <p><strong>Example:</strong> Define a point.</p> <pre data-language=\"ruby\">r.table('geo').insert({\n    :id =&gt; 1,\n    :name =&gt; 'San Francisco',\n    :location =&gt; r.point(-122.423246,37.779388)\n}).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"line\">line</a></li> <li><a href=\"polygon\">polygon</a></li> <li><a href=\"circle\">circle</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/geospatial/point.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/point\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/point</a>\n  </p>\n</div>\n","polygon":"<h1 class=\"title\">ReQL command: polygon</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.polygon([lon1, lat1], [lon2, lat2], [lon3, lat3], ...) → polygon\nr.polygon(point1, point2, point3, ...) → polygon\n</pre> <h2 id=\"description\">Description</h2> <p>Construct a geometry object of type Polygon. The Polygon can be specified in one of two ways:</p> <ul> <li>Three or more two-item arrays, specifying latitude and longitude numbers of the polygon’s vertices;</li> <li>Three or more <a href=\"point\">Point</a> objects specifying the polygon’s vertices.</li> </ul>  <p>Longitude (−180 to 180) and latitude (−90 to 90) of vertices are plotted on a perfect sphere. See <a href=\"https://rethinkdb.com/docs/geo-support/\">Geospatial support</a> for more information on ReQL’s coordinate system.</p> <p>If the last point does not specify the same coordinates as the first point, polygon will close the polygon by connecting them. You cannot directly construct a polygon with holes in it using polygon, but you can use <a href=\"polygon_sub\">polygon_sub</a> to use a second polygon within the interior of the first to define a hole.</p> <p><strong>Example:</strong> Define a polygon.</p> <pre data-language=\"ruby\">r.table('geo').insert({\n    :id =&gt; 101,\n    :rectangle =&gt; r.polygon(\n        [-122.423246,37.779388],\n        [-122.423246,37.329898],\n        [-121.886420,37.329898],\n        [-121.886420,37.779388]\n    )\n}).run(conn)\n</pre>  <p><strong>Example:</strong> Define a polygon using an array of vertices.</p> <p>You can use the <a href=\"args\">args</a> command to pass an array of Point objects (or latitude-longitude pairs) to polygon.</p> <pre data-language=\"ruby\">vertices = [\n    [-122.423246,37.779388],\n    [-122.423246,37.329898],\n    [-121.886420,37.329898],\n    [-121.886420,37.779388]\n]\nr.table('geo').insert({\n    :id =&gt; 102,\n    :rectangle =&gt; r.polygon(r.args(vertices))\n}).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"point\">point</a></li> <li><a href=\"line\">line</a></li> <li><a href=\"circle\">circle</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/geospatial/polygon.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/polygon\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/polygon</a>\n  </p>\n</div>\n","polygon_sub":"<h1 class=\"title\">ReQL command: polygon_sub</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">polygon1.polygon_sub(polygon2) → polygon\n</pre> <h2 id=\"description\">Description</h2> <p>Use polygon2 to “punch out” a hole in polygon1. polygon2 must be completely contained within polygon1 and must have no holes itself (it must not be the output of polygon_sub itself).</p> <p><strong>Example:</strong> Define a polygon with a hole punched in it.</p> <pre data-language=\"ruby\">outer_polygon = r.polygon(\n    [-122.4,37.7],\n    [-122.4,37.3],\n    [-121.8,37.3],\n    [-121.8,37.7]\n)\ninner_polygon = r.polygon(\n    [-122.3,37.4],\n    [-122.3,37.6],\n    [-122.0,37.6],\n    [-122.0,37.4]\n)\nouter_polygon.polygon_sub(inner_polygon).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"polygon\">polygon</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/geospatial/polygon_sub.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/polygon_sub\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/polygon_sub</a>\n  </p>\n</div>\n","config":"<h1 class=\"title\">ReQL command: config</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.config() → selection&lt;object&gt;\ndatabase.config() → selection&lt;object&gt;\n</pre> <h2 id=\"description\">Description</h2> <p>Query (read and/or update) the configurations for individual tables or databases.</p> <p>The config command is a shorthand way to access the table_config or db_config <a href=\"https://rethinkdb.com/docs/system-tables/#configuration-tables\">System tables</a>. It will return the single row from the system that corresponds to the database or table configuration, as if <a href=\"get\">get</a> had been called on the system table with the UUID of the database or table in question.</p> <p><strong>Example:</strong> Get the configuration for the users table.</p> <pre data-language=\"ruby\">r.table('users').config().run(conn)\n</pre>   <p>Example return:</p> <pre data-language=\"ruby\">{\n    :id =&gt; \"31c92680-f70c-4a4b-a49e-b238eb12c023\",\n    :name =&gt; \"users\",\n    :db =&gt; \"superstuff\",\n    :primary_key =&gt; \"id\",\n    :shards =&gt; [\n        {\n            :primary_replica =&gt; \"a\",\n            :replicas =&gt; [\"a\", \"b\"],\n            :nonvoting_replicas: =&gt; []\n        },\n        {\n            :primary_replica =&gt; \"d\",\n            :replicas =&gt; [\"c\", \"d\"],\n            :nonvoting_replicas: =&gt; []\n        }\n    ],\n    :indexes =&gt; [],\n    :write_acks =&gt; \"majority\",\n    :durability =&gt; \"hard\"\n}\n</pre>  <p><strong>Example:</strong> Change the write acknowledgement requirement of the users table.</p> <pre data-language=\"ruby\">r.table('users').config().update({:write_acks =&gt; 'single'}).run(conn)\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/administration/config.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/config\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/config</a>\n  </p>\n</div>\n","wait":"<h1 class=\"title\">ReQL command: wait</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.wait([{:wait_for =&gt; 'all_replicas_ready', :timeout =&gt; &lt;sec&gt;}]) → object\ndatabase.wait([{:wait_for =&gt; 'all_replicas_ready', :timeout =&gt; &lt;sec&gt;}]) → object\nr.wait(table | database, [{:wait_for =&gt; 'all_replicas_ready', :timeout =&gt; &lt;sec&gt;}]) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Wait for a table (or tables) to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring.</p> <p>The wait command takes two optional arguments:</p> <ul> <li>wait_for: a string indicating a table <a href=\"status\">status</a> to wait on before returning, one of ready_for_outdated_reads, ready_for_reads, ready_for_writes, or all_replicas_ready. The default is all_replicas_ready.</li> <li>timeout: a number indicating maximum time, in seconds, to wait for the table to be ready. If this value is exceeded, a ReqlRuntimeError will be thrown. A value of0 means no timeout. The default is 0 (no timeout).</li> </ul> <p>The return value is an object consisting of a single field, ready. The value is an integer indicating the number of tables waited for. It will always be 1 when wait is called on a table, and the total number of tables when called on a database.</p> <div class=\"infobox \">\n<p>Versions of RethinkDB prior to 2.3 allowed wait to be called without a table or database specified. This is no longer valid; wait requires explicit selection of a database or table.</p> </div> <p><strong>Example:</strong> Wait on a table to be ready.</p> <pre data-language=\"ruby\">&gt; r.table('superheroes').wait().run(conn)\n\n{:ready =&gt; 1}\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/administration/wait.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/wait\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/wait</a>\n  </p>\n</div>\n","grant":"<h1 class=\"title\">ReQL command: grant</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">r.grant(\"username\", {:permission =&gt; bool[, ...]}) → object\ndb.grant(\"username\", {:permission =&gt; bool[, ...]}) → object\ntable.grant(\"username\", {:permission =&gt; bool[, ...]}) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Grant or deny access permissions for a user account, globally or on a per-database or per-table basis.</p> <p>There are four different permissions that can be granted to an account:</p> <ul> <li>read allows reading the data in tables.</li> <li>write allows modifying data, including inserting, replacing/updating, and deleting.</li> <li>connect allows a user to open HTTP connections via the <a href=\"http\">http</a> command. This permission can only be granted in global scope.</li> <li>config allows users to create/drop <a href=\"https://rethinkdb.com/docs/secondary-indexes/\">secondary indexes</a> on a table and changing the cluster configuration; to create and drop tables, if granted on a database; and to create and drop databases, if granted globally.</li> </ul> <p>Permissions may be granted on a global scope, or granted for a specific table or database. The scope is defined by calling grant on its own (e.g., r.grant(), on a table (r.table().grant()), or on a database (r.db().grant()).</p> <p>The grant command returns an object of the following form:</p> <pre data-language=\"ruby\">{\n    :granted =&gt; 1,\n    :permissions_changes =&gt; [\n        {\n            :new_val =&gt; { new permissions },\n            :old_val =&gt; { original permissions }\n        }\n    ]\n</pre>  <p>The granted field will always be 1, and the permissions_changes list will have one object, describing the new permissions values and the old values they were changed from (which may be nil).</p> <p>Permissions that are not defined on a local scope will be inherited from the next largest scope. For example, a write operation on a table will first check if write permissions are explicitly set to true or false for that table and account combination; if they are not, the write permissions for the database will be used if those are explicitly set; and if neither table nor database permissions are set for that account, the global write permissions for that account will be used.</p> <p><strong>Note:</strong> For all accounts other than the special, system-defined admin account, permissions that are not explicitly set in any scope will effectively be false. When you create a new user account by inserting a record into the <a href=\"https://rethinkdb.com/docs/system-tables/#users\">system table</a>, that account will have <em>no</em> permissions until they are explicitly granted.</p> <p>For a full description of permissions, read <a href=\"https://rethinkdb.com/docs/permissions-and-accounts/\">Permissions and user accounts</a>.</p> <p><strong>Example:</strong> Grant the chatapp user account read and write permissions on the users database.</p> <pre data-language=\"ruby\">&gt; r.db('users').grant('chatapp', {:read =&gt; True, :write =&gt; true}).run(conn)\n\n{\n    :granted =&gt; 1,\n    :permissions_changes =&gt; [\n        {\n            :new_val =&gt; { :read =&gt; true, :write =&gt; true },\n            :old_val =&gt; { nil }\n        }\n    ]\n</pre>  <p><strong>Example:</strong> Deny write permissions from the chatapp account for the admin table.</p> <pre data-language=\"ruby\">r.db('users').table('admin').grant('chatapp', {'write': false}).run(conn)\n</pre>  <p>This will override the write: true permissions granted in the first example, but for this table only. Other tables in the users database will inherit from the database permissions.</p> <p><strong>Example:</strong> Delete a table-level permission for the chatapp account.</p> <pre data-language=\"ruby\">r.db('users').table('admin').grant('chatapp', {'write': nil}).run(conn)\n</pre>  <p>By specifying nil, the table scope write permission is removed, and will again inherit from the next highest scope (database or global).</p> <p><strong>Example:</strong> Grant chatapp the ability to use HTTP connections.</p> <pre data-language=\"ruby\">r.grant('chatapp', {'connect': true}).run(conn)\n</pre>  <p>This grant can only be given on a global level.</p> <p><strong>Example:</strong> Grant a monitor account read-only access to all databases.</p> <pre data-language=\"ruby\">r.grant('monitor', {'read': true}).run(conn)\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/administration/grant.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/grant\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/grant</a>\n  </p>\n</div>\n","rebalance":"<h1 class=\"title\">ReQL command: rebalance</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.rebalance() → object\ndatabase.rebalance() → object\n</pre> <h2 id=\"description\">Description</h2> <p>Rebalances the shards of a table. When called on a database, all the tables in that database will be rebalanced.</p> <p>The rebalance command operates by measuring the distribution of primary keys within a table and picking split points that will give each shard approximately the same number of documents. It won’t change the number of shards within a table, or change any other configuration aspect for the table or the database.</p> <p>A table will lose availability temporarily after rebalance is called; use the <a href=\"wait\">wait</a> command to wait for the table to become available again, or <a href=\"status\">status</a> to check if the table is available for writing.</p> <p>RethinkDB automatically rebalances tables when the number of shards are increased, and as long as your documents have evenly distributed primary keys—such as the default UUIDs—it is rarely necessary to call rebalance manually. Cases where rebalance may need to be called include:</p> <ul> <li>Tables with unevenly distributed primary keys, such as incrementing integers</li> <li>Changing a table’s primary key type</li> <li>Increasing the number of shards on an empty table, then using non-UUID primary keys in that table</li> </ul> <p>The <a href=\"https://rethinkdb.com/docs/administration-tools/\">web UI</a> (and the <a href=\"info\">info</a> command) can be used to tell you when a table’s shards need to be rebalanced.</p> <p>The return value of rebalance is an object with two fields:</p> <ul> <li>rebalanced: the number of tables rebalanced.</li> <li>status_changes: a list of new and old table status values. Each element of the list will be an object with two fields: <ul> <li>old_val: The table’s <a href=\"status\">status</a> value before rebalance was executed.</li> <li>new_val: The table’s status value after rebalance was executed. (This value will almost always indicate the table is unavailable.)</li> </ul> </li> </ul> <p>See the <a href=\"status\">status</a> command for an explanation of the objects returned in the old_val and new_val fields.</p> <p><strong>Example:</strong> Rebalance a table.</p> <pre data-language=\"ruby\">r.table('superheroes').rebalance().run(conn)\n</pre>   <p>Example return:</p> <pre data-language=\"ruby\">{\n  :rebalanced =&gt; 1,\n  :status_changes =&gt; [\n    {\n      :old_val =&gt; {\n        :db =&gt; \"database\",\n        :id =&gt; \"5cb35225-81b2-4cec-9eef-bfad15481265\",\n        :name =&gt; \"superheroes\",\n        :shards =&gt; [\n          {\n            :primary_replica =&gt; \"jeeves\",\n            :replicas =&gt; [\n              {\n                :server =&gt; \"jeeves\",\n                :state =&gt; \"ready\"\n              }\n            ]\n          },\n          {\n            :primary_replica =&gt; \"jeeves\",\n            :replicas =&gt; [\n              {\n                :server =&gt; \"jeeves\",\n                :state =&gt; \"ready\"\n              }\n            ]\n          }\n        ],\n        :status =&gt; {\n          :all_replicas_ready =&gt; true,\n          :ready_for_outdated_reads =&gt; true,\n          :ready_for_reads =&gt; true,\n          :ready_for_writes =&gt; true\n        }\n      },\n      :new_val =&gt; {\n        :db =&gt; \"database\",\n        :id =&gt; \"5cb35225-81b2-4cec-9eef-bfad15481265\",\n        :name =&gt; \"superheroes\",\n        :shards =&gt; [\n          {\n            :primary_replica =&gt; \"jeeves\",\n            :replicas =&gt; [\n              {\n                :server =&gt; \"jeeves\",\n                :state =&gt; \"transitioning\"\n              }\n            ]\n          },\n          {\n            :primary_replica =&gt; \"jeeves\",\n            :replicas =&gt; [\n              {\n                :server =&gt; \"jeeves\",\n                :state =&gt; \"transitioning\"\n              }\n            ]\n          }\n        ],\n        :status =&gt; {\n          :all_replicas_ready =&gt; false,\n          :ready_for_outdated_reads =&gt; false,\n          :ready_for_reads =&gt; false,\n          :ready_for_writes =&gt; false\n        }\n      }\n\n    }\n  ]\n}\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/administration/rebalance.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/rebalance\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/rebalance</a>\n  </p>\n</div>\n","reconfigure":"<h1 class=\"title\">ReQL command: reconfigure</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.reconfigure({:shards =&gt; &lt;s&gt;, :replicas =&gt; &lt;r&gt;[, :primary_replica_tag =&gt; &lt;t&gt;, :dry_run =&gt; false, :nonvoting_replica_tags =&gt; nil]}) → object\ndatabase.reconfigure({:shards =&gt; &lt;s&gt;, :replicas =&gt; &lt;r&gt;[, :primary_replica_tag =&gt; &lt;t&gt;, :dry_run =&gt; false, :nonvoting_replica_tags =&gt; nil]}) → object\ntable.reconfigure(:emergency_repair =&gt; &lt;option&gt;, :dry_run =&gt; false) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Reconfigure a table’s sharding and replication.</p> <ul> <li>shards: the number of shards, an integer from 1-64. Required.</li> <li>replicas: either an integer or a mapping object. Required. <ul> <li>If replicas is an integer, it specifies the number of replicas per shard. Specifying more replicas than there are servers will return an error.</li> <li>If replicas is an object, it specifies key-value pairs of server tags and the number of replicas to assign to those servers: <span class=\"p\">{:</span><span class=\"err\">tag</span><span class=\"mi\">1</span><span class=\"err\">=&gt;</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"p\">:</span><span class=\"err\">tag</span><span class=\"mi\">2</span><span class=\"err\">=&gt;</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"p\">:</span><span class=\"err\">tag</span><span class=\"mi\">3</span><span class=\"err\">=&gt;</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"err\">...}</span>. For more information about server tags, read <a href=\"https://rethinkdb.com/docs/administration-tools/\">Administration tools</a>.</li> </ul> </li> <li>primary_replica_tag: the primary server specified by its server tag. Required if replicas is an object; the tag must be in the object. This must <em>not</em> be specified if replicas is an integer.</li> <li>dry_run: if true the generated configuration will not be applied to the table, only returned.</li> <li>nonvoting_replica_tags: replicas with these server tags will be added to the nonvoting_replicas list of the resulting configuration. (See <a href=\"https://rethinkdb.com/docs/failover\">failover</a> for details about non-voting replicas.)</li> <li>emergency_repair: Used for the Emergency Repair mode. See the separate section below.</li> </ul> <p>The return value of reconfigure is an object with three fields:</p> <ul> <li>reconfigured: the number of tables reconfigured. This will be 0 if dry_run is true.</li> <li>config_changes: a list of new and old table configuration values. Each element of the list will be an object with two fields: <ul> <li>old_val: The table’s <a href=\"config\">config</a> value before reconfigure was executed.</li> <li>new_val: The table’s config value after reconfigure was executed.</li> </ul> </li> <li>status_changes: a list of new and old table status values. Each element of the list will be an object with two fields: <ul> <li>old_val: The table’s <a href=\"status\">status</a> value before reconfigure was executed.</li> <li>new_val: The table’s status value after reconfigure was executed.</li> </ul> </li> </ul> <p>For config_changes and status_changes, see the <a href=\"config\">config</a> and <a href=\"status\">status</a> commands for an explanation of the objects returned in the old_val and new_val fields.</p> <p>A table will lose availability temporarily after reconfigure is called; use the <a href=\"wait\">wait</a> command to wait for the table to become available again, or <a href=\"status\">status</a> to check if the table is available for writing.</p> <p><strong>Note:</strong> Whenever you call reconfigure, the write durability will be set to hard and the write acknowledgments will be set to majority; these can be changed by using the config command on the table.</p> <p>If reconfigure is called on a database, all the tables in the database will have their configurations affected. The return value will be an array of the objects described above, one per table.</p> <p>Read <a href=\"https://rethinkdb.com/docs/sharding-and-replication/\">Sharding and replication</a> for a complete discussion of the subject, including advanced topics.</p> <p><strong>Example:</strong> Reconfigure a table.</p> <pre data-language=\"ruby\">r.table('superheroes').reconfigure({:shards =&gt; 2, :replicas =&gt; 1}).run(conn)\n</pre>   <p>Example return:</p> <pre data-language=\"ruby\">{\n  :reconfigured =&gt; 1,\n  :config_changes =&gt; [\n    {\n      :new_val =&gt; {\n        :id =&gt; \"31c92680-f70c-4a4b-a49e-b238eb12c023\",\n        :name =&gt; \"superheroes\",\n        :db =&gt; \"superstuff\",\n        :primary_key =&gt; \"id\",\n        :shards =&gt; [\n          {\n            :primary_replica =&gt; \"jeeves\",\n            :replicas =&gt; [\"jeeves\"],\n            :nonvoting_replicas =&gt; []\n          },\n          {\n            :primary_replica =&gt; \"alfred\",\n            :replicas =&gt; [\"alfred\"],\n            :nonvoting_replicas =&gt; []\n          }\n        ],\n        :indexes =&gt; [],\n        :write_acks =&gt; \"majority\",\n        :durability =&gt; \"hard\"\n      },\n      :old_val =&gt; {\n        :id =&gt; \"31c92680-f70c-4a4b-a49e-b238eb12c023\",\n        :name =&gt; \"superheroes\",\n        :db =&gt; \"superstuff\",\n        :primary_key =&gt; \"id\",\n        :shards =&gt; [\n          {\n            :primary_replica =&gt; \"alfred\",\n            :replicas =&gt; [\"alfred\"],\n            :nonvoting_replicas =&gt; []\n          }\n        ],\n        :indexes =&gt; [],\n        :write_acks =&gt; \"majority\",\n        :durability =&gt; \"hard\"\n      }\n    }\n  ],\n  :status_changes =&gt; [\n    {\n      :new_val =&gt; (status object),\n      :old_val =&gt; (status object)\n    }\n  ]\n}\n</pre>  <p><strong>Example:</strong> Reconfigure a table, specifying replicas by server tags.</p> <pre data-language=\"ruby\">r.table('superheroes').reconfigure({:shards =&gt; 2, :replicas =&gt; {:wooster =&gt; 1, :wayne =&gt; 1}, :primary_replica_tag =&gt; 'wooster'}).run(conn)\n\n{\n  :reconfigured =&gt; 1,\n  :config_changes =&gt; [\n    {\n      :new_val =&gt; {\n        :id =&gt; \"31c92680-f70c-4a4b-a49e-b238eb12c023\",\n        :name =&gt; \"superheroes\",\n        :db =&gt; \"superstuff\",\n        :primary_key =&gt; \"id\",\n        :shards =&gt; [\n          {\n            :primary_replica =&gt; \"jeeves\",\n            :replicas =&gt; [\"jeeves\"],\n            :nonvoting_replicas =&gt; []\n          },\n          {\n            :primary_replica =&gt; \"alfred\",\n            :replicas =&gt; [\"alfred\"],\n            :nonvoting_replicas =&gt; []\n          }\n        ],\n        :indexes =&gt; [],\n        :write_acks =&gt; \"majority\",\n        :durability =&gt; \"hard\"\n      },\n      :old_val =&gt; {\n        :id =&gt; \"31c92680-f70c-4a4b-a49e-b238eb12c023\",\n        :name =&gt; \"superheroes\",\n        :db =&gt; \"superstuff\",\n        :primary_key =&gt; \"id\",\n        :shards =&gt; [\n          {\n            :primary_replica =&gt; \"alfred\",\n            :replicas =&gt; [\"alfred\"],\n            :nonvoting_replicas =&gt; []\n          }\n        ],\n        :indexes =&gt; [],\n        :write_acks =&gt; \"majority\",\n        :durability =&gt; \"hard\"\n      }\n    }\n  ],\n  :status_changes =&gt; [\n    {\n      :new_val =&gt; (status object),\n      :old_val =&gt; (status object)\n    }\n  ]\n}\n</pre>  <h2 id=\"emergency-repair-mode\">Emergency Repair mode</h2> <p>RethinkDB supports automatic failover when more than half of the voting replicas for each shard of a table are still available (see the <a href=\"https://rethinkdb.com/docs/failover/\">Failover</a> documentation for more details). However, if half or more of the voting replicas for a shard are lost, failover will not happen automatically, leaving two options:</p> <ul> <li>Bring enough of the missing servers back online to allow automatic failover</li> <li>Use emergency repair mode to reconfigure the table</li> </ul> <p>The emergency_repair argument is effectively a different command; when it is specified, no other arguments to reconfigure are allowed except for dry_run. When it’s executed, each shard of the table is examined and classified into one of three categories:</p> <ul> <li>\n<strong>Healthy:</strong> more than half of the shard’s voting replicas are still available.</li> <li>\n<strong>Repairable:</strong> the shard is not healthy, but has at least one replica, whether voting or non-voting, available.</li> <li>\n<strong>Beyond repair:</strong> the shard has no replicas available.</li> </ul> <p>For each repairable shard, emergency_repair will convert all unavailable voting replicas into non-voting replicas. If all the voting replicas were removed, an arbitrarily-chosen available non-voting replica will be converted into a voting replica. After this operation, all of the shard’s available replicas will be voting replicas.</p> <p>Specify emergency_repair with one of two string options:</p> <ul> <li>unsafe_rollback: shards that are beyond repair will be left alone.</li> <li>unsafe_rollback_or_erase: a shard that is beyond repair will be destroyed and recreated on an available server that holds another shard for that table.</li> </ul> <p>The return value of reconfigure in emergency repair mode is the same as before. Examine the config_changes field to see the old and new configuration settings for the table. As in the normal mode, if you specify emergency_repair with dry_run: true, the table will not actually be reconfigured.</p> <p><strong>Note:</strong> emergency_repair may only be used on individual tables, not on databases. It cannot be used after the db command.</p> <div class=\"infobox infobox-alert\">\n<p><strong>The emergency repair mode is extremely dangerous.</strong> It bypasses normal safeguards that prevent data loss and invalidates the <a href=\"https://rethinkdb.com/docs/consistency/\">consistency guarantees</a> that RethinkDB normally provides, and can easily lose data in either mode—in unsafe_rollback_or_erase mode it could lose <em>all</em> of a shard’s data.</p> </div> <p><strong>Example:</strong> Perform an emergency repair on a table.</p> <pre data-language=\"ruby\">r.table('superheroes').reconfigure(\n    {:emergency_repair =&gt; 'unsafe_rollback'}\n).run(conn)\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/administration/reconfigure.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/reconfigure\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/reconfigure</a>\n  </p>\n</div>\n","status":"<h1 class=\"title\">ReQL command: status</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"ruby\">table.status() → selection&lt;object&gt;\n</pre> <h2 id=\"description\">Description</h2> <p>Return the status of a table.</p> <p>The return value is an object providing information about the table’s shards, replicas and replica readiness states. For a more complete discussion of the object fields, read about the table_status table in <a href=\"https://rethinkdb.com/docs/system-tables/#status-tables\">System tables</a>.</p> <ul> <li>id: the UUID of the table.</li> <li>name: the table’s name.</li> <li>db: the database the table is in.</li> <li>status: the subfields in this field indicate whether all shards of the table are ready to accept the given type of query: outdated_reads, reads and writes. The all_replicas_ready field indicates whether all backfills have finished.</li> <li>shards: one entry for each shard in table_config. Each shard’s object has the following fields: <ul> <li>primary_replicas: a list of zero or more servers acting as primary replicas for the table.</li> <li>replicas: a list of all servers acting as a replica for that shard. The state field may be one of the following: ready, transitioning, backfilling, disconnected, waiting_for_primary, or waiting_for_quorum.</li> </ul> </li> </ul> <p><strong>Example:</strong> Get a table’s status.</p> <pre data-language=\"ruby\">r.table_status('superheroes').run(conn)\n</pre>   <p>Example return:</p> <pre data-language=\"ruby\">{\n  :db =&gt; \"database\",\n  :id =&gt; \"5cb35225-81b2-4cec-9eef-bfad15481265\",\n  :name =&gt; \"superheroes\",\n  :shards =&gt; [\n    {\n      :primary_replicas =&gt; [\"jeeves\"],\n      :replicas =&gt; [\n        {\n          :server =&gt; \"jeeves\",\n          :state =&gt; \"ready\"\n        }\n      ]\n    },\n    {\n      :primary_replicas =&gt; [\"jeeves\"],\n      :replicas =&gt; [\n        {\n          :server =&gt; \"jeeves\",\n          :state =&gt; \"ready\"\n        }\n      ]\n    }\n  ],\n  :status =&gt; {\n    :all_replicas_ready =&gt; true,\n    :ready_for_outdated_reads =&gt; true,\n    :ready_for_reads =&gt; true,\n    :ready_for_writes =&gt; true\n  }\n}\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul>  <div class=\"infobox infobox-info\">\n<p><strong>Contribute:</strong> <a href=\"https://github.com/rethinkdb/docs/blob/master/api/ruby/administration/status.md\">edit this page</a> or <a href=\"https://github.com/rethinkdb/docs/issues\">open an issue</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/ruby/status\" class=\"_attribution-link\">https://rethinkdb.com/api/ruby/status</a>\n  </p>\n</div>\n"}